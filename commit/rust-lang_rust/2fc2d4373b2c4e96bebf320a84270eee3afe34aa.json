{"sha": "2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYzJkNDM3M2IyYzRlOTZiZWJmMzIwYTg0MjcwZWVlM2FmZTM0YWE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-09T17:55:44Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-09T17:55:44Z"}, "message": "Merge #1110\n\n1110: Introduce display module and implement new FunctionSignature for CallInfo's r=matklad a=vipentti\n\nThis introduces a new module `display` in `ra_ide_api` that contains UI-related things, in addition this refactors CallInfo's function signatures into a new `FunctionSignature` type, which implements `Display` and can be converted into `lsp_types::SignatureInformation` in the `conv` layer. \r\n\r\nCurrently only `CallInfo` uses the `FunctionSignature` directly, but `function_label` now uses the same signature and returns it as a string, using the `Display` implementation.\r\n\r\nThis also fixes #960 \r\n\r\nI think this similar structure could be applied to other UI-displayable items, so instead of the `ra_ide_api` returning `Strings` we could return some intermediate structures that can be converted into a UI-displayable `String` easily, but that could also provide some additional information.\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "5bdb33ae377b4004f0b28ec5e2edff71b41e8c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bdb33ae377b4004f0b28ec5e2edff71b41e8c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "html_url": "https://github.com/rust-lang/rust/commit/2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5f700179fc7ed16d2848a6dbc7cf23da3b8df6c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f700179fc7ed16d2848a6dbc7cf23da3b8df6c7", "html_url": "https://github.com/rust-lang/rust/commit/5f700179fc7ed16d2848a6dbc7cf23da3b8df6c7"}, {"sha": "45a2b9252401cc580dfa2e0e761313cc8334d47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/45a2b9252401cc580dfa2e0e761313cc8334d47c", "html_url": "https://github.com/rust-lang/rust/commit/45a2b9252401cc580dfa2e0e761313cc8334d47c"}], "stats": {"total": 622, "additions": 391, "deletions": 231}, "files": [{"sha": "dbb3853d0fcbe0ef95c530339f01f11c34335fa0", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 75, "deletions": 39, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -6,9 +6,8 @@ use ra_syntax::{\n     ast::{self, ArgListOwner},\n     algo::find_node_at_offset,\n };\n-use hir::Docs;\n \n-use crate::{FilePosition, CallInfo, db::RootDatabase};\n+use crate::{FilePosition, CallInfo, FunctionSignature, db::RootDatabase};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n@@ -27,10 +26,10 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let fn_def = ast::FnDef::cast(fn_def).unwrap();\n     let function = hir::source_binder::function_from_source(db, symbol.file_id, fn_def)?;\n \n-    let mut call_info = CallInfo::new(db, function, fn_def)?;\n+    let mut call_info = CallInfo::new(db, function);\n \n     // If we have a calling expression let's find which argument we are on\n-    let num_params = call_info.parameters.len();\n+    let num_params = call_info.parameters().len();\n     let has_self = fn_def.param_list().and_then(|l| l.self_param()).is_some();\n \n     if num_params == 1 {\n@@ -107,28 +106,15 @@ impl<'a> FnCallNode<'a> {\n }\n \n impl CallInfo {\n-    fn new(db: &RootDatabase, function: hir::Function, node: &ast::FnDef) -> Option<Self> {\n-        let label = crate::completion::function_label(node)?;\n-        let doc = function.docs(db);\n+    fn new(db: &RootDatabase, function: hir::Function) -> Self {\n+        let signature = FunctionSignature::from_hir(db, function);\n \n-        Some(CallInfo { parameters: param_list(node), label, doc, active_parameter: None })\n+        CallInfo { signature, active_parameter: None }\n     }\n-}\n-\n-fn param_list(node: &ast::FnDef) -> Vec<String> {\n-    let mut res = vec![];\n-    if let Some(param_list) = node.param_list() {\n-        if let Some(self_param) = param_list.self_param() {\n-            res.push(self_param.syntax().text().to_string())\n-        }\n \n-        // Maybe use param.pat here? See if we can just extract the name?\n-        //res.extend(param_list.params().map(|p| p.syntax().text().to_string()));\n-        res.extend(\n-            param_list.params().filter_map(|p| p.pat()).map(|pat| pat.syntax().text().to_string()),\n-        );\n+    fn parameters(&self) -> &[String] {\n+        &self.signature.parameters\n     }\n-    res\n }\n \n #[cfg(test)]\n@@ -139,6 +125,17 @@ mod tests {\n \n     use super::*;\n \n+    // These are only used when testing\n+    impl CallInfo {\n+        fn doc(&self) -> Option<hir::Documentation> {\n+            self.signature.doc.clone()\n+        }\n+\n+        fn label(&self) -> String {\n+            self.signature.to_string()\n+        }\n+    }\n+\n     fn call_info(text: &str) -> CallInfo {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.call_info(position).unwrap().unwrap()\n@@ -151,7 +148,7 @@ mod tests {\n fn bar() { foo(<|>3, ); }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec!(\"x\".to_string(), \"y\".to_string()));\n+        assert_eq!(info.parameters(), [\"x: u32\", \"y: u32\"]);\n         assert_eq!(info.active_parameter, Some(0));\n     }\n \n@@ -162,7 +159,7 @@ fn bar() { foo(<|>3, ); }\"#,\n fn bar() { foo(3, <|>); }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec!(\"x\".to_string(), \"y\".to_string()));\n+        assert_eq!(info.parameters(), [\"x: u32\", \"y: u32\"]);\n         assert_eq!(info.active_parameter, Some(1));\n     }\n \n@@ -173,18 +170,57 @@ fn bar() { foo(3, <|>); }\"#,\n fn bar() { foo(<|>); }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec!(\"x\".to_string(), \"y\".to_string()));\n+        assert_eq!(info.parameters(), [\"x: u32\", \"y: u32\"]);\n+        assert_eq!(info.active_parameter, Some(0));\n+    }\n+\n+    #[test]\n+    fn test_fn_signature_two_args_first_generics() {\n+        let info = call_info(\n+            r#\"fn foo<T, U: Copy + Display>(x: T, y: U) -> u32 where T: Copy + Display, U: Debug {x + y}\n+fn bar() { foo(<|>3, ); }\"#,\n+        );\n+\n+        assert_eq!(info.parameters(), [\"x: T\", \"y: U\"]);\n+        assert_eq!(\n+            info.label(),\n+            r#\"\n+fn foo<T, U: Copy + Display>(x: T, y: U) -> u32\n+where T: Copy + Display,\n+      U: Debug\n+    \"#\n+            .trim()\n+        );\n         assert_eq!(info.active_parameter, Some(0));\n     }\n \n+    #[test]\n+    fn test_fn_signature_no_params() {\n+        let info = call_info(\n+            r#\"fn foo<T>() -> T where T: Copy + Display {}\n+fn bar() { foo(<|>); }\"#,\n+        );\n+\n+        assert!(info.parameters().is_empty());\n+        assert_eq!(\n+            info.label(),\n+            r#\"\n+fn foo<T>() -> T\n+where T: Copy + Display\n+    \"#\n+            .trim()\n+        );\n+        assert!(info.active_parameter.is_none());\n+    }\n+\n     #[test]\n     fn test_fn_signature_for_impl() {\n         let info = call_info(\n             r#\"struct F; impl F { pub fn new() { F{}} }\n fn bar() {let _ : F = F::new(<|>);}\"#,\n         );\n \n-        assert_eq!(info.parameters, Vec::<String>::new());\n+        assert!(info.parameters().is_empty());\n         assert_eq!(info.active_parameter, None);\n     }\n \n@@ -206,7 +242,7 @@ fn bar() {\n }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"&self\".to_string()]);\n+        assert_eq!(info.parameters(), [\"&self\"]);\n         assert_eq!(info.active_parameter, None);\n     }\n \n@@ -228,7 +264,7 @@ fn bar() {\n }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"&self\".to_string(), \"x\".to_string()]);\n+        assert_eq!(info.parameters(), [\"&self\", \"x: i32\"]);\n         assert_eq!(info.active_parameter, Some(1));\n     }\n \n@@ -248,10 +284,10 @@ fn bar() {\n \"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"j\".to_string()]);\n+        assert_eq!(info.parameters(), [\"j: u32\"]);\n         assert_eq!(info.active_parameter, Some(0));\n-        assert_eq!(info.label, \"fn foo(j: u32) -> u32\".to_string());\n-        assert_eq!(info.doc.map(|it| it.into()), Some(\"test\".to_string()));\n+        assert_eq!(info.label(), \"fn foo(j: u32) -> u32\");\n+        assert_eq!(info.doc().map(|it| it.into()), Some(\"test\".to_string()));\n     }\n \n     #[test]\n@@ -276,11 +312,11 @@ pub fn do() {\n }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"x\".to_string()]);\n+        assert_eq!(info.parameters(), [\"x: i32\"]);\n         assert_eq!(info.active_parameter, Some(0));\n-        assert_eq!(info.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n+        assert_eq!(info.label(), \"pub fn add_one(x: i32) -> i32\");\n         assert_eq!(\n-            info.doc.map(|it| it.into()),\n+            info.doc().map(|it| it.into()),\n             Some(\n                 r#\"Adds one to the number given.\n \n@@ -322,11 +358,11 @@ pub fn do_it() {\n }\"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"x\".to_string()]);\n+        assert_eq!(info.parameters(), [\"x: i32\"]);\n         assert_eq!(info.active_parameter, Some(0));\n-        assert_eq!(info.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n+        assert_eq!(info.label(), \"pub fn add_one(x: i32) -> i32\");\n         assert_eq!(\n-            info.doc.map(|it| it.into()),\n+            info.doc().map(|it| it.into()),\n             Some(\n                 r#\"Adds one to the number given.\n \n@@ -375,10 +411,10 @@ pub fn foo() {\n \"#,\n         );\n \n-        assert_eq!(info.parameters, vec![\"&mut self\".to_string(), \"ctx\".to_string()]);\n+        assert_eq!(info.parameters(), [\"&mut self\", \"ctx: &mut Self::Context\"]);\n         assert_eq!(info.active_parameter, Some(1));\n         assert_eq!(\n-            info.doc.map(|it| it.into()),\n+            info.doc().map(|it| it.into()),\n             Some(\n                 r#\"Method is called when writer finishes.\n "}, {"sha": "deff59cd3ea5b024264aaead03a793ae715f6db5", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -13,7 +13,6 @@ mod complete_scope;\n mod complete_postfix;\n \n use ra_db::SourceDatabase;\n-use ra_syntax::{ast::{self, AstNode}, SyntaxKind::{ATTR, COMMENT}};\n \n use crate::{\n     db,\n@@ -70,43 +69,3 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n     Some(acc)\n }\n-\n-pub fn function_label(node: &ast::FnDef) -> Option<String> {\n-    let label: String = if let Some(body) = node.body() {\n-        let body_range = body.syntax().range();\n-        let label: String = node\n-            .syntax()\n-            .children_with_tokens()\n-            .filter(|child| !child.range().is_subrange(&body_range)) // Filter out body\n-            .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR)) // Filter out comments and attrs\n-            .map(|node| node.to_string())\n-            .collect();\n-        label\n-    } else {\n-        node.syntax().text().to_string()\n-    };\n-\n-    Some(label.trim().to_owned())\n-}\n-\n-pub fn const_label(node: &ast::ConstDef) -> String {\n-    let label: String = node\n-        .syntax()\n-        .children_with_tokens()\n-        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n-        .map(|node| node.to_string())\n-        .collect();\n-\n-    label.trim().to_owned()\n-}\n-\n-pub fn type_label(node: &ast::TypeAliasDef) -> String {\n-    let label: String = node\n-        .syntax()\n-        .children_with_tokens()\n-        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n-        .map(|node| node.to_string())\n-        .collect();\n-\n-    label.trim().to_owned()\n-}"}, {"sha": "9d82f22708f0c3a4ffa7a61142f752cc4fed8f4f", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -145,7 +145,7 @@ mod tests {\n         check_reference_completion(\n             \"dont_show_both_completions_for_shadowing\",\n             r\"\n-            fn foo() -> {\n+            fn foo() {\n                 let bar = 92;\n                 {\n                     let bar = 62;"}, {"sha": "9aa346688758cef8dd5a71bc80996ebfe2ae8bd3", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -6,6 +6,9 @@ use ra_syntax::ast::NameOwner;\n \n use crate::completion::{\n     Completions, CompletionKind, CompletionItemKind, CompletionContext, CompletionItem,\n+};\n+\n+use crate::display::{\n     function_label, const_label, type_label,\n };\n \n@@ -101,7 +104,7 @@ impl Completions {\n                 CompletionItemKind::Function\n             })\n             .set_documentation(func.docs(ctx.db))\n-            .set_detail(detail);\n+            .detail(detail);\n         // If not an import, add parenthesis automatically.\n         if ctx.use_item_syntax.is_none() && !ctx.is_call {\n             tested_by!(inserts_parens_for_function_calls);"}, {"sha": "34adcda6cb85a49140e111de87a9c7b6eaa27248", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__dont_show_both_completions_for_shadowing.snap", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_show_both_completions_for_shadowing.snap", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_show_both_completions_for_shadowing.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_show_both_completions_for_shadowing.snap?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -1,23 +1,23 @@\n ---\n-created: \"2019-02-18T09:22:24.188564584Z\"\n-creator: insta@0.6.2\n+created: \"2019-04-04T14:52:24.531844100Z\"\n+creator: insta@0.7.4\n source: crates/ra_ide_api/src/completion/completion_item.rs\n expression: kind_completions\n ---\n [\n     CompletionItem {\n         label: \"bar\",\n-        source_range: [129; 129),\n-        delete: [129; 129),\n+        source_range: [126; 126),\n+        delete: [126; 126),\n         insert: \"bar\",\n         kind: Binding\n     },\n     CompletionItem {\n         label: \"foo\",\n-        source_range: [129; 129),\n-        delete: [129; 129),\n+        source_range: [126; 126),\n+        delete: [126; 126),\n         insert: \"foo()$0\",\n         kind: Function,\n-        detail: \"fn foo() ->\"\n+        detail: \"fn foo()\"\n     }\n ]"}, {"sha": "ff36df707b01e3453a620e0162907cfcb7f18043", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__return_type.snap", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__return_type.snap", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__return_type.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__return_type.snap?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -1,6 +1,6 @@\n ---\n-created: \"2019-02-18T09:22:24.182964414Z\"\n-creator: insta@0.6.2\n+created: \"2019-04-04T14:52:24.525395600Z\"\n+creator: insta@0.7.4\n source: crates/ra_ide_api/src/completion/completion_item.rs\n expression: kind_completions\n ---\n@@ -18,6 +18,6 @@ expression: kind_completions\n         delete: [47; 47),\n         insert: \"x()$0\",\n         kind: Function,\n-        detail: \"fn x() ->\"\n+        detail: \"fn x()\"\n     }\n ]"}, {"sha": "1b06abf94f5d6a1089f600a5f21433e37119489a", "filename": "crates/ra_ide_api/src/display.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -0,0 +1,82 @@\n+//! This module contains utilities for turning SyntaxNodes and HIR types\n+//! into types that may be used to render in a UI.\n+\n+mod function_signature;\n+mod navigation_target;\n+mod structure;\n+\n+use crate::db::RootDatabase;\n+use ra_syntax::{ast::{self, AstNode, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n+\n+pub use navigation_target::NavigationTarget;\n+pub use structure::{StructureNode, file_structure};\n+pub use function_signature::FunctionSignature;\n+\n+pub(crate) fn function_label(node: &ast::FnDef) -> String {\n+    FunctionSignature::from(node).to_string()\n+}\n+\n+pub(crate) fn const_label(node: &ast::ConstDef) -> String {\n+    let label: String = node\n+        .syntax()\n+        .children_with_tokens()\n+        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n+        .map(|node| node.to_string())\n+        .collect();\n+\n+    label.trim().to_owned()\n+}\n+\n+pub(crate) fn type_label(node: &ast::TypeAliasDef) -> String {\n+    let label: String = node\n+        .syntax()\n+        .children_with_tokens()\n+        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n+        .map(|node| node.to_string())\n+        .collect();\n+\n+    label.trim().to_owned()\n+}\n+\n+pub(crate) fn generic_parameters<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n+    let mut res = vec![];\n+    if let Some(type_params) = node.type_param_list() {\n+        res.extend(type_params.lifetime_params().map(|p| p.syntax().text().to_string()));\n+        res.extend(type_params.type_params().map(|p| p.syntax().text().to_string()));\n+    }\n+    res\n+}\n+\n+pub(crate) fn where_predicates<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n+    let mut res = vec![];\n+    if let Some(clause) = node.where_clause() {\n+        res.extend(clause.predicates().map(|p| p.syntax().text().to_string()));\n+    }\n+    res\n+}\n+\n+pub(crate) fn rust_code_markup<CODE: AsRef<str>>(val: CODE) -> String {\n+    rust_code_markup_with_doc::<_, &str>(val, None)\n+}\n+\n+pub(crate) fn rust_code_markup_with_doc<CODE, DOC>(val: CODE, doc: Option<DOC>) -> String\n+where\n+    CODE: AsRef<str>,\n+    DOC: AsRef<str>,\n+{\n+    if let Some(doc) = doc {\n+        format!(\"```rust\\n{}\\n```\\n\\n{}\", val.as_ref(), doc.as_ref())\n+    } else {\n+        format!(\"```rust\\n{}\\n```\", val.as_ref())\n+    }\n+}\n+\n+// FIXME: this should not really use navigation target. Rather, approximately\n+// resolved symbol should return a `DefId`.\n+pub(crate) fn doc_text_for(db: &RootDatabase, nav: NavigationTarget) -> Option<String> {\n+    match (nav.description(db), nav.docs(db)) {\n+        (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n+        (None, Some(docs)) => Some(docs),\n+        _ => None,\n+    }\n+}"}, {"sha": "d09950bce02ff5110ba2e5f4f4161ea6152d3b97", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -0,0 +1,101 @@\n+use super::{where_predicates, generic_parameters};\n+use crate::db;\n+use std::fmt::{self, Display};\n+use join_to_string::join;\n+use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n+use std::convert::From;\n+use hir::{Docs, Documentation};\n+\n+/// Contains information about a function signature\n+#[derive(Debug)]\n+pub struct FunctionSignature {\n+    /// Optional visibility\n+    pub visibility: Option<String>,\n+    /// Name of the function\n+    pub name: Option<String>,\n+    /// Documentation for the function\n+    pub doc: Option<Documentation>,\n+    /// Generic parameters\n+    pub generic_parameters: Vec<String>,\n+    /// Parameters of the function\n+    pub parameters: Vec<String>,\n+    /// Optional return type\n+    pub ret_type: Option<String>,\n+    /// Where predicates\n+    pub where_predicates: Vec<String>,\n+}\n+\n+impl FunctionSignature {\n+    pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n+        self.doc = doc;\n+        self\n+    }\n+\n+    pub(crate) fn from_hir(db: &db::RootDatabase, function: hir::Function) -> Self {\n+        let doc = function.docs(db);\n+        let (_, ast_node) = function.source(db);\n+        FunctionSignature::from(&*ast_node).with_doc_opt(doc)\n+    }\n+}\n+\n+impl From<&'_ ast::FnDef> for FunctionSignature {\n+    fn from(node: &ast::FnDef) -> FunctionSignature {\n+        fn param_list(node: &ast::FnDef) -> Vec<String> {\n+            let mut res = vec![];\n+            if let Some(param_list) = node.param_list() {\n+                if let Some(self_param) = param_list.self_param() {\n+                    res.push(self_param.syntax().text().to_string())\n+                }\n+\n+                res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\n+            }\n+            res\n+        }\n+\n+        FunctionSignature {\n+            visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+            name: node.name().map(|n| n.text().to_string()),\n+            ret_type: node\n+                .ret_type()\n+                .and_then(|r| r.type_ref())\n+                .map(|n| n.syntax().text().to_string()),\n+            parameters: param_list(node),\n+            generic_parameters: generic_parameters(node),\n+            where_predicates: where_predicates(node),\n+            // docs are processed separately\n+            doc: None,\n+        }\n+    }\n+}\n+\n+impl Display for FunctionSignature {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if let Some(t) = &self.visibility {\n+            write!(f, \"{} \", t)?;\n+        }\n+\n+        if let Some(name) = &self.name {\n+            write!(f, \"fn {}\", name)?;\n+        }\n+\n+        if !self.generic_parameters.is_empty() {\n+            join(self.generic_parameters.iter())\n+                .separator(\", \")\n+                .surround_with(\"<\", \">\")\n+                .to_fmt(f)?;\n+        }\n+\n+        join(self.parameters.iter()).separator(\", \").surround_with(\"(\", \")\").to_fmt(f)?;\n+\n+        if let Some(t) = &self.ret_type {\n+            write!(f, \" -> {}\", t)?;\n+        }\n+\n+        if !self.where_predicates.is_empty() {\n+            write!(f, \"\\nwhere \")?;\n+            join(self.where_predicates.iter()).separator(\",\\n      \").to_fmt(f)?;\n+        }\n+\n+        Ok(())\n+    }\n+}"}, {"sha": "3c518faf50f09fdad47af42b9be8899ec185b2a8", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "renamed", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -1,7 +1,9 @@\n-use ra_db::FileId;\n+use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    SyntaxNode, SyntaxNodePtr, AstNode, SmolStr, TextRange, ast,\n+    SyntaxNode, SyntaxNodePtr, AstNode, SmolStr, TextRange, TreeArc,\n     SyntaxKind::{self, NAME},\n+    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner},\n+    algo::visit::{visitor, Visitor},\n };\n use hir::{ModuleSource, FieldSource, Name, ImplItem};\n \n@@ -248,4 +250,80 @@ impl NavigationTarget {\n             container_name: None,\n         }\n     }\n+\n+    pub(crate) fn node(&self, db: &RootDatabase) -> Option<TreeArc<SyntaxNode>> {\n+        let source_file = db.parse(self.file_id());\n+        let source_file = source_file.syntax();\n+        let node = source_file\n+            .descendants()\n+            .find(|node| node.kind() == self.kind() && node.range() == self.full_range())?\n+            .to_owned();\n+        Some(node)\n+    }\n+\n+    pub(crate) fn docs(&self, db: &RootDatabase) -> Option<String> {\n+        let node = self.node(db)?;\n+        fn doc_comments<N: ast::DocCommentsOwner>(node: &N) -> Option<String> {\n+            node.doc_comment_text()\n+        }\n+\n+        visitor()\n+            .visit(doc_comments::<ast::FnDef>)\n+            .visit(doc_comments::<ast::StructDef>)\n+            .visit(doc_comments::<ast::EnumDef>)\n+            .visit(doc_comments::<ast::TraitDef>)\n+            .visit(doc_comments::<ast::Module>)\n+            .visit(doc_comments::<ast::TypeAliasDef>)\n+            .visit(doc_comments::<ast::ConstDef>)\n+            .visit(doc_comments::<ast::StaticDef>)\n+            .visit(doc_comments::<ast::NamedFieldDef>)\n+            .visit(doc_comments::<ast::EnumVariant>)\n+            .accept(&node)?\n+    }\n+\n+    /// Get a description of this node.\n+    ///\n+    /// e.g. `struct Name`, `enum Name`, `fn Name`\n+    pub(crate) fn description(&self, db: &RootDatabase) -> Option<String> {\n+        // FIXME: After type inference is done, add type information to improve the output\n+        let node = self.node(db)?;\n+\n+        fn visit_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n+        where\n+            T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n+        {\n+            let mut string = visit_node(node, prefix)?;\n+\n+            if let Some(type_ref) = node.ascribed_type() {\n+                string.push_str(\": \");\n+                type_ref.syntax().text().push_to(&mut string);\n+            }\n+\n+            Some(string)\n+        }\n+\n+        fn visit_node<T>(node: &T, label: &str) -> Option<String>\n+        where\n+            T: NameOwner + VisibilityOwner,\n+        {\n+            let mut string =\n+                node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n+            string.push_str(label);\n+            string.push_str(node.name()?.text().as_str());\n+            Some(string)\n+        }\n+\n+        visitor()\n+            .visit(|node: &ast::FnDef| Some(crate::display::function_label(node)))\n+            .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n+            .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n+            .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n+            .visit(|node: &ast::Module| visit_node(node, \"mod \"))\n+            .visit(|node: &ast::TypeAliasDef| visit_node(node, \"type \"))\n+            .visit(|node: &ast::ConstDef| visit_ascribed_node(node, \"const \"))\n+            .visit(|node: &ast::StaticDef| visit_ascribed_node(node, \"static \"))\n+            .visit(|node: &ast::NamedFieldDef| visit_ascribed_node(node, \"\"))\n+            .visit(|node: &ast::EnumVariant| Some(node.name()?.text().to_string()))\n+            .accept(&node)?\n+    }\n }", "previous_filename": "crates/ra_ide_api/src/navigation_target.rs"}, {"sha": "32dd994849e31a28b2917c29e24772b7c9154a48", "filename": "crates/ra_ide_api/src/display/snapshots/tests__file_structure.snap", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fsnapshots%2Ftests__file_structure.snap", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fsnapshots%2Ftests__file_structure.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fsnapshots%2Ftests__file_structure.snap?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -1,7 +1,7 @@\n ---\n-created: \"2019-02-05T22:03:50.763530100Z\"\n-creator: insta@0.6.1\n-source: crates/ra_ide_api/src/structure.rs\n+created: \"2019-04-08T09:44:50.196004400Z\"\n+creator: insta@0.7.4\n+source: crates/ra_ide_api/src/display/structure.rs\n expression: structure\n ---\n [", "previous_filename": "crates/ra_ide_api/src/snapshots/tests__file_structure.snap"}, {"sha": "ec2c9bbc6557b36a2b0d5e1f04ea6e28e8e1ad86", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "previous_filename": "crates/ra_ide_api/src/structure.rs"}, {"sha": "3a8c93b99fc4fb0d37b03767df5809252d531591", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 3, "deletions": 107, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -1,11 +1,11 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, SyntaxNode, TreeArc, ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner},\n-    algo::{find_covering_element, find_node_at_offset, find_token_at_offset, visit::{visitor, Visitor}},\n+    AstNode, ast,\n+    algo::{find_covering_element, find_node_at_offset, find_token_at_offset},\n };\n use hir::HirDisplay;\n \n-use crate::{db::RootDatabase, RangeInfo, FilePosition, FileRange, NavigationTarget};\n+use crate::{db::RootDatabase, RangeInfo, FilePosition, FileRange, display::{rust_code_markup, doc_text_for}};\n \n /// Contains the results when hovering over an item\n #[derive(Debug, Clone)]\n@@ -145,110 +145,6 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n     }\n }\n \n-fn rust_code_markup<CODE: AsRef<str>>(val: CODE) -> String {\n-    rust_code_markup_with_doc::<_, &str>(val, None)\n-}\n-\n-fn rust_code_markup_with_doc<CODE, DOC>(val: CODE, doc: Option<DOC>) -> String\n-where\n-    CODE: AsRef<str>,\n-    DOC: AsRef<str>,\n-{\n-    if let Some(doc) = doc {\n-        format!(\"```rust\\n{}\\n```\\n\\n{}\", val.as_ref(), doc.as_ref())\n-    } else {\n-        format!(\"```rust\\n{}\\n```\", val.as_ref())\n-    }\n-}\n-\n-// FIXME: this should not really use navigation target. Rather, approximately\n-// resolved symbol should return a `DefId`.\n-fn doc_text_for(db: &RootDatabase, nav: NavigationTarget) -> Option<String> {\n-    match (nav.description(db), nav.docs(db)) {\n-        (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n-        (None, Some(docs)) => Some(docs),\n-        _ => None,\n-    }\n-}\n-\n-impl NavigationTarget {\n-    fn node(&self, db: &RootDatabase) -> Option<TreeArc<SyntaxNode>> {\n-        let source_file = db.parse(self.file_id());\n-        let source_file = source_file.syntax();\n-        let node = source_file\n-            .descendants()\n-            .find(|node| node.kind() == self.kind() && node.range() == self.full_range())?\n-            .to_owned();\n-        Some(node)\n-    }\n-\n-    fn docs(&self, db: &RootDatabase) -> Option<String> {\n-        let node = self.node(db)?;\n-        fn doc_comments<N: ast::DocCommentsOwner>(node: &N) -> Option<String> {\n-            node.doc_comment_text()\n-        }\n-\n-        visitor()\n-            .visit(doc_comments::<ast::FnDef>)\n-            .visit(doc_comments::<ast::StructDef>)\n-            .visit(doc_comments::<ast::EnumDef>)\n-            .visit(doc_comments::<ast::TraitDef>)\n-            .visit(doc_comments::<ast::Module>)\n-            .visit(doc_comments::<ast::TypeAliasDef>)\n-            .visit(doc_comments::<ast::ConstDef>)\n-            .visit(doc_comments::<ast::StaticDef>)\n-            .visit(doc_comments::<ast::NamedFieldDef>)\n-            .visit(doc_comments::<ast::EnumVariant>)\n-            .accept(&node)?\n-    }\n-\n-    /// Get a description of this node.\n-    ///\n-    /// e.g. `struct Name`, `enum Name`, `fn Name`\n-    fn description(&self, db: &RootDatabase) -> Option<String> {\n-        // FIXME: After type inference is done, add type information to improve the output\n-        let node = self.node(db)?;\n-\n-        fn visit_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n-        where\n-            T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n-        {\n-            let mut string = visit_node(node, prefix)?;\n-\n-            if let Some(type_ref) = node.ascribed_type() {\n-                string.push_str(\": \");\n-                type_ref.syntax().text().push_to(&mut string);\n-            }\n-\n-            Some(string)\n-        }\n-\n-        fn visit_node<T>(node: &T, label: &str) -> Option<String>\n-        where\n-            T: NameOwner + VisibilityOwner,\n-        {\n-            let mut string =\n-                node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n-            string.push_str(label);\n-            string.push_str(node.name()?.text().as_str());\n-            Some(string)\n-        }\n-\n-        visitor()\n-            .visit(crate::completion::function_label)\n-            .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n-            .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n-            .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n-            .visit(|node: &ast::Module| visit_node(node, \"mod \"))\n-            .visit(|node: &ast::TypeAliasDef| visit_node(node, \"type \"))\n-            .visit(|node: &ast::ConstDef| visit_ascribed_node(node, \"const \"))\n-            .visit(|node: &ast::StaticDef| visit_ascribed_node(node, \"static \"))\n-            .visit(|node: &ast::NamedFieldDef| visit_ascribed_node(node, \"\"))\n-            .visit(|node: &ast::EnumVariant| Some(node.name()?.text().to_string()))\n-            .accept(&node)?\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use ra_syntax::TextRange;"}, {"sha": "d25795adcea7e1533b6b721bf0013433160c8ce4", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -13,7 +13,6 @@\n mod db;\n pub mod mock_analysis;\n mod symbol_index;\n-mod navigation_target;\n mod change;\n \n mod status;\n@@ -34,9 +33,9 @@ mod folding_ranges;\n mod line_index;\n mod line_index_utils;\n mod join_lines;\n-mod structure;\n mod typing;\n mod matching_brace;\n+mod display;\n \n #[cfg(test)]\n mod marks;\n@@ -62,16 +61,15 @@ pub use crate::{\n     change::{AnalysisChange, LibraryData},\n     completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n     runnables::{Runnable, RunnableKind},\n-    navigation_target::NavigationTarget,\n     references::ReferenceSearchResult,\n     assists::{Assist, AssistId},\n     hover::{HoverResult},\n     line_index::{LineIndex, LineCol},\n     line_index_utils::translate_offset_with_edit,\n     folding_ranges::{Fold, FoldKind},\n     syntax_highlighting::HighlightedRange,\n-    structure::{StructureNode, file_structure},\n     diagnostics::Severity,\n+    display::{FunctionSignature, NavigationTarget, StructureNode, file_structure},\n };\n \n pub use ra_db::{\n@@ -243,9 +241,7 @@ impl<T> RangeInfo<T> {\n \n #[derive(Debug)]\n pub struct CallInfo {\n-    pub label: String,\n-    pub doc: Option<Documentation>,\n-    pub parameters: Vec<String>,\n+    pub signature: FunctionSignature,\n     pub active_parameter: Option<usize>,\n }\n \n@@ -387,7 +383,7 @@ impl Analysis {\n     /// file outline.\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n         let file = self.db.parse(file_id);\n-        structure::file_structure(&file)\n+        file_structure(&file)\n     }\n \n     /// Returns the set of folding ranges."}, {"sha": "914d3fc71a3a931a6ccd8d4f666085afb1e8970e", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -275,7 +275,7 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n mod tests {\n     use ra_syntax::SmolStr;\n     use crate::{\n-        navigation_target::NavigationTarget,\n+        display::NavigationTarget,\n         mock_analysis::single_file,\n         Query,\n };"}, {"sha": "4d6ede316c834f02bff274630a959a8472951f10", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -174,6 +174,28 @@ impl Conv for ra_ide_api::Documentation {\n     }\n }\n \n+impl Conv for ra_ide_api::FunctionSignature {\n+    type Output = lsp_types::SignatureInformation;\n+    fn conv(self) -> Self::Output {\n+        use lsp_types::{ParameterInformation, ParameterLabel, SignatureInformation};\n+\n+        let label = self.to_string();\n+\n+        let documentation = self.doc.map(|it| it.conv());\n+\n+        let parameters: Vec<ParameterInformation> = self\n+            .parameters\n+            .into_iter()\n+            .map(|param| ParameterInformation {\n+                label: ParameterLabel::Simple(param),\n+                documentation: None,\n+            })\n+            .collect();\n+\n+        SignatureInformation { label, documentation, parameters: Some(parameters) }\n+    }\n+}\n+\n impl ConvWith for TextEdit {\n     type Ctx = LineIndex;\n     type Output = Vec<lsp_types::TextEdit>;"}, {"sha": "b96deb061e8605c4e5409011f8e75d0878c8f930", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2d4373b2c4e96bebf320a84270eee3afe34aa/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "patch": "@@ -3,8 +3,8 @@ use lsp_types::{\n     CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity, CodeAction,\n     DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n     FoldingRangeKind, FoldingRangeParams, Hover, HoverContents, Location, MarkupContent,\n-    MarkupKind, ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range,\n-    RenameParams, SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit,\n+    MarkupKind, Position, PrepareRenameResponse, Range,\n+    RenameParams,SymbolInformation, TextDocumentIdentifier, TextEdit,\n     WorkspaceEdit,\n };\n use ra_ide_api::{\n@@ -403,26 +403,13 @@ pub fn handle_signature_help(\n ) -> Result<Option<req::SignatureHelp>> {\n     let position = params.try_conv_with(&world)?;\n     if let Some(call_info) = world.analysis().call_info(position)? {\n-        let parameters: Vec<ParameterInformation> = call_info\n-            .parameters\n-            .into_iter()\n-            .map(|param| ParameterInformation {\n-                label: ParameterLabel::Simple(param.clone()),\n-                documentation: None,\n-            })\n-            .collect();\n+        let active_parameter = call_info.active_parameter.map(|it| it as i64);\n+        let sig_info = call_info.signature.conv();\n \n-        let documentation = call_info.doc.map(|it| it.conv());\n-\n-        let sig_info = SignatureInformation {\n-            label: call_info.label,\n-            documentation,\n-            parameters: Some(parameters),\n-        };\n         Ok(Some(req::SignatureHelp {\n             signatures: vec![sig_info],\n             active_signature: Some(0),\n-            active_parameter: call_info.active_parameter.map(|it| it as i64),\n+            active_parameter,\n         }))\n     } else {\n         Ok(None)"}]}