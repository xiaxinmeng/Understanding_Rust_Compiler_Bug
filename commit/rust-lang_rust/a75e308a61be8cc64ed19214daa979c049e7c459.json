{"sha": "a75e308a61be8cc64ed19214daa979c049e7c459", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NWUzMDhhNjFiZThjYzY0ZWQxOTIxNGRhYTk3OWMwNDllN2M0NTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:03:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:03:35Z"}, "message": "rollup merge of #21780: steveklabnik/no_as_slice\n\nUse auto deref instead.", "tree": {"sha": "60db47a131e9cf27e649266b515d9d6bed560ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60db47a131e9cf27e649266b515d9d6bed560ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a75e308a61be8cc64ed19214daa979c049e7c459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a75e308a61be8cc64ed19214daa979c049e7c459", "html_url": "https://github.com/rust-lang/rust/commit/a75e308a61be8cc64ed19214daa979c049e7c459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a75e308a61be8cc64ed19214daa979c049e7c459/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ea5fb8a6d3131931dd70d45dc4d4f0b1e26cd01", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea5fb8a6d3131931dd70d45dc4d4f0b1e26cd01", "html_url": "https://github.com/rust-lang/rust/commit/6ea5fb8a6d3131931dd70d45dc4d4f0b1e26cd01"}, {"sha": "19a1f7ed06d3f4f3b64cb4417f7159cd59f38ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a1f7ed06d3f4f3b64cb4417f7159cd59f38ae7", "html_url": "https://github.com/rust-lang/rust/commit/19a1f7ed06d3f4f3b64cb4417f7159cd59f38ae7"}], "stats": {"total": 38, "additions": 9, "deletions": 29}, "files": [{"sha": "936c0aac79f16e021c9f74a3f6935511561d78c7", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=a75e308a61be8cc64ed19214daa979c049e7c459", "patch": "@@ -3518,7 +3518,7 @@ An example of each kind:\n ```{rust}\n let vec: Vec<i32> = vec![1, 2, 3];\n let arr: [i32; 3] = [1, 2, 3];\n-let s: &[i32] = vec.as_slice();\n+let s: &[i32] = &vec;\n ```\n \n As you can see, the `vec!` macro allows you to create a `Vec<T>` easily. The"}, {"sha": "986ad23c665a705a9b34a9fb11abd3c39ffcae00", "filename": "src/doc/trpl/more-strings.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmore-strings.md?ref=a75e308a61be8cc64ed19214daa979c049e7c459", "patch": "@@ -100,7 +100,7 @@ To write a function that's generic over types of strings, use `&str`.\n \n ```\n fn some_string_length(x: &str) -> uint {\n-        x.len()\n+    x.len()\n }\n \n fn main() {\n@@ -110,7 +110,7 @@ fn main() {\n \n     let s = \"Hello, world\".to_string();\n \n-    println!(\"{}\", some_string_length(s.as_slice()));\n+    println!(\"{}\", some_string_length(&s));\n }\n ```\n "}, {"sha": "8240689c24b7c61d38d0e4264a837cbcd2f785cf", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=a75e308a61be8cc64ed19214daa979c049e7c459", "patch": "@@ -174,13 +174,13 @@ match origin {\n }\n ```\n \n-If you want to match against a slice or array, you can use `[]`:\n+If you want to match against a slice or array, you can use `&`:\n \n ```{rust}\n fn main() {\n     let v = vec![\"match_this\", \"1\"];\n \n-    match v.as_slice() {\n+    match &v {\n         [\"match_this\", second] => println!(\"The second element is {}\", second),\n         _ => {},\n     }"}, {"sha": "5ff233b4844157f78450859bc9a5cf7335595768", "filename": "src/doc/trpl/plugins.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Ftrpl%2Fplugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Ftrpl%2Fplugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fplugins.md?ref=a75e308a61be8cc64ed19214daa979c049e7c459", "patch": "@@ -82,7 +82,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         }\n     };\n \n-    let mut text = text.as_slice();\n+    let mut text = &text;\n     let mut total = 0;\n     while !text.is_empty() {\n         match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {"}, {"sha": "e05c6e172a49e9d5dafd6dd355702de4be60a510", "filename": "src/doc/trpl/strings.md", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Ftrpl%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/a75e308a61be8cc64ed19214daa979c049e7c459/src%2Fdoc%2Ftrpl%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstrings.md?ref=a75e308a61be8cc64ed19214daa979c049e7c459", "patch": "@@ -36,36 +36,16 @@ s.push_str(\", world.\");\n println!(\"{}\", s);\n ```\n \n-You can get a `&str` view into a `String` with the `as_slice()` method:\n+`String`s will coerece into `&str` with an `&`:\n \n-```{rust}\n+```\n fn takes_slice(slice: &str) {\n     println!(\"Got: {}\", slice);\n }\n \n fn main() {\n     let s = \"Hello\".to_string();\n-    takes_slice(s.as_slice());\n-}\n-```\n-\n-To compare a String to a constant string, prefer `as_slice()`...\n-\n-```{rust}\n-fn compare(string: String) {\n-    if string.as_slice() == \"Hello\" {\n-        println!(\"yes\");\n-    }\n-}\n-```\n-\n-... over `to_string()`:\n-\n-```{rust}\n-fn compare(string: String) {\n-    if string == \"Hello\".to_string() {\n-        println!(\"yes\");\n-    }\n+    takes_slice(&s);\n }\n ```\n "}]}