{"sha": "aef5ca5590a23799396aa656bd303731c9d96531", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZjVjYTU1OTBhMjM3OTkzOTZhYTY1NmJkMzAzNzMxYzlkOTY1MzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-30T10:31:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-30T10:31:00Z"}, "message": "Auto merge of #37392 - alexcrichton:more-disable-jemalloc, r=brson\n\nDisable jemalloc on aarch64/powerpc\n\nSounds like jemalloc is broken on systems which differ in page size than the\nhost it was compiled on (unless an option was passed). This unfortunately\nreduces the portability of binaries created and can often make Rust segfault by\ndefault. For now let's patch over this by disabling jemalloc until we can figure\nout a better solution.\n\nCloses #36994\nCloses #37320\ncc jemalloc/jemalloc#467", "tree": {"sha": "7e70acb5d5b48ec4d8c70ef5fbcc07e61fcfd6e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e70acb5d5b48ec4d8c70ef5fbcc07e61fcfd6e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef5ca5590a23799396aa656bd303731c9d96531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef5ca5590a23799396aa656bd303731c9d96531", "html_url": "https://github.com/rust-lang/rust/commit/aef5ca5590a23799396aa656bd303731c9d96531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef5ca5590a23799396aa656bd303731c9d96531/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/12382665a9b92b3e7af27f8c2d56e39eeffe95a6", "html_url": "https://github.com/rust-lang/rust/commit/12382665a9b92b3e7af27f8c2d56e39eeffe95a6"}, {"sha": "de80670f7487f5db26e3929f7f2f464345859b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/de80670f7487f5db26e3929f7f2f464345859b49", "html_url": "https://github.com/rust-lang/rust/commit/de80670f7487f5db26e3929f7f2f464345859b49"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "5f6335d405f5ea40fe49b1e7827c51a9ecc6ead1", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -13,6 +13,10 @@ use target::{Target, TargetOptions, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = Some(128);\n+\n+    // see #36994\n+    base.exe_allocation_crate = \"alloc_system\".to_string();\n+\n     Ok(Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "c284840ecb4bdbdc3b06714732a85fabbe51d93d", "filename": "src/librustc_back/target/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -25,6 +25,10 @@ pub fn target() -> TargetResult {\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n+\n+            // see #36994\n+            exe_allocation_crate: \"alloc_system\".to_string(),\n+\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "17895836fe87b54dba7020dbd5b2d00be9c0ecfd", "filename": "src/librustc_back/target/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -25,6 +25,10 @@ pub fn target() -> TargetResult {\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n+\n+            // see #36994\n+            exe_allocation_crate: \"alloc_system\".to_string(),\n+\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "a6d8fae2536cae8628ab3d3b09fb64553ff442d1", "filename": "src/librustc_back/target/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -24,6 +24,10 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2\".to_string(),\n             max_atomic_width: Some(32),\n+\n+            // see #36994\n+            exe_allocation_crate: \"alloc_system\".to_string(),\n+\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "e4a6d2a55d9813ea4ea188540edae6126447ff1d", "filename": "src/librustc_back/target/mips_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -24,6 +24,10 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n+\n+            // see #36994\n+            exe_allocation_crate: \"alloc_system\".to_string(),\n+\n             ..super::linux_base::opts()\n         }\n     })"}, {"sha": "ccc64ea393b7885694640f22b6373ed7dfedf4f3", "filename": "src/librustc_back/target/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_uclibc.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -24,6 +24,10 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n+\n+            // see #36994\n+            exe_allocation_crate: \"alloc_system\".to_string(),\n+\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "9b8b1d5713f1d950771a36d3da49fe750208d944", "filename": "src/librustc_back/target/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -25,6 +25,10 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32\".to_string(),\n             features: \"+mips32\".to_string(),\n             max_atomic_width: Some(32),\n+\n+            // see #36994\n+            exe_allocation_crate: \"alloc_system\".to_string(),\n+\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "5693bddd0488a51c780e53dbc07c2e641748e345", "filename": "src/librustc_back/target/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -24,6 +24,10 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32\".to_string(),\n             features: \"+mips32,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n+\n+            // see #36994\n+            exe_allocation_crate: \"alloc_system\".to_string(),\n+\n             ..super::linux_base::opts()\n         }\n     })"}, {"sha": "3acade5a474445f1431585dbc0d62a79fed5a369", "filename": "src/librustc_back/target/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_uclibc.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -25,6 +25,10 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32\".to_string(),\n             features: \"+mips32,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n+\n+            // see #36994\n+            exe_allocation_crate: \"alloc_system\".to_string(),\n+\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "909c5488dcb70374eaae5535870fe9606428af24", "filename": "src/librustc_back/target/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -16,6 +16,9 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n+    // see #36994\n+    base.exe_allocation_crate = \"alloc_system\".to_string();\n+\n     Ok(Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),"}, {"sha": "a692346ca0ffeeb95a88bf2183f3eea8b6ca4f90", "filename": "src/librustc_back/target/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -16,6 +16,9 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n+    // see #36994\n+    base.exe_allocation_crate = \"alloc_system\".to_string();\n+\n     Ok(Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "284772c43319aedf193fd12af276ea1586adbd14", "filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef5ca5590a23799396aa656bd303731c9d96531/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs?ref=aef5ca5590a23799396aa656bd303731c9d96531", "patch": "@@ -15,6 +15,9 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n+    // see #36994\n+    base.exe_allocation_crate = \"alloc_system\".to_string();\n+\n     Ok(Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),"}]}