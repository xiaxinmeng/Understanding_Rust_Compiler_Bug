{"sha": "9d473a0b9f92c0739e4635fa8ef95a91ac2a481d", "node_id": "C_kwDOAAsO6NoAKDlkNDczYTBiOWY5MmMwNzM5ZTQ2MzVmYThlZjk1YTkxYWMyYTQ4MWQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-03T22:25:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-03T22:25:42Z"}, "message": "Merge #11616\n\n11616: fix: Fix semantic highlighting breaking for lifetimes in macros r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "2d6fe785fc147ecc2c641c5a7361a98d8b361cc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6fe785fc147ecc2c641c5a7361a98d8b361cc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIUBmCRBK7hj4Ov3rIwAAlbMIADWF6u5BTx0bYwOFC/r26qvZ\nZb7huMhTobeYyJeXwfvfn/2woaVB9FxVRoNzNxMOQCVYyWEH9iVyuxBHHikZJ1Lg\nEQOf9Q2OQMVJ3goHrdqQaNrkAAU4CnK52Y9PNlYKbQmoyRfnXj5RixnyOI0riRH/\nyUjc+l/rcXxSr9qvXqaSY++RLLrEfIaRuGxFgoC/PEf2KOi9grR3F8Npcd6klBB1\nIrA90E8pEZ+kn1HD8QMLmdI/t3UoEfgisf3acI+YzjYrd+hWCUV710CCDWKSVhOg\nVFJTBa1ZUGpKpYURlYmEWtjA7T0vI36meBkR95zTRtPb69VQ6OWBQXdCZIMU6mA=\n=wCiI\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d6fe785fc147ecc2c641c5a7361a98d8b361cc0\nparent 59088d8066000ba1c6d263463b1c038fb43d739c\nparent 464dd814ca6426638e9fe399ba8527a9dba9ca5e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646346342 +0000\ncommitter GitHub <noreply@github.com> 1646346342 +0000\n\nMerge #11616\n\n11616: fix: Fix semantic highlighting breaking for lifetimes in macros r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d", "html_url": "https://github.com/rust-lang/rust/commit/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59088d8066000ba1c6d263463b1c038fb43d739c", "url": "https://api.github.com/repos/rust-lang/rust/commits/59088d8066000ba1c6d263463b1c038fb43d739c", "html_url": "https://github.com/rust-lang/rust/commit/59088d8066000ba1c6d263463b1c038fb43d739c"}, {"sha": "464dd814ca6426638e9fe399ba8527a9dba9ca5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/464dd814ca6426638e9fe399ba8527a9dba9ca5e", "html_url": "https://github.com/rust-lang/rust/commit/464dd814ca6426638e9fe399ba8527a9dba9ca5e"}], "stats": {"total": 93, "additions": 88, "deletions": 5}, "files": [{"sha": "776a0f8295287db7c053a6c46dfb630e3d4c08e9", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=9d473a0b9f92c0739e4635fa8ef95a91ac2a481d", "patch": "@@ -206,6 +206,7 @@ fn traverse(\n \n     let mut current_macro_call: Option<ast::MacroCall> = None;\n     let mut current_attr_call = None;\n+    let mut current_derive_call = None;\n     let mut current_macro: Option<ast::Macro> = None;\n     let mut macro_highlighter = MacroHighlighter::default();\n     let mut inside_attribute = false;\n@@ -249,7 +250,7 @@ fn traverse(\n                     };\n                     match adt {\n                         Some(adt) if sema.is_derive_annotated(&adt) => {\n-                            current_attr_call = Some(adt.into());\n+                            current_derive_call = Some(ast::Item::from(adt));\n                         }\n                         _ => (),\n                     }\n@@ -273,7 +274,10 @@ fn traverse(\n                     macro_highlighter = MacroHighlighter::default();\n                 }\n                 Some(item) if current_attr_call.as_ref().map_or(false, |it| *it == item) => {\n-                    current_attr_call = None\n+                    current_attr_call = None;\n+                }\n+                Some(item) if current_derive_call.as_ref().map_or(false, |it| *it == item) => {\n+                    current_derive_call = None;\n                 }\n                 None if ast::Attr::can_cast(node.kind()) => inside_attribute = false,\n                 _ => (),\n@@ -301,17 +305,19 @@ fn traverse(\n         // as calling `descend_into_macros_single` gets rather expensive if done for every single token\n         // additionally, do not descend into comments, descending maps down to doc attributes which get\n         // tagged as string literals.\n-        let descend_token = (current_macro_call.is_some() || current_attr_call.is_some())\n+        let descend_token = (current_macro_call.is_some()\n+            || current_attr_call.is_some()\n+            || current_derive_call.is_some())\n             && element.kind() != COMMENT;\n         let element_to_highlight = if descend_token {\n             let token = match &element {\n                 NodeOrToken::Node(_) => continue,\n                 NodeOrToken::Token(tok) => tok.clone(),\n             };\n-            let in_mcall_outside_tt = current_macro_call.is_some()\n+            let in_mcall_outside_tt = current_attr_call.is_none()\n                 && token.parent().as_ref().map(SyntaxNode::kind) != Some(TOKEN_TREE);\n             let token = match in_mcall_outside_tt {\n-                // not in the macros token tree, don't attempt to descend\n+                // not in the macros/derives token tree, don't attempt to descend\n                 true => token,\n                 false => sema.descend_into_macros_single(token),\n             };\n@@ -323,6 +329,7 @@ fn traverse(\n                         (T![ident], NAME | NAME_REF) => parent.into(),\n                         (T![self] | T![super] | T![crate], NAME_REF) => parent.into(),\n                         (INT_NUMBER, NAME_REF) => parent.into(),\n+                        (LIFETIME_IDENT, LIFETIME) => parent.into(),\n                         _ => token.into(),\n                     }\n                 }"}, {"sha": "9e36b56d283152cc6b01f27bdd3b2f64414663b3", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_lifetimes.html", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_lifetimes.html", "raw_url": "https://github.com/rust-lang/rust/raw/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_lifetimes.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_lifetimes.html?ref=9d473a0b9f92c0739e4635fa8ef95a91ac2a481d", "patch": "@@ -0,0 +1,54 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.label              { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.intra_doc_link     { font-style: italic; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.trait.unsafe       { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.control            { font-style: italic; }\n+.reference          { font-style: italic; font-weight: bold; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span><span class=\"angle\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"comma\">,</span> <span class=\"lifetime declaration\">'b</span><span class=\"comma\">,</span> <span class=\"lifetime declaration\">'c</span><span class=\"angle\">&gt;</span> <span class=\"keyword\">where</span> <span class=\"lifetime\">'a</span><span class=\"colon\">:</span> <span class=\"lifetime\">'a</span><span class=\"comma\">,</span> <span class=\"lifetime\">'static</span><span class=\"colon\">:</span> <span class=\"lifetime\">'static</span> <span class=\"brace\">{</span>\n+    <span class=\"field declaration\">field</span><span class=\"colon\">:</span> <span class=\"operator\">&</span><span class=\"lifetime\">'a</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+    <span class=\"field declaration\">field2</span><span class=\"colon\">:</span> <span class=\"operator\">&</span><span class=\"lifetime\">'static</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+<span class=\"brace\">}</span>\n+<span class=\"keyword\">impl</span><span class=\"angle\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"angle\">&gt;</span> <span class=\"struct\">Foo</span><span class=\"angle\">&lt;</span><span class=\"lifetime\">'_</span><span class=\"comma\">,</span> <span class=\"lifetime\">'a</span><span class=\"comma\">,</span> <span class=\"lifetime\">'static</span><span class=\"angle\">&gt;</span>\n+<span class=\"keyword\">where</span>\n+    <span class=\"lifetime\">'a</span><span class=\"colon\">:</span> <span class=\"lifetime\">'a</span><span class=\"comma\">,</span>\n+    <span class=\"lifetime\">'static</span><span class=\"colon\">:</span> <span class=\"lifetime\">'static</span>\n+<span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "27686ab9447be409ed4ec8a81bb63d40a296353a", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d473a0b9f92c0739e4635fa8ef95a91ac2a481d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=9d473a0b9f92c0739e4635fa8ef95a91ac2a481d", "patch": "@@ -312,6 +312,28 @@ macro_rules! die {\n     );\n }\n \n+#[test]\n+fn test_lifetime_highlighting() {\n+    check_highlighting(\n+        r#\"\n+//- minicore: derive\n+\n+#[derive()]\n+struct Foo<'a, 'b, 'c> where 'a: 'a, 'static: 'static {\n+    field: &'a (),\n+    field2: &'static (),\n+}\n+impl<'a> Foo<'_, 'a, 'static>\n+where\n+    'a: 'a,\n+    'static: 'static\n+{}\n+\"#,\n+        expect_file![\"./test_data/highlight_lifetimes.html\"],\n+        false,\n+    );\n+}\n+\n #[test]\n fn test_string_highlighting() {\n     // The format string detection is based on macro-expansion,"}]}