{"sha": "6291781592ff079fc1e84f4b8be5684d2a52b8bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOTE3ODE1OTJmZjA3OWZjMWU4NGY0YjhiZTU2ODRkMmE1MmI4YmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-13T04:11:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-13T04:11:22Z"}, "message": "auto merge of #16460 : pcwalton/rust/borrowck-closure-issue, r=nikomatsakis\n\nThis fixes borrow checking for closures. Code like this will break:\r\n\r\n    struct Foo {\r\n        x: int,\r\n    }\r\n\r\n    pub fn main() {\r\n        let mut this = &mut Foo {\r\n            x: 1,\r\n        };\r\n        let r = || {\r\n            let p = &this.x;\r\n            &mut this.x;\r\n        };\r\n        r()\r\n    }\r\n\r\nChange this code to not take multiple mutable references to the same value. For\r\nexample:\r\n\r\n    struct Foo {\r\n        x: int,\r\n    }\r\n\r\n    pub fn main() {\r\n        let mut this = &mut Foo {\r\n            x: 1,\r\n        };\r\n        let r = || {\r\n            &mut this.x;\r\n        };\r\n        r()\r\n    }\r\n\r\nCloses #16361.\r\n\r\n[breaking-change]\r\n\r\nr? @nikomatsakis", "tree": {"sha": "4aaf32a3a7f2782a8d95513d3fcea0368518ab4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aaf32a3a7f2782a8d95513d3fcea0368518ab4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6291781592ff079fc1e84f4b8be5684d2a52b8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6291781592ff079fc1e84f4b8be5684d2a52b8bd", "html_url": "https://github.com/rust-lang/rust/commit/6291781592ff079fc1e84f4b8be5684d2a52b8bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6291781592ff079fc1e84f4b8be5684d2a52b8bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee87234eed95d6077247bee5416339ce2652b599", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee87234eed95d6077247bee5416339ce2652b599", "html_url": "https://github.com/rust-lang/rust/commit/ee87234eed95d6077247bee5416339ce2652b599"}, {"sha": "f1799fdfcae806988bd7104870da56c7596af8ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1799fdfcae806988bd7104870da56c7596af8ac", "html_url": "https://github.com/rust-lang/rust/commit/f1799fdfcae806988bd7104870da56c7596af8ac"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "18323c26dd985629a65765c8d78ecde88716dafa", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6291781592ff079fc1e84f4b8be5684d2a52b8bd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6291781592ff079fc1e84f4b8be5684d2a52b8bd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=6291781592ff079fc1e84f4b8be5684d2a52b8bd", "patch": "@@ -261,6 +261,8 @@ impl<'a> GatherLoanCtxt<'a> {\n             self.bccx, borrow_span, cause,\n             cmt.clone(), loan_region);\n \n+        debug!(\"guarantee_valid(): restrictions={:?}\", restr);\n+\n         // Create the loan record (if needed).\n         let loan = match restr {\n             restrictions::Safe => {"}, {"sha": "7d50d07a11e3215a1e69c18ccdf7be89facbc6a6", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6291781592ff079fc1e84f4b8be5684d2a52b8bd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6291781592ff079fc1e84f4b8be5684d2a52b8bd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=6291781592ff079fc1e84f4b8be5684d2a52b8bd", "patch": "@@ -122,9 +122,7 @@ impl<'a> RestrictionsContext<'a> {\n             }\n \n             mc::cat_deref(cmt_base, _, mc::BorrowedPtr(ty::ImmBorrow, lt)) |\n-            mc::cat_deref(cmt_base, _, mc::BorrowedPtr(ty::UniqueImmBorrow, lt)) |\n-            mc::cat_deref(cmt_base, _, mc::Implicit(ty::ImmBorrow, lt)) |\n-            mc::cat_deref(cmt_base, _, mc::Implicit(ty::UniqueImmBorrow, lt)) => {\n+            mc::cat_deref(cmt_base, _, mc::Implicit(ty::ImmBorrow, lt)) => {\n                 // R-Deref-Imm-Borrowed\n                 if !self.bccx.is_subregion_of(self.loan_region, lt) {\n                     self.bccx.report(\n@@ -142,7 +140,9 @@ impl<'a> RestrictionsContext<'a> {\n             mc::cat_deref(cmt_base, _, pk) => {\n                 match pk {\n                     mc::BorrowedPtr(ty::MutBorrow, lt) |\n-                    mc::Implicit(ty::MutBorrow, lt) => {\n+                    mc::BorrowedPtr(ty::UniqueImmBorrow, lt) |\n+                    mc::Implicit(ty::MutBorrow, lt) |\n+                    mc::Implicit(ty::UniqueImmBorrow, lt) => {\n                         // R-Deref-Mut-Borrowed\n                         if !self.bccx.is_subregion_of(self.loan_region, lt) {\n                             self.bccx.report("}, {"sha": "dfe5de09c50979284ebd5049d16e8f9916ee5c33", "filename": "src/test/compile-fail/borrowck-closures-unique-imm.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6291781592ff079fc1e84f4b8be5684d2a52b8bd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6291781592ff079fc1e84f4b8be5684d2a52b8bd/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs?ref=6291781592ff079fc1e84f4b8be5684d2a52b8bd", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: int,\n+}\n+\n+pub fn main() {\n+    let mut this = &mut Foo {\n+        x: 1,\n+    };\n+    let r = || {\n+        let p = &this.x;\n+        &mut this.x; //~ ERROR cannot borrow\n+    };\n+    r()\n+}\n+"}]}