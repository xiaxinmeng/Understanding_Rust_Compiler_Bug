{"sha": "0f98cb41988d1fdd0cb33fb274253cba3bde5cfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOThjYjQxOTg4ZDFmZGQwY2IzM2ZiMjc0MjUzY2JhM2JkZTVjZmE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-12-17T15:52:16Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-12-17T17:08:42Z"}, "message": "debuginfo: Properly support by-value self arguments", "tree": {"sha": "005600d696f73bb8515ff7fb3feb49aece0ccc4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005600d696f73bb8515ff7fb3feb49aece0ccc4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f98cb41988d1fdd0cb33fb274253cba3bde5cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f98cb41988d1fdd0cb33fb274253cba3bde5cfa", "html_url": "https://github.com/rust-lang/rust/commit/0f98cb41988d1fdd0cb33fb274253cba3bde5cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f98cb41988d1fdd0cb33fb274253cba3bde5cfa/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a26bd166a3c029a17f4a5fdb6021d7de7c7eb48", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a26bd166a3c029a17f4a5fdb6021d7de7c7eb48", "html_url": "https://github.com/rust-lang/rust/commit/1a26bd166a3c029a17f4a5fdb6021d7de7c7eb48"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "a77e8f764f38d2a285070cc0f6b960911bd3a4c2", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f98cb41988d1fdd0cb33fb274253cba3bde5cfa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f98cb41988d1fdd0cb33fb274253cba3bde5cfa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=0f98cb41988d1fdd0cb33fb274253cba3bde5cfa", "patch": "@@ -129,11 +129,13 @@ use driver::session;\n use lib::llvm::llvm;\n use lib::llvm::{ModuleRef, ContextRef, ValueRef};\n use lib::llvm::debuginfo::*;\n+use middle::trans::adt;\n+use middle::trans::base;\n+use middle::trans::build;\n use middle::trans::common::*;\n use middle::trans::machine;\n use middle::trans::type_of;\n use middle::trans::type_::Type;\n-use middle::trans::adt;\n use middle::trans;\n use middle::ty;\n use middle::pat_util;\n@@ -453,12 +455,29 @@ pub fn create_self_argument_metadata(bcx: @mut Block,\n \n     let address_operations = &[unsafe { llvm::LLVMDIBuilderCreateOpDeref(Type::i64().to_ref()) }];\n \n+    // The self argument comes in one of two forms:\n+    // (1) For `&self`, `~self`, and `@self` it is an alloca containing a pointer to the data. That\n+    //     is the `{&~@}self` pointer is contained by value in the alloca, and `type_of_self` will\n+    //     be `{&~@}Self`\n+    // (2) For by-value `self`, `llptr` will not be an alloca, but a pointer to the self-value. That\n+    //     is by-value `self` is always implicitly passed by reference (sic!). So we have a couple\n+    //     of problems here:\n+    //     (a) There is no alloca to give to `llvm.dbg.declare` and\n+    //     (b) `type_of_self` is `Self`, but `llptr` is of type `*Self`\n+    //     In order to solve this problem, the else branch below creates a helper alloca which\n+    //     contains a copy of `llptr`. We then describe the `self` parameter by pointing\n+    //     `llvm.dbg.declare` to this helper alloca and tell it that the pointer there needs to be\n+    //     dereferenced once to get to the actual data (similar to non-immediate by-value args).\n     let variable_access = if unsafe { llvm::LLVMIsAAllocaInst(llptr) } != ptr::null() {\n         DirectVariable { alloca: llptr }\n     } else {\n-        // This is not stable and may break with future LLVM versions. llptr should really always\n-        // be an alloca. Anything else is not supported and just works by chance.\n-        IndirectVariable { alloca: llptr, address_operations: address_operations }\n+        // Create a helper alloca that allows us to track the self-argument properly. The alloca\n+        // contains a pointer to the self-value.\n+        let ptr_type = ty::mk_mut_ptr(bcx.tcx(), type_of_self);\n+        let helper_alloca = base::alloc_ty(bcx, ptr_type, \"__self\");\n+        build::Store(bcx, llptr, helper_alloca);\n+\n+        IndirectVariable { alloca: helper_alloca, address_operations: address_operations }\n     };\n \n     declare_local(bcx,"}]}