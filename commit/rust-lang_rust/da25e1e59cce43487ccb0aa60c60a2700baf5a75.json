{"sha": "da25e1e59cce43487ccb0aa60c60a2700baf5a75", "node_id": "C_kwDOAAsO6NoAKGRhMjVlMWU1OWNjZTQzNDg3Y2NiMGFhNjBjNjBhMjcwMGJhZjVhNzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-21T18:36:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-21T18:36:48Z"}, "message": "Rollup merge of #94156 - tmiasko:pp-str, r=petrochenkov\n\nGracefully handle non-UTF-8 string slices when pretty printing\n\nFixes #78520.", "tree": {"sha": "9164f80b21d6c5b4c3b6f2fb5bf476c8f5bb649f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9164f80b21d6c5b4c3b6f2fb5bf476c8f5bb649f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da25e1e59cce43487ccb0aa60c60a2700baf5a75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiE9vBCRBK7hj4Ov3rIwAAt8IIAJihhyWS100owTSiHkbBgPcu\nnf0JW4jR7JvnZMUZClN7yOQ58SvJU2jWC3z/0/APuJLg4O6mR/VJOhdwzklDWbxK\nZtl7fW++MxiE2Cv8KX5k8JQrV0/u/VIVnMV8RLG2/70bc7kiT6rpJUFlIowgXQPi\n5ItqgV9NZQI9Wv5iJHuSAEdZ0RjQ6eFBzNKcb1jtwvGxUbczBKny2v5uP1PjLs0o\nRpiT10ISBywvnkCRr2rArtiL/RzzDMm6ZPq3g3WX4uwb+wFFmVCN4B+P73zHCTPr\nBhRsY7plX5+jq++lYuCfATcoaOMJW1877Zv/Q2ZvUWisI4xfru2oAvyK8B4+y0o=\n=DLst\n-----END PGP SIGNATURE-----\n", "payload": "tree 9164f80b21d6c5b4c3b6f2fb5bf476c8f5bb649f\nparent ea7f7f7c4c5cbb036444f18e97a44e51120ee609\nparent f233323f6d4529322613de04289a8d6efc2ab618\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645468608 +0100\ncommitter GitHub <noreply@github.com> 1645468608 +0100\n\nRollup merge of #94156 - tmiasko:pp-str, r=petrochenkov\n\nGracefully handle non-UTF-8 string slices when pretty printing\n\nFixes #78520.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da25e1e59cce43487ccb0aa60c60a2700baf5a75", "html_url": "https://github.com/rust-lang/rust/commit/da25e1e59cce43487ccb0aa60c60a2700baf5a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da25e1e59cce43487ccb0aa60c60a2700baf5a75/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea7f7f7c4c5cbb036444f18e97a44e51120ee609", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7f7f7c4c5cbb036444f18e97a44e51120ee609", "html_url": "https://github.com/rust-lang/rust/commit/ea7f7f7c4c5cbb036444f18e97a44e51120ee609"}, {"sha": "f233323f6d4529322613de04289a8d6efc2ab618", "url": "https://api.github.com/repos/rust-lang/rust/commits/f233323f6d4529322613de04289a8d6efc2ab618", "html_url": "https://github.com/rust-lang/rust/commit/f233323f6d4529322613de04289a8d6efc2ab618"}], "stats": {"total": 97, "additions": 47, "deletions": 50}, "files": [{"sha": "778c4a95adc7d2b203a23f61b697f71817cd83a6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da25e1e59cce43487ccb0aa60c60a2700baf5a75/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da25e1e59cce43487ccb0aa60c60a2700baf5a75/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=da25e1e59cce43487ccb0aa60c60a2700baf5a75", "patch": "@@ -1436,8 +1436,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // relocations (we have an active `str` reference here). We don't use this\n                 // result to affect interpreter execution.\n                 let slice = data.inspect_with_uninit_and_ptr_outside_interpreter(start..end);\n-                let s = std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n-                p!(write(\"{:?}\", s));\n+                p!(write(\"{:?}\", String::from_utf8_lossy(slice)));\n                 Ok(self)\n             }\n             (ConstValue::ByRef { alloc, offset }, ty::Array(t, n)) if *t == u8_type => {"}, {"sha": "9480566897f8d1003e0d6dbd2f0416ae0868ec34", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/da25e1e59cce43487ccb0aa60c60a2700baf5a75/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/da25e1e59cce43487ccb0aa60c60a2700baf5a75/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=da25e1e59cce43487ccb0aa60c60a2700baf5a75", "patch": "@@ -2,63 +2,69 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:13:11: 13:11\n-      let _1: main::InvalidChar;           // in scope 0 at $DIR/invalid_constant.rs:19:9: 19:22\n-      let mut _3: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:26:25: 26:46\n-      let mut _5: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:33:35: 33:56\n+      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:15:11: 15:11\n+      let _1: main::InvalidChar;           // in scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n+      let mut _3: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:28:25: 28:46\n+      let mut _5: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:35:35: 35:56\n       scope 1 {\n-          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:19:9: 19:22\n-          let _2: [main::InvalidTag; 1];   // in scope 1 at $DIR/invalid_constant.rs:26:9: 26:21\n+          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:21:9: 21:22\n+          let _2: [main::InvalidTag; 1];   // in scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n           scope 2 {\n-              debug _invalid_tag => _2;    // in scope 2 at $DIR/invalid_constant.rs:26:9: 26:21\n-              let _4: [main::NoVariants; 1]; // in scope 2 at $DIR/invalid_constant.rs:33:9: 33:31\n+              debug _invalid_tag => _2;    // in scope 2 at $DIR/invalid_constant.rs:28:9: 28:21\n+              let _4: [main::NoVariants; 1]; // in scope 2 at $DIR/invalid_constant.rs:35:9: 35:31\n               scope 3 {\n-                  debug _enum_without_variants => _4; // in scope 3 at $DIR/invalid_constant.rs:33:9: 33:31\n+                  debug _enum_without_variants => _4; // in scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n+                  let _6: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 3 at $DIR/invalid_constant.rs:39:9: 39:22\n+                  scope 4 {\n+                      debug _non_utf8_str => _6; // in scope 4 at $DIR/invalid_constant.rs:39:9: 39:22\n+                  }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:19:9: 19:22\n--         _1 = const { InvalidChar { int: 0x110001 } }; // scope 0 at $DIR/invalid_constant.rs:19:25: 19:64\n-+         _1 = const InvalidChar { int: 1114113_u32, chr: {transmute(0x00110001): char} }; // scope 0 at $DIR/invalid_constant.rs:19:25: 19:64\n+          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n+-         _1 = const { InvalidChar { int: 0x110001 } }; // scope 0 at $DIR/invalid_constant.rs:21:25: 21:64\n++         _1 = const InvalidChar { int: 1114113_u32, chr: {transmute(0x00110001): char} }; // scope 0 at $DIR/invalid_constant.rs:21:25: 21:64\n                                            // ty::Const\n                                            // + ty: main::InvalidChar\n -                                          // + val: Unevaluated(main::{constant#0}, [main::InvalidChar], None)\n +                                          // + val: Value(Scalar(0x00110001))\n                                            // mir::Constant\n-                                           // + span: $DIR/invalid_constant.rs:19:25: 19:64\n+                                           // + span: $DIR/invalid_constant.rs:21:25: 21:64\n -                                          // + literal: Const { ty: main::InvalidChar, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ invalid_constant[726d]::main::{constant#0}), const_param_did: None }, substs: [main::InvalidChar], promoted: None }) }\n +                                          // + literal: Const { ty: main::InvalidChar, val: Value(Scalar(0x00110001)) }\n-          StorageLive(_2);                 // scope 1 at $DIR/invalid_constant.rs:26:9: 26:21\n-          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:26:25: 26:46\n-          (_3.0: u32) = const 4_u32;       // scope 1 at $DIR/invalid_constant.rs:26:25: 26:46\n--         _2 = [move _3];                  // scope 1 at $DIR/invalid_constant.rs:26:24: 26:47\n-+         _2 = [const InvalidTag { int: 4_u32, e: Scalar(0x00000004): E }]; // scope 1 at $DIR/invalid_constant.rs:26:24: 26:47\n+          StorageLive(_2);                 // scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n+          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:25: 28:46\n+          (_3.0: u32) = const 4_u32;       // scope 1 at $DIR/invalid_constant.rs:28:25: 28:46\n+-         _2 = [move _3];                  // scope 1 at $DIR/invalid_constant.rs:28:24: 28:47\n++         _2 = [const InvalidTag { int: 4_u32, e: Scalar(0x00000004): E }]; // scope 1 at $DIR/invalid_constant.rs:28:24: 28:47\n +                                          // ty::Const\n +                                          // + ty: main::InvalidTag\n +                                          // + val: Value(Scalar(0x00000004))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:26:24: 26:47\n++                                          // + span: $DIR/invalid_constant.rs:28:24: 28:47\n +                                          // + literal: Const { ty: main::InvalidTag, val: Value(Scalar(0x00000004)) }\n-          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:26:46: 26:47\n-          StorageLive(_4);                 // scope 2 at $DIR/invalid_constant.rs:33:9: 33:31\n-          StorageLive(_5);                 // scope 2 at $DIR/invalid_constant.rs:33:35: 33:56\n-          (_5.0: u32) = const 0_u32;       // scope 2 at $DIR/invalid_constant.rs:33:35: 33:56\n--         _4 = [move _5];                  // scope 2 at $DIR/invalid_constant.rs:33:34: 33:57\n-+         _4 = [const NoVariants { int: 0_u32, empty: Scalar(<ZST>): Empty }]; // scope 2 at $DIR/invalid_constant.rs:33:34: 33:57\n+          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:46: 28:47\n+          StorageLive(_4);                 // scope 2 at $DIR/invalid_constant.rs:35:9: 35:31\n+          StorageLive(_5);                 // scope 2 at $DIR/invalid_constant.rs:35:35: 35:56\n+          (_5.0: u32) = const 0_u32;       // scope 2 at $DIR/invalid_constant.rs:35:35: 35:56\n+-         _4 = [move _5];                  // scope 2 at $DIR/invalid_constant.rs:35:34: 35:57\n++         _4 = [const NoVariants { int: 0_u32, empty: Scalar(<ZST>): Empty }]; // scope 2 at $DIR/invalid_constant.rs:35:34: 35:57\n +                                          // ty::Const\n +                                          // + ty: main::NoVariants\n +                                          // + val: Value(Scalar(0x00000000))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:33:34: 33:57\n++                                          // + span: $DIR/invalid_constant.rs:35:34: 35:57\n +                                          // + literal: Const { ty: main::NoVariants, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_5);                 // scope 2 at $DIR/invalid_constant.rs:33:56: 33:57\n-          nop;                             // scope 0 at $DIR/invalid_constant.rs:13:11: 34:2\n-          StorageDead(_4);                 // scope 2 at $DIR/invalid_constant.rs:34:1: 34:2\n-          StorageDead(_2);                 // scope 1 at $DIR/invalid_constant.rs:34:1: 34:2\n-          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:34:1: 34:2\n-          return;                          // scope 0 at $DIR/invalid_constant.rs:34:2: 34:2\n+          StorageDead(_5);                 // scope 2 at $DIR/invalid_constant.rs:35:56: 35:57\n+          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:39:9: 39:22\n+          nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 42:2\n+          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:42:1: 42:2\n+          StorageDead(_4);                 // scope 2 at $DIR/invalid_constant.rs:42:1: 42:2\n+          StorageDead(_2);                 // scope 1 at $DIR/invalid_constant.rs:42:1: 42:2\n+          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:42:1: 42:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:42:2: 42:2\n       }\n   }\n   "}, {"sha": "492ef404916d49f9f04d62b909e042875357cdc2", "filename": "src/test/mir-opt/const_prop/invalid_constant.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da25e1e59cce43487ccb0aa60c60a2700baf5a75/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da25e1e59cce43487ccb0aa60c60a2700baf5a75/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=da25e1e59cce43487ccb0aa60c60a2700baf5a75", "patch": "@@ -1,6 +1,8 @@\n // Verify that we can pretty print invalid constants.\n \n+#![feature(adt_const_params)]\n #![feature(inline_const)]\n+#![allow(incomplete_features)]\n \n #[derive(Copy, Clone)]\n #[repr(u32)]\n@@ -31,4 +33,10 @@ fn main() {\n         empty: Empty,\n     }\n     let _enum_without_variants = [NoVariants { int: 0 }];\n+\n+    // A non-UTF-8 string slice. Regression test for #75763 and #78520.\n+    struct Str<const S: &'static str>;\n+    let _non_utf8_str: Str::<{\n+        unsafe { std::mem::transmute::<&[u8], &str>(&[0xC0, 0xC1, 0xF5]) }\n+    }>;\n }"}, {"sha": "214a04b8a6bed5786e5c28951a038dea9063f1a7", "filename": "src/test/ui/const-generics/issues/issue-75763.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea7f7f7c4c5cbb036444f18e97a44e51120ee609/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7f7f7c4c5cbb036444f18e97a44e51120ee609/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75763.rs?ref=ea7f7f7c4c5cbb036444f18e97a44e51120ee609", "patch": "@@ -1,16 +0,0 @@\n-// ignore-test\n-// FIXME(const_generics): This test causes an ICE after reverting #76030.\n-#![feature(adt_const_params)]\n-#![allow(incomplete_features)]\n-\n-\n-struct Bug<const S: &'static str>;\n-\n-fn main() {\n-    let b: Bug::<{\n-        unsafe {\n-            // FIXME(adt_const_params): Decide on how to deal with invalid values as const params.\n-            std::mem::transmute::<&[u8], &str>(&[0xC0, 0xC1, 0xF5])\n-        }\n-    }>;\n-}"}]}