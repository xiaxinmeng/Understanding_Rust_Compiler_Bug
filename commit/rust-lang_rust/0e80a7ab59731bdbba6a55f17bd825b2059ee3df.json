{"sha": "0e80a7ab59731bdbba6a55f17bd825b2059ee3df", "node_id": "C_kwDOAAsO6NoAKDBlODBhN2FiNTk3MzFiZGJiYTZhNTVmMTdiZDgyNWIyMDU5ZWUzZGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-22T18:07:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-22T18:07:35Z"}, "message": "Rollup merge of #95197 - frank-king:feat/unary_op_type_constrain, r=petrochenkov\n\nSuggest constraining param for unary ops when missing trait impl\n\nThis PR adds a suggestion of constraining param for unary ops `-` and `!` when the corresponding trait implementation\nis missing.\n\nFixs #94543.\n\nBTW, this is my first time to touch rustc, please correct me if I did anything wrong.", "tree": {"sha": "0a4473156ed438d488956a87352c317fa65237a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a4473156ed438d488956a87352c317fa65237a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e80a7ab59731bdbba6a55f17bd825b2059ee3df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOhBnCRBK7hj4Ov3rIwAAtXcIAJJaBCJlniwtnoG2QjbE5mIZ\nDc/92PLvocdRKBSNe63C9yxl1J8dk95m01QNtU/M5v6G5rZz5+UUTdIwSNutIMLq\ncbUs0IZ7hp/0fRcc8Jc2rUQrB6z5AH41b4K22kWgxWvXv29Pg4c+oq15hwrRRXPo\nEQ/t3wAxzPZWeQIlA52gGD+dtkQcff35vXSMTnvsKLMoIkLlFp9qpM+VvuxIBn15\nyK0rMaXlv16B4ZXlqUBfGG5uFTROmfK+oh1HdA7l1j85XgXRhh7cRvrKXHw55y5v\nbwedlVHwW82nb8nk52I8R9FFYFQDtKK9oQ0BisvISDCV8CxrtEEfmWM+4bZk7gk=\n=4aOO\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a4473156ed438d488956a87352c317fa65237a0\nparent 0e59ad4ce3e73abf7a099e33696e4d800e48df1a\nparent f28d8b13dffc372b099aa9a0e906b21962569076\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647972455 +0100\ncommitter GitHub <noreply@github.com> 1647972455 +0100\n\nRollup merge of #95197 - frank-king:feat/unary_op_type_constrain, r=petrochenkov\n\nSuggest constraining param for unary ops when missing trait impl\n\nThis PR adds a suggestion of constraining param for unary ops `-` and `!` when the corresponding trait implementation\nis missing.\n\nFixs #94543.\n\nBTW, this is my first time to touch rustc, please correct me if I did anything wrong.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e80a7ab59731bdbba6a55f17bd825b2059ee3df", "html_url": "https://github.com/rust-lang/rust/commit/0e80a7ab59731bdbba6a55f17bd825b2059ee3df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e80a7ab59731bdbba6a55f17bd825b2059ee3df/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e59ad4ce3e73abf7a099e33696e4d800e48df1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e59ad4ce3e73abf7a099e33696e4d800e48df1a", "html_url": "https://github.com/rust-lang/rust/commit/0e59ad4ce3e73abf7a099e33696e4d800e48df1a"}, {"sha": "f28d8b13dffc372b099aa9a0e906b21962569076", "url": "https://api.github.com/repos/rust-lang/rust/commits/f28d8b13dffc372b099aa9a0e906b21962569076", "html_url": "https://github.com/rust-lang/rust/commit/f28d8b13dffc372b099aa9a0e906b21962569076"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "e0dbe027aefe967afcab5617df5f68c4c5a0bc47", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0e80a7ab59731bdbba6a55f17bd825b2059ee3df/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e80a7ab59731bdbba6a55f17bd825b2059ee3df/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=0e80a7ab59731bdbba6a55f17bd825b2059ee3df", "patch": "@@ -672,6 +672,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ex.span,\n                         format!(\"cannot apply unary operator `{}`\", op.as_str()),\n                     );\n+                    let missing_trait = match op {\n+                        hir::UnOp::Deref => unreachable!(\"check unary op `-` or `!` only\"),\n+                        hir::UnOp::Not => \"std::ops::Not\",\n+                        hir::UnOp::Neg => \"std::ops::Neg\",\n+                    };\n+                    let mut visitor = TypeParamVisitor(vec![]);\n+                    visitor.visit_ty(operand_ty);\n+                    if let [ty] = &visitor.0[..] {\n+                        if let ty::Param(p) = *operand_ty.kind() {\n+                            suggest_constraining_param(\n+                                self.tcx,\n+                                self.body_id,\n+                                &mut err,\n+                                *ty,\n+                                operand_ty,\n+                                missing_trait,\n+                                p,\n+                                true,\n+                            );\n+                        }\n+                    }\n \n                     let sp = self.tcx.sess.source_map().start_point(ex.span);\n                     if let Some(sp) ="}, {"sha": "0e3e703a2f5ac61d6160f168fbe42aa418d49402", "filename": "src/test/ui/type/type-check/missing_trait_impl.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e80a7ab59731bdbba6a55f17bd825b2059ee3df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e80a7ab59731bdbba6a55f17bd825b2059ee3df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs?ref=0e80a7ab59731bdbba6a55f17bd825b2059ee3df", "patch": "@@ -8,3 +8,9 @@ fn foo<T>(x: T, y: T) {\n fn bar<T>(x: T) {\n     x += x; //~ ERROR binary assignment operation `+=` cannot be applied to type `T`\n }\n+\n+fn baz<T>(x: T) {\n+    let y = -x; //~ ERROR cannot apply unary operator `-` to type `T`\n+    let y = !x; //~ ERROR cannot apply unary operator `!` to type `T`\n+    let y = *x; //~ ERROR type `T` cannot be dereferenced\n+}"}, {"sha": "59b8692dd4d1a5851c920bf5205316fe884772e8", "filename": "src/test/ui/type/type-check/missing_trait_impl.stderr", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0e80a7ab59731bdbba6a55f17bd825b2059ee3df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e80a7ab59731bdbba6a55f17bd825b2059ee3df/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr?ref=0e80a7ab59731bdbba6a55f17bd825b2059ee3df", "patch": "@@ -24,7 +24,35 @@ help: consider restricting type parameter `T`\n LL | fn bar<T: std::ops::AddAssign>(x: T) {\n    |         +++++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error[E0600]: cannot apply unary operator `-` to type `T`\n+  --> $DIR/missing_trait_impl.rs:13:13\n+   |\n+LL |     let y = -x;\n+   |             ^^ cannot apply unary operator `-`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn baz<T: std::ops::Neg<Output = T>>(x: T) {\n+   |         +++++++++++++++++++++++++++\n+\n+error[E0600]: cannot apply unary operator `!` to type `T`\n+  --> $DIR/missing_trait_impl.rs:14:13\n+   |\n+LL |     let y = !x;\n+   |             ^^ cannot apply unary operator `!`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn baz<T: std::ops::Not<Output = T>>(x: T) {\n+   |         +++++++++++++++++++++++++++\n+\n+error[E0614]: type `T` cannot be dereferenced\n+  --> $DIR/missing_trait_impl.rs:15:13\n+   |\n+LL |     let y = *x;\n+   |             ^^\n+\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0368, E0369.\n+Some errors have detailed explanations: E0368, E0369, E0600, E0614.\n For more information about an error, try `rustc --explain E0368`."}]}