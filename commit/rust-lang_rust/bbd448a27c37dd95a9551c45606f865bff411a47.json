{"sha": "bbd448a27c37dd95a9551c45606f865bff411a47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZDQ0OGEyN2MzN2RkOTVhOTU1MWM0NTYwNmY4NjViZmY0MTFhNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-08T01:01:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-08T01:01:46Z"}, "message": "auto merge of #14733 : sfackler/rust/partial-eq-nan-docs, r=alexcrichton\n\nIt is in fact the case that `NaN != NaN`. The true relations for\r\ncompareQuietNotEqual are LT, GT *and* UN.\r\n\r\nI also rephrased the docs for PartialOrd since floats are not the only\r\ntypes which are not totally ordered.", "tree": {"sha": "ca0e6009e7007dee4bbafab149996486662a4860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca0e6009e7007dee4bbafab149996486662a4860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbd448a27c37dd95a9551c45606f865bff411a47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd448a27c37dd95a9551c45606f865bff411a47", "html_url": "https://github.com/rust-lang/rust/commit/bbd448a27c37dd95a9551c45606f865bff411a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbd448a27c37dd95a9551c45606f865bff411a47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa1832800a9b0781d48f9f66facdab201d62f483", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1832800a9b0781d48f9f66facdab201d62f483", "html_url": "https://github.com/rust-lang/rust/commit/fa1832800a9b0781d48f9f66facdab201d62f483"}, {"sha": "6b3d3803eb8437907153bbb1b3c3978b29cd3a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3d3803eb8437907153bbb1b3c3978b29cd3a3b", "html_url": "https://github.com/rust-lang/rust/commit/6b3d3803eb8437907153bbb1b3c3978b29cd3a3b"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "b25f69bca40b8f361e080b7b65221033d9a979c4", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bbd448a27c37dd95a9551c45606f865bff411a47/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd448a27c37dd95a9551c45606f865bff411a47/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=bbd448a27c37dd95a9551c45606f865bff411a47", "patch": "@@ -39,13 +39,14 @@\n \n /// Trait for values that can be compared for equality and inequality.\n ///\n-/// This trait allows partial equality, where types can be unordered instead of\n-/// strictly equal or unequal. For example, with the built-in floating-point\n-/// types `a == b` and `a != b` will both evaluate to false if either `a` or\n-/// `b` is NaN (cf. IEEE 754-2008 section 5.11).\n+/// This trait allows for partial equality, for types that do not have an\n+/// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n+/// so floating point types implement `PartialEq` but not `Eq`.\n ///\n-/// PartialEq only requires the `eq` method to be implemented; `ne` is its negation by\n-/// default.\n+/// PartialEq only requires the `eq` method to be implemented; `ne` is defined\n+/// in terms of it by default. Any manual implementation of `ne` *must* respect\n+/// the rule that `eq` is a strict inverse of `ne`; that is, `!(a == b)` if and\n+/// only if `a != b`.\n ///\n /// Eventually, this will be implemented by default for types that implement\n /// `Eq`.\n@@ -147,9 +148,10 @@ pub fn lexical_ordering(o1: Ordering, o2: Ordering) -> Ordering {\n /// PartialOrd only requires implementation of the `lt` method,\n /// with the others generated from default implementations.\n ///\n-/// However it remains possible to implement the others separately,\n-/// for compatibility with floating-point NaN semantics\n-/// (cf. IEEE 754-2008 section 5.11).\n+/// However it remains possible to implement the others separately for types\n+/// which do not have a total order. For example, for floating point numbers,\n+/// `NaN < 0 == false` and `NaN >= 0 == false` (cf. IEEE 754-2008 section\n+/// 5.11).\n #[lang=\"ord\"]\n pub trait PartialOrd: PartialEq {\n     /// This method tests less than (for `self` and `other`) and is used by the `<` operator."}]}