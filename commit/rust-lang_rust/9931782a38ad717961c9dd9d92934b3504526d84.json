{"sha": "9931782a38ad717961c9dd9d92934b3504526d84", "node_id": "C_kwDOAAsO6NoAKDk5MzE3ODJhMzhhZDcxNzk2MWM5ZGQ5ZDkyOTM0YjM1MDQ1MjZkODQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-03T18:12:39Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T19:30:28Z"}, "message": "Document how recursion is handled for `ty::Ty`\n\nBased on this forum discussion:\nhttps://internals.rust-lang.org/t/recursive-type-representation-in-rustc/15235/4", "tree": {"sha": "a1a649175683885b7342ebab9606f900f6fbaa0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1a649175683885b7342ebab9606f900f6fbaa0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9931782a38ad717961c9dd9d92934b3504526d84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9931782a38ad717961c9dd9d92934b3504526d84", "html_url": "https://github.com/rust-lang/rust/commit/9931782a38ad717961c9dd9d92934b3504526d84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9931782a38ad717961c9dd9d92934b3504526d84/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "473eaa42e9365c47d129f72693b5d163a20cf369", "url": "https://api.github.com/repos/rust-lang/rust/commits/473eaa42e9365c47d129f72693b5d163a20cf369", "html_url": "https://github.com/rust-lang/rust/commit/473eaa42e9365c47d129f72693b5d163a20cf369"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "61764f9f0a9311e9b5ca0b04f1ff9400bee457da", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9931782a38ad717961c9dd9d92934b3504526d84/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9931782a38ad717961c9dd9d92934b3504526d84/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=9931782a38ad717961c9dd9d92934b3504526d84", "patch": "@@ -64,6 +64,30 @@ bitflags! {\n /// Moreover, Rust only allows recursive data types through indirection.\n ///\n /// [adt]: https://en.wikipedia.org/wiki/Algebraic_data_type\n+///\n+/// # Recursive types\n+///\n+/// It may seem impossible to represent recursive types using [`Ty`],\n+/// since [`TyKind::Adt`] includes [`AdtDef`], which includes its fields,\n+/// creating a cycle. However, `AdtDef` does not actually include the *types*\n+/// of its fields; it includes just their [`DefId`]s.\n+///\n+/// [`TyKind::Adt`]: ty::TyKind::Adt\n+///\n+/// For example, the following type:\n+///\n+/// ```\n+/// struct S { x: Box<S> }\n+/// ```\n+///\n+/// is essentially represented with [`Ty`] as the following pseudocode:\n+///\n+/// ```\n+/// struct S { x }\n+/// ```\n+///\n+/// where `x` here represents the `DefId` of `S.x`. Then, the `DefId`\n+/// can be used with [`TyCtxt::type_of()`] to get the type of the field.\n pub struct AdtDef {\n     /// The `DefId` of the struct, enum or union item.\n     pub did: DefId,"}, {"sha": "d162578dd002fb55b6ab64fb6802fc2bd6c1b44b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9931782a38ad717961c9dd9d92934b3504526d84/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9931782a38ad717961c9dd9d92934b3504526d84/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9931782a38ad717961c9dd9d92934b3504526d84", "patch": "@@ -1700,7 +1700,7 @@ impl ReprOptions {\n \n impl<'tcx> FieldDef {\n     /// Returns the type of this field. The resulting type is not normalized. The `subst` is\n-    /// typically obtained via the second field of `TyKind::AdtDef`.\n+    /// typically obtained via the second field of [`TyKind::Adt`].\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.did).subst(tcx, subst)\n     }"}]}