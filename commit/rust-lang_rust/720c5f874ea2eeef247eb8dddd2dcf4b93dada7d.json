{"sha": "720c5f874ea2eeef247eb8dddd2dcf4b93dada7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMGM1Zjg3NGVhMmVlZWYyNDdlYjhkZGRkMmRjZjRiOTNkYWRhN2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-27T00:27:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-30T17:41:38Z"}, "message": "implement __rust_maybe_catch_panic", "tree": {"sha": "728794a9dc11571fd670d15885613a3fbf6cdbbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/728794a9dc11571fd670d15885613a3fbf6cdbbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/720c5f874ea2eeef247eb8dddd2dcf4b93dada7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/720c5f874ea2eeef247eb8dddd2dcf4b93dada7d", "html_url": "https://github.com/rust-lang/rust/commit/720c5f874ea2eeef247eb8dddd2dcf4b93dada7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/720c5f874ea2eeef247eb8dddd2dcf4b93dada7d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55438fe5bf2eee99511d811898dd48a70a0cecd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/55438fe5bf2eee99511d811898dd48a70a0cecd1", "html_url": "https://github.com/rust-lang/rust/commit/55438fe5bf2eee99511d811898dd48a70a0cecd1"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "e017a87f034618a9062b1327e4f9e7bdc3d5f28c", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/720c5f874ea2eeef247eb8dddd2dcf4b93dada7d/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720c5f874ea2eeef247eb8dddd2dcf4b93dada7d/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=720c5f874ea2eeef247eb8dddd2dcf4b93dada7d", "patch": "@@ -456,9 +456,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             // An external C function\n             let ty = sig.output();\n             let (ret, target) = destination.unwrap();\n-            self.call_c_abi(instance.def_id(), arg_operands, ret, ty)?;\n-            self.dump_local(ret);\n-            self.goto_block(target);\n+            self.call_c_abi(instance.def_id(), arg_operands, ret, ty, target)?;\n             return Ok(());\n         }\n     \n@@ -493,6 +491,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         arg_operands: &[mir::Operand<'tcx>],\n         dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n+        dest_block: mir::BasicBlock,\n     ) -> EvalResult<'tcx> {\n         let name = self.tcx.item_name(def_id);\n         let attrs = self.tcx.get_attrs(def_id);\n@@ -539,6 +538,34 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::Ptr(new_ptr), dest_ty)?;\n             }\n \n+            \"__rust_maybe_catch_panic\" => {\n+                // We abort on panic, so not much is going on here, but we still have to call the closure\n+                let u8_ptr_ty = self.tcx.mk_mut_ptr(self.tcx.types.u8);\n+                let f = args[0].read_ptr(&self.memory)?;\n+                let data = args[1].read_ptr(&self.memory)?; // FIXME: Why does value_to_primval(args[2], u8_ptr_ty)?.to_ptr()? here end up doing the Wrong Thing (TM)?\n+                let f_instance = self.memory.get_fn(f.alloc_id)?;\n+                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+\n+                // Now we make a functon call.  TODO: Consider making this re-usable?  EvalContext::step does sth. similar for the TLS dtors,\n+                // and of coruse eval_main.\n+                let mir = self.load_mir(f_instance.def)?;\n+                self.push_stack_frame(\n+                    f_instance,\n+                    mir.span,\n+                    mir,\n+                    Lvalue::from_ptr(Pointer::zst_ptr()),\n+                    StackPopCleanup::Goto(dest_block),\n+                )?;\n+\n+                let arg_local = self.frame().mir.args_iter().next().ok_or(EvalError::AbiViolation(\"Argument to __rust_maybe_catch_panic does not take enough arguments.\".to_owned()))?;\n+                let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+                self.write_value(Value::ByVal(PrimVal::Ptr(data)), dest, u8_ptr_ty)?;\n+\n+                // Don't fall through\n+                // FIXME: Do we have to do self.dump_local(ret) anywhere?\n+                return Ok(());\n+            }\n+\n             \"memcmp\" => {\n                 let left = args[0].read_ptr(&self.memory)?;\n                 let right = args[1].read_ptr(&self.memory)?;\n@@ -591,7 +618,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n                 self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n             }\n-            \n+\n             \"write\" => {\n                 let fd = self.value_to_primval(args[0], usize)?.to_u64()?;\n                 let buf = args[1].read_ptr(&self.memory)?;\n@@ -684,6 +711,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // Since we pushed no stack frame, the main loop will act\n         // as if the call just completed and it's returning to the\n         // current frame.\n+        self.dump_local(dest);\n+        self.goto_block(dest_block);\n         Ok(())\n-    }   \n+    }\n }"}, {"sha": "439edc82dde259a1281baa1b4754740fb9f9fd25", "filename": "tests/run-pass/catch.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/720c5f874ea2eeef247eb8dddd2dcf4b93dada7d/tests%2Frun-pass%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720c5f874ea2eeef247eb8dddd2dcf4b93dada7d/tests%2Frun-pass%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcatch.rs?ref=720c5f874ea2eeef247eb8dddd2dcf4b93dada7d", "patch": "@@ -0,0 +1,9 @@\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n+\n+fn main() {\n+    let mut i = 3;\n+    let _ = catch_unwind(AssertUnwindSafe(|| {i -= 2;} ));\n+    for _ in 0..i {\n+        println!(\"I\");\n+    }\n+}"}]}