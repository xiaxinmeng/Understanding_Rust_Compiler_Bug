{"sha": "cf04ae54e680c0b28e8311459cb8fd11315485a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMDRhZTU0ZTY4MGMwYjI4ZTgzMTE0NTljYjhmZDExMzE1NDg1YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T16:42:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T16:42:19Z"}, "message": "Auto merge of #79705 - ijackson:bufwriter-disassemble, r=m-ou-se\n\nBufWriter: Provide into_raw_parts\n\nIf something goes wrong, one might want to unpeel the layers of nested\nWriters to perform recovery actions on the underlying writer, or reuse\nits resources.\n\n`into_inner` can be used for this when the inner writer is still\nworking.  But when the inner writer is broken, and returning errors,\n`into_inner` simply gives you the error from flush, and the same\n`Bufwriter` back again.\n\nHere I provide the necessary function, which I have chosen to call\n`into_raw_parts`.\n\nI had to do something with `panicked`.  Returning it to the caller as\na boolean seemed rather bare.  Throwing the buffered data away in this\nsituation also seems unfriendly: maybe the programmer knows something\nabout the underlying writer and can recover somehow.\n\nSo I went for a custom Error.  This may be overkill, but it does have\nthe nice property that a caller who actually wants to look at the\nbuffered data, rather than simply extracting the inner writer, will be\ntold by the type system if they forget to handle the panicked case.\n\nIf a caller doesn't need the buffer, it can just be discarded.  That\nWriterPanicked is a newtype around Vec<u8> means that hopefully the\nlayouts of the Ok and Err variants can be very similar, with just a\nboolean discriminant.  So this custom error type should compile down\nto nearly no code.\n\n*If this general idea is felt appropriate, I will open a tracking issue, etc.*", "tree": {"sha": "687e4d2dbbd645002155b800cca5a51de32138c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/687e4d2dbbd645002155b800cca5a51de32138c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf04ae54e680c0b28e8311459cb8fd11315485a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf04ae54e680c0b28e8311459cb8fd11315485a0", "html_url": "https://github.com/rust-lang/rust/commit/cf04ae54e680c0b28e8311459cb8fd11315485a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf04ae54e680c0b28e8311459cb8fd11315485a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09fb488f70c5965ec4f64453a6e681fbfcff56c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09fb488f70c5965ec4f64453a6e681fbfcff56c", "html_url": "https://github.com/rust-lang/rust/commit/f09fb488f70c5965ec4f64453a6e681fbfcff56c"}, {"sha": "dea6d6c909ea926d6cb12e3cab98a62d17c32a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/dea6d6c909ea926d6cb12e3cab98a62d17c32a99", "html_url": "https://github.com/rust-lang/rust/commit/dea6d6c909ea926d6cb12e3cab98a62d17c32a99"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "fa7bd0d72d157ceca44363923ab7f72eda6ea38c", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/cf04ae54e680c0b28e8311459cb8fd11315485a0/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf04ae54e680c0b28e8311459cb8fd11315485a0/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=cf04ae54e680c0b28e8311459cb8fd11315485a0", "patch": "@@ -1,7 +1,9 @@\n+use crate::error;\n use crate::fmt;\n use crate::io::{\n     self, Error, ErrorKind, IntoInnerError, IoSlice, Seek, SeekFrom, Write, DEFAULT_BUF_SIZE,\n };\n+use crate::mem;\n \n /// Wraps a writer and buffers its output.\n ///\n@@ -287,6 +289,103 @@ impl<W: Write> BufWriter<W> {\n             Ok(()) => Ok(self.inner.take().unwrap()),\n         }\n     }\n+\n+    /// Disassembles this `BufWriter<W>`, returning the underlying writer, and any buffered but\n+    /// unwritten data.\n+    ///\n+    /// If the underlying writer panicked, it is not known what portion of the data was written.\n+    /// In this case, we return `WriterPanicked` for the buffered data (from which the buffer\n+    /// contents can still be recovered).\n+    ///\n+    /// `into_raw_parts` makes no attempt to flush data and cannot fail.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(bufwriter_into_raw_parts)]\n+    /// use std::io::{BufWriter, Write};\n+    ///\n+    /// let mut buffer = [0u8; 10];\n+    /// let mut stream = BufWriter::new(buffer.as_mut());\n+    /// write!(stream, \"too much data\").unwrap();\n+    /// stream.flush().expect_err(\"it doesn't fit\");\n+    /// let (recovered_writer, buffered_data) = stream.into_raw_parts();\n+    /// assert_eq!(recovered_writer.len(), 0);\n+    /// assert_eq!(&buffered_data.unwrap(), b\"ata\");\n+    /// ```\n+    #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+    pub fn into_raw_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>) {\n+        let buf = mem::take(&mut self.buf);\n+        let buf = if !self.panicked { Ok(buf) } else { Err(WriterPanicked { buf }) };\n+        (self.inner.take().unwrap(), buf)\n+    }\n+}\n+\n+#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+/// Error returned for the buffered data from `BufWriter::into_raw_parts`, when the underlying\n+/// writer has previously panicked.  Contains the (possibly partly written) buffered data.\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(bufwriter_into_raw_parts)]\n+/// use std::io::{self, BufWriter, Write};\n+/// use std::panic::{catch_unwind, AssertUnwindSafe};\n+///\n+/// struct PanickingWriter;\n+/// impl Write for PanickingWriter {\n+///   fn write(&mut self, buf: &[u8]) -> io::Result<usize> { panic!() }\n+///   fn flush(&mut self) -> io::Result<()> { panic!() }\n+/// }\n+///\n+/// let mut stream = BufWriter::new(PanickingWriter);\n+/// write!(stream, \"some data\").unwrap();\n+/// let result = catch_unwind(AssertUnwindSafe(|| {\n+///     stream.flush().unwrap()\n+/// }));\n+/// assert!(result.is_err());\n+/// let (recovered_writer, buffered_data) = stream.into_raw_parts();\n+/// assert!(matches!(recovered_writer, PanickingWriter));\n+/// assert_eq!(buffered_data.unwrap_err().into_inner(), b\"some data\");\n+/// ```\n+pub struct WriterPanicked {\n+    buf: Vec<u8>,\n+}\n+\n+impl WriterPanicked {\n+    /// Returns the perhaps-unwritten data.  Some of this data may have been written by the\n+    /// panicking call(s) to the underlying writer, so simply writing it again is not a good idea.\n+    #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+    pub fn into_inner(self) -> Vec<u8> {\n+        self.buf\n+    }\n+\n+    const DESCRIPTION: &'static str =\n+        \"BufWriter inner writer panicked, what data remains unwritten is not known\";\n+}\n+\n+#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+impl error::Error for WriterPanicked {\n+    #[allow(deprecated, deprecated_in_future)]\n+    fn description(&self) -> &str {\n+        Self::DESCRIPTION\n+    }\n+}\n+\n+#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+impl fmt::Display for WriterPanicked {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", Self::DESCRIPTION)\n+    }\n+}\n+\n+#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+impl fmt::Debug for WriterPanicked {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"WriterPanicked\")\n+            .field(\"buffer\", &format_args!(\"{}/{}\", self.buf.len(), self.buf.capacity()))\n+            .finish()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}