{"sha": "0c820d4123c754522b0655e9e74f692c55685bfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjODIwZDQxMjNjNzU0NTIyYjA2NTVlOWU3NGY2OTJjNTU2ODViZmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-17T17:45:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-23T04:57:05Z"}, "message": "libstd: Rename libcore to libstd and libstd to libextra; update makefiles.\n\nThis only changes the directory names; it does not change the \"real\"\nmetadata names.", "tree": {"sha": "7dbb86c30b451217b4e8f75173043744fe3255ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dbb86c30b451217b4e8f75173043744fe3255ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c820d4123c754522b0655e9e74f692c55685bfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c820d4123c754522b0655e9e74f692c55685bfa", "html_url": "https://github.com/rust-lang/rust/commit/0c820d4123c754522b0655e9e74f692c55685bfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c820d4123c754522b0655e9e74f692c55685bfa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "565942b145efbf6c1d1f66db46423d721b55d32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/565942b145efbf6c1d1f66db46423d721b55d32c", "html_url": "https://github.com/rust-lang/rust/commit/565942b145efbf6c1d1f66db46423d721b55d32c"}], "stats": {"total": 8004, "additions": 3980, "deletions": 4024}, "files": [{"sha": "0a652c0f35017927b3ed1c820f324de98ea4e04d", "filename": "Makefile.in", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -205,8 +205,8 @@ define DEF_LIBS\n \n CFG_RUNTIME_$(1) :=$(call CFG_LIB_NAME_$(1),rustrt)\n CFG_RUSTLLVM_$(1) :=$(call CFG_LIB_NAME_$(1),rustllvm)\n-CFG_CORELIB_$(1) :=$(call CFG_LIB_NAME_$(1),core)\n CFG_STDLIB_$(1) :=$(call CFG_LIB_NAME_$(1),std)\n+CFG_EXTRALIB_$(1) :=$(call CFG_LIB_NAME_$(1),extra)\n CFG_LIBRUSTC_$(1) :=$(call CFG_LIB_NAME_$(1),rustc)\n CFG_LIBSYNTAX_$(1) :=$(call CFG_LIB_NAME_$(1),syntax)\n CFG_LIBFUZZER_$(1) :=$(call CFG_LIB_NAME_$(1),fuzzer)\n@@ -215,17 +215,17 @@ CFG_LIBRUSTDOC_$(1) :=$(call CFG_LIB_NAME_$(1),rustdoc)\n CFG_LIBRUSTI_$(1) :=$(call CFG_LIB_NAME_$(1),rusti)\n CFG_LIBRUST_$(1) :=$(call CFG_LIB_NAME_$(1),rust)\n \n-STDLIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),std)\n-CORELIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),core)\n+EXTRALIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),std)\n+STDLIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),core)\n LIBRUSTC_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustc)\n LIBSYNTAX_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),syntax)\n LIBFUZZER_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),fuzzer)\n LIBRUSTPKG_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustpkg)\n LIBRUSTDOC_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustdoc)\n LIBRUSTI_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rusti)\n LIBRUST_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rust)\n+EXTRALIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),extra)\n STDLIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),std)\n-CORELIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),core)\n LIBRUSTC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustc)\n LIBSYNTAX_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),syntax)\n LIBFUZZER_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),fuzzer)\n@@ -240,19 +240,19 @@ $(foreach target,$(CFG_TARGET_TRIPLES),\\\n   $(eval $(call DEF_LIBS,$(target))))\n \n ######################################################################\n-# Core library variables\n+# Standard library variables\n ######################################################################\n \n-CORELIB_CRATE := $(S)src/libcore/core.rc\n-CORELIB_INPUTS := $(wildcard $(addprefix $(S)src/libcore/,        \\\n+STDLIB_CRATE := $(S)src/libstd/core.rc\n+STDLIB_INPUTS := $(wildcard $(addprefix $(S)src/libstd/,        \\\n                                            core.rc *.rs */*.rs */*/*rs */*/*/*rs))\n \n ######################################################################\n-# Standard library variables\n+# Extra library variables\n ######################################################################\n \n-STDLIB_CRATE := $(S)src/libstd/std.rc\n-STDLIB_INPUTS := $(wildcard $(addprefix $(S)src/libstd/,          \\\n+EXTRALIB_CRATE := $(S)src/libextra/std.rc\n+EXTRALIB_INPUTS := $(wildcard $(addprefix $(S)src/libextra/,          \\\n                                           std.rc *.rs */*.rs))\n \n ######################################################################\n@@ -344,33 +344,33 @@ TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/rustc/$(2)\n TBIN$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/bin\n TLIB$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/$$(CFG_LIBDIR)\n \n-# The name of the core and standard libraries used by rustc\n+# The name of the standard and extra libraries used by rustc\n ifdef CFG_DISABLE_SHAREDSTD\n-  HCORELIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/libcore.rlib\n-  TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/libcore.rlib\n-\n   HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n     $$(HLIB$(1)_H_$(3))/libstd.rlib\n   TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n     $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n \n+  HEXTRALIB_DEFAULT$(1)_H_$(3) = \\\n+    $$(HLIB$(1)_H_$(3))/libextra.rlib\n+  TEXTRALIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/libextra.rlib\n+\n   HLIBRUSTC_DEFAULT$(1)_H_$(3) = \\\n     $$(HLIB$(1)_H_$(3))/librustc.rlib\n   TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n     $$(TLIB$(1)_T_$(2)_H_$(3))/librustc.rlib\n else\n-  HCORELIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_CORELIB_$(3))\n-  TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2))\n-\n   HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n     $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB_$(3))\n   TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n     $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n \n+  HEXTRALIB_DEFAULT$(1)_H_$(3) = \\\n+    $$(HLIB$(1)_H_$(3))/$(CFG_EXTRALIB_$(3))\n+  TEXTRALIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))\n+\n   HLIBRUSTC_DEFAULT$(1)_H_$(3) = \\\n     $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n   TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n@@ -382,8 +382,8 @@ HSREQ$(1)_H_$(3) = \\\n \t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n \t$$(HLIB$(1)_H_$(3))/$(CFG_RUNTIME_$(3)) \\\n \t$$(HLIB$(1)_H_$(3))/$(CFG_RUSTLLVM_$(3)) \\\n-\t$$(HCORELIB_DEFAULT$(1)_H_$(3)) \\\n \t$$(HSTDLIB_DEFAULT$(1)_H_$(3)) \\\n+\t$$(HEXTRALIB_DEFAULT$(1)_H_$(3)) \\\n \t$$(HLIBSYNTAX_DEFAULT$(1)_H_$(3)) \\\n \t$$(HLIBRUSTC_DEFAULT$(1)_H_$(3)) \\\n \t$$(MKFILE_DEPS)\n@@ -397,8 +397,8 @@ TSREQ$(1)_T_$(2)_H_$(3) = \\\n # Prerequisites for a working stageN compiler and libraries, for a specific target\n SREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))\n \n # Prerequisites for a working stageN compiler and libraries, for a specific target\n CSREQ$(1)_T_$(2)_H_$(3) = \\\n@@ -413,8 +413,8 @@ CSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTDOC_$(3)) \\\n \t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTI_$(3)) \\\n \t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUST_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))  \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))  \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))  \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBFUZZER_$(2)) \\"}, {"sha": "0b8189416bb0b46eee368c9b89f29af091cf4339", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/configure", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -643,7 +643,7 @@ fi\n step_msg \"making directories\"\n \n for i in \\\n-    doc doc/core doc/std \\\n+    doc doc/std doc/extra \\\n     dl tmp\n do\n     make_dir $i"}, {"sha": "9a074b29d8b1c45231e1108eaaa438e024a9b562", "filename": "mk/clean.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -73,14 +73,14 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTPKG_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTDOC_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_CORELIB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_STDLIB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_EXTRALIB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBSYNTAX_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTI_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUST_$(2))\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CORELIB_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(EXTRALIB_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBSYNTAX_GLOB_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBFUZZER_GLOB_$(2))\n@@ -111,14 +111,14 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTI_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUST_$(2))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CORELIB_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(EXTRALIB_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBSYNTAX_GLOB_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBFUZZER_GLOB_$(2))"}, {"sha": "96f35031de93036a22142be1e13eedc1735b663b", "filename": "mk/dist.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -33,9 +33,9 @@ PKG_FILES := \\\n       compiletest                              \\\n       etc                                      \\\n       libfuzzer                                \\\n-      libcore                                  \\\n-      libsyntax                                \\\n+      libextra                                 \\\n       libstd                                   \\\n+      libsyntax                                \\\n       rt                                       \\\n       librustdoc                               \\\n       rustllvm                                 \\"}, {"sha": "8470da7c07b2c30fd0e09e622b62bfea45b7c3ff", "filename": "mk/docs.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -173,7 +173,7 @@ endif\n \n \n ######################################################################\n-# Rustdoc (libcore/std)\n+# Rustdoc (libstd/extra)\n ######################################################################\n \n ifeq ($(CFG_PANDOC),)\n@@ -199,8 +199,8 @@ doc/$(1)/rust.css: rust.css\n DOCS += doc/$(1)/index.html\n endef\n \n-$(eval $(call libdoc,core,$(CORELIB_CRATE),$(CORELIB_INPUTS)))\n $(eval $(call libdoc,std,$(STDLIB_CRATE),$(STDLIB_INPUTS)))\n+$(eval $(call libdoc,extra,$(EXTRALIB_CRATE),$(EXTRALIB_INPUTS)))\n endif\n \n "}, {"sha": "ac3bc8ad8cbf9b648d42492a0a7cee37e402e412", "filename": "mk/host.mk", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -28,8 +28,8 @@ $$(HBIN$(2)_H_$(4))/rustc$$(X_$(4)): \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)) \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(4)) \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4)) \\\n-\t$$(HCORELIB_DEFAULT$(2)_H_$(4)) \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(4)) \\\n+\t$$(HEXTRALIB_DEFAULT$(2)_H_$(4)) \\\n \t| $$(HBIN$(2)_H_$(4))/\n \n \t@$$(call E, cp: $$@)\n@@ -40,8 +40,8 @@ $$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4)): \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_LIBSYNTAX_$(4)) \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)) \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(4)) \\\n-\t$$(HCORELIB_DEFAULT$(2)_H_$(4)) \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(4)) \\\n+\t$$(HEXTRALIB_DEFAULT$(2)_H_$(4)) \\\n \t| $$(HLIB$(2)_H_$(4))/\n \n \t@$$(call E, cp: $$@)\n@@ -54,8 +54,8 @@ $$(HLIB$(2)_H_$(4))/$(CFG_LIBSYNTAX_$(4)): \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBSYNTAX_$(4)) \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)) \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(4)) \\\n-\t$$(HCORELIB_DEFAULT$(2)_H_$(4)) \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(4)) \\\n+\t$$(HEXTRALIB_DEFAULT$(2)_H_$(4)) \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n@@ -69,53 +69,53 @@ $$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)): \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$(CFG_CORELIB_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4)) \\\n+$$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4)) \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)) \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-# Subtle: We do not let the shell expand $(CORELIB_DSYM_GLOB) directly rather\n+# Subtle: We do not let the shell expand $(STDLIB_DSYM_GLOB) directly rather\n # we use Make's $$(wildcard) facility. The reason is that, on mac, when using\n-# USE_SNAPSHOT_CORELIB, we copy the core.dylib file out of the snapshot.\n+# USE_SNAPSHOT_STDLIB, we copy the std.dylib file out of the snapshot.\n # In that case, there is no .dSYM file.  Annoyingly, bash then refuses to expand\n-# glob, and cp reports an error because libcore-*.dylib.dsym does not exist.\n+# glob, and cp reports an error because libstd-*.dylib.dsym does not exist.\n # Make instead expands the glob to nothing, which gives us the correct behavior.\n # (Copy .dsym file if it exists, but do nothing otherwise)\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_DSYM_GLOB_$(4))) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4)) \\\n-\t$$(HLIB$(2)_H_$(4))/$(CFG_CORELIB_$(4)) \\\n+$$(HLIB$(2)_H_$(4))/$(CFG_EXTRALIB_$(4)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)) \\\n \t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)) \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB_$(4)) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_DSYM_GLOB_$(4))) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(EXTRALIB_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(EXTRALIB_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HLIB$(2)_H_$(4))/libcore.rlib: \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/libcore.rlib \\\n+$$(HLIB$(2)_H_$(4))/libstd.rlib: \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/libstd.rlib \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME_$(4)) \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/libstd.rlib: \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/libstd.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/libcore.rlib \\\n+$$(HLIB$(2)_H_$(4))/libextra.rlib: \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/libextra.rlib \\\n+\t$$(HLIB$(2)_H_$(4))/libstd.rlib \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME_$(4)) \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n $$(HLIB$(2)_H_$(4))/librustc.rlib: \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/librustc.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/libcore.rlib \\\n \t$$(HLIB$(2)_H_$(4))/libstd.rlib \\\n+\t$$(HLIB$(2)_H_$(4))/libextra.rlib \\\n \t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME_$(4)) \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$@)"}, {"sha": "ae6bd29228f0bef799357d9e4fe31eb26843a1c8", "filename": "mk/install.mk", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -52,10 +52,10 @@ define INSTALL_TARGET_N\n install-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)mkdir -p $$(PTL$(1)$(2))\n \t$$(Q)$$(call INSTALL_LIB,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_RUNTIME_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CORELIB_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n \t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(STDLIB_GLOB_$(1)))\n+\t$$(Q)$$(call INSTALL_LIB, \\\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(EXTRALIB_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),libmorestack.a)\n \n endef\n@@ -64,10 +64,10 @@ define INSTALL_HOST_N\n install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)mkdir -p $$(PTL$(1)$(2))\n \t$$(Q)$$(call INSTALL_LIB,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_RUNTIME_$(1)))\n-\t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CORELIB_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n \t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(STDLIB_GLOB_$(1)))\n+\t$$(Q)$$(call INSTALL_LIB, \\\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(EXTRALIB_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n \t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTC_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n@@ -113,8 +113,8 @@ install-host: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rusti$(X_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rust$(X_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(CORELIB_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(STDLIB_GLOB_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(EXTRALIB_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUSTC_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBSYNTAX_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUSTI_GLOB_$(CFG_BUILD_TRIPLE)))\n@@ -141,8 +141,8 @@ uninstall:\n \t$(Q)rm -f $(PHL)/$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE))\n \t$(Q)rm -f $(PHL)/$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE))\n \t$(Q)for i in \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(CORELIB_GLOB_$(CFG_BUILD_TRIPLE))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(STDLIB_GLOB_$(CFG_BUILD_TRIPLE))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(EXTRALIB_GLOB_$(CFG_BUILD_TRIPLE))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTC_GLOB_$(CFG_BUILD_TRIPLE))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBSYNTAX_GLOB_$(CFG_BUILD_TRIPLE))) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD_TRIPLE))) \\\n@@ -203,16 +203,16 @@ define INSTALL_RUNTIME_TARGET_N\n install-runtime-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$(Q)$(call ADB_SHELL,mkdir,$(CFG_RUNTIME_PUSH_DIR))\n \t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(CFG_RUNTIME_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n-\t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(CORELIB_GLOB_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n \t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(STDLIB_GLOB_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n+\t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(EXTRALIB_GLOB_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n endef\n \n define INSTALL_RUNTIME_TARGET_CLEANUP_N\n install-runtime-target-$(1)-cleanup:\n \t$(Q)$(call ADB,remount)\n \t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(CFG_RUNTIME_$(1)))\n-\t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(CORELIB_GLOB_$(1)))\n \t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(STDLIB_GLOB_$(1)))\n+\t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(EXTRALIB_GLOB_$(1)))\n endef\n \n $(eval $(call INSTALL_RUNTIME_TARGET_N,arm-linux-androideabi,$(CFG_BUILD_TRIPLE)))"}, {"sha": "0a24d9e87979d46b5020f6506126200f166420a7", "filename": "mk/pp.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -12,8 +12,8 @@\n ifdef PPFILES\n   PP_INPUTS_FILTERED := $(wildcard $(PPFILES))\n else\n-  PP_INPUTS = $(wildcard $(addprefix $(S)src/libcore/,*.rs */*.rs)) \\\n-              $(wildcard $(addprefix $(S)src/libstd/,*.rs */*.rs)) \\\n+  PP_INPUTS = $(wildcard $(addprefix $(S)src/libstd/,*.rs */*.rs)) \\\n+              $(wildcard $(addprefix $(S)src/libextra/,*.rs */*.rs)) \\\n               $(wildcard $(addprefix $(S)src/rustc/,*.rs */*.rs */*/*.rs)) \\\n               $(wildcard $(S)src/test/*/*.rs    \\\n                          $(S)src/test/*/*/*.rs) \\"}, {"sha": "a1aaef4d554ad039250d972ec22a77b5a49db59c", "filename": "mk/stage0.mk", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -25,11 +25,11 @@ $(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE)): \\\n \t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_CORELIB_$(CFG_BUILD_TRIPLE)): \\\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_STDLIB_$(CFG_BUILD_TRIPLE)): \\\n \t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_STDLIB_$(CFG_BUILD_TRIPLE)): \\\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_EXTRALIB_$(CFG_BUILD_TRIPLE)): \\\n \t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)touch $@\n \n@@ -58,16 +58,16 @@ $$(HLIB0_H_$(1))/$(CFG_RUNTIME_$(1)): \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB0_H_$(1))/$(CFG_CORELIB_$(1)): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_CORELIB_$(1))\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$(CORELIB_GLOB_$(1)) $$@\n-\n $$(HLIB0_H_$(1))/$(CFG_STDLIB_$(1)): \\\n \t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_STDLIB_$(1))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$(STDLIB_GLOB_$(1)) $$@\n \n+$$(HLIB0_H_$(1))/$(CFG_EXTRALIB_$(1)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_EXTRALIB_$(1))\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$(EXTRALIB_GLOB_$(1)) $$@\n+\n $$(HLIB0_H_$(1))/$(CFG_LIBRUSTC_$(1)): \\\n \t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_LIBRUSTC_$(1))\n \t@$$(call E, cp: $$@)"}, {"sha": "9b4153d7ed50d460dcf87012ca605443542aadca", "filename": "mk/target.mk", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -29,16 +29,16 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2)): \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)): \\\n-\t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS) \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)): \\\n+\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)): \\\n-\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)) \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2)): \\\n+\t\t$$(EXTRALIB_CRATE) $$(EXTRALIB_INPUTS) \\\n+\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n@@ -47,8 +47,8 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)): \\\n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n                 $$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\\\n-\t\t$$(TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3))      \\\n-\t\t$$(TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3)) \\\n+\t\t$$(TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3))      \\\n+\t\t$$(TEXTRALIB_DEFAULT$(1)_T_$(2)_H_$(3)) \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) $(BORROWCK) -o $$@ $$< && touch $$@"}, {"sha": "6e84aa49a88ed54cdc2d6e117f40afbfbf168f4d", "filename": "mk/tests.mk", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -14,7 +14,7 @@\n ######################################################################\n \n # The names of crates that must be tested\n-TEST_TARGET_CRATES = core std\n+TEST_TARGET_CRATES = std extra\n TEST_HOST_CRATES = syntax rustc rustdoc rusti rust rustpkg\n TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n \n@@ -148,7 +148,7 @@ check-test: cleantestlibs cleantmptestlogs all check-stage2-rfail\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n check-lite: cleantestlibs cleantmptestlogs \\\n-\tcheck-stage2-core check-stage2-std check-stage2-rpass \\\n+\tcheck-stage2-std check-stage2-extra check-stage2-rpass \\\n \tcheck-stage2-rfail check-stage2-cfail\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n@@ -281,22 +281,22 @@ $(foreach host,$(CFG_HOST_TRIPLES), \\\n \n define TEST_RUNNER\n \n-# If NO_REBUILD is set then break the dependencies on std so we can\n-# test crates without rebuilding core and std first\n+# If NO_REBUILD is set then break the dependencies on extra so we can\n+# test crates without rebuilding std and extra first\n ifeq ($(NO_REBUILD),)\n STDTESTDEP_$(1)_$(2)_$(3) = $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB_$(2))\n else\n STDTESTDEP_$(1)_$(2)_$(3) =\n endif\n \n-$(3)/stage$(1)/test/coretest-$(2)$$(X_$(2)):\t\t\t\\\n-\t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS)\t\\\n+$(3)/stage$(1)/test/stdtest-$(2)$$(X_$(2)):\t\t\t\\\n+\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS)\t\\\n \t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/stage$(1)/test/stdtest-$(2)$$(X_$(2)):\t\t\t\\\n-\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS)\t\\\n+$(3)/stage$(1)/test/extratest-$(2)$$(X_$(2)):\t\t\t\\\n+\t\t$$(EXTRALIB_CRATE) $$(EXTRALIB_INPUTS)\t\\\n \t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test"}, {"sha": "018da2a6401694c22cc101ec955bbea48eb3814b", "filename": "mk/tools.mk", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -41,8 +41,8 @@ define TOOLS_STAGE_N_TARGET\n $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBFUZZER_$(4)):          \\\n \t\t$$(FUZZER_LIB) $$(FUZZER_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n@@ -56,16 +56,16 @@ $$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X_$(4)):\t\t\t\t\\\n $$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X_$(4)):\t\t\t\\\n \t\t$$(COMPILETEST_CRATE) $$(COMPILETEST_INPUTS)\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))      \\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))      \\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n \n $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4)):\t\t\\\n \t\t$$(RUSTPKG_LIB) $$(RUSTPKG_INPUTS)\t\t    \\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n@@ -79,8 +79,8 @@ $$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X_$(4)):\t\t\t\t\\\n $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4)):\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n@@ -94,8 +94,8 @@ $$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X_$(4)):\t\t\t\\\n $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(4)):\t\t\\\n \t\t$$(RUSTI_LIB) $$(RUSTI_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n@@ -109,8 +109,8 @@ $$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X_$(4)):\t\t\t\\\n $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(4)):\t\t\\\n \t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_EXTRALIB_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4))\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(4))\t\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4))\t\\"}, {"sha": "59eb915c239fee0ee376ccce41434a602b999d22", "filename": "src/libcore/comm.rs", "status": "removed", "additions": 0, "deletions": 810, "changes": 810, "blob_url": "https://github.com/rust-lang/rust/blob/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=565942b145efbf6c1d1f66db46423d721b55d32c", "patch": "@@ -1,810 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-Message passing\n-*/\n-\n-use cast::{transmute, transmute_mut};\n-use container::Container;\n-use either::{Either, Left, Right};\n-use kinds::Owned;\n-use option::{Option, Some, None};\n-use uint;\n-use vec;\n-use vec::OwnedVector;\n-use util::replace;\n-use unstable::sync::{Exclusive, exclusive};\n-use rtcomm = rt::comm;\n-use rt;\n-\n-use pipes::{wait_many, PacketHeader};\n-\n-// FIXME #5160: Making this public exposes some plumbing from\n-// pipes. Needs some refactoring\n-pub use pipes::Selectable;\n-\n-/// A trait for things that can send multiple messages.\n-pub trait GenericChan<T> {\n-    /// Sends a message.\n-    fn send(&self, x: T);\n-}\n-\n-/// Things that can send multiple messages and can detect when the receiver\n-/// is closed\n-pub trait GenericSmartChan<T> {\n-    /// Sends a message, or report if the receiver has closed the connection.\n-    fn try_send(&self, x: T) -> bool;\n-}\n-\n-/// A trait for things that can receive multiple messages.\n-pub trait GenericPort<T> {\n-    /// Receives a message, or fails if the connection closes.\n-    fn recv(&self) -> T;\n-\n-    /** Receives a message, or returns `none` if\n-    the connection is closed or closes.\n-    */\n-    fn try_recv(&self) -> Option<T>;\n-}\n-\n-/// Ports that can `peek`\n-pub trait Peekable<T> {\n-    /// Returns true if a message is available\n-    fn peek(&self) -> bool;\n-}\n-\n-/// An endpoint that can send many messages.\n-pub struct Chan<T> {\n-    inner: Either<pipesy::Chan<T>, rtcomm::Chan<T>>\n-}\n-\n-/// An endpoint that can receive many messages.\n-pub struct Port<T> {\n-    inner: Either<pipesy::Port<T>, rtcomm::Port<T>>\n-}\n-\n-/** Creates a `(Port, Chan)` pair.\n-\n-These allow sending or receiving an unlimited number of messages.\n-\n-*/\n-pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n-    let (port, chan) = match rt::context() {\n-        rt::OldTaskContext => match pipesy::stream() {\n-            (p, c) => (Left(p), Left(c))\n-        },\n-        _ => match rtcomm::stream() {\n-            (p, c) => (Right(p), Right(c))\n-        }\n-    };\n-    let port = Port { inner: port };\n-    let chan = Chan { inner: chan };\n-    return (port, chan);\n-}\n-\n-impl<T: Owned> GenericChan<T> for Chan<T> {\n-    fn send(&self, x: T) {\n-        match self.inner {\n-            Left(ref chan) => chan.send(x),\n-            Right(ref chan) => chan.send(x)\n-        }\n-    }\n-}\n-\n-impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n-    fn try_send(&self, x: T) -> bool {\n-        match self.inner {\n-            Left(ref chan) => chan.try_send(x),\n-            Right(ref chan) => chan.try_send(x)\n-        }\n-    }\n-}\n-\n-impl<T: Owned> GenericPort<T> for Port<T> {\n-    fn recv(&self) -> T {\n-        match self.inner {\n-            Left(ref port) => port.recv(),\n-            Right(ref port) => port.recv()\n-        }\n-    }\n-\n-    fn try_recv(&self) -> Option<T> {\n-        match self.inner {\n-            Left(ref port) => port.try_recv(),\n-            Right(ref port) => port.try_recv()\n-        }\n-    }\n-}\n-\n-impl<T: Owned> Peekable<T> for Port<T> {\n-    fn peek(&self) -> bool {\n-        match self.inner {\n-            Left(ref port) => port.peek(),\n-            Right(ref port) => port.peek()\n-        }\n-    }\n-}\n-\n-impl<T: Owned> Selectable for Port<T> {\n-    fn header(&mut self) -> *mut PacketHeader {\n-        match self.inner {\n-            Left(ref mut port) => port.header(),\n-            Right(_) => fail!(\"can't select on newsched ports\")\n-        }\n-    }\n-}\n-\n-/// Treat many ports as one.\n-#[unsafe_mut_field(ports)]\n-pub struct PortSet<T> {\n-    ports: ~[pipesy::Port<T>],\n-}\n-\n-pub impl<T: Owned> PortSet<T> {\n-    fn new() -> PortSet<T> {\n-        PortSet {\n-            ports: ~[]\n-        }\n-    }\n-\n-    fn add(&self, port: Port<T>) {\n-        let Port { inner } = port;\n-        let port = match inner {\n-            Left(p) => p,\n-            Right(_) => fail!(\"PortSet not implemented\")\n-        };\n-        unsafe {\n-            let self_ports = transmute_mut(&self.ports);\n-            self_ports.push(port)\n-        }\n-    }\n-\n-    fn chan(&self) -> Chan<T> {\n-        let (po, ch) = stream();\n-        self.add(po);\n-        ch\n-    }\n-}\n-\n-impl<T:Owned> GenericPort<T> for PortSet<T> {\n-    fn try_recv(&self) -> Option<T> {\n-        unsafe {\n-            let self_ports = transmute_mut(&self.ports);\n-            let mut result = None;\n-            // we have to swap the ports array so we aren't borrowing\n-            // aliasable mutable memory.\n-            let mut ports = replace(self_ports, ~[]);\n-            while result.is_none() && ports.len() > 0 {\n-                let i = wait_many(ports);\n-                match ports[i].try_recv() {\n-                    Some(m) => {\n-                        result = Some(m);\n-                    }\n-                    None => {\n-                        // Remove this port.\n-                        let _ = ports.swap_remove(i);\n-                    }\n-                }\n-            }\n-            *self_ports = ports;\n-            result\n-        }\n-    }\n-    fn recv(&self) -> T {\n-        self.try_recv().expect(\"port_set: endpoints closed\")\n-    }\n-}\n-\n-impl<T: Owned> Peekable<T> for PortSet<T> {\n-    fn peek(&self) -> bool {\n-        // It'd be nice to use self.port.each, but that version isn't\n-        // pure.\n-        for uint::range(0, vec::uniq_len(&const self.ports)) |i| {\n-            let port: &pipesy::Port<T> = &self.ports[i];\n-            if port.peek() {\n-                return true;\n-            }\n-        }\n-        false\n-    }\n-}\n-\n-/// A channel that can be shared between many senders.\n-pub struct SharedChan<T> {\n-    ch: Exclusive<pipesy::Chan<T>>\n-}\n-\n-impl<T: Owned> SharedChan<T> {\n-    /// Converts a `chan` into a `shared_chan`.\n-    pub fn new(c: Chan<T>) -> SharedChan<T> {\n-        let Chan { inner } = c;\n-        let c = match inner {\n-            Left(c) => c,\n-            Right(_) => fail!(\"SharedChan not implemented\")\n-        };\n-        SharedChan { ch: exclusive(c) }\n-    }\n-}\n-\n-impl<T: Owned> GenericChan<T> for SharedChan<T> {\n-    fn send(&self, x: T) {\n-        let mut xx = Some(x);\n-        do self.ch.with_imm |chan| {\n-            let x = replace(&mut xx, None);\n-            chan.send(x.unwrap())\n-        }\n-    }\n-}\n-\n-impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n-    fn try_send(&self, x: T) -> bool {\n-        let mut xx = Some(x);\n-        do self.ch.with_imm |chan| {\n-            let x = replace(&mut xx, None);\n-            chan.try_send(x.unwrap())\n-        }\n-    }\n-}\n-\n-impl<T: Owned> ::clone::Clone for SharedChan<T> {\n-    fn clone(&self) -> SharedChan<T> {\n-        SharedChan { ch: self.ch.clone() }\n-    }\n-}\n-\n-pub struct PortOne<T> {\n-    inner: Either<pipesy::PortOne<T>, rtcomm::PortOne<T>>\n-}\n-\n-pub struct ChanOne<T> {\n-    inner: Either<pipesy::ChanOne<T>, rtcomm::ChanOne<T>>\n-}\n-\n-pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n-    let (port, chan) = match rt::context() {\n-        rt::OldTaskContext => match pipesy::oneshot() {\n-            (p, c) => (Left(p), Left(c)),\n-        },\n-        _ => match rtcomm::oneshot() {\n-            (p, c) => (Right(p), Right(c))\n-        }\n-    };\n-    let port = PortOne { inner: port };\n-    let chan = ChanOne { inner: chan };\n-    return (port, chan);\n-}\n-\n-impl<T: Owned> PortOne<T> {\n-    pub fn recv(self) -> T {\n-        let PortOne { inner } = self;\n-        match inner {\n-            Left(p) => p.recv(),\n-            Right(p) => p.recv()\n-        }\n-    }\n-\n-    pub fn try_recv(self) -> Option<T> {\n-        let PortOne { inner } = self;\n-        match inner {\n-            Left(p) => p.try_recv(),\n-            Right(p) => p.try_recv()\n-        }\n-    }\n-}\n-\n-impl<T: Owned> ChanOne<T> {\n-    pub fn send(self, data: T) {\n-        let ChanOne { inner } = self;\n-        match inner {\n-            Left(p) => p.send(data),\n-            Right(p) => p.send(data)\n-        }\n-    }\n-\n-    pub fn try_send(self, data: T) -> bool {\n-        let ChanOne { inner } = self;\n-        match inner {\n-            Left(p) => p.try_send(data),\n-            Right(p) => p.try_send(data)\n-        }\n-    }\n-}\n-\n-pub fn recv_one<T: Owned>(port: PortOne<T>) -> T {\n-    let PortOne { inner } = port;\n-    match inner {\n-        Left(p) => pipesy::recv_one(p),\n-        Right(p) => p.recv()\n-    }\n-}\n-\n-pub fn try_recv_one<T: Owned>(port: PortOne<T>) -> Option<T> {\n-    let PortOne { inner } = port;\n-    match inner {\n-        Left(p) => pipesy::try_recv_one(p),\n-        Right(p) => p.try_recv()\n-    }\n-}\n-\n-pub fn send_one<T: Owned>(chan: ChanOne<T>, data: T) {\n-    let ChanOne { inner } = chan;\n-    match inner {\n-        Left(c) => pipesy::send_one(c, data),\n-        Right(c) => c.send(data)\n-    }\n-}\n-\n-pub fn try_send_one<T: Owned>(chan: ChanOne<T>, data: T) -> bool {\n-    let ChanOne { inner } = chan;\n-    match inner {\n-        Left(c) => pipesy::try_send_one(c, data),\n-        Right(c) => c.try_send(data)\n-    }\n-}\n-\n-mod pipesy {\n-\n-    use kinds::Owned;\n-    use option::{Option, Some, None};\n-    use pipes::{recv, try_recv, peek, PacketHeader};\n-    use super::{GenericChan, GenericSmartChan, GenericPort, Peekable, Selectable};\n-    use cast::transmute_mut;\n-    use util::replace;\n-\n-    /*proto! oneshot (\n-        Oneshot:send<T:Owned> {\n-            send(T) -> !\n-        }\n-    )*/\n-\n-    #[allow(non_camel_case_types)]\n-    pub mod oneshot {\n-        priv use core::kinds::Owned;\n-        use ptr::to_mut_unsafe_ptr;\n-\n-        pub fn init<T: Owned>() -> (client::Oneshot<T>, server::Oneshot<T>) {\n-            pub use core::pipes::HasBuffer;\n-\n-            let buffer = ~::core::pipes::Buffer {\n-                header: ::core::pipes::BufferHeader(),\n-                data: __Buffer {\n-                    Oneshot: ::core::pipes::mk_packet::<Oneshot<T>>()\n-                },\n-            };\n-            do ::core::pipes::entangle_buffer(buffer) |buffer, data| {\n-                data.Oneshot.set_buffer(buffer);\n-                to_mut_unsafe_ptr(&mut data.Oneshot)\n-            }\n-        }\n-        #[allow(non_camel_case_types)]\n-        pub enum Oneshot<T> { pub send(T), }\n-        #[allow(non_camel_case_types)]\n-        pub struct __Buffer<T> {\n-            Oneshot: ::core::pipes::Packet<Oneshot<T>>,\n-        }\n-\n-        #[allow(non_camel_case_types)]\n-        pub mod client {\n-\n-            priv use core::kinds::Owned;\n-\n-            #[allow(non_camel_case_types)]\n-            pub fn try_send<T: Owned>(pipe: Oneshot<T>, x_0: T) ->\n-                ::core::option::Option<()> {\n-                {\n-                    use super::send;\n-                    let message = send(x_0);\n-                    if ::core::pipes::send(pipe, message) {\n-                        ::core::pipes::rt::make_some(())\n-                    } else { ::core::pipes::rt::make_none() }\n-                }\n-            }\n-\n-            #[allow(non_camel_case_types)]\n-            pub fn send<T: Owned>(pipe: Oneshot<T>, x_0: T) {\n-                {\n-                    use super::send;\n-                    let message = send(x_0);\n-                    ::core::pipes::send(pipe, message);\n-                }\n-            }\n-\n-            #[allow(non_camel_case_types)]\n-            pub type Oneshot<T> =\n-                ::core::pipes::SendPacketBuffered<super::Oneshot<T>,\n-            super::__Buffer<T>>;\n-        }\n-\n-        #[allow(non_camel_case_types)]\n-        pub mod server {\n-            #[allow(non_camel_case_types)]\n-            pub type Oneshot<T> =\n-                ::core::pipes::RecvPacketBuffered<super::Oneshot<T>,\n-            super::__Buffer<T>>;\n-        }\n-    }\n-\n-    /// The send end of a oneshot pipe.\n-    pub struct ChanOne<T> {\n-        contents: oneshot::client::Oneshot<T>\n-    }\n-\n-    impl<T> ChanOne<T> {\n-        pub fn new(contents: oneshot::client::Oneshot<T>) -> ChanOne<T> {\n-            ChanOne {\n-                contents: contents\n-            }\n-        }\n-    }\n-\n-    /// The receive end of a oneshot pipe.\n-    pub struct PortOne<T> {\n-        contents: oneshot::server::Oneshot<T>\n-    }\n-\n-    impl<T> PortOne<T> {\n-        pub fn new(contents: oneshot::server::Oneshot<T>) -> PortOne<T> {\n-            PortOne {\n-                contents: contents\n-            }\n-        }\n-    }\n-\n-    /// Initialiase a (send-endpoint, recv-endpoint) oneshot pipe pair.\n-    pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n-        let (chan, port) = oneshot::init();\n-        (PortOne::new(port), ChanOne::new(chan))\n-    }\n-\n-    pub impl<T: Owned> PortOne<T> {\n-        fn recv(self) -> T { recv_one(self) }\n-        fn try_recv(self) -> Option<T> { try_recv_one(self) }\n-        fn unwrap(self) -> oneshot::server::Oneshot<T> {\n-            match self {\n-                PortOne { contents: s } => s\n-            }\n-        }\n-    }\n-\n-    pub impl<T: Owned> ChanOne<T> {\n-        fn send(self, data: T) { send_one(self, data) }\n-        fn try_send(self, data: T) -> bool { try_send_one(self, data) }\n-        fn unwrap(self) -> oneshot::client::Oneshot<T> {\n-            match self {\n-                ChanOne { contents: s } => s\n-            }\n-        }\n-    }\n-\n-    /**\n-    * Receive a message from a oneshot pipe, failing if the connection was\n-    * closed.\n-    */\n-    pub fn recv_one<T: Owned>(port: PortOne<T>) -> T {\n-        match port {\n-            PortOne { contents: port } => {\n-                let oneshot::send(message) = recv(port);\n-                message\n-            }\n-        }\n-    }\n-\n-    /// Receive a message from a oneshot pipe unless the connection was closed.\n-    pub fn try_recv_one<T: Owned> (port: PortOne<T>) -> Option<T> {\n-        match port {\n-            PortOne { contents: port } => {\n-                let message = try_recv(port);\n-\n-                if message.is_none() {\n-                    None\n-                } else {\n-                    let oneshot::send(message) = message.unwrap();\n-                    Some(message)\n-                }\n-            }\n-        }\n-    }\n-\n-    /// Send a message on a oneshot pipe, failing if the connection was closed.\n-    pub fn send_one<T: Owned>(chan: ChanOne<T>, data: T) {\n-        match chan {\n-            ChanOne { contents: chan } => oneshot::client::send(chan, data),\n-        }\n-    }\n-\n-    /**\n-    * Send a message on a oneshot pipe, or return false if the connection was\n-    * closed.\n-    */\n-    pub fn try_send_one<T: Owned>(chan: ChanOne<T>, data: T) -> bool {\n-        match chan {\n-            ChanOne { contents: chan } => {\n-                oneshot::client::try_send(chan, data).is_some()\n-            }\n-        }\n-    }\n-\n-    // Streams - Make pipes a little easier in general.\n-\n-    /*proto! streamp (\n-        Open:send<T: Owned> {\n-            data(T) -> Open<T>\n-        }\n-    )*/\n-\n-    #[allow(non_camel_case_types)]\n-    pub mod streamp {\n-        priv use core::kinds::Owned;\n-\n-        pub fn init<T: Owned>() -> (client::Open<T>, server::Open<T>) {\n-            pub use core::pipes::HasBuffer;\n-            ::core::pipes::entangle()\n-        }\n-\n-        #[allow(non_camel_case_types)]\n-        pub enum Open<T> { pub data(T, server::Open<T>), }\n-\n-        #[allow(non_camel_case_types)]\n-        pub mod client {\n-            priv use core::kinds::Owned;\n-\n-            #[allow(non_camel_case_types)]\n-            pub fn try_data<T: Owned>(pipe: Open<T>, x_0: T) ->\n-                ::core::option::Option<Open<T>> {\n-                {\n-                    use super::data;\n-                    let (c, s) = ::core::pipes::entangle();\n-                    let message = data(x_0, s);\n-                    if ::core::pipes::send(pipe, message) {\n-                        ::core::pipes::rt::make_some(c)\n-                    } else { ::core::pipes::rt::make_none() }\n-                }\n-            }\n-\n-            #[allow(non_camel_case_types)]\n-            pub fn data<T: Owned>(pipe: Open<T>, x_0: T) -> Open<T> {\n-                {\n-                    use super::data;\n-                    let (c, s) = ::core::pipes::entangle();\n-                    let message = data(x_0, s);\n-                    ::core::pipes::send(pipe, message);\n-                    c\n-                }\n-            }\n-\n-            #[allow(non_camel_case_types)]\n-            pub type Open<T> = ::core::pipes::SendPacket<super::Open<T>>;\n-        }\n-\n-        #[allow(non_camel_case_types)]\n-        pub mod server {\n-            #[allow(non_camel_case_types)]\n-            pub type Open<T> = ::core::pipes::RecvPacket<super::Open<T>>;\n-        }\n-    }\n-\n-    /// An endpoint that can send many messages.\n-    #[unsafe_mut_field(endp)]\n-    pub struct Chan<T> {\n-        endp: Option<streamp::client::Open<T>>\n-    }\n-\n-    /// An endpoint that can receive many messages.\n-    #[unsafe_mut_field(endp)]\n-    pub struct Port<T> {\n-        endp: Option<streamp::server::Open<T>>,\n-    }\n-\n-    /** Creates a `(Port, Chan)` pair.\n-\n-    These allow sending or receiving an unlimited number of messages.\n-\n-    */\n-    pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n-        let (c, s) = streamp::init();\n-\n-        (Port {\n-            endp: Some(s)\n-        }, Chan {\n-            endp: Some(c)\n-        })\n-    }\n-\n-    impl<T: Owned> GenericChan<T> for Chan<T> {\n-        #[inline(always)]\n-        fn send(&self, x: T) {\n-            unsafe {\n-                let self_endp = transmute_mut(&self.endp);\n-                let endp = replace(self_endp, None);\n-                *self_endp = Some(streamp::client::data(endp.unwrap(), x))\n-            }\n-        }\n-    }\n-\n-    impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n-        #[inline(always)]\n-        fn try_send(&self, x: T) -> bool {\n-            unsafe {\n-                let self_endp = transmute_mut(&self.endp);\n-                let endp = replace(self_endp, None);\n-                match streamp::client::try_data(endp.unwrap(), x) {\n-                    Some(next) => {\n-                        *self_endp = Some(next);\n-                        true\n-                    }\n-                    None => false\n-                }\n-            }\n-        }\n-    }\n-\n-    impl<T: Owned> GenericPort<T> for Port<T> {\n-        #[inline(always)]\n-        fn recv(&self) -> T {\n-            unsafe {\n-                let self_endp = transmute_mut(&self.endp);\n-                let endp = replace(self_endp, None);\n-                let streamp::data(x, endp) = recv(endp.unwrap());\n-                *self_endp = Some(endp);\n-                x\n-            }\n-        }\n-\n-        #[inline(always)]\n-        fn try_recv(&self) -> Option<T> {\n-            unsafe {\n-                let self_endp = transmute_mut(&self.endp);\n-                let endp = replace(self_endp, None);\n-                match try_recv(endp.unwrap()) {\n-                    Some(streamp::data(x, endp)) => {\n-                        *self_endp = Some(endp);\n-                        Some(x)\n-                    }\n-                    None => None\n-                }\n-            }\n-        }\n-    }\n-\n-    impl<T: Owned> Peekable<T> for Port<T> {\n-        #[inline(always)]\n-        fn peek(&self) -> bool {\n-            unsafe {\n-                let self_endp = transmute_mut(&self.endp);\n-                let mut endp = replace(self_endp, None);\n-                let peek = match endp {\n-                    Some(ref mut endp) => peek(endp),\n-                    None => fail!(\"peeking empty stream\")\n-                };\n-                *self_endp = endp;\n-                peek\n-            }\n-        }\n-    }\n-\n-    impl<T: Owned> Selectable for Port<T> {\n-        fn header(&mut self) -> *mut PacketHeader {\n-            match self.endp {\n-                Some(ref mut endp) => endp.header(),\n-                None => fail!(\"peeking empty stream\")\n-            }\n-    }\n-}\n-\n-}\n-\n-/// Returns the index of an endpoint that is ready to receive.\n-pub fn selecti<T: Selectable>(endpoints: &mut [T]) -> uint {\n-    wait_many(endpoints)\n-}\n-\n-/// Returns 0 or 1 depending on which endpoint is ready to receive\n-pub fn select2i<A:Selectable, B:Selectable>(a: &mut A, b: &mut B)\n-                                            -> Either<(), ()> {\n-    let mut endpoints = [ a.header(), b.header() ];\n-    match wait_many(endpoints) {\n-        0 => Left(()),\n-        1 => Right(()),\n-        _ => fail!(\"wait returned unexpected index\"),\n-    }\n-}\n-\n-/// Receive a message from one of two endpoints.\n-pub trait Select2<T: Owned, U: Owned> {\n-    /// Receive a message or return `None` if a connection closes.\n-    fn try_select(&mut self) -> Either<Option<T>, Option<U>>;\n-    /// Receive a message or fail if a connection closes.\n-    fn select(&mut self) -> Either<T, U>;\n-}\n-\n-impl<T:Owned,\n-     U:Owned,\n-     Left:Selectable + GenericPort<T>,\n-     Right:Selectable + GenericPort<U>>\n-     Select2<T, U>\n-     for (Left, Right) {\n-    fn select(&mut self) -> Either<T, U> {\n-        // XXX: Bad borrow check workaround.\n-        unsafe {\n-            let this: &(Left, Right) = transmute(self);\n-            match *this {\n-                (ref lp, ref rp) => {\n-                    let lp: &mut Left = transmute(lp);\n-                    let rp: &mut Right = transmute(rp);\n-                    match select2i(lp, rp) {\n-                        Left(()) => Left(lp.recv()),\n-                        Right(()) => Right(rp.recv()),\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    fn try_select(&mut self) -> Either<Option<T>, Option<U>> {\n-        // XXX: Bad borrow check workaround.\n-        unsafe {\n-            let this: &(Left, Right) = transmute(self);\n-            match *this {\n-                (ref lp, ref rp) => {\n-                    let lp: &mut Left = transmute(lp);\n-                    let rp: &mut Right = transmute(rp);\n-                    match select2i(lp, rp) {\n-                        Left(()) => Left (lp.try_recv()),\n-                        Right(()) => Right(rp.try_recv()),\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-#[cfg(test)]\n-mod test {\n-    use either::Right;\n-    use super::{Chan, Port, oneshot, stream};\n-\n-    #[test]\n-    fn test_select2() {\n-        let (p1, c1) = stream();\n-        let (p2, c2) = stream();\n-\n-        c1.send(~\"abc\");\n-\n-        let mut tuple = (p1, p2);\n-        match tuple.select() {\n-            Right(_) => fail!(),\n-            _ => (),\n-        }\n-\n-        c2.send(123);\n-    }\n-\n-    #[test]\n-    fn test_oneshot() {\n-        let (p, c) = oneshot();\n-\n-        c.send(());\n-\n-        p.recv()\n-    }\n-\n-    #[test]\n-    fn test_peek_terminated() {\n-        let (port, chan): (Port<int>, Chan<int>) = stream();\n-\n-        {\n-            // Destroy the channel\n-            let _chan = chan;\n-        }\n-\n-        assert!(!port.peek());\n-    }\n-}"}, {"sha": "d76da6fcc664f0900c3f21bd33564b4c1aae676e", "filename": "src/libcore/unicode.rs", "status": "removed", "additions": 0, "deletions": 2642, "changes": 2642, "blob_url": "https://github.com/rust-lang/rust/blob/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=565942b145efbf6c1d1f66db46423d721b55d32c"}, {"sha": "9c7db35f6f206a9d86d1b6ab61be1cb95ced8ff7", "filename": "src/libextra/arc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/arc.rs"}, {"sha": "a087a16caa245340e4e75c55c4b1409210c40c1c", "filename": "src/libextra/arena.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/arena.rs"}, {"sha": "a820862ef4c7a50e8ae4b5ec3710bb917b403957", "filename": "src/libextra/base64.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/base64.rs"}, {"sha": "9d22107931e9ecfcc4a7df4677ee51a61db09ec8", "filename": "src/libextra/bitv.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/bitv.rs"}, {"sha": "e463e5971881c9bc00f11a487eb895452f1bfae4", "filename": "src/libextra/c_vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/c_vec.rs"}, {"sha": "20ab2d61ecc0793e632f8f676cd52f462be465d1", "filename": "src/libextra/comm.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcomm.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -0,0 +1,110 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+\n+Higher level communication abstractions.\n+\n+*/\n+\n+use core::comm::{GenericChan, GenericSmartChan, GenericPort};\n+use core::comm::{Chan, Port, Selectable, Peekable};\n+use core::pipes;\n+\n+/// An extension of `pipes::stream` that allows both sending and receiving.\n+pub struct DuplexStream<T, U> {\n+    priv chan: Chan<T>,\n+    priv port: Port<U>,\n+}\n+\n+// Allow these methods to be used without import:\n+pub impl<T:Owned,U:Owned> DuplexStream<T, U> {\n+    fn send(&self, x: T) {\n+        self.chan.send(x)\n+    }\n+    fn try_send(&self, x: T) -> bool {\n+        self.chan.try_send(x)\n+    }\n+    fn recv(&self, ) -> U {\n+        self.port.recv()\n+    }\n+    fn try_recv(&self) -> Option<U> {\n+        self.port.try_recv()\n+    }\n+    fn peek(&self) -> bool {\n+        self.port.peek()\n+    }\n+}\n+\n+impl<T:Owned,U:Owned> GenericChan<T> for DuplexStream<T, U> {\n+    fn send(&self, x: T) {\n+        self.chan.send(x)\n+    }\n+}\n+\n+impl<T:Owned,U:Owned> GenericSmartChan<T> for DuplexStream<T, U> {\n+    fn try_send(&self, x: T) -> bool {\n+        self.chan.try_send(x)\n+    }\n+}\n+\n+impl<T:Owned,U:Owned> GenericPort<U> for DuplexStream<T, U> {\n+    fn recv(&self) -> U {\n+        self.port.recv()\n+    }\n+\n+    fn try_recv(&self) -> Option<U> {\n+        self.port.try_recv()\n+    }\n+}\n+\n+impl<T:Owned,U:Owned> Peekable<U> for DuplexStream<T, U> {\n+    fn peek(&self) -> bool {\n+        self.port.peek()\n+    }\n+}\n+\n+impl<T:Owned,U:Owned> Selectable for DuplexStream<T, U> {\n+    fn header(&mut self) -> *mut pipes::PacketHeader {\n+        self.port.header()\n+    }\n+}\n+\n+/// Creates a bidirectional stream.\n+pub fn DuplexStream<T:Owned,U:Owned>()\n+    -> (DuplexStream<T, U>, DuplexStream<U, T>)\n+{\n+    let (p1, c2) = comm::stream();\n+    let (p2, c1) = comm::stream();\n+    (DuplexStream {\n+        chan: c1,\n+        port: p1\n+    },\n+     DuplexStream {\n+         chan: c2,\n+         port: p2\n+     })\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use comm::DuplexStream;\n+\n+    #[test]\n+    pub fn DuplexStream1() {\n+        let (left, right) = DuplexStream();\n+\n+        left.send(~\"abc\");\n+        right.send(123);\n+\n+        assert!(left.recv() == 123);\n+        assert!(right.recv() == ~\"abc\");\n+    }\n+}"}, {"sha": "4b2d2a60a68ef5d275d2b1aa237fa4b081cce9a3", "filename": "src/libextra/dbg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdbg.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/dbg.rs"}, {"sha": "60f160741778987c3dc8b923f4536f4f21822408", "filename": "src/libextra/deque.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/deque.rs"}, {"sha": "57cd03e16a09777b2a44a044ffc60ef7da3ed5de", "filename": "src/libextra/dlist.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/dlist.rs"}, {"sha": "a7c18ebf5cdc8c2f85c6b76f569dde7ae0a8e6ed", "filename": "src/libextra/ebml.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/ebml.rs"}, {"sha": "d9a932fbe7c543880391acabd2cc25aec8bcadf4", "filename": "src/libextra/fileinput.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/fileinput.rs"}, {"sha": "b0d219bc945e936793b6cbbe50621283807b3abf", "filename": "src/libextra/flate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/flate.rs"}, {"sha": "a634f88dcf5774ed00f7e37d8d26a9c7a1f0b1d0", "filename": "src/libextra/flatpipes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/flatpipes.rs"}, {"sha": "6b051fa21b1e5780cdde6abecce55dcd7dae91d0", "filename": "src/libextra/fun_treemap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffun_treemap.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/fun_treemap.rs"}, {"sha": "02828b8eaee9e8ebc23ec597cca187a0cbf61222", "filename": "src/libextra/future.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/future.rs"}, {"sha": "6a9a60baae6a291c479c0350a944e04258485da2", "filename": "src/libextra/getopts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/getopts.rs"}, {"sha": "7d43663cc808b0db971d74a3eaa65e2e0e0b2d7d", "filename": "src/libextra/io_util.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fio_util.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/io_util.rs"}, {"sha": "44e965b5c43207252f9c2bfb8b1c433a1bde8eb7", "filename": "src/libextra/json.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/json.rs"}, {"sha": "3a916233db8172423624aed83003ecf8f41034f1", "filename": "src/libextra/list.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flist.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/list.rs"}, {"sha": "da81f730eda82b8ae05ca4f200732442aff6ed63", "filename": "src/libextra/md4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fmd4.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/md4.rs"}, {"sha": "ca1cc1235961abd4b79a1350b1c314d9f44df176", "filename": "src/libextra/net.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/net.rs"}, {"sha": "4f67f1c5f135142e2c136f03473b6e8ee00268b6", "filename": "src/libextra/net_ip.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_ip.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/net_ip.rs"}, {"sha": "db61679890b27096f76a2e90185ec72e1f7dacee", "filename": "src/libextra/net_tcp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_tcp.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/net_tcp.rs"}, {"sha": "fb57c717be960772d8a88c3f5e5c239b8bd430dd", "filename": "src/libextra/net_url.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/net_url.rs"}, {"sha": "21685b03c077d659f144e213aa89d214d63d1e78", "filename": "src/libextra/num/bigint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/num/bigint.rs"}, {"sha": "41d2b4a101cd5acb4c4f3087c71494c485a7120d", "filename": "src/libextra/num/complex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fcomplex.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/num/complex.rs"}, {"sha": "d57c642c5a29c1e339c12da48d0612f69135acd9", "filename": "src/libextra/num/rational.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/num/rational.rs"}, {"sha": "e766d2d3bf0907bb0401ba5ec0da38bee016f641", "filename": "src/libextra/par.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/par.rs"}, {"sha": "f1e0027146c9e5ce16ea3b85d736141f2a9a1382", "filename": "src/libextra/priority_queue.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/priority_queue.rs"}, {"sha": "02f824b911302df5c19a4de92cc79baedcf0ba76", "filename": "src/libextra/rc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/rc.rs"}, {"sha": "d15a8fc0136d49be9b03cf602b5503bd62a31f89", "filename": "src/libextra/rl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/rl.rs"}, {"sha": "04444789f827a4235b3341b5b9e2c060ca49f96f", "filename": "src/libextra/rope.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frope.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/rope.rs"}, {"sha": "09855c9334e58808ca124984af507da869381c07", "filename": "src/libextra/semver.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/semver.rs"}, {"sha": "c270f46751fcd94b7897a1a663294117242e96c6", "filename": "src/libextra/serialize.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/serialize.rs"}, {"sha": "d7051d734698fc4c6f366270a7a702bb8dfabf62", "filename": "src/libextra/sha1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsha1.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/sha1.rs"}, {"sha": "aa8372bab78d92c3a099a27b17ed0ac9f5ab885e", "filename": "src/libextra/smallintmap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/smallintmap.rs"}, {"sha": "d896fa8c096f7d5974919d2836dee9aa81cb41dd", "filename": "src/libextra/sort.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/sort.rs"}, {"sha": "25323b4e1db8e024c1b5abbf97bda022010dee39", "filename": "src/libextra/stats.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/stats.rs"}, {"sha": "72f06f0befa257e1a0f2f07e29df7819688b4afe", "filename": "src/libextra/std.rc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstd.rc?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/std.rc"}, {"sha": "002c6b2eca3ee02fb04819f81e202b9a4649ac4f", "filename": "src/libextra/sync.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/sync.rs"}, {"sha": "0c52e1ff80e21145de2d73bb0625d851702e7548", "filename": "src/libextra/task_pool.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/task_pool.rs"}, {"sha": "e02a7a337334ed98cd1da4b6098da4c1f368c1c1", "filename": "src/libextra/tempfile.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/tempfile.rs"}, {"sha": "fcac70622104d053b394a542c34c2ee1c83c5762", "filename": "src/libextra/term.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/term.rs"}, {"sha": "4046ce83c9dcf86530e2e5cf0f9f1f3af5f73133", "filename": "src/libextra/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/test.rs"}, {"sha": "565ce2d0dd3b3e42f02c29044c7ccda2f5a75ea0", "filename": "src/libextra/time.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/time.rs"}, {"sha": "092c718f1ced3c60dbd0585bebf91fe521b59f2d", "filename": "src/libextra/timer.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftimer.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/timer.rs"}, {"sha": "93f8d06ee0836ff942d4557a8f4d7b29c300a00f", "filename": "src/libextra/treemap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/treemap.rs"}, {"sha": "77996de6d8394a4995935926d72583fde32a2074", "filename": "src/libextra/unicode.rs", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Funicode.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -0,0 +1,248 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[forbid(deprecated_mode)];\n+\n+pub mod icu {\n+    pub type UBool = u8;\n+    pub type UProperty = int;\n+    pub type UChar32 = char;\n+\n+    pub static TRUE : u8 = 1u8;\n+    pub static FALSE : u8 = 1u8;\n+\n+    pub static UCHAR_ALPHABETIC : UProperty = 0;\n+    pub static UCHAR_BINARY_START : UProperty = 0; // = UCHAR_ALPHABETIC\n+    pub static UCHAR_ASCII_HEX_DIGIT : UProperty = 1;\n+    pub static UCHAR_BIDI_CONTROL : UProperty = 2;\n+\n+    pub static UCHAR_BIDI_MIRRORED : UProperty = 3;\n+    pub static UCHAR_DASH : UProperty = 4;\n+    pub static UCHAR_DEFAULT_IGNORABLE_CODE_POINT : UProperty = 5;\n+    pub static UCHAR_DEPRECATED : UProperty = 6;\n+\n+    pub static UCHAR_DIACRITIC : UProperty = 7;\n+    pub static UCHAR_EXTENDER : UProperty = 8;\n+    pub static UCHAR_FULL_COMPOSITION_EXCLUSION : UProperty = 9;\n+    pub static UCHAR_GRAPHEME_BASE : UProperty = 10;\n+\n+    pub static UCHAR_GRAPHEME_EXTEND : UProperty = 11;\n+    pub static UCHAR_GRAPHEME_LINK : UProperty = 12;\n+    pub static UCHAR_HEX_DIGIT : UProperty = 13;\n+    pub static UCHAR_HYPHEN : UProperty = 14;\n+\n+    pub static UCHAR_ID_CONTINUE : UProperty = 15;\n+    pub static UCHAR_ID_START : UProperty = 16;\n+    pub static UCHAR_IDEOGRAPHIC : UProperty = 17;\n+    pub static UCHAR_IDS_BINARY_OPERATOR : UProperty = 18;\n+\n+    pub static UCHAR_IDS_TRINARY_OPERATOR : UProperty = 19;\n+    pub static UCHAR_JOIN_CONTROL : UProperty = 20;\n+    pub static UCHAR_LOGICAL_ORDER_EXCEPTION : UProperty = 21;\n+    pub static UCHAR_LOWERCASE : UProperty = 22;\n+\n+    pub static UCHAR_MATH : UProperty = 23;\n+    pub static UCHAR_NONCHARACTER_CODE_POINT : UProperty = 24;\n+    pub static UCHAR_QUOTATION_MARK : UProperty = 25;\n+    pub static UCHAR_RADICAL : UProperty = 26;\n+\n+    pub static UCHAR_SOFT_DOTTED : UProperty = 27;\n+    pub static UCHAR_TERMINAL_PUNCTUATION : UProperty = 28;\n+    pub static UCHAR_UNIFIED_IDEOGRAPH : UProperty = 29;\n+    pub static UCHAR_UPPERCASE : UProperty = 30;\n+\n+    pub static UCHAR_WHITE_SPACE : UProperty = 31;\n+    pub static UCHAR_XID_CONTINUE : UProperty = 32;\n+    pub static UCHAR_XID_START : UProperty = 33;\n+    pub static UCHAR_CASE_SENSITIVE : UProperty = 34;\n+\n+    pub static UCHAR_S_TERM : UProperty = 35;\n+    pub static UCHAR_VARIATION_SELECTOR : UProperty = 36;\n+    pub static UCHAR_NFD_INERT : UProperty = 37;\n+    pub static UCHAR_NFKD_INERT : UProperty = 38;\n+\n+    pub static UCHAR_NFC_INERT : UProperty = 39;\n+    pub static UCHAR_NFKC_INERT : UProperty = 40;\n+    pub static UCHAR_SEGMENT_STARTER : UProperty = 41;\n+    pub static UCHAR_PATTERN_SYNTAX : UProperty = 42;\n+\n+    pub static UCHAR_PATTERN_WHITE_SPACE : UProperty = 43;\n+    pub static UCHAR_POSIX_ALNUM : UProperty = 44;\n+    pub static UCHAR_POSIX_BLANK : UProperty = 45;\n+    pub static UCHAR_POSIX_GRAPH : UProperty = 46;\n+\n+    pub static UCHAR_POSIX_PRINT : UProperty = 47;\n+    pub static UCHAR_POSIX_XDIGIT : UProperty = 48;\n+    pub static UCHAR_CASED : UProperty = 49;\n+    pub static UCHAR_CASE_IGNORABLE : UProperty = 50;\n+\n+    pub static UCHAR_CHANGES_WHEN_LOWERCASED : UProperty = 51;\n+    pub static UCHAR_CHANGES_WHEN_UPPERCASED : UProperty = 52;\n+    pub static UCHAR_CHANGES_WHEN_TITLECASED : UProperty = 53;\n+    pub static UCHAR_CHANGES_WHEN_CASEFOLDED : UProperty = 54;\n+\n+    pub static UCHAR_CHANGES_WHEN_CASEMAPPED : UProperty = 55;\n+    pub static UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED : UProperty = 56;\n+    pub static UCHAR_BINARY_LIMIT : UProperty = 57;\n+    pub static UCHAR_BIDI_CLASS : UProperty = 0x1000;\n+\n+    pub static UCHAR_INT_START : UProperty = 0x1000; // UCHAR_BIDI_CLASS\n+    pub static UCHAR_BLOCK : UProperty = 0x1001;\n+    pub static UCHAR_CANONICAL_COMBINING_CLASS : UProperty = 0x1002;\n+    pub static UCHAR_DECOMPOSITION_TYPE : UProperty = 0x1003;\n+\n+    pub static UCHAR_EAST_ASIAN_WIDTH : UProperty = 0x1004;\n+    pub static UCHAR_GENERAL_CATEGORY : UProperty = 0x1005;\n+    pub static UCHAR_JOINING_GROUP : UProperty = 0x1006;\n+    pub static UCHAR_JOINING_TYPE : UProperty = 0x1007;\n+\n+    pub static UCHAR_LINE_BREAK : UProperty = 0x1008;\n+    pub static UCHAR_NUMERIC_TYPE : UProperty = 0x1009;\n+    pub static UCHAR_SCRIPT : UProperty = 0x100A;\n+    pub static UCHAR_HANGUL_SYLLABLE_TYPE : UProperty = 0x100B;\n+\n+    pub static UCHAR_NFD_QUICK_CHECK : UProperty = 0x100C;\n+    pub static UCHAR_NFKD_QUICK_CHECK : UProperty = 0x100D;\n+    pub static UCHAR_NFC_QUICK_CHECK : UProperty = 0x100E;\n+    pub static UCHAR_NFKC_QUICK_CHECK : UProperty = 0x100F;\n+\n+    pub static UCHAR_LEAD_CANONICAL_COMBINING_CLASS : UProperty = 0x1010;\n+    pub static UCHAR_TRAIL_CANONICAL_COMBINING_CLASS : UProperty = 0x1011;\n+    pub static UCHAR_GRAPHEME_CLUSTER_BREAK : UProperty = 0x1012;\n+    pub static UCHAR_SENTENCE_BREAK : UProperty = 0x1013;\n+\n+    pub static UCHAR_WORD_BREAK : UProperty = 0x1014;\n+    pub static UCHAR_INT_LIMIT : UProperty = 0x1015;\n+\n+    pub static UCHAR_GENERAL_CATEGORY_MASK : UProperty = 0x2000;\n+    pub static UCHAR_MASK_START : UProperty = 0x2000;\n+    // = UCHAR_GENERAL_CATEGORY_MASK\n+    pub static UCHAR_MASK_LIMIT : UProperty = 0x2001;\n+\n+    pub static UCHAR_NUMERIC_VALUE : UProperty = 0x3000;\n+    pub static UCHAR_DOUBLE_START : UProperty = 0x3000;\n+    // = UCHAR_NUMERIC_VALUE\n+    pub static UCHAR_DOUBLE_LIMIT : UProperty = 0x3001;\n+\n+    pub static UCHAR_AGE : UProperty = 0x4000;\n+    pub static UCHAR_STRING_START : UProperty = 0x4000; // = UCHAR_AGE\n+    pub static UCHAR_BIDI_MIRRORING_GLYPH : UProperty = 0x4001;\n+    pub static UCHAR_CASE_FOLDING : UProperty = 0x4002;\n+\n+    pub static UCHAR_ISO_COMMENT : UProperty = 0x4003;\n+    pub static UCHAR_LOWERCASE_MAPPING : UProperty = 0x4004;\n+    pub static UCHAR_NAME : UProperty = 0x4005;\n+    pub static UCHAR_SIMPLE_CASE_FOLDING : UProperty = 0x4006;\n+\n+    pub static UCHAR_SIMPLE_LOWERCASE_MAPPING : UProperty = 0x4007;\n+    pub static UCHAR_SIMPLE_TITLECASE_MAPPING : UProperty = 0x4008;\n+    pub static UCHAR_SIMPLE_UPPERCASE_MAPPING : UProperty = 0x4009;\n+    pub static UCHAR_TITLECASE_MAPPING : UProperty = 0x400A;\n+\n+    pub static UCHAR_UNICODE_1_NAME : UProperty = 0x400B;\n+    pub static UCHAR_UPPERCASE_MAPPING : UProperty = 0x400C;\n+    pub static UCHAR_STRING_LIMIT : UProperty = 0x400D;\n+\n+    pub static UCHAR_SCRIPT_EXTENSIONS : UProperty = 0x7000;\n+    pub static UCHAR_OTHER_PROPERTY_START : UProperty = 0x7000;\n+    // = UCHAR_SCRIPT_EXTENSIONS;\n+    pub static UCHAR_OTHER_PROPERTY_LIMIT : UProperty = 0x7001;\n+\n+    pub static UCHAR_INVALID_CODE : UProperty = -1;\n+\n+    pub mod libicu {\n+        #[link_name = \"icuuc\"]\n+        #[abi = \"cdecl\"]\n+        pub extern {\n+            unsafe fn u_hasBinaryProperty(c: UChar32, which: UProperty)\n+                                       -> UBool;\n+            unsafe fn u_isdigit(c: UChar32) -> UBool;\n+            unsafe fn u_islower(c: UChar32) -> UBool;\n+            unsafe fn u_isspace(c: UChar32) -> UBool;\n+            unsafe fn u_isupper(c: UChar32) -> UBool;\n+            unsafe fn u_tolower(c: UChar32) -> UChar32;\n+            unsafe fn u_toupper(c: UChar32) -> UChar32;\n+        }\n+    }\n+}\n+\n+pub fn is_XID_start(c: char) -> bool {\n+    return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n+        == icu::TRUE;\n+}\n+\n+pub fn is_XID_continue(c: char) -> bool {\n+    return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n+        == icu::TRUE;\n+}\n+\n+/*\n+Function: is_digit\n+\n+Returns true if a character is a digit.\n+*/\n+pub fn is_digit(c: char) -> bool {\n+    return icu::libicu::u_isdigit(c) == icu::TRUE;\n+}\n+\n+/*\n+Function: is_lower\n+\n+Returns true if a character is a lowercase letter.\n+*/\n+pub fn is_lower(c: char) -> bool {\n+    return icu::libicu::u_islower(c) == icu::TRUE;\n+}\n+\n+/*\n+Function: is_space\n+\n+Returns true if a character is space.\n+*/\n+pub fn is_space(c: char) -> bool {\n+    return icu::libicu::u_isspace(c) == icu::TRUE;\n+}\n+\n+/*\n+Function: is_upper\n+\n+Returns true if a character is an uppercase letter.\n+*/\n+pub fn is_upper(c: char) -> bool {\n+    return icu::libicu::u_isupper(c) == icu::TRUE;\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+\n+    #[test]\n+    fn test_is_digit() {\n+        assert!((unicode::icu::is_digit('0')));\n+        assert!((!unicode::icu::is_digit('m')));\n+    }\n+\n+    #[test]\n+    fn test_is_lower() {\n+        assert!((unicode::icu::is_lower('m')));\n+        assert!((!unicode::icu::is_lower('M')));\n+    }\n+\n+    #[test]\n+    fn test_is_space() {\n+        assert!((unicode::icu::is_space(' ')));\n+        assert!((!unicode::icu::is_space('m')));\n+    }\n+\n+    #[test]\n+    fn test_is_upper() {\n+        assert!((unicode::icu::is_upper('M')));\n+        assert!((!unicode::icu::is_upper('m')));\n+    }\n+}"}, {"sha": "e055b40705773dc6382d1274c5bdfb05292a2ae9", "filename": "src/libextra/uv.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/uv.rs"}, {"sha": "d1471ba1e7705809cd502541f12c5bb2cf8fbe96", "filename": "src/libextra/uv_global_loop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_global_loop.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/uv_global_loop.rs"}, {"sha": "371eb338de30305053c55fa17d7fca49eada04c6", "filename": "src/libextra/uv_iotask.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_iotask.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/uv_iotask.rs"}, {"sha": "bc7703ec30a1c69ebc60aab43545aa2690fe5732", "filename": "src/libextra/uv_ll.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_ll.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/uv_ll.rs"}, {"sha": "ee57bf2f3a1b562d3f1354a6c68b544570df303f", "filename": "src/libextra/workcache.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libstd/workcache.rs"}, {"sha": "44c55563ac57f6599127c661508c555416864c35", "filename": "src/libstd/at_vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/at_vec.rs"}, {"sha": "5ab7f838a57cc6ca24e53dfcb1a8ae50de572d53", "filename": "src/libstd/bool.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/bool.rs"}, {"sha": "e3336e24a6e1a7c4f5f32b59d9297525fad991b2", "filename": "src/libstd/cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcast.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/cast.rs"}, {"sha": "b707e3bbb9efa7fe714bb5d373427508d18cbfc8", "filename": "src/libstd/cell.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/cell.rs"}, {"sha": "bd70f59212d2175c9bbb2ada861ac725fb8da7dc", "filename": "src/libstd/char.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/char.rs"}, {"sha": "5796be7b1e4ce9308f3a1630049a6f7277331c3e", "filename": "src/libstd/cleanup.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/cleanup.rs"}, {"sha": "2965b31a8c390a9dfe49db01667a669788af2825", "filename": "src/libstd/clone.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/clone.rs"}, {"sha": "ca9c49b2c0682a90c3baa3ca28b9d33e44a0b619", "filename": "src/libstd/cmp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/cmp.rs"}, {"sha": "59eb915c239fee0ee376ccce41434a602b999d22", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 754, "deletions": 54, "changes": 808, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -9,102 +9,802 @@\n // except according to those terms.\n \n /*!\n+Message passing\n+*/\n \n-Higher level communication abstractions.\n+use cast::{transmute, transmute_mut};\n+use container::Container;\n+use either::{Either, Left, Right};\n+use kinds::Owned;\n+use option::{Option, Some, None};\n+use uint;\n+use vec;\n+use vec::OwnedVector;\n+use util::replace;\n+use unstable::sync::{Exclusive, exclusive};\n+use rtcomm = rt::comm;\n+use rt;\n \n-*/\n+use pipes::{wait_many, PacketHeader};\n+\n+// FIXME #5160: Making this public exposes some plumbing from\n+// pipes. Needs some refactoring\n+pub use pipes::Selectable;\n \n-use core::comm::{GenericChan, GenericSmartChan, GenericPort};\n-use core::comm::{Chan, Port, Selectable, Peekable};\n-use core::pipes;\n+/// A trait for things that can send multiple messages.\n+pub trait GenericChan<T> {\n+    /// Sends a message.\n+    fn send(&self, x: T);\n+}\n+\n+/// Things that can send multiple messages and can detect when the receiver\n+/// is closed\n+pub trait GenericSmartChan<T> {\n+    /// Sends a message, or report if the receiver has closed the connection.\n+    fn try_send(&self, x: T) -> bool;\n+}\n+\n+/// A trait for things that can receive multiple messages.\n+pub trait GenericPort<T> {\n+    /// Receives a message, or fails if the connection closes.\n+    fn recv(&self) -> T;\n+\n+    /** Receives a message, or returns `none` if\n+    the connection is closed or closes.\n+    */\n+    fn try_recv(&self) -> Option<T>;\n+}\n+\n+/// Ports that can `peek`\n+pub trait Peekable<T> {\n+    /// Returns true if a message is available\n+    fn peek(&self) -> bool;\n+}\n \n-/// An extension of `pipes::stream` that allows both sending and receiving.\n-pub struct DuplexStream<T, U> {\n-    priv chan: Chan<T>,\n-    priv port: Port<U>,\n+/// An endpoint that can send many messages.\n+pub struct Chan<T> {\n+    inner: Either<pipesy::Chan<T>, rtcomm::Chan<T>>\n }\n \n-// Allow these methods to be used without import:\n-pub impl<T:Owned,U:Owned> DuplexStream<T, U> {\n+/// An endpoint that can receive many messages.\n+pub struct Port<T> {\n+    inner: Either<pipesy::Port<T>, rtcomm::Port<T>>\n+}\n+\n+/** Creates a `(Port, Chan)` pair.\n+\n+These allow sending or receiving an unlimited number of messages.\n+\n+*/\n+pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n+    let (port, chan) = match rt::context() {\n+        rt::OldTaskContext => match pipesy::stream() {\n+            (p, c) => (Left(p), Left(c))\n+        },\n+        _ => match rtcomm::stream() {\n+            (p, c) => (Right(p), Right(c))\n+        }\n+    };\n+    let port = Port { inner: port };\n+    let chan = Chan { inner: chan };\n+    return (port, chan);\n+}\n+\n+impl<T: Owned> GenericChan<T> for Chan<T> {\n     fn send(&self, x: T) {\n-        self.chan.send(x)\n+        match self.inner {\n+            Left(ref chan) => chan.send(x),\n+            Right(ref chan) => chan.send(x)\n+        }\n     }\n+}\n+\n+impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n     fn try_send(&self, x: T) -> bool {\n-        self.chan.try_send(x)\n+        match self.inner {\n+            Left(ref chan) => chan.try_send(x),\n+            Right(ref chan) => chan.try_send(x)\n+        }\n     }\n-    fn recv(&self, ) -> U {\n-        self.port.recv()\n+}\n+\n+impl<T: Owned> GenericPort<T> for Port<T> {\n+    fn recv(&self) -> T {\n+        match self.inner {\n+            Left(ref port) => port.recv(),\n+            Right(ref port) => port.recv()\n+        }\n     }\n-    fn try_recv(&self) -> Option<U> {\n-        self.port.try_recv()\n+\n+    fn try_recv(&self) -> Option<T> {\n+        match self.inner {\n+            Left(ref port) => port.try_recv(),\n+            Right(ref port) => port.try_recv()\n+        }\n     }\n+}\n+\n+impl<T: Owned> Peekable<T> for Port<T> {\n     fn peek(&self) -> bool {\n-        self.port.peek()\n+        match self.inner {\n+            Left(ref port) => port.peek(),\n+            Right(ref port) => port.peek()\n+        }\n+    }\n+}\n+\n+impl<T: Owned> Selectable for Port<T> {\n+    fn header(&mut self) -> *mut PacketHeader {\n+        match self.inner {\n+            Left(ref mut port) => port.header(),\n+            Right(_) => fail!(\"can't select on newsched ports\")\n+        }\n+    }\n+}\n+\n+/// Treat many ports as one.\n+#[unsafe_mut_field(ports)]\n+pub struct PortSet<T> {\n+    ports: ~[pipesy::Port<T>],\n+}\n+\n+pub impl<T: Owned> PortSet<T> {\n+    fn new() -> PortSet<T> {\n+        PortSet {\n+            ports: ~[]\n+        }\n+    }\n+\n+    fn add(&self, port: Port<T>) {\n+        let Port { inner } = port;\n+        let port = match inner {\n+            Left(p) => p,\n+            Right(_) => fail!(\"PortSet not implemented\")\n+        };\n+        unsafe {\n+            let self_ports = transmute_mut(&self.ports);\n+            self_ports.push(port)\n+        }\n+    }\n+\n+    fn chan(&self) -> Chan<T> {\n+        let (po, ch) = stream();\n+        self.add(po);\n+        ch\n+    }\n+}\n+\n+impl<T:Owned> GenericPort<T> for PortSet<T> {\n+    fn try_recv(&self) -> Option<T> {\n+        unsafe {\n+            let self_ports = transmute_mut(&self.ports);\n+            let mut result = None;\n+            // we have to swap the ports array so we aren't borrowing\n+            // aliasable mutable memory.\n+            let mut ports = replace(self_ports, ~[]);\n+            while result.is_none() && ports.len() > 0 {\n+                let i = wait_many(ports);\n+                match ports[i].try_recv() {\n+                    Some(m) => {\n+                        result = Some(m);\n+                    }\n+                    None => {\n+                        // Remove this port.\n+                        let _ = ports.swap_remove(i);\n+                    }\n+                }\n+            }\n+            *self_ports = ports;\n+            result\n+        }\n+    }\n+    fn recv(&self) -> T {\n+        self.try_recv().expect(\"port_set: endpoints closed\")\n     }\n }\n \n-impl<T:Owned,U:Owned> GenericChan<T> for DuplexStream<T, U> {\n+impl<T: Owned> Peekable<T> for PortSet<T> {\n+    fn peek(&self) -> bool {\n+        // It'd be nice to use self.port.each, but that version isn't\n+        // pure.\n+        for uint::range(0, vec::uniq_len(&const self.ports)) |i| {\n+            let port: &pipesy::Port<T> = &self.ports[i];\n+            if port.peek() {\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+}\n+\n+/// A channel that can be shared between many senders.\n+pub struct SharedChan<T> {\n+    ch: Exclusive<pipesy::Chan<T>>\n+}\n+\n+impl<T: Owned> SharedChan<T> {\n+    /// Converts a `chan` into a `shared_chan`.\n+    pub fn new(c: Chan<T>) -> SharedChan<T> {\n+        let Chan { inner } = c;\n+        let c = match inner {\n+            Left(c) => c,\n+            Right(_) => fail!(\"SharedChan not implemented\")\n+        };\n+        SharedChan { ch: exclusive(c) }\n+    }\n+}\n+\n+impl<T: Owned> GenericChan<T> for SharedChan<T> {\n     fn send(&self, x: T) {\n-        self.chan.send(x)\n+        let mut xx = Some(x);\n+        do self.ch.with_imm |chan| {\n+            let x = replace(&mut xx, None);\n+            chan.send(x.unwrap())\n+        }\n     }\n }\n \n-impl<T:Owned,U:Owned> GenericSmartChan<T> for DuplexStream<T, U> {\n+impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n     fn try_send(&self, x: T) -> bool {\n-        self.chan.try_send(x)\n+        let mut xx = Some(x);\n+        do self.ch.with_imm |chan| {\n+            let x = replace(&mut xx, None);\n+            chan.try_send(x.unwrap())\n+        }\n+    }\n+}\n+\n+impl<T: Owned> ::clone::Clone for SharedChan<T> {\n+    fn clone(&self) -> SharedChan<T> {\n+        SharedChan { ch: self.ch.clone() }\n     }\n }\n \n-impl<T:Owned,U:Owned> GenericPort<U> for DuplexStream<T, U> {\n-    fn recv(&self) -> U {\n-        self.port.recv()\n+pub struct PortOne<T> {\n+    inner: Either<pipesy::PortOne<T>, rtcomm::PortOne<T>>\n+}\n+\n+pub struct ChanOne<T> {\n+    inner: Either<pipesy::ChanOne<T>, rtcomm::ChanOne<T>>\n+}\n+\n+pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n+    let (port, chan) = match rt::context() {\n+        rt::OldTaskContext => match pipesy::oneshot() {\n+            (p, c) => (Left(p), Left(c)),\n+        },\n+        _ => match rtcomm::oneshot() {\n+            (p, c) => (Right(p), Right(c))\n+        }\n+    };\n+    let port = PortOne { inner: port };\n+    let chan = ChanOne { inner: chan };\n+    return (port, chan);\n+}\n+\n+impl<T: Owned> PortOne<T> {\n+    pub fn recv(self) -> T {\n+        let PortOne { inner } = self;\n+        match inner {\n+            Left(p) => p.recv(),\n+            Right(p) => p.recv()\n+        }\n     }\n \n-    fn try_recv(&self) -> Option<U> {\n-        self.port.try_recv()\n+    pub fn try_recv(self) -> Option<T> {\n+        let PortOne { inner } = self;\n+        match inner {\n+            Left(p) => p.try_recv(),\n+            Right(p) => p.try_recv()\n+        }\n     }\n }\n \n-impl<T:Owned,U:Owned> Peekable<U> for DuplexStream<T, U> {\n-    fn peek(&self) -> bool {\n-        self.port.peek()\n+impl<T: Owned> ChanOne<T> {\n+    pub fn send(self, data: T) {\n+        let ChanOne { inner } = self;\n+        match inner {\n+            Left(p) => p.send(data),\n+            Right(p) => p.send(data)\n+        }\n+    }\n+\n+    pub fn try_send(self, data: T) -> bool {\n+        let ChanOne { inner } = self;\n+        match inner {\n+            Left(p) => p.try_send(data),\n+            Right(p) => p.try_send(data)\n+        }\n+    }\n+}\n+\n+pub fn recv_one<T: Owned>(port: PortOne<T>) -> T {\n+    let PortOne { inner } = port;\n+    match inner {\n+        Left(p) => pipesy::recv_one(p),\n+        Right(p) => p.recv()\n+    }\n+}\n+\n+pub fn try_recv_one<T: Owned>(port: PortOne<T>) -> Option<T> {\n+    let PortOne { inner } = port;\n+    match inner {\n+        Left(p) => pipesy::try_recv_one(p),\n+        Right(p) => p.try_recv()\n+    }\n+}\n+\n+pub fn send_one<T: Owned>(chan: ChanOne<T>, data: T) {\n+    let ChanOne { inner } = chan;\n+    match inner {\n+        Left(c) => pipesy::send_one(c, data),\n+        Right(c) => c.send(data)\n+    }\n+}\n+\n+pub fn try_send_one<T: Owned>(chan: ChanOne<T>, data: T) -> bool {\n+    let ChanOne { inner } = chan;\n+    match inner {\n+        Left(c) => pipesy::try_send_one(c, data),\n+        Right(c) => c.try_send(data)\n+    }\n+}\n+\n+mod pipesy {\n+\n+    use kinds::Owned;\n+    use option::{Option, Some, None};\n+    use pipes::{recv, try_recv, peek, PacketHeader};\n+    use super::{GenericChan, GenericSmartChan, GenericPort, Peekable, Selectable};\n+    use cast::transmute_mut;\n+    use util::replace;\n+\n+    /*proto! oneshot (\n+        Oneshot:send<T:Owned> {\n+            send(T) -> !\n+        }\n+    )*/\n+\n+    #[allow(non_camel_case_types)]\n+    pub mod oneshot {\n+        priv use core::kinds::Owned;\n+        use ptr::to_mut_unsafe_ptr;\n+\n+        pub fn init<T: Owned>() -> (client::Oneshot<T>, server::Oneshot<T>) {\n+            pub use core::pipes::HasBuffer;\n+\n+            let buffer = ~::core::pipes::Buffer {\n+                header: ::core::pipes::BufferHeader(),\n+                data: __Buffer {\n+                    Oneshot: ::core::pipes::mk_packet::<Oneshot<T>>()\n+                },\n+            };\n+            do ::core::pipes::entangle_buffer(buffer) |buffer, data| {\n+                data.Oneshot.set_buffer(buffer);\n+                to_mut_unsafe_ptr(&mut data.Oneshot)\n+            }\n+        }\n+        #[allow(non_camel_case_types)]\n+        pub enum Oneshot<T> { pub send(T), }\n+        #[allow(non_camel_case_types)]\n+        pub struct __Buffer<T> {\n+            Oneshot: ::core::pipes::Packet<Oneshot<T>>,\n+        }\n+\n+        #[allow(non_camel_case_types)]\n+        pub mod client {\n+\n+            priv use core::kinds::Owned;\n+\n+            #[allow(non_camel_case_types)]\n+            pub fn try_send<T: Owned>(pipe: Oneshot<T>, x_0: T) ->\n+                ::core::option::Option<()> {\n+                {\n+                    use super::send;\n+                    let message = send(x_0);\n+                    if ::core::pipes::send(pipe, message) {\n+                        ::core::pipes::rt::make_some(())\n+                    } else { ::core::pipes::rt::make_none() }\n+                }\n+            }\n+\n+            #[allow(non_camel_case_types)]\n+            pub fn send<T: Owned>(pipe: Oneshot<T>, x_0: T) {\n+                {\n+                    use super::send;\n+                    let message = send(x_0);\n+                    ::core::pipes::send(pipe, message);\n+                }\n+            }\n+\n+            #[allow(non_camel_case_types)]\n+            pub type Oneshot<T> =\n+                ::core::pipes::SendPacketBuffered<super::Oneshot<T>,\n+            super::__Buffer<T>>;\n+        }\n+\n+        #[allow(non_camel_case_types)]\n+        pub mod server {\n+            #[allow(non_camel_case_types)]\n+            pub type Oneshot<T> =\n+                ::core::pipes::RecvPacketBuffered<super::Oneshot<T>,\n+            super::__Buffer<T>>;\n+        }\n+    }\n+\n+    /// The send end of a oneshot pipe.\n+    pub struct ChanOne<T> {\n+        contents: oneshot::client::Oneshot<T>\n+    }\n+\n+    impl<T> ChanOne<T> {\n+        pub fn new(contents: oneshot::client::Oneshot<T>) -> ChanOne<T> {\n+            ChanOne {\n+                contents: contents\n+            }\n+        }\n+    }\n+\n+    /// The receive end of a oneshot pipe.\n+    pub struct PortOne<T> {\n+        contents: oneshot::server::Oneshot<T>\n+    }\n+\n+    impl<T> PortOne<T> {\n+        pub fn new(contents: oneshot::server::Oneshot<T>) -> PortOne<T> {\n+            PortOne {\n+                contents: contents\n+            }\n+        }\n+    }\n+\n+    /// Initialiase a (send-endpoint, recv-endpoint) oneshot pipe pair.\n+    pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n+        let (chan, port) = oneshot::init();\n+        (PortOne::new(port), ChanOne::new(chan))\n+    }\n+\n+    pub impl<T: Owned> PortOne<T> {\n+        fn recv(self) -> T { recv_one(self) }\n+        fn try_recv(self) -> Option<T> { try_recv_one(self) }\n+        fn unwrap(self) -> oneshot::server::Oneshot<T> {\n+            match self {\n+                PortOne { contents: s } => s\n+            }\n+        }\n+    }\n+\n+    pub impl<T: Owned> ChanOne<T> {\n+        fn send(self, data: T) { send_one(self, data) }\n+        fn try_send(self, data: T) -> bool { try_send_one(self, data) }\n+        fn unwrap(self) -> oneshot::client::Oneshot<T> {\n+            match self {\n+                ChanOne { contents: s } => s\n+            }\n+        }\n+    }\n+\n+    /**\n+    * Receive a message from a oneshot pipe, failing if the connection was\n+    * closed.\n+    */\n+    pub fn recv_one<T: Owned>(port: PortOne<T>) -> T {\n+        match port {\n+            PortOne { contents: port } => {\n+                let oneshot::send(message) = recv(port);\n+                message\n+            }\n+        }\n+    }\n+\n+    /// Receive a message from a oneshot pipe unless the connection was closed.\n+    pub fn try_recv_one<T: Owned> (port: PortOne<T>) -> Option<T> {\n+        match port {\n+            PortOne { contents: port } => {\n+                let message = try_recv(port);\n+\n+                if message.is_none() {\n+                    None\n+                } else {\n+                    let oneshot::send(message) = message.unwrap();\n+                    Some(message)\n+                }\n+            }\n+        }\n+    }\n+\n+    /// Send a message on a oneshot pipe, failing if the connection was closed.\n+    pub fn send_one<T: Owned>(chan: ChanOne<T>, data: T) {\n+        match chan {\n+            ChanOne { contents: chan } => oneshot::client::send(chan, data),\n+        }\n+    }\n+\n+    /**\n+    * Send a message on a oneshot pipe, or return false if the connection was\n+    * closed.\n+    */\n+    pub fn try_send_one<T: Owned>(chan: ChanOne<T>, data: T) -> bool {\n+        match chan {\n+            ChanOne { contents: chan } => {\n+                oneshot::client::try_send(chan, data).is_some()\n+            }\n+        }\n+    }\n+\n+    // Streams - Make pipes a little easier in general.\n+\n+    /*proto! streamp (\n+        Open:send<T: Owned> {\n+            data(T) -> Open<T>\n+        }\n+    )*/\n+\n+    #[allow(non_camel_case_types)]\n+    pub mod streamp {\n+        priv use core::kinds::Owned;\n+\n+        pub fn init<T: Owned>() -> (client::Open<T>, server::Open<T>) {\n+            pub use core::pipes::HasBuffer;\n+            ::core::pipes::entangle()\n+        }\n+\n+        #[allow(non_camel_case_types)]\n+        pub enum Open<T> { pub data(T, server::Open<T>), }\n+\n+        #[allow(non_camel_case_types)]\n+        pub mod client {\n+            priv use core::kinds::Owned;\n+\n+            #[allow(non_camel_case_types)]\n+            pub fn try_data<T: Owned>(pipe: Open<T>, x_0: T) ->\n+                ::core::option::Option<Open<T>> {\n+                {\n+                    use super::data;\n+                    let (c, s) = ::core::pipes::entangle();\n+                    let message = data(x_0, s);\n+                    if ::core::pipes::send(pipe, message) {\n+                        ::core::pipes::rt::make_some(c)\n+                    } else { ::core::pipes::rt::make_none() }\n+                }\n+            }\n+\n+            #[allow(non_camel_case_types)]\n+            pub fn data<T: Owned>(pipe: Open<T>, x_0: T) -> Open<T> {\n+                {\n+                    use super::data;\n+                    let (c, s) = ::core::pipes::entangle();\n+                    let message = data(x_0, s);\n+                    ::core::pipes::send(pipe, message);\n+                    c\n+                }\n+            }\n+\n+            #[allow(non_camel_case_types)]\n+            pub type Open<T> = ::core::pipes::SendPacket<super::Open<T>>;\n+        }\n+\n+        #[allow(non_camel_case_types)]\n+        pub mod server {\n+            #[allow(non_camel_case_types)]\n+            pub type Open<T> = ::core::pipes::RecvPacket<super::Open<T>>;\n+        }\n+    }\n+\n+    /// An endpoint that can send many messages.\n+    #[unsafe_mut_field(endp)]\n+    pub struct Chan<T> {\n+        endp: Option<streamp::client::Open<T>>\n+    }\n+\n+    /// An endpoint that can receive many messages.\n+    #[unsafe_mut_field(endp)]\n+    pub struct Port<T> {\n+        endp: Option<streamp::server::Open<T>>,\n+    }\n+\n+    /** Creates a `(Port, Chan)` pair.\n+\n+    These allow sending or receiving an unlimited number of messages.\n+\n+    */\n+    pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n+        let (c, s) = streamp::init();\n+\n+        (Port {\n+            endp: Some(s)\n+        }, Chan {\n+            endp: Some(c)\n+        })\n+    }\n+\n+    impl<T: Owned> GenericChan<T> for Chan<T> {\n+        #[inline(always)]\n+        fn send(&self, x: T) {\n+            unsafe {\n+                let self_endp = transmute_mut(&self.endp);\n+                let endp = replace(self_endp, None);\n+                *self_endp = Some(streamp::client::data(endp.unwrap(), x))\n+            }\n+        }\n+    }\n+\n+    impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n+        #[inline(always)]\n+        fn try_send(&self, x: T) -> bool {\n+            unsafe {\n+                let self_endp = transmute_mut(&self.endp);\n+                let endp = replace(self_endp, None);\n+                match streamp::client::try_data(endp.unwrap(), x) {\n+                    Some(next) => {\n+                        *self_endp = Some(next);\n+                        true\n+                    }\n+                    None => false\n+                }\n+            }\n+        }\n+    }\n+\n+    impl<T: Owned> GenericPort<T> for Port<T> {\n+        #[inline(always)]\n+        fn recv(&self) -> T {\n+            unsafe {\n+                let self_endp = transmute_mut(&self.endp);\n+                let endp = replace(self_endp, None);\n+                let streamp::data(x, endp) = recv(endp.unwrap());\n+                *self_endp = Some(endp);\n+                x\n+            }\n+        }\n+\n+        #[inline(always)]\n+        fn try_recv(&self) -> Option<T> {\n+            unsafe {\n+                let self_endp = transmute_mut(&self.endp);\n+                let endp = replace(self_endp, None);\n+                match try_recv(endp.unwrap()) {\n+                    Some(streamp::data(x, endp)) => {\n+                        *self_endp = Some(endp);\n+                        Some(x)\n+                    }\n+                    None => None\n+                }\n+            }\n+        }\n+    }\n+\n+    impl<T: Owned> Peekable<T> for Port<T> {\n+        #[inline(always)]\n+        fn peek(&self) -> bool {\n+            unsafe {\n+                let self_endp = transmute_mut(&self.endp);\n+                let mut endp = replace(self_endp, None);\n+                let peek = match endp {\n+                    Some(ref mut endp) => peek(endp),\n+                    None => fail!(\"peeking empty stream\")\n+                };\n+                *self_endp = endp;\n+                peek\n+            }\n+        }\n+    }\n+\n+    impl<T: Owned> Selectable for Port<T> {\n+        fn header(&mut self) -> *mut PacketHeader {\n+            match self.endp {\n+                Some(ref mut endp) => endp.header(),\n+                None => fail!(\"peeking empty stream\")\n+            }\n     }\n }\n \n-impl<T:Owned,U:Owned> Selectable for DuplexStream<T, U> {\n-    fn header(&mut self) -> *mut pipes::PacketHeader {\n-        self.port.header()\n+}\n+\n+/// Returns the index of an endpoint that is ready to receive.\n+pub fn selecti<T: Selectable>(endpoints: &mut [T]) -> uint {\n+    wait_many(endpoints)\n+}\n+\n+/// Returns 0 or 1 depending on which endpoint is ready to receive\n+pub fn select2i<A:Selectable, B:Selectable>(a: &mut A, b: &mut B)\n+                                            -> Either<(), ()> {\n+    let mut endpoints = [ a.header(), b.header() ];\n+    match wait_many(endpoints) {\n+        0 => Left(()),\n+        1 => Right(()),\n+        _ => fail!(\"wait returned unexpected index\"),\n     }\n }\n \n-/// Creates a bidirectional stream.\n-pub fn DuplexStream<T:Owned,U:Owned>()\n-    -> (DuplexStream<T, U>, DuplexStream<U, T>)\n-{\n-    let (p1, c2) = comm::stream();\n-    let (p2, c1) = comm::stream();\n-    (DuplexStream {\n-        chan: c1,\n-        port: p1\n-    },\n-     DuplexStream {\n-         chan: c2,\n-         port: p2\n-     })\n+/// Receive a message from one of two endpoints.\n+pub trait Select2<T: Owned, U: Owned> {\n+    /// Receive a message or return `None` if a connection closes.\n+    fn try_select(&mut self) -> Either<Option<T>, Option<U>>;\n+    /// Receive a message or fail if a connection closes.\n+    fn select(&mut self) -> Either<T, U>;\n+}\n+\n+impl<T:Owned,\n+     U:Owned,\n+     Left:Selectable + GenericPort<T>,\n+     Right:Selectable + GenericPort<U>>\n+     Select2<T, U>\n+     for (Left, Right) {\n+    fn select(&mut self) -> Either<T, U> {\n+        // XXX: Bad borrow check workaround.\n+        unsafe {\n+            let this: &(Left, Right) = transmute(self);\n+            match *this {\n+                (ref lp, ref rp) => {\n+                    let lp: &mut Left = transmute(lp);\n+                    let rp: &mut Right = transmute(rp);\n+                    match select2i(lp, rp) {\n+                        Left(()) => Left(lp.recv()),\n+                        Right(()) => Right(rp.recv()),\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    fn try_select(&mut self) -> Either<Option<T>, Option<U>> {\n+        // XXX: Bad borrow check workaround.\n+        unsafe {\n+            let this: &(Left, Right) = transmute(self);\n+            match *this {\n+                (ref lp, ref rp) => {\n+                    let lp: &mut Left = transmute(lp);\n+                    let rp: &mut Right = transmute(rp);\n+                    match select2i(lp, rp) {\n+                        Left(()) => Left (lp.try_recv()),\n+                        Right(()) => Right(rp.try_recv()),\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n #[cfg(test)]\n mod test {\n-    use comm::DuplexStream;\n+    use either::Right;\n+    use super::{Chan, Port, oneshot, stream};\n+\n+    #[test]\n+    fn test_select2() {\n+        let (p1, c1) = stream();\n+        let (p2, c2) = stream();\n+\n+        c1.send(~\"abc\");\n+\n+        let mut tuple = (p1, p2);\n+        match tuple.select() {\n+            Right(_) => fail!(),\n+            _ => (),\n+        }\n+\n+        c2.send(123);\n+    }\n+\n+    #[test]\n+    fn test_oneshot() {\n+        let (p, c) = oneshot();\n+\n+        c.send(());\n+\n+        p.recv()\n+    }\n \n     #[test]\n-    pub fn DuplexStream1() {\n-        let (left, right) = DuplexStream();\n+    fn test_peek_terminated() {\n+        let (port, chan): (Port<int>, Chan<int>) = stream();\n \n-        left.send(~\"abc\");\n-        right.send(123);\n+        {\n+            // Destroy the channel\n+            let _chan = chan;\n+        }\n \n-        assert_eq!(left.recv(), 123);\n-        assert_eq!(right.recv(), ~\"abc\");\n+        assert!(!port.peek());\n     }\n }"}, {"sha": "baa6722b1936e507f22b3f281ab3150eee5fcd25", "filename": "src/libstd/condition.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/condition.rs"}, {"sha": "505aa5881c5c22f325082ec5c889e9b998434dc9", "filename": "src/libstd/container.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcontainer.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/container.rs"}, {"sha": "60093ff96bb266b7d30ce7272c98c50808ee3377", "filename": "src/libstd/core.rc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcore.rc?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/core.rc"}, {"sha": "f89bb3b2f90646c993d6e40ce9fb690d7c873a4a", "filename": "src/libstd/either.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/either.rs"}, {"sha": "ebf6d212466a5f7ce2a37c93e971a28ce2f49b28", "filename": "src/libstd/from_str.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ffrom_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ffrom_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffrom_str.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/from_str.rs"}, {"sha": "611b95a7745e4e2a305e533d5b1b5ea17dddfefb", "filename": "src/libstd/gc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/gc.rs"}, {"sha": "69312f3a97b8c857cf9f1d9da3a4f7a9bd57415a", "filename": "src/libstd/hash.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/hash.rs"}, {"sha": "e6ccb7a1d6b23c80d240453f4e2872062918eb75", "filename": "src/libstd/hashmap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/hashmap.rs"}, {"sha": "aa312742e3ecd34c6e8d95ab295a70766acee043", "filename": "src/libstd/io.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/io.rs"}, {"sha": "57a076bb0829b9af0fc948d5f5e2bedf5529decc", "filename": "src/libstd/iter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/iter.rs"}, {"sha": "a5679e6dbff204d3d76b470f30c1fd2294d0aed5", "filename": "src/libstd/iterator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/iterator.rs"}, {"sha": "d9b3e35b6b9d76623c8b897023ae95d96671b360", "filename": "src/libstd/kinds.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/kinds.rs"}, {"sha": "7ae3f0fd2d462124d964d7e7a158c32b21c4efbc", "filename": "src/libstd/libc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/libc.rs"}, {"sha": "2cbf8b9f05ef8e9f29a6020a39549616b1e02996", "filename": "src/libstd/local_data.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/local_data.rs"}, {"sha": "be71714a048e334be3006dc4a03d970dd615a7ea", "filename": "src/libstd/logging.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/logging.rs"}, {"sha": "fda48b6ffb7d9140c845846ab0b90fefb5d26651", "filename": "src/libstd/macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/macros.rs"}, {"sha": "ecde1eb19179d3f0a03652a2786837f6ba282698", "filename": "src/libstd/managed.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmanaged.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/managed.rs"}, {"sha": "833bd3459cebf4b76a3006f9a80cbfcdf92552da", "filename": "src/libstd/nil.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnil.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/nil.rs"}, {"sha": "a80703fafa3d22918b3f7cb49c71a25dee5a0164", "filename": "src/libstd/num/cmath.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/cmath.rs"}, {"sha": "d5dc0dd4730e179b39467575f90d3aa0d3a5e693", "filename": "src/libstd/num/f32.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/f32.rs"}, {"sha": "6e2496e2e4561dff2116e37f508bdee0cd687079", "filename": "src/libstd/num/f64.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/f64.rs"}, {"sha": "681aafaab8884964b189045f56abfe8480885366", "filename": "src/libstd/num/float.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/float.rs"}, {"sha": "3c31a7d574518c9436539ca023272e2f5f6801bc", "filename": "src/libstd/num/int-template.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint-template.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/int-template.rs"}, {"sha": "282633785553bf26e6362e8e46b266043f935887", "filename": "src/libstd/num/int-template/i16.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint-template%2Fi16.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/int-template/i16.rs"}, {"sha": "959cf8f7d77cac26cb66f9993c2444e77f94cb26", "filename": "src/libstd/num/int-template/i32.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint-template%2Fi32.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/int-template/i32.rs"}, {"sha": "3b51c70be12e52bc2f684b7e85fb198a9de160ca", "filename": "src/libstd/num/int-template/i64.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint-template%2Fi64.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/int-template/i64.rs"}, {"sha": "896fb4dbf50f822bafd99e9207e66db73c3b10fb", "filename": "src/libstd/num/int-template/i8.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint-template%2Fi8.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/int-template/i8.rs"}, {"sha": "64f6f2d2a9a9bc22d979a48913e6a7a4bcf5d725", "filename": "src/libstd/num/int-template/int.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint-template%2Fint.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/int-template/int.rs"}, {"sha": "96b302d317499ef77da41c23e9ce5eefdd77f0db", "filename": "src/libstd/num/num.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/num.rs"}, {"sha": "1d65b84b7cec1e4dfa5570af5b853e2a87dbbb7c", "filename": "src/libstd/num/strconv.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/strconv.rs"}, {"sha": "66ff16cbeb1ef03d9ee6a166f9e28df2e694c08e", "filename": "src/libstd/num/uint-template.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint-template.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/uint-template.rs"}, {"sha": "cc262f6b4dee7100385e9b7784383173265c8d5e", "filename": "src/libstd/num/uint-template/u16.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint-template%2Fu16.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/uint-template/u16.rs"}, {"sha": "7d7c8e3be302e3589b6d72f5e3fbd5f77296647a", "filename": "src/libstd/num/uint-template/u32.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint-template%2Fu32.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/uint-template/u32.rs"}, {"sha": "756c29950c35b062b2fdf4dd902c6924e5e88a9f", "filename": "src/libstd/num/uint-template/u64.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint-template%2Fu64.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/uint-template/u64.rs"}, {"sha": "5ac860c0359c547fd7217162a1245b169e6f49c8", "filename": "src/libstd/num/uint-template/u8.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint-template%2Fu8.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/uint-template/u8.rs"}, {"sha": "763c305f2214941b462d960ed2e8abf072d3c34a", "filename": "src/libstd/num/uint-template/uint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint-template%2Fuint.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/num/uint-template/uint.rs"}, {"sha": "389b643572cb6b2089968f6aff850e324fa76124", "filename": "src/libstd/old_iter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fold_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fold_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_iter.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/old_iter.rs"}, {"sha": "47ff45be68726a5bc5ab73950102438fe4c1106f", "filename": "src/libstd/ops.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/ops.rs"}, {"sha": "bc1ffcdc81ae4652c3d17c1ac3c779b87d4de13b", "filename": "src/libstd/option.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/option.rs"}, {"sha": "b2a30e50992c885988b441e116e74c7aac9c62ce", "filename": "src/libstd/os.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/os.rs"}, {"sha": "3262fb4afdcf6ad5a6406ff4bee2e594da95dff5", "filename": "src/libstd/owned.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fowned.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/owned.rs"}, {"sha": "ed9ef864f8039e285f49e94af6df7061e1fcc41f", "filename": "src/libstd/path.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/path.rs"}, {"sha": "1c2b57bb2dffbbb88581114ef401bdd4d969c663", "filename": "src/libstd/pipes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/pipes.rs"}, {"sha": "58d0c40efa070db218f04f8e8f96cc5e0a1f9c65", "filename": "src/libstd/prelude.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/prelude.rs"}, {"sha": "f6cc00ccc8681ca9dbdb8895302eff9be9d12374", "filename": "src/libstd/ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/ptr.rs"}, {"sha": "84dd7d187e4b1e736069d8ae90cab9f9f9f4b764", "filename": "src/libstd/rand.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rand.rs"}, {"sha": "72cff5111e76291e46be9ca60b7b03d682972302", "filename": "src/libstd/rand/distributions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rand/distributions.rs"}, {"sha": "aca2457cac42c282dc10355e1ba38e827a7da40f", "filename": "src/libstd/rand/ziggurat_tables.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frand%2Fziggurat_tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frand%2Fziggurat_tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fziggurat_tables.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rand/ziggurat_tables.rs"}, {"sha": "30f60dce04113b1b46ab79b5d118e2968b9ddb82", "filename": "src/libstd/reflect.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/reflect.rs"}, {"sha": "a05009e375cf998c1b0072ecce115b371ee4e73b", "filename": "src/libstd/repr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/repr.rs"}, {"sha": "cda2fe13e37663f9621eb76ede3b43d889a9673b", "filename": "src/libstd/result.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/result.rs"}, {"sha": "0d011ce42bab9e1a8bde2bcbd7f80bb943440e84", "filename": "src/libstd/rt/context.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcontext.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/context.rs"}, {"sha": "1d7ff17314901bf50093e8cdeecef254c22a3017", "filename": "src/libstd/rt/env.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fenv.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/env.rs"}, {"sha": "7e891f1718e2111016751c745a67275906d0b212", "filename": "src/libstd/rt/io/comm_adapters.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fcomm_adapters.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/comm_adapters.rs"}, {"sha": "ceff2ecd77de065f7e84eadeb7d9e22235380b02", "filename": "src/libstd/rt/io/extensions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/extensions.rs"}, {"sha": "1f61cf25fbdd4dc52596aea401a6071e2ed648fe", "filename": "src/libstd/rt/io/file.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/file.rs"}, {"sha": "db2683dc85d837fd88a6c36629a21fe3e552c78d", "filename": "src/libstd/rt/io/flate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fflate.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/flate.rs"}, {"sha": "b2701c1fdc392b9df56b88bf6e90bf73d9116713", "filename": "src/libstd/rt/io/mem.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmem.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/mem.rs"}, {"sha": "0ec51a3aa941ee15c1eb83e17392d9c3af809369", "filename": "src/libstd/rt/io/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/mod.rs"}, {"sha": "31c90336a24c28abe506d86dffd6a13d2cd40765", "filename": "src/libstd/rt/io/native/file.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/native/file.rs"}, {"sha": "c693cfaab678bf2db3f931c18860f7db85343d75", "filename": "src/libstd/rt/io/net/http.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Fhttp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Fhttp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fhttp.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/net/http.rs"}, {"sha": "df1dfe4d38ad1b1eb7d028475ca521dde9e5bd88", "filename": "src/libstd/rt/io/net/ip.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fip.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/net/ip.rs"}, {"sha": "f7c03c13a58126382738b50babb82f3cec0f63f9", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/net/tcp.rs"}, {"sha": "bb5457e334ddaf3303ce07ba65f4121e6765db44", "filename": "src/libstd/rt/io/net/udp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/net/udp.rs"}, {"sha": "b85b7dd059d82f7f1cefd6cae9ac2636d2031858", "filename": "src/libstd/rt/io/net/unix.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Funix.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/net/unix.rs"}, {"sha": "d71ef55d3ad971839e0677742e92f3174dddb84e", "filename": "src/libstd/rt/io/option.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Foption.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/option.rs"}, {"sha": "247fe9544088bfa54984725fed476bf9a83d95f4", "filename": "src/libstd/rt/io/stdio.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fstdio.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/stdio.rs"}, {"sha": "7bace5d6df2ccfdba1cfe7538ab05cbed10da6cb", "filename": "src/libstd/rt/io/support.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fio%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fsupport.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/io/support.rs"}, {"sha": "6bf228a1b2201596aa256497cc9d86752d3b7209", "filename": "src/libstd/rt/local_heap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/local_heap.rs"}, {"sha": "2fac1df01a495c056810e57e9a0d16debd13d607", "filename": "src/libstd/rt/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/mod.rs"}, {"sha": "4b5eda22ff5de7999534237995f56ab875405dab", "filename": "src/libstd/rt/rtio.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/rtio.rs"}, {"sha": "ec56e65931c8182192d81fd6abe79f3cffd69eb0", "filename": "src/libstd/rt/stack.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fstack.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/stack.rs"}, {"sha": "0314137fc7f9271151b7765aa590e7ceea118fe9", "filename": "src/libstd/rt/task.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/task.rs"}, {"sha": "c60ae2bfeffc8bb06500750dd2dc98a7fdbfd444", "filename": "src/libstd/rt/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/test.rs"}, {"sha": "0f1ae09bd944ba104e7e17dcae2c0a957202bcee", "filename": "src/libstd/rt/thread.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/thread.rs"}, {"sha": "7187d2db41cac492f2ad33b2539b9d10b891ce8e", "filename": "src/libstd/rt/thread_local_storage.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread_local_storage.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/thread_local_storage.rs"}, {"sha": "2d14505509759b70e8409c4f36afd9657240268e", "filename": "src/libstd/rt/uv/file.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/uv/file.rs"}, {"sha": "2bd657fd8641f466bc01998d52a2824ad026083c", "filename": "src/libstd/rt/uv/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fmod.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/uv/mod.rs"}, {"sha": "68b871e6b31184b4f234beb151e31248a848c515", "filename": "src/libstd/rt/uv/net.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/uv/net.rs"}, {"sha": "24bffd8d1cd2449afbbc3cd5e5dc63883a48721c", "filename": "src/libstd/rt/uvio.rs", "status": "renamed", "additions": 147, "deletions": 180, "changes": 327, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuvio.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -10,24 +10,20 @@\n \n use option::*;\n use result::*;\n+\n+use super::io::net::ip::IpAddr;\n+use super::uv::*;\n+use super::rtio::*;\n use ops::Drop;\n+use old_iter::CopyableIter;\n use cell::{Cell, empty_cell};\n use cast::transmute;\n-use clone::Clone;\n-use rt::io::IoError;\n-use rt::io::net::ip::IpAddr;\n-use rt::uv::*;\n-use rt::uv::idle::IdleWatcher;\n-use rt::rtio::*;\n-use rt::sched::Scheduler;\n-use rt::io::{standard_error, OtherIoError};\n-use rt::tube::Tube;\n-use rt::local::Local;\n+use super::sched::{Scheduler, local_sched};\n \n #[cfg(test)] use container::Container;\n #[cfg(test)] use uint;\n #[cfg(test)] use unstable::run_in_bare_thread;\n-#[cfg(test)] use rt::test::*;\n+#[cfg(test)] use super::test::*;\n \n pub struct UvEventLoop {\n     uvio: UvIoFactory\n@@ -68,16 +64,7 @@ impl EventLoop for UvEventLoop {\n             assert!(status.is_none());\n             let mut idle_watcher = idle_watcher;\n             idle_watcher.stop();\n-            idle_watcher.close(||());\n-            f();\n-        }\n-    }\n-\n-    fn callback_ms(&mut self, ms: u64, f: ~fn()) {\n-        let mut timer =  TimerWatcher::new(self.uvio.uv_loop());\n-        do timer.start(ms, 0) |timer, status| {\n-            assert!(status.is_none());\n-            timer.close(||());\n+            idle_watcher.close();\n             f();\n         }\n     }\n@@ -97,7 +84,7 @@ fn test_callback_run_once() {\n             unsafe { *count_ptr += 1 }\n         }\n         event_loop.run();\n-        assert_eq!(count, 1);\n+        assert!(count == 1);\n     }\n }\n \n@@ -113,20 +100,20 @@ impl IoFactory for UvIoFactory {\n     // Connect to an address and return a new stream\n     // NB: This blocks the task waiting on the connection.\n     // It would probably be better to return a future\n-    fn tcp_connect(&mut self, addr: IpAddr) -> Result<~RtioTcpStreamObject, IoError> {\n+    fn connect(&mut self, addr: IpAddr) -> Option<~StreamObject> {\n         // Create a cell in the task to hold the result. We will fill\n         // the cell before resuming the task.\n         let result_cell = empty_cell();\n-        let result_cell_ptr: *Cell<Result<~RtioTcpStreamObject, IoError>> = &result_cell;\n+        let result_cell_ptr: *Cell<Option<~StreamObject>> = &result_cell;\n \n-        let scheduler = Local::take::<Scheduler>();\n+        let scheduler = local_sched::take();\n         assert!(scheduler.in_task_context());\n \n         // Block this task and take ownership, switch to scheduler context\n         do scheduler.deschedule_running_task_and_then |task| {\n \n             rtdebug!(\"connect: entered scheduler context\");\n-            do Local::borrow::<Scheduler> |scheduler| {\n+            do local_sched::borrow |scheduler| {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut tcp_watcher = TcpWatcher::new(self.uv_loop());\n@@ -135,159 +122,133 @@ impl IoFactory for UvIoFactory {\n             // Wait for a connection\n             do tcp_watcher.connect(addr) |stream_watcher, status| {\n                 rtdebug!(\"connect: in connect callback\");\n-                if status.is_none() {\n+                let maybe_stream = if status.is_none() {\n                     rtdebug!(\"status is none\");\n-                    let res = Ok(~UvTcpStream { watcher: stream_watcher });\n-\n-                    // Store the stream in the task's stack\n-                    unsafe { (*result_cell_ptr).put_back(res); }\n-\n-                    // Context switch\n-                    let scheduler = Local::take::<Scheduler>();\n-                    scheduler.resume_task_immediately(task_cell.take());\n+                    Some(~UvStream(stream_watcher))\n                 } else {\n                     rtdebug!(\"status is some\");\n-                    let task_cell = Cell(task_cell.take());\n-                    do stream_watcher.close {\n-                        let res = Err(uv_error_to_io_error(status.get()));\n-                        unsafe { (*result_cell_ptr).put_back(res); }\n-                        let scheduler = Local::take::<Scheduler>();\n-                        scheduler.resume_task_immediately(task_cell.take());\n-                    }\n+                    stream_watcher.close(||());\n+                    None\n                 };\n+\n+                // Store the stream in the task's stack\n+                unsafe { (*result_cell_ptr).put_back(maybe_stream); }\n+\n+                // Context switch\n+                let scheduler = local_sched::take();\n+                scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n \n         assert!(!result_cell.is_empty());\n         return result_cell.take();\n     }\n \n-    fn tcp_bind(&mut self, addr: IpAddr) -> Result<~RtioTcpListenerObject, IoError> {\n+    fn bind(&mut self, addr: IpAddr) -> Option<~TcpListenerObject> {\n         let mut watcher = TcpWatcher::new(self.uv_loop());\n-        match watcher.bind(addr) {\n-            Ok(_) => Ok(~UvTcpListener::new(watcher)),\n-            Err(uverr) => {\n-                let scheduler = Local::take::<Scheduler>();\n-                do scheduler.deschedule_running_task_and_then |task| {\n-                    let task_cell = Cell(task);\n-                    do watcher.as_stream().close {\n-                        let scheduler = Local::take::<Scheduler>();\n-                        scheduler.resume_task_immediately(task_cell.take());\n-                    }\n-                }\n-                Err(uv_error_to_io_error(uverr))\n-            }\n-        }\n+        watcher.bind(addr);\n+        return Some(~UvTcpListener(watcher));\n     }\n }\n \n-// FIXME #6090: Prefer newtype structs but Drop doesn't work\n-pub struct UvTcpListener {\n-    watcher: TcpWatcher,\n-    listening: bool,\n-    incoming_streams: Tube<Result<~RtioTcpStreamObject, IoError>>\n-}\n+pub struct UvTcpListener(TcpWatcher);\n \n impl UvTcpListener {\n-    fn new(watcher: TcpWatcher) -> UvTcpListener {\n-        UvTcpListener {\n-            watcher: watcher,\n-            listening: false,\n-            incoming_streams: Tube::new()\n-        }\n+    fn watcher(&self) -> TcpWatcher {\n+        match self { &UvTcpListener(w) => w }\n     }\n \n-    fn watcher(&self) -> TcpWatcher { self.watcher }\n+    fn close(&self) {\n+        // XXX: Need to wait until close finishes before returning\n+        self.watcher().as_stream().close(||());\n+    }\n }\n \n impl Drop for UvTcpListener {\n     fn finalize(&self) {\n-        let watcher = self.watcher();\n-        let scheduler = Local::take::<Scheduler>();\n-        do scheduler.deschedule_running_task_and_then |task| {\n-            let task_cell = Cell(task);\n-            do watcher.as_stream().close {\n-                let scheduler = Local::take::<Scheduler>();\n-                scheduler.resume_task_immediately(task_cell.take());\n-            }\n-        }\n+        // XXX: Again, this never gets called. Use .close() instead\n+        //self.watcher().as_stream().close(||());\n     }\n }\n \n-impl RtioTcpListener for UvTcpListener {\n+impl TcpListener for UvTcpListener {\n \n-    fn accept(&mut self) -> Result<~RtioTcpStreamObject, IoError> {\n+    fn listen(&mut self) -> Option<~StreamObject> {\n         rtdebug!(\"entering listen\");\n+        let result_cell = empty_cell();\n+        let result_cell_ptr: *Cell<Option<~StreamObject>> = &result_cell;\n \n-        if self.listening {\n-            return self.incoming_streams.recv();\n-        }\n+        let server_tcp_watcher = self.watcher();\n \n-        self.listening = true;\n+        let scheduler = local_sched::take();\n+        assert!(scheduler.in_task_context());\n \n-        let server_tcp_watcher = self.watcher();\n-        let incoming_streams_cell = Cell(self.incoming_streams.clone());\n-\n-        let incoming_streams_cell = Cell(incoming_streams_cell.take());\n-        let mut server_tcp_watcher = server_tcp_watcher;\n-        do server_tcp_watcher.listen |server_stream_watcher, status| {\n-            let maybe_stream = if status.is_none() {\n-                let mut server_stream_watcher = server_stream_watcher;\n-                let mut loop_ = server_stream_watcher.event_loop();\n-                let client_tcp_watcher = TcpWatcher::new(&mut loop_);\n-                let client_tcp_watcher = client_tcp_watcher.as_stream();\n-                // XXX: Need's to be surfaced in interface\n-                server_stream_watcher.accept(client_tcp_watcher);\n-                Ok(~UvTcpStream { watcher: client_tcp_watcher })\n-            } else {\n-                Err(standard_error(OtherIoError))\n-            };\n+        do scheduler.deschedule_running_task_and_then |task| {\n+            let task_cell = Cell(task);\n+            let mut server_tcp_watcher = server_tcp_watcher;\n+            do server_tcp_watcher.listen |server_stream_watcher, status| {\n+                let maybe_stream = if status.is_none() {\n+                    let mut server_stream_watcher = server_stream_watcher;\n+                    let mut loop_ = loop_from_watcher(&server_stream_watcher);\n+                    let client_tcp_watcher = TcpWatcher::new(&mut loop_).as_stream();\n+                    // XXX: Needs to be surfaced in interface\n+                    server_stream_watcher.accept(client_tcp_watcher);\n+                    Some(~UvStream::new(client_tcp_watcher))\n+                } else {\n+                    None\n+                };\n+\n+                unsafe { (*result_cell_ptr).put_back(maybe_stream); }\n \n-            let mut incoming_streams = incoming_streams_cell.take();\n-            incoming_streams.send(maybe_stream);\n-            incoming_streams_cell.put_back(incoming_streams);\n+                rtdebug!(\"resuming task from listen\");\n+                // Context switch\n+                let scheduler = local_sched::take();\n+                scheduler.resume_task_immediately(task_cell.take());\n+            }\n         }\n \n-        return self.incoming_streams.recv();\n+        assert!(!result_cell.is_empty());\n+        return result_cell.take();\n     }\n }\n \n-// FIXME #6090: Prefer newtype structs but Drop doesn't work\n-pub struct UvTcpStream {\n-    watcher: StreamWatcher\n-}\n+pub struct UvStream(StreamWatcher);\n \n-impl UvTcpStream {\n-    fn watcher(&self) -> StreamWatcher { self.watcher }\n+impl UvStream {\n+    fn new(watcher: StreamWatcher) -> UvStream {\n+        UvStream(watcher)\n+    }\n+\n+    fn watcher(&self) -> StreamWatcher {\n+        match self { &UvStream(w) => w }\n+    }\n+\n+    // XXX: finalize isn't working for ~UvStream???\n+    fn close(&self) {\n+        // XXX: Need to wait until this finishes before returning\n+        self.watcher().close(||());\n+    }\n }\n \n-impl Drop for UvTcpStream {\n+impl Drop for UvStream {\n     fn finalize(&self) {\n-        rtdebug!(\"closing tcp stream\");\n-        let watcher = self.watcher();\n-        let scheduler = Local::take::<Scheduler>();\n-        do scheduler.deschedule_running_task_and_then |task| {\n-            let task_cell = Cell(task);\n-            do watcher.close {\n-                let scheduler = Local::take::<Scheduler>();\n-                scheduler.resume_task_immediately(task_cell.take());\n-            }\n-        }\n+        rtdebug!(\"closing stream\");\n+        //self.watcher().close(||());\n     }\n }\n \n-impl RtioTcpStream for UvTcpStream {\n-    fn read(&mut self, buf: &mut [u8]) -> Result<uint, IoError> {\n+impl Stream for UvStream {\n+    fn read(&mut self, buf: &mut [u8]) -> Result<uint, ()> {\n         let result_cell = empty_cell();\n-        let result_cell_ptr: *Cell<Result<uint, IoError>> = &result_cell;\n+        let result_cell_ptr: *Cell<Result<uint, ()>> = &result_cell;\n \n-        let scheduler = Local::take::<Scheduler>();\n+        let scheduler = local_sched::take();\n         assert!(scheduler.in_task_context());\n         let watcher = self.watcher();\n         let buf_ptr: *&mut [u8] = &buf;\n         do scheduler.deschedule_running_task_and_then |task| {\n             rtdebug!(\"read: entered scheduler context\");\n-            do Local::borrow::<Scheduler> |scheduler| {\n+            do local_sched::borrow |scheduler| {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut watcher = watcher;\n@@ -310,12 +271,12 @@ impl RtioTcpStream for UvTcpStream {\n                     assert!(nread >= 0);\n                     Ok(nread as uint)\n                 } else {\n-                    Err(uv_error_to_io_error(status.unwrap()))\n+                    Err(())\n                 };\n \n                 unsafe { (*result_cell_ptr).put_back(result); }\n \n-                let scheduler = Local::take::<Scheduler>();\n+                let scheduler = local_sched::take();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -324,27 +285,29 @@ impl RtioTcpStream for UvTcpStream {\n         return result_cell.take();\n     }\n \n-    fn write(&mut self, buf: &[u8]) -> Result<(), IoError> {\n+    fn write(&mut self, buf: &[u8]) -> Result<(), ()> {\n         let result_cell = empty_cell();\n-        let result_cell_ptr: *Cell<Result<(), IoError>> = &result_cell;\n-        let scheduler = Local::take::<Scheduler>();\n+        let result_cell_ptr: *Cell<Result<(), ()>> = &result_cell;\n+        let scheduler = local_sched::take();\n         assert!(scheduler.in_task_context());\n         let watcher = self.watcher();\n         let buf_ptr: *&[u8] = &buf;\n         do scheduler.deschedule_running_task_and_then |task| {\n             let mut watcher = watcher;\n             let task_cell = Cell(task);\n-            let buf = unsafe { slice_to_uv_buf(*buf_ptr) };\n+            let buf = unsafe { &*buf_ptr };\n+            // XXX: OMGCOPIES\n+            let buf = buf.to_vec();\n             do watcher.write(buf) |_watcher, status| {\n                 let result = if status.is_none() {\n                     Ok(())\n                 } else {\n-                    Err(uv_error_to_io_error(status.unwrap()))\n+                    Err(())\n                 };\n \n                 unsafe { (*result_cell_ptr).put_back(result); }\n \n-                let scheduler = Local::take::<Scheduler>();\n+                let scheduler = local_sched::take();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -357,12 +320,10 @@ impl RtioTcpStream for UvTcpStream {\n #[test]\n fn test_simple_io_no_connect() {\n     do run_in_newsched_task {\n-        unsafe {\n-            let io = Local::unsafe_borrow::<IoFactoryObject>();\n-            let addr = next_test_ip4();\n-            let maybe_chan = (*io).tcp_connect(addr);\n-            assert!(maybe_chan.is_err());\n-        }\n+        let io = unsafe { local_sched::unsafe_borrow_io() };\n+        let addr = next_test_ip4();\n+        let maybe_chan = io.connect(addr);\n+        assert!(maybe_chan.is_none());\n     }\n }\n \n@@ -374,24 +335,27 @@ fn test_simple_tcp_server_and_client() {\n         // Start the server first so it's listening when we connect\n         do spawntask_immediately {\n             unsafe {\n-                let io = Local::unsafe_borrow::<IoFactoryObject>();\n-                let mut listener = (*io).tcp_bind(addr).unwrap();\n-                let mut stream = listener.accept().unwrap();\n+                let io = local_sched::unsafe_borrow_io();\n+                let mut listener = io.bind(addr).unwrap();\n+                let mut stream = listener.listen().unwrap();\n                 let mut buf = [0, .. 2048];\n                 let nread = stream.read(buf).unwrap();\n-                assert_eq!(nread, 8);\n+                assert!(nread == 8);\n                 for uint::range(0, nread) |i| {\n                     rtdebug!(\"%u\", buf[i] as uint);\n-                    assert_eq!(buf[i], i as u8);\n+                    assert!(buf[i] == i as u8);\n                 }\n+                stream.close();\n+                listener.close();\n             }\n         }\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = Local::unsafe_borrow::<IoFactoryObject>();\n-                let mut stream = (*io).tcp_connect(addr).unwrap();\n+                let io = local_sched::unsafe_borrow_io();\n+                let mut stream = io.connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n+                stream.close();\n             }\n         }\n     }\n@@ -403,9 +367,9 @@ fn test_read_and_block() {\n         let addr = next_test_ip4();\n \n         do spawntask_immediately {\n-            let io = unsafe { Local::unsafe_borrow::<IoFactoryObject>() };\n-            let mut listener = unsafe { (*io).tcp_bind(addr).unwrap() };\n-            let mut stream = listener.accept().unwrap();\n+            let io = unsafe { local_sched::unsafe_borrow_io() };\n+            let mut listener = io.bind(addr).unwrap();\n+            let mut stream = listener.listen().unwrap();\n             let mut buf = [0, .. 2048];\n \n             let expected = 32;\n@@ -416,36 +380,38 @@ fn test_read_and_block() {\n                 let nread = stream.read(buf).unwrap();\n                 for uint::range(0, nread) |i| {\n                     let val = buf[i] as uint;\n-                    assert_eq!(val, current % 8);\n+                    assert!(val == current % 8);\n                     current += 1;\n                 }\n                 reads += 1;\n \n-                let scheduler = Local::take::<Scheduler>();\n+                let scheduler = local_sched::take();\n                 // Yield to the other task in hopes that it\n                 // will trigger a read callback while we are\n                 // not ready for it\n                 do scheduler.deschedule_running_task_and_then |task| {\n                     let task = Cell(task);\n-                    do Local::borrow::<Scheduler> |scheduler| {\n-                        scheduler.enqueue_task(task.take());\n+                    do local_sched::borrow |scheduler| {\n+                        scheduler.task_queue.push_back(task.take());\n                     }\n                 }\n             }\n \n             // Make sure we had multiple reads\n             assert!(reads > 1);\n+\n+            stream.close();\n+            listener.close();\n         }\n \n         do spawntask_immediately {\n-            unsafe {\n-                let io = Local::unsafe_borrow::<IoFactoryObject>();\n-                let mut stream = (*io).tcp_connect(addr).unwrap();\n-                stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n-                stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n-                stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n-                stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n-            }\n+            let io = unsafe { local_sched::unsafe_borrow_io() };\n+            let mut stream = io.connect(addr).unwrap();\n+            stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n+            stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n+            stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n+            stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n+            stream.close();\n         }\n \n     }\n@@ -459,34 +425,35 @@ fn test_read_read_read() {\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = Local::unsafe_borrow::<IoFactoryObject>();\n-                let mut listener = (*io).tcp_bind(addr).unwrap();\n-                let mut stream = listener.accept().unwrap();\n+                let io = local_sched::unsafe_borrow_io();\n+                let mut listener = io.bind(addr).unwrap();\n+                let mut stream = listener.listen().unwrap();\n                 let buf = [1, .. 2048];\n                 let mut total_bytes_written = 0;\n                 while total_bytes_written < MAX {\n                     stream.write(buf);\n                     total_bytes_written += buf.len();\n                 }\n+                stream.close();\n+                listener.close();\n             }\n         }\n \n         do spawntask_immediately {\n-            unsafe {\n-                let io = Local::unsafe_borrow::<IoFactoryObject>();\n-                let mut stream = (*io).tcp_connect(addr).unwrap();\n-                let mut buf = [0, .. 2048];\n-                let mut total_bytes_read = 0;\n-                while total_bytes_read < MAX {\n-                    let nread = stream.read(buf).unwrap();\n-                    rtdebug!(\"read %u bytes\", nread as uint);\n-                    total_bytes_read += nread;\n-                    for uint::range(0, nread) |i| {\n-                        assert_eq!(buf[i], 1);\n-                    }\n+            let io = unsafe { local_sched::unsafe_borrow_io() };\n+            let mut stream = io.connect(addr).unwrap();\n+            let mut buf = [0, .. 2048];\n+            let mut total_bytes_read = 0;\n+            while total_bytes_read < MAX {\n+                let nread = stream.read(buf).unwrap();\n+                rtdebug!(\"read %u bytes\", nread as uint);\n+                total_bytes_read += nread;\n+                for uint::range(0, nread) |i| {\n+                    assert!(buf[i] == 1);\n                 }\n-                rtdebug!(\"read %u bytes total\", total_bytes_read as uint);\n             }\n+            rtdebug!(\"read %u bytes total\", total_bytes_read as uint);\n+            stream.close();\n         }\n     }\n }", "previous_filename": "src/libcore/rt/uv/uvio.rs"}, {"sha": "0d298bde6b50875d04d565f66af17f2670707805", "filename": "src/libstd/rt/uvll.rs", "status": "renamed", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuvll.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -33,15 +33,6 @@ use libc::{size_t, c_int, c_uint, c_void, c_char, uintptr_t};\n use libc::{malloc, free};\n use prelude::*;\n \n-pub static UNKNOWN: c_int = -1;\n-pub static OK: c_int = 0;\n-pub static EOF: c_int = 1;\n-pub static EADDRINFO: c_int = 2;\n-pub static EACCES: c_int = 3;\n-pub static ECONNREFUSED: c_int = 12;\n-pub static ECONNRESET: c_int = 13;\n-pub static EPIPE: c_int = 36;\n-\n pub struct uv_err_t {\n     code: c_int,\n     sys_errno_: c_int\n@@ -132,14 +123,14 @@ pub unsafe fn free_req(v: *c_void) {\n #[test]\n fn handle_sanity_check() {\n     unsafe {\n-        assert_eq!(UV_HANDLE_TYPE_MAX as uint, rust_uv_handle_type_max());\n+        assert!(UV_HANDLE_TYPE_MAX as uint == rust_uv_handle_type_max());\n     }\n }\n \n #[test]\n fn request_sanity_check() {\n     unsafe {\n-        assert_eq!(UV_REQ_TYPE_MAX as uint, rust_uv_req_type_max());\n+        assert!(UV_REQ_TYPE_MAX as uint == rust_uv_req_type_max());\n     }\n }\n \n@@ -269,9 +260,9 @@ pub unsafe fn buf_init(input: *u8, len: uint) -> uv_buf_t {\n pub unsafe fn timer_init(loop_ptr: *c_void, timer_ptr: *uv_timer_t) -> c_int {\n     return rust_uv_timer_init(loop_ptr, timer_ptr);\n }\n-pub unsafe fn timer_start(timer_ptr: *uv_timer_t, cb: *u8, timeout: u64,\n-                          repeat: u64) -> c_int {\n-    return rust_uv_timer_start(timer_ptr, cb, timeout, repeat);\n+pub unsafe fn timer_start(timer_ptr: *uv_timer_t, cb: *u8, timeout: uint,\n+                          repeat: uint) -> c_int {\n+    return rust_uv_timer_start(timer_ptr, cb, timeout as c_uint, repeat as c_uint);\n }\n pub unsafe fn timer_stop(timer_ptr: *uv_timer_t) -> c_int {\n     return rust_uv_timer_stop(timer_ptr);\n@@ -432,8 +423,8 @@ extern {\n                           timer_handle: *uv_timer_t) -> c_int;\n     fn rust_uv_timer_start(timer_handle: *uv_timer_t,\n                            cb: *u8,\n-                           timeout: libc::uint64_t,\n-                           repeat: libc::uint64_t) -> c_int;\n+                           timeout: c_uint,\n+                           repeat: c_uint) -> c_int;\n     fn rust_uv_timer_stop(handle: *uv_timer_t) -> c_int;\n \n     fn rust_uv_malloc_buf_base_of(sug_size: size_t) -> *u8;", "previous_filename": "src/libcore/rt/uv/uvll.rs"}, {"sha": "e9eb663392b2453bd3cdca5e179c774579bd9567", "filename": "src/libstd/rt/work_queue.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frt%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fwork_queue.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/rt/work_queue.rs"}, {"sha": "02757ab489903c6abdb9b3326c1c15226149f09f", "filename": "src/libstd/run.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/run.rs"}, {"sha": "784656718d0d228ef48e8cc1216619b9219a072b", "filename": "src/libstd/stackwalk.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstackwalk.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/stackwalk.rs"}, {"sha": "53169554ec5e7a414dae1a65060132ef21be1c20", "filename": "src/libstd/str.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/str.rs"}, {"sha": "4e239c4c82c7dc38a1a6b49fa3490ad771c57dac", "filename": "src/libstd/str/ascii.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr%2Fascii.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/str/ascii.rs"}, {"sha": "137070ce20211a4a4e372ad4aff6efe66c590a6b", "filename": "src/libstd/sys.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/sys.rs"}, {"sha": "2f97eaacf4be2ab0bc1246d711d5a51a6e55b6bd", "filename": "src/libstd/task/local_data_priv.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Flocal_data_priv.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/task/local_data_priv.rs"}, {"sha": "490a69248eecb074812f72d11ce3ca59eff83706", "filename": "src/libstd/task/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/task/mod.rs"}, {"sha": "760812252bc73761a77ea3d4b9753503615b7f8b", "filename": "src/libstd/task/rt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftask%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftask%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Frt.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/task/rt.rs"}, {"sha": "81e5af5caab111a756fd06dd7b774b0cdb777512", "filename": "src/libstd/task/spawn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/task/spawn.rs"}, {"sha": "5b66e94c1b4561b658b29ee6e9cb1a137793d875", "filename": "src/libstd/to_bytes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/to_bytes.rs"}, {"sha": "1469471b7cef3551dd9920f2904f821eb2c10737", "filename": "src/libstd/to_str.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/to_str.rs"}, {"sha": "13b892e700e1babf558226e1209dee8da97527a3", "filename": "src/libstd/trie.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/trie.rs"}, {"sha": "639df89a3776f8532dfeb16a217d7ac1951eec27", "filename": "src/libstd/tuple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/tuple.rs"}, {"sha": "d6e2c5eee6aca8400bd324f4f1cf25e271f97864", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 2613, "deletions": 217, "changes": 2830, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa"}, {"sha": "d214b509dfbf9d2810d7f34906902b0f97f801dc", "filename": "src/libstd/unstable/at_exit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fat_exit.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/at_exit.rs"}, {"sha": "3b35c2fb8047fa3b0c476a484c92773d4edcf23c", "filename": "src/libstd/unstable/exchange_alloc.rs", "status": "renamed", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fexchange_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fexchange_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fexchange_alloc.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use sys::{TypeDesc, size_of};\n-use libc::{c_void, size_t, uintptr_t};\n+use libc::{c_void, size_t};\n use c_malloc = libc::malloc;\n use c_free = libc::free;\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n@@ -34,7 +34,7 @@ pub unsafe fn malloc(td: *TypeDesc, size: uint) -> *c_void {\n     box.header.prev = null();\n     box.header.next = null();\n \n-    let exchange_count = &mut *exchange_count_ptr();\n+    let exchange_count = &mut *rust_get_exchange_count_ptr();\n     atomic_xadd(exchange_count, 1);\n \n     return transmute(box);\n@@ -52,7 +52,7 @@ pub unsafe fn malloc_raw(size: uint) -> *c_void {\n }\n \n pub unsafe fn free(ptr: *c_void) {\n-    let exchange_count = &mut *exchange_count_ptr();\n+    let exchange_count = &mut *rust_get_exchange_count_ptr();\n     atomic_xsub(exchange_count, 1);\n \n     assert!(ptr.is_not_null());\n@@ -77,11 +77,7 @@ fn align_to(size: uint, align: uint) -> uint {\n     (size + align - 1) & !(align - 1)\n }\n \n-fn exchange_count_ptr() -> *mut int {\n-    // XXX: Need mutable globals\n-    unsafe { transmute(&rust_exchange_count) }\n-}\n-\n extern {\n-    static rust_exchange_count: uintptr_t;\n+    #[rust_stack]\n+    fn rust_get_exchange_count_ptr() -> *mut int;\n }", "previous_filename": "src/libcore/rt/global_heap.rs"}, {"sha": "8da378fdc97ce95ce0016848d9deb0fe9a808cf4", "filename": "src/libstd/unstable/extfmt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fextfmt.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/extfmt.rs"}, {"sha": "5001fb421cd86e33199de205fe80df5e7cffa467", "filename": "src/libstd/unstable/finally.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/finally.rs"}, {"sha": "96549a83a8cf397620d7896deb03c0a504072dac", "filename": "src/libstd/unstable/global.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fglobal.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/global.rs"}, {"sha": "d476822819eb9e0744aeeef58f2ba8d51883f1fe", "filename": "src/libstd/unstable/intrinsics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/intrinsics.rs"}, {"sha": "350b18d4541698a48b704340249faad1fa3d057b", "filename": "src/libstd/unstable/lang.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/lang.rs"}, {"sha": "9681a3f36fcee4924491f178f040371f68b11f73", "filename": "src/libstd/unstable/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/mod.rs"}, {"sha": "a05f6e8af5a64108f8872d11dc88cc003744936c", "filename": "src/libstd/unstable/simd.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsimd.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/simd.rs"}, {"sha": "734368c70c4a0342426a29a0228f043d5c2ea438", "filename": "src/libstd/unstable/sync.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/sync.rs"}, {"sha": "d5c5230cef81929df455c0ec1bd5673b8d2b39f1", "filename": "src/libstd/unstable/weak_task.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fweak_task.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/unstable/weak_task.rs"}, {"sha": "e2b91594d123cb00474b15efa59105262e1cd2a3", "filename": "src/libstd/util.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/util.rs"}, {"sha": "65f8dab25a5aaaa4556cee1545583f169890a493", "filename": "src/libstd/vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c820d4123c754522b0655e9e74f692c55685bfa/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "previous_filename": "src/libcore/vec.rs"}, {"sha": "218ab86721eefd7b7e97fa6d9f95a80a1fa8686c", "filename": "src/libuv", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuv?ref=0c820d4123c754522b0655e9e74f692c55685bfa", "patch": "@@ -1 +1 @@\n-Subproject commit dfae9c3e958dc086d9c0ab068cd76d196c95a433\n+Subproject commit 218ab86721eefd7b7e97fa6d9f95a80a1fa8686c"}]}