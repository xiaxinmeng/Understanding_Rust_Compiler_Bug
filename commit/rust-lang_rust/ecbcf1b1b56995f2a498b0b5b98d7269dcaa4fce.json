{"sha": "ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYmNmMWIxYjU2OTk1ZjJhNDk4YjBiNWI5OGQ3MjY5ZGNhYTRmY2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-09T12:24:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-09T12:26:07Z"}, "message": "address comments from mw", "tree": {"sha": "ba38f929722b4c44d8b3d55c50f1ec549bd690d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba38f929722b4c44d8b3d55c50f1ec549bd690d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce", "html_url": "https://github.com/rust-lang/rust/commit/ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a47032dda473e6d8fa9da969bf157c48fba6dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/02a47032dda473e6d8fa9da969bf157c48fba6dd", "html_url": "https://github.com/rust-lang/rust/commit/02a47032dda473e6d8fa9da969bf157c48fba6dd"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "7a4802b876d907246ca2464c4e67e62402029fe9", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce", "patch": "@@ -113,10 +113,28 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // TODO -- this could be more efficient if we integrated the `DefIdDirectory` and\n     // pred set more deeply\n \n-    // Compute the set of Hir nodes whose data has changed or which have been removed.\n+    // Compute the set of Hir nodes whose data has changed or which\n+    // have been removed.  These are \"raw\" source nodes, which means\n+    // that they still use the original `DefPathIndex` values from the\n+    // encoding, rather than having been retraced to a `DefId`. The\n+    // reason for this is that this way we can include nodes that have\n+    // been removed (which no longer have a `DefId` in the current\n+    // compilation).\n     let dirty_raw_source_nodes = dirty_nodes(tcx, &serialized_dep_graph.hashes, &retraced);\n \n-    // Create a (maybe smaller) list of\n+    // Create a list of (raw-source-node ->\n+    // retracted-target-node) edges. In the process of retracing the\n+    // target nodes, we may discover some of them def-paths no longer exist,\n+    // in which case there is no need to mark the corresopnding nodes as dirty\n+    // (they are just not present). So this list may be smaller than the original.\n+    //\n+    // Note though that in the common case the target nodes are\n+    // `DepNode::WorkProduct` instances, and those don't have a\n+    // def-id, so they will never be considered to not exist. Instead,\n+    // we do a secondary hashing step (later, in trans) when we know\n+    // the set of symbols that go into a work-product: if any symbols\n+    // have been removed (or added) the hash will be different and\n+    // we'll ignore the work-product then.\n     let retraced_edges: Vec<_> =\n         serialized_dep_graph.edges.iter()\n                                   .filter_map(|&(ref raw_source_node, ref raw_target_node)| {\n@@ -125,7 +143,8 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   })\n                                   .collect();\n \n-    // Compute which work-products have changed.\n+    // Compute which work-products have an input that has changed or\n+    // been removed. Put the dirty ones into a set.\n     let mut dirty_target_nodes = FnvHashSet();\n     for &(raw_source_node, ref target_node) in &retraced_edges {\n         if dirty_raw_source_nodes.contains(raw_source_node) {"}, {"sha": "f296cd3172fb0262ea82d7a877a423d012c9260a", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=ecbcf1b1b56995f2a498b0b5b98d7269dcaa4fce", "patch": "@@ -110,7 +110,12 @@ pub fn encode_dep_graph(preds: &Predecessors,\n     let mut edges = vec![];\n     for (&target, sources) in &preds.inputs {\n         match *target {\n-            DepNode::MetaData(_) => continue, // see encode_metadata_hashes instead\n+            DepNode::MetaData(ref def_id) => {\n+                // Metadata *targets* are always local metadata nodes. We handle\n+                // those in `encode_metadata_hashes`, which comes later.\n+                assert!(def_id.is_local());\n+                continue;\n+            }\n             _ => (),\n         }\n         let target = builder.map(target);\n@@ -186,7 +191,7 @@ pub fn encode_metadata_hashes(tcx: TyCtxt,\n         // Create a vector containing a pair of (source-id, hash).\n         // The source-id is stored as a `DepNode<u64>`, where the u64\n         // is the det. hash of the def-path. This is convenient\n-        // because we can sort this to get a table ordering across\n+        // because we can sort this to get a stable ordering across\n         // compilations, even if the def-ids themselves have changed.\n         let mut hashes: Vec<(DepNode<u64>, u64)> = sources.iter()\n             .map(|dep_node| {"}]}