{"sha": "029515d9164bddc0928c159d375aadfc7f256b28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOTUxNWQ5MTY0YmRkYzA5MjhjMTU5ZDM3NWFhZGZjN2YyNTZiMjg=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2020-04-06T07:24:44Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2020-05-07T13:19:27Z"}, "message": "Add core::future::{pending,ready}", "tree": {"sha": "0d0cb5232b9a69a2736429f360bf1ad062b30780", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d0cb5232b9a69a2736429f360bf1ad062b30780"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/029515d9164bddc0928c159d375aadfc7f256b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/029515d9164bddc0928c159d375aadfc7f256b28", "html_url": "https://github.com/rust-lang/rust/commit/029515d9164bddc0928c159d375aadfc7f256b28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/029515d9164bddc0928c159d375aadfc7f256b28/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af89eb5e5beda2c1de0c0c031694892a51e8db07", "url": "https://api.github.com/repos/rust-lang/rust/commits/af89eb5e5beda2c1de0c0c031694892a51e8db07", "html_url": "https://github.com/rust-lang/rust/commit/af89eb5e5beda2c1de0c0c031694892a51e8db07"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "d339e18d7c343b3b6fa306dfaa2b6f805fdde4fe", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/029515d9164bddc0928c159d375aadfc7f256b28/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029515d9164bddc0928c159d375aadfc7f256b28/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=029515d9164bddc0928c159d375aadfc7f256b28", "patch": "@@ -11,9 +11,17 @@ use crate::{\n };\n \n mod future;\n+mod pending;\n+mod ready;\n+\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::future::Future;\n \n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+pub use pending::{pending, Pending};\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+pub use ready::{ready, Ready};\n+\n /// This type is needed because:\n ///\n /// a) Generators cannot implement `for<'a, 'b> Generator<&'a mut Context<'b>>`, so we need to pass"}, {"sha": "74887b68aa0fadf95eaa9b7504f2ffdd3ae51c5c", "filename": "src/libcore/future/pending.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/029515d9164bddc0928c159d375aadfc7f256b28/src%2Flibcore%2Ffuture%2Fpending.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029515d9164bddc0928c159d375aadfc7f256b28/src%2Flibcore%2Ffuture%2Fpending.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fpending.rs?ref=029515d9164bddc0928c159d375aadfc7f256b28", "patch": "@@ -0,0 +1,57 @@\n+use crate::future::Future;\n+use crate::marker;\n+use crate::pin::Pin;\n+use crate::task::{Context, Poll};\n+\n+/// Creates a future which never resolves, representing a computation that never\n+/// finishes.\n+///\n+/// This `struct` is created by the [`pending`] function. See its\n+/// documentation for more.\n+///\n+/// [`pending`]: fn.pending.html\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+#[derive(Debug)]\n+#[must_use = \"futures do nothing unless you `.await` or poll them\"]\n+pub struct Pending<T> {\n+    _data: marker::PhantomData<T>,\n+}\n+\n+/// Creates a future which never resolves, representing a computation that never\n+/// finishes.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(future_readiness_fns)]\n+/// use core::future;\n+///\n+/// # async fn run() {\n+/// let future = future::pending();\n+/// let () = future.await;\n+/// unreachable!();\n+/// # }\n+/// ```\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+pub fn pending<T>() -> Pending<T> {\n+    Pending { _data: marker::PhantomData }\n+}\n+\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+impl<T> Future for Pending<T> {\n+    type Output = T;\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<T> {\n+        Poll::Pending\n+    }\n+}\n+\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+impl<T> Unpin for Pending<T> {}\n+\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+impl<T> Clone for Pending<T> {\n+    fn clone(&self) -> Self {\n+        pending()\n+    }\n+}"}, {"sha": "31b39d7fb6cd5c8f7b0096c83855e9b6e0c695d0", "filename": "src/libcore/future/ready.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/029515d9164bddc0928c159d375aadfc7f256b28/src%2Flibcore%2Ffuture%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029515d9164bddc0928c159d375aadfc7f256b28/src%2Flibcore%2Ffuture%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fready.rs?ref=029515d9164bddc0928c159d375aadfc7f256b28", "patch": "@@ -0,0 +1,45 @@\n+use crate::future::Future;\n+use crate::pin::Pin;\n+use crate::task::{Context, Poll};\n+\n+/// Creates a future that is immediately ready with a value.\n+///\n+/// This `struct` is created by the [`ready`] function. See its\n+/// documentation for more.\n+///\n+/// [`ready`]: fn.ready.html\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+#[derive(Debug, Clone)]\n+#[must_use = \"futures do nothing unless you `.await` or poll them\"]\n+pub struct Ready<T>(Option<T>);\n+\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+impl<T> Unpin for Ready<T> {}\n+\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+impl<T> Future for Ready<T> {\n+    type Output = T;\n+\n+    #[inline]\n+    fn poll(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<T> {\n+        Poll::Ready(self.0.take().expect(\"Ready polled after completion\"))\n+    }\n+}\n+\n+/// Creates a future that is immediately ready with a value.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(future_readiness_fns)]\n+/// use core::future;\n+///\n+/// # async fn run() {\n+/// let a = future::ready(1);\n+/// assert_eq!(a.await, 1);\n+/// # }\n+/// ```\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+pub fn ready<T>(t: T) -> Ready<T> {\n+    Ready(Some(t))\n+}"}]}