{"sha": "5ad3488f29bbccfcee074bb0f3971acec97cfc45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZDM0ODhmMjliYmNjZmNlZTA3NGJiMGYzOTcxYWNlYzk3Y2ZjNDU=", "commit": {"author": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2015-02-05T14:24:17Z"}, "committer": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2015-02-05T15:37:39Z"}, "message": "unbreak tree for openbsd after #21787\n\n- add `_SC_GETPW_R_SIZE_MAX` constant\n- declare `struct passwd`\n- convert `load_self` to `current_exe`\n\nNote: OpenBSD don't provide system function to return a valuable Path\nfor `env::current_exe`. The implementation is currently based on the\nvalue of `argv[0]`, which couldn't be used when executable is called via\nPATH.", "tree": {"sha": "9d7616c97351f2cd6f43440a7f4be13a828c87ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d7616c97351f2cd6f43440a7f4be13a828c87ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ad3488f29bbccfcee074bb0f3971acec97cfc45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad3488f29bbccfcee074bb0f3971acec97cfc45", "html_url": "https://github.com/rust-lang/rust/commit/5ad3488f29bbccfcee074bb0f3971acec97cfc45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ad3488f29bbccfcee074bb0f3971acec97cfc45/comments", "author": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "html_url": "https://github.com/rust-lang/rust/commit/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "22194145252ee6ac1641a1dc8e789dfedbaaf799", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ad3488f29bbccfcee074bb0f3971acec97cfc45/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad3488f29bbccfcee074bb0f3971acec97cfc45/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=5ad3488f29bbccfcee074bb0f3971acec97cfc45", "patch": "@@ -74,6 +74,8 @@ pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 70;\n #[cfg(any(target_os = \"macos\",\n           target_os = \"freebsd\"))]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 71;\n+#[cfg(target_os = \"openbsd\")]\n+pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 101;\n #[cfg(target_os = \"android\")]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 0x0048;\n \n@@ -91,7 +93,8 @@ pub struct passwd {\n \n #[repr(C)]\n #[cfg(any(target_os = \"macos\",\n-          target_os = \"freebsd\"))]\n+          target_os = \"freebsd\",\n+          target_os = \"openbsd\"))]\n pub struct passwd {\n     pub pw_name: *mut libc::c_char,\n     pub pw_passwd: *mut libc::c_char,"}, {"sha": "be52c7dc69290bc61c5998bef345fd4acde9d5a5", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ad3488f29bbccfcee074bb0f3971acec97cfc45/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad3488f29bbccfcee074bb0f3971acec97cfc45/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=5ad3488f29bbccfcee074bb0f3971acec97cfc45", "patch": "@@ -197,23 +197,23 @@ pub fn current_exe() -> IoResult<Path> {\n }\n \n #[cfg(target_os = \"openbsd\")]\n-pub fn load_self() -> Option<Vec<u8>> {\n+pub fn current_exe() -> IoResult<Path> {\n     use sync::{StaticMutex, MUTEX_INIT};\n \n     static LOCK: StaticMutex = MUTEX_INIT;\n \n     extern {\n-        fn rust_load_self() -> *const c_char;\n+        fn rust_current_exe() -> *const c_char;\n     }\n \n     let _guard = LOCK.lock();\n \n     unsafe {\n-        let v = rust_load_self();\n+        let v = rust_current_exe();\n         if v.is_null() {\n-            None\n+            Err(IoError::last_error())\n         } else {\n-            Some(ffi::c_str_to_bytes(&v).to_vec())\n+            Ok(Path::new(ffi::c_str_to_bytes(&v).to_vec()))\n         }\n     }\n }\n@@ -333,7 +333,8 @@ pub fn args() -> Args {\n #[cfg(any(target_os = \"linux\",\n           target_os = \"android\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n pub fn args() -> Args {\n     use rt;\n     let bytes = rt::args::clone().unwrap_or(Vec::new());"}, {"sha": "255fbdcbfcf5e78e1d771221f26e2bd8bd668a0c", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ad3488f29bbccfcee074bb0f3971acec97cfc45/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/5ad3488f29bbccfcee074bb0f3971acec97cfc45/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=5ad3488f29bbccfcee074bb0f3971acec97cfc45", "patch": "@@ -204,7 +204,7 @@ int *__dfly_error(void) { return __error(); }\n #include <sys/sysctl.h>\n #include <limits.h>\n \n-const char * rust_load_self() {\n+const char * rust_current_exe() {\n     static char *self = NULL;\n \n     if (self == NULL) {"}]}