{"sha": "5d28853efe7ae11a77f5f7601a216e8ca36d6234", "node_id": "C_kwDOAAsO6NoAKDVkMjg4NTNlZmU3YWUxMWE3N2Y1Zjc2MDFhMjE2ZThjYTM2ZDYyMzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-23T07:35:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-23T07:35:35Z"}, "message": "Rollup merge of #109462 - compiler-errors:alias-relate, r=BoxyUwU,lcnr\n\nMake alias-eq have a relation direction (and rename it to alias-relate)\n\nEmitting an \"alias-eq\" is too strict in some situations, since we don't always want strict equality between a projection and rigid ty. Adds a relation direction.\n\n* I could probably just reuse this [`RelationDir`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/combine/enum.RelationDir.html) -- happy to uplift that struct into middle and use that instead, but I didn't feel compelled to... \ud83e\udd37\n* Some of the matching in `compute_alias_relate_goal` is a bit verbose -- I guess I could simplify it by using [`At::relate`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/at/struct.At.html#method.relate) and mapping the relation-dir to a variance.\n* Alternatively, I coulld simplify things by making more helper functions on `EvalCtxt` (e.g. `EvalCtxt::relate_with_direction(T, T)` that also does the nested goal registration). No preference.\n\nr? ```@lcnr``` cc ```@BoxyUwU``` though boxy can claim it if she wants\nNOTE: first commit is all the changes, the second is just renaming stuff", "tree": {"sha": "39057754d38d0831647d115d0d81ea461e6f9551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39057754d38d0831647d115d0d81ea461e6f9551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d28853efe7ae11a77f5f7601a216e8ca36d6234", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHAFHCRBK7hj4Ov3rIwAAoYYIAEdhaSeceet3RjDh8QC5NPk1\nv4dSFnaf2ECxdt6X3xTCG/rQUrcBkY9zJVRf/+np5QAWEEO6+EWKokjf2ZQm2IJ3\nhhOe5czQnAVT/DV/q0k10BIMXSeK4svHXQ6f6lwsdKElBnHFiT0lCMTJwbcWtWTY\nK/ycffQ46h3j0R1/T0HjTMvy3rktAbA490pY6lj9AowcyWrK3a6DsaEulj8d4OX1\nJKC08xyArr349SAqcsfVzuw/FSCIEkNYIcefJp2OCHdG/PKVensLMoRT3QJa7yeP\nX0RYYBMm4gLPneNZ3nnsnzZuoj4TQvMbxBF1if2thnctqFool6KL4TVopaBExME=\n=Dphd\n-----END PGP SIGNATURE-----\n", "payload": "tree 39057754d38d0831647d115d0d81ea461e6f9551\nparent a26ac4cb94f0cd1afb2c05439f757cb3ba465b83\nparent 244cdaa457d80b3e1ef90795a48833f948ac0db9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679556935 +0100\ncommitter GitHub <noreply@github.com> 1679556935 +0100\n\nRollup merge of #109462 - compiler-errors:alias-relate, r=BoxyUwU,lcnr\n\nMake alias-eq have a relation direction (and rename it to alias-relate)\n\nEmitting an \"alias-eq\" is too strict in some situations, since we don't always want strict equality between a projection and rigid ty. Adds a relation direction.\n\n* I could probably just reuse this [`RelationDir`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/combine/enum.RelationDir.html) -- happy to uplift that struct into middle and use that instead, but I didn't feel compelled to... \ud83e\udd37\n* Some of the matching in `compute_alias_relate_goal` is a bit verbose -- I guess I could simplify it by using [`At::relate`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/at/struct.At.html#method.relate) and mapping the relation-dir to a variance.\n* Alternatively, I coulld simplify things by making more helper functions on `EvalCtxt` (e.g. `EvalCtxt::relate_with_direction(T, T)` that also does the nested goal registration). No preference.\n\nr? ```@lcnr``` cc ```@BoxyUwU``` though boxy can claim it if she wants\nNOTE: first commit is all the changes, the second is just renaming stuff\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d28853efe7ae11a77f5f7601a216e8ca36d6234", "html_url": "https://github.com/rust-lang/rust/commit/5d28853efe7ae11a77f5f7601a216e8ca36d6234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d28853efe7ae11a77f5f7601a216e8ca36d6234/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a26ac4cb94f0cd1afb2c05439f757cb3ba465b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/a26ac4cb94f0cd1afb2c05439f757cb3ba465b83", "html_url": "https://github.com/rust-lang/rust/commit/a26ac4cb94f0cd1afb2c05439f757cb3ba465b83"}, {"sha": "244cdaa457d80b3e1ef90795a48833f948ac0db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/244cdaa457d80b3e1ef90795a48833f948ac0db9", "html_url": "https://github.com/rust-lang/rust/commit/244cdaa457d80b3e1ef90795a48833f948ac0db9"}], "stats": {"total": 359, "additions": 260, "deletions": 99}, "files": [{"sha": "703c845eafa28220f7607a0f5f5357bb8e75dd70", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -1335,7 +1335,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ty::Clause::RegionOutlives(_) | ty::Clause::ConstArgHasType(..) => bug!(),\n                 },\n                 ty::PredicateKind::WellFormed(_)\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(_, _, _)\n                 | ty::PredicateKind::Subtype(_)"}, {"sha": "7f1e4ccc9647b79de5f0dde67540ba25d40583d3", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -528,7 +528,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(_))\n         | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-        | ty::PredicateKind::AliasEq(..)\n+        | ty::PredicateKind::AliasRelate(..)\n         | ty::PredicateKind::WellFormed(_)\n         | ty::PredicateKind::Subtype(_)\n         | ty::PredicateKind::Coerce(_)"}, {"sha": "357deb07b8f31ef930c3d74f2c9a1214cfa0f998", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                     | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                     | ty::PredicateKind::WellFormed(..)\n-                    | ty::PredicateKind::AliasEq(..)\n+                    | ty::PredicateKind::AliasRelate(..)\n                     | ty::PredicateKind::ObjectSafe(..)\n                     | ty::PredicateKind::ClosureKind(..)\n                     | ty::PredicateKind::Subtype(..)"}, {"sha": "3def97bca4789c95020cad0d09656461c777be2e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -666,7 +666,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n                 | ty::PredicateKind::WellFormed(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 // N.B., this predicate is created by breaking down a"}, {"sha": "0eff5c956ef642e06d1dfc9ff5d234c5fa778365", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -838,7 +838,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n             }\n         });"}, {"sha": "88a28e26005d62f54ecb2120364ab94b96cbae75", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             (_, ty::Alias(AliasKind::Projection, _)) | (ty::Alias(AliasKind::Projection, _), _)\n                 if self.tcx.trait_solver_next() =>\n             {\n-                relation.register_type_equate_obligation(a, b);\n+                relation.register_type_relate_obligation(a, b);\n                 Ok(a)\n             }\n \n@@ -842,23 +842,25 @@ pub trait ObligationEmittingRelation<'tcx>: TypeRelation<'tcx> {\n         let (a, b) = if self.a_is_expected() { (a, b) } else { (b, a) };\n \n         self.register_predicates([ty::Binder::dummy(if self.tcx().trait_solver_next() {\n-            ty::PredicateKind::AliasEq(a.into(), b.into())\n+            ty::PredicateKind::AliasRelate(a.into(), b.into(), ty::AliasRelationDirection::Equate)\n         } else {\n             ty::PredicateKind::ConstEquate(a, b)\n         })]);\n     }\n \n-    /// Register an obligation that both types must be equal to each other.\n-    ///\n-    /// If they aren't equal then the relation doesn't hold.\n-    fn register_type_equate_obligation(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) {\n-        let (a, b) = if self.a_is_expected() { (a, b) } else { (b, a) };\n-\n-        self.register_predicates([ty::Binder::dummy(ty::PredicateKind::AliasEq(\n+    /// Register an obligation that both types must be related to each other according to\n+    /// the [`ty::AliasRelationDirection`] given by [`ObligationEmittingRelation::alias_relate_direction`]\n+    fn register_type_relate_obligation(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) {\n+        self.register_predicates([ty::Binder::dummy(ty::PredicateKind::AliasRelate(\n             a.into(),\n             b.into(),\n+            self.alias_relate_direction(),\n         ))]);\n     }\n+\n+    /// Relation direction emitted for `AliasRelate` predicates, corresponding to the direction\n+    /// of the relation.\n+    fn alias_relate_direction(&self) -> ty::AliasRelationDirection;\n }\n \n fn int_unification_error<'tcx>("}, {"sha": "38002357cde35cbe948c221d95792c4935228e56", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -210,4 +210,8 @@ impl<'tcx> ObligationEmittingRelation<'tcx> for Equate<'_, '_, 'tcx> {\n     fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n         self.fields.register_obligations(obligations);\n     }\n+\n+    fn alias_relate_direction(&self) -> ty::AliasRelationDirection {\n+        ty::AliasRelationDirection::Equate\n+    }\n }"}, {"sha": "6395c4d4b20781f86ec5dd01dfe1d3f559a83a74", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -155,4 +155,9 @@ impl<'tcx> ObligationEmittingRelation<'tcx> for Glb<'_, '_, 'tcx> {\n     fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n         self.fields.register_obligations(obligations);\n     }\n+\n+    fn alias_relate_direction(&self) -> ty::AliasRelationDirection {\n+        // FIXME(deferred_projection_equality): This isn't right, I think?\n+        ty::AliasRelationDirection::Equate\n+    }\n }"}, {"sha": "98cbd4c561c52d0b6d6703c170ff2bd7db914ffc", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -155,4 +155,9 @@ impl<'tcx> ObligationEmittingRelation<'tcx> for Lub<'_, '_, 'tcx> {\n     fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n         self.fields.register_obligations(obligations)\n     }\n+\n+    fn alias_relate_direction(&self) -> ty::AliasRelationDirection {\n+        // FIXME(deferred_projection_equality): This isn't right, I think?\n+        ty::AliasRelationDirection::Equate\n+    }\n }"}, {"sha": "f5d20cb7ebfeba81e2e531031eecf20b1ab2bec6", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -711,6 +711,34 @@ where\n     fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n         self.delegate.register_obligations(obligations);\n     }\n+\n+    fn alias_relate_direction(&self) -> ty::AliasRelationDirection {\n+        unreachable!(\"manually overridden to handle ty::Variance::Contravariant ambient variance\")\n+    }\n+\n+    fn register_type_relate_obligation(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) {\n+        self.register_predicates([ty::Binder::dummy(match self.ambient_variance {\n+            ty::Variance::Covariant => ty::PredicateKind::AliasRelate(\n+                a.into(),\n+                b.into(),\n+                ty::AliasRelationDirection::Subtype,\n+            ),\n+            // a :> b is b <: a\n+            ty::Variance::Contravariant => ty::PredicateKind::AliasRelate(\n+                b.into(),\n+                a.into(),\n+                ty::AliasRelationDirection::Subtype,\n+            ),\n+            ty::Variance::Invariant => ty::PredicateKind::AliasRelate(\n+                a.into(),\n+                b.into(),\n+                ty::AliasRelationDirection::Equate,\n+            ),\n+            // FIXME(deferred_projection_equality): Implement this when we trigger it.\n+            // Probably just need to do nothing here.\n+            ty::Variance::Bivariant => unreachable!(),\n+        })]);\n+    }\n }\n \n /// When we encounter a binder like `for<..> fn(..)`, we actually have"}, {"sha": "048dad3a48bc2a8c623bc893c095829957b2fe87", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -22,7 +22,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n             ty::PredicateKind::Clause(ty::Clause::Projection(..))\n             | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n             | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::WellFormed(..)"}, {"sha": "fa6529dfa93ec886216f9961857f28798105a9fb", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -26,7 +26,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             // completely change the normalization routine with the new solver.\n             //\n             // The new solver correctly handles projection equality so this hack\n-            // is not necessary. if re-enabled it should emit `PredicateKind::AliasEq`\n+            // is not necessary. if re-enabled it should emit `PredicateKind::AliasRelate`\n             // not `PredicateKind::Clause(Clause::Projection(..))` as in the new solver\n             // `Projection` is used as `normalizes-to` which will fail for `<T as Trait>::Assoc eq ?0`.\n             return projection_ty.to_ty(self.tcx);"}, {"sha": "fc73ca7606d238213c3edbc74b7dc4045c4ac9c4", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -236,4 +236,8 @@ impl<'tcx> ObligationEmittingRelation<'tcx> for Sub<'_, '_, 'tcx> {\n     fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n         self.fields.register_obligations(obligations);\n     }\n+\n+    fn alias_relate_direction(&self) -> ty::AliasRelationDirection {\n+        ty::AliasRelationDirection::Subtype\n+    }\n }"}, {"sha": "0d2faeba5fc0fe73021a29f9edc5ca59f308984f", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -293,7 +293,7 @@ impl<'tcx> Elaborator<'tcx> {\n                 // Nothing to elaborate\n             }\n             ty::PredicateKind::Ambiguous => {}\n-            ty::PredicateKind::AliasEq(..) => {\n+            ty::PredicateKind::AliasRelate(..) => {\n                 // No\n             }\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => {"}, {"sha": "f8dd8299312d857d8003c0b9947f31606de2602b", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -1601,7 +1601,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     // Ignore projections, as they can only be global\n                     // if the trait bound is global\n                     Clause(Clause::Projection(..)) |\n-                    AliasEq(..) |\n+                    AliasRelate(..) |\n                     // Ignore bounds that a user can't type\n                     WellFormed(..) |\n                     ObjectSafe(..) |"}, {"sha": "5a6ee1238112cb14dc2207cf463a1d1bbca256f5", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -288,7 +288,7 @@ impl FlagComputation {\n                 self.add_ty(ty);\n             }\n             ty::PredicateKind::Ambiguous => {}\n-            ty::PredicateKind::AliasEq(t1, t2) => {\n+            ty::PredicateKind::AliasRelate(t1, t2, _) => {\n                 self.add_term(t1);\n                 self.add_term(t2);\n             }"}, {"sha": "b17749c1ebafa87c3702f98aba04443f2c28a41c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -543,7 +543,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Clause(Clause::TypeOutlives(_))\n             | PredicateKind::Clause(Clause::Projection(_))\n             | PredicateKind::Clause(Clause::ConstArgHasType(..))\n-            | PredicateKind::AliasEq(..)\n+            | PredicateKind::AliasRelate(..)\n             | PredicateKind::ObjectSafe(_)\n             | PredicateKind::ClosureKind(_, _, _)\n             | PredicateKind::Subtype(_)\n@@ -640,7 +640,23 @@ pub enum PredicateKind<'tcx> {\n     /// This predicate requires two terms to be equal to eachother.\n     ///\n     /// Only used for new solver\n-    AliasEq(Term<'tcx>, Term<'tcx>),\n+    AliasRelate(Term<'tcx>, Term<'tcx>, AliasRelationDirection),\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n+#[derive(HashStable, Debug)]\n+pub enum AliasRelationDirection {\n+    Equate,\n+    Subtype,\n+}\n+\n+impl std::fmt::Display for AliasRelationDirection {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            AliasRelationDirection::Equate => write!(f, \" == \"),\n+            AliasRelationDirection::Subtype => write!(f, \" <: \"),\n+        }\n+    }\n }\n \n /// The crate outlives map is computed during typeck and contains the\n@@ -976,11 +992,11 @@ impl<'tcx> Term<'tcx> {\n         }\n     }\n \n-    /// This function returns `None` for `AliasKind::Opaque`.\n+    /// This function returns the inner `AliasTy` if this term is a projection.\n     ///\n     /// FIXME: rename `AliasTy` to `AliasTerm` and make sure we correctly\n     /// deal with constants.\n-    pub fn to_alias_term_no_opaque(&self, tcx: TyCtxt<'tcx>) -> Option<AliasTy<'tcx>> {\n+    pub fn to_projection_term(&self, tcx: TyCtxt<'tcx>) -> Option<AliasTy<'tcx>> {\n         match self.unpack() {\n             TermKind::Ty(ty) => match ty.kind() {\n                 ty::Alias(kind, alias_ty) => match kind {\n@@ -1206,7 +1222,7 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::Clause(Clause::Trait(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Projection(..))\n             | PredicateKind::Clause(Clause::ConstArgHasType(..))\n-            | PredicateKind::AliasEq(..)\n+            | PredicateKind::AliasRelate(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n@@ -1227,7 +1243,7 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::Clause(Clause::Projection(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Trait(..))\n             | PredicateKind::Clause(Clause::ConstArgHasType(..))\n-            | PredicateKind::AliasEq(..)\n+            | PredicateKind::AliasRelate(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n@@ -1249,7 +1265,7 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::Clause(Clause::Trait(..))\n             | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::Clause(Clause::Projection(..))\n-            | PredicateKind::AliasEq(..)\n+            | PredicateKind::AliasRelate(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))"}, {"sha": "e9f8f2e58659274bb2fb7add6ee341d1e3970a2c", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -2847,7 +2847,7 @@ define_print_and_forward_display! {\n                 p!(\"the type `\", print(ty), \"` is found in the environment\")\n             }\n             ty::PredicateKind::Ambiguous => p!(\"ambiguous\"),\n-            ty::PredicateKind::AliasEq(t1, t2) => p!(print(t1), \" == \", print(t2)),\n+            ty::PredicateKind::AliasRelate(t1, t2, dir) => p!(print(t1), write(\" {} \", dir), print(t2)),\n         }\n     }\n "}, {"sha": "c6bb8146795869ef95866a097556ea79766fae97", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -177,7 +177,9 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n                 write!(f, \"TypeWellFormedFromEnv({:?})\", ty)\n             }\n             ty::PredicateKind::Ambiguous => write!(f, \"Ambiguous\"),\n-            ty::PredicateKind::AliasEq(t1, t2) => write!(f, \"AliasEq({t1:?}, {t2:?})\"),\n+            ty::PredicateKind::AliasRelate(t1, t2, dir) => {\n+                write!(f, \"AliasRelate({t1:?}, {dir:?}, {t2:?})\")\n+            }\n         }\n     }\n }\n@@ -250,6 +252,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     crate::ty::AssocItem,\n     crate::ty::AssocKind,\n     crate::ty::AliasKind,\n+    crate::ty::AliasRelationDirection,\n     crate::ty::Placeholder<crate::ty::BoundRegionKind>,\n     crate::ty::Placeholder<crate::ty::BoundTyKind>,\n     crate::ty::ClosureKind,"}, {"sha": "3be0160d56173d40a6e8878a44ec161220334fb6", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -180,7 +180,7 @@ where\n             | ty::PredicateKind::ConstEquate(_, _)\n             | ty::PredicateKind::TypeWellFormedFromEnv(_)\n             | ty::PredicateKind::Ambiguous\n-            | ty::PredicateKind::AliasEq(_, _) => bug!(\"unexpected predicate: {:?}\", predicate),\n+            | ty::PredicateKind::AliasRelate(..) => bug!(\"unexpected predicate: {:?}\", predicate),\n         }\n     }\n "}, {"sha": "75b304cce4e0908ff09e3129b7e0820fccba2fb1", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -223,9 +223,11 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n-                ty::PredicateKind::AliasEq(lhs, rhs) => {\n-                    self.compute_alias_eq_goal(Goal { param_env, predicate: (lhs, rhs) })\n-                }\n+                ty::PredicateKind::AliasRelate(lhs, rhs, direction) => self\n+                    .compute_alias_relate_goal(Goal {\n+                        param_env,\n+                        predicate: (lhs, rhs, direction),\n+                    }),\n             }\n         } else {\n             let kind = self.infcx.instantiate_binder_with_placeholders(kind);\n@@ -457,6 +459,25 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             })\n     }\n \n+    #[instrument(level = \"debug\", skip(self, param_env), ret)]\n+    pub(super) fn sub<T: ToTrace<'tcx>>(\n+        &mut self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        sub: T,\n+        sup: T,\n+    ) -> Result<(), NoSolution> {\n+        self.infcx\n+            .at(&ObligationCause::dummy(), param_env)\n+            .sub(DefineOpaqueTypes::No, sub, sup)\n+            .map(|InferOk { value: (), obligations }| {\n+                self.add_goals(obligations.into_iter().map(|o| o.into()));\n+            })\n+            .map_err(|e| {\n+                debug!(?e, \"failed to subtype\");\n+                NoSolution\n+            })\n+    }\n+\n     /// Equates two values returning the nested goals without adding them\n     /// to the nested goals of the `EvalCtxt`.\n     ///"}, {"sha": "01f171762ab67e33698f30190842458db7b05897", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                         MismatchedProjectionTypes { err: TypeError::Mismatch },\n                                     )\n                                 }\n-                                ty::PredicateKind::AliasEq(_, _) => {\n+                                ty::PredicateKind::AliasRelate(_, _, _) => {\n                                     FulfillmentErrorCode::CodeProjectionError(\n                                         MismatchedProjectionTypes { err: TypeError::Mismatch },\n                                     )"}, {"sha": "4c87d36ca0dc1da97bd628c6faa9bcaf10be17e2", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 77, "deletions": 43, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -17,7 +17,6 @@\n \n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::canonical::{Canonical, CanonicalVarValues};\n-use rustc_infer::infer::{DefineOpaqueTypes, InferOk};\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::traits::solve::{\n     CanonicalGoal, CanonicalResponse, Certainty, ExternalConstraints, ExternalConstraintsData,\n@@ -101,11 +100,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             // That won't actually reflect in the query response, so it seems moot.\n             self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS)\n         } else {\n-            let InferOk { value: (), obligations } = self\n-                .infcx\n-                .at(&ObligationCause::dummy(), goal.param_env)\n-                .sub(DefineOpaqueTypes::No, goal.predicate.a, goal.predicate.b)?;\n-            self.add_goals(obligations.into_iter().map(|pred| pred.into()));\n+            self.sub(goal.param_env, goal.predicate.a, goal.predicate.b)?;\n             self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         }\n     }\n@@ -156,55 +151,94 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(level = \"debug\", skip(self), ret)]\n-    fn compute_alias_eq_goal(\n+    fn compute_alias_relate_goal(\n         &mut self,\n-        goal: Goal<'tcx, (ty::Term<'tcx>, ty::Term<'tcx>)>,\n+        goal: Goal<'tcx, (ty::Term<'tcx>, ty::Term<'tcx>, ty::AliasRelationDirection)>,\n     ) -> QueryResult<'tcx> {\n         let tcx = self.tcx();\n+        // We may need to invert the alias relation direction if dealing an alias on the RHS.\n+        enum Invert {\n+            No,\n+            Yes,\n+        }\n+        let evaluate_normalizes_to =\n+            |ecx: &mut EvalCtxt<'_, 'tcx>, alias, other, direction, invert| {\n+                debug!(\"evaluate_normalizes_to(alias={:?}, other={:?})\", alias, other);\n+                let result = ecx.probe(|ecx| {\n+                    let other = match direction {\n+                        // This is purely an optimization.\n+                        ty::AliasRelationDirection::Equate => other,\n+\n+                        ty::AliasRelationDirection::Subtype => {\n+                            let fresh = ecx.next_term_infer_of_kind(other);\n+                            let (sub, sup) = match invert {\n+                                Invert::No => (fresh, other),\n+                                Invert::Yes => (other, fresh),\n+                            };\n+                            ecx.sub(goal.param_env, sub, sup)?;\n+                            fresh\n+                        }\n+                    };\n+                    ecx.add_goal(goal.with(\n+                        tcx,\n+                        ty::Binder::dummy(ty::ProjectionPredicate {\n+                            projection_ty: alias,\n+                            term: other,\n+                        }),\n+                    ));\n+                    ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+                });\n+                debug!(\"evaluate_normalizes_to({alias}, {other}, {direction:?}) -> {result:?}\");\n+                result\n+            };\n \n-        let evaluate_normalizes_to = |ecx: &mut EvalCtxt<'_, 'tcx>, alias, other| {\n-            debug!(\"evaluate_normalizes_to(alias={:?}, other={:?})\", alias, other);\n-            let r = ecx.probe(|ecx| {\n-                ecx.add_goal(goal.with(\n-                    tcx,\n-                    ty::Binder::dummy(ty::ProjectionPredicate {\n-                        projection_ty: alias,\n-                        term: other,\n-                    }),\n-                ));\n-                ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n-            });\n-            debug!(\"evaluate_normalizes_to(..) -> {:?}\", r);\n-            r\n-        };\n+        let (lhs, rhs, direction) = goal.predicate;\n \n-        if goal.predicate.0.is_infer() || goal.predicate.1.is_infer() {\n+        if lhs.is_infer() || rhs.is_infer() {\n             bug!(\n-                \"`AliasEq` goal with an infer var on lhs or rhs which should have been instantiated\"\n+                \"`AliasRelate` goal with an infer var on lhs or rhs which should have been instantiated\"\n             );\n         }\n \n-        match (\n-            goal.predicate.0.to_alias_term_no_opaque(tcx),\n-            goal.predicate.1.to_alias_term_no_opaque(tcx),\n-        ) {\n-            (None, None) => bug!(\"`AliasEq` goal without an alias on either lhs or rhs\"),\n-            (Some(alias), None) => evaluate_normalizes_to(self, alias, goal.predicate.1),\n-            (None, Some(alias)) => evaluate_normalizes_to(self, alias, goal.predicate.0),\n-            (Some(alias_lhs), Some(alias_rhs)) => {\n-                debug!(\"compute_alias_eq_goal: both sides are aliases\");\n+        match (lhs.to_projection_term(tcx), rhs.to_projection_term(tcx)) {\n+            (None, None) => bug!(\"`AliasRelate` goal without an alias on either lhs or rhs\"),\n \n-                let mut candidates = Vec::with_capacity(3);\n+            // RHS is not a projection, only way this is true is if LHS normalizes-to RHS\n+            (Some(alias_lhs), None) => {\n+                evaluate_normalizes_to(self, alias_lhs, rhs, direction, Invert::No)\n+            }\n \n-                // Evaluate all 3 potential candidates for the alias' being equal\n-                candidates.push(evaluate_normalizes_to(self, alias_lhs, goal.predicate.1));\n-                candidates.push(evaluate_normalizes_to(self, alias_rhs, goal.predicate.0));\n-                candidates.push(self.probe(|ecx| {\n-                    debug!(\"compute_alias_eq_goal: alias defids are equal, equating substs\");\n-                    ecx.eq(goal.param_env, alias_lhs, alias_rhs)?;\n-                    ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n-                }));\n+            // LHS is not a projection, only way this is true is if RHS normalizes-to LHS\n+            (None, Some(alias_rhs)) => {\n+                evaluate_normalizes_to(self, alias_rhs, lhs, direction, Invert::Yes)\n+            }\n \n+            (Some(alias_lhs), Some(alias_rhs)) => {\n+                debug!(\"compute_alias_relate_goal: both sides are aliases\");\n+\n+                let candidates = vec![\n+                    // LHS normalizes-to RHS\n+                    evaluate_normalizes_to(self, alias_lhs, rhs, direction, Invert::No),\n+                    // RHS normalizes-to RHS\n+                    evaluate_normalizes_to(self, alias_rhs, lhs, direction, Invert::Yes),\n+                    // Relate via substs\n+                    self.probe(|ecx| {\n+                        debug!(\n+                            \"compute_alias_relate_goal: alias defids are equal, equating substs\"\n+                        );\n+\n+                        match direction {\n+                            ty::AliasRelationDirection::Equate => {\n+                                ecx.eq(goal.param_env, alias_lhs, alias_rhs)?;\n+                            }\n+                            ty::AliasRelationDirection::Subtype => {\n+                                ecx.sub(goal.param_env, alias_lhs, alias_rhs)?;\n+                            }\n+                        }\n+\n+                        ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+                    }),\n+                ];\n                 debug!(?candidates);\n \n                 self.try_merge_responses(candidates.into_iter())"}, {"sha": "6b3a59b1ed545f4e5926530c8cdd68387b0ae9f5", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -832,7 +832,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 // the `ParamEnv`.\n                 ty::PredicateKind::WellFormed(..)\n                 | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)"}, {"sha": "13607b9079a75d120a712ca7da44a1a40b5158d7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -92,6 +92,11 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n }\n \n impl<'tcx> ObligationEmittingRelation<'tcx> for CollectAllMismatches<'_, 'tcx> {\n+    fn alias_relate_direction(&self) -> ty::AliasRelationDirection {\n+        // FIXME(deferred_projection_equality): We really should get rid of this relation.\n+        ty::AliasRelationDirection::Equate\n+    }\n+\n     fn register_obligations(&mut self, _obligations: PredicateObligations<'tcx>) {\n         // FIXME(deferred_projection_equality)\n     }"}, {"sha": "617d53b609dbcd4bf81644a1c42abf07ab45f00b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -1276,9 +1276,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         \"TypeWellFormedFromEnv predicate should only exist in the environment\"\n                     ),\n \n-                    ty::PredicateKind::AliasEq(..) => span_bug!(\n+                    ty::PredicateKind::AliasRelate(..) => span_bug!(\n                         span,\n-                        \"AliasEq predicate should never be the predicate cause of a SelectionError\"\n+                        \"AliasRelate predicate should never be the predicate cause of a SelectionError\"\n                     ),\n \n                     ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {"}, {"sha": "07e31e87bfb4646bea05120ab4403b5603d67f27", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -361,8 +361,8 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n-                ty::PredicateKind::AliasEq(..) => {\n-                    bug!(\"AliasEq is only used for new solver\")\n+                ty::PredicateKind::AliasRelate(..) => {\n+                    bug!(\"AliasRelate is only used for new solver\")\n                 }\n             },\n             Some(pred) => match pred {\n@@ -630,8 +630,8 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n-                ty::PredicateKind::AliasEq(..) => {\n-                    bug!(\"AliasEq is only used for new solver\")\n+                ty::PredicateKind::AliasRelate(..) => {\n+                    bug!(\"AliasRelate is only used for new solver\")\n                 }\n                 ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n                     match self.selcx.infcx.at(&obligation.cause, obligation.param_env).eq("}, {"sha": "5d2af5ff33c8fbf292f4d5897bbcd8b7cfa11e3d", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -335,7 +335,7 @@ fn predicate_references_self<'tcx>(\n             has_self_ty(&ty.into()).then_some(sp)\n         }\n \n-        ty::PredicateKind::AliasEq(..) => bug!(\"`AliasEq` not allowed as assumption\"),\n+        ty::PredicateKind::AliasRelate(..) => bug!(\"`AliasRelate` not allowed as assumption\"),\n \n         ty::PredicateKind::WellFormed(..)\n         | ty::PredicateKind::ObjectSafe(..)\n@@ -395,7 +395,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => false,\n         }"}, {"sha": "bffefdf359ad5c407ed27da9de3230a27db90ab0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -977,8 +977,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for chalk\")\n                 }\n-                ty::PredicateKind::AliasEq(..) => {\n-                    bug!(\"AliasEq is only used for new solver\")\n+                ty::PredicateKind::AliasRelate(..) => {\n+                    bug!(\"AliasRelate is only used for new solver\")\n                 }\n                 ty::PredicateKind::Ambiguous => Ok(EvaluatedToAmbig),\n                 ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {"}, {"sha": "ec5bd982a3c987c2df50fa916cbb62bd98955f6c", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -191,8 +191,8 @@ pub fn predicate_obligations<'tcx>(\n         ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n             bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n         }\n-        ty::PredicateKind::AliasEq(..) => {\n-            bug!(\"We should only wf check where clauses and `AliasEq` is not a `Clause`\")\n+        ty::PredicateKind::AliasRelate(..) => {\n+            bug!(\"We should only wf check where clauses and `AliasRelate` is not a `Clause`\")\n         }\n     }\n \n@@ -936,7 +936,7 @@ pub(crate) fn required_region_bounds<'tcx>(\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n                 ty::PredicateKind::Clause(ty::Clause::TypeOutlives(ty::OutlivesPredicate(\n                     ref t,"}, {"sha": "0e9bccba8d4c56b727dad49edcce15fbb08e87f9", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -119,7 +119,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                 },\n                 ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n@@ -215,7 +215,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             // some of these in terms of chalk operations.\n             ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::Ambiguous\n@@ -652,7 +652,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::ObjectSafe(..)\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::Coerce(..)\n@@ -787,7 +787,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)"}, {"sha": "f5bba14d2fb9cb6b1f866ec87e8722be3680f61e", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -86,7 +86,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n             if obligation.predicate.has_non_region_infer() {\n                 match obligation.predicate.kind().skip_binder() {\n                     ty::PredicateKind::Clause(ty::Clause::Projection(..))\n-                    | ty::PredicateKind::AliasEq(..) => {\n+                    | ty::PredicateKind::AliasRelate(..) => {\n                         ocx.register_obligation(obligation.clone());\n                     }\n                     _ => {}\n@@ -110,7 +110,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => {}\n \n                 // We need to search through *all* WellFormed predicates"}, {"sha": "126a494f34fd6870773e704e97a5e357ecdcd91f", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -61,7 +61,7 @@ fn not_outlives_predicate(p: ty::Predicate<'_>) -> bool {\n         ty::PredicateKind::Clause(ty::Clause::Trait(..))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n         | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-        | ty::PredicateKind::AliasEq(..)\n+        | ty::PredicateKind::AliasRelate(..)\n         | ty::PredicateKind::WellFormed(..)\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)"}, {"sha": "c00fa5994bfce661a6ee669100206f745fb206b1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -324,7 +324,7 @@ pub(crate) fn clean_predicate<'tcx>(\n         ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n         ty::PredicateKind::Subtype(..)\n-        | ty::PredicateKind::AliasEq(..)\n+        | ty::PredicateKind::AliasRelate(..)\n         | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)"}, {"sha": "58f7742ab8764ff382dacf96a67b1858d673a3dc", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -37,7 +37,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n-                ty::PredicateKind::AliasEq(..) => panic!(\"alias eq predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::AliasRelate(..) => panic!(\"alias relate predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {predicate:#?}\"),"}, {"sha": "30c1981a92eceed582a7460fb904ec75ad431dbc", "filename": "tests/ui/traits/new-solver/alias-sub.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5d28853efe7ae11a77f5f7601a216e8ca36d6234/tests%2Fui%2Ftraits%2Fnew-solver%2Falias-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28853efe7ae11a77f5f7601a216e8ca36d6234/tests%2Fui%2Ftraits%2Fnew-solver%2Falias-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias-sub.rs?ref=5d28853efe7ae11a77f5f7601a216e8ca36d6234", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+trait Trait {\n+    type Assoc: Sized;\n+}\n+\n+impl Trait for &'static str {\n+    type Assoc = &'static str;\n+}\n+\n+// Wrapper is just here to get around stupid `Sized` obligations in mir typeck\n+struct Wrapper<T: ?Sized>(std::marker::PhantomData<T>);\n+fn mk<T: Trait>(x: T) -> Wrapper<<T as Trait>::Assoc> { todo!() }\n+\n+\n+trait IsStaticStr {}\n+impl IsStaticStr for (&'static str,) {}\n+fn define<T: IsStaticStr>(_: T) {}\n+\n+fn foo<'a, T: Trait>() {\n+    let y = Default::default();\n+\n+    // `<?0 as Trait>::Assoc <: &'a str`\n+    // In the old solver, this would *equate* the LHS and RHS.\n+    let _: Wrapper<&'a str> = mk(y);\n+\n+    // ... then later on, we constrain `?0 = &'static str`\n+    // but that should not mean that `'a = 'static`, because\n+    // we should use *sub* above.\n+    define((y,));\n+}\n+\n+fn main() {}"}]}