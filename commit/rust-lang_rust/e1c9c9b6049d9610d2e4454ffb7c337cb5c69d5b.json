{"sha": "e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYzljOWI2MDQ5ZDk2MTBkMmU0NDU0ZmZiN2MzMzdjYjVjNjlkNWI=", "commit": {"author": {"name": "ShuiRuTian", "email": "158983297@qq.com", "date": "2021-01-12T16:30:49Z"}, "committer": {"name": "ShuiRuTian", "email": "158983297@qq.com", "date": "2021-01-12T16:30:49Z"}, "message": "fix and add tests.", "tree": {"sha": "99b068327ab65e97cd7614c4a25c37dd25cd945f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99b068327ab65e97cd7614c4a25c37dd25cd945f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b", "html_url": "https://github.com/rust-lang/rust/commit/e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b/comments", "author": {"login": "ShuiRuTian", "id": 28779355, "node_id": "MDQ6VXNlcjI4Nzc5MzU1", "avatar_url": "https://avatars.githubusercontent.com/u/28779355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShuiRuTian", "html_url": "https://github.com/ShuiRuTian", "followers_url": "https://api.github.com/users/ShuiRuTian/followers", "following_url": "https://api.github.com/users/ShuiRuTian/following{/other_user}", "gists_url": "https://api.github.com/users/ShuiRuTian/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShuiRuTian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShuiRuTian/subscriptions", "organizations_url": "https://api.github.com/users/ShuiRuTian/orgs", "repos_url": "https://api.github.com/users/ShuiRuTian/repos", "events_url": "https://api.github.com/users/ShuiRuTian/events{/privacy}", "received_events_url": "https://api.github.com/users/ShuiRuTian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ShuiRuTian", "id": 28779355, "node_id": "MDQ6VXNlcjI4Nzc5MzU1", "avatar_url": "https://avatars.githubusercontent.com/u/28779355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShuiRuTian", "html_url": "https://github.com/ShuiRuTian", "followers_url": "https://api.github.com/users/ShuiRuTian/followers", "following_url": "https://api.github.com/users/ShuiRuTian/following{/other_user}", "gists_url": "https://api.github.com/users/ShuiRuTian/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShuiRuTian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShuiRuTian/subscriptions", "organizations_url": "https://api.github.com/users/ShuiRuTian/orgs", "repos_url": "https://api.github.com/users/ShuiRuTian/repos", "events_url": "https://api.github.com/users/ShuiRuTian/events{/privacy}", "received_events_url": "https://api.github.com/users/ShuiRuTian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf3042f8818deb67636507241e853ffb6ab2daf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3042f8818deb67636507241e853ffb6ab2daf3", "html_url": "https://github.com/rust-lang/rust/commit/cf3042f8818deb67636507241e853ffb6ab2daf3"}], "stats": {"total": 150, "additions": 142, "deletions": 8}, "files": [{"sha": "bfd92159ca42d4cd556f48528c551a85db7c1f34", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b", "patch": "@@ -448,10 +448,9 @@ pub(crate) fn handle_will_rename_files(\n                         let old_name = from_path.file_stem()?.to_str()?;\n                         let new_name = to_path.file_stem()?.to_str()?;\n                         match (old_name, new_name) {\n-                            (\"mod\", \"mod\") => {\n-                                Some((snap.url_to_file_id(&from).ok()?, new_name.to_string()))\n-                            }\n-                            _ => None,\n+                            (\"mod\", _) => None,\n+                            (_, \"mod\") => None,\n+                            _ => Some((snap.url_to_file_id(&from).ok()?, new_name.to_string())),\n                         }\n                     }\n                 }"}, {"sha": "787239385a2d19b5a48651b9ce17d458f55bf2f2", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 139, "deletions": 4, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=e1c9c9b6049d9610d2e4454ffb7c337cb5c69d5b", "patch": "@@ -15,11 +15,14 @@ use std::{collections::HashMap, path::PathBuf, time::Instant};\n \n use lsp_types::{\n     notification::DidOpenTextDocument,\n-    request::{CodeActionRequest, Completion, Formatting, GotoTypeDefinition, HoverRequest},\n+    request::{\n+        CodeActionRequest, Completion, Formatting, GotoTypeDefinition, HoverRequest,\n+        WillRenameFiles,\n+    },\n     CodeActionContext, CodeActionParams, CompletionParams, DidOpenTextDocumentParams,\n-    DocumentFormattingParams, FormattingOptions, GotoDefinitionParams, HoverParams,\n-    PartialResultParams, Position, Range, TextDocumentItem, TextDocumentPositionParams,\n-    WorkDoneProgressParams,\n+    DocumentFormattingParams, FileRename, FormattingOptions, GotoDefinitionParams, HoverParams,\n+    PartialResultParams, Position, Range, RenameFilesParams, TextDocumentItem,\n+    TextDocumentPositionParams, WorkDoneProgressParams,\n };\n use rust_analyzer::lsp_ext::{OnEnter, Runnables, RunnablesParams};\n use serde_json::json;\n@@ -733,3 +736,135 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     let value = res.get(\"contents\").unwrap().get(\"value\").unwrap().to_string();\n     assert_eq!(value, r#\"\"\\n```rust\\nfoo::Bar\\n```\\n\\n```rust\\nfn bar()\\n```\"\"#)\n }\n+\n+#[test]\n+fn test_will_rename_files_same_level() {\n+    // if skip_slow_tests() {\n+    //     return;\n+    // }\n+    let tmp_dir = TestDir::new();\n+    let tmp_dir_path = tmp_dir.path().to_owned();\n+    let tmp_dir_path = tmp_dir_path.to_str().unwrap();\n+    let base_path = PathBuf::from(format!(\"file://{}\", tmp_dir_path));\n+\n+    let code = r#\"\n+//- /Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- /src/lib.rs\n+mod old_file;\n+mod from_mod;\n+mod to_mod;\n+mod old_folder;\n+fn main() {}\n+\n+//- /src/old_file.rs\n+\n+//- /src/old_folder/mod.rs\n+\n+//- /src/from_mod/mod.rs\n+\n+//- /src/to_mod/foo.rs\n+\n+\"#;\n+    let server =\n+        Project::with_fixture(&code).tmp_dir(tmp_dir).server().wait_until_workspace_is_loaded();\n+\n+    //rename same level file\n+    server.request::<WillRenameFiles>(\n+        RenameFilesParams {\n+            files: vec![FileRename {\n+                old_uri: base_path.join(\"src/old_file.rs\").to_str().unwrap().to_string(),\n+                new_uri: base_path.join(\"src/new_file.rs\").to_str().unwrap().to_string(),\n+            }],\n+        },\n+        json!({\n+          \"documentChanges\": [\n+            {\n+              \"textDocument\": {\n+                \"uri\": format!(\"file://{}/src/lib.rs\", tmp_dir_path),\n+                \"version\": null\n+              },\n+              \"edits\": [\n+                {\n+                  \"range\": {\n+                    \"start\": {\n+                      \"line\": 0,\n+                      \"character\": 4\n+                    },\n+                    \"end\": {\n+                      \"line\": 0,\n+                      \"character\": 12\n+                    }\n+                  },\n+                  \"newText\": \"new_file\"\n+                }\n+              ]\n+            }\n+          ]\n+        }),\n+    );\n+\n+    //rename file from mod.rs to foo.rs\n+    server.request::<WillRenameFiles>(\n+        RenameFilesParams {\n+            files: vec![FileRename {\n+                old_uri: base_path.join(\"src/from_mod/mod.rs\").to_str().unwrap().to_string(),\n+                new_uri: base_path.join(\"src/from_mod/foo.rs\").to_str().unwrap().to_string(),\n+            }],\n+        },\n+        json!({\n+          \"documentChanges\": []\n+        }),\n+    );\n+\n+    //rename file from foo.rs to mod.rs\n+    server.request::<WillRenameFiles>(\n+        RenameFilesParams {\n+            files: vec![FileRename {\n+                old_uri: base_path.join(\"src/to_mod/foo.rs\").to_str().unwrap().to_string(),\n+                new_uri: base_path.join(\"src/to_mod/mod.rs\").to_str().unwrap().to_string(),\n+            }],\n+        },\n+        json!({\n+          \"documentChanges\": []\n+        }),\n+    );\n+\n+    //rename same level file\n+    server.request::<WillRenameFiles>(\n+        RenameFilesParams {\n+            files: vec![FileRename {\n+                old_uri: base_path.join(\"src/old_folder\").to_str().unwrap().to_string(),\n+                new_uri: base_path.join(\"src/new_folder\").to_str().unwrap().to_string(),\n+            }],\n+        },\n+        json!({\n+          \"documentChanges\": [\n+            {\n+              \"textDocument\": {\n+                \"uri\": format!(\"file://{}/src/lib.rs\", tmp_dir_path),\n+                \"version\": null\n+              },\n+              \"edits\": [\n+                {\n+                  \"range\": {\n+                    \"start\": {\n+                      \"line\": 3,\n+                      \"character\": 4\n+                    },\n+                    \"end\": {\n+                      \"line\": 3,\n+                      \"character\": 14\n+                    }\n+                  },\n+                  \"newText\": \"new_folder\"\n+                }\n+              ]\n+            }\n+          ]\n+        }),\n+    );\n+}"}]}