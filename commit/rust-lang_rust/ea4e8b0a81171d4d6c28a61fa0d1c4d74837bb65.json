{"sha": "ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNGU4YjBhODExNzFkNGQ2YzI4YTYxZmEwZDFjNGQ3NDgzN2JiNjU=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-03T22:41:07Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-12T06:26:57Z"}, "message": "Temporarily prefix catch block with do keyword", "tree": {"sha": "36847af56a1a93aab1bc9d472c44db14ab6bafe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36847af56a1a93aab1bc9d472c44db14ab6bafe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65", "html_url": "https://github.com/rust-lang/rust/commit/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d95c5437222fd63d7b12676bc7916dbeb720f131", "url": "https://api.github.com/repos/rust-lang/rust/commits/d95c5437222fd63d7b12676bc7916dbeb720f131", "html_url": "https://github.com/rust-lang/rust/commit/d95c5437222fd63d7b12676bc7916dbeb720f131"}], "stats": {"total": 89, "additions": 11, "deletions": 78}, "files": [{"sha": "252b4ec4660f320967fd32458fc83a5777f03336", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65", "patch": "@@ -602,12 +602,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn error_if_typename_is_catch(&mut self, ident: ast::Ident) {\n-        if ident.name == keywords::Catch.name() {\n-            self.span_err(self.span, \"cannot use `catch` as the name of a type\");\n-        }\n-    }\n-\n     /// Check if the next token is `tok`, and return `true` if so.\n     ///\n     /// This method will automatically add `tok` to `expected_tokens` if `tok` is not\n@@ -2280,6 +2274,7 @@ impl<'a> Parser<'a> {\n                         attrs);\n                 }\n                 if self.is_catch_expr() {\n+                    assert!(self.eat_keyword(keywords::Do));\n                     assert!(self.eat_keyword(keywords::Catch));\n                     let lo = self.prev_span.lo;\n                     return self.parse_catch_expr(lo, attrs);\n@@ -3103,7 +3098,7 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(span_lo, hi, ExprKind::Loop(body, opt_ident), attrs))\n     }\n \n-    /// Parse a `catch {...}` expression (`catch` token already eaten)\n+    /// Parse a `do catch {...}` expression (`do catch` token already eaten)\n     pub fn parse_catch_expr(&mut self, span_lo: BytePos, mut attrs: ThinVec<Attribute>)\n         -> PResult<'a, P<Expr>>\n     {\n@@ -3721,8 +3716,9 @@ impl<'a> Parser<'a> {\n     }\n \n     fn is_catch_expr(&mut self) -> bool {\n-        self.token.is_keyword(keywords::Catch) &&\n-        self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace)) &&\n+        self.token.is_keyword(keywords::Do) &&\n+        self.look_ahead(1, |t| t.is_keyword(keywords::Catch)) &&\n+        self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace)) &&\n \n         // prevent `while catch {} {}`, `if catch {} {} else {}`, etc.\n         !self.restrictions.contains(Restrictions::RESTRICTION_NO_STRUCT_LITERAL)\n@@ -4904,7 +4900,6 @@ impl<'a> Parser<'a> {\n     /// Parse struct Foo { ... }\n     fn parse_item_struct(&mut self) -> PResult<'a, ItemInfo> {\n         let class_name = self.parse_ident()?;\n-        self.error_if_typename_is_catch(class_name);\n \n         let mut generics = self.parse_generics()?;\n \n@@ -4955,7 +4950,6 @@ impl<'a> Parser<'a> {\n     /// Parse union Foo { ... }\n     fn parse_item_union(&mut self) -> PResult<'a, ItemInfo> {\n         let class_name = self.parse_ident()?;\n-        self.error_if_typename_is_catch(class_name);\n \n         let mut generics = self.parse_generics()?;\n \n@@ -5473,7 +5467,6 @@ impl<'a> Parser<'a> {\n             let struct_def;\n             let mut disr_expr = None;\n             let ident = self.parse_ident()?;\n-            self.error_if_typename_is_catch(ident);\n             if self.check(&token::OpenDelim(token::Brace)) {\n                 // Parse a struct variant.\n                 all_nullary = false;\n@@ -5515,7 +5508,6 @@ impl<'a> Parser<'a> {\n     /// Parse an \"enum\" declaration\n     fn parse_item_enum(&mut self) -> PResult<'a, ItemInfo> {\n         let id = self.parse_ident()?;\n-        self.error_if_typename_is_catch(id);\n         let mut generics = self.parse_generics()?;\n         generics.where_clause = self.parse_where_clause()?;\n         self.expect(&token::OpenDelim(token::Brace))?;"}, {"sha": "25601f2420e8a7d680d4f21c2861200f3e55ce3e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65", "patch": "@@ -86,6 +86,7 @@ fn ident_can_begin_expr(ident: ast::Ident) -> bool {\n     !ident_token.is_any_keyword() ||\n     ident_token.is_path_segment_keyword() ||\n     [\n+        keywords::Do.name(),\n         keywords::Box.name(),\n         keywords::Break.name(),\n         keywords::Continue.name(),"}, {"sha": "83753f398a3765cd7e3df0424a89cf97c7fae479", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65", "patch": "@@ -2280,7 +2280,7 @@ impl<'a> State<'a> {\n                 word(&mut self.s, \"?\")?\n             }\n             ast::ExprKind::Catch(ref blk) => {\n-                self.head(\"catch\")?;\n+                self.head(\"do catch\")?;\n                 space(&mut self.s)?;\n                 self.print_block_with_attrs(&blk, attrs)?\n             }"}, {"sha": "257cb802cc0f870a012e23ab9c7991e92d7f4753", "filename": "src/test/compile-fail/catch-empty-struct-name.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d95c5437222fd63d7b12676bc7916dbeb720f131/src%2Ftest%2Fcompile-fail%2Fcatch-empty-struct-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c5437222fd63d7b12676bc7916dbeb720f131/src%2Ftest%2Fcompile-fail%2Fcatch-empty-struct-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-empty-struct-name.rs?ref=d95c5437222fd63d7b12676bc7916dbeb720f131", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(non_camel_case_types)]\n-#![allow(dead_code)]\n-#![feature(catch_expr)]\n-\n-struct catch; //~ ERROR cannot use `catch` as the name of a type"}, {"sha": "7aa162750d189b28a568bdf9396db1823c24709f", "filename": "src/test/compile-fail/catch-enum-variant.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d95c5437222fd63d7b12676bc7916dbeb720f131/src%2Ftest%2Fcompile-fail%2Fcatch-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c5437222fd63d7b12676bc7916dbeb720f131/src%2Ftest%2Fcompile-fail%2Fcatch-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-enum-variant.rs?ref=d95c5437222fd63d7b12676bc7916dbeb720f131", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(non_camel_case_types)]\n-#![allow(dead_code)]\n-#![feature(catch_expr)]\n-\n-enum Enum {\n-    catch {} //~ ERROR cannot use `catch` as the name of a type\n-}"}, {"sha": "63661ccf607a0d260361cec5ab8a89c09dc58f03", "filename": "src/test/compile-fail/catch-struct-name.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d95c5437222fd63d7b12676bc7916dbeb720f131/src%2Ftest%2Fcompile-fail%2Fcatch-struct-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c5437222fd63d7b12676bc7916dbeb720f131/src%2Ftest%2Fcompile-fail%2Fcatch-struct-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-struct-name.rs?ref=d95c5437222fd63d7b12676bc7916dbeb720f131", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(non_camel_case_types)]\n-#![allow(dead_code)]\n-#![feature(catch_expr)]\n-\n-struct catch {} //~ ERROR cannot use `catch` as the name of a type\n\\ No newline at end of file"}, {"sha": "1a8866d85430d3d6b0f708cd643055eb7b9d6bd7", "filename": "src/test/compile-fail/catch-tuple-struct-name.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d95c5437222fd63d7b12676bc7916dbeb720f131/src%2Ftest%2Fcompile-fail%2Fcatch-tuple-struct-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95c5437222fd63d7b12676bc7916dbeb720f131/src%2Ftest%2Fcompile-fail%2Fcatch-tuple-struct-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-tuple-struct-name.rs?ref=d95c5437222fd63d7b12676bc7916dbeb720f131", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(non_camel_case_types)]\n-#![allow(dead_code)]\n-#![feature(catch_expr)]\n-\n-struct catch(); //~ ERROR cannot use `catch` as the name of a type"}, {"sha": "5568a5cf0aac267e8bfe79374206c997ccee4df1", "filename": "src/test/compile-fail/feature-gate-catch_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Ftest%2Fcompile-fail%2Ffeature-gate-catch_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Ftest%2Fcompile-fail%2Ffeature-gate-catch_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-catch_expr.rs?ref=ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let catch_result = catch { //~ ERROR `catch` expression is experimental\n+    let catch_result = do catch { //~ ERROR `catch` expression is experimental\n         let x = 5;\n         x\n     };"}, {"sha": "a9b28a534a3483edd4b69a98f00bcfd0f309f6dc", "filename": "src/test/run-pass/catch-expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Ftest%2Frun-pass%2Fcatch-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65/src%2Ftest%2Frun-pass%2Fcatch-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcatch-expr.rs?ref=ea4e8b0a81171d4d6c28a61fa0d1c4d74837bb65", "patch": "@@ -10,8 +10,10 @@\n \n #![feature(catch_expr)]\n \n+struct catch {}\n+\n pub fn main() {\n-    let catch_result = catch {\n+    let catch_result = do catch {\n         let x = 5;\n         x\n     };"}]}