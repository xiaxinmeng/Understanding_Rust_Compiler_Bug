{"sha": "b58da533bc0fc6afd61eafaf3860b9934c8120b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1OGRhNTMzYmMwZmM2YWZkNjFlYWZhZjM4NjBiOTkzNGM4MTIwYjg=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-07T19:11:29Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-28T21:58:50Z"}, "message": "Add branchy `const` in pattern tests", "tree": {"sha": "5152c0f9e51a60139ecea1235ab726bc881cedaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5152c0f9e51a60139ecea1235ab726bc881cedaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b58da533bc0fc6afd61eafaf3860b9934c8120b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b58da533bc0fc6afd61eafaf3860b9934c8120b8", "html_url": "https://github.com/rust-lang/rust/commit/b58da533bc0fc6afd61eafaf3860b9934c8120b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b58da533bc0fc6afd61eafaf3860b9934c8120b8/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "135cfcb5cd563e8beec78d86d8afc40321c9c7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/135cfcb5cd563e8beec78d86d8afc40321c9c7da", "html_url": "https://github.com/rust-lang/rust/commit/135cfcb5cd563e8beec78d86d8afc40321c9c7da"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "81a2024a81b7bc5a07f75db8e17fc0f9e7d4988a", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-pass.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-pass.rs?ref=b58da533bc0fc6afd61eafaf3860b9934c8120b8", "patch": "@@ -0,0 +1,33 @@\n+// run-pass\n+\n+#![feature(const_if_match)]\n+#![warn(indirect_structural_match)]\n+\n+struct CustomEq;\n+\n+impl Eq for CustomEq {}\n+impl PartialEq for CustomEq {\n+    fn eq(&self, _: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+#[derive(PartialEq, Eq)]\n+enum Foo {\n+    Bar,\n+    Baz,\n+    Qux(CustomEq),\n+}\n+\n+const BAR_BAZ: Foo = if 42 == 42 {\n+    Foo::Bar\n+} else {\n+    Foo::Baz\n+};\n+\n+fn main() {\n+    match Foo::Qux(CustomEq) {\n+        BAR_BAZ => panic!(),\n+        _ => {}\n+    }\n+}"}, {"sha": "21c4de6fbb1f1d9f57bbb0393f92e84c0a715f6c", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-warn.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs?ref=b58da533bc0fc6afd61eafaf3860b9934c8120b8", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+#![feature(const_if_match)]\n+#![warn(indirect_structural_match)]\n+//~^ NOTE lint level is defined here\n+\n+struct CustomEq;\n+\n+impl Eq for CustomEq {}\n+impl PartialEq for CustomEq {\n+    fn eq(&self, _: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+#[derive(PartialEq, Eq)]\n+enum Foo {\n+    Bar,\n+    Baz,\n+    Qux(CustomEq),\n+}\n+\n+// We know that `BAR_BAZ` will always be `Foo::Bar` and thus eligible for structural matching, but\n+// dataflow will be more conservative.\n+const BAR_BAZ: Foo = if 42 == 42 {\n+    Foo::Bar\n+} else {\n+    Foo::Qux(CustomEq)\n+};\n+\n+fn main() {\n+    match Foo::Qux(CustomEq) {\n+        BAR_BAZ => panic!(),\n+        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN this was previously accepted\n+        //~| NOTE see issue #62411\n+        _ => {}\n+    }\n+}"}, {"sha": "06ec2a7fdd35c963e453cb22baa3f18f4fcb0789", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-warn.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr?ref=b58da533bc0fc6afd61eafaf3860b9934c8120b8", "patch": "@@ -0,0 +1,16 @@\n+warning: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/custom-eq-branch-warn.rs:33:9\n+   |\n+LL |         BAR_BAZ => panic!(),\n+   |         ^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/custom-eq-branch-warn.rs:4:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "28b3fbb952563fc5168999c067ebfd64eaf3a2e1", "filename": "src/test/ui/consts/const_in_pattern/no-eq-branch-fail.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.rs?ref=b58da533bc0fc6afd61eafaf3860b9934c8120b8", "patch": "@@ -0,0 +1,27 @@\n+#![feature(const_if_match)]\n+#![warn(indirect_structural_match)]\n+\n+struct NoEq;\n+\n+enum Foo {\n+    Bar,\n+    Baz,\n+    Qux(NoEq),\n+}\n+\n+// Even though any of these values can be compared structurally, we still disallow it in a pattern\n+// because `Foo` does not impl `PartialEq`.\n+const BAR_BAZ: Foo = if 42 == 42 {\n+    Foo::Baz\n+} else {\n+    Foo::Bar\n+};\n+\n+fn main() {\n+    match Foo::Qux(NoEq) {\n+        BAR_BAZ => panic!(),\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        _ => {}\n+    }\n+}"}, {"sha": "cb870ec7dbcf2738013ecd9d8886442811f676df", "filename": "src/test/ui/consts/const_in_pattern/no-eq-branch-fail.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58da533bc0fc6afd61eafaf3860b9934c8120b8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr?ref=b58da533bc0fc6afd61eafaf3860b9934c8120b8", "patch": "@@ -0,0 +1,14 @@\n+error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/no-eq-branch-fail.rs:22:9\n+   |\n+LL |         BAR_BAZ => panic!(),\n+   |         ^^^^^^^\n+\n+error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/no-eq-branch-fail.rs:22:9\n+   |\n+LL |         BAR_BAZ => panic!(),\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}