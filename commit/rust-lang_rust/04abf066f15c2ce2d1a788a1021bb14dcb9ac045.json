{"sha": "04abf066f15c2ce2d1a788a1021bb14dcb9ac045", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YWJmMDY2ZjE1YzJjZTJkMWE3ODhhMTAyMWJiMTRkY2I5YWMwNDU=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-24T23:46:51Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Move copying of the thread name to the client side.", "tree": {"sha": "a4af675edeedc6b417c387912b79f7bfa54f632e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4af675edeedc6b417c387912b79f7bfa54f632e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04abf066f15c2ce2d1a788a1021bb14dcb9ac045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04abf066f15c2ce2d1a788a1021bb14dcb9ac045", "html_url": "https://github.com/rust-lang/rust/commit/04abf066f15c2ce2d1a788a1021bb14dcb9ac045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04abf066f15c2ce2d1a788a1021bb14dcb9ac045/comments", "author": null, "committer": null, "parents": [{"sha": "feb188360ee5ff6ae4cdc8e6a20ec29f9cd385ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb188360ee5ff6ae4cdc8e6a20ec29f9cd385ba", "html_url": "https://github.com/rust-lang/rust/commit/feb188360ee5ff6ae4cdc8e6a20ec29f9cd385ba"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "67e833f222e4b806a336ea0591b1e3868094817f", "filename": "src/shims/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04abf066f15c2ce2d1a788a1021bb14dcb9ac045/src%2Fshims%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04abf066f15c2ce2d1a788a1021bb14dcb9ac045/src%2Fshims%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fthread.rs?ref=04abf066f15c2ce2d1a788a1021bb14dcb9ac045", "patch": "@@ -119,7 +119,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.set_active_thread_name(name)?;\n         } else if option == this.eval_libc_i32(\"PR_GET_NAME\")? {\n             let address = this.read_scalar(arg2)?.not_undef()?;\n-            let name = this.get_active_thread_name()?;\n+            let name = this.get_active_thread_name()?.to_vec();\n             this.memory.write_bytes(address, name)?;\n         } else {\n             throw_unsup_format!(\"Unsupported prctl option.\");"}, {"sha": "eb7af536cf119c34c60ad515c1ff313e2e8f5303", "filename": "src/thread.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/04abf066f15c2ce2d1a788a1021bb14dcb9ac045/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04abf066f15c2ce2d1a788a1021bb14dcb9ac045/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=04abf066f15c2ce2d1a788a1021bb14dcb9ac045", "patch": "@@ -254,11 +254,16 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         self.threads[thread_id].state = ThreadState::Enabled;\n     }\n \n-    /// Get the borrow of the currently active thread.\n+    /// Get a mutable borrow of the currently active thread.\n     fn active_thread_mut(&mut self) -> &mut Thread<'mir, 'tcx> {\n         &mut self.threads[self.active_thread]\n     }\n \n+    /// Get a shared borrow of the currently active thread.\n+    fn active_thread_ref(&self) -> &Thread<'mir, 'tcx> {\n+        &self.threads[self.active_thread]\n+    }\n+\n     /// Mark the thread as detached, which means that no other thread will try\n     /// to join it and the thread is responsible for cleaning up.\n     fn detach_thread(&mut self, id: ThreadId) -> InterpResult<'tcx> {\n@@ -304,9 +309,9 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     }\n \n     /// Get the name of the active thread.\n-    fn get_thread_name(&mut self) -> InterpResult<'tcx, Vec<u8>> {\n-        if let Some(ref thread_name) = self.active_thread_mut().thread_name {\n-            Ok(thread_name.clone())\n+    fn get_thread_name(&self) -> InterpResult<'tcx, &[u8]> {\n+        if let Some(ref thread_name) = self.active_thread_ref().thread_name {\n+            Ok(thread_name)\n         } else {\n             throw_ub_format!(\"thread {:?} has no name set\", self.active_thread)\n         }\n@@ -557,8 +562,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     #[inline]\n-    fn get_active_thread_name(&mut self) -> InterpResult<'tcx, Vec<u8>> {\n-        let this = self.eval_context_mut();\n+    fn get_active_thread_name<'c>(&'c self) -> InterpResult<'tcx, &'c [u8]>\n+    where\n+        'mir: 'c,\n+    {\n+        let this = self.eval_context_ref();\n         this.machine.threads.get_thread_name()\n     }\n "}]}