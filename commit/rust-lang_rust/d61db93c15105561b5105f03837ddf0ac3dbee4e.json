{"sha": "d61db93c15105561b5105f03837ddf0ac3dbee4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MWRiOTNjMTUxMDU1NjFiNTEwNWYwMzgzN2RkZjBhYzNkYmVlNGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-16T15:00:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-18T10:08:23Z"}, "message": "also hook dereferencing", "tree": {"sha": "2620efafb5027d06fc97a47a1dffc6b4a7f2ec30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2620efafb5027d06fc97a47a1dffc6b4a7f2ec30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d61db93c15105561b5105f03837ddf0ac3dbee4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d61db93c15105561b5105f03837ddf0ac3dbee4e", "html_url": "https://github.com/rust-lang/rust/commit/d61db93c15105561b5105f03837ddf0ac3dbee4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d61db93c15105561b5105f03837ddf0ac3dbee4e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f20b16934373228b7d2ecae6dda708ae820b055", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f20b16934373228b7d2ecae6dda708ae820b055", "html_url": "https://github.com/rust-lang/rust/commit/5f20b16934373228b7d2ecae6dda708ae820b055"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "66fd5edcc90bb2282011cfb93444d8b1a9f8b01e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d61db93c15105561b5105f03837ddf0ac3dbee4e/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61db93c15105561b5105f03837ddf0ac3dbee4e/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=d61db93c15105561b5105f03837ddf0ac3dbee4e", "patch": "@@ -19,22 +19,19 @@ use std::collections::hash_map::Entry;\n use rustc::hir::{self, def_id::DefId};\n use rustc::mir::interpret::ConstEvalErr;\n use rustc::mir;\n-use rustc::ty::{self, TyCtxt, Instance, query::TyCtxtAt};\n-use rustc::ty::layout::{self, LayoutOf, TyLayout};\n+use rustc::ty::{self, Ty, TyCtxt, Instance, query::TyCtxtAt};\n+use rustc::ty::layout::{self, Size, LayoutOf, TyLayout};\n use rustc::ty::subst::Subst;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashMap;\n \n use syntax::ast::Mutability;\n use syntax::source_map::{Span, DUMMY_SP};\n \n-use rustc::mir::interpret::{\n-    EvalResult, EvalError, EvalErrorKind, GlobalId,\n-    Scalar, Allocation, AllocId, ConstValue,\n-};\n use interpret::{self,\n-    PlaceTy, MPlaceTy, MemPlace, OpTy, Operand, Value,\n-    EvalContext, StackPopCleanup, MemoryKind,\n+    PlaceTy, MemPlace, OpTy, Operand, Value, Pointer, Scalar, ConstValue,\n+    EvalResult, EvalError, EvalErrorKind, GlobalId, EvalContext, StackPopCleanup,\n+    Allocation, AllocId, MemoryKind,\n     snapshot,\n };\n \n@@ -468,11 +465,22 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     #[inline(always)]\n     fn tag_reference(\n         _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n-        _place: MPlaceTy<'tcx, Self::PointerTag>,\n+        _ptr: Pointer<Self::PointerTag>,\n+        _pointee_ty: Ty<'tcx>,\n+        _pointee_size: Size,\n         _borrow_kind: mir::BorrowKind,\n     ) -> EvalResult<'tcx, Self::PointerTag> {\n         Ok(())\n     }\n+\n+    #[inline(always)]\n+    fn tag_dereference(\n+        _ecx: &EvalContext<'a, 'mir, 'tcx, Self>,\n+        _ptr: Pointer<Self::PointerTag>,\n+        _ptr_ty: Ty<'tcx>,\n+    ) -> EvalResult<'tcx, Self::PointerTag> {\n+        Ok(())\n+    }\n }\n \n /// Project to a field of a (variant of a) const"}, {"sha": "5dd33ec551d7f3293e6807640bae787d418c411e", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d61db93c15105561b5105f03837ddf0ac3dbee4e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61db93c15105561b5105f03837ddf0ac3dbee4e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=d61db93c15105561b5105f03837ddf0ac3dbee4e", "patch": "@@ -17,11 +17,11 @@ use std::hash::Hash;\n \n use rustc::hir::def_id::DefId;\n use rustc::mir;\n-use rustc::ty::{self, layout::{Size, TyLayout}, query::TyCtxtAt};\n+use rustc::ty::{self, Ty, layout::{Size, TyLayout}, query::TyCtxtAt};\n \n use super::{\n     Allocation, AllocId, EvalResult, Scalar,\n-    EvalContext, PlaceTy, OpTy, MPlaceTy, Pointer, MemoryKind,\n+    EvalContext, PlaceTy, OpTy, Pointer, MemoryKind,\n };\n \n /// Classifying memory accesses\n@@ -199,14 +199,23 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     }\n \n     /// Executed when evaluating the `&` operator: Creating a new reference.\n-    /// This has the chance to adjust the tag.  It is only ever called if the\n-    /// pointer in `place` is really a pointer, not another scalar.\n+    /// This has the chance to adjust the tag.\n     fn tag_reference(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n-        place: MPlaceTy<'tcx, Self::PointerTag>,\n+        ptr: Pointer<Self::PointerTag>,\n+        pointee_ty: Ty<'tcx>,\n+        pointee_size: Size,\n         borrow_kind: mir::BorrowKind,\n     ) -> EvalResult<'tcx, Self::PointerTag>;\n \n+    /// Executed when evaluating the `*` operator: Following a reference.\n+    /// This has the change to adjust the tag.\n+    fn tag_dereference(\n+        ecx: &EvalContext<'a, 'mir, 'tcx, Self>,\n+        ptr: Pointer<Self::PointerTag>,\n+        ptr_ty: Ty<'tcx>,\n+    ) -> EvalResult<'tcx, Self::PointerTag>;\n+\n     /// Execute a validation operation\n     #[inline]\n     fn validation_op("}, {"sha": "1b319b012978f5d693e86194cde10166ab67d71b", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d61db93c15105561b5105f03837ddf0ac3dbee4e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61db93c15105561b5105f03837ddf0ac3dbee4e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=d61db93c15105561b5105f03837ddf0ac3dbee4e", "patch": "@@ -264,14 +264,24 @@ where\n         &self,\n         val: ValTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+        let ptr = match val.to_scalar_ptr()? {\n+            Scalar::Ptr(ptr) => {\n+                // Machine might want to track the `*` operator\n+                let tag = M::tag_dereference(self, ptr, val.layout.ty)?;\n+                Scalar::Ptr(Pointer::new_with_tag(ptr.alloc_id, ptr.offset, tag))\n+            }\n+            scalar @ Scalar::Bits { .. } => scalar,\n+        };\n+\n         let pointee_type = val.layout.ty.builtin_deref(true).unwrap().ty;\n         let layout = self.layout_of(pointee_type)?;\n         let align = layout.align;\n+\n         let mplace = match *val {\n-            Value::Scalar(ptr) =>\n-                MemPlace { ptr: ptr.not_undef()?, align, meta: None },\n-            Value::ScalarPair(ptr, meta) =>\n-                MemPlace { ptr: ptr.not_undef()?, align, meta: Some(meta.not_undef()?) },\n+            Value::Scalar(_) =>\n+                MemPlace { ptr, align, meta: None },\n+            Value::ScalarPair(_, meta) =>\n+                MemPlace { ptr, align, meta: Some(meta.not_undef()?) },\n         };\n         Ok(MPlaceTy { mplace, layout })\n     }\n@@ -285,7 +295,10 @@ where\n     ) -> EvalResult<'tcx, Value<M::PointerTag>> {\n         let ptr = match place.ptr {\n             Scalar::Ptr(ptr) => {\n-                let tag = M::tag_reference(self, place, borrow_kind)?;\n+                // Machine might want to track the `&` operator\n+                let (size, _) = self.size_and_align_of_mplace(place)?\n+                    .expect(\"create_ref cannot determine size\");\n+                let tag = M::tag_reference(self, ptr, place.layout.ty, size, borrow_kind)?;\n                 Scalar::Ptr(Pointer::new_with_tag(ptr.alloc_id, ptr.offset, tag))\n             },\n             scalar @ Scalar::Bits { .. } => scalar,"}]}