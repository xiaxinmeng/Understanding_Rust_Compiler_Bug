{"sha": "1de196fef308c236aee8804c7b452ad5f5bbaf88", "node_id": "C_kwDOAAsO6NoAKDFkZTE5NmZlZjMwOGMyMzZhZWU4ODA0YzdiNDUyYWQ1ZjViYmFmODg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-10T23:41:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T21:01:34Z"}, "message": "HACK: Handle escaping bound vars from the canonical query", "tree": {"sha": "23aede873e7e4efb361bac0f14fdb15e592ed56a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23aede873e7e4efb361bac0f14fdb15e592ed56a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1de196fef308c236aee8804c7b452ad5f5bbaf88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1de196fef308c236aee8804c7b452ad5f5bbaf88", "html_url": "https://github.com/rust-lang/rust/commit/1de196fef308c236aee8804c7b452ad5f5bbaf88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1de196fef308c236aee8804c7b452ad5f5bbaf88/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a31d5ebe253827f971352b5cac43884a35c6aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a31d5ebe253827f971352b5cac43884a35c6aaa", "html_url": "https://github.com/rust-lang/rust/commit/5a31d5ebe253827f971352b5cac43884a35c6aaa"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "0d811d333bebcd1b7e541672424c566cd1614c71", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 88, "deletions": 2, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1de196fef308c236aee8804c7b452ad5f5bbaf88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de196fef308c236aee8804c7b452ad5f5bbaf88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1de196fef308c236aee8804c7b452ad5f5bbaf88", "patch": "@@ -7,8 +7,8 @@ use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::visit::ValidateBoundVars;\n use crate::ty::InferTy::*;\n use crate::ty::{\n-    self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeSuperVisitable, TypeVisitable,\n-    TypeVisitor,\n+    self, AdtDef, DefIdTree, Discr, FallibleTypeFolder, Term, Ty, TyCtxt, TypeFlags, TypeFoldable,\n+    TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use crate::ty::{List, ParamEnv};\n use hir::def::DefKind;\n@@ -1106,6 +1106,17 @@ impl<'tcx, T> Binder<'tcx, T> {\n         if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }\n     }\n \n+    pub fn no_bound_vars_ignoring_escaping(self, tcx: TyCtxt<'tcx>) -> Option<T>\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        if !self.0.has_escaping_bound_vars() {\n+            Some(self.skip_binder())\n+        } else {\n+            self.0.try_fold_with(&mut SkipBindersAt { index: ty::INNERMOST, tcx }).ok()\n+        }\n+    }\n+\n     /// Splits the contents into two things that share the same binder\n     /// level as the original, returning two distinct binders.\n     ///\n@@ -1135,6 +1146,81 @@ impl<'tcx, T: IntoIterator> Binder<'tcx, T> {\n     }\n }\n \n+struct SkipBindersAt<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    index: ty::DebruijnIndex,\n+}\n+\n+impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n+    type Error = ();\n+\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n+    where\n+        T: ty::TypeFoldable<'tcx>,\n+    {\n+        self.index.shift_in(1);\n+        let value = t.try_map_bound(|t| t.try_fold_with(self));\n+        self.index.shift_out(1);\n+        value\n+    }\n+\n+    fn try_fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n+        if !ty.has_escaping_bound_vars() {\n+            Ok(ty)\n+        } else if let ty::Bound(index, bv) = *ty.kind() {\n+            if index == self.index {\n+                Err(())\n+            } else {\n+                Ok(self.tcx().mk_ty(ty::Bound(index.shifted_out(1), bv)))\n+            }\n+        } else {\n+            ty.try_super_fold_with(self)\n+        }\n+    }\n+\n+    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {\n+        if !r.has_escaping_bound_vars() {\n+            Ok(r)\n+        } else if let ty::ReLateBound(index, bv) = r.kind() {\n+            if index == self.index {\n+                Err(())\n+            } else {\n+                Ok(self.tcx().mk_region(ty::ReLateBound(index.shifted_out(1), bv)))\n+            }\n+        } else {\n+            r.try_super_fold_with(self)\n+        }\n+    }\n+\n+    fn try_fold_const(&mut self, ct: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n+        if !ct.has_escaping_bound_vars() {\n+            Ok(ct)\n+        } else if let ty::ConstKind::Bound(index, bv) = ct.kind() {\n+            if index == self.index {\n+                Err(())\n+            } else {\n+                Ok(self.tcx().mk_const(\n+                    ty::ConstKind::Bound(index.shifted_out(1), bv),\n+                    ct.ty().try_fold_with(self)?,\n+                ))\n+            }\n+        } else {\n+            ct.try_super_fold_with(self)\n+        }\n+    }\n+\n+    fn try_fold_predicate(\n+        &mut self,\n+        p: ty::Predicate<'tcx>,\n+    ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n+        if !p.has_escaping_bound_vars() { Ok(p) } else { p.try_super_fold_with(self) }\n+    }\n+}\n+\n /// Represents the projection of an associated type.\n ///\n /// For a projection, this would be `<Ty as Trait<...>>::N`."}, {"sha": "042ba96b379e08ac271a80040fac474e621b233b", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1de196fef308c236aee8804c7b452ad5f5bbaf88/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de196fef308c236aee8804c7b452ad5f5bbaf88/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=1de196fef308c236aee8804c7b452ad5f5bbaf88", "patch": "@@ -213,7 +213,7 @@ impl<'tcx> EvalCtxt<'tcx> {\n         // recanonicalizing.\n         let Goal { param_env, predicate } = canonical_goal.value;\n \n-        if let Some(kind) = predicate.kind().no_bound_vars() {\n+        if let Some(kind) = predicate.kind().no_bound_vars_ignoring_escaping(self.tcx) {\n             match kind {\n                 ty::PredicateKind::Clause(ty::Clause::Trait(predicate)) => self.compute_trait_goal(\n                     canonical_goal.unchecked_rebind(Goal { param_env, predicate }),"}]}