{"sha": "b35ceeeec706e957ee46166e0a8b6d912ac215a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNWNlZWVlYzcwNmU5NTdlZTQ2MTY2ZTBhOGI2ZDkxMmFjMjE1YTM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-15T11:45:38Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-17T17:41:14Z"}, "message": "Simplify Expn creation.", "tree": {"sha": "3d21be024537e6cd4c8e662e93d0e324b34959f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d21be024537e6cd4c8e662e93d0e324b34959f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b35ceeeec706e957ee46166e0a8b6d912ac215a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b35ceeeec706e957ee46166e0a8b6d912ac215a3", "html_url": "https://github.com/rust-lang/rust/commit/b35ceeeec706e957ee46166e0a8b6d912ac215a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b35ceeeec706e957ee46166e0a8b6d912ac215a3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dddaa6d06801955dcbb7b1d1094932383ff36853", "url": "https://api.github.com/repos/rust-lang/rust/commits/dddaa6d06801955dcbb7b1d1094932383ff36853", "html_url": "https://github.com/rust-lang/rust/commit/dddaa6d06801955dcbb7b1d1094932383ff36853"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "cb3a08439d1290bc4940186d3759415a594e5dd3", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b35ceeeec706e957ee46166e0a8b6d912ac215a3/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ceeeec706e957ee46166e0a8b6d912ac215a3/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=b35ceeeec706e957ee46166e0a8b6d912ac215a3", "patch": "@@ -153,14 +153,25 @@ impl LocalExpnId {\n     }\n \n     pub fn fresh_empty() -> LocalExpnId {\n-        HygieneData::with(|data| data.fresh_expn(None))\n+        HygieneData::with(|data| {\n+            let expn_id = data.local_expn_data.push(None);\n+            let _eid = data.local_expn_hashes.push(ExpnHash(Fingerprint::ZERO));\n+            debug_assert_eq!(expn_id, _eid);\n+            expn_id\n+        })\n     }\n \n-    pub fn fresh(expn_data: ExpnData, ctx: impl HashStableContext) -> LocalExpnId {\n+    pub fn fresh(mut expn_data: ExpnData, ctx: impl HashStableContext) -> LocalExpnId {\n         debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);\n-        let expn_id = HygieneData::with(|data| data.fresh_expn(Some(expn_data)));\n-        update_disambiguator(expn_id, ctx);\n-        expn_id\n+        let expn_hash = update_disambiguator(&mut expn_data, ctx);\n+        HygieneData::with(|data| {\n+            let expn_id = data.local_expn_data.push(Some(expn_data));\n+            let _eid = data.local_expn_hashes.push(expn_hash);\n+            debug_assert_eq!(expn_id, _eid);\n+            let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, expn_id.to_expn_id());\n+            debug_assert!(_old_id.is_none());\n+            expn_id\n+        })\n     }\n \n     #[inline]\n@@ -179,14 +190,18 @@ impl LocalExpnId {\n     }\n \n     #[inline]\n-    pub fn set_expn_data(self, expn_data: ExpnData, ctx: impl HashStableContext) {\n+    pub fn set_expn_data(self, mut expn_data: ExpnData, ctx: impl HashStableContext) {\n         debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);\n+        let expn_hash = update_disambiguator(&mut expn_data, ctx);\n         HygieneData::with(|data| {\n             let old_expn_data = &mut data.local_expn_data[self];\n             assert!(old_expn_data.is_none(), \"expansion data is reset for an expansion ID\");\n             *old_expn_data = Some(expn_data);\n+            debug_assert_eq!(data.local_expn_hashes[self].0, Fingerprint::ZERO);\n+            data.local_expn_hashes[self] = expn_hash;\n+            let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, self.to_expn_id());\n+            debug_assert!(_old_id.is_none());\n         });\n-        update_disambiguator(self, ctx)\n     }\n \n     #[inline]\n@@ -335,13 +350,6 @@ impl HygieneData {\n         with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))\n     }\n \n-    fn fresh_expn(&mut self, expn_data: Option<ExpnData>) -> LocalExpnId {\n-        let expn_id = self.local_expn_data.push(expn_data);\n-        let _eid = self.local_expn_hashes.push(ExpnHash(Fingerprint::ZERO));\n-        debug_assert_eq!(expn_id, _eid);\n-        expn_id\n-    }\n-\n     #[inline]\n     fn local_expn_hash(&self, expn_id: LocalExpnId) -> ExpnHash {\n         self.local_expn_hashes[expn_id]\n@@ -1413,8 +1421,7 @@ impl<D: Decoder> Decodable<D> for SyntaxContext {\n /// `set_expn_data`). It is *not* called for foreign `ExpnId`s deserialized\n /// from another crate's metadata - since `ExpnHash` includes the stable crate id,\n /// collisions are only possible between `ExpnId`s within the same crate.\n-fn update_disambiguator(expn_id: LocalExpnId, mut ctx: impl HashStableContext) {\n-    let mut expn_data = expn_id.expn_data();\n+fn update_disambiguator(expn_data: &mut ExpnData, mut ctx: impl HashStableContext) -> ExpnHash {\n     // This disambiguator should not have been set yet.\n     assert_eq!(\n         expn_data.disambiguator, 0,\n@@ -1433,8 +1440,7 @@ fn update_disambiguator(expn_id: LocalExpnId, mut ctx: impl HashStableContext) {\n     });\n \n     if disambiguator != 0 {\n-        debug!(\"Set disambiguator for {:?} (hash {:?})\", expn_id, expn_hash);\n-        debug!(\"expn_data = {:?}\", expn_data);\n+        debug!(\"Set disambiguator for expn_data={:?} expn_hash={:?}\", expn_data, expn_hash);\n \n         expn_data.disambiguator = disambiguator;\n         expn_hash = expn_data.hash_expn(&mut ctx);\n@@ -1450,15 +1456,7 @@ fn update_disambiguator(expn_id: LocalExpnId, mut ctx: impl HashStableContext) {\n         });\n     }\n \n-    let expn_hash =\n-        ExpnHash::new(ctx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(), expn_hash);\n-    HygieneData::with(|data| {\n-        data.local_expn_data[expn_id].as_mut().unwrap().disambiguator = disambiguator;\n-        debug_assert_eq!(data.local_expn_hashes[expn_id].0, Fingerprint::ZERO);\n-        data.local_expn_hashes[expn_id] = expn_hash;\n-        let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, expn_id.to_expn_id());\n-        debug_assert!(_old_id.is_none());\n-    });\n+    ExpnHash::new(ctx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(), expn_hash)\n }\n \n impl<CTX: HashStableContext> HashStable<CTX> for SyntaxContext {"}]}