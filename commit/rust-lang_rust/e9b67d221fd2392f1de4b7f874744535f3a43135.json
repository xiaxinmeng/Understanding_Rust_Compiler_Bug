{"sha": "e9b67d221fd2392f1de4b7f874744535f3a43135", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YjY3ZDIyMWZkMjM5MmYxZGU0YjdmODc0NzQ0NTM1ZjNhNDMxMzU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-27T06:16:48Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-27T08:23:28Z"}, "message": "Rollup merge of #50231 - GuillaumeGomez:doc-aliases, r=QuietMisdreavus\n\nAdd more doc aliases\n\nr? @QuietMisdreavus", "tree": {"sha": "d98af60ad9e47dfa476903a3a1cfa88e838688ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98af60ad9e47dfa476903a3a1cfa88e838688ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9b67d221fd2392f1de4b7f874744535f3a43135", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlri3gAACgkQ/vbIBR0O\nATygvg//XNtQKDpW96SFXuq55qCO35tzIA+V4myfTZxB/SWol41g4Tg/c2++gbHk\n8j6FElnVj7iIe93nyiM2eKZy1P0wFpXwyiMeYNFtaXxs3Gh7oTehJx7IAN/ebB7n\nhrf9Gvg/JYoMaAKm98uYmBJP17//V07eiGWNTHzVyAhVIb4M/gv0M0viXTpWeFfC\nqzNqjDu0E5N+g3Jbm6b3WqWJilsh03q3VkixJtRj6p9B7ONXsjYlWHKtuNLuXYU4\nJDbE03/kEhca27qqfTHd5Jq19MBz5fvR9HBY8VDKeCaVpvAbPk18KW48f8Cbob2m\n6nKbDeesxbHRJ2movRHjM6ZIjQk4cXeAegGAAG6aw0+RNO8YVehkXVmbTkwa3bfn\no49rlBT3uhRI8BLmRiVDOVfLWsnK51ccAVY4E+U0mQOp6iYK6buN/7yHMy0BYCn5\nEN1ufXwSRBjlxwHQ+0T4gTCLhOqQaSyDuY/ZpuvbuBZ2HWvIH6aJAHgJdRQtfvtz\n3qLZcIzkVvnCGsaHX1CRAOlZ5L2uQ6AUTl5tXuaov6KWchitPJ3/gSwkoqpE9meT\nDrae1Y4Pj4FkCfswb44lqvZu54cQsUl6jpS8zCy8U9oyvon0l3eS8lLM4HX18r1Y\nupJsy0HJ1BPzKJQV5o5tqexZE4PHvswyJNzn6Vnt/fqFEvcJ694=\n=mC5N\n-----END PGP SIGNATURE-----", "payload": "tree d98af60ad9e47dfa476903a3a1cfa88e838688ef\nparent e6889933e3d76c38034f0db688af37b7551da600\nparent 30e3f1a620b06b6edd697c55858ea9f251a4332a\nauthor kennytm <kennytm@gmail.com> 1524809808 +0800\ncommitter kennytm <kennytm@gmail.com> 1524817408 +0800\n\nRollup merge of #50231 - GuillaumeGomez:doc-aliases, r=QuietMisdreavus\n\nAdd more doc aliases\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b67d221fd2392f1de4b7f874744535f3a43135", "html_url": "https://github.com/rust-lang/rust/commit/e9b67d221fd2392f1de4b7f874744535f3a43135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9b67d221fd2392f1de4b7f874744535f3a43135/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6889933e3d76c38034f0db688af37b7551da600", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6889933e3d76c38034f0db688af37b7551da600", "html_url": "https://github.com/rust-lang/rust/commit/e6889933e3d76c38034f0db688af37b7551da600"}, {"sha": "30e3f1a620b06b6edd697c55858ea9f251a4332a", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e3f1a620b06b6edd697c55858ea9f251a4332a", "html_url": "https://github.com/rust-lang/rust/commit/30e3f1a620b06b6edd697c55858ea9f251a4332a"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "13e838773a5875faf0a0da4117644d9f45776c94", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=e9b67d221fd2392f1de4b7f874744535f3a43135", "patch": "@@ -106,6 +106,8 @@ use self::Ordering::*;\n /// ```\n #[lang = \"eq\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"==\")]\n+#[doc(alias = \"!=\")]\n #[rustc_on_unimplemented = \"can't compare `{Self}` with `{Rhs}`\"]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n     /// This method tests for `self` and `other` values to be equal, and is used\n@@ -160,6 +162,8 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n /// }\n /// impl Eq for Book {}\n /// ```\n+#[doc(alias = \"==\")]\n+#[doc(alias = \"!=\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Eq: PartialEq<Self> {\n     // this method is used solely by #[deriving] to assert\n@@ -428,6 +432,10 @@ impl<T: Ord> Ord for Reverse<T> {\n /// }\n /// ```\n #[lang = \"ord\"]\n+#[doc(alias = \"<\")]\n+#[doc(alias = \">\")]\n+#[doc(alias = \"<=\")]\n+#[doc(alias = \">=\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an `Ordering` between `self` and `other`.\n@@ -599,6 +607,10 @@ impl PartialOrd for Ordering {\n /// ```\n #[lang = \"partial_ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \">\")]\n+#[doc(alias = \"<\")]\n+#[doc(alias = \"<=\")]\n+#[doc(alias = \">=\")]\n #[rustc_on_unimplemented = \"can't compare `{Self}` with `{Rhs}`\"]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values if one exists."}, {"sha": "99e3012c9bf8cd5e038310ca4205577cb71e569c", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e9b67d221fd2392f1de4b7f874744535f3a43135", "patch": "@@ -547,6 +547,7 @@ impl<'a> Display for Arguments<'a> {\n     message=\"`{Self}` doesn't implement `{Debug}`\",\n     label=\"`{Self}` cannot be formatted using `:?` because it doesn't implement `{Debug}`\",\n )]\n+#[doc(alias = \"{:?}\")]\n #[lang = \"debug_trait\"]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n@@ -612,6 +613,7 @@ pub trait Debug {\n     label=\"`{Self}` cannot be formatted with the default formatter; \\\n            try using `:?` instead if you are using a format string\",\n )]\n+#[doc(alias = \"{}\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Display {\n     /// Formats the value using the given formatter."}, {"sha": "02b6f62db6eb109d52bd6a8e9cba4aa2470c357b", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=e9b67d221fd2392f1de4b7f874744535f3a43135", "patch": "@@ -119,6 +119,7 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(bv1 & bv2, expected);\n /// ```\n #[lang = \"bitand\"]\n+#[doc(alias = \"&\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} & {RHS}`\",\n                          label=\"no implementation for `{Self} & {RHS}`\")]\n@@ -201,6 +202,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(bv1 | bv2, expected);\n /// ```\n #[lang = \"bitor\"]\n+#[doc(alias = \"|\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} | {RHS}`\",\n                          label=\"no implementation for `{Self} | {RHS}`\")]\n@@ -286,6 +288,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(bv1 ^ bv2, expected);\n /// ```\n #[lang = \"bitxor\"]\n+#[doc(alias = \"^\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {RHS}`\",\n                          label=\"no implementation for `{Self} ^ {RHS}`\")]\n@@ -372,6 +375,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///            SpinVector { vec: vec![2, 3, 4, 0, 1] });\n /// ```\n #[lang = \"shl\"]\n+#[doc(alias = \"<<\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} << {RHS}`\",\n                          label=\"no implementation for `{Self} << {RHS}`\")]\n@@ -479,6 +483,7 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n ///            SpinVector { vec: vec![3, 4, 0, 1, 2] });\n /// ```\n #[lang = \"shr\"]\n+#[doc(alias = \">>\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {RHS}`\",\n                          label=\"no implementation for `{Self} >> {RHS}`\")]\n@@ -593,6 +598,7 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// assert_eq!(bv, expected);\n /// ```\n #[lang = \"bitand_assign\"]\n+#[doc(alias = \"&=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} &= {Rhs}`\",\n                          label=\"no implementation for `{Self} &= {Rhs}`\")]\n@@ -641,6 +647,7 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(prefs, PersonalPreferences { likes_cats: true, likes_dogs: true });\n /// ```\n #[lang = \"bitor_assign\"]\n+#[doc(alias = \"|=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} |= {Rhs}`\",\n                          label=\"no implementation for `{Self} |= {Rhs}`\")]\n@@ -689,6 +696,7 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(personality, Personality { has_soul: true, likes_knitting: false});\n /// ```\n #[lang = \"bitxor_assign\"]\n+#[doc(alias = \"^=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} ^= {Rhs}`\",\n                          label=\"no implementation for `{Self} ^= {Rhs}`\")]\n@@ -735,6 +743,7 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// assert_eq!(scalar, Scalar(16));\n /// ```\n #[lang = \"shl_assign\"]\n+#[doc(alias = \"<<=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} <<= {Rhs}`\",\n                          label=\"no implementation for `{Self} <<= {Rhs}`\")]\n@@ -802,6 +811,7 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// assert_eq!(scalar, Scalar(4));\n /// ```\n #[lang = \"shr_assign\"]\n+#[doc(alias = \">>=\")]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"no implementation for `{Self} >>= {Rhs}`\",\n                          label=\"no implementation for `{Self} >>= {Rhs}`\")]"}, {"sha": "332d154170f4da6346696871c894c58292329c7a", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=e9b67d221fd2392f1de4b7f874744535f3a43135", "patch": "@@ -68,6 +68,8 @@\n /// assert_eq!('a', *x);\n /// ```\n #[lang = \"deref\"]\n+#[doc(alias = \"*\")]\n+#[doc(alias = \"&*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Deref {\n     /// The resulting type after dereferencing.\n@@ -162,6 +164,7 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n /// assert_eq!('b', *x);\n /// ```\n #[lang = \"deref_mut\"]\n+#[doc(alias = \"*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait DerefMut: Deref {\n     /// Mutably dereferences the value."}, {"sha": "d70f7ae66f9038ee27f8b8ff0e8342539cbda178", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b67d221fd2392f1de4b7f874744535f3a43135/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=e9b67d221fd2392f1de4b7f874744535f3a43135", "patch": "@@ -45,6 +45,7 @@ use fmt;\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n+#[doc(alias = \"..\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;\n@@ -74,6 +75,7 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!(arr[1.. ], [     'b', 'c', 'd']);\n /// assert_eq!(arr[1..3], [     'b', 'c'     ]);  // Range\n /// ```\n+#[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n@@ -175,6 +177,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n /// ```\n ///\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n+#[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFrom<Idx> {\n@@ -256,6 +259,7 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n+#[doc(alias = \"..\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeTo<Idx> {\n@@ -323,6 +327,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[ ..=2], [0,1,2  ]);\n /// assert_eq!(arr[1..=2], [  1,2  ]);  // RangeInclusive\n /// ```\n+#[doc(alias = \"..=\")]\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeInclusive<Idx> {\n@@ -449,6 +454,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n+#[doc(alias = \"..=\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeToInclusive<Idx> {"}]}