{"sha": "e2f9f746ea5adcede229b5c9c14450a0057ed13b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZjlmNzQ2ZWE1YWRjZWRlMjI5YjVjOWMxNDQ1MGEwMDU3ZWQxM2I=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-24T18:32:14Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-25T00:56:01Z"}, "message": "Move expr_cast translation into helper function.", "tree": {"sha": "94ac76414143825e5e54854f4540f35cf9230715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ac76414143825e5e54854f4540f35cf9230715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f9f746ea5adcede229b5c9c14450a0057ed13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f9f746ea5adcede229b5c9c14450a0057ed13b", "html_url": "https://github.com/rust-lang/rust/commit/e2f9f746ea5adcede229b5c9c14450a0057ed13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f9f746ea5adcede229b5c9c14450a0057ed13b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "html_url": "https://github.com/rust-lang/rust/commit/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "893c5691964cd2f8ec7984535051459ce182b69b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e2f9f746ea5adcede229b5c9c14450a0057ed13b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f9f746ea5adcede229b5c9c14450a0057ed13b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e2f9f746ea5adcede229b5c9c14450a0057ed13b", "patch": "@@ -935,6 +935,37 @@ impure fn trans_exprs(@block_ctxt cx, &vec[@ast.expr] es)\n     ret tup(bcx, vs);\n }\n \n+impure fn trans_cast(@block_ctxt cx, &ast.expr e, &ast.ann ann) -> result {\n+    auto e_res = trans_expr(cx, e);\n+    auto llsrctype = val_ty(e_res.val);\n+    auto t = node_ann_type(cx.fcx.ccx, ann);\n+    auto lldsttype = type_of(cx.fcx.ccx, t);\n+    if (!typeck.type_is_fp(t)) {\n+        if (llvm.LLVMGetIntTypeWidth(lldsttype) >\n+            llvm.LLVMGetIntTypeWidth(llsrctype)) {\n+            if (typeck.type_is_signed(t)) {\n+                // Widening signed cast.\n+                e_res.val =\n+                    e_res.bcx.build.SExtOrBitCast(e_res.val,\n+                                                  lldsttype);\n+            } else {\n+                // Widening unsigned cast.\n+                e_res.val =\n+                    e_res.bcx.build.ZExtOrBitCast(e_res.val,\n+                                                  lldsttype);\n+            }\n+        } else {\n+            // Narrowing cast.\n+            e_res.val =\n+                e_res.bcx.build.TruncOrBitCast(e_res.val,\n+                                               lldsttype);\n+        }\n+    } else {\n+        cx.fcx.ccx.sess.unimpl(\"fp cast\");\n+    }\n+    ret e_res;\n+}\n+\n impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n     alt (e.node) {\n         case (ast.expr_lit(?lit, _)) {\n@@ -1002,34 +1033,7 @@ impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n         }\n \n         case (ast.expr_cast(?e, _, ?ann)) {\n-            auto e_res = trans_expr(cx, *e);\n-            auto llsrctype = val_ty(e_res.val);\n-            auto t = node_ann_type(cx.fcx.ccx, ann);\n-            auto lldsttype = type_of(cx.fcx.ccx, t);\n-            if (!typeck.type_is_fp(t)) {\n-                if (llvm.LLVMGetIntTypeWidth(lldsttype) >\n-                    llvm.LLVMGetIntTypeWidth(llsrctype)) {\n-                    if (typeck.type_is_signed(t)) {\n-                        // Widening signed cast.\n-                        e_res.val =\n-                            e_res.bcx.build.SExtOrBitCast(e_res.val,\n-                                                          lldsttype);\n-                    } else {\n-                        // Widening unsigned cast.\n-                        e_res.val =\n-                            e_res.bcx.build.ZExtOrBitCast(e_res.val,\n-                                                          lldsttype);\n-                    }\n-                } else {\n-                    // Narrowing cast.\n-                    e_res.val =\n-                        e_res.bcx.build.TruncOrBitCast(e_res.val,\n-                                                       lldsttype);\n-                }\n-            } else {\n-                cx.fcx.ccx.sess.unimpl(\"fp cast\");\n-            }\n-            ret e_res;\n+            ret trans_cast(cx, *e, ann);\n         }\n     }\n     cx.fcx.ccx.sess.unimpl(\"expr variant in trans_expr\");"}]}