{"sha": "e1038819c2ab190ace31f2f0ac7f4455e3708cfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDM4ODE5YzJhYjE5MGFjZTMxZjJmMGFjN2Y0NDU1ZTM3MDhjZmM=", "commit": {"author": {"name": "Kasey Carrothers", "email": "kaseyc.808@gmail.com", "date": "2014-06-20T04:13:39Z"}, "committer": {"name": "Kasey Carrothers", "email": "kaseyc.808@gmail.com", "date": "2014-06-20T04:13:39Z"}, "message": "Implement Eq for Bitv and BitvSet", "tree": {"sha": "ef8fb771904dd58a7ba6e8150b05d92d6052b470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef8fb771904dd58a7ba6e8150b05d92d6052b470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1038819c2ab190ace31f2f0ac7f4455e3708cfc", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1038819c2ab190ace31f2f0ac7f4455e3708cfc", "html_url": "https://github.com/rust-lang/rust/commit/e1038819c2ab190ace31f2f0ac7f4455e3708cfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1038819c2ab190ace31f2f0ac7f4455e3708cfc/comments", "author": {"login": "kaseyc", "id": 2405952, "node_id": "MDQ6VXNlcjI0MDU5NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2405952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaseyc", "html_url": "https://github.com/kaseyc", "followers_url": "https://api.github.com/users/kaseyc/followers", "following_url": "https://api.github.com/users/kaseyc/following{/other_user}", "gists_url": "https://api.github.com/users/kaseyc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaseyc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaseyc/subscriptions", "organizations_url": "https://api.github.com/users/kaseyc/orgs", "repos_url": "https://api.github.com/users/kaseyc/repos", "events_url": "https://api.github.com/users/kaseyc/events{/privacy}", "received_events_url": "https://api.github.com/users/kaseyc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kaseyc", "id": 2405952, "node_id": "MDQ6VXNlcjI0MDU5NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2405952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaseyc", "html_url": "https://github.com/kaseyc", "followers_url": "https://api.github.com/users/kaseyc/followers", "following_url": "https://api.github.com/users/kaseyc/following{/other_user}", "gists_url": "https://api.github.com/users/kaseyc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaseyc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaseyc/subscriptions", "organizations_url": "https://api.github.com/users/kaseyc/orgs", "repos_url": "https://api.github.com/users/kaseyc/repos", "events_url": "https://api.github.com/users/kaseyc/events{/privacy}", "received_events_url": "https://api.github.com/users/kaseyc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282705c7842713d9809a9fb53223c1e40c3fe860", "url": "https://api.github.com/repos/rust-lang/rust/commits/282705c7842713d9809a9fb53223c1e40c3fe860", "html_url": "https://github.com/rust-lang/rust/commit/282705c7842713d9809a9fb53223c1e40c3fe860"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "572178bd19664d48e2abe15849a509b6312ac68c", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e1038819c2ab190ace31f2f0ac7f4455e3708cfc/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1038819c2ab190ace31f2f0ac7f4455e3708cfc/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=e1038819c2ab190ace31f2f0ac7f4455e3708cfc", "patch": "@@ -376,27 +376,6 @@ impl Bitv {\n       }\n     }\n \n-    /**\n-     * Compares two bitvectors\n-     *\n-     * Both bitvectors must be the same length. Returns `true` if both\n-     * bitvectors contain identical elements.\n-     */\n-    #[inline]\n-    pub fn equal(&self, v1: &Bitv) -> bool {\n-      if self.nbits != v1.nbits { return false; }\n-      match self.rep {\n-        Small(ref b) => match v1.rep {\n-          Small(ref b1) => b.equals(b1, self.nbits),\n-          _ => false\n-        },\n-        Big(ref s) => match v1.rep {\n-          Big(ref s1) => s.equals(s1, self.nbits),\n-          Small(_) => return false\n-        }\n-      }\n-    }\n-\n     /// Set all bits to 0\n     #[inline]\n     pub fn clear(&mut self) {\n@@ -613,6 +592,25 @@ impl<S: hash::Writer> hash::Hash<S> for Bitv {\n     }\n }\n \n+impl cmp::PartialEq for Bitv {\n+    #[inline]\n+    fn eq(&self, other: &Bitv) -> bool {\n+        if self.nbits != other.nbits { return false; }\n+        match self.rep {\n+            Small(ref b) => match other.rep {\n+                Small(ref b1) => b.equals(b1, self.nbits),\n+                _ => false\n+            },\n+            Big(ref s) => match other.rep {\n+                Big(ref s1) => s.equals(s1, self.nbits),\n+                Small(_) => return false\n+            }\n+        }\n+    }\n+}\n+\n+impl cmp::Eq for Bitv {}\n+\n #[inline]\n fn iterate_bits(base: uint, bits: uint, f: |uint| -> bool) -> bool {\n     if bits == 0 {\n@@ -841,6 +839,8 @@ impl cmp::PartialEq for BitvSet {\n     fn ne(&self, other: &BitvSet) -> bool { !self.eq(other) }\n }\n \n+impl cmp::Eq for BitvSet {}\n+\n impl fmt::Show for BitvSet {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(fmt, \"{{\"));\n@@ -1323,14 +1323,14 @@ mod tests {\n     fn test_equal_differing_sizes() {\n         let v0 = Bitv::new(10u, false);\n         let v1 = Bitv::new(11u, false);\n-        assert!(!v0.equal(&v1));\n+        assert!(v0 != v1);\n     }\n \n     #[test]\n     fn test_equal_greatly_differing_sizes() {\n         let v0 = Bitv::new(10u, false);\n         let v1 = Bitv::new(110u, false);\n-        assert!(!v0.equal(&v1));\n+        assert!(v0 != v1);\n     }\n \n     #[test]\n@@ -1341,7 +1341,7 @@ mod tests {\n         let mut b = bitv::Bitv::new(1, true);\n         b.set(0, true);\n \n-        assert!(a.equal(&b));\n+        assert_eq!(a, b);\n     }\n \n     #[test]\n@@ -1356,7 +1356,7 @@ mod tests {\n             b.set(i, true);\n         }\n \n-        assert!(a.equal(&b));\n+        assert_eq!(a, b);\n     }\n \n     #[test]"}]}