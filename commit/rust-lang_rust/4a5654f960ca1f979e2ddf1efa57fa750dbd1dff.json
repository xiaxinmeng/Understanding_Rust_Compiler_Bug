{"sha": "4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNTY1NGY5NjBjYTFmOTc5ZTJkZGYxZWZhNTdmYTc1MGRiZDFkZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-17T02:36:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-17T02:36:10Z"}, "message": "auto merge of #16482 : pcwalton/rust/resolve-shadowing, r=brson\n\ndeclared with the same name in the same scope.\r\n\r\nThis breaks several common patterns. First are unused imports:\r\n\r\n    use foo::bar;\r\n    use baz::bar;\r\n\r\nChange this code to the following:\r\n\r\n    use baz::bar;\r\n\r\nSecond, this patch breaks globs that import names that are shadowed by\r\nsubsequent imports. For example:\r\n\r\n    use foo::*; // including `bar`\r\n    use baz::bar;\r\n\r\nChange this code to remove the glob:\r\n\r\n    use foo::{boo, quux};\r\n    use baz::bar;\r\n\r\nOr qualify all uses of `bar`:\r\n\r\n    use foo::{boo, quux};\r\n    use baz;\r\n\r\n    ... baz::bar ...\r\n\r\nFinally, this patch breaks code that, at top level, explicitly imports\r\n`std` and doesn't disable the prelude.\r\n\r\n    extern crate std;\r\n\r\nBecause the prelude imports `std` implicitly, there is no need to\r\nexplicitly import it; just remove such directives.\r\n\r\nThe old behavior can be opted into via the `import_shadowing` feature\r\ngate. Use of this feature gate is discouraged.\r\n\r\nThis implements RFC #116.\r\n\r\nCloses #16464.\r\n\r\n[breaking-change]\r\n\r\nr? @brson", "tree": {"sha": "02452858125464ce20b886a2b61d77b0c3b3d65a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02452858125464ce20b886a2b61d77b0c3b3d65a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "html_url": "https://github.com/rust-lang/rust/commit/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fd37f876dad1d4db02208f8a56f02228d975b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fd37f876dad1d4db02208f8a56f02228d975b0", "html_url": "https://github.com/rust-lang/rust/commit/85fd37f876dad1d4db02208f8a56f02228d975b0"}, {"sha": "7f928d150e53b5873b4238f9e60d1aa4be9b602f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f928d150e53b5873b4238f9e60d1aa4be9b602f", "html_url": "https://github.com/rust-lang/rust/commit/7f928d150e53b5873b4238f9e60d1aa4be9b602f"}], "stats": {"total": 1012, "additions": 579, "deletions": 433}, "files": [{"sha": "b46b09781ca38bb4ea1cd8542e0422e38966b727", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -537,11 +537,12 @@ extern crate core;\n use core::prelude::*;\n \n use core::mem;\n-use core::raw::Slice;\n \n #[no_mangle]\n pub extern fn dot_product(a: *const u32, a_len: u32,\n                           b: *const u32, b_len: u32) -> u32 {\n+    use core::raw::Slice;\n+\n     // Convert the provided arrays into Rust slices.\n     // The core::raw module guarantees that the Slice\n     // structure has the same memory layout as a &[T]"}, {"sha": "244fa4800d7405486f0c0784b0164a16f56b0488", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -68,12 +68,11 @@ use core::default::Default;\n use core::fmt;\n use core::iter::Take;\n use core::iter;\n-use core::ops::Index;\n use core::slice;\n use core::uint;\n use std::hash;\n \n-use {Collection, Mutable, Set, MutableSet, MutableSeq};\n+use {Mutable, Set, MutableSet, MutableSeq};\n use vec::Vec;\n \n "}, {"sha": "166d2c6c7901fe89dc44f01602e96cf0e38f1160", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -24,7 +24,7 @@ use alloc::boxed::Box;\n use core::fmt;\n use core::fmt::Show;\n \n-use {Collection, MutableSeq};\n+use MutableSeq;\n use vec::Vec;\n \n #[allow(missing_doc)]"}, {"sha": "6f47780a0e6f524e96989dbd46359f4b1b614838", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -31,7 +31,7 @@ use core::mem;\n use core::ptr;\n use std::hash::{Writer, Hash};\n \n-use {Collection, Mutable, Deque, MutableSeq};\n+use {Mutable, Deque, MutableSeq};\n \n /// A doubly-linked list.\n pub struct DList<T> {"}, {"sha": "5fdcee14f891ec5c569347159c56e8a0d036197d", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -22,9 +22,12 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(macro_rules, managed_boxes, default_type_params, phase, globs)]\n-#![feature(unsafe_destructor)]\n+#![feature(unsafe_destructor, import_shadowing)]\n #![no_std]\n \n+// NOTE(stage0, pcwalton): Remove after snapshot.\n+#![allow(unknown_features)]\n+\n #[phase(plugin, link)] extern crate core;\n extern crate unicode;\n extern crate alloc;\n@@ -36,11 +39,11 @@ extern crate alloc;\n #[cfg(test)] #[phase(plugin, link)] extern crate std;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n-use core::prelude::*;\n+use core::prelude::Option;\n \n-pub use core::collections::Collection;\n pub use bitv::{Bitv, BitvSet};\n pub use btree::BTree;\n+pub use core::prelude::Collection;\n pub use dlist::DList;\n pub use enum_set::EnumSet;\n pub use priority_queue::PriorityQueue;"}, {"sha": "34cc02258157f346fc30c399d721efed36f26db2", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -154,7 +154,7 @@ use core::default::Default;\n use core::mem::{zeroed, replace, swap};\n use core::ptr;\n \n-use {Collection, Mutable, MutableSeq};\n+use {Mutable, MutableSeq};\n use slice;\n use vec::Vec;\n "}, {"sha": "9d074813343b3e46b76cb317463b0083012074ff", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -18,11 +18,10 @@ use core::prelude::*;\n use core::cmp;\n use core::default::Default;\n use core::fmt;\n-use core::iter::RandomAccessIterator;\n use core::iter;\n use std::hash::{Writer, Hash};\n \n-use {Deque, Collection, Mutable, MutableSeq};\n+use {Deque, Mutable, MutableSeq};\n use vec::Vec;\n \n static INITIAL_CAPACITY: uint = 8u; // 2^3"}, {"sha": "7190bbfbc012cfbbf0e7875ba446c796ef64375d", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -86,23 +86,22 @@ for &x in numbers.iter() {\n \n #![doc(primitive = \"slice\")]\n \n-use core::prelude::*;\n-\n use core::cmp;\n use core::mem::size_of;\n use core::mem;\n+use core::prelude::{Clone, Collection, Greater, Iterator, Less, None, Option};\n+use core::prelude::{Ord, Ordering, RawPtr, Some, range};\n use core::ptr;\n use core::iter::{range_step, MultiplicativeIterator};\n \n-use {Collection, MutableSeq};\n+use MutableSeq;\n use vec::Vec;\n \n-pub use core::slice::{ref_slice, mut_ref_slice, Splits, Windows};\n pub use core::slice::{Chunks, Slice, ImmutableSlice, ImmutablePartialEqSlice};\n pub use core::slice::{ImmutableOrdSlice, MutableSlice, Items, MutItems};\n-pub use core::slice::{MutSplits, MutChunks};\n-pub use core::slice::{bytes, MutableCloneableSlice};\n-pub use core::slice::{BinarySearchResult, Found, NotFound};\n+pub use core::slice::{MutSplits, MutChunks, Splits};\n+pub use core::slice::{bytes, ref_slice, MutableCloneableSlice};\n+pub use core::slice::{Found, NotFound};\n \n // Functional utilities\n "}, {"sha": "44db9147226b09e08b1f28c5e9988413ec34ea50", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -21,7 +21,7 @@ use core::iter;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n \n-use {Collection, Mutable, Map, MutableMap, MutableSeq};\n+use {Mutable, Map, MutableMap, MutableSeq};\n use {vec, slice};\n use vec::Vec;\n use hash;"}, {"sha": "1c50b228bb8deb1438b215595514a6d4d2f37a84", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -69,15 +69,17 @@ is the same as `&[u8]`.\n \n #![doc(primitive = \"str\")]\n \n-use core::prelude::*;\n-\n use core::default::Default;\n use core::fmt;\n use core::cmp;\n use core::iter::AdditiveIterator;\n use core::mem;\n+use core::prelude::{Char, Clone, Collection, Eq, Equiv, ImmutableSlice};\n+use core::prelude::{Iterator, MutableSlice, None, Option, Ord, Ordering};\n+use core::prelude::{PartialEq, PartialOrd, Result, Slice, Some, Tuple2};\n+use core::prelude::{range};\n \n-use {Collection, Deque, MutableSeq};\n+use {Deque, MutableSeq};\n use hash;\n use ringbuf::RingBuf;\n use string::String;"}, {"sha": "fb2dc5ffb112bf524369727e60a9f926dab9676b", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -20,9 +20,8 @@ use core::mem;\n use core::ptr;\n // FIXME: ICE's abound if you import the `Slice` type while importing `Slice` trait\n use RawSlice = core::raw::Slice;\n-use core::slice::Slice;\n \n-use {Collection, Mutable, MutableSeq};\n+use {Mutable, MutableSeq};\n use hash;\n use str;\n use str::{CharRange, StrAllocating, MaybeOwned, Owned};"}, {"sha": "7787893925d534190ae50b285f08163bb60b12c1", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -40,7 +40,7 @@ use core::mem::{replace, swap};\n use core::ptr;\n use std::hash::{Writer, Hash};\n \n-use {Collection, Mutable, Set, MutableSet, MutableMap, Map, MutableSeq};\n+use {Mutable, Set, MutableSet, MutableMap, Map, MutableSeq};\n use vec::Vec;\n \n /// This is implemented as an AA tree, which is a simplified variation of"}, {"sha": "911262e90cba79d800fa5a66b82ab2e62d9000d9", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -23,7 +23,7 @@ use core::uint;\n use core::iter;\n use std::hash::{Writer, Hash};\n \n-use {Collection, Mutable, Map, MutableMap, Set, MutableSet};\n+use {Mutable, Map, MutableMap, Set, MutableSet};\n use slice::{Items, MutItems};\n use slice;\n "}, {"sha": "3c705580f63547d636404b781302acf599eee89e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -14,17 +14,15 @@ use core::prelude::*;\n \n use alloc::heap::{allocate, reallocate, deallocate};\n use RawSlice = core::raw::Slice;\n-use core::slice::Slice;\n use core::cmp::max;\n use core::default::Default;\n use core::fmt;\n use core::mem;\n-use core::num::{CheckedMul, CheckedAdd};\n use core::num;\n use core::ptr;\n use core::uint;\n \n-use {Collection, Mutable, MutableSeq};\n+use {Mutable, MutableSeq};\n use slice::{MutableOrdSlice, MutableSliceAllocating, CloneableVector};\n use slice::{Items, MutItems};\n "}, {"sha": "28fe6434462b7949cedb045503743bab5d6d1e2f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -14,12 +14,10 @@\n \n use any;\n use cell::{Cell, Ref, RefMut};\n-use char::Char;\n use collections::Collection;\n use iter::{Iterator, range};\n use kinds::Copy;\n use mem;\n-use num::Float;\n use option::{Option, Some, None};\n use ops::Deref;\n use result::{Ok, Err};\n@@ -342,8 +340,12 @@ impl<'a> Formatter<'a> {\n     ///\n     /// This function will correctly account for the flags provided as well as\n     /// the minimum width. It will not take precision into account.\n-    pub fn pad_integral(&mut self, is_positive: bool, prefix: &str,\n-                        buf: &[u8]) -> Result {\n+    pub fn pad_integral(&mut self,\n+                        is_positive: bool,\n+                        prefix: &str,\n+                        buf: &[u8])\n+                        -> Result {\n+        use char::Char;\n         use fmt::rt::{FlagAlternate, FlagSignPlus, FlagSignAwareZeroPad};\n \n         let mut width = buf.len();\n@@ -456,6 +458,7 @@ impl<'a> Formatter<'a> {\n                     padding: uint,\n                     default: rt::Alignment,\n                     f: |&mut Formatter| -> Result) -> Result {\n+        use char::Char;\n         let align = match self.align {\n             rt::AlignUnknown => default,\n             rt::AlignLeft | rt::AlignRight => self.align\n@@ -539,6 +542,8 @@ impl<'a, T: str::Str> String for T {\n \n impl Char for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n+        use char::Char;\n+\n         let mut utf8 = [0u8, ..4];\n         let amt = self.encode_utf8(utf8);\n         let s: &str = unsafe { mem::transmute(utf8.slice_to(amt)) };\n@@ -571,7 +576,7 @@ impl<'a, T> Pointer for &'a mut T {\n macro_rules! floating(($ty:ident) => {\n     impl Float for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            use num::Signed;\n+            use num::{Float, Signed};\n \n             let digits = match fmt.precision {\n                 Some(i) => float::DigExact(i),\n@@ -592,7 +597,7 @@ macro_rules! floating(($ty:ident) => {\n \n     impl LowerExp for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            use num::Signed;\n+            use num::{Float, Signed};\n \n             let digits = match fmt.precision {\n                 Some(i) => float::DigExact(i),\n@@ -613,7 +618,7 @@ macro_rules! floating(($ty:ident) => {\n \n     impl UpperExp for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            use num::Signed;\n+            use num::{Float, Signed};\n \n             let digits = match fmt.precision {\n                 Some(i) => float::DigExact(i),"}, {"sha": "d41035d3a160fed29d0687ddbef2d1cf8842562c", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -19,7 +19,10 @@\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![feature(macro_rules, globs)]\n+#![feature(macro_rules, globs, import_shadowing)]\n+\n+// NOTE(stage0, pcwalton): Remove after snapshot.\n+#![allow(unknown_features)]\n \n use std::char;\n use std::str;"}, {"sha": "3286c329755a6a7ecdb3298e2b7f0cca4819d96d", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -88,8 +88,12 @@\n        html_root_url = \"http://doc.rust-lang.org/master/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(globs, phase)]\n+#![feature(import_shadowing)]\n #![deny(missing_doc)]\n \n+// NOTE(stage0, pcwalton): Remove after snapshot.\n+#![allow(unknown_features)]\n+\n #[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n "}, {"sha": "bf0a9f06df8967cc1ddb6e779dd2b6bd87c2ec7a", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -226,7 +226,7 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use consts::os::extra::{FILE_FLAG_BACKUP_SEMANTICS, INVALID_HANDLE_VALUE};\n #[cfg(windows)] pub use consts::os::extra::{MOVEFILE_REPLACE_EXISTING};\n #[cfg(windows)] pub use consts::os::extra::{GENERIC_READ, GENERIC_WRITE};\n-#[cfg(windows)] pub use consts::os::extra::{VOLUME_NAME_DOS, FILE_ATTRIBUTE_NORMAL};\n+#[cfg(windows)] pub use consts::os::extra::{VOLUME_NAME_DOS};\n #[cfg(windows)] pub use consts::os::extra::{PIPE_ACCESS_DUPLEX, FILE_FLAG_FIRST_PIPE_INSTANCE};\n #[cfg(windows)] pub use consts::os::extra::{FILE_FLAG_OVERLAPPED, PIPE_TYPE_BYTE};\n #[cfg(windows)] pub use consts::os::extra::{PIPE_READMODE_BYTE, PIPE_WAIT};\n@@ -255,10 +255,10 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use funcs::extra::kernel32::{UnmapViewOfFile, CloseHandle};\n #[cfg(windows)] pub use funcs::extra::kernel32::{WaitForSingleObject, GetSystemTimeAsFileTime};\n #[cfg(windows)] pub use funcs::extra::kernel32::{QueryPerformanceCounter};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{WaitForSingleObject, QueryPerformanceFrequency};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{QueryPerformanceFrequency};\n #[cfg(windows)] pub use funcs::extra::kernel32::{GetExitCodeProcess, TerminateProcess};\n #[cfg(windows)] pub use funcs::extra::kernel32::{ReadFile, WriteFile, SetFilePointerEx};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{FlushFileBuffers, SetEndOfFile, CreateFileW};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{SetEndOfFile, CreateFileW};\n #[cfg(windows)] pub use funcs::extra::kernel32::{CreateDirectoryW, FindFirstFileW};\n #[cfg(windows)] pub use funcs::extra::kernel32::{FindNextFileW, FindClose, DeleteFileW};\n #[cfg(windows)] pub use funcs::extra::kernel32::{CreateHardLinkW, CreateEventW};"}, {"sha": "9d401d1307ce21c9c0c18616ea67a556d43cb184", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -24,7 +24,6 @@ that do not need to record state.\n \n use core::prelude::*;\n use core::num;\n-use core::num::CheckedAdd;\n \n use {Rng, Rand};\n "}, {"sha": "2e048cb029d4adcbe58259fd0620f9336cb328ca", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -35,12 +35,11 @@ use distributions::{Sample, IndependentSample};\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n /// use std::rand::distributions::{IndependentSample, Range};\n ///\n /// fn main() {\n ///     let between = Range::new(10u, 10000u);\n-///     let mut rng = rand::task_rng();\n+///     let mut rng = std::rand::task_rng();\n ///     let mut sum = 0;\n ///     for _ in range(0u, 1000) {\n ///         sum += between.ind_sample(&mut rng);"}, {"sha": "739ec2cf43ffe9564ecfcdf12d40ef0de2270062", "filename": "src/librlibc/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -28,13 +28,16 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n \n-#![feature(intrinsics, phase)]\n+#![feature(import_shadowing, intrinsics, phase)]\n #![no_std]\n \n // This library defines the builtin functions, so it would be a shame for\n // LLVM to optimize these function calls to themselves!\n #![no_builtins]\n \n+// NOTE(stage0, pcwalton): Remove after snapshot.\n+#![allow(unknown_features)]\n+\n #[cfg(test)] extern crate native;\n #[cfg(test)] extern crate test;\n #[cfg(test)] extern crate debug;"}, {"sha": "7c19b25e01cd784cac617bc42cbdeb525ee12139", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -68,6 +68,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n \n     (\"rustc_diagnostic_macros\", Active),\n     (\"unboxed_closures\", Active),\n+    (\"import_shadowing\", Active),\n \n     // if you change this list without updating src/doc/rust.md, cmr will be sad\n \n@@ -98,7 +99,8 @@ pub struct Features {\n     pub default_type_params: Cell<bool>,\n     pub issue_5723_bootstrap: Cell<bool>,\n     pub overloaded_calls: Cell<bool>,\n-    pub rustc_diagnostic_macros: Cell<bool>\n+    pub rustc_diagnostic_macros: Cell<bool>,\n+    pub import_shadowing: Cell<bool>,\n }\n \n impl Features {\n@@ -107,7 +109,8 @@ impl Features {\n             default_type_params: Cell::new(false),\n             issue_5723_bootstrap: Cell::new(false),\n             overloaded_calls: Cell::new(false),\n-            rustc_diagnostic_macros: Cell::new(false)\n+            rustc_diagnostic_macros: Cell::new(false),\n+            import_shadowing: Cell::new(false),\n         }\n     }\n }\n@@ -439,4 +442,6 @@ pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n     sess.features.issue_5723_bootstrap.set(cx.has_feature(\"issue_5723_bootstrap\"));\n     sess.features.overloaded_calls.set(cx.has_feature(\"overloaded_calls\"));\n     sess.features.rustc_diagnostic_macros.set(cx.has_feature(\"rustc_diagnostic_macros\"));\n+    sess.features.import_shadowing.set(cx.has_feature(\"import_shadowing\"));\n }\n+"}, {"sha": "ff8711c5df01f14fd9e26fad0b0ed477b65c1ef6", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -19,6 +19,7 @@ use syntax::fold::Folder;\n use syntax::fold;\n use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::InternedString;\n+use syntax::parse::token::special_idents;\n use syntax::parse::token;\n use syntax::util::small_vector::SmallVector;\n \n@@ -197,7 +198,19 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n                                                                   ast::DUMMY_NODE_ID));\n         let vi2 = ast::ViewItem {\n             node: ast::ViewItemUse(vp),\n-            attrs: Vec::new(),\n+            attrs: vec!(ast::Attribute {\n+                span: DUMMY_SP,\n+                node: ast::Attribute_ {\n+                    id: attr::mk_attr_id(),\n+                    style: ast::AttrOuter,\n+                    value: box(GC) ast::MetaItem {\n+                        span: DUMMY_SP,\n+                        node: ast::MetaWord(token::get_name(\n+                                special_idents::prelude_import.name)),\n+                    },\n+                    is_sugared_doc: false,\n+                },\n+            }),\n             vis: ast::Inherited,\n             span: DUMMY_SP,\n         };"}, {"sha": "239e858eeeb12ab43ab1424bd936cd40f1bc84bf", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -34,6 +34,7 @@ This API is completely unstable and subject to change.\n \n #![allow(unknown_features)] // NOTE: Remove after next snapshot\n #![feature(rustc_diagnostic_macros)]\n+#![feature(import_shadowing)]\n \n extern crate arena;\n extern crate debug;"}, {"sha": "7e0ba613e3db5246e30185fbb9253c5f8aa38e8f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -581,6 +581,9 @@ impl LintPass for UnusedAttribute {\n             \"thread_local\",\n             \"no_debug\",\n \n+            // used in resolve\n+            \"prelude_import\",\n+\n             // not used anywhere (!?) but apparently we want to keep them around\n             \"comment\",\n             \"desc\","}, {"sha": "29b5db51cc429b55a5f1bbb954b028d0f7fb6e88", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -42,7 +42,6 @@ use syntax::ast_map::{PathElem, PathElems};\n use syntax::ast_map;\n use syntax::ast_util::*;\n use syntax::ast_util;\n-use syntax::ast_util::PostExpansionMethod;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::diagnostic::SpanHandler;"}, {"sha": "ff2830421e065cf8808e89ef2245474a51d3c072", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -47,8 +47,8 @@ use rbml::io::SeekableMemWriter;\n use rbml::{reader, writer};\n use rbml;\n use serialize;\n-use serialize::{Encoder, Encodable, EncoderHelpers, DecoderHelpers};\n-use serialize::{Decoder, Decodable};\n+use serialize::{Decodable, Decoder, DecoderHelpers, Encodable};\n+use serialize::{EncoderHelpers};\n \n #[cfg(test)] use syntax::parse;\n #[cfg(test)] use syntax::print::pprust;\n@@ -620,6 +620,8 @@ fn encode_method_callee(ecx: &e::EncodeContext,\n                         rbml_w: &mut Encoder,\n                         adjustment: typeck::ExprAdjustment,\n                         method: &MethodCallee) {\n+    use serialize::Encoder;\n+\n     rbml_w.emit_struct(\"MethodCallee\", 4, |rbml_w| {\n         rbml_w.emit_struct_field(\"adjustment\", 0u, |rbml_w| {\n             adjustment.encode(rbml_w)\n@@ -695,6 +697,8 @@ fn encode_vtable_res_with_key(ecx: &e::EncodeContext,\n                               rbml_w: &mut Encoder,\n                               adjustment: typeck::ExprAdjustment,\n                               dr: &typeck::vtable_res) {\n+    use serialize::Encoder;\n+\n     rbml_w.emit_struct(\"VtableWithKey\", 2, |rbml_w| {\n         rbml_w.emit_struct_field(\"adjustment\", 0u, |rbml_w| {\n             adjustment.encode(rbml_w)\n@@ -728,6 +732,8 @@ pub fn encode_vtable_param_res(ecx: &e::EncodeContext,\n \n pub fn encode_unboxed_closure_kind(ebml_w: &mut Encoder,\n                                    kind: ty::UnboxedClosureKind) {\n+    use serialize::Encoder;\n+\n     ebml_w.emit_enum(\"UnboxedClosureKind\", |ebml_w| {\n         match kind {\n             ty::FnUnboxedClosureKind => {\n@@ -755,6 +761,8 @@ pub fn encode_unboxed_closure_kind(ebml_w: &mut Encoder,\n pub fn encode_vtable_origin(ecx: &e::EncodeContext,\n                             rbml_w: &mut Encoder,\n                             vtable_origin: &typeck::vtable_origin) {\n+    use serialize::Encoder;\n+\n     rbml_w.emit_enum(\"vtable_origin\", |rbml_w| {\n         match *vtable_origin {\n           typeck::vtable_static(def_id, ref substs, ref vtable_res) => {\n@@ -985,6 +993,8 @@ impl<'a> rbml_writer_helpers for Encoder<'a> {\n     fn emit_polytype(&mut self,\n                  ecx: &e::EncodeContext,\n                  pty: ty::Polytype) {\n+        use serialize::Encoder;\n+\n         self.emit_struct(\"Polytype\", 2, |this| {\n             this.emit_struct_field(\"generics\", 0, |this| {\n                 this.emit_struct(\"Generics\", 2, |this| {\n@@ -1013,6 +1023,8 @@ impl<'a> rbml_writer_helpers for Encoder<'a> {\n     }\n \n     fn emit_auto_adjustment(&mut self, ecx: &e::EncodeContext, adj: &ty::AutoAdjustment) {\n+        use serialize::Encoder;\n+\n         self.emit_enum(\"AutoAdjustment\", |this| {\n             match *adj {\n                 ty::AutoAddEnv(store) => {"}, {"sha": "bd779b865d69516cbfc8297d0517fc48a85a4b49", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 283, "deletions": 34, "changes": 317, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -21,10 +21,31 @@ use middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use middle::ty::{ExplicitSelfCategory, StaticExplicitSelfCategory};\n use util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n \n-use syntax::ast::*;\n+use syntax::ast::{Arm, BindByRef, BindByValue, BindingMode, Block, Crate};\n+use syntax::ast::{DeclItem, DefId, Expr, ExprAgain, ExprBreak, ExprField};\n+use syntax::ast::{ExprFnBlock, ExprForLoop, ExprLoop, ExprMethodCall};\n+use syntax::ast::{ExprPath, ExprProc, ExprStruct, ExprUnboxedFn, FnDecl};\n+use syntax::ast::{ForeignItem, ForeignItemFn, ForeignItemStatic, Generics};\n+use syntax::ast::{Ident, ImplItem, Item, ItemEnum, ItemFn, ItemForeignMod};\n+use syntax::ast::{ItemImpl, ItemMac, ItemMod, ItemStatic, ItemStruct};\n+use syntax::ast::{ItemTrait, ItemTy, LOCAL_CRATE, Local, Method};\n+use syntax::ast::{MethodImplItem, Mod, Name, NamedField, NodeId};\n+use syntax::ast::{OtherRegionTyParamBound, P, Pat, PatEnum, PatIdent, PatLit};\n+use syntax::ast::{PatRange, PatStruct, Path, PathListIdent, PathListMod};\n+use syntax::ast::{PrimTy, Public, SelfExplicit, SelfStatic};\n+use syntax::ast::{StaticRegionTyParamBound, StmtDecl, StructField};\n+use syntax::ast::{StructVariantKind, TraitRef, TraitTyParamBound};\n+use syntax::ast::{TupleVariantKind, Ty, TyBool, TyChar, TyClosure, TyF32};\n+use syntax::ast::{TyF64, TyFloat, TyI, TyI8, TyI16, TyI32, TyI64, TyInt};\n+use syntax::ast::{TyParam, TyParamBound, TyPath, TyPtr, TyProc, TyRptr};\n+use syntax::ast::{TyStr, TyU, TyU8, TyU16, TyU32, TyU64, TyUint};\n+use syntax::ast::{UnboxedFnTyParamBound, UnnamedField, UnsafeFn, Variant};\n+use syntax::ast::{ViewItem, ViewItemExternCrate, ViewItemUse, ViewPathGlob};\n+use syntax::ast::{ViewPathList, ViewPathSimple, Visibility};\n use syntax::ast;\n-use syntax::ast_util::{local_def, PostExpansionMethod};\n-use syntax::ast_util::{walk_pat, trait_item_to_ty_method};\n+use syntax::ast_util::{PostExpansionMethod, local_def};\n+use syntax::ast_util::{trait_item_to_ty_method, walk_pat};\n+use syntax::attr::AttrMetaMethods;\n use syntax::ext::mtwt;\n use syntax::parse::token::special_names;\n use syntax::parse::token::special_idents;\n@@ -355,21 +376,24 @@ struct ImportDirective {\n     span: Span,\n     id: NodeId,\n     is_public: bool, // see note in ImportResolution about how to use this\n+    shadowable: bool,\n }\n \n impl ImportDirective {\n     fn new(module_path: Vec<Ident> ,\n            subclass: ImportDirectiveSubclass,\n            span: Span,\n            id: NodeId,\n-           is_public: bool)\n+           is_public: bool,\n+           shadowable: bool)\n            -> ImportDirective {\n         ImportDirective {\n             module_path: module_path,\n             subclass: subclass,\n             span: span,\n             id: id,\n             is_public: is_public,\n+            shadowable: shadowable,\n         }\n     }\n }\n@@ -379,13 +403,18 @@ impl ImportDirective {\n struct Target {\n     target_module: Rc<Module>,\n     bindings: Rc<NameBindings>,\n+    shadowable: bool,\n }\n \n impl Target {\n-    fn new(target_module: Rc<Module>, bindings: Rc<NameBindings>) -> Target {\n+    fn new(target_module: Rc<Module>,\n+           bindings: Rc<NameBindings>,\n+           shadowable: bool)\n+           -> Target {\n         Target {\n             target_module: target_module,\n-            bindings: bindings\n+            bindings: bindings,\n+            shadowable: shadowable,\n         }\n     }\n }\n@@ -1018,6 +1047,10 @@ impl<'a> Resolver<'a> {\n \n         let module_ = reduced_graph_parent.module();\n \n+        self.check_for_conflicts_between_external_crates_and_items(&*module_,\n+                                                                   name.name,\n+                                                                   sp);\n+\n         // Add or reuse the child.\n         let child = module_.children.borrow().find_copy(&name.name);\n         match child {\n@@ -1481,6 +1514,14 @@ impl<'a> Resolver<'a> {\n                 // Build up the import directives.\n                 let module_ = parent.module();\n                 let is_public = view_item.vis == ast::Public;\n+                let shadowable =\n+                    view_item.attrs\n+                             .iter()\n+                             .any(|attr| {\n+                                 attr.name() == token::get_ident(\n+                                    special_idents::prelude_import)\n+                             });\n+\n                 match view_path.node {\n                     ViewPathSimple(binding, ref full_path, id) => {\n                         let source_ident =\n@@ -1497,7 +1538,8 @@ impl<'a> Resolver<'a> {\n                                                     subclass,\n                                                     view_path.span,\n                                                     id,\n-                                                    is_public);\n+                                                    is_public,\n+                                                    shadowable);\n                     }\n                     ViewPathList(_, ref source_items, _) => {\n                         // Make sure there's at most one `mod` import in the list.\n@@ -1542,7 +1584,9 @@ impl<'a> Resolver<'a> {\n                                 module_path,\n                                 SingleImport(name, name),\n                                 source_item.span,\n-                                source_item.node.id(), is_public);\n+                                source_item.node.id(),\n+                                is_public,\n+                                shadowable);\n                         }\n                     }\n                     ViewPathGlob(_, id) => {\n@@ -1551,7 +1595,8 @@ impl<'a> Resolver<'a> {\n                                                     GlobImport,\n                                                     view_path.span,\n                                                     id,\n-                                                    is_public);\n+                                                    is_public,\n+                                                    shadowable);\n                     }\n                 }\n             }\n@@ -1571,6 +1616,10 @@ impl<'a> Resolver<'a> {\n                                                               true));\n                     debug!(\"(build reduced graph for item) found extern `{}`\",\n                             self.module_to_string(&*external_module));\n+                    self.check_for_conflicts_between_external_crates(\n+                        &*parent.module(),\n+                        name.name,\n+                        view_item.span);\n                     parent.module().external_module_children.borrow_mut()\n                                    .insert(name.name, external_module.clone());\n                     self.build_reduced_graph_for_external_crate(external_module);\n@@ -1989,11 +2038,14 @@ impl<'a> Resolver<'a> {\n                               subclass: ImportDirectiveSubclass,\n                               span: Span,\n                               id: NodeId,\n-                              is_public: bool) {\n+                              is_public: bool,\n+                              shadowable: bool) {\n         module_.imports.borrow_mut().push(ImportDirective::new(module_path,\n                                                                subclass,\n-                                                               span, id,\n-                                                               is_public));\n+                                                               span,\n+                                                               id,\n+                                                               is_public,\n+                                                               shadowable));\n         self.unresolved_imports += 1;\n         // Bump the reference count on the name. Or, if this is a glob, set\n         // the appropriate flag.\n@@ -2241,8 +2293,7 @@ impl<'a> Resolver<'a> {\n                         resolution_result =\n                             self.resolve_glob_import(&*module_,\n                                                      containing_module,\n-                                                     import_directive.id,\n-                                                     import_directive.is_public,\n+                                                     import_directive,\n                                                      lp);\n                     }\n                 }\n@@ -2397,7 +2448,11 @@ impl<'a> Resolver<'a> {\n                                 None => {\n                                     return UnboundResult;\n                                 }\n-                                Some(Target {target_module, bindings}) => {\n+                                Some(Target {\n+                                    target_module,\n+                                    bindings,\n+                                    shadowable: _\n+                                }) => {\n                                     debug!(\"(resolving single import) found \\\n                                             import in ns {:?}\", namespace);\n                                     let id = import_resolution.id(namespace);\n@@ -2462,8 +2517,16 @@ impl<'a> Resolver<'a> {\n         match value_result {\n             BoundResult(ref target_module, ref name_bindings) => {\n                 debug!(\"(resolving single import) found value target\");\n-                import_resolution.value_target = Some(Target::new(target_module.clone(),\n-                                                                  name_bindings.clone()));\n+                self.check_for_conflicting_import(\n+                    &import_resolution.value_target,\n+                    directive.span,\n+                    target.name,\n+                    ValueNS);\n+\n+                import_resolution.value_target =\n+                    Some(Target::new(target_module.clone(),\n+                                     name_bindings.clone(),\n+                                     directive.shadowable));\n                 import_resolution.value_id = directive.id;\n                 import_resolution.is_public = directive.is_public;\n                 value_used_public = name_bindings.defined_in_public_namespace(ValueNS);\n@@ -2477,8 +2540,16 @@ impl<'a> Resolver<'a> {\n             BoundResult(ref target_module, ref name_bindings) => {\n                 debug!(\"(resolving single import) found type target: {:?}\",\n                        { name_bindings.type_def.borrow().clone().unwrap().type_def });\n+                self.check_for_conflicting_import(\n+                    &import_resolution.type_target,\n+                    directive.span,\n+                    target.name,\n+                    TypeNS);\n+\n                 import_resolution.type_target =\n-                    Some(Target::new(target_module.clone(), name_bindings.clone()));\n+                    Some(Target::new(target_module.clone(),\n+                                     name_bindings.clone(),\n+                                     directive.shadowable));\n                 import_resolution.type_id = directive.id;\n                 import_resolution.is_public = directive.is_public;\n                 type_used_public = name_bindings.defined_in_public_namespace(TypeNS);\n@@ -2489,6 +2560,12 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n+        self.check_for_conflicts_between_imports_and_items(\n+            module_,\n+            import_resolution,\n+            directive.span,\n+            target.name);\n+\n         if value_result.is_unbound() && type_result.is_unbound() {\n             let msg = format!(\"There is no `{}` in `{}`\",\n                               token::get_ident(source),\n@@ -2540,10 +2617,12 @@ impl<'a> Resolver<'a> {\n     fn resolve_glob_import(&mut self,\n                            module_: &Module,\n                            containing_module: Rc<Module>,\n-                           id: NodeId,\n-                           is_public: bool,\n+                           import_directive: &ImportDirective,\n                            lp: LastPrivate)\n                            -> ResolveResult<()> {\n+        let id = import_directive.id;\n+        let is_public = import_directive.is_public;\n+\n         // This function works in a highly imperative manner; it eagerly adds\n         // everything it can to the list of import resolutions of the module\n         // node.\n@@ -2619,19 +2698,24 @@ impl<'a> Resolver<'a> {\n \n         for (&name, name_bindings) in containing_module.children\n                                                        .borrow().iter() {\n-            self.merge_import_resolution(module_, containing_module.clone(),\n-                                         id, is_public,\n-                                         name, name_bindings.clone());\n+            self.merge_import_resolution(module_,\n+                                         containing_module.clone(),\n+                                         import_directive,\n+                                         name,\n+                                         name_bindings.clone());\n+\n         }\n \n         // Add external module children from the containing module.\n         for (&name, module) in containing_module.external_module_children\n                                                 .borrow().iter() {\n             let name_bindings =\n                 Rc::new(Resolver::create_name_bindings_from_module(module.clone()));\n-            self.merge_import_resolution(module_, containing_module.clone(),\n-                                         id, is_public,\n-                                         name, name_bindings);\n+            self.merge_import_resolution(module_,\n+                                         containing_module.clone(),\n+                                         import_directive,\n+                                         name,\n+                                         name_bindings);\n         }\n \n         // Record the destination of this import\n@@ -2650,10 +2734,12 @@ impl<'a> Resolver<'a> {\n     fn merge_import_resolution(&mut self,\n                                module_: &Module,\n                                containing_module: Rc<Module>,\n-                               id: NodeId,\n-                               is_public: bool,\n+                               import_directive: &ImportDirective,\n                                name: Name,\n                                name_bindings: Rc<NameBindings>) {\n+        let id = import_directive.id;\n+        let is_public = import_directive.is_public;\n+\n         let mut import_resolutions = module_.import_resolutions.borrow_mut();\n         let dest_import_resolution = import_resolutions.find_or_insert_with(name, |_| {\n             // Create a new import resolution from this child.\n@@ -2670,16 +2756,169 @@ impl<'a> Resolver<'a> {\n         if name_bindings.defined_in_public_namespace(ValueNS) {\n             debug!(\"(resolving glob import) ... for value target\");\n             dest_import_resolution.value_target =\n-                Some(Target::new(containing_module.clone(), name_bindings.clone()));\n+                Some(Target::new(containing_module.clone(),\n+                                 name_bindings.clone(),\n+                                 import_directive.shadowable));\n             dest_import_resolution.value_id = id;\n         }\n         if name_bindings.defined_in_public_namespace(TypeNS) {\n             debug!(\"(resolving glob import) ... for type target\");\n             dest_import_resolution.type_target =\n-                Some(Target::new(containing_module, name_bindings.clone()));\n+                Some(Target::new(containing_module,\n+                                 name_bindings.clone(),\n+                                 import_directive.shadowable));\n             dest_import_resolution.type_id = id;\n         }\n         dest_import_resolution.is_public = is_public;\n+\n+        self.check_for_conflicts_between_imports_and_items(\n+            module_,\n+            dest_import_resolution,\n+            import_directive.span,\n+            name);\n+    }\n+\n+    /// Checks that imported names and items don't have the same name.\n+    fn check_for_conflicting_import(&mut self,\n+                                    target: &Option<Target>,\n+                                    import_span: Span,\n+                                    name: Name,\n+                                    namespace: Namespace) {\n+        if self.session.features.import_shadowing.get() {\n+            return\n+        }\n+\n+        match *target {\n+            Some(ref target) if !target.shadowable => {\n+                let msg = format!(\"a {} named `{}` has already been imported \\\n+                                   in this module\",\n+                                  match namespace {\n+                                    TypeNS => \"type\",\n+                                    ValueNS => \"value\",\n+                                  },\n+                                  token::get_name(name).get());\n+                self.session.span_err(import_span, msg.as_slice());\n+            }\n+            Some(_) | None => {}\n+        }\n+    }\n+\n+    /// Checks that imported names and items don't have the same name.\n+    fn check_for_conflicts_between_imports_and_items(&mut self,\n+                                                     module: &Module,\n+                                                     import_resolution:\n+                                                     &mut ImportResolution,\n+                                                     import_span: Span,\n+                                                     name: Name) {\n+        if self.session.features.import_shadowing.get() {\n+            return\n+        }\n+\n+        // First, check for conflicts between imports and `extern crate`s.\n+        if module.external_module_children\n+                 .borrow()\n+                 .contains_key(&name) {\n+            match import_resolution.type_target {\n+                Some(ref target) if !target.shadowable => {\n+                    self.session.span_err(import_span,\n+                                          \"import conflicts with imported \\\n+                                           crate in this module\");\n+                }\n+                Some(_) | None => {}\n+            }\n+        }\n+\n+        // Check for item conflicts.\n+        let children = module.children.borrow();\n+        let name_bindings = match children.find(&name) {\n+            None => {\n+                // There can't be any conflicts.\n+                return\n+            }\n+            Some(ref name_bindings) => (*name_bindings).clone(),\n+        };\n+\n+        match import_resolution.value_target {\n+            Some(ref target) if !target.shadowable => {\n+                match *name_bindings.value_def.borrow() {\n+                    None => {}\n+                    Some(ref value) => {\n+                        self.session.span_err(import_span,\n+                                              \"import conflicts with value \\\n+                                               in this module\");\n+                        match value.value_span {\n+                            None => {}\n+                            Some(span) => {\n+                                self.session\n+                                    .span_note(span,\n+                                               \"note conflicting value here\");\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            Some(_) | None => {}\n+        }\n+\n+        match import_resolution.type_target {\n+            Some(ref target) if !target.shadowable => {\n+                match *name_bindings.type_def.borrow() {\n+                    None => {}\n+                    Some(ref ty) => {\n+                        self.session.span_err(import_span,\n+                                              \"import conflicts with type in \\\n+                                               this module\");\n+                        match ty.type_span {\n+                            None => {}\n+                            Some(span) => {\n+                                self.session\n+                                    .span_note(span,\n+                                               \"note conflicting type here\")\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            Some(_) | None => {}\n+        }\n+    }\n+\n+    /// Checks that the names of external crates don't collide with other\n+    /// external crates.\n+    fn check_for_conflicts_between_external_crates(&self,\n+                                                   module: &Module,\n+                                                   name: Name,\n+                                                   span: Span) {\n+        if self.session.features.import_shadowing.get() {\n+            return\n+        }\n+\n+        if module.external_module_children.borrow().contains_key(&name) {\n+            self.session\n+                .span_err(span,\n+                          format!(\"an external crate named `{}` has already \\\n+                                   been imported into this module\",\n+                                  token::get_name(name).get()).as_slice());\n+        }\n+    }\n+\n+    /// Checks that the names of items don't collide with external crates.\n+    fn check_for_conflicts_between_external_crates_and_items(&self,\n+                                                             module: &Module,\n+                                                             name: Name,\n+                                                             span: Span) {\n+        if self.session.features.import_shadowing.get() {\n+            return\n+        }\n+\n+        if module.external_module_children.borrow().contains_key(&name) {\n+            self.session\n+                .span_err(span,\n+                          format!(\"the name `{}` conflicts with an external \\\n+                                   crate that has been imported into this \\\n+                                   module\",\n+                                  token::get_name(name).get()).as_slice());\n+        }\n     }\n \n     /// Resolves the given module path from the given root `module_`.\n@@ -2947,7 +3186,9 @@ impl<'a> Resolver<'a> {\n             Some(name_bindings)\n                     if name_bindings.defined_in_namespace(namespace) => {\n                 debug!(\"top name bindings succeeded\");\n-                return Success((Target::new(module_.clone(), name_bindings.clone()),\n+                return Success((Target::new(module_.clone(),\n+                                            name_bindings.clone(),\n+                                            false),\n                                false));\n             }\n             Some(_) | None => { /* Not found; continue. */ }\n@@ -2987,7 +3228,10 @@ impl<'a> Resolver<'a> {\n                     let name_bindings =\n                         Rc::new(Resolver::create_name_bindings_from_module(module));\n                     debug!(\"lower name bindings succeeded\");\n-                    return Success((Target::new(module_, name_bindings), false));\n+                    return Success((Target::new(module_,\n+                                                name_bindings,\n+                                                false),\n+                                    false));\n                 }\n             }\n         }\n@@ -3210,7 +3454,9 @@ impl<'a> Resolver<'a> {\n             Some(name_bindings)\n                     if name_bindings.defined_in_namespace(namespace) => {\n                 debug!(\"(resolving name in module) found node as child\");\n-                return Success((Target::new(module_.clone(), name_bindings.clone()),\n+                return Success((Target::new(module_.clone(),\n+                                            name_bindings.clone(),\n+                                            false),\n                                false));\n             }\n             Some(_) | None => {\n@@ -3261,7 +3507,10 @@ impl<'a> Resolver<'a> {\n                 Some(module) => {\n                     let name_bindings =\n                         Rc::new(Resolver::create_name_bindings_from_module(module));\n-                    return Success((Target::new(module_, name_bindings), false));\n+                    return Success((Target::new(module_,\n+                                                name_bindings,\n+                                                false),\n+                                    false));\n                 }\n             }\n         }"}, {"sha": "5f54fbef74e186abfcfa85254e0705fde405932b", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -203,7 +203,8 @@ use middle::pat_util::*;\n use middle::resolve::DefMap;\n use middle::trans::adt;\n use middle::trans::base::*;\n-use middle::trans::build::*;\n+use middle::trans::build::{And, BitCast, Br, CondBr, GEPi, InBoundsGEP, Load};\n+use middle::trans::build::{Mul, Not, Store, Sub, Switch, add_comment};\n use middle::trans::build;\n use middle::trans::callee;\n use middle::trans::cleanup;"}, {"sha": "2098f923dbe062bad894dc90c9cf7b72341ae9c0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -47,11 +47,17 @@ use middle::trans::builder::{Builder, noname};\n use middle::trans::callee;\n use middle::trans::cleanup::{CleanupMethods, ScopeId};\n use middle::trans::cleanup;\n-use middle::trans::common::*;\n+use middle::trans::common::{Block, C_bool, C_bytes, C_i32, C_integral, C_nil};\n+use middle::trans::common::{C_null, C_struct, C_u64, C_u8, C_uint, C_undef};\n+use middle::trans::common::{CrateContext, ExternMap, FunctionContext};\n+use middle::trans::common::{NodeInfo, Result, SubstP, monomorphize_type};\n+use middle::trans::common::{node_id_type, param_substs, return_type_is_void};\n+use middle::trans::common::{tydesc_info, type_is_immediate};\n+use middle::trans::common::{type_is_zero_size, val_ty};\n+use middle::trans::common;\n use middle::trans::consts;\n use middle::trans::controlflow;\n use middle::trans::datum;\n-// use middle::trans::datum::{Datum, Lvalue, Rvalue, ByRef, ByValue};\n use middle::trans::debuginfo;\n use middle::trans::expr;\n use middle::trans::foreign;\n@@ -1074,7 +1080,7 @@ pub fn raw_block<'a>(\n                  is_lpad: bool,\n                  llbb: BasicBlockRef)\n                  -> &'a Block<'a> {\n-    Block::new(llbb, is_lpad, None, fcx)\n+    common::Block::new(llbb, is_lpad, None, fcx)\n }\n \n pub fn with_cond<'a>("}, {"sha": "ac4c56a1d1f11669a2df8dca07b664f2d42c72c5", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -15,8 +15,8 @@ use std::cmp;\n use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n use llvm::{StructRetAttribute, ZExtAttribute};\n+use middle::trans::cabi::{ArgType, FnType};\n use middle::trans::context::CrateContext;\n-use middle::trans::cabi::*;\n use middle::trans::type_::Type;\n \n fn align_up_to(off: uint, a: uint) -> uint {"}, {"sha": "b5de0ae29d41aacae588419bd04fe1dc06843876", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use syntax::abi::{OsWindows, OsMacos, OsiOS};\n use llvm::*;\n-use super::cabi::*;\n+use middle::trans::cabi::{ArgType, FnType};\n+use middle::trans::type_::Type;\n use super::common::*;\n use super::machine::*;\n-use middle::trans::type_::Type;\n+use syntax::abi::{OsWindows, OsMacos, OsiOS};\n \n pub fn compute_abi_info(ccx: &CrateContext,\n                         atys: &[Type],"}, {"sha": "32e481dd2d48020661fb8fdeb3022d1fb4768439", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -17,7 +17,7 @@ use llvm;\n use llvm::{Integer, Pointer, Float, Double};\n use llvm::{Struct, Array, Attribute};\n use llvm::{StructRetAttribute, ByValAttribute, ZExtAttribute};\n-use middle::trans::cabi::*;\n+use middle::trans::cabi::{ArgType, FnType};\n use middle::trans::context::CrateContext;\n use middle::trans::type_::Type;\n "}, {"sha": "6bcd9aefcc6df875d926d1bb197bedc56654200c", "filename": "src/librustc/middle/trans/cabi_x86_win64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_win64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_win64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_win64.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use llvm::*;\n-use super::cabi::*;\n use super::common::*;\n use super::machine::*;\n+use middle::trans::cabi::{ArgType, FnType};\n use middle::trans::type_::Type;\n \n // Win64 ABI: http://msdn.microsoft.com/en-us/library/zthk2dkh.aspx"}, {"sha": "59148c5d4c3fdbd66839881d23c5b7aea899842e", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -37,7 +37,6 @@ use middle::trans::closure;\n use middle::trans::common;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n-use middle::trans::datum::{Datum, KindOps};\n use middle::trans::expr;\n use middle::trans::glue;\n use middle::trans::inline;"}, {"sha": "7a1864448e26be6cdc9aaa8b3fabfef321aa17d0", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -22,10 +22,10 @@ use middle::trans::cleanup;\n use middle::trans::common::*;\n use middle::trans::consts;\n use middle::trans::datum;\n-use middle::trans::debuginfo;\n use middle::trans::expr;\n use middle::trans::meth;\n use middle::trans::type_::Type;\n+use middle::trans;\n use middle::ty;\n use middle::typeck::MethodCall;\n use util::ppaux::Repr;\n@@ -66,7 +66,8 @@ pub fn trans_stmt<'a>(cx: &'a Block<'a>,\n                 ast::DeclLocal(ref local) => {\n                     bcx = init_local(bcx, &**local);\n                     if cx.sess().opts.debuginfo == FullDebugInfo {\n-                        debuginfo::create_local_var_metadata(bcx, &**local);\n+                        trans::debuginfo::create_local_var_metadata(bcx,\n+                                                                    &**local);\n                     }\n                 }\n                 // Inner items are visited by `trans_item`/`trans_meth`.\n@@ -154,7 +155,7 @@ pub fn trans_if<'a>(bcx: &'a Block<'a>,\n             }\n             // if true { .. } [else { .. }]\n             bcx = trans_block(bcx, &*thn, dest);\n-            debuginfo::clear_source_location(bcx.fcx);\n+            trans::debuginfo::clear_source_location(bcx.fcx);\n         } else {\n             let mut trans = TransItemVisitor { ccx: bcx.fcx.ccx } ;\n             trans.visit_block(&*thn, ());\n@@ -163,7 +164,7 @@ pub fn trans_if<'a>(bcx: &'a Block<'a>,\n                 // if false { .. } else { .. }\n                 Some(elexpr) => {\n                     bcx = expr::trans_into(bcx, &*elexpr, dest);\n-                    debuginfo::clear_source_location(bcx.fcx);\n+                    trans::debuginfo::clear_source_location(bcx.fcx);\n                 }\n \n                 // if false { .. }\n@@ -177,7 +178,7 @@ pub fn trans_if<'a>(bcx: &'a Block<'a>,\n     let name = format!(\"then-block-{}-\", thn.id);\n     let then_bcx_in = bcx.fcx.new_id_block(name.as_slice(), thn.id);\n     let then_bcx_out = trans_block(then_bcx_in, &*thn, dest);\n-    debuginfo::clear_source_location(bcx.fcx);\n+    trans::debuginfo::clear_source_location(bcx.fcx);\n \n     let next_bcx;\n     match els {\n@@ -198,7 +199,7 @@ pub fn trans_if<'a>(bcx: &'a Block<'a>,\n \n     // Clear the source location because it is still set to whatever has been translated\n     // right before.\n-    debuginfo::clear_source_location(next_bcx.fcx);\n+    trans::debuginfo::clear_source_location(next_bcx.fcx);\n \n     next_bcx\n }"}, {"sha": "3a2c4857aad18554d5d556e9f55b59d53899e250", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -51,7 +51,10 @@ use std::ops;\n use std::rc::Rc;\n use std::collections::{HashMap, HashSet};\n use syntax::abi;\n-use syntax::ast::*;\n+use syntax::ast::{CrateNum, DefId, FnStyle, Ident, ItemTrait, LOCAL_CRATE};\n+use syntax::ast::{MutImmutable, MutMutable, Name, NamedField, NodeId};\n+use syntax::ast::{Onceness, StmtExpr, StmtSemi, StructField, UnnamedField};\n+use syntax::ast::{Visibility};\n use syntax::ast_util::{is_local, lit_is_str};\n use syntax::ast_util;\n use syntax::attr;"}, {"sha": "d68fef306227ab10a6897b8e8e6f161c7375256f", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -65,14 +65,15 @@ fn main() {\n \n */\n \n-use core::prelude::*;\n-\n use alloc::libc_heap::malloc_raw;\n use collections::string::String;\n use collections::hash;\n use core::fmt;\n use core::kinds::marker;\n use core::mem;\n+use core::prelude::{Clone, Collection, Drop, Eq, ImmutableSlice, Iterator};\n+use core::prelude::{MutableSlice, None, Option, Ordering, PartialEq};\n+use core::prelude::{PartialOrd, RawPtr, Some, StrSlice, range};\n use core::ptr;\n use core::raw::Slice;\n use core::slice;"}, {"sha": "70ce85ee649a9254056d19f6c41bade494dc9559", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -18,9 +18,13 @@\n \n #![feature(macro_rules, phase, globs, thread_local, managed_boxes, asm)]\n #![feature(linkage, lang_items, unsafe_destructor, default_type_params)]\n+#![feature(import_shadowing)]\n #![no_std]\n #![experimental]\n \n+// NOTE(stage0, pcwalton): Remove after snapshot.\n+#![allow(unknown_features)]\n+\n #[phase(plugin, link)] extern crate core;\n extern crate alloc;\n extern crate libc;"}, {"sha": "6a0b599179c0cc11f36b50128b19eb854bf3089e", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -42,7 +42,7 @@ use core::prelude::*;\n \n use alloc::heap;\n use collections::treemap::TreeMap;\n-use collections::{Map, MutableMap};\n+use collections::MutableMap;\n use core::cmp;\n use core::kinds::marker;\n use core::mem;\n@@ -261,6 +261,8 @@ impl<T: 'static> KeyValue<T> {\n     /// assert_eq!(*key.get().unwrap(), 3);\n     /// ```\n     pub fn get(&'static self) -> Option<Ref<T>> {\n+        use collections::Map;\n+\n         let map = match unsafe { get_local_map() } {\n             Some(map) => map,\n             None => return None,"}, {"sha": "acd53535e3bee0c4a4641ad8bef696ebab42e321", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -13,15 +13,15 @@\n //! local storage, and logging. Even a 'freestanding' Rust would likely want\n //! to implement this.\n \n-use core::prelude::*;\n-\n use alloc::arc::Arc;\n use alloc::boxed::{BoxAny, Box};\n use core::any::Any;\n use core::atomic::{AtomicUint, SeqCst};\n use core::iter::Take;\n use core::kinds::marker;\n use core::mem;\n+use core::prelude::{Clone, Drop, Err, Iterator, None, Ok, Option, Send, Some};\n+use core::prelude::{drop};\n use core::raw;\n \n use local_data;"}, {"sha": "459d655b4c998651b7951b8ddaa361708c3b67ce", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -72,7 +72,7 @@ use core::raw::Closure;\n use libc::c_void;\n \n use local::Local;\n-use task::{Task, Result};\n+use task::Task;\n \n use uw = libunwind;\n "}, {"sha": "841567a9120c25b4d1cea0707c024721240f4fa2", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -437,8 +437,6 @@ pub use core::fmt::{secret_signed, secret_lower_hex, secret_upper_hex};\n #[doc(hidden)]\n pub use core::fmt::{secret_bool, secret_char, secret_octal, secret_binary};\n #[doc(hidden)]\n-pub use core::fmt::{secret_bool, secret_char, secret_octal, secret_binary};\n-#[doc(hidden)]\n pub use core::fmt::{secret_float, secret_upper_exp, secret_lower_exp};\n #[doc(hidden)]\n pub use core::fmt::{secret_pointer};"}, {"sha": "eb251075418390a27100092c483b11b02a499cbe", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -26,12 +26,7 @@ instances as clients.\n \n use prelude::*;\n \n-use c_str::ToCStr;\n-use clone::Clone;\n-use io::{Listener, Acceptor, Reader, Writer, IoResult, IoError};\n-use io::{standard_error, TimedOut};\n-use kinds::Send;\n-use boxed::Box;\n+use io::{Listener, Acceptor, IoResult, IoError, TimedOut, standard_error};\n use rt::rtio::{IoFactory, LocalIo, RtioUnixListener};\n use rt::rtio::{RtioUnixAcceptor, RtioPipe};\n use time::Duration;"}, {"sha": "1304877fc14c5a290fe6a0d6a456ae20b12773b8", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -20,7 +20,6 @@ use prelude::*;\n use io::{IoResult, IoError};\n use libc;\n use os;\n-use boxed::Box;\n use rt::rtio::{RtioPipe, LocalIo};\n \n /// A synchronous, in-memory pipe."}, {"sha": "dd6c1f6016c50023a55d1e941d29f37953ddea2f", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -20,7 +20,6 @@ use io::{IoResult, IoError};\n use io;\n use libc;\n use mem;\n-use boxed::Box;\n use rt::rtio::{RtioProcess, ProcessConfig, IoFactory, LocalIo};\n use rt::rtio;\n use c_str::CString;"}, {"sha": "1fe0ba780a6fd2b820bcdb68f92725c2878fd8c8", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -13,7 +13,6 @@\n use prelude::*;\n use cmp;\n use io;\n-use boxed::Box;\n use slice::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it."}, {"sha": "fb6599d808c3eb97b481686affd6f2c8adaa9cea", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -107,10 +107,14 @@\n \n #![feature(macro_rules, globs, managed_boxes, linkage)]\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n+#![feature(import_shadowing)]\n \n // Don't link to std. We are std.\n #![no_std]\n \n+// NOTE(stage0, pcwalton): Remove after snapshot.\n+#![allow(unknown_features)]\n+\n #![allow(deprecated)]\n #![deny(missing_doc)]\n "}, {"sha": "d91f5579c0d7a77162d922c0d9c030fc98020255", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -22,7 +22,6 @@ use intrinsics;\n use libc::c_int;\n use num::strconv;\n use num;\n-use string::String;\n \n pub use core::f32::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON, MIN_VALUE};\n pub use core::f32::{MIN_POS_VALUE, MAX_VALUE, MIN_EXP, MAX_EXP, MIN_10_EXP};"}, {"sha": "d8d118a6721d9a3f8166eefb69a7060a1bc80311", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -21,7 +21,6 @@ use intrinsics;\n use libc::c_int;\n use num::strconv;\n use num;\n-use string::String;\n \n pub use core::f64::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON, MIN_VALUE};\n pub use core::f64::{MIN_POS_VALUE, MAX_VALUE, MIN_EXP, MAX_EXP, MIN_10_EXP};"}, {"sha": "cd7102a756a4dc0359e8a5329a20aa8776ba01ee", "filename": "src/libsync/atomic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fatomic.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -103,10 +103,9 @@\n \n #![allow(deprecated)]\n \n-use core::prelude::*;\n-\n use alloc::boxed::Box;\n use core::mem;\n+use core::prelude::{Drop, None, Option, Some};\n \n pub use core::atomic::{AtomicBool, AtomicInt, AtomicUint, AtomicPtr};\n pub use core::atomic::{Ordering, Relaxed, Release, Acquire, AcqRel, SeqCst};"}, {"sha": "1ee9fef191866cdeffbbe693edd6cafbdaebd5b3", "filename": "src/libsync/comm/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsync%2Fcomm%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsync%2Fcomm%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fsync.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -37,7 +37,6 @@ use core::prelude::*;\n \n use alloc::boxed::Box;\n use collections::Vec;\n-use collections::Collection;\n use core::mem;\n use core::cell::UnsafeCell;\n use rustrt::local::Local;"}, {"sha": "bed90743503c3abe3f94d037d54b6654378cf6e2", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -28,9 +28,13 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(phase, globs, macro_rules, unsafe_destructor)]\n+#![feature(import_shadowing)]\n #![deny(missing_doc)]\n #![no_std]\n \n+// NOTE(stage0, pcwalton): Remove after snapshot.\n+#![allow(unknown_features)]\n+\n #[phase(plugin, link)] extern crate core;\n extern crate alloc;\n extern crate collections;"}, {"sha": "4b185419b407c05a8f842e03dbfb81915f9060a3", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -198,7 +198,7 @@ use owned_slice::OwnedSlice;\n use parse::token::InternedString;\n use parse::token::special_idents;\n \n-use self::ty::*;\n+use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self, Ty};\n \n pub mod ty;\n "}, {"sha": "291c876082fdadf0b12a01d23f9e40de171e44f9", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -24,9 +24,12 @@\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n \n #![feature(macro_rules, globs, managed_boxes, default_type_params, phase)]\n-#![feature(quote, struct_variant, unsafe_destructor)]\n+#![feature(quote, struct_variant, unsafe_destructor, import_shadowing)]\n #![allow(deprecated)]\n \n+// NOTE(stage0, pcwalton): Remove after snapshot.\n+#![allow(unknown_features)]\n+\n extern crate fmt_macros;\n extern crate debug;\n #[phase(plugin, link)] extern crate log;"}, {"sha": "cce14be1ba52661f0fbb54d5f3a05f0a709e7dd0", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -456,62 +456,63 @@ declare_special_idents_and_keywords! {\n         (7,                          opaque,                 \"<opaque>\");\n         (8,                          unnamed_field,          \"<unnamed_field>\");\n         (9,                          type_self,              \"Self\");\n+        (10,                         prelude_import,         \"prelude_import\");\n     }\n \n     pub mod keywords {\n         // These ones are variants of the Keyword enum\n \n         'strict:\n-        (10,                         As,         \"as\");\n-        (11,                         Break,      \"break\");\n-        (12,                         Crate,      \"crate\");\n-        (13,                         Else,       \"else\");\n-        (14,                         Enum,       \"enum\");\n-        (15,                         Extern,     \"extern\");\n-        (16,                         False,      \"false\");\n-        (17,                         Fn,         \"fn\");\n-        (18,                         For,        \"for\");\n-        (19,                         If,         \"if\");\n-        (20,                         Impl,       \"impl\");\n-        (21,                         In,         \"in\");\n-        (22,                         Let,        \"let\");\n-        (23,                         Loop,       \"loop\");\n-        (24,                         Match,      \"match\");\n-        (25,                         Mod,        \"mod\");\n-        (26,                         Mut,        \"mut\");\n-        (27,                         Once,       \"once\");\n-        (28,                         Pub,        \"pub\");\n-        (29,                         Ref,        \"ref\");\n-        (30,                         Return,     \"return\");\n+        (11,                         As,         \"as\");\n+        (12,                         Break,      \"break\");\n+        (13,                         Crate,      \"crate\");\n+        (14,                         Else,       \"else\");\n+        (15,                         Enum,       \"enum\");\n+        (16,                         Extern,     \"extern\");\n+        (17,                         False,      \"false\");\n+        (18,                         Fn,         \"fn\");\n+        (19,                         For,        \"for\");\n+        (20,                         If,         \"if\");\n+        (21,                         Impl,       \"impl\");\n+        (22,                         In,         \"in\");\n+        (23,                         Let,        \"let\");\n+        (24,                         Loop,       \"loop\");\n+        (25,                         Match,      \"match\");\n+        (26,                         Mod,        \"mod\");\n+        (27,                         Mut,        \"mut\");\n+        (28,                         Once,       \"once\");\n+        (29,                         Pub,        \"pub\");\n+        (30,                         Ref,        \"ref\");\n+        (31,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME_NUM, Static,     \"static\");\n         (super::SELF_KEYWORD_NAME_NUM,   Self,       \"self\");\n-        (31,                         Struct,     \"struct\");\n-        (32,                         Super,      \"super\");\n-        (33,                         True,       \"true\");\n-        (34,                         Trait,      \"trait\");\n-        (35,                         Type,       \"type\");\n-        (36,                         Unsafe,     \"unsafe\");\n-        (37,                         Use,        \"use\");\n-        (38,                         Virtual,    \"virtual\");\n-        (39,                         While,      \"while\");\n-        (40,                         Continue,   \"continue\");\n-        (41,                         Proc,       \"proc\");\n-        (42,                         Box,        \"box\");\n-        (43,                         Const,      \"const\");\n-        (44,                         Where,      \"where\");\n+        (32,                         Struct,     \"struct\");\n+        (33,                         Super,      \"super\");\n+        (34,                         True,       \"true\");\n+        (35,                         Trait,      \"trait\");\n+        (36,                         Type,       \"type\");\n+        (37,                         Unsafe,     \"unsafe\");\n+        (38,                         Use,        \"use\");\n+        (39,                         Virtual,    \"virtual\");\n+        (40,                         While,      \"while\");\n+        (41,                         Continue,   \"continue\");\n+        (42,                         Proc,       \"proc\");\n+        (43,                         Box,        \"box\");\n+        (44,                         Const,      \"const\");\n+        (45,                         Where,      \"where\");\n \n         'reserved:\n-        (45,                         Alignof,    \"alignof\");\n-        (46,                         Be,         \"be\");\n-        (47,                         Offsetof,   \"offsetof\");\n-        (48,                         Priv,       \"priv\");\n-        (49,                         Pure,       \"pure\");\n-        (50,                         Sizeof,     \"sizeof\");\n-        (51,                         Typeof,     \"typeof\");\n-        (52,                         Unsized,    \"unsized\");\n-        (53,                         Yield,      \"yield\");\n-        (54,                         Do,         \"do\");\n+        (46,                         Alignof,    \"alignof\");\n+        (47,                         Be,         \"be\");\n+        (48,                         Offsetof,   \"offsetof\");\n+        (49,                         Priv,       \"priv\");\n+        (50,                         Pure,       \"pure\");\n+        (51,                         Sizeof,     \"sizeof\");\n+        (52,                         Typeof,     \"typeof\");\n+        (53,                         Unsized,    \"unsized\");\n+        (54,                         Yield,      \"yield\");\n+        (55,                         Do,         \"do\");\n     }\n }\n "}, {"sha": "98dd129f3d2518e092d4f562a4afed25251c4ef6", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -523,7 +523,7 @@ impl rand::Rand for Uuid {\n }\n \n #[cfg(test)]\n-mod test {\n+mod uuidtest {\n     use super::{Uuid, VariantMicrosoft, VariantNCS, VariantRFC4122,\n                 Version1Mac, Version2Dce, Version3Md5, Version4Random,\n                 Version5Sha1};"}, {"sha": "13cceaa71ae06c66d5e9e0b430087cd88e99add2", "filename": "src/test/compile-fail/ambig_impl_2_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -11,9 +11,9 @@\n // aux-build:ambig_impl_2_lib.rs\n extern crate ambig_impl_2_lib;\n use ambig_impl_2_lib::me;\n-trait me {\n+trait me2 {\n     fn me(&self) -> uint;\n }\n-impl me for uint { fn me(&self) -> uint { *self } } //~ NOTE is `uint.me::me`\n+impl me2 for uint { fn me(&self) -> uint { *self } } //~ NOTE is `uint.me2::me`\n fn main() { 1u.me(); } //~ ERROR multiple applicable methods in scope\n //~^ NOTE is `ambig_impl_2_lib::uint.me::me`"}, {"sha": "baea483ad982b0abd65bd2297046f049ee06e8f8", "filename": "src/test/compile-fail/issue-7663.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/85fd37f876dad1d4db02208f8a56f02228d975b0/src%2Ftest%2Fcompile-fail%2Fissue-7663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fd37f876dad1d4db02208f8a56f02228d975b0/src%2Ftest%2Fcompile-fail%2Fissue-7663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7663.rs?ref=85fd37f876dad1d4db02208f8a56f02228d975b0", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(globs)]\n-#![deny(unused_imports)]\n-#![allow(dead_code)]\n-\n-mod test1 {\n-\n-    mod foo { pub fn p() -> int { 1 } }\n-    mod bar { pub fn p() -> int { 2 } }\n-\n-    pub mod baz {\n-        use test1::foo::*; //~ ERROR: unused import\n-        use test1::bar::*;\n-\n-        pub fn my_main() { assert!(p() == 2); }\n-    }\n-}\n-\n-mod test2 {\n-\n-    mod foo { pub fn p() -> int { 1 } }\n-    mod bar { pub fn p() -> int { 2 } }\n-\n-    pub mod baz {\n-        use test2::foo::p; //~ ERROR: unused import\n-        use test2::bar::p;\n-\n-        pub fn my_main() { assert!(p() == 2); }\n-    }\n-}\n-\n-mod test3 {\n-\n-    mod foo { pub fn p() -> int { 1 } }\n-    mod bar { pub fn p() -> int { 2 } }\n-\n-    pub mod baz {\n-        use test3::foo::*; //~ ERROR: unused import\n-        use test3::bar::p;\n-\n-        pub fn my_main() { assert!(p() == 2); }\n-    }\n-}\n-\n-fn main() {\n-}\n-"}, {"sha": "a90a1ac1a75f0ed66403f2e1b5c4a0cab1d87816", "filename": "src/test/compile-fail/issue-9957.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -8,13 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub extern crate std; //~ ERROR: `pub` visibility is not allowed\n-extern crate std;\n-\n-pub use std::bool;\n-use std::bool;\n+pub extern crate core; //~ ERROR: `pub` visibility is not allowed\n \n fn main() {\n     pub use std::bool; //~ ERROR: imports in functions are never reachable\n-    use std::bool;\n }"}, {"sha": "62ea337656d77522feead4d39ba79844f08aa007", "filename": "src/test/compile-fail/lint-unused-import-tricky-globs.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/85fd37f876dad1d4db02208f8a56f02228d975b0/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fd37f876dad1d4db02208f8a56f02228d975b0/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs?ref=85fd37f876dad1d4db02208f8a56f02228d975b0", "patch": "@@ -1,86 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(globs)]\n-#![deny(unused_imports)]\n-#![allow(dead_code)]\n-\n-mod A {\n-    pub fn p() {}\n-}\n-mod B {\n-    pub fn p() {}\n-}\n-\n-mod C {\n-    pub fn q() {}\n-}\n-mod D {\n-    pub fn q() {}\n-}\n-\n-mod E {\n-    pub fn r() {}\n-}\n-mod F {\n-    pub fn r() {}\n-}\n-\n-mod G {\n-    pub fn s() {}\n-    pub fn t() {}\n-}\n-mod H {\n-    pub fn s() {}\n-}\n-\n-mod I {\n-    pub fn u() {}\n-    pub fn v() {}\n-}\n-mod J {\n-    pub fn u() {}\n-    pub fn v() {}\n-}\n-\n-mod K {\n-    pub fn w() {}\n-}\n-mod L {\n-    pub fn w() {}\n-}\n-\n-mod m {\n-   use A::p; //~ ERROR: unused import\n-   use B::p;\n-   use C::q; //~ ERROR: unused import\n-   use D::*;\n-   use E::*; //~ ERROR: unused import\n-   use F::r;\n-   use G::*;\n-   use H::*;\n-   use I::*;\n-   use J::v;\n-   use K::*; //~ ERROR: unused import\n-   use L::*;\n-\n-   #[main]\n-   fn my_main() {\n-       p();\n-       q();\n-       r();\n-       s();\n-       t();\n-       u();\n-       v();\n-       w();\n-   }\n-}\n-"}, {"sha": "39e344da115e1cd45aa6ecfff6c22335ebb43fc6", "filename": "src/test/compile-fail/lint-unused-import-tricky-names.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/85fd37f876dad1d4db02208f8a56f02228d975b0/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fd37f876dad1d4db02208f8a56f02228d975b0/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs?ref=85fd37f876dad1d4db02208f8a56f02228d975b0", "patch": "@@ -1,48 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(unused_imports)]\n-#![allow(non_camel_case_types)]\n-#![allow(dead_code)]\n-\n-// Regression test for issue #6633\n-mod issue6633 {\n-    use self::foo::name::name; //~ ERROR: unused import\n-    use self::foo::name;\n-\n-    pub mod foo {\n-        pub mod name {\n-            pub type a = int;\n-            pub mod name {\n-                pub type a = f64;\n-            }\n-        }\n-    }\n-\n-    fn bar() -> name::a { 1 }\n-}\n-\n-// Regression test for issue #6935\n-mod issue6935 {\n-    use self::a::foo::a::foo;\n-    use self::a::foo; //~ ERROR: unused import\n-\n-    pub mod a {\n-        pub mod foo {\n-            pub mod a {\n-                pub fn foo() {}\n-            }\n-        }\n-    }\n-\n-    fn bar() { foo(); }\n-}\n-\n-fn main(){}"}, {"sha": "769bdae80f118d74226f5439b5d662379d49a8ed", "filename": "src/test/compile-fail/privacy-ns2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -70,7 +70,6 @@ pub mod foo3 {\n \n fn test_unused3() {\n     use foo3::Bar;  //~ ERROR `Bar` is private\n-    use foo3::{Bar,Baz};  //~ ERROR `Bar` is private\n }\n \n fn test_single3() {"}, {"sha": "c30261b9d3b50673f8602028a98b3dce175ebd66", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -171,7 +171,6 @@ pub mod mytest {\n     // Even though the inner `A` struct is a publicly exported item (usable from\n     // external crates through `foo::foo`, it should not be accessible through\n     // its definition path (which has the private `i` module).\n-    use self::foo::foo;\n     use self::foo::i::A; //~ ERROR: type `A` is inaccessible\n                          //~^ NOTE: module `i` is private\n "}, {"sha": "8673d95de1b17e8770b4689e79cdf32c9b614b0a", "filename": "src/test/compile-fail/resolve-conflict-extern-crate-vs-extern-crate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate std;\n+//~^ ERROR an external crate named `std` has already been imported\n+\n+fn main(){}\n+"}, {"sha": "dcd6ee6e9571c5b03ff00ce2c7c715f7c4ac3a9a", "filename": "src/test/compile-fail/resolve-conflict-import-vs-extern-crate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-extern-crate.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std = std::slice; //~ ERROR import conflicts with imported crate\n+\n+fn main() {\n+}\n+"}, {"sha": "beb4b74f3264bff84693b3d6739aa6dbcdb37bfb", "filename": "src/test/compile-fail/resolve-conflict-import-vs-import.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-import.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem::transmute;\n+use std::mem::transmute;\n+//~^ ERROR a value named `transmute` has already been imported\n+\n+fn main() {\n+}\n+"}, {"sha": "9d40196d4ac6b368d2d4ab15f3be605950670c98", "filename": "src/test/compile-fail/resolve-conflict-item-vs-extern-crate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-extern-crate.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn std() {}    //~ ERROR the name `std` conflicts with an external crate\n+\n+fn main() {\n+}\n+"}, {"sha": "3834007f5ffe95343c8a178628180094af11bb5b", "filename": "src/test/compile-fail/resolve-conflict-item-vs-import.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem::transmute;\n+//~^ ERROR import conflicts with value in this module\n+\n+fn transmute() {}\n+\n+fn main() {\n+}\n+"}, {"sha": "0830722f9692950209511cc60a330788f0f5b541", "filename": "src/test/compile-fail/resolve-priv-shadowing-pub.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/85fd37f876dad1d4db02208f8a56f02228d975b0/src%2Ftest%2Fcompile-fail%2Fresolve-priv-shadowing-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fd37f876dad1d4db02208f8a56f02228d975b0/src%2Ftest%2Fcompile-fail%2Fresolve-priv-shadowing-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-priv-shadowing-pub.rs?ref=85fd37f876dad1d4db02208f8a56f02228d975b0", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-mod a {\n-    pub fn foobar() -> int { 1 }\n-}\n-\n-mod b {\n-    pub fn foobar() -> int { 2 }\n-}\n-\n-mod c {\n-    // Technically the second use shadows the first, but in theory it should\n-    // only be shadowed for this module. The implementation of resolve currently\n-    // doesn't implement this, so this test is ensuring that using \"c::foobar\"\n-    // is *not* getting b::foobar. Today it's an error, but perhaps one day it\n-    // can correctly get a::foobar instead.\n-    pub use a::foobar;\n-    use b::foobar;\n-}\n-\n-fn main() {\n-    assert_eq!(c::foobar(), 1);\n-    //~^ ERROR: unresolved name `c::foobar`\n-}\n-"}, {"sha": "0a5a9db8fa8e9476db70ef8175b14064fd56883a", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -13,7 +13,7 @@\n #![foo] //~ ERROR unused attribute\n \n #[foo] //~ ERROR unused attribute\n-extern crate std;\n+extern crate core;\n \n #[foo] //~ ERROR unused attribute\n use std::collections;"}, {"sha": "b6b86a9993db1f266b43c597b806db690ad59808", "filename": "src/test/compile-fail/use-mod-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -12,9 +12,8 @@ use foo::bar::{\n     mod //~ ERROR module `bar` is private\n };\n use foo::bar::{\n-    Bar, //~ ERROR type `Bar` is inaccessible\n+    Bar //~ ERROR type `Bar` is inaccessible\n     //~^ NOTE module `bar` is private\n-    mod //~ ERROR module `bar` is private\n };\n \n mod foo {"}, {"sha": "e1ad27ec5c7a2040701fe3c9e56cd379c42bc91d", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -4,6 +4,7 @@\n #[phase(plugin, link)]\n extern crate std = \"std\";\n extern crate rt = \"native\";\n+#[prelude_import]\n use std::prelude::*;\n // Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at"}, {"sha": "bee60cd120584cdc6b8dd0d409e86d16b2c686fe", "filename": "src/test/run-fail/glob-use-std.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-fail%2Fglob-use-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-fail%2Fglob-use-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fglob-use-std.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -10,6 +10,10 @@\n \n // Issue #7580\n \n+// ignore-pretty\n+//\n+// Expanded pretty printing causes resolve conflicts.\n+\n // error-pattern:fail works\n #![feature(globs)]\n "}, {"sha": "c7a02a419c0d404c1459b85dc955b4a6cd1ec77c", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -41,7 +41,7 @@ macro_rules! iotest (\n             use std::str;\n             use std::io::process::Command;\n             use native;\n-            use super::*;\n+            use super::{sleeper, test_destroy_actually_kills};\n \n             fn f() $b\n "}, {"sha": "56c29b54b6877363e8dfd46b13d71b2a7dd5537e", "filename": "src/test/run-pass/extern-mod-ordering-exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fextern-mod-ordering-exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fextern-mod-ordering-exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-ordering-exe.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -12,8 +12,8 @@\n \n extern crate extern_mod_ordering_lib;\n \n-use extern_mod_ordering_lib::extern_mod_ordering_lib;\n+use the_lib = extern_mod_ordering_lib::extern_mod_ordering_lib;\n \n pub fn main() {\n-    extern_mod_ordering_lib::f();\n+    the_lib::f();\n }"}, {"sha": "cdd3252df4bdceaba7f37a24ff4ca125d5256f9b", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n extern crate collections;\n-extern crate std;\n \n use std::collections::Bitv;\n "}, {"sha": "3e8ac2f2783f11f3315ad4c01a875dd26d2c3021", "filename": "src/test/run-pass/issue-12612.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-12612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-12612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12612.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -14,8 +14,6 @@\n extern crate foo = \"issue-12612-1\";\n extern crate bar = \"issue-12612-2\";\n \n-use foo::bar;\n-\n mod test {\n     use bar::baz;\n }"}, {"sha": "9aff6b917484e7b12c811f6d611d22fbf363b39d", "filename": "src/test/run-pass/issue-14082.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-14082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-14082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14082.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -14,7 +14,6 @@\n use foo::GC;\n \n mod foo {\n-    use d::*;\n     pub use m::GC; // this should shadow d::GC\n }\n "}, {"sha": "26b282b7180f4f25a34e4eeab8e8bd5b2027c631", "filename": "src/test/run-pass/issue-14330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-14330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-14330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14330.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -10,6 +10,6 @@\n \n #![feature(phase)]\n \n-#[phase(plugin, link)] extern crate std;\n+#[phase(plugin, link)] extern crate std2 = \"std\";\n \n fn main() {}"}, {"sha": "150bd9a74a942de6cf23d15c23d120b4b780043a", "filename": "src/test/run-pass/issue-5521.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-5521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-5521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5521.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -13,7 +13,7 @@\n \n extern crate foo = \"issue-5521\";\n \n-fn foo(a: foo::map) {\n+fn bar(a: foo::map) {\n     if false {\n         fail!();\n     } else {"}, {"sha": "ee500b3d4fa36620cddf32910c7607e3dca772e6", "filename": "src/test/run-pass/issue-7663.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-7663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fissue-7663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7663.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -30,7 +30,6 @@ mod test2 {\n     mod bar { pub fn p() -> int { 2 } }\n \n     pub mod baz {\n-        use test2::foo::p;\n         use test2::bar::p;\n \n         pub fn my_main() { assert!(p() == 2); }\n@@ -43,7 +42,6 @@ mod test3 {\n     mod bar { pub fn p() -> int { 2 } }\n \n     pub mod baz {\n-        use test3::foo::*;\n         use test3::bar::p;\n \n         pub fn my_main() { assert!(p() == 2); }"}, {"sha": "a07c63490e78e2624088c609056db816a6406ec3", "filename": "src/test/run-pass/match-ref-binding-in-guard-3256.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::rt;\n-\n pub fn main() {\n     unsafe {\n-        let x = Some(rt::exclusive::Exclusive::new(true));\n+        let x = Some(::std::rt::exclusive::Exclusive::new(true));\n         match x {\n             Some(ref z) if *z.lock() => {\n                 assert!(*z.lock());"}, {"sha": "336791e65fdee24d151b9b4de5c78f510b2d41ac", "filename": "src/test/run-pass/privacy-ns.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -27,8 +27,6 @@ pub mod foo1 {\n }\n \n fn test_unused1() {\n-    use foo1::Bar;\n-    use foo1::{Bar,Baz};\n     use foo1::*;\n }\n \n@@ -60,8 +58,6 @@ pub mod foo2 {\n }\n \n fn test_unused2() {\n-    use foo2::Bar;\n-    use foo2::{Bar,Baz};\n     use foo2::*;\n }\n \n@@ -93,8 +89,6 @@ pub mod foo3 {\n }\n \n fn test_unused3() {\n-    use foo3::Bar;\n-    use foo3::{Bar,Baz};\n     use foo3::*;\n }\n "}, {"sha": "2596bc9c83763bf0f031ed2595b9e7d6235801a0", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate std;\n use std::mem::size_of;\n \n struct t {a: u8, b: i8}"}, {"sha": "6d57bff1bd673b7ac49724948adeadc8518c78cd", "filename": "src/test/run-pass/writealias.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fwritealias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5654f960ca1f979e2ddf1efa57fa750dbd1dff/src%2Ftest%2Frun-pass%2Fwritealias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwritealias.rs?ref=4a5654f960ca1f979e2ddf1efa57fa750dbd1dff", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n \n-use std::rt;\n-\n struct Point {x: int, y: int, z: int}\n \n fn f(p: &mut Point) { p.z = 13; }\n \n pub fn main() {\n     unsafe {\n-        let x = Some(rt::exclusive::Exclusive::new(true));\n+        let x = Some(::std::rt::exclusive::Exclusive::new(true));\n         match x {\n             Some(ref z) if *z.lock() => {\n                 assert!(*z.lock());"}]}