{"sha": "78cc331bd71e918cef3d33a6557b1be9ae84eb26", "node_id": "C_kwDOAAsO6NoAKDc4Y2MzMzFiZDcxZTkxOGNlZjNkMzNhNjU1N2IxYmU5YWU4NGViMjY", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-05-07T06:32:01Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-05-12T06:21:51Z"}, "message": "typeck: port \"missing type params\"\n\nPort the \"the type parameter `T` must be explicitly specified\"\ndiagnostic to using a diagnostic struct.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "03eedc338842c353e11ecc2f8d20206cc3e870ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03eedc338842c353e11ecc2f8d20206cc3e870ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78cc331bd71e918cef3d33a6557b1be9ae84eb26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78cc331bd71e918cef3d33a6557b1be9ae84eb26", "html_url": "https://github.com/rust-lang/rust/commit/78cc331bd71e918cef3d33a6557b1be9ae84eb26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78cc331bd71e918cef3d33a6557b1be9ae84eb26/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de3e8ca2f3908dc48fddb0d5b4c14c776017b43e", "url": "https://api.github.com/repos/rust-lang/rust/commits/de3e8ca2f3908dc48fddb0d5b4c14c776017b43e", "html_url": "https://github.com/rust-lang/rust/commit/de3e8ca2f3908dc48fddb0d5b4c14c776017b43e"}], "stats": {"total": 150, "additions": 92, "deletions": 58}, "files": [{"sha": "a6b2b1dbd6a51f0ad2f5c6c16200f3aa25666804", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/78cc331bd71e918cef3d33a6557b1be9ae84eb26/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/78cc331bd71e918cef3d33a6557b1be9ae84eb26/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=78cc331bd71e918cef3d33a6557b1be9ae84eb26", "patch": "@@ -100,3 +100,25 @@ typeck-explicit-generic-args-with-impl-trait =\n     .label = explicit generic argument not allowed\n     .note = see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n     .help = add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n+\n+typeck-missing-type-params =\n+    the type {$parameterCount ->\n+        [one] parameter\n+        *[other] parameters\n+    } {$parameters} must be explicitly specified\n+    .label = type {$parameterCount ->\n+        [one] parameter\n+        *[other] parameters\n+    } {$parameters} must be specified for this\n+    .suggestion = set the type {$parameterCount ->\n+        [one] parameter\n+        *[other] parameters\n+    } to the desired {$parameterCount ->\n+        [one] type\n+        *[other] types\n+    }\n+    .no-suggestion-label = missing {$parameterCount ->\n+        [one] reference\n+        *[other] references\n+    } to {$parameters}\n+    .note = because of the default `Self` reference, type parameters must be specified on object types"}, {"sha": "5cfed81017f0bedc2f7400bb18289ba357412c26", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 6, "deletions": 57, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/78cc331bd71e918cef3d33a6557b1be9ae84eb26/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cc331bd71e918cef3d33a6557b1be9ae84eb26/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=78cc331bd71e918cef3d33a6557b1be9ae84eb26", "patch": "@@ -1,4 +1,5 @@\n use crate::astconv::AstConv;\n+use crate::errors::MissingTypeParams;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -24,65 +25,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if missing_type_params.is_empty() {\n             return;\n         }\n-        let display =\n-            missing_type_params.iter().map(|n| format!(\"`{}`\", n)).collect::<Vec<_>>().join(\", \");\n-        let mut err = struct_span_err!(\n-            self.tcx().sess,\n+\n+        self.tcx().sess.emit_err(MissingTypeParams {\n             span,\n-            E0393,\n-            \"the type parameter{} {} must be explicitly specified\",\n-            pluralize!(missing_type_params.len()),\n-            display,\n-        );\n-        err.span_label(\n-            self.tcx().def_span(def_id),\n-            &format!(\n-                \"type parameter{} {} must be specified for this\",\n-                pluralize!(missing_type_params.len()),\n-                display,\n-            ),\n-        );\n-        let mut suggested = false;\n-        if let (Ok(snippet), true) = (\n-            self.tcx().sess.source_map().span_to_snippet(span),\n-            // Don't suggest setting the type params if there are some already: the order is\n-            // tricky to get right and the user will already know what the syntax is.\n+            def_span: self.tcx().def_span(def_id),\n+            missing_type_params,\n             empty_generic_args,\n-        ) {\n-            if snippet.ends_with('>') {\n-                // The user wrote `Trait<'a, T>` or similar. To provide an accurate suggestion\n-                // we would have to preserve the right order. For now, as clearly the user is\n-                // aware of the syntax, we do nothing.\n-            } else {\n-                // The user wrote `Iterator`, so we don't have a type we can suggest, but at\n-                // least we can clue them to the correct syntax `Iterator<Type>`.\n-                err.span_suggestion(\n-                    span,\n-                    &format!(\n-                        \"set the type parameter{plural} to the desired type{plural}\",\n-                        plural = pluralize!(missing_type_params.len()),\n-                    ),\n-                    format!(\"{}<{}>\", snippet, missing_type_params.join(\", \")),\n-                    Applicability::HasPlaceholders,\n-                );\n-                suggested = true;\n-            }\n-        }\n-        if !suggested {\n-            err.span_label(\n-                span,\n-                format!(\n-                    \"missing reference{} to {}\",\n-                    pluralize!(missing_type_params.len()),\n-                    display,\n-                ),\n-            );\n-        }\n-        err.note(\n-            \"because of the default `Self` reference, type parameters must be \\\n-                  specified on object types\",\n-        );\n-        err.emit();\n+        });\n     }\n \n     /// When the code is using the `Fn` traits directly, instead of the `Fn(A) -> B` syntax, emit"}, {"sha": "93900ae24bba42b4a5412dbbe7600eb919cbebcb", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/78cc331bd71e918cef3d33a6557b1be9ae84eb26/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cc331bd71e918cef3d33a6557b1be9ae84eb26/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=78cc331bd71e918cef3d33a6557b1be9ae84eb26", "patch": "@@ -1,7 +1,10 @@\n //! Errors emitted by typeck.\n-use rustc_errors::Applicability;\n+use rustc_errors::{\n+    error_code, Applicability, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed,\n+};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n+use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n@@ -250,3 +253,63 @@ pub struct ExplicitGenericArgsWithImplTrait {\n     #[help]\n     pub is_nightly_build: Option<()>,\n }\n+\n+pub struct MissingTypeParams {\n+    pub span: Span,\n+    pub def_span: Span,\n+    pub missing_type_params: Vec<String>,\n+    pub empty_generic_args: bool,\n+}\n+\n+// Manual implementation of `SessionDiagnostic` to be able to call `span_to_snippet`.\n+impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        static SLUG: &'static str = \"typeck-missing-type-params\";\n+        let mut err = sess.span_diagnostic.struct_span_err_with_code(\n+            self.span,\n+            DiagnosticMessage::fluent(SLUG),\n+            error_code!(E0393),\n+        );\n+        err.set_arg(\"parameterCount\", self.missing_type_params.len());\n+        err.set_arg(\n+            \"parameters\",\n+            self.missing_type_params\n+                .iter()\n+                .map(|n| format!(\"`{}`\", n))\n+                .collect::<Vec<_>>()\n+                .join(\", \"),\n+        );\n+\n+        err.span_label(self.def_span, DiagnosticMessage::fluent_attr(SLUG, \"label\"));\n+\n+        let mut suggested = false;\n+        if let (Ok(snippet), true) = (\n+            sess.source_map().span_to_snippet(self.span),\n+            // Don't suggest setting the type params if there are some already: the order is\n+            // tricky to get right and the user will already know what the syntax is.\n+            self.empty_generic_args,\n+        ) {\n+            if snippet.ends_with('>') {\n+                // The user wrote `Trait<'a, T>` or similar. To provide an accurate suggestion\n+                // we would have to preserve the right order. For now, as clearly the user is\n+                // aware of the syntax, we do nothing.\n+            } else {\n+                // The user wrote `Iterator`, so we don't have a type we can suggest, but at\n+                // least we can clue them to the correct syntax `Iterator<Type>`.\n+                err.span_suggestion(\n+                    self.span,\n+                    DiagnosticMessage::fluent_attr(SLUG, \"suggestion\"),\n+                    format!(\"{}<{}>\", snippet, self.missing_type_params.join(\", \")),\n+                    Applicability::HasPlaceholders,\n+                );\n+                suggested = true;\n+            }\n+        }\n+        if !suggested {\n+            err.span_label(self.span, DiagnosticMessage::fluent_attr(SLUG, \"no-suggestion-label\"));\n+        }\n+\n+        err.note(DiagnosticMessage::fluent_attr(SLUG, \"note\"));\n+        err\n+    }\n+}"}]}