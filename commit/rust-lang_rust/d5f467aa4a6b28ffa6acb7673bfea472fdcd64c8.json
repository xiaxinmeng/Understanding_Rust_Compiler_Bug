{"sha": "d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8", "node_id": "C_kwDOAAsO6NoAKGQ1ZjQ2N2FhNGE2YjI4ZmZhNmFjYjc2NzNiZmVhNDcyZmRjZDY0Yzg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-16T15:11:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-16T17:45:08Z"}, "message": "Substitute some VSCode variables in the VSCode client", "tree": {"sha": "4aae97003f1d6556b90a97491a65a2f818cc284c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aae97003f1d6556b90a97491a65a2f818cc284c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8", "html_url": "https://github.com/rust-lang/rust/commit/d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2d9eddb6f31773a507c918553214cb816a0abe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2d9eddb6f31773a507c918553214cb816a0abe", "html_url": "https://github.com/rust-lang/rust/commit/ee2d9eddb6f31773a507c918553214cb816a0abe"}], "stats": {"total": 111, "additions": 79, "deletions": 32}, "files": [{"sha": "45a7970b2171ff9c1fb0191408dea5eaa80ae1f1", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8", "patch": "@@ -5,7 +5,7 @@ import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n import { assert } from \"./util\";\n import { WorkspaceEdit } from \"vscode\";\n import { Workspace } from \"./ctx\";\n-import { substituteVariablesInEnv } from \"./config\";\n+import { substituteVariablesInEnv, substituteVSCodeVariables } from \"./config\";\n import { outputChannel, traceOutputChannel } from \"./main\";\n import { randomUUID } from \"crypto\";\n \n@@ -83,22 +83,40 @@ export async function createClient(\n         debug: run,\n     };\n \n-    let initializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n+    let rawInitializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n \n     if (workspace.kind === \"Detached Files\") {\n-        initializationOptions = {\n+        rawInitializationOptions = {\n             detachedFiles: workspace.files.map((file) => file.uri.fsPath),\n-            ...initializationOptions,\n+            ...rawInitializationOptions,\n         };\n     }\n \n+    const initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n+\n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: \"file\", language: \"rust\" }],\n         initializationOptions,\n         diagnosticCollectionName: \"rustc\",\n         traceOutputChannel: traceOutputChannel(),\n         outputChannel: outputChannel(),\n         middleware: {\n+            workspace: {\n+                async configuration(\n+                    params: lc.ConfigurationParams,\n+                    token: vscode.CancellationToken,\n+                    next: lc.ConfigurationRequest.HandlerSignature\n+                ) {\n+                    const resp = await next(params, token);\n+                    if (resp && Array.isArray(resp)) {\n+                        return resp.map((val) => {\n+                            return substituteVSCodeVariables(val);\n+                        });\n+                    } else {\n+                        return resp;\n+                    }\n+                },\n+            },\n             async provideHover(\n                 document: vscode.TextDocument,\n                 position: vscode.Position,"}, {"sha": "199db6e30fc588c8e1736f18fbfc0a84165637c8", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 57, "deletions": 28, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=d5f467aa4a6b28ffa6acb7673bfea472fdcd64c8", "patch": "@@ -1,4 +1,5 @@\n-import path = require(\"path\");\n+import * as path from \"path\";\n+import * as os from \"os\";\n import * as vscode from \"vscode\";\n import { Env } from \"./client\";\n import { log } from \"./util\";\n@@ -187,6 +188,37 @@ export class Config {\n     }\n }\n \n+const VarRegex = new RegExp(/\\$\\{(.+?)\\}/g);\n+\n+export function substituteVSCodeVariableInString(val: string): string {\n+    return val.replaceAll(VarRegex, (substring: string, varName) => {\n+        if (typeof varName === \"string\") {\n+            return computeVscodeVar(varName) || substring;\n+        } else {\n+            return substring;\n+        }\n+    });\n+}\n+\n+export function substituteVSCodeVariables(resp: any): any {\n+    if (typeof resp === \"string\") {\n+        return substituteVSCodeVariableInString(resp);\n+    } else if (resp && Array.isArray(resp)) {\n+        return resp.map((val) => {\n+            return substituteVSCodeVariables(val);\n+        });\n+    } else if (resp && typeof resp === \"object\") {\n+        const res: { [key: string]: any } = {};\n+        for (const key in resp) {\n+            const val = resp[key];\n+            res[key] = substituteVSCodeVariables(val);\n+        }\n+        return res;\n+    } else if (typeof resp === \"function\") {\n+        return null;\n+    }\n+    return resp;\n+}\n export function substituteVariablesInEnv(env: Env): Env {\n     const missingDeps = new Set<string>();\n     // vscode uses `env:ENV_NAME` for env vars resolution, and it's easier\n@@ -233,7 +265,7 @@ export function substituteVariablesInEnv(env: Env): Env {\n             }\n         } else {\n             envWithDeps[dep] = {\n-                value: computeVscodeVar(dep),\n+                value: computeVscodeVar(dep) || \"${\" + dep + \"}\",\n                 deps: [],\n             };\n         }\n@@ -264,37 +296,34 @@ export function substituteVariablesInEnv(env: Env): Env {\n     return resolvedEnv;\n }\n \n-function computeVscodeVar(varName: string): string {\n+function computeVscodeVar(varName: string): string | null {\n+    const workspaceFolder = () => {\n+        const folders = vscode.workspace.workspaceFolders ?? [];\n+        if (folders.length === 1) {\n+            // TODO: support for remote workspaces?\n+            return folders[0].uri.fsPath;\n+        } else if (folders.length > 1) {\n+            // could use currently opened document to detect the correct\n+            // workspace. However, that would be determined by the document\n+            // user has opened on Editor startup. Could lead to\n+            // unpredictable workspace selection in practice.\n+            // It's better to pick the first one\n+            return folders[0].uri.fsPath;\n+        } else {\n+            // no workspace opened\n+            return \"\";\n+        }\n+    };\n     // https://code.visualstudio.com/docs/editor/variables-reference\n     const supportedVariables: { [k: string]: () => string } = {\n-        workspaceFolder: () => {\n-            const folders = vscode.workspace.workspaceFolders ?? [];\n-            if (folders.length === 1) {\n-                // TODO: support for remote workspaces?\n-                return folders[0].uri.fsPath;\n-            } else if (folders.length > 1) {\n-                // could use currently opened document to detect the correct\n-                // workspace. However, that would be determined by the document\n-                // user has opened on Editor startup. Could lead to\n-                // unpredictable workspace selection in practice.\n-                // It's better to pick the first one\n-                return folders[0].uri.fsPath;\n-            } else {\n-                // no workspace opened\n-                return \"\";\n-            }\n-        },\n+        workspaceFolder,\n \n         workspaceFolderBasename: () => {\n-            const workspaceFolder = computeVscodeVar(\"workspaceFolder\");\n-            if (workspaceFolder) {\n-                return path.basename(workspaceFolder);\n-            } else {\n-                return \"\";\n-            }\n+            return path.basename(workspaceFolder());\n         },\n \n         cwd: () => process.cwd(),\n+        userHome: () => os.homedir(),\n \n         // see\n         // https://github.com/microsoft/vscode/blob/08ac1bb67ca2459496b272d8f4a908757f24f56f/src/vs/workbench/api/common/extHostVariableResolverService.ts#L81\n@@ -308,7 +337,7 @@ function computeVscodeVar(varName: string): string {\n     if (varName in supportedVariables) {\n         return supportedVariables[varName]();\n     } else {\n-        // can't resolve, keep the expression as is\n-        return \"${\" + varName + \"}\";\n+        // return \"${\" + varName + \"}\";\n+        return null;\n     }\n }"}]}