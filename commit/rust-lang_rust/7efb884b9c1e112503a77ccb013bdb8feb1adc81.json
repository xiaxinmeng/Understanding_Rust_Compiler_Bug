{"sha": "7efb884b9c1e112503a77ccb013bdb8feb1adc81", "node_id": "C_kwDOAAsO6NoAKDdlZmI4ODRiOWMxZTExMjUwM2E3N2NjYjAxM2JkYjhmZWIxYWRjODE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-13T22:25:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-13T22:25:12Z"}, "message": "Rollup merge of #107948 - jieyouxu:issue-107944, r=ozkanonur\n\nAllow shortcuts to directories to be used for ./x.py fmt\n\nFixes #107944.\n\nMaximum recursive search depth is 3 and only accepts shortcuts for directories. If there are no shortcut candidates, the previous behavior to panic is preserved. If there are multiple candidates, the shortcut candidates are ignored.\n\nAfter this change, `./x.py fmt std` no longer panics and formats `library/std` instead.", "tree": {"sha": "ed6a0a851ac772de321c1b471328ab6fb2df97dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed6a0a851ac772de321c1b471328ab6fb2df97dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7efb884b9c1e112503a77ccb013bdb8feb1adc81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj6rjICRBK7hj4Ov3rIwAAFE0IADZhN9Gybo20RjHvV+hSwKYi\nqexNiEtYDU93mWc+t4vnK7OyqwShYJILjZ3J+WxNgm8s9AF63Hg2NILUhnbtvEzj\nBGUQZR7d2dJpR9iJtJDFKUq9wR4O2u0cHdr1GCbf7SuuYd4YDfIPjYkcLoppi6FS\nQO7xYchFxotl9l3C0LdPdJ0aWftQXIA/gkwMWYJxzmGuMaiOUKGPbaOEvIx0kkXP\nh2YKHFLCMYtdk/Ikm/4hgtSWYtcdrhZ4PW3mlsMMdThGI2iI0BsIbOIVBiELCgk3\n3MLwXZLmI3fV6kmGCynEqAtxTAqvLeOt2qYF3Oyg5Y0uHaySRDCsEQvQLYdlF6Y=\n=uqiS\n-----END PGP SIGNATURE-----\n", "payload": "tree ed6a0a851ac772de321c1b471328ab6fb2df97dc\nparent 5f3d360844fae27ab3318fd715e81ebcc444c876\nparent b10d744b87fcaaeea1a2ec2a299dba494c1f3d82\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676327112 +0100\ncommitter GitHub <noreply@github.com> 1676327112 +0100\n\nRollup merge of #107948 - jieyouxu:issue-107944, r=ozkanonur\n\nAllow shortcuts to directories to be used for ./x.py fmt\n\nFixes #107944.\n\nMaximum recursive search depth is 3 and only accepts shortcuts for directories. If there are no shortcut candidates, the previous behavior to panic is preserved. If there are multiple candidates, the shortcut candidates are ignored.\n\nAfter this change, `./x.py fmt std` no longer panics and formats `library/std` instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7efb884b9c1e112503a77ccb013bdb8feb1adc81", "html_url": "https://github.com/rust-lang/rust/commit/7efb884b9c1e112503a77ccb013bdb8feb1adc81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7efb884b9c1e112503a77ccb013bdb8feb1adc81/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3d360844fae27ab3318fd715e81ebcc444c876", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3d360844fae27ab3318fd715e81ebcc444c876", "html_url": "https://github.com/rust-lang/rust/commit/5f3d360844fae27ab3318fd715e81ebcc444c876"}, {"sha": "b10d744b87fcaaeea1a2ec2a299dba494c1f3d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/b10d744b87fcaaeea1a2ec2a299dba494c1f3d82", "html_url": "https://github.com/rust-lang/rust/commit/b10d744b87fcaaeea1a2ec2a299dba494c1f3d82"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "615794958d087ee0e51ed22ac597adfeb2a22aa9", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7efb884b9c1e112503a77ccb013bdb8feb1adc81/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7efb884b9c1e112503a77ccb013bdb8feb1adc81/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=7efb884b9c1e112503a77ccb013bdb8feb1adc81", "patch": "@@ -193,10 +193,46 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     let (tx, rx): (SyncSender<PathBuf>, _) = std::sync::mpsc::sync_channel(128);\n     let walker = match paths.get(0) {\n         Some(first) => {\n-            let mut walker = WalkBuilder::new(first);\n+            let find_shortcut_candidates = |p: &PathBuf| {\n+                let mut candidates = Vec::new();\n+                for candidate in WalkBuilder::new(src.clone()).max_depth(Some(3)).build() {\n+                    if let Ok(entry) = candidate {\n+                        if let Some(dir_name) = p.file_name() {\n+                            if entry.path().is_dir() && entry.file_name() == dir_name {\n+                                candidates.push(entry.into_path());\n+                            }\n+                        }\n+                    }\n+                }\n+                candidates\n+            };\n+\n+            // Only try to look for shortcut candidates for single component paths like\n+            // `std` and not for e.g. relative paths like `../library/std`.\n+            let should_look_for_shortcut_dir = |p: &PathBuf| p.components().count() == 1;\n+\n+            let mut walker = if should_look_for_shortcut_dir(first) {\n+                if let [single_candidate] = &find_shortcut_candidates(first)[..] {\n+                    WalkBuilder::new(single_candidate)\n+                } else {\n+                    WalkBuilder::new(first)\n+                }\n+            } else {\n+                WalkBuilder::new(first)\n+            };\n+\n             for path in &paths[1..] {\n-                walker.add(path);\n+                if should_look_for_shortcut_dir(path) {\n+                    if let [single_candidate] = &find_shortcut_candidates(path)[..] {\n+                        walker.add(single_candidate);\n+                    } else {\n+                        walker.add(path);\n+                    }\n+                } else {\n+                    walker.add(path);\n+                }\n             }\n+\n             walker\n         }\n         None => WalkBuilder::new(src.clone()),"}]}