{"sha": "4a4addc5980e95e4f7883f2d56aedcd08626ba73", "node_id": "C_kwDOAAsO6NoAKDRhNGFkZGM1OTgwZTk1ZTRmNzg4M2YyZDU2YWVkY2QwODYyNmJhNzM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-08T00:52:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-17T02:45:59Z"}, "message": "Box `ExprKind::{Closure,MethodCall}`, and `QSelf` in expressions, types, and patterns.", "tree": {"sha": "b0b9fdebf7e54e189c088aa32636b1d639f6bb73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0b9fdebf7e54e189c088aa32636b1d639f6bb73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a4addc5980e95e4f7883f2d56aedcd08626ba73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4addc5980e95e4f7883f2d56aedcd08626ba73", "html_url": "https://github.com/rust-lang/rust/commit/4a4addc5980e95e4f7883f2d56aedcd08626ba73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a4addc5980e95e4f7883f2d56aedcd08626ba73/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "826fb78bebc757acf138e86bd755e1d81c1d08bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/826fb78bebc757acf138e86bd755e1d81c1d08bc", "html_url": "https://github.com/rust-lang/rust/commit/826fb78bebc757acf138e86bd755e1d81c1d08bc"}], "stats": {"total": 93, "additions": 49, "deletions": 44}, "files": [{"sha": "23f55db773e6c01e52ab624b95a681b019f7ddbb", "filename": "src/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=4a4addc5980e95e4f7883f2d56aedcd08626ba73", "patch": "@@ -290,10 +290,10 @@ impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         Some(match self.kind {\n             ast::MetaItemKind::Word => {\n-                rewrite_path(context, PathContext::Type, None, &self.path, shape)?\n+                rewrite_path(context, PathContext::Type, &None, &self.path, shape)?\n             }\n             ast::MetaItemKind::List(ref list) => {\n-                let path = rewrite_path(context, PathContext::Type, None, &self.path, shape)?;\n+                let path = rewrite_path(context, PathContext::Type, &None, &self.path, shape)?;\n                 let has_trailing_comma = crate::expr::span_ends_with_comma(context, self.span);\n                 overflow::rewrite_with_parens(\n                     context,\n@@ -311,7 +311,7 @@ impl Rewrite for ast::MetaItem {\n                 )?\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n-                let path = rewrite_path(context, PathContext::Type, None, &self.path, shape)?;\n+                let path = rewrite_path(context, PathContext::Type, &None, &self.path, shape)?;\n                 // 3 = ` = `\n                 let lit_shape = shape.shrink_left(path.len() + 3)?;\n                 // `rewrite_literal` returns `None` when `literal` exceeds max"}, {"sha": "a1a73cf4bd570f2ee495766e207e2e7935487773", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=4a4addc5980e95e4f7883f2d56aedcd08626ba73", "patch": "@@ -145,8 +145,8 @@ impl ChainItemKind {\n \n     fn from_ast(context: &RewriteContext<'_>, expr: &ast::Expr) -> (ChainItemKind, Span) {\n         let (kind, span) = match expr.kind {\n-            ast::ExprKind::MethodCall(ref segment, ref receiver, ref expressions, _) => {\n-                let types = if let Some(ref generic_args) = segment.args {\n+            ast::ExprKind::MethodCall(ref call) => {\n+                let types = if let Some(ref generic_args) = call.seg.args {\n                     if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n                         data.args\n                             .iter()\n@@ -163,8 +163,8 @@ impl ChainItemKind {\n                 } else {\n                     vec![]\n                 };\n-                let span = mk_sp(receiver.span.hi(), expr.span.hi());\n-                let kind = ChainItemKind::MethodCall(segment.clone(), types, expressions.clone());\n+                let span = mk_sp(call.receiver.span.hi(), expr.span.hi());\n+                let kind = ChainItemKind::MethodCall(call.seg.clone(), types, call.args.clone());\n                 (kind, span)\n             }\n             ast::ExprKind::Field(ref nested, field) => {\n@@ -400,9 +400,7 @@ impl Chain {\n     // is a try! macro, we'll convert it to shorthand when the option is set.\n     fn pop_expr_chain(expr: &ast::Expr, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n         match expr.kind {\n-            ast::ExprKind::MethodCall(_, ref receiver, _, _) => {\n-                Some(Self::convert_try(&receiver, context))\n-            }\n+            ast::ExprKind::MethodCall(ref call) => Some(Self::convert_try(&call.receiver, context)),\n             ast::ExprKind::Field(ref subexpr, _)\n             | ast::ExprKind::Try(ref subexpr)\n             | ast::ExprKind::Await(ref subexpr) => Some(Self::convert_try(subexpr, context)),"}, {"sha": "423c3a997f53da7e8879bbb797b92a2774026569", "filename": "src/closures.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=4a4addc5980e95e4f7883f2d56aedcd08626ba73", "patch": "@@ -326,16 +326,16 @@ pub(crate) fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(\n-        ref binder,\n-        capture,\n-        ref is_async,\n-        movability,\n-        ref fn_decl,\n-        ref body,\n-        _,\n-    ) = expr.kind\n-    {\n+    if let ast::ExprKind::Closure(ref closure) = expr.kind {\n+        let ast::Closure {\n+            ref binder,\n+            capture_clause,\n+            ref asyncness,\n+            movability,\n+            ref fn_decl,\n+            ref body,\n+            fn_decl_span: _,\n+        } = **closure;\n         let body = match body.kind {\n             ast::ExprKind::Block(ref block, _)\n                 if !is_unsafe_block(block)\n@@ -347,7 +347,15 @@ pub(crate) fn rewrite_last_closure(\n             _ => body,\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+            binder,\n+            capture_clause,\n+            asyncness,\n+            movability,\n+            fn_decl,\n+            body,\n+            expr.span,\n+            context,\n+            shape,\n         )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {"}, {"sha": "aba1c484bf1ddc028e8507fd59517c9a9691e6a1", "filename": "src/expr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4a4addc5980e95e4f7883f2d56aedcd08626ba73", "patch": "@@ -116,7 +116,7 @@ pub(crate) fn format_expr(\n             rewrite_struct_lit(\n                 context,\n                 path,\n-                qself.as_ref(),\n+                qself,\n                 fields,\n                 rest,\n                 &expr.attrs,\n@@ -169,7 +169,7 @@ pub(crate) fn format_expr(\n             rewrite_match(context, cond, arms, shape, expr.span, &expr.attrs)\n         }\n         ast::ExprKind::Path(ref qself, ref path) => {\n-            rewrite_path(context, PathContext::Expr, qself.as_ref(), path, shape)\n+            rewrite_path(context, PathContext::Expr, qself, path, shape)\n         }\n         ast::ExprKind::Assign(ref lhs, ref rhs, _) => {\n             rewrite_assignment(context, lhs, rhs, None, shape)\n@@ -203,16 +203,16 @@ pub(crate) fn format_expr(\n                 Some(\"yield\".to_string())\n             }\n         }\n-        ast::ExprKind::Closure(\n-            ref binder,\n-            capture,\n-            ref is_async,\n-            movability,\n-            ref fn_decl,\n-            ref body,\n-            _,\n-        ) => closures::rewrite_closure(\n-            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+        ast::ExprKind::Closure(ref cl) => closures::rewrite_closure(\n+            &cl.binder,\n+            cl.capture_clause,\n+            &cl.asyncness,\n+            cl.movability,\n+            &cl.fn_decl,\n+            &cl.body,\n+            expr.span,\n+            context,\n+            shape,\n         ),\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n@@ -1537,7 +1537,7 @@ fn struct_lit_can_be_aligned(fields: &[ast::ExprField], has_base: bool) -> bool\n fn rewrite_struct_lit<'a>(\n     context: &RewriteContext<'_>,\n     path: &ast::Path,\n-    qself: Option<&ast::QSelf>,\n+    qself: &Option<ptr::P<ast::QSelf>>,\n     fields: &'a [ast::ExprField],\n     struct_rest: &ast::StructRest,\n     attrs: &[ast::Attribute],"}, {"sha": "3f335172590ec808e44a3a667905e1764cd01aba", "filename": "src/patterns.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=4a4addc5980e95e4f7883f2d56aedcd08626ba73", "patch": "@@ -227,11 +227,10 @@ impl Rewrite for Pat {\n             }\n             PatKind::Tuple(ref items) => rewrite_tuple_pat(items, None, self.span, context, shape),\n             PatKind::Path(ref q_self, ref path) => {\n-                rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)\n+                rewrite_path(context, PathContext::Expr, q_self, path, shape)\n             }\n             PatKind::TupleStruct(ref q_self, ref path, ref pat_vec) => {\n-                let path_str =\n-                    rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)?;\n+                let path_str = rewrite_path(context, PathContext::Expr, q_self, path, shape)?;\n                 rewrite_tuple_pat(pat_vec, Some(path_str), self.span, context, shape)\n             }\n             PatKind::Lit(ref expr) => expr.rewrite(context, shape),\n@@ -271,7 +270,7 @@ impl Rewrite for Pat {\n }\n \n fn rewrite_struct_pat(\n-    qself: &Option<ast::QSelf>,\n+    qself: &Option<ptr::P<ast::QSelf>>,\n     path: &ast::Path,\n     fields: &[ast::PatField],\n     ellipsis: bool,\n@@ -281,7 +280,7 @@ fn rewrite_struct_pat(\n ) -> Option<String> {\n     // 2 =  ` {`\n     let path_shape = shape.sub_width(2)?;\n-    let path_str = rewrite_path(context, PathContext::Expr, qself.as_ref(), path, path_shape)?;\n+    let path_str = rewrite_path(context, PathContext::Expr, qself, path, path_shape)?;\n \n     if fields.is_empty() && !ellipsis {\n         return Some(format!(\"{} {{}}\", path_str));"}, {"sha": "d5177a2057b8ab05fb3daebe466de1d87dc32710", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=4a4addc5980e95e4f7883f2d56aedcd08626ba73", "patch": "@@ -38,11 +38,11 @@ pub(crate) enum PathContext {\n pub(crate) fn rewrite_path(\n     context: &RewriteContext<'_>,\n     path_context: PathContext,\n-    qself: Option<&ast::QSelf>,\n+    qself: &Option<ptr::P<ast::QSelf>>,\n     path: &ast::Path,\n     shape: Shape,\n ) -> Option<String> {\n-    let skip_count = qself.map_or(0, |x| x.position);\n+    let skip_count = qself.as_ref().map_or(0, |x| x.position);\n \n     let mut result = if path.is_global() && qself.is_none() && path_context != PathContext::Import {\n         \"::\".to_owned()\n@@ -655,7 +655,7 @@ impl Rewrite for ast::PolyTraitRef {\n \n impl Rewrite for ast::TraitRef {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        rewrite_path(context, PathContext::Type, None, &self.path, shape)\n+        rewrite_path(context, PathContext::Type, &None, &self.path, shape)\n     }\n }\n \n@@ -800,7 +800,7 @@ impl Rewrite for ast::Ty {\n                 rewrite_tuple(context, items.iter(), self.span, shape, items.len() == 1)\n             }\n             ast::TyKind::Path(ref q_self, ref path) => {\n-                rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n+                rewrite_path(context, PathContext::Type, q_self, path, shape)\n             }\n             ast::TyKind::Array(ref ty, ref repeats) => rewrite_pair(\n                 &**ty,"}, {"sha": "136a2c7fce24a802aac4c6e252e818b12db00ea1", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4addc5980e95e4f7883f2d56aedcd08626ba73/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=4a4addc5980e95e4f7883f2d56aedcd08626ba73", "patch": "@@ -479,9 +479,9 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Binary(_, _, ref expr)\n         | ast::ExprKind::Index(_, ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Closure(_, _, _, _, _, ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n+        ast::ExprKind::Closure(ref closure) => is_block_expr(context, &closure.body, repr),\n         // This can only be a string lit\n         ast::ExprKind::Lit(_) => {\n             repr.contains('\\n') && trimmed_last_line_width(repr) <= context.config.tab_spaces()"}]}