{"sha": "2fcb53493dc80469acf86797c53dacc331629d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmY2I1MzQ5M2RjODA0NjlhY2Y4Njc5N2M1M2RhY2MzMzE2MjlkNTA=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-17T05:01:20Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-17T06:17:30Z"}, "message": "Implement new methods vec.starts_with()/vec.ends_with()", "tree": {"sha": "4e1ae819fcc549cbe6e9369289ccde046adedac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e1ae819fcc549cbe6e9369289ccde046adedac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fcb53493dc80469acf86797c53dacc331629d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fcb53493dc80469acf86797c53dacc331629d50", "html_url": "https://github.com/rust-lang/rust/commit/2fcb53493dc80469acf86797c53dacc331629d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fcb53493dc80469acf86797c53dacc331629d50/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8f82c8e431472e9a1742a6923790b1f32e6e248", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f82c8e431472e9a1742a6923790b1f32e6e248", "html_url": "https://github.com/rust-lang/rust/commit/d8f82c8e431472e9a1742a6923790b1f32e6e248"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "faf8dd25186f28165c0168f98c6ec369f77e8cce", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fcb53493dc80469acf86797c53dacc331629d50/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcb53493dc80469acf86797c53dacc331629d50/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=2fcb53493dc80469acf86797c53dacc331629d50", "patch": "@@ -189,12 +189,9 @@ mod test {\n         let mut d = Path::new(env!(\"CFG_PREFIX\"));\n         d.push(\"lib/rustc/triple/lib\");\n         debug2!(\"test_prefix_path: {} vs. {}\",\n-               res.to_str(),\n+               res,\n                d.display());\n-        assert!(ends_with(res.as_bytes(), d.as_vec()));\n-        fn ends_with(v: &[u8], needle: &[u8]) -> bool {\n-            v.len() >= needle.len() && v.slice_from(v.len()-needle.len()) == needle\n-        }\n+        assert!(res.as_bytes().ends_with(d.as_vec()));\n     }\n \n     #[test]"}, {"sha": "0fe168625187a3fdae3b1fde2d230590f17689cd", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fcb53493dc80469acf86797c53dacc331629d50/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcb53493dc80469acf86797c53dacc331629d50/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=2fcb53493dc80469acf86797c53dacc331629d50", "patch": "@@ -217,10 +217,6 @@ fn is_read_only(p: &Path) -> bool {\n     }\n }\n \n-fn ends_with(v: &[u8], needle: &[u8]) -> bool {\n-    v.len() >= needle.len() && v.slice_from(v.len() - needle.len()) == needle\n-}\n-\n fn test_sysroot() -> Path {\n     // Totally gross hack but it's just for test cases.\n     // Infer the sysroot from the exe name and pray that it's right.\n@@ -747,7 +743,7 @@ fn test_package_version() {\n                                              &ws) {\n         Some(p) => {\n             let suffix = format!(\"0.4{}\", os::consts::DLL_SUFFIX);\n-            ends_with(p.as_vec(), suffix.as_bytes())\n+            p.as_vec().ends_with(suffix.as_bytes())\n         }\n         None    => false\n     });\n@@ -785,7 +781,7 @@ fn test_package_request_version() {\n         Some(p) => {\n             debug2!(\"installed: {}\", p.display());\n             let suffix = format!(\"0.3{}\", os::consts::DLL_SUFFIX);\n-            ends_with(p.as_vec(), suffix.as_bytes())\n+            p.as_vec().ends_with(suffix.as_bytes())\n         }\n         None    => false\n     });"}, {"sha": "17dcced94859bd0b7735d7d3548e4a90ec6f8503", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2fcb53493dc80469acf86797c53dacc331629d50/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcb53493dc80469acf86797c53dacc331629d50/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=2fcb53493dc80469acf86797c53dacc331629d50", "patch": "@@ -1173,6 +1173,12 @@ pub trait ImmutableEqVector<T:Eq> {\n \n     /// Return true if a vector contains an element with the given value\n     fn contains(&self, x: &T) -> bool;\n+\n+    /// Returns true if `needle` is a prefix of the vector.\n+    fn starts_with(&self, needle: &[T]) -> bool;\n+\n+    /// Returns true if `needle` is a suffix of the vector.\n+    fn ends_with(&self, needle: &[T]) -> bool;\n }\n \n impl<'self,T:Eq> ImmutableEqVector<T> for &'self [T] {\n@@ -1190,6 +1196,18 @@ impl<'self,T:Eq> ImmutableEqVector<T> for &'self [T] {\n     fn contains(&self, x: &T) -> bool {\n         self.iter().any(|elt| *x == *elt)\n     }\n+\n+    #[inline]\n+    fn starts_with(&self, needle: &[T]) -> bool {\n+        let n = needle.len();\n+        self.len() >= n && needle == self.slice_to(n)\n+    }\n+\n+    #[inline]\n+    fn ends_with(&self, needle: &[T]) -> bool {\n+        let (m, n) = (self.len(), needle.len());\n+        m >= n && needle == self.slice_from(m - n)\n+    }\n }\n \n /// Extension methods for vectors containing `TotalOrd` elements.\n@@ -3828,6 +3846,34 @@ mod tests {\n         assert_eq!(xs.capacity(), 100);\n         assert_eq!(xs, range(0, 100).to_owned_vec());\n     }\n+\n+    #[test]\n+    fn test_starts_with() {\n+        assert!(bytes!(\"foobar\").starts_with(bytes!(\"foo\")));\n+        assert!(!bytes!(\"foobar\").starts_with(bytes!(\"oob\")));\n+        assert!(!bytes!(\"foobar\").starts_with(bytes!(\"bar\")));\n+        assert!(!bytes!(\"foo\").starts_with(bytes!(\"foobar\")));\n+        assert!(!bytes!(\"bar\").starts_with(bytes!(\"foobar\")));\n+        assert!(bytes!(\"foobar\").starts_with(bytes!(\"foobar\")));\n+        let empty: &[u8] = [];\n+        assert!(empty.starts_with(empty));\n+        assert!(!empty.starts_with(bytes!(\"foo\")));\n+        assert!(bytes!(\"foobar\").starts_with(empty));\n+    }\n+\n+    #[test]\n+    fn test_ends_with() {\n+        assert!(bytes!(\"foobar\").ends_with(bytes!(\"bar\")));\n+        assert!(!bytes!(\"foobar\").ends_with(bytes!(\"oba\")));\n+        assert!(!bytes!(\"foobar\").ends_with(bytes!(\"foo\")));\n+        assert!(!bytes!(\"foo\").ends_with(bytes!(\"foobar\")));\n+        assert!(!bytes!(\"bar\").ends_with(bytes!(\"foobar\")));\n+        assert!(bytes!(\"foobar\").ends_with(bytes!(\"foobar\")));\n+        let empty: &[u8] = [];\n+        assert!(empty.ends_with(empty));\n+        assert!(!empty.ends_with(bytes!(\"foo\")));\n+        assert!(bytes!(\"foobar\").ends_with(empty));\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "5d12f4e88177c038a8edc4df59509880032ea3aa", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fcb53493dc80469acf86797c53dacc331629d50/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcb53493dc80469acf86797c53dacc331629d50/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=2fcb53493dc80469acf86797c53dacc331629d50", "patch": "@@ -30,13 +30,10 @@ fn test_tempdir() {\n     let path = {\n         let p = TempDir::new_in(&Path::new(\".\"), \"foobar\").unwrap();\n         let p = p.path();\n-        assert!(ends_with(p.as_vec(), bytes!(\"foobar\")));\n+        assert!(p.as_vec().ends_with(bytes!(\"foobar\")));\n         p.clone()\n     };\n     assert!(!os::path_exists(&path));\n-    fn ends_with(v: &[u8], needle: &[u8]) -> bool {\n-        v.len() >= needle.len() && v.slice_from(v.len()-needle.len()) == needle\n-    }\n }\n \n fn test_rm_tempdir() {"}]}