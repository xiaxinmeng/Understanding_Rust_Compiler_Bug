{"sha": "637b3f68079fc81db9bfd2c0f8f306c892680d25", "node_id": "C_kwDOAAsO6NoAKDYzN2IzZjY4MDc5ZmM4MWRiOWJmZDJjMGY4ZjMwNmM4OTI2ODBkMjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T10:29:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T10:29:39Z"}, "message": "Auto merge of #96576 - oli-obk:post_monomorphization_error_backtrace, r=lqd\n\nAlso report the call site of PME errors locally.\n\nNote this does not produce a full stack all the way to the first call that specifies all monomorphic parameters, it's just shallowly mentioning the last call site.\n\nprevious work: https://github.com/rust-lang/rust/pull/85633\ntracking issue: https://github.com/rust-lang/rust/issues/85155\n\nr? `@lqd`\n\nI figured we could get some improvement for traces in local crates without going into the backtrace hell you landed in last time", "tree": {"sha": "ec1d6dd0d75a2b8a0fad474d77e45dccd707ecc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec1d6dd0d75a2b8a0fad474d77e45dccd707ecc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/637b3f68079fc81db9bfd2c0f8f306c892680d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/637b3f68079fc81db9bfd2c0f8f306c892680d25", "html_url": "https://github.com/rust-lang/rust/commit/637b3f68079fc81db9bfd2c0f8f306c892680d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/637b3f68079fc81db9bfd2c0f8f306c892680d25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f75d884046e07bb26edeaba9b8c982dc97485fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f75d884046e07bb26edeaba9b8c982dc97485fd5", "html_url": "https://github.com/rust-lang/rust/commit/f75d884046e07bb26edeaba9b8c982dc97485fd5"}, {"sha": "91f422dfda98b17688986cca817dbff9a4f8b9cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/91f422dfda98b17688986cca817dbff9a4f8b9cb", "html_url": "https://github.com/rust-lang/rust/commit/91f422dfda98b17688986cca817dbff9a4f8b9cb"}], "stats": {"total": 104, "additions": 98, "deletions": 6}, "files": [{"sha": "1828aecb375c4fdcc9943cb5542e8908f7adf104", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/637b3f68079fc81db9bfd2c0f8f306c892680d25/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637b3f68079fc81db9bfd2c0f8f306c892680d25/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=637b3f68079fc81db9bfd2c0f8f306c892680d25", "patch": "@@ -182,7 +182,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_middle::mir::interpret::{AllocId, ConstValue};\n@@ -393,6 +393,7 @@ fn collect_items_rec<'tcx>(\n     // error count. If it has changed, a PME occurred, and we trigger some diagnostics about the\n     // current step of mono items collection.\n     //\n+    // FIXME: don't rely on global state, instead bubble up errors. Note: this is very hard to do.\n     let error_count = tcx.sess.diagnostic().err_count();\n \n     match starting_point.node {\n@@ -473,12 +474,9 @@ fn collect_items_rec<'tcx>(\n     }\n \n     // Check for PMEs and emit a diagnostic if one happened. To try to show relevant edges of the\n-    // mono item graph where the PME diagnostics are currently the most problematic (e.g. ones\n-    // involving a dependency, and the lack of context is confusing) in this MVP, we focus on\n-    // diagnostics on edges crossing a crate boundary: the collected mono items which are not\n-    // defined in the local crate.\n+    // mono item graph.\n     if tcx.sess.diagnostic().err_count() > error_count\n-        && starting_point.node.krate() != LOCAL_CRATE\n+        && starting_point.node.is_generic_fn()\n         && starting_point.node.is_user_defined()\n     {\n         let formatted_item = with_no_trimmed_paths!(starting_point.node.to_string());"}, {"sha": "298f0a4a446dd5b31ce5517b85db144a8330b9cb", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=637b3f68079fc81db9bfd2c0f8f306c892680d25", "patch": "@@ -16,6 +16,12 @@ error[E0080]: evaluation of `foo::<()>` failed\n LL |     &<A<T> as Foo<T>>::BAR\n    |      ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n+note: the above error was encountered while instantiating `fn foo::<()>`\n+  --> $DIR/issue-50814-2.rs:31:22\n+   |\n+LL |     println!(\"{:x}\", foo::<()>() as *const usize as usize);\n+   |                      ^^^^^^^^^^^\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "87bea28e76325d594b55ac51398095f5c23669fb", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=637b3f68079fc81db9bfd2c0f8f306c892680d25", "patch": "@@ -16,6 +16,12 @@ error[E0080]: evaluation of `foo::<i32>` failed\n LL |     &Sum::<U8,U8>::MAX\n    |      ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n+note: the above error was encountered while instantiating `fn foo::<i32>`\n+  --> $DIR/issue-50814.rs:26:5\n+   |\n+LL |     foo(0);\n+   |     ^^^^^^\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "1fd9b6b3b9dbaa65a7f81ef4cff8373873a8344e", "filename": "src/test/ui/generics/post_monomorphization_error_backtrace.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fgenerics%2Fpost_monomorphization_error_backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fgenerics%2Fpost_monomorphization_error_backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fpost_monomorphization_error_backtrace.rs?ref=637b3f68079fc81db9bfd2c0f8f306c892680d25", "patch": "@@ -0,0 +1,33 @@\n+// build-fail\n+\n+fn assert_zst<T>() {\n+    struct F<T>(T);\n+    impl<T> F<T> {\n+        const V: () = assert!(std::mem::size_of::<T>() == 0);\n+        //~^ ERROR: evaluation of `assert_zst::F::<u32>::V` failed [E0080]\n+        //~| NOTE: in this expansion of assert!\n+        //~| NOTE: the evaluated program panicked\n+        //~| ERROR: evaluation of `assert_zst::F::<i32>::V` failed [E0080]\n+        //~| NOTE: in this expansion of assert!\n+        //~| NOTE: the evaluated program panicked\n+    }\n+    let _ = F::<T>::V;\n+}\n+\n+fn foo<U>() {\n+    assert_zst::<U>()\n+    //~^ NOTE: the above error was encountered while instantiating `fn assert_zst::<u32>`\n+    //~| NOTE: the above error was encountered while instantiating `fn assert_zst::<i32>`\n+}\n+\n+\n+fn bar<V>() {\n+    foo::<V>()\n+}\n+\n+fn main() {\n+    bar::<()>();\n+    bar::<u32>();\n+    bar::<u32>();\n+    bar::<i32>();\n+}"}, {"sha": "0d707d83d2660c9225f9b8a881041a7586cbcc94", "filename": "src/test/ui/generics/post_monomorphization_error_backtrace.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fgenerics%2Fpost_monomorphization_error_backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fgenerics%2Fpost_monomorphization_error_backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fpost_monomorphization_error_backtrace.stderr?ref=637b3f68079fc81db9bfd2c0f8f306c892680d25", "patch": "@@ -0,0 +1,31 @@\n+error[E0080]: evaluation of `assert_zst::F::<u32>::V` failed\n+  --> $DIR/post_monomorphization_error_backtrace.rs:6:23\n+   |\n+LL |         const V: () = assert!(std::mem::size_of::<T>() == 0);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: std::mem::size_of::<T>() == 0', $DIR/post_monomorphization_error_backtrace.rs:6:23\n+   |\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: the above error was encountered while instantiating `fn assert_zst::<u32>`\n+  --> $DIR/post_monomorphization_error_backtrace.rs:18:5\n+   |\n+LL |     assert_zst::<U>()\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0080]: evaluation of `assert_zst::F::<i32>::V` failed\n+  --> $DIR/post_monomorphization_error_backtrace.rs:6:23\n+   |\n+LL |         const V: () = assert!(std::mem::size_of::<T>() == 0);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: std::mem::size_of::<T>() == 0', $DIR/post_monomorphization_error_backtrace.rs:6:23\n+   |\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: the above error was encountered while instantiating `fn assert_zst::<i32>`\n+  --> $DIR/post_monomorphization_error_backtrace.rs:18:5\n+   |\n+LL |     assert_zst::<U>()\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "5edbb119f78690c54ede7789661bf60e0242c482", "filename": "src/test/ui/polymorphization/generators.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr?ref=637b3f68079fc81db9bfd2c0f8f306c892680d25", "patch": "@@ -19,6 +19,12 @@ LL | |         2\n LL | |     }\n    | |_____^\n \n+note: the above error was encountered while instantiating `fn finish::<[generator@$DIR/generators.rs:35:5: 39:6], u32, u32>`\n+  --> $DIR/generators.rs:86:5\n+   |\n+LL |     finish(unused_type::<u32>());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: item has unused generic parameters\n   --> $DIR/generators.rs:60:5\n    |\n@@ -31,5 +37,11 @@ LL | |         2\n LL | |     }\n    | |_____^\n \n+note: the above error was encountered while instantiating `fn finish::<[generator@$DIR/generators.rs:60:5: 64:6], u32, u32>`\n+  --> $DIR/generators.rs:89:5\n+   |\n+LL |     finish(unused_const::<1u32>());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "dc6ebceae2197a15b66d1e9883958e658e533f8f", "filename": "src/test/ui/polymorphization/predicates.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/637b3f68079fc81db9bfd2c0f8f306c892680d25/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr?ref=637b3f68079fc81db9bfd2c0f8f306c892680d25", "patch": "@@ -41,5 +41,11 @@ error: item has unused generic parameters\n LL | fn bar<I>() {\n    |    ^^^ - generic parameter `I` is unused\n \n+note: the above error was encountered while instantiating `fn foo::<std::slice::Iter<u32>, T>`\n+  --> $DIR/predicates.rs:85:5\n+   |\n+LL |     foo(x.iter());\n+   |     ^^^^^^^^^^^^^\n+\n error: aborting due to 6 previous errors\n "}]}