{"sha": "41fb84e4446762d49ca4b43b43d2ab96e14505b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZmI4NGU0NDQ2NzYyZDQ5Y2E0YjQzYjQzZDJhYjk2ZTE0NTA1YjY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-15T09:36:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T09:36:22Z"}, "message": "Rollup merge of #66306 - spastorino:remove-error-handled-by-miri, r=oli-obk\n\nRemove cannot mutate statics in initializer of another static error\n\nr? @oli-obk\n\nThis is just a refactoring. As the removed code itself said, it only a heuristic catching a few cases early instead of leaving it all to const eval. It's easy to work around the static check and then run into the miri-engine check.", "tree": {"sha": "2a69ac88b4195d1e28f563c52f918c8a8bf1c9a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a69ac88b4195d1e28f563c52f918c8a8bf1c9a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41fb84e4446762d49ca4b43b43d2ab96e14505b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdznGWCRBK7hj4Ov3rIwAAdHIIAIEGKzm2Js3TR4/PwRtu5yfz\nwDv5R/K6xctXdJ3f0jcDHBWaIx+zTuf5J6HwNbnwaOm4S56jlaCw+F4zKFebyhau\nbWrYsdqtuPnWSm0KftkHlhysRsw6zBZPtsNbC0h3waLAwWai2BXiYF7blCaGe1dZ\nYnZbV0hM7oIuBMZZonWKr0VYOJJ4pFR4waMc3GpxKb8TR2DlxWyO0Wko1phGfIMs\nzUzfCZfduFpA4yMXsiPzMEtUWme/ewKZtN9and5Q8ZSeirhP0jwG4al9QkMBnoDd\njSp40WvwFcHKBcBRqlyVzkju0u2pVlnvoUh+QERC/uPQK9wS9jl0Ty6V3kv/1yo=\n=Dt4e\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a69ac88b4195d1e28f563c52f918c8a8bf1c9a0\nparent 22c0f628df2353e121650b7618dd4bd71535c2bf\nparent 695e91a1d585dbf462f4cb6c41eeb54cc34286d6\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573810582 +0900\ncommitter GitHub <noreply@github.com> 1573810582 +0900\n\nRollup merge of #66306 - spastorino:remove-error-handled-by-miri, r=oli-obk\n\nRemove cannot mutate statics in initializer of another static error\n\nr? @oli-obk\n\nThis is just a refactoring. As the removed code itself said, it only a heuristic catching a few cases early instead of leaving it all to const eval. It's easy to work around the static check and then run into the miri-engine check.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41fb84e4446762d49ca4b43b43d2ab96e14505b6", "html_url": "https://github.com/rust-lang/rust/commit/41fb84e4446762d49ca4b43b43d2ab96e14505b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41fb84e4446762d49ca4b43b43d2ab96e14505b6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22c0f628df2353e121650b7618dd4bd71535c2bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/22c0f628df2353e121650b7618dd4bd71535c2bf", "html_url": "https://github.com/rust-lang/rust/commit/22c0f628df2353e121650b7618dd4bd71535c2bf"}, {"sha": "695e91a1d585dbf462f4cb6c41eeb54cc34286d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/695e91a1d585dbf462f4cb6c41eeb54cc34286d6", "html_url": "https://github.com/rust-lang/rust/commit/695e91a1d585dbf462f4cb6c41eeb54cc34286d6"}], "stats": {"total": 55, "additions": 10, "deletions": 45}, "files": [{"sha": "74b22d8e14366af24025dabaf7fd15ac9fdad5cc", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=41fb84e4446762d49ca4b43b43d2ab96e14505b6", "patch": "@@ -326,17 +326,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 let is_thread_local = self.tcx.has_attr(*def_id, sym::thread_local);\n                 if is_thread_local {\n                     self.check_op(ops::ThreadLocalAccess);\n-                } else if self.const_kind() == ConstKind::Static && context.is_mutating_use() {\n-                    // this is not strictly necessary as miri will also bail out\n-                    // For interior mutability we can't really catch this statically as that\n-                    // goes through raw pointers and intermediate temporaries, so miri has\n-                    // to catch this anyway\n-\n-                    self.tcx.sess.span_err(\n-                        self.span,\n-                        \"cannot mutate statics in the initializer of another static\",\n-                    );\n-                } else {\n+                } else if self.const_kind() != ConstKind::Static || !context.is_mutating_use() {\n                     self.check_op(ops::StaticAccess);\n                 }\n             }"}, {"sha": "964efdec2b9d227e4016a522ef60c3b47c9624f4", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=41fb84e4446762d49ca4b43b43d2ab96e14505b6", "patch": "@@ -787,19 +787,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n \n                 // Only allow statics (not consts) to refer to other statics.\n                 if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n-                    if self.mode == Mode::Static\n-                        && context.is_mutating_use()\n-                        && !self.suppress_errors\n-                    {\n-                        // this is not strictly necessary as miri will also bail out\n-                        // For interior mutability we can't really catch this statically as that\n-                        // goes through raw pointers and intermediate temporaries, so miri has\n-                        // to catch this anyway\n-                        self.tcx.sess.span_err(\n-                            self.span,\n-                            \"cannot mutate statics in the initializer of another static\",\n-                        );\n-                    }\n                     return;\n                 }\n                 unleash_miri!(self);"}, {"sha": "648caae30b4275fdf4dedfeae2a3122d97a759f6", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=41fb84e4446762d49ca4b43b43d2ab96e14505b6", "patch": "@@ -7,7 +7,8 @@ use std::cell::UnsafeCell;\n \n static mut FOO: u32 = 42;\n static BOO: () = unsafe {\n-    FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n+    FOO = 5;\n+    //~^ could not evaluate static initializer [E0080]\n };\n \n fn main() {}"}, {"sha": "cb4d35b9a18095e96cecc8b9e68da0d8658c8a95", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=41fb84e4446762d49ca4b43b43d2ab96e14505b6", "patch": "@@ -1,8 +1,9 @@\n-error: cannot mutate statics in the initializer of another static\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/assign-to-static-within-other-static.rs:10:5\n    |\n LL |     FOO = 5;\n-   |     ^^^^^^^\n+   |     ^^^^^^^ tried to modify a static's initial value from another static's initializer\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "94b6587eb815a2d12d78222d45fe1c7faa581240", "filename": "src/test/ui/error-codes/E0017.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=41fb84e4446762d49ca4b43b43d2ab96e14505b6", "patch": "@@ -4,6 +4,5 @@ const C: i32 = 2;\n const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR cannot borrow\n-                                              //~| ERROR cannot mutate statics\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n fn main() {}"}, {"sha": "47863f02214057e2ac319f03fd7067f256a21fe8", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=41fb84e4446762d49ca4b43b43d2ab96e14505b6", "patch": "@@ -10,25 +10,19 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ statics require immutable values\n \n-error: cannot mutate statics in the initializer of another static\n-  --> $DIR/E0017.rs:5:39\n-   |\n-LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^\n-\n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0017.rs:5:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0017.rs:8:38\n+  --> $DIR/E0017.rs:7:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "3aa4ac9655cc976cdad4944451b19a9ef795b391", "filename": "src/test/ui/error-codes/E0388.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=41fb84e4446762d49ca4b43b43d2ab96e14505b6", "patch": "@@ -4,7 +4,6 @@ const C: i32 = 2;\n const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR cannot borrow\n-                                              //~| ERROR cannot mutate statics\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n \n fn main() {}"}, {"sha": "b52d5260b13c82444cbaf444b35425e9c4c6e4a5", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41fb84e4446762d49ca4b43b43d2ab96e14505b6/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=41fb84e4446762d49ca4b43b43d2ab96e14505b6", "patch": "@@ -10,25 +10,19 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ statics require immutable values\n \n-error: cannot mutate statics in the initializer of another static\n-  --> $DIR/E0388.rs:5:39\n-   |\n-LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^\n-\n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0388.rs:5:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0388.rs:8:38\n+  --> $DIR/E0388.rs:7:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}]}