{"sha": "684f75713963f0ca67fcce2b13746e982f203cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NGY3NTcxMzk2M2YwY2E2N2ZjY2UyYjEzNzQ2ZTk4MmYyMDNjZWU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-01-22T08:19:35Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-01-22T08:19:35Z"}, "message": "Make clippy-suggested fixes.", "tree": {"sha": "1c261cd26737b951f6aaf488c671343e9b9759ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c261cd26737b951f6aaf488c671343e9b9759ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/684f75713963f0ca67fcce2b13746e982f203cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/684f75713963f0ca67fcce2b13746e982f203cee", "html_url": "https://github.com/rust-lang/rust/commit/684f75713963f0ca67fcce2b13746e982f203cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/684f75713963f0ca67fcce2b13746e982f203cee/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53fa985fc4eac40dfef71d344b62bd243499dff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/53fa985fc4eac40dfef71d344b62bd243499dff1", "html_url": "https://github.com/rust-lang/rust/commit/53fa985fc4eac40dfef71d344b62bd243499dff1"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "c641fc24db52eae46577fb79b36c373f2338a436", "filename": "src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/684f75713963f0ca67fcce2b13746e982f203cee/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684f75713963f0ca67fcce2b13746e982f203cee/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=684f75713963f0ca67fcce2b13746e982f203cee", "patch": "@@ -153,7 +153,7 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n             EvalError::AlignmentCheckFailed { required, has } =>\n                write!(f, \"tried to access memory with alignment {}, but alignment {} is required\",\n                       has, required),\n-            EvalError::TypeNotPrimitive(ref ty) =>\n+            EvalError::TypeNotPrimitive(ty) =>\n                 write!(f, \"expected primitive type, got {}\", ty),\n             EvalError::Layout(ref err) =>\n                 write!(f, \"rustc layout computation failed: {:?}\", err),"}, {"sha": "e02ea09be861f1ddc8054928ac28c5d96a73e6df", "filename": "src/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/684f75713963f0ca67fcce2b13746e982f203cee/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684f75713963f0ca67fcce2b13746e982f203cee/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=684f75713963f0ca67fcce2b13746e982f203cee", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             StackPopCleanup::None => {},\n         }\n         // deallocate all locals that are backed by an allocation\n-        for local in frame.locals.into_iter() {\n+        for local in frame.locals {\n             if let Value::ByRef(ptr) = local {\n                 trace!(\"deallocating local\");\n                 self.memory.dump_alloc(ptr.alloc_id);\n@@ -1457,7 +1457,7 @@ impl IntegerExt for layout::Integer {\n \n \n pub fn monomorphize_field_ty<'a, 'tcx:'a >(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &ty::FieldDef, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n-    let substituted = &f.ty(tcx, substs);\n+    let substituted = f.ty(tcx, substs);\n     tcx.normalize_associated_type(&substituted)\n }\n "}, {"sha": "47ed4fd0cebfb2559c08b7a93cd4705d8283eed8", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/684f75713963f0ca67fcce2b13746e982f203cee/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684f75713963f0ca67fcce2b13746e982f203cee/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=684f75713963f0ca67fcce2b13746e982f203cee", "patch": "@@ -1,7 +1,6 @@\n #![feature(\n     btree_range,\n     collections,\n-    collections_bound,\n     field_init_shorthand,\n     i128_type,\n     pub_restricted,"}, {"sha": "11082c633a7551437793f1cc8dcc6f5c0ef75de9", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/684f75713963f0ca67fcce2b13746e982f203cee/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684f75713963f0ca67fcce2b13746e982f203cee/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=684f75713963f0ca67fcce2b13746e982f203cee", "patch": "@@ -579,7 +579,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             traits::VtableFnPointer(vtable_fn_ptr) => {\n-                if let ty::TyFnDef(did, ref substs, _) = vtable_fn_ptr.fn_ty.sty {\n+                if let ty::TyFnDef(did, substs, _) = vtable_fn_ptr.fn_ty.sty {\n                     args.remove(0);\n                     self.unpack_fn_args(args)?;\n                     Ok((did, substs, Vec::new()))\n@@ -775,14 +775,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    fn drop_fields<\n-        I: Iterator<Item=(Ty<'tcx>, ty::layout::Size)>,\n-    >(\n+    fn drop_fields<I>(\n         &mut self,\n         mut fields: I,\n         lval: Lvalue<'tcx>,\n         drop: &mut Vec<(DefId, Value, &'tcx Substs<'tcx>)>,\n-    ) -> EvalResult<'tcx, ()> {\n+    ) -> EvalResult<'tcx, ()>\n+        where I: Iterator<Item = (Ty<'tcx>, ty::layout::Size)>,\n+    {\n         // FIXME: some aggregates may be represented by Value::ByValPair\n         let (adt_ptr, extra) = self.force_allocation(lval)?.to_ptr_and_extra();\n         // manual iteration, because we need to be careful about the last field if it is unsized"}, {"sha": "8e2607562b4114ab5f2e6a1e479c2985491c0a6e", "filename": "src/vtable.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/684f75713963f0ca67fcce2b13746e982f203cee/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684f75713963f0ca67fcce2b13746e982f203cee/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=684f75713963f0ca67fcce2b13746e982f203cee", "patch": "@@ -27,11 +27,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 traits::VtableBuiltin(_) => {\n                     Vec::new().into_iter()\n                 }\n-                traits::VtableImpl(\n-                    traits::VtableImplData {\n-                        impl_def_id: id,\n-                        substs,\n-                        nested: _ }) => {\n+\n+                traits::VtableImpl(traits::VtableImplData { impl_def_id: id, substs, .. }) => {\n                     self.get_vtable_methods(id, substs)\n                         .into_iter()\n                         .map(|opt_mth| opt_mth.map(|mth| {\n@@ -46,32 +43,35 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         .collect::<Vec<_>>()\n                         .into_iter()\n                 }\n+\n                 traits::VtableClosure(\n                     traits::VtableClosureData {\n                         closure_def_id,\n                         substs,\n-                        nested: _ }) => {\n+                        ..\n+                    }\n+                ) => {\n                     let closure_type = self.tcx.closure_type(closure_def_id, substs);\n                     vec![Some(self.memory.create_closure_ptr(self.tcx, closure_def_id, substs, closure_type))].into_iter()\n                 }\n-                traits::VtableFnPointer(\n-                    traits::VtableFnPointerData {\n-                        fn_ty,\n-                        nested: _ }) => {\n+\n+                traits::VtableFnPointer(traits::VtableFnPointerData { fn_ty, .. }) => {\n                     match fn_ty.sty {\n                         ty::TyFnDef(did, substs, bare_fn_ty) => {\n                             vec![Some(self.memory.create_fn_ptr(self.tcx, did, substs, bare_fn_ty))].into_iter()\n                         },\n                         _ => bug!(\"bad VtableFnPointer fn_ty: {:?}\", fn_ty),\n                     }\n                 }\n+\n                 traits::VtableObject(ref data) => {\n                     // this would imply that the Self type being erased is\n                     // an object type; this cannot happen because we\n                     // cannot cast an unsized type into a trait object\n                     bug!(\"cannot get vtable for an object type: {:?}\",\n                          data);\n                 }\n+\n                 vtable @ traits::VtableParam(..) => {\n                     bug!(\"resolved vtable for {:?} to bad vtable {:?} in trans\",\n                          trait_ref,\n@@ -100,7 +100,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n \n         self.memory.write_usize(vtable.offset(ptr_size), size)?;\n-        self.memory.write_usize(vtable.offset((ptr_size * 2)), align)?;\n+        self.memory.write_usize(vtable.offset(ptr_size * 2), align)?;\n \n         for (i, method) in methods.into_iter().enumerate() {\n             if let Some(method) = method {"}]}