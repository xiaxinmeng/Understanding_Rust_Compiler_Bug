{"sha": "6373861510795bcaa6e98e97942c32eb26263bd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzM4NjE1MTA3OTViY2FhNmU5OGU5Nzk0MmMzMmViMjYyNjNiZDg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-24T02:52:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-24T02:52:16Z"}, "message": "core: Convert reinterpret_cast to transmute in TLS. #6039", "tree": {"sha": "c4d23b8ff777d7872851a6dddd8bc5bf997ba292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d23b8ff777d7872851a6dddd8bc5bf997ba292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6373861510795bcaa6e98e97942c32eb26263bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6373861510795bcaa6e98e97942c32eb26263bd8", "html_url": "https://github.com/rust-lang/rust/commit/6373861510795bcaa6e98e97942c32eb26263bd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6373861510795bcaa6e98e97942c32eb26263bd8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e944c7dadeed48b199df6891603ae063233ec5a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e944c7dadeed48b199df6891603ae063233ec5a8", "html_url": "https://github.com/rust-lang/rust/commit/e944c7dadeed48b199df6891603ae063233ec5a8"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "e32d18719bd00eef7683c4705a0a205ce2979d10", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6373861510795bcaa6e98e97942c32eb26263bd8/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6373861510795bcaa6e98e97942c32eb26263bd8/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=6373861510795bcaa6e98e97942c32eb26263bd8", "patch": "@@ -49,8 +49,8 @@ impl<T:Durable> LocalData for @T { }\n impl Eq for @LocalData {\n     fn eq(&self, other: &@LocalData) -> bool {\n         unsafe {\n-            let ptr_a: (uint, uint) = cast::reinterpret_cast(&(*self));\n-            let ptr_b: (uint, uint) = cast::reinterpret_cast(other);\n+            let ptr_a: &(uint, uint) = cast::transmute(self);\n+            let ptr_b: &(uint, uint) = cast::transmute(other);\n             return ptr_a == ptr_b;\n         }\n     }\n@@ -68,7 +68,7 @@ fn cleanup_task_local_map(map_ptr: *libc::c_void) {\n         assert!(!map_ptr.is_null());\n         // Get and keep the single reference that was created at the\n         // beginning.\n-        let _map: TaskLocalMap = cast::reinterpret_cast(&map_ptr);\n+        let _map: TaskLocalMap = cast::transmute(map_ptr);\n         // All local_data will be destroyed along with the map.\n     }\n }\n@@ -125,14 +125,9 @@ unsafe fn get_newsched_local_map(local: *mut LocalStorage) -> TaskLocalMap {\n         &LocalStorage(ref mut map_ptr, ref mut at_exit) => {\n             assert!((*map_ptr).is_null());\n             let map: TaskLocalMap = @mut ~[];\n-            // Use reinterpret_cast -- transmute would take map away from us also.\n-            *map_ptr = cast::reinterpret_cast(&map);\n+            *map_ptr = cast::transmute(map);\n             let at_exit_fn: ~fn(*libc::c_void) = |p|cleanup_task_local_map(p);\n             *at_exit = Some(at_exit_fn);\n-            // Also need to reference it an extra time to keep it for now.\n-            let nonmut = cast::transmute::<TaskLocalMap,\n-            @~[Option<TaskLocalElement>]>(map);\n-            cast::bump_box_refcount(nonmut);\n             return map;\n         }\n     }\n@@ -143,7 +138,7 @@ unsafe fn key_to_key_value<T:Durable>(\n \n     // Keys are closures, which are (fnptr,envptr) pairs. Use fnptr.\n     // Use reintepret_cast -- transmute would leak (forget) the closure.\n-    let pair: (*libc::c_void, *libc::c_void) = cast::reinterpret_cast(&key);\n+    let pair: (*libc::c_void, *libc::c_void) = cast::transmute(key);\n     pair.first()\n }\n \n@@ -213,7 +208,7 @@ pub unsafe fn local_set<T:Durable>(\n     // own on it can be dropped when the box is destroyed. The unsafe pointer\n     // does not have a reference associated with it, so it may become invalid\n     // when the box is destroyed.\n-    let data_ptr = cast::reinterpret_cast(&data);\n+    let data_ptr = *cast::transmute::<&@T, &*libc::c_void>(&data);\n     let data_box = @data as @LocalData;\n     // Construct new entry to store in the map.\n     let new_entry = Some((keyval, data_ptr, data_box));"}]}