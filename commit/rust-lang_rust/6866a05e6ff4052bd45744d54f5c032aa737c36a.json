{"sha": "6866a05e6ff4052bd45744d54f5c032aa737c36a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NjZhMDVlNmZmNDA1MmJkNDU3NDRkNTRmNWMwMzJhYTczN2MzNmE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-07T22:23:05Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T19:19:06Z"}, "message": "Use rewriter api to add both changes", "tree": {"sha": "05b523b973607c0783e5f7e52b63f11f910f06b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05b523b973607c0783e5f7e52b63f11f910f06b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6866a05e6ff4052bd45744d54f5c032aa737c36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6866a05e6ff4052bd45744d54f5c032aa737c36a", "html_url": "https://github.com/rust-lang/rust/commit/6866a05e6ff4052bd45744d54f5c032aa737c36a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6866a05e6ff4052bd45744d54f5c032aa737c36a/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f62e8616c879255e70052ae35ce7f98bffedac11", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62e8616c879255e70052ae35ce7f98bffedac11", "html_url": "https://github.com/rust-lang/rust/commit/f62e8616c879255e70052ae35ce7f98bffedac11"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "9242b860cc0d9522fa0c2c0be469180c22acc980", "filename": "crates/completion/src/completions/complete_magic.rs", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6866a05e6ff4052bd45744d54f5c032aa737c36a/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fcomplete_magic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6866a05e6ff4052bd45744d54f5c032aa737c36a/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fcomplete_magic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fcomplete_magic.rs?ref=6866a05e6ff4052bd45744d54f5c032aa737c36a", "patch": "@@ -3,7 +3,7 @@\n use assists::utils::{insert_use, mod_path_to_ast, ImportScope, MergeBehaviour};\n use hir::Query;\n use itertools::Itertools;\n-use syntax::AstNode;\n+use syntax::{algo, AstNode};\n use text_edit::TextEdit;\n \n use crate::{context::CompletionContext, item::CompletionKind, CompletionItem, CompletionItemKind};\n@@ -17,9 +17,6 @@ pub(crate) fn complete_magic(acc: &mut Completions, ctx: &CompletionContext) ->\n     let current_module = ctx.scope.module()?;\n     let anchor = ctx.name_ref_syntax.as_ref()?;\n     let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n-    // TODO kb now this is the whole file, which is not disjoint with any other change in the same file, fix it\n-    // otherwise it's impossible to correctly add the use statement and also change the completed text into something more meaningful\n-    let import_syntax = import_scope.as_syntax_node();\n \n     // TODO kb consider heuristics, such as \"don't show `hash_map` import if `HashMap` is the import for completion\"\n     // TODO kb module functions are not completed, consider `std::io::stdin` one\n@@ -35,23 +32,24 @@ pub(crate) fn complete_magic(acc: &mut Completions, ctx: &CompletionContext) ->\n             either::Either::Right(macro_def) => current_module.find_use_path(ctx.db, macro_def),\n         })\n         .filter_map(|mod_path| {\n+            let mut builder = TextEdit::builder();\n+\n             let correct_qualifier = mod_path.segments.last()?.to_string();\n+            builder.replace(anchor.syntax().text_range(), correct_qualifier);\n+\n+            // TODO kb: assists already have the merge behaviour setting, need to unite both\n             let rewriter =\n                 insert_use(&import_scope, mod_path_to_ast(&mod_path), Some(MergeBehaviour::Full));\n-            let rewritten_node = rewriter.rewrite(import_syntax);\n-            let insert_use_edit =\n-                TextEdit::replace(import_syntax.text_range(), rewritten_node.to_string());\n-            let mut completion_edit =\n-                TextEdit::replace(anchor.syntax().text_range(), correct_qualifier);\n-            completion_edit.union(insert_use_edit).expect(\"TODO kb\");\n+            let old_ast = rewriter.rewrite_root()?;\n+            algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut builder);\n \n             let completion_item: CompletionItem = CompletionItem::new(\n                 CompletionKind::Magic,\n                 ctx.source_range(),\n                 mod_path.to_string(),\n             )\n             .kind(CompletionItemKind::Struct)\n-            .text_edit(completion_edit)\n+            .text_edit(builder.finish())\n             .into();\n             Some(completion_item)\n         });\n@@ -74,6 +72,48 @@ mod tests {\n         expect.assert_eq(&actual)\n     }\n \n+    #[test]\n+    fn function_magic_completion() {\n+        check(\n+            r#\"\n+//- /lib.rs crate:dep\n+pub mod io {\n+    pub fn stdin() {}\n+};\n+\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    stdi<|>\n+}\n+\"#,\n+            expect![[r#\"\n+                st dep::io::stdin\n+            \"#]],\n+        );\n+\n+        check_edit(\n+            \"dep::io::stdin\",\n+            r#\"\n+//- /lib.rs crate:dep\n+pub mod io {\n+    pub fn stdin() {}\n+};\n+\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    stdi<|>\n+}\n+\"#,\n+            r#\"\n+use dep::io::stdin;\n+\n+fn main() {\n+    stdin\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn case_insensitive_magic_completion_works() {\n         check("}]}