{"sha": "539402cb0b0f1639a4be14e40eaf8db61a62ae41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOTQwMmNiMGIwZjE2MzlhNGJlMTRlNDBlYWY4ZGI2MWE2MmFlNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-21T13:11:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-21T13:11:35Z"}, "message": "Auto merge of #77805 - JohnTitor:non-standard-char-sugg, r=Dylan-DPC\n\nlint: Do not provide suggestions for non standard characters\n\nFixes #77273\n\nOnly provide suggestions if the case-fixed result is different than the original.", "tree": {"sha": "c6c6d6c7a9c74e6b94656e3fedc3d4733f15f261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6c6d6c7a9c74e6b94656e3fedc3d4733f15f261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/539402cb0b0f1639a4be14e40eaf8db61a62ae41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/539402cb0b0f1639a4be14e40eaf8db61a62ae41", "html_url": "https://github.com/rust-lang/rust/commit/539402cb0b0f1639a4be14e40eaf8db61a62ae41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/539402cb0b0f1639a4be14e40eaf8db61a62ae41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "822fa7cb0d15e3587b6307f6c576958898616eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/822fa7cb0d15e3587b6307f6c576958898616eea", "html_url": "https://github.com/rust-lang/rust/commit/822fa7cb0d15e3587b6307f6c576958898616eea"}, {"sha": "410fc0e3db32daf18704885ddf91567345bbce63", "url": "https://api.github.com/repos/rust-lang/rust/commits/410fc0e3db32daf18704885ddf91567345bbce63", "html_url": "https://github.com/rust-lang/rust/commit/410fc0e3db32daf18704885ddf91567345bbce63"}], "stats": {"total": 110, "additions": 91, "deletions": 19}, "files": [{"sha": "dd2627f7bc15c3f5da14e71aa4c681a83e0c67ca", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/539402cb0b0f1639a4be14e40eaf8db61a62ae41/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539402cb0b0f1639a4be14e40eaf8db61a62ae41/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=539402cb0b0f1639a4be14e40eaf8db61a62ae41", "patch": "@@ -127,14 +127,20 @@ impl NonCamelCaseTypes {\n         if !is_camel_case(name) {\n             cx.struct_span_lint(NON_CAMEL_CASE_TYPES, ident.span, |lint| {\n                 let msg = format!(\"{} `{}` should have an upper camel case name\", sort, name);\n-                lint.build(&msg)\n-                    .span_suggestion(\n+                let mut err = lint.build(&msg);\n+                let cc = to_camel_case(name);\n+                // We cannot provide meaningful suggestions\n+                // if the characters are in the category of \"Lowercase Letter\".\n+                if name.to_string() != cc {\n+                    err.span_suggestion(\n                         ident.span,\n                         \"convert the identifier to upper camel case\",\n                         to_camel_case(name),\n                         Applicability::MaybeIncorrect,\n-                    )\n-                    .emit()\n+                    );\n+                }\n+\n+                err.emit();\n             })\n         }\n     }\n@@ -263,17 +269,21 @@ impl NonSnakeCase {\n                 let sc = NonSnakeCase::to_snake_case(name);\n                 let msg = format!(\"{} `{}` should have a snake case name\", sort, name);\n                 let mut err = lint.build(&msg);\n-                // We have a valid span in almost all cases, but we don't have one when linting a crate\n-                // name provided via the command line.\n-                if !ident.span.is_dummy() {\n-                    err.span_suggestion(\n-                        ident.span,\n-                        \"convert the identifier to snake case\",\n-                        sc,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                } else {\n-                    err.help(&format!(\"convert the identifier to snake case: `{}`\", sc));\n+                // We cannot provide meaningful suggestions\n+                // if the characters are in the category of \"Uppercase Letter\".\n+                if name.to_string() != sc {\n+                    // We have a valid span in almost all cases, but we don't have one when linting a crate\n+                    // name provided via the command line.\n+                    if !ident.span.is_dummy() {\n+                        err.span_suggestion(\n+                            ident.span,\n+                            \"convert the identifier to snake case\",\n+                            sc,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else {\n+                        err.help(&format!(\"convert the identifier to snake case: `{}`\", sc));\n+                    }\n                 }\n \n                 err.emit();\n@@ -441,14 +451,20 @@ impl NonUpperCaseGlobals {\n         if name.chars().any(|c| c.is_lowercase()) {\n             cx.struct_span_lint(NON_UPPER_CASE_GLOBALS, ident.span, |lint| {\n                 let uc = NonSnakeCase::to_snake_case(&name).to_uppercase();\n-                lint.build(&format!(\"{} `{}` should have an upper case name\", sort, name))\n-                    .span_suggestion(\n+                let mut err =\n+                    lint.build(&format!(\"{} `{}` should have an upper case name\", sort, name));\n+                // We cannot provide meaningful suggestions\n+                // if the characters are in the category of \"Lowercase Letter\".\n+                if name.to_string() != uc {\n+                    err.span_suggestion(\n                         ident.span,\n                         \"convert the identifier to upper case\",\n                         uc,\n                         Applicability::MaybeIncorrect,\n-                    )\n-                    .emit();\n+                    );\n+                }\n+\n+                err.emit();\n             })\n         }\n     }"}, {"sha": "71ebf05dd31abefac1404c4556372bb7c1d686de", "filename": "src/test/ui/lint/special-upper-lower-cases.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/539402cb0b0f1639a4be14e40eaf8db61a62ae41/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539402cb0b0f1639a4be14e40eaf8db61a62ae41/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.rs?ref=539402cb0b0f1639a4be14e40eaf8db61a62ae41", "patch": "@@ -0,0 +1,24 @@\n+// (#77273) These characters are in the general categories of\n+// \"Uppercase/Lowercase Letter\".\n+// The diagnostics don't provide meaningful suggestions for them\n+// as we cannot convert them properly.\n+\n+// check-pass\n+\n+#![feature(non_ascii_idents)]\n+#![allow(uncommon_codepoints, unused)]\n+\n+struct \ud835\udd5f\ud835\udd60\ud835\udd65\ud835\udd52\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d;\n+//~^ WARN: type `\ud835\udd5f\ud835\udd60\ud835\udd65\ud835\udd52\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d` should have an upper camel case name\n+\n+// FIXME: How we should handle this?\n+struct \ud835\udd5f\ud835\udd60\ud835\udd65_\ud835\udd52_\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d;\n+//~^ WARN: type `\ud835\udd5f\ud835\udd60\ud835\udd65_\ud835\udd52_\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d` should have an upper camel case name\n+\n+static \ud835\uddfb\ud835\uddfc\ud835\uddfb\ud835\ude02\ud835\uddfd\ud835\uddfd\ud835\uddf2\ud835\uddff\ud835\uddf0\ud835\uddee\ud835\ude00\ud835\uddf2: i32 = 1;\n+//~^ WARN: static variable `\ud835\uddfb\ud835\uddfc\ud835\uddfb\ud835\ude02\ud835\uddfd\ud835\uddfd\ud835\uddf2\ud835\uddff\ud835\uddf0\ud835\uddee\ud835\ude00\ud835\uddf2` should have an upper case name\n+\n+fn main() {\n+    let \ud835\udce2\ud835\udcdd\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcda\ud835\udcd4\ud835\udce2 = 1;\n+    //~^ WARN: variable `\ud835\udce2\ud835\udcdd\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcda\ud835\udcd4\ud835\udce2` should have a snake case name\n+}"}, {"sha": "f32193a2e4a471463857dfb3fdd05146e6cc7ec9", "filename": "src/test/ui/lint/special-upper-lower-cases.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/539402cb0b0f1639a4be14e40eaf8db61a62ae41/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539402cb0b0f1639a4be14e40eaf8db61a62ae41/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.stderr?ref=539402cb0b0f1639a4be14e40eaf8db61a62ae41", "patch": "@@ -0,0 +1,32 @@\n+warning: type `\ud835\udd5f\ud835\udd60\ud835\udd65\ud835\udd52\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d` should have an upper camel case name\n+  --> $DIR/special-upper-lower-cases.rs:11:8\n+   |\n+LL | struct \ud835\udd5f\ud835\udd60\ud835\udd65\ud835\udd52\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d;\n+   |        ^^^^^^^^^\n+   |\n+   = note: `#[warn(non_camel_case_types)]` on by default\n+\n+warning: type `\ud835\udd5f\ud835\udd60\ud835\udd65_\ud835\udd52_\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d` should have an upper camel case name\n+  --> $DIR/special-upper-lower-cases.rs:15:8\n+   |\n+LL | struct \ud835\udd5f\ud835\udd60\ud835\udd65_\ud835\udd52_\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d;\n+   |        ^^^^^^^^^^^ help: convert the identifier to upper camel case: `\ud835\udd5f\ud835\udd60\ud835\udd65\ud835\udd52\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d`\n+\n+warning: static variable `\ud835\uddfb\ud835\uddfc\ud835\uddfb\ud835\ude02\ud835\uddfd\ud835\uddfd\ud835\uddf2\ud835\uddff\ud835\uddf0\ud835\uddee\ud835\ude00\ud835\uddf2` should have an upper case name\n+  --> $DIR/special-upper-lower-cases.rs:18:8\n+   |\n+LL | static \ud835\uddfb\ud835\uddfc\ud835\uddfb\ud835\ude02\ud835\uddfd\ud835\uddfd\ud835\uddf2\ud835\uddff\ud835\uddf0\ud835\uddee\ud835\ude00\ud835\uddf2: i32 = 1;\n+   |        ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(non_upper_case_globals)]` on by default\n+\n+warning: variable `\ud835\udce2\ud835\udcdd\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcda\ud835\udcd4\ud835\udce2` should have a snake case name\n+  --> $DIR/special-upper-lower-cases.rs:22:9\n+   |\n+LL |     let \ud835\udce2\ud835\udcdd\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcda\ud835\udcd4\ud835\udce2 = 1;\n+   |         ^^^^^^^^^\n+   |\n+   = note: `#[warn(non_snake_case)]` on by default\n+\n+warning: 4 warnings emitted\n+"}]}