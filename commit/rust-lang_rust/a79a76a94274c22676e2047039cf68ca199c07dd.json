{"sha": "a79a76a94274c22676e2047039cf68ca199c07dd", "node_id": "C_kwDOAAsO6NoAKGE3OWE3NmE5NDI3NGMyMjY3NmUyMDQ3MDM5Y2Y2OGNhMTk5YzA3ZGQ", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2023-03-18T06:13:57Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2023-03-18T06:16:22Z"}, "message": "refactor: pass is_variant_missing as args to build_completion", "tree": {"sha": "631f53ae65171ecae4efb5007ed29f4dd17ab5c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631f53ae65171ecae4efb5007ed29f4dd17ab5c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a79a76a94274c22676e2047039cf68ca199c07dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a79a76a94274c22676e2047039cf68ca199c07dd", "html_url": "https://github.com/rust-lang/rust/commit/a79a76a94274c22676e2047039cf68ca199c07dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a79a76a94274c22676e2047039cf68ca199c07dd/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7113685b563f2b20e770ee1e901b2b93ccbc990", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7113685b563f2b20e770ee1e901b2b93ccbc990", "html_url": "https://github.com/rust-lang/rust/commit/f7113685b563f2b20e770ee1e901b2b93ccbc990"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "86302cb0678f198687dfe2b4eed26997c642efa6", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a79a76a94274c22676e2047039cf68ca199c07dd/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79a76a94274c22676e2047039cf68ca199c07dd/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=a79a76a94274c22676e2047039cf68ca199c07dd", "patch": "@@ -32,22 +32,11 @@ pub(crate) struct RenderContext<'a> {\n     completion: &'a CompletionContext<'a>,\n     is_private_editable: bool,\n     import_to_add: Option<LocatedImport>,\n-    // For variants which are missing\n-    // in match completion context\n-    //\n-    // Option -> only applicable for enums\n-    // bool -> is enum variant missing or not?\n-    is_variant_missing: Option<bool>,\n }\n \n impl<'a> RenderContext<'a> {\n     pub(crate) fn new(completion: &'a CompletionContext<'a>) -> RenderContext<'a> {\n-        RenderContext {\n-            completion,\n-            is_private_editable: false,\n-            import_to_add: None,\n-            is_variant_missing: None,\n-        }\n+        RenderContext { completion, is_private_editable: false, import_to_add: None }\n     }\n \n     pub(crate) fn private_editable(mut self, private_editable: bool) -> Self {"}, {"sha": "fcc78998153b1916b19d6a36a7e1ba2736075e43", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a79a76a94274c22676e2047039cf68ca199c07dd/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79a76a94274c22676e2047039cf68ca199c07dd/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=a79a76a94274c22676e2047039cf68ca199c07dd", "patch": "@@ -39,11 +39,11 @@ pub(crate) fn render_struct_pat(\n \n     let db = ctx.db();\n \n-    Some(build_completion(ctx, label, lookup, pat, strukt, strukt.ty(db)))\n+    Some(build_completion(ctx, label, lookup, pat, strukt, strukt.ty(db), false))\n }\n \n pub(crate) fn render_variant_pat(\n-    mut ctx: RenderContext<'_>,\n+    ctx: RenderContext<'_>,\n     pattern_ctx: &PatternContext,\n     path_ctx: Option<&PathCompletionCtx>,\n     variant: hir::Variant,\n@@ -56,11 +56,6 @@ pub(crate) fn render_variant_pat(\n     let (visible_fields, fields_omitted) = visible_fields(ctx.completion, &fields, variant)?;\n     let enum_ty = variant.parent_enum(ctx.db()).ty(ctx.db());\n \n-    // Missing in context of match statement completions\n-    if pattern_ctx.missing_variants.contains(&variant) {\n-        ctx.is_variant_missing = Some(true);\n-    }\n-\n     let (name, escaped_name) = match path {\n         Some(path) => (path.unescaped().to_string().into(), path.to_string().into()),\n         None => {\n@@ -89,7 +84,15 @@ pub(crate) fn render_variant_pat(\n         }\n     };\n \n-    Some(build_completion(ctx, label, lookup, pat, variant, enum_ty))\n+    Some(build_completion(\n+        ctx,\n+        label,\n+        lookup,\n+        pat,\n+        variant,\n+        enum_ty,\n+        pattern_ctx.missing_variants.contains(&variant),\n+    ))\n }\n \n fn build_completion(\n@@ -99,10 +102,12 @@ fn build_completion(\n     pat: String,\n     def: impl HasAttrs + Copy,\n     adt_ty: hir::Type,\n+    // Missing in context of match statement completions\n+    is_variant_missing: bool,\n ) -> CompletionItem {\n     let mut relevance = ctx.completion_relevance();\n \n-    if let Some(true) = ctx.is_variant_missing {\n+    if is_variant_missing {\n         relevance.type_match = super::compute_type_match(ctx.completion, &adt_ty);\n     }\n "}]}