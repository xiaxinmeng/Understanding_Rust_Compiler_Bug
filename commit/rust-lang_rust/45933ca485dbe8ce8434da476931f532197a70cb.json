{"sha": "45933ca485dbe8ce8434da476931f532197a70cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OTMzY2E0ODVkYmU4Y2U4NDM0ZGE0NzY5MzFmNTMyMTk3YTcwY2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-09T19:32:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-31T04:23:34Z"}, "message": "rustc: Add some methods for trans for mallocing uniques", "tree": {"sha": "cc98c737f7f579c2a4110185d412292a2fca363e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc98c737f7f579c2a4110185d412292a2fca363e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45933ca485dbe8ce8434da476931f532197a70cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45933ca485dbe8ce8434da476931f532197a70cb", "html_url": "https://github.com/rust-lang/rust/commit/45933ca485dbe8ce8434da476931f532197a70cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45933ca485dbe8ce8434da476931f532197a70cb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "508ccca014fcc3a8ef241868ea05e36058b3e61c", "url": "https://api.github.com/repos/rust-lang/rust/commits/508ccca014fcc3a8ef241868ea05e36058b3e61c", "html_url": "https://github.com/rust-lang/rust/commit/508ccca014fcc3a8ef241868ea05e36058b3e61c"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "a6cddf7bebf76bf3bb3d4afdcbc694551ce194ff", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45933ca485dbe8ce8434da476931f532197a70cb/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45933ca485dbe8ce8434da476931f532197a70cb/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=45933ca485dbe8ce8434da476931f532197a70cb", "patch": "@@ -384,6 +384,32 @@ fn malloc_boxed(bcx: block, t: ty::t) -> {box: ValueRef, body: ValueRef} {\n     ret {box: box, body: body};\n }\n \n+fn malloc_unique_raw(bcx: block, t: ty::t) -> ValueRef {\n+    let _icx = bcx.insn_ctxt(\"malloc_unique_box_raw\");\n+    let ccx = bcx.ccx();\n+\n+    // Grab the TypeRef type of box_ptr, because that's what trans_raw_malloc\n+    // wants.\n+    let box_ptr = ty::mk_imm_uniq(ccx.tcx, t);\n+    let llty = type_of(ccx, box_ptr);\n+\n+    // Get the tydesc for the body:\n+    let mut static_ti = none;\n+    let lltydesc = get_tydesc(ccx, t, static_ti);\n+    lazily_emit_all_tydesc_glue(ccx, static_ti);\n+\n+    // Allocate space:\n+    let rval = Call(bcx, ccx.upcalls.exchange_malloc, [lltydesc]);\n+    ret PointerCast(bcx, rval, llty);\n+}\n+\n+fn malloc_unique(bcx: block, t: ty::t) -> {box: ValueRef, body: ValueRef} {\n+    let _icx = bcx.insn_ctxt(\"malloc_unique_box\");\n+    let box = malloc_unique_raw(bcx, t);\n+    let body = GEPi(bcx, box, [0u, abi::box_field_body]);\n+    ret {box: box, body: body};\n+}\n+\n // Type descriptor and type glue stuff\n \n fn get_tydesc_simple(ccx: @crate_ctxt, t: ty::t) -> ValueRef {"}]}