{"sha": "75bf8328994e0966d381061647ac7dbbce374b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YmY4MzI4OTk0ZTA5NjZkMzgxMDYxNjQ3YWM3ZGJiY2UzNzRiMzk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-19T07:57:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-19T07:57:40Z"}, "message": "Merge #8540\n\n8540: Prevent being able to rename items that are not part of the workspace r=Veykril a=Veykril\n\nThis change causes renames that happen on items coming from crates outside the workspace to fail. I believe this should be the right approach, but usage of cargo's workspace might not be entirely correct for preventing these kinds of refactoring from touching things they shouldn't. I'm not entirely sure?\r\n\r\ncc #6623, this is one of the bigger footguns when it comes to refactoring, especially in combination with import aliases people tend to rename items coming from a crates dependency which this prevents.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1fadb1bc57f4d666a427137dee8da7922b46f304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fadb1bc57f4d666a427137dee8da7922b46f304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75bf8328994e0966d381061647ac7dbbce374b39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfTf0CRBK7hj4Ov3rIwAA31sIAFNh8nqIzakA08Ql0Ijq4Qqo\nPC0bhtJLBpmmlNDx5jIyEZ03ne4l1HylAcQYUjncuN0dQXapMpu7Ld/c13rebD7F\nMzulv4rluhvPd81/alSzybl7RKXsm+FjyYKqM0tdMysZglyg0YgIA7Ij02pun5U/\nhGlDY3Varz8GoSa/TzC/VAaaQpcWb4Aw3WPuwyhWZxoWjaz/45tRt6LHEQRw6lic\nGP8R8WRYtg1Z4u1GifxXVmjPShgIt7mZibs/KsMgqGsdF3DF/11f801Zk7NZhocT\nSqz/RuCNbfS5tF4W8P3ICYQFEiEs/djxAf5HLuKA4DAY1Zs1gT0HL8JEfeo1ADs=\n=dv7g\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fadb1bc57f4d666a427137dee8da7922b46f304\nparent 0308fd6dabfce2d13e7e9c5b2a779be73579fa31\nparent 493aaa140325f3b8fa40de3de58b34e4b96c5d13\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618819060 +0000\ncommitter GitHub <noreply@github.com> 1618819060 +0000\n\nMerge #8540\n\n8540: Prevent being able to rename items that are not part of the workspace r=Veykril a=Veykril\n\nThis change causes renames that happen on items coming from crates outside the workspace to fail. I believe this should be the right approach, but usage of cargo's workspace might not be entirely correct for preventing these kinds of refactoring from touching things they shouldn't. I'm not entirely sure?\r\n\r\ncc #6623, this is one of the bigger footguns when it comes to refactoring, especially in combination with import aliases people tend to rename items coming from a crates dependency which this prevents.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75bf8328994e0966d381061647ac7dbbce374b39", "html_url": "https://github.com/rust-lang/rust/commit/75bf8328994e0966d381061647ac7dbbce374b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75bf8328994e0966d381061647ac7dbbce374b39/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0308fd6dabfce2d13e7e9c5b2a779be73579fa31", "url": "https://api.github.com/repos/rust-lang/rust/commits/0308fd6dabfce2d13e7e9c5b2a779be73579fa31", "html_url": "https://github.com/rust-lang/rust/commit/0308fd6dabfce2d13e7e9c5b2a779be73579fa31"}, {"sha": "493aaa140325f3b8fa40de3de58b34e4b96c5d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/493aaa140325f3b8fa40de3de58b34e4b96c5d13", "html_url": "https://github.com/rust-lang/rust/commit/493aaa140325f3b8fa40de3de58b34e4b96c5d13"}], "stats": {"total": 133, "additions": 103, "deletions": 30}, "files": [{"sha": "99e45633e4a42c85e41297f39128bbb860f93163", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -244,6 +244,12 @@ impl Analysis {\n         self.with_db(|db| db.parse(file_id).tree())\n     }\n \n+    /// Returns true if this file belongs to an immutable library.\n+    pub fn is_library_file(&self, file_id: FileId) -> Cancelable<bool> {\n+        use ide_db::base_db::SourceDatabaseExt;\n+        self.with_db(|db| db.source_root(db.file_source_root(file_id)).is_library)\n+    }\n+\n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n     /// offsets and line/column representation.\n     pub fn file_line_index(&self, file_id: FileId) -> Cancelable<Arc<LineIndex>> {"}, {"sha": "7ddea22c8a22a4503a253ba219f892a312e0af1e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -400,6 +400,17 @@ impl Config {\n     pub fn will_rename(&self) -> bool {\n         try_or!(self.caps.workspace.as_ref()?.file_operations.as_ref()?.will_rename?, false)\n     }\n+    pub fn change_annotation_support(&self) -> bool {\n+        try_!(self\n+            .caps\n+            .workspace\n+            .as_ref()?\n+            .workspace_edit\n+            .as_ref()?\n+            .change_annotation_support\n+            .as_ref()?)\n+        .is_some()\n+    }\n     pub fn code_action_resolve(&self) -> bool {\n         try_or!(\n             self.caps"}, {"sha": "227d96d513fccbc65a4e3103db42fa72bd5ec915", "filename": "crates/rust-analyzer/src/diagnostics/test_data/clippy_pass_by_ref.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -326,6 +326,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "f8adfad3b802f9a113abe68d2accfcd14fd58446", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -179,6 +179,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "5a70d2ed7b0a02000b50a35f67da2bf786f5ff39", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_hint.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -179,6 +179,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "04ca0c9c2462aa6115a11220af27f4ba2095a8ad", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_info.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -179,6 +179,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "57d2f1ae3b63ac9b5c8f3dbdaf0333e4463fc336", "filename": "crates/rust-analyzer/src/diagnostics/test_data/snap_multi_line_fix.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -339,6 +339,7 @@\n                             },\n                         ),\n                         document_changes: None,\n+                        change_annotations: None,\n                     },\n                 ),\n                 is_preferred: Some("}, {"sha": "ca18997e4d3a870e1ae4234777d99901c343014c", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -136,6 +136,7 @@ fn map_rust_child_diagnostic(\n                     // FIXME: there's no good reason to use edit_map here....\n                     changes: Some(edit_map),\n                     document_changes: None,\n+                    change_annotations: None,\n                 }),\n                 is_preferred: Some(true),\n                 data: None,"}, {"sha": "b8835a5349be8f49b91d524859b9a3afff315d18", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -312,6 +312,9 @@ pub struct SnippetWorkspaceEdit {\n     pub changes: Option<HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>>>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub document_changes: Option<Vec<SnippetDocumentChangeOperation>>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub change_annotations:\n+        Option<HashMap<lsp_types::ChangeAnnotationIdentifier, lsp_types::ChangeAnnotation>>,\n }\n \n #[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n@@ -335,6 +338,9 @@ pub struct SnippetTextEdit {\n     pub new_text: String,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub insert_text_format: Option<lsp_types::InsertTextFormat>,\n+    /// The annotation id if this is an annotated\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub annotation_id: Option<lsp_types::ChangeAnnotationIdentifier>,\n }\n \n pub enum HoverRequest {}"}, {"sha": "fe4d0733dae126e44d70215acfb7cbfef9c6761f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 72, "deletions": 29, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -1,15 +1,16 @@\n //! Conversion of rust-analyzer specific types to lsp_types equivalents.\n use std::{\n+    iter::once,\n     path::{self, Path},\n     sync::atomic::{AtomicU32, Ordering},\n };\n \n use ide::{\n-    Annotation, AnnotationKind, Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind,\n-    CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit, Fold, FoldKind,\n-    Highlight, HlMod, HlOperator, HlPunct, HlRange, HlTag, Indel, InlayHint, InlayKind,\n-    InsertTextFormat, Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable, Severity,\n-    SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange, TextSize,\n+    Annotation, AnnotationKind, Assist, AssistKind, CallInfo, Cancelable, CompletionItem,\n+    CompletionItemKind, CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit,\n+    Fold, FoldKind, Highlight, HlMod, HlOperator, HlPunct, HlRange, HlTag, Indel, InlayHint,\n+    InlayKind, InsertTextFormat, Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable,\n+    Severity, SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange, TextSize,\n };\n use itertools::Itertools;\n use serde_json::to_value;\n@@ -174,6 +175,7 @@ pub(crate) fn snippet_text_edit(\n         range: text_edit.range,\n         new_text: text_edit.new_text,\n         insert_text_format,\n+        annotation_id: None,\n     }\n }\n \n@@ -688,6 +690,10 @@ pub(crate) fn goto_definition_response(\n     }\n }\n \n+fn outside_workspace_annotation_id() -> String {\n+    String::from(\"OutsideWorkspace\")\n+}\n+\n pub(crate) fn snippet_text_document_edit(\n     snap: &GlobalStateSnapshot,\n     is_snippet: bool,\n@@ -696,14 +702,21 @@ pub(crate) fn snippet_text_document_edit(\n ) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n     let text_document = optional_versioned_text_document_identifier(snap, file_id);\n     let line_index = snap.file_line_index(file_id)?;\n-    let edits = edit.into_iter().map(|it| snippet_text_edit(&line_index, is_snippet, it)).collect();\n+    let mut edits: Vec<_> =\n+        edit.into_iter().map(|it| snippet_text_edit(&line_index, is_snippet, it)).collect();\n+\n+    if snap.analysis.is_library_file(file_id)? && snap.config.change_annotation_support() {\n+        for edit in &mut edits {\n+            edit.annotation_id = Some(outside_workspace_annotation_id())\n+        }\n+    }\n     Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })\n }\n \n pub(crate) fn snippet_text_document_ops(\n     snap: &GlobalStateSnapshot,\n     file_system_edit: FileSystemEdit,\n-) -> Vec<lsp_ext::SnippetDocumentChangeOperation> {\n+) -> Cancelable<Vec<lsp_ext::SnippetDocumentChangeOperation>> {\n     let mut ops = Vec::new();\n     match file_system_edit {\n         FileSystemEdit::CreateFile { dst, initial_contents } => {\n@@ -721,6 +734,7 @@ pub(crate) fn snippet_text_document_ops(\n                     range: lsp_types::Range::default(),\n                     new_text: initial_contents,\n                     insert_text_format: Some(lsp_types::InsertTextFormat::PlainText),\n+                    annotation_id: None,\n                 };\n                 let edit_file =\n                     lsp_ext::SnippetTextDocumentEdit { text_document, edits: vec![text_edit] };\n@@ -730,33 +744,55 @@ pub(crate) fn snippet_text_document_ops(\n         FileSystemEdit::MoveFile { src, dst } => {\n             let old_uri = snap.file_id_to_url(src);\n             let new_uri = snap.anchored_path(&dst);\n-            let rename_file = lsp_types::ResourceOp::Rename(lsp_types::RenameFile {\n-                old_uri,\n-                new_uri,\n-                options: None,\n-                annotation_id: None,\n-            });\n-            ops.push(lsp_ext::SnippetDocumentChangeOperation::Op(rename_file))\n+            let mut rename_file =\n+                lsp_types::RenameFile { old_uri, new_uri, options: None, annotation_id: None };\n+            if snap.analysis.is_library_file(src) == Ok(true)\n+                && snap.config.change_annotation_support()\n+            {\n+                rename_file.annotation_id = Some(outside_workspace_annotation_id())\n+            }\n+            ops.push(lsp_ext::SnippetDocumentChangeOperation::Op(lsp_types::ResourceOp::Rename(\n+                rename_file,\n+            )))\n         }\n     }\n-    ops\n+    Ok(ops)\n }\n \n pub(crate) fn snippet_workspace_edit(\n     snap: &GlobalStateSnapshot,\n     source_change: SourceChange,\n ) -> Result<lsp_ext::SnippetWorkspaceEdit> {\n     let mut document_changes: Vec<lsp_ext::SnippetDocumentChangeOperation> = Vec::new();\n+\n     for op in source_change.file_system_edits {\n-        let ops = snippet_text_document_ops(snap, op);\n+        let ops = snippet_text_document_ops(snap, op)?;\n         document_changes.extend_from_slice(&ops);\n     }\n     for (file_id, edit) in source_change.source_file_edits {\n         let edit = snippet_text_document_edit(&snap, source_change.is_snippet, file_id, edit)?;\n         document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit));\n     }\n-    let workspace_edit =\n-        lsp_ext::SnippetWorkspaceEdit { changes: None, document_changes: Some(document_changes) };\n+    let mut workspace_edit = lsp_ext::SnippetWorkspaceEdit {\n+        changes: None,\n+        document_changes: Some(document_changes),\n+        change_annotations: None,\n+    };\n+    if snap.config.change_annotation_support() {\n+        workspace_edit.change_annotations = Some(\n+            once((\n+                outside_workspace_annotation_id(),\n+                lsp_types::ChangeAnnotation {\n+                    label: String::from(\"Edit outside of the workspace\"),\n+                    needs_confirmation: Some(true),\n+                    description: Some(String::from(\n+                        \"This edit lies outside of the workspace and may affect dependencies\",\n+                    )),\n+                },\n+            ))\n+            .collect(),\n+        )\n+    }\n     Ok(workspace_edit)\n }\n \n@@ -784,24 +820,31 @@ impl From<lsp_ext::SnippetWorkspaceEdit> for lsp_types::WorkspaceEdit {\n                                 lsp_types::DocumentChangeOperation::Edit(\n                                     lsp_types::TextDocumentEdit {\n                                         text_document: edit.text_document,\n-                                        edits: edit\n-                                            .edits\n-                                            .into_iter()\n-                                            .map(|edit| {\n-                                                lsp_types::OneOf::Left(lsp_types::TextEdit {\n-                                                    range: edit.range,\n-                                                    new_text: edit.new_text,\n-                                                })\n-                                            })\n-                                            .collect(),\n+                                        edits: edit.edits.into_iter().map(From::from).collect(),\n                                     },\n                                 )\n                             }\n                         })\n                         .collect(),\n                 )\n             }),\n-            change_annotations: None,\n+            change_annotations: snippet_workspace_edit.change_annotations,\n+        }\n+    }\n+}\n+\n+impl From<lsp_ext::SnippetTextEdit>\n+    for lsp_types::OneOf<lsp_types::TextEdit, lsp_types::AnnotatedTextEdit>\n+{\n+    fn from(\n+        lsp_ext::SnippetTextEdit { annotation_id, insert_text_format:_, new_text, range }: lsp_ext::SnippetTextEdit,\n+    ) -> Self {\n+        match annotation_id {\n+            Some(annotation_id) => lsp_types::OneOf::Right(lsp_types::AnnotatedTextEdit {\n+                text_edit: lsp_types::TextEdit { range, new_text },\n+                annotation_id,\n+            }),\n+            None => lsp_types::OneOf::Left(lsp_types::TextEdit { range, new_text }),\n         }\n     }\n }"}, {"sha": "a112477de8790c00fbe56cf4bb041a442d120fce", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75bf8328994e0966d381061647ac7dbbce374b39/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/75bf8328994e0966d381061647ac7dbbce374b39/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=75bf8328994e0966d381061647ac7dbbce374b39", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: b19ddc3ab8767af9\n+lsp_ext.rs hash: 28a9d5a24b7ca396\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -46,6 +46,7 @@ If this capability is set, `WorkspaceEdit`s returned from `codeAction` requests\n ```typescript\n interface SnippetTextEdit extends TextEdit {\n     insertTextFormat?: InsertTextFormat;\n+    annotationId?: ChangeAnnotationIdentifier;\n }\n ```\n "}]}