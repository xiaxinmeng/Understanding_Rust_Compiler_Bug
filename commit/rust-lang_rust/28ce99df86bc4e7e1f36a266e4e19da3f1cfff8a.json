{"sha": "28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Y2U5OWRmODZiYzRlN2UxZjM2YTI2NmU0ZTE5ZGEzZjFjZmZmOGE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-22T09:58:06Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-26T21:44:52Z"}, "message": "Added `mir::UserTypeProjection`, a stub for a structure that projects *into* a given UserTypeAnnotation.\n\n(That is, it will pull out some component type held or referenced by\nthe type annotation.)\n\nNote: this still needs to actually do projection itself. That comes in\na later commit", "tree": {"sha": "e9e8572f5915c8591f59d7812d4034f9fc9e5a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e8572f5915c8591f59d7812d4034f9fc9e5a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "html_url": "https://github.com/rust-lang/rust/commit/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d8432a6d808dcd9e792679930729c0ab9a0212", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d8432a6d808dcd9e792679930729c0ab9a0212", "html_url": "https://github.com/rust-lang/rust/commit/36d8432a6d808dcd9e792679930729c0ab9a0212"}], "stats": {"total": 102, "additions": 70, "deletions": 32}, "files": [{"sha": "94b85247bb83fbded5269b4e215c39a993cb55fd", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -606,3 +606,5 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::UserTypeAnnotation<\n         }\n     }\n }\n+\n+impl_stable_hash_for!(struct mir::UserTypeProjection<'tcx> { base });"}, {"sha": "d2f67a74420daf212ff8f11737968d7e8a75635e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -710,7 +710,7 @@ pub struct LocalDecl<'tcx> {\n     /// e.g. via `let x: T`, then we carry that type here. The MIR\n     /// borrow checker needs this information since it can affect\n     /// region inference.\n-    pub user_ty: Option<(UserTypeAnnotation<'tcx>, Span)>,\n+    pub user_ty: Option<(UserTypeProjection<'tcx>, Span)>,\n \n     /// Name of the local, used in debuginfo and pretty-printing.\n     ///\n@@ -1741,7 +1741,7 @@ pub enum StatementKind<'tcx> {\n     /// - `Contravariant` -- requires that `T_y :> T`\n     /// - `Invariant` -- requires that `T_y == T`\n     /// - `Bivariant` -- no effect\n-    AscribeUserType(Place<'tcx>, ty::Variance, Box<UserTypeAnnotation<'tcx>>),\n+    AscribeUserType(Place<'tcx>, ty::Variance, Box<UserTypeProjection<'tcx>>),\n \n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n@@ -2449,6 +2449,17 @@ EnumLiftImpl! {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct UserTypeProjection<'tcx> {\n+    pub base: UserTypeAnnotation<'tcx>,\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection<'tcx> {\n+        base\n+    }\n+}\n+\n newtype_index! {\n     pub struct Promoted {\n         DEBUG_FORMAT = \"promoted[{}]\""}, {"sha": "acca7ddcd3ff1ff3f2535af641ff11e5cd5dc310", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -147,7 +147,7 @@ macro_rules! make_mir_visitor {\n             fn visit_ascribe_user_ty(&mut self,\n                                      place: & $($mutability)* Place<'tcx>,\n                                      variance: & $($mutability)* ty::Variance,\n-                                     user_ty: & $($mutability)* UserTypeAnnotation<'tcx>,\n+                                     user_ty: & $($mutability)* UserTypeProjection<'tcx>,\n                                      location: Location) {\n                 self.super_ascribe_user_ty(place, variance, user_ty, location);\n             }\n@@ -213,6 +213,13 @@ macro_rules! make_mir_visitor {\n                 self.super_ty(ty);\n             }\n \n+            fn visit_user_type_projection(\n+                &mut self,\n+                ty: & $($mutability)* UserTypeProjection<'tcx>,\n+            ) {\n+                self.super_user_type_projection(ty);\n+            }\n+\n             fn visit_user_type_annotation(\n                 &mut self,\n                 ty: & $($mutability)* UserTypeAnnotation<'tcx>,\n@@ -639,10 +646,10 @@ macro_rules! make_mir_visitor {\n             fn super_ascribe_user_ty(&mut self,\n                                      place: & $($mutability)* Place<'tcx>,\n                                      _variance: & $($mutability)* ty::Variance,\n-                                     user_ty: & $($mutability)* UserTypeAnnotation<'tcx>,\n+                                     user_ty: & $($mutability)* UserTypeProjection<'tcx>,\n                                      location: Location) {\n                 self.visit_place(place, PlaceContext::Validate, location);\n-                self.visit_user_type_annotation(user_ty);\n+                self.visit_user_type_projection(user_ty);\n             }\n \n             fn super_place(&mut self,\n@@ -737,7 +744,7 @@ macro_rules! make_mir_visitor {\n                     source_info: *source_info,\n                 });\n                 if let Some((user_ty, _)) = user_ty {\n-                    self.visit_user_type_annotation(user_ty);\n+                    self.visit_user_type_projection(user_ty);\n                 }\n                 self.visit_source_info(source_info);\n                 self.visit_source_scope(visibility_scope);\n@@ -784,6 +791,16 @@ macro_rules! make_mir_visitor {\n                 self.visit_source_scope(scope);\n             }\n \n+            fn super_user_type_projection(\n+                &mut self,\n+                ty: & $($mutability)* UserTypeProjection<'tcx>,\n+            ) {\n+                let UserTypeProjection {\n+                    ref $($mutability)* base,\n+                } = *ty;\n+                self.visit_user_type_annotation(base)\n+            }\n+\n             fn super_user_type_annotation(\n                 &mut self,\n                 _ty: & $($mutability)* UserTypeAnnotation<'tcx>,"}, {"sha": "1d8d028137a5b0c67e8466697ba77d2ecc65f083", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -18,7 +18,7 @@ use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, Rvalue};\n use rustc::mir::{Statement, Terminator};\n-use rustc::mir::UserTypeAnnotation;\n+use rustc::mir::UserTypeProjection;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid};\n@@ -183,7 +183,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n         &mut self,\n         _place: &Place<'tcx>,\n         _variance: &ty::Variance,\n-        _user_ty: &UserTypeAnnotation<'tcx>,\n+        _user_ty: &UserTypeProjection<'tcx>,\n         _location: Location,\n     ) {\n     }"}, {"sha": "708f2f3ad3369fed723fe3d51ffff747645bde1e", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n                 constant.ty,\n                 ty::Variance::Invariant,\n-                user_ty,\n+                UserTypeProjection { base: user_ty },\n                 location.to_locations(),\n                 ConstraintCategory::Boring,\n             ) {\n@@ -971,7 +971,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         &mut self,\n         a: Ty<'tcx>,\n         v: ty::Variance,\n-        user_ty: UserTypeAnnotation<'tcx>,\n+        user_ty: UserTypeProjection<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n@@ -980,7 +980,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             a, v, user_ty, locations,\n         );\n \n-        match user_ty {\n+        // FIXME\n+        match user_ty.base {\n             UserTypeAnnotation::Ty(canonical_ty) => {\n                 let (ty, _) = self.infcx\n                     .instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_ty);\n@@ -1172,7 +1173,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     if let Err(terr) = self.relate_type_and_user_type(\n                         rv_ty,\n                         ty::Variance::Invariant,\n-                        user_ty,\n+                        UserTypeProjection { base: user_ty },\n                         location.to_locations(),\n                         ConstraintCategory::Boring,\n                     ) {"}, {"sha": "bc03b6a5dd0416c56f06d96824076ea4891b8ed4", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             kind: StatementKind::AscribeUserType(\n                                 place.clone(),\n                                 Variance::Invariant,\n-                                box user_ty,\n+                                box UserTypeProjection { base: user_ty },\n                             ),\n                         },\n                     );\n@@ -167,7 +167,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             kind: StatementKind::AscribeUserType(\n                                 Place::Local(temp.clone()),\n                                 Variance::Invariant,\n-                                box user_ty,\n+                                box UserTypeProjection { base: user_ty },\n                             ),\n                         },\n                     );"}, {"sha": "9bfb6d4e6de1812a3d69df0a193b556141984b85", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -491,7 +491,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub(super) fn visit_bindings(\n         &mut self,\n         pattern: &Pattern<'tcx>,\n-        mut pattern_user_ty: Option<(PatternTypeAnnotation<'tcx>, Span)>,\n+        mut pattern_user_ty: Option<(PatternTypeProjection<'tcx>, Span)>,\n         f: &mut impl FnMut(\n             &mut Self,\n             Mutability,\n@@ -500,7 +500,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             NodeId,\n             Span,\n             Ty<'tcx>,\n-            Option<(PatternTypeAnnotation<'tcx>, Span)>,\n+            Option<(PatternTypeProjection<'tcx>, Span)>,\n         ),\n     ) {\n         match *pattern.kind {\n@@ -626,7 +626,7 @@ struct Binding<'tcx> {\n struct Ascription<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n-    user_ty: PatternTypeAnnotation<'tcx>,\n+    user_ty: PatternTypeProjection<'tcx>,\n }\n \n #[derive(Clone, Debug)]\n@@ -1470,7 +1470,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         num_patterns: usize,\n         var_id: NodeId,\n         var_ty: Ty<'tcx>,\n-        user_var_ty: Option<(PatternTypeAnnotation<'tcx>, Span)>,\n+        user_var_ty: Option<(PatternTypeProjection<'tcx>, Span)>,\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n         pat_span: Span,\n@@ -1489,7 +1489,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty,\n-            user_ty: user_var_ty.map(|(pat_ty, span)|(pat_ty.user_ty(), span)),\n+            user_ty: user_var_ty.map(|(ut, sp)| (ut.user_ty(), sp)),\n             name: Some(name),\n             source_info,\n             visibility_scope,"}, {"sha": "586d6d87fa0dc24f4b119685cca9df4db19aa969", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -91,7 +91,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     ty: pattern.ty,\n                                     span: pattern.span,\n                                     kind: Box::new(PatternKind::AscribeUserType {\n-                                        user_ty: PatternTypeAnnotation::from_c_ty(user_ty),\n+                                        user_ty: PatternTypeProjection::from_canonical_ty(user_ty),\n                                         user_ty_span: ty.span,\n                                         subpattern: pattern\n                                     })"}, {"sha": "888c14194c614b9589ad953d49565427891932e6", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -27,7 +27,7 @@ use self::cx::Cx;\n pub mod cx;\n \n pub mod pattern;\n-pub use self::pattern::{BindingMode, Pattern, PatternKind, PatternTypeAnnotation, FieldPattern};\n+pub use self::pattern::{BindingMode, Pattern, PatternKind, PatternTypeProjection, FieldPattern};\n \n mod util;\n "}, {"sha": "57b2638cc8d3e5dfbfcc1bfd760b60f28ac30abd", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=28ce99df86bc4e7e1f36a266e4e19da3f1cfff8a", "patch": "@@ -20,7 +20,8 @@ use const_eval::{const_field, const_variant_index};\n \n use hair::util::UserAnnotatedTyHelpers;\n \n-use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability, UserTypeAnnotation};\n+use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n+use rustc::mir::{UserTypeAnnotation, UserTypeProjection};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty};\n use rustc::ty::subst::{Substs, Kind};\n@@ -65,25 +66,30 @@ pub struct Pattern<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub struct PatternTypeAnnotation<'tcx>(UserTypeAnnotation<'tcx>);\n+pub struct PatternTypeProjection<'tcx>(UserTypeProjection<'tcx>);\n \n-impl<'tcx> PatternTypeAnnotation<'tcx> {\n-    pub(crate) fn from_c_ty(c_ty: ty::CanonicalTy<'tcx>) -> Self {\n-        Self::from_u_ty(UserTypeAnnotation::Ty(c_ty))\n+impl<'tcx> PatternTypeProjection<'tcx> {\n+    pub(crate) fn from_canonical_ty(c_ty: ty::CanonicalTy<'tcx>) -> Self {\n+        Self::from_user_type(UserTypeAnnotation::Ty(c_ty))\n     }\n-    pub(crate) fn from_u_ty(u_ty: UserTypeAnnotation<'tcx>) -> Self {\n-        PatternTypeAnnotation(u_ty)\n+\n+    pub(crate) fn from_user_type(u_ty: UserTypeAnnotation<'tcx>) -> Self {\n+        Self::from_user_type_proj(UserTypeProjection { base: u_ty })\n+    }\n+\n+    pub(crate) fn from_user_type_proj(u_ty: UserTypeProjection<'tcx>) -> Self {\n+        PatternTypeProjection(u_ty)\n     }\n \n-    pub(crate) fn user_ty(self) -> UserTypeAnnotation<'tcx> { self.0 }\n+    pub(crate) fn user_ty(self) -> UserTypeProjection<'tcx> { self.0 }\n }\n \n #[derive(Clone, Debug)]\n pub enum PatternKind<'tcx> {\n     Wild,\n \n     AscribeUserType {\n-        user_ty: PatternTypeAnnotation<'tcx>,\n+        user_ty: PatternTypeProjection<'tcx>,\n         subpattern: Pattern<'tcx>,\n         user_ty_span: Span,\n     },\n@@ -704,7 +710,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n             debug!(\"pattern user_ty = {:?} for pattern at {:?}\", user_ty, span);\n \n-            let pat_ty = PatternTypeAnnotation::from_u_ty(user_ty);\n+            let pat_ty = PatternTypeProjection::from_user_type(user_ty);\n             kind = PatternKind::AscribeUserType {\n                 subpattern,\n                 user_ty: pat_ty,\n@@ -995,7 +1001,8 @@ macro_rules! CloneImpls {\n CloneImpls!{ <'tcx>\n     Span, Field, Mutability, ast::Name, ast::NodeId, usize, &'tcx ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode<'tcx>, &'tcx AdtDef,\n-    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserTypeAnnotation<'tcx>, PatternTypeAnnotation<'tcx>\n+    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserTypeAnnotation<'tcx>,\n+    UserTypeProjection<'tcx>, PatternTypeProjection<'tcx>\n }\n \n impl<'tcx> PatternFoldable<'tcx> for FieldPattern<'tcx> {"}]}