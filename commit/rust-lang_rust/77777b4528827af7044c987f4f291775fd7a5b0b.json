{"sha": "77777b4528827af7044c987f4f291775fd7a5b0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Nzc3YjQ1Mjg4MjdhZjcwNDRjOTg3ZjRmMjkxNzc1ZmQ3YTViMGI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-11T11:56:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-11T11:56:41Z"}, "message": "Rollup merge of #49525 - varkor:sort_by_cached_key-conversion, r=scottmcm\n\nUse sort_by_cached_key where appropriate\n\nA follow-up to https://github.com/rust-lang/rust/pull/48639, converting various slice sorting calls to `sort_by_cached_key` when the key functions are more expensive.", "tree": {"sha": "2031d41d5e9b5463e4bc328e9fabc6fdf1eb92cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2031d41d5e9b5463e4bc328e9fabc6fdf1eb92cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77777b4528827af7044c987f4f291775fd7a5b0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJazff5CRBK7hj4Ov3rIwAAdHIIADgm/8tYxQ7ry5sKGcjdFQk6\nD8x9ZrrI0X319nDloww8F9hAyeIChmVhpDsnrSAOggfLyFF/ri44c3lF301C3pF7\nT5ofcmW3XD8HDErGoTJeocXZ1zKgmahceJElivO4qLNYkzLm2g07+gT1ljWi3wvI\nP0zrNRHkklpcdGOS2ODDoQM1nn9ChpCOY4CfMaIcBpcKpwcd2ZHD5agrsr9OEARE\nOkdPxolaLeHTXXlPOzGp2xB7Fk892Xf48aQmqw1Mkgak7NZp188hjqSH+3UD3z5F\nMpTdGUbAd+2asaA5ofZJuaRnDPFdJDTlxo9H14+nNgBqEkO43Jt35cFrnG7Qfd4=\n=OkA+\n-----END PGP SIGNATURE-----\n", "payload": "tree 2031d41d5e9b5463e4bc328e9fabc6fdf1eb92cc\nparent ca26ef321c44358404ef788d315c4557eb015fb2\nparent e7aa1397ea901e50cc3427d8db44c0b387253bba\nauthor kennytm <kennytm@gmail.com> 1523447801 +0800\ncommitter GitHub <noreply@github.com> 1523447801 +0800\n\nRollup merge of #49525 - varkor:sort_by_cached_key-conversion, r=scottmcm\n\nUse sort_by_cached_key where appropriate\n\nA follow-up to https://github.com/rust-lang/rust/pull/48639, converting various slice sorting calls to `sort_by_cached_key` when the key functions are more expensive.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77777b4528827af7044c987f4f291775fd7a5b0b", "html_url": "https://github.com/rust-lang/rust/commit/77777b4528827af7044c987f4f291775fd7a5b0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77777b4528827af7044c987f4f291775fd7a5b0b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca26ef321c44358404ef788d315c4557eb015fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca26ef321c44358404ef788d315c4557eb015fb2", "html_url": "https://github.com/rust-lang/rust/commit/ca26ef321c44358404ef788d315c4557eb015fb2"}, {"sha": "e7aa1397ea901e50cc3427d8db44c0b387253bba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7aa1397ea901e50cc3427d8db44c0b387253bba", "html_url": "https://github.com/rust-lang/rust/commit/e7aa1397ea901e50cc3427d8db44c0b387253bba"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "56c53fca62cb1be2ffaf0da408e664ce1e27ab77", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -1400,6 +1400,7 @@ impl<T> [T] {\n         let sz_usize = mem::size_of::<(K, usize)>();\n \n         let len = self.len();\n+        if len < 2 { return }\n         if sz_u8  < sz_u16   && len <= ( u8::MAX as usize) { return sort_by_key!( u8, self, f) }\n         if sz_u16 < sz_u32   && len <= (u16::MAX as usize) { return sort_by_key!(u16, self, f) }\n         if sz_u32 < sz_usize && len <= (u32::MAX as usize) { return sort_by_key!(u32, self, f) }"}, {"sha": "a2cefe488c68ac53767b9ec0727a3750d1a10779", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -60,6 +60,7 @@\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n #![feature(trace_macros)]"}, {"sha": "41334a37dbef65050cecff58c463f781c1f0db4e", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -401,7 +401,7 @@ pub fn used_crates(tcx: TyCtxt, prefer: LinkagePreference)\n         .collect::<Vec<_>>();\n     let mut ordering = tcx.postorder_cnums(LOCAL_CRATE);\n     Lrc::make_mut(&mut ordering).reverse();\n-    libs.sort_by_key(|&(a, _)| {\n+    libs.sort_by_cached_key(|&(a, _)| {\n         ordering.iter().position(|x| *x == a)\n     });\n     libs"}, {"sha": "3dec84d174dd8d922badd5cd17625b8a14987639", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -22,6 +22,7 @@\n #![cfg_attr(unix, feature(libc))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(set_stdio)]\n #![feature(rustc_stack_internals)]\n \n@@ -82,7 +83,6 @@ use rustc_trans_utils::trans_crate::TransCrate;\n use serialize::json::ToJson;\n \n use std::any::Any;\n-use std::cmp::Ordering::Equal;\n use std::cmp::max;\n use std::default::Default;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n@@ -1176,13 +1176,8 @@ Available lint options:\n \n     fn sort_lints(sess: &Session, lints: Vec<(&'static Lint, bool)>) -> Vec<&'static Lint> {\n         let mut lints: Vec<_> = lints.into_iter().map(|(x, _)| x).collect();\n-        lints.sort_by(|x: &&Lint, y: &&Lint| {\n-            match x.default_level(sess).cmp(&y.default_level(sess)) {\n-                // The sort doesn't case-fold but it's doubtful we care.\n-                Equal => x.name.cmp(y.name),\n-                r => r,\n-            }\n-        });\n+        // The sort doesn't case-fold but it's doubtful we care.\n+        lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess), x.name));\n         lints\n     }\n "}, {"sha": "e40a3057a95cf903d218b941a3edbd2a0d50d5a7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -1414,15 +1414,15 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();\n \n         // Bring everything into deterministic order for hashing\n-        all_impls.sort_unstable_by_key(|&(trait_def_id, _)| {\n+        all_impls.sort_by_cached_key(|&(trait_def_id, _)| {\n             tcx.def_path_hash(trait_def_id)\n         });\n \n         let all_impls: Vec<_> = all_impls\n             .into_iter()\n             .map(|(trait_def_id, mut impls)| {\n                 // Bring everything into deterministic order for hashing\n-                impls.sort_unstable_by_key(|&def_index| {\n+                impls.sort_by_cached_key(|&def_index| {\n                     tcx.hir.definitions().def_path_hash(def_index)\n                 });\n "}, {"sha": "cbbc9d74228de9e8bf9de8c7d262cec33aefd7ed", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -20,6 +20,7 @@\n #![feature(macro_lifetime_matcher)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(specialization)]\n #![feature(rustc_private)]\n "}, {"sha": "fe440a56ea060c4a228e8d43dc9d74dd53ecaa15", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -15,6 +15,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n */\n \n #![feature(slice_patterns)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(from_ref)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "f29f86af4aba73e6fb31b5d13f3636a3a622f14e", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -112,11 +112,11 @@ use rustc::ty::{self, TyCtxt, InstanceDef};\n use rustc::ty::item_path::characteristic_def_id_of_type;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use std::collections::hash_map::Entry;\n+use std::cmp;\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n use rustc::mir::mono::MonoItem;\n use monomorphize::item::{MonoItemExt, InstantiationMode};\n-use core::usize;\n \n pub use rustc::mir::mono::CodegenUnit;\n \n@@ -189,11 +189,9 @@ pub trait CodegenUnitExt<'tcx> {\n             }, item.symbol_name(tcx))\n         }\n \n-        let items: Vec<_> = self.items().iter().map(|(&i, &l)| (i, l)).collect();\n-        let mut items : Vec<_> = items.iter()\n-            .map(|il| (il, item_sort_key(tcx, il.0))).collect();\n-        items.sort_by(|&(_, ref key1), &(_, ref key2)| key1.cmp(key2));\n-        items.into_iter().map(|(&item_linkage, _)| item_linkage).collect()\n+        let mut items: Vec<_> = self.items().iter().map(|(&i, &l)| (i, l)).collect();\n+        items.sort_by_cached_key(|&(i, _)| item_sort_key(tcx, i));\n+        items\n     }\n }\n \n@@ -509,7 +507,7 @@ fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<\n     // Merge the two smallest codegen units until the target size is reached.\n     while codegen_units.len() > target_cgu_count {\n         // Sort small cgus to the back\n-        codegen_units.sort_by_key(|cgu| usize::MAX - cgu.size_estimate());\n+        codegen_units.sort_by_cached_key(|cgu| cmp::Reverse(cgu.size_estimate()));\n         let mut smallest = codegen_units.pop().unwrap();\n         let second_smallest = codegen_units.last_mut().unwrap();\n "}, {"sha": "d32d853c18bf5d45f1e767c1bdaaeb1e732a3d56", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -13,6 +13,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n \n #[macro_use]\n extern crate log;\n@@ -1149,13 +1150,9 @@ impl<'a> ModuleData<'a> {\n \n     fn for_each_child_stable<F: FnMut(Ident, Namespace, &'a NameBinding<'a>)>(&self, mut f: F) {\n         let resolutions = self.resolutions.borrow();\n-        let mut resolutions = resolutions.iter().map(|(&(ident, ns), &resolution)| {\n-                                                    // Pre-compute keys for sorting\n-                                                    (ident.name.as_str(), ns, ident, resolution)\n-                                                })\n-                                                .collect::<Vec<_>>();\n-        resolutions.sort_unstable_by_key(|&(str, ns, ..)| (str, ns));\n-        for &(_, ns, ident, resolution) in resolutions.iter() {\n+        let mut resolutions = resolutions.iter().collect::<Vec<_>>();\n+        resolutions.sort_by_cached_key(|&(&(ident, ns), _)| (ident.name.as_str(), ns));\n+        for &(&(ident, ns), &resolution) in resolutions.iter() {\n             resolution.borrow().binding.map(|binding| f(ident, ns, binding));\n         }\n     }\n@@ -3340,7 +3337,9 @@ impl<'a> Resolver<'a> {\n                         let is_mod = |def| match def { Def::Mod(..) => true, _ => false };\n                         let mut candidates =\n                             self.lookup_import_candidates(name, TypeNS, is_mod);\n-                        candidates.sort_by_key(|c| (c.path.segments.len(), c.path.to_string()));\n+                        candidates.sort_by_cached_key(|c| {\n+                            (c.path.segments.len(), c.path.to_string())\n+                        });\n                         if let Some(candidate) = candidates.get(0) {\n                             format!(\"Did you mean `{}`?\", candidate.path)\n                         } else {\n@@ -3578,7 +3577,7 @@ impl<'a> Resolver<'a> {\n \n         let name = path[path.len() - 1].name;\n         // Make sure error reporting is deterministic.\n-        names.sort_by_key(|name| name.as_str());\n+        names.sort_by_cached_key(|name| name.as_str());\n         match find_best_match_for_name(names.iter(), &name.as_str(), None) {\n             Some(found) if found != name => Some(found),\n             _ => None,"}, {"sha": "09aba830d050de149bb21d02830a51d910a49495", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -82,7 +82,8 @@ use std::ffi::CString;\n use std::str;\n use std::sync::Arc;\n use std::time::{Instant, Duration};\n-use std::{i32, usize};\n+use std::i32;\n+use std::cmp;\n use std::sync::mpsc;\n use syntax_pos::Span;\n use syntax_pos::symbol::InternedString;\n@@ -830,7 +831,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // a bit more efficiently.\n     let codegen_units = {\n         let mut codegen_units = codegen_units;\n-        codegen_units.sort_by_key(|cgu| usize::MAX - cgu.size_estimate());\n+        codegen_units.sort_by_cached_key(|cgu| cmp::Reverse(cgu.size_estimate()));\n         codegen_units\n     };\n "}, {"sha": "a38d51e754670dd96d8d4cb55cac1fe572d0b493", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -26,6 +26,7 @@\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(optin_builtin_traits)]\n #![feature(inclusive_range_fields)]\n #![feature(underscore_lifetimes)]"}, {"sha": "de5709566225c54cc595f7340155edbc9264fdf7", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -799,7 +799,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             .collect();\n \n         // sort them by the name so we have a stable result\n-        names.sort_by_key(|n| n.as_str());\n+        names.sort_by_cached_key(|n| n.as_str());\n         names\n     }\n "}, {"sha": "b194427585f8f88d09236165ca1e04a771c843ee", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -81,6 +81,7 @@ This API is completely unstable and subject to change.\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(dyn_trait)]\n \n #[macro_use] extern crate log;"}, {"sha": "888148352c70a46a26d432213771912302c6ad7d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -1437,9 +1437,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // involved (impls rarely have more than a few bounds) means that it\n     // shouldn't matter in practice.\n     fn unstable_debug_sort<T: Debug>(&self, vec: &mut Vec<T>) {\n-        vec.sort_unstable_by(|first, second| {\n-            format!(\"{:?}\", first).cmp(&format!(\"{:?}\", second))\n-        });\n+        vec.sort_by_cached_key(|x| format!(\"{:?}\", x))\n     }\n \n     fn is_fn_ty(&self, tcx: &TyCtxt, ty: &Type) -> bool {"}, {"sha": "b87777ac4b5c1b18894cf7329c8bec998ca2acee", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -19,6 +19,7 @@\n #![feature(box_syntax)]\n #![feature(fs_read_write)]\n #![feature(set_stdio)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(test)]\n #![feature(unicode)]\n #![feature(vec_remove_item)]"}, {"sha": "dbf2123fb5477a69c65c26867341ea86f527ac53", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -21,6 +21,7 @@\n \n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(non_exhaustive)]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]"}, {"sha": "027b24cbbdcd69cae1eea65576ef658fa368a4b4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77777b4528827af7044c987f4f291775fd7a5b0b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=77777b4528827af7044c987f4f291775fd7a5b0b", "patch": "@@ -689,7 +689,7 @@ impl<'a> Parser<'a> {\n                 .chain(inedible.iter().map(|x| TokenType::Token(x.clone())))\n                 .chain(self.expected_tokens.iter().cloned())\n                 .collect::<Vec<_>>();\n-            expected.sort_by(|a, b| a.to_string().cmp(&b.to_string()));\n+            expected.sort_by_cached_key(|x| x.to_string());\n             expected.dedup();\n             let expect = tokens_to_string(&expected[..]);\n             let actual = self.this_token_to_string();"}]}