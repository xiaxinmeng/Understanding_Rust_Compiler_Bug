{"sha": "e916641fd35bddabc8b018a5e51fe23b93875c66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MTY2NDFmZDM1YmRkYWJjOGIwMThhNWU1MWZlMjNiOTM4NzVjNjY=", "commit": {"author": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-12-17T12:44:08Z"}, "committer": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-12-17T13:12:48Z"}, "message": "Address review comments", "tree": {"sha": "68251b50b3f407801f610fb682f742e23bb00c2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68251b50b3f407801f610fb682f742e23bb00c2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e916641fd35bddabc8b018a5e51fe23b93875c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e916641fd35bddabc8b018a5e51fe23b93875c66", "html_url": "https://github.com/rust-lang/rust/commit/e916641fd35bddabc8b018a5e51fe23b93875c66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e916641fd35bddabc8b018a5e51fe23b93875c66/comments", "author": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3548be94c03fd6d1c11afd6af9c884f398a6489e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3548be94c03fd6d1c11afd6af9c884f398a6489e", "html_url": "https://github.com/rust-lang/rust/commit/3548be94c03fd6d1c11afd6af9c884f398a6489e"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "9553f5d09e83bec5afb6143a16c6ef63e00a081f", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e916641fd35bddabc8b018a5e51fe23b93875c66/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e916641fd35bddabc8b018a5e51fe23b93875c66/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=e916641fd35bddabc8b018a5e51fe23b93875c66", "patch": "@@ -43,6 +43,16 @@ pub(super) enum RecoverQPath {\n     No,\n }\n \n+/// Signals whether parsing a type should recover `->`.\n+///\n+/// More specifically, when parsing a function like:\n+/// ```rust\n+/// fn foo() => u8 { 0 }\n+/// fn bar(): u8 { 0 }\n+/// ```\n+/// The compiler will try to recover interpreting `foo() => u8` as `foo() -> u8` when calling\n+/// `parse_ty` with anything except `RecoverReturnSign::No`, and it will try to recover `bar(): u8`\n+/// as `bar() -> u8` when passing `RecoverReturnSign::Yes` to `parse_ty`\n #[derive(Copy, Clone, PartialEq)]\n pub(super) enum RecoverReturnSign {\n     Yes,\n@@ -51,6 +61,10 @@ pub(super) enum RecoverReturnSign {\n }\n \n impl RecoverReturnSign {\n+    /// [RecoverReturnSign::Yes] allows for recovering `fn foo() => u8` and `fn foo(): u8`,\n+    /// [RecoverReturnSign::OnlyFatArrow] allows for recovering only `fn foo() => u8` (recovering\n+    /// colons can cause problems when parsing where clauses), and\n+    /// [RecoverReturnSign::No] doesn't allow for any recovery of the return type arrow\n     fn can_recover(self, token: &TokenKind) -> bool {\n         match self {\n             Self::Yes => matches!(token, token::FatArrow | token::Colon),\n@@ -81,8 +95,8 @@ impl<'a> Parser<'a> {\n     pub fn parse_ty(&mut self) -> PResult<'a, P<Ty>> {\n         self.parse_ty_common(\n             AllowPlus::Yes,\n-            RecoverQPath::Yes,\n             AllowCVariadic::No,\n+            RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n         )\n     }\n@@ -93,8 +107,8 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_ty_for_param(&mut self) -> PResult<'a, P<Ty>> {\n         self.parse_ty_common(\n             AllowPlus::Yes,\n-            RecoverQPath::Yes,\n             AllowCVariadic::Yes,\n+            RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n         )\n     }\n@@ -108,8 +122,8 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_ty_no_plus(&mut self) -> PResult<'a, P<Ty>> {\n         self.parse_ty_common(\n             AllowPlus::No,\n-            RecoverQPath::Yes,\n             AllowCVariadic::No,\n+            RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n         )\n     }\n@@ -118,8 +132,8 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_ty_for_where_clause(&mut self) -> PResult<'a, P<Ty>> {\n         self.parse_ty_common(\n             AllowPlus::Yes,\n-            RecoverQPath::Yes,\n             AllowCVariadic::Yes,\n+            RecoverQPath::Yes,\n             RecoverReturnSign::OnlyFatArrow,\n         )\n     }\n@@ -135,8 +149,8 @@ impl<'a> Parser<'a> {\n             // FIXME(Centril): Can we unconditionally `allow_plus`?\n             let ty = self.parse_ty_common(\n                 allow_plus,\n-                recover_qpath,\n                 AllowCVariadic::No,\n+                recover_qpath,\n                 recover_return_sign,\n             )?;\n             FnRetTy::Ty(ty)\n@@ -154,8 +168,8 @@ impl<'a> Parser<'a> {\n                 .emit();\n             let ty = self.parse_ty_common(\n                 allow_plus,\n-                recover_qpath,\n                 AllowCVariadic::No,\n+                recover_qpath,\n                 recover_return_sign,\n             )?;\n             FnRetTy::Ty(ty)\n@@ -167,8 +181,8 @@ impl<'a> Parser<'a> {\n     fn parse_ty_common(\n         &mut self,\n         allow_plus: AllowPlus,\n-        recover_qpath: RecoverQPath,\n         allow_c_variadic: AllowCVariadic,\n+        recover_qpath: RecoverQPath,\n         recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, P<Ty>> {\n         let allow_qpath_recovery = recover_qpath == RecoverQPath::Yes;"}]}