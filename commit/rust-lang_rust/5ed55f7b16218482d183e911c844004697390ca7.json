{"sha": "5ed55f7b16218482d183e911c844004697390ca7", "node_id": "C_kwDOAAsO6NoAKDVlZDU1ZjdiMTYyMTg0ODJkMTgzZTkxMWM4NDQwMDQ2OTczOTBjYTc", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-08T16:00:42Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-09T12:21:32Z"}, "message": "remove Clean trait implementation for ast::Module", "tree": {"sha": "d3bfb7652ab00bc84b8cd442c2cd551412d25cb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3bfb7652ab00bc84b8cd442c2cd551412d25cb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ed55f7b16218482d183e911c844004697390ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed55f7b16218482d183e911c844004697390ca7", "html_url": "https://github.com/rust-lang/rust/commit/5ed55f7b16218482d183e911c844004697390ca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ed55f7b16218482d183e911c844004697390ca7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5af97e8b0b9649ed14b0b4528a610ff841b6365e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af97e8b0b9649ed14b0b4528a610ff841b6365e", "html_url": "https://github.com/rust-lang/rust/commit/5af97e8b0b9649ed14b0b4528a610ff841b6365e"}], "stats": {"total": 131, "additions": 62, "deletions": 69}, "files": [{"sha": "a656c51ec5944d0dd02ac471f235e7c3e0676b4a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 58, "deletions": 65, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/5ed55f7b16218482d183e911c844004697390ca7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed55f7b16218482d183e911c844004697390ca7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5ed55f7b16218482d183e911c844004697390ca7", "patch": "@@ -48,75 +48,68 @@ pub(crate) trait Clean<'tcx, T> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> T;\n }\n \n-impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        let mut items: Vec<Item> = vec![];\n-        let mut inserted = FxHashSet::default();\n-        items.extend(self.foreigns.iter().map(|(item, renamed)| {\n-            let item = clean_maybe_renamed_foreign_item(cx, item, *renamed);\n+pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n+    let mut items: Vec<Item> = vec![];\n+    let mut inserted = FxHashSet::default();\n+    items.extend(doc.foreigns.iter().map(|(item, renamed)| {\n+        let item = clean_maybe_renamed_foreign_item(cx, item, *renamed);\n+        if let Some(name) = item.name {\n+            inserted.insert((item.type_(), name));\n+        }\n+        item\n+    }));\n+    items.extend(doc.mods.iter().map(|x| {\n+        inserted.insert((ItemType::Module, x.name));\n+        clean_doc_module(x, cx)\n+    }));\n+\n+    // Split up imports from all other items.\n+    //\n+    // This covers the case where somebody does an import which should pull in an item,\n+    // but there's already an item with the same namespace and same name. Rust gives\n+    // priority to the not-imported one, so we should, too.\n+    items.extend(doc.items.iter().flat_map(|(item, renamed)| {\n+        // First, lower everything other than imports.\n+        if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n+            return Vec::new();\n+        }\n+        let v = clean_maybe_renamed_item(cx, item, *renamed);\n+        for item in &v {\n             if let Some(name) = item.name {\n                 inserted.insert((item.type_(), name));\n             }\n-            item\n-        }));\n-        items.extend(self.mods.iter().map(|x| {\n-            inserted.insert((ItemType::Module, x.name));\n-            x.clean(cx)\n-        }));\n-\n-        // Split up imports from all other items.\n-        //\n-        // This covers the case where somebody does an import which should pull in an item,\n-        // but there's already an item with the same namespace and same name. Rust gives\n-        // priority to the not-imported one, so we should, too.\n-        items.extend(self.items.iter().flat_map(|(item, renamed)| {\n-            // First, lower everything other than imports.\n-            if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n-                return Vec::new();\n-            }\n-            let v = clean_maybe_renamed_item(cx, item, *renamed);\n-            for item in &v {\n-                if let Some(name) = item.name {\n-                    inserted.insert((item.type_(), name));\n-                }\n-            }\n-            v\n-        }));\n-        items.extend(self.items.iter().flat_map(|(item, renamed)| {\n-            // Now we actually lower the imports, skipping everything else.\n-            if let hir::ItemKind::Use(path, hir::UseKind::Glob) = item.kind {\n-                let name = renamed.unwrap_or_else(|| cx.tcx.hir().name(item.hir_id()));\n-                clean_use_statement(item, name, path, hir::UseKind::Glob, cx, &mut inserted)\n-            } else {\n-                // skip everything else\n-                Vec::new()\n-            }\n-        }));\n-\n-        // determine if we should display the inner contents or\n-        // the outer `mod` item for the source code.\n-\n-        let span = Span::new({\n-            let where_outer = self.where_outer(cx.tcx);\n-            let sm = cx.sess().source_map();\n-            let outer = sm.lookup_char_pos(where_outer.lo());\n-            let inner = sm.lookup_char_pos(self.where_inner.lo());\n-            if outer.file.start_pos == inner.file.start_pos {\n-                // mod foo { ... }\n-                where_outer\n-            } else {\n-                // mod foo; (and a separate SourceFile for the contents)\n-                self.where_inner\n-            }\n-        });\n+        }\n+        v\n+    }));\n+    items.extend(doc.items.iter().flat_map(|(item, renamed)| {\n+        // Now we actually lower the imports, skipping everything else.\n+        if let hir::ItemKind::Use(path, hir::UseKind::Glob) = item.kind {\n+            let name = renamed.unwrap_or_else(|| cx.tcx.hir().name(item.hir_id()));\n+            clean_use_statement(item, name, path, hir::UseKind::Glob, cx, &mut inserted)\n+        } else {\n+            // skip everything else\n+            Vec::new()\n+        }\n+    }));\n+\n+    // determine if we should display the inner contents or\n+    // the outer `mod` item for the source code.\n+\n+    let span = Span::new({\n+        let where_outer = doc.where_outer(cx.tcx);\n+        let sm = cx.sess().source_map();\n+        let outer = sm.lookup_char_pos(where_outer.lo());\n+        let inner = sm.lookup_char_pos(doc.where_inner.lo());\n+        if outer.file.start_pos == inner.file.start_pos {\n+            // mod foo { ... }\n+            where_outer\n+        } else {\n+            // mod foo; (and a separate SourceFile for the contents)\n+            doc.where_inner\n+        }\n+    });\n \n-        Item::from_hir_id_and_parts(\n-            self.id,\n-            Some(self.name),\n-            ModuleItem(Module { items, span }),\n-            cx,\n-        )\n-    }\n+    Item::from_hir_id_and_parts(doc.id, Some(doc.name), ModuleItem(Module { items, span }), cx)\n }\n \n fn clean_generic_bound<'tcx>("}, {"sha": "718cbbd2b83742bf4e97e7d5ce93710e1ea906fe", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ed55f7b16218482d183e911c844004697390ca7/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed55f7b16218482d183e911c844004697390ca7/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=5ed55f7b16218482d183e911c844004697390ca7", "patch": "@@ -2,9 +2,9 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::render_macro_matchers::render_macro_matcher;\n use crate::clean::{\n-    clean_middle_const, clean_middle_region, clean_middle_ty, inline, Clean, Crate, ExternalCrate,\n-    Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path, PathSegment,\n-    Primitive, PrimitiveType, Type, TypeBinding, Visibility,\n+    clean_doc_module, clean_middle_const, clean_middle_region, clean_middle_ty, inline, Crate,\n+    ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path,\n+    PathSegment, Primitive, PrimitiveType, Type, TypeBinding, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -37,7 +37,7 @@ pub(crate) fn krate(cx: &mut DocContext<'_>) -> Crate {\n \n     // Clean the crate, translating the entire librustc_ast AST to one that is\n     // understood by rustdoc.\n-    let mut module = module.clean(cx);\n+    let mut module = clean_doc_module(&module, cx);\n \n     match *module.kind {\n         ItemKind::ModuleItem(ref module) => {"}]}