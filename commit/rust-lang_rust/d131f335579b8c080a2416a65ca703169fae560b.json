{"sha": "d131f335579b8c080a2416a65ca703169fae560b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzFmMzM1NTc5YjhjMDgwYTI0MTZhNjVjYTcwMzE2OWZhZTU2MGI=", "commit": {"author": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2015-04-13T21:49:10Z"}, "committer": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2015-05-06T05:26:23Z"}, "message": "lint: deny transmuting from immutable to mutable, since it's undefined behavior\n\n[breaking-change] Technically breaking, since code that had been using\nthese transmutes before will no longer compile. However, it was\nundefined behavior, so really, it's a good thing. Fixing your code would\nrequire some re-working to use an UnsafeCell instead.\n\nCloses #13146", "tree": {"sha": "7a26c19593694618ccd7d3c903b5818260212935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a26c19593694618ccd7d3c903b5818260212935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d131f335579b8c080a2416a65ca703169fae560b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d131f335579b8c080a2416a65ca703169fae560b", "html_url": "https://github.com/rust-lang/rust/commit/d131f335579b8c080a2416a65ca703169fae560b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d131f335579b8c080a2416a65ca703169fae560b/comments", "author": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cd748611346dec3181f81ca3aa551cce0529343", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd748611346dec3181f81ca3aa551cce0529343", "html_url": "https://github.com/rust-lang/rust/commit/6cd748611346dec3181f81ca3aa551cce0529343"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "8d555240e707b31751facd1d4c5f8fbca1e010eb", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d131f335579b8c080a2416a65ca703169fae560b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d131f335579b8c080a2416a65ca703169fae560b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d131f335579b8c080a2416a65ca703169fae560b", "patch": "@@ -2121,6 +2121,72 @@ impl LintPass for InvalidNoMangleItems {\n     }\n }\n \n+#[derive(Clone, Copy)]\n+pub struct MutableTransmutes;\n+\n+declare_lint! {\n+    MUTABLE_TRANSMUTES,\n+    Deny,\n+    \"mutating transmuted &mut T from &T may cause undefined behavior\"\n+}\n+\n+impl LintPass for MutableTransmutes {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MUTABLE_TRANSMUTES)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &ast::Expr) {\n+        use syntax::ast::DefId;\n+        use syntax::abi::RustIntrinsic;\n+        let msg = \"mutating transmuted &mut T from &T may cause undefined behavior,\\\n+                   consider instead using an UnsafeCell\";\n+        match get_transmute_from_to(cx, expr) {\n+            Some((&ty::ty_rptr(_, from_mt), &ty::ty_rptr(_, to_mt))) => {\n+                if to_mt.mutbl == ast::Mutability::MutMutable\n+                    && from_mt.mutbl == ast::Mutability::MutImmutable {\n+                    cx.span_lint(MUTABLE_TRANSMUTES, expr.span, msg);\n+                }\n+            }\n+            _ => ()\n+        }\n+\n+        fn get_transmute_from_to<'a, 'tcx>(cx: &Context<'a, 'tcx>, expr: &ast::Expr)\n+            -> Option<(&'tcx ty::sty<'tcx>, &'tcx ty::sty<'tcx>)> {\n+            match expr.node {\n+                ast::ExprPath(..) => (),\n+                _ => return None\n+            }\n+            if let DefFn(did, _) = ty::resolve_expr(cx.tcx, expr) {\n+                if !def_id_is_transmute(cx, did) {\n+                    return None;\n+                }\n+                let typ = ty::node_id_to_type(cx.tcx, expr.id);\n+                match typ.sty {\n+                    ty::ty_bare_fn(_, ref bare_fn) if bare_fn.abi == RustIntrinsic => {\n+                        if let ty::FnConverging(to) = bare_fn.sig.0.output {\n+                            let from = bare_fn.sig.0.inputs[0];\n+                            return Some((&from.sty, &to.sty));\n+                        }\n+                    },\n+                    _ => ()\n+                }\n+            }\n+            None\n+        }\n+\n+        fn def_id_is_transmute(cx: &Context, def_id: DefId) -> bool {\n+            match ty::lookup_item_type(cx.tcx, def_id).ty.sty {\n+                ty::ty_bare_fn(_, ref bfty) if bfty.abi == RustIntrinsic => (),\n+                _ => return false\n+            }\n+            ty::with_path(cx.tcx, def_id, |path| match path.last() {\n+                Some(ref last) => last.name().as_str() == \"transmute\",\n+                _ => false\n+            })\n+        }\n+    }\n+}\n+\n /// Forbids using the `#[feature(...)]` attribute\n #[derive(Copy, Clone)]\n pub struct UnstableFeatures;"}, {"sha": "df834c36e5b225262d13ccd18d3b941cb7f336a0", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d131f335579b8c080a2416a65ca703169fae560b/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d131f335579b8c080a2416a65ca703169fae560b/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=d131f335579b8c080a2416a65ca703169fae560b", "patch": "@@ -109,6 +109,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  InvalidNoMangleItems,\n                  PluginAsLibrary,\n                  DropWithReprExtern,\n+                 MutableTransmutes,\n                  );\n \n     add_builtin_with_new!(sess,"}, {"sha": "2e076337f53ef7cceb00f2a3d0ba23a848164904", "filename": "src/test/compile-fail/transmute-imut-to-mut.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d131f335579b8c080a2416a65ca703169fae560b/src%2Ftest%2Fcompile-fail%2Ftransmute-imut-to-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d131f335579b8c080a2416a65ca703169fae560b/src%2Ftest%2Fcompile-fail%2Ftransmute-imut-to-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftransmute-imut-to-mut.rs?ref=d131f335579b8c080a2416a65ca703169fae560b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that transmuting from &T to &mut T is Undefined Behavior.\n+\n+use std::mem::transmute;\n+\n+fn main() {\n+    let _a: &mut u8 = unsafe { transmute(&1u8) };\n+    //~^ ERROR mutating transmuted &mut T from &T may cause undefined behavior\n+}\n+\n+"}]}