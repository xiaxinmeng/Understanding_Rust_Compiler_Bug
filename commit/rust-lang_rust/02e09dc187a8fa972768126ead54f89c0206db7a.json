{"sha": "02e09dc187a8fa972768126ead54f89c0206db7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZTA5ZGMxODdhOGZhOTcyNzY4MTI2ZWFkNTRmODljMDIwNmRiN2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-14T09:00:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-14T09:00:45Z"}, "message": "Merge pull request #337 from RalfJung/rustup\n\nrustup", "tree": {"sha": "dd80bf8a74c447a76a729898ea4877e302a9b3bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd80bf8a74c447a76a729898ea4877e302a9b3bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e09dc187a8fa972768126ead54f89c0206db7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e09dc187a8fa972768126ead54f89c0206db7a", "html_url": "https://github.com/rust-lang/rust/commit/02e09dc187a8fa972768126ead54f89c0206db7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e09dc187a8fa972768126ead54f89c0206db7a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237590ada34b554abc1df14f3c57677f79d4ed73", "url": "https://api.github.com/repos/rust-lang/rust/commits/237590ada34b554abc1df14f3c57677f79d4ed73", "html_url": "https://github.com/rust-lang/rust/commit/237590ada34b554abc1df14f3c57677f79d4ed73"}, {"sha": "ca0f063489d61e14b72cfb46e9d5e0403e361af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0f063489d61e14b72cfb46e9d5e0403e361af6", "html_url": "https://github.com/rust-lang/rust/commit/ca0f063489d61e14b72cfb46e9d5e0403e361af6"}], "stats": {"total": 33, "additions": 10, "deletions": 23}, "files": [{"sha": "86577702e96d933dd50e8458b198030dcbe7fc82", "filename": ".travis.yml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02e09dc187a8fa972768126ead54f89c0206db7a/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/02e09dc187a8fa972768126ead54f89c0206db7a/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=02e09dc187a8fa972768126ead54f89c0206db7a", "patch": "@@ -16,9 +16,9 @@ script:\n   xargo/build.sh\n - |\n   # Test plain miri\n-  cargo build --locked --release --features \"cargo_miri\" &&\n-  cargo test --release --all &&\n-  cargo install --features \"cargo_miri\"\n+  cargo build --locked --release --all-features &&\n+  cargo test --locked --release --all-features --all &&\n+  cargo install --locked --all-features\n - |\n   # Test cargo miri\n   cd cargo-miri-test &&\n@@ -27,7 +27,7 @@ script:\n   cd ..\n - |\n   # and run all tests with full mir\n-  MIRI_SYSROOT=~/.xargo/HOST cargo test --release\n+  MIRI_SYSROOT=~/.xargo/HOST cargo test --locked --release\n - |\n   # test that the rustc_tests binary compiles\n   cd rustc_tests &&"}, {"sha": "65f855a513f746b73eaa12dd03988753781677c8", "filename": "miri/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02e09dc187a8fa972768126ead54f89c0206db7a/miri%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e09dc187a8fa972768126ead54f89c0206db7a/miri%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fmiri.rs?ref=02e09dc187a8fa972768126ead54f89c0206db7a", "patch": "@@ -11,6 +11,7 @@ extern crate syntax;\n extern crate log;\n \n use rustc::session::Session;\n+use rustc::middle::cstore::CrateStore;\n use rustc_driver::{Compilation, CompilerCalls, RustcDefaultCalls};\n use rustc_driver::driver::{CompileState, CompileController};\n use rustc::session::config::{self, Input, ErrorOutputType};\n@@ -64,11 +65,12 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         &mut self,\n         matches: &getopts::Matches,\n         sess: &Session,\n+        cstore: &CrateStore,\n         input: &Input,\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n     ) -> Compilation {\n-        self.default.late_callback(matches, sess, input, odir, ofile)\n+        self.default.late_callback(matches, sess, cstore, input, odir, ofile)\n     }\n     fn build_controller(\n         &mut self,"}, {"sha": "819721c1cd0f990158a58af89f6321ea274ed751", "filename": "rustc_tests/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02e09dc187a8fa972768126ead54f89c0206db7a/rustc_tests%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e09dc187a8fa972768126ead54f89c0206db7a/rustc_tests%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tests%2Fsrc%2Fmain.rs?ref=02e09dc187a8fa972768126ead54f89c0206db7a", "patch": "@@ -13,6 +13,7 @@ use std::io;\n \n \n use rustc::session::Session;\n+use rustc::middle::cstore::CrateStore;\n use rustc_driver::{Compilation, CompilerCalls, RustcDefaultCalls};\n use rustc_driver::driver::{CompileState, CompileController};\n use rustc::session::config::{self, Input, ErrorOutputType};\n@@ -52,11 +53,12 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         &mut self,\n         matches: &getopts::Matches,\n         sess: &Session,\n+        cstore: &CrateStore,\n         input: &Input,\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>\n     ) -> Compilation {\n-        self.default.late_callback(matches, sess, input, odir, ofile)\n+        self.default.late_callback(matches, sess, cstore, input, odir, ofile)\n     }\n     fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> CompileController<'a> {\n         let mut control = self.default.build_controller(sess, matches);"}, {"sha": "23bb0d8dbb78f288ae182dcb682c1ef94d5ab877", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02e09dc187a8fa972768126ead54f89c0206db7a/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e09dc187a8fa972768126ead54f89c0206db7a/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=02e09dc187a8fa972768126ead54f89c0206db7a", "patch": "@@ -398,23 +398,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             }\n         }\n \n-        // HACK: For now, bail out if we hit a dead local during recovery (can happen because sometimes we have\n-        // StorageDead before EndRegion due to https://github.com/rust-lang/rust/issues/43481).\n-        // TODO: We should rather fix the MIR.\n-        match query.lval.1 {\n-            Lvalue::Local { frame, local } => {\n-                let res = self.stack[frame].get_local(local);\n-                match (res, mode) {\n-                    (Err(EvalError { kind: EvalErrorKind::DeadLocal, .. }),\n-                     ValidationMode::Recover(_)) => {\n-                        return Ok(());\n-                    }\n-                    _ => {}\n-                }\n-            }\n-            _ => {}\n-        }\n-\n         query.ty = self.normalize_type_unerased(&query.ty);\n         trace!(\"{:?} on {:?}\", mode, query);\n "}]}