{"sha": "5741e2941797039abdfb91138abfa33e8631a578", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NDFlMjk0MTc5NzAzOWFiZGZiOTExMzhhYmZhMzNlODYzMWE1Nzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T02:18:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T02:18:49Z"}, "message": "Rollup merge of #63501 - nikomatsakis:issue-63500-async-anon-impl-lifetime, r=cramertj\n\nuse `ParamName` to track in-scope lifetimes instead of Ident\n\nAlso, clear in-scope lifetimes when visiting nested items.\n\nFixes #63500.\nFixes #63225.\nFixes #52532.\n\nr? @cramertj", "tree": {"sha": "2c431a132a624f4d612287e590ffb8334ce3608b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c431a132a624f4d612287e590ffb8334ce3608b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5741e2941797039abdfb91138abfa33e8631a578", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdU2+KCRBK7hj4Ov3rIwAAdHIIAD/1GMexjY1nt1VYUrvbcaB8\nIl5am5UmGvsHqrmRx9+vOcA7my/KVw3659rbVyeQHtprDR1b6xflsCbSxFyAq9Vi\nAP8gbXoROQf7Lzcj44GIBdyo8y/QANDV2WuFhjU5t0gq3v31yxaczms8+hAKqB2s\nx1MV/SsPd/8botEsm4My9kCxK+G/YzNDghHXtYr8AURRq+LCd4TOP9/FMELHAY/s\nTt9FS/ost4ZhqNKYAG5IL0clzrAYWlVNVMiaWpnqq72HF8SsTjR5WgmTrpXKjQhO\nbLPSmMAfI0ib3YieYme0aYqZeT0Nu7QscRzWeTxvI9niJXM5J1hFJryNg674iXU=\n=4aYK\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c431a132a624f4d612287e590ffb8334ce3608b\nparent 4134241bcf79a77c724158cc388a746499c5fa06\nparent e4756e6b07989d1cf195667bcf5d9f780618031a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565749129 +0200\ncommitter GitHub <noreply@github.com> 1565749129 +0200\n\nRollup merge of #63501 - nikomatsakis:issue-63500-async-anon-impl-lifetime, r=cramertj\n\nuse `ParamName` to track in-scope lifetimes instead of Ident\n\nAlso, clear in-scope lifetimes when visiting nested items.\n\nFixes #63500.\nFixes #63225.\nFixes #52532.\n\nr? @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5741e2941797039abdfb91138abfa33e8631a578", "html_url": "https://github.com/rust-lang/rust/commit/5741e2941797039abdfb91138abfa33e8631a578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5741e2941797039abdfb91138abfa33e8631a578/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4134241bcf79a77c724158cc388a746499c5fa06", "url": "https://api.github.com/repos/rust-lang/rust/commits/4134241bcf79a77c724158cc388a746499c5fa06", "html_url": "https://github.com/rust-lang/rust/commit/4134241bcf79a77c724158cc388a746499c5fa06"}, {"sha": "e4756e6b07989d1cf195667bcf5d9f780618031a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4756e6b07989d1cf195667bcf5d9f780618031a", "html_url": "https://github.com/rust-lang/rust/commit/e4756e6b07989d1cf195667bcf5d9f780618031a"}], "stats": {"total": 103, "additions": 94, "deletions": 9}, "files": [{"sha": "a1f38d7dd1342912640151a219ffe7b6b7b0eea0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5741e2941797039abdfb91138abfa33e8631a578/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5741e2941797039abdfb91138abfa33e8631a578/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5741e2941797039abdfb91138abfa33e8631a578", "patch": "@@ -136,7 +136,10 @@ pub struct LoweringContext<'a> {\n     /// When `is_collectin_in_band_lifetimes` is true, each lifetime is checked\n     /// against this list to see if it is already in-scope, or if a definition\n     /// needs to be created for it.\n-    in_scope_lifetimes: Vec<Ident>,\n+    ///\n+    /// We always store a `modern()` version of the param-name in this\n+    /// vector.\n+    in_scope_lifetimes: Vec<ParamName>,\n \n     current_module: NodeId,\n \n@@ -822,7 +825,7 @@ impl<'a> LoweringContext<'a> {\n             return;\n         }\n \n-        if self.in_scope_lifetimes.contains(&ident.modern()) {\n+        if self.in_scope_lifetimes.contains(&ParamName::Plain(ident.modern())) {\n             return;\n         }\n \n@@ -856,7 +859,7 @@ impl<'a> LoweringContext<'a> {\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n-            GenericParamKind::Lifetime { .. } => Some(param.ident.modern()),\n+            GenericParamKind::Lifetime { .. } => Some(ParamName::Plain(param.ident.modern())),\n             _ => None,\n         });\n         self.in_scope_lifetimes.extend(lt_def_names);\n@@ -2271,10 +2274,14 @@ impl<'a> LoweringContext<'a> {\n             let lifetime_params: Vec<(Span, ParamName)> =\n                 this.in_scope_lifetimes\n                     .iter().cloned()\n-                    .map(|ident| (ident.span, ParamName::Plain(ident)))\n+                    .map(|name| (name.ident().span, name))\n                     .chain(this.lifetimes_to_define.iter().cloned())\n                     .collect();\n \n+            debug!(\"lower_async_fn_ret_ty: in_scope_lifetimes={:#?}\", this.in_scope_lifetimes);\n+            debug!(\"lower_async_fn_ret_ty: lifetimes_to_define={:#?}\", this.lifetimes_to_define);\n+            debug!(\"lower_async_fn_ret_ty: lifetime_params={:#?}\", lifetime_params);\n+\n             let generic_params =\n                 lifetime_params\n                     .iter().cloned()"}, {"sha": "dd95d99d4e1d6d6a1f35fcde9d3951f1f5766058", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5741e2941797039abdfb91138abfa33e8631a578/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5741e2941797039abdfb91138abfa33e8631a578/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=5741e2941797039abdfb91138abfa33e8631a578", "patch": "@@ -60,10 +60,12 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n         let mut item_hir_id = None;\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n-            if let Some(hir_item) = lctx.lower_item(item) {\n-                item_hir_id = Some(hir_item.hir_id);\n-                lctx.insert_item(hir_item);\n-            }\n+            lctx.without_in_scope_lifetime_defs(|lctx| {\n+                if let Some(hir_item) = lctx.lower_item(item) {\n+                    item_hir_id = Some(hir_item.hir_id);\n+                    lctx.insert_item(hir_item);\n+                }\n+            })\n         });\n \n         if let Some(hir_id) = item_hir_id {\n@@ -123,7 +125,7 @@ impl LoweringContext<'_> {\n             _ => &[],\n         };\n         let lt_def_names = parent_generics.iter().filter_map(|param| match param.kind {\n-            hir::GenericParamKind::Lifetime { .. } => Some(param.name.ident().modern()),\n+            hir::GenericParamKind::Lifetime { .. } => Some(param.name.modern()),\n             _ => None,\n         });\n         self.in_scope_lifetimes.extend(lt_def_names);\n@@ -134,6 +136,28 @@ impl LoweringContext<'_> {\n         res\n     }\n \n+    // Clears (and restores) the `in_scope_lifetimes` field. Used when\n+    // visiting nested items, which never inherit in-scope lifetimes\n+    // from their surrounding environment.\n+    fn without_in_scope_lifetime_defs<T>(\n+        &mut self,\n+        f: impl FnOnce(&mut LoweringContext<'_>) -> T,\n+    ) -> T {\n+        let old_in_scope_lifetimes = std::mem::replace(&mut self.in_scope_lifetimes, vec![]);\n+\n+        // this vector is only used when walking over impl headers,\n+        // input types, and the like, and should not be non-empty in\n+        // between items\n+        assert!(self.lifetimes_to_define.is_empty());\n+\n+        let res = f(self);\n+\n+        assert!(self.in_scope_lifetimes.is_empty());\n+        self.in_scope_lifetimes = old_in_scope_lifetimes;\n+\n+        res\n+    }\n+\n     pub(super) fn lower_mod(&mut self, m: &Mod) -> hir::Mod {\n         hir::Mod {\n             inner: m.inner,"}, {"sha": "1cbc5133a07e6ba016566af55fb3f6af503e6990", "filename": "src/test/ui/async-await/async-fn-elided-impl-lifetime-parameter.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5741e2941797039abdfb91138abfa33e8631a578/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5741e2941797039abdfb91138abfa33e8631a578/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs?ref=5741e2941797039abdfb91138abfa33e8631a578", "patch": "@@ -0,0 +1,17 @@\n+// Check that `async fn` inside of an impl with `'_`\n+// in the header compiles correctly.\n+//\n+// Regression test for #63500.\n+//\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Foo<'a>(&'a u8);\n+\n+impl Foo<'_> {\n+    async fn bar() {}\n+}\n+\n+fn main() { }"}, {"sha": "3c82160595f1dfda847cd6cd0c10008213950690", "filename": "src/test/ui/async-await/nested-in-impl.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5741e2941797039abdfb91138abfa33e8631a578/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5741e2941797039abdfb91138abfa33e8631a578/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs?ref=5741e2941797039abdfb91138abfa33e8631a578", "patch": "@@ -0,0 +1,17 @@\n+// Test that async fn works when nested inside of\n+// impls with lifetime parameters.\n+//\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Foo<'a>(&'a ());\n+\n+impl<'a> Foo<'a> {\n+    fn test() {\n+        async fn test() {}\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "7de20712fba94c20196260a61e0f27124c6cb420", "filename": "src/test/ui/in-band-lifetimes/nested-items.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5741e2941797039abdfb91138abfa33e8631a578/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fnested-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5741e2941797039abdfb91138abfa33e8631a578/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fnested-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fnested-items.rs?ref=5741e2941797039abdfb91138abfa33e8631a578", "patch": "@@ -0,0 +1,20 @@\n+// Test that the `'a` from the impl doesn't\n+// prevent us from creating a `'a` parameter\n+// on the `blah` function.\n+//\n+// check-pass\n+\n+#![feature(in_band_lifetimes)]\n+\n+struct Foo<'a> {\n+    x: &'a u32\n+\n+}\n+\n+impl Foo<'a> {\n+    fn method(&self) {\n+        fn blah(f: Foo<'a>) { }\n+    }\n+}\n+\n+fn main() { }"}]}