{"sha": "539c435b509563956bc34c3bc457528483f383a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOWM0MzViNTA5NTYzOTU2YmMzNGMzYmM0NTc1Mjg0ODNmMzgzYTA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-03T16:09:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-03T16:09:13Z"}, "message": "Rollup merge of #80646 - bugadani:meta, r=petrochenkov\n\nClean up in `each_child_of_item`\n\nThis PR hopes to eliminate some of the surprising elements I encountered while reading the function.\n- `macros_only` is checked against inside the loop body, but if it is `true`, the loop is skipped anyway\n- only query `span` when relevant\n- no need to allocate attribute vector", "tree": {"sha": "ce64551f02b93942fdf2d4ffeb77f8c605acc961", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce64551f02b93942fdf2d4ffeb77f8c605acc961"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/539c435b509563956bc34c3bc457528483f383a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8ewpCRBK7hj4Ov3rIwAAdHIIAJ4QbQSb/CTktd5qSzbAyVvu\n0sHr2Sg/GeIqmL2eqHyUDHl8yjNSX+J32A7ag0qD/XdV1Ij36vAEjRZAQz+s5TE2\nFkD9nG2rHzhOJRqNl8sYh0lrF8jQexm4Y8WtINxcay3pXH+hGLCagAmQ4wLsN4VQ\n8rJWjUGcVFEYubzMHDlCmgr00GDZpgdLjvpbOGx7yKipWuLKqljKInByrG7IkYgV\ndihgKcUudiPOYHmGjA+g6eYfJgNlL2Lu7DrAdVsdL1m4MkWc877336P1ZCjYt+sY\nZVoCsU+3T4K/d1zIoErJf56ogfoN8Ytr0Ou0VhLvSVnHgs4JtGfybyzl/l/fwuI=\n=+93z\n-----END PGP SIGNATURE-----\n", "payload": "tree ce64551f02b93942fdf2d4ffeb77f8c605acc961\nparent ff1f21a8fd19c847afa954c89cff5e356e1a9d8f\nparent 4d3227fe1c14c089afb6d2bfa266a78336bf4fc1\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1609690153 +0100\ncommitter GitHub <noreply@github.com> 1609690153 +0100\n\nRollup merge of #80646 - bugadani:meta, r=petrochenkov\n\nClean up in `each_child_of_item`\n\nThis PR hopes to eliminate some of the surprising elements I encountered while reading the function.\n- `macros_only` is checked against inside the loop body, but if it is `true`, the loop is skipped anyway\n- only query `span` when relevant\n- no need to allocate attribute vector\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/539c435b509563956bc34c3bc457528483f383a0", "html_url": "https://github.com/rust-lang/rust/commit/539c435b509563956bc34c3bc457528483f383a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/539c435b509563956bc34c3bc457528483f383a0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff1f21a8fd19c847afa954c89cff5e356e1a9d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1f21a8fd19c847afa954c89cff5e356e1a9d8f", "html_url": "https://github.com/rust-lang/rust/commit/ff1f21a8fd19c847afa954c89cff5e356e1a9d8f"}, {"sha": "4d3227fe1c14c089afb6d2bfa266a78336bf4fc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3227fe1c14c089afb6d2bfa266a78336bf4fc1", "html_url": "https://github.com/rust-lang/rust/commit/4d3227fe1c14c089afb6d2bfa266a78336bf4fc1"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "a4bb5f8dc954d2796659d637b96f48a22e690960", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/539c435b509563956bc34c3bc457528483f383a0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539c435b509563956bc34c3bc457528483f383a0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=539c435b509563956bc34c3bc457528483f383a0", "patch": "@@ -1055,19 +1055,15 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n         // Iterate over all children.\n         let macros_only = self.dep_kind.lock().macros_only();\n-        let children = self.root.tables.children.get(self, id).unwrap_or_else(Lazy::empty);\n-        for child_index in children.decode((self, sess)) {\n-            if macros_only {\n-                continue;\n-            }\n-\n-            // Get the item.\n-            if let Some(child_kind) = self.maybe_kind(child_index) {\n-                match child_kind {\n-                    EntryKind::MacroDef(..) => {}\n-                    _ if macros_only => continue,\n-                    _ => {}\n-                }\n+        if !macros_only {\n+            let children = self.root.tables.children.get(self, id).unwrap_or_else(Lazy::empty);\n+\n+            for child_index in children.decode((self, sess)) {\n+                // Get the item.\n+                let child_kind = match self.maybe_kind(child_index) {\n+                    Some(child_kind) => child_kind,\n+                    None => continue,\n+                };\n \n                 // Hand off the item to the callback.\n                 match child_kind {\n@@ -1102,8 +1098,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 }\n \n                 let def_key = self.def_key(child_index);\n-                let span = self.get_span(child_index, sess);\n                 if def_key.disambiguated_data.data.get_opt_name().is_some() {\n+                    let span = self.get_span(child_index, sess);\n                     let kind = self.def_kind(child_index);\n                     let ident = self.item_ident(child_index, sess);\n                     let vis = self.get_visibility(child_index);\n@@ -1137,9 +1133,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                 // within the crate. We only need this for fictive constructors,\n                                 // for other constructors correct visibilities\n                                 // were already encoded in metadata.\n-                                let attrs: Vec<_> =\n-                                    self.get_item_attrs(def_id.index, sess).collect();\n-                                if sess.contains_name(&attrs, sym::non_exhaustive) {\n+                                let mut attrs = self.get_item_attrs(def_id.index, sess);\n+                                if attrs.any(|item| item.has_name(sym::non_exhaustive)) {\n                                     let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);\n                                     vis = ty::Visibility::Restricted(crate_def_id);\n                                 }"}]}