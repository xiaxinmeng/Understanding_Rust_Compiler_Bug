{"sha": "050232a37e71ec06e8810af29178b124c76a527d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MDIzMmEzN2U3MWVjMDZlODgxMGFmMjkxNzhiMTI0Yzc2YTUyN2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-11T10:44:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-11T10:44:07Z"}, "message": "Merge #9192\n\n9192: internal: Build test-macros in a build script r=jonas-schievink a=jonas-schievink\n\nThis build the test-proc-macros in `proc_macro_test` in a build script, and copies the artifact to `OUT_DIR`. This should make it available throughout all of rust-analyzer at no cost other than depending on `proc_macro_test`, fixing https://github.com/rust-analyzer/rust-analyzer/issues/9067.\r\n\r\nThis hopefully will let us later write inline tests that utilize proc macros, which makes my life fixing proc macro bugs easier.\r\n\r\nOpening this as a sort of RFC, because I'm not totally sure this approach is the best.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "6fddd9fbac95b72b24f0024586fe6d0c985aa429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fddd9fbac95b72b24f0024586fe6d0c985aa429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050232a37e71ec06e8810af29178b124c76a527d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwz53CRBK7hj4Ov3rIwAAsBkIAJF8YNRstrSWdantDcEFkKuX\nECiXWclguR5gwAx/HTN4S/iwvrvyWi8kc3Mom5ZJWV7EqLRrGJaU5t9qtvDS2auu\nEV2fZX0ErSprN7Dd1TGanmw8VaibKbCFduQ4RjvF0+fTBvVNL9W61+igvyUy5y00\nXrQbUHwYNZ2iyvdu2rfYA/agJfpBcn6uR0RGnUNmzn2OjdL6anlCQaMMXyYqHlN5\nLtaTDtl3XNFmfrqwB8OilClj4FQMW2Gi/w+WC+4iAdguIJy81WlUsZFmcDuJHQ8f\nLuKW3eRR61gB3Fg3y1mAvKGTQPIzqzkwNya8RLKYJSJaIncQEu6zT40A935h6tU=\n=IjiW\n-----END PGP SIGNATURE-----\n", "payload": "tree 6fddd9fbac95b72b24f0024586fe6d0c985aa429\nparent de9e989cf4435c58b8347b16881e50d06f754f20\nparent d236fc6abecb308dab5e21898fa40f3bddf27640\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623408247 +0000\ncommitter GitHub <noreply@github.com> 1623408247 +0000\n\nMerge #9192\n\n9192: internal: Build test-macros in a build script r=jonas-schievink a=jonas-schievink\n\nThis build the test-proc-macros in `proc_macro_test` in a build script, and copies the artifact to `OUT_DIR`. This should make it available throughout all of rust-analyzer at no cost other than depending on `proc_macro_test`, fixing https://github.com/rust-analyzer/rust-analyzer/issues/9067.\r\n\r\nThis hopefully will let us later write inline tests that utilize proc macros, which makes my life fixing proc macro bugs easier.\r\n\r\nOpening this as a sort of RFC, because I'm not totally sure this approach is the best.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050232a37e71ec06e8810af29178b124c76a527d", "html_url": "https://github.com/rust-lang/rust/commit/050232a37e71ec06e8810af29178b124c76a527d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050232a37e71ec06e8810af29178b124c76a527d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de9e989cf4435c58b8347b16881e50d06f754f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/de9e989cf4435c58b8347b16881e50d06f754f20", "html_url": "https://github.com/rust-lang/rust/commit/de9e989cf4435c58b8347b16881e50d06f754f20"}, {"sha": "d236fc6abecb308dab5e21898fa40f3bddf27640", "url": "https://api.github.com/repos/rust-lang/rust/commits/d236fc6abecb308dab5e21898fa40f3bddf27640", "html_url": "https://github.com/rust-lang/rust/commit/d236fc6abecb308dab5e21898fa40f3bddf27640"}], "stats": {"total": 219, "additions": 140, "deletions": 79}, "files": [{"sha": "ea2c1aed7ac39f068dd883d219ad5b61bb41ea31", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -1158,6 +1158,15 @@ dependencies = [\n [[package]]\n name = \"proc_macro_test\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"cargo_metadata\",\n+ \"proc_macro_test_impl\",\n+ \"toolchain\",\n+]\n+\n+[[package]]\n+name = \"proc_macro_test_impl\"\n+version = \"0.0.0\"\n \n [[package]]\n name = \"profile\""}, {"sha": "4d6908fa93e9973da7aee0eaa0b9d03d1207a5ec", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -1,6 +1,7 @@\n [workspace]\n resolver = \"2\"\n members = [\"xtask/\", \"lib/*\", \"crates/*\"]\n+exclude = [\"crates/proc_macro_test/imp\"]\n \n [profile.dev]\n # Disabling debug info speeds up builds a bunch,"}, {"sha": "5133e7c50b20704ce86570042b29899d62a96243", "filename": "crates/proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -188,7 +188,9 @@ impl Expander {\n /// Copy the dylib to temp directory to prevent locking in Windows\n #[cfg(windows)]\n fn ensure_file_with_lock_free_access(path: &Path) -> io::Result<PathBuf> {\n-    use std::{ffi::OsString, time::SystemTime};\n+    use std::collections::hash_map::RandomState;\n+    use std::ffi::OsString;\n+    use std::hash::{BuildHasher, Hasher};\n \n     let mut to = std::env::temp_dir();\n \n@@ -199,10 +201,11 @@ fn ensure_file_with_lock_free_access(path: &Path) -> io::Result<PathBuf> {\n         )\n     })?;\n \n-    // generate a time deps unique number\n-    let t = SystemTime::now().duration_since(std::time::UNIX_EPOCH).expect(\"Time went backwards\");\n+    // Generate a unique number by abusing `HashMap`'s hasher.\n+    // Maybe this will also \"inspire\" a libs team member to finally put `rand` in libstd.\n+    let t = RandomState::new().build_hasher().finish();\n \n-    let mut unique_name = OsString::from(t.as_millis().to_string());\n+    let mut unique_name = OsString::from(t.to_string());\n     unique_name.push(file_name);\n \n     to.push(unique_name);"}, {"sha": "2c093aa0ad8ec741aad9c2263700b188a115adef", "filename": "crates/proc_macro_srv/src/tests/utils.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -7,35 +7,8 @@ use proc_macro_api::ListMacrosTask;\n use std::str::FromStr;\n \n pub mod fixtures {\n-    use cargo_metadata::Message;\n-    use std::path::PathBuf;\n-    use std::process::Command;\n-\n-    // Use current project metadata to get the proc-macro dylib path\n     pub fn proc_macro_test_dylib_path() -> std::path::PathBuf {\n-        let name = \"proc_macro_test\";\n-        let version = \"0.0.0\";\n-        let command = Command::new(toolchain::cargo())\n-            .args(&[\"check\", \"--tests\", \"--message-format\", \"json\"])\n-            .output()\n-            .unwrap()\n-            .stdout;\n-\n-        for message in Message::parse_stream(command.as_slice()) {\n-            match message.unwrap() {\n-                Message::CompilerArtifact(artifact) => {\n-                    if artifact.target.kind.contains(&\"proc-macro\".to_string()) {\n-                        let repr = format!(\"{} {}\", name, version);\n-                        if artifact.package_id.repr.starts_with(&repr) {\n-                            return PathBuf::from(&artifact.filenames[0]);\n-                        }\n-                    }\n-                }\n-                _ => (), // Unknown message\n-            }\n-        }\n-\n-        panic!(\"No proc-macro dylib for {} found!\", name);\n+        proc_macro_test::PROC_MACRO_TEST_LOCATION.into()\n     }\n }\n "}, {"sha": "1a88e361e83d47113118d205040277353b4e857b", "filename": "crates/proc_macro_test/Cargo.toml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2FCargo.toml?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -8,4 +8,8 @@ publish = false\n \n [lib]\n doctest = false\n-proc-macro = true\n+\n+[build-dependencies]\n+proc_macro_test_impl = { path = \"imp\", version = \"0.0.0\" }\n+toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n+cargo_metadata = \"0.13\""}, {"sha": "4653a93dde1c0835075b302b429264a4765a9119", "filename": "crates/proc_macro_test/build.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2Fbuild.rs?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -0,0 +1,48 @@\n+//! This will build the proc macro in `imp`, and copy the resulting dylib artifact into the\n+//! `OUT_DIR`.\n+//!\n+//! `proc_macro_test` itself contains only a path to that artifact.\n+\n+use std::{\n+    env, fs,\n+    path::{Path, PathBuf},\n+    process::Command,\n+};\n+\n+use cargo_metadata::Message;\n+\n+fn main() {\n+    let out_dir = env::var_os(\"OUT_DIR\").unwrap();\n+    let out_dir = Path::new(&out_dir);\n+\n+    let name = \"proc_macro_test_impl\";\n+    let version = \"0.0.0\";\n+    let output = Command::new(toolchain::cargo())\n+        .current_dir(\"imp\")\n+        .args(&[\"build\", \"-p\", \"proc_macro_test_impl\", \"--message-format\", \"json\"])\n+        .output()\n+        .unwrap();\n+    assert!(output.status.success());\n+\n+    let mut artifact_path = None;\n+    for message in Message::parse_stream(output.stdout.as_slice()) {\n+        match message.unwrap() {\n+            Message::CompilerArtifact(artifact) => {\n+                if artifact.target.kind.contains(&\"proc-macro\".to_string()) {\n+                    let repr = format!(\"{} {}\", name, version);\n+                    if artifact.package_id.repr.starts_with(&repr) {\n+                        artifact_path = Some(PathBuf::from(&artifact.filenames[0]));\n+                    }\n+                }\n+            }\n+            _ => (), // Unknown message\n+        }\n+    }\n+\n+    let src_path = artifact_path.expect(\"no dylib for proc_macro_test_impl found\");\n+    let dest_path = out_dir.join(src_path.file_name().unwrap());\n+    fs::copy(src_path, &dest_path).unwrap();\n+\n+    let info_path = out_dir.join(\"proc_macro_test_location.txt\");\n+    fs::write(info_path, dest_path.to_str().unwrap()).unwrap();\n+}"}, {"sha": "2c96eb1b6517f2617f9ddeae9f07f5fd7bd7ddef", "filename": "crates/proc_macro_test/imp/.gitignore", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fimp%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fimp%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2Fimp%2F.gitignore?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -0,0 +1,2 @@\n+target/\n+Cargo.lock"}, {"sha": "1c2e754017534975466d1a5035ea3195be284212", "filename": "crates/proc_macro_test/imp/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fimp%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fimp%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2Fimp%2FCargo.toml?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+name = \"proc_macro_test_impl\"\n+version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n+publish = false\n+\n+[lib]\n+doctest = false\n+proc-macro = true\n+\n+[workspace]\n+\n+[dependencies]\n+# this crate should not have any dependencies, since it uses its own workspace,\n+# and its own `Cargo.lock`"}, {"sha": "4b26d2472116cc2bbdb2d93d790fc90796113f8f", "filename": "crates/proc_macro_test/imp/src/lib.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fimp%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fimp%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2Fimp%2Fsrc%2Flib.rs?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -0,0 +1,48 @@\n+//! Exports a few trivial procedural macros for testing.\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn fn_like_noop(args: TokenStream) -> TokenStream {\n+    args\n+}\n+\n+#[proc_macro]\n+pub fn fn_like_panic(args: TokenStream) -> TokenStream {\n+    panic!(\"fn_like_panic!({})\", args);\n+}\n+\n+#[proc_macro]\n+pub fn fn_like_error(args: TokenStream) -> TokenStream {\n+    format!(\"compile_error!(\\\"fn_like_error!({})\\\");\", args).parse().unwrap()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn attr_noop(_args: TokenStream, item: TokenStream) -> TokenStream {\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn attr_panic(args: TokenStream, item: TokenStream) -> TokenStream {\n+    panic!(\"#[attr_panic {}] {}\", args, item);\n+}\n+\n+#[proc_macro_attribute]\n+pub fn attr_error(args: TokenStream, item: TokenStream) -> TokenStream {\n+    format!(\"compile_error!(\\\"#[attr_error({})] {}\\\");\", args, item).parse().unwrap()\n+}\n+\n+#[proc_macro_derive(DeriveEmpty)]\n+pub fn derive_empty(_item: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}\n+\n+#[proc_macro_derive(DerivePanic)]\n+pub fn derive_panic(item: TokenStream) -> TokenStream {\n+    panic!(\"#[derive(DerivePanic)] {}\", item);\n+}\n+\n+#[proc_macro_derive(DeriveError)]\n+pub fn derive_error(item: TokenStream) -> TokenStream {\n+    format!(\"compile_error!(\\\"#[derive(DeriveError)] {}\\\");\", item).parse().unwrap()\n+}"}, {"sha": "2edf23a63440377ee978c2868ffa2eddd8b7c842", "filename": "crates/proc_macro_test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050232a37e71ec06e8810af29178b124c76a527d/crates%2Fproc_macro_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2Fsrc%2Flib.rs?ref=050232a37e71ec06e8810af29178b124c76a527d", "patch": "@@ -1,48 +1,4 @@\n //! Exports a few trivial procedural macros for testing.\n \n-use proc_macro::TokenStream;\n-\n-#[proc_macro]\n-pub fn fn_like_noop(args: TokenStream) -> TokenStream {\n-    args\n-}\n-\n-#[proc_macro]\n-pub fn fn_like_panic(args: TokenStream) -> TokenStream {\n-    panic!(\"fn_like_panic!({})\", args);\n-}\n-\n-#[proc_macro]\n-pub fn fn_like_error(args: TokenStream) -> TokenStream {\n-    format!(\"compile_error!(\\\"fn_like_error!({})\\\");\", args).parse().unwrap()\n-}\n-\n-#[proc_macro_attribute]\n-pub fn attr_noop(_args: TokenStream, item: TokenStream) -> TokenStream {\n-    item\n-}\n-\n-#[proc_macro_attribute]\n-pub fn attr_panic(args: TokenStream, item: TokenStream) -> TokenStream {\n-    panic!(\"#[attr_panic {}] {}\", args, item);\n-}\n-\n-#[proc_macro_attribute]\n-pub fn attr_error(args: TokenStream, item: TokenStream) -> TokenStream {\n-    format!(\"compile_error!(\\\"#[attr_error({})] {}\\\");\", args, item).parse().unwrap()\n-}\n-\n-#[proc_macro_derive(DeriveEmpty)]\n-pub fn derive_empty(_item: TokenStream) -> TokenStream {\n-    TokenStream::new()\n-}\n-\n-#[proc_macro_derive(DerivePanic)]\n-pub fn derive_panic(item: TokenStream) -> TokenStream {\n-    panic!(\"#[derive(DerivePanic)] {}\", item);\n-}\n-\n-#[proc_macro_derive(DeriveError)]\n-pub fn derive_error(item: TokenStream) -> TokenStream {\n-    format!(\"compile_error!(\\\"#[derive(DeriveError)] {}\\\");\", item).parse().unwrap()\n-}\n+pub static PROC_MACRO_TEST_LOCATION: &str =\n+    include_str!(concat!(env!(\"OUT_DIR\"), \"/proc_macro_test_location.txt\"));"}]}