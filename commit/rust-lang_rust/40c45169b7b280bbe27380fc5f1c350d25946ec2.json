{"sha": "40c45169b7b280bbe27380fc5f1c350d25946ec2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYzQ1MTY5YjdiMjgwYmJlMjczODBmYzVmMWMzNTBkMjU5NDZlYzI=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-08-18T15:53:07Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-08-18T18:23:27Z"}, "message": "Refactor BitV internals to not use macro, reduce duplication", "tree": {"sha": "ad645c7cbb0a3a814368cfe5f03439ad1ca723a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad645c7cbb0a3a814368cfe5f03439ad1ca723a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40c45169b7b280bbe27380fc5f1c350d25946ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40c45169b7b280bbe27380fc5f1c350d25946ec2", "html_url": "https://github.com/rust-lang/rust/commit/40c45169b7b280bbe27380fc5f1c350d25946ec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40c45169b7b280bbe27380fc5f1c350d25946ec2/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c9bdda89b93bcb4c3b0ffb1b91b9c73318c5304", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9bdda89b93bcb4c3b0ffb1b91b9c73318c5304", "html_url": "https://github.com/rust-lang/rust/commit/8c9bdda89b93bcb4c3b0ffb1b91b9c73318c5304"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "800f9832226fdbfb07e6efe3cbfc28f00ef368df", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/40c45169b7b280bbe27380fc5f1c350d25946ec2/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c45169b7b280bbe27380fc5f1c350d25946ec2/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=40c45169b7b280bbe27380fc5f1c350d25946ec2", "patch": "@@ -66,7 +66,7 @@ use core::prelude::*;\n use core::cmp;\n use core::default::Default;\n use core::fmt;\n-use core::iter::Take;\n+use core::iter::{Chain, Enumerate, Repeat, Skip, Take};\n use core::iter;\n use core::ops::Index;\n use core::slice;\n@@ -76,25 +76,22 @@ use std::hash;\n use {Collection, Mutable, Set, MutableSet, MutableSeq};\n use vec::Vec;\n \n+type MatchWords<'a> = Chain<MaskWords<'a>, Skip<Take<Enumerate<Repeat<uint>>>>>;\n // Take two BitV's, and return iterators of their words, where the shorter one\n // has been padded with 0's\n-macro_rules! match_words(\n-    ($a_expr:expr, $b_expr:expr) => ({\n-        let a = $a_expr;\n-        let b = $b_expr;\n-        let a_len = a.storage.len();\n-        let b_len = b.storage.len();\n-\n-        // have to uselessly pretend to pad the longer one for type matching\n-        if a_len < b_len {\n-            (a.mask_words(0).chain(iter::Repeat::new(0u).enumerate().take(b_len).skip(a_len)),\n-             b.mask_words(0).chain(iter::Repeat::new(0u).enumerate().take(0).skip(0)))\n-        } else {\n-            (a.mask_words(0).chain(iter::Repeat::new(0u).enumerate().take(0).skip(0)),\n-             b.mask_words(0).chain(iter::Repeat::new(0u).enumerate().take(a_len).skip(b_len)))\n-        }\n-    })\n-)\n+fn match_words <'a,'b>(a: &'a Bitv, b: &'b Bitv) -> (MatchWords<'a>, MatchWords<'b>) {\n+    let a_len = a.storage.len();\n+    let b_len = b.storage.len();\n+\n+    // have to uselessly pretend to pad the longer one for type matching\n+    if a_len < b_len {\n+        (a.mask_words(0).chain(Repeat::new(0u).enumerate().take(b_len).skip(a_len)),\n+         b.mask_words(0).chain(Repeat::new(0u).enumerate().take(0).skip(0)))\n+    } else {\n+        (a.mask_words(0).chain(Repeat::new(0u).enumerate().take(0).skip(0)),\n+         b.mask_words(0).chain(Repeat::new(0u).enumerate().take(a_len).skip(b_len)))\n+    }\n+}\n \n static TRUE: bool = true;\n static FALSE: bool = false;\n@@ -1015,23 +1012,23 @@ impl Extendable<bool> for BitvSet {\n impl PartialOrd for BitvSet {\n     #[inline]\n     fn partial_cmp(&self, other: &BitvSet) -> Option<Ordering> {\n-        let (a_iter, b_iter) = match_words!(self.get_ref(), other.get_ref());\n+        let (a_iter, b_iter) = match_words(self.get_ref(), other.get_ref());\n         iter::order::partial_cmp(a_iter, b_iter)\n     }\n }\n \n impl Ord for BitvSet {\n     #[inline]\n     fn cmp(&self, other: &BitvSet) -> Ordering {\n-        let (a_iter, b_iter) = match_words!(self.get_ref(), other.get_ref());\n+        let (a_iter, b_iter) = match_words(self.get_ref(), other.get_ref());\n         iter::order::cmp(a_iter, b_iter)\n     }\n }\n \n impl cmp::PartialEq for BitvSet {\n     #[inline]\n     fn eq(&self, other: &BitvSet) -> bool {\n-        let (a_iter, b_iter) = match_words!(self.get_ref(), other.get_ref());\n+        let (a_iter, b_iter) = match_words(self.get_ref(), other.get_ref());\n         iter::order::eq(a_iter, b_iter)\n     }\n }\n@@ -1192,10 +1189,10 @@ impl BitvSet {\n         self_bitv.reserve(other_bitv.capacity());\n \n         // virtually pad other with 0's for equal lengths\n-        let self_len = self_bitv.storage.len();\n-        let other_len =  other_bitv.storage.len();\n-        let mut other_words = other_bitv.mask_words(0)\n-         .chain(iter::Repeat::new(0u).enumerate().take(self_len).skip(other_len));\n+        let mut other_words = {\n+            let (_, result) = match_words(self_bitv, other_bitv);\n+            result\n+        };\n \n         // Apply values found in other\n         for (i, w) in other_words {"}]}