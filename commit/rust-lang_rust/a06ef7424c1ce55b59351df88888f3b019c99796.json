{"sha": "a06ef7424c1ce55b59351df88888f3b019c99796", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNmVmNzQyNGMxY2U1NWI1OTM1MWRmODg4ODhmM2IwMTljOTk3OTY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-01T06:58:35Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-03T20:55:09Z"}, "message": "cat modernization (cleanup of a run-pass test)", "tree": {"sha": "0bb62ff39604308f3c7280f2f1047c97cb6ecc79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bb62ff39604308f3c7280f2f1047c97cb6ecc79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a06ef7424c1ce55b59351df88888f3b019c99796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a06ef7424c1ce55b59351df88888f3b019c99796", "html_url": "https://github.com/rust-lang/rust/commit/a06ef7424c1ce55b59351df88888f3b019c99796", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a06ef7424c1ce55b59351df88888f3b019c99796/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a75aefad0e43e129fcba5e6c38fc9bbc620b952", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a75aefad0e43e129fcba5e6c38fc9bbc620b952", "html_url": "https://github.com/rust-lang/rust/commit/0a75aefad0e43e129fcba5e6c38fc9bbc620b952"}], "stats": {"total": 181, "additions": 84, "deletions": 97}, "files": [{"sha": "b7c8322316f5a717bcc78585b548b4625d4a6b5e", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 84, "deletions": 97, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/a06ef7424c1ce55b59351df88888f3b019c99796/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06ef7424c1ce55b59351df88888f3b019c99796/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=a06ef7424c1ce55b59351df88888f3b019c99796", "patch": "@@ -9,10 +9,8 @@\n // except according to those terms.\n \n // xfail-fast\n-#[legacy_modes];\n \n-extern mod std;\n-use std::map::*;\n+use core::container::{Container, Mutable, Map};\n \n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n@@ -28,121 +26,110 @@ impl cat_type : cmp::Eq {\n \n // ok: T should be in scope when resolving the trait ref for map\n struct cat<T> {\n-  // Yes, you can have negative meows\n-  priv mut meows : int,\n+    // Yes, you can have negative meows\n+    priv mut meows : int,\n \n-  mut how_hungry : int,\n-  name : T,\n+    mut how_hungry : int,\n+    name : T,\n }\n \n-impl<T: Copy> cat<T> {\n-  fn speak() { self.meow(); }\n-\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n-    }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n+impl<T> cat<T> {\n+    fn speak(&mut self) { self.meow(); }\n+\n+    fn eat(&mut self) -> bool {\n+        if self.how_hungry > 0 {\n+            error!(\"OM NOM NOM\");\n+            self.how_hungry -= 2;\n+            return true;\n+        } else {\n+            error!(\"Not hungry!\");\n+            return false;\n+        }\n     }\n-  }\n }\n \n-impl<T: Copy> cat<T> : StdMap<int, T> {\n-  pure fn size() -> uint { self.meows as uint }\n-  fn insert(+k: int, +_v: T) -> bool {\n-    self.meows += k;\n-    true\n-  }\n-  pure fn contains_key(+k: int) -> bool { k <= self.meows }\n-  pure fn contains_key_ref(k: &int) -> bool { self.contains_key(*k) }\n-\n-  pure fn get(+k:int) -> T { match self.find(k) {\n-      Some(v) => { v }\n-      None    => { die!(~\"epic fail\"); }\n-    }\n-  }\n-  pure fn find(+k:int) -> Option<T> { if k <= self.meows {\n-        Some(self.name)\n-     }\n-     else { None }\n-  }\n-\n-  fn update_with_key(+key: int, +val: T, ff: fn(+k: int, +v0: T, +v1: T) -> T) -> bool {\n-    match self.find(key) {\n-      None            => return self.insert(key, val),\n-      Some(copy orig) => return self.insert(key, ff(key, orig, val))\n-    }\n-  }\n+impl<T> cat<T>: Container {\n+    pure fn len(&self) -> uint { self.meows as uint }\n+    pure fn is_empty(&self) -> bool { self.meows == 0 }\n+}\n \n-  fn update(+key: int, +val: T, ff: fn(+v0: T, +v1: T) -> T) -> bool {\n-    match self.find(key) {\n-      None            => return self.insert(key, val),\n-      Some(copy orig) => return self.insert(key, ff(orig, val))\n-    }\n-  }\n+impl<T> cat<T>: Mutable {\n+    fn clear(&mut self) {}\n+}\n \n+impl<T> cat<T>: Map<int, T> {\n+    pure fn contains_key(&self, k: &int) -> bool { *k <= self.meows }\n \n-  fn remove(+k:int) -> bool {\n-    match self.find(k) {\n-      Some(x) => {\n-        self.meows -= k; true\n-      }\n-      None => { false }\n+    pure fn each(&self, f: fn(v: &int, v: &T) -> bool) {\n+        let mut n = int::abs(self.meows);\n+        while n > 0 {\n+            if !f(&n, &self.name) { break; }\n+            n -= 1;\n+        }\n     }\n-  }\n \n-  pure fn each(f: fn(+v: int, +v: T) -> bool) {\n-    let mut n = int::abs(self.meows);\n-    while n > 0 {\n-        if !f(n, self.name) { break; }\n-        n -= 1;\n+    pure fn each_key(&self, f: fn(v: &int) -> bool) {\n+        for self.each |k, _| { if !f(k) { break; } loop;};\n     }\n-  }\n \n-  pure fn each_key(&&f: fn(+v: int) -> bool) {\n-    for self.each |k, _v| { if !f(k) { break; } loop;};\n-  }\n-  pure fn each_value(&&f: fn(+v: T) -> bool) {\n-    for self.each |_k, v| { if !f(v) { break; } loop;};\n-  }\n+    pure fn each_value(&self, f: fn(v: &T) -> bool) {\n+        for self.each |_, v| { if !f(v) { break; } loop;};\n+    }\n+\n+    fn insert(&mut self, k: int, _: T) -> bool {\n+        self.meows += k;\n+        true\n+    }\n \n-  pure fn each_ref(f: fn(k: &int, v: &T) -> bool) {}\n-  pure fn each_key_ref(f: fn(k: &int) -> bool) {}\n-  pure fn each_value_ref(f: fn(k: &T) -> bool) {}\n+    pure fn find(&self, k: &int) -> Option<&self/T> {\n+        if *k <= self.meows {\n+            Some(&self.name)\n+        } else {\n+            None\n+        }\n+    }\n \n-  fn clear() { }\n+    fn remove(&mut self, k: &int) -> bool {\n+        match self.find(k) {\n+          Some(_) => {\n+              self.meows -= *k; true\n+          }\n+          None => { false }\n+        }\n+    }\n }\n \n-priv impl<T: Copy> cat<T> {\n-    fn meow() {\n-      self.meows += 1;\n-      error!(\"Meow %d\", self.meows);\n-      if self.meows % 5 == 0 {\n-          self.how_hungry += 1;\n-      }\n+impl<T> cat<T> {\n+    pure fn get(&self, k: &int) -> &self/T {\n+        match self.find(k) {\n+          Some(v) => { v }\n+          None    => { die!(~\"epic fail\"); }\n+        }\n+    }\n+\n+    static pure fn new(in_x: int, in_y: int, in_name: T) -> cat<T> {\n+        cat{meows: in_x, how_hungry: in_y, name: in_name }\n     }\n }\n \n-fn cat<T: Copy>(in_x : int, in_y : int, in_name: T) -> cat<T> {\n-    cat {\n-        meows: in_x,\n-        how_hungry: in_y,\n-        name: in_name\n+priv impl<T> cat<T> {\n+    fn meow(&mut self) {\n+        self.meows += 1;\n+        error!(\"Meow %d\", self.meows);\n+        if self.meows % 5 == 0 {\n+            self.how_hungry += 1;\n+        }\n     }\n }\n \n-pub fn main() {\n-  let nyan : cat<~str> = cat(0, 2, ~\"nyan\");\n-  for uint::range(1u, 5u) |_i| { nyan.speak(); }\n-  assert(nyan.find(1) == Some(~\"nyan\"));\n-  assert(nyan.find(10) == None);\n-  let spotty : cat<cat_type> = cat(2, 57, tuxedo);\n-  for uint::range(0u, 6u) |_i| { spotty.speak(); }\n-  assert(spotty.size() == 8u);\n-  assert(spotty.contains_key(2));\n-  assert(spotty.get(3) == tuxedo);\n+fn main() {\n+    let mut nyan: cat<~str> = cat::new(0, 2, ~\"nyan\");\n+    for uint::range(1, 5) |_| { nyan.speak(); }\n+    assert(*nyan.find(&1).unwrap() == ~\"nyan\");\n+    assert(nyan.find(&10) == None);\n+    let mut spotty: cat<cat_type> = cat::new(2, 57, tuxedo);\n+    for uint::range(0, 6) |_| { spotty.speak(); }\n+    assert(spotty.len() == 8);\n+    assert(spotty.contains_key(&2));\n+    assert(spotty.get(&3) == &tuxedo);\n }"}]}