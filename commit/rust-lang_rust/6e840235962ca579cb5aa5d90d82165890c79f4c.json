{"sha": "6e840235962ca579cb5aa5d90d82165890c79f4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlODQwMjM1OTYyY2E1NzljYjVhYTVkOTBkODIxNjU4OTBjNzlmNGM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-14T08:28:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-14T15:48:13Z"}, "message": "Removed the obsolete ast::CallSugar (previously used by `do`).", "tree": {"sha": "bf38cb0a7dae7e8d7e274128f3276bce3c039d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf38cb0a7dae7e8d7e274128f3276bce3c039d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e840235962ca579cb5aa5d90d82165890c79f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e840235962ca579cb5aa5d90d82165890c79f4c", "html_url": "https://github.com/rust-lang/rust/commit/6e840235962ca579cb5aa5d90d82165890c79f4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e840235962ca579cb5aa5d90d82165890c79f4c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ea23e15dab673a3016d21b601234b296e59e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ea23e15dab673a3016d21b601234b296e59e57", "html_url": "https://github.com/rust-lang/rust/commit/07ea23e15dab673a3016d21b601234b296e59e57"}], "stats": {"total": 225, "additions": 79, "deletions": 146}, "files": [{"sha": "590229a6652a29a6a8ca29a38e928783ea724d56", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -831,10 +831,10 @@ fn check_loans_in_expr<'a>(this: &mut CheckLoanCtxt<'a>,\n       ast::ExprAssignOp(_, _, dest, _) => {\n         this.check_assignment(dest);\n       }\n-      ast::ExprCall(f, ref args, _) => {\n+      ast::ExprCall(f, ref args) => {\n         this.check_call(expr, Some(f), f.id, f.span, *args);\n       }\n-      ast::ExprMethodCall(callee_id, _, _, ref args, _) => {\n+      ast::ExprMethodCall(callee_id, _, _, ref args) => {\n         this.check_call(expr, None, callee_id, expr.span, *args);\n       }\n       ast::ExprIndex(callee_id, _, rval) |"}, {"sha": "6ca779906e2d17670ab17c413d234e7c1bb278bf", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -351,11 +351,11 @@ impl CFGBuilder {\n                 self.straightline(expr, pred, *elems)\n             }\n \n-            ast::ExprCall(func, ref args, _) => {\n+            ast::ExprCall(func, ref args) => {\n                 self.call(expr, pred, func, *args)\n             }\n \n-            ast::ExprMethodCall(_, _, _, ref args, _) => {\n+            ast::ExprMethodCall(_, _, _, ref args) => {\n                 self.call(expr, pred, args[0], args.slice_from(1))\n             }\n "}, {"sha": "75337a27a6c4fc9da41da7885bf6cf3330ec7eb4", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -160,7 +160,7 @@ pub fn check_expr(v: &mut CheckCrateVisitor,\n               }\n             }\n           }\n-          ExprCall(callee, _, NoSugar) => {\n+          ExprCall(callee, _) => {\n             let def_map = def_map.borrow();\n             match def_map.get().find(&callee.id) {\n                 Some(&DefStruct(..)) => {}    // OK."}, {"sha": "60d83d7559e03a0d78bd65329167baf53dea2de2", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -577,12 +577,12 @@ impl<'a, O:DataFlowOperator> PropagationContext<'a, O> {\n                 self.walk_opt_expr(with_expr, in_out, loop_scopes);\n             }\n \n-            ast::ExprCall(f, ref args, _) => {\n+            ast::ExprCall(f, ref args) => {\n                 self.walk_expr(f, in_out, loop_scopes);\n                 self.walk_call(f.id, expr.id, *args, in_out, loop_scopes);\n             }\n \n-            ast::ExprMethodCall(callee_id, _, _, ref args, _) => {\n+            ast::ExprMethodCall(callee_id, _, _, ref args) => {\n                 self.walk_call(callee_id, expr.id, *args, in_out, loop_scopes);\n             }\n "}, {"sha": "2a40c8148fd6db24e5d0fcaa0bf322f3203273cf", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -120,7 +120,7 @@ impl Visitor<()> for EffectCheckVisitor {\n \n     fn visit_expr(&mut self, expr: &ast::Expr, _:()) {\n         match expr.node {\n-            ast::ExprMethodCall(callee_id, _, _, _, _) => {\n+            ast::ExprMethodCall(callee_id, _, _, _) => {\n                 let base_type = ty::node_id_to_type(self.tcx, callee_id);\n                 debug!(\"effect: method call case, base type is {}\",\n                        ppaux::ty_to_str(self.tcx, base_type));\n@@ -129,7 +129,7 @@ impl Visitor<()> for EffectCheckVisitor {\n                                         \"invocation of unsafe method\")\n                 }\n             }\n-            ast::ExprCall(base, _, _) => {\n+            ast::ExprCall(base, _) => {\n                 let base_type = ty::node_id_to_type(self.tcx, base.id);\n                 debug!(\"effect: call case, base type is {}\",\n                        ppaux::ty_to_str(self.tcx, base_type));"}, {"sha": "70b5aab4c934ab011bdacd3978c4a6424c23b77c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -1205,7 +1205,7 @@ impl Liveness {\n             })\n           }\n \n-          ExprCall(f, ref args, _) => {\n+          ExprCall(f, ref args) => {\n             // calling a fn with bot return type means that the fn\n             // will fail, and hence the successors can be ignored\n             let t_ret = ty::ty_fn_ret(ty::expr_ty(self.tcx, f));\n@@ -1215,7 +1215,7 @@ impl Liveness {\n             self.propagate_through_expr(f, succ)\n           }\n \n-          ExprMethodCall(callee_id, _, _, ref args, _) => {\n+          ExprMethodCall(callee_id, _, _, ref args) => {\n             // calling a method with bot return type means that the method\n             // will fail, and hence the successors can be ignored\n             let t_ret = ty::ty_fn_ret(ty::node_id_to_type(self.tcx, callee_id));"}, {"sha": "32cb7ca57dae7d6d4d87785ec6c584e91998a84a", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -382,7 +382,7 @@ impl VisitContext {\n                 }\n             }\n \n-            ExprCall(callee, ref args, _) => {    // callee(args)\n+            ExprCall(callee, ref args) => {    // callee(args)\n                 // Figure out whether the called function is consumed.\n                 let mode = match ty::get(ty::expr_ty(self.tcx, callee)).sty {\n                     ty::ty_closure(ref cty) => {\n@@ -412,7 +412,7 @@ impl VisitContext {\n                 self.use_fn_args(callee.id, *args);\n             }\n \n-            ExprMethodCall(callee_id, _, _, ref args, _) => { // callee.m(args)\n+            ExprMethodCall(callee_id, _, _, ref args) => { // callee.m(args)\n                 self.use_fn_args(callee_id, *args);\n             }\n "}, {"sha": "8c5654d3fcecb0b8a8aec4c018ce7bcb8e7341ac", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -705,7 +705,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                     _ => {}\n                 }\n             }\n-            ast::ExprMethodCall(_, ident, _, ref args, _) => {\n+            ast::ExprMethodCall(_, ident, _, ref args) => {\n                 // see above\n                 let t = ty::type_autoderef(ty::expr_ty(self.tcx, args[0]));\n                 match ty::get(t).sty {"}, {"sha": "cb9e772dcea08dcaeac4119ac18e649f43d3cc91", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -5221,7 +5221,7 @@ impl Resolver {\n                 let traits = self.search_for_traits_containing_method(ident);\n                 self.trait_map.insert(expr.id, @RefCell::new(traits));\n             }\n-            ExprMethodCall(_, ident, _, _, _) => {\n+            ExprMethodCall(_, ident, _, _) => {\n                 debug!(\"(recording candidate traits for expr) recording \\\n                         traits for {}\",\n                        expr.id);"}, {"sha": "68be851449a9a8bd47f8089decb04714114cea38", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -647,7 +647,7 @@ fn const_expr_unadjusted(cx: @CrateContext, e: &ast::Expr,\n                 }\n             }\n           }\n-          ast::ExprCall(callee, ref args, _) => {\n+          ast::ExprCall(callee, ref args) => {\n               let tcx = cx.tcx;\n               let opt_def = {\n                   let def_map = tcx.def_map.borrow();"}, {"sha": "86f4275cf985700a3ed7c8ff67f64619d1eadd64", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -2624,15 +2624,15 @@ fn populate_scope_map(cx: &CrateContext,\n                 })\n             }\n \n-            ast::ExprCall(fn_exp, ref args, _) => {\n+            ast::ExprCall(fn_exp, ref args) => {\n                 walk_expr(cx, fn_exp, scope_stack, scope_map);\n \n                 for arg_exp in args.iter() {\n                     walk_expr(cx, *arg_exp, scope_stack, scope_map);\n                 }\n             }\n \n-            ast::ExprMethodCall(node_id, _, _, ref args, _) => {\n+            ast::ExprMethodCall(node_id, _, _, ref args) => {\n                 scope_map.insert(node_id, scope_stack.last().unwrap().scope_metadata);\n \n                 for arg_exp in args.iter() {"}, {"sha": "794964e10540446af369ee3cd9d4e3e4b670c193", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -777,11 +777,11 @@ fn trans_rvalue_dps_unadjusted<'a>(bcx: &'a Block<'a>,\n                    expr_to_str(expr), expr_ty.repr(tcx));\n             closure::trans_expr_fn(bcx, sigil, decl, body, expr.id, dest)\n         }\n-        ast::ExprCall(f, ref args, _) => {\n+        ast::ExprCall(f, ref args) => {\n             callee::trans_call(bcx, expr, f,\n                                callee::ArgExprs(*args), expr.id, dest)\n         }\n-        ast::ExprMethodCall(callee_id, _, _, ref args, _) => {\n+        ast::ExprMethodCall(callee_id, _, _, ref args) => {\n             callee::trans_method_call(bcx, expr, callee_id, args[0],\n                                       callee::ArgExprs(*args), dest)\n         }"}, {"sha": "177eba5aa1b1ad0f9a116f6a03a8a2ef9deeea4c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 21, "deletions": 48, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -1592,22 +1592,20 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         method_fn_ty: ty::t,\n         callee_expr: &ast::Expr,\n         args: &[@ast::Expr],\n-        sugar: ast::CallSugar,\n-        deref_args: DerefArgs) -> ty::t\n-    {\n+        deref_args: DerefArgs) -> ty::t {\n         // HACK(eddyb) ignore provided self (it has special typeck rules).\n         let args = args.slice_from(1);\n         if ty::type_is_error(method_fn_ty) {\n             let err_inputs = err_args(args.len());\n             check_argument_types(fcx, sp, err_inputs, callee_expr,\n-                                 args, sugar, deref_args, false);\n+                                 args, deref_args, false);\n             method_fn_ty\n         } else {\n             match ty::get(method_fn_ty).sty {\n                 ty::ty_bare_fn(ref fty) => {\n                     // HACK(eddyb) ignore self in the definition (see above).\n                     check_argument_types(fcx, sp, fty.sig.inputs.slice_from(1),\n-                                         callee_expr, args, sugar, deref_args,\n+                                         callee_expr, args, deref_args,\n                                          fty.sig.variadic);\n                     fty.sig.output\n                 }\n@@ -1625,7 +1623,6 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                             fn_inputs: &[ty::t],\n                             callee_expr: &ast::Expr,\n                             args: &[@ast::Expr],\n-                            sugar: ast::CallSugar,\n                             deref_args: DerefArgs,\n                             variadic: bool) {\n         /*!\n@@ -1659,18 +1656,12 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                 err_args(supplied_arg_count)\n             }\n         } else {\n-            let suffix = match sugar {\n-                ast::NoSugar => \"\",\n-                ast::ForSugar => \" (including the closure passed by \\\n-                                  the `for` keyword)\"\n-            };\n             let msg = format!(\n                 \"this function takes {} parameter{} \\\n-                 but {} parameter{} supplied{}\",\n+                 but {} parameter{} supplied\",\n                  expected_arg_count, if expected_arg_count == 1 {\"\"} else {\"s\"},\n                  supplied_arg_count,\n-                 if supplied_arg_count == 1 {\" was\"} else {\"s were\"},\n-                 suffix);\n+                 if supplied_arg_count == 1 {\" was\"} else {\"s were\"});\n \n             tcx.sess.span_err(sp, msg);\n \n@@ -1783,33 +1774,16 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         // The callee checks for bot / err, we don't need to\n     }\n \n-    fn write_call(fcx: @FnCtxt,\n-                  call_expr: &ast::Expr,\n-                  output: ty::t,\n-                  sugar: ast::CallSugar) {\n-        let ret_ty = match sugar {\n-            ast::ForSugar => {\n-                match ty::get(output).sty {\n-                    ty::ty_bool => {}\n-                    _ => fcx.type_error_message(call_expr.span, |actual| {\n-                            format!(\"expected `for` closure to return `bool`, \\\n-                                  but found `{}`\", actual) },\n-                            output, None)\n-                }\n-                ty::mk_nil()\n-            }\n-            _ => output\n-        };\n-        fcx.write_ty(call_expr.id, ret_ty);\n+    fn write_call(fcx: @FnCtxt, call_expr: &ast::Expr, output: ty::t) {\n+        fcx.write_ty(call_expr.id, output);\n     }\n \n     // A generic function for doing all of the checking for call expressions\n     fn check_call(fcx: @FnCtxt,\n                   callee_id: ast::NodeId,\n                   call_expr: &ast::Expr,\n                   f: &ast::Expr,\n-                  args: &[@ast::Expr],\n-                  sugar: ast::CallSugar) {\n+                  args: &[@ast::Expr]) {\n         // Index expressions need to be handled separately, to inform them\n         // that they appear in call position.\n         check_expr(fcx, f);\n@@ -1857,9 +1831,9 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n \n         // Call the generic checker.\n         check_argument_types(fcx, call_expr.span, fn_sig.inputs, f,\n-                             args, sugar, DontDerefArgs, fn_sig.variadic);\n+                             args, DontDerefArgs, fn_sig.variadic);\n \n-        write_call(fcx, call_expr, fn_sig.output, sugar);\n+        write_call(fcx, call_expr, fn_sig.output);\n     }\n \n     // Checks a method call.\n@@ -1868,8 +1842,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                          expr: &ast::Expr,\n                          method_name: ast::Ident,\n                          args: &[@ast::Expr],\n-                         tps: &[ast::P<ast::Ty>],\n-                         sugar: ast::CallSugar) {\n+                         tps: &[ast::P<ast::Ty>]) {\n         let rcvr = args[0];\n         check_expr(fcx, rcvr);\n \n@@ -1915,10 +1888,10 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         // Call the generic checker.\n         let fn_ty = fcx.node_ty(callee_id);\n         let ret_ty = check_method_argument_types(fcx, expr.span,\n-                                                 fn_ty, expr, args, sugar,\n+                                                 fn_ty, expr, args,\n                                                  DontDerefArgs);\n \n-        write_call(fcx, expr, ret_ty, sugar);\n+        write_call(fcx, expr, ret_ty);\n     }\n \n     // A generic function for checking the then and else in an if\n@@ -1985,17 +1958,17 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                     method_map.get().insert(op_ex.id, *origin);\n                 }\n                 check_method_argument_types(fcx, op_ex.span,\n-                                            method_ty, op_ex, args,\n-                                            ast::NoSugar, deref_args)\n+                                            method_ty, op_ex,\n+                                            args, deref_args)\n             }\n             _ => {\n                 unbound_method();\n                 // Check the args anyway\n                 // so we get all the error messages\n                 let expected_ty = ty::mk_err();\n                 check_method_argument_types(fcx, op_ex.span,\n-                                            expected_ty, op_ex, args,\n-                                            ast::NoSugar, deref_args);\n+                                            expected_ty, op_ex,\n+                                            args, deref_args);\n                 ty::mk_err()\n             }\n         }\n@@ -2948,8 +2921,8 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         check_block_with_expected(fcx, b, expected);\n         fcx.write_ty(id, fcx.node_ty(b.id));\n       }\n-      ast::ExprCall(f, ref args, sugar) => {\n-          check_call(fcx, expr.id, expr, f, *args, sugar);\n+      ast::ExprCall(f, ref args) => {\n+          check_call(fcx, expr.id, expr, f, *args);\n           let f_ty = fcx.expr_ty(f);\n           let (args_bot, args_err) = args.iter().fold((false, false),\n              |(rest_bot, rest_err), a| {\n@@ -2964,8 +2937,8 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n               fcx.write_bot(id);\n           }\n       }\n-      ast::ExprMethodCall(callee_id, ident, ref tps, ref args, sugar) => {\n-        check_method_call(fcx, callee_id, expr, ident, *args, *tps, sugar);\n+      ast::ExprMethodCall(callee_id, ident, ref tps, ref args) => {\n+        check_method_call(fcx, callee_id, expr, ident, *args, *tps);\n         let arg_tys = args.map(|a| fcx.expr_ty(*a));\n         let (args_bot, args_err) = arg_tys.iter().fold((false, false),\n              |(rest_bot, rest_err), a| {"}, {"sha": "384007727780a36768fe87a1fef33ac62d63ed24", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -432,14 +432,14 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n     }\n \n     match expr.node {\n-        ast::ExprCall(callee, ref args, _) => {\n+        ast::ExprCall(callee, ref args) => {\n             constrain_callee(rcx, callee.id, expr, callee);\n             constrain_call(rcx, callee.id, expr, None, *args, false);\n \n             visit::walk_expr(rcx, expr, ());\n         }\n \n-        ast::ExprMethodCall(callee_id, _, _, ref args, _) => {\n+        ast::ExprMethodCall(callee_id, _, _, ref args) => {\n             constrain_call(rcx, callee_id, expr, Some(args[0]),\n                            args.slice_from(1), false);\n "}, {"sha": "721672ab677aca513af0f365888ea84814ea885f", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -702,7 +702,7 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: @FnCtxt, is_early: bool) {\n       ast::ExprUnary(callee_id, _, _) |\n       ast::ExprAssignOp(callee_id, _, _, _) |\n       ast::ExprIndex(callee_id, _, _) |\n-      ast::ExprMethodCall(callee_id, _, _, _, _) => {\n+      ast::ExprMethodCall(callee_id, _, _, _) => {\n         match ty::method_call_type_param_defs(cx.tcx, fcx.inh.method_map, ex.id) {\n           Some(type_param_defs) => {\n             debug!(\"vtable resolution on parameter bounds for method call {}\","}, {"sha": "c05afcf859af52b0dd765f71ebd8d7cd85580dd7", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -307,7 +307,7 @@ fn visit_expr(e: &ast::Expr, wbcx: &mut WbCtxt) {\n             maybe_resolve_type_vars_for_node(wbcx, e.span, callee_id);\n         }\n \n-        ast::ExprMethodCall(callee_id, _, _, _, _) => {\n+        ast::ExprMethodCall(callee_id, _, _, _) => {\n             // We must always have written in a callee ID type for these.\n             resolve_type_vars_for_node(wbcx, e.span, callee_id);\n         }"}, {"sha": "132cb396ddd392955c52a77589e7450725f4901e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -519,7 +519,7 @@ pub struct Expr {\n impl Expr {\n     pub fn get_callee_id(&self) -> Option<NodeId> {\n         match self.node {\n-            ExprMethodCall(callee_id, _, _, _, _) |\n+            ExprMethodCall(callee_id, _, _, _) |\n             ExprIndex(callee_id, _, _) |\n             ExprBinary(callee_id, _, _, _) |\n             ExprAssignOp(callee_id, _, _, _) |\n@@ -529,20 +529,14 @@ impl Expr {\n     }\n }\n \n-#[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n-pub enum CallSugar {\n-    NoSugar,\n-    ForSugar\n-}\n-\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum Expr_ {\n     ExprVstore(@Expr, ExprVstore),\n     // First expr is the place; second expr is the value.\n     ExprBox(@Expr, @Expr),\n     ExprVec(~[@Expr], Mutability),\n-    ExprCall(@Expr, ~[@Expr], CallSugar),\n-    ExprMethodCall(NodeId, Ident, ~[P<Ty>], ~[@Expr], CallSugar),\n+    ExprCall(@Expr, ~[@Expr]),\n+    ExprMethodCall(NodeId, Ident, ~[P<Ty>], ~[@Expr]),\n     ExprTup(~[@Expr]),\n     ExprBinary(NodeId, BinOp, @Expr, @Expr),\n     ExprUnary(NodeId, UnOp, @Expr),"}, {"sha": "d311a542ac689f4074a78cf06eb44c22d80f181a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -525,11 +525,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_call(&self, span: Span, expr: @ast::Expr, args: ~[@ast::Expr]) -> @ast::Expr {\n-        self.expr(span, ast::ExprCall(expr, args, ast::NoSugar))\n+        self.expr(span, ast::ExprCall(expr, args))\n     }\n     fn expr_call_ident(&self, span: Span, id: ast::Ident, args: ~[@ast::Expr]) -> @ast::Expr {\n-        self.expr(span,\n-                  ast::ExprCall(self.expr_ident(span, id), args, ast::NoSugar))\n+        self.expr(span, ast::ExprCall(self.expr_ident(span, id), args))\n     }\n     fn expr_call_global(&self, sp: Span, fn_path: ~[ast::Ident],\n                       args: ~[@ast::Expr]) -> @ast::Expr {\n@@ -541,7 +540,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                         ident: ast::Ident,\n                         mut args: ~[@ast::Expr]) -> @ast::Expr {\n         args.unshift(expr);\n-        self.expr(span, ast::ExprMethodCall(ast::DUMMY_NODE_ID, ident, ~[], args, ast::NoSugar))\n+        self.expr(span, ast::ExprMethodCall(ast::DUMMY_NODE_ID, ident, ~[], args))\n     }\n     fn expr_block(&self, b: P<ast::Block>) -> @ast::Expr {\n         self.expr(b.span, ast::ExprBlock(b))"}, {"sha": "e150d1685de24b570fe31243e5a5ca82fe6806c5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -727,19 +727,16 @@ pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n             ExprRepeat(folder.fold_expr(expr), folder.fold_expr(count), mutt)\n         }\n         ExprTup(ref elts) => ExprTup(elts.map(|x| folder.fold_expr(*x))),\n-        ExprCall(f, ref args, blk) => {\n+        ExprCall(f, ref args) => {\n             ExprCall(folder.fold_expr(f),\n-                     args.map(|&x| folder.fold_expr(x)),\n-                     blk)\n+                     args.map(|&x| folder.fold_expr(x)))\n         }\n-        ExprMethodCall(callee_id, i, ref tps, ref args, blk) => {\n+        ExprMethodCall(callee_id, i, ref tps, ref args) => {\n             ExprMethodCall(\n                 folder.new_id(callee_id),\n                 folder.fold_ident(i),\n                 tps.map(|&x| folder.fold_ty(x)),\n-                args.map(|&x| folder.fold_expr(x)),\n-                blk\n-            )\n+                args.map(|&x| folder.fold_expr(x)))\n         }\n         ExprBinary(callee_id, binop, lhs, rhs) => {\n             ExprBinary(folder.new_id(callee_id),"}, {"sha": "d6dcb956f25c6981df446abe4305ee96648d7109", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -23,15 +23,13 @@ use ast;\n // isn't parsed as (if true {...} else {...} | x) | 5\n pub fn expr_requires_semi_to_be_stmt(e: @ast::Expr) -> bool {\n     match e.node {\n-      ast::ExprIf(..)\n-      | ast::ExprMatch(..)\n-      | ast::ExprBlock(_)\n-      | ast::ExprWhile(..)\n-      | ast::ExprLoop(..)\n-      | ast::ExprForLoop(..)\n-      | ast::ExprCall(_, _, ast::ForSugar)\n-      | ast::ExprMethodCall(_, _, _, _, ast::ForSugar) => false,\n-      _ => true\n+        ast::ExprIf(..)\n+        | ast::ExprMatch(..)\n+        | ast::ExprBlock(_)\n+        | ast::ExprWhile(..)\n+        | ast::ExprLoop(..)\n+        | ast::ExprForLoop(..) => false,\n+        _ => true\n     }\n }\n "}, {"sha": "a02971ae8eaf287246c6ac04290fbe8b5ea62ae7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -13,7 +13,6 @@\n use abi;\n use abi::AbiSet;\n use ast::{Sigil, BorrowedSigil, ManagedSigil, OwnedSigil};\n-use ast::{CallSugar, NoSugar};\n use ast::{BareFnTy, ClosureTy};\n use ast::{RegionTyParamBound, TraitTyParamBound};\n use ast::{Provided, Public, Purity};\n@@ -1690,13 +1689,12 @@ impl Parser {\n         ExprBinary(ast::DUMMY_NODE_ID, binop, lhs, rhs)\n     }\n \n-    pub fn mk_call(&mut self, f: @Expr, args: ~[@Expr], sugar: CallSugar) -> ast::Expr_ {\n-        ExprCall(f, args, sugar)\n+    pub fn mk_call(&mut self, f: @Expr, args: ~[@Expr]) -> ast::Expr_ {\n+        ExprCall(f, args)\n     }\n \n-    fn mk_method_call(&mut self, ident: Ident, tps: ~[P<Ty>], args: ~[@Expr],\n-                      sugar: CallSugar) -> ast::Expr_ {\n-        ExprMethodCall(ast::DUMMY_NODE_ID, ident, tps, args, sugar)\n+    fn mk_method_call(&mut self, ident: Ident, tps: ~[P<Ty>], args: ~[@Expr]) -> ast::Expr_ {\n+        ExprMethodCall(ast::DUMMY_NODE_ID, ident, tps, args)\n     }\n \n     pub fn mk_index(&mut self, expr: @Expr, idx: @Expr) -> ast::Expr_ {\n@@ -1997,7 +1995,7 @@ impl Parser {\n                             hi = self.last_span.hi;\n \n                             es.unshift(e);\n-                            let nd = self.mk_method_call(i, tys, es, NoSugar);\n+                            let nd = self.mk_method_call(i, tys, es);\n                             e = self.mk_expr(lo, hi, nd);\n                         }\n                         _ => {\n@@ -2022,7 +2020,7 @@ impl Parser {\n                 );\n                 hi = self.last_span.hi;\n \n-                let nd = self.mk_call(e, es, NoSugar);\n+                let nd = self.mk_call(e, es);\n                 e = self.mk_expr(lo, hi, nd);\n               }\n "}, {"sha": "bb2f345ac2883810b708457cfd204dbd752e1905", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -1141,33 +1141,10 @@ pub fn print_expr_vstore(s: &mut State, t: ast::ExprVstore) -> io::IoResult<()>\n     }\n }\n \n-pub fn print_call_pre(s: &mut State,\n-                      sugar: ast::CallSugar,\n-                      base_args: &mut ~[@ast::Expr])\n-                   -> io::IoResult<Option<@ast::Expr>> {\n-    match sugar {\n-        ast::ForSugar => {\n-            if_ok!(head(s, \"for\"));\n-            Ok(Some(base_args.pop().unwrap()))\n-        }\n-        ast::NoSugar => Ok(None)\n-    }\n-}\n-\n-pub fn print_call_post(s: &mut State,\n-                       sugar: ast::CallSugar,\n-                       blk: &Option<@ast::Expr>,\n-                       base_args: &mut ~[@ast::Expr]) -> io::IoResult<()> {\n-    if sugar == ast::NoSugar || !base_args.is_empty() {\n-        if_ok!(popen(s));\n-        if_ok!(commasep_exprs(s, Inconsistent, *base_args));\n-        if_ok!(pclose(s));\n-    }\n-    if sugar != ast::NoSugar {\n-        if_ok!(nbsp(s));\n-        // not sure if this can happen\n-        if_ok!(print_expr(s, blk.unwrap()));\n-    }\n+fn print_call_post(s: &mut State, args: &[@ast::Expr]) -> io::IoResult<()> {\n+    if_ok!(popen(s));\n+    if_ok!(commasep_exprs(s, Inconsistent, args));\n+    if_ok!(pclose(s));\n     Ok(())\n }\n \n@@ -1254,15 +1231,12 @@ pub fn print_expr(s: &mut State, expr: &ast::Expr) -> io::IoResult<()> {\n         }\n         if_ok!(pclose(s));\n       }\n-      ast::ExprCall(func, ref args, sugar) => {\n-        let mut base_args = (*args).clone();\n-        let blk = if_ok!(print_call_pre(s, sugar, &mut base_args));\n+      ast::ExprCall(func, ref args) => {\n         if_ok!(print_expr(s, func));\n-        if_ok!(print_call_post(s, sugar, &blk, &mut base_args));\n+        if_ok!(print_call_post(s, *args));\n       }\n-      ast::ExprMethodCall(_, ident, ref tys, ref args, sugar) => {\n-        let mut base_args = args.slice_from(1).to_owned();\n-        let blk = if_ok!(print_call_pre(s, sugar, &mut base_args));\n+      ast::ExprMethodCall(_, ident, ref tys, ref args) => {\n+        let base_args = args.slice_from(1);\n         if_ok!(print_expr(s, args[0]));\n         if_ok!(word(&mut s.s, \".\"));\n         if_ok!(print_ident(s, ident));\n@@ -1271,7 +1245,7 @@ pub fn print_expr(s: &mut State, expr: &ast::Expr) -> io::IoResult<()> {\n             if_ok!(commasep(s, Inconsistent, *tys, print_type_ref));\n             if_ok!(word(&mut s.s, \">\"));\n         }\n-        if_ok!(print_call_post(s, sugar, &blk, &mut base_args));\n+        if_ok!(print_call_post(s, base_args));\n       }\n       ast::ExprBinary(_, op, lhs, rhs) => {\n         if_ok!(print_expr(s, lhs));"}, {"sha": "feab4e0e84df254856d353f2893b81719e8948e2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e840235962ca579cb5aa5d90d82165890c79f4c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=6e840235962ca579cb5aa5d90d82165890c79f4c", "patch": "@@ -652,13 +652,13 @@ pub fn walk_expr<E: Clone, V: Visitor<E>>(visitor: &mut V, expression: &Expr, en\n                 visitor.visit_expr(*subexpression, env.clone())\n             }\n         }\n-        ExprCall(callee_expression, ref arguments, _) => {\n+        ExprCall(callee_expression, ref arguments) => {\n             for argument in arguments.iter() {\n                 visitor.visit_expr(*argument, env.clone())\n             }\n             visitor.visit_expr(callee_expression, env.clone())\n         }\n-        ExprMethodCall(_, _, ref types, ref arguments, _) => {\n+        ExprMethodCall(_, _, ref types, ref arguments) => {\n             walk_exprs(visitor, *arguments, env.clone());\n             for &typ in types.iter() {\n                 visitor.visit_ty(typ, env.clone())"}]}