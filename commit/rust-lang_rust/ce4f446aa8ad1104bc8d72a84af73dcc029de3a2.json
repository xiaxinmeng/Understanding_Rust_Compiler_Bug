{"sha": "ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNGY0NDZhYThhZDExMDRiYzhkNzJhODRhZjczZGNjMDI5ZGUzYTI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-21T13:16:25Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-22T11:53:51Z"}, "message": "Improved is_upvar_field_projection - no longer need recurse parameter.", "tree": {"sha": "fd5e40c8e8867c103df06fe5d81b70e92e24448a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd5e40c8e8867c103df06fe5d81b70e92e24448a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAltUcFEACgkQAXYLT59T\n8VSOEw//Z5Bs+a2nW5EaMy5AyH/cj5+rMSsw5PTsgDIK5mZPZfOj8oEdcyMzYch/\n2dgyn8OV3SLUcm6aG+msfNfxqbG7cXqCwZxqhhPcgGeRxhEUHkRDYKLzqrJ/G/ep\naHP5HGWRGD+aSdIn5N1U2HSr7i5Z0QyBPRNIcoYI7j52M3lJ70G3MaXg34VdoHgQ\nTZHv9aixsaDD72zt2FB9+F44Cs+/ERiFavgEYJnw00hr1Q/8bwG7EE5O4Hh3W79G\nkvwwhQbxPUZGkX+3c/Qh9WYx70dQXwpzY97Lo5s8Q5ZPMecBx2TqpAZdkbgYyOGQ\nt3goPAf50qRXmGPGHXjd0+F02xmv4WPkZiEl9nPTWhYJi3ux0cuVspKrlcurnW5o\n6ZizFdwshqDgtwx00KaWYjlsQGmCu/eqYbX8MF2W/4xAhB7Hqcw90S0H0ONawBcX\n6jCXS4WE0mpaQnGFZRDXkENu4II6AVV6GzH6A5TWIZIFlr1R0NFSn9yALsRlKCzf\nRSTMfZeifa2Ollki46F4BcZCLIW9oM+c485DK+tHO6NT8xUbXG7F1JQfa9dJF5Sg\nTlCqvFhIzJi1yBn6JZqVP+BJlK+XJWEYEJq1aVd+PFfBA6q1jYqO0MZHRyF/Eled\ni89/iPHf1v52CyMpVf2G62ZGFs/19sB86YbKm7CcaRQSR1MEAG0=\n=czbX\n-----END PGP SIGNATURE-----", "payload": "tree fd5e40c8e8867c103df06fe5d81b70e92e24448a\nparent f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46\nauthor David Wood <david@davidtw.co> 1532178985 +0100\ncommitter David Wood <david@davidtw.co> 1532260431 +0100\n\nImproved is_upvar_field_projection - no longer need recurse parameter.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "html_url": "https://github.com/rust-lang/rust/commit/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46", "html_url": "https://github.com/rust-lang/rust/commit/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "0359eb9b95d1ba870b0e3a92c719aa61bb57a755", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "patch": "@@ -125,9 +125,18 @@ impl<'tcx> Place<'tcx> {\n     /// be `self` in the current MIR, because that is the only time we directly access the fields\n     /// of a closure type.\n     pub fn is_upvar_field_projection<'cx, 'gcx>(&self, mir: &'cx Mir<'tcx>,\n-                                                tcx: &TyCtxt<'cx, 'gcx, 'tcx>,\n-                                                recurse: bool) -> Option<Field> {\n-        match *self {\n+                                                tcx: &TyCtxt<'cx, 'gcx, 'tcx>) -> Option<Field> {\n+        let place = if let Place::Projection(ref proj) = self {\n+            if let ProjectionElem::Deref = proj.elem {\n+                &proj.base\n+            } else {\n+                self\n+            }\n+        } else {\n+            self\n+        };\n+\n+        match place {\n             Place::Projection(ref proj) => match proj.elem {\n                 ProjectionElem::Field(field, _ty) => {\n                     let base_ty = proj.base.ty(mir, *tcx).to_ty(*tcx);\n@@ -138,13 +147,6 @@ impl<'tcx> Place<'tcx> {\n                         None\n                     }\n                 },\n-                ProjectionElem::Deref => {\n-                    if recurse {\n-                        proj.base.is_upvar_field_projection(mir, tcx, recurse)\n-                    } else {\n-                        None\n-                    }\n-                },\n                 _ => None,\n             },\n             _ => None,"}, {"sha": "5dca01f8842a09d82ada4710ba28cd3c911fd702", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "patch": "@@ -726,8 +726,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Place::Projection(ref proj) => {\n                 match proj.elem {\n                     ProjectionElem::Deref => {\n-                        let upvar_field_projection = proj.base.is_upvar_field_projection(\n-                            self.mir, &self.tcx, false);\n+                        let upvar_field_projection = place.is_upvar_field_projection(\n+                            self.mir, &self.tcx);\n                         if let Some(field) = upvar_field_projection {\n                             let var_index = field.index();\n                             let name = self.mir.upvar_decls[var_index].debug_name.to_string();\n@@ -788,7 +788,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         autoderef = true;\n \n                         let upvar_field_projection = place.is_upvar_field_projection(\n-                            self.mir, &self.tcx, false);\n+                            self.mir, &self.tcx);\n                         if let Some(field) = upvar_field_projection {\n                             let var_index = field.index();\n                             let name = self.mir.upvar_decls[var_index].debug_name.to_string();"}, {"sha": "62bf2b0abe4c7df6aedc7952159ad7d76ff3c3fb", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "patch": "@@ -1215,7 +1215,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                 Operand::Move(ref place @ Place::Projection(_))\n                                 | Operand::Copy(ref place @ Place::Projection(_)) => {\n                                     if let Some(field) = place.is_upvar_field_projection(\n-                                            self.mir, &self.tcx, false) {\n+                                            self.mir, &self.tcx) {\n                                         self.used_mut_upvars.push(field);\n                                     }\n                                 }\n@@ -1804,7 +1804,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 place: place @ Place::Projection(_),\n                 is_local_mutation_allowed: _,\n             } => {\n-                if let Some(field) = place.is_upvar_field_projection(self.mir, &self.tcx, false) {\n+                if let Some(field) = place.is_upvar_field_projection(self.mir, &self.tcx) {\n                     self.used_mut_upvars.push(field);\n                 }\n             }\n@@ -1867,8 +1867,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                     // Mutably borrowed data is mutable, but only if we have a\n                                     // unique path to the `&mut`\n                                     hir::MutMutable => {\n-                                        let mode = match proj.base.is_upvar_field_projection(\n-                                            self.mir, &self.tcx, false)\n+                                        let mode = match place.is_upvar_field_projection(\n+                                            self.mir, &self.tcx)\n                                         {\n                                             Some(field)\n                                                 if {\n@@ -1914,7 +1914,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     | ProjectionElem::Subslice { .. }\n                     | ProjectionElem::Downcast(..) => {\n                         let upvar_field_projection = place.is_upvar_field_projection(\n-                            self.mir, &self.tcx, false);\n+                            self.mir, &self.tcx);\n                         if let Some(field) = upvar_field_projection {\n                             let decl = &self.mir.upvar_decls[field.index()];\n                             debug!("}, {"sha": "c7e28ceb1404a9cf90a374453aa25d4fc7f60348", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "patch": "@@ -175,7 +175,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     };\n \n                     if initial_category == ConstraintCategory::Assignment\n-                            && place.is_upvar_field_projection(mir, &infcx.tcx, true).is_some() {\n+                            && place.is_upvar_field_projection(mir, &infcx.tcx).is_some() {\n                         ConstraintCategory::AssignmentToUpvar\n                     } else {\n                         initial_category"}]}