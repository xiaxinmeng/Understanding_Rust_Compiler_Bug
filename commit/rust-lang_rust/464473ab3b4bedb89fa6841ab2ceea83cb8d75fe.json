{"sha": "464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NDQ3M2FiM2I0YmVkYjg5ZmE2ODQxYWIyY2VlYTgzY2I4ZDc1ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-14T05:58:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-14T05:58:13Z"}, "message": "Auto merge of #59798 - rchaser53:issue-59488, r=estebank\n\nImprovement for comparision against fn\n\nI try to add error message.\nrelated: https://github.com/rust-lang/rust/issues/59488", "tree": {"sha": "fcfa85db3a93064bb08d1a0690c2a26cbd7e1f2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcfa85db3a93064bb08d1a0690c2a26cbd7e1f2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "html_url": "https://github.com/rust-lang/rust/commit/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee621f42329069c296b4c2066b3743cc4ff0f369", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee621f42329069c296b4c2066b3743cc4ff0f369", "html_url": "https://github.com/rust-lang/rust/commit/ee621f42329069c296b4c2066b3743cc4ff0f369"}, {"sha": "d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "html_url": "https://github.com/rust-lang/rust/commit/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b"}], "stats": {"total": 191, "additions": 188, "deletions": 3}, "files": [{"sha": "d2fe099e433f2ec4675989a20db8e99c00bbb5ed", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 73, "deletions": 3, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "patch": "@@ -3,7 +3,7 @@\n use super::{FnCtxt, Needs};\n use super::method::MethodCallee;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::ty::TyKind::{Ref, Adt, Str, Uint, Never, Tuple, Char, Array};\n+use rustc::ty::TyKind::{Ref, Adt, FnDef, Str, Uint, Never, Tuple, Char, Array};\n use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::infer::type_variable::TypeVariableOrigin;\n use errors::{self,Applicability};\n@@ -333,8 +333,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 lhs_ty);\n \n                             if !lhs_expr.span.eq(&rhs_expr.span) {\n-                                err.span_label(lhs_expr.span, lhs_ty.to_string());\n-                                err.span_label(rhs_expr.span, rhs_ty.to_string());\n+                                self.add_type_neq_err_label(\n+                                    &mut err,\n+                                    lhs_expr.span,\n+                                    lhs_ty,\n+                                    rhs_ty,\n+                                    op,\n+                                    is_assign\n+                                );\n+                                self.add_type_neq_err_label(\n+                                    &mut err,\n+                                    rhs_expr.span,\n+                                    rhs_ty,\n+                                    lhs_ty,\n+                                    op,\n+                                    is_assign\n+                                );\n                             }\n \n                             let mut suggested_deref = false;\n@@ -415,6 +429,62 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         (lhs_ty, rhs_ty, return_ty)\n     }\n \n+    fn add_type_neq_err_label(\n+        &self,\n+        err: &mut errors::DiagnosticBuilder<'_>,\n+        span: Span,\n+        ty: Ty<'tcx>,\n+        other_ty: Ty<'tcx>,\n+        op: hir::BinOp,\n+        is_assign: IsAssign,\n+    ) {\n+        err.span_label(span, ty.to_string());\n+        if let FnDef(def_id, _) = ty.sty {\n+            let source_map = self.tcx.sess.source_map();\n+            let hir_id = &self.tcx.hir().as_local_hir_id(def_id).unwrap();\n+            let fn_sig = {\n+                match self.tcx.typeck_tables_of(def_id).liberated_fn_sigs().get(*hir_id) {\n+                    Some(f) => f.clone(),\n+                    None => {\n+                        bug!(\"No fn-sig entry for def_id={:?}\", def_id);\n+                    }\n+                }\n+            };\n+\n+            let other_ty = if let FnDef(def_id, _) = other_ty.sty {\n+                let hir_id = &self.tcx.hir().as_local_hir_id(def_id).unwrap();\n+                match self.tcx.typeck_tables_of(def_id).liberated_fn_sigs().get(*hir_id) {\n+                    Some(f) => f.clone().output(),\n+                    None => {\n+                        bug!(\"No fn-sig entry for def_id={:?}\", def_id);\n+                    }\n+                }\n+            } else {\n+                other_ty\n+            };\n+\n+            if self.lookup_op_method(fn_sig.output(),\n+                                    &[other_ty],\n+                                    Op::Binary(op, is_assign))\n+                    .is_ok() {\n+                let (variable_snippet, applicability) = if fn_sig.inputs().len() > 0 {\n+                    (format!(\"{}( /* arguments */ )\", source_map.span_to_snippet(span).unwrap()),\n+                    Applicability::HasPlaceholders)\n+                } else {\n+                    (format!(\"{}()\", source_map.span_to_snippet(span).unwrap()),\n+                    Applicability::MaybeIncorrect)\n+                };\n+\n+                err.span_suggestion(\n+                    span,\n+                    \"you might have forgotten to call this function\",\n+                    variable_snippet,\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+\n     fn check_str_addition(\n         &self,\n         expr: &'gcx hir::Expr,"}, {"sha": "74fb00f8ac383329d54370d189482c387f06f874", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "patch": "@@ -7,6 +7,14 @@ LL |     let x = f == g;\n    |             fn() {main::f}\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `fn() {main::f}`\n+help: you might have forgotten to call this function\n+   |\n+LL |     let x = f() == g;\n+   |             ^^^\n+help: you might have forgotten to call this function\n+   |\n+LL |     let x = f == g();\n+   |                  ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-compare-mismatch.rs:4:18"}, {"sha": "27cf16a821ffc3197b0cb95a13dad10616789cf8", "filename": "src/test/ui/issues/issue-59488.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs?ref=464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "patch": "@@ -0,0 +1,26 @@\n+// ignore-tidy-linelength\n+\n+fn foo() -> i32 {\n+    42\n+}\n+\n+fn bar(a: i64) -> i64 {\n+    43\n+}\n+\n+fn main() {\n+    foo > 12;\n+    //~^ ERROR 12:9: 12:10: binary operation `>` cannot be applied to type `fn() -> i32 {foo}` [E0369]\n+    //~| ERROR 12:11: 12:13: mismatched types [E0308]\n+\n+    bar > 13;\n+    //~^ ERROR 16:9: 16:10: binary operation `>` cannot be applied to type `fn(i64) -> i64 {bar}` [E0369]\n+    //~| ERROR 16:11: 16:13: mismatched types [E0308]\n+\n+    foo > foo;\n+    //~^ ERROR 20:9: 20:10: binary operation `>` cannot be applied to type `fn() -> i32 {foo}` [E0369]\n+\n+    foo > bar;\n+    //~^ ERROR 23:9: 23:10: binary operation `>` cannot be applied to type `fn() -> i32 {foo}` [E0369]\n+    //~| ERROR 23:11: 23:14: mismatched types [E0308]\n+}"}, {"sha": "b49f5e35f42265153e27c868cef4a6e8e2b41bfb", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "patch": "@@ -0,0 +1,81 @@\n+error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n+  --> $DIR/issue-59488.rs:12:9\n+   |\n+LL |     foo > 12;\n+   |     --- ^ -- {integer}\n+   |     |\n+   |     fn() -> i32 {foo}\n+   |     help: you might have forgotten to call this function: `foo()`\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-59488.rs:12:11\n+   |\n+LL |     foo > 12;\n+   |           ^^ expected fn item, found integer\n+   |\n+   = note: expected type `fn() -> i32 {foo}`\n+              found type `i32`\n+\n+error[E0369]: binary operation `>` cannot be applied to type `fn(i64) -> i64 {bar}`\n+  --> $DIR/issue-59488.rs:16:9\n+   |\n+LL |     bar > 13;\n+   |     --- ^ -- {integer}\n+   |     |\n+   |     fn(i64) -> i64 {bar}\n+   |     help: you might have forgotten to call this function: `bar( /* arguments */ )`\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn(i64) -> i64 {bar}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-59488.rs:16:11\n+   |\n+LL |     bar > 13;\n+   |           ^^ expected fn item, found integer\n+   |\n+   = note: expected type `fn(i64) -> i64 {bar}`\n+              found type `i64`\n+\n+error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n+  --> $DIR/issue-59488.rs:20:9\n+   |\n+LL |     foo > foo;\n+   |     --- ^ --- fn() -> i32 {foo}\n+   |     |\n+   |     fn() -> i32 {foo}\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n+help: you might have forgotten to call this function\n+   |\n+LL |     foo() > foo;\n+   |     ^^^^^\n+help: you might have forgotten to call this function\n+   |\n+LL |     foo > foo();\n+   |           ^^^^^\n+\n+error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n+  --> $DIR/issue-59488.rs:23:9\n+   |\n+LL |     foo > bar;\n+   |     --- ^ --- fn(i64) -> i64 {bar}\n+   |     |\n+   |     fn() -> i32 {foo}\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-59488.rs:23:11\n+   |\n+LL |     foo > bar;\n+   |           ^^^ expected fn item, found a different fn item\n+   |\n+   = note: expected type `fn() -> i32 {foo}`\n+              found type `fn(i64) -> i64 {bar}`\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors occurred: E0308, E0369.\n+For more information about an error, try `rustc --explain E0308`."}]}