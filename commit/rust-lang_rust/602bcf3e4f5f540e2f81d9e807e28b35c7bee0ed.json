{"sha": "602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMmJjZjNlNGY1ZjU0MGUyZjgxZDllODA3ZTI4YjM1YzdiZWUwZWQ=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T05:45:20Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T15:59:45Z"}, "message": "move get_hint_if_single_char_arg to methods/utils.rs", "tree": {"sha": "370d2e005ba86d984086de6a3cc8ad0d5d10e58d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/370d2e005ba86d984086de6a3cc8ad0d5d10e58d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed", "html_url": "https://github.com/rust-lang/rust/commit/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27963c8dce5b2db8c6c308681682bbb33938e125", "url": "https://api.github.com/repos/rust-lang/rust/commits/27963c8dce5b2db8c6c308681682bbb33938e125", "html_url": "https://github.com/rust-lang/rust/commit/27963c8dce5b2db8c6c308681682bbb33938e125"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "a80162015dc91c97c133a16576cbef4a0660366d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed", "patch": "@@ -61,15 +61,12 @@ mod zst_offset;\n \n use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n-use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n use clippy_utils::{\n     contains_return, get_trait_def_id, in_macro, iter_input_pats, match_qpath, method_calls, paths, return_ty,\n     SpanlessEq,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast;\n-use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -1978,34 +1975,6 @@ fn lint_binary_expr_with_method_call(cx: &LateContext<'_>, info: &mut BinaryExpr\n     lint_with_both_lhs_and_rhs!(chars_last_cmp_with_unwrap::check, cx, info);\n }\n \n-fn get_hint_if_single_char_arg(\n-    cx: &LateContext<'_>,\n-    arg: &hir::Expr<'_>,\n-    applicability: &mut Applicability,\n-) -> Option<String> {\n-    if_chain! {\n-        if let hir::ExprKind::Lit(lit) = &arg.kind;\n-        if let ast::LitKind::Str(r, style) = lit.node;\n-        let string = r.as_str();\n-        if string.chars().count() == 1;\n-        then {\n-            let snip = snippet_with_applicability(cx, arg.span, &string, applicability);\n-            let ch = if let ast::StrStyle::Raw(nhash) = style {\n-                let nhash = nhash as usize;\n-                // for raw string: r##\"a\"##\n-                &snip[(nhash + 2)..(snip.len() - 1 - nhash)]\n-            } else {\n-                // for regular string: \"a\"\n-                &snip[1..(snip.len() - 1)]\n-            };\n-            let hint = format!(\"'{}'\", if ch == \"'\" { \"\\\\'\" } else { ch });\n-            Some(hint)\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n const FN_HEADER: hir::FnHeader = hir::FnHeader {\n     unsafety: hir::Unsafety::Normal,\n     constness: hir::Constness::NotConst,"}, {"sha": "3f3e3bd7dfde2769ade3848d2f80a3250fc2d82d", "filename": "clippy_lints/src/methods/single_char_insert_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs?ref=602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed", "patch": "@@ -1,4 +1,4 @@\n-use crate::methods::get_hint_if_single_char_arg;\n+use crate::methods::utils::get_hint_if_single_char_arg;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;"}, {"sha": "abead199098cbe154fff2ed04aa1e7b1698787b3", "filename": "clippy_lints/src/methods/single_char_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs?ref=602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed", "patch": "@@ -1,4 +1,4 @@\n-use crate::methods::get_hint_if_single_char_arg;\n+use crate::methods::utils::get_hint_if_single_char_arg;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "189157f819ec44058ac26947deed2007c95c933f", "filename": "clippy_lints/src/methods/single_char_push_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs?ref=602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed", "patch": "@@ -1,4 +1,4 @@\n-use crate::methods::get_hint_if_single_char_arg;\n+use crate::methods::utils::get_hint_if_single_char_arg;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;"}, {"sha": "8de23e1bc6e902d459077f19c29f334e5df99f3d", "filename": "clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=602bcf3e4f5f540e2f81d9e807e28b35c7bee0ed", "patch": "@@ -1,11 +1,15 @@\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_ast::ast;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_middle::ty::Ty;\n use rustc_span::symbol::sym;\n \n-pub fn derefs_to_slice<'tcx>(\n+pub(super) fn derefs_to_slice<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'tcx>,\n     ty: Ty<'tcx>,\n@@ -44,3 +48,31 @@ pub fn derefs_to_slice<'tcx>(\n         }\n     }\n }\n+\n+pub(super) fn get_hint_if_single_char_arg(\n+    cx: &LateContext<'_>,\n+    arg: &hir::Expr<'_>,\n+    applicability: &mut Applicability,\n+) -> Option<String> {\n+    if_chain! {\n+        if let hir::ExprKind::Lit(lit) = &arg.kind;\n+        if let ast::LitKind::Str(r, style) = lit.node;\n+        let string = r.as_str();\n+        if string.chars().count() == 1;\n+        then {\n+            let snip = snippet_with_applicability(cx, arg.span, &string, applicability);\n+            let ch = if let ast::StrStyle::Raw(nhash) = style {\n+                let nhash = nhash as usize;\n+                // for raw string: r##\"a\"##\n+                &snip[(nhash + 2)..(snip.len() - 1 - nhash)]\n+            } else {\n+                // for regular string: \"a\"\n+                &snip[1..(snip.len() - 1)]\n+            };\n+            let hint = format!(\"'{}'\", if ch == \"'\" { \"\\\\'\" } else { ch });\n+            Some(hint)\n+        } else {\n+            None\n+        }\n+    }\n+}"}]}