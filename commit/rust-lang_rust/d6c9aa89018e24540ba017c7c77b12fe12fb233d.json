{"sha": "d6c9aa89018e24540ba017c7c77b12fe12fb233d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzlhYTg5MDE4ZTI0NTQwYmEwMTdjN2M3N2IxMmZlMTJmYjIzM2Q=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-01-20T18:08:50Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-01-20T18:50:57Z"}, "message": "Fix associated const resolution on structs", "tree": {"sha": "566cea5b5ed04fc1737351ac2a17538f05e901cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/566cea5b5ed04fc1737351ac2a17538f05e901cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c9aa89018e24540ba017c7c77b12fe12fb233d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c9aa89018e24540ba017c7c77b12fe12fb233d", "html_url": "https://github.com/rust-lang/rust/commit/d6c9aa89018e24540ba017c7c77b12fe12fb233d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c9aa89018e24540ba017c7c77b12fe12fb233d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "html_url": "https://github.com/rust-lang/rust/commit/ceaaa1bc3388e9a198af198729a6a8821ce54ffb"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "718e12143bffaf78930aef41b017c08454bf3f86", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6c9aa89018e24540ba017c7c77b12fe12fb233d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c9aa89018e24540ba017c7c77b12fe12fb233d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d6c9aa89018e24540ba017c7c77b12fe12fb233d", "patch": "@@ -2752,7 +2752,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     };\n                     if let Some(path_res) = resolution {\n                         match path_res.base_def {\n-                            DefVariant(..) | DefStruct(..) | DefConst(..) => {\n+                            DefStruct(..) if path_res.depth == 0 => {\n+                                self.record_def(pattern.id, path_res);\n+                            }\n+                            DefVariant(..) | DefConst(..) => {\n                                 self.record_def(pattern.id, path_res);\n                             }\n                             DefStatic(..) => {"}, {"sha": "605ca6b65e2cff94f7077cd8ef9e3609d77ecea2", "filename": "src/test/run-pass/associated-const-match-patterns.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d6c9aa89018e24540ba017c7c77b12fe12fb233d/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c9aa89018e24540ba017c7c77b12fe12fb233d/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs?ref=d6c9aa89018e24540ba017c7c77b12fe12fb233d", "patch": "@@ -8,10 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:empty-struct.rs\n+\n #![feature(associated_consts)]\n \n+extern crate empty_struct;\n+use empty_struct::XEmpty2 as XFoo;\n+\n struct Foo;\n-type FooWorkaround = Foo;\n \n enum Bar {\n     Var1,\n@@ -31,6 +35,10 @@ impl HasBar for Foo {\n     const THEBAR: Bar = Bar::Var1;\n }\n \n+impl HasBar for XFoo {\n+    const THEBAR: Bar = Bar::Var1;\n+}\n+\n fn main() {\n     // Inherent impl\n     assert!(match Bar::Var2 {\n@@ -43,7 +51,7 @@ fn main() {\n     });\n     // Trait impl\n     assert!(match Bar::Var1 {\n-        FooWorkaround::THEBAR => true,\n+        Foo::THEBAR => true,\n         _ => false,\n     });\n     assert!(match Bar::Var1 {\n@@ -54,4 +62,16 @@ fn main() {\n         <Foo as HasBar>::THEBAR => true,\n         _ => false,\n     });\n+    assert!(match Bar::Var1 {\n+        XFoo::THEBAR => true,\n+        _ => false,\n+    });\n+    assert!(match Bar::Var1 {\n+        <XFoo>::THEBAR => true,\n+        _ => false,\n+    });\n+    assert!(match Bar::Var1 {\n+        <XFoo as HasBar>::THEBAR => true,\n+        _ => false,\n+    });\n }"}]}