{"sha": "c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "node_id": "C_kwDOAAsO6NoAKGMxNmVlMTlkZDRkODFkM2IxMTUwZDY3Y2ZiNGVhODRjODI2ZjRjMzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-24T13:48:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-24T13:48:44Z"}, "message": "Rollup merge of #90162 - WaffleLapkin:const_array_slice_from_ref_mut, r=oli-obk\n\nMark `{array, slice}::{from_ref, from_mut}` as const fn\n\nThis PR marks the following APIs as `const`:\n```rust\n// core::array\npub const fn from_ref<T>(s: &T) -> &[T; 1];\npub const fn from_mut<T>(s: &mut T) -> &mut [T; 1];\n\n// core::slice\npub const fn from_ref<T>(s: &T) -> &[T];\npub const fn from_mut<T>(s: &mut T) -> &mut [T];\n```\n\nNote that `from_ref` methods require `const_raw_ptr_deref` feature (which seems totally fine, since it's being stabilized, see #89551), `from_mut` methods require `const_mut_refs` (which seems fine too since this PR marks `from_mut` functions as const unstable).\n\nr? ````@oli-obk````", "tree": {"sha": "1e6fc487449390e55fda1753491e6bf6eefd2ba4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e6fc487449390e55fda1753491e6bf6eefd2ba4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhdWQ9CRBK7hj4Ov3rIwAAIekIADJIRitsHQGuAz95lLYzConj\npy6hLi3d0EVH/2MGeBKmf96meIl0YqAaBPi4fDssYlTJeNDuKbujAvlpKVKvyscz\ngDboKY6GYuz3MKBIygbSL/+aZS3W4GlnzcLtuYEc6BRQaQ5eBWvISjUmF8C0qUdl\niipA4XO/ip/xlX8Bhc7Z1bZjR35HGLB4BiOnIHlWZ8Z4v5dSNnBS0CPtEoaWDqg+\nWRXAIA9m/FI0m9ikWAcpTfTLHH1OejS55F9LnclTvL3jHbHpDB56afrm12g7dxFS\nLN220BAqX9+NQcyHzDZmsbwRpjqE3w4TSqHwTIoRNtfEkuabjR1EQHAdOXeA7t0=\n=uOsa\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e6fc487449390e55fda1753491e6bf6eefd2ba4\nparent b8376050127b3d1806ae88e6916ddaf330ca699c\nparent 5f390cfb722cf95b0df81f9563bf97b1663cff9e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635083324 +0200\ncommitter GitHub <noreply@github.com> 1635083324 +0200\n\nRollup merge of #90162 - WaffleLapkin:const_array_slice_from_ref_mut, r=oli-obk\n\nMark `{array, slice}::{from_ref, from_mut}` as const fn\n\nThis PR marks the following APIs as `const`:\n```rust\n// core::array\npub const fn from_ref<T>(s: &T) -> &[T; 1];\npub const fn from_mut<T>(s: &mut T) -> &mut [T; 1];\n\n// core::slice\npub const fn from_ref<T>(s: &T) -> &[T];\npub const fn from_mut<T>(s: &mut T) -> &mut [T];\n```\n\nNote that `from_ref` methods require `const_raw_ptr_deref` feature (which seems totally fine, since it's being stabilized, see #89551), `from_mut` methods require `const_mut_refs` (which seems fine too since this PR marks `from_mut` functions as const unstable).\n\nr? ````@oli-obk````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "html_url": "https://github.com/rust-lang/rust/commit/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8376050127b3d1806ae88e6916ddaf330ca699c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8376050127b3d1806ae88e6916ddaf330ca699c", "html_url": "https://github.com/rust-lang/rust/commit/b8376050127b3d1806ae88e6916ddaf330ca699c"}, {"sha": "5f390cfb722cf95b0df81f9563bf97b1663cff9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f390cfb722cf95b0df81f9563bf97b1663cff9e", "html_url": "https://github.com/rust-lang/rust/commit/5f390cfb722cf95b0df81f9563bf97b1663cff9e"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "811850af3678d08480b6678f84a4f683759d6e66", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "patch": "@@ -85,14 +85,16 @@ where\n \n /// Converts a reference to `T` into a reference to an array of length 1 (without copying).\n #[stable(feature = \"array_from_ref\", since = \"1.53.0\")]\n-pub fn from_ref<T>(s: &T) -> &[T; 1] {\n+#[rustc_const_unstable(feature = \"const_array_from_ref\", issue = \"90206\")]\n+pub const fn from_ref<T>(s: &T) -> &[T; 1] {\n     // SAFETY: Converting `&T` to `&[T; 1]` is sound.\n     unsafe { &*(s as *const T).cast::<[T; 1]>() }\n }\n \n /// Converts a mutable reference to `T` into a mutable reference to an array of length 1 (without copying).\n #[stable(feature = \"array_from_ref\", since = \"1.53.0\")]\n-pub fn from_mut<T>(s: &mut T) -> &mut [T; 1] {\n+#[rustc_const_unstable(feature = \"const_array_from_ref\", issue = \"90206\")]\n+pub const fn from_mut<T>(s: &mut T) -> &mut [T; 1] {\n     // SAFETY: Converting `&mut T` to `&mut [T; 1]` is sound.\n     unsafe { &mut *(s as *mut T).cast::<[T; 1]>() }\n }"}, {"sha": "63c42068aadf93fed9ad6d5c787f2a11409d1f48", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "patch": "@@ -136,6 +136,8 @@\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]\n #![feature(variant_count)]\n+#![feature(const_array_from_ref)]\n+#![feature(const_slice_from_ref)]\n //\n // Language features:\n #![feature(abi_unadjusted)]"}, {"sha": "ad38aaf9f8300f4d95e25ccf3111b4c83c72ad81", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "patch": "@@ -138,12 +138,14 @@ pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T]\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n-pub fn from_ref<T>(s: &T) -> &[T] {\n+#[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]\n+pub const fn from_ref<T>(s: &T) -> &[T] {\n     array::from_ref(s)\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n-pub fn from_mut<T>(s: &mut T) -> &mut [T] {\n+#[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]\n+pub const fn from_mut<T>(s: &mut T) -> &mut [T] {\n     array::from_mut(s)\n }"}, {"sha": "7dc071b74235d3f872c742f8f540cfb628f369d6", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "patch": "@@ -7,6 +7,11 @@ fn array_from_ref() {\n     let value: String = \"Hello World!\".into();\n     let arr: &[String; 1] = array::from_ref(&value);\n     assert_eq!(&[value.clone()], arr);\n+\n+    const VALUE: &&str = &\"Hello World!\";\n+    const ARR: &[&str; 1] = array::from_ref(VALUE);\n+    assert_eq!(&[*VALUE], ARR);\n+    assert!(core::ptr::eq(VALUE, &ARR[0]));\n }\n \n #[test]"}, {"sha": "e1ba5020a50bb1ebe6af2db45797053b400c19e0", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "patch": "@@ -74,6 +74,8 @@\n #![feature(trusted_random_access)]\n #![feature(unsize)]\n #![feature(unzip_option)]\n+#![feature(const_array_from_ref)]\n+#![feature(const_slice_from_ref)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "8d05e47edf489f7add51dcf9d43514177166a607", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=c16ee19dd4d81d3b1150d67cfb4ea84c826f4c36", "patch": "@@ -2146,6 +2146,14 @@ fn test_slice_run_destructors() {\n     assert_eq!(x.get(), 1);\n }\n \n+#[test]\n+fn test_const_from_ref() {\n+    const VALUE: &i32 = &1;\n+    const SLICE: &[i32] = core::slice::from_ref(VALUE);\n+\n+    assert!(core::ptr::eq(VALUE, &SLICE[0]))\n+}\n+\n #[test]\n fn test_slice_fill_with_uninit() {\n     // This should not UB. See #87891"}]}