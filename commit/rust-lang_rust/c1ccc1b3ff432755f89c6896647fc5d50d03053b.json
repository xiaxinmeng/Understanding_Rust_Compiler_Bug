{"sha": "c1ccc1b3ff432755f89c6896647fc5d50d03053b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxY2NjMWIzZmY0MzI3NTVmODljNjg5NjY0N2ZjNWQ1MGQwMzA1M2I=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-05T08:32:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-05T08:32:20Z"}, "message": "Rollup merge of #88257 - estebank:invalid-attr-error, r=oli-obk\n\nProvide more context on incorrect inner attribute\n\nSuggest changing an inner attribute into an outer attribute if followed by an item.", "tree": {"sha": "1a23e0f131506e92070daad6b0b306a6473d2bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a23e0f131506e92070daad6b0b306a6473d2bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ccc1b3ff432755f89c6896647fc5d50d03053b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhNICVCRBK7hj4Ov3rIwAA4psIADDMM36A20tb08iSKw4Df3gJ\nUmVUDbtJePotSr5xK0+UTI/XXzZApG+lZZzmKUo918SdOPS2SUKHdtU9tRrt6M63\nDmhdG+UFWwFTDUhQh6vrdrZzPpym9hy8JR9ZPIEisMVKttQu1nvK99qLQxRzVPHc\n0J4/SNrHJO8HCP/D5ZaFb28x/xBp+Rwbz6CWQhY8BZ56HPZJkFjkrsIOOXzy80KS\niGvKghMOtoFOVhX2FEfmqLBP/xNBVDnO3NebhazRWaTVo5LMBBTGH5pTle7Yx6nr\nqgWwvlXXZMBu71Q79VsXYFIyV6q5pq/cx+aB4uzX0wSbCXiBLXKbW57Nzy0mNsA=\n=PbPf\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a23e0f131506e92070daad6b0b306a6473d2bfb\nparent d32dc80bb6dbe850b424d2cb60214bbbce8ddf01\nparent 39ceab02a6b5d08e1543c6ad6ebe04d57dd10078\nauthor Mara Bos <m-ou.se@m-ou.se> 1630830740 +0200\ncommitter GitHub <noreply@github.com> 1630830740 +0200\n\nRollup merge of #88257 - estebank:invalid-attr-error, r=oli-obk\n\nProvide more context on incorrect inner attribute\n\nSuggest changing an inner attribute into an outer attribute if followed by an item.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ccc1b3ff432755f89c6896647fc5d50d03053b", "html_url": "https://github.com/rust-lang/rust/commit/c1ccc1b3ff432755f89c6896647fc5d50d03053b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ccc1b3ff432755f89c6896647fc5d50d03053b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d32dc80bb6dbe850b424d2cb60214bbbce8ddf01", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32dc80bb6dbe850b424d2cb60214bbbce8ddf01", "html_url": "https://github.com/rust-lang/rust/commit/d32dc80bb6dbe850b424d2cb60214bbbce8ddf01"}, {"sha": "39ceab02a6b5d08e1543c6ad6ebe04d57dd10078", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ceab02a6b5d08e1543c6ad6ebe04d57dd10078", "html_url": "https://github.com/rust-lang/rust/commit/39ceab02a6b5d08e1543c6ad6ebe04d57dd10078"}], "stats": {"total": 449, "additions": 382, "deletions": 67}, "files": [{"sha": "b402b8ba53ada3b3a0a96e3307e6185f5b2ccbf1", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 119, "deletions": 21, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -1,10 +1,10 @@\n-use super::{AttrWrapper, Capturing, Parser, PathStyle};\n+use super::{AttrWrapper, Capturing, ForceCollect, Parser, PathStyle};\n use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::token::{self, Nonterminal};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{error_code, PResult};\n-use rustc_span::{sym, Span};\n+use rustc_errors::{error_code, DiagnosticBuilder, PResult};\n+use rustc_span::{sym, BytePos, Span};\n use std::convert::TryInto;\n \n use tracing::debug;\n@@ -25,6 +25,12 @@ pub(super) const DEFAULT_INNER_ATTR_FORBIDDEN: InnerAttrPolicy<'_> = InnerAttrPo\n     prev_attr_sp: None,\n };\n \n+enum OuterAttributeType {\n+    DocComment,\n+    DocBlockComment,\n+    Attribute,\n+}\n+\n impl<'a> Parser<'a> {\n     /// Parses attributes that appear before an item.\n     pub(super) fn parse_outer_attributes(&mut self) -> PResult<'a, AttrWrapper> {\n@@ -49,18 +55,32 @@ impl<'a> Parser<'a> {\n                 Some(self.parse_attribute(inner_parse_policy)?)\n             } else if let token::DocComment(comment_kind, attr_style, data) = self.token.kind {\n                 if attr_style != ast::AttrStyle::Outer {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_err_with_code(\n-                            self.token.span,\n-                            \"expected outer doc comment\",\n-                            error_code!(E0753),\n-                        )\n-                        .note(\n-                            \"inner doc comments like this (starting with \\\n-                         `//!` or `/*!`) can only appear before items\",\n-                        )\n-                        .emit();\n+                    let span = self.token.span;\n+                    let mut err = self.sess.span_diagnostic.struct_span_err_with_code(\n+                        span,\n+                        \"expected outer doc comment\",\n+                        error_code!(E0753),\n+                    );\n+                    if let Some(replacement_span) = self.annotate_following_item_if_applicable(\n+                        &mut err,\n+                        span,\n+                        match comment_kind {\n+                            token::CommentKind::Line => OuterAttributeType::DocComment,\n+                            token::CommentKind::Block => OuterAttributeType::DocBlockComment,\n+                        },\n+                    ) {\n+                        err.note(\n+                            \"inner doc comments like this (starting with `//!` or `/*!`) can \\\n+                            only appear before items\",\n+                        );\n+                        err.span_suggestion_verbose(\n+                            replacement_span,\n+                            \"you might have meant to write a regular comment\",\n+                            String::new(),\n+                            rustc_errors::Applicability::MachineApplicable,\n+                        );\n+                    }\n+                    err.emit();\n                 }\n                 self.bump();\n                 just_parsed_doc_comment = true;\n@@ -97,7 +117,7 @@ impl<'a> Parser<'a> {\n             inner_parse_policy, self.token\n         );\n         let lo = self.token.span;\n-        // Attributse can't have attributes of their own\n+        // Attributes can't have attributes of their own [Editor's note: not with that attitude]\n         self.collect_tokens_no_attrs(|this| {\n             if this.eat(&token::Pound) {\n                 let style = if this.eat(&token::Not) {\n@@ -125,6 +145,75 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    fn annotate_following_item_if_applicable(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        span: Span,\n+        attr_type: OuterAttributeType,\n+    ) -> Option<Span> {\n+        let mut snapshot = self.clone();\n+        let lo = span.lo()\n+            + BytePos(match attr_type {\n+                OuterAttributeType::Attribute => 1,\n+                _ => 2,\n+            });\n+        let hi = lo + BytePos(1);\n+        let replacement_span = span.with_lo(lo).with_hi(hi);\n+        if let OuterAttributeType::DocBlockComment | OuterAttributeType::DocComment = attr_type {\n+            snapshot.bump();\n+        }\n+        loop {\n+            // skip any other attributes, we want the item\n+            if snapshot.token.kind == token::Pound {\n+                if let Err(mut err) = snapshot.parse_attribute(InnerAttrPolicy::Permitted) {\n+                    err.cancel();\n+                    return Some(replacement_span);\n+                }\n+            } else {\n+                break;\n+            }\n+        }\n+        match snapshot.parse_item_common(\n+            AttrWrapper::empty(),\n+            true,\n+            false,\n+            |_| true,\n+            ForceCollect::No,\n+        ) {\n+            Ok(Some(item)) => {\n+                let attr_name = match attr_type {\n+                    OuterAttributeType::Attribute => \"attribute\",\n+                    _ => \"doc comment\",\n+                };\n+                err.span_label(\n+                    item.span,\n+                    &format!(\"the inner {} doesn't annotate this {}\", attr_name, item.kind.descr()),\n+                );\n+                err.span_suggestion_verbose(\n+                    replacement_span,\n+                    &format!(\n+                        \"to annotate the {}, change the {} from inner to outer style\",\n+                        item.kind.descr(),\n+                        attr_name\n+                    ),\n+                    (match attr_type {\n+                        OuterAttributeType::Attribute => \"\",\n+                        OuterAttributeType::DocBlockComment => \"*\",\n+                        OuterAttributeType::DocComment => \"/\",\n+                    })\n+                    .to_string(),\n+                    rustc_errors::Applicability::MachineApplicable,\n+                );\n+                return None;\n+            }\n+            Err(mut item_err) => {\n+                item_err.cancel();\n+            }\n+            Ok(None) => {}\n+        }\n+        Some(replacement_span)\n+    }\n+\n     pub(super) fn error_on_forbidden_inner_attr(&self, attr_sp: Span, policy: InnerAttrPolicy<'_>) {\n         if let InnerAttrPolicy::Forbidden { reason, saw_doc_comment, prev_attr_sp } = policy {\n             let prev_attr_note =\n@@ -138,11 +227,20 @@ impl<'a> Parser<'a> {\n             }\n \n             diag.note(\n-                \"inner attributes, like `#![no_std]`, annotate the item enclosing them, \\\n-                and are usually found at the beginning of source files. \\\n-                Outer attributes, like `#[test]`, annotate the item following them.\",\n-            )\n-            .emit();\n+                \"inner attributes, like `#![no_std]`, annotate the item enclosing them, and \\\n+                are usually found at the beginning of source files\",\n+            );\n+            if self\n+                .annotate_following_item_if_applicable(\n+                    &mut diag,\n+                    attr_sp,\n+                    OuterAttributeType::Attribute,\n+                )\n+                .is_some()\n+            {\n+                diag.note(\"outer attributes, like `#[test]`, annotate the item following them\");\n+            };\n+            diag.emit();\n         }\n     }\n "}, {"sha": "d38b98a19011709225dc8765f46739ada2e50b9a", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 67, "deletions": 29, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -4,7 +4,8 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = box #![attr] 0; }\n    |                                    ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `]`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:7:40\n@@ -24,7 +25,8 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n    |                                    ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `)`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:11:44\n@@ -38,7 +40,8 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n    |                                      ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `)`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:14:46\n@@ -52,23 +55,26 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = 0 + #![attr] 0; }\n    |                                    ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:19:33\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = !#![attr] 0; }\n    |                                 ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:21:33\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = -#![attr] 0; }\n    |                                 ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:23:34\n@@ -82,31 +88,35 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] foo; }\n    |                                   ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:27:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] foo; }\n    |                                        ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:29:35\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] {foo}; }\n    |                                   ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:31:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] {foo}; }\n    |                                        ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `..`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:33:40\n@@ -126,15 +136,17 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &#![attr] 0; }\n    |                                         ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/attr-stmt-expr-attr-bad.rs:39:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n    |                                             ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:41:37\n@@ -151,7 +163,8 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n    |                                      ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:45:40\n@@ -174,7 +187,8 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n    |                                              ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:51:45\n@@ -200,7 +214,8 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n    |                                                   ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:57:45\n@@ -217,7 +232,8 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n    |                                              ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:61:48\n@@ -240,7 +256,8 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n    |                                                      ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/attr-stmt-expr-attr-bad.rs:67:53\n@@ -266,7 +283,8 @@ error: an inner attribute is not permitted in this context\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }\n    |                                                                   ^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:74:32\n@@ -276,7 +294,8 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n    |                        |\n    |                        previous outer attribute\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:76:32\n@@ -286,37 +305,56 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n    |                        |\n    |                        previous outer attribute\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:78:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n-   |                        ------- ^^^^^^^^ not permitted following an outer attribute\n-   |                        |\n+   |                        ------- ^^^^^^^^ ------- the inner attribute doesn't annotate this item macro invocation\n+   |                        |       |\n+   |                        |       not permitted following an outer attribute\n    |                        previous outer attribute\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+help: to annotate the item macro invocation, change the attribute from inner to outer style\n+   |\n+LL - #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n+LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo!(); }\n+   | \n \n error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n-   |                        ------- ^^^^^^^^ not permitted following an outer attribute\n-   |                        |\n+   |                        ------- ^^^^^^^^ ------- the inner attribute doesn't annotate this item macro invocation\n+   |                        |       |\n+   |                        |       not permitted following an outer attribute\n    |                        previous outer attribute\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+help: to annotate the item macro invocation, change the attribute from inner to outer style\n+   |\n+LL - #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n+LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo![]; }\n+   | \n \n error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:82:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n-   |                        ------- ^^^^^^^^ not permitted following an outer attribute\n-   |                        |\n+   |                        ------- ^^^^^^^^ ------ the inner attribute doesn't annotate this item macro invocation\n+   |                        |       |\n+   |                        |       not permitted following an outer attribute\n    |                        previous outer attribute\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+help: to annotate the item macro invocation, change the attribute from inner to outer style\n+   |\n+LL - #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n+LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo!{}; }\n+   | \n \n error[E0586]: inclusive range with no end\n   --> $DIR/attr-stmt-expr-attr-bad.rs:88:35"}, {"sha": "3cec61fe41eea9170d3bbfcb4743c47d4e02d7d9", "filename": "src/test/ui/parser/attr.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fattr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fattr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr.stderr?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -3,8 +3,16 @@ error: an inner attribute is not permitted in this context\n    |\n LL | #![lang = \"foo\"]\n    | ^^^^^^^^^^^^^^^^\n+LL |\n+LL | fn foo() {}\n+   | ----------- the inner attribute doesn't annotate this function\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+help: to annotate the function, change the attribute from inner to outer style\n+   |\n+LL - #![lang = \"foo\"]\n+LL + #[lang = \"foo\"]\n+   | \n \n error[E0522]: definition of an unknown language item: `foo`\n   --> $DIR/attr.rs:5:1"}, {"sha": "b7c1847fc7c0dfe7bd0c7c0b8b06c7facdb25563", "filename": "src/test/ui/parser/doc-comment-in-if-statement.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -5,6 +5,11 @@ LL |     if true /*!*/ {}\n    |             ^^^^^\n    |\n    = note: inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+help: you might have meant to write a regular comment\n+   |\n+LL -     if true /*!*/ {}\n+LL +     if true /**/ {}\n+   | \n \n error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/doc-comment-in-if-statement.rs:2:13"}, {"sha": "404800ee15bdda66cd866cf80de57b7a161ab4c1", "filename": "src/test/ui/parser/inner-attr-after-doc-comment.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -8,8 +8,16 @@ LL | |  */\n LL | \n LL |   #![recursion_limit=\"100\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attribute\n+LL |\n+LL |   fn main() {}\n+   |   ------------ the inner attribute doesn't annotate this function\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+help: to annotate the function, change the attribute from inner to outer style\n+   |\n+LL - #![recursion_limit=\"100\"]\n+LL + #[recursion_limit=\"100\"]\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "1adac74590881d078877bedb31adcae2444a5168", "filename": "src/test/ui/parser/inner-attr.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -6,8 +6,15 @@ LL | #[feature(lang_items)]\n LL | \n LL | #![recursion_limit=\"100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attribute\n+LL | fn main() {}\n+   | ------------ the inner attribute doesn't annotate this function\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+help: to annotate the function, change the attribute from inner to outer style\n+   |\n+LL - #![recursion_limit=\"100\"]\n+LL + #[recursion_limit=\"100\"]\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "71fc82172a54d243bda0ff5f1ae77dfc4c856f7d", "filename": "src/test/ui/parser/issue-30318.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-30318.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-30318.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-30318.fixed?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+#![allow(unused)]\n+fn foo() { }\n+\n+/// Misplaced comment...\n+//~^ ERROR expected outer doc comment\n+fn bar() { } //~ NOTE the inner doc comment doesn't annotate this function\n+\n+#[test] //~ ERROR an inner attribute is not permitted in this context\n+fn baz() { } //~ NOTE the inner attribute doesn't annotate this function\n+//~^^ NOTE inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually\n+\n+/** Misplaced comment... */\n+//~^ ERROR expected outer doc comment\n+fn bat() { } //~ NOTE the inner doc comment doesn't annotate this function\n+\n+fn main() { }\n+\n+// Misplaced comment...\n+//~^ ERROR expected outer doc comment\n+//~| NOTE inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+//~| NOTE other attributes here\n+/* Misplaced comment... */\n+//~^ ERROR expected outer doc comment\n+//~| NOTE this doc comment doesn't document anything\n+//~| ERROR expected item after doc comment\n+//~| NOTE inner doc comments like this (starting with `//!` or `/*!`) can only appear before items"}, {"sha": "465dca2ff82247e12efb75dc9d15c6941ae56a36", "filename": "src/test/ui/parser/issue-30318.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-30318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-30318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-30318.rs?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -1,7 +1,27 @@\n+// run-rustfix\n+#![allow(unused)]\n fn foo() { }\n \n //! Misplaced comment...\n //~^ ERROR expected outer doc comment\n-//~| NOTE inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+fn bar() { } //~ NOTE the inner doc comment doesn't annotate this function\n+\n+#![test] //~ ERROR an inner attribute is not permitted in this context\n+fn baz() { } //~ NOTE the inner attribute doesn't annotate this function\n+//~^^ NOTE inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually\n+\n+/*! Misplaced comment... */\n+//~^ ERROR expected outer doc comment\n+fn bat() { } //~ NOTE the inner doc comment doesn't annotate this function\n \n fn main() { }\n+\n+//! Misplaced comment...\n+//~^ ERROR expected outer doc comment\n+//~| NOTE inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+//~| NOTE other attributes here\n+/*! Misplaced comment... */\n+//~^ ERROR expected outer doc comment\n+//~| NOTE this doc comment doesn't document anything\n+//~| ERROR expected item after doc comment\n+//~| NOTE inner doc comments like this (starting with `//!` or `/*!`) can only appear before items"}, {"sha": "7e7108845546a1e1bf47b545f62c44c6556af4c6", "filename": "src/test/ui/parser/issue-30318.stderr", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-30318.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-30318.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-30318.stderr?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -1,11 +1,81 @@\n error[E0753]: expected outer doc comment\n-  --> $DIR/issue-30318.rs:3:1\n+  --> $DIR/issue-30318.rs:5:1\n+   |\n+LL | //! Misplaced comment...\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | fn bar() { }\n+   | ------------ the inner doc comment doesn't annotate this function\n+   |\n+help: to annotate the function, change the doc comment from inner to outer style\n+   |\n+LL | /// Misplaced comment...\n+   |   ~\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/issue-30318.rs:9:1\n+   |\n+LL | #![test]\n+   | ^^^^^^^^\n+LL | fn baz() { }\n+   | ------------ the inner attribute doesn't annotate this function\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+help: to annotate the function, change the attribute from inner to outer style\n+   |\n+LL - #![test]\n+LL + #[test]\n+   | \n+\n+error[E0753]: expected outer doc comment\n+  --> $DIR/issue-30318.rs:13:1\n+   |\n+LL | /*! Misplaced comment... */\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | fn bat() { }\n+   | ------------ the inner doc comment doesn't annotate this function\n+   |\n+help: to annotate the function, change the doc comment from inner to outer style\n+   |\n+LL | /** Misplaced comment... */\n+   |   ~\n+\n+error[E0753]: expected outer doc comment\n+  --> $DIR/issue-30318.rs:19:1\n    |\n LL | //! Misplaced comment...\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+help: you might have meant to write a regular comment\n+   |\n+LL - //! Misplaced comment...\n+LL + // Misplaced comment...\n+   | \n+\n+error[E0753]: expected outer doc comment\n+  --> $DIR/issue-30318.rs:23:1\n+   |\n+LL | /*! Misplaced comment... */\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+help: you might have meant to write a regular comment\n+   |\n+LL - /*! Misplaced comment... */\n+LL + /* Misplaced comment... */\n+   | \n+\n+error: expected item after doc comment\n+  --> $DIR/issue-30318.rs:23:1\n+   |\n+LL | //! Misplaced comment...\n+   | ------------------------ other attributes here\n+...\n+LL | /*! Misplaced comment... */\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ this doc comment doesn't document anything\n \n-error: aborting due to previous error\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0753`."}, {"sha": "d3a97e89f9abb229372b1a8b5e98aefdddf0e474", "filename": "src/test/ui/parser/issue-45296.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-45296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-45296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-45296.rs?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -2,4 +2,5 @@ fn main() {\n     let unused = ();\n \n     #![allow(unused_variables)] //~ ERROR not permitted in this context\n+    fn foo() {}\n }"}, {"sha": "6abe266d4e90eae5405c331f5e3ed99b72929d09", "filename": "src/test/ui/parser/issue-45296.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-45296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fissue-45296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-45296.stderr?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -3,8 +3,15 @@ error: an inner attribute is not permitted in this context\n    |\n LL |     #![allow(unused_variables)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn foo() {}\n+   |     ----------- the inner attribute doesn't annotate this function\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+help: to annotate the function, change the attribute from inner to outer style\n+   |\n+LL -     #![allow(unused_variables)]\n+LL +     #[allow(unused_variables)]\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "bf4005698a3d61da810e0ff781b3682998e98d39", "filename": "src/test/ui/parser/stmt_expr_attrs_placement.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fstmt_expr_attrs_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fparser%2Fstmt_expr_attrs_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstmt_expr_attrs_placement.stderr?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -4,55 +4,62 @@ error: an inner attribute is not permitted in this context\n LL |     let a = #![allow(warnings)] (1, 2);\n    |             ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/stmt_expr_attrs_placement.rs:10:14\n    |\n LL |     let b = (#![allow(warnings)] 1, 2);\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/stmt_expr_attrs_placement.rs:15:10\n    |\n LL |         (#![allow(warnings)] 1, 2)\n    |          ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/stmt_expr_attrs_placement.rs:21:18\n    |\n LL |         let e = (#![allow(warnings)] 1, 2);\n    |                  ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/stmt_expr_attrs_placement.rs:26:14\n    |\n LL |     let e = [#![allow(warnings)] 1, 2];\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/stmt_expr_attrs_placement.rs:29:14\n    |\n LL |     let f = [#![allow(warnings)] 1; 0];\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n   --> $DIR/stmt_expr_attrs_placement.rs:36:24\n    |\n LL |     let h = MyStruct { #![allow(warnings)] field: 0 };\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: aborting due to 7 previous errors\n "}, {"sha": "426a5fa723fcff33c8277cfa8315b60d6ee51a3f", "filename": "src/test/ui/proc-macro/issue-86781-bad-inner-doc.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.fixed?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:test-macros.rs\n+// run-rustfix\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+/// Inner doc comment\n+//~^ ERROR expected outer doc comment\n+#[derive(Empty)]\n+pub struct Foo; //~ NOTE the inner doc comment doesn't annotate this struct\n+\n+fn main() {}"}, {"sha": "31e3f3c859236718060cd339080330d95c4b7b20", "filename": "src/test/ui/proc-macro/issue-86781-bad-inner-doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.rs?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -1,11 +1,12 @@\n // aux-build:test-macros.rs\n+// run-rustfix\n \n #[macro_use]\n extern crate test_macros;\n \n //! Inner doc comment\n //~^ ERROR expected outer doc comment\n #[derive(Empty)]\n-pub struct Foo;\n+pub struct Foo; //~ NOTE the inner doc comment doesn't annotate this struct\n \n fn main() {}"}, {"sha": "a92f07522e5f21e04b20e3ef9a64a7a9cd69be49", "filename": "src/test/ui/proc-macro/issue-86781-bad-inner-doc.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ccc1b3ff432755f89c6896647fc5d50d03053b/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-86781-bad-inner-doc.stderr?ref=c1ccc1b3ff432755f89c6896647fc5d50d03053b", "patch": "@@ -1,10 +1,16 @@\n error[E0753]: expected outer doc comment\n-  --> $DIR/issue-86781-bad-inner-doc.rs:6:1\n+  --> $DIR/issue-86781-bad-inner-doc.rs:7:1\n    |\n LL | //! Inner doc comment\n    | ^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | pub struct Foo;\n+   | --------------- the inner doc comment doesn't annotate this struct\n    |\n-   = note: inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+help: to annotate the struct, change the doc comment from inner to outer style\n+   |\n+LL | /// Inner doc comment\n+   |   ~\n \n error: aborting due to previous error\n "}]}