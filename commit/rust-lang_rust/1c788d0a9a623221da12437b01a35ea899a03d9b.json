{"sha": "1c788d0a9a623221da12437b01a35ea899a03d9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNzg4ZDBhOWE2MjMyMjFkYTEyNDM3YjAxYTM1ZWE4OTlhMDNkOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-30T19:04:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-30T19:04:02Z"}, "message": "Auto merge of #28769 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #28743, #28744, #28745, #28749, #28754, #28755, #28757, #28759, #28761, #28762, #28763, #28765\n- Failed merges:", "tree": {"sha": "ba0bf80b3df642fff057f7387fa72fd19f633648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba0bf80b3df642fff057f7387fa72fd19f633648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c788d0a9a623221da12437b01a35ea899a03d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c788d0a9a623221da12437b01a35ea899a03d9b", "html_url": "https://github.com/rust-lang/rust/commit/1c788d0a9a623221da12437b01a35ea899a03d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c788d0a9a623221da12437b01a35ea899a03d9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb167e14784edff2021869b92dff4dd585e64a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb167e14784edff2021869b92dff4dd585e64a2", "html_url": "https://github.com/rust-lang/rust/commit/dcb167e14784edff2021869b92dff4dd585e64a2"}, {"sha": "15ee0e908cceea56edbe56d595191d5609d6a1dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ee0e908cceea56edbe56d595191d5609d6a1dc", "html_url": "https://github.com/rust-lang/rust/commit/15ee0e908cceea56edbe56d595191d5609d6a1dc"}], "stats": {"total": 82, "additions": 65, "deletions": 17}, "files": [{"sha": "5afb9b7f868c8055efbf79a139145593ea3d8872", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=1c788d0a9a623221da12437b01a35ea899a03d9b", "patch": "@@ -45,7 +45,7 @@ Rust keeps track of these comments, and uses them when generating\n documentation. This is important when documenting things like enums:\n \n ```rust\n-/// The `Option` type. See [the module level documentation](../) for more.\n+/// The `Option` type. See [the module level documentation](index.html) for more.\n enum Option<T> {\n     /// No value\n     None,\n@@ -57,7 +57,7 @@ enum Option<T> {\n The above works, but this does not:\n \n ```rust,ignore\n-/// The `Option` type. See [the module level documentation](../) for more.\n+/// The `Option` type. See [the module level documentation](index.html) for more.\n enum Option<T> {\n     None, /// No value\n     Some(T), /// Some value `T`"}, {"sha": "7fb1a79dcf1df4e763350a00ae47e6c451f48940", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=1c788d0a9a623221da12437b01a35ea899a03d9b", "patch": "@@ -182,7 +182,7 @@ analysis is the only way to get at the value stored inside an `Option<T>`. This\n means that you, as the programmer, must handle the case when an `Option<T>` is\n `None` instead of `Some(t)`.\n \n-But wait, what about `unwrap` used in [`unwrap-double`](#code-unwrap-double)?\n+But wait, what about `unwrap`,which we used [`previously`](#code-unwrap-double)?\n There was no case analysis there! Instead, the case analysis was put inside the\n `unwrap` method for you. You could define it yourself if you want:\n \n@@ -211,7 +211,7 @@ that makes `unwrap` ergonomic to use. Unfortunately, that `panic!` means that\n \n ### Composing `Option<T>` values\n \n-In [`option-ex-string-find`](#code-option-ex-string-find)\n+In an [example from before](#code-option-ex-string-find),\n we saw how to use `find` to discover the extension in a file name. Of course,\n not all file names have a `.` in them, so it's possible that the file name has\n no extension. This *possibility of absence* is encoded into the types using"}, {"sha": "db484a28cb02c4a0e57388d8c1a4d51c8954da36", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=1c788d0a9a623221da12437b01a35ea899a03d9b", "patch": "@@ -99,9 +99,12 @@ use std::io;\n We\u2019ll need to take user input, and then print the result as output. As such, we\n need the `io` library from the standard library. Rust only imports a few things\n by default into every program, [the \u2018prelude\u2019][prelude]. If it\u2019s not in the\n-prelude, you\u2019ll have to `use` it directly.\n+prelude, you\u2019ll have to `use` it directly. There is also a second \u2018prelude\u2019, the\n+[`io` prelude][ioprelude], which serves a similar function: you import it, and it\n+imports a number of useful, `io`-related things.\n \n [prelude]: ../std/prelude/index.html\n+[ioprelude]: ../std/io/prelude/index.html\n \n ```rust,ignore\n fn main() {"}, {"sha": "a8c7a7d41573e4fa565a264cf829bc451f2e1b20", "filename": "src/doc/trpl/primitive-types.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fprimitive-types.md?ref=1c788d0a9a623221da12437b01a35ea899a03d9b", "patch": "@@ -162,13 +162,18 @@ A \u2018slice\u2019 is a reference to (or \u201cview\u201d into) another data structure. The\n useful for allowing safe, efficient access to a portion of an array without\n copying. For example, you might want to reference just one line of a file read\n into memory. By nature, a slice is not created directly, but from an existing\n-variable. Slices have a length, can be mutable or not, and in many ways behave\n-like arrays:\n+variable binding. Slices have a defined length, can be mutable or immutable.\n+\n+## Slicing syntax\n+\n+You can use a combo of `&` and `[]` to create a slice from various things. The\n+`&` indicates that slices are similar to references, and the `[]`s, with a\n+range, let you define the length of the slice:\n \n ```rust\n let a = [0, 1, 2, 3, 4];\n-let middle = &a[1..4]; // A slice of a: just the elements 1, 2, and 3\n let complete = &a[..]; // A slice containing all of the elements in a\n+let middle = &a[1..4]; // A slice of a: just the elements 1, 2, and 3\n ```\n \n Slices have type `&[T]`. We\u2019ll talk about that `T` when we cover"}, {"sha": "452dc13c6968dbb3fbf3db2e84b2623fe5ff0a6e", "filename": "src/doc/trpl/testing.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftesting.md?ref=1c788d0a9a623221da12437b01a35ea899a03d9b", "patch": "@@ -502,3 +502,5 @@ documentation tests: the `_0` is generated for the module test, and `add_two_0`\n for the function test. These will auto increment with names like `add_two_1` as\n you add more examples.\n \n+We haven\u2019t covered all of the details with writing documentation tests. For more,\n+please see the [Documentation chapter](documentation.html)"}, {"sha": "7b826f08ae6fbb34c9ee1ed47b482ef813b3270a", "filename": "src/doc/trpl/vectors.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Fdoc%2Ftrpl%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fvectors.md?ref=1c788d0a9a623221da12437b01a35ea899a03d9b", "patch": "@@ -32,6 +32,35 @@ println!(\"The third element of v is {}\", v[2]);\n \n The indices count from `0`, so the third element is `v[2]`.\n \n+It\u2019s also important to note that you must index with the `usize` type:\n+\n+```ignore\n+let v = vec![1, 2, 3, 4, 5];\n+\n+let i: usize = 0;\n+let j: i32 = 0;\n+\n+// works\n+v[i];\n+\n+// doesn\u2019t\n+v[j];\n+```\n+\n+Indexing with a non-`usize` type gives an error that looks like this:\n+\n+```text\n+error: the trait `core::ops::Index<i32>` is not implemented for the type\n+`collections::vec::Vec<_>` [E0277]\n+v[j];\n+^~~~\n+note: the type `collections::vec::Vec<_>` cannot be indexed by `i32`\n+error: aborting due to previous error\n+```\n+\n+There\u2019s a lot of punctuation in that message, but the core of it makes sense:\n+you cannot index with an `i32`.\n+\n ## Iterating\n \n Once you have a vector, you can iterate through its elements with `for`. There"}, {"sha": "dabfd168c89ac3557dffed06fe20a3352efe048b", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=1c788d0a9a623221da12437b01a35ea899a03d9b", "patch": "@@ -455,6 +455,8 @@ impl<T> [T] {\n     /// the index `mid` itself) and the second will contain all\n     /// indices from `[mid, len)` (excluding the index `len` itself).\n     ///\n+    /// # Panics\n+    ///\n     /// Panics if `mid > len`.\n     ///\n     /// # Examples"}, {"sha": "69fa0fa1609e3468999942c341067b5fdc6f2074", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=1c788d0a9a623221da12437b01a35ea899a03d9b", "patch": "@@ -298,7 +298,7 @@ impl<'a> Display for Arguments<'a> {\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../index.html\n+/// [module]: ../../std/fmt/index.html\n ///\n /// # Examples\n ///\n@@ -393,7 +393,7 @@ pub trait Debug {\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../index.html\n+/// [module]: ../../std/fmt/index.html\n ///\n /// # Examples\n ///\n@@ -435,7 +435,7 @@ pub trait Display {\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../index.html\n+/// [module]: ../../std/fmt/index.html\n ///\n /// # Examples\n ///\n@@ -482,7 +482,7 @@ pub trait Octal {\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../index.html\n+/// [module]: ../../std/fmt/index.html\n ///\n /// # Examples\n ///\n@@ -530,7 +530,7 @@ pub trait Binary {\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../index.html\n+/// [module]: ../../std/fmt/index.html\n ///\n /// # Examples\n ///\n@@ -578,7 +578,7 @@ pub trait LowerHex {\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../index.html\n+/// [module]: ../../std/fmt/index.html\n ///\n /// # Examples\n ///\n@@ -624,7 +624,7 @@ pub trait UpperHex {\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../index.html\n+/// [module]: ../../std/fmt/index.html\n ///\n /// # Examples\n ///\n@@ -668,7 +668,7 @@ pub trait Pointer {\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../index.html\n+/// [module]: ../../std/fmt/index.html\n ///\n /// # Examples\n ///\n@@ -711,7 +711,7 @@ pub trait LowerExp {\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../index.html\n+/// [module]: ../../std/fmt/index.html\n ///\n /// # Examples\n ///"}, {"sha": "a76755dadd35b188ea2bdb8984b25529705e0cb0", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c788d0a9a623221da12437b01a35ea899a03d9b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1c788d0a9a623221da12437b01a35ea899a03d9b", "patch": "@@ -370,6 +370,13 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n /// throughout `std::io` take and provide types which implement the `Read`\n /// trait.\n ///\n+/// Please note that each call to `read` may involve a system call, and\n+/// therefore, using something that implements [`BufRead`][bufread], such as\n+/// [`BufReader`][bufreader], will be more efficient.\n+///\n+/// [bufread]: trait.BufRead.html\n+/// [bufreader]: struct.BufReader.html\n+///\n /// # Examples\n ///\n /// [`File`][file]s implement `Read`:"}]}