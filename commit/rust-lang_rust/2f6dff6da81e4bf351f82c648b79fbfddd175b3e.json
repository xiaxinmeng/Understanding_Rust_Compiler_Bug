{"sha": "2f6dff6da81e4bf351f82c648b79fbfddd175b3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNmRmZjZkYTgxZTRiZjM1MWY4MmM2NDhiNzlmYmZkZGQxNzViM2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-05T11:18:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-05T11:18:59Z"}, "message": "nits and fix non-deterministic test output", "tree": {"sha": "c3eb5caa27994a84ecb5772a5056f2d4fcc4184a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3eb5caa27994a84ecb5772a5056f2d4fcc4184a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6dff6da81e4bf351f82c648b79fbfddd175b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6dff6da81e4bf351f82c648b79fbfddd175b3e", "html_url": "https://github.com/rust-lang/rust/commit/2f6dff6da81e4bf351f82c648b79fbfddd175b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6dff6da81e4bf351f82c648b79fbfddd175b3e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9bd6b0756c12e9f33223bd0a8460cd1129160a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bd6b0756c12e9f33223bd0a8460cd1129160a6", "html_url": "https://github.com/rust-lang/rust/commit/f9bd6b0756c12e9f33223bd0a8460cd1129160a6"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "b70d95c604028733282cafad6484f136d72f5363", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f6dff6da81e4bf351f82c648b79fbfddd175b3e/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6dff6da81e4bf351f82c648b79fbfddd175b3e/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=2f6dff6da81e4bf351f82c648b79fbfddd175b3e", "patch": "@@ -38,7 +38,7 @@ enum MiriCommand {\n }\n \n /// The information to run a crate with the given environment.\n-#[derive(Serialize, Deserialize, Clone)]\n+#[derive(Serialize, Deserialize)]\n struct CrateRunEnv {\n     /// The command-line arguments.\n     args: Vec<String>,\n@@ -52,13 +52,13 @@ struct CrateRunEnv {\n \n impl CrateRunEnv {\n     /// Gather all the information we need.\n-    fn collect(args: env::Args) -> Self {\n+    fn collect(args: env::Args, capture_stdin: bool) -> Self {\n         let args = args.collect();\n         let env = env::vars_os().collect();\n         let current_dir = env::current_dir().unwrap().into_os_string();\n \n         let mut stdin = Vec::new();\n-        if env::var_os(\"MIRI_CALLED_FROM_RUSTDOC\").is_some() {\n+        if capture_stdin {\n             std::io::stdin().lock().read_to_end(&mut stdin).expect(\"cannot read stdin\");\n         }\n \n@@ -669,17 +669,18 @@ fn phase_cargo_rustc(mut args: env::Args) {\n     let runnable_crate = !print && is_runnable_crate();\n \n     if runnable_crate && target_crate {\n+        let inside_rustdoc = env::var_os(\"MIRI_CALLED_FROM_RUSTDOC\").is_some();\n         // This is the binary or test crate that we want to interpret under Miri.\n         // But we cannot run it here, as cargo invoked us as a compiler -- our stdin and stdout are not\n         // like we want them.\n         // Instead of compiling, we write JSON into the output file with all the relevant command-line flags\n         // and environment variables; this is used when cargo calls us again in the CARGO_TARGET_RUNNER phase.\n-        let env = CrateRunEnv::collect(args);\n+        let env = CrateRunEnv::collect(args, inside_rustdoc);\n \n         // Rustdoc expects us to exit with an error code if the test is marked as `compile_fail`,\n         // just creating the JSON file is not enough: we need to detect syntax errors,\n         // so we need to run Miri with `MIRI_BE_RUSTC` for a check-only build.\n-        if std::env::var_os(\"MIRI_CALLED_FROM_RUSTDOC\").is_some() {\n+        if inside_rustdoc {\n             let mut cmd = miri();\n \n             // Ensure --emit argument for a check-only build is present."}, {"sha": "9185c2507b6fc275aeb74aaa3599e805faa63437", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6dff6da81e4bf351f82c648b79fbfddd175b3e/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/2f6dff6da81e4bf351f82c648b79fbfddd175b3e/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=2f6dff6da81e4bf351f82c648b79fbfddd175b3e", "patch": "@@ -143,6 +143,7 @@ def test_cargo_miri_test():\n \n os.chdir(os.path.dirname(os.path.realpath(__file__)))\n os.environ[\"RUST_TEST_NOCAPTURE\"] = \"0\" # this affects test output, so make sure it is not set\n+os.environ[\"RUST_TEST_THREADS\"] = \"1\" # avoid non-deterministic output due to concurrent test runs\n \n target_str = \" for target {}\".format(os.environ['MIRI_TEST_TARGET']) if 'MIRI_TEST_TARGET' in os.environ else \"\"\n print(CGREEN + CBOLD + \"## Running `cargo miri` tests{}\".format(target_str) + CEND)"}, {"sha": "6e35c374e192023de62d0edd162bfa85b9fa66a3", "filename": "test-cargo-miri/test.default.stdout.ref", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6dff6da81e4bf351f82c648b79fbfddd175b3e/test-cargo-miri%2Ftest.default.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/2f6dff6da81e4bf351f82c648b79fbfddd175b3e/test-cargo-miri%2Ftest.default.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.default.stdout.ref?ref=2f6dff6da81e4bf351f82c648b79fbfddd175b3e", "patch": "@@ -10,9 +10,9 @@ test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n \n \n running 3 tests\n+test src/lib.rs - make_true (line 2) ... ok\n test src/lib.rs - make_true (line 5) ... ok\n test src/lib.rs - make_true (line 8) ... ok\n-test src/lib.rs - make_true (line 2) ... ok\n \n test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}]}