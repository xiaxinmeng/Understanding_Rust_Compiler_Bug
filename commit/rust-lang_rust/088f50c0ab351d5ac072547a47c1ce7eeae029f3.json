{"sha": "088f50c0ab351d5ac072547a47c1ce7eeae029f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OGY1MGMwYWIzNTFkNWFjMDcyNTQ3YTQ3YzFjZTdlZWFlMDI5ZjM=", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-04T18:35:24Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-04T23:30:42Z"}, "message": "No block at the moment", "tree": {"sha": "bb1debb530510bea0aa5333bbc3a6d2d0a1a3ac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb1debb530510bea0aa5333bbc3a6d2d0a1a3ac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/088f50c0ab351d5ac072547a47c1ce7eeae029f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/088f50c0ab351d5ac072547a47c1ce7eeae029f3", "html_url": "https://github.com/rust-lang/rust/commit/088f50c0ab351d5ac072547a47c1ce7eeae029f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/088f50c0ab351d5ac072547a47c1ce7eeae029f3/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032eb3d68e07f087ac531d48f956a79948baa4b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/032eb3d68e07f087ac531d48f956a79948baa4b9", "html_url": "https://github.com/rust-lang/rust/commit/032eb3d68e07f087ac531d48f956a79948baa4b9"}], "stats": {"total": 17, "additions": 3, "deletions": 14}, "files": [{"sha": "a46bba4f202efd1ee465d88b8be57ba197f2069d", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=088f50c0ab351d5ac072547a47c1ce7eeae029f3", "patch": "@@ -257,7 +257,7 @@ impl Module {\n                     InFile { file_id: src.file_id, value: module.clone() },\n                 );\n             }\n-            ModuleSource::SourceFile(_) | ModuleSource::Block(_) => (),\n+            ModuleSource::SourceFile(_) => (),\n         };\n \n         let original_file = src.file_id.original_file(db);"}, {"sha": "f70235c99ba40d3043c93d5a65b6884c62f8195b", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=088f50c0ab351d5ac072547a47c1ce7eeae029f3", "patch": "@@ -109,7 +109,6 @@ pub enum ModuleOrigin {\n     /// Note that non-inline modules, by definition, live inside non-macro file.\n     File(AstId<ast::Module>, FileId),\n     Inline(AstId<ast::Module>),\n-    Block(AstId<ast::Block>),\n }\n \n impl Default for ModuleOrigin {\n@@ -140,7 +139,7 @@ impl ModuleOrigin {\n     pub fn declaration(&self) -> Option<AstId<ast::Module>> {\n         match self {\n             ModuleOrigin::File(m, _) | ModuleOrigin::Inline(m) => Some(*m),\n-            ModuleOrigin::Root(_) | ModuleOrigin::Block(_) => None,\n+            ModuleOrigin::Root(_) => None,\n         }\n     }\n \n@@ -162,7 +161,6 @@ impl ModuleOrigin {\n             }\n             ModuleOrigin::Root(None) => unreachable!(),\n             ModuleOrigin::Inline(m) => InFile::new(m.file_id, ModuleSource::Module(m.to_node(db))),\n-            ModuleOrigin::Block(b) => InFile::new(b.file_id, ModuleSource::Block(b.to_node(db))),\n         }\n     }\n }\n@@ -360,7 +358,6 @@ impl ModuleData {\n pub enum ModuleSource {\n     SourceFile(ast::SourceFile),\n     Module(ast::Module),\n-    Block(ast::Block),\n }\n \n impl ModuleSource {\n@@ -384,8 +381,6 @@ impl ModuleSource {\n             child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n         {\n             ModuleSource::Module(m)\n-        } else if let Some(b) = child.value.ancestors().filter_map(ast::Block::cast).next() {\n-            ModuleSource::Block(b)\n         } else {\n             let file_id = child.file_id.original_file(db);\n             let source_file = db.parse(file_id).tree();"}, {"sha": "add11fbc36a106ba049a728fb2b691c9fd7d4111", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=088f50c0ab351d5ac072547a47c1ce7eeae029f3", "patch": "@@ -234,7 +234,6 @@ impl ToNav for hir::Module {\n         let syntax = match &src.value {\n             ModuleSource::SourceFile(node) => node.syntax(),\n             ModuleSource::Module(node) => node.syntax(),\n-            ModuleSource::Block(node) => node.syntax(),\n         };\n         let frange = original_range(db, src.with_value(syntax));\n         NavigationTarget::from_syntax("}, {"sha": "b804d5f6dac2098f0ead08ccfaa133c16a82a122", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=088f50c0ab351d5ac072547a47c1ce7eeae029f3", "patch": "@@ -88,7 +88,7 @@ fn rename_mod(\n                     file_system_edits.push(move_file);\n                 }\n             }\n-            ModuleSource::Module(..) | ModuleSource::Block(..) => {}\n+            ModuleSource::Module(..) => {}\n         }\n     }\n "}, {"sha": "f5c9589f4d17257f17c34caa4c7bc45c51aea20c", "filename": "crates/ra_ide/src/references/search_scope.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f50c0ab351d5ac072547a47c1ce7eeae029f3/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=088f50c0ab351d5ac072547a47c1ce7eeae029f3", "patch": "@@ -96,10 +96,6 @@ impl NameDefinition {\n                         let range = Some(m.syntax().text_range());\n                         res.insert(file_id, range);\n                     }\n-                    ModuleSource::Block(b) => {\n-                        let range = Some(b.syntax().text_range());\n-                        res.insert(file_id, range);\n-                    }\n                     ModuleSource::SourceFile(_) => {\n                         res.insert(file_id, None);\n                         res.extend(parent_module.children(db).map(|m| {\n@@ -141,7 +137,6 @@ impl NameDefinition {\n         let mut res = FxHashMap::default();\n         let range = match module_src.value {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n-            ModuleSource::Block(b) => Some(b.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };\n         res.insert(file_id, range);"}]}