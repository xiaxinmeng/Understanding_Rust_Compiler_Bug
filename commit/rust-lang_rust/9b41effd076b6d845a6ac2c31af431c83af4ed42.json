{"sha": "9b41effd076b6d845a6ac2c31af431c83af4ed42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNDFlZmZkMDc2YjZkODQ1YTZhYzJjMzFhZjQzMWM4M2FmNGVkNDI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-30T17:29:26Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-30T17:29:26Z"}, "message": "Improve rustc diagnostic mapping", "tree": {"sha": "779c9c9c0aa31a0291be4ad40a1ff8c560e4668b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/779c9c9c0aa31a0291be4ad40a1ff8c560e4668b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b41effd076b6d845a6ac2c31af431c83af4ed42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b41effd076b6d845a6ac2c31af431c83af4ed42", "html_url": "https://github.com/rust-lang/rust/commit/9b41effd076b6d845a6ac2c31af431c83af4ed42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b41effd076b6d845a6ac2c31af431c83af4ed42/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd7c454d516e3af90d8c0d0d8a22655345fec2d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7c454d516e3af90d8c0d0d8a22655345fec2d7", "html_url": "https://github.com/rust-lang/rust/commit/fd7c454d516e3af90d8c0d0d8a22655345fec2d7"}], "stats": {"total": 321, "additions": 272, "deletions": 49}, "files": [{"sha": "206d89cfa250460c401f1e7180f6ecc136630b2e", "filename": "crates/rust-analyzer/src/diagnostics/test_data/handles_macro_location.txt", "status": "modified", "additions": 117, "deletions": 1, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/9b41effd076b6d845a6ac2c31af431c83af4ed42/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9b41effd076b6d845a6ac2c31af431c83af4ed42/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt?ref=9b41effd076b6d845a6ac2c31af431c83af4ed42", "patch": "@@ -21,6 +21,94 @@\n                     character: 26,\n                 },\n             },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"E0277\",\n+                ),\n+            ),\n+            code_description: Some(\n+                CodeDescription {\n+                    href: Url {\n+                        scheme: \"https\",\n+                        username: \"\",\n+                        password: None,\n+                        host: Some(\n+                            Domain(\n+                                \"doc.rust-lang.org\",\n+                            ),\n+                        ),\n+                        port: None,\n+                        path: \"/error-index.html\",\n+                        query: None,\n+                        fragment: Some(\n+                            \"E0277\",\n+                        ),\n+                    },\n+                },\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"can\\'t compare `{integer}` with `&str`\\nthe trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/%3C::core::macros::assert_eq%20macros%3E\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 6,\n+                                    character: 30,\n+                                },\n+                                end: Position {\n+                                    line: 6,\n+                                    character: 32,\n+                                },\n+                            },\n+                        },\n+                        message: \"Exact error occurred here\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [],\n+    },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            username: \"\",\n+            password: None,\n+            host: None,\n+            port: None,\n+            path: \"/test/%3C::core::macros::assert_eq%20macros%3E\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 6,\n+                    character: 30,\n+                },\n+                end: Position {\n+                    line: 6,\n+                    character: 32,\n+                },\n+            },\n             severity: Some(\n                 Error,\n             ),\n@@ -53,7 +141,35 @@\n                 \"rustc\",\n             ),\n             message: \"can\\'t compare `{integer}` with `&str`\\nthe trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n-            related_information: None,\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/src/main.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 1,\n+                                    character: 4,\n+                                },\n+                                end: Position {\n+                                    line: 1,\n+                                    character: 26,\n+                                },\n+                            },\n+                        },\n+                        message: \"Error originated from macro call here\",\n+                    },\n+                ],\n+            ),\n             tags: None,\n             data: None,\n         },"}, {"sha": "c847bbb356238fcdf8a18feae1136aa7616b7087", "filename": "crates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt", "status": "modified", "additions": 128, "deletions": 10, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/9b41effd076b6d845a6ac2c31af431c83af4ed42/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9b41effd076b6d845a6ac2c31af431c83af4ed42/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt?ref=9b41effd076b6d845a6ac2c31af431c83af4ed42", "patch": "@@ -13,16 +13,16 @@\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {\n-                    line: 264,\n+                    line: 271,\n                     character: 8,\n                 },\n                 end: Position {\n-                    line: 264,\n-                    character: 76,\n+                    line: 271,\n+                    character: 50,\n                 },\n             },\n             severity: Some(\n-                Error,\n+                Hint,\n             ),\n             code: None,\n             code_description: None,\n@@ -40,18 +40,18 @@\n                                 password: None,\n                                 host: None,\n                                 port: None,\n-                                path: \"/test/crates/hir_def/src/data.rs\",\n+                                path: \"/test/crates/hir_def/src/path.rs\",\n                                 query: None,\n                                 fragment: None,\n                             },\n                             range: Range {\n                                 start: Position {\n-                                    line: 79,\n-                                    character: 15,\n+                                    line: 264,\n+                                    character: 8,\n                                 },\n                                 end: Position {\n-                                    line: 79,\n-                                    character: 41,\n+                                    line: 264,\n+                                    character: 76,\n                                 },\n                             },\n                         },\n@@ -86,6 +86,71 @@\n                     character: 41,\n                 },\n             },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: None,\n+            code_description: None,\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"Please register your known path in the path module\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/crates/hir_def/src/path.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 264,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 264,\n+                                    character: 76,\n+                                },\n+                            },\n+                        },\n+                        message: \"Exact error occurred here\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [],\n+    },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            username: \"\",\n+            password: None,\n+            host: None,\n+            port: None,\n+            path: \"/test/crates/hir_def/src/path.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 264,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 264,\n+                    character: 76,\n+                },\n+            },\n             severity: Some(\n                 Error,\n             ),\n@@ -95,7 +160,60 @@\n                 \"rustc\",\n             ),\n             message: \"Please register your known path in the path module\",\n-            related_information: None,\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/crates/hir_def/src/path.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 271,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 271,\n+                                    character: 50,\n+                                },\n+                            },\n+                        },\n+                        message: \"Error originated from macro call here\",\n+                    },\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/crates/hir_def/src/data.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 79,\n+                                    character: 15,\n+                                },\n+                                end: Position {\n+                                    line: 79,\n+                                    character: 41,\n+                                },\n+                            },\n+                        },\n+                        message: \"Error originated from macro call here\",\n+                    },\n+                ],\n+            ),\n             tags: None,\n             data: None,\n         },"}, {"sha": "5de4810212db5bf75ba702e7a5b67085eaca2730", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 27, "deletions": 38, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9b41effd076b6d845a6ac2c31af431c83af4ed42/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b41effd076b6d845a6ac2c31af431c83af4ed42/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=9b41effd076b6d845a6ac2c31af431c83af4ed42", "patch": "@@ -34,22 +34,8 @@ fn diagnostic_severity(\n     Some(res)\n }\n \n-/// Check whether a file name is from macro invocation\n-fn is_from_macro(file_name: &str) -> bool {\n-    file_name.starts_with('<') && file_name.ends_with('>')\n-}\n-\n-/// Converts a Rust span to a LSP location, resolving macro expansion site if neccesary\n-fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n-    let mut span = span.clone();\n-    while let Some(expansion) = span.expansion {\n-        span = expansion.span;\n-    }\n-    return location_naive(workspace_root, &span);\n-}\n-\n /// Converts a Rust span to a LSP location\n-fn location_naive(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n+fn convert_location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n     let file_name = workspace_root.join(&span.file_name);\n     let uri = url_from_abs_path(&file_name);\n \n@@ -62,15 +48,15 @@ fn location_naive(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Lo\n     lsp_types::Location { uri, range }\n }\n \n-/// Converts a secondary Rust span to a LSP related inflocation(ormation\n+/// Converts a secondary Rust span to a LSP related information\n ///\n /// If the span is unlabelled this will return `None`.\n fn diagnostic_related_information(\n     workspace_root: &Path,\n     span: &DiagnosticSpan,\n ) -> Option<lsp_types::DiagnosticRelatedInformation> {\n     let message = span.label.clone()?;\n-    let location = location(workspace_root, span);\n+    let location = convert_location(workspace_root, span);\n     Some(lsp_types::DiagnosticRelatedInformation { location, message })\n }\n \n@@ -98,7 +84,7 @@ fn map_rust_child_diagnostic(\n     let mut edit_map: HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>> = HashMap::new();\n     for &span in &spans {\n         if let Some(suggested_replacement) = &span.suggested_replacement {\n-            let location = location(workspace_root, span);\n+            let location = convert_location(workspace_root, span);\n             let edit = lsp_types::TextEdit::new(location.range, suggested_replacement.clone());\n             edit_map.entry(location.uri).or_default().push(edit);\n         }\n@@ -107,15 +93,15 @@ fn map_rust_child_diagnostic(\n     if edit_map.is_empty() {\n         MappedRustChildDiagnostic::SubDiagnostic(SubDiagnostic {\n             related: lsp_types::DiagnosticRelatedInformation {\n-                location: location(workspace_root, spans[0]),\n+                location: convert_location(workspace_root, spans[0]),\n                 message: rd.message.clone(),\n             },\n             suggested_fix: None,\n         })\n     } else {\n         MappedRustChildDiagnostic::SubDiagnostic(SubDiagnostic {\n             related: lsp_types::DiagnosticRelatedInformation {\n-                location: location(workspace_root, spans[0]),\n+                location: convert_location(workspace_root, spans[0]),\n                 message: rd.message.clone(),\n             },\n             suggested_fix: Some(lsp_ext::CodeAction {\n@@ -231,7 +217,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     primary_spans\n         .iter()\n         .flat_map(|primary_span| {\n-            let location = location(workspace_root, &primary_span);\n+            let location = convert_location(workspace_root, &primary_span);\n \n             let mut message = message.clone();\n             if needs_primary_span_label {\n@@ -243,21 +229,22 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n             // Each primary diagnostic span may result in multiple LSP diagnostics.\n             let mut diagnostics = Vec::new();\n \n-            let mut related_macro_info = None;\n+            let mut related_info_macro_calls = vec![];\n \n             // If error occurs from macro expansion, add related info pointing to\n             // where the error originated\n             // Also, we would generate an additional diagnostic, so that exact place of macro\n             // will be highlighted in the error origin place.\n-            if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n-                let in_macro_location = location_naive(workspace_root, &primary_span);\n-\n-                // Add related information for the main disagnostic.\n-                related_macro_info = Some(lsp_types::DiagnosticRelatedInformation {\n+            let macro_calls = std::iter::successors(Some(*primary_span), |span| {\n+                Some(&span.expansion.as_ref()?.span)\n+            })\n+            .skip(1);\n+            for macro_span in macro_calls {\n+                let in_macro_location = convert_location(workspace_root, &macro_span);\n+                related_info_macro_calls.push(lsp_types::DiagnosticRelatedInformation {\n                     location: in_macro_location.clone(),\n-                    message: \"Error originated from macro here\".to_string(),\n+                    message: \"Error originated from macro call here\".to_string(),\n                 });\n-\n                 // For the additional in-macro diagnostic we add the inverse message pointing to the error location in code.\n                 let information_for_additional_diagnostic =\n                     vec![lsp_types::DiagnosticRelatedInformation {\n@@ -267,7 +254,8 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n \n                 let diagnostic = lsp_types::Diagnostic {\n                     range: in_macro_location.range,\n-                    severity,\n+                    // downgrade to hint if we're pointing at the macro\n+                    severity: Some(lsp_types::DiagnosticSeverity::Hint),\n                     code: code.clone().map(lsp_types::NumberOrString::String),\n                     code_description: code_description.clone(),\n                     source: Some(source.clone()),\n@@ -276,7 +264,6 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                     tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n                     data: None,\n                 };\n-\n                 diagnostics.push(MappedRustDiagnostic {\n                     url: in_macro_location.uri,\n                     diagnostic,\n@@ -294,15 +281,17 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                     code_description: code_description.clone(),\n                     source: Some(source.clone()),\n                     message,\n-                    related_information: if subdiagnostics.is_empty() {\n-                        None\n-                    } else {\n-                        let mut related = subdiagnostics\n+                    related_information: {\n+                        let info = related_info_macro_calls\n                             .iter()\n-                            .map(|sub| sub.related.clone())\n+                            .cloned()\n+                            .chain(subdiagnostics.iter().map(|sub| sub.related.clone()))\n                             .collect::<Vec<_>>();\n-                        related.extend(related_macro_info);\n-                        Some(related)\n+                        if info.is_empty() {\n+                            None\n+                        } else {\n+                            Some(info)\n+                        }\n                     },\n                     tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n                     data: None,"}]}