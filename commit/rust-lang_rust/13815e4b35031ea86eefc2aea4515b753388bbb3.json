{"sha": "13815e4b35031ea86eefc2aea4515b753388bbb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzODE1ZTRiMzUwMzFlYTg2ZWVmYzJhZWE0NTE1Yjc1MzM4OGJiYjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-08T07:55:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T07:55:28Z"}, "message": "Rollup merge of #72811 - pickfire:liballoc-impl, r=Amanieu\n\nLiballoc impl\n\nMainly code rearrangements", "tree": {"sha": "e6eeaaaebcf9e373338e34d1963aa500afef81be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6eeaaaebcf9e373338e34d1963aa500afef81be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13815e4b35031ea86eefc2aea4515b753388bbb3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3e7wCRBK7hj4Ov3rIwAAdHIIAK8liSzKdXCDRYlx47ZsvPii\n+6xflOAaU0wZWqTjHPye6lD64CnzL4VXHWfifOOUDHTFhAOyQsASwje+dUKGJjZr\n7/AZSsOTAbilh8n7k9Rk2HcAssTEa61nO2/ZcoOpIcRgP8ERuNEN/53npQjampyf\nyJyxPC16NCYDQCyo1R22GF1POL6csnDlHoK2mwXWWi3GsuY9IOzGHvOnwV+crLgs\n6+mid7Yui2dqov+F+cuYchMANQ6JopX1RHX6vI87f2W8/N2cZMeaSrdI8GdcXzIl\nMt0soYW7Qv61tX0Pt7s3RgJBBRyMcV9oFkbpGo1XUOWNpWOZ756xntFrNsZsixc=\n=DOSn\n-----END PGP SIGNATURE-----\n", "payload": "tree e6eeaaaebcf9e373338e34d1963aa500afef81be\nparent e13508786808800b4bc13d49bd5fd1245bc41171\nparent 71404633e843e0e5a533c677a764c8cb7f2a55fb\nauthor Ralf Jung <post@ralfj.de> 1591602928 +0200\ncommitter GitHub <noreply@github.com> 1591602928 +0200\n\nRollup merge of #72811 - pickfire:liballoc-impl, r=Amanieu\n\nLiballoc impl\n\nMainly code rearrangements\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13815e4b35031ea86eefc2aea4515b753388bbb3", "html_url": "https://github.com/rust-lang/rust/commit/13815e4b35031ea86eefc2aea4515b753388bbb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13815e4b35031ea86eefc2aea4515b753388bbb3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e13508786808800b4bc13d49bd5fd1245bc41171", "url": "https://api.github.com/repos/rust-lang/rust/commits/e13508786808800b4bc13d49bd5fd1245bc41171", "html_url": "https://github.com/rust-lang/rust/commit/e13508786808800b4bc13d49bd5fd1245bc41171"}, {"sha": "71404633e843e0e5a533c677a764c8cb7f2a55fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/71404633e843e0e5a533c677a764c8cb7f2a55fb", "html_url": "https://github.com/rust-lang/rust/commit/71404633e843e0e5a533c677a764c8cb7f2a55fb"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "5b365f0387a9b0e50742f3478c4f2d41f8d92f06", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/13815e4b35031ea86eefc2aea4515b753388bbb3/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13815e4b35031ea86eefc2aea4515b753388bbb3/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=13815e4b35031ea86eefc2aea4515b753388bbb3", "patch": "@@ -118,6 +118,30 @@ impl<T> RawVec<T, Global> {\n             RawVec::from_raw_parts(slice.as_mut_ptr(), slice.len())\n         }\n     }\n+\n+    /// Converts the entire buffer into `Box<[MaybeUninit<T>]>` with the specified `len`.\n+    ///\n+    /// Note that this will correctly reconstitute any `cap` changes\n+    /// that may have been performed. (See description of type for details.)\n+    ///\n+    /// # Safety\n+    ///\n+    /// * `len` must be greater than or equal to the most recently requested capacity, and\n+    /// * `len` must be less than or equal to `self.capacity()`.\n+    ///\n+    /// Note, that the requested capacity and `self.capacity()` could differ, as\n+    /// an allocator could overallocate and return a greater memory block than requested.\n+    pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>]> {\n+        // Sanity-check one half of the safety requirement (we cannot check the other half).\n+        debug_assert!(\n+            len <= self.capacity(),\n+            \"`len` must be smaller than or equal to `self.capacity()`\"\n+        );\n+\n+        let me = ManuallyDrop::new(self);\n+        let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);\n+        Box::from_raw(slice)\n+    }\n }\n \n impl<T, A: AllocRef> RawVec<T, A> {\n@@ -520,32 +544,6 @@ where\n     Ok(memory)\n }\n \n-impl<T> RawVec<T, Global> {\n-    /// Converts the entire buffer into `Box<[MaybeUninit<T>]>` with the specified `len`.\n-    ///\n-    /// Note that this will correctly reconstitute any `cap` changes\n-    /// that may have been performed. (See description of type for details.)\n-    ///\n-    /// # Safety\n-    ///\n-    /// * `len` must be greater than or equal to the most recently requested capacity, and\n-    /// * `len` must be less than or equal to `self.capacity()`.\n-    ///\n-    /// Note, that the requested capacity and `self.capacity()` could differ, as\n-    /// an allocator could overallocate and return a greater memory block than requested.\n-    pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>]> {\n-        // Sanity-check one half of the safety requirement (we cannot check the other half).\n-        debug_assert!(\n-            len <= self.capacity(),\n-            \"`len` must be smaller than or equal to `self.capacity()`\"\n-        );\n-\n-        let me = ManuallyDrop::new(self);\n-        let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);\n-        Box::from_raw(slice)\n-    }\n-}\n-\n unsafe impl<#[may_dangle] T, A: AllocRef> Drop for RawVec<T, A> {\n     /// Frees the memory owned by the `RawVec` *without* trying to drop its contents.\n     fn drop(&mut self) {"}, {"sha": "af943ecfd4800e631491b564755a290ede243771", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/13815e4b35031ea86eefc2aea4515b753388bbb3/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13815e4b35031ea86eefc2aea4515b753388bbb3/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=13815e4b35031ea86eefc2aea4515b753388bbb3", "patch": "@@ -1905,6 +1905,22 @@ unsafe impl<T: ?Sized> IsZero for Option<Box<T>> {\n // Common trait implementations for Vec\n ////////////////////////////////////////////////////////////////////////////////\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> ops::Deref for Vec<T> {\n+    type Target = [T];\n+\n+    fn deref(&self) -> &[T] {\n+        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> ops::DerefMut for Vec<T> {\n+    fn deref_mut(&mut self) -> &mut [T] {\n+        unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for Vec<T> {\n     #[cfg(not(test))]\n@@ -1960,22 +1976,6 @@ impl<T, I: SliceIndex<[T]>> IndexMut<I> for Vec<T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ops::Deref for Vec<T> {\n-    type Target = [T];\n-\n-    fn deref(&self) -> &[T] {\n-        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ops::DerefMut for Vec<T> {\n-    fn deref_mut(&mut self) -> &mut [T] {\n-        unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]"}]}