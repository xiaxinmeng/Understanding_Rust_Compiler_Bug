{"sha": "03639a2bff351315ca59fc080b10de1df60bf910", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjM5YTJiZmYzNTEzMTVjYTU5ZmMwODBiMTBkZTFkZjYwYmY5MTA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-21T16:06:04Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-29T05:45:38Z"}, "message": "rustc(codegen): uncache `def_symbol_name` prefix from `symbol_name`.", "tree": {"sha": "7c88d66a9ea19afc7641f84d3495e6781d80f523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c88d66a9ea19afc7641f84d3495e6781d80f523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03639a2bff351315ca59fc080b10de1df60bf910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03639a2bff351315ca59fc080b10de1df60bf910", "html_url": "https://github.com/rust-lang/rust/commit/03639a2bff351315ca59fc080b10de1df60bf910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03639a2bff351315ca59fc080b10de1df60bf910/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70a497a43794f0da5610c6da835ed3e02cd9af4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a497a43794f0da5610c6da835ed3e02cd9af4d", "html_url": "https://github.com/rust-lang/rust/commit/70a497a43794f0da5610c6da835ed3e02cd9af4d"}], "stats": {"total": 67, "additions": 19, "deletions": 48}, "files": [{"sha": "03fa5c04ec721284e874d2ce9dba9fa07fa75489", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=03639a2bff351315ca59fc080b10de1df60bf910", "patch": "@@ -500,8 +500,7 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] ConstEval { param_env: ParamEnvAnd<'tcx, GlobalId<'tcx>> },\n     [] ConstEvalRaw { param_env: ParamEnvAnd<'tcx, GlobalId<'tcx>> },\n     [] CheckMatch(DefId),\n-    [] SymbolName(DefId),\n-    [] InstanceSymbolName { instance: Instance<'tcx> },\n+    [] SymbolName { instance: Instance<'tcx> },\n     [] SpecializationGraph(DefId),\n     [] ObjectSafety(DefId),\n     [] FulfillObligation { param_env: ParamEnv<'tcx>, trait_ref: PolyTraitRef<'tcx> },"}, {"sha": "bc5caffb934643ee3a400bee77f92d6e957c6786", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=03639a2bff351315ca59fc080b10de1df60bf910", "patch": "@@ -941,7 +941,6 @@ impl_disk_cacheable_query!(mir_borrowck, |tcx, def_id| {\n impl_disk_cacheable_query!(unsafety_check_result, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(borrowck, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(check_match, |_, def_id| def_id.is_local());\n-impl_disk_cacheable_query!(def_symbol_name, |_, _| true);\n impl_disk_cacheable_query!(predicates_of, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(used_trait_imports, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(codegen_fn_attrs, |_, _| true);"}, {"sha": "f64156beeaa2d41aa6c4629f1d49b80f258996ba", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=03639a2bff351315ca59fc080b10de1df60bf910", "patch": "@@ -315,7 +315,6 @@ rustc_query_append! { [define_queries!][ <'tcx>\n \n         [] fn mir_shims: mir_shim_dep_node(ty::InstanceDef<'tcx>) -> &'tcx mir::Mir<'tcx>,\n \n-        [] fn def_symbol_name: SymbolName(DefId) -> ty::SymbolName,\n         [] fn symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\n \n         [] fn describe_def: DescribeDef(DefId) -> Option<Def>,\n@@ -727,7 +726,7 @@ fn mir_shim_dep_node<'tcx>(instance_def: ty::InstanceDef<'tcx>) -> DepConstructo\n }\n \n fn symbol_name_dep_node<'tcx>(instance: ty::Instance<'tcx>) -> DepConstructor<'tcx> {\n-    DepConstructor::InstanceSymbolName { instance }\n+    DepConstructor::SymbolName { instance }\n }\n \n fn typeck_item_bodies_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {"}, {"sha": "1b4c36b8b06c32eb0728947b802dc5e0078f2556", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=03639a2bff351315ca59fc080b10de1df60bf910", "patch": "@@ -218,7 +218,6 @@ impl<'sess> OnDiskCache<'sess> {\n                 encode_query_results::<borrowck<'_>, _>(tcx, enc, qri)?;\n                 encode_query_results::<mir_borrowck<'_>, _>(tcx, enc, qri)?;\n                 encode_query_results::<mir_const_qualif<'_>, _>(tcx, enc, qri)?;\n-                encode_query_results::<def_symbol_name<'_>, _>(tcx, enc, qri)?;\n                 encode_query_results::<const_is_rvalue_promotable_to_static<'_>, _>(tcx, enc, qri)?;\n                 encode_query_results::<symbol_name<'_>, _>(tcx, enc, qri)?;\n                 encode_query_results::<check_match<'_>, _>(tcx, enc, qri)?;"}, {"sha": "973291d94acdd14092880a8b531e72b00e24e9d5", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=03639a2bff351315ca59fc080b10de1df60bf910", "patch": "@@ -1217,7 +1217,7 @@ pub fn force_from_dep_node<'tcx>(\n         DepKind::Layout |\n         DepKind::ConstEval |\n         DepKind::ConstEvalRaw |\n-        DepKind::InstanceSymbolName |\n+        DepKind::SymbolName |\n         DepKind::MirShim |\n         DepKind::BorrowCheckKrate |\n         DepKind::Specializes |\n@@ -1304,7 +1304,6 @@ pub fn force_from_dep_node<'tcx>(\n         DepKind::TypeckTables => { force!(typeck_tables_of, def_id!()); }\n         DepKind::UsedTraitImports => { force!(used_trait_imports, def_id!()); }\n         DepKind::HasTypeckTables => { force!(has_typeck_tables, def_id!()); }\n-        DepKind::SymbolName => { force!(def_symbol_name, def_id!()); }\n         DepKind::SpecializationGraph => { force!(specialization_graph_of, def_id!()); }\n         DepKind::ObjectSafety => { force!(is_object_safe, def_id!()); }\n         DepKind::TraitImpls => { force!(trait_impls_of, def_id!()); }\n@@ -1486,7 +1485,6 @@ impl_load_from_cache!(\n     BorrowCheck => borrowck,\n     MirBorrowCheck => mir_borrowck,\n     mir_const_qualif => mir_const_qualif,\n-    SymbolName => def_symbol_name,\n     ConstIsRvaluePromotableToStatic => const_is_rvalue_promotable_to_static,\n     CheckMatch => check_match,\n     type_of => type_of,"}, {"sha": "d50a9a1607b240da1f7c3b2fceb125c3e2148162", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 15, "deletions": 38, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=03639a2bff351315ca59fc080b10de1df60bf910", "patch": "@@ -101,7 +101,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_mir::monomorphize::item::{InstantiationMode, MonoItem, MonoItemExt};\n use rustc_mir::monomorphize::Instance;\n \n-use syntax_pos::symbol::Symbol;\n+use syntax_pos::symbol::{Symbol, InternedString};\n \n use log::debug;\n \n@@ -110,7 +110,6 @@ use std::mem::{self, discriminant};\n \n pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n-        def_symbol_name,\n         symbol_name,\n \n         ..*providers\n@@ -222,21 +221,13 @@ fn get_symbol_hash<'a, 'tcx>(\n     hasher.finish()\n }\n \n-fn def_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::SymbolName {\n-    SymbolPrinter {\n-        tcx,\n-        path: SymbolPath::new(),\n-        keep_within_component: false,\n-    }.print_def_path(def_id, &[]).unwrap().path.into_interned()\n-}\n-\n-fn symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance<'tcx>) -> ty::SymbolName {\n+fn symbol_name(tcx: TyCtxt<'_, 'tcx, 'tcx>, instance: Instance<'tcx>) -> ty::SymbolName {\n     ty::SymbolName {\n-        name: Symbol::intern(&compute_symbol_name(tcx, instance)).as_interned_str(),\n+        name: compute_symbol_name(tcx, instance),\n     }\n }\n \n-fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance<'tcx>) -> String {\n+fn compute_symbol_name(tcx: TyCtxt<'_, 'tcx, 'tcx>, instance: Instance<'tcx>) -> InternedString {\n     let def_id = instance.def_id();\n     let substs = instance.substs;\n \n@@ -247,11 +238,13 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n     if def_id.is_local() {\n         if tcx.plugin_registrar_fn(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n+            return Symbol::intern(&tcx.sess.generate_plugin_registrar_symbol(disambiguator))\n+                .as_interned_str();\n         }\n         if tcx.proc_macro_decls_static(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return tcx.sess.generate_proc_macro_decls_symbol(disambiguator);\n+            return Symbol::intern(&tcx.sess.generate_proc_macro_decls_symbol(disambiguator))\n+                .as_interned_str();\n         }\n     }\n \n@@ -268,20 +261,20 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n     let attrs = tcx.codegen_fn_attrs(def_id);\n     if is_foreign {\n         if let Some(name) = attrs.link_name {\n-            return name.to_string();\n+            return name.as_interned_str();\n         }\n         // Don't mangle foreign items.\n-        return tcx.item_name(def_id).to_string();\n+        return tcx.item_name(def_id);\n     }\n \n     if let Some(name) = &attrs.export_name {\n         // Use provided name\n-        return name.to_string();\n+        return name.as_interned_str();\n     }\n \n     if attrs.flags.contains(CodegenFnAttrFlags::NO_MANGLE) {\n         // Don't mangle\n-        return tcx.item_name(def_id).to_string();\n+        return tcx.item_name(def_id);\n     }\n \n     // We want to compute the \"type\" of this item. Unfortunately, some\n@@ -321,15 +314,15 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n \n     let mut printer = SymbolPrinter {\n         tcx,\n-        path: SymbolPath::from_interned(tcx.def_symbol_name(def_id)),\n+        path: SymbolPath::new(),\n         keep_within_component: false,\n-    };\n+    }.print_def_path(def_id, &[]).unwrap();\n \n     if instance.is_vtable_shim() {\n         let _ = printer.write_str(\"{{vtable-shim}}\");\n     }\n \n-    printer.path.finish(hash)\n+    Symbol::intern(&printer.path.finish(hash)).as_interned_str()\n }\n \n // Follow C++ namespace-mangling style, see\n@@ -361,22 +354,6 @@ impl SymbolPath {\n         result\n     }\n \n-    fn from_interned(symbol: ty::SymbolName) -> Self {\n-        let mut result = SymbolPath {\n-            result: String::with_capacity(64),\n-            temp_buf: String::with_capacity(16),\n-        };\n-        result.result.push_str(&symbol.as_str());\n-        result\n-    }\n-\n-    fn into_interned(mut self) -> ty::SymbolName {\n-        self.finalize_pending_component();\n-        ty::SymbolName {\n-            name: Symbol::intern(&self.result).as_interned_str(),\n-        }\n-    }\n-\n     fn finalize_pending_component(&mut self) {\n         if !self.temp_buf.is_empty() {\n             let _ = write!(self.result, \"{}{}\", self.temp_buf.len(), self.temp_buf);"}, {"sha": "54fc63f30571ead77b8079a46b8fae9a3efd046a", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03639a2bff351315ca59fc080b10de1df60bf910/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=03639a2bff351315ca59fc080b10de1df60bf910", "patch": "@@ -138,7 +138,7 @@ fn check_lang_item_type<'a, 'tcx, D>(\n     let place_ty = place.ty(local_decls, tcx).to_ty(tcx);\n     let expected = [lhs_ty, rhs_ty, place_ty];\n     assert_eq!(sig.inputs_and_output[..], expected,\n-        \"lang item {}\", tcx.def_symbol_name(did));\n+        \"lang item `{}`\", tcx.def_path_str(did));\n     did\n }\n "}]}