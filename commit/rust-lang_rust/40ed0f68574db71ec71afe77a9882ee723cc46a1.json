{"sha": "40ed0f68574db71ec71afe77a9882ee723cc46a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZWQwZjY4NTc0ZGI3MWVjNzFhZmU3N2E5ODgyZWU3MjNjYzQ2YTE=", "commit": {"author": {"name": "Arlie Davis", "email": "ardavis@microsoft.com", "date": "2020-12-10T21:51:56Z"}, "committer": {"name": "Arlie Davis", "email": "ardavis@microsoft.com", "date": "2020-12-10T21:51:56Z"}, "message": "Use Symbol for inline asm register class names\n\nThis takes care of one \"FIXME\":\n// FIXME: use direct symbol comparison for register class names\n\nInstead of using string literals, this uses Symbol for register\nclass names.", "tree": {"sha": "af12b8948401f7e017e6dae91fb84b0796aee1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af12b8948401f7e017e6dae91fb84b0796aee1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ed0f68574db71ec71afe77a9882ee723cc46a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ed0f68574db71ec71afe77a9882ee723cc46a1", "html_url": "https://github.com/rust-lang/rust/commit/40ed0f68574db71ec71afe77a9882ee723cc46a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ed0f68574db71ec71afe77a9882ee723cc46a1/comments", "author": null, "committer": null, "parents": [{"sha": "d32c320d7eee56706486fef6be778495303afe9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32c320d7eee56706486fef6be778495303afe9e", "html_url": "https://github.com/rust-lang/rust/commit/d32c320d7eee56706486fef6be778495303afe9e"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "b60d466c3a79c7ee8d8d16b19640e431711ada99", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/40ed0f68574db71ec71afe77a9882ee723cc46a1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ed0f68574db71ec71afe77a9882ee723cc46a1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=40ed0f68574db71ec71afe77a9882ee723cc46a1", "patch": "@@ -460,6 +460,9 @@ symbols! {\n         document_private_items,\n         dotdot_in_tuple_patterns,\n         dotdoteq_in_patterns,\n+        dreg,\n+        dreg_low16,\n+        dreg_low8,\n         drop,\n         drop_in_place,\n         drop_types_in_const,\n@@ -544,6 +547,7 @@ symbols! {\n         format_args_capture,\n         format_args_nl,\n         freeze,\n+        freg,\n         frem_fast,\n         from,\n         from_desugaring,\n@@ -627,6 +631,7 @@ symbols! {\n         iter,\n         keyword,\n         kind,\n+        kreg,\n         label,\n         label_break_value,\n         lang,\n@@ -652,6 +657,7 @@ symbols! {\n         lint_reasons,\n         literal,\n         llvm_asm,\n+        local,\n         local_inner_macros,\n         log10f32,\n         log10f64,\n@@ -854,6 +860,9 @@ symbols! {\n         pub_restricted,\n         pure,\n         pushpop_unsafe,\n+        qreg,\n+        qreg_low4,\n+        qreg_low8,\n         quad_precision_float,\n         question_mark,\n         quote,\n@@ -875,6 +884,13 @@ symbols! {\n         reexport_test_harness_main,\n         reference,\n         reflect,\n+        reg,\n+        reg16,\n+        reg32,\n+        reg64,\n+        reg_abcd,\n+        reg_byte,\n+        reg_thumb,\n         register_attr,\n         register_tool,\n         relaxed_adts,\n@@ -1060,6 +1076,8 @@ symbols! {\n         spotlight,\n         sqrtf32,\n         sqrtf64,\n+        sreg,\n+        sreg_low16,\n         sse4a_target_feature,\n         stable,\n         staged_api,\n@@ -1215,6 +1233,8 @@ symbols! {\n         volatile_load,\n         volatile_set_memory,\n         volatile_store,\n+        vreg,\n+        vreg_low16,\n         warn,\n         wasm_import_module,\n         wasm_target_feature,\n@@ -1226,6 +1246,9 @@ symbols! {\n         wrapping_mul,\n         wrapping_sub,\n         write_bytes,\n+        xmm_reg,\n+        ymm_reg,\n+        zmm_reg,\n     }\n }\n "}, {"sha": "3c65c84b0de41b7fe0d5198018a1ddf1e699b45f", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/40ed0f68574db71ec71afe77a9882ee723cc46a1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ed0f68574db71ec71afe77a9882ee723cc46a1/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=40ed0f68574db71ec71afe77a9882ee723cc46a1", "patch": "@@ -20,16 +20,16 @@ macro_rules! def_reg_class {\n         }\n \n         impl $arch_regclass {\n-            pub fn name(self) -> &'static str {\n+            pub fn name(self) -> rustc_span::Symbol {\n                 match self {\n-                    $(Self::$class => stringify!($class),)*\n+                    $(Self::$class => rustc_span::symbol::sym::$class,)*\n                 }\n             }\n \n-            pub fn parse(_arch: super::InlineAsmArch, name: &str) -> Result<Self, &'static str> {\n+            pub fn parse(_arch: super::InlineAsmArch, name: rustc_span::Symbol) -> Result<Self, &'static str> {\n                 match name {\n                     $(\n-                        stringify!($class) => Ok(Self::$class),\n+                        rustc_span::sym::$class => Ok(Self::$class),\n                     )*\n                     _ => Err(\"unknown register class\"),\n                 }\n@@ -327,7 +327,7 @@ pub enum InlineAsmRegClass {\n }\n \n impl InlineAsmRegClass {\n-    pub fn name(self) -> &'static str {\n+    pub fn name(self) -> Symbol {\n         match self {\n             Self::X86(r) => r.name(),\n             Self::Arm(r) => r.name(),\n@@ -422,29 +422,22 @@ impl InlineAsmRegClass {\n     }\n \n     pub fn parse(arch: InlineAsmArch, name: Symbol) -> Result<Self, &'static str> {\n-        // FIXME: use direct symbol comparison for register class names\n-        name.with(|name| {\n-            Ok(match arch {\n-                InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                    Self::X86(X86InlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::Arm => Self::Arm(ArmInlineAsmRegClass::parse(arch, name)?),\n-                InlineAsmArch::AArch64 => {\n-                    Self::AArch64(AArch64InlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                    Self::RiscV(RiscVInlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::Nvptx64 => Self::Nvptx(NvptxInlineAsmRegClass::parse(arch, name)?),\n-                InlineAsmArch::Hexagon => {\n-                    Self::Hexagon(HexagonInlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n-                    Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n-                InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n-            })\n+        Ok(match arch {\n+            InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n+                Self::X86(X86InlineAsmRegClass::parse(arch, name)?)\n+            }\n+            InlineAsmArch::Arm => Self::Arm(ArmInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::AArch64 => Self::AArch64(AArch64InlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n+                Self::RiscV(RiscVInlineAsmRegClass::parse(arch, name)?)\n+            }\n+            InlineAsmArch::Nvptx64 => Self::Nvptx(NvptxInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Hexagon => Self::Hexagon(HexagonInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n+                Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n+            }\n+            InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n         })\n     }\n \n@@ -484,7 +477,7 @@ impl fmt::Display for InlineAsmRegOrRegClass {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             Self::Reg(r) => write!(f, \"\\\"{}\\\"\", r.name()),\n-            Self::RegClass(r) => f.write_str(r.name()),\n+            Self::RegClass(r) => write!(f, \"{}\", r.name()),\n         }\n     }\n }"}]}