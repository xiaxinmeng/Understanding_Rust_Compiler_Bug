{"sha": "fdd71bece23b3d6776ca86336749e50560617a56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZDcxYmVjZTIzYjNkNjc3NmNhODYzMzY3NDllNTA1NjA2MTdhNTY=", "commit": {"author": {"name": "Etienne Millon", "email": "me@emillon.org", "date": "2013-07-24T21:17:10Z"}, "committer": {"name": "Etienne Millon", "email": "me@emillon.org", "date": "2013-07-24T21:20:57Z"}, "message": "Generalize NaN pattern detection using walk_pat", "tree": {"sha": "dd38249890e197afc2276a479afc25a2048152c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd38249890e197afc2276a479afc25a2048152c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd71bece23b3d6776ca86336749e50560617a56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd71bece23b3d6776ca86336749e50560617a56", "html_url": "https://github.com/rust-lang/rust/commit/fdd71bece23b3d6776ca86336749e50560617a56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd71bece23b3d6776ca86336749e50560617a56/comments", "author": {"login": "emillon", "id": 496345, "node_id": "MDQ6VXNlcjQ5NjM0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/496345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emillon", "html_url": "https://github.com/emillon", "followers_url": "https://api.github.com/users/emillon/followers", "following_url": "https://api.github.com/users/emillon/following{/other_user}", "gists_url": "https://api.github.com/users/emillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/emillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emillon/subscriptions", "organizations_url": "https://api.github.com/users/emillon/orgs", "repos_url": "https://api.github.com/users/emillon/repos", "events_url": "https://api.github.com/users/emillon/events{/privacy}", "received_events_url": "https://api.github.com/users/emillon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emillon", "id": 496345, "node_id": "MDQ6VXNlcjQ5NjM0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/496345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emillon", "html_url": "https://github.com/emillon", "followers_url": "https://api.github.com/users/emillon/followers", "following_url": "https://api.github.com/users/emillon/following{/other_user}", "gists_url": "https://api.github.com/users/emillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/emillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emillon/subscriptions", "organizations_url": "https://api.github.com/users/emillon/orgs", "repos_url": "https://api.github.com/users/emillon/repos", "events_url": "https://api.github.com/users/emillon/events{/privacy}", "received_events_url": "https://api.github.com/users/emillon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c729c0dca65a014b6dec10cfd5259c6d0687d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c729c0dca65a014b6dec10cfd5259c6d0687d72", "html_url": "https://github.com/rust-lang/rust/commit/5c729c0dca65a014b6dec10cfd5259c6d0687d72"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "ea9d84d0aa33351c30595e88817598772bd01e46", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fdd71bece23b3d6776ca86336749e50560617a56/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd71bece23b3d6776ca86336749e50560617a56/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=fdd71bece23b3d6776ca86336749e50560617a56", "patch": "@@ -104,18 +104,23 @@ pub fn check_arms(cx: &MatchCheckCtxt, arms: &[arm]) {\n         for arm.pats.iter().advance |pat| {\n \n             // Check that we do not match against a static NaN (#6804)\n-            match cx.tcx.def_map.find(&pat.id) {\n-                Some(&def_static(did, false)) => {\n-                    let const_expr = lookup_const_by_id(cx.tcx, did).get();\n-                    match eval_const_expr(cx.tcx, const_expr) {\n-                        const_float(f) if f.is_NaN() => {\n-                            let msg = \"unmatchable NaN in pattern, use is_NaN() in a guard instead\";\n-                            cx.tcx.sess.span_warn(pat.span, msg);\n+            let pat_matches_nan: &fn(@pat) -> bool = |p| {\n+                match cx.tcx.def_map.find(&p.id) {\n+                    Some(&def_static(did, false)) => {\n+                        let const_expr = lookup_const_by_id(cx.tcx, did).get();\n+                        match eval_const_expr(cx.tcx, const_expr) {\n+                            const_float(f) if f.is_NaN() => true,\n+                            _ => false\n                         }\n-                        _ => {}\n                     }\n+                    _ => false\n+                }\n+            };\n+            for walk_pat(*pat) |p| {\n+                if pat_matches_nan(p) {\n+                    cx.tcx.sess.span_warn(p.span, \"unmatchable NaN in pattern, \\\n+                                                   use is_NaN() in a guard instead\");\n                 }\n-                _ => {}\n             }\n \n             let v = ~[*pat];"}, {"sha": "77cabd1db901afedc2498a3eb40eca25a1ccf140", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdd71bece23b3d6776ca86336749e50560617a56/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd71bece23b3d6776ca86336749e50560617a56/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=fdd71bece23b3d6776ca86336749e50560617a56", "patch": "@@ -9,6 +9,11 @@ fn main() {\n         _ => {},\n     };\n     //~^^^ WARNING unmatchable NaN in pattern, use is_NaN() in a guard instead\n+    match [x, 1.0] {\n+        [NaN, _] => {},\n+        _ => {},\n+    };\n+    //~^^^ WARNING unmatchable NaN in pattern, use is_NaN() in a guard instead\n }\n \n // At least one error is needed so that compilation fails"}]}