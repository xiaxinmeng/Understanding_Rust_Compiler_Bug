{"sha": "b9ea653aee231114acbe6d4b3c7b1d692772d060", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZWE2NTNhZWUyMzExMTRhY2JlNmQ0YjNjN2IxZDY5Mjc3MmQwNjA=", "commit": {"author": {"name": "Andrei Homescu", "email": "ah@immunant.com", "date": "2019-03-25T21:28:03Z"}, "committer": {"name": "Andrei Homescu", "email": "ah@immunant.com", "date": "2019-06-17T23:04:49Z"}, "message": "Expose `VaListImpl` as the Rust equivalent of `__va_list_tag` and implement Clone for it.", "tree": {"sha": "eceeeff8ba9582d6fb956358c1dc06eceadb2a29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eceeeff8ba9582d6fb956358c1dc06eceadb2a29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9ea653aee231114acbe6d4b3c7b1d692772d060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ea653aee231114acbe6d4b3c7b1d692772d060", "html_url": "https://github.com/rust-lang/rust/commit/b9ea653aee231114acbe6d4b3c7b1d692772d060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9ea653aee231114acbe6d4b3c7b1d692772d060/comments", "author": {"login": "ahomescu", "id": 443157, "node_id": "MDQ6VXNlcjQ0MzE1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/443157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahomescu", "html_url": "https://github.com/ahomescu", "followers_url": "https://api.github.com/users/ahomescu/followers", "following_url": "https://api.github.com/users/ahomescu/following{/other_user}", "gists_url": "https://api.github.com/users/ahomescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahomescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahomescu/subscriptions", "organizations_url": "https://api.github.com/users/ahomescu/orgs", "repos_url": "https://api.github.com/users/ahomescu/repos", "events_url": "https://api.github.com/users/ahomescu/events{/privacy}", "received_events_url": "https://api.github.com/users/ahomescu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahomescu", "id": 443157, "node_id": "MDQ6VXNlcjQ0MzE1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/443157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahomescu", "html_url": "https://github.com/ahomescu", "followers_url": "https://api.github.com/users/ahomescu/followers", "following_url": "https://api.github.com/users/ahomescu/following{/other_user}", "gists_url": "https://api.github.com/users/ahomescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahomescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahomescu/subscriptions", "organizations_url": "https://api.github.com/users/ahomescu/orgs", "repos_url": "https://api.github.com/users/ahomescu/repos", "events_url": "https://api.github.com/users/ahomescu/events{/privacy}", "received_events_url": "https://api.github.com/users/ahomescu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70456a6cbd67c0547d22997007afaaed0819767e", "url": "https://api.github.com/repos/rust-lang/rust/commits/70456a6cbd67c0547d22997007afaaed0819767e", "html_url": "https://github.com/rust-lang/rust/commit/70456a6cbd67c0547d22997007afaaed0819767e"}], "stats": {"total": 642, "additions": 419, "deletions": 223}, "files": [{"sha": "49090fb8e43788467855248ce7feae75ec0e0d0d", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 187, "deletions": 44, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -5,6 +5,8 @@\n //! Utilities related to FFI bindings.\n \n use crate::fmt;\n+use crate::marker::PhantomData;\n+use crate::ops::{Deref, DerefMut};\n \n /// Equivalent to C's `void` type when used as a [pointer].\n ///\n@@ -45,25 +47,33 @@ impl fmt::Debug for c_void {\n }\n \n /// Basic implementation of a `va_list`.\n+// The name is WIP, using `VaListImpl` for now.\n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\")),\n+              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n           windows))]\n+#[repr(transparent)]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n            issue = \"44930\")]\n-extern {\n-    type VaListImpl;\n+#[lang = \"va_list\"]\n+pub struct VaListImpl<'f> {\n+    ptr: *mut c_void,\n+    _marker: PhantomData<&'f c_void>,\n }\n \n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\")),\n+              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n           windows))]\n-impl fmt::Debug for VaListImpl {\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+impl<'f> fmt::Debug for VaListImpl<'f> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"va_list* {:p}\", self)\n+        write!(f, \"va_list* {:p}\", self.ptr)\n     }\n }\n \n@@ -79,12 +89,14 @@ impl fmt::Debug for VaListImpl {\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n            issue = \"44930\")]\n-struct VaListImpl {\n+#[lang = \"va_list\"]\n+pub struct VaListImpl<'f> {\n     stack: *mut c_void,\n     gr_top: *mut c_void,\n     vr_top: *mut c_void,\n     gr_offs: i32,\n     vr_offs: i32,\n+    _marker: PhantomData<&'f c_void>,\n }\n \n /// PowerPC ABI implementation of a `va_list`.\n@@ -95,12 +107,14 @@ struct VaListImpl {\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n            issue = \"44930\")]\n-struct VaListImpl {\n+#[lang = \"va_list\"]\n+pub struct VaListImpl<'f> {\n     gpr: u8,\n     fpr: u8,\n     reserved: u16,\n     overflow_arg_area: *mut c_void,\n     reg_save_area: *mut c_void,\n+    _marker: PhantomData<&'f c_void>,\n }\n \n /// x86_64 ABI implementation of a `va_list`.\n@@ -111,22 +125,131 @@ struct VaListImpl {\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n            issue = \"44930\")]\n-struct VaListImpl {\n+#[lang = \"va_list\"]\n+pub struct VaListImpl<'f> {\n     gp_offset: i32,\n     fp_offset: i32,\n     overflow_arg_area: *mut c_void,\n     reg_save_area: *mut c_void,\n+    _marker: PhantomData<&'f c_void>,\n }\n \n-/// A wrapper for a `va_list`\n+/// asm.js ABI implementation of a `va_list`.\n+// asm.js uses the PNaCl ABI, which specifies that a `va_list` is\n+// an array of 4 32-bit integers, according to the old PNaCl docs at\n+// https://web.archive.org/web/20130518054430/https://www.chromium.org/nativeclient/pnacl/bitcode-abi#TOC-Derived-Types\n+// and clang does the same in `CreatePNaClABIBuiltinVaListDecl` from `lib/AST/ASTContext.cpp`\n+#[cfg(all(target_arch = \"asmjs\", not(windows)))]\n+#[repr(C)]\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n #[lang = \"va_list\"]\n-#[derive(Debug)]\n+pub struct VaListImpl<'f> {\n+    inner: [crate::mem::MaybeUninit<i32>; 4],\n+    _marker: PhantomData<&'f c_void>,\n+}\n+\n+#[cfg(all(target_arch = \"asmjs\", not(windows)))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n            issue = \"44930\")]\n+impl<'f> fmt::Debug for VaListImpl<'f> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unsafe {\n+            write!(f, \"va_list* [{:#x}, {:#x}, {:#x}, {:#x}]\",\n+                   self.inner[0].read(), self.inner[1].read(),\n+                   self.inner[2].read(), self.inner[3].read())\n+        }\n+    }\n+}\n+\n+/// A wrapper for a `va_list`\n #[repr(transparent)]\n-pub struct VaList<'a>(&'a mut VaListImpl);\n+#[derive(Debug)]\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+pub struct VaList<'a, 'f: 'a> {\n+    #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n+                  not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n+              all(target_arch = \"aarch64\", target_os = \"ios\"),\n+              windows))]\n+    inner: VaListImpl<'f>,\n+\n+    #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\",\n+                  target_arch = \"x86_64\", target_arch = \"asmjs\"),\n+              any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n+              not(windows)))]\n+    inner: &'a mut VaListImpl<'f>,\n+\n+    _marker: PhantomData<&'a mut VaListImpl<'f>>,\n+}\n+\n+#[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n+              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n+          all(target_arch = \"aarch64\", target_os = \"ios\"),\n+          windows))]\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+impl<'f> VaListImpl<'f> {\n+    /// Convert a `VaListImpl` into a `VaList` that is binary-compatible with C's `va_list`.\n+    #[inline]\n+    pub fn as_va_list<'a>(&'a mut self) -> VaList<'a, 'f> {\n+        VaList {\n+            inner: VaListImpl { ..*self },\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n+\n+#[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\",\n+              target_arch = \"x86_64\", target_arch = \"asmjs\"),\n+          any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n+          not(windows)))]\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+impl<'f> VaListImpl<'f> {\n+    /// Convert a `VaListImpl` into a `VaList` that is binary-compatible with C's `va_list`.\n+    #[inline]\n+    pub fn as_va_list<'a>(&'a mut self) -> VaList<'a, 'f> {\n+        VaList {\n+            inner: self,\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+impl<'a, 'f: 'a> Deref for VaList<'a, 'f> {\n+    type Target = VaListImpl<'f>;\n+\n+    #[inline]\n+    fn deref(&self) -> &VaListImpl<'f> {\n+        &self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+impl<'a, 'f: 'a> DerefMut for VaList<'a, 'f> {\n+    #[inline]\n+    fn deref_mut(&mut self) -> &mut VaListImpl<'f> {\n+        &mut self.inner\n+    }\n+}\n \n // The VaArgSafe trait needs to be used in public interfaces, however, the trait\n // itself must not be allowed to be used outside this module. Allowing users to\n@@ -175,56 +298,76 @@ impl<T> sealed_trait::VaArgSafe for *mut T {}\n            issue = \"44930\")]\n impl<T> sealed_trait::VaArgSafe for *const T {}\n \n-impl<'a> VaList<'a> {\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+#[cfg(not(bootstrap))]\n+impl<'f> VaListImpl<'f> {\n     /// Advance to the next arg.\n-    #[unstable(feature = \"c_variadic\",\n-               reason = \"the `c_variadic` feature has not been properly tested on \\\n-                         all supported platforms\",\n-               issue = \"44930\")]\n+    #[inline]\n     pub unsafe fn arg<T: sealed_trait::VaArgSafe>(&mut self) -> T {\n         va_arg(self)\n     }\n \n     /// Copies the `va_list` at the current location.\n-    #[unstable(feature = \"c_variadic\",\n-               reason = \"the `c_variadic` feature has not been properly tested on \\\n-                         all supported platforms\",\n-               issue = \"44930\")]\n     pub unsafe fn with_copy<F, R>(&self, f: F) -> R\n-            where F: for<'copy> FnOnce(VaList<'copy>) -> R {\n-        #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-                      not(target_arch = \"x86_64\")),\n-                  all(target_arch = \"aarch64\", target_os = \"ios\"),\n-                  windows))]\n-        let mut ap = va_copy(self);\n-        #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n-                  not(windows), not(all(target_arch = \"aarch64\", target_os = \"ios\"))))]\n-        let mut ap_inner = va_copy(self);\n-        #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n-                  not(windows), not(all(target_arch = \"aarch64\", target_os = \"ios\"))))]\n-        let mut ap = VaList(&mut ap_inner);\n-        let ret = f(VaList(ap.0));\n+            where F: for<'copy> FnOnce(VaList<'copy, 'f>) -> R {\n+        let mut ap = self.clone();\n+        let ret = f(ap.as_va_list());\n         va_end(&mut ap);\n         ret\n     }\n }\n \n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+#[cfg(not(bootstrap))]\n+impl<'f> Clone for VaListImpl<'f> {\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        let mut dest = crate::mem::MaybeUninit::uninit();\n+        unsafe {\n+            va_copy(dest.as_mut_ptr(), self);\n+            dest.assume_init()\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+#[cfg(not(bootstrap))]\n+impl<'f> Drop for VaListImpl<'f> {\n+    fn drop(&mut self) {\n+        // FIXME: this should call `va_end`, but there's no clean way to\n+        // guarantee that `drop` always gets inlined into its caller,\n+        // so the `va_end` would get directly called from the same function as\n+        // the corresponding `va_copy`. `man va_end` states that C requires this,\n+        // and LLVM basically follows the C semantics, so we need to make sure\n+        // that `va_end` is always called from the same function as `va_copy`.\n+        // For more details, see https://github.com/rust-lang/rust/pull/59625\n+        // and https://llvm.org/docs/LangRef.html#llvm-va-end-intrinsic.\n+        //\n+        // This works for now, since `va_end` is a no-op on all current LLVM targets.\n+    }\n+}\n+\n extern \"rust-intrinsic\" {\n     /// Destroy the arglist `ap` after initialization with `va_start` or\n     /// `va_copy`.\n-    fn va_end(ap: &mut VaList<'_>);\n+    #[cfg(not(bootstrap))]\n+    fn va_end(ap: &mut VaListImpl<'_>);\n \n     /// Copies the current location of arglist `src` to the arglist `dst`.\n-    #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-                  not(target_arch = \"x86_64\")),\n-              all(target_arch = \"aarch64\", target_os = \"ios\"),\n-              windows))]\n-    fn va_copy<'a>(src: &VaList<'a>) -> VaList<'a>;\n-    #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n-              not(windows), not(all(target_arch = \"aarch64\", target_os = \"ios\"))))]\n-    fn va_copy(src: &VaList<'_>) -> VaListImpl;\n+    #[cfg(not(bootstrap))]\n+    fn va_copy<'f>(dest: *mut VaListImpl<'f>, src: &VaListImpl<'f>);\n \n     /// Loads an argument of type `T` from the `va_list` `ap` and increment the\n     /// argument `ap` points to.\n-    fn va_arg<T: sealed_trait::VaArgSafe>(ap: &mut VaList<'_>) -> T;\n+    #[cfg(not(bootstrap))]\n+    fn va_arg<T: sealed_trait::VaArgSafe>(ap: &mut VaListImpl<'_>) -> T;\n }"}, {"sha": "ae8fdaea28596883509affbf3a5cbeaff4b19ab0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -1674,7 +1674,7 @@ impl<'a> LoweringContext<'a> {\n             }\n             TyKind::Mac(_) => bug!(\"`TyMac` should have been expanded by now.\"),\n             TyKind::CVarArgs => {\n-                // Create the implicit lifetime of the \"spoofed\" `VaList`.\n+                // Create the implicit lifetime of the \"spoofed\" `VaListImpl`.\n                 let span = self.sess.source_map().next_point(t.span.shrink_to_lo());\n                 let lt = self.new_implicit_lifetime(span);\n                 hir::TyKind::CVarArgs(lt)"}, {"sha": "49b6fd67cb748d43f92ff7d765258fd5ee011aa6", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -1930,7 +1930,7 @@ pub enum TyKind {\n     Infer,\n     /// Placeholder for a type that has failed to be defined.\n     Err,\n-    /// Placeholder for C-variadic arguments. We \"spoof\" the `VaList` created\n+    /// Placeholder for C-variadic arguments. We \"spoof\" the `VaListImpl` created\n     /// from the variadic arguments. This type is only valid up to typeck.\n     CVarArgs(Lifetime),\n }"}, {"sha": "9ce1d2eec5d27a80e3065596216afa35addd2cdd", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -2711,7 +2711,7 @@ where\n             }\n \n             // If this is a C-variadic function, this is not the return value,\n-            // and there is one or more fixed arguments; ensure that the `VaList`\n+            // and there is one or more fixed arguments; ensure that the `VaListImpl`\n             // is ignored as an argument.\n             if sig.c_variadic {\n                 match (last_arg_idx, arg_idx) {\n@@ -2722,7 +2722,7 @@ where\n                         };\n                         match ty.sty {\n                             ty::Adt(def, _) if def.did == va_list_did => {\n-                                // This is the \"spoofed\" `VaList`. Set the arguments mode\n+                                // This is the \"spoofed\" `VaListImpl`. Set the arguments mode\n                                 // so that it will be ignored.\n                                 arg.mode = PassMode::Ignore(IgnoreMode::CVarArgs);\n                             }"}, {"sha": "7831c200114a5d2254f648ed43a06245dca61960", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -146,15 +146,8 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 self.va_end(args[0].immediate())\n             }\n             \"va_copy\" => {\n-                let va_list = match (tcx.lang_items().va_list(), &result.layout.ty.sty) {\n-                    (Some(did), ty::Adt(def, _)) if def.did == did => args[0].immediate(),\n-                    (Some(_), _)  => self.load(args[0].immediate(),\n-                                               tcx.data_layout.pointer_align.abi),\n-                    (None, _) => bug!(\"`va_list` language item must be defined\")\n-                };\n                 let intrinsic = self.cx().get_intrinsic(&(\"llvm.va_copy\"));\n-                self.call(intrinsic, &[llresult, va_list], None);\n-                return;\n+                self.call(intrinsic, &[args[0].immediate(), args[1].immediate()], None)\n             }\n             \"va_arg\" => {\n                 match fn_ty.ret.layout.abi {\n@@ -743,37 +736,12 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         self.call(expect, &[cond, self.const_bool(expected)], None)\n     }\n \n-    fn va_start(&mut self, list: &'ll Value) -> &'ll Value {\n-        let target = &self.cx.tcx.sess.target.target;\n-        let arch = &target.arch;\n-        // A pointer to the architecture specific structure is passed to this\n-        // function. For pointer variants (i686, RISC-V, Windows, etc), we\n-        // should do do nothing, as the address to the pointer is needed. For\n-        // architectures with a architecture specific structure (`Aarch64`,\n-        // `X86_64`, etc), this function should load the structure from the\n-        // address provided.\n-        let va_list = match &**arch {\n-            _ if target.options.is_like_windows => list,\n-            \"aarch64\" if target.target_os == \"ios\" => list,\n-            \"aarch64\" | \"x86_64\" | \"powerpc\" =>\n-                self.load(list, self.tcx().data_layout.pointer_align.abi),\n-            _ => list,\n-        };\n+    fn va_start(&mut self, va_list: &'ll Value) -> &'ll Value {\n         let intrinsic = self.cx().get_intrinsic(\"llvm.va_start\");\n         self.call(intrinsic, &[va_list], None)\n     }\n \n-    fn va_end(&mut self, list: &'ll Value) -> &'ll Value {\n-        let target = &self.cx.tcx.sess.target.target;\n-        let arch = &target.arch;\n-        // See the comment in `va_start` for the purpose of the following.\n-        let va_list = match &**arch {\n-            _ if target.options.is_like_windows => list,\n-            \"aarch64\" if target.target_os == \"ios\" => list,\n-            \"aarch64\" | \"x86_64\" | \"powerpc\" =>\n-                self.load(list, self.tcx().data_layout.pointer_align.abi),\n-            _ => list,\n-        };\n+    fn va_end(&mut self, va_list: &'ll Value) -> &'ll Value {\n         let intrinsic = self.cx().get_intrinsic(\"llvm.va_end\");\n         self.call(intrinsic, &[va_list], None)\n     }"}, {"sha": "86b0ad761af6aa3b4c0135bf006d759745d718c3", "filename": "src/librustc_codegen_llvm/va_arg.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fva_arg.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -132,16 +132,6 @@ pub(super) fn emit_va_arg(\n         // For all other architecture/OS combinations fall back to using\n         // the LLVM va_arg instruction.\n         // https://llvm.org/docs/LangRef.html#va-arg-instruction\n-        _ => {\n-            let va_list = if (target.arch == \"aarch64\" ||\n-                              target.arch == \"x86_64\" ||\n-                              target.arch == \"powerpc\") &&\n-                             !target.options.is_like_windows {\n-                bx.load(addr.immediate(), bx.tcx().data_layout.pointer_align.abi)\n-            } else {\n-                addr.immediate()\n-            };\n-            bx.va_arg(va_list, bx.cx.layout_of(target_ty).llvm_type(bx.cx))\n-        }\n+        _ => bx.va_arg(addr.immediate(), bx.cx.layout_of(target_ty).llvm_type(bx.cx))\n     }\n }"}, {"sha": "cee9c9009a22cbc0f25f67b42cd219c652f1b563", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        // The \"spoofed\" `VaList` added to a C-variadic functions signature\n+        // The \"spoofed\" `VaListImpl` added to a C-variadic functions signature\n         // should not be included in the `extra_args` calculation.\n         let extra_args_start_idx = sig.inputs().len() - if sig.c_variadic { 1 } else { 0 };\n         let extra_args = &args[extra_args_start_idx..];\n@@ -687,15 +687,15 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             (&args[..], None)\n         };\n \n-        // Useful determining if the current argument is the \"spoofed\" `VaList`\n+        // Useful determining if the current argument is the \"spoofed\" `VaListImpl`\n         let last_arg_idx = if sig.inputs().is_empty() {\n             None\n         } else {\n             Some(sig.inputs().len() - 1)\n         };\n         'make_args: for (i, arg) in first_args.iter().enumerate() {\n             // If this is a C-variadic function the function signature contains\n-            // an \"spoofed\" `VaList`. This argument is ignored, but we need to\n+            // an \"spoofed\" `VaListImpl`. This argument is ignored, but we need to\n             // populate it with a dummy operand so that the users real arguments\n             // are not overwritten.\n             let i = if sig.c_variadic && last_arg_idx.map(|x| i >= x).unwrap_or(false) {"}, {"sha": "df3823dd9ca25bd0ab0520e9a07a75da44efee0d", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -83,7 +83,7 @@ pub struct FunctionCx<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> {\n     scopes: IndexVec<mir::SourceScope, debuginfo::MirDebugScope<Bx::DIScope>>,\n \n     /// If this function is a C-variadic function, this contains the `PlaceRef` of the\n-    /// \"spoofed\" `VaList`.\n+    /// \"spoofed\" `VaListImpl`.\n     va_list_ref: Option<PlaceRef<'tcx, Bx::Value>>,\n }\n \n@@ -561,35 +561,24 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             indirect_operand.store(bx, tmp);\n             tmp\n         } else {\n+            let tmp = PlaceRef::alloca(bx, arg.layout, &name);\n             if fx.fn_ty.c_variadic && last_arg_idx.map(|idx| arg_index == idx).unwrap_or(false) {\n-                let va_list_impl = match arg_decl.ty.ty_adt_def() {\n-                    Some(adt) => adt.non_enum_variant(),\n-                    None => bug!(\"`va_list` language item improperly constructed\")\n+                let va_list_did = match tcx.lang_items().va_list() {\n+                    Some(did) => did,\n+                    None => bug!(\"`va_list` lang item required for C-variadic functions\"),\n                 };\n-                match tcx.type_of(va_list_impl.fields[0].did).sty {\n-                    ty::Ref(_, ty, _) => {\n-                        // If the underlying structure the `VaList` contains is a structure,\n-                        // we need to allocate it (e.g., X86_64 on Linux).\n-                        let tmp = PlaceRef::alloca(bx, arg.layout, &name);\n-                        if let ty::Adt(..) = ty.sty {\n-                            let layout = bx.layout_of(ty);\n-                            // Create an unnamed allocation for the backing structure\n-                            // and store it in the the spoofed `VaList`.\n-                            let backing = PlaceRef::alloca(bx, layout, \"\");\n-                            bx.store(backing.llval, tmp.llval, layout.align.abi);\n-                        }\n-                        // Call `va_start` on the spoofed `VaList`.\n+                match arg_decl.ty.sty {\n+                    ty::Adt(def, _) if def.did == va_list_did => {\n+                        // Call `va_start` on the spoofed `VaListImpl`.\n                         bx.va_start(tmp.llval);\n                         *va_list_ref = Some(tmp);\n-                        tmp\n-                    }\n-                    _ => bug!(\"improperly constructed `va_list` lang item\"),\n+                    },\n+                    _ => bug!(\"last argument of variadic function is not a `va_list`\")\n                 }\n             } else {\n-                let tmp = PlaceRef::alloca(bx, arg.layout, &name);\n                 bx.store_fn_arg(arg, &mut llarg_idx, tmp);\n-                tmp\n             }\n+            tmp\n         };\n         let upvar_debuginfo = &mir.__upvar_debuginfo_codegen_only_do_not_use;\n         arg_scope.map(|scope| {"}, {"sha": "ede30a0bed756d2c29e7d93be495a9904ccc8e94", "filename": "src/librustc_codegen_ssa/traits/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -20,10 +20,10 @@ pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     fn abort(&mut self);\n     fn assume(&mut self, val: Self::Value);\n     fn expect(&mut self, cond: Self::Value, expected: bool) -> Self::Value;\n-    /// Trait method used to inject `va_start` on the \"spoofed\" `VaList` in\n+    /// Trait method used to inject `va_start` on the \"spoofed\" `VaListImpl` in\n     /// Rust defined C-variadic functions.\n     fn va_start(&mut self, val: Self::Value) -> Self::Value;\n-    /// Trait method used to inject `va_end` on the \"spoofed\" `VaList` before\n+    /// Trait method used to inject `va_end` on the \"spoofed\" `VaListImpl` before\n     /// Rust defined C-variadic functions return.\n     fn va_end(&mut self, val: Self::Value) -> Self::Value;\n }"}, {"sha": "3b159e5da27edcb7537ad57a28b2f3bca0583f14", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -892,7 +892,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let sig = self.cx.tcx.fn_sig(def_id);\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n         let inputs = if sig.c_variadic {\n-            // Don't include the spoofed `VaList` in the functions list\n+            // Don't include the spoofed `VaListImpl` in the functions list\n             // of inputs.\n             &sig.inputs()[..sig.inputs().len() - 1]\n         } else {"}, {"sha": "6767a820e6fd84e3c0f106cbc6a38cf024c9b4a8", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -1695,7 +1695,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         from_hir_call: bool,\n     ) {\n         debug!(\"check_call_inputs({:?}, {:?})\", sig, args);\n-        // Do not count the `VaList` argument as a \"true\" argument to\n+        // Do not count the `VaListImpl` argument as a \"true\" argument to\n         // a C-variadic function.\n         let inputs = if sig.c_variadic {\n             &sig.inputs()[..sig.inputs().len() - 1]"}, {"sha": "8c2b8d1565f2f033e0dbeede85cb654ccbe488c3", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -83,12 +83,15 @@ pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n     let param = |n| tcx.mk_ty_param(n, InternedString::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n \n-    let mk_va_list_ty = || {\n+    let mk_va_list_ty = |mutbl| {\n         tcx.lang_items().va_list().map(|did| {\n             let region = tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(0)));\n             let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n             let va_list_ty = tcx.type_of(did).subst(tcx, &[region.into()]);\n-            tcx.mk_mut_ref(tcx.mk_region(env_region), va_list_ty)\n+            (tcx.mk_ref(tcx.mk_region(env_region), ty::TypeAndMut {\n+                ty: va_list_ty,\n+                mutbl\n+            }), va_list_ty)\n         })\n     };\n \n@@ -340,42 +343,25 @@ pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n             }\n \n             \"va_start\" | \"va_end\" => {\n-                match mk_va_list_ty() {\n-                    Some(va_list_ty) => (0, vec![va_list_ty], tcx.mk_unit()),\n+                match mk_va_list_ty(hir::MutMutable) {\n+                    Some((va_list_ref_ty, _)) => (0, vec![va_list_ref_ty], tcx.mk_unit()),\n                     None => bug!(\"`va_list` language item needed for C-variadic intrinsics\")\n                 }\n             }\n \n             \"va_copy\" => {\n-                match tcx.lang_items().va_list() {\n-                    Some(did) => {\n-                        let region = tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(0)));\n-                        let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n-                        let va_list_ty = tcx.type_of(did).subst(tcx, &[region.into()]);\n-                        let ret_ty = match va_list_ty.sty {\n-                            ty::Adt(def, _) if def.is_struct() => {\n-                                let fields = &def.non_enum_variant().fields;\n-                                match tcx.type_of(fields[0].did).subst(tcx, &[region.into()]).sty {\n-                                    ty::Ref(_, element_ty, _) => match element_ty.sty {\n-                                        ty::Adt(..) => element_ty,\n-                                        _ => va_list_ty\n-                                    }\n-                                    _ => bug!(\"va_list structure is invalid\")\n-                                }\n-                            }\n-                            _ => {\n-                                bug!(\"va_list structure is invalid\")\n-                            }\n-                        };\n-                        (0, vec![tcx.mk_imm_ref(tcx.mk_region(env_region), va_list_ty)], ret_ty)\n+                match mk_va_list_ty(hir::MutImmutable) {\n+                    Some((va_list_ref_ty, va_list_ty)) => {\n+                        let va_list_ptr_ty = tcx.mk_mut_ptr(va_list_ty);\n+                        (0, vec![va_list_ptr_ty, va_list_ref_ty], tcx.mk_unit())\n                     }\n                     None => bug!(\"`va_list` language item needed for C-variadic intrinsics\")\n                 }\n             }\n \n             \"va_arg\" => {\n-                match mk_va_list_ty() {\n-                    Some(va_list_ty) => (1, vec![va_list_ty], param(0)),\n+                match mk_va_list_ty(hir::MutMutable) {\n+                    Some((va_list_ref_ty, _)) => (1, vec![va_list_ref_ty], param(0)),\n                     None => bug!(\"`va_list` language item needed for C-variadic intrinsics\")\n                 }\n             }"}, {"sha": "69fcfa8b39ca5e5ea4ad1b1bbcae90266a823280", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -170,7 +170,7 @@ pub use core::ffi::c_void;\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\",\n            issue = \"44930\")]\n-pub use core::ffi::VaList;\n+pub use core::ffi::{VaList, VaListImpl};\n \n mod c_str;\n mod os_str;"}, {"sha": "7f2afd9c5715c2b0d44cda7595ed86723a60620c", "filename": "src/test/auxiliary/rust_test_helpers.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -216,20 +216,27 @@ uint64_t get_c_many_params(void *a, void *b, void *c, void *d, struct quad f) {\n }\n \n // Calculates the average of `(x + y) / n` where x: i64, y: f64. There must be exactly n pairs\n-// passed as variadic arguments.\n-double rust_interesting_average(uint64_t n, ...) {\n-    va_list pairs;\n+// passed as variadic arguments. There are two versions of this function: the\n+// variadic one, and the one that takes a `va_list`.\n+double rust_valist_interesting_average(uint64_t n, va_list pairs) {\n     double sum = 0.0;\n     int i;\n-    va_start(pairs, n);\n     for(i = 0; i < n; i += 1) {\n         sum += (double)va_arg(pairs, int64_t);\n         sum += va_arg(pairs, double);\n     }\n-    va_end(pairs);\n     return sum / n;\n }\n \n+double rust_interesting_average(uint64_t n, ...) {\n+    double sum;\n+    va_list pairs;\n+    va_start(pairs, n);\n+    sum = rust_valist_interesting_average(n, pairs);\n+    va_end(pairs);\n+    return sum;\n+}\n+\n int32_t rust_int8_to_int32(int8_t x) {\n     return (int32_t)x;\n }"}, {"sha": "4c61c4fcf68d3289d8bc3a4a4eda52256ed43cfb", "filename": "src/test/codegen/c-variadic-copy.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fcodegen%2Fc-variadic-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fcodegen%2Fc-variadic-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic-copy.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -0,0 +1,16 @@\n+// Tests that `VaListImpl::clone` gets inlined into a call to `llvm.va_copy`\n+\n+#![crate_type = \"lib\"]\n+#![feature(c_variadic)]\n+#![no_std]\n+use core::ffi::VaList;\n+\n+extern \"C\" {\n+    fn foreign_c_variadic_1(_: VaList, ...);\n+}\n+\n+pub unsafe extern \"C\" fn clone_variadic(ap: VaList) {\n+    let mut ap2 = ap.clone();\n+    // CHECK: call void @llvm.va_copy\n+    foreign_c_variadic_1(ap2.as_va_list(), 42i32);\n+}"}, {"sha": "969dce80f587153ccbda12de9f3fc27a7f528fb3", "filename": "src/test/codegen/c-variadic-opt.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fcodegen%2Fc-variadic-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fcodegen%2Fc-variadic-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic-opt.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -10,10 +10,21 @@ extern \"C\" {\n }\n \n // Ensure that `va_start` and `va_end` are properly injected even\n-// when the \"spoofed\" `VaList` is not used.\n+// when the \"spoofed\" `VaListImpl` is not used.\n #[no_mangle]\n pub unsafe extern \"C\" fn c_variadic_no_use(fmt: *const i8, mut ap: ...) -> i32 {\n     // CHECK: call void @llvm.va_start\n-    vprintf(fmt, ap)\n+    vprintf(fmt, ap.as_va_list())\n+    // CHECK: call void @llvm.va_end\n+}\n+\n+// Check that `VaListImpl::clone` gets inlined into a direct call to `llvm.va_copy`\n+#[no_mangle]\n+pub unsafe extern \"C\" fn c_variadic_clone(fmt: *const i8, mut ap: ...) -> i32 {\n+    // CHECK: call void @llvm.va_start\n+    let mut ap2 = ap.clone();\n+    // CHECK: call void @llvm.va_copy\n+    let res = vprintf(fmt, ap2.as_va_list());\n+    res\n     // CHECK: call void @llvm.va_end\n }"}, {"sha": "13be5ced27fa9435d4e942563a2eac83ed238148", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -23,7 +23,7 @@ pub unsafe extern \"C\" fn use_foreign_c_variadic_0() {\n }\n \n // Ensure that we do not remove the `va_list` passed to the foreign function when\n-// removing the \"spoofed\" `VaList` that is used by Rust defined C-variadics.\n+// removing the \"spoofed\" `VaListImpl` that is used by Rust defined C-variadics.\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_0(ap: VaList) {\n     // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap)\n     foreign_c_variadic_1(ap);"}, {"sha": "a0a5b141ec0e19df5eb6b2db83b757a070643b88", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/checkrust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -88,6 +88,6 @@ pub unsafe extern \"C\" fn check_varargs_1(_: c_int, mut ap: ...) -> usize {\n }\n \n #[no_mangle]\n-pub unsafe extern \"C\" fn check_varargs_2(_: c_int, mut ap: ...) -> usize {\n+pub unsafe extern \"C\" fn check_varargs_2(_: c_int, _ap: ...) -> usize {\n     0\n }"}, {"sha": "d6fbb1773b29fb103ad3d7fbac70f0500e41ccea", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -1,8 +1,45 @@\n // ignore-wasm32-bare no libc to test ffi with\n+#![feature(c_variadic)]\n+\n+use std::ffi::VaList;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     fn rust_interesting_average(_: u64, ...) -> f64;\n+\n+    // FIXME: we need to disable this lint for `VaList`,\n+    // since it contains a `MaybeUninit<i32>` on the asmjs target,\n+    // and this type isn't FFI-safe. This is OK for now,\n+    // since the type is layout-compatible with `i32`.\n+    #[cfg_attr(target_arch = \"asmjs\", allow(improper_ctypes))]\n+    fn rust_valist_interesting_average(_: u64, _: VaList) -> f64;\n+}\n+\n+pub unsafe extern \"C\" fn test_valist_forward(n: u64, mut ap: ...) -> f64 {\n+    rust_valist_interesting_average(n, ap.as_va_list())\n+}\n+\n+pub unsafe extern \"C\" fn test_va_copy(_: u64, mut ap: ...) {\n+    let mut ap2 = ap.clone();\n+    assert_eq!(rust_valist_interesting_average(2, ap2.as_va_list()) as i64, 30);\n+\n+    // Advance one pair in the copy before checking\n+    let mut ap2 = ap.clone();\n+    let _ = ap2.arg::<u64>();\n+    let _ = ap2.arg::<f64>();\n+    assert_eq!(rust_valist_interesting_average(2, ap2.as_va_list()) as i64, 50);\n+\n+    // Advance one pair in the original\n+    let _ = ap.arg::<u64>();\n+    let _ = ap.arg::<f64>();\n+\n+    let mut ap2 = ap.clone();\n+    assert_eq!(rust_valist_interesting_average(2, ap2.as_va_list()) as i64, 50);\n+\n+    let mut ap2 = ap.clone();\n+    let _ = ap2.arg::<u64>();\n+    let _ = ap2.arg::<f64>();\n+    assert_eq!(rust_valist_interesting_average(2, ap2.as_va_list()) as i64, 70);\n }\n \n pub fn main() {\n@@ -35,4 +72,12 @@ pub fn main() {\n         let x: unsafe extern fn(u64, ...) -> f64 = rust_interesting_average;\n         call(x);\n     }\n+\n+    unsafe {\n+        assert_eq!(test_valist_forward(2, 10i64, 10f64, 20i64, 20f64) as i64, 30);\n+    }\n+\n+    unsafe {\n+        test_va_copy(4, 10i64, 10f64, 20i64, 20f64, 30i64, 30f64, 40i64, 40f64);\n+    }\n }"}, {"sha": "695eba2a7ee408e3cdd55232a9ecd47f9f0ddcea", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -29,15 +29,15 @@ LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |                                                        ^^^ expected non-variadic fn, found variadic function\n    |\n    = note: expected type `unsafe extern \"C\" fn(isize, u8)`\n-              found type `for<'r> unsafe extern \"C\" fn(isize, u8, std::ffi::VaList<'r>, ...) {foo}`\n+              found type `for<'r> unsafe extern \"C\" fn(isize, u8, std::ffi::VaListImpl<'r>, ...) {foo}`\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:20:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |                                                      ^^^ expected variadic fn, found non-variadic function\n    |\n-   = note: expected type `for<'r> extern \"C\" fn(isize, u8, std::ffi::VaList<'r>, ...)`\n+   = note: expected type `for<'r> extern \"C\" fn(isize, u8, std::ffi::VaListImpl<'r>, ...)`\n               found type `extern \"C\" fn(isize, u8) {bar}`\n \n error[E0617]: can't pass `f32` to variadic function"}, {"sha": "3c5131835b572602cd1c26fb869bcbeca5729321", "filename": "src/test/ui/c-variadic/variadic-ffi-4.nll.stderr", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -1,16 +1,16 @@\n error[E0621]: explicit lifetime required in the type of `ap`\n   --> $DIR/variadic-ffi-4.rs:8:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n-   |                                                       --- help: add explicit lifetime `'a` to the type of `ap`: `core::ffi::VaList<'a>`\n+LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n+   |                                                       --- help: add explicit lifetime `'f` to the type of `ap`: `core::ffi::VaListImpl<'f>`\n LL |     ap\n-   |     ^^ lifetime `'a` required\n+   |     ^^ lifetime `'f` required\n \n error[E0621]: explicit lifetime required in the type of `ap`\n   --> $DIR/variadic-ffi-4.rs:12:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n-   |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaList<'static>`\n+LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n+   |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaListImpl<'static>`\n LL |     ap\n    |     ^^ lifetime `'static` required\n \n@@ -20,51 +20,51 @@ error: lifetime may not live long enough\n LL |     let _ = ap.with_copy(|ap| { ap });\n    |                           ---   ^^ returning this value requires that `'1` must outlive `'2`\n    |                           | |\n-   |                           | return type of closure is core::ffi::VaList<'2>\n-   |                           has type `core::ffi::VaList<'1>`\n+   |                           | return type of closure is core::ffi::VaList<'2, '_>\n+   |                           has type `core::ffi::VaList<'1, '_>`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:20:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-   |                                               -------               ------- has type `core::ffi::VaList<'1>`\n+LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'1>`\n    |                                               |\n-   |                                               has type `&mut core::ffi::VaList<'2>`\n+   |                                               has type `&mut core::ffi::VaListImpl<'2>`\n LL |     *ap0 = ap1;\n-   |     ^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+   |     ^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:24:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n-   |                                               ---               ------- has type `core::ffi::VaList<'2>`\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               ---                   ------- has type `core::ffi::VaListImpl<'2>`\n    |                                               |\n-   |                                               has type `&mut core::ffi::VaList<'1>`\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:24:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n-   |                                               ---               ------- has type `core::ffi::VaList<'1>`\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               ---                   ------- has type `core::ffi::VaListImpl<'1>`\n    |                                               |\n-   |                                               has type `&mut core::ffi::VaList<'2>`\n+   |                                               has type `&mut core::ffi::VaListImpl<'2>`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error[E0384]: cannot assign to immutable argument `ap0`\n   --> $DIR/variadic-ffi-4.rs:24:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               --- help: make this binding mutable: `mut ap0`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ cannot assign to immutable argument\n \n error[E0597]: `ap1` does not live long enough\n   --> $DIR/variadic-ffi-4.rs:24:11\n    |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                                    - let's call the lifetime of this reference `'1`\n LL |     ap0 = &mut ap1;\n    |     ------^^^^^^^^\n@@ -73,9 +73,19 @@ LL |     ap0 = &mut ap1;\n    |     assignment requires that `ap1` is borrowed for `'1`\n ...\n LL | }\n-   |  - `ap1` dropped here while still borrowed\n+   | - `ap1` dropped here while still borrowed\n \n-error: aborting due to 8 previous errors\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:32:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'1>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'2>`\n+LL |     *ap0 = ap1.clone();\n+   |     ^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0384, E0597, E0621.\n For more information about an error, try `rustc --explain E0384`."}, {"sha": "07c32ecbfc2dc6e42921f4c146ebd7c3d7383e3f", "filename": "src/test/ui/c-variadic/variadic-ffi-4.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -2,28 +2,32 @@\n #![no_std]\n #![feature(c_variadic)]\n \n-use core::ffi::VaList;\n+use core::ffi::{VaList, VaListImpl};\n \n-pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n+pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n     ap //~ ERROR: explicit lifetime required\n }\n \n-pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n+pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n     ap //~ ERROR: explicit lifetime required\n }\n \n pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n     let _ = ap.with_copy(|ap| { ap }); //~ ERROR: cannot infer an appropriate lifetime\n }\n \n-pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n+pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n     *ap0 = ap1; //~ ERROR: mismatched types\n }\n \n-pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n     ap0 = &mut ap1;\n-    //~^ ERROR: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n+    //~^ ERROR: a value of type `core::ffi::VaListImpl<'_>` is borrowed for too long\n     //~^^ ERROR: mismatched types\n     //~^^^ ERROR: mismatched types\n     //~^^^^ ERROR: cannot infer an appropriate lifetime\n }\n+\n+pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+    *ap0 = ap1.clone(); //~ ERROR: cannot infer an appropriate lifetime\n+}"}, {"sha": "72d4d8b63445ac07596ec3195bb288f9086db9bd", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 54, "deletions": 27, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -1,16 +1,16 @@\n error[E0621]: explicit lifetime required in the type of `ap`\n   --> $DIR/variadic-ffi-4.rs:8:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n-   |                                                       --- help: add explicit lifetime `'a` to the type of `ap`: `core::ffi::VaList<'a>`\n+LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n+   |                                                       --- help: add explicit lifetime `'f` to the type of `ap`: `core::ffi::VaListImpl<'f>`\n LL |     ap\n-   |     ^^ lifetime `'a` required\n+   |     ^^ lifetime `'f` required\n \n error[E0621]: explicit lifetime required in the type of `ap`\n   --> $DIR/variadic-ffi-4.rs:12:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n-   |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaList<'static>`\n+LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n+   |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaListImpl<'static>`\n LL |     ap\n    |     ^^ lifetime `'static` required\n \n@@ -26,14 +26,14 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n LL |     let _ = ap.with_copy(|ap| { ap });\n    |                          ^^^^^^^^^^^\n    = note: ...so that the expression is assignable:\n-           expected core::ffi::VaList<'_>\n-              found core::ffi::VaList<'_>\n+           expected core::ffi::VaList<'_, '_>\n+              found core::ffi::VaList<'_, '_>\n note: but, the lifetime must be valid for the method call at 16:13...\n   --> $DIR/variadic-ffi-4.rs:16:13\n    |\n LL |     let _ = ap.with_copy(|ap| { ap });\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...so type `core::ffi::VaList<'_>` of expression is valid during the expression\n+note: ...so type `core::ffi::VaList<'_, '_>` of expression is valid during the expression\n   --> $DIR/variadic-ffi-4.rs:16:13\n    |\n LL |     let _ = ap.with_copy(|ap| { ap });\n@@ -45,24 +45,24 @@ error[E0308]: mismatched types\n LL |     *ap0 = ap1;\n    |            ^^^ lifetime mismatch\n    |\n-   = note: expected type `core::ffi::VaList<'_>`\n-              found type `core::ffi::VaList<'_>`\n+   = note: expected type `core::ffi::VaListImpl<'_>`\n+              found type `core::ffi::VaListImpl<'_>`\n note: the anonymous lifetime #3 defined on the function body at 19:1...\n   --> $DIR/variadic-ffi-4.rs:19:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1;\n LL | | }\n    | |_^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 19:1\n   --> $DIR/variadic-ffi-4.rs:19:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1;\n LL | | }\n    | |_^\n \n-error[E0490]: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n+error[E0490]: a value of type `core::ffi::VaListImpl<'_>` is borrowed for too long\n   --> $DIR/variadic-ffi-4.rs:24:11\n    |\n LL |     ap0 = &mut ap1;\n@@ -71,7 +71,7 @@ LL |     ap0 = &mut ap1;\n note: the type is valid for the anonymous lifetime #1 defined on the function body at 23:1\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n@@ -82,7 +82,7 @@ LL | | }\n note: but the borrow lasts for the anonymous lifetime #3 defined on the function body at 23:1\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n@@ -97,12 +97,12 @@ error[E0308]: mismatched types\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&mut core::ffi::VaList<'_>`\n-              found type `&mut core::ffi::VaList<'_>`\n+   = note: expected type `&mut core::ffi::VaListImpl<'_>`\n+              found type `&mut core::ffi::VaListImpl<'_>`\n note: the anonymous lifetime #3 defined on the function body at 23:1...\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n@@ -113,7 +113,7 @@ LL | | }\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 23:1\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n@@ -128,12 +128,12 @@ error[E0308]: mismatched types\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&mut core::ffi::VaList<'_>`\n-              found type `&mut core::ffi::VaList<'_>`\n+   = note: expected type `&mut core::ffi::VaListImpl<'_>`\n+              found type `&mut core::ffi::VaListImpl<'_>`\n note: the anonymous lifetime #2 defined on the function body at 23:1...\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n@@ -144,7 +144,7 @@ LL | | }\n note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 23:1\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n@@ -162,23 +162,23 @@ LL |     ap0 = &mut ap1;\n note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 23:1...\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n LL | |\n LL | |\n LL | | }\n    | |_^\n-note: ...so that the type `core::ffi::VaList<'_>` is not borrowed for too long\n+note: ...so that the type `core::ffi::VaListImpl<'_>` is not borrowed for too long\n   --> $DIR/variadic-ffi-4.rs:24:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the function body at 23:1...\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n+LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n@@ -192,7 +192,34 @@ note: ...so that reference does not outlive borrowed content\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/variadic-ffi-4.rs:32:16\n+   |\n+LL |     *ap0 = ap1.clone();\n+   |                ^^^^^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 31:1...\n+  --> $DIR/variadic-ffi-4.rs:31:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1.clone();\n+LL | | }\n+   | |_^\n+   = note: ...so that the types are compatible:\n+           expected &core::ffi::VaListImpl<'_>\n+              found &core::ffi::VaListImpl<'_>\n+note: but, the lifetime must be valid for the anonymous lifetime #2 defined on the function body at 31:1...\n+  --> $DIR/variadic-ffi-4.rs:31:1\n+   |\n+LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL | |     *ap0 = ap1.clone();\n+LL | | }\n+   | |_^\n+   = note: ...so that the expression is assignable:\n+           expected core::ffi::VaListImpl<'_>\n+              found core::ffi::VaListImpl<'_>\n+\n+error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0308, E0621.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "439c3db57686437a856cc33514664eb08e99b412", "filename": "src/test/ui/error-codes/E0617.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Ferror-codes%2FE0617.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Ferror-codes%2FE0617.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0617.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -22,7 +22,7 @@ fn main() {\n         //~^ ERROR can't pass `u16` to variadic function\n         //~| HELP cast the value to `c_uint`\n         printf(::std::ptr::null(), printf);\n-        //~^ ERROR can't pass `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaList<'r>, ...) {printf}` to variadic function\n-        //~| HELP cast the value to `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaList<'r>, ...)`\n+        //~^ ERROR can't pass `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...) {printf}` to variadic function\n+        //~| HELP cast the value to `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...)`\n     }\n }"}, {"sha": "d866320bbcdf7dfda746d46c45f8364e1039f901", "filename": "src/test/ui/error-codes/E0617.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -28,15 +28,15 @@ error[E0617]: can't pass `u16` to variadic function\n LL |         printf(::std::ptr::null(), 0u16);\n    |                                    ^^^^ help: cast the value to `c_uint`: `0u16 as c_uint`\n \n-error[E0617]: can't pass `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaList<'r>, ...) {printf}` to variadic function\n+error[E0617]: can't pass `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...) {printf}` to variadic function\n   --> $DIR/E0617.rs:24:36\n    |\n LL |         printf(::std::ptr::null(), printf);\n    |                                    ^^^^^^\n-help: cast the value to `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaList<'r>, ...)`\n+help: cast the value to `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...)`\n    |\n-LL |         printf(::std::ptr::null(), printf as for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaList<'r>, ...));\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         printf(::std::ptr::null(), printf as for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...));\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "52bb118fa23a016cf35198cad0d8107175eb27f5", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ea653aee231114acbe6d4b3c7b1d692772d060/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=b9ea653aee231114acbe6d4b3c7b1d692772d060", "patch": "@@ -57,7 +57,7 @@ fn main() {\n         }\n \n         // Test type mangling, by putting them in an `impl` header.\n-        // FIXME(eddyb) test C varargs when `core::ffi::VaList` stops leaking into the signature\n+        // FIXME(eddyb) test C varargs when `core::ffi::VaListImpl` stops leaking into the signature\n         // (which is a problem because `core` has an unpredictable hash) - see also #44930.\n         impl Bar for [&'_ (dyn Foo<Assoc = extern fn(&u8, /*...*/)> + AutoTrait); 3] {\n             #[rustc_symbol_name]"}]}