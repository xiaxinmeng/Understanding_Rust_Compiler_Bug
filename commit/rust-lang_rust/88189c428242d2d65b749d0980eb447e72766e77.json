{"sha": "88189c428242d2d65b749d0980eb447e72766e77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MTg5YzQyODI0MmQyZDY1Yjc0OWQwOTgwZWI0NDdlNzI3NjZlNzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-09T19:52:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-09T19:52:06Z"}, "message": "drop old interning infra", "tree": {"sha": "f6e3d193359a1e29134d9856baaa9a9305a0220c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e3d193359a1e29134d9856baaa9a9305a0220c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88189c428242d2d65b749d0980eb447e72766e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88189c428242d2d65b749d0980eb447e72766e77", "html_url": "https://github.com/rust-lang/rust/commit/88189c428242d2d65b749d0980eb447e72766e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88189c428242d2d65b749d0980eb447e72766e77/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b993a97602da5ddee4033d4d76a68471f8d1ee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b993a97602da5ddee4033d4d76a68471f8d1ee1", "html_url": "https://github.com/rust-lang/rust/commit/6b993a97602da5ddee4033d4d76a68471f8d1ee1"}], "stats": {"total": 109, "additions": 1, "deletions": 108}, "files": [{"sha": "1cd400752351739d4bba0d0818f4361a64ad1c90", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88189c428242d2d65b749d0980eb447e72766e77/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88189c428242d2d65b749d0980eb447e72766e77/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=88189c428242d2d65b749d0980eb447e72766e77", "patch": "@@ -1,11 +1,8 @@\n //! ra_db defines basic database traits. The concrete DB is defined by ra_ide_api.\n mod cancellation;\n mod input;\n-mod loc2id;\n \n-use std::{\n-    panic, sync::Arc,\n-};\n+use std::{panic, sync::Arc};\n \n use ra_syntax::{TextUnit, TextRange, SourceFile, TreeArc};\n use relative_path::RelativePathBuf;\n@@ -16,7 +13,6 @@ pub use crate::{\n     input::{\n         FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, Dependency, Edition,\n     },\n-    loc2id::LocationInterner,\n };\n \n pub trait CheckCanceled: panic::RefUnwindSafe {"}, {"sha": "eae64a4ebc664a8398b4cb445d0e9b5475bf10b4", "filename": "crates/ra_db/src/loc2id.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/6b993a97602da5ddee4033d4d76a68471f8d1ee1/crates%2Fra_db%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b993a97602da5ddee4033d4d76a68471f8d1ee1/crates%2Fra_db%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Floc2id.rs?ref=6b993a97602da5ddee4033d4d76a68471f8d1ee1", "patch": "@@ -1,103 +0,0 @@\n-use std::{panic, hash::Hash};\n-\n-use parking_lot::Mutex;\n-use rustc_hash::FxHashMap;\n-use ra_arena::{Arena, ArenaId};\n-\n-/// There are two principle ways to refer to things:\n-///   - by their location (module in foo/bar/baz.rs at line 42)\n-///   - by their numeric id (module `ModuleId(42)`)\n-///\n-/// The first one is more powerful (you can actually find the thing in question\n-/// by id), but the second one is so much more compact.\n-///\n-/// `Loc2IdMap` allows us to have a cake an eat it as well: by maintaining a\n-/// bidirectional mapping between positional and numeric ids, we can use compact\n-/// representation which still allows us to get the actual item.\n-#[derive(Debug)]\n-struct Loc2IdMap<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    id2loc: Arena<ID, LOC>,\n-    loc2id: FxHashMap<LOC, ID>,\n-}\n-\n-impl<LOC, ID> Default for Loc2IdMap<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    fn default() -> Self {\n-        Loc2IdMap { id2loc: Arena::default(), loc2id: FxHashMap::default() }\n-    }\n-}\n-\n-impl<LOC, ID> Loc2IdMap<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    pub fn len(&self) -> usize {\n-        self.id2loc.len()\n-    }\n-\n-    pub fn loc2id(&mut self, loc: &LOC) -> ID {\n-        match self.loc2id.get(loc) {\n-            Some(id) => return id.clone(),\n-            None => (),\n-        }\n-        let id = self.id2loc.alloc(loc.clone());\n-        self.loc2id.insert(loc.clone(), id.clone());\n-        id\n-    }\n-\n-    pub fn id2loc(&self, id: ID) -> LOC {\n-        self.id2loc[id].clone()\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct LocationInterner<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    map: Mutex<Loc2IdMap<LOC, ID>>,\n-}\n-\n-impl<LOC, ID> panic::RefUnwindSafe for LocationInterner<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-    ID: panic::RefUnwindSafe,\n-    LOC: panic::RefUnwindSafe,\n-{\n-}\n-\n-impl<LOC, ID> Default for LocationInterner<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    fn default() -> Self {\n-        LocationInterner { map: Default::default() }\n-    }\n-}\n-\n-impl<LOC, ID> LocationInterner<LOC, ID>\n-where\n-    ID: ArenaId + Clone,\n-    LOC: Clone + Eq + Hash,\n-{\n-    pub fn len(&self) -> usize {\n-        self.map.lock().len()\n-    }\n-    pub fn loc2id(&self, loc: &LOC) -> ID {\n-        self.map.lock().loc2id(loc)\n-    }\n-    pub fn id2loc(&self, id: ID) -> LOC {\n-        self.map.lock().id2loc(id)\n-    }\n-}"}]}