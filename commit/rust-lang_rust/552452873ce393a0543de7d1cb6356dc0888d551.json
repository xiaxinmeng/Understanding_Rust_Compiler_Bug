{"sha": "552452873ce393a0543de7d1cb6356dc0888d551", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MjQ1Mjg3M2NlMzkzYTA1NDNkZTdkMWNiNjM1NmRjMDg4OGQ1NTE=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-17T07:55:16Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-17T08:05:50Z"}, "message": "Add tests for lossy whole number float literals", "tree": {"sha": "4046ccf16ce8e01ef2219003a5c52c9406d5f037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4046ccf16ce8e01ef2219003a5c52c9406d5f037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552452873ce393a0543de7d1cb6356dc0888d551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552452873ce393a0543de7d1cb6356dc0888d551", "html_url": "https://github.com/rust-lang/rust/commit/552452873ce393a0543de7d1cb6356dc0888d551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552452873ce393a0543de7d1cb6356dc0888d551/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0532f3e521293d4fa01518a238ea61665b11a3aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0532f3e521293d4fa01518a238ea61665b11a3aa", "html_url": "https://github.com/rust-lang/rust/commit/0532f3e521293d4fa01518a238ea61665b11a3aa"}], "stats": {"total": 132, "additions": 121, "deletions": 11}, "files": [{"sha": "f32307ce910754647cf64b2e01f37f0ce61d3613", "filename": "tests/ui/excessive_precision.fixed", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/552452873ce393a0543de7d1cb6356dc0888d551/tests%2Fui%2Fexcessive_precision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/552452873ce393a0543de7d1cb6356dc0888d551/tests%2Fui%2Fexcessive_precision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.fixed?ref=552452873ce393a0543de7d1cb6356dc0888d551", "patch": "@@ -12,12 +12,12 @@ fn main() {\n     const GOOD64_SM: f32 = 0.000_000_000_000_000_1;\n     const GOOD64_DOT: f32 = 10_000_000_000_000_000.0;\n \n-    const BAD32_1: f32 = 0.123_456_79;\n+    const BAD32_1: f32 = 0.123_456_79_f32;\n     const BAD32_2: f32 = 0.123_456_79;\n     const BAD32_3: f32 = 0.1;\n     const BAD32_EDGE: f32 = 1.000_001;\n \n-    const BAD64_1: f64 = 0.123_456_789_012_345_66;\n+    const BAD64_1: f64 = 0.123_456_789_012_345_66_f64;\n     const BAD64_2: f64 = 0.123_456_789_012_345_66;\n     const BAD64_3: f64 = 0.1;\n \n@@ -34,11 +34,11 @@ fn main() {\n     let good64_inf = 0.123_456_789_012;\n \n     let bad32: f32 = 1.123_456_8;\n-    let bad32_suf: f32 = 1.123_456_8;\n-    let bad32_inf = 1.123_456_8;\n+    let bad32_suf: f32 = 1.123_456_8_f32;\n+    let bad32_inf = 1.123_456_8_f32;\n \n     let bad64: f64 = 0.123_456_789_012_345_66;\n-    let bad64_suf: f64 = 0.123_456_789_012_345_66;\n+    let bad64_suf: f64 = 0.123_456_789_012_345_66_f64;\n     let bad64_inf = 0.123_456_789_012_345_66;\n \n     // Vectors\n@@ -60,4 +60,26 @@ fn main() {\n \n     // issue #2840\n     let num = 0.000_000_000_01e-10f64;\n+\n+    // Lossy whole-number float literals\n+    let _: f32 = 16_777_216.0;\n+    let _: f32 = 16_777_220.0;\n+    let _: f32 = 16_777_220.0;\n+    let _: f32 = 16_777_220.0;\n+    let _ = 16_777_220.0_f32;\n+    let _: f32 = -16_777_220.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _ = 9_007_199_254_740_992.0_f64;\n+    let _: f64 = -9_007_199_254_740_992.0;\n+\n+    // Lossless whole number float literals\n+    let _: f32 = 16_777_216.0;\n+    let _: f32 = 16_777_218.0;\n+    let _: f32 = 16_777_220.0;\n+    let _: f32 = -16_777_216.0;\n+    let _: f32 = -16_777_220.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _: f64 = -9_007_199_254_740_992.0;\n }"}, {"sha": "a3d317400278adc24f5024963b40b969b32d6316", "filename": "tests/ui/excessive_precision.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/552452873ce393a0543de7d1cb6356dc0888d551/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552452873ce393a0543de7d1cb6356dc0888d551/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=552452873ce393a0543de7d1cb6356dc0888d551", "patch": "@@ -60,4 +60,26 @@ fn main() {\n \n     // issue #2840\n     let num = 0.000_000_000_01e-10f64;\n+\n+    // Lossy whole-number float literals\n+    let _: f32 = 16_777_217.0;\n+    let _: f32 = 16_777_219.0;\n+    let _: f32 = 16_777_219.;\n+    let _: f32 = 16_777_219.000;\n+    let _ = 16_777_219f32;\n+    let _: f32 = -16_777_219.0;\n+    let _: f64 = 9_007_199_254_740_993.0;\n+    let _: f64 = 9_007_199_254_740_993.;\n+    let _: f64 = 9_007_199_254_740_993.000;\n+    let _ = 9_007_199_254_740_993f64;\n+    let _: f64 = -9_007_199_254_740_993.0;\n+\n+    // Lossless whole number float literals\n+    let _: f32 = 16_777_216.0;\n+    let _: f32 = 16_777_218.0;\n+    let _: f32 = 16_777_220.0;\n+    let _: f32 = -16_777_216.0;\n+    let _: f32 = -16_777_220.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _: f64 = -9_007_199_254_740_992.0;\n }"}, {"sha": "8941bcfd86d894fce44a0098671e2619b7548b76", "filename": "tests/ui/excessive_precision.stderr", "status": "modified", "additions": 72, "deletions": 6, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/552452873ce393a0543de7d1cb6356dc0888d551/tests%2Fui%2Fexcessive_precision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/552452873ce393a0543de7d1cb6356dc0888d551/tests%2Fui%2Fexcessive_precision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.stderr?ref=552452873ce393a0543de7d1cb6356dc0888d551", "patch": "@@ -2,7 +2,7 @@ error: float has excessive precision\n   --> $DIR/excessive_precision.rs:15:26\n    |\n LL |     const BAD32_1: f32 = 0.123_456_789_f32;\n-   |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_79`\n+   |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_79_f32`\n    |\n    = note: `-D clippy::excessive-precision` implied by `-D warnings`\n \n@@ -28,7 +28,7 @@ error: float has excessive precision\n   --> $DIR/excessive_precision.rs:20:26\n    |\n LL |     const BAD64_1: f64 = 0.123_456_789_012_345_67f64;\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66_f64`\n \n error: float has excessive precision\n   --> $DIR/excessive_precision.rs:21:26\n@@ -58,13 +58,13 @@ error: float has excessive precision\n   --> $DIR/excessive_precision.rs:37:26\n    |\n LL |     let bad32_suf: f32 = 1.123_456_789_f32;\n-   |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8`\n+   |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8_f32`\n \n error: float has excessive precision\n   --> $DIR/excessive_precision.rs:38:21\n    |\n LL |     let bad32_inf = 1.123_456_789_f32;\n-   |                     ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8`\n+   |                     ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8_f32`\n \n error: float has excessive precision\n   --> $DIR/excessive_precision.rs:40:22\n@@ -76,7 +76,7 @@ error: float has excessive precision\n   --> $DIR/excessive_precision.rs:41:26\n    |\n LL |     let bad64_suf: f64 = 0.123_456_789_012_345_67f64;\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66_f64`\n \n error: float has excessive precision\n   --> $DIR/excessive_precision.rs:42:21\n@@ -108,5 +108,71 @@ error: float has excessive precision\n LL |     let bad_bige32: f32 = 1.123_456_788_888E-10;\n    |                           ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8E-10`\n \n-error: aborting due to 18 previous errors\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:65:18\n+   |\n+LL |     let _: f32 = 16_777_217.0;\n+   |                  ^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_216.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:66:18\n+   |\n+LL |     let _: f32 = 16_777_219.0;\n+   |                  ^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:67:18\n+   |\n+LL |     let _: f32 = 16_777_219.;\n+   |                  ^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:68:18\n+   |\n+LL |     let _: f32 = 16_777_219.000;\n+   |                  ^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:69:13\n+   |\n+LL |     let _ = 16_777_219f32;\n+   |             ^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0_f32`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:70:19\n+   |\n+LL |     let _: f32 = -16_777_219.0;\n+   |                   ^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:71:18\n+   |\n+LL |     let _: f64 = 9_007_199_254_740_993.0;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:72:18\n+   |\n+LL |     let _: f64 = 9_007_199_254_740_993.;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:73:18\n+   |\n+LL |     let _: f64 = 9_007_199_254_740_993.000;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:74:13\n+   |\n+LL |     let _ = 9_007_199_254_740_993f64;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0_f64`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/excessive_precision.rs:75:19\n+   |\n+LL |     let _: f64 = -9_007_199_254_740_993.0;\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n+\n+error: aborting due to 29 previous errors\n "}]}