{"sha": "d82debbd01847dcc3e11abb9f9f3fb48b70b6845", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MmRlYmJkMDE4NDdkY2MzZTExYWJiOWY5ZjNmYjQ4YjcwYjY4NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-12T00:34:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-12T00:34:59Z"}, "message": "Auto merge of #4883 - krishna-veerareddy:issue-4818-cast-sign-loss-false-positive, r=flip1995\n\nFix false positive with cast_sign_loss lint\n\n`cast_sign_loss` lint incorrectly suggests that the result of `checked_abs`, `rem_euclid` and `checked_rem_euclid` cannot be casted to an unsigned integer without loss.\n\nFixes #4818 #4764 #4743\n\nchangelog: Fix false positives in `cast_sign_loss` lint", "tree": {"sha": "03c40ae4564e1039d09cac386b2eba8f75303f70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c40ae4564e1039d09cac386b2eba8f75303f70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d82debbd01847dcc3e11abb9f9f3fb48b70b6845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d82debbd01847dcc3e11abb9f9f3fb48b70b6845", "html_url": "https://github.com/rust-lang/rust/commit/d82debbd01847dcc3e11abb9f9f3fb48b70b6845", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d82debbd01847dcc3e11abb9f9f3fb48b70b6845/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "221bf650f692015e695a7a370f7d565bf22dc1ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/221bf650f692015e695a7a370f7d565bf22dc1ff", "html_url": "https://github.com/rust-lang/rust/commit/221bf650f692015e695a7a370f7d565bf22dc1ff"}, {"sha": "c0fb74baf55af92b7ef714495ee54cc04795b938", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0fb74baf55af92b7ef714495ee54cc04795b938", "html_url": "https://github.com/rust-lang/rust/commit/c0fb74baf55af92b7ef714495ee54cc04795b938"}], "stats": {"total": 74, "additions": 64, "deletions": 10}, "files": [{"sha": "bc1dfdfa1461ebac73a1e176a1b5d81beff8aa69", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d82debbd01847dcc3e11abb9f9f3fb48b70b6845/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82debbd01847dcc3e11abb9f9f3fb48b70b6845/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=d82debbd01847dcc3e11abb9f9f3fb48b70b6845", "patch": "@@ -26,8 +26,9 @@ use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, last_path_segment, match_def_path,\n-    match_path, multispan_sugg, qpath_res, same_tys, sext, snippet, snippet_opt, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n+    match_path, method_chain_args, multispan_sugg, qpath_res, same_tys, sext, snippet, snippet_opt,\n+    snippet_with_applicability, snippet_with_macro_callsite, span_help_and_lint, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -1021,14 +1022,22 @@ fn check_loss_of_sign(cx: &LateContext<'_, '_>, expr: &Expr, op: &Expr, cast_fro\n         }\n     }\n \n-    // don't lint for the result of `abs`\n-    // `abs` is an inherent impl of `i{N}`, so a method call with ident `abs` will always\n-    // resolve to that spesific method\n-    if_chain! {\n-        if let ExprKind::MethodCall(ref path, _, _) = op.kind;\n-        if path.ident.name.as_str() == \"abs\";\n-        then {\n-            return\n+    // don't lint for the result of methods that always return non-negative values\n+    if let ExprKind::MethodCall(ref path, _, _) = op.kind {\n+        let mut method_name = path.ident.name.as_str();\n+        let whitelisted_methods = [\"abs\", \"checked_abs\", \"rem_euclid\", \"checked_rem_euclid\"];\n+\n+        if_chain! {\n+            if method_name == \"unwrap\";\n+            if let Some(arglist) = method_chain_args(op, &[\"unwrap\"]);\n+            if let ExprKind::MethodCall(ref inner_path, _, _) = &arglist[0][0].kind;\n+            then {\n+                method_name = inner_path.ident.name.as_str();\n+            }\n+        }\n+\n+        if whitelisted_methods.iter().any(|&name| method_name == name) {\n+            return;\n         }\n     }\n "}, {"sha": "7e0b211d862ca907a5fe1b3c9e3dd9bd07015b0c", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d82debbd01847dcc3e11abb9f9f3fb48b70b6845/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82debbd01847dcc3e11abb9f9f3fb48b70b6845/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=d82debbd01847dcc3e11abb9f9f3fb48b70b6845", "patch": "@@ -42,9 +42,54 @@ fn main() {\n     i32::max_value() as u32;\n     i64::max_value() as u64;\n     i128::max_value() as u128;\n+\n     (-1i8).abs() as u8;\n     (-1i16).abs() as u16;\n     (-1i32).abs() as u32;\n     (-1i64).abs() as u64;\n     (-1isize).abs() as usize;\n+\n+    (-1i8).checked_abs().unwrap() as u8;\n+    (-1i16).checked_abs().unwrap() as u16;\n+    (-1i32).checked_abs().unwrap() as u32;\n+    (-1i64).checked_abs().unwrap() as u64;\n+    (-1isize).checked_abs().unwrap() as usize;\n+\n+    (-1i8).rem_euclid(1i8) as u8;\n+    (-1i8).rem_euclid(1i8) as u16;\n+    (-1i16).rem_euclid(1i16) as u16;\n+    (-1i16).rem_euclid(1i16) as u32;\n+    (-1i32).rem_euclid(1i32) as u32;\n+    (-1i32).rem_euclid(1i32) as u64;\n+    (-1i64).rem_euclid(1i64) as u64;\n+    (-1i64).rem_euclid(1i64) as u128;\n+    (-1isize).rem_euclid(1isize) as usize;\n+    (1i8).rem_euclid(-1i8) as u8;\n+    (1i8).rem_euclid(-1i8) as u16;\n+    (1i16).rem_euclid(-1i16) as u16;\n+    (1i16).rem_euclid(-1i16) as u32;\n+    (1i32).rem_euclid(-1i32) as u32;\n+    (1i32).rem_euclid(-1i32) as u64;\n+    (1i64).rem_euclid(-1i64) as u64;\n+    (1i64).rem_euclid(-1i64) as u128;\n+    (1isize).rem_euclid(-1isize) as usize;\n+\n+    (-1i8).checked_rem_euclid(1i8).unwrap() as u8;\n+    (-1i8).checked_rem_euclid(1i8).unwrap() as u16;\n+    (-1i16).checked_rem_euclid(1i16).unwrap() as u16;\n+    (-1i16).checked_rem_euclid(1i16).unwrap() as u32;\n+    (-1i32).checked_rem_euclid(1i32).unwrap() as u32;\n+    (-1i32).checked_rem_euclid(1i32).unwrap() as u64;\n+    (-1i64).checked_rem_euclid(1i64).unwrap() as u64;\n+    (-1i64).checked_rem_euclid(1i64).unwrap() as u128;\n+    (-1isize).checked_rem_euclid(1isize).unwrap() as usize;\n+    (1i8).checked_rem_euclid(-1i8).unwrap() as u8;\n+    (1i8).checked_rem_euclid(-1i8).unwrap() as u16;\n+    (1i16).checked_rem_euclid(-1i16).unwrap() as u16;\n+    (1i16).checked_rem_euclid(-1i16).unwrap() as u32;\n+    (1i32).checked_rem_euclid(-1i32).unwrap() as u32;\n+    (1i32).checked_rem_euclid(-1i32).unwrap() as u64;\n+    (1i64).checked_rem_euclid(-1i64).unwrap() as u64;\n+    (1i64).checked_rem_euclid(-1i64).unwrap() as u128;\n+    (1isize).checked_rem_euclid(-1isize).unwrap() as usize;\n }"}]}