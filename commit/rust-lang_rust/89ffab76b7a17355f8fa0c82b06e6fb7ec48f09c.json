{"sha": "89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZmZhYjc2YjdhMTczNTVmOGZhMGM4MmIwNmU2ZmI3ZWM0OGYwOWM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-09-24T12:13:40Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-09-24T17:26:43Z"}, "message": "build-manifest: refactor detecting package versions", "tree": {"sha": "14aa9984b9a90a8ae37808201fbeb1d62fb34dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14aa9984b9a90a8ae37808201fbeb1d62fb34dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl9s1tMACgkQPgar6Auq\n8ZxWaQ/+O6XiIpdB99Hnr/3oDmrZVdVPN2OAd0chDAJYutN4H4Y1pqmm2cSjddHG\nx50ZLr8voav5jVrsICPG6lMLYrhmMG3tRpW2q5ZiPxNa7d73iPO3Sb3WJAYaJLZ1\nf+Q+FqzVBDzS7W3j+jTcHF2POXMoWlKyEs9LoaT9kivtMs2hYJ1BhL1lqOGjljjF\n3ru4q6CZRUMkYE1iDUlKrMWJfW9Q4AWVcUF76+S2yzfXd2lfSRX3BZDeYfwjjEX5\n6Q+9vAinrMKaOdap1alcez2QtU9H+et5f7za4s4MMeZfVcQVRCxvQXCuMvNLSjR+\nbqSzspszuQn2/LekAB2edo8G/miHAFI9VArx7ovgNF6oJINMXJaAiAsu/Nht11Yn\nsKy1jWo0RI+J1ocfqsM8cjuH9qvTmQEGcE5jTlJUiI0qE4PKlGGXZ+SspLGAuLX1\naXLhZ4MFXBPbHo4Rdoij0AUr5pTk1BFPAhTyxa5LC0XedmnEjcoQ0+f+jVQ/r+J+\nUdfpB0II4CazQhVP2//ilYqqpA0knxW8LgRYu3myCM2QR9kLJgr+HpemrGFa82uE\njkVeCtUzEgaY39Kq1bezTfs/UXR/7z0KEE+dSIb4B7n8uCh1hoEm2oNvi5VjfFw2\nDqwd6TCkmBGi2WgO5kkCoFKteow7qF9JUA3V2N9hita5AvTqiH0=\n=fo0H\n-----END PGP SIGNATURE-----", "payload": "tree 14aa9984b9a90a8ae37808201fbeb1d62fb34dd2\nparent 3bddfea7e23341f788526f8b303b9a27038511e3\nauthor Pietro Albini <pietro@pietroalbini.org> 1600949620 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1600968403 +0200\n\nbuild-manifest: refactor detecting package versions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c", "html_url": "https://github.com/rust-lang/rust/commit/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bddfea7e23341f788526f8b303b9a27038511e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bddfea7e23341f788526f8b303b9a27038511e3", "html_url": "https://github.com/rust-lang/rust/commit/3bddfea7e23341f788526f8b303b9a27038511e3"}], "stats": {"total": 250, "additions": 118, "deletions": 132}, "files": [{"sha": "f18db340aa63897d01fc2558908a5af1b6a174b4", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c", "patch": "@@ -231,8 +231,10 @@ name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n+ \"flate2\",\n  \"serde\",\n  \"serde_json\",\n+ \"tar\",\n  \"toml\",\n ]\n "}, {"sha": "4f89c31936ddacecda6cf1b740174e5f44826c94", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c", "patch": "@@ -9,3 +9,5 @@ toml = \"0.5\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n anyhow = \"1.0.32\"\n+flate2 = \"1.0.16\"\n+tar = \"0.4.29\""}, {"sha": "d8813f95be46f354755dbc7b8b12a1d8a3f2944b", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 12, "deletions": 131, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c", "patch": "@@ -236,24 +236,6 @@ struct Builder {\n     s3_address: String,\n     date: String,\n \n-    rust_version: Option<String>,\n-    cargo_version: Option<String>,\n-    rls_version: Option<String>,\n-    rust_analyzer_version: Option<String>,\n-    clippy_version: Option<String>,\n-    rustfmt_version: Option<String>,\n-    llvm_tools_version: Option<String>,\n-    miri_version: Option<String>,\n-\n-    rust_git_commit_hash: Option<String>,\n-    cargo_git_commit_hash: Option<String>,\n-    rls_git_commit_hash: Option<String>,\n-    rust_analyzer_git_commit_hash: Option<String>,\n-    clippy_git_commit_hash: Option<String>,\n-    rustfmt_git_commit_hash: Option<String>,\n-    llvm_tools_git_commit_hash: Option<String>,\n-    miri_git_commit_hash: Option<String>,\n-\n     should_sign: bool,\n }\n \n@@ -286,7 +268,7 @@ fn main() {\n     }\n \n     Builder {\n-        versions: Versions::new(&channel, Path::new(&monorepo_path)).unwrap(),\n+        versions: Versions::new(&channel, &input, Path::new(&monorepo_path)).unwrap(),\n \n         input,\n         output,\n@@ -295,51 +277,13 @@ fn main() {\n         s3_address,\n         date,\n \n-        rust_version: None,\n-        cargo_version: None,\n-        rls_version: None,\n-        rust_analyzer_version: None,\n-        clippy_version: None,\n-        rustfmt_version: None,\n-        llvm_tools_version: None,\n-        miri_version: None,\n-\n-        rust_git_commit_hash: None,\n-        cargo_git_commit_hash: None,\n-        rls_git_commit_hash: None,\n-        rust_analyzer_git_commit_hash: None,\n-        clippy_git_commit_hash: None,\n-        rustfmt_git_commit_hash: None,\n-        llvm_tools_git_commit_hash: None,\n-        miri_git_commit_hash: None,\n-\n         should_sign,\n     }\n     .build();\n }\n \n impl Builder {\n     fn build(&mut self) {\n-        self.rust_version = self.version(\"rust\", \"x86_64-unknown-linux-gnu\");\n-        self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n-        self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n-        self.rust_analyzer_version = self.version(\"rust-analyzer\", \"x86_64-unknown-linux-gnu\");\n-        self.clippy_version = self.version(\"clippy\", \"x86_64-unknown-linux-gnu\");\n-        self.rustfmt_version = self.version(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n-        self.llvm_tools_version = self.version(\"llvm-tools\", \"x86_64-unknown-linux-gnu\");\n-        self.miri_version = self.version(\"miri\", \"x86_64-unknown-linux-gnu\");\n-\n-        self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n-        self.cargo_git_commit_hash = self.git_commit_hash(\"cargo\", \"x86_64-unknown-linux-gnu\");\n-        self.rls_git_commit_hash = self.git_commit_hash(\"rls\", \"x86_64-unknown-linux-gnu\");\n-        self.rust_analyzer_git_commit_hash =\n-            self.git_commit_hash(\"rust-analyzer\", \"x86_64-unknown-linux-gnu\");\n-        self.clippy_git_commit_hash = self.git_commit_hash(\"clippy\", \"x86_64-unknown-linux-gnu\");\n-        self.rustfmt_git_commit_hash = self.git_commit_hash(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n-        self.llvm_tools_git_commit_hash =\n-            self.git_commit_hash(\"llvm-tools\", \"x86_64-unknown-linux-gnu\");\n-        self.miri_git_commit_hash = self.git_commit_hash(\"miri\", \"x86_64-unknown-linux-gnu\");\n-\n         self.check_toolstate();\n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n@@ -368,8 +312,7 @@ impl Builder {\n         // Mark some tools as missing based on toolstate.\n         if toolstates.get(\"miri\").map(|s| &*s as &str) != Some(\"test-pass\") {\n             println!(\"Miri tests are not passing, removing component\");\n-            self.miri_version = None;\n-            self.miri_git_commit_hash = None;\n+            self.versions.disable_version(&PkgType::Miri);\n         }\n     }\n \n@@ -471,13 +414,10 @@ impl Builder {\n     }\n \n     fn rust_package(&mut self, manifest: &Manifest) -> Package {\n+        let version_info = self.versions.version(&PkgType::Rust).expect(\"missing Rust tarball\");\n         let mut pkg = Package {\n-            version: self\n-                .cached_version(\"rust\")\n-                .as_ref()\n-                .expect(\"Couldn't find Rust version\")\n-                .clone(),\n-            git_commit_hash: self.cached_git_commit_hash(\"rust\").clone(),\n+            version: version_info.version.expect(\"missing Rust version\"),\n+            git_commit_hash: version_info.git_commit,\n             target: BTreeMap::new(),\n         };\n         for host in HOSTS {\n@@ -583,12 +523,11 @@ impl Builder {\n     }\n \n     fn package(&mut self, pkgname: &str, dst: &mut BTreeMap<String, Package>, targets: &[&str]) {\n-        let (version, mut is_present) = self\n-            .cached_version(pkgname)\n-            .as_ref()\n-            .cloned()\n-            .map(|version| (version, true))\n-            .unwrap_or_default(); // `is_present` defaults to `false` here.\n+        let version_info = self\n+            .versions\n+            .version(&PkgType::from_component(pkgname))\n+            .expect(\"failed to load package version\");\n+        let mut is_present = version_info.present;\n \n         // Never ship nightly-only components for other trains.\n         if self.versions.channel() != \"nightly\" && NIGHTLY_ONLY_COMPONENTS.contains(&pkgname) {\n@@ -635,8 +574,8 @@ impl Builder {\n         dst.insert(\n             pkgname.to_string(),\n             Package {\n-                version,\n-                git_commit_hash: self.cached_git_commit_hash(pkgname).clone(),\n+                version: version_info.version.unwrap_or_default(),\n+                git_commit_hash: version_info.git_commit,\n                 target: targets,\n             },\n         );\n@@ -646,64 +585,6 @@ impl Builder {\n         format!(\"{}/{}/{}\", self.s3_address, self.date, filename)\n     }\n \n-    fn cached_version(&self, component: &str) -> &Option<String> {\n-        use PkgType::*;\n-        match PkgType::from_component(component) {\n-            Cargo => &self.cargo_version,\n-            Rls => &self.rls_version,\n-            RustAnalyzer => &self.rust_analyzer_version,\n-            Clippy => &self.clippy_version,\n-            Rustfmt => &self.rustfmt_version,\n-            LlvmTools => &self.llvm_tools_version,\n-            Miri => &self.miri_version,\n-            _ => &self.rust_version,\n-        }\n-    }\n-\n-    fn cached_git_commit_hash(&self, component: &str) -> &Option<String> {\n-        use PkgType::*;\n-        match PkgType::from_component(component) {\n-            Cargo => &self.cargo_git_commit_hash,\n-            Rls => &self.rls_git_commit_hash,\n-            RustAnalyzer => &self.rust_analyzer_git_commit_hash,\n-            Clippy => &self.clippy_git_commit_hash,\n-            Rustfmt => &self.rustfmt_git_commit_hash,\n-            LlvmTools => &self.llvm_tools_git_commit_hash,\n-            Miri => &self.miri_git_commit_hash,\n-            _ => &self.rust_git_commit_hash,\n-        }\n-    }\n-\n-    fn version(&mut self, component: &str, target: &str) -> Option<String> {\n-        self.untar(component, target, |filename| format!(\"{}/version\", filename))\n-    }\n-\n-    fn git_commit_hash(&mut self, component: &str, target: &str) -> Option<String> {\n-        self.untar(component, target, |filename| format!(\"{}/git-commit-hash\", filename))\n-    }\n-\n-    fn untar<F>(&mut self, component: &str, target: &str, dir: F) -> Option<String>\n-    where\n-        F: FnOnce(String) -> String,\n-    {\n-        let filename = self\n-            .versions\n-            .tarball_name(&PkgType::from_component(component), target)\n-            .expect(\"failed to retrieve the tarball path\");\n-\n-        let mut cmd = Command::new(\"tar\");\n-        cmd.arg(\"xf\")\n-            .arg(self.input.join(&filename))\n-            .arg(dir(filename.replace(\".tar.gz\", \"\")))\n-            .arg(\"-O\");\n-        let output = t!(cmd.output());\n-        if output.status.success() {\n-            Some(String::from_utf8_lossy(&output.stdout).trim().to_string())\n-        } else {\n-            None\n-        }\n-    }\n-\n     fn hash(&self, path: &Path) -> String {\n         let sha = t!(Command::new(\"shasum\")\n             .arg(\"-a\")"}, {"sha": "3b5caf1cd7b91007fe2d62e79d2826e046d2524d", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 102, "deletions": 1, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=89ffab76b7a17355f8fa0c82b06e6fb7ec48f09c", "patch": "@@ -1,6 +1,12 @@\n use anyhow::{Context, Error};\n+use flate2::read::GzDecoder;\n use std::collections::HashMap;\n+use std::fs::File;\n+use std::io::Read;\n use std::path::{Path, PathBuf};\n+use tar::Archive;\n+\n+const DEFAULT_TARGET: &str = \"x86_64-unknown-linux-gnu\";\n \n #[derive(Debug, Hash, Eq, PartialEq, Clone)]\n pub(crate) enum PkgType {\n@@ -61,32 +67,127 @@ impl PkgType {\n             PkgType::Other(component) => component,\n         }\n     }\n+\n+    fn should_use_rust_version(&self) -> bool {\n+        match self {\n+            PkgType::Cargo => false,\n+            PkgType::Rls => false,\n+            PkgType::RustAnalyzer => false,\n+            PkgType::Clippy => false,\n+            PkgType::Rustfmt => false,\n+            PkgType::LlvmTools => false,\n+            PkgType::Miri => false,\n+\n+            PkgType::Rust => true,\n+            PkgType::RustSrc => true,\n+            PkgType::Other(_) => true,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Default, Clone)]\n+pub(crate) struct VersionInfo {\n+    pub(crate) version: Option<String>,\n+    pub(crate) git_commit: Option<String>,\n+    pub(crate) present: bool,\n }\n \n pub(crate) struct Versions {\n     channel: String,\n     rustc_version: String,\n     monorepo_root: PathBuf,\n+    dist_path: PathBuf,\n     package_versions: HashMap<PkgType, String>,\n+    versions: HashMap<PkgType, VersionInfo>,\n }\n \n impl Versions {\n-    pub(crate) fn new(channel: &str, monorepo_root: &Path) -> Result<Self, Error> {\n+    pub(crate) fn new(\n+        channel: &str,\n+        dist_path: &Path,\n+        monorepo_root: &Path,\n+    ) -> Result<Self, Error> {\n         Ok(Self {\n             channel: channel.into(),\n             rustc_version: std::fs::read_to_string(monorepo_root.join(\"src\").join(\"version\"))\n                 .context(\"failed to read the rustc version from src/version\")?\n                 .trim()\n                 .to_string(),\n             monorepo_root: monorepo_root.into(),\n+            dist_path: dist_path.into(),\n             package_versions: HashMap::new(),\n+            versions: HashMap::new(),\n         })\n     }\n \n     pub(crate) fn channel(&self) -> &str {\n         &self.channel\n     }\n \n+    pub(crate) fn version(&mut self, mut package: &PkgType) -> Result<VersionInfo, Error> {\n+        if package.should_use_rust_version() {\n+            package = &PkgType::Rust;\n+        }\n+\n+        match self.versions.get(package) {\n+            Some(version) => Ok(version.clone()),\n+            None => {\n+                let version_info = self.load_version_from_tarball(package)?;\n+                self.versions.insert(package.clone(), version_info.clone());\n+                Ok(version_info)\n+            }\n+        }\n+    }\n+\n+    fn load_version_from_tarball(&mut self, package: &PkgType) -> Result<VersionInfo, Error> {\n+        let tarball_name = self.tarball_name(package, DEFAULT_TARGET)?;\n+        let tarball = self.dist_path.join(tarball_name);\n+\n+        let file = match File::open(&tarball) {\n+            Ok(file) => file,\n+            Err(err) if err.kind() == std::io::ErrorKind::NotFound => {\n+                // Missing tarballs do not return an error, but return empty data.\n+                return Ok(VersionInfo::default());\n+            }\n+            Err(err) => return Err(err.into()),\n+        };\n+        let mut tar = Archive::new(GzDecoder::new(file));\n+\n+        let mut version = None;\n+        let mut git_commit = None;\n+        for entry in tar.entries()? {\n+            let mut entry = entry?;\n+\n+            let dest;\n+            match entry.path()?.components().nth(1).and_then(|c| c.as_os_str().to_str()) {\n+                Some(\"version\") => dest = &mut version,\n+                Some(\"git-commit-hash\") => dest = &mut git_commit,\n+                _ => continue,\n+            }\n+            let mut buf = String::new();\n+            entry.read_to_string(&mut buf)?;\n+            *dest = Some(buf);\n+\n+            // Short circuit to avoid reading the whole tar file if not necessary.\n+            if version.is_some() && git_commit.is_some() {\n+                break;\n+            }\n+        }\n+\n+        Ok(VersionInfo { version, git_commit, present: true })\n+    }\n+\n+    pub(crate) fn disable_version(&mut self, package: &PkgType) {\n+        match self.versions.get_mut(package) {\n+            Some(version) => {\n+                *version = VersionInfo::default();\n+            }\n+            None => {\n+                self.versions.insert(package.clone(), VersionInfo::default());\n+            }\n+        }\n+    }\n+\n     pub(crate) fn tarball_name(\n         &mut self,\n         package: &PkgType,"}]}