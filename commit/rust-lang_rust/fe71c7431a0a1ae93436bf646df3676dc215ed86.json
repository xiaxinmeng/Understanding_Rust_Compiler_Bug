{"sha": "fe71c7431a0a1ae93436bf646df3676dc215ed86", "node_id": "C_kwDOAAsO6NoAKGZlNzFjNzQzMWEwYTFhZTkzNDM2YmY2NDZkZjM2NzZkYzIxNWVkODY", "commit": {"author": {"name": "Nikolai Vazquez", "email": "hello@nikolaivazquez.com", "date": "2022-01-25T09:29:40Z"}, "committer": {"name": "Nikolai Vazquez", "email": "hello@nikolaivazquez.com", "date": "2022-01-25T09:29:40Z"}, "message": "Implement `MIN`/`MAX` constants for non-zero integers", "tree": {"sha": "224b28aa07c1c91e9699c3b8ff21c223f79c0e54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224b28aa07c1c91e9699c3b8ff21c223f79c0e54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe71c7431a0a1ae93436bf646df3676dc215ed86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe71c7431a0a1ae93436bf646df3676dc215ed86", "html_url": "https://github.com/rust-lang/rust/commit/fe71c7431a0a1ae93436bf646df3676dc215ed86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe71c7431a0a1ae93436bf646df3676dc215ed86/comments", "author": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7825f2b690c9a0d21b6f6d84c404bb53b151b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7825f2b690c9a0d21b6f6d84c404bb53b151b38", "html_url": "https://github.com/rust-lang/rust/commit/e7825f2b690c9a0d21b6f6d84c404bb53b151b38"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "a32631a06a5b64a418a2bee4814fb6d99368e911", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/fe71c7431a0a1ae93436bf646df3676dc215ed86/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe71c7431a0a1ae93436bf646df3676dc215ed86/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=fe71c7431a0a1ae93436bf646df3676dc215ed86", "patch": "@@ -988,3 +988,104 @@ macro_rules! nonzero_unsigned_is_power_of_two {\n }\n \n nonzero_unsigned_is_power_of_two! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU128 NonZeroUsize }\n+\n+macro_rules! nonzero_min_max_unsigned {\n+    ( $( $Ty: ident($Int: ident); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// The smallest value that can be represented by this non-zero\n+                /// integer type, 1.\n+                ///\n+                /// Note: While most integer types are defined for every whole\n+                /// number between `MIN` and `MAX`, signed non-zero integers are\n+                /// a special case. They have a \"gap\" at 0.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), 1\", stringify!($Int), \");\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MIN: Self = Self::new(1).unwrap();\n+\n+                /// The largest value that can be represented by this non-zero\n+                /// integer type,\n+                #[doc = concat!(\"equal to [`\", stringify!($Int), \"::MAX`].\")]\n+                ///\n+                /// Note: While most integer types are defined for every whole\n+                /// number between `MIN` and `MAX`, signed non-zero integers are\n+                /// a special case. They have a \"gap\" at 0.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n+            }\n+        )+\n+    }\n+}\n+\n+macro_rules! nonzero_min_max_signed {\n+    ( $( $Ty: ident($Int: ident); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// The smallest value that can be represented by this non-zero\n+                /// integer type,\n+                #[doc = concat!(\"equal to [`\", stringify!($Int), \"::MIN`].\")]\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), \", stringify!($Int), \"::MIN);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MIN: Self = Self::new(<$Int>::MIN).unwrap();\n+\n+                /// The largest value that can be represented by this non-zero\n+                /// integer type,\n+                #[doc = concat!(\"equal to [`\", stringify!($Int), \"::MAX`].\")]\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_min_max_unsigned! {\n+    NonZeroU8(u8);\n+    NonZeroU16(u16);\n+    NonZeroU32(u32);\n+    NonZeroU64(u64);\n+    NonZeroU128(u128);\n+    NonZeroUsize(usize);\n+}\n+\n+nonzero_min_max_signed! {\n+    NonZeroI8(i8);\n+    NonZeroI16(i16);\n+    NonZeroI32(i32);\n+    NonZeroI64(i64);\n+    NonZeroI128(i128);\n+    NonZeroIsize(isize);\n+}"}]}