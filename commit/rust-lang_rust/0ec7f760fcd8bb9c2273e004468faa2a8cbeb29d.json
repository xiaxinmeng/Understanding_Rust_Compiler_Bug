{"sha": "0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYzdmNzYwZmNkOGJiOWMyMjczZTAwNDQ2OGZhYTJhOGNiZWIyOWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-29T12:52:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-29T12:52:56Z"}, "message": "Merge #3375\n\n3375: Cleanup editing API a bit r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8ad45f841ffa0648b29fb143c3de0b59bde400fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad45f841ffa0648b29fb143c3de0b59bde400fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWl6oCRBK7hj4Ov3rIwAAdHIIAFVI87XTH5Q96IVVFHDpIgzI\nOzVhapq1jZqseJZH+h8PTJY9HaLeG4FffyudCXznDReX7q0YKiw0fmbbPjMQbG+u\nyzb+ppnJhzklBj/OeZ2HqS8ToVeMIG09dh8hvzeehE0Tq8PEr4gBGEv2KNMF7+7o\nUMPOGXxQtPQ4/n6dt4YnrcneJObx7MdqXDvOPilhW8awLtV9YmPHRRs/Rd1E9Fk2\nt2qMYI50wLIvFANech3cgmakTShuyBbq4CbpD5YBLZML0Cd8XwIDupA18vOZNS6O\n3NOuNBXTag+sOCNHqWi/fM3X7cPou7iBvnMZORTRxGLZLHbnXK9g0LmFrJ+O1eA=\n=yUOm\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ad45f841ffa0648b29fb143c3de0b59bde400fb\nparent b53ff214aa9fe30eeedb64f78cc89561060c0083\nparent 9abcab16693ac5e162c4ed28c4373ed6bd507380\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582980776 +0000\ncommitter GitHub <noreply@github.com> 1582980776 +0000\n\nMerge #3375\n\n3375: Cleanup editing API a bit r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "html_url": "https://github.com/rust-lang/rust/commit/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b53ff214aa9fe30eeedb64f78cc89561060c0083", "url": "https://api.github.com/repos/rust-lang/rust/commits/b53ff214aa9fe30eeedb64f78cc89561060c0083", "html_url": "https://github.com/rust-lang/rust/commit/b53ff214aa9fe30eeedb64f78cc89561060c0083"}, {"sha": "9abcab16693ac5e162c4ed28c4373ed6bd507380", "url": "https://api.github.com/repos/rust-lang/rust/commits/9abcab16693ac5e162c4ed28c4373ed6bd507380", "html_url": "https://github.com/rust-lang/rust/commit/9abcab16693ac5e162c4ed28c4373ed6bd507380"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "a74ac42d5d229431d0a6dd2a29f44c841231efe1", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "patch": "@@ -157,7 +157,7 @@ impl<'a> QualifyPaths<'a> {\n \n pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: N) -> N {\n     let syntax = node.syntax();\n-    let result = ra_syntax::algo::replace_descendants(syntax, &|element| match element {\n+    let result = ra_syntax::algo::replace_descendants(syntax, |element| match element {\n         ra_syntax::SyntaxElement::Node(n) => {\n             let replacement = transformer.get_substitution(&n)?;\n             Some(replacement.into())"}, {"sha": "f3167b4e59f90ab9dbf7f68c838a62323baacd35", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "patch": "@@ -120,7 +120,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n                         let expr = {\n                             let name_ref = make::name_ref(\"it\");\n                             let segment = make::path_segment(name_ref);\n-                            let path = make::path_unqalified(segment);\n+                            let path = make::path_unqualified(segment);\n                             make::expr_path(path)\n                         };\n                         make::match_arm(once(pat.into()), expr)"}, {"sha": "86b2353660b722ac8a72805aaa8eb1f0a080e58e", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "patch": "@@ -75,7 +75,7 @@ fn build_predicate(param: ast::TypeParam) -> Option<ast::WherePred> {\n     let path = {\n         let name_ref = make::name_ref(&param.name()?.syntax().to_string());\n         let segment = make::path_segment(name_ref);\n-        make::path_unqalified(segment)\n+        make::path_unqualified(segment)\n     };\n     let predicate = make::where_pred(path, param.type_bound_list()?.bounds());\n     Some(predicate)"}, {"sha": "5a079de2709d8b130e3f9b3ef6c11e503cc5962d", "filename": "crates/ra_ide/src/expand_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs?ref=0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "patch": "@@ -52,7 +52,7 @@ fn expand_macro_recur(\n         }\n     }\n \n-    Some(replace_descendants(&expanded, &|n| replaces.get(n).cloned()))\n+    Some(replace_descendants(&expanded, |n| replaces.get(n).cloned()))\n }\n \n // FIXME: It would also be cool to share logic here and in the mbe tests,"}, {"sha": "2aaf0215fa6b2ab464c261a2d4fd4169d5a234b9", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "patch": "@@ -570,7 +570,7 @@ mod tests {\n         let token_tree = insert_children(\n             &rbrace.parent().unwrap(),\n             InsertPosition::Last,\n-            &mut std::iter::once(space),\n+            std::iter::once(space),\n         );\n \n         // Token Tree now is :"}, {"sha": "b87c7084e6f1d3e6bd39d969cd27baa17f946e03", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "patch": "@@ -142,6 +142,15 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n /// This is a type-unsafe low-level editing API, if you need to use it,\n /// prefer to create a type-safe abstraction on top of it instead.\n pub fn insert_children(\n+    parent: &SyntaxNode,\n+    position: InsertPosition<SyntaxElement>,\n+    to_insert: impl IntoIterator<Item = SyntaxElement>,\n+) -> SyntaxNode {\n+    let mut to_insert = to_insert.into_iter();\n+    _insert_children(parent, position, &mut to_insert)\n+}\n+\n+fn _insert_children(\n     parent: &SyntaxNode,\n     position: InsertPosition<SyntaxElement>,\n     to_insert: &mut dyn Iterator<Item = SyntaxElement>,\n@@ -176,6 +185,15 @@ pub fn insert_children(\n /// This is a type-unsafe low-level editing API, if you need to use it,\n /// prefer to create a type-safe abstraction on top of it instead.\n pub fn replace_children(\n+    parent: &SyntaxNode,\n+    to_delete: RangeInclusive<SyntaxElement>,\n+    to_insert: impl IntoIterator<Item = SyntaxElement>,\n+) -> SyntaxNode {\n+    let mut to_insert = to_insert.into_iter();\n+    _replace_children(parent, to_delete, &mut to_insert)\n+}\n+\n+fn _replace_children(\n     parent: &SyntaxNode,\n     to_delete: RangeInclusive<SyntaxElement>,\n     to_insert: &mut dyn Iterator<Item = SyntaxElement>,\n@@ -202,14 +220,21 @@ pub fn replace_children(\n /// to create a type-safe abstraction on top of it instead.\n pub fn replace_descendants(\n     parent: &SyntaxNode,\n-    map: &impl Fn(&SyntaxElement) -> Option<SyntaxElement>,\n+    map: impl Fn(&SyntaxElement) -> Option<SyntaxElement>,\n+) -> SyntaxNode {\n+    _replace_descendants(parent, &map)\n+}\n+\n+fn _replace_descendants(\n+    parent: &SyntaxNode,\n+    map: &dyn Fn(&SyntaxElement) -> Option<SyntaxElement>,\n ) -> SyntaxNode {\n     //  FIXME: this could be made much faster.\n     let new_children = parent.children_with_tokens().map(|it| go(map, it)).collect::<Vec<_>>();\n     return with_children(parent, new_children);\n \n     fn go(\n-        map: &impl Fn(&SyntaxElement) -> Option<SyntaxElement>,\n+        map: &dyn Fn(&SyntaxElement) -> Option<SyntaxElement>,\n         element: SyntaxElement,\n     ) -> NodeOrToken<rowan::GreenNode, rowan::GreenToken> {\n         if let Some(replacement) = map(&element) {\n@@ -221,7 +246,7 @@ pub fn replace_descendants(\n         match element {\n             NodeOrToken::Token(it) => NodeOrToken::Token(it.green().clone()),\n             NodeOrToken::Node(it) => {\n-                NodeOrToken::Node(replace_descendants(&it, map).green().clone())\n+                NodeOrToken::Node(_replace_descendants(&it, map).green().clone())\n             }\n         }\n     }"}, {"sha": "d2630e9e99c168489c3b2f67691372c7c934bd24", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "patch": "@@ -276,7 +276,7 @@ pub fn replace_descendants<N: AstNode, D: AstNode>(\n         .into_iter()\n         .map(|(from, to)| (from.syntax().clone().into(), to.syntax().clone().into()))\n         .collect::<FxHashMap<SyntaxElement, _>>();\n-    let new_syntax = algo::replace_descendants(parent.syntax(), &|n| map.get(n).cloned());\n+    let new_syntax = algo::replace_descendants(parent.syntax(), |n| map.get(n).cloned());\n     N::cast(new_syntax).unwrap()\n }\n \n@@ -331,7 +331,7 @@ impl IndentLevel {\n                 )\n             })\n             .collect();\n-        algo::replace_descendants(&node, &|n| replacements.get(n).cloned())\n+        algo::replace_descendants(&node, |n| replacements.get(n).cloned())\n     }\n \n     pub fn decrease_indent<N: AstNode>(self, node: N) -> N {\n@@ -359,7 +359,7 @@ impl IndentLevel {\n                 )\n             })\n             .collect();\n-        algo::replace_descendants(&node, &|n| replacements.get(n).cloned())\n+        algo::replace_descendants(&node, |n| replacements.get(n).cloned())\n     }\n }\n \n@@ -389,7 +389,7 @@ fn insert_children<N: AstNode>(\n     position: InsertPosition<SyntaxElement>,\n     to_insert: impl IntoIterator<Item = SyntaxElement>,\n ) -> N {\n-    let new_syntax = algo::insert_children(parent.syntax(), position, &mut to_insert.into_iter());\n+    let new_syntax = algo::insert_children(parent.syntax(), position, to_insert);\n     N::cast(new_syntax).unwrap()\n }\n \n@@ -404,8 +404,7 @@ fn replace_children<N: AstNode>(\n     to_replace: RangeInclusive<SyntaxElement>,\n     to_insert: impl IntoIterator<Item = SyntaxElement>,\n ) -> N {\n-    let new_syntax =\n-        algo::replace_children(parent.syntax(), to_replace, &mut to_insert.into_iter());\n+    let new_syntax = algo::replace_children(parent.syntax(), to_replace, to_insert);\n     N::cast(new_syntax).unwrap()\n }\n "}, {"sha": "3f11b747f0fa960c45694275e29d636d566dab23", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=0ec7f760fcd8bb9c2273e004468faa2a8cbeb29d", "patch": "@@ -15,7 +15,7 @@ pub fn name_ref(text: &str) -> ast::NameRef {\n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n     ast_from_text(&format!(\"use {};\", name_ref.syntax()))\n }\n-pub fn path_unqalified(segment: ast::PathSegment) -> ast::Path {\n+pub fn path_unqualified(segment: ast::PathSegment) -> ast::Path {\n     path_from_text(&format!(\"use {}\", segment.syntax()))\n }\n pub fn path_qualified(qual: ast::Path, segment: ast::PathSegment) -> ast::Path {"}]}