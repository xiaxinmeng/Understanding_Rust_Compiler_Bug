{"sha": "71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc", "node_id": "C_kwDOAAsO6NoAKDcxZWNiYzQyZjlhNTc5Y2QwZDk4YTVkNjg3ZGE1M2Y2YzJlOGYyYmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T01:08:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T01:08:47Z"}, "message": "Auto merge of #8509 - smoelius:fix-8507, r=giraffate\n\nFix `unncessary_to_owned` false positive\n\nFix #8507\n\nchangelog: none", "tree": {"sha": "2f2b1c7867958da8f5a1d2f25821f3021c499a31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f2b1c7867958da8f5a1d2f25821f3021c499a31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc", "html_url": "https://github.com/rust-lang/rust/commit/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c", "html_url": "https://github.com/rust-lang/rust/commit/9a1f6a9795d41f787b099e7cfcb8dcdd5e53584c"}, {"sha": "1a95590faf2a81e7b7bae697c2209ba7607f0336", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a95590faf2a81e7b7bae697c2209ba7607f0336", "html_url": "https://github.com/rust-lang/rust/commit/1a95590faf2a81e7b7bae697c2209ba7607f0336"}], "stats": {"total": 150, "additions": 126, "deletions": 24}, "files": [{"sha": "1555758fc4ad825b6b013a7bb1014544123f6804", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc", "patch": "@@ -2,7 +2,9 @@ use super::implicit_clone::is_clone_like;\n use super::unnecessary_iter_cloned::{self, is_into_iter};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs};\n+use clippy_utils::ty::{\n+    contains_ty, get_associated_type, get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs,\n+};\n use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind};\n@@ -114,7 +116,12 @@ fn check_addr_of_expr(\n                     parent.span,\n                     &format!(\"unnecessary use of `{}`\", method_name),\n                     \"use\",\n-                    format!(\"{:&>width$}{}\", \"\", receiver_snippet, width = n_target_refs - n_receiver_refs),\n+                    format!(\n+                        \"{:&>width$}{}\",\n+                        \"\",\n+                        receiver_snippet,\n+                        width = n_target_refs - n_receiver_refs\n+                    ),\n                     Applicability::MachineApplicable,\n                 );\n                 return true;\n@@ -182,20 +189,10 @@ fn check_into_iter_call_arg(cx: &LateContext<'_>, expr: &Expr<'_>, method_name:\n         if let Some(item_ty) = get_iterator_item_ty(cx, parent_ty);\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n-            if unnecessary_iter_cloned::check_for_loop_iter(\n-                cx,\n-                parent,\n-                method_name,\n-                receiver,\n-                true,\n-            ) {\n+            if unnecessary_iter_cloned::check_for_loop_iter(cx, parent, method_name, receiver, true) {\n                 return true;\n             }\n-            let cloned_or_copied = if is_copy(cx, item_ty) {\n-                \"copied\"\n-            } else {\n-                \"cloned\"\n-            };\n+            let cloned_or_copied = if is_copy(cx, item_ty) { \"copied\" } else { \"cloned\" };\n             // The next suggestion may be incorrect because the removal of the `to_owned`-like\n             // function could cause the iterator to hold a reference to a resource that is used\n             // mutably. See https://github.com/rust-lang/rust-clippy/issues/8148.\n@@ -243,18 +240,19 @@ fn check_other_call_arg<'tcx>(\n         if if trait_predicate.def_id() == deref_trait_id {\n             if let [projection_predicate] = projection_predicates[..] {\n                 let normalized_ty =\n-                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term);\n+                    cx.tcx\n+                        .subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term);\n                 implements_trait(cx, receiver_ty, deref_trait_id, &[])\n-                    && get_associated_type(cx, receiver_ty, deref_trait_id,\n-                    \"Target\").map_or(false, |ty| ty::Term::Ty(ty) == normalized_ty)\n+                    && get_associated_type(cx, receiver_ty, deref_trait_id, \"Target\")\n+                        .map_or(false, |ty| ty::Term::Ty(ty) == normalized_ty)\n             } else {\n                 false\n             }\n         } else if trait_predicate.def_id() == as_ref_trait_id {\n             let composed_substs = compose_substs(\n                 cx,\n                 &trait_predicate.trait_ref.substs.iter().skip(1).collect::<Vec<_>>()[..],\n-                call_substs\n+                call_substs,\n             );\n             implements_trait(cx, receiver_ty, as_ref_trait_id, &composed_substs)\n         } else {\n@@ -264,6 +262,12 @@ fn check_other_call_arg<'tcx>(\n         // `Target = T`.\n         if n_refs > 0 || is_copy(cx, receiver_ty) || trait_predicate.def_id() != deref_trait_id;\n         let n_refs = max(n_refs, if is_copy(cx, receiver_ty) { 0 } else { 1 });\n+        // If the trait is `AsRef` and the input type variable `T` occurs in the output type, then\n+        // `T` must not be instantiated with a reference\n+        // (https://github.com/rust-lang/rust-clippy/issues/8507).\n+        if (n_refs == 0 && !receiver_ty.is_ref())\n+            || trait_predicate.def_id() != as_ref_trait_id\n+            || !contains_ty(fn_sig.output(), input);\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n             span_lint_and_sugg(\n@@ -339,11 +343,7 @@ fn get_input_traits_and_projections<'tcx>(\n                 if let Some(arg) = substs.iter().next();\n                 if let GenericArgKind::Type(arg_ty) = arg.unpack();\n                 if arg_ty == input;\n-                then {\n-                    true\n-                } else {\n-                    false\n-                }\n+                then { true } else { false }\n             }\n         };\n         match predicate.kind().skip_binder() {"}, {"sha": "38ba41ac54ecb2ca7814f135f1525b44d66a825a", "filename": "tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc/tests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc/tests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.fixed?ref=71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc", "patch": "@@ -212,3 +212,51 @@ fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::E\n }\n \n fn require_string(_: &String) {}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/8507\n+mod issue_8507 {\n+    #![allow(dead_code)]\n+\n+    struct Opaque<P>(P);\n+\n+    pub trait Abstracted {}\n+\n+    impl<P> Abstracted for Opaque<P> {}\n+\n+    fn build<P>(p: P) -> Opaque<P>\n+    where\n+        P: AsRef<str>,\n+    {\n+        Opaque(p)\n+    }\n+\n+    // Should not lint.\n+    fn test_str(s: &str) -> Box<dyn Abstracted> {\n+        Box::new(build(s.to_string()))\n+    }\n+\n+    // Should not lint.\n+    fn test_x(x: super::X) -> Box<dyn Abstracted> {\n+        Box::new(build(x))\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    struct Y(&'static str);\n+\n+    impl AsRef<str> for Y {\n+        fn as_ref(&self) -> &str {\n+            self.0\n+        }\n+    }\n+\n+    impl ToString for Y {\n+        fn to_string(&self) -> String {\n+            self.0.to_string()\n+        }\n+    }\n+\n+    // Should lint because Y is copy.\n+    fn test_y(y: Y) -> Box<dyn Abstracted> {\n+        Box::new(build(y))\n+    }\n+}"}, {"sha": "15fb7ee83e3d100a50cfa13dfd54cf12afcd7cd0", "filename": "tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc/tests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc/tests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.rs?ref=71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc", "patch": "@@ -212,3 +212,51 @@ fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::E\n }\n \n fn require_string(_: &String) {}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/8507\n+mod issue_8507 {\n+    #![allow(dead_code)]\n+\n+    struct Opaque<P>(P);\n+\n+    pub trait Abstracted {}\n+\n+    impl<P> Abstracted for Opaque<P> {}\n+\n+    fn build<P>(p: P) -> Opaque<P>\n+    where\n+        P: AsRef<str>,\n+    {\n+        Opaque(p)\n+    }\n+\n+    // Should not lint.\n+    fn test_str(s: &str) -> Box<dyn Abstracted> {\n+        Box::new(build(s.to_string()))\n+    }\n+\n+    // Should not lint.\n+    fn test_x(x: super::X) -> Box<dyn Abstracted> {\n+        Box::new(build(x))\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    struct Y(&'static str);\n+\n+    impl AsRef<str> for Y {\n+        fn as_ref(&self) -> &str {\n+            self.0\n+        }\n+    }\n+\n+    impl ToString for Y {\n+        fn to_string(&self) -> String {\n+            self.0.to_string()\n+        }\n+    }\n+\n+    // Should lint because Y is copy.\n+    fn test_y(y: Y) -> Box<dyn Abstracted> {\n+        Box::new(build(y.to_string()))\n+    }\n+}"}, {"sha": "c53ce32be775706f91d4ce47b2e4b5bd4220abd9", "filename": "tests/ui/unnecessary_to_owned.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc/tests%2Fui%2Funnecessary_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc/tests%2Fui%2Funnecessary_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.stderr?ref=71ecbc42f9a579cd0d98a5d687da53f6c2e8f2bc", "patch": "@@ -491,5 +491,11 @@ LL -         let path = match get_file_path(&t) {\n LL +         let path = match get_file_path(t) {\n    | \n \n-error: aborting due to 76 previous errors\n+error: unnecessary use of `to_string`\n+  --> $DIR/unnecessary_to_owned.rs:260:24\n+   |\n+LL |         Box::new(build(y.to_string()))\n+   |                        ^^^^^^^^^^^^^ help: use: `y`\n+\n+error: aborting due to 77 previous errors\n "}]}