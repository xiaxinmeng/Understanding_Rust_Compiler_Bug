{"sha": "a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OWVhYmJjMzZkN2I5NmJiOWU0MmQ5YmM2NjkxZDI4YjYyYzQxODc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-14T16:54:00Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-22T16:22:29Z"}, "message": "Get rid of the fake stack frame", "tree": {"sha": "d0f4b7016da9a15c573dd69d5db55a6012299057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f4b7016da9a15c573dd69d5db55a6012299057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "html_url": "https://github.com/rust-lang/rust/commit/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad30e9a6814b5d29dfbdcd85ecde48afcc94389b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad30e9a6814b5d29dfbdcd85ecde48afcc94389b", "html_url": "https://github.com/rust-lang/rust/commit/ad30e9a6814b5d29dfbdcd85ecde48afcc94389b"}], "stats": {"total": 125, "additions": 44, "deletions": 81}, "files": [{"sha": "56d4342e6e1618094c8f74575996db1f38002339", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "patch": "@@ -59,7 +59,6 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let field = const_field(\n                         bx.tcx(),\n                         ty::ParamEnv::reveal_all(),\n-                        self.instance,\n                         None,\n                         mir::Field::new(field as usize),\n                         c,"}, {"sha": "25b0d1424ca47dc74f35351b4f50c65ae54d9437", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 12, "deletions": 68, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "patch": "@@ -10,16 +10,15 @@ use rustc::hir::{self, def_id::DefId};\n use rustc::hir::def::Def;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled};\n use rustc::mir;\n-use rustc::ty::{self, TyCtxt, Instance, query::TyCtxtAt};\n+use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n use rustc::ty::layout::{self, LayoutOf, TyLayout, VariantIdx};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n-use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashMap;\n use rustc::util::common::ErrorReported;\n \n use syntax::ast::Mutability;\n-use syntax::source_map::{Span, DUMMY_SP};\n+use syntax::source_map::DUMMY_SP;\n \n use crate::interpret::{self,\n     PlaceTy, MPlaceTy, MemPlace, OpTy, Operand, Immediate, Scalar, RawConst, ConstValue, Pointer,\n@@ -35,72 +34,19 @@ const STEPS_UNTIL_DETECTOR_ENABLED: isize = 1_000_000;\n /// Should be a power of two for performance reasons.\n const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n \n-/// Warning: do not use this function if you expect to start interpreting the given `Mir`.\n-/// The `EvalContext` is only meant to be used to query values from constants and statics.\n-///\n-/// This function is used during const propagation. We cannot use `mk_eval_cx`, because copy\n-/// propagation happens *during* the computation of the MIR of the current function. So if we\n-/// tried to call the `optimized_mir` query, we'd get a cycle error because we are (transitively)\n-/// inside the `optimized_mir` query of the `Instance` given.\n-///\n-/// Since we are looking at the MIR of the function in an abstract manner, we don't have a\n-/// `ParamEnv` available to us. This function creates a `ParamEnv` for the given instance.\n-pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    instance: Instance<'tcx>,\n-    mir: &'mir mir::Mir<'tcx>,\n-    span: Span,\n-) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'mir, 'tcx>> {\n-    debug!(\"mk_borrowck_eval_cx: {:?}\", instance);\n-    let param_env = tcx.param_env(instance.def_id());\n-    mk_eval_cx_inner(tcx, instance, mir, span, param_env)\n-}\n-\n-/// This is just a helper function to reduce code duplication between `mk_borrowck_eval_cx` and\n-/// `mk_eval_cx`. Do not call this function directly.\n-fn mk_eval_cx_inner<'a, 'mir, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    instance: Instance<'tcx>,\n-    mir: &'mir mir::Mir<'tcx>,\n-    span: Span,\n-    param_env: ty::ParamEnv<'tcx>,\n-) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'mir, 'tcx>> {\n-    let mut ecx = EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new());\n-    // Insert a stack frame so any queries have the correct substs.\n-    // We also avoid all the extra work performed by push_stack_frame,\n-    // like initializing local variables\n-    ecx.stack.push(interpret::Frame {\n-        block: mir::START_BLOCK,\n-        locals: IndexVec::new(),\n-        local_layouts: IndexVec::new(),\n-        instance,\n-        span,\n-        mir,\n-        return_place: None,\n-        return_to_block: StackPopCleanup::Goto(None), // never pop\n-        stmt: 0,\n-        extra: (),\n-    });\n-    Ok(ecx)\n-}\n-\n-/// Warning: do not use this function if you expect to start interpreting the given `Mir`.\n /// The `EvalContext` is only meant to be used to do field and index projections into constants for\n /// `simd_shuffle` and const patterns in match arms.\n ///\n /// The function containing the `match` that is currently being analyzed may have generic bounds\n /// that inform us about the generic bounds of the constant. E.g. using an associated constant\n /// of a function's generic parameter will require knowledge about the bounds on the generic\n /// parameter. These bounds are passed to `mk_eval_cx` via the `ParamEnv` argument.\n-fn mk_eval_cx<'a, 'tcx>(\n+pub(crate) fn mk_eval_cx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    instance: Instance<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-) -> EvalResult<'tcx, CompileTimeEvalContext<'a, 'tcx, 'tcx>> {\n-    debug!(\"mk_eval_cx: {:?}, {:?}\", instance, param_env);\n-    let span = tcx.def_span(instance.def_id());\n-    let mir = tcx.optimized_mir(instance.def.def_id());\n-    mk_eval_cx_inner(tcx, instance, mir, span, param_env)\n+) -> CompileTimeEvalContext<'a, 'mir, 'tcx> {\n+    debug!(\"mk_eval_cx: {:?}\", param_env);\n+    EvalContext::new(tcx.at(DUMMY_SP), param_env, CompileTimeInterpreter::new())\n }\n \n pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n@@ -109,7 +55,7 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n     mir: &'mir mir::Mir<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n-    let mut ecx = mk_borrowck_eval_cx(tcx, cid.instance, mir, DUMMY_SP).unwrap();\n+    let mut ecx = mk_eval_cx(tcx, param_env);\n     eval_body_using_ecx(&mut ecx, cid, Some(mir), param_env)\n }\n \n@@ -530,13 +476,12 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n pub fn const_field<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    instance: ty::Instance<'tcx>,\n     variant: Option<VariantIdx>,\n     field: mir::Field,\n     value: ty::Const<'tcx>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n-    trace!(\"const_field: {:?}, {:?}, {:?}\", instance, field, value);\n-    let ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n+    trace!(\"const_field: {:?}, {:?}\", field, value);\n+    let ecx = mk_eval_cx(tcx, param_env);\n     let result = (|| {\n         // get the operand again\n         let op = lazy_const_to_op(&ecx, ty::LazyConst::Evaluated(value), value.ty)?;\n@@ -561,11 +506,10 @@ pub fn const_field<'a, 'tcx>(\n pub fn const_variant_index<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    instance: ty::Instance<'tcx>,\n     val: ty::Const<'tcx>,\n ) -> EvalResult<'tcx, VariantIdx> {\n-    trace!(\"const_variant_index: {:?}, {:?}\", instance, val);\n-    let ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n+    trace!(\"const_variant_index: {:?}\", val);\n+    let ecx = mk_eval_cx(tcx, param_env);\n     let op = lazy_const_to_op(&ecx, ty::LazyConst::Evaluated(val), val.ty)?;\n     Ok(ecx.read_discriminant(op)?.1)\n }\n@@ -585,7 +529,7 @@ fn validate_and_turn_into_const<'a, 'tcx>(\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     let cid = key.value;\n-    let ecx = mk_eval_cx(tcx, cid.instance, key.param_env).unwrap();\n+    let ecx = mk_eval_cx(tcx, key.param_env);\n     let val = (|| {\n         let op = ecx.raw_const_to_mplace(constant)?.into();\n         // FIXME: Once the visitor infrastructure landed, change validation to"}, {"sha": "9cc5c93de41d8e3f9c4f1091ccdfed769a6a6b5c", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "patch": "@@ -427,13 +427,24 @@ pub enum Constructor<'tcx> {\n }\n \n impl<'tcx> Constructor<'tcx> {\n-    fn variant_index_for_adt(&self, adt: &'tcx ty::AdtDef) -> VariantIdx {\n+    fn variant_index_for_adt<'a>(\n+        &self,\n+        cx: &MatchCheckCtxt<'a, 'tcx>,\n+        adt: &'tcx ty::AdtDef,\n+    ) -> VariantIdx {\n         match self {\n             &Variant(vid) => adt.variant_index_with_id(vid),\n             &Single => {\n                 assert!(!adt.is_enum());\n                 VariantIdx::new(0)\n             }\n+            &ConstantValue(c) => {\n+                ::const_eval::const_variant_index(\n+                    cx.tcx,\n+                    cx.param_env,\n+                    c,\n+                ).unwrap()\n+            },\n             _ => bug!(\"bad constructor {:?} for adt {:?}\", self, adt)\n         }\n     }\n@@ -567,7 +578,7 @@ impl<'tcx> Witness<'tcx> {\n                             PatternKind::Variant {\n                                 adt_def: adt,\n                                 substs,\n-                                variant_index: ctor.variant_index_for_adt(adt),\n+                                variant_index: ctor.variant_index_for_adt(cx, adt),\n                                 subpatterns: pats\n                             }\n                         } else {\n@@ -1329,7 +1340,7 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n ///\n /// For instance, a tuple pattern (_, 42, Some([])) has the arity of 3.\n /// A struct pattern's arity is the number of fields it contains, etc.\n-fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> u64 {\n+fn constructor_arity(cx: &MatchCheckCtxt<'a, 'tcx>, ctor: &Constructor<'tcx>, ty: Ty<'tcx>) -> u64 {\n     debug!(\"constructor_arity({:#?}, {:?})\", ctor, ty);\n     match ty.sty {\n         ty::Tuple(ref fs) => fs.len() as u64,\n@@ -1340,7 +1351,7 @@ fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> u64 {\n         },\n         ty::Ref(..) => 1,\n         ty::Adt(adt, _) => {\n-            adt.variants[ctor.variant_index_for_adt(adt)].fields.len() as u64\n+            adt.variants[ctor.variant_index_for_adt(cx, adt)].fields.len() as u64\n         }\n         _ => 0\n     }\n@@ -1351,7 +1362,7 @@ fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> u64 {\n ///\n /// For instance, a tuple pattern (43u32, 'a') has sub pattern types [u32, char].\n fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n-                                             ctor: &Constructor,\n+                                             ctor: &Constructor<'tcx>,\n                                              ty: Ty<'tcx>) -> Vec<Ty<'tcx>>\n {\n     debug!(\"constructor_sub_pattern_tys({:#?}, {:?})\", ctor, ty);\n@@ -1368,7 +1379,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n                 // Use T as the sub pattern type of Box<T>.\n                 vec![substs.type_at(0)]\n             } else {\n-                adt.variants[ctor.variant_index_for_adt(adt)].fields.iter().map(|field| {\n+                adt.variants[ctor.variant_index_for_adt(cx, adt)].fields.iter().map(|field| {\n                     let is_visible = adt.is_enum()\n                         || field.vis.is_accessible_from(cx.module, cx.tcx);\n                     if is_visible {"}, {"sha": "cdaffe5d45673adc747c08d93a069b1f17a03dc2", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "patch": "@@ -885,7 +885,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         let adt_subpattern = |i, variant_opt| {\n             let field = Field::new(i);\n             let val = const_field(\n-                self.tcx, self.param_env, instance,\n+                self.tcx, self.param_env,\n                 variant_opt, field, cv,\n             ).expect(\"field access failed\");\n             self.const_to_pat(instance, val, id, span)\n@@ -928,7 +928,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             },\n             ty::Adt(adt_def, substs) if adt_def.is_enum() => {\n                 let variant_index = const_variant_index(\n-                    self.tcx, self.param_env, instance, cv\n+                    self.tcx, self.param_env, cv\n                 ).expect(\"const_variant_index failed\");\n                 let subpatterns = adt_subpatterns(\n                     adt_def.variants[variant_index].fields.len(),"}, {"sha": "fba74514f044ff58b7a571d7236c2064ccf6d6d4", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::layout::{\n \n use interpret::{self, EvalContext, ScalarMaybeUndef, Immediate, OpTy, MemoryKind};\n use const_eval::{\n-    CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_borrowck_eval_cx,\n+    CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_eval_cx,\n     lazy_const_to_op,\n };\n use transform::{MirPass, MirSource};\n@@ -110,9 +110,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         source: MirSource,\n     ) -> ConstPropagator<'a, 'mir, 'tcx> {\n         let param_env = tcx.param_env(source.def_id);\n-        let substs = Substs::identity_for_item(tcx, source.def_id);\n-        let instance = Instance::new(source.def_id, substs);\n-        let ecx = mk_borrowck_eval_cx(tcx, instance, mir, DUMMY_SP).unwrap();\n+        let ecx = mk_eval_cx(tcx, param_env);\n         ConstPropagator {\n             ecx,\n             mir,"}, {"sha": "c785317778b3c1a9eb4a834771aaeef4ecb731d9", "filename": "src/test/ui/consts/match_ice.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs?ref=a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+// https://github.com/rust-lang/rust/issues/53708\n+\n+struct S;\n+\n+fn main() {\n+    const C: &S = &S;\n+    match C {\n+        C => {}\n+    }\n+}"}]}