{"sha": "46173e98ef03690406d08ec9abad50d80e127e69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MTczZTk4ZWYwMzY5MDQwNmQwOGVjOWFiYWQ1MGQ4MGUxMjdlNjk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-05-27T02:15:50Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-05-28T19:03:25Z"}, "message": "Rename result::{iter,map,map2} to add _vec suffix\n\nThe result module doesn't follow the standard iter/map pattern\nthat we use in the rest of the library. So to", "tree": {"sha": "b9e853ee4a89c72bf292520830951baeed480d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e853ee4a89c72bf292520830951baeed480d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46173e98ef03690406d08ec9abad50d80e127e69", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46173e98ef03690406d08ec9abad50d80e127e69", "html_url": "https://github.com/rust-lang/rust/commit/46173e98ef03690406d08ec9abad50d80e127e69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46173e98ef03690406d08ec9abad50d80e127e69/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e921dcaef67ed6bc4325665fc19a9a2e944679", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e921dcaef67ed6bc4325665fc19a9a2e944679", "html_url": "https://github.com/rust-lang/rust/commit/a5e921dcaef67ed6bc4325665fc19a9a2e944679"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "b0fad3192be003a6f30cb1e3417860fda3e7eea2", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46173e98ef03690406d08ec9abad50d80e127e69/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46173e98ef03690406d08ec9abad50d80e127e69/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=46173e98ef03690406d08ec9abad50d80e127e69", "patch": "@@ -142,7 +142,7 @@ checking for overflow:\n         assert incd == [2u, 3u, 4u];\n     }\n \"]\n-fn map<T,U:copy,V:copy>(\n+fn map_vec<T,U:copy,V:copy>(\n     ts: [T], op: fn(T) -> result<V,U>) -> result<[V],U> {\n \n     let mut vs: [V] = [];\n@@ -177,7 +177,7 @@ length.  While we do not often use preconditions in the standard\n library, a precondition is used here because result::t is generally\n used in 'careful' code contexts where it is both appropriate and easy\n to accommodate an error like the vectors being of different lengths.\"]\n-fn map2<S,T,U:copy,V:copy>(ss: [S], ts: [T], op: fn(S,T) -> result<V,U>)\n+fn map_vec2<S,T,U:copy,V:copy>(ss: [S], ts: [T], op: fn(S,T) -> result<V,U>)\n     : vec::same_length(ss, ts) -> result<[V],U> {\n \n     let n = vec::len(ts);\n@@ -199,8 +199,8 @@ Applies op to the pairwise elements from `ss` and `ts`, aborting on\n error.  This could be implemented using `map2()` but it is more efficient\n on its own as no result vector is built.\n \"]\n-fn iter2<S,T,U:copy>(ss: [S], ts: [T],\n-                     op: fn(S,T) -> result<(),U>)\n+fn iter_vec2<S,T,U:copy>(ss: [S], ts: [T],\n+                         op: fn(S,T) -> result<(),U>)\n     : vec::same_length(ss, ts)\n     -> result<(),U> {\n "}, {"sha": "1f4d479671c2cc8eb78480c6f40404135104c945", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46173e98ef03690406d08ec9abad50d80e127e69/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46173e98ef03690406d08ec9abad50d80e127e69/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=46173e98ef03690406d08ec9abad50d80e127e69", "patch": "@@ -151,7 +151,7 @@ import middle::ty::{ty_vid, tys_in_fn_ty, region_vid, vid};\n import syntax::{ast, ast_util};\n import syntax::ast::{ret_style};\n import util::ppaux::{ty_to_str, mt_to_str};\n-import result::{result, extensions, ok, err, map, map2, iter2};\n+import result::{result, extensions, ok, err, map_vec, map_vec2, iter_vec2};\n import ty::{mk_fn, type_is_bot};\n import check::regionmanip::{collect_bound_regions_in_tys,\n                             replace_bound_regions};\n@@ -753,7 +753,7 @@ impl unify_methods for infer_ctxt {\n         as: [@ty::type_constr], bs: [@ty::type_constr]) -> ures {\n \n         if check vec::same_length(as, bs) {\n-            iter2(as, bs) {|a,b|\n+            iter_vec2(as, bs) {|a,b|\n                 self.constrs(a, b)\n             }\n         } else {\n@@ -1237,7 +1237,9 @@ fn super_tps<C:combine>(\n     // variance.\n \n     if check vec::same_length(as, bs) {\n-        iter2(as, bs) {|a, b| self.infcx().eq_tys(a, b) }.then {||\n+        iter_vec2(as, bs) {|a, b|\n+            self.infcx().eq_tys(a, b)\n+        }.then {||\n             ok(as)\n         }\n     } else {\n@@ -1331,7 +1333,7 @@ fn super_fns<C:combine>(\n         self: C, a_args: [ty::arg], b_args: [ty::arg]) -> cres<[ty::arg]> {\n \n         if check vec::same_length(a_args, b_args) {\n-            map2(a_args, b_args) {|a, b| self.args(a, b) }\n+            map_vec2(a_args, b_args) {|a, b| self.args(a, b) }\n         } else {\n             err(ty::terr_arg_count)\n         }\n@@ -1469,7 +1471,9 @@ fn super_tys<C:combine>(\n \n       (ty::ty_rec(as), ty::ty_rec(bs)) {\n         if check vec::same_length(as, bs) {\n-            map2(as, bs) {|a,b| self.flds(a, b) }.chain {|flds|\n+            map_vec2(as, bs) {|a,b|\n+                self.flds(a, b)\n+            }.chain {|flds|\n                 ok(ty::mk_rec(tcx, flds))\n             }\n         } else {\n@@ -1479,7 +1483,7 @@ fn super_tys<C:combine>(\n \n       (ty::ty_tup(as), ty::ty_tup(bs)) {\n         if check vec::same_length(as, bs) {\n-            map2(as, bs) {|a, b| self.tys(a, b) }.chain {|ts|\n+            map_vec2(as, bs) {|a, b| self.tys(a, b) }.chain {|ts|\n                 ok(ty::mk_tup(tcx, ts))\n             }\n         } else {"}]}