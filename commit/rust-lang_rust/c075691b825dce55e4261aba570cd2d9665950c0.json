{"sha": "c075691b825dce55e4261aba570cd2d9665950c0", "node_id": "C_kwDOAAsO6NoAKGMwNzU2OTFiODI1ZGNlNTVlNDI2MWFiYTU3MGNkMmQ5NjY1OTUwYzA", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-09T16:14:25Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-03T07:24:16Z"}, "message": "use --print=all-target-specs-json for stage1+", "tree": {"sha": "30cb6ffcbe8d86a380e752dbcaac8ec85c4841c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30cb6ffcbe8d86a380e752dbcaac8ec85c4841c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c075691b825dce55e4261aba570cd2d9665950c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQqfyAACgkQzXazX3c0\ndp6xaQ/9GE3uJFiF0MMg/JoUK8u8e8jg1bkvT0oe5AHoBZ3bEWDeVSd+dhD5W+DB\nmTTxJBXNU1HnXRyxF7hoXceCpfTl3wkpFEweb1chtKQMvRPpLFGNGaqLWOijcu1a\nz33kBe2/7ok2ESGgvq6bo3ssfFwWHNft4LhUg1D55GKaTmql3NhUrEDJlQdLbyL2\nerboiS4m8GMYuuivo0CF5STy588C3GbfRxgdWgqyp+7RjPkF66O95QOJpT6DzVvf\n6Sec7VTJNwOQTsx4rG1rQZ9m3BEtLBaOjFuMEA2Qf7z86WXmfGFezxH777U73bIK\nXJaSkm8t47cyz75sq1StNEEgw39kqmQnBa4sOtEu484JGrsEbZBSwjWTsF8SkUFS\nhfT8NkF7mi13447DZPImYn8LjDappbpGM5M8/QwutiUtAU90QdkSAIkFd0UCC1bh\nTjqb+SDaWWygXvcIAxek5raqCUTRZN2vrw3KfeRipFgNPR65dkrUVqRUVF7Jow4m\nbU40MJlllGuG5beB1wkLIkW9wfr9beJ8oteMfnmZZhzQJr9ONizN9qbIea4onZjJ\nb8ANyxVRlbOrdLV/8Z5nJVJXo2JZkpfWcoMUny0Z5/B0pO3lzNwbn8KuCjcwKfS3\n0CAsFG3sGR8aDhYAwzWLxHctD12nzr3qjZ61L88GmwItC4vSoqs=\n=va1v\n-----END PGP SIGNATURE-----", "payload": "tree 30cb6ffcbe8d86a380e752dbcaac8ec85c4841c5\nparent 0e6d2053b460a130ad798a5037708bb01352b3ea\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678378465 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1680506656 +0200\n\nuse --print=all-target-specs-json for stage1+\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c075691b825dce55e4261aba570cd2d9665950c0", "html_url": "https://github.com/rust-lang/rust/commit/c075691b825dce55e4261aba570cd2d9665950c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c075691b825dce55e4261aba570cd2d9665950c0/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e6d2053b460a130ad798a5037708bb01352b3ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6d2053b460a130ad798a5037708bb01352b3ea", "html_url": "https://github.com/rust-lang/rust/commit/0e6d2053b460a130ad798a5037708bb01352b3ea"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "833579aa926e624d46253742dea129b4bb2d7efb", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c075691b825dce55e4261aba570cd2d9665950c0/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c075691b825dce55e4261aba570cd2d9665950c0/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=c075691b825dce55e4261aba570cd2d9665950c0", "patch": "@@ -9,9 +9,9 @@ use std::str::FromStr;\n \n use crate::util::{add_dylib_path, PathBufExt};\n use lazycell::LazyCell;\n-use std::collections::HashSet;\n-use test::{ColorConfig, OutputFormat};\n use serde::de::{Deserialize, Deserializer, Error as _};\n+use std::collections::{HashMap, HashSet};\n+use test::{ColorConfig, OutputFormat};\n \n macro_rules! string_enum {\n     ($(#[$meta:meta])* $vis:vis enum $name:ident { $($variant:ident => $repr:expr,)* }) => {\n@@ -410,8 +410,17 @@ pub struct TargetCfgs {\n \n impl TargetCfgs {\n     fn new(config: &Config) -> TargetCfgs {\n-        // Gather list of all targets\n-        let targets = rustc_output(config, &[\"--print=target-list\"]);\n+        let targets: HashMap<String, TargetCfg> = if config.stage_id.starts_with(\"stage0-\") {\n+            // #[cfg(bootstrap)]\n+            // Needed only for one cycle, remove during the bootstrap bump.\n+            Self::collect_all_slow(config)\n+        } else {\n+            serde_json::from_str(&rustc_output(\n+                config,\n+                &[\"--print=all-target-specs-json\", \"-Zunstable-options\"],\n+            ))\n+            .unwrap()\n+        };\n \n         let mut current = None;\n         let mut all_targets = HashSet::new();\n@@ -422,9 +431,7 @@ impl TargetCfgs {\n         let mut all_families = HashSet::new();\n         let mut all_pointer_widths = HashSet::new();\n \n-        for target in targets.trim().lines() {\n-            let cfg = TargetCfg::new(config, target);\n-\n+        for (target, cfg) in targets.into_iter() {\n             all_archs.insert(cfg.arch.clone());\n             all_oses.insert(cfg.os.clone());\n             all_envs.insert(cfg.env.clone());\n@@ -451,6 +458,25 @@ impl TargetCfgs {\n             all_pointer_widths,\n         }\n     }\n+\n+    // #[cfg(bootstrap)]\n+    // Needed only for one cycle, remove during the bootstrap bump.\n+    fn collect_all_slow(config: &Config) -> HashMap<String, TargetCfg> {\n+        let mut result = HashMap::new();\n+        for target in rustc_output(config, &[\"--print=target-list\"]).trim().lines() {\n+            let json = rustc_output(\n+                config,\n+                &[\"--print=target-spec-json\", \"-Zunstable-options\", \"--target\", target],\n+            );\n+            match serde_json::from_str(&json) {\n+                Ok(res) => {\n+                    result.insert(target.into(), res);\n+                }\n+                Err(err) => panic!(\"failed to parse target spec for {target}: {err}\"),\n+            }\n+        }\n+        result\n+    }\n }\n \n #[derive(Clone, Debug, serde::Deserialize)]\n@@ -481,19 +507,6 @@ pub enum Endian {\n     Big,\n }\n \n-impl TargetCfg {\n-    fn new(config: &Config, target: &str) -> TargetCfg {\n-        let json = rustc_output(\n-            config,\n-            &[\"--print=target-spec-json\", \"-Zunstable-options\", \"--target\", target],\n-        );\n-        match serde_json::from_str(&json) {\n-            Ok(res) => res,\n-            Err(err) => panic!(\"failed to parse target spec for {target}: {err}\"),\n-        }\n-    }\n-}\n-\n fn rustc_output(config: &Config, args: &[&str]) -> String {\n     let mut command = Command::new(&config.rustc_path);\n     add_dylib_path(&mut command, iter::once(&config.compile_lib_path));"}]}