{"sha": "05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "node_id": "C_kwDOAAsO6NoAKDA1Y2Q3NTUwNGI2YmZjZTllOGVhOWNjNTdkY2VmMTEyMGI5OGFjZGU", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-07T10:28:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-23T11:31:32Z"}, "message": "rustc_lint: Stop creating a fake `ast::Crate` for running early lints\n\nAdd a trait generalizing over the crate root and freshly loaded modules instead\nThis also makes node IDs used for pre-expansion linting more precise", "tree": {"sha": "6afa33fcc396ab349b35eed00f43f2e96f66dcd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6afa33fcc396ab349b35eed00f43f2e96f66dcd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "html_url": "https://github.com/rust-lang/rust/commit/05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c70b6d11b8337102f2d88e2ebab4c42944797e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c70b6d11b8337102f2d88e2ebab4c42944797e5", "html_url": "https://github.com/rust-lang/rust/commit/9c70b6d11b8337102f2d88e2ebab4c42944797e5"}], "stats": {"total": 111, "additions": 85, "deletions": 26}, "files": [{"sha": "dcda42265514a54ebb9e32e42902bbefb30f4c88", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "patch": "@@ -959,8 +959,9 @@ pub struct ExpansionData {\n     pub is_trailing_mac: bool,\n }\n \n-type OnExternModLoaded<'a> =\n-    Option<&'a dyn Fn(Ident, Vec<Attribute>, Vec<P<Item>>, Span) -> (Vec<Attribute>, Vec<P<Item>>)>;\n+type OnExternModLoaded<'a> = Option<\n+    &'a dyn Fn(NodeId, Vec<Attribute>, Vec<P<Item>>, Symbol) -> (Vec<Attribute>, Vec<P<Item>>),\n+>;\n \n /// One of these is made during expansion and incrementally updated as we go;\n /// when a macro expansion occurs, the resulting nodes have the `backtrace()"}, {"sha": "ac637b7c7ed3735429b8224100fe5ad76c66da8c", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "patch": "@@ -1108,7 +1108,12 @@ impl InvocationCollectorNode for P<ast::Item> {\n                     );\n \n                 if let Some(extern_mod_loaded) = ecx.extern_mod_loaded {\n-                    (attrs, items) = extern_mod_loaded(ident, attrs, items, inner_span);\n+                    (attrs, items) = extern_mod_loaded(\n+                        ecx.current_expansion.lint_node_id,\n+                        attrs,\n+                        items,\n+                        ident.name,\n+                    );\n                 }\n \n                 *mod_kind = ModKind::Loaded(items, Inline::No, inner_span);"}, {"sha": "a1b38b6fb9038a8b45d715784834d5def1b2099e", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "patch": "@@ -3,7 +3,7 @@ use crate::proc_macro_decls;\n use crate::util;\n \n use rustc_ast::mut_visit::MutVisitor;\n-use rustc_ast::{self as ast, visit, DUMMY_NODE_ID};\n+use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -14,7 +14,7 @@ use rustc_errors::{Applicability, ErrorReported, PResult};\n use rustc_expand::base::{ExtCtxt, ResolverExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n-use rustc_lint::LintStore;\n+use rustc_lint::{EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n use rustc_metadata::{encode_metadata, EncodedMetadata};\n use rustc_middle::arena::Arena;\n@@ -34,7 +34,7 @@ use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{FileName, MultiSpan};\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n@@ -233,11 +233,11 @@ pub fn register_plugins<'a>(\n     Ok((krate, lint_store))\n }\n \n-fn pre_expansion_lint(\n+fn pre_expansion_lint<'a>(\n     sess: &Session,\n     lint_store: &LintStore,\n     registered_tools: &RegisteredTools,\n-    check_node: &ast::Crate,\n+    check_node: impl EarlyCheckNode<'a>,\n     node_name: &str,\n ) {\n     sess.prof.generic_activity_with_arg(\"pre_AST_expansion_lint_checks\", node_name).run(|| {\n@@ -322,10 +322,15 @@ pub fn configure_and_expand(\n         };\n \n         let registered_tools = resolver.registered_tools().clone();\n-        let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n-            let krate = ast::Crate { attrs, items, span, id: DUMMY_NODE_ID, is_placeholder: false };\n-            pre_expansion_lint(sess, lint_store, &registered_tools, &krate, ident.name.as_str());\n-            (krate.attrs, krate.items)\n+        let extern_mod_loaded = |node_id, attrs: Vec<_>, items: Vec<_>, name: Symbol| {\n+            pre_expansion_lint(\n+                sess,\n+                lint_store,\n+                &registered_tools,\n+                (node_id, &*attrs, &*items),\n+                name.as_str(),\n+            );\n+            (attrs, items)\n         };\n         let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&extern_mod_loaded));\n \n@@ -507,7 +512,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n             resolver.registered_tools(),\n             lint_buffer,\n             rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n-            &krate,\n+            &*krate,\n         )\n     });\n "}, {"sha": "1b2c88867d49dbe2822ff83ad1af5d59ea240b22", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 60, "deletions": 12, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "patch": "@@ -16,9 +16,10 @@\n \n use crate::context::{EarlyContext, LintContext, LintStore};\n use crate::passes::{EarlyLintPass, EarlyLintPassObject};\n-use rustc_ast as ast;\n-use rustc_ast::visit as ast_visit;\n+use rustc_ast::ptr::P;\n+use rustc_ast::visit::{self as ast_visit, Visitor};\n use rustc_ast::AstLike;\n+use rustc_ast::{self as ast, walk_list};\n use rustc_middle::ty::RegisteredTools;\n use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n@@ -32,7 +33,7 @@ macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);\n }) }\n \n-struct EarlyContextAndPass<'a, T: EarlyLintPass> {\n+pub struct EarlyContextAndPass<'a, T: EarlyLintPass> {\n     context: EarlyContext<'a>,\n     pass: T,\n }\n@@ -326,14 +327,65 @@ macro_rules! early_lint_pass_impl {\n \n crate::early_lint_methods!(early_lint_pass_impl, []);\n \n-fn early_lint_node(\n+/// Early lints work on different nodes - either on the crate root, or on freshly loaded modules.\n+/// This trait generalizes over those nodes.\n+pub trait EarlyCheckNode<'a>: Copy {\n+    fn id(self) -> ast::NodeId;\n+    fn attrs<'b>(self) -> &'b [ast::Attribute]\n+    where\n+        'a: 'b;\n+    fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)\n+    where\n+        'a: 'b;\n+}\n+\n+impl<'a> EarlyCheckNode<'a> for &'a ast::Crate {\n+    fn id(self) -> ast::NodeId {\n+        ast::CRATE_NODE_ID\n+    }\n+    fn attrs<'b>(self) -> &'b [ast::Attribute]\n+    where\n+        'a: 'b,\n+    {\n+        &self.attrs\n+    }\n+    fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)\n+    where\n+        'a: 'b,\n+    {\n+        run_early_pass!(cx, check_crate, self);\n+        ast_visit::walk_crate(cx, self);\n+        run_early_pass!(cx, check_crate_post, self);\n+    }\n+}\n+\n+impl<'a> EarlyCheckNode<'a> for (ast::NodeId, &'a [ast::Attribute], &'a [P<ast::Item>]) {\n+    fn id(self) -> ast::NodeId {\n+        self.0\n+    }\n+    fn attrs<'b>(self) -> &'b [ast::Attribute]\n+    where\n+        'a: 'b,\n+    {\n+        self.1\n+    }\n+    fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)\n+    where\n+        'a: 'b,\n+    {\n+        walk_list!(cx, visit_attribute, self.1);\n+        walk_list!(cx, visit_item, self.2);\n+    }\n+}\n+\n+fn early_lint_node<'a>(\n     sess: &Session,\n     warn_about_weird_lints: bool,\n     lint_store: &LintStore,\n     registered_tools: &RegisteredTools,\n     buffered: LintBuffer,\n     pass: impl EarlyLintPass,\n-    check_node: &ast::Crate,\n+    check_node: impl EarlyCheckNode<'a>,\n ) -> LintBuffer {\n     let mut cx = EarlyContextAndPass {\n         context: EarlyContext::new(\n@@ -346,22 +398,18 @@ fn early_lint_node(\n         pass,\n     };\n \n-    cx.with_lint_attrs(ast::CRATE_NODE_ID, &check_node.attrs, |cx| {\n-        run_early_pass!(cx, check_crate, check_node);\n-        ast_visit::walk_crate(cx, check_node);\n-        run_early_pass!(cx, check_crate_post, check_node);\n-    });\n+    cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));\n     cx.context.buffered\n }\n \n-pub fn check_ast_node(\n+pub fn check_ast_node<'a>(\n     sess: &Session,\n     pre_expansion: bool,\n     lint_store: &LintStore,\n     registered_tools: &RegisteredTools,\n     lint_buffer: Option<LintBuffer>,\n     builtin_lints: impl EarlyLintPass,\n-    check_node: &ast::Crate,\n+    check_node: impl EarlyCheckNode<'a>,\n ) {\n     let passes =\n         if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };"}, {"sha": "8afbd462c146ba2378701ab918c95bc2067d8bf9", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cd75504b6bfce9e8ea9cc57dcef1120b98acde/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "patch": "@@ -5,7 +5,7 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::{intravisit, HirId, CRATE_HIR_ID};\n+use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::LevelAndSource;\n use rustc_middle::lint::LintDiagnosticBuilder;"}]}