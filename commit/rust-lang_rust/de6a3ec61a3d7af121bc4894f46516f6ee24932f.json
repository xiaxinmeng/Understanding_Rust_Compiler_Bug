{"sha": "de6a3ec61a3d7af121bc4894f46516f6ee24932f", "node_id": "C_kwDOAAsO6NoAKGRlNmEzZWM2MWEzZDdhZjEyMWJjNDg5NGY0NjUxNmY2ZWUyNDkzMmY", "commit": {"author": {"name": "yjhn", "email": "54238857+yjhn@users.noreply.github.com", "date": "2022-08-30T09:29:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-30T09:29:18Z"}, "message": "Make docs formulation more consistent for NonZero{int}\n\nUse third person, as it is used for other std documentation.", "tree": {"sha": "8cdc8a3d172d810b7d4a8d1755f8a1d43a30f79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cdc8a3d172d810b7d4a8d1755f8a1d43a30f79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de6a3ec61a3d7af121bc4894f46516f6ee24932f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDdhuCRBK7hj4Ov3rIwAAmZ4IAEj6zfALoSqzzznzc96G7VQn\nX22QOkt6JiFIi4CJl82ZeKRO3TYJ40ev6s+R5/EWGm9mmG4V68hVgvyUjXC8D3se\nZCsczGzhI7OPZJSxyy3lPevXsmoNbA+6auFOx7TVX5nOKqweuMt3oue44DawSZjp\ntyr3F/CJB7FoiZzLI4IGiHgmdCZe8l0A2/XjQipcZRCLnERFKN9bW6GiMOotxMLi\nHUuaLrAa6QPXTWAVDJWX8fObh7xgCeVFGv8+P4fbKPHQQahY0a8Uxa5/u0aZCUBk\nngpPBhfLhd23R7XVbUhiiamu3FVlg5kDiddRMAKnIjVq154I11/Y+p4lTaER2Ug=\n=zugk\n-----END PGP SIGNATURE-----\n", "payload": "tree 8cdc8a3d172d810b7d4a8d1755f8a1d43a30f79a\nparent a0d07093f80a0206f42d3dbada66212eda52b694\nauthor yjhn <54238857+yjhn@users.noreply.github.com> 1661851758 +0300\ncommitter GitHub <noreply@github.com> 1661851758 +0300\n\nMake docs formulation more consistent for NonZero{int}\n\nUse third person, as it is used for other std documentation."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de6a3ec61a3d7af121bc4894f46516f6ee24932f", "html_url": "https://github.com/rust-lang/rust/commit/de6a3ec61a3d7af121bc4894f46516f6ee24932f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de6a3ec61a3d7af121bc4894f46516f6ee24932f/comments", "author": {"login": "yjhn", "id": 54238857, "node_id": "MDQ6VXNlcjU0MjM4ODU3", "avatar_url": "https://avatars.githubusercontent.com/u/54238857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yjhn", "html_url": "https://github.com/yjhn", "followers_url": "https://api.github.com/users/yjhn/followers", "following_url": "https://api.github.com/users/yjhn/following{/other_user}", "gists_url": "https://api.github.com/users/yjhn/gists{/gist_id}", "starred_url": "https://api.github.com/users/yjhn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yjhn/subscriptions", "organizations_url": "https://api.github.com/users/yjhn/orgs", "repos_url": "https://api.github.com/users/yjhn/repos", "events_url": "https://api.github.com/users/yjhn/events{/privacy}", "received_events_url": "https://api.github.com/users/yjhn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d07093f80a0206f42d3dbada66212eda52b694", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d07093f80a0206f42d3dbada66212eda52b694", "html_url": "https://github.com/rust-lang/rust/commit/a0d07093f80a0206f42d3dbada66212eda52b694"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "1cf306f2103b4ff02ca0dfdeee6918725054fdf1", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/de6a3ec61a3d7af121bc4894f46516f6ee24932f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6a3ec61a3d7af121bc4894f46516f6ee24932f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=de6a3ec61a3d7af121bc4894f46516f6ee24932f", "patch": "@@ -309,8 +309,8 @@ macro_rules! nonzero_unsigned_operations {\n     ( $( $Ty: ident($Int: ident); )+ ) => {\n         $(\n             impl $Ty {\n-                /// Add an unsigned integer to a non-zero value.\n-                /// Check for overflow and return [`None`] on overflow\n+                /// Adds an unsigned integer to a non-zero value.\n+                /// Checks for overflow and returns [`None`] on overflow.\n                 /// As a consequence, the result cannot wrap to zero.\n                 ///\n                 ///\n@@ -346,7 +346,7 @@ macro_rules! nonzero_unsigned_operations {\n                     }\n                 }\n \n-                /// Add an unsigned integer to a non-zero value.\n+                /// Adds an unsigned integer to a non-zero value.\n                 #[doc = concat!(\"Return [`\", stringify!($Int), \"::MAX`] on overflow.\")]\n                 ///\n                 /// # Examples\n@@ -377,7 +377,7 @@ macro_rules! nonzero_unsigned_operations {\n                     unsafe { $Ty::new_unchecked(self.get().saturating_add(other)) }\n                 }\n \n-                /// Add an unsigned integer to a non-zero value,\n+                /// Adds an unsigned integer to a non-zero value,\n                 /// assuming overflow cannot occur.\n                 /// Overflow is unchecked, and it is undefined behaviour to overflow\n                 /// *even if the result would wrap to a non-zero value*.\n@@ -409,7 +409,7 @@ macro_rules! nonzero_unsigned_operations {\n                 }\n \n                 /// Returns the smallest power of two greater than or equal to n.\n-                /// Check for overflow and return [`None`]\n+                /// Checks for overflow and returns [`None`]\n                 /// if the next power of two is greater than the type\u2019s maximum value.\n                 /// As a consequence, the result cannot wrap to zero.\n                 ///\n@@ -545,7 +545,7 @@ macro_rules! nonzero_signed_operations {\n                 }\n \n                 /// Checked absolute value.\n-                /// Check for overflow and returns [`None`] if\n+                /// Checks for overflow and returns [`None`] if\n                 #[doc = concat!(\"`self == \", stringify!($Int), \"::MIN`.\")]\n                 /// The result cannot be zero.\n                 ///\n@@ -740,8 +740,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n     ( $( $signedness:ident $Ty: ident($Int: ty); )+ ) => {\n         $(\n             impl $Ty {\n-                /// Multiply two non-zero integers together.\n-                /// Check for overflow and return [`None`] on overflow.\n+                /// Multiplies two non-zero integers together.\n+                /// Checks for overflow and returns [`None`] on overflow.\n                 /// As a consequence, the result cannot wrap to zero.\n                 ///\n                 /// # Examples\n@@ -777,7 +777,7 @@ macro_rules! nonzero_unsigned_signed_operations {\n                     }\n                 }\n \n-                /// Multiply two non-zero integers together.\n+                /// Multiplies two non-zero integers together.\n                 #[doc = concat!(\"Return [`\", stringify!($Int), \"::MAX`] on overflow.\")]\n                 ///\n                 /// # Examples\n@@ -809,7 +809,7 @@ macro_rules! nonzero_unsigned_signed_operations {\n                     unsafe { $Ty::new_unchecked(self.get().saturating_mul(other.get())) }\n                 }\n \n-                /// Multiply two non-zero integers together,\n+                /// Multiplies two non-zero integers together,\n                 /// assuming overflow cannot occur.\n                 /// Overflow is unchecked, and it is undefined behaviour to overflow\n                 /// *even if the result would wrap to a non-zero value*.\n@@ -849,8 +849,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                     unsafe { $Ty::new_unchecked(self.get().unchecked_mul(other.get())) }\n                 }\n \n-                /// Raise non-zero value to an integer power.\n-                /// Check for overflow and return [`None`] on overflow.\n+                /// Raises non-zero value to an integer power.\n+                /// Checks for overflow and returns [`None`] on overflow.\n                 /// As a consequence, the result cannot wrap to zero.\n                 ///\n                 /// # Examples"}]}