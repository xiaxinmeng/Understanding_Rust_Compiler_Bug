{"sha": "bf544fa920efb1614f95ebc783fbd11c07604972", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTQ0ZmE5MjBlZmIxNjE0Zjk1ZWJjNzgzZmJkMTFjMDc2MDQ5NzI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-30T23:18:11Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-07T12:09:52Z"}, "message": "remove `#[rustc_error]` from ui/ tests that remain compile-fail tests.", "tree": {"sha": "6efc2c2a9b1a7eda2d4afdd2bee9ab8075ad71fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6efc2c2a9b1a7eda2d4afdd2bee9ab8075ad71fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf544fa920efb1614f95ebc783fbd11c07604972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf544fa920efb1614f95ebc783fbd11c07604972", "html_url": "https://github.com/rust-lang/rust/commit/bf544fa920efb1614f95ebc783fbd11c07604972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf544fa920efb1614f95ebc783fbd11c07604972/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8315b11b6352cbd91ee096571c31ae7d3ac9613d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8315b11b6352cbd91ee096571c31ae7d3ac9613d", "html_url": "https://github.com/rust-lang/rust/commit/8315b11b6352cbd91ee096571c31ae7d3ac9613d"}], "stats": {"total": 164, "additions": 82, "deletions": 82}, "files": [{"sha": "543eb2ac84263f70cf6ba80d336051b966d69e5f", "filename": "src/test/ui/asm/asm-bad-clobber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -21,11 +21,11 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm, rustc_attrs)]\n+#![feature(asm)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]\n-#[rustc_error]\n+\n pub fn main() {\n     unsafe {\n         // clobber formatted as register input/output"}, {"sha": "ee6a61dca4add7a2649a8404f4f41fd5813cba4b", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -13,7 +13,7 @@\n \n // aux-build:coherence_copy_like_lib.rs\n \n-#![feature(rustc_attrs)]\n+\n \n extern crate coherence_copy_like_lib as lib;\n \n@@ -26,5 +26,5 @@ impl<T: lib::MyCopy> MyTrait for T { }\n // Tuples are not fundamental.\n impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "72772a6efbd12055f5aed5ca003f23e5c46facc2", "filename": "src/test/ui/coherence/coherence_local_err_struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -13,7 +13,7 @@\n \n // aux-build:coherence_copy_like_lib.rs\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -25,5 +25,5 @@ struct MyType { x: i32 }\n // MyStruct is not fundamental.\n impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "88e98c7ce00117c7e19ba3e725f9b6ebeae8d001", "filename": "src/test/ui/coherence/coherence_local_err_tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -13,7 +13,7 @@\n \n // aux-build:coherence_copy_like_lib.rs\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -25,5 +25,5 @@ struct MyType { x: i32 }\n // Tuples are not fundamental, so this is not a local impl.\n impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "4371de57776dffcc7f45653d86daea7db7863ac3", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -10,7 +10,7 @@\n \n // Check that literals in attributes parse just fine.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -29,5 +29,5 @@\n #[fake_doc(r\"doc\")] //~ ERROR attribute `fake_doc` is currently unknown\n struct Q {  }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "cd0ba5e4a0a5946f41b573fbc2efd59215c60360", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -15,7 +15,7 @@\n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n-#![feature(rustc_attrs)]\n+\n \n extern crate lifetime_bound_will_change_warning_lib as lib;\n \n@@ -59,6 +59,6 @@ fn test3cc<'a>(x: &'a Box<Fn()+'static>) {\n     lib::ref_obj(x)\n }\n \n-#[rustc_error]\n+\n fn main() {\n }"}, {"sha": "4467ac4356b6eb5fe77c11d464a8649e171e4df0", "filename": "src/test/ui/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test if the on_unimplemented message override works\n \n #![feature(on_unimplemented)]\n-#![feature(rustc_attrs)]\n+\n \n struct Foo<T>(T);\n struct Bar<T>(T);\n@@ -38,7 +38,7 @@ impl Index<Bar<usize>> for [i32] {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() {\n     Index::index(&[] as &[i32], 2u32);\n     //~^ ERROR E0277"}, {"sha": "d104d1ed033eaa1b05c74a9cb55b3be89c7cff72", "filename": "src/test/ui/on-unimplemented/on-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test if the on_unimplemented message override works\n \n #![feature(on_unimplemented)]\n-#![feature(rustc_attrs)]\n+\n \n #[rustc_on_unimplemented = \"invalid\"]\n trait Index<Idx: ?Sized> {\n@@ -27,7 +27,7 @@ impl Index<usize> for [i32] {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() {\n     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n     //~^ ERROR E0277"}, {"sha": "79bb277d2c1e6fbbfcd67d74d5e298f1cea946c3", "filename": "src/test/ui/on-unimplemented/slice-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,11 +11,11 @@\n // Test new Index error message for slices\n // ignore-tidy-linelength\n \n-#![feature(rustc_attrs)]\n+\n \n use std::ops::Index;\n \n-#[rustc_error]\n+\n fn main() {\n     let x = &[1, 2, 3] as &[i32];\n     x[1i32]; //~ ERROR E0277"}, {"sha": "270e20f2e6dce4954bba4fc77bb283e9e512e8f6", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -12,7 +12,7 @@\n // \"outlives\" requirements. Issue #22246.\n \n #![allow(dead_code)]\n-#![feature(rustc_attrs)]\n+\n \n ///////////////////////////////////////////////////////////////////////////\n \n@@ -64,6 +64,6 @@ fn with_assoc_sub<'a,'b>() {\n     //~^ ERROR reference has a longer lifetime\n }\n \n-#[rustc_error]\n+\n fn main() {\n }"}, {"sha": "a4681633326472a2527a8a1ff0d294148e4d27f1", "filename": "src/test/ui/retslot-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fretslot-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fretslot-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fretslot-cast.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(warnings)]\n \n pub fn fail(x: Option<&(Iterator<Item=()>+Send)>)\n@@ -29,5 +29,5 @@ pub fn inner(x: Option<&(Iterator<Item=()>+Send)>)\n     x\n }\n \n-#[rustc_error]\n+\n fn main() {}"}, {"sha": "77b5b401c42f15afe9363f8c105d18ed8f14a7ad", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region-rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -13,7 +13,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n mod rev_variant_struct_region {\n@@ -28,5 +28,5 @@ mod rev_variant_struct_region {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "b6ac7aa3a9cd2ac46ab677592ee6f587f58d9856", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -13,7 +13,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n mod variant_struct_region {\n@@ -28,5 +28,5 @@ mod variant_struct_region {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "3f7d086a6ae19c4347ceab84de8fa4d6e17b2487", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type-rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -13,7 +13,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n mod variant_struct_type {\n@@ -28,5 +28,5 @@ mod variant_struct_type {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "dff9b8a862f6c74ab8270eb0aee090bbb60de799", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -13,7 +13,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n mod variant_struct_type {\n@@ -28,5 +28,5 @@ mod variant_struct_type {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "59fc0136612dd9d5c0c79740b68a128ab73963d1", "filename": "src/test/ui/variance/variance-btree-invariant-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+\n \n use std::collections::btree_map::{IterMut, OccupiedEntry, VacantEntry};\n \n@@ -59,5 +59,5 @@ fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n     v //~ ERROR mismatched types\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "47ecec5a1124e00496c7bd1c65a656ce17326e46", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-#![feature(rustc_attrs)]\n+\n \n struct SomeStruct<T>(fn(T));\n \n@@ -22,5 +22,5 @@ fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n     v //~ ERROR mismatched types\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "2e6c0c16dcd0d04a50a5ba58d9f0f2aa5c8b2d1b", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-#![feature(rustc_attrs)]\n+\n \n struct SomeStruct<T>(*mut T);\n \n@@ -29,5 +29,5 @@ fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n     v //~ ERROR mismatched types\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "36e9226ae3f8106712aa832989c9b102bfea59a4", "filename": "src/test/ui/wf/wf-array-elem-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -10,12 +10,12 @@\n \n // Check that array elemen types must be Sized. Issue #25692.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct Foo {\n     foo: [[u8]], //~ ERROR E0277\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "bc14ce46ff1992e2309a44296807b54c3b8e2a7a", "filename": "src/test/ui/wf/wf-const-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check the types of constants are well-formed.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> { t: T }\n@@ -20,5 +20,5 @@ struct NotCopy;\n const FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n //~^ ERROR E0277\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "6c08f5a4a547e1cc15129f652d6cc8a69e265282", "filename": "src/test/ui/wf/wf-enum-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check enum bounds for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -22,5 +22,5 @@ enum SomeEnum<T,U> //~ ERROR E0277\n     SomeVariant(T,U)\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "572b609fe2ef225908f1bc680a1d2b277c12233b", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check struct fields for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> {\n@@ -24,5 +24,5 @@ enum AnotherEnum<A> {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "32e870e9e1b5b586c4d987ab0c8254cbb249c5f2", "filename": "src/test/ui/wf/wf-enum-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check struct fields for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> {\n@@ -22,5 +22,5 @@ enum SomeEnum<A> {\n     SomeVariant(IsCopy<A>) //~ ERROR E0277\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "3d97bdb521fa8c32bab88bb9023bc98907d42152", "filename": "src/test/ui/wf/wf-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we check where-clauses on fn items.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -23,5 +23,5 @@ fn bar() where Vec<dyn Copy>:, {}\n //~^ ERROR E0277\n //~| ERROR E0038\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "aa88b3d7377e0cea80c37cca00eabde7764b3fdb", "filename": "src/test/ui/wf/wf-impl-associated-type-region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we require that associated types in an impl are well-formed.\n \n-#![feature(rustc_attrs)]\n+\n \n pub trait Foo<'a> {\n     type Bar;\n@@ -20,5 +20,5 @@ impl<'a, T> Foo<'a> for T {\n     type Bar = &'a T; //~ ERROR E0309\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "0b5a76db262668ee13bd478bb86ddbfe2c2a6833", "filename": "src/test/ui/wf/wf-impl-associated-type-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we require that associated types in an impl are well-formed.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n pub trait MyHash { }\n@@ -28,5 +28,5 @@ impl<T> Foo for T {\n     //~^ ERROR the trait bound `T: MyHash` is not satisfied\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "dfe6688c0b7f2080142e14f695d4bc177a8001c5", "filename": "src/test/ui/wf/wf-in-fn-type-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -12,7 +12,7 @@\n // types in fns.\n \n #![allow(dead_code)]\n-#![feature(rustc_attrs)]\n+\n \n struct MustBeCopy<T:Copy> {\n     t: T\n@@ -28,5 +28,5 @@ struct Bar<T> {\n     x: fn(&'static T) //~ ERROR E0310\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "f6f14099e738ea8078beb211ffd51b0efb169667", "filename": "src/test/ui/wf/wf-in-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we enforce WF conditions also for where clauses in fn items.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait MustBeCopy<T:Copy> {\n@@ -21,5 +21,5 @@ fn bar<T,U>() //~ ERROR E0277\n {\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "7cbcf99af3c680ff37c6ba208105b4f70780ff70", "filename": "src/test/ui/wf/wf-in-obj-type-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we enforce WF conditions also for types in fns.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait Object<T> { }\n@@ -24,5 +24,5 @@ struct Foo<T> {\n     x: Object<&'static T> //~ ERROR E0310\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "8b65b2e1626679c62e59ad9a8b0524122291a2ea", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check where-clauses on inherent impl methods.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -23,5 +23,5 @@ impl<T,U> Foo<T,U> {\n     {}\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "ee929282849026103ca3b336c20897316e92091d", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check where-clauses on inherent impls.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -22,5 +22,5 @@ impl<T,U> Foo<T,U> where T: ExtraCopy<U> //~ ERROR E0277\n {\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "91943b44d97adc8f99618d81f7bb35226bf278a0", "filename": "src/test/ui/wf/wf-static-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check the types of statics are well-formed.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> { t: T }\n@@ -20,5 +20,5 @@ struct NotCopy;\n static FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n //~^ ERROR E0277\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "c4a15bbe5407c589c4672c94dd272d26ad5772c8", "filename": "src/test/ui/wf/wf-struct-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check struct bounds for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -22,5 +22,5 @@ struct SomeStruct<T,U> //~ ERROR E0277\n     data: (T,U)\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "4d1e42829d88bfd31b5bead839472ba040aa91a8", "filename": "src/test/ui/wf/wf-struct-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check struct fields for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> {\n@@ -22,5 +22,5 @@ struct SomeStruct<A> {\n     data: IsCopy<A> //~ ERROR E0277\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "eaeffa017400e75a8975514a777b2bfdc7805f8d", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check associated type bounds for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -20,5 +20,5 @@ trait SomeTrait<T> { //~ ERROR E0277\n     type Type1: ExtraCopy<T>;\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "61cdbe5e49128d2afb0004a4e14a1d3d448fd21e", "filename": "src/test/ui/wf/wf-trait-associated-type-region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check associated type default values for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait SomeTrait<'a> {\n@@ -20,5 +20,5 @@ trait SomeTrait<'a> {\n     //~^ ERROR E0309\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "e752c0a9077ce1c1672a94fa1eed8f510433f5c5", "filename": "src/test/ui/wf/wf-trait-associated-type-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check associated type default values for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> { x: T }\n@@ -22,5 +22,5 @@ trait SomeTrait {\n     //~^ ERROR E0277\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "c02281ab4f9502215c3bf4b0b71050155f4765ef", "filename": "src/test/ui/wf/wf-trait-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Test that we check supertrait bounds for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -21,5 +21,5 @@ trait SomeTrait<T,U> //~ ERROR E0277\n {\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "8577bc8963826b6c595f862f138323541a5e803f", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Check that we test WF conditions for fn arguments. Because the\n // current code is so goofy, this is only a warning for now.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -25,5 +25,5 @@ trait Foo {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "b15767198704182fe2959d2c3264156358d53f87", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -11,7 +11,7 @@\n // Check that we test WF conditions for fn arguments. Because the\n // current code is so goofy, this is only a warning for now.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -25,5 +25,5 @@ trait Foo {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "44e3d6bda5cd8b782ecd36199aea119714d70ae9", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf544fa920efb1614f95ebc783fbd11c07604972/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.rs?ref=bf544fa920efb1614f95ebc783fbd11c07604972", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we test WF conditions for fn where clauses in a trait definition.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -23,5 +23,5 @@ trait Foo {\n         // Here, Eq ought to be implemented.\n }\n \n-#[rustc_error]\n+\n fn main() { }"}]}