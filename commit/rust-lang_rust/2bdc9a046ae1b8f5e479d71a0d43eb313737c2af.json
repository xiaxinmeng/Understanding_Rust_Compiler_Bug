{"sha": "2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "node_id": "C_kwDOAAsO6NoAKDJiZGM5YTA0NmFlMWI4ZjVlNDc5ZDcxYTBkNDNlYjMxMzczN2MyYWY", "commit": {"author": {"name": "Vincenzo Palazzo", "email": "vincenzopalazzodev@gmail.com", "date": "2023-02-10T18:03:54Z"}, "committer": {"name": "Vincenzo Palazzo", "email": "vincenzopalazzodev@gmail.com", "date": "2023-02-13T15:23:23Z"}, "message": "fix: improve the suggestion on future not awaited\n\nConsidering the following code\n\n```rust\nfn foo() -> u8 {\n    async fn async_fn() -> u8 {  22 }\n\n    async_fn()\n}\n\nfn main() {}\n```\n\nthe error generated before this commit from the compiler is\n\n```\n\u279c  rust git:(macros/async_fn_suggestion) \u2717 rustc test.rs --edition 2021\nerror[E0308]: mismatched types\n --> test.rs:4:5\n  |\n1 | fn foo() -> u8 {\n  |             -- expected `u8` because of return type\n...\n4 |     async_fn()\n  |     ^^^^^^^^^^ expected `u8`, found opaque type\n  |\n  = note:     expected type `u8`\n          found opaque type `impl Future<Output = u8>`\nhelp: consider `await`ing on the `Future`\n  |\n4 |     async_fn().await\n  |               ++++++\n\nerror: aborting due to previous error\n```\n\nIn this case the error is nor perfect, and can confuse the user\nthat do not know that the opaque type is the future.\n\nSo this commit will propose (and conclude the work start in\nhttps://github.com/rust-lang/rust/issues/80658)\nto change the string `opaque type` to `future` when applicable\nand also remove the Expected vs Received note by adding a more\nspecific one regarding the async function that return a future type.\n\nSo the new error emitted by the compiler is\n\n```\nerror[E0308]: mismatched types\n --> test.rs:4:5\n  |\n1 | fn foo() -> u8 {\n  |             -- expected `u8` because of return type\n...\n4 |     async_fn()\n  |     ^^^^^^^^^^ expected `u8`, found future\n  |\nnote: calling an async function returns a future\n --> test.rs:4:5\n  |\n4 |     async_fn()\n  |     ^^^^^^^^^^\nhelp: consider `await`ing on the `Future`\n  |\n4 |     async_fn().await\n  |               ++++++\n\nerror: aborting due to previous error\n```\n\nSigned-off-by: Vincenzo Palazzo <vincenzopalazzodev@gmail.com>", "tree": {"sha": "e676c225e1664f5407d31165f5ffd4694bc24b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e676c225e1664f5407d31165f5ffd4694bc24b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJRBAABCAA7FiEE3eMWwQll8j3M3QQgi23CuHC4DV8FAmPqVesdHHZpbmNlbnpv\ncGFsYXp6b2RldkBnbWFpbC5jb20ACgkQi23CuHC4DV/cNQ//VrTd3BwJAYn2vXK8\nSO65bTGUxGioGTsurH48oVkjPhNkkVh0J6V0H3q3BQrTlmA1gs2F4S61lN2cHLIN\nDquYaurFfdhlnAJg7guqyz0PFP8dfBDSGjWqZyZu2SRDriiohcbhHrwICYRSLW6/\ncXkWsqNTQzv5oyck32Ts+eRujw68P37pdzSOiK81YwHZ3eyz4meAxZtCeOp38JoG\n2fOSbe2gqIWBF1kjYfvcSof2bAW65+0f3p79g/wDiVCmI9GM/kbxIFJ4dvAdGe/0\ntCm+o5ObvQPppEyYb+fmI7HdPM3XrxWthmsB9PDUhZkDDxCfV1PK7POZYinTLptp\nVz118NKUS53k8/l2xmY/4oXS16LkyTIQzeSOGHxqf+KBYRbOKdXcdE473NI6gQYa\n+AgVshboIdQpkI5P6NRBduujZ5tG5SvmLquhsrboQf/Dd7CHcvBoPzGEZNr2eOsZ\nEEWrnWBgW9CXHJ8rmr4x6r2rUmvatMeQr9HogSgy1wGApwt81Je6/hRnmeC/xyHC\n+vUy5jHXO3O4MbHmEeUrY4VSE8N6B5yLh32fqR418wFEf91cKUVlfpDi7aHwsXn4\nvIrUfk9x/dMosgBEMuxArgAlJzGgjjoYtiBdZy/xFAB72PZVNAyYpRLRXVIz1ozF\n4+oXEN/Ix1Ilo0R8fXICoZ1m+6k=\n=95/l\n-----END PGP SIGNATURE-----", "payload": "tree e676c225e1664f5407d31165f5ffd4694bc24b2a\nparent 2d91939bb7130a8e6c092a290b7d37f654e3c23c\nauthor Vincenzo Palazzo <vincenzopalazzodev@gmail.com> 1676052234 +0100\ncommitter Vincenzo Palazzo <vincenzopalazzodev@gmail.com> 1676301803 +0100\n\nfix: improve the suggestion on future not awaited\n\nConsidering the following code\n\n```rust\nfn foo() -> u8 {\n    async fn async_fn() -> u8 {  22 }\n\n    async_fn()\n}\n\nfn main() {}\n```\n\nthe error generated before this commit from the compiler is\n\n```\n\u279c  rust git:(macros/async_fn_suggestion) \u2717 rustc test.rs --edition 2021\nerror[E0308]: mismatched types\n --> test.rs:4:5\n  |\n1 | fn foo() -> u8 {\n  |             -- expected `u8` because of return type\n...\n4 |     async_fn()\n  |     ^^^^^^^^^^ expected `u8`, found opaque type\n  |\n  = note:     expected type `u8`\n          found opaque type `impl Future<Output = u8>`\nhelp: consider `await`ing on the `Future`\n  |\n4 |     async_fn().await\n  |               ++++++\n\nerror: aborting due to previous error\n```\n\nIn this case the error is nor perfect, and can confuse the user\nthat do not know that the opaque type is the future.\n\nSo this commit will propose (and conclude the work start in\nhttps://github.com/rust-lang/rust/issues/80658)\nto change the string `opaque type` to `future` when applicable\nand also remove the Expected vs Received note by adding a more\nspecific one regarding the async function that return a future type.\n\nSo the new error emitted by the compiler is\n\n```\nerror[E0308]: mismatched types\n --> test.rs:4:5\n  |\n1 | fn foo() -> u8 {\n  |             -- expected `u8` because of return type\n...\n4 |     async_fn()\n  |     ^^^^^^^^^^ expected `u8`, found future\n  |\nnote: calling an async function returns a future\n --> test.rs:4:5\n  |\n4 |     async_fn()\n  |     ^^^^^^^^^^\nhelp: consider `await`ing on the `Future`\n  |\n4 |     async_fn().await\n  |               ++++++\n\nerror: aborting due to previous error\n```\n\nSigned-off-by: Vincenzo Palazzo <vincenzopalazzodev@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "html_url": "https://github.com/rust-lang/rust/commit/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/comments", "author": {"login": "vincenzopalazzo", "id": 17150045, "node_id": "MDQ6VXNlcjE3MTUwMDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincenzopalazzo", "html_url": "https://github.com/vincenzopalazzo", "followers_url": "https://api.github.com/users/vincenzopalazzo/followers", "following_url": "https://api.github.com/users/vincenzopalazzo/following{/other_user}", "gists_url": "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions", "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs", "repos_url": "https://api.github.com/users/vincenzopalazzo/repos", "events_url": "https://api.github.com/users/vincenzopalazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vincenzopalazzo", "id": 17150045, "node_id": "MDQ6VXNlcjE3MTUwMDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincenzopalazzo", "html_url": "https://github.com/vincenzopalazzo", "followers_url": "https://api.github.com/users/vincenzopalazzo/followers", "following_url": "https://api.github.com/users/vincenzopalazzo/following{/other_user}", "gists_url": "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions", "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs", "repos_url": "https://api.github.com/users/vincenzopalazzo/repos", "events_url": "https://api.github.com/users/vincenzopalazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d91939bb7130a8e6c092a290b7d37f654e3c23c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d91939bb7130a8e6c092a290b7d37f654e3c23c", "html_url": "https://github.com/rust-lang/rust/commit/2d91939bb7130a8e6c092a290b7d37f654e3c23c"}], "stats": {"total": 248, "additions": 132, "deletions": 116}, "files": [{"sha": "94f742f2b0ae3ea60bb706faeb6fdc1d974c7493", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -1783,14 +1783,24 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             }\n                         }))\n                     {\n-                        diag.note_expected_found_extra(\n-                            &expected_label,\n-                            expected,\n-                            &found_label,\n-                            found,\n-                            &sort_string(values.expected, exp_p),\n-                            &sort_string(values.found, found_p),\n-                        );\n+                        if let Some(ExpectedFound { found: found_ty, .. }) = exp_found {\n+                            // `Future` is a special opaque type that the compiler\n+                            // will try to hide in some case such as `async fn`, so\n+                            // to make an error more use friendly we will\n+                            // avoid to suggest a mismatch type with a\n+                            // type that the user usually are not usign\n+                            // directly such as `impl Future<Output = u8>`.\n+                            if !self.tcx.ty_is_opaque_future(found_ty) {\n+                                diag.note_expected_found_extra(\n+                                    &expected_label,\n+                                    expected,\n+                                    &found_label,\n+                                    found,\n+                                    &sort_string(values.expected, exp_p),\n+                                    &sort_string(values.found, found_p),\n+                                );\n+                            }\n+                        }\n                     }\n                 }\n                 _ => {\n@@ -2854,6 +2864,7 @@ impl IntoDiagnosticArg for ObligationCauseAsDiagArg<'_> {\n pub enum TyCategory {\n     Closure,\n     Opaque,\n+    OpaqueFuture,\n     Generator(hir::GeneratorKind),\n     Foreign,\n }\n@@ -2863,6 +2874,7 @@ impl TyCategory {\n         match self {\n             Self::Closure => \"closure\",\n             Self::Opaque => \"opaque type\",\n+            Self::OpaqueFuture => \"future\",\n             Self::Generator(gk) => gk.descr(),\n             Self::Foreign => \"foreign type\",\n         }\n@@ -2871,7 +2883,11 @@ impl TyCategory {\n     pub fn from_ty(tcx: TyCtxt<'_>, ty: Ty<'_>) -> Option<(Self, DefId)> {\n         match *ty.kind() {\n             ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => Some((Self::Opaque, def_id)),\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n+                let kind =\n+                    if tcx.ty_is_opaque_future(ty) { Self::OpaqueFuture } else { Self::Opaque };\n+                Some((kind, def_id))\n+            }\n             ty::Generator(def_id, ..) => {\n                 Some((Self::Generator(tcx.generator_kind(def_id).unwrap()), def_id))\n             }"}, {"sha": "7d9a53d1c025ff15e9cfa15f6908880a5ebb6fd0", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -238,31 +238,17 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 }\n             },\n             (_, Some(ty)) if self.same_type_modulo_infer(exp_found.expected, ty) => {\n-                diag.span_suggestion_verbose(\n-                    exp_span.shrink_to_hi(),\n-                    \"consider `await`ing on the `Future`\",\n-                    \".await\",\n-                    Applicability::MaybeIncorrect,\n-                );\n+                self.suggest_await_on_future(diag, exp_span);\n+                diag.span_note(exp_span, \"calling an async function returns a future\");\n             }\n             (Some(ty), _) if self.same_type_modulo_infer(ty, exp_found.found) => match cause.code()\n             {\n                 ObligationCauseCode::Pattern { span: Some(then_span), .. } => {\n-                    diag.span_suggestion_verbose(\n-                        then_span.shrink_to_hi(),\n-                        \"consider `await`ing on the `Future`\",\n-                        \".await\",\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    self.suggest_await_on_future(diag, then_span.shrink_to_hi());\n                 }\n                 ObligationCauseCode::IfExpression(box IfExpressionCause { then_id, .. }) => {\n                     let then_span = self.find_block_span_from_hir_id(*then_id);\n-                    diag.span_suggestion_verbose(\n-                        then_span.shrink_to_hi(),\n-                        \"consider `await`ing on the `Future`\",\n-                        \".await\",\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    self.suggest_await_on_future(diag, then_span.shrink_to_hi());\n                 }\n                 ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                     ref prior_arms,\n@@ -283,6 +269,15 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n+    pub fn suggest_await_on_future(&self, diag: &mut Diagnostic, sp: Span) {\n+        diag.span_suggestion_verbose(\n+            sp.shrink_to_hi(),\n+            \"consider `await`ing on the `Future`\",\n+            \".await\",\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     pub(super) fn suggest_accessing_field_where_appropriate(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "9c171a69d064f13483c75c5a029a80fd3c61e5f1", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> Ty<'tcx> {\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Alias(ty::Projection, _) => \"associated type\".into(),\n             ty::Param(p) => format!(\"type parameter `{p}`\").into(),\n-            ty::Alias(ty::Opaque, ..) => \"opaque type\".into(),\n+            ty::Alias(ty::Opaque, ..) => if tcx.ty_is_opaque_future(self) { \"future\".into() } else { \"opaque type\".into() },\n             ty::Error(_) => \"type error\".into(),\n             _ => {\n                 let width = tcx.sess.diagnostic_width();"}, {"sha": "1fa4e5db0cbbc9c0a28cbd5eca032a402294302a", "filename": "tests/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -2,12 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL |         take_u32(x)\n-   |         -------- ^ expected `u32`, found opaque type\n+   |         -------- ^ expected `u32`, found future\n    |         |\n    |         arguments to this function are incorrect\n    |\n-   = note:     expected type `u32`\n-           found opaque type `impl Future<Output = u32>`\n+note: calling an async function returns a future\n+  --> $DIR/dont-suggest-missing-await.rs:14:18\n+   |\n+LL |         take_u32(x)\n+   |                  ^\n note: function defined here\n   --> $DIR/dont-suggest-missing-await.rs:5:4\n    |"}, {"sha": "51ac9d86bfb4732adf573adba5c5ebf3570b6039", "filename": "tests/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -17,12 +17,10 @@ error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:12:16\n    |\n LL |     fun(one(), two());\n-   |     ---        ^^^^^ expected opaque type, found a different opaque type\n+   |     ---        ^^^^^ expected future, found a different future\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s\n    = note: distinct uses of `impl Trait` result in different opaque types\n note: function defined here"}, {"sha": "168ef8e9ee4e7264ff287af0341ec4188e34a830", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -2,7 +2,7 @@ error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n    |\n LL |     async fn foo(&self) -> i32 {\n-   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found opaque type\n+   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found future\n    |\n note: type in trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22"}, {"sha": "cf6e5b4e436f259986108c3bf92e971e33710f04", "filename": "tests/ui/async-await/issue-61076.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.rs?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -86,7 +86,7 @@ async fn match_() {\n     match tuple() { //~ HELP consider `await`ing on the `Future`\n         //~^ NOTE this expression has type `impl Future<Output = Tuple>`\n         Tuple(_) => {} //~ ERROR mismatched types\n-        //~^ NOTE expected opaque type, found `Tuple`\n+        //~^ NOTE expected future, found `Tuple`\n         //~| NOTE expected opaque type `impl Future<Output = Tuple>`\n     }\n }"}, {"sha": "44de282988baaed37a6472ee4d1f628f8b1e38ac", "filename": "tests/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -62,7 +62,7 @@ LL |     match tuple() {\n    |           ------- this expression has type `impl Future<Output = Tuple>`\n LL |\n LL |         Tuple(_) => {}\n-   |         ^^^^^^^^ expected opaque type, found `Tuple`\n+   |         ^^^^^^^^ expected future, found `Tuple`\n    |\n    = note: expected opaque type `impl Future<Output = Tuple>`\n                    found struct `Tuple`"}, {"sha": "5b7f18a98b53922ca602f986598c052436d706df", "filename": "tests/ui/async-await/issue-98634.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -2,10 +2,8 @@ error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Futu\n   --> $DIR/issue-98634.rs:45:23\n    |\n LL |         StructAsync { callback }.await;\n-   |                       ^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n+   |                       ^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n-           found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n   --> $DIR/issue-98634.rs:9:35\n    |\n@@ -16,10 +14,8 @@ error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Futu\n   --> $DIR/issue-98634.rs:45:9\n    |\n LL |         StructAsync { callback }.await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n-           found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n   --> $DIR/issue-98634.rs:9:35\n    |\n@@ -30,10 +26,8 @@ error[E0271]: expected `callback` to be a fn item that returns `Pin<Box<dyn Futu\n   --> $DIR/issue-98634.rs:45:33\n    |\n LL |         StructAsync { callback }.await;\n-   |                                 ^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n+   |                                 ^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n-           found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n   --> $DIR/issue-98634.rs:9:35\n    |"}, {"sha": "750b7a886ef9ac149043957c1ca8c949536544ff", "filename": "tests/ui/async-await/issues/issue-102206.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -4,12 +4,10 @@ error[E0308]: mismatched types\n LL |     std::mem::size_of_val(foo());\n    |     --------------------- ^^^^^\n    |     |                     |\n-   |     |                     expected `&_`, found opaque type\n+   |     |                     expected `&_`, found future\n    |     |                     help: consider borrowing here: `&foo()`\n    |     arguments to this function are incorrect\n    |\n-   = note: expected reference `&_`\n-            found opaque type `impl Future<Output = ()>`\n note: function defined here\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n "}, {"sha": "d44af5b8dd8327dfb6452aa4421208927341dcc0", "filename": "tests/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -2,12 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n LL |         take_u32(x)\n-   |         -------- ^ expected `u32`, found opaque type\n+   |         -------- ^ expected `u32`, found future\n    |         |\n    |         arguments to this function are incorrect\n    |\n-   = note:     expected type `u32`\n-           found opaque type `impl Future<Output = u32>`\n+note: calling an async function returns a future\n+  --> $DIR/suggest-missing-await-closure.rs:16:18\n+   |\n+LL |         take_u32(x)\n+   |                  ^\n note: function defined here\n   --> $DIR/suggest-missing-await-closure.rs:6:4\n    |"}, {"sha": "f0ec34a6a55573f60aa64b5750b09730a591f702", "filename": "tests/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -2,12 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:12:14\n    |\n LL |     take_u32(x)\n-   |     -------- ^ expected `u32`, found opaque type\n+   |     -------- ^ expected `u32`, found future\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note:     expected type `u32`\n-           found opaque type `impl Future<Output = u32>`\n+note: calling an async function returns a future\n+  --> $DIR/suggest-missing-await.rs:12:14\n+   |\n+LL |     take_u32(x)\n+   |              ^\n note: function defined here\n   --> $DIR/suggest-missing-await.rs:3:4\n    |\n@@ -22,10 +25,13 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:22:5\n    |\n LL |     dummy()\n-   |     ^^^^^^^ expected `()`, found opaque type\n+   |     ^^^^^^^ expected `()`, found future\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/suggest-missing-await.rs:22:5\n+   |\n+LL |     dummy()\n+   |     ^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     dummy().await\n@@ -45,7 +51,7 @@ LL | |         dummy()\n LL | |\n LL | |     } else {\n LL | |         dummy().await\n-   | |         ^^^^^^^^^^^^^ expected opaque type, found `()`\n+   | |         ^^^^^^^^^^^^^ expected future, found `()`\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n@@ -67,7 +73,7 @@ LL | |         0 => dummy(),\n LL | |         1 => dummy(),\n    | |              ------- this is found to be of type `impl Future<Output = ()>`\n LL | |         2 => dummy().await,\n-   | |              ^^^^^^^^^^^^^ expected opaque type, found `()`\n+   | |              ^^^^^^^^^^^^^ expected future, found `()`\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n@@ -86,7 +92,7 @@ error[E0308]: mismatched types\n LL |     let _x = match dummy() {\n    |                    ------- this expression has type `impl Future<Output = ()>`\n LL |         () => {}\n-   |         ^^ expected opaque type, found `()`\n+   |         ^^ expected future, found `()`\n    |\n    = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n@@ -102,7 +108,7 @@ LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n ...\n LL |         Ok(_) => {}\n-   |         ^^^^^ expected opaque type, found `Result<_, _>`\n+   |         ^^^^^ expected future, found `Result<_, _>`\n    |\n    = note: expected opaque type `impl Future<Output = Result<(), ()>>`\n                      found enum `Result<_, _>`\n@@ -118,7 +124,7 @@ LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n ...\n LL |         Err(_) => {}\n-   |         ^^^^^^ expected opaque type, found `Result<_, _>`\n+   |         ^^^^^^ expected future, found `Result<_, _>`\n    |\n    = note: expected opaque type `impl Future<Output = Result<(), ()>>`\n                      found enum `Result<_, _>`"}, {"sha": "dfe18e43eeea14df447d3dff5c28b7dab152741d", "filename": "tests/ui/impl-trait/issue-102605.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -2,12 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-102605.rs:13:20\n    |\n LL |     convert_result(foo())\n-   |     -------------- ^^^^^ expected `Result<(), _>`, found opaque type\n+   |     -------------- ^^^^^ expected `Result<(), _>`, found future\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note:     expected enum `Result<(), _>`\n-           found opaque type `impl Future<Output = Result<(), String>>`\n+note: calling an async function returns a future\n+  --> $DIR/issue-102605.rs:13:20\n+   |\n+LL |     convert_result(foo())\n+   |                    ^^^^^\n note: function defined here\n   --> $DIR/issue-102605.rs:7:4\n    |"}, {"sha": "c86e9eadc87cbe1bdbe3191a7e394f1c9ab1b901", "filename": "tests/ui/impl-trait/issue-99914.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/issue-99914.rs:9:27\n    |\n LL |     t.and_then(|t| -> _ { bar(t) });\n-   |                           ^^^^^^ expected `Result<_, Error>`, found opaque type\n+   |                           ^^^^^^ expected `Result<_, Error>`, found future\n    |\n-   = note:     expected enum `Result<_, Error>`\n-           found opaque type `impl Future<Output = ()>`\n help: try wrapping the expression in `Ok`\n    |\n LL |     t.and_then(|t| -> _ { Ok(bar(t)) });"}, {"sha": "a4eefb41508fadfabb560ed24a01b08246fd25b6", "filename": "tests/ui/suggestions/if-then-neeing-semi.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -26,8 +26,8 @@ async fn async_extra_semicolon_same() {\n         //~^ HELP consider removing this semicolon\n     } else {\n         async_dummy() //~ ERROR `if` and `else` have incompatible types\n-        //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~^ NOTE expected `()`, found future\n+        //~| NOTE calling an async function returns a future\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -39,8 +39,8 @@ async fn async_extra_semicolon_different() {\n         //~^ HELP consider removing this semicolon\n     } else {\n         async_dummy2() //~ ERROR `if` and `else` have incompatible types\n-        //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~^ NOTE expected `()`, found future\n+        //~| NOTE calling an async function returns a future\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -52,8 +52,7 @@ async fn async_different_futures() {\n         //~| HELP consider `await`ing on both `Future`s\n     } else {\n         async_dummy2() //~ ERROR `if` and `else` have incompatible types\n-        //~^ NOTE expected opaque type, found a different opaque type\n-        //~| NOTE expected opaque type `impl Future<Output = ()>`\n+        //~^ NOTE expected future, found a different future\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n     };\n }"}, {"sha": "6833e0bab2b8362c75ab6442ffc697c877e7a436", "filename": "tests/ui/suggestions/if-then-neeing-semi.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -9,14 +9,17 @@ LL | |         async_dummy();\n LL | |\n LL | |     } else {\n LL | |         async_dummy()\n-   | |         ^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |         ^^^^^^^^^^^^^ expected `()`, found future\n ...  |\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/if-then-neeing-semi.rs:28:9\n+   |\n+LL |         async_dummy()\n+   |         ^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |         async_dummy().await\n@@ -38,14 +41,17 @@ LL | |         async_dummy();\n LL | |\n LL | |     } else {\n LL | |         async_dummy2()\n-   | |         ^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |         ^^^^^^^^^^^^^^ expected `()`, found future\n ...  |\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/if-then-neeing-semi.rs:41:9\n+   |\n+LL |         async_dummy2()\n+   |         ^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |         async_dummy2().await\n@@ -69,14 +75,12 @@ LL | |         async_dummy()\n LL | |\n LL | |     } else {\n LL | |         async_dummy2()\n-   | |         ^^^^^^^^^^^^^^ expected opaque type, found a different opaque type\n-...  |\n+   | |         ^^^^^^^^^^^^^^ expected future, found a different future\n+LL | |\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:18:24>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:20:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "6d0a0c7b3faa2dc35913433901567978d1fc98c3", "filename": "tests/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -10,12 +10,9 @@ LL | |             cx.answer_str(\"hi\");\n    | |             this is found to be of type `()`\n LL | |         }\n LL | |         _ => cx.answer_str(\"hi\"),\n-   | |              ^^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |              ^^^^^^^^^^^^^^^^^^^ expected `()`, found future\n LL | |     }\n    | |_____- `match` arms have incompatible types\n-   |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = Test>`\n \n error: aborting due to previous error\n "}, {"sha": "11463c453d40722b5ff5fdf019e107cb3d426477", "filename": "tests/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -24,8 +24,8 @@ async fn async_extra_semicolon_same() {\n             //~^ HELP consider removing this semicolon\n         }\n         false => async_dummy(), //~ ERROR `match` arms have incompatible types\n-        //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~^ NOTE expected `()`, found future\n+        //~| NOTE calling an async function returns a future\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -37,8 +37,8 @@ async fn async_extra_semicolon_different() {\n             //~^ HELP consider removing this semicolon\n         }\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n-        //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected unit type `()`\n+        //~^ NOTE expected `()`, found future\n+        //~| NOTE calling an async function returns a future\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -48,8 +48,7 @@ async fn async_different_futures() {\n         true => async_dummy(), //~ NOTE this is found to be\n         //~| HELP consider `await`ing on both `Future`s\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n-        //~^ NOTE expected opaque type, found a different opaque type\n-        //~| NOTE expected opaque type `impl Future<Output = ()>`\n+        //~^ NOTE expected future, found a different future\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n     };\n }"}, {"sha": "cf3cf45ef402ae3883bba2c5b1575111f30ae214", "filename": "tests/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -9,14 +9,17 @@ LL | |             async_dummy();\n LL | |\n LL | |         }\n LL | |         false => async_dummy(),\n-   | |                  ^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |                  ^^^^^^^^^^^^^ expected `()`, found future\n ...  |\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/match-prev-arm-needing-semi.rs:26:18\n+   |\n+LL |         false => async_dummy(),\n+   |                  ^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy().await,\n@@ -38,14 +41,17 @@ LL | |             async_dummy();\n LL | |\n LL | |         }\n LL | |         false => async_dummy2(),\n-   | |                  ^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   | |                  ^^^^^^^^^^^^^^ expected `()`, found future\n ...  |\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/match-prev-arm-needing-semi.rs:39:18\n+   |\n+LL |         false => async_dummy2(),\n+   |                  ^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy2().await,\n@@ -67,14 +73,12 @@ LL | |         true => async_dummy(),\n    | |                 ------------- this is found to be of type `impl Future<Output = ()>`\n LL | |\n LL | |         false => async_dummy2(),\n-   | |                  ^^^^^^^^^^^^^^ expected opaque type, found a different opaque type\n-...  |\n+   | |                  ^^^^^^^^^^^^^^ expected future, found a different future\n+LL | |\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:18:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "5c90d3012abf952981ebacfbb44482e44498c0ed", "filename": "tests/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -2,22 +2,20 @@ error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/opaque-type-error.rs:20:9\n    |\n LL |   fn thing_one() -> impl Future<Output = Result<(), ()>> {\n-   |                     ------------------------------------ the expected opaque type\n+   |                     ------------------------------------ the expected future\n ...\n LL |   fn thing_two() -> impl Future<Output = Result<(), ()>> {\n-   |                     ------------------------------------ the found opaque type\n+   |                     ------------------------------------ the found future\n ...\n LL | /     if true {\n LL | |         thing_one()\n    | |         ----------- expected because of this\n LL | |     } else {\n LL | |         thing_two()\n-   | |         ^^^^^^^^^^^ expected opaque type, found a different opaque type\n+   | |         ^^^^^^^^^^^ expected future, found a different future\n LL | |     }.await\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n-              found opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "fa16d321890ccfd6906f1f9334c932b237bd153c", "filename": "tests/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -2,10 +2,8 @@ error[E0271]: expected `test` to be a fn item that returns `Pin<Box<dyn Future<O\n   --> $DIR/issue-98604.rs:9:5\n    |\n LL |     Box::new(test) as AsyncFnPtr;\n-   |     ^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n+   |     ^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n-           found opaque type `impl Future<Output = ()>`\n    = note: required for the cast from `fn() -> impl Future<Output = ()> {test}` to the object type `dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n \n error: aborting due to previous error"}, {"sha": "0d72ae118f3aa2d6f05d8f58bd562c95a609d358", "filename": "tests/ui/typeck/issue-90027-async-fn-return-suggestion.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bdc9a046ae1b8f5e479d71a0d43eb313737c2af/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr?ref=2bdc9a046ae1b8f5e479d71a0d43eb313737c2af", "patch": "@@ -18,10 +18,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90027-async-fn-return-suggestion.rs:14:5\n    |\n LL |     hello()\n-   |     ^^^^^^^ expected `()`, found opaque type\n+   |     ^^^^^^^ expected `()`, found future\n    |\n-   = note: expected unit type `()`\n-            found opaque type `impl Future<Output = ()>`\n+note: calling an async function returns a future\n+  --> $DIR/issue-90027-async-fn-return-suggestion.rs:14:5\n+   |\n+LL |     hello()\n+   |     ^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     hello().await"}]}