{"sha": "593ac525ae6f1bea21c4e89d038e964b4b8f5ce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5M2FjNTI1YWU2ZjFiZWEyMWM0ZTg5ZDAzOGU5NjRiNGI4ZjVjZTY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-10-26T08:26:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-26T08:26:26Z"}, "message": "Merge pull request #3138 from topecongiro/issue-3137\n\nSimplify handling of parens around generic bound trait", "tree": {"sha": "fca96febb4103036c167db12ba8c6200b8adf6ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca96febb4103036c167db12ba8c6200b8adf6ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0s+zCRBK7hj4Ov3rIwAAdHIIAB8V2NAvAfkybXGbVeNpT2qV\nANSe+FcYmYzt+auHsVnS06QK6AR+Wh7h3du3ZPbA+gxrciOHKxCQLTzQYhPWHIbD\n4sC5jx73hsXoXKaTArdqeCFIb5AZOywZiiu640kZmTjuCznIIPvYIxJn2/JLG9zb\nDMOLF7vbcCd6GfuhRN02xbwCJQSxoaXZr4WfjKKyjsFgUceI9PNvA9zzMgTeCi1a\n/pay1boHoeRFqj5lLhHue7tgBqWgMHgTAIWYTK2kxdzuTnP9Nt9xyTGjWV670tx5\nBzIsC5XGuviP8RnHO9xfokpSjpf95AJpRet4MtYB0Mc5ipmPjvtvSB8pK3/LIO0=\n=9OWi\n-----END PGP SIGNATURE-----\n", "payload": "tree fca96febb4103036c167db12ba8c6200b8adf6ea\nparent 284583fade72a8824153b36cceabe42118b57138\nparent 7093bbe2ff9d5df41d10493bc96422b2f56417a7\nauthor Nick Cameron <nrc@ncameron.org> 1540542386 +1300\ncommitter GitHub <noreply@github.com> 1540542386 +1300\n\nMerge pull request #3138 from topecongiro/issue-3137\n\nSimplify handling of parens around generic bound trait"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6", "html_url": "https://github.com/rust-lang/rust/commit/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "284583fade72a8824153b36cceabe42118b57138", "url": "https://api.github.com/repos/rust-lang/rust/commits/284583fade72a8824153b36cceabe42118b57138", "html_url": "https://github.com/rust-lang/rust/commit/284583fade72a8824153b36cceabe42118b57138"}, {"sha": "7093bbe2ff9d5df41d10493bc96422b2f56417a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7093bbe2ff9d5df41d10493bc96422b2f56417a7", "html_url": "https://github.com/rust-lang/rust/commit/7093bbe2ff9d5df41d10493bc96422b2f56417a7"}], "stats": {"total": 83, "additions": 28, "deletions": 55}, "files": [{"sha": "20828429cb1f99b401356541b408c389f7b5fdf4", "filename": "src/types.rs", "status": "modified", "additions": 12, "deletions": 55, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=593ac525ae6f1bea21c4e89d038e964b4b8f5ce6", "patch": "@@ -473,7 +473,7 @@ fn rewrite_bounded_lifetime(\n             \"{}{}{}\",\n             result,\n             colon,\n-            join_bounds(context, shape.sub_width(overhead)?, bounds, true, false)?\n+            join_bounds(context, shape.sub_width(overhead)?, bounds, true)?\n         );\n         Some(result)\n     }\n@@ -489,13 +489,15 @@ impl Rewrite for ast::GenericBound {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         match *self {\n             ast::GenericBound::Trait(ref poly_trait_ref, trait_bound_modifier) => {\n-                match trait_bound_modifier {\n+                let snippet = context.snippet(self.span());\n+                let has_paren = snippet.starts_with(\"(\") && snippet.ends_with(\")\");\n+                let rewrite = match trait_bound_modifier {\n                     ast::TraitBoundModifier::None => poly_trait_ref.rewrite(context, shape),\n-                    ast::TraitBoundModifier::Maybe => {\n-                        let rw = poly_trait_ref.rewrite(context, shape.offset_left(1)?)?;\n-                        Some(format!(\"?{}\", rw))\n-                    }\n-                }\n+                    ast::TraitBoundModifier::Maybe => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(1)?)\n+                        .map(|s| format!(\"?{}\", s)),\n+                };\n+                rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }\n             ast::GenericBound::Outlives(ref lifetime) => lifetime.rewrite(context, shape),\n         }\n@@ -508,14 +510,7 @@ impl Rewrite for ast::GenericBounds {\n             return Some(String::new());\n         }\n \n-        let span = mk_sp(self.get(0)?.span().lo(), self.last()?.span().hi());\n-        let has_paren = context.snippet(span).starts_with('(');\n-        let bounds_shape = if has_paren {\n-            shape.offset_left(1)?.sub_width(1)?\n-        } else {\n-            shape\n-        };\n-        join_bounds(context, bounds_shape, self, true, has_paren)\n+        join_bounds(context, shape, self, true)\n     }\n }\n \n@@ -751,7 +746,6 @@ fn join_bounds(\n     shape: Shape,\n     items: &[ast::GenericBound],\n     need_indent: bool,\n-    has_paren: bool,\n ) -> Option<String> {\n     debug_assert!(!items.is_empty());\n \n@@ -762,36 +756,9 @@ fn join_bounds(\n     };\n     let type_strs = items\n         .iter()\n-        .map(|item| {\n-            item.rewrite(\n-                context,\n-                if has_paren {\n-                    shape.sub_width(1)?.offset_left(1)?\n-                } else {\n-                    shape\n-                },\n-            )\n-        })\n+        .map(|item| item.rewrite(context, shape))\n         .collect::<Option<Vec<_>>>()?;\n-    let mut result = String::with_capacity(128);\n-    let mut closing_paren = has_paren;\n-    if has_paren {\n-        result.push('(');\n-    }\n-    result.push_str(&type_strs[0]);\n-    if has_paren && type_strs.len() == 1 {\n-        result.push(')');\n-    }\n-    for (i, type_str) in type_strs[1..].iter().enumerate() {\n-        if closing_paren {\n-            if let ast::GenericBound::Outlives(..) = items[i + 1] {\n-                result.push(')');\n-                closing_paren = false;\n-            }\n-        }\n-        result.push_str(joiner);\n-        result.push_str(type_str);\n-    }\n+    let result = type_strs.join(joiner);\n     if items.len() <= 1 || (!result.contains('\\n') && result.len() <= shape.width) {\n         return Some(result);\n     }\n@@ -814,20 +781,10 @@ fn join_bounds(\n         ast::GenericBound::Trait(..) => last_line_extendable(s),\n     };\n     let mut result = String::with_capacity(128);\n-    let mut closing_paren = has_paren;\n-    if has_paren {\n-        result.push('(');\n-    }\n     result.push_str(&type_strs[0]);\n     let mut can_be_put_on_the_same_line = is_bound_extendable(&result, &items[0]);\n     let generic_bounds_in_order = is_generic_bounds_in_order(items);\n     for (bound, bound_str) in items[1..].iter().zip(type_strs[1..].iter()) {\n-        if closing_paren {\n-            if let ast::GenericBound::Outlives(..) = bound {\n-                closing_paren = false;\n-                result.push(')');\n-            }\n-        }\n         if generic_bounds_in_order && can_be_put_on_the_same_line {\n             result.push_str(joiner);\n         } else {"}, {"sha": "2c2c32e7602c0d42b1d6291159b2a51c5c143245", "filename": "tests/source/type.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6/tests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6/tests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype.rs?ref=593ac525ae6f1bea21c4e89d038e964b4b8f5ce6", "patch": "@@ -92,6 +92,14 @@ macro_rules! foo {\n \n type Target = ( FooAPI ) + 'static;\n \n+// #3137\n+fn foo<T>(t: T)\n+where\n+    T: ( FnOnce() -> () ) + Clone,\n+    U: ( FnOnce() -> () ) + 'static,\n+{\n+}\n+\n // #3117\n fn issue3117() {\n     {"}, {"sha": "d0d1543e10a01d91713dc67fcf796443145fbc0f", "filename": "tests/target/type.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/593ac525ae6f1bea21c4e89d038e964b4b8f5ce6/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=593ac525ae6f1bea21c4e89d038e964b4b8f5ce6", "patch": "@@ -91,6 +91,14 @@ macro_rules! foo {\n \n type Target = (FooAPI) + 'static;\n \n+// #3137\n+fn foo<T>(t: T)\n+where\n+    T: (FnOnce() -> ()) + Clone,\n+    U: (FnOnce() -> ()) + 'static,\n+{\n+}\n+\n // #3117\n fn issue3117() {\n     {"}]}