{"sha": "89acd1f57f6c0df96a2ebf652561eb786f28664d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YWNkMWY1N2Y2YzBkZjk2YTJlYmY2NTI1NjFlYjc4NmYyODY2NGQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-05T00:01:26Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-05T00:01:26Z"}, "message": "Rename option::get_default => get_or_default, get_zero => get_or_zero", "tree": {"sha": "03cc4110d2c3073c62652154b8abcb5a2d9ba662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03cc4110d2c3073c62652154b8abcb5a2d9ba662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89acd1f57f6c0df96a2ebf652561eb786f28664d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89acd1f57f6c0df96a2ebf652561eb786f28664d", "html_url": "https://github.com/rust-lang/rust/commit/89acd1f57f6c0df96a2ebf652561eb786f28664d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89acd1f57f6c0df96a2ebf652561eb786f28664d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d8cc3f0036a5060bc7044892d891fb81afa00f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8cc3f0036a5060bc7044892d891fb81afa00f7", "html_url": "https://github.com/rust-lang/rust/commit/4d8cc3f0036a5060bc7044892d891fb81afa00f7"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "4f3f63c83fcd6b7868979af2bdc068df746a9274", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -100,7 +100,7 @@ pub pure fn build<A>(builder: &fn(push: pure fn(v: A))) -> @[A] {\n #[inline(always)]\n pub pure fn build_sized_opt<A>(size: Option<uint>,\n                                builder: &fn(push: pure fn(v: A))) -> @[A] {\n-    build_sized(size.get_default(4), builder)\n+    build_sized(size.get_or_default(4), builder)\n }\n \n // Appending"}, {"sha": "db82fa14950a058536af98ec70b8dd0c1ccf6195", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -267,7 +267,7 @@ pub pure fn build_sized_opt<A,B: Buildable<A>>(\n     size: Option<uint>,\n     builder: fn(push: pure fn(A))) -> B {\n \n-    Buildable::build_sized(size.get_default(4), builder)\n+    Buildable::build_sized(size.get_or_default(4), builder)\n }\n \n // Functions that combine iteration and building"}, {"sha": "a46736055a098a1dbf39baeed32724b037edd668", "filename": "src/libcore/option.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -171,13 +171,13 @@ pub pure fn is_some<T>(opt: &Option<T>) -> bool {\n     !is_none(opt)\n }\n \n-pub pure fn get_zero<T: Copy Zero>(opt: Option<T>) -> T {\n+pub pure fn get_or_zero<T: Copy Zero>(opt: Option<T>) -> T {\n     //! Returns the contained value or zero (for this type)\n \n     match opt { Some(copy x) => x, None => Zero::zero() }\n }\n \n-pub pure fn get_default<T: Copy>(opt: Option<T>, def: T) -> T {\n+pub pure fn get_or_default<T: Copy>(opt: Option<T>, def: T) -> T {\n     //! Returns the contained value or a default\n \n     match opt { Some(copy x) => x, None => def }\n@@ -331,7 +331,7 @@ impl<T: Copy> Option<T> {\n     pure fn get(self) -> T { get(self) }\n \n     #[inline(always)]\n-    pure fn get_default(self, def: T) -> T { get_default(self, def) }\n+    pure fn get_or_default(self, def: T) -> T { get_or_default(self, def) }\n \n     /// Applies a function zero or more times until the result is none.\n     #[inline(always)]\n@@ -342,7 +342,7 @@ impl<T: Copy> Option<T> {\n \n impl<T: Copy Zero> Option<T> {\n     #[inline(always)]\n-    pure fn get_zero(self) -> T { get_zero(self) }\n+    pure fn get_or_zero(self) -> T { get_or_zero(self) }\n }\n \n #[test]\n@@ -420,11 +420,11 @@ fn test_option_while_some() {\n }\n \n #[test]\n-fn test_get_zero() {\n+fn test_get_or_zero() {\n     let some_stuff = Some(42);\n-    assert some_stuff.get_zero() == 42;\n+    assert some_stuff.get_or_zero() == 42;\n     let no_stuff: Option<int> = None;\n-    assert no_stuff.get_zero() == 0;\n+    assert no_stuff.get_or_zero() == 0;\n }\n \n // Local Variables:"}, {"sha": "2d9f95df7491f876cc02980253db824c0234c5fb", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -510,14 +510,14 @@ pub fn tmpdir() -> Path {\n     #[cfg(unix)]\n     #[allow(non_implicitly_copyable_typarams)]\n     fn lookup() -> Path {\n-        option::get_default(getenv_nonempty(\"TMPDIR\"),\n+        option::get_or_default(getenv_nonempty(\"TMPDIR\"),\n                             Path(\"/tmp\"))\n     }\n \n     #[cfg(windows)]\n     #[allow(non_implicitly_copyable_typarams)]\n     fn lookup() -> Path {\n-        option::get_default(\n+        option::get_or_default(\n                     option::or(getenv_nonempty(\"TMP\"),\n                     option::or(getenv_nonempty(\"TEMP\"),\n                     option::or(getenv_nonempty(\"USERPROFILE\"),"}, {"sha": "cdd8db6c543b7fbd0830fe095e8c80b16fcb05cd", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -203,7 +203,7 @@ pub pure fn build<A>(builder: fn(push: pure fn(v: A))) -> ~[A] {\n #[inline(always)]\n pub pure fn build_sized_opt<A>(size: Option<uint>,\n                            builder: fn(push: pure fn(v: A))) -> ~[A] {\n-    build_sized(size.get_default(4), builder)\n+    build_sized(size.get_or_default(4), builder)\n }\n \n /// Produces a mut vector from an immutable vector."}, {"sha": "849d56958c3e7dac036476f61860e962a2efb3c5", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -113,7 +113,7 @@ fn make_target_lib_path(sysroot: &Path,\n     sysroot.push_rel(&relative_target_lib_path(target_triple))\n }\n \n-fn get_default_sysroot() -> Path {\n+fn get_or_default_sysroot() -> Path {\n     match os::self_exe_path() {\n       option::Some(ref p) => (*p).pop(),\n       option::None => fail ~\"can't determine value for sysroot\"\n@@ -123,12 +123,12 @@ fn get_default_sysroot() -> Path {\n fn get_sysroot(maybe_sysroot: Option<Path>) -> Path {\n     match maybe_sysroot {\n       option::Some(ref sr) => (*sr),\n-      option::None => get_default_sysroot()\n+      option::None => get_or_default_sysroot()\n     }\n }\n \n fn get_cargo_sysroot() -> Result<Path, ~str> {\n-    result::Ok(get_default_sysroot().push_many([libdir(), ~\"cargo\"]))\n+    result::Ok(get_or_default_sysroot().push_many([libdir(), ~\"cargo\"]))\n }\n \n fn get_cargo_root() -> Result<Path, ~str> {"}, {"sha": "21493f8d8208a788ad87c60905f82f9aaf8c21f4", "filename": "src/librustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -502,7 +502,7 @@ fn enter_opt(bcx: block, m: &[@Match/&r], opt: &Opt, col: uint,\n         match p.node {\n             ast::pat_enum(_, subpats) => {\n                 if opt_eq(tcx, &variant_opt(tcx, p.id), opt) {\n-                    Some(option::get_default(subpats,\n+                    Some(option::get_or_default(subpats,\n                                              vec::from_elem(variant_size,\n                                                             dummy)))\n                 } else {"}, {"sha": "285e80ef25ef22eae062d18c6ae02210ab47c6a4", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -136,7 +136,7 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n \n     ccx.stats.n_monos += 1;\n \n-    let depth = option::get_default(ccx.monomorphizing.find(fn_id), 0u);\n+    let depth = option::get_or_default(ccx.monomorphizing.find(fn_id), 0u);\n     // Random cut-off -- code that needs to instantiate the same function\n     // recursively more than ten times can probably safely be assumed to be\n     // causing an infinite expansion."}, {"sha": "8e52fb25a9465a39776f8e98aaca126467764396", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -69,7 +69,7 @@ fn fold_crate(\n     {\n         topmod: doc::ModDoc_({\n             item: {\n-                name: option::get_default(attrs.name, doc.topmod.name()),\n+                name: option::get_or_default(attrs.name, doc.topmod.name()),\n                 .. doc.topmod.item\n             },\n             .. *doc.topmod"}, {"sha": "94b3a96618476a82fc9dd28351d79244b1bc0608", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -154,7 +154,7 @@ fn config_from_opts(\n         let output_dir = getopts::opt_maybe_str(matches, opt_output_dir());\n         let output_dir = output_dir.map(|s| Path(*s));\n         result::Ok({\n-            output_dir: output_dir.get_default(config.output_dir),\n+            output_dir: output_dir.get_or_default(config.output_dir),\n             .. config\n         })\n     };"}, {"sha": "d5365d590419811a92ab9e295c563c5a11f34889", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89acd1f57f6c0df96a2ebf652561eb786f28664d/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=89acd1f57f6c0df96a2ebf652561eb786f28664d", "patch": "@@ -83,7 +83,7 @@ fn strip_doc_comment_decoration(comment: ~str) -> ~str {\n     // drop leftmost columns that contain only values in chars\n     fn block_trim(lines: ~[~str], chars: ~str, max: Option<uint>) -> ~[~str] {\n \n-        let mut i = max.get_default(uint::max_value);\n+        let mut i = max.get_or_default(uint::max_value);\n         for lines.each |line| {\n             if line.trim().is_empty() {\n                 loop;"}]}