{"sha": "4396ad488f28f52bfbf4fe86cbba989761a21992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOTZhZDQ4OGYyOGY1MmJmYmY0ZmU4NmNiYmE5ODk3NjFhMjE5OTI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-21T15:47:48Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-21T15:47:48Z"}, "message": "Merge remote-tracking branch 'mozilla/incoming' into incoming", "tree": {"sha": "7737fc921af97dc67d6b63fa8b692ab8e66c3c00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7737fc921af97dc67d6b63fa8b692ab8e66c3c00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4396ad488f28f52bfbf4fe86cbba989761a21992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4396ad488f28f52bfbf4fe86cbba989761a21992", "html_url": "https://github.com/rust-lang/rust/commit/4396ad488f28f52bfbf4fe86cbba989761a21992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4396ad488f28f52bfbf4fe86cbba989761a21992/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a6943dd31e8002b2e0267b7539b55ba9da7490b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6943dd31e8002b2e0267b7539b55ba9da7490b", "html_url": "https://github.com/rust-lang/rust/commit/0a6943dd31e8002b2e0267b7539b55ba9da7490b"}, {"sha": "60603703eaec6944341608f54f46661099a2423b", "url": "https://api.github.com/repos/rust-lang/rust/commits/60603703eaec6944341608f54f46661099a2423b", "html_url": "https://github.com/rust-lang/rust/commit/60603703eaec6944341608f54f46661099a2423b"}], "stats": {"total": 302, "additions": 219, "deletions": 83}, "files": [{"sha": "7f43f6f308cf4d0ce47a9f2fd26c7a1b10620bfe", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -94,27 +94,31 @@ fn listen<T: send, U>(f: fn(chan<T>) -> U) -> U {\n     f(po.chan())\n }\n \n-resource port_ptr<T: send>(po: *rust_port) unsafe {\n+class port_ptr<T:send> {\n+  let po: *rust_port;\n+  new(po: *rust_port) { self.po = po; }\n+  drop unsafe {\n     task::unkillable {||\n         // Once the port is detached it's guaranteed not to receive further\n         // messages\n         let yield = 0u;\n         let yieldp = ptr::addr_of(yield);\n-        rustrt::rust_port_begin_detach(po, yieldp);\n+        rustrt::rust_port_begin_detach(self.po, yieldp);\n         if yield != 0u {\n             // Need to wait for the port to be detached\n             // FIXME: If this fails then we're going to leave our port\n             // in a bogus state. (Issue #1988)\n             task::yield();\n         }\n-        rustrt::rust_port_end_detach(po);\n+        rustrt::rust_port_end_detach(self.po);\n \n         // Drain the port so that all the still-enqueued items get dropped\n-        while rustrt::rust_port_size(po) > 0u as size_t {\n-            recv_::<T>(po);\n+        while rustrt::rust_port_size(self.po) > 0u as size_t {\n+            recv_::<T>(self.po);\n         }\n-        rustrt::del_port(po);\n+        rustrt::del_port(self.po);\n     }\n+  }\n }\n \n #[doc = \"\n@@ -126,29 +130,34 @@ Fails if the port is detached or dead. Fails if the port\n is owned by a different task.\n \"]\n fn as_raw_port<T: send, U>(ch: comm::chan<T>, f: fn(*rust_port) -> U) -> U {\n-    resource portref(p: *rust_port) {\n-        if !ptr::is_null(p) {\n-            rustrt::rust_port_drop(p);\n-        }\n+\n+    class portref {\n+       let p: *rust_port;\n+       new(p: *rust_port) { self.p = p; }\n+       drop {\n+         if !ptr::is_null(self.p) {\n+           rustrt::rust_port_drop(self.p);\n+         }\n+       }\n     }\n \n     let p = portref(rustrt::rust_port_take(*ch));\n \n-    if ptr::is_null(*p) {\n+    if ptr::is_null(p.p) {\n         fail \"unable to locate port for channel\"\n-    } else if rustrt::get_task_id() != rustrt::rust_port_task(*p) {\n+    } else if rustrt::get_task_id() != rustrt::rust_port_task(p.p) {\n         fail \"unable to access unowned port\"\n     }\n \n-    f(*p)\n+    f(p.p)\n }\n \n #[doc = \"\n Constructs a channel. The channel is bound to the port used to\n construct it.\n \"]\n fn chan<T: send>(p: port<T>) -> chan<T> {\n-    chan_t(rustrt::get_port_id(***p))\n+    chan_t(rustrt::get_port_id((**p).po))\n }\n \n #[doc = \"\n@@ -170,10 +179,10 @@ fn send<T: send>(ch: chan<T>, -data: T) {\n Receive from a port.  If no data is available on the port then the\n task will block until data becomes available.\n \"]\n-fn recv<T: send>(p: port<T>) -> T { recv_(***p) }\n+fn recv<T: send>(p: port<T>) -> T { recv_((**p).po) }\n \n #[doc = \"Returns true if there are messages available\"]\n-fn peek<T: send>(p: port<T>) -> bool { peek_(***p) }\n+fn peek<T: send>(p: port<T>) -> bool { peek_((**p).po) }\n \n #[doc(hidden)]\n fn recv_chan<T: send>(ch: comm::chan<T>) -> T {\n@@ -196,7 +205,7 @@ fn recv_<T: send>(p: *rust_port) -> T {\n         // Data isn't available yet, so res has not been initialized.\n         task::yield();\n     } else {\n-        // In the absense of compiler-generated preemption points\n+        // In the absence of compiler-generated preemption points\n         // this is a good place to yield\n         task::yield();\n     }\n@@ -210,7 +219,7 @@ fn peek_(p: *rust_port) -> bool unsafe {\n #[doc = \"Receive on one of two ports\"]\n fn select2<A: send, B: send>(p_a: port<A>, p_b: port<B>)\n     -> either<A, B> unsafe {\n-    let ports = [***p_a, ***p_b];\n+    let ports = [(**p_a).po, (**p_b).po];\n     let n_ports = 2 as libc::size_t;\n     let yield = 0u, yieldp = ptr::addr_of(yield);\n \n@@ -233,9 +242,9 @@ fn select2<A: send, B: send>(p_a: port<A>, p_b: port<B>)\n     // Now we know the port we're supposed to receive from\n     assert resport != ptr::null();\n \n-    if resport == ***p_a {\n+    if resport == (**p_a).po {\n         either::left(recv(p_a))\n-    } else if resport == ***p_b {\n+    } else if resport == (**p_b).po {\n         either::right(recv(p_b))\n     } else {\n         fail \"unexpected result from rust_port_select\";\n@@ -482,4 +491,4 @@ fn test_port_detach_fail() {\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0041dde319d2c47c807c9458182b852eb6d2f775", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -23,10 +23,10 @@ fn walk_stack(visit: fn(frame) -> bool) {\n             reinterpret_cast(frame_pointer)\n         };\n         loop {\n-            let frame = frame(frame_address);\n+            let fr = frame(frame_address);\n \n-            #debug(\"frame: %x\", unsafe { reinterpret_cast(frame.fp) });\n-            visit(frame);\n+            #debug(\"frame: %x\", unsafe { reinterpret_cast(fr.fp) });\n+            visit(fr);\n \n             unsafe {\n                 let next_fp: **word = reinterpret_cast(frame_address);\n@@ -44,7 +44,7 @@ fn walk_stack(visit: fn(frame) -> bool) {\n \n #[test]\n fn test_simple() {\n-    for walk_stack { |frame|\n+    for walk_stack { |_frame|\n     }\n }\n \n@@ -53,7 +53,7 @@ fn test_simple_deep() {\n     fn run(i: int) {\n         if i == 0 { ret }\n \n-        for walk_stack { |frame|\n+        for walk_stack { |_frame|\n             unsafe {\n                 breakpoint();\n             }"}, {"sha": "f1136fde5e2c19c295f803adad473718215c56d6", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -566,7 +566,7 @@ pure fn to_upper(s: str/&) -> str {\n }\n \n #[doc = \"\n-Replace all occurances of one string with another\n+Replace all occurrences of one string with another\n \n # Arguments\n "}, {"sha": "e621fd787249d8113af5b355319a88cba0215ada", "filename": "src/libstd/par.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -7,7 +7,7 @@ import future::future;\n export map, mapi, alli, any, mapi_factory;\n \n #[doc=\"The maximum number of tasks this module will spawn for a single\n-operationg.\"]\n+operation.\"]\n const max_tasks : uint = 32u;\n \n #[doc=\"The minimum number of elements each task will process.\"]"}, {"sha": "bae0f4648d2bfc31865e0385f8badd75e74816b3", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -47,6 +47,7 @@ fn check_loans(bccx: borrowck_ctxt,\n                                  mut declared_purity: ast::impure_fn,\n                                  mut fn_args: @[]});\n     let vt = visit::mk_vt(@{visit_expr: check_loans_in_expr,\n+                            visit_local: check_loans_in_local,\n                             visit_block: check_loans_in_block,\n                             visit_fn: check_loans_in_fn\n                             with *visit::default_visitor()});\n@@ -419,6 +420,9 @@ impl methods for check_loan_ctxt {\n           // rvalues, I guess.\n           cat_special(sk_static_item) { }\n \n+          cat_deref(_, _, unsafe_ptr) {\n+          }\n+\n           // Nothing else.\n           _ {\n             self.bccx.span_err(\n@@ -542,6 +546,18 @@ fn check_loans_in_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n     #debug[\"purity on exit=%?\", copy self.declared_purity];\n }\n \n+fn check_loans_in_local(local: @ast::local,\n+                        &&self: check_loan_ctxt,\n+                        vt: visit::vt<check_loan_ctxt>) {\n+    alt local.node.init {\n+      some({op: ast::init_move, expr: expr}) {\n+        self.check_move_out(expr);\n+      }\n+      some({op: ast::init_assign, _}) | none {}\n+    }\n+    visit::visit_local(local, self, vt);\n+}\n+\n fn check_loans_in_expr(expr: @ast::expr,\n                        &&self: check_loan_ctxt,\n                        vt: visit::vt<check_loan_ctxt>) {"}, {"sha": "78a0f1bfef7472aac7fa866ffa2779725d0ec6af", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -573,7 +573,6 @@ fn visit_item_with_scope(e: @env, i: @ast::item,\n       }\n       ast::item_class(tps, ifaces, members, ctor, m_dtor, _) {\n         v.visit_ty_params(tps, sc, v);\n-        // Can maybe skip this now that we require self on class fields\n         let class_scope = @cons(scope_item(i), sc);\n         /* visit the constructor... */\n         let ctor_scope = @cons(scope_method(ctor.node.self_id, tps),\n@@ -1061,7 +1060,7 @@ fn lookup_in_scope(e: env, &&sc: scopes, sp: span, name: ident, ns: namespace,\n               }\n               ast::item_class(tps, _, members, ctor, _, _) {\n                   if ns == ns_type {\n-                    ret lookup_in_ty_params(e, name, tps);\n+                      ret lookup_in_ty_params(e, name, tps);\n                   }\n                   if ns == ns_val && name == it.ident {\n                       ret some(ast::def_fn(local_def(ctor.node.id),\n@@ -1317,13 +1316,14 @@ fn found_def_item(i: @ast::item, ns: namespace) -> option<def> {\n     alt i.node {\n       ast::item_const(*) {\n         if ns == ns_val {\n-            ret some(ast::def_const(local_def(i.id))); }\n+            ret some(ast::def_const(local_def(i.id)));\n+        }\n       }\n       ast::item_fn(decl, _, _) {\n-        if ns == ns_val {\n+          if ns == ns_val {\n             ret some(ast::def_fn(local_def(i.id), decl.purity));\n-        }\n-      }\n+           }\n+       }\n       ast::item_mod(_) {\n         if ns == ns_module { ret some(ast::def_mod(local_def(i.id))); }\n       }\n@@ -1342,9 +1342,16 @@ fn found_def_item(i: @ast::item, ns: namespace) -> option<def> {\n           _ { }\n         }\n       }\n-      ast::item_class(*) {\n-          if ns == ns_type {\n-            ret some(ast::def_class(local_def(i.id)));\n+      ast::item_class(_, _, _members, ct, _, _) {\n+          alt ns {\n+             ns_type {\n+               ret some(ast::def_class(local_def(i.id)));\n+             }\n+             ns_val {\n+               ret some(ast::def_fn(local_def(ct.node.id),\n+                                    ast::impure_fn));\n+             }\n+             ns_module { }\n           }\n       }\n       ast::item_impl(*) { /* ??? */ }\n@@ -1653,14 +1660,6 @@ fn index_mod(md: ast::_mod) -> mod_index {\n           ast::item_class(tps, _, items, ctor, _, _) {\n               // add the class name itself\n               add_to_index(index, it.ident, mie_item(it));\n-              // add the constructor decl\n-              add_to_index(index, it.ident,\n-                           mie_item(@{ident: it.ident, attrs: [],\n-                            id: ctor.node.id,\n-                            node:\n-                              item_fn(ctor.node.dec, tps, ctor.node.body),\n-                            vis: ast::public,\n-                            span: ctor.node.body.span}));\n           }\n         }\n     }"}, {"sha": "47baa8aebca52546cea0f52c7a781b0941ca9807", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 66, "deletions": 28, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -754,7 +754,8 @@ fn trans_class_drop(bcx: block, v0: ValueRef, dtor_did: ast::def_id,\n       // We have to cast v0\n      let classptr = GEPi(bcx, v0, [0u, 1u]);\n      // Find and call the actual destructor\n-     let dtor_addr = get_res_dtor(bcx.ccx(), dtor_did, substs.tps);\n+     let dtor_addr = get_res_dtor(bcx.ccx(), dtor_did, some(class_did),\n+                                  substs.tps);\n      // The second argument is the \"self\" argument for drop\n      let params = lib::llvm::fn_ty_param_tys\n          (llvm::LLVMGetElementType\n@@ -829,7 +830,11 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n     build_return(bcx);\n }\n \n-fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id, substs: [ty::t])\n+fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id,\n+                // Parent ID is an option because resources don't\n+                // have one. We can make this a def_id when\n+                // resources get removed.\n+                opt_id: option<ast::def_id>, substs: [ty::t])\n    -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"trans_res_dtor\");\n     if (substs.len() > 0u) {\n@@ -841,14 +846,27 @@ fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id, substs: [ty::t])\n     } else if did.crate == ast::local_crate {\n         get_item_val(ccx, did.node)\n     } else {\n-        let fty = ty::mk_fn(ccx.tcx, {purity: ast::impure_fn,\n-                                      proto: ast::proto_bare,\n-                                      inputs: [{mode: ast::expl(ast::by_ref),\n+        alt opt_id {\n+           some(parent_id) {\n+             let tcx = ccx.tcx;\n+             let name = csearch::get_symbol(ccx.sess.cstore, did);\n+             let class_ty = ty::subst_tps(tcx, substs,\n+                              ty::lookup_item_type(tcx, parent_id).ty);\n+             let llty = type_of_dtor(ccx, class_ty);\n+             get_extern_fn(ccx.externs, ccx.llmod, name, lib::llvm::CCallConv,\n+                           llty)\n+           }\n+           none {\n+             let fty = ty::mk_fn(ccx.tcx, {purity: ast::impure_fn,\n+                                       proto: ast::proto_bare,\n+                                     inputs: [{mode: ast::expl(ast::by_ref),\n                                                 ty: ty::mk_nil_ptr(ccx.tcx)}],\n                                       output: ty::mk_nil(ccx.tcx),\n                                       ret_style: ast::return_val,\n                                       constraints: []});\n-        trans_external_path(ccx, did, fty)\n+             trans_external_path(ccx, did, fty)\n+           }\n+      }\n     }\n }\n \n@@ -862,7 +880,7 @@ fn trans_res_drop(bcx: block, rs: ValueRef, did: ast::def_id,\n     with_cond(bcx, IsNotNull(bcx, Load(bcx, drop_flag))) {|bcx|\n         let valptr = GEPi(bcx, rs, [0u, 1u]);\n         // Find and call the actual destructor.\n-        let dtor_addr = get_res_dtor(ccx, did, tps);\n+        let dtor_addr = get_res_dtor(ccx, did, none, tps);\n         let args = [bcx.fcx.llretptr, null_env_ptr(bcx)];\n         // Kludge to work around the fact that we know the precise type of the\n         // value here, but the dtor expects a type that might have opaque\n@@ -2304,14 +2322,14 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n         }\n       }\n       ast_map::node_dtor(_, dtor, _, pt) {\n-          let parent_id = alt ty::ty_to_def_id(ty::node_id_to_type(ccx.tcx,\n-                                     dtor.node.self_id)) {\n-                  some(did) { did }\n-                  none      { ccx.sess.span_bug(dtor.span, \"Bad self ty in \\\n+        let parent_id = alt ty::ty_to_def_id(ty::node_id_to_type(ccx.tcx,\n+                                              dtor.node.self_id)) {\n+                some(did) { did }\n+                none      { ccx.sess.span_bug(dtor.span, \"Bad self ty in \\\n                                dtor\"); }\n-          };\n-          trans_class_dtor(ccx, *pt, dtor.node.body,\n-                           dtor.node.id, psubsts, some(hash_id), parent_id)\n+        };\n+        trans_class_dtor(ccx, *pt, dtor.node.body,\n+          dtor.node.id, psubsts, some(hash_id), parent_id)\n       }\n       // Ugh -- but this ensures any new variants won't be forgotten\n       ast_map::node_expr(*) { ccx.tcx.sess.bug(\"Can't monomorphize an expr\") }\n@@ -4930,15 +4948,15 @@ fn trans_class_ctor(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n }\n \n fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n-    body: ast::blk,\n-    dtor_id: ast::node_id, substs: option<param_substs>,\n-                    hash_id: option<mono_id>, parent_id: ast::def_id)\n+    body: ast::blk, dtor_id: ast::node_id,\n+    psubsts: option<param_substs>,\n+    hash_id: option<mono_id>, parent_id: ast::def_id)\n     -> ValueRef {\n   let tcx = ccx.tcx;\n   /* Look up the parent class's def_id */\n   let mut class_ty = ty::lookup_item_type(tcx, parent_id).ty;\n   /* Substitute in the class type if necessary */\n-  option::iter(substs) {|ss|\n+  option::iter(psubsts) {|ss|\n     class_ty = ty::subst_tps(tcx, ss.tys, class_ty);\n   }\n \n@@ -4947,7 +4965,9 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n   let lldty = T_fn([T_ptr(type_of(ccx, ty::mk_nil(tcx))),\n                     T_ptr(type_of(ccx, class_ty))],\n                    llvm::LLVMVoidType());\n-  let s = get_dtor_symbol(ccx, path, dtor_id);\n+\n+  let s = get_dtor_symbol(ccx, path, dtor_id, psubsts);\n+\n   /* Register the dtor as a function. It has external linkage */\n   let lldecl = decl_internal_cdecl_fn(ccx.llmod, s, lldty);\n   lib::llvm::SetLinkage(lldecl, lib::llvm::ExternalLinkage);\n@@ -4959,7 +4979,7 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n   }\n   /* Translate the dtor body */\n   trans_fn(ccx, path, ast_util::dtor_dec(),\n-           body, lldecl, impl_self(class_ty), substs, dtor_id);\n+           body, lldecl, impl_self(class_ty), psubsts, dtor_id);\n   lldecl\n }\n \n@@ -5196,16 +5216,34 @@ fn item_path(ccx: @crate_ctxt, i: @ast::item) -> path {\n     } + [path_name(i.ident)]\n }\n \n-/* If there's already a symbol for the dtor with <id>, return it;\n-   otherwise, create one and register it, returning it as well */\n-fn get_dtor_symbol(ccx: @crate_ctxt, path: path, id: ast::node_id) -> str {\n+/* If there's already a symbol for the dtor with <id> and substs <substs>,\n+   return it; otherwise, create one and register it, returning it as well */\n+fn get_dtor_symbol(ccx: @crate_ctxt, path: path, id: ast::node_id,\n+                   substs: option<param_substs>) -> str {\n+  let t = ty::node_id_to_type(ccx.tcx, id);\n   alt ccx.item_symbols.find(id) {\n      some(s) { s }\n+     none if is_none(substs) {\n+       let s = mangle_exported_name(ccx,\n+                               path + [path_name(@ccx.names(\"dtor\"))],\n+                               t);\n+       ccx.item_symbols.insert(id, s);\n+       s\n+     }\n      none    {\n-         let s = mangle_exported_name(ccx, path +\n-           [path_name(@ccx.names(\"dtor\"))], ty::node_id_to_type(ccx.tcx, id));\n-         ccx.item_symbols.insert(id, s);\n-         s\n+       // Monomorphizing, so just make a symbol, don't add\n+       // this to item_symbols\n+       alt substs {\n+         some(ss) {\n+           let mono_ty = ty::subst_tps(ccx.tcx, ss.tys, t);\n+           mangle_exported_name(ccx, path +\n+                           [path_name(@ccx.names(\"dtor\"))], mono_ty)\n+         }\n+         none {\n+             ccx.sess.bug(#fmt(\"get_dtor_symbol: not monomorphizing and \\\n+               couldn't find a symbol for dtor %?\", path));\n+         }\n+       }\n      }\n   }\n }\n@@ -5289,7 +5327,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             let lldty = T_fn([T_ptr(type_of(ccx, ty::mk_nil(tcx))),\n                     T_ptr(type_of(ccx, class_ty))],\n                                    llvm::LLVMVoidType());\n-            let s = get_dtor_symbol(ccx, *pt, dt.node.id);\n+            let s = get_dtor_symbol(ccx, *pt, dt.node.id, none);\n \n             /* Make the declaration for the dtor */\n             let llfn = decl_internal_cdecl_fn(ccx.llmod, s, lldty);"}, {"sha": "f0d98da5adb9c91f801c93155fb45444339b7ea8", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -21,12 +21,14 @@ import std::map::hashmap;\n \n import ty_ctxt = middle::ty::ctxt;\n \n-type nominal_id = @{did: ast::def_id, tps: [ty::t]};\n+type nominal_id = @{did: ast::def_id, parent_id: option<ast::def_id>,\n+                    tps: [ty::t]};\n \n fn mk_nominal_id(tcx: ty::ctxt, did: ast::def_id,\n+                 parent_id: option<ast::def_id>,\n                  tps: [ty::t]) -> nominal_id {\n     let tps_norm = tps.map { |t| ty::normalize_ty(tcx, t) };\n-    @{did: did, tps: tps_norm}\n+    @{did: did, parent_id: parent_id, tps: tps_norm}\n }\n \n fn hash_nominal_id(&&ri: nominal_id) -> uint {\n@@ -233,7 +235,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n           tk_enum { [s_variant_enum_t(ccx.tcx)] }\n           tk_newtype | tk_complex {\n             let mut s = [shape_enum], id;\n-            let nom_id = mk_nominal_id(ccx.tcx, did, substs.tps);\n+            let nom_id = mk_nominal_id(ccx.tcx, did, none, substs.tps);\n             alt ccx.shape_cx.tag_id_to_index.find(nom_id) {\n               none {\n                 id = ccx.shape_cx.next_tag_id;\n@@ -335,7 +337,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n           else { [shape_struct] };\n         let mut sub = [];\n         option::iter(m_dtor_did) {|dtor_did|\n-          let ri = @{did: dtor_did, tps: tps};\n+          let ri = @{did: dtor_did, parent_id: some(did), tps: tps};\n           let id = interner::intern(ccx.shape_cx.resources, ri);\n           add_u16(s, id as u16);\n \n@@ -362,7 +364,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n         for substs.tps.each() {|t| assert !ty::type_has_params(t); }\n         let subt = ty::subst(ccx.tcx, substs, raw_subt);\n         let tps = substs.tps;\n-        let ri = @{did: did, tps: tps};\n+        let ri = @{did: did, parent_id: none, tps: tps};\n         let id = interner::intern(ccx.shape_cx.resources, ri);\n \n         let mut s = [shape_res];\n@@ -597,7 +599,8 @@ fn gen_resource_shapes(ccx: @crate_ctxt) -> ValueRef {\n     for uint::range(0u, len) {|i|\n         let ri = interner::get(ccx.shape_cx.resources, i);\n         for ri.tps.each() {|s| assert !ty::type_has_params(s); }\n-        dtors += [trans::base::get_res_dtor(ccx, ri.did, ri.tps)];\n+        dtors += [trans::base::get_res_dtor(ccx, ri.did, ri.parent_id,\n+                                            ri.tps)];\n     }\n     ret mk_global(ccx, \"resource_shapes\", C_struct(dtors), true);\n }"}, {"sha": "dc8dc1b92cf362b939a1ceab64bb4f350c55d46c", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -8,6 +8,7 @@ import std::map::hashmap;\n import ty::*;\n \n export type_of;\n+export type_of_dtor;\n export type_of_explicit_args;\n export type_of_fn_from_ty;\n export type_of_fn;\n@@ -251,3 +252,9 @@ fn llvm_type_name(cx: @crate_ctxt, t: ty::t) -> str {\n     );\n }\n \n+fn type_of_dtor(ccx: @crate_ctxt, self_ty: ty::t) -> TypeRef {\n+    T_fn([T_ptr(type_of(ccx, ty::mk_nil(ccx.tcx))),\n+          T_ptr(type_of(ccx, self_ty))],\n+         llvm::LLVMVoidType())\n+}\n+"}, {"sha": "83167597bb876c9e56914129d36b409d671e62e8", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -28,12 +28,12 @@ fn bound_region_to_str(cx: ctxt, br: bound_region) -> str {\n }\n \n fn re_scope_id_to_str(cx: ctxt, node_id: ast::node_id) -> str {\n-    alt cx.items.get(node_id) {\n-      ast_map::node_block(blk) {\n+    alt cx.items.find(node_id) {\n+      some(ast_map::node_block(blk)) {\n         #fmt(\"<block at %s>\",\n              codemap::span_to_str(blk.span, cx.sess.codemap))\n       }\n-      ast_map::node_expr(expr) {\n+      some(ast_map::node_expr(expr)) {\n         alt expr.node {\n           ast::expr_call(*) {\n             #fmt(\"<call at %s>\","}, {"sha": "169a866731637231a0ab8875e9db9dfc21ba50b2", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -1,3 +1,11 @@\n+S 2012-06-20 c891dec\n+  macos-x86_64 cd7b3213a05e11dbf7440db016c9f7db16598501\n+  macos-i386 eba609b4c815c415ca9485cac749c08ede5bf9ff\n+  freebsd-x86_64 c93d3297bf68d12a55af04fecab5c1792394fcca\n+  linux-x86_64 eb0e614c6f463fdbf3f40953ff122eb7cd829b85\n+  linux-i386 6d858ef6915517135e633043115ab51d677010c5\n+  winnt-i386 ffc26150a21aac3c5b023070c0e52d3c01b1881c\n+\n S 2012-06-19 de491ea\n   freebsd-x86_64 b5c1080df70136bb316286e1973fa2b5734c9a01\n   winnt-i386 fa1c7b2295dbde00269f859b8cb637a59a8deec4"}, {"sha": "6c6466017ef53eb3b6cb6efa5ac77c68ed0cea2c", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -1,6 +1,6 @@\n /**\n \n-An implementation of the Graph500 Bread First Search problem in Rust.\n+An implementation of the Graph500 Breadth First Search problem in Rust.\n \n */\n "}, {"sha": "00c579dc45ee0de4d0bfd0be996d82f793d06644", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+let x = some(~1);\n+alt x { //! NOTE loan of immutable local variable granted here\n+  some(y) {\n+    let _a <- x; //! ERROR moving out of immutable local variable prohibited due to outstanding loan\n+  }\n+  _ {}\n+}\n+}"}, {"sha": "c9e94331ab0d39fff4a78c5be02b8f7f69dca4cc", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -0,0 +1,14 @@\n+//xfail-test\n+\n+// this should be illegal but borrowck is not handling \n+// pattern bindings correctly right now\n+\n+fn main() {\n+let x = some(~1);\n+alt x {\n+  some(y) {\n+    let b <- y;\n+  }\n+  _ {}\n+}\n+}"}, {"sha": "03fbb6b975ce8407ae4009c08b2988bd39634633", "filename": "src/test/compile-fail/borrowck-move-from-unsafe-ptr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -0,0 +1,7 @@\n+fn foo(x: *~int) -> ~int {\n+    let y <- *x; //! ERROR dereference of unsafe pointer requires unsafe function or block\n+    ret y;\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "ef0803c00d0efcc7c0fb34fad2390b97745a7268", "filename": "src/test/run-pass/borrowck-move-from-unsafe-ptr-ok.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -0,0 +1,11 @@\n+// just make sure this compiles:\n+\n+fn bar(x: *~int) -> ~int {\n+    unsafe {\n+        let y <- *x;\n+        ret y;\n+    }\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "b0f62cc3ea915a7d7365f344c90738728e4a1be6", "filename": "src/test/run-pass/nested-class.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4396ad488f28f52bfbf4fe86cbba989761a21992/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=4396ad488f28f52bfbf4fe86cbba989761a21992", "patch": "@@ -0,0 +1,15 @@\n+fn main() {\n+  \n+  class b {\n+    let i: int;\n+    fn do_stuff() -> int { ret 37; }\n+    new(i:int) { self.i = i; }\n+  }\n+\n+  //  fn b(x:int) -> int { fail; }\n+\n+  let z = b(42);\n+  assert(z.i == 42);\n+  assert(z.do_stuff() == 37);\n+  \n+}\n\\ No newline at end of file"}]}