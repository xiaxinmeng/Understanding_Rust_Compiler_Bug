{"sha": "b5e9194836cab666163cf97cfbea6a323edad882", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZTkxOTQ4MzZjYWI2NjYxNjNjZjk3Y2ZiZWE2YTMyM2VkYWQ4ODI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-10T08:06:34Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-10T08:06:34Z"}, "message": "Merge pull request #7682 from thestinger/vec\n\nvec::with_capacity: do one alloc for non-managed + ptr module improvements", "tree": {"sha": "3eecb13d0262fb05a702f51e0745d3d8c7b47cbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eecb13d0262fb05a702f51e0745d3d8c7b47cbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5e9194836cab666163cf97cfbea6a323edad882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e9194836cab666163cf97cfbea6a323edad882", "html_url": "https://github.com/rust-lang/rust/commit/b5e9194836cab666163cf97cfbea6a323edad882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5e9194836cab666163cf97cfbea6a323edad882/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41dcec2fe16e272016ae77d10a6a5ff3a737f192", "url": "https://api.github.com/repos/rust-lang/rust/commits/41dcec2fe16e272016ae77d10a6a5ff3a737f192", "html_url": "https://github.com/rust-lang/rust/commit/41dcec2fe16e272016ae77d10a6a5ff3a737f192"}, {"sha": "6f5be9063ddbfe18ce5321817f782abcd2f55110", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5be9063ddbfe18ce5321817f782abcd2f55110", "html_url": "https://github.com/rust-lang/rust/commit/6f5be9063ddbfe18ce5321817f782abcd2f55110"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "a9db3cd27b369835095ed618daaae11d47ef2abb", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5e9194836cab666163cf97cfbea6a323edad882/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e9194836cab666163cf97cfbea6a323edad882/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=b5e9194836cab666163cf97cfbea6a323edad882", "patch": "@@ -14,6 +14,7 @@ use cast;\n use option::{Option, Some, None};\n use sys;\n use unstable::intrinsics;\n+use util::swap;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n use uint;\n@@ -177,9 +178,9 @@ pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n     let t: *mut T = &mut tmp;\n \n     // Perform the swap\n-    copy_memory(t, x, 1);\n-    copy_memory(x, y, 1);\n-    copy_memory(y, t, 1);\n+    copy_nonoverlapping_memory(t, x, 1);\n+    copy_memory(x, y, 1); // `x` and `y` may overlap\n+    copy_nonoverlapping_memory(y, t, 1);\n \n     // y and t now point to the same thing, but we need to completely forget `tmp`\n     // because it's no longer relevant.\n@@ -192,7 +193,7 @@ pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n  */\n #[inline]\n pub unsafe fn replace_ptr<T>(dest: *mut T, mut src: T) -> T {\n-    swap_ptr(dest, &mut src);\n+    swap(cast::transmute(dest), &mut src); // cannot overlap\n     src\n }\n \n@@ -202,8 +203,7 @@ pub unsafe fn replace_ptr<T>(dest: *mut T, mut src: T) -> T {\n #[inline(always)]\n pub unsafe fn read_ptr<T>(src: *mut T) -> T {\n     let mut tmp: T = intrinsics::uninit();\n-    let t: *mut T = &mut tmp;\n-    copy_memory(t, src, 1);\n+    copy_nonoverlapping_memory(&mut tmp, src, 1);\n     tmp\n }\n "}, {"sha": "825dc4cc187d8778a60a04c22688b04db4c4b68f", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b5e9194836cab666163cf97cfbea6a323edad882/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e9194836cab666163cf97cfbea6a323edad882/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=b5e9194836cab666163cf97cfbea6a323edad882", "patch": "@@ -26,7 +26,7 @@ use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n use ptr;\n use ptr::RawPtr;\n-use rt::global_heap::realloc_raw;\n+use rt::global_heap::{malloc_raw, realloc_raw};\n use sys;\n use sys::size_of;\n use uint;\n@@ -95,12 +95,31 @@ pub fn to_owned<T:Copy>(t: &[T]) -> ~[T] {\n }\n \n /// Creates a new vector with a capacity of `capacity`\n+#[cfg(stage0)]\n pub fn with_capacity<T>(capacity: uint) -> ~[T] {\n     let mut vec = ~[];\n     vec.reserve(capacity);\n     vec\n }\n \n+/// Creates a new vector with a capacity of `capacity`\n+#[cfg(not(stage0))]\n+pub fn with_capacity<T>(capacity: uint) -> ~[T] {\n+    unsafe {\n+        if contains_managed::<T>() {\n+            let mut vec = ~[];\n+            vec.reserve(capacity);\n+            vec\n+        } else {\n+            let alloc = capacity * sys::nonzero_size_of::<T>();\n+            let ptr = malloc_raw(alloc + size_of::<raw::VecRepr>()) as *mut raw::VecRepr;\n+            (*ptr).unboxed.alloc = alloc;\n+            (*ptr).unboxed.fill = 0;\n+            cast::transmute(ptr)\n+        }\n+    }\n+}\n+\n /**\n  * Builds a vector by calling a provided function with an argument\n  * function that pushes an element to the back of a vector."}]}