{"sha": "2797aaca77fe5c454f3a3ada84b06912b2f74b9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OTdhYWNhNzdmZTVjNDU0ZjNhM2FkYTg0YjA2OTEyYjJmNzRiOWY=", "commit": {"author": {"name": "boats", "email": "boats@mozilla.com", "date": "2018-03-18T22:05:45Z"}, "committer": {"name": "boats", "email": "boats@mozilla.com", "date": "2018-03-18T22:05:45Z"}, "message": "Update tracking issue.", "tree": {"sha": "fe3ecb12bc107d4c78fa334f464d198de3875878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe3ecb12bc107d4c78fa334f464d198de3875878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2797aaca77fe5c454f3a3ada84b06912b2f74b9f", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQSrtBlUz85gHk4onJKSU3shEQpoSwUCWq7ivgAKCRCSU3shEQpo\nSy9ZAP42YckzoYhw8g8gr8E/humXfL1JF+CsyYaJDFkoTSQaEQD/fH9NuQwSmAzj\nN+YQEpzJywPpJMLDS7tZMwO3lY9s7QI=\n=jRCw\n-----END PGP SIGNATURE-----", "payload": "tree fe3ecb12bc107d4c78fa334f464d198de3875878\nparent 81d0ecef2c4ba5ebb36a72f76adbce1b229fb856\nauthor boats <boats@mozilla.com> 1521410745 -0700\ncommitter boats <boats@mozilla.com> 1521410745 -0700\n\nUpdate tracking issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2797aaca77fe5c454f3a3ada84b06912b2f74b9f", "html_url": "https://github.com/rust-lang/rust/commit/2797aaca77fe5c454f3a3ada84b06912b2f74b9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2797aaca77fe5c454f3a3ada84b06912b2f74b9f/comments", "author": null, "committer": null, "parents": [{"sha": "81d0ecef2c4ba5ebb36a72f76adbce1b229fb856", "url": "https://api.github.com/repos/rust-lang/rust/commits/81d0ecef2c4ba5ebb36a72f76adbce1b229fb856", "html_url": "https://github.com/rust-lang/rust/commit/81d0ecef2c4ba5ebb36a72f76adbce1b229fb856"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "0e71cc59d947cafcce5caf53b28c1e05a7e060bd", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2797aaca77fe5c454f3a3ada84b06912b2f74b9f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2797aaca77fe5c454f3a3ada84b06912b2f74b9f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2797aaca77fe5c454f3a3ada84b06912b2f74b9f", "patch": "@@ -898,22 +898,22 @@ impl<T> Generator for Box<T>\n }\n \n /// A pinned, heap allocated reference.\n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n #[fundamental]\n pub struct PinBox<T: ?Sized> {\n     inner: Box<T>,\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T> PinBox<T> {\n     /// Allocate memory on the heap, move the data into it and pin it.\n-    #[unstable(feature = \"pin\", issue = \"0\")]\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub fn new(data: T) -> PinBox<T> {\n         PinBox { inner: Box::new(data) }\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: ?Sized> PinBox<T> {\n     /// Get a pinned reference to the data in this PinBox.\n     pub fn as_pin<'a>(&'a mut self) -> Pin<'a, T> {\n@@ -937,21 +937,21 @@ impl<T: ?Sized> PinBox<T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: ?Sized> From<Box<T>> for PinBox<T> {\n     fn from(boxed: Box<T>) -> PinBox<T> {\n         PinBox { inner: boxed }\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: Unpin + ?Sized> From<PinBox<T>> for Box<T> {\n     fn from(pinned: PinBox<T>) -> Box<T> {\n         pinned.inner\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: ?Sized> Deref for PinBox<T> {\n     type Target = T;\n \n@@ -960,28 +960,28 @@ impl<T: ?Sized> Deref for PinBox<T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: Unpin + ?Sized> DerefMut for PinBox<T> {\n     fn deref_mut(&mut self) -> &mut T {\n         &mut *self.inner\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: fmt::Display + ?Sized> fmt::Display for PinBox<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(&*self.inner, f)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: fmt::Debug + ?Sized> fmt::Debug for PinBox<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&*self.inner, f)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: ?Sized> fmt::Pointer for PinBox<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // It's not possible to extract the inner Uniq directly from the Box,\n@@ -991,5 +991,5 @@ impl<T: ?Sized> fmt::Pointer for PinBox<T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinBox<U>> for PinBox<T> {}"}, {"sha": "9d7f8abff150c10021aa2188a7e0d10aafd11cd6", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2797aaca77fe5c454f3a3ada84b06912b2f74b9f/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2797aaca77fe5c454f3a3ada84b06912b2f74b9f/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=2797aaca77fe5c454f3a3ada84b06912b2f74b9f", "patch": "@@ -573,5 +573,5 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n /// `Pin` pointer.\n ///\n /// This trait is automatically implemented for almost every type.\n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n pub unsafe auto trait Unpin {}"}, {"sha": "b2467c948b4b156506dabb8c771e73736e6569d0", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2797aaca77fe5c454f3a3ada84b06912b2f74b9f/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2797aaca77fe5c454f3a3ada84b06912b2f74b9f/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=2797aaca77fe5c454f3a3ada84b06912b2f74b9f", "patch": "@@ -1111,38 +1111,38 @@ pub unsafe fn unreachable() -> ! {\n /// A pinned reference is a lot like a mutable reference, except that it is not\n /// safe to move a value out of a pinned reference unless the type of that\n /// value implements the `Unpin` trait.\n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n #[fundamental]\n pub struct Pin<'a, T: ?Sized + 'a> {\n     inner: &'a mut T,\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized + Unpin> Pin<'a, T> {\n     /// Construct a new `Pin` around a reference to some data of a type that\n     /// implements `Unpin`.\n-    #[unstable(feature = \"pin\", issue = \"0\")]\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub fn new(reference: &'a mut T) -> Pin<'a, T> {\n         Pin { inner: reference }\n     }\n }\n \n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized> Pin<'a, T> {\n     /// Construct a new `Pin` around a reference to some data of a type that\n     /// may or may not implement `Unpin`.\n     ///\n     /// This constructor is unsafe because we do not know what will happen with\n     /// that data after the reference ends. If you cannot guarantee that the\n     /// data will never move again, calling this constructor is invalid.\n-    #[unstable(feature = \"pin\", issue = \"0\")]\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub unsafe fn new_unchecked(reference: &'a mut T) -> Pin<'a, T> {\n         Pin { inner: reference }\n     }\n \n     /// Borrow a Pin for a shorter lifetime than it already has.\n-    #[unstable(feature = \"pin\", issue = \"0\")]\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub fn borrow<'b>(this: &'b mut Pin<'a, T>) -> Pin<'b, T> {\n         Pin { inner: this.inner }\n     }\n@@ -1152,7 +1152,7 @@ impl<'a, T: ?Sized> Pin<'a, T> {\n     /// This function is unsafe. You must guarantee that you will never move\n     /// the data out of the mutable reference you receive when you call this\n     /// function.\n-    #[unstable(feature = \"pin\", issue = \"0\")]\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub unsafe fn get_mut<'b>(this: &'b mut Pin<'a, T>) -> &'b mut T {\n         this.inner\n     }\n@@ -1166,15 +1166,15 @@ impl<'a, T: ?Sized> Pin<'a, T> {\n     /// will not move so long as the argument value does not move (for example,\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n-    #[unstable(feature = \"pin\", issue = \"0\")]\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub unsafe fn map<'b, U, F>(this: &'b mut Pin<'a, T>, f: F) -> Pin<'b, U> where\n         F: FnOnce(&mut T) -> &mut U\n     {\n         Pin { inner: f(this.inner) }\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized> Deref for Pin<'a, T> {\n     type Target = T;\n \n@@ -1183,33 +1183,33 @@ impl<'a, T: ?Sized> Deref for Pin<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized + Unpin> DerefMut for Pin<'a, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         self.inner\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: fmt::Debug + ?Sized> fmt::Debug for Pin<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: fmt::Display + ?Sized> fmt::Display for Pin<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(&**self, f)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized> fmt::Pointer for Pin<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&(&*self.inner as *const T), f)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"0\")]\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Pin<'a, U>> for Pin<'a, T> {}"}]}