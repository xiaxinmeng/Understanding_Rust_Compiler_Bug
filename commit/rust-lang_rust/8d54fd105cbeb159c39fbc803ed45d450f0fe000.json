{"sha": "8d54fd105cbeb159c39fbc803ed45d450f0fe000", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTRmZDEwNWNiZWIxNTljMzlmYmM4MDNlZDQ1ZDQ1MGYwZmUwMDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-24T10:36:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-24T10:36:45Z"}, "message": "fix: correct version string to contain hash, build date and channel", "tree": {"sha": "f650e0ecf0aa8a9fad8d205471cf1a37b8efda74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f650e0ecf0aa8a9fad8d205471cf1a37b8efda74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d54fd105cbeb159c39fbc803ed45d450f0fe000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d54fd105cbeb159c39fbc803ed45d450f0fe000", "html_url": "https://github.com/rust-lang/rust/commit/8d54fd105cbeb159c39fbc803ed45d450f0fe000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d54fd105cbeb159c39fbc803ed45d450f0fe000/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43ea1bb9b96138b7967385260a59ea2c02b1a2f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/43ea1bb9b96138b7967385260a59ea2c02b1a2f6", "html_url": "https://github.com/rust-lang/rust/commit/43ea1bb9b96138b7967385260a59ea2c02b1a2f6"}], "stats": {"total": 70, "additions": 46, "deletions": 24}, "files": [{"sha": "25627c7e9b2ec76d8b7d52723af0ba17bda2d0a1", "filename": "crates/rust-analyzer/build.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8d54fd105cbeb159c39fbc803ed45d450f0fe000/crates%2Frust-analyzer%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d54fd105cbeb159c39fbc803ed45d450f0fe000/crates%2Frust-analyzer%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fbuild.rs?ref=8d54fd105cbeb159c39fbc803ed45d450f0fe000", "patch": "@@ -1,13 +1,10 @@\n-//! Just embed git-hash to `--version`\n+//! Construct version in the `commit-hash date chanel` format\n \n use std::{env, path::PathBuf, process::Command};\n \n fn main() {\n     set_rerun();\n-\n-    let rev =\n-        env::var(\"RUST_ANALYZER_REV\").ok().or_else(rev).unwrap_or_else(|| \"???????\".to_string());\n-    println!(\"cargo:rustc-env=REV={}\", rev)\n+    println!(\"cargo:rustc-env=REV={}\", rev())\n }\n \n fn set_rerun() {\n@@ -18,29 +15,52 @@ fn set_rerun() {\n     );\n \n     while manifest_dir.parent().is_some() {\n-        if manifest_dir.join(\".git/HEAD\").exists() {\n-            let git_dir = manifest_dir.join(\".git\");\n-\n-            println!(\"cargo:rerun-if-changed={}\", git_dir.join(\"HEAD\").display());\n-            // current branch ref\n-            if let Ok(output) =\n-                Command::new(\"git\").args(&[\"rev-parse\", \"--symbolic-full-name\", \"HEAD\"]).output()\n-            {\n-                if let Ok(ref_link) = String::from_utf8(output.stdout) {\n-                    println!(\"cargo:rerun-if-changed={}\", git_dir.join(ref_link).display());\n-                }\n-            }\n+        let head_ref = manifest_dir.join(\".git/HEAD\");\n+        if head_ref.exists() {\n+            println!(\"cargo:rerun-if-changed={}\", head_ref.display());\n             return;\n         }\n \n         manifest_dir.pop();\n     }\n+\n     println!(\"cargo:warning=Could not find `.git/HEAD` from manifest dir!\");\n }\n \n-fn rev() -> Option<String> {\n-    let output =\n-        Command::new(\"git\").args(&[\"describe\", \"--tags\", \"--exclude\", \"nightly\"]).output().ok()?;\n+fn rev() -> String {\n+    if let Ok(rev) = env::var(\"RUST_ANALYZER_REV\") {\n+        return rev;\n+    }\n+\n+    if let Some(commit_hash) = commit_hash() {\n+        let mut buf = commit_hash;\n+\n+        if let Some(date) = build_date() {\n+            buf.push(' ');\n+            buf.push_str(&date);\n+        }\n+\n+        let channel = env::var(\"RUST_ANALYZER_CHANNEL\").unwrap_or_else(|_| \"dev\".to_string());\n+        buf.push(' ');\n+        buf.push_str(&channel);\n+\n+        return buf;\n+    }\n+\n+    \"???????\".to_string()\n+}\n+\n+fn commit_hash() -> Option<String> {\n+    output_to_string(\"git rev-parse --short HEAD\")\n+}\n+\n+fn build_date() -> Option<String> {\n+    output_to_string(\"date --iso --utc\")\n+}\n+\n+fn output_to_string(command: &str) -> Option<String> {\n+    let args = command.split_ascii_whitespace().collect::<Vec<_>>();\n+    let output = Command::new(args[0]).args(&args[1..]).output().ok()?;\n     let stdout = String::from_utf8(output.stdout).ok()?;\n-    Some(stdout)\n+    Some(stdout.trim().to_string())\n }"}, {"sha": "d1c00595438f7042a9a51647c712242cad7ff63a", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d54fd105cbeb159c39fbc803ed45d450f0fe000/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d54fd105cbeb159c39fbc803ed45d450f0fe000/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=8d54fd105cbeb159c39fbc803ed45d450f0fe000", "patch": "@@ -7,7 +7,7 @@ use std::{\n \n use anyhow::Result;\n use flate2::{write::GzEncoder, Compression};\n-use xshell::{cmd, cp, mkdir_p, pushd, read_file, rm_rf, write_file};\n+use xshell::{cmd, cp, mkdir_p, pushd, pushenv, read_file, rm_rf, write_file};\n \n use crate::{date_iso, project_root};\n \n@@ -26,7 +26,8 @@ impl DistCmd {\n             let release_tag = if self.nightly { \"nightly\".to_string() } else { date_iso()? };\n             dist_client(&version, &release_tag)?;\n         }\n-        dist_server()?;\n+        let release_channel = if self.nightly { \"nightly\" } else { \"stable\" };\n+        dist_server(release_channel)?;\n         Ok(())\n     }\n }\n@@ -59,7 +60,8 @@ fn dist_client(version: &str, release_tag: &str) -> Result<()> {\n     Ok(())\n }\n \n-fn dist_server() -> Result<()> {\n+fn dist_server(release_channel: &str) -> Result<()> {\n+    let _e = pushenv(\"RUST_ANALYZER_CHANNEL\", release_channel);\n     let target = get_target();\n     if target.contains(\"-linux-gnu\") || target.contains(\"-linux-musl\") {\n         env::set_var(\"CC\", \"clang\");"}]}