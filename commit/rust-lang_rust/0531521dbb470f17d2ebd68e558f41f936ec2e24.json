{"sha": "0531521dbb470f17d2ebd68e558f41f936ec2e24", "node_id": "C_kwDOAAsO6NoAKDA1MzE1MjFkYmI0NzBmMTdkMmViZDY4ZTU1OGY0MWY5MzZlYzJlMjQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-24T13:58:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-24T13:58:24Z"}, "message": "Rollup merge of #97298 - compiler-errors:if-else-stmt-braces, r=davidtwco\n\nParse expression after `else` as a condition if followed by `{`\n\nFixes #49361.\n\nTwo things:\n1. This wording needs help. I can never find a natural/intuitive phrasing when I write diagnostics :sweat_smile:\n2. Do we even want to show the \"wrap in braces\" case? I would assume most of the time the \"add an `if`\" case is the right one.", "tree": {"sha": "913d71c3efef2f5511908a7bf5a440710bf6dcff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/913d71c3efef2f5511908a7bf5a440710bf6dcff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0531521dbb470f17d2ebd68e558f41f936ec2e24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijOSBCRBK7hj4Ov3rIwAAl5IIAD+0I7i3l0I/jZ0vIvNszrrL\nfyWrq4KXw+bq7I/TXZTaylb9qdr6R3+gA74dadAokImt8Ls2Oupt+ex1SylW1E/G\nJvZuG/BIR83UEFEf1G+ATAx+qw9A4oOJImZAHaWYB3TjfkTQAkGlb2KVZz7YzqDp\norpmzXrP0pQPvUU8ml7ROMcCgDB37MjNfS5xcez7jkTe9/4IxCEMnG7+2tQQXgfy\nFYO/P8hOCwGb0SAvTGl7AKt0MECQqxlQAZLnPLPlo96eAnSZ+NWv2AbQHixTiOSr\nQLYm0xs5p4ECDoS3Nyhhtsq+mIjIS1Q+2X59L/caj9rWuvKj/m1VByCqFWfo5h4=\n=QMSz\n-----END PGP SIGNATURE-----\n", "payload": "tree 913d71c3efef2f5511908a7bf5a440710bf6dcff\nparent 3569a426b5d561076c4dc43828efd05be82a07f2\nparent 9be37b2d3fc0b3852a7f9b134197dec895030201\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653400704 +0200\ncommitter GitHub <noreply@github.com> 1653400704 +0200\n\nRollup merge of #97298 - compiler-errors:if-else-stmt-braces, r=davidtwco\n\nParse expression after `else` as a condition if followed by `{`\n\nFixes #49361.\n\nTwo things:\n1. This wording needs help. I can never find a natural/intuitive phrasing when I write diagnostics :sweat_smile:\n2. Do we even want to show the \"wrap in braces\" case? I would assume most of the time the \"add an `if`\" case is the right one.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0531521dbb470f17d2ebd68e558f41f936ec2e24", "html_url": "https://github.com/rust-lang/rust/commit/0531521dbb470f17d2ebd68e558f41f936ec2e24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0531521dbb470f17d2ebd68e558f41f936ec2e24/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3569a426b5d561076c4dc43828efd05be82a07f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3569a426b5d561076c4dc43828efd05be82a07f2", "html_url": "https://github.com/rust-lang/rust/commit/3569a426b5d561076c4dc43828efd05be82a07f2"}, {"sha": "9be37b2d3fc0b3852a7f9b134197dec895030201", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be37b2d3fc0b3852a7f9b134197dec895030201", "html_url": "https://github.com/rust-lang/rust/commit/9be37b2d3fc0b3852a7f9b134197dec895030201"}], "stats": {"total": 152, "additions": 147, "deletions": 5}, "files": [{"sha": "37e3465694131b2c9a70f175ac126c86b9a347e1", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0531521dbb470f17d2ebd68e558f41f936ec2e24/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0531521dbb470f17d2ebd68e558f41f936ec2e24/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=0531521dbb470f17d2ebd68e558f41f936ec2e24", "patch": "@@ -2010,6 +2010,12 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(blk.span, ExprKind::Block(blk, opt_label), attrs))\n     }\n \n+    /// Parse a block which takes no attributes and has no label\n+    fn parse_simple_block(&mut self) -> PResult<'a, P<Expr>> {\n+        let blk = self.parse_block()?;\n+        Ok(self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()))\n+    }\n+\n     /// Recover on an explicitly quantified closure expression, e.g., `for<'a> |x: &'a u8| *x + 1`.\n     fn recover_quantified_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n@@ -2157,14 +2163,22 @@ impl<'a> Parser<'a> {\n         let lo = self.prev_token.span;\n         let cond = self.parse_cond_expr()?;\n \n+        self.parse_if_after_cond(attrs, lo, cond)\n+    }\n+\n+    fn parse_if_after_cond(\n+        &mut self,\n+        attrs: AttrVec,\n+        lo: Span,\n+        cond: P<Expr>,\n+    ) -> PResult<'a, P<Expr>> {\n         let missing_then_block_binop_span = || {\n             match cond.kind {\n                 ExprKind::Binary(Spanned { span: binop_span, .. }, _, ref right)\n                     if let ExprKind::Block(..) = right.kind => Some(binop_span),\n                 _ => None\n             }\n         };\n-\n         // Verify that the parsed `if` condition makes sense as a condition. If it is a block, then\n         // verify that the last statement is either an implicit return (no `;`) or an explicit\n         // return. This won't catch blocks with an explicit `return`, but that would be caught by\n@@ -2256,15 +2270,53 @@ impl<'a> Parser<'a> {\n \n     /// Parses an `else { ... }` expression (`else` token already eaten).\n     fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {\n-        let ctx_span = self.prev_token.span; // `else`\n+        let else_span = self.prev_token.span; // `else`\n         let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.\n         let expr = if self.eat_keyword(kw::If) {\n             self.parse_if_expr(AttrVec::new())?\n+        } else if self.check(&TokenKind::OpenDelim(Delimiter::Brace)) {\n+            self.parse_simple_block()?\n         } else {\n-            let blk = self.parse_block()?;\n-            self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new())\n+            let snapshot = self.create_snapshot_for_diagnostic();\n+            let first_tok = super::token_descr(&self.token);\n+            let first_tok_span = self.token.span;\n+            match self.parse_expr() {\n+                Ok(cond)\n+                // If it's not a free-standing expression, and is followed by a block,\n+                // then it's very likely the condition to an `else if`.\n+                    if self.check(&TokenKind::OpenDelim(Delimiter::Brace))\n+                        && classify::expr_requires_semi_to_be_stmt(&cond) =>\n+                {\n+                    self.struct_span_err(first_tok_span, format!(\"expected `{{`, found {first_tok}\"))\n+                        .span_label(else_span, \"expected an `if` or a block after this `else`\")\n+                        .span_suggestion(\n+                            cond.span.shrink_to_lo(),\n+                            \"add an `if` if this is the condition to an chained `if` statement after the `else`\",\n+                            \"if \".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        ).multipart_suggestion(\n+                            \"... otherwise, place this expression inside of a block if it is not an `if` condition\",\n+                            vec![\n+                                (cond.span.shrink_to_lo(), \"{ \".to_string()),\n+                                (cond.span.shrink_to_hi(), \" }\".to_string()),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n+                    self.parse_if_after_cond(AttrVec::new(), cond.span.shrink_to_lo(), cond)?\n+                }\n+                Err(e) => {\n+                    e.cancel();\n+                    self.restore_snapshot(snapshot);\n+                    self.parse_simple_block()?\n+                },\n+                Ok(_) => {\n+                    self.restore_snapshot(snapshot);\n+                    self.parse_simple_block()?\n+                },\n+            }\n         };\n-        self.error_on_if_block_attrs(ctx_span, true, expr.span, &attrs);\n+        self.error_on_if_block_attrs(else_span, true, expr.span, &attrs);\n         Ok(expr)\n     }\n "}, {"sha": "f0b40ecde6660bb0e7a7b2edb283fbb245bc7405", "filename": "src/test/ui/parser/else-no-if.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0531521dbb470f17d2ebd68e558f41f936ec2e24/src%2Ftest%2Fui%2Fparser%2Felse-no-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0531521dbb470f17d2ebd68e558f41f936ec2e24/src%2Ftest%2Fui%2Fparser%2Felse-no-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Felse-no-if.rs?ref=0531521dbb470f17d2ebd68e558f41f936ec2e24", "patch": "@@ -0,0 +1,32 @@\n+fn foo() {\n+    if true {\n+    } else false {\n+    //~^ ERROR expected `{`, found keyword `false`\n+    }\n+}\n+\n+fn foo2() {\n+    if true {\n+    } else falsy() {\n+    //~^ ERROR expected `{`, found `falsy`\n+    }\n+}\n+\n+fn foo3() {\n+    if true {\n+    } else falsy();\n+    //~^ ERROR expected `{`, found `falsy`\n+}\n+\n+fn foo4() {\n+    if true {\n+    } else loop{}\n+    //~^ ERROR expected `{`, found keyword `loop`\n+    {}\n+}\n+\n+fn falsy() -> bool {\n+    false\n+}\n+\n+fn main() {}"}, {"sha": "27abbadd7ad2496605e1bccd3ddab0e8316188a6", "filename": "src/test/ui/parser/else-no-if.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0531521dbb470f17d2ebd68e558f41f936ec2e24/src%2Ftest%2Fui%2Fparser%2Felse-no-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0531521dbb470f17d2ebd68e558f41f936ec2e24/src%2Ftest%2Fui%2Fparser%2Felse-no-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Felse-no-if.stderr?ref=0531521dbb470f17d2ebd68e558f41f936ec2e24", "patch": "@@ -0,0 +1,58 @@\n+error: expected `{`, found keyword `false`\n+  --> $DIR/else-no-if.rs:3:12\n+   |\n+LL |     } else false {\n+   |       ---- ^^^^^\n+   |       |\n+   |       expected an `if` or a block after this `else`\n+   |\n+help: add an `if` if this is the condition to an chained `if` statement after the `else`\n+   |\n+LL |     } else if false {\n+   |            ++\n+help: ... otherwise, place this expression inside of a block if it is not an `if` condition\n+   |\n+LL |     } else { false } {\n+   |            +       +\n+\n+error: expected `{`, found `falsy`\n+  --> $DIR/else-no-if.rs:10:12\n+   |\n+LL |     } else falsy() {\n+   |       ---- ^^^^^\n+   |       |\n+   |       expected an `if` or a block after this `else`\n+   |\n+help: add an `if` if this is the condition to an chained `if` statement after the `else`\n+   |\n+LL |     } else if falsy() {\n+   |            ++\n+help: ... otherwise, place this expression inside of a block if it is not an `if` condition\n+   |\n+LL |     } else { falsy() } {\n+   |            +         +\n+\n+error: expected `{`, found `falsy`\n+  --> $DIR/else-no-if.rs:17:12\n+   |\n+LL |     } else falsy();\n+   |            ^^^^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     } else { falsy() };\n+   |            +         +\n+\n+error: expected `{`, found keyword `loop`\n+  --> $DIR/else-no-if.rs:23:12\n+   |\n+LL |     } else loop{}\n+   |            ^^^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     } else { loop{} }\n+   |            +        +\n+\n+error: aborting due to 4 previous errors\n+"}]}