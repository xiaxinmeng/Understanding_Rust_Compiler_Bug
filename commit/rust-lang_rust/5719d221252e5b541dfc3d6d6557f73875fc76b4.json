{"sha": "5719d221252e5b541dfc3d6d6557f73875fc76b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MTlkMjIxMjUyZTViNTQxZGZjM2Q2ZDY1NTdmNzM4NzVmYzc2YjQ=", "commit": {"author": {"name": "patrick-gu", "email": "55641350+patrick-gu@users.noreply.github.com", "date": "2021-08-29T19:29:43Z"}, "committer": {"name": "patrick-gu", "email": "55641350+patrick-gu@users.noreply.github.com", "date": "2021-08-29T20:48:21Z"}, "message": "Add links in docs for some primitive types", "tree": {"sha": "72efc49a453fe215a98f01f31b9fa04b4ec0930d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72efc49a453fe215a98f01f31b9fa04b4ec0930d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5719d221252e5b541dfc3d6d6557f73875fc76b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5719d221252e5b541dfc3d6d6557f73875fc76b4", "html_url": "https://github.com/rust-lang/rust/commit/5719d221252e5b541dfc3d6d6557f73875fc76b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5719d221252e5b541dfc3d6d6557f73875fc76b4/comments", "author": {"login": "patrick-gu", "id": 55641350, "node_id": "MDQ6VXNlcjU1NjQxMzUw", "avatar_url": "https://avatars.githubusercontent.com/u/55641350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrick-gu", "html_url": "https://github.com/patrick-gu", "followers_url": "https://api.github.com/users/patrick-gu/followers", "following_url": "https://api.github.com/users/patrick-gu/following{/other_user}", "gists_url": "https://api.github.com/users/patrick-gu/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrick-gu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrick-gu/subscriptions", "organizations_url": "https://api.github.com/users/patrick-gu/orgs", "repos_url": "https://api.github.com/users/patrick-gu/repos", "events_url": "https://api.github.com/users/patrick-gu/events{/privacy}", "received_events_url": "https://api.github.com/users/patrick-gu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "patrick-gu", "id": 55641350, "node_id": "MDQ6VXNlcjU1NjQxMzUw", "avatar_url": "https://avatars.githubusercontent.com/u/55641350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrick-gu", "html_url": "https://github.com/patrick-gu", "followers_url": "https://api.github.com/users/patrick-gu/followers", "following_url": "https://api.github.com/users/patrick-gu/following{/other_user}", "gists_url": "https://api.github.com/users/patrick-gu/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrick-gu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrick-gu/subscriptions", "organizations_url": "https://api.github.com/users/patrick-gu/orgs", "repos_url": "https://api.github.com/users/patrick-gu/repos", "events_url": "https://api.github.com/users/patrick-gu/events{/privacy}", "received_events_url": "https://api.github.com/users/patrick-gu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "926f069950d7211a87fbd81778b420de420daad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/926f069950d7211a87fbd81778b420de420daad7", "html_url": "https://github.com/rust-lang/rust/commit/926f069950d7211a87fbd81778b420de420daad7"}], "stats": {"total": 157, "additions": 85, "deletions": 72}, "files": [{"sha": "a22bbb22287cb38e95a07cb62fba9bfcee377523", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5719d221252e5b541dfc3d6d6557f73875fc76b4/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5719d221252e5b541dfc3d6d6557f73875fc76b4/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=5719d221252e5b541dfc3d6d6557f73875fc76b4", "patch": "@@ -310,9 +310,9 @@ impl<T, const N: usize> [T; N] {\n     /// on large arrays or check the emitted code. Also try to avoid chained\n     /// maps (e.g. `arr.map(...).map(...)`).\n     ///\n-    /// In many cases, you can instead use [`Iterator::map`] by calling `.iter()`\n-    /// or `.into_iter()` on your array. `[T; N]::map` is only necessary if you\n-    /// really need a new array of the same size as the result. Rust's lazy\n+    /// In many cases, you can instead use [`Iterator::map`] by calling [`.iter()`](slice::iter)\n+    /// or [`.into_iter()`](IntoIterator::into_iter) on your array. `[T; N]::map` is only necessary\n+    /// if you really need a new array of the same size as the result. Rust's lazy\n     /// iterators tend to get optimized very well.\n     ///\n     ///\n@@ -396,7 +396,7 @@ impl<T, const N: usize> [T; N] {\n     ///\n     /// This method is particularly useful if combined with other methods, like\n     /// [`map`](#method.map). This way, you can avoid moving the original\n-    /// array if its elements are not `Copy`.\n+    /// array if its elements are not [`Copy`].\n     ///\n     /// ```\n     /// #![feature(array_methods)]"}, {"sha": "c95f7ae1694cda3fc8b56bddc6538230b898bee4", "filename": "library/core/src/bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5719d221252e5b541dfc3d6d6557f73875fc76b4/library%2Fcore%2Fsrc%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5719d221252e5b541dfc3d6d6557f73875fc76b4/library%2Fcore%2Fsrc%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fbool.rs?ref=5719d221252e5b541dfc3d6d6557f73875fc76b4", "patch": "@@ -2,7 +2,7 @@\n \n #[lang = \"bool\"]\n impl bool {\n-    /// Returns `Some(t)` if the `bool` is `true`, or `None` otherwise.\n+    /// Returns <code>[Some]\\(t)</code> if the `bool` is [`true`](keyword.true.html), or [`None`] otherwise.\n     ///\n     /// # Examples\n     ///\n@@ -18,7 +18,7 @@ impl bool {\n         if self { Some(t) } else { None }\n     }\n \n-    /// Returns `Some(f())` if the `bool` is `true`, or `None` otherwise.\n+    /// Returns <code>[Some]\\(f())</code> if the `bool` is [`true`](keyword.true.html), or [`None`] otherwise.\n     ///\n     /// # Examples\n     ///"}, {"sha": "46ceef13b1533b401797c318e835557af4ecf8e6", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5719d221252e5b541dfc3d6d6557f73875fc76b4/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5719d221252e5b541dfc3d6d6557f73875fc76b4/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=5719d221252e5b541dfc3d6d6557f73875fc76b4", "patch": "@@ -29,11 +29,11 @@ impl char {\n     pub const REPLACEMENT_CHARACTER: char = '\\u{FFFD}';\n \n     /// The version of [Unicode](https://www.unicode.org/) that the Unicode parts of\n-    /// `char` and `str` methods are based on.\n+    /// `char` and [`str`] methods are based on.\n     ///\n     /// New versions of Unicode are released regularly and subsequently all methods\n     /// in the standard library depending on Unicode are updated. Therefore the\n-    /// behavior of some `char` and `str` methods and the value of this constant\n+    /// behavior of some `char` and [`str`] methods and the value of this constant\n     /// changes over time. This is *not* considered to be a breaking change.\n     ///\n     /// The version numbering scheme is explained in\n@@ -42,7 +42,7 @@ impl char {\n     pub const UNICODE_VERSION: (u8, u8, u8) = crate::unicode::UNICODE_VERSION;\n \n     /// Creates an iterator over the UTF-16 encoded code points in `iter`,\n-    /// returning unpaired surrogates as `Err`s.\n+    /// returning unpaired surrogates as [`Err`]s.\n     ///\n     /// # Examples\n     ///\n@@ -70,7 +70,7 @@ impl char {\n     /// );\n     /// ```\n     ///\n-    /// A lossy decoder can be obtained by replacing `Err` results with the replacement character:\n+    /// A lossy decoder can be obtained by replacing [`Err`] results with the replacement character:\n     ///\n     /// ```\n     /// use std::char::{decode_utf16, REPLACEMENT_CHARACTER};\n@@ -93,10 +93,10 @@ impl char {\n         super::decode::decode_utf16(iter)\n     }\n \n-    /// Converts a `u32` to a `char`.\n+    /// Converts a [`u32`] to a `char`.\n     ///\n     /// Note that all `char`s are valid [`u32`]s, and can be cast to one with\n-    /// `as`:\n+    /// [`as`](keyword.as.html):\n     ///\n     /// ```\n     /// let c = '\ud83d\udcaf';\n@@ -106,7 +106,7 @@ impl char {\n     /// ```\n     ///\n     /// However, the reverse is not true: not all valid [`u32`]s are valid\n-    /// `char`s. `from_u32()` will return `None` if the input is not a valid value\n+    /// `char`s. `from_u32()` will return [`None`] if the input is not a valid value\n     /// for a `char`.\n     ///\n     /// For an unsafe version of this function which ignores these checks, see\n@@ -126,7 +126,7 @@ impl char {\n     /// assert_eq!(Some('\u2764'), c);\n     /// ```\n     ///\n-    /// Returning `None` when the input is not a valid `char`:\n+    /// Returning [`None`] when the input is not a valid `char`:\n     ///\n     /// ```\n     /// use std::char;\n@@ -141,7 +141,7 @@ impl char {\n         super::convert::from_u32(i)\n     }\n \n-    /// Converts a `u32` to a `char`, ignoring validity.\n+    /// Converts a [`u32`] to a `char`, ignoring validity.\n     ///\n     /// Note that all `char`s are valid [`u32`]s, and can be cast to one with\n     /// `as`:\n@@ -190,7 +190,7 @@ impl char {\n     /// sixteen, hexadecimal, to give some common values. Arbitrary\n     /// radices are supported.\n     ///\n-    /// `from_digit()` will return `None` if the input is not a digit in\n+    /// `from_digit()` will return [`None`] if the input is not a digit in\n     /// the given radix.\n     ///\n     /// # Panics\n@@ -214,7 +214,7 @@ impl char {\n     /// assert_eq!(Some('b'), c);\n     /// ```\n     ///\n-    /// Returning `None` when the input is not a digit:\n+    /// Returning [`None`] when the input is not a digit:\n     ///\n     /// ```\n     /// use std::char;\n@@ -299,7 +299,7 @@ impl char {\n     ///\n     /// # Errors\n     ///\n-    /// Returns `None` if the `char` does not refer to a digit in the given radix.\n+    /// Returns [`None`] if the `char` does not refer to a digit in the given radix.\n     ///\n     /// # Panics\n     ///\n@@ -360,7 +360,7 @@ impl char {\n     /// println!();\n     /// ```\n     ///\n-    /// Using `println!` directly:\n+    /// Using [`println!`](macro.println.html)  directly:\n     ///\n     /// ```\n     /// println!(\"{}\", '\u2764'.escape_unicode());\n@@ -372,7 +372,7 @@ impl char {\n     /// println!(\"\\\\u{{2764}}\");\n     /// ```\n     ///\n-    /// Using `to_string`:\n+    /// Using [`to_string`](string/trait.ToString.html#tymethod.to_string):\n     ///\n     /// ```\n     /// assert_eq!('\u2764'.escape_unicode().to_string(), \"\\\\u{2764}\");\n@@ -422,8 +422,8 @@ impl char {\n     /// Returns an iterator that yields the literal escape code of a character\n     /// as `char`s.\n     ///\n-    /// This will escape the characters similar to the `Debug` implementations\n-    /// of `str` or `char`.\n+    /// This will escape the characters similar to the [`Debug`](core::fmt::Debug) implementations\n+    /// of [`str`] or `char`.\n     ///\n     /// # Examples\n     ///\n@@ -436,7 +436,7 @@ impl char {\n     /// println!();\n     /// ```\n     ///\n-    /// Using `println!` directly:\n+    /// Using [`println!`](macro.println.html)  directly:\n     ///\n     /// ```\n     /// println!(\"{}\", '\\n'.escape_debug());\n@@ -448,7 +448,7 @@ impl char {\n     /// println!(\"\\\\n\");\n     /// ```\n     ///\n-    /// Using `to_string`:\n+    /// Using [`to_string`](string/trait.ToString.html#tymethod.to_string):\n     ///\n     /// ```\n     /// assert_eq!('\\n'.escape_debug().to_string(), \"\\\\n\");\n@@ -490,7 +490,7 @@ impl char {\n     /// println!();\n     /// ```\n     ///\n-    /// Using `println!` directly:\n+    /// Using [`println!`](macro.println.html) directly:\n     ///\n     /// ```\n     /// println!(\"{}\", '\"'.escape_default());\n@@ -502,7 +502,7 @@ impl char {\n     /// println!(\"\\\\\\\"\");\n     /// ```\n     ///\n-    /// Using `to_string`:\n+    /// Using [`to_string`](string/trait.ToString.html#tymethod.to_string):\n     ///\n     /// ```\n     /// assert_eq!('\"'.escape_default().to_string(), \"\\\\\\\"\");\n@@ -543,8 +543,9 @@ impl char {\n     /// assert_eq!(len, 4);\n     /// ```\n     ///\n-    /// The `&str` type guarantees that its contents are UTF-8, and so we can compare the length it\n-    /// would take if each code point was represented as a `char` vs in the `&str` itself:\n+    /// The <code>[&](reference)[str]</code> type guarantees that its contents are UTF-8,\n+    /// and so we can compare the length it would take if each code point was represented\n+    /// as a `char` vs in the <code>[&](reference)[str]</code> itself:\n     ///\n     /// ```\n     /// // as chars\n@@ -637,7 +638,7 @@ impl char {\n         unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }\n     }\n \n-    /// Encodes this character as UTF-16 into the provided `u16` buffer,\n+    /// Encodes this character as UTF-16 into the provided [`u16`] buffer,\n     /// and then returns the subslice of the buffer that contains the encoded character.\n     ///\n     /// # Panics\n@@ -647,7 +648,7 @@ impl char {\n     ///\n     /// # Examples\n     ///\n-    /// In both of these examples, '\ud835\udd4a' takes two `u16`s to encode.\n+    /// In both of these examples, '\ud835\udd4a' takes two [`u16`]s to encode.\n     ///\n     /// ```\n     /// let mut b = [0; 2];\n@@ -671,7 +672,7 @@ impl char {\n         encode_utf16_raw(self as u32, dst)\n     }\n \n-    /// Returns `true` if this `char` has the `Alphabetic` property.\n+    /// Returns [`true`](keyword.true.html) if this `char` has the `Alphabetic` property.\n     ///\n     /// `Alphabetic` is described in Chapter 4 (Character Properties) of the [Unicode Standard] and\n     /// specified in the [Unicode Character Database][ucd] [`DerivedCoreProperties.txt`].\n@@ -701,7 +702,7 @@ impl char {\n         }\n     }\n \n-    /// Returns `true` if this `char` has the `Lowercase` property.\n+    /// Returns [`true`](keyword.true.html) if this `char` has the `Lowercase` property.\n     ///\n     /// `Lowercase` is described in Chapter 4 (Character Properties) of the [Unicode Standard] and\n     /// specified in the [Unicode Character Database][ucd] [`DerivedCoreProperties.txt`].\n@@ -733,7 +734,7 @@ impl char {\n         }\n     }\n \n-    /// Returns `true` if this `char` has the `Uppercase` property.\n+    /// Returns [`true`](keyword.true.html) if this `char` has the `Uppercase` property.\n     ///\n     /// `Uppercase` is described in Chapter 4 (Character Properties) of the [Unicode Standard] and\n     /// specified in the [Unicode Character Database][ucd] [`DerivedCoreProperties.txt`].\n@@ -765,7 +766,7 @@ impl char {\n         }\n     }\n \n-    /// Returns `true` if this `char` has the `White_Space` property.\n+    /// Returns [`true`](keyword.true.html) if this `char` has the `White_Space` property.\n     ///\n     /// `White_Space` is specified in the [Unicode Character Database][ucd] [`PropList.txt`].\n     ///\n@@ -793,7 +794,8 @@ impl char {\n         }\n     }\n \n-    /// Returns `true` if this `char` satisfies either [`is_alphabetic()`] or [`is_numeric()`].\n+    /// Returns [`true`](keyword.true.html) if this `char` satisfies either\n+    /// [`is_alphabetic()`] or [`is_numeric()`].\n     ///\n     /// [`is_alphabetic()`]: #method.is_alphabetic\n     /// [`is_numeric()`]: #method.is_numeric\n@@ -818,7 +820,7 @@ impl char {\n         self.is_alphabetic() || self.is_numeric()\n     }\n \n-    /// Returns `true` if this `char` has the general category for control codes.\n+    /// Returns [`true`](keyword.true.html) if this `char` has the general category for control codes.\n     ///\n     /// Control codes (code points with the general category of `Cc`) are described in Chapter 4\n     /// (Character Properties) of the [Unicode Standard] and specified in the [Unicode Character\n@@ -843,7 +845,7 @@ impl char {\n         unicode::Cc(self)\n     }\n \n-    /// Returns `true` if this `char` has the `Grapheme_Extend` property.\n+    /// Returns [`true`](keyword.true.html) if this `char` has the `Grapheme_Extend` property.\n     ///\n     /// `Grapheme_Extend` is described in [Unicode Standard Annex #29 (Unicode Text\n     /// Segmentation)][uax29] and specified in the [Unicode Character Database][ucd]\n@@ -857,7 +859,7 @@ impl char {\n         unicode::Grapheme_Extend(self)\n     }\n \n-    /// Returns `true` if this `char` has one of the general categories for numbers.\n+    /// Returns [`true`](keyword.true.html) if this `char` has one of the general categories for numbers.\n     ///\n     /// The general categories for numbers (`Nd` for decimal digits, `Nl` for letter-like numeric\n     /// characters, and `No` for other numeric characters) are specified in the [Unicode Character\n@@ -925,7 +927,7 @@ impl char {\n     /// println!();\n     /// ```\n     ///\n-    /// Using `println!` directly:\n+    /// Using [`println!`](macro.println.html) directly:\n     ///\n     /// ```\n     /// println!(\"{}\", '\u0130'.to_lowercase());\n@@ -937,7 +939,7 @@ impl char {\n     /// println!(\"i\\u{307}\");\n     /// ```\n     ///\n-    /// Using `to_string`:\n+    /// Using [`to_string`](string/trait.ToString.html#tymethod.to_string):\n     ///\n     /// ```\n     /// assert_eq!('C'.to_lowercase().to_string(), \"c\");\n@@ -990,7 +992,7 @@ impl char {\n     /// println!();\n     /// ```\n     ///\n-    /// Using `println!` directly:\n+    /// Using [`println!`](macro.println.html) directly:\n     ///\n     /// ```\n     /// println!(\"{}\", '\u00df'.to_uppercase());\n@@ -1002,7 +1004,7 @@ impl char {\n     /// println!(\"SS\");\n     /// ```\n     ///\n-    /// Using `to_string`:\n+    /// Using [`to_string`](string/trait.ToString.html#tymethod.to_string):\n     ///\n     /// ```\n     /// assert_eq!('c'.to_uppercase().to_string(), \"C\");\n@@ -1131,7 +1133,7 @@ impl char {\n \n     /// Checks that two values are an ASCII case-insensitive match.\n     ///\n-    /// Equivalent to `to_ascii_lowercase(a) == to_ascii_lowercase(b)`.\n+    /// Equivalent to <code>[to_ascii_lowercase]\\(a) == [to_ascii_lowercase]\\(b)</code>.\n     ///\n     /// # Examples\n     ///\n@@ -1144,6 +1146,8 @@ impl char {\n     /// assert!(upper_a.eq_ignore_ascii_case(&upper_a));\n     /// assert!(!upper_a.eq_ignore_ascii_case(&lower_z));\n     /// ```\n+    ///\n+    /// [to_ascii_lowercase]: #method.to_ascii_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n     #[inline]"}, {"sha": "1c02f49d15ccdc378d33cfd9f16f640ed4ba0073", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5719d221252e5b541dfc3d6d6557f73875fc76b4/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5719d221252e5b541dfc3d6d6557f73875fc76b4/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=5719d221252e5b541dfc3d6d6557f73875fc76b4", "patch": "@@ -3,26 +3,29 @@\n #[doc(alias = \"false\")]\n /// The boolean type.\n ///\n-/// The `bool` represents a value, which could only be either `true` or `false`. If you cast\n-/// a `bool` into an integer, `true` will be 1 and `false` will be 0.\n+/// The `bool` represents a value, which could only be either [`true`] or [`false`]. If you cast\n+/// a `bool` into an integer, [`true`] will be 1 and [`false`] will be 0.\n ///\n /// # Basic usage\n ///\n /// `bool` implements various traits, such as [`BitAnd`], [`BitOr`], [`Not`], etc.,\n /// which allow us to perform boolean operations using `&`, `|` and `!`.\n ///\n-/// `if` requires a `bool` value as its conditional. [`assert!`], which is an\n-/// important macro in testing, checks whether an expression is `true` and panics\n+/// [`if`] requires a `bool` value as its conditional. [`assert!`], which is an\n+/// important macro in testing, checks whether an expression is [`true`] and panics\n /// if it isn't.\n ///\n /// ```\n /// let bool_val = true & false | false;\n /// assert!(!bool_val);\n /// ```\n ///\n+/// [`true`]: keyword.true.html\n+/// [`false`]: keyword.false.html\n /// [`BitAnd`]: ops::BitAnd\n /// [`BitOr`]: ops::BitOr\n /// [`Not`]: ops::Not\n+/// [`if`]: keyword.if.html\n ///\n /// # Examples\n ///\n@@ -574,11 +577,11 @@ mod prim_pointer {}\n ///\n /// # Editions\n ///\n-/// Prior to Rust 1.53, arrays did not implement `IntoIterator` by value, so the method call\n-/// `array.into_iter()` auto-referenced into a slice iterator. Right now, the old behavior\n-/// is preserved in the 2015 and 2018 editions of Rust for compatibility, ignoring\n-/// `IntoIterator` by value. In the future, the behavior on the 2015 and 2018 edition\n-/// might be made consistent to the behavior of later editions.\n+/// Prior to Rust 1.53, arrays did not implement [`IntoIterator`] by value, so the method call\n+/// <code>array.[into_iter()]</code> auto-referenced into a slice iterator.\n+/// Right now, the old behavior is preserved in the 2015 and 2018 editions of Rust for\n+/// compatibility, ignoring [`IntoIterator`] by value. In the future, the behavior on the 2015 and\n+/// 2018 edition might be made consistent to the behavior of later editions.\n ///\n /// ```rust,edition2018\n /// # #![allow(array_into_iter)] // override our `deny(warnings)`\n@@ -604,8 +607,9 @@ mod prim_pointer {}\n /// }\n /// ```\n ///\n-/// Starting in the 2021 edition, `array.into_iter()` will use `IntoIterator` normally to iterate\n-/// by value, and `iter()` should be used to iterate by reference like previous editions.\n+/// Starting in the 2021 edition, <code>array.[into_iter()]</code>  will use [`IntoIterator`]\n+/// normally to iterate by value, and [`iter()`](slice::iter) should be used to iterate by\n+/// reference like previous editions.\n ///\n /// ```rust,edition2021,ignore\n /// # // FIXME: ignored because 2021 testing is still unstable\n@@ -624,16 +628,16 @@ mod prim_pointer {}\n /// }\n /// ```\n ///\n-/// Future language versions might start treating the `array.into_iter()`\n+/// Future language versions might start treating the <code>array.[into_iter()]</code>\n /// syntax on editions 2015 and 2018 the same as on edition 2021. So code using\n /// those older editions should still be written with this change in mind, to\n /// prevent breakage in the future. The safest way to accomplish this is to\n-/// avoid the `into_iter` syntax on those editions. If an edition update is not\n-/// viable/desired, there are multiple alternatives:\n-/// * use `iter`, equivalent to the old behavior, creating references\n+/// avoid the [`into_iter`](IntoIterator::into_iter) syntax on those editions.\n+/// If an edition update is not viable/desired, there are multiple alternatives:\n+/// * use [`iter`](slice::iter), equivalent to the old behavior, creating references\n /// * use [`array::IntoIter`], equivalent to the post-2021 behavior (Rust 1.51+)\n-/// * replace `for ... in array.into_iter() {` with `for ... in array {`,\n-///   equivalent to the post-2021 behavior (Rust 1.53+)\n+/// * replace <code>[for] ... [in] array.[into_iter()] {</code>` with\n+///   <code>[for] ... [in] array {</code>, equivalent to the post-2021 behavior (Rust 1.53+)\n ///\n /// ```rust,edition2018\n /// use std::array::IntoIter;\n@@ -672,6 +676,9 @@ mod prim_pointer {}\n /// [`Borrow`]: borrow::Borrow\n /// [`BorrowMut`]: borrow::BorrowMut\n /// [slice pattern]: ../reference/patterns.html#slice-patterns\n+/// [into_iter()]: IntoIterator::into_iter\n+/// [for]: keyword.for.html\n+/// [in]: keyword.in.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n@@ -829,7 +836,7 @@ mod prim_str {}\n /// ```\n ///\n /// The sequential nature of the tuple applies to its implementations of various\n-/// traits.  For example, in `PartialOrd` and `Ord`, the elements are compared\n+/// traits. For example, in [`PartialOrd`] and [`Ord`], the elements are compared\n /// sequentially until the first non-equal set is found.\n ///\n /// For more about tuples, see [the book](../book/ch03-02-data-types.html#the-tuple-type).\n@@ -1033,14 +1040,16 @@ mod prim_usize {}\n /// References, both shared and mutable.\n ///\n /// A reference represents a borrow of some owned value. You can get one by using the `&` or `&mut`\n-/// operators on a value, or by using a `ref` or `ref mut` pattern.\n+/// operators on a value, or by using a [`ref`](keyword.ref.html) or\n+/// <code>[ref](keyword.ref.html) [mut](keyword.mut.html)</code> pattern.\n ///\n /// For those familiar with pointers, a reference is just a pointer that is assumed to be\n /// aligned, not null, and pointing to memory containing a valid value of `T` - for example,\n-/// `&bool` can only point to an allocation containing the integer values `1` (`true`) or `0`\n-/// (`false`), but creating a `&bool` that points to an allocation containing\n-/// the value `3` causes undefined behaviour.\n-/// In fact, `Option<&T>` has the same memory representation as a\n+/// <code>&[bool]</code> can only point to an allocation containing the integer values `1`\n+/// ([`true`](keyword.true.html)) or `0` ([`false`](keyword.false.html)), but creating a\n+/// <code>&[bool]</code> that points to an allocation containing the value `3` causes\n+/// undefined behaviour.\n+/// In fact, <code>[Option]\\<&T></code> has the same memory representation as a\n /// nullable but aligned pointer, and can be passed across FFI boundaries as such.\n ///\n /// In most cases, references can be used much like the original value. Field access, method\n@@ -1088,7 +1097,7 @@ mod prim_usize {}\n /// The following traits are implemented for all `&T`, regardless of the type of its referent:\n ///\n /// * [`Copy`]\n-/// * [`Clone`] \\(Note that this will not defer to `T`'s `Clone` implementation if it exists!)\n+/// * [`Clone`] \\(Note that this will not defer to `T`'s [`Clone`] implementation if it exists!)\n /// * [`Deref`]\n /// * [`Borrow`]\n /// * [`Pointer`]\n@@ -1097,7 +1106,7 @@ mod prim_usize {}\n /// [`Borrow`]: borrow::Borrow\n /// [`Pointer`]: fmt::Pointer\n ///\n-/// `&mut T` references get all of the above except `Copy` and `Clone` (to prevent creating\n+/// `&mut T` references get all of the above except [`Copy`] and [`Clone`] (to prevent creating\n /// multiple simultaneous mutable borrows), plus the following, regardless of the type of its\n /// referent:\n ///\n@@ -1125,18 +1134,18 @@ mod prim_usize {}\n /// [`Hash`]: hash::Hash\n /// [`ToSocketAddrs`]: net::ToSocketAddrs\n ///\n-/// `&mut T` references get all of the above except `ToSocketAddrs`, plus the following, if `T`\n+/// `&mut T` references get all of the above except [`ToSocketAddrs`], plus the following, if `T`\n /// implements that trait:\n ///\n /// * [`AsMut`]\n-/// * [`FnMut`] \\(in addition, `&mut T` references get [`FnOnce`] if `T: FnMut`)\n+/// * [`FnMut`] \\(in addition, `&mut T` references get [`FnOnce`] if <code>T: [FnMut]</code>)\n /// * [`fmt::Write`]\n /// * [`Iterator`]\n /// * [`DoubleEndedIterator`]\n /// * [`ExactSizeIterator`]\n /// * [`FusedIterator`]\n /// * [`TrustedLen`]\n-/// * [`Send`] \\(note that `&T` references only get `Send` if `T: Sync`)\n+/// * [`Send`] \\(note that `&T` references only get [`Send`] if <code>T: [Sync]</code>)\n /// * [`io::Write`]\n /// * [`Read`]\n /// * [`Seek`]\n@@ -1168,7 +1177,7 @@ mod prim_ref {}\n /// Function pointers are pointers that point to *code*, not data. They can be called\n /// just like functions. Like references, function pointers are, among other things, assumed to\n /// not be null, so if you want to pass a function pointer over FFI and be able to accommodate null\n-/// pointers, make your type `Option<fn()>` with your required signature.\n+/// pointers, make your type <code>[Option]\\<fn()></code> with your required signature.\n ///\n /// ### Safety\n ///"}]}