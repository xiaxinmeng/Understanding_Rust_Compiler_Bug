{"sha": "60706f1e3559a1164c96378172bc8839c9870f51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNzA2ZjFlMzU1OWExMTY0Yzk2Mzc4MTcyYmM4ODM5Yzk4NzBmNTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T01:00:11Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T01:00:46Z"}, "message": "rustc: Write interior vecs and strings into the metadata and add logic for them in ty_to_str", "tree": {"sha": "58f941db25f3032e1412912b9aab8031c9a1847f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f941db25f3032e1412912b9aab8031c9a1847f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60706f1e3559a1164c96378172bc8839c9870f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60706f1e3559a1164c96378172bc8839c9870f51", "html_url": "https://github.com/rust-lang/rust/commit/60706f1e3559a1164c96378172bc8839c9870f51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60706f1e3559a1164c96378172bc8839c9870f51/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab3635eebef2b8cf0e19cdbc5b4e8dd7a49a4658", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3635eebef2b8cf0e19cdbc5b4e8dd7a49a4658", "html_url": "https://github.com/rust-lang/rust/commit/ab3635eebef2b8cf0e19cdbc5b4e8dd7a49a4658"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "f851b84c6166a5ee91bc120747869166312a3a0e", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60706f1e3559a1164c96378172bc8839c9870f51/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60706f1e3559a1164c96378172bc8839c9870f51/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=60706f1e3559a1164c96378172bc8839c9870f51", "patch": "@@ -159,6 +159,7 @@ fn parse_ty(@pstate st, str_def sd) -> ty::t {\n         }\n         case ('c') { ret ty::mk_char(st.tcx); }\n         case ('s') { ret ty::mk_str(st.tcx); }\n+        case ('S') { ret ty::mk_istr(st.tcx); }\n         case ('t') {\n             assert (next(st) as char == '[');\n             auto def = parse_def(st, sd);\n@@ -173,6 +174,7 @@ fn parse_ty(@pstate st, str_def sd) -> ty::t {\n         case ('@') { ret ty::mk_box(st.tcx, parse_mt(st, sd)); }\n         case ('*') { ret ty::mk_ptr(st.tcx, parse_mt(st, sd)); }\n         case ('V') { ret ty::mk_vec(st.tcx, parse_mt(st, sd)); }\n+        case ('I') { ret ty::mk_ivec(st.tcx, parse_mt(st, sd)); }\n         case ('a') { ret ty::mk_task(st.tcx); }\n         case ('P') { ret ty::mk_port(st.tcx, parse_ty(st, sd)); }\n         case ('C') { ret ty::mk_chan(st.tcx, parse_ty(st, sd)); }"}, {"sha": "ed22d18d97af564f13dbf4fac472a2de8448bc0e", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60706f1e3559a1164c96378172bc8839c9870f51/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60706f1e3559a1164c96378172bc8839c9870f51/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=60706f1e3559a1164c96378172bc8839c9870f51", "patch": "@@ -174,6 +174,7 @@ mod Encode {\n             }\n             case (ty::ty_char) {w.write_char('c');}\n             case (ty::ty_str) {w.write_char('s');}\n+            case (ty::ty_istr) {w.write_char('S');}\n             case (ty::ty_tag(?def,?tys)) {\n                 w.write_str(\"t[\");\n                 w.write_str(cx.ds(def));\n@@ -186,6 +187,7 @@ mod Encode {\n             case (ty::ty_box(?mt)) {w.write_char('@'); enc_mt(w, cx, mt); }\n             case (ty::ty_ptr(?mt)) {w.write_char('*'); enc_mt(w, cx, mt); }\n             case (ty::ty_vec(?mt)) {w.write_char('V'); enc_mt(w, cx, mt); }\n+            case (ty::ty_ivec(?mt)) {w.write_char('I'); enc_mt(w, cx, mt); }\n             case (ty::ty_port(?t)) {w.write_char('P'); enc_ty(w, cx, t); }\n             case (ty::ty_chan(?t)) {w.write_char('C'); enc_ty(w, cx, t); }\n             case (ty::ty_tup(?mts)) {"}, {"sha": "6c1aed947d95b6c91e71190c310e27cae5a28594", "filename": "src/comp/pretty/ppaux.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/60706f1e3559a1164c96378172bc8839c9870f51/src%2Fcomp%2Fpretty%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60706f1e3559a1164c96378172bc8839c9870f51/src%2Fcomp%2Fpretty%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fppaux.rs?ref=60706f1e3559a1164c96378172bc8839c9870f51", "patch": "@@ -96,22 +96,24 @@ fn ty_to_str(&ctxt cx, &t typ) -> str {\n     auto s = \"\";\n \n     alt (struct(cx, typ)) {\n-        case (ty_native)       { s += \"native\";                         }\n-        case (ty_nil)          { s += \"()\";                             }\n-        case (ty_bot)          { s += \"_|_\";                            }\n-        case (ty_bool)         { s += \"bool\";                           }\n-        case (ty_int)          { s += \"int\";                            }\n-        case (ty_float)        { s += \"float\";                          }\n-        case (ty_uint)         { s += \"uint\";                           }\n+        case (ty_native)       { s += \"native\";                          }\n+        case (ty_nil)          { s += \"()\";                              }\n+        case (ty_bot)          { s += \"_|_\";                             }\n+        case (ty_bool)         { s += \"bool\";                            }\n+        case (ty_int)          { s += \"int\";                             }\n+        case (ty_float)        { s += \"float\";                           }\n+        case (ty_uint)         { s += \"uint\";                            }\n         case (ty_machine(?tm)) { s += common::ty_mach_to_str(tm);        }\n-        case (ty_char)         { s += \"char\";                           }\n-        case (ty_str)          { s += \"str\";                            }\n-        case (ty_box(?tm))     { s += \"@\" + mt_to_str(cx, tm);          }\n-        case (ty_vec(?tm))     { s += \"vec[\" + mt_to_str(cx, tm) + \"]\"; }\n-        case (ty_port(?t))     { s += \"port[\" + ty_to_str(cx, t) + \"]\"; }\n-        case (ty_chan(?t))     { s += \"chan[\" + ty_to_str(cx, t) + \"]\"; }\n-        case (ty_type)         { s += \"type\";                           }\n-        case (ty_task)         { s += \"task\";                           }\n+        case (ty_char)         { s += \"char\";                            }\n+        case (ty_str)          { s += \"str\";                             }\n+        case (ty_istr)         { s += \"istr\";                            }\n+        case (ty_box(?tm))     { s += \"@\" + mt_to_str(cx, tm);           }\n+        case (ty_vec(?tm))     { s += \"vec[\" + mt_to_str(cx, tm) + \"]\";  }\n+        case (ty_ivec(?tm))    { s += \"ivec[\" + mt_to_str(cx, tm) + \"]\"; }\n+        case (ty_port(?t))     { s += \"port[\" + ty_to_str(cx, t) + \"]\";  }\n+        case (ty_chan(?t))     { s += \"chan[\" + ty_to_str(cx, t) + \"]\";  }\n+        case (ty_type)         { s += \"type\";                            }\n+        case (ty_task)         { s += \"task\";                            }\n \n         case (ty_tup(?elems)) {\n             auto f = bind mt_to_str(cx, _);"}]}