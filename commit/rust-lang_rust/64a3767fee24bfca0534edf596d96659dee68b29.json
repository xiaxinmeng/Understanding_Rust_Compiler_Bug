{"sha": "64a3767fee24bfca0534edf596d96659dee68b29", "node_id": "C_kwDOAAsO6NoAKDY0YTM3NjdmZWUyNGJmY2EwNTM0ZWRmNTk2ZDk2NjU5ZGVlNjhiMjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-31T02:57:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-31T02:57:26Z"}, "message": "Rollup merge of #95471 - oli-obk:tait_ice, r=estebank\n\nDon't ICE when opaque types get their hidden type constrained again.\n\nContrary to popular belief, `codegen_fulfill_obligation` does not get used solely in codegen, so we cannot rely on `param_env` being set to RevealAll and thus revealing the hidden types instead of constraining them.\n\nFixes #89312 (for real this time)", "tree": {"sha": "2ae3558739499e498896fddf720080c2ca4f4951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae3558739499e498896fddf720080c2ca4f4951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64a3767fee24bfca0534edf596d96659dee68b29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRRiXCRBK7hj4Ov3rIwAAXkYIADQGyY/JEHaitsE6AHMWiOi2\nACb8Jpmi0ItKCcd1EyLFv+sgOnrBvbwSdZQDHL6P+IUeW7VGPndPFdurTNNOeS7U\nMETXPh5Jq/uz/Q6rnsW+tHJTfDEFtHVXOFPMRAdDjZ0n3+6F504DR11toO0YFKnb\n3x1v7487hVSP5I++z5vHg5gG/tqAgF1kY9VgsdM968+rU8CL1UPlXqEFGEneXBb2\nEUcmXDNaHBU6odiGBFSuPGXgdYetyLU8BmUzjk/22l+sY80f7gV7QD8mx6heteUJ\naguoHXLS8cRGZtfn9mI9YEgDaVF6jSQvOu0+xnmKdQOSdvtF0cfgWt2y3vfIrII=\n=86dn\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ae3558739499e498896fddf720080c2ca4f4951\nparent 4ce6567daa7aab5618aa27f69ceff779cbe2bd7d\nparent 11446779b006b25300eb2b4ad6707d6d3303da5e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648695446 +0200\ncommitter GitHub <noreply@github.com> 1648695446 +0200\n\nRollup merge of #95471 - oli-obk:tait_ice, r=estebank\n\nDon't ICE when opaque types get their hidden type constrained again.\n\nContrary to popular belief, `codegen_fulfill_obligation` does not get used solely in codegen, so we cannot rely on `param_env` being set to RevealAll and thus revealing the hidden types instead of constraining them.\n\nFixes #89312 (for real this time)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64a3767fee24bfca0534edf596d96659dee68b29", "html_url": "https://github.com/rust-lang/rust/commit/64a3767fee24bfca0534edf596d96659dee68b29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64a3767fee24bfca0534edf596d96659dee68b29/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d", "html_url": "https://github.com/rust-lang/rust/commit/4ce6567daa7aab5618aa27f69ceff779cbe2bd7d"}, {"sha": "11446779b006b25300eb2b4ad6707d6d3303da5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/11446779b006b25300eb2b4ad6707d6d3303da5e", "html_url": "https://github.com/rust-lang/rust/commit/11446779b006b25300eb2b4ad6707d6d3303da5e"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "866bb6109e05cce1eb9c9c67d1fa75fba0e2a6d9", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/64a3767fee24bfca0534edf596d96659dee68b29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a3767fee24bfca0534edf596d96659dee68b29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=64a3767fee24bfca0534edf596d96659dee68b29", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::ty::{self, TyCtxt};\n /// obligations *could be* resolved if we wanted to.\n ///\n /// This also expects that `trait_ref` is fully normalized.\n+#[instrument(level = \"debug\", skip(tcx))]\n pub fn codegen_fulfill_obligation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n@@ -27,11 +28,6 @@ pub fn codegen_fulfill_obligation<'tcx>(\n     let trait_ref = tcx.erase_regions(trait_ref);\n     // We expect the input to be fully normalized.\n     debug_assert_eq!(trait_ref, tcx.normalize_erasing_regions(param_env, trait_ref));\n-    debug!(\n-        \"codegen_fulfill_obligation(trait_ref={:?}, def_id={:?})\",\n-        (param_env, trait_ref),\n-        trait_ref.def_id()\n-    );\n \n     // Do the initial selection for the obligation. This yields the\n     // shallow result we are looking for -- that is, what specific impl.\n@@ -80,25 +76,22 @@ pub fn codegen_fulfill_obligation<'tcx>(\n             }\n         };\n \n-        debug!(\"fulfill_obligation: selection={:?}\", selection);\n+        debug!(?selection);\n \n         // Currently, we use a fulfillment context to completely resolve\n         // all nested obligations. This is because they can inform the\n         // inference of the impl's type parameters.\n         let mut fulfill_cx = FulfillmentContext::new();\n         let impl_source = selection.map(|predicate| {\n-            debug!(\"fulfill_obligation: register_predicate_obligation {:?}\", predicate);\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n         });\n         let impl_source = drain_fulfillment_cx_or_panic(&infcx, &mut fulfill_cx, impl_source);\n \n-        // There should be no opaque types during codegen, they all get revealed.\n-        let opaque_types = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n-        if !opaque_types.is_empty() {\n-            bug!(\"{:#?}\", opaque_types);\n-        }\n+        // Opaque types may have gotten their hidden types constrained, but we can ignore them safely\n+        // as they will get constrained elsewhere, too.\n+        let _opaque_types = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n \n-        debug!(\"Cache miss: {:?} => {:?}\", trait_ref, impl_source);\n+        debug!(\"Cache miss: {trait_ref:?} => {impl_source:?}\");\n         Ok(&*tcx.arena.alloc(impl_source))\n     })\n }"}, {"sha": "703e3e8693e8e4d46cf35b7f26f481cb149a1d87", "filename": "src/test/ui/type-alias-impl-trait/assoc-projection-ice.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/64a3767fee24bfca0534edf596d96659dee68b29/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-projection-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a3767fee24bfca0534edf596d96659dee68b29/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-projection-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-projection-ice.rs?ref=64a3767fee24bfca0534edf596d96659dee68b29", "patch": "@@ -0,0 +1,24 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// build-pass\n+\n+trait T { type Item; }\n+\n+type Alias<'a> = impl T<Item = &'a ()>;\n+\n+struct S;\n+impl<'a> T for &'a S {\n+    type Item = &'a ();\n+}\n+\n+fn filter_positive<'a>() -> Alias<'a> {\n+    &S\n+}\n+\n+fn with_positive(fun: impl Fn(Alias<'_>)) {\n+    fun(filter_positive());\n+}\n+\n+fn main() {\n+    with_positive(|_| ());\n+}"}]}