{"sha": "25abd7ae76e2a708dda5487119c20af3be64edb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YWJkN2FlNzZlMmE3MDhkZGE1NDg3MTE5YzIwYWYzYmU2NGVkYjc=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-09T03:29:56Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-08-03T18:17:43Z"}, "message": "Create stable_sort_primitive lint", "tree": {"sha": "f007a60ba16096805922ebb358a0ca901cf9ca94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f007a60ba16096805922ebb358a0ca901cf9ca94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25abd7ae76e2a708dda5487119c20af3be64edb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25abd7ae76e2a708dda5487119c20af3be64edb7", "html_url": "https://github.com/rust-lang/rust/commit/25abd7ae76e2a708dda5487119c20af3be64edb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25abd7ae76e2a708dda5487119c20af3be64edb7/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0f8b6cc61c1673991120639d6b104a195f755e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0f8b6cc61c1673991120639d6b104a195f755e", "html_url": "https://github.com/rust-lang/rust/commit/2e0f8b6cc61c1673991120639d6b104a195f755e"}], "stats": {"total": 301, "additions": 294, "deletions": 7}, "files": [{"sha": "43a32e828d860c77f8562ec2ffb0f91fa2063525", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -1701,6 +1701,7 @@ Released 2018-09-13\n [`single_match_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\n [`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n [`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n+[`stable_sort_primitive`]: https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive\n [`str_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\n [`string_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add\n [`string_add_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add_assign"}, {"sha": "9fc07e07fd36cbc3c79ed9cae99e7c185b695a12", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -288,6 +288,7 @@ mod serde_api;\n mod shadow;\n mod single_component_path_imports;\n mod slow_vector_initialization;\n+mod stable_sort_primitive;\n mod strings;\n mod suspicious_trait_impl;\n mod swap;\n@@ -776,6 +777,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &shadow::SHADOW_UNRELATED,\n         &single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n         &slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n+        &stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n         &strings::STRING_ADD,\n         &strings::STRING_ADD_ASSIGN,\n         &strings::STRING_LIT_AS_BYTES,\n@@ -1078,6 +1080,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box macro_use::MacroUseImports::default());\n     store.register_late_pass(|| box map_identity::MapIdentity);\n     store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n+    store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);\n     store.register_late_pass(|| box repeat_once::RepeatOnce);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n@@ -1408,6 +1411,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n+        LintId::of(&stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n         LintId::of(&strings::STRING_LIT_AS_BYTES),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n@@ -1723,6 +1727,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n+        LintId::of(&stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n         LintId::of(&types::BOX_VEC),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&vec::USELESS_VEC),"}, {"sha": "c48da004a60e42f5d8951000239c06bc3fdab8d8", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -0,0 +1,130 @@\n+use crate::utils::{is_slice_of_primitives, span_lint_and_sugg, sugg::Sugg};\n+\n+use if_chain::if_chain;\n+\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// When sorting primitive values (integers, bools, chars, as well\n+    /// as arrays, slices, and tuples of such items), it is better to\n+    /// use an unstable sort than a stable sort.\n+    ///\n+    /// **Why is this bad?**\n+    /// Using a stable sort consumes more memory and cpu cycles. Because\n+    /// values which compare equal are identical, preserving their\n+    /// relative order (the guarantee that a stable sort provides) means\n+    /// nothing, while the extra costs still apply.\n+    ///\n+    /// **Known problems:**\n+    /// None\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec![2, 1, 3];\n+    /// vec.sort();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let mut vec = vec![2, 1, 3];\n+    /// vec.sort_unstable();\n+    /// ```\n+    pub STABLE_SORT_PRIMITIVE,\n+    perf,\n+    \"use of sort() when sort_unstable() is equivalent\"\n+}\n+\n+declare_lint_pass!(StableSortPrimitive => [STABLE_SORT_PRIMITIVE]);\n+\n+/// The three \"kinds\" of sorts\n+enum SortingKind {\n+    Vanilla,\n+    // The other kinds of lint are currently commented out because they\n+    // can map distinct values to equal ones. If the key function is\n+    // provably one-to-one, or if the Cmp function conserves equality,\n+    // then they could be linted on, but I don't know if we can check\n+    // for that.\n+\n+    // ByKey,\n+    // ByCmp,\n+}\n+impl SortingKind {\n+    /// The name of the stable version of this kind of sort\n+    fn stable_name(&self) -> &str {\n+        match self {\n+            SortingKind::Vanilla => \"sort\",\n+            // SortingKind::ByKey => \"sort_by_key\",\n+            // SortingKind::ByCmp => \"sort_by\",\n+        }\n+    }\n+    /// The name of the unstable version of this kind of sort\n+    fn unstable_name(&self) -> &str {\n+        match self {\n+            SortingKind::Vanilla => \"sort_unstable\",\n+            // SortingKind::ByKey => \"sort_unstable_by_key\",\n+            // SortingKind::ByCmp => \"sort_unstable_by\",\n+        }\n+    }\n+    /// Takes the name of a function call and returns the kind of sort\n+    /// that corresponds to that function name (or None if it isn't)\n+    fn from_stable_name(name: &str) -> Option<SortingKind> {\n+        match name {\n+            \"sort\" => Some(SortingKind::Vanilla),\n+            // \"sort_by\" => Some(SortingKind::ByCmp),\n+            // \"sort_by_key\" => Some(SortingKind::ByKey),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+/// A detected instance of this lint\n+struct LintDetection {\n+    slice_name: String,\n+    method: SortingKind,\n+    method_args: String,\n+}\n+\n+fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintDetection> {\n+    if_chain! {\n+        if let ExprKind::MethodCall(method_name, _, args, _) = &expr.kind;\n+        if let Some(slice) = &args.get(0);\n+        if let Some(method) = SortingKind::from_stable_name(&method_name.ident.name.as_str());\n+        if is_slice_of_primitives(cx, slice);\n+        then {\n+            let args_str = args.iter().skip(1).map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");\n+            Some(LintDetection { slice_name: Sugg::hir(cx, slice, \"..\").to_string(), method, method_args: args_str })\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl LateLintPass<'_> for StableSortPrimitive {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if let Some(detection) = detect_stable_sort_primitive(cx, expr) {\n+            span_lint_and_sugg(\n+                cx,\n+                STABLE_SORT_PRIMITIVE,\n+                expr.span,\n+                format!(\n+                    \"Use {} instead of {}\",\n+                    detection.method.unstable_name(),\n+                    detection.method.stable_name()\n+                )\n+                .as_str(),\n+                \"try\",\n+                format!(\n+                    \"{}.{}({})\",\n+                    detection.slice_name,\n+                    detection.method.unstable_name(),\n+                    detection.method_args\n+                ),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "c75f8042907c2b5769aad115847f56f6f4c4962c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -1378,6 +1378,36 @@ pub fn run_lints(cx: &LateContext<'_>, lints: &[&'static Lint], id: HirId) -> bo\n     })\n }\n \n+/// Returns true iff the given type is a primitive (a bool or char, any integer or floating-point\n+/// number type, a str, or an array, slice, or tuple of those types).\n+pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n+    match ty.kind {\n+        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => true,\n+        ty::Ref(_, inner, _) if inner.kind == ty::Str => true,\n+        ty::Array(inner_type, _) | ty::Slice(inner_type) => is_recursively_primitive_type(inner_type),\n+        ty::Tuple(inner_types) => inner_types.types().all(is_recursively_primitive_type),\n+        _ => false,\n+    }\n+}\n+\n+/// Returns true iff the given expression is a slice of primitives (as defined in the\n+/// `is_recursively_primitive_type` function).\n+pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let expr_type = cx.typeck_results().expr_ty_adjusted(expr);\n+    match expr_type.kind {\n+        ty::Slice(ref element_type)\n+        | ty::Ref(\n+            _,\n+            ty::TyS {\n+                kind: ty::Slice(ref element_type),\n+                ..\n+            },\n+            _,\n+        ) => is_recursively_primitive_type(element_type),\n+        _ => false,\n+    }\n+}\n+\n #[macro_export]\n macro_rules! unwrap_cargo_metadata {\n     ($cx: ident, $lint: ident, $deps: expr) => {{"}, {"sha": "41d06a6788112e26f6d26c9de1c3cfa5da0e6cca", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -2026,6 +2026,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"slow_vector_initialization\",\n     },\n+    Lint {\n+        name: \"stable_sort_primitive\",\n+        group: \"perf\",\n+        desc: \"use of sort() when sort_unstable() is equivalent\",\n+        deprecation: None,\n+        module: \"stable_sort_primitive\",\n+    },\n     Lint {\n         name: \"string_add\",\n         group: \"restriction\","}, {"sha": "8f8f566593152771852c23b33f9902fdea1e31f4", "filename": "tests/ui/stable_sort_primitive.fixed", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Fstable_sort_primitive.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Fstable_sort_primitive.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstable_sort_primitive.fixed?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -0,0 +1,32 @@\n+// run-rustfix\n+#![warn(clippy::stable_sort_primitive)]\n+\n+fn main() {\n+    // positive examples\n+    let mut vec = vec![1, 3, 2];\n+    vec.sort_unstable();\n+    let mut vec = vec![false, false, true];\n+    vec.sort_unstable();\n+    let mut vec = vec!['a', 'A', 'c'];\n+    vec.sort_unstable();\n+    let mut vec = vec![\"ab\", \"cd\", \"ab\", \"bc\"];\n+    vec.sort_unstable();\n+    let mut vec = vec![(2, 1), (1, 2), (2, 5)];\n+    vec.sort_unstable();\n+    let mut vec = vec![[2, 1], [1, 2], [2, 5]];\n+    vec.sort_unstable();\n+    let mut arr = [1, 3, 2];\n+    arr.sort_unstable();\n+    // Negative examples: behavior changes if made unstable\n+    let mut vec = vec![1, 3, 2];\n+    vec.sort_by_key(|i| i / 2);\n+    vec.sort_by(|a, b| (a + b).cmp(&b));\n+    // negative examples - Not of a primitive type\n+    let mut vec_of_complex = vec![String::from(\"hello\"), String::from(\"world!\")];\n+    vec_of_complex.sort();\n+    vec_of_complex.sort_by_key(String::len);\n+    let mut vec = vec![(String::from(\"hello\"), String::from(\"world\"))];\n+    vec.sort();\n+    let mut vec = vec![[String::from(\"hello\"), String::from(\"world\")]];\n+    vec.sort();\n+}"}, {"sha": "f9bd977906718156cb1601699e158ca3686cefa9", "filename": "tests/ui/stable_sort_primitive.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstable_sort_primitive.rs?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -0,0 +1,32 @@\n+// run-rustfix\n+#![warn(clippy::stable_sort_primitive)]\n+\n+fn main() {\n+    // positive examples\n+    let mut vec = vec![1, 3, 2];\n+    vec.sort();\n+    let mut vec = vec![false, false, true];\n+    vec.sort();\n+    let mut vec = vec!['a', 'A', 'c'];\n+    vec.sort();\n+    let mut vec = vec![\"ab\", \"cd\", \"ab\", \"bc\"];\n+    vec.sort();\n+    let mut vec = vec![(2, 1), (1, 2), (2, 5)];\n+    vec.sort();\n+    let mut vec = vec![[2, 1], [1, 2], [2, 5]];\n+    vec.sort();\n+    let mut arr = [1, 3, 2];\n+    arr.sort();\n+    // Negative examples: behavior changes if made unstable\n+    let mut vec = vec![1, 3, 2];\n+    vec.sort_by_key(|i| i / 2);\n+    vec.sort_by(|a, b| (a + b).cmp(&b));\n+    // negative examples - Not of a primitive type\n+    let mut vec_of_complex = vec![String::from(\"hello\"), String::from(\"world!\")];\n+    vec_of_complex.sort();\n+    vec_of_complex.sort_by_key(String::len);\n+    let mut vec = vec![(String::from(\"hello\"), String::from(\"world\"))];\n+    vec.sort();\n+    let mut vec = vec![[String::from(\"hello\"), String::from(\"world\")]];\n+    vec.sort();\n+}"}, {"sha": "b0b729ede48e5cccde3396c0920baaf2cc3d7a33", "filename": "tests/ui/stable_sort_primitive.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Fstable_sort_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Fstable_sort_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstable_sort_primitive.stderr?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -0,0 +1,46 @@\n+error: Use sort_unstable instead of sort\n+  --> $DIR/stable_sort_primitive.rs:7:5\n+   |\n+LL |     vec.sort();\n+   |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+   |\n+   = note: `-D clippy::stable-sort-primitive` implied by `-D warnings`\n+\n+error: Use sort_unstable instead of sort\n+  --> $DIR/stable_sort_primitive.rs:9:5\n+   |\n+LL |     vec.sort();\n+   |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+\n+error: Use sort_unstable instead of sort\n+  --> $DIR/stable_sort_primitive.rs:11:5\n+   |\n+LL |     vec.sort();\n+   |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+\n+error: Use sort_unstable instead of sort\n+  --> $DIR/stable_sort_primitive.rs:13:5\n+   |\n+LL |     vec.sort();\n+   |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+\n+error: Use sort_unstable instead of sort\n+  --> $DIR/stable_sort_primitive.rs:15:5\n+   |\n+LL |     vec.sort();\n+   |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+\n+error: Use sort_unstable instead of sort\n+  --> $DIR/stable_sort_primitive.rs:17:5\n+   |\n+LL |     vec.sort();\n+   |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+\n+error: Use sort_unstable instead of sort\n+  --> $DIR/stable_sort_primitive.rs:19:5\n+   |\n+LL |     arr.sort();\n+   |     ^^^^^^^^^^ help: try: `arr.sort_unstable()`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "31c2ba0f9c5893a21dcaba76b1675b4577746173", "filename": "tests/ui/unnecessary_sort_by.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Funnecessary_sort_by.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Funnecessary_sort_by.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.fixed?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![allow(clippy::stable_sort_primitive)]\n+\n use std::cmp::Reverse;\n \n fn unnecessary_sort_by() {"}, {"sha": "a3c8ae468ede73d15a42f79c61141b60aac38e46", "filename": "tests/ui/unnecessary_sort_by.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.rs?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![allow(clippy::stable_sort_primitive)]\n+\n use std::cmp::Reverse;\n \n fn unnecessary_sort_by() {"}, {"sha": "70c6cf0a3b63138b25781730faac8a13b9b62efb", "filename": "tests/ui/unnecessary_sort_by.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Funnecessary_sort_by.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25abd7ae76e2a708dda5487119c20af3be64edb7/tests%2Fui%2Funnecessary_sort_by.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.stderr?ref=25abd7ae76e2a708dda5487119c20af3be64edb7", "patch": "@@ -1,43 +1,43 @@\n error: use Vec::sort here instead\n-  --> $DIR/unnecessary_sort_by.rs:12:5\n+  --> $DIR/unnecessary_sort_by.rs:14:5\n    |\n LL |     vec.sort_by(|a, b| a.cmp(b));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort()`\n    |\n    = note: `-D clippy::unnecessary-sort-by` implied by `-D warnings`\n \n error: use Vec::sort here instead\n-  --> $DIR/unnecessary_sort_by.rs:13:5\n+  --> $DIR/unnecessary_sort_by.rs:15:5\n    |\n LL |     vec.sort_unstable_by(|a, b| a.cmp(b));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:14:5\n+  --> $DIR/unnecessary_sort_by.rs:16:5\n    |\n LL |     vec.sort_by(|a, b| (a + 5).abs().cmp(&(b + 5).abs()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&a| (a + 5).abs())`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:15:5\n+  --> $DIR/unnecessary_sort_by.rs:17:5\n    |\n LL |     vec.sort_unstable_by(|a, b| id(-a).cmp(&id(-b)));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable_by_key(|&a| id(-a))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:17:5\n+  --> $DIR/unnecessary_sort_by.rs:19:5\n    |\n LL |     vec.sort_by(|a, b| b.cmp(a));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse(b))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:18:5\n+  --> $DIR/unnecessary_sort_by.rs:20:5\n    |\n LL |     vec.sort_by(|a, b| (b + 5).abs().cmp(&(a + 5).abs()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse((b + 5).abs()))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:19:5\n+  --> $DIR/unnecessary_sort_by.rs:21:5\n    |\n LL |     vec.sort_unstable_by(|a, b| id(-b).cmp(&id(-a)));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable_by_key(|&b| Reverse(id(-b)))`"}]}