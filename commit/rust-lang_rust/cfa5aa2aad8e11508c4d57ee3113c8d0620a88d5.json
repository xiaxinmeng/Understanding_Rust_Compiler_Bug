{"sha": "cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "node_id": "C_kwDOAAsO6NoAKGNmYTVhYTJhYWQ4ZTExNTA4YzRkNTdlZTMxMTNjOGQwNjIwYTg4ZDU", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2023-05-18T12:33:52Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2023-05-18T18:51:27Z"}, "message": "Don't suggest unnameable types in box_default, let_underscore_untyped", "tree": {"sha": "32ce7aad8d94b64d30ddab7663e85df1485e54c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ce7aad8d94b64d30ddab7663e85df1485e54c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "html_url": "https://github.com/rust-lang/rust/commit/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "url": "https://api.github.com/repos/rust-lang/rust/commits/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "html_url": "https://github.com/rust-lang/rust/commit/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "e42c3fe24325694e8e75d5ac77086084f563e9db", "filename": "clippy_lints/src/box_default.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/clippy_lints%2Fsrc%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/clippy_lints%2Fsrc%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbox_default.rs?ref=cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "patch": "@@ -8,7 +8,9 @@ use rustc_hir::{\n     Block, Expr, ExprKind, Local, Node, QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::{lint::in_external_macro, ty::print::with_forced_trimmed_paths};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::print::with_forced_trimmed_paths;\n+use rustc_middle::ty::IsSuggestable;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -49,7 +51,6 @@ impl LateLintPass<'_> for BoxDefault {\n             && path_def_id(cx, ty).map_or(false, |id| Some(id) == cx.tcx.lang_items().owned_box())\n             && is_default_equivalent(cx, arg)\n         {\n-            let arg_ty = cx.typeck_results().expr_ty(arg);\n             span_lint_and_sugg(\n                 cx,\n                 BOX_DEFAULT,\n@@ -58,8 +59,10 @@ impl LateLintPass<'_> for BoxDefault {\n                 \"try\",\n                 if is_plain_default(arg_path) || given_type(cx, expr) {\n                     \"Box::default()\".into()\n-                } else {\n+                } else if let Some(arg_ty) = cx.typeck_results().expr_ty(arg).make_suggestable(cx.tcx, true) {\n                     with_forced_trimmed_paths!(format!(\"Box::<{arg_ty}>::default()\"))\n+                } else {\n+                    return\n                 },\n                 Applicability::MachineApplicable\n             );"}, {"sha": "e661418092080f015e13189ca0494c956e470c0e", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "patch": "@@ -2,10 +2,11 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::is_from_proc_macro;\n use clippy_utils::ty::{implements_trait, is_must_use_ty, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n-use rustc_hir::{ExprKind, Local, PatKind};\n+use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::IsSuggestable;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{BytePos, Span};\n \n@@ -192,14 +193,12 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             if local.pat.default_binding_modes && local.ty.is_none() {\n                 // When `default_binding_modes` is true, the `let` keyword is present.\n \n-\t\t\t\t// Ignore function calls that return impl traits...\n-\t\t\t\tif let Some(init) = local.init &&\n-\t\t\t\tmatches!(init.kind, ExprKind::Call(_, _) | ExprKind::MethodCall(_, _, _, _)) {\n-\t\t\t\t\tlet expr_ty = cx.typeck_results().expr_ty(init);\n-\t\t\t\t\tif expr_ty.is_impl_trait() {\n-\t\t\t\t\t\treturn;\n-\t\t\t\t\t}\n-\t\t\t\t}\n+                // Ignore unnameable types\n+                if let Some(init) = local.init\n+                    && !cx.typeck_results().expr_ty(init).is_suggestable(cx.tcx, true)\n+                {\n+                    return;\n+                }\n \n                 // Ignore if it is from a procedural macro...\n                 if is_from_proc_macro(cx, init) {"}, {"sha": "fb066d8982ecb5d362d01cfcc52914e5f836d375", "filename": "tests/ui/box_default.fixed", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/tests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/tests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.fixed?ref=cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "patch": "@@ -1,6 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n-#![allow(clippy::default_constructed_unit_structs)]\n+#![allow(unused, clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;\n@@ -35,6 +35,13 @@ fn main() {\n     let _more = ret_ty_fn();\n     call_ty_fn(Box::default());\n     issue_10381();\n+\n+    // `Box::<Option<_>>::default()` would be valid here, but not `Box::default()` or\n+    // `Box::<Option<[closure@...]>::default()`\n+    //\n+    // Would have a suggestion after https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler/rustc_middle/src/ty/diagnostics.rs#L554-L563\n+    let mut unnameable = Box::new(Option::default());\n+    let _ = unnameable.insert(|| {});\n }\n \n fn ret_ty_fn() -> Box<bool> {"}, {"sha": "2882170492c7d336f49d73cf9580960a9fba95a6", "filename": "tests/ui/box_default.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "patch": "@@ -1,6 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n-#![allow(clippy::default_constructed_unit_structs)]\n+#![allow(unused, clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;\n@@ -35,6 +35,13 @@ fn main() {\n     let _more = ret_ty_fn();\n     call_ty_fn(Box::new(u8::default()));\n     issue_10381();\n+\n+    // `Box::<Option<_>>::default()` would be valid here, but not `Box::default()` or\n+    // `Box::<Option<[closure@...]>::default()`\n+    //\n+    // Would have a suggestion after https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler/rustc_middle/src/ty/diagnostics.rs#L554-L563\n+    let mut unnameable = Box::new(Option::default());\n+    let _ = unnameable.insert(|| {});\n }\n \n fn ret_ty_fn() -> Box<bool> {"}, {"sha": "13dfc5ae48a22f7e9acf1bfb9aa99d1e91406ef1", "filename": "tests/ui/box_default.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/tests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/tests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.stderr?ref=cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "patch": "@@ -73,25 +73,25 @@ LL |     call_ty_fn(Box::new(u8::default()));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:41:5\n+  --> $DIR/box_default.rs:48:5\n    |\n LL |     Box::new(bool::default())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<bool>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:58:28\n+  --> $DIR/box_default.rs:65:28\n    |\n LL |     let _: Box<dyn Read> = Box::new(ImplementsDefault::default());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:67:17\n+  --> $DIR/box_default.rs:74:17\n    |\n LL |         let _ = Box::new(WeirdPathed::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<WeirdPathed>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:79:18\n+  --> $DIR/box_default.rs:86:18\n    |\n LL |             Some(Box::new(Foo::default()))\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Foo>::default()`"}, {"sha": "2c313ff35d59dd114213d614f7e7a611e868bc91", "filename": "tests/ui/let_underscore_untyped.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/tests%2Fui%2Flet_underscore_untyped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5/tests%2Fui%2Flet_underscore_untyped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.rs?ref=cfa5aa2aad8e11508c4d57ee3113c8d0620a88d5", "patch": "@@ -54,6 +54,7 @@ fn main() {\n     let _ = e();\n     let _ = f();\n     let _ = g();\n+    let closure = || {};\n \n     _ = a();\n     _ = b(1);"}]}