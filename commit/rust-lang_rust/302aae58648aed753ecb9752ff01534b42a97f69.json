{"sha": "302aae58648aed753ecb9752ff01534b42a97f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMmFhZTU4NjQ4YWVkNzUzZWNiOTc1MmZmMDE1MzRiNDJhOTdmNjk=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-27T07:01:57Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-06T13:25:18Z"}, "message": "Use raw pointers", "tree": {"sha": "41ba8e0821ab6a5ec1825523ffbc86299164bd82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ba8e0821ab6a5ec1825523ffbc86299164bd82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/302aae58648aed753ecb9752ff01534b42a97f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/302aae58648aed753ecb9752ff01534b42a97f69", "html_url": "https://github.com/rust-lang/rust/commit/302aae58648aed753ecb9752ff01534b42a97f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/302aae58648aed753ecb9752ff01534b42a97f69/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "090b8341bcd1eb7de3d0cbaa71eb2d77924fc4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/090b8341bcd1eb7de3d0cbaa71eb2d77924fc4bc", "html_url": "https://github.com/rust-lang/rust/commit/090b8341bcd1eb7de3d0cbaa71eb2d77924fc4bc"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "adc06a9e45746e30103e23f96995e8cd13a83c63", "filename": "src/librustc/ty/maps/job.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/302aae58648aed753ecb9752ff01534b42a97f69/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302aae58648aed753ecb9752ff01534b42a97f69/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs?ref=302aae58648aed753ecb9752ff01534b42a97f69", "patch": "@@ -62,7 +62,7 @@ pub struct QueryJob<'tcx> {\n     pub diagnostics: Lock<Vec<Diagnostic>>,\n \n     #[cfg(parallel_queries)]\n-    latch: QueryLatch,\n+    latch: QueryLatch<'tcx>,\n }\n \n impl<'tcx> QueryJob<'tcx> {\n@@ -146,41 +146,45 @@ impl<'tcx> QueryJob<'tcx> {\n     ///\n     /// This does nothing for single threaded rustc,\n     /// as there are no concurrent jobs which could be waiting on us\n-    pub fn signal_complete(&self, tcx: TyCtxt<'_, 'tcx, '_>) {\n+    pub fn signal_complete(&self) {\n         #[cfg(parallel_queries)]\n-        self.latch.set(tcx);\n+        self.latch.set();\n     }\n }\n \n #[cfg(parallel_queries)]\n-struct QueryWaiter<'a, 'tcx: 'a> {\n-    query: &'a Option<Lrc<QueryJob<'tcx>>>,\n+struct QueryWaiter<'tcx> {\n+    query: *const Option<Lrc<QueryJob<'tcx>>>,\n     condvar: Condvar,\n     span: Span,\n     cycle: Option<CycleError<'tcx>>,\n }\n \n #[cfg(parallel_queries)]\n-impl<'a, 'tcx> QueryWaiter<'a, 'tcx> {\n-    fn notify(&self, tcx: TyCtxt<'_, '_, '_>, registry: &rayon_core::Registry) {\n+impl<'tcx> QueryWaiter<'tcx> {\n+    fn notify(&self, registry: &rayon_core::Registry) {\n         rayon_core::mark_unblocked(registry);\n         self.condvar.notify_one();\n     }\n }\n \n #[cfg(parallel_queries)]\n-struct QueryLatchInfo {\n+struct QueryLatchInfo<'tcx> {\n     complete: bool,\n-    waiters: Vec<&'static mut QueryWaiter<'static, 'static>>,\n+    waiters: Vec<*mut QueryWaiter<'tcx>>,\n }\n \n+// Required because of raw pointers\n #[cfg(parallel_queries)]\n-struct QueryLatch {\n-    info: Mutex<QueryLatchInfo>,\n+unsafe impl<'tcx> Send for QueryLatchInfo<'tcx> {}\n+\n+#[cfg(parallel_queries)]\n+struct QueryLatch<'tcx> {\n+    info: Mutex<QueryLatchInfo<'tcx>>,\n }\n \n #[cfg(parallel_queries)]\n-impl QueryLatch {\n+impl<'tcx> QueryLatch<'tcx> {\n     fn new() -> Self {\n         QueryLatch {\n             info: Mutex::new(QueryLatchInfo {\n@@ -190,44 +194,45 @@ impl QueryLatch {\n         }\n     }\n \n-    fn await(&self, waiter: &mut QueryWaiter<'_, '_>) {\n+    fn await(&self, waiter: &mut QueryWaiter<'tcx>) {\n         let mut info = self.info.lock();\n         if !info.complete {\n-            let waiter = &*waiter;\n-            unsafe {\n-                #[allow(mutable_transmutes)]\n-                info.waiters.push(mem::transmute(waiter));\n-            }\n+            info.waiters.push(waiter);\n+            let condvar = &waiter.condvar;\n             // If this detects a deadlock and the deadlock handler want to resume this thread\n             // we have to be in the `wait` call. This is ensured by the deadlock handler\n             // getting the self.info lock.\n             rayon_core::mark_blocked();\n-            waiter.condvar.wait(&mut info);\n+            condvar.wait(&mut info);\n         }\n     }\n \n-    fn set(&self, tcx: TyCtxt<'_, '_, '_>) {\n+    fn set(&self) {\n         let mut info = self.info.lock();\n         debug_assert!(!info.complete);\n         info.complete = true;\n         let registry = rayon_core::Registry::current();\n         for waiter in info.waiters.drain(..) {\n-            waiter.notify(tcx, &registry);\n+            unsafe {\n+                (*waiter).notify(&registry);\n+            }\n         }\n     }\n \n     fn resume_waiter(\n         &self,\n         waiter: usize,\n-        error: CycleError\n-    ) -> &'static mut QueryWaiter<'static, 'static> {\n+        error: CycleError<'tcx>\n+    ) -> *mut QueryWaiter<'tcx> {\n         let mut info = self.info.lock();\n         debug_assert!(!info.complete);\n         // Remove the waiter from the list of waiters\n         let waiter = info.waiters.remove(waiter);\n \n         // Set the cycle error it will be picked it up when resumed\n-        waiter.cycle = unsafe { Some(mem::transmute(error)) };\n+        unsafe {\n+            (*waiter).cycle = Some(error);\n+        }\n \n         waiter\n     }\n@@ -250,10 +255,12 @@ where\n             return Some(cycle);\n         }\n     }\n-    for (i, waiter) in query.latch.info.lock().waiters.iter().enumerate() {\n-        if let Some(ref waiter_query) = waiter.query {\n-            if visit(waiter.span, &**waiter_query as Ref).is_some() {\n-                return Some(Some((query_ref, i)));\n+    for (i, &waiter) in query.latch.info.lock().waiters.iter().enumerate() {\n+        unsafe {\n+            if let Some(ref waiter_query) = *(*waiter).query {\n+                if visit((*waiter).span, &**waiter_query as Ref).is_some() {\n+                    return Some(Some((query_ref, i)));\n+                }\n             }\n         }\n     }\n@@ -322,7 +329,7 @@ fn query_entry<'tcx>(r: Ref<'tcx>) -> QueryInfo<'tcx> {\n #[cfg(parallel_queries)]\n fn remove_cycle<'tcx>(\n     jobs: &mut Vec<Ref<'tcx>>,\n-    wakelist: &mut Vec<&'static mut QueryWaiter<'static, 'static>>,\n+    wakelist: &mut Vec<*mut QueryWaiter<'tcx>>,\n     tcx: TyCtxt<'_, 'tcx, '_>\n ) {\n     let mut visited = HashSet::new();\n@@ -453,7 +460,9 @@ fn deadlock(tcx: TyCtxt<'_, '_, '_>, registry: &rayon_core::Registry) {\n \n     // FIXME: Ensure this won't cause a deadlock before we return\n     for waiter in wakelist.into_iter() {\n-        waiter.notify(tcx, registry);\n+        unsafe {\n+            (*waiter).notify(registry);\n+        }\n     }\n \n     on_panic.disable();"}]}