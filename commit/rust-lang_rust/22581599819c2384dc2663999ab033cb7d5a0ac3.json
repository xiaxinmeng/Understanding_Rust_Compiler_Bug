{"sha": "22581599819c2384dc2663999ab033cb7d5a0ac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTgxNTk5ODE5YzIzODRkYzI2NjM5OTlhYjAzM2NiN2Q1YTBhYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-19T21:44:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-19T21:44:56Z"}, "message": "Auto merge of #29172 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #29027, #29125, #29132, #29165, #29168, #29169\n- Failed merges:", "tree": {"sha": "c6d32d53aa11d118ee8062fc52802e5f292d6759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6d32d53aa11d118ee8062fc52802e5f292d6759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22581599819c2384dc2663999ab033cb7d5a0ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22581599819c2384dc2663999ab033cb7d5a0ac3", "html_url": "https://github.com/rust-lang/rust/commit/22581599819c2384dc2663999ab033cb7d5a0ac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22581599819c2384dc2663999ab033cb7d5a0ac3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74454a36040ed1b671ce31b5fcdc8755d11ce95", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74454a36040ed1b671ce31b5fcdc8755d11ce95", "html_url": "https://github.com/rust-lang/rust/commit/c74454a36040ed1b671ce31b5fcdc8755d11ce95"}, {"sha": "2f2d8df534ce97d5bea408a79388b97ae6d9fa38", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2d8df534ce97d5bea408a79388b97ae6d9fa38", "html_url": "https://github.com/rust-lang/rust/commit/2f2d8df534ce97d5bea408a79388b97ae6d9fa38"}], "stats": {"total": 339, "additions": 232, "deletions": 107}, "files": [{"sha": "a040ff0921a9ed5022ecd9c7de52752f1d957063", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -98,7 +98,7 @@ Building the documentation requires building the compiler, so the above\n details will apply. Once you have the compiler built, you can\n \n ```sh\n-$ make docs NO_REBUILD=1 \n+$ make docs NO_REBUILD=1\n ```\n \n To make sure you don\u2019t re-build the compiler because you made a change"}, {"sha": "5fd61eb51dd1c7f6d2b7d8ed6b6af5ec70dce106", "filename": "src/doc/nomicon/safe-unsafe-meaning.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Fnomicon%2Fsafe-unsafe-meaning.md", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Fnomicon%2Fsafe-unsafe-meaning.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsafe-unsafe-meaning.md?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -42,7 +42,7 @@ Some examples of unsafe functions:\n * `slice::get_unchecked` will perform unchecked indexing, allowing memory\n   safety to be freely violated.\n * every raw pointer to sized type has intrinsic `offset` method that invokes\n-  Undefined Behaviour if it is not \"in bounds\" as defined by LLVM.\n+  Undefined Behavior if it is not \"in bounds\" as defined by LLVM.\n * `mem::transmute` reinterprets some value as having the given type,\n   bypassing type safety in arbitrary ways. (see [conversions] for details)\n * All FFI functions are `unsafe` because they can do arbitrary things."}, {"sha": "e81ae4648ad4323c9daa1f0631b25bd7c4dc62d1", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -512,6 +512,7 @@ impl Philosopher {\n \n     fn eat(&self, table: &Table) {\n         let _left = table.forks[self.left].lock().unwrap();\n+        thread::sleep_ms(150);\n         let _right = table.forks[self.right].lock().unwrap();\n \n         println!(\"{} is eating.\", self.name);\n@@ -597,6 +598,7 @@ We now need to construct those `left` and `right` values, so we add them to\n ```rust,ignore\n fn eat(&self, table: &Table) {\n     let _left = table.forks[self.left].lock().unwrap();\n+    thread::sleep_ms(150);\n     let _right = table.forks[self.right].lock().unwrap();\n \n     println!(\"{} is eating.\", self.name);\n@@ -607,11 +609,14 @@ fn eat(&self, table: &Table) {\n }\n ```\n \n-We have two new lines. We\u2019ve also added an argument, `table`. We access the\n+We have three new lines. We\u2019ve added an argument, `table`. We access the\n `Table`\u2019s list of forks, and then use `self.left` and `self.right` to access\n the fork at that particular index. That gives us access to the `Mutex` at that\n index, and we call `lock()` on it. If the mutex is currently being accessed by\n-someone else, we\u2019ll block until it becomes available.\n+someone else, we\u2019ll block until it becomes available. We have also a call to\n+`thread::sleep_ms` between the moment first fork is picked and the moment the\n+second forked is picked, as the process  of picking up the fork is not\n+immediate.\n \n The call to `lock()` might fail, and if it does, we want to crash. In this\n case, the error that could happen is that the mutex is [\u2018poisoned\u2019][poison],\n@@ -660,7 +665,9 @@ We need to pass in our `left` and `right` values to the constructors for our\n you look at the pattern, it\u2019s all consistent until the very end. Monsieur\n Foucault should have `4, 0` as arguments, but instead, has `0, 4`. This is what\n prevents deadlock, actually: one of our philosophers is left handed! This is\n-one way to solve the problem, and in my opinion, it\u2019s the simplest.\n+one way to solve the problem, and in my opinion, it\u2019s the simplest. If you\n+change the order of the parameters, you will be able to observe the deadlock\n+taking place.\n \n ```rust,ignore\n let handles: Vec<_> = philosophers.into_iter().map(|p| {"}, {"sha": "ac4b51333a3c1d4ec17bb4e07113e6aa105a15bb", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -73,7 +73,7 @@ hello.rs:4 }\n ```\n \n This [unfortunate error](https://github.com/rust-lang/rust/issues/22547) is\n-correct: documentation comments apply to the thing after them, and there's \n+correct: documentation comments apply to the thing after them, and there's\n nothing after that last comment.\n \n [rc-new]: https://doc.rust-lang.org/nightly/std/rc/struct.Rc.html#method.new"}, {"sha": "d31d82324708243b887dd6d355f058f6e67f09a8", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -55,7 +55,7 @@ kinds of things `foo` could be: `self` if it\u2019s just a value on the stack,\n `&self` if it\u2019s a reference, and `&mut self` if it\u2019s a mutable reference.\n Because we took the `&self` parameter to `area`, we can use it just like any\n other parameter. Because we know it\u2019s a `Circle`, we can access the `radius`\n-just like we would with any other `struct`. \n+just like we would with any other `struct`.\n \n We should default to using `&self`, as you should prefer borrowing over taking\n ownership, as well as taking immutable references over mutable ones. Here\u2019s an"}, {"sha": "71acb551e6e3ccc05ca601099fd7b16933705c6b", "filename": "src/doc/trpl/mutability.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmutability.md?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -84,7 +84,7 @@ philosophy, memory safety, and the mechanism by which Rust guarantees it, the\n \n > You may have one or the other of these two kinds of borrows, but not both at\n > the same time:\n-> \n+>\n > * one or more references (`&T`) to a resource,\n > * exactly one mutable reference (`&mut T`).\n "}, {"sha": "d8ef44b782a1de29ef0e8f0bfe043096b2f606ec", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -42,7 +42,7 @@ With that in mind, let\u2019s learn about ownership.\n # Ownership\n \n [Variable bindings][bindings] have a property in Rust: they \u2018have ownership\u2019\n-of what they\u2019re bound to. This means that when a binding goes out of scope, \n+of what they\u2019re bound to. This means that when a binding goes out of scope,\n Rust will free the bound resources. For example:\n \n ```rust\n@@ -158,8 +158,8 @@ has no pointers to data somewhere else, copying it is a full copy.\n \n All primitive types implement the `Copy` trait and their ownership is\n therefore not moved like one would assume, following the \u00b4ownership rules\u00b4.\n-To give an example, the two following snippets of code only compile because the \n-`i32` and `bool` types implement the `Copy` trait. \n+To give an example, the two following snippets of code only compile because the\n+`i32` and `bool` types implement the `Copy` trait.\n \n ```rust\n fn main() {"}, {"sha": "13cfecdf1a72904ff30f93835da140ce09fed19a", "filename": "src/doc/trpl/references-and-borrowing.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -233,7 +233,7 @@ So when we add the curly braces:\n ```rust\n let mut x = 5;\n \n-{                   \n+{\n     let y = &mut x; // -+ &mut borrow starts here\n     *y += 1;        //  |\n }                   // -+ ... and ends here\n@@ -306,7 +306,7 @@ which was invalid. For example:\n \n ```rust,ignore\n let y: &i32;\n-{ \n+{\n     let x = 5;\n     y = &x;\n }\n@@ -323,7 +323,7 @@ error: `x` does not live long enough\n note: reference must be valid for the block suffix following statement 0 at\n 2:16...\n let y: &i32;\n-{ \n+{\n     let x = 5;\n     y = &x;\n }"}, {"sha": "1848366498981dde6911449e63369550a609a10b", "filename": "src/doc/trpl/strings.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Fdoc%2Ftrpl%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstrings.md?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -102,8 +102,8 @@ println!(\"\");\n This prints:\n \n ```text\n-229, 191, 160, 231, 138, 172, 227, 131, 143, 227, 131, 129, 229, 133, 172, \n-\u5fe0, \u72ac, \u30cf, \u30c1, \u516c, \n+229, 191, 160, 231, 138, 172, 227, 131, 143, 227, 131, 129, 229, 133, 172,\n+\u5fe0, \u72ac, \u30cf, \u30c1, \u516c,\n ```\n \n As you can see, there are more bytes than `char`s."}, {"sha": "ea78c701632166d9832d89d1448f58fbc24954fa", "filename": "src/libbacktrace/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2FMakefile.am", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2FMakefile.am?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -6,12 +6,12 @@\n # met:\n \n #     (1) Redistributions of source code must retain the above copyright\n-#     notice, this list of conditions and the following disclaimer. \n+#     notice, this list of conditions and the following disclaimer.\n \n #     (2) Redistributions in binary form must reproduce the above copyright\n #     notice, this list of conditions and the following disclaimer in\n #     the documentation and/or other materials provided with the\n-#     distribution.  \n+#     distribution.\n \n #     (3) The name of the author may not be used to\n #     endorse or promote products derived from this software without"}, {"sha": "16b1a72712ffd044dcb36849aa678abe8a7242aa", "filename": "src/libbacktrace/Makefile.in", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2FMakefile.in?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -23,12 +23,12 @@\n # met:\n \n #     (1) Redistributions of source code must retain the above copyright\n-#     notice, this list of conditions and the following disclaimer. \n+#     notice, this list of conditions and the following disclaimer.\n \n #     (2) Redistributions in binary form must reproduce the above copyright\n #     notice, this list of conditions and the following disclaimer in\n #     the documentation and/or other materials provided with the\n-#     distribution.  \n+#     distribution.\n \n #     (3) The name of the author may not be used to\n #     endorse or promote products derived from this software without\n@@ -137,10 +137,10 @@ LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t$(LDFLAGS) -o $@\n SOURCES = $(libbacktrace_la_SOURCES) $(EXTRA_libbacktrace_la_SOURCES) \\\n \t$(btest_SOURCES) $(stest_SOURCES)\n-MULTISRCTOP = \n-MULTIBUILDTOP = \n-MULTIDIRS = \n-MULTISUBDIR = \n+MULTISRCTOP =\n+MULTIBUILDTOP =\n+MULTIDIRS =\n+MULTISUBDIR =\n MULTIDO = true\n MULTICLEAN = true\n am__can_run_installinfo = \\\n@@ -389,7 +389,7 @@ config.h: stamp-h1\n stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status\n \t@rm -f stamp-h1\n \tcd $(top_builddir) && $(SHELL) ./config.status config.h\n-$(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@ $(am__configure_deps) \n+$(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)\n \t($(am__cd) $(top_srcdir) && $(AUTOHEADER))\n \trm -f stamp-h1\n \ttouch $@\n@@ -407,7 +407,7 @@ clean-noinstLTLIBRARIES:\n \t  echo \"rm -f \\\"$${dir}/so_locations\\\"\"; \\\n \t  rm -f \"$${dir}/so_locations\"; \\\n \tdone\n-libbacktrace.la: $(libbacktrace_la_OBJECTS) $(libbacktrace_la_DEPENDENCIES) $(EXTRA_libbacktrace_la_DEPENDENCIES) \n+libbacktrace.la: $(libbacktrace_la_OBJECTS) $(libbacktrace_la_DEPENDENCIES) $(EXTRA_libbacktrace_la_DEPENDENCIES)\n \t$(LINK)  $(libbacktrace_la_OBJECTS) $(libbacktrace_la_LIBADD) $(LIBS)\n \n clean-checkPROGRAMS:\n@@ -418,10 +418,10 @@ clean-checkPROGRAMS:\n \tlist=`for p in $$list; do echo \"$$p\"; done | sed 's/$(EXEEXT)$$//'`; \\\n \techo \" rm -f\" $$list; \\\n \trm -f $$list\n-btest$(EXEEXT): $(btest_OBJECTS) $(btest_DEPENDENCIES) $(EXTRA_btest_DEPENDENCIES) \n+btest$(EXEEXT): $(btest_OBJECTS) $(btest_DEPENDENCIES) $(EXTRA_btest_DEPENDENCIES)\n \t@rm -f btest$(EXEEXT)\n \t$(btest_LINK) $(btest_OBJECTS) $(btest_LDADD) $(LIBS)\n-stest$(EXEEXT): $(stest_OBJECTS) $(stest_DEPENDENCIES) $(EXTRA_stest_DEPENDENCIES) \n+stest$(EXEEXT): $(stest_OBJECTS) $(stest_DEPENDENCIES) $(EXTRA_stest_DEPENDENCIES)\n \t@rm -f stest$(EXEEXT)\n \t$(LINK) $(stest_OBJECTS) $(stest_LDADD) $(LIBS)\n "}, {"sha": "c9d6a1406b7b2e58110593e5ef64fe18e1511204", "filename": "src/libbacktrace/alloc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Falloc.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Falloc.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Falloc.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "40e4ff93cf68ace004289f81ff5e347d8e8f96a0", "filename": "src/libbacktrace/atomic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fatomic.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fatomic.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fatomic.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "976963e71041ba8dce060e56ce4f5949f7303801", "filename": "src/libbacktrace/backtrace-supported.h.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fbacktrace-supported.h.in", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fbacktrace-supported.h.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fbacktrace-supported.h.in?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "8941375c6cd5575ceecd08b65a1202218eb28568", "filename": "src/libbacktrace/backtrace.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fbacktrace.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fbacktrace.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "f16ee36cbce9ad9ab00da24d0e146d017392efd1", "filename": "src/libbacktrace/backtrace.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fbacktrace.h", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fbacktrace.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fbacktrace.h?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "a950a704f071d7caf2e3fd9fa5f04b9ae8d38e0c", "filename": "src/libbacktrace/btest.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fbtest.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fbtest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fbtest.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without\n@@ -460,7 +460,7 @@ f23 (int f1line, int f2line)\n \t\t       (unsigned int) bdata.index, j + 1);\n \t      bdata.failed = 1;\n \t    }\n-\t}      \n+\t}\n \n       check (\"test3\", 0, all, f3line, \"f23\", &bdata.failed);\n       check (\"test3\", 1, all, f2line, \"f22\", &bdata.failed);"}, {"sha": "30d890ef14a9fb44c75e189941877f08366f1658", "filename": "src/libbacktrace/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fconfigure.ac", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fconfigure.ac?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -6,12 +6,12 @@\n # met:\n \n #     (1) Redistributions of source code must retain the above copyright\n-#     notice, this list of conditions and the following disclaimer. \n+#     notice, this list of conditions and the following disclaimer.\n \n #     (2) Redistributions in binary form must reproduce the above copyright\n #     notice, this list of conditions and the following disclaimer in\n #     the documentation and/or other materials provided with the\n-#     distribution.  \n+#     distribution.\n \n #     (3) The name of the author may not be used to\n #     endorse or promote products derived from this software without"}, {"sha": "fd3beac01fbafd8f8f9e60f82a3e436f6e4ba917", "filename": "src/libbacktrace/dwarf.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fdwarf.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fdwarf.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without\n@@ -1246,7 +1246,7 @@ add_unit_ranges (struct backtrace_state *state, uintptr_t base_address,\n \n static int\n find_address_ranges (struct backtrace_state *state, uintptr_t base_address,\n-\t\t     struct dwarf_buf *unit_buf, \n+\t\t     struct dwarf_buf *unit_buf,\n \t\t     const unsigned char *dwarf_str, size_t dwarf_str_size,\n \t\t     const unsigned char *dwarf_ranges,\n \t\t     size_t dwarf_ranges_size,"}, {"sha": "f0709c9c355dc4f028d95ffb703c0f894727ce41", "filename": "src/libbacktrace/elf.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Felf.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Felf.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Felf.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "c151147213431f29cedda13f78655835dd93e9ac", "filename": "src/libbacktrace/fileline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Ffileline.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Ffileline.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Ffileline.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "f6046ee6057c5c621fe0fedd22c7a289e2522903", "filename": "src/libbacktrace/internal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Finternal.h", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Finternal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Finternal.h?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "610548a8a4e220d9b008b7d23a17ff9a0c9c603f", "filename": "src/libbacktrace/mmap.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fmmap.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fmmap.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fmmap.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "45f81a8593d9f72197a0001cb8e93e0b920d3fb2", "filename": "src/libbacktrace/mmapio.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fmmapio.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fmmapio.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fmmapio.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "9952c0bcbfb7bd5b8c452837bd1690612d301d20", "filename": "src/libbacktrace/nounwind.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fnounwind.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fnounwind.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fnounwind.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "f6260a0044eaa0855d6202bd329fa40cf0107569", "filename": "src/libbacktrace/posix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fposix.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fposix.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fposix.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "271f41c0c59bfeebcb6c9d72d2ac659ca0afcacd", "filename": "src/libbacktrace/print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fprint.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fprint.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fprint.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "70dd91ee97c8fd805e59be4c087a4b9b2669817b", "filename": "src/libbacktrace/read.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fread.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fread.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fread.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "fc0f4f498012c883b3dea172e5b94423605a8724", "filename": "src/libbacktrace/simple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fsimple.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fsimple.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fsimple.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "01b1cb2b8a5553cf397ab3c01ca64088172210d8", "filename": "src/libbacktrace/sort.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fsort.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fsort.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fsort.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "373938865c7fff4236ca6fd6a85fd2e5302e478b", "filename": "src/libbacktrace/state.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fstate.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fstate.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fstate.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "510715291895ca8065ee95e3180df4d06388210d", "filename": "src/libbacktrace/stest.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fstest.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Fstest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fstest.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "953e96e510e593f33369d1f5bf28d68bd347722c", "filename": "src/libbacktrace/unknown.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Funknown.c", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibbacktrace%2Funknown.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Funknown.c?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -7,12 +7,12 @@ modification, are permitted provided that the following conditions are\n met:\n \n     (1) Redistributions of source code must retain the above copyright\n-    notice, this list of conditions and the following disclaimer. \n+    notice, this list of conditions and the following disclaimer.\n \n     (2) Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n-    distribution.  \n+    distribution.\n \n     (3) The name of the author may not be used to\n     endorse or promote products derived from this software without"}, {"sha": "023edf29341e9f8f74e2e64f2b8a485c60a421a4", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -102,7 +102,7 @@ impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n     }\n }\n \n-/// External iterator for a string's UTF16 codeunits.\n+/// External iterator for a string's UTF-16 code units.\n ///\n /// For use with the `std::iter` module.\n #[derive(Clone)]"}, {"sha": "c5827326a86ed41693c40e2d1653ce71a20944f6", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 138, "deletions": 21, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -1618,7 +1618,13 @@ impl<B, I: ExactSizeIterator, F> ExactSizeIterator for Map<I, F> where\n impl<A, B> ExactSizeIterator for Zip<A, B>\n     where A: ExactSizeIterator, B: ExactSizeIterator {}\n \n-/// An double-ended iterator with the direction inverted\n+/// An double-ended iterator with the direction inverted.\n+///\n+/// This `struct` is created by the [`rev()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`rev()`]: trait.Iterator.html#method.rev\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1642,7 +1648,13 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n }\n \n-/// An iterator that clones the elements of an underlying iterator\n+/// An iterator that clones the elements of an underlying iterator.\n+///\n+/// This `struct` is created by the [`cloned()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`cloned()`]: trait.Iterator.html#method.cloned\n+/// [`Iterator`]: trait.Iterator.html\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[derive(Clone)]\n@@ -1679,7 +1691,13 @@ impl<'a, I, T: 'a> ExactSizeIterator for Cloned<I>\n     where I: ExactSizeIterator<Item=&'a T>, T: Clone\n {}\n \n-/// An iterator that repeats endlessly\n+/// An iterator that repeats endlessly.\n+///\n+/// This `struct` is created by the [`cycle()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`cycle()`]: trait.Iterator.html#method.cycle\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1711,7 +1729,13 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n     }\n }\n \n-/// An iterator that strings two iterators together\n+/// An iterator that strings two iterators together.\n+///\n+/// This `struct` is created by the [`chain()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`chain()`]: trait.Iterator.html#method.chain\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1849,7 +1873,13 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n     }\n }\n \n-/// An iterator that iterates two other iterators simultaneously\n+/// An iterator that iterates two other iterators simultaneously.\n+///\n+/// This `struct` is created by the [`zip()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`zip()`]: trait.Iterator.html#method.zip\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1915,7 +1945,13 @@ impl<A, B> DoubleEndedIterator for Zip<A, B> where\n     }\n }\n \n-/// An iterator that maps the values of `iter` with `f`\n+/// An iterator that maps the values of `iter` with `f`.\n+///\n+/// This `struct` is created by the [`map()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`map()`]: trait.Iterator.html#method.map\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -1949,7 +1985,13 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for Map<I, F> where\n     }\n }\n \n-/// An iterator that filters the elements of `iter` with `predicate`\n+/// An iterator that filters the elements of `iter` with `predicate`.\n+///\n+/// This `struct` is created by the [`filter()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`filter()`]: trait.Iterator.html#method.filter\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -1994,7 +2036,13 @@ impl<I: DoubleEndedIterator, P> DoubleEndedIterator for Filter<I, P>\n     }\n }\n \n-/// An iterator that uses `f` to both filter and map elements from `iter`\n+/// An iterator that uses `f` to both filter and map elements from `iter`.\n+///\n+/// This `struct` is created by the [`filter_map()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`filter_map()`]: trait.Iterator.html#method.filter_map\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2041,7 +2089,13 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>\n     }\n }\n \n-/// An iterator that yields the current count and the element during iteration\n+/// An iterator that yields the current count and the element during iteration.\n+///\n+/// This `struct` is created by the [`enumerate()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`enumerate()`]: trait.Iterator.html#method.enumerate\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2108,7 +2162,14 @@ impl<I> DoubleEndedIterator for Enumerate<I> where\n     }\n }\n \n-/// An iterator with a `peek()` that returns an optional reference to the next element.\n+/// An iterator with a `peek()` that returns an optional reference to the next\n+/// element.\n+///\n+/// This `struct` is created by the [`peekable()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`peekable()`]: trait.Iterator.html#method.peekable\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2190,7 +2251,13 @@ impl<I: Iterator> Peekable<I> {\n     }\n }\n \n-/// An iterator that rejects elements while `predicate` is true\n+/// An iterator that rejects elements while `predicate` is true.\n+///\n+/// This `struct` is created by the [`skip_while()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`skip_while()`]: trait.Iterator.html#method.skip_while\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2224,7 +2291,13 @@ impl<I: Iterator, P> Iterator for SkipWhile<I, P>\n     }\n }\n \n-/// An iterator that only accepts elements while `predicate` is true\n+/// An iterator that only accepts elements while `predicate` is true.\n+///\n+/// This `struct` is created by the [`take_while()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`take_while()`]: trait.Iterator.html#method.take_while\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2264,6 +2337,12 @@ impl<I: Iterator, P> Iterator for TakeWhile<I, P>\n }\n \n /// An iterator that skips over `n` elements of `iter`.\n+///\n+/// This `struct` is created by the [`skip()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`skip()`]: trait.Iterator.html#method.skip\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2338,6 +2417,12 @@ impl<I> Iterator for Skip<I> where I: Iterator {\n impl<I> ExactSizeIterator for Skip<I> where I: ExactSizeIterator {}\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n+///\n+/// This `struct` is created by the [`take()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`take()`]: trait.Iterator.html#method.take\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2393,7 +2478,13 @@ impl<I> Iterator for Take<I> where I: Iterator{\n impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {}\n \n \n-/// An iterator to maintain state while iterating another iterator\n+/// An iterator to maintain state while iterating another iterator.\n+///\n+/// This `struct` is created by the [`scan()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`scan()`]: trait.Iterator.html#method.scan\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2422,9 +2513,14 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n     }\n }\n \n-/// An iterator that maps each element to an iterator,\n-/// and yields the elements of the produced iterators\n+/// An iterator that maps each element to an iterator, and yields the elements\n+/// of the produced iterators.\n+///\n+/// This `struct` is created by the [`flat_map()`] method on [`Iterator`]. See its\n+/// documentation for more.\n ///\n+/// [`flat_map()`]: trait.Iterator.html#method.flat_map\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2493,8 +2589,11 @@ impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F> wher\n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n ///\n-/// These can be created through\n-/// [`iter.fuse()`](trait.Iterator.html#method.fuse).\n+/// This `struct` is created by the [`fuse()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`fuse()`]: trait.Iterator.html#method.fuse\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2574,8 +2673,14 @@ impl<I> DoubleEndedIterator for Fuse<I> where I: DoubleEndedIterator {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {}\n \n-/// An iterator that calls a function with a reference to each\n-/// element before yielding it.\n+/// An iterator that calls a function with a reference to each element before\n+/// yielding it.\n+///\n+/// This `struct` is created by the [`inspect()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`inspect()`]: trait.Iterator.html#method.inspect\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -3009,7 +3114,11 @@ impl<A: Step + One> Iterator for ops::RangeFrom<A> where\n     }\n }\n \n-/// An iterator that repeats an element endlessly\n+/// An iterator that repeats an element endlessly.\n+///\n+/// This `struct` is created by the [`repeat()`] function. See its documentation for more.\n+///\n+/// [`repeat()`]: fn.repeat.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Repeat<A> {\n@@ -3085,6 +3194,10 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n }\n \n /// An iterator that yields nothing.\n+///\n+/// This `struct` is created by the [`empty()`] function. See its documentation for more.\n+///\n+/// [`empty()`]: fn.empty.html\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub struct Empty<T>(marker::PhantomData<T>);\n \n@@ -3135,7 +3248,7 @@ impl<T> Default for Empty<T> {\n \n /// Creates an iterator that yields nothing.\n ///\n-/// # Exampes\n+/// # Examples\n ///\n /// Basic usage:\n ///\n@@ -3153,6 +3266,10 @@ pub fn empty<T>() -> Empty<T> {\n }\n \n /// An iterator that yields an element exactly once.\n+///\n+/// This `struct` is created by the [`once()`] function. See its documentation for more.\n+///\n+/// [`once()`]: fn.once.html\n #[derive(Clone)]\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub struct Once<T> {"}, {"sha": "7225b4f6e0d2abbdcfb6154f5ecb2978c16e4cdd", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -153,7 +153,8 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone)]\n pub enum Ordering {\n-    /// No ordering constraints, only atomic operations.\n+    /// No ordering constraints, only atomic operations. Corresponds to LLVM's\n+    /// `Monotonic` ordering.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Relaxed,\n     /// When coupled with a store, all previous writes become visible"}, {"sha": "ebe50a6e2b8a2b83d5735701e8d869bfcc2d2cf2", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -20,11 +20,11 @@\n //!\n //! # Read and Write\n //!\n-//! Because they are traits, they're implemented by a number of other types,\n-//! and you can implement them for your types too. As such, you'll see a\n-//! few different types of I/O throughout the documentation in this module:\n-//! `File`s, `TcpStream`s, and sometimes even `Vec<T>`s. For example, `Read`\n-//! adds a `read()` method, which we can use on `File`s:\n+//! Because they are traits, `Read` and `Write` are implemented by a number\n+//! of other types, and you can implement them for your types too. As such,\n+//! you'll see a few different types of I/O throughout the documentation in\n+//! this module: `File`s, `TcpStream`s, and sometimes even `Vec<T>`s. For\n+//! example, `Read` adds a `read()` method, which we can use on `File`s:\n //!\n //! ```\n //! use std::io;\n@@ -111,7 +111,7 @@\n //! # }\n //! ```\n //!\n-//! `BufWriter` doesn't add any new ways of writing, it just buffers every call\n+//! `BufWriter` doesn't add any new ways of writing; it just buffers every call\n //! to [`write()`][write]:\n //!\n //! ```\n@@ -165,7 +165,7 @@\n //! # }\n //! ```\n //!\n-//! Of course, using `io::stdout()` directly is less comon than something like\n+//! Of course, using `io::stdout()` directly is less common than something like\n //! `println!`.\n //!\n //! ## Iterator types"}, {"sha": "6e3c5eaf217f63b62fc721a66466c1ee2caf879a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -100,7 +100,7 @@ impl IntoInner<AnonPipe> for ChildStdin {\n     fn into_inner(self) -> AnonPipe { self.inner }\n }\n \n-/// A handle to a child procesess's stdout\n+/// A handle to a child process's stdout\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStdout {\n     inner: AnonPipe\n@@ -121,7 +121,7 @@ impl IntoInner<AnonPipe> for ChildStdout {\n     fn into_inner(self) -> AnonPipe { self.inner }\n }\n \n-/// A handle to a child procesess's stderr\n+/// A handle to a child process's stderr\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStderr {\n     inner: AnonPipe"}, {"sha": "7296fb9cc59368be1f1c00d6f9c5aca3f70cc7d9", "filename": "src/test/run-make/save-analysis/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/22581599819c2384dc2663999ab033cb7d5a0ac3/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile?ref=22581599819c2384dc2663999ab033cb7d5a0ac3", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n all: code\n krate2: krate2.rs\n-\t$(RUSTC) $< \n+\t$(RUSTC) $<\n code: foo.rs krate2\n \t$(RUSTC) foo.rs -Zsave-analysis"}]}