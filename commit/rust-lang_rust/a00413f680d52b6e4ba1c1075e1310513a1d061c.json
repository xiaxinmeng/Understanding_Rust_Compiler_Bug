{"sha": "a00413f680d52b6e4ba1c1075e1310513a1d061c", "node_id": "C_kwDOAAsO6NoAKGEwMDQxM2Y2ODBkNTJiNmU0YmExYzEwNzVlMTMxMDUxM2ExZDA2MWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T11:44:36Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T11:50:14Z"}, "message": "Also check function items' signatures for Fn* trait compatibility", "tree": {"sha": "4b1fcff98b9fe78558408590e5279a10f6769e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b1fcff98b9fe78558408590e5279a10f6769e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a00413f680d52b6e4ba1c1075e1310513a1d061c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a00413f680d52b6e4ba1c1075e1310513a1d061c", "html_url": "https://github.com/rust-lang/rust/commit/a00413f680d52b6e4ba1c1075e1310513a1d061c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a00413f680d52b6e4ba1c1075e1310513a1d061c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d913168cf357d4c7ba9b91d4656065477e3c2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d913168cf357d4c7ba9b91d4656065477e3c2c", "html_url": "https://github.com/rust-lang/rust/commit/91d913168cf357d4c7ba9b91d4656065477e3c2c"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "ded14a87f2ce655d735fe7a54bbb59b7b609f4f5", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a00413f680d52b6e4ba1c1075e1310513a1d061c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00413f680d52b6e4ba1c1075e1310513a1d061c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=a00413f680d52b6e4ba1c1075e1310513a1d061c", "patch": "@@ -189,11 +189,20 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n     goal_kind: ty::ClosureKind,\n ) -> Result<Option<ty::Binder<'tcx, (Ty<'tcx>, Ty<'tcx>)>>, NoSolution> {\n     match *self_ty.kind() {\n-        ty::FnDef(def_id, substs) => Ok(Some(\n-            tcx.fn_sig(def_id)\n-                .subst(tcx, substs)\n-                .map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output())),\n-        )),\n+        // keep this in sync with assemble_fn_pointer_candidates until the old solver is removed.\n+        ty::FnDef(def_id, substs) => {\n+            let sig = tcx.fn_sig(def_id);\n+            if sig.skip_binder().is_fn_trait_compatible()\n+                && tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n+            {\n+                Ok(Some(\n+                    sig.subst(tcx, substs)\n+                        .map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output())),\n+                ))\n+            } else {\n+                Err(NoSolution)\n+            }\n+        }\n         // keep this in sync with assemble_fn_pointer_candidates until the old solver is removed.\n         ty::FnPtr(sig) => {\n             if sig.is_fn_trait_compatible() {"}, {"sha": "0599e51d7ad8cca56a301706ec7365261dda663d", "filename": "tests/ui/traits/new-solver/fn-trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a00413f680d52b6e4ba1c1075e1310513a1d061c/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00413f680d52b6e4ba1c1075e1310513a1d061c/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs?ref=a00413f680d52b6e4ba1c1075e1310513a1d061c", "patch": "@@ -21,8 +21,12 @@ fn main() {\n     //~^ ERROR: expected a `Fn<()>` closure, found `unsafe fn() -> i32`\n     //~| ERROR: type mismatch resolving `<unsafe fn() -> i32 as FnOnce<()>>::Output == i32`\n     require_fn(g);\n+    //~^ ERROR: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32 {g}`\n+    //~| ERROR: type mismatch resolving `<extern \"C\" fn() -> i32 {g} as FnOnce<()>>::Output == i32`\n     require_fn(g as extern \"C\" fn() -> i32);\n     //~^ ERROR: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32`\n     //~| ERROR: type mismatch resolving `<extern \"C\" fn() -> i32 as FnOnce<()>>::Output == i32`\n     require_fn(h);\n+    //~^ ERROR: expected a `Fn<()>` closure, found `unsafe fn() -> i32 {h}`\n+    //~| ERROR: type mismatch resolving `<unsafe fn() -> i32 {h} as FnOnce<()>>::Output == i32`\n }"}, {"sha": "d52bcaf25b87c14d40a98670fedb42065744537f", "filename": "tests/ui/traits/new-solver/fn-trait.stderr", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a00413f680d52b6e4ba1c1075e1310513a1d061c/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a00413f680d52b6e4ba1c1075e1310513a1d061c/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.stderr?ref=a00413f680d52b6e4ba1c1075e1310513a1d061c", "patch": "@@ -28,8 +28,38 @@ note: required by a bound in `require_fn`\n LL | fn require_fn(_: impl Fn() -> i32) {}\n    |                               ^^^ required by this bound in `require_fn`\n \n+error[E0277]: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32 {g}`\n+  --> $DIR/fn-trait.rs:23:16\n+   |\n+LL |     require_fn(g);\n+   |     ---------- ^ expected an `Fn<()>` closure, found `extern \"C\" fn() -> i32 {g}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<()>` is not implemented for fn item `extern \"C\" fn() -> i32 {g}`\n+   = note: wrap the `extern \"C\" fn() -> i32 {g}` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:23\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                       ^^^^^^^^^^^ required by this bound in `require_fn`\n+\n+error[E0271]: type mismatch resolving `<extern \"C\" fn() -> i32 {g} as FnOnce<()>>::Output == i32`\n+  --> $DIR/fn-trait.rs:23:16\n+   |\n+LL |     require_fn(g);\n+   |     ---------- ^ types differ\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:31\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                               ^^^ required by this bound in `require_fn`\n+\n error[E0277]: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32`\n-  --> $DIR/fn-trait.rs:24:16\n+  --> $DIR/fn-trait.rs:26:16\n    |\n LL |     require_fn(g as extern \"C\" fn() -> i32);\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `extern \"C\" fn() -> i32`\n@@ -45,7 +75,7 @@ LL | fn require_fn(_: impl Fn() -> i32) {}\n    |                       ^^^^^^^^^^^ required by this bound in `require_fn`\n \n error[E0271]: type mismatch resolving `<extern \"C\" fn() -> i32 as FnOnce<()>>::Output == i32`\n-  --> $DIR/fn-trait.rs:24:16\n+  --> $DIR/fn-trait.rs:26:16\n    |\n LL |     require_fn(g as extern \"C\" fn() -> i32);\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ\n@@ -58,7 +88,37 @@ note: required by a bound in `require_fn`\n LL | fn require_fn(_: impl Fn() -> i32) {}\n    |                               ^^^ required by this bound in `require_fn`\n \n-error: aborting due to 4 previous errors\n+error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() -> i32 {h}`\n+  --> $DIR/fn-trait.rs:29:16\n+   |\n+LL |     require_fn(h);\n+   |     ---------- ^ call the function in a closure: `|| unsafe { /* code */ }`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<()>` is not implemented for fn item `unsafe fn() -> i32 {h}`\n+   = note: wrap the `unsafe fn() -> i32 {h}` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:23\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                       ^^^^^^^^^^^ required by this bound in `require_fn`\n+\n+error[E0271]: type mismatch resolving `<unsafe fn() -> i32 {h} as FnOnce<()>>::Output == i32`\n+  --> $DIR/fn-trait.rs:29:16\n+   |\n+LL |     require_fn(h);\n+   |     ---------- ^ types differ\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:31\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                               ^^^ required by this bound in `require_fn`\n+\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0271, E0277.\n For more information about an error, try `rustc --explain E0271`."}]}