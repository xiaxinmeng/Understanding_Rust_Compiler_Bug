{"sha": "99043dde9dd2d0507ad2e3cda65b9d3e9244f13f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MDQzZGRlOWRkMmQwNTA3YWQyZTNjZGE2NWI5ZDNlOTI0NGYxM2Y=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-20T18:36:26Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-20T18:36:26Z"}, "message": "mention void pointers", "tree": {"sha": "960422bdf026f72ca6e87cecac62eeb994d4ca96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/960422bdf026f72ca6e87cecac62eeb994d4ca96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99043dde9dd2d0507ad2e3cda65b9d3e9244f13f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99043dde9dd2d0507ad2e3cda65b9d3e9244f13f", "html_url": "https://github.com/rust-lang/rust/commit/99043dde9dd2d0507ad2e3cda65b9d3e9244f13f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99043dde9dd2d0507ad2e3cda65b9d3e9244f13f/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f6e0abe27aa6632f95492ad8864d8084c1bacef", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6e0abe27aa6632f95492ad8864d8084c1bacef", "html_url": "https://github.com/rust-lang/rust/commit/5f6e0abe27aa6632f95492ad8864d8084c1bacef"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "68ce061d8c8ba625ed97551d9f395e4f0bb7e8e6", "filename": "src/doc/tarpl/exotic-sizes.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99043dde9dd2d0507ad2e3cda65b9d3e9244f13f/src%2Fdoc%2Ftarpl%2Fexotic-sizes.md", "raw_url": "https://github.com/rust-lang/rust/raw/99043dde9dd2d0507ad2e3cda65b9d3e9244f13f/src%2Fdoc%2Ftarpl%2Fexotic-sizes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fexotic-sizes.md?ref=99043dde9dd2d0507ad2e3cda65b9d3e9244f13f", "patch": "@@ -95,10 +95,9 @@ actually possible to communicate this at the type level by returning a\n knowing that it's *statically impossible* for this value to be an `Err`, as\n this would require providing a value of type Void.\n \n-In principle, Rust can do some interesting analysees and optimizations based\n+In principle, Rust can do some interesting analyses and optimizations based\n on this fact. For instance, `Result<T, Void>` could be represented as just `T`,\n-because the Err case doesn't actually exist. Also in principle the following\n-could compile:\n+because the Err case doesn't actually exist. The following *could* also compile:\n \n ```rust,ignore\n enum Void {}\n@@ -111,3 +110,9 @@ let Ok(num) = res;\n \n But neither of these tricks work today, so all Void types get you today is\n the ability to be confident that certain situations are statically impossible.\n+\n+One final subtle detail about empty types is that raw pointers to them are\n+actually valid to construct, but dereferencing them is Undefined Behaviour\n+because that doesn't actually make sense. That is, you could model C's `void *`\n+type with `*const Void`, but this doesn't necessarily gain anything over using\n+e.g. `*const ()`, which *is* safe to randomly dereference."}]}