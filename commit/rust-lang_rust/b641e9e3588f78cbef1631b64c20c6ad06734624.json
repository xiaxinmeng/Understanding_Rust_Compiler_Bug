{"sha": "b641e9e3588f78cbef1631b64c20c6ad06734624", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NDFlOWUzNTg4Zjc4Y2JlZjE2MzFiNjRjMjBjNmFkMDY3MzQ2MjQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-26T23:02:10Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-29T18:56:36Z"}, "message": "Make `Visitor::visit_body` take a simple `Body`", "tree": {"sha": "2233ef1f2535fae2400c4891ff7da7499060fa05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2233ef1f2535fae2400c4891ff7da7499060fa05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b641e9e3588f78cbef1631b64c20c6ad06734624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b641e9e3588f78cbef1631b64c20c6ad06734624", "html_url": "https://github.com/rust-lang/rust/commit/b641e9e3588f78cbef1631b64c20c6ad06734624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b641e9e3588f78cbef1631b64c20c6ad06734624/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285519d412ef9c65df3bcd2de2b1a3d6ca16a255", "url": "https://api.github.com/repos/rust-lang/rust/commits/285519d412ef9c65df3bcd2de2b1a3d6ca16a255", "html_url": "https://github.com/rust-lang/rust/commit/285519d412ef9c65df3bcd2de2b1a3d6ca16a255"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "400d15cdc144be6518cc338adee383a6b64eb8f5", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -65,12 +65,12 @@ use rustc_span::Span;\n // variant argument) that does not require visiting, as in\n // `is_cleanup` above.\n \n-macro_rules! body_cache_type {\n-    (mut $a:lifetime, $tcx:lifetime) => {\n+macro_rules! body_type {\n+    (mut $tcx:lifetime) => {\n         &mut BodyAndCache<$tcx>\n     };\n-    ($a:lifetime, $tcx:lifetime) => {\n-        ReadOnlyBodyAndCache<$a, $tcx>\n+    ($tcx:lifetime) => {\n+        &Body<$tcx>\n     };\n }\n \n@@ -82,7 +82,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_body(\n                 &mut self,\n-                body: body_cache_type!($($mutability)? '_, 'tcx)\n+                body: body_type!($($mutability)? 'tcx)\n             ) {\n                 self.super_body(body);\n             }\n@@ -254,7 +254,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_body(\n                 &mut self,\n-                $($mutability)? body: body_cache_type!($($mutability)? '_, 'tcx)\n+                $($mutability)? body: body_type!($($mutability)? 'tcx)\n             ) {\n                 let span = body.span;\n                 if let Some(yield_ty) = &$($mutability)? body.yield_ty {\n@@ -819,7 +819,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_location(\n                 &mut self,\n-                body: body_cache_type!($($mutability)? '_, 'tcx),\n+                body: body_type!($($mutability)? 'tcx),\n                 location: Location\n             ) {\n                 let basic_block = & $($mutability)? body[location.block];"}, {"sha": "a3d68c4d53db197ec8f5f457db6b81cb744bdb21", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -20,7 +20,7 @@ pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     let mir = fx.mir;\n     let mut analyzer = LocalAnalyzer::new(fx);\n \n-    analyzer.visit_body(mir);\n+    analyzer.visit_body(*mir);\n \n     for (local, decl) in mir.local_decls.iter_enumerated() {\n         let ty = fx.monomorphize(&decl.ty);"}, {"sha": "5216326a276f1b00dbb11b31947d3cf9876bb826", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -107,7 +107,7 @@ impl LocalsStateAtExit {\n             LocalsStateAtExit::AllAreInvalidated\n         } else {\n             let mut has_storage_dead = HasStorageDead(BitSet::new_empty(body.local_decls.len()));\n-            has_storage_dead.visit_body(body);\n+            has_storage_dead.visit_body(*body);\n             let mut has_storage_dead_or_moved = has_storage_dead.0;\n             for move_out in &move_data.moves {\n                 if let Some(index) = move_data.base_local(move_out.path) {"}, {"sha": "8e0b4426991df49dff7e24ea1757443afe787f51", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -1561,7 +1561,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n         let mut visitor = FakeReadCauseFinder { place, cause: None };\n-        visitor.visit_body(self.body);\n+        visitor.visit_body(*self.body);\n         match visitor.cause {\n             Some(FakeReadCause::ForMatchGuard) => Some(\"match guard\"),\n             Some(FakeReadCause::ForIndex) => Some(\"indexing expression\"),"}, {"sha": "741192323fe2a8a19eee5c809ce6deec57a3765c", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -37,7 +37,7 @@ pub(super) fn generate_invalidates<'tcx>(\n             body: &body,\n             dominators,\n         };\n-        ig.visit_body(body);\n+        ig.visit_body(*body);\n     }\n }\n "}, {"sha": "6738bb4833788cf6e71a3270525146a96781989a", "filename": "src/librustc_mir/borrow_check/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -81,7 +81,7 @@ impl LocalUseMap {\n         live_locals.iter().for_each(|&local| locals_with_use_data[local] = true);\n \n         LocalUseMapBuild { local_use_map: &mut local_use_map, elements, locals_with_use_data }\n-            .visit_body(body);\n+            .visit_body(*body);\n \n         local_use_map\n     }"}, {"sha": "ddced3f355ec81e7ed466943c9ef761919e399c7", "filename": "src/librustc_mir/borrow_check/type_check/liveness/polonius.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -101,7 +101,7 @@ pub(super) fn populate_access_facts(\n             location_table,\n             move_data,\n         };\n-        extractor.visit_body(body);\n+        extractor.visit_body(*body);\n \n         facts.var_dropped_at.extend(\n             dropped_at.iter().map(|&(local, location)| (local, location_table.mid_index(location))),"}, {"sha": "3a0b908332f23e4869d5b5d0f9131622f2befcec", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -210,7 +210,7 @@ fn type_check_internal<'a, 'tcx, R>(\n     );\n     let errors_reported = {\n         let mut verifier = TypeVerifier::new(&mut checker, *body, promoted);\n-        verifier.visit_body(body);\n+        verifier.visit_body(*body);\n         verifier.errors_reported\n     };\n \n@@ -435,7 +435,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn visit_body(&mut self, body: ReadOnlyBodyAndCache<'_, 'tcx>) {\n+    fn visit_body(&mut self, body: &Body<'tcx>) {\n         self.sanitize_type(&\"return type\", body.return_ty());\n         for local_decl in &body.local_decls {\n             self.sanitize_type(local_decl, local_decl.ty);\n@@ -563,7 +563,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         swap_constraints(self);\n \n-        self.visit_body(promoted_body);\n+        self.visit_body(*promoted_body);\n \n         if !self.errors_reported {\n             // if verifier failed, don't do further checks to avoid ICEs"}, {"sha": "d4f54d927a74d99ce0646c8786cfddb8ca89a1ec", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -32,7 +32,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 never_initialized_mut_locals: &mut never_initialized_mut_locals,\n                 mbcx: self,\n             };\n-            visitor.visit_body(visitor.mbcx.body);\n+            visitor.visit_body(*visitor.mbcx.body);\n         }\n \n         // Take the union of the existed `used_mut` set with those variables we've found were"}, {"sha": "30aef7f69190fda26795553e5949b72160254a19", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -250,7 +250,7 @@ impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n     /// Kill locals that are fully moved and have not been borrowed.\n     fn check_for_move(&self, trans: &mut impl GenKill<Local>, loc: Location) {\n         let mut visitor = MoveVisitor { trans, borrowed_locals: &self.borrowed_locals };\n-        visitor.visit_location(self.body, loc);\n+        visitor.visit_location(*self.body, loc);\n     }\n }\n "}, {"sha": "69ad8471f7b5433cde84a0aab192f1c6114731eb", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -1162,7 +1162,7 @@ fn collect_neighbours<'tcx>(\n     debug!(\"collect_neighbours: {:?}\", instance.def_id());\n     let body = tcx.instance_mir(instance.def);\n \n-    MirNeighborCollector { tcx, body: &body, output, instance }.visit_body(body);\n+    MirNeighborCollector { tcx, body: &body, output, instance }.visit_body(*body);\n }\n \n fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {"}, {"sha": "1c812bd8520c5c6e7577d1cccff5c58f091b4bb5", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -183,7 +183,7 @@ impl Validator<'a, 'mir, 'tcx> {\n             self.check_op_spanned(ops::Loop, body.span);\n         }\n \n-        self.visit_body(body);\n+        self.visit_body(*body);\n \n         // Ensure that the end result is `Sync` in a non-thread local `static`.\n         let should_check_for_sync ="}, {"sha": "6ddd72d7436a32b326f3a659566bf06baf97a36d", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -507,7 +507,7 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n     // mir_built ensures that body has a computed cache, so we don't (and can't) attempt to\n     // recompute it here.\n     let body = body.unwrap_read_only();\n-    checker.visit_body(body);\n+    checker.visit_body(*body);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);\n     UnsafetyCheckResult {"}, {"sha": "0dc8e93d6b5588cd1e92c1011ba6cab9860e38a8", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -778,7 +778,7 @@ impl CanConstProp {\n                 trace!(\"local {:?} can't be const propagated because it's not a temporary\", local);\n             }\n         }\n-        cpv.visit_body(body);\n+        cpv.visit_body(*body);\n         cpv.can_const_prop\n     }\n }"}, {"sha": "699f386c41cc57c7d5122ac030183244c4a39338", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -469,7 +469,7 @@ fn locals_live_across_suspend_points(\n     // Find the MIR locals which do not use StorageLive/StorageDead statements.\n     // The storage of these locals are always live.\n     let mut ignored = StorageIgnored(BitSet::new_filled(body.local_decls.len()));\n-    ignored.visit_body(body);\n+    ignored.visit_body(*body);\n \n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active)."}, {"sha": "e0415e4954e6150eacecb35745883927405a95c2", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -26,7 +26,7 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n         let optimizations = {\n             let read_only_cache = read_only!(body);\n             let mut optimization_finder = OptimizationFinder::new(body, tcx);\n-            optimization_finder.visit_body(read_only_cache);\n+            optimization_finder.visit_body(*read_only_cache);\n             optimization_finder.optimizations\n         };\n "}, {"sha": "5194fb599bc284f4f23c6b5cfb31e759b9d1d43f", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -309,7 +309,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n         let locals = {\n             let read_only_cache = read_only!(body);\n             let mut marker = DeclMarker { locals: BitSet::new_empty(body.local_decls.len()), body };\n-            marker.visit_body(read_only_cache);\n+            marker.visit_body(*read_only_cache);\n             // Return pointer and arguments are always live\n             marker.locals.insert(RETURN_PLACE);\n             for arg in body.args_iter() {"}, {"sha": "fc9dbd73f32e7846778e51d4a1ce489e401b6499", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -1,18 +1,17 @@\n use rustc::mir::visit::PlaceContext;\n use rustc::mir::visit::Visitor;\n-use rustc::mir::ReadOnlyBodyAndCache;\n-use rustc::mir::{Local, Location};\n+use rustc::mir::{Body, Local, Location};\n \n crate trait FindAssignments {\n     // Finds all statements that assign directly to local (i.e., X = ...)\n     // and returns their locations.\n     fn find_assignments(&self, local: Local) -> Vec<Location>;\n }\n \n-impl<'a, 'tcx> FindAssignments for ReadOnlyBodyAndCache<'a, 'tcx> {\n+impl<'tcx> FindAssignments for Body<'tcx> {\n     fn find_assignments(&self, local: Local) -> Vec<Location> {\n         let mut visitor = FindLocalAssignmentVisitor { needle: local, locations: vec![] };\n-        visitor.visit_body(*self);\n+        visitor.visit_body(self);\n         visitor.locations\n     }\n }"}, {"sha": "44aaf401fd4ea69471c4ad5b0ac7f01732aaaeb1", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641e9e3588f78cbef1631b64c20c6ad06734624/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=b641e9e3588f78cbef1631b64c20c6ad06734624", "patch": "@@ -38,7 +38,7 @@ impl DefUseAnalysis {\n             var_debug_info_index: 0,\n             in_var_debug_info: false,\n         };\n-        finder.visit_body(body);\n+        finder.visit_body(*body);\n         self.info = finder.info\n     }\n "}]}