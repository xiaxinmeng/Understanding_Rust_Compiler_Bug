{"sha": "f9b231cd0884fe90a730d637517c257a4f0c601a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YjIzMWNkMDg4NGZlOTBhNzMwZDYzNzUxN2MyNTdhNGYwYzYwMWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-23T06:33:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-23T17:10:37Z"}, "message": "Fixing more doc tests", "tree": {"sha": "e886da2ed2d5ca57025853fa1410149941ea179d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e886da2ed2d5ca57025853fa1410149941ea179d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b231cd0884fe90a730d637517c257a4f0c601a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b231cd0884fe90a730d637517c257a4f0c601a", "html_url": "https://github.com/rust-lang/rust/commit/f9b231cd0884fe90a730d637517c257a4f0c601a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b231cd0884fe90a730d637517c257a4f0c601a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "316345610a4a34d0c9eda9eece521ebf3cee0fb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/316345610a4a34d0c9eda9eece521ebf3cee0fb9", "html_url": "https://github.com/rust-lang/rust/commit/316345610a4a34d0c9eda9eece521ebf3cee0fb9"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "39fc03bca0d1ef0e54b6be04522eae86d7674d3f", "filename": "doc/rustdoc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b231cd0884fe90a730d637517c257a4f0c601a/doc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9b231cd0884fe90a730d637517c257a4f0c601a/doc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frustdoc.md?ref=f9b231cd0884fe90a730d637517c257a4f0c601a", "patch": "@@ -132,7 +132,7 @@ specifiers that can be used to dictate how a code block is tested:\n ~~~\n \n Rustdoc also supplies some extra sugar for helping with some tedious\n-documentation examples. If a line os prefixed with a `#` character, then the\n+documentation examples. If a line is prefixed with a `#` character, then the\n line will not show up in the HTML documentation, but it will be used when\n testing the code block.\n "}, {"sha": "cb9e53dc69ef43577314a2b8c02479e96e253b11", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=f9b231cd0884fe90a730d637517c257a4f0c601a", "patch": "@@ -516,7 +516,7 @@ impl MatchOptions {\n      *\n      * This function always returns this value:\n      *\n-     * ```rust,notest\n+     * ```rust,ignore\n      * MatchOptions {\n      *     case_sensitive: true,\n      *     require_literal_separator: false."}, {"sha": "bbd4cfea78d7a65d81f7a2f6d7af94b296e7ab0c", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=f9b231cd0884fe90a730d637517c257a4f0c601a", "patch": "@@ -25,7 +25,7 @@\n //!\n //! # Example\n //!\n-//! ```rust,notest\n+//! ```rust,ignore\n //! let (mut p1, c1) = Chan::new();\n //! let (mut p2, c2) = Chan::new();\n //!"}, {"sha": "3bbf8031fff93b843eda0c8e4d1d256e0203b618", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=f9b231cd0884fe90a730d637517c257a4f0c601a", "patch": "@@ -222,7 +222,7 @@ fn main() {\n There are a number of related macros in the `format!` family. The ones that are\n currently implemented are:\n \n-```rust,notest\n+```rust,ignore\n format!      // described above\n write!       // first argument is a &mut io::Writer, the destination\n writeln!     // same as write but appends a newline"}, {"sha": "bd0b9e08b7c6d5dbfb74b47e3bdedca1a605c8a7", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f9b231cd0884fe90a730d637517c257a4f0c601a", "patch": "@@ -29,6 +29,7 @@ Some examples of obvious things you might want to do\n     use std::io::buffered::BufferedReader;\n     use std::io::stdin;\n \n+    # let _g = ::std::io::ignore_io_error();\n     let mut stdin = BufferedReader::new(stdin());\n     for line in stdin.lines() {\n         print(line);\n@@ -40,6 +41,7 @@ Some examples of obvious things you might want to do\n     ```rust\n     use std::io::File;\n \n+    # let _g = ::std::io::ignore_io_error();\n     let contents = File::open(&Path::new(\"message.txt\")).read_to_end();\n     ```\n \n@@ -48,6 +50,7 @@ Some examples of obvious things you might want to do\n     ```rust\n     use std::io::File;\n \n+    # let _g = ::std::io::ignore_io_error();\n     let mut file = File::create(&Path::new(\"message.txt\"));\n     file.write(bytes!(\"hello, file!\\n\"));\n     ```\n@@ -58,6 +61,7 @@ Some examples of obvious things you might want to do\n     use std::io::buffered::BufferedReader;\n     use std::io::File;\n \n+    # let _g = ::std::io::ignore_io_error();\n     let path = Path::new(\"message.txt\");\n     let mut file = BufferedReader::new(File::open(&path));\n     for line in file.lines() {\n@@ -71,6 +75,7 @@ Some examples of obvious things you might want to do\n     use std::io::buffered::BufferedReader;\n     use std::io::File;\n \n+    # let _g = ::std::io::ignore_io_error();\n     let path = Path::new(\"message.txt\");\n     let mut file = BufferedReader::new(File::open(&path));\n     let lines: ~[~str] = file.lines().collect();\n@@ -80,10 +85,11 @@ Some examples of obvious things you might want to do\n   XXX This needs more improvement: TcpStream constructor taking &str,\n   `write_str` and `write_line` methods.\n \n-    ```rust,ignore\n+    ```rust,should_fail\n     use std::io::net::ip::SocketAddr;\n     use std::io::net::tcp::TcpStream;\n \n+    # let _g = ::std::io::ignore_io_error();\n     let addr = from_str::<SocketAddr>(\"127.0.0.1:8080\").unwrap();\n     let mut socket = TcpStream::connect(addr).unwrap();\n     socket.write(bytes!(\"GET / HTTP/1.0\\n\\n\"));"}, {"sha": "dbe8b3247c0b4c09fed120ad16902cf81b020acd", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b231cd0884fe90a730d637517c257a4f0c601a/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=f9b231cd0884fe90a730d637517c257a4f0c601a", "patch": "@@ -78,7 +78,7 @@ error,hello=warn     // turn on global error logging and also warn for hello\n \n Each of these macros will expand to code similar to:\n \n-```rust,notest\n+```rust,ignore\n if log_level <= my_module_log_level() {\n     ::std::logging::log(log_level, format!(...));\n }"}]}