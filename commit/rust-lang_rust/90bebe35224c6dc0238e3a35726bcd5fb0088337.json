{"sha": "90bebe35224c6dc0238e3a35726bcd5fb0088337", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYmViZTM1MjI0YzZkYzAyMzhlM2EzNTcyNmJjZDVmYjAwODgzMzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-17T03:41:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-17T03:41:07Z"}, "message": "Add various workaround attributes to priority_queue", "tree": {"sha": "47904adcc3deb9f6e01528518107edeec7583a4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47904adcc3deb9f6e01528518107edeec7583a4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90bebe35224c6dc0238e3a35726bcd5fb0088337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90bebe35224c6dc0238e3a35726bcd5fb0088337", "html_url": "https://github.com/rust-lang/rust/commit/90bebe35224c6dc0238e3a35726bcd5fb0088337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90bebe35224c6dc0238e3a35726bcd5fb0088337/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac695aa21a93dc7b82d817a69c8c1918bb4d9b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac695aa21a93dc7b82d817a69c8c1918bb4d9b31", "html_url": "https://github.com/rust-lang/rust/commit/ac695aa21a93dc7b82d817a69c8c1918bb4d9b31"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "605dd81eba67a4245ee9b633dbb3ed76354b70c7", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90bebe35224c6dc0238e3a35726bcd5fb0088337/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bebe35224c6dc0238e3a35726bcd5fb0088337/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=90bebe35224c6dc0238e3a35726bcd5fb0088337", "patch": "@@ -79,9 +79,19 @@ impl <T: Ord> PriorityQueue<T> {\n     }\n \n     /// Consume the PriorityQueue and return the underlying vector\n+    #[cfg(stage0)]\n+    pure fn to_vec(self) -> ~[T] { fail }\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    #[cfg(stage3)]\n     pure fn to_vec(self) -> ~[T] { let PriorityQueue{data: v} = self; v }\n \n     /// Consume the PriorityQueue and return a vector in sorted (ascending) order\n+    #[cfg(stage0)]\n+    pure fn to_sorted_vec(self) -> ~[T] { fail }\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    #[cfg(stage3)]\n     pure fn to_sorted_vec(self) -> ~[T] {\n         let mut q = self;\n         let mut end = q.len();\n@@ -244,6 +254,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n+    #[ignore(cfg(windows))]\n     fn test_empty_pop() { let mut heap = from_vec::<int>(~[]); heap.pop(); }\n \n     #[test]\n@@ -254,6 +265,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n+    #[ignore(cfg(windows))]\n     fn test_empty_top() { let empty = from_vec::<int>(~[]); empty.top(); }\n \n     #[test]\n@@ -264,6 +276,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n+    #[ignore(cfg(windows))]\n     fn test_empty_replace() {\n         let mut heap = from_vec::<int>(~[]);\n         heap.replace(5);"}]}