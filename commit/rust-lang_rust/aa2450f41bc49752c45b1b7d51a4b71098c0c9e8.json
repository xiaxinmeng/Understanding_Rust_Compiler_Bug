{"sha": "aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "node_id": "C_kwDOAAsO6NoAKGFhMjQ1MGY0MWJjNDk3NTJjNDViMWI3ZDUxYTRiNzEwOThjMGM5ZTg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-26T22:07:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-30T21:56:47Z"}, "message": "Merge Implicit and ImplicitMissing.", "tree": {"sha": "11329f51b8b823d0e02136235d27941ae3a5a683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11329f51b8b823d0e02136235d27941ae3a5a683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "html_url": "https://github.com/rust-lang/rust/commit/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72dc29c260cb6730449ed789c8a0ab4292acb7b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/72dc29c260cb6730449ed789c8a0ab4292acb7b0", "html_url": "https://github.com/rust-lang/rust/commit/72dc29c260cb6730449ed789c8a0ab4292acb7b0"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "2a246a99a7032dd352b895fdbf626940dc17b6ae", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "patch": "@@ -1786,7 +1786,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericArg::Lifetime(hir::Lifetime {\n                 hir_id: self.next_id(),\n                 span: self.lower_span(span),\n-                name: hir::LifetimeName::Implicit,\n+                name: hir::LifetimeName::Implicit(false),\n             })));\n         let generic_args = self.arena.alloc_from_iter(generic_args);\n \n@@ -1927,8 +1927,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     });\n                 let param_name = match lt.name {\n                     hir::LifetimeName::Param(param_name) => param_name,\n-                    hir::LifetimeName::Implicit\n-                    | hir::LifetimeName::ImplicitMissing\n+                    hir::LifetimeName::Implicit(_)\n                     | hir::LifetimeName::Underscore\n                     | hir::LifetimeName::Static => hir::ParamName::Plain(lt.name.ident()),\n                     hir::LifetimeName::ImplicitObjectLifetimeDefault => {\n@@ -2291,7 +2290,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             AnonymousLifetimeMode::ReportError => self.new_error_lifetime(None, span),\n \n-            AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span),\n+            AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span, false),\n         }\n     }\n \n@@ -2344,12 +2343,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // lifetime. Instead, we simply create an implicit lifetime, which will be checked\n             // later, at which point a suitable error will be emitted.\n             AnonymousLifetimeMode::PassThrough | AnonymousLifetimeMode::ReportError => {\n-                if param_mode == ParamMode::Explicit {\n-                    let id = self.resolver.next_node_id();\n-                    self.new_named_lifetime(id, span, hir::LifetimeName::ImplicitMissing)\n-                } else {\n-                    self.new_implicit_lifetime(span)\n-                }\n+                self.new_implicit_lifetime(span, param_mode == ParamMode::Explicit)\n             }\n         }\n     }\n@@ -2392,11 +2386,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         r\n     }\n \n-    fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {\n+    fn new_implicit_lifetime(&mut self, span: Span, missing: bool) -> hir::Lifetime {\n         hir::Lifetime {\n             hir_id: self.next_id(),\n             span: self.lower_span(span),\n-            name: hir::LifetimeName::Implicit,\n+            name: hir::LifetimeName::Implicit(missing),\n         }\n     }\n \n@@ -2543,9 +2537,7 @@ fn lifetimes_from_impl_trait_bounds(\n \n         fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n             let name = match lifetime.name {\n-                hir::LifetimeName::Implicit\n-                | hir::LifetimeName::ImplicitMissing\n-                | hir::LifetimeName::Underscore => {\n+                hir::LifetimeName::Implicit(_) | hir::LifetimeName::Underscore => {\n                     if self.collect_elided_lifetimes {\n                         // Use `'_` for both implicit and underscore lifetimes in\n                         // `type Foo<'_> = impl SomeTrait<'_>;`."}, {"sha": "64a7a25dc86ac9a90c467bb30129eba6b9d3ba02", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "patch": "@@ -584,9 +584,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 Some(RegionNameHighlight::MatchedAdtAndSegment(lifetime_span))\n             }\n \n-            hir::LifetimeName::ImplicitObjectLifetimeDefault\n-            | hir::LifetimeName::Implicit\n-            | hir::LifetimeName::ImplicitMissing => {\n+            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Implicit(_) => {\n                 // In this case, the user left off the lifetime; so\n                 // they wrote something like:\n                 //"}, {"sha": "2466e69f83646b0ab092d3fc3b7066030989315e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "patch": "@@ -92,10 +92,9 @@ pub enum LifetimeName {\n     Param(ParamName),\n \n     /// User wrote nothing (e.g., the lifetime in `&u32`).\n-    Implicit,\n-\n-    /// User wrote nothing, but should have provided something.\n-    ImplicitMissing,\n+    ///\n+    /// The bool indicates whether the user should have written something.\n+    Implicit(bool),\n \n     /// Implicit lifetime in a context like `dyn Foo`. This is\n     /// distinguished from implicit lifetimes elsewhere because the\n@@ -125,8 +124,7 @@ impl LifetimeName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n-            | LifetimeName::Implicit\n-            | LifetimeName::ImplicitMissing\n+            | LifetimeName::Implicit(_)\n             | LifetimeName::Error => Ident::empty(),\n             LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n@@ -137,8 +135,7 @@ impl LifetimeName {\n     pub fn is_elided(&self) -> bool {\n         match self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n-            | LifetimeName::Implicit\n-            | LifetimeName::ImplicitMissing\n+            | LifetimeName::Implicit(_)\n             | LifetimeName::Underscore => true,\n \n             // It might seem surprising that `Fresh(_)` counts as\n@@ -3303,7 +3300,7 @@ mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::Expr<'static>, 64);\n     rustc_data_structures::static_assert_size!(super::Pat<'static>, 88);\n     rustc_data_structures::static_assert_size!(super::QPath<'static>, 24);\n-    rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);\n+    rustc_data_structures::static_assert_size!(super::Ty<'static>, 80);\n \n     rustc_data_structures::static_assert_size!(super::Item<'static>, 184);\n     rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 128);"}, {"sha": "21f89104c4b5878f09c02b47a19507798e3a531c", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "patch": "@@ -545,8 +545,7 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n         | LifetimeName::Param(ParamName::Error)\n         | LifetimeName::Static\n         | LifetimeName::Error\n-        | LifetimeName::Implicit\n-        | LifetimeName::ImplicitMissing\n+        | LifetimeName::Implicit(_)\n         | LifetimeName::ImplicitObjectLifetimeDefault\n         | LifetimeName::Underscore => {}\n     }"}, {"sha": "69697f275e180658a2ce5c0185a44267d22feb08", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "patch": "@@ -1952,7 +1952,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n \n     crate fn report_elided_lifetime_in_ty(&self, lifetime_refs: &[&hir::Lifetime]) {\n         let Some(missing_lifetime) = lifetime_refs.iter().find(|lt| {\n-            lt.name == hir::LifetimeName::ImplicitMissing\n+            lt.name == hir::LifetimeName::Implicit(true)\n         }) else { return };\n \n         let mut spans: Vec<_> = lifetime_refs.iter().map(|lt| lt.span).collect();\n@@ -2408,8 +2408,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         );\n         let is_allowed_lifetime = matches!(\n             lifetime_ref.name,\n-            hir::LifetimeName::Implicit\n-                | hir::LifetimeName::ImplicitMissing\n+            hir::LifetimeName::Implicit(_)\n                 | hir::LifetimeName::Static\n                 | hir::LifetimeName::Underscore\n         );"}, {"sha": "1ff33689b53c7942708dea0ef483f61a385ca503", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2450f41bc49752c45b1b7d51a4b71098c0c9e8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=aa2450f41bc49752c45b1b7d51a4b71098c0c9e8", "patch": "@@ -923,7 +923,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     }\n                 });\n                 match lifetime.name {\n-                    LifetimeName::Implicit | hir::LifetimeName::ImplicitMissing => {\n+                    LifetimeName::Implicit(_) => {\n                         // For types like `dyn Foo`, we should\n                         // generate a special form of elided.\n                         span_bug!(ty.span, \"object-lifetime-default expected, not implicit\",);\n@@ -3282,9 +3282,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                 ))\n                                 .emit();\n                         }\n-                        hir::LifetimeName::Param(_)\n-                        | hir::LifetimeName::Implicit\n-                        | hir::LifetimeName::ImplicitMissing => {\n+                        hir::LifetimeName::Param(_) | hir::LifetimeName::Implicit(_) => {\n                             self.resolve_lifetime_ref(lt);\n                         }\n                         hir::LifetimeName::ImplicitObjectLifetimeDefault => {"}]}