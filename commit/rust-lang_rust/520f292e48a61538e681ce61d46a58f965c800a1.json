{"sha": "520f292e48a61538e681ce61d46a58f965c800a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMGYyOTJlNDhhNjE1MzhlNjgxY2U2MWQ0NmE1OGY5NjVjODAwYTE=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-03T19:34:00Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-06T02:05:07Z"}, "message": "std: Use method name Option::consume\n\nWith Option as the simplest container, `consume` is the way to turn it\ninto a by-value iterator.", "tree": {"sha": "e804eff9a1b0ff82d22cee2037ecf61fb95bc021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e804eff9a1b0ff82d22cee2037ecf61fb95bc021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/520f292e48a61538e681ce61d46a58f965c800a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/520f292e48a61538e681ce61d46a58f965c800a1", "html_url": "https://github.com/rust-lang/rust/commit/520f292e48a61538e681ce61d46a58f965c800a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/520f292e48a61538e681ce61d46a58f965c800a1/comments", "author": null, "committer": null, "parents": [{"sha": "78effe762666f64de28c890ea1a15672c712f390", "url": "https://api.github.com/repos/rust-lang/rust/commits/78effe762666f64de28c890ea1a15672c712f390", "html_url": "https://github.com/rust-lang/rust/commit/78effe762666f64de28c890ea1a15672c712f390"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "ea1bddcdb4b9d60aba0138494219519e120d5317", "filename": "src/libstd/option.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/520f292e48a61538e681ce61d46a58f965c800a1/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520f292e48a61538e681ce61d46a58f965c800a1/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=520f292e48a61538e681ce61d46a58f965c800a1", "patch": "@@ -134,7 +134,7 @@ impl<T> Option<T> {\n \n     /// Return a consuming iterator over the possibly contained value\n     #[inline]\n-    pub fn consume_iter(self) -> OptionIterator<T> {\n+    pub fn consume(self) -> OptionIterator<T> {\n         OptionIterator{opt: self}\n     }\n \n@@ -410,16 +410,18 @@ impl<T> Zero for Option<T> {\n     fn is_zero(&self) -> bool { self.is_none() }\n }\n \n-/// Immutable iterator over an Option\n+/// An iterator that yields either one or zero elements\n pub struct OptionIterator<A> {\n     priv opt: Option<A>\n }\n \n impl<A> Iterator<A> for OptionIterator<A> {\n+    #[inline]\n     fn next(&mut self) -> Option<A> {\n-        util::replace(&mut self.opt, None)\n+        self.opt.take()\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         match self.opt {\n             Some(_) => (1, Some(1)),"}, {"sha": "91f42edf0aecd46e33efafc41fa7fccf43032be4", "filename": "src/libstd/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/520f292e48a61538e681ce61d46a58f965c800a1/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520f292e48a61538e681ce61d46a58f965c800a1/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=520f292e48a61538e681ce61d46a58f965c800a1", "patch": "@@ -94,7 +94,7 @@ impl<T, E: ToStr> Result<T, E> {\n         match *self {\n             Ok(ref t) => Some(t),\n             Err(*) => None,\n-        }.consume_iter()\n+        }.consume()\n     }\n \n     /// Call a method based on a previous result\n@@ -108,7 +108,7 @@ impl<T, E: ToStr> Result<T, E> {\n         match *self {\n             Ok(*) => None,\n             Err(ref t) => Some(t),\n-        }.consume_iter()\n+        }.consume()\n     }\n \n     /// Unwraps a result, yielding the content of an `Ok`."}]}