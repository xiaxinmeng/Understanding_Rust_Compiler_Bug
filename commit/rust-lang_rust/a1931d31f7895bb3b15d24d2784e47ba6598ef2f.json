{"sha": "a1931d31f7895bb3b15d24d2784e47ba6598ef2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOTMxZDMxZjc4OTViYjNiMTVkMjRkMjc4NGU0N2JhNjU5OGVmMmY=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-12T17:24:18Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-17T12:09:39Z"}, "message": "Categorize chalk clauses", "tree": {"sha": "a90a0cd8aec4b5bd7c346091925f15d825dc0ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a90a0cd8aec4b5bd7c346091925f15d825dc0ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1931d31f7895bb3b15d24d2784e47ba6598ef2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1931d31f7895bb3b15d24d2784e47ba6598ef2f", "html_url": "https://github.com/rust-lang/rust/commit/a1931d31f7895bb3b15d24d2784e47ba6598ef2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1926080db954fea5ac6abb75267bde762d478c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1926080db954fea5ac6abb75267bde762d478c5", "html_url": "https://github.com/rust-lang/rust/commit/e1926080db954fea5ac6abb75267bde762d478c5"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "36c0f30f0bf13d13a61a207fc559dc1d73e1d3bf", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=a1931d31f7895bb3b15d24d2784e47ba6598ef2f", "patch": "@@ -1395,10 +1395,16 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Goal<'tcx> {\n \n impl_stable_hash_for!(\n     impl<'tcx> for struct traits::ProgramClause<'tcx> {\n-        goal, hypotheses\n+        goal, hypotheses, category\n     }\n );\n \n+impl_stable_hash_for!(enum traits::ProgramClauseCategory {\n+    ImpliedBound,\n+    WellFormed,\n+    Other,\n+});\n+\n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Clause<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,"}, {"sha": "d129cd486cf0517576ded39ffea8bdd10f7725fe", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=a1931d31f7895bb3b15d24d2784e47ba6598ef2f", "patch": "@@ -341,7 +341,8 @@ impl<'tcx> DomainGoal<'tcx> {\n     pub fn into_program_clause(self) -> ProgramClause<'tcx> {\n         ProgramClause {\n             goal: self,\n-            hypotheses: &ty::List::empty(),\n+            hypotheses: ty::List::empty(),\n+            category: ProgramClauseCategory::Other,\n         }\n     }\n }\n@@ -369,6 +370,15 @@ pub enum Clause<'tcx> {\n     ForAll(ty::Binder<ProgramClause<'tcx>>),\n }\n \n+impl Clause<'tcx> {\n+    pub fn category(self) -> ProgramClauseCategory {\n+        match self {\n+            Clause::Implies(clause) => clause.category,\n+            Clause::ForAll(clause) => clause.skip_binder().category,\n+        }\n+    }\n+}\n+\n /// Multiple clauses.\n pub type Clauses<'tcx> = &'tcx List<Clause<'tcx>>;\n \n@@ -385,6 +395,16 @@ pub struct ProgramClause<'tcx> {\n \n     /// ...if we can prove these hypotheses (there may be no hypotheses at all):\n     pub hypotheses: Goals<'tcx>,\n+\n+    /// Useful for filtering clauses.\n+    pub category: ProgramClauseCategory,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum ProgramClauseCategory {\n+    ImpliedBound,\n+    WellFormed,\n+    Other,\n }\n \n /// A set of clauses that we assume to be true."}, {"sha": "c50c9703eb5574e0280e5560e8aa1d6e92fb6a29", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=a1931d31f7895bb3b15d24d2784e47ba6598ef2f", "patch": "@@ -496,7 +496,7 @@ impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n \n impl<'tcx> fmt::Display for traits::ProgramClause<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let traits::ProgramClause { goal, hypotheses } = self;\n+        let traits::ProgramClause { goal, hypotheses, .. } = self;\n         write!(fmt, \"{}\", goal)?;\n         if !hypotheses.is_empty() {\n             write!(fmt, \" :- \")?;\n@@ -647,10 +647,15 @@ impl<'tcx> TypeFoldable<'tcx> for traits::Goal<'tcx> {\n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for traits::ProgramClause<'tcx> {\n         goal,\n-        hypotheses\n+        hypotheses,\n+        category,\n     }\n }\n \n+CloneTypeFoldableAndLiftImpls! {\n+    traits::ProgramClauseCategory,\n+}\n+\n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for traits::Clause<'tcx> {\n         (traits::Clause::Implies)(clause),"}, {"sha": "a1cdb622f3702f91c24b30d41b05d4ee8eb78a80", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=a1931d31f7895bb3b15d24d2784e47ba6598ef2f", "patch": "@@ -14,6 +14,7 @@ use rustc::traits::{\n     DomainGoal,\n     FromEnv,\n     ProgramClause,\n+    ProgramClauseCategory,\n     Environment,\n };\n use rustc::ty::{self, TyCtxt, Ty};\n@@ -39,6 +40,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n                 self.round.extend(\n                     self.tcx.program_clauses_for(data.item_def_id)\n                         .iter()\n+                        .filter(|c| c.category() == ProgramClauseCategory::ImpliedBound)\n                         .cloned()\n                 );\n             }\n@@ -56,6 +58,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n                 self.round.extend(\n                     self.tcx.program_clauses_for(def.did)\n                         .iter()\n+                        .filter(|c| c.category() == ProgramClauseCategory::ImpliedBound)\n                         .cloned()\n                 );\n             }\n@@ -68,6 +71,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n                 self.round.extend(\n                     self.tcx.program_clauses_for(def_id)\n                         .iter()\n+                        .filter(|c| c.category() == ProgramClauseCategory::ImpliedBound)\n                         .cloned()\n                 );\n             }\n@@ -98,6 +102,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n                 self.round.extend(\n                     self.tcx.program_clauses_for(predicate.def_id())\n                         .iter()\n+                        .filter(|c| c.category() == ProgramClauseCategory::ImpliedBound)\n                         .cloned()\n                 );\n             }\n@@ -176,7 +181,7 @@ crate fn environment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> En\n     // Compute the bounds on `Self` and the type parameters.\n     let ty::InstantiatedPredicates { predicates } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n-    \n+\n     let clauses = predicates.into_iter()\n         .map(|predicate| predicate.lower())\n         .map(|domain_goal| domain_goal.map_bound(|bound| bound.into_from_env_goal()))\n@@ -185,7 +190,7 @@ crate fn environment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> En\n         // `ForAll` because each `domain_goal` is a `PolyDomainGoal` and\n         // could bound lifetimes.\n         .map(Clause::ForAll);\n-    \n+\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let node = tcx.hir.get(node_id);\n \n@@ -243,7 +248,7 @@ crate fn environment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> En\n             .map(|domain_goal| domain_goal.into_program_clause())\n             .map(Clause::Implies)\n     );\n-    \n+\n     Environment {\n         clauses: tcx.mk_clauses(clauses),\n     }"}, {"sha": "fb598a335482bcc56b8ec8bbc9aa0ea896128692", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1931d31f7895bb3b15d24d2784e47ba6598ef2f/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=a1931d31f7895bb3b15d24d2784e47ba6598ef2f", "patch": "@@ -22,6 +22,7 @@ use rustc::traits::{\n     GoalKind,\n     PolyDomainGoal,\n     ProgramClause,\n+    ProgramClauseCategory,\n     WellFormed,\n     WhereClause,\n };\n@@ -204,6 +205,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     let implemented_from_env = ProgramClause {\n         goal: impl_trait,\n         hypotheses,\n+        category: ProgramClauseCategory::ImpliedBound,\n     };\n \n     let clauses = iter::once(Clause::ForAll(ty::Binder::dummy(implemented_from_env)));\n@@ -231,6 +233,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n         .map(|wc| wc.map_bound(|goal| ProgramClause {\n             goal: goal.into_from_env_goal(),\n             hypotheses,\n+            category: ProgramClauseCategory::ImpliedBound,\n         }))\n         .map(Clause::ForAll);\n \n@@ -257,6 +260,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n         hypotheses: tcx.mk_goals(\n             wf_conditions.map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n+        category: ProgramClauseCategory::WellFormed,\n     };\n     let wf_clause = iter::once(Clause::ForAll(ty::Binder::dummy(wf_clause)));\n \n@@ -299,6 +303,7 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n             where_clauses\n                 .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n+        category: ProgramClauseCategory::Other,\n     };\n     tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n@@ -335,6 +340,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n                 .cloned()\n                 .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n+        category: ProgramClauseCategory::WellFormed,\n     };\n \n     let well_formed_clause = iter::once(Clause::ForAll(ty::Binder::dummy(well_formed)));\n@@ -360,6 +366,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n         .map(|wc| wc.map_bound(|goal| ProgramClause {\n             goal: goal.into_from_env_goal(),\n             hypotheses,\n+            category: ProgramClauseCategory::ImpliedBound,\n         }))\n \n         .map(Clause::ForAll);\n@@ -407,7 +414,8 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n \n     let projection_eq_clause = ProgramClause {\n         goal: DomainGoal::Holds(projection_eq),\n-        hypotheses: &ty::List::empty(),\n+        hypotheses: ty::List::empty(),\n+        category: ProgramClauseCategory::Other,\n     };\n \n     // Rule WellFormed-AssocTy\n@@ -425,6 +433,7 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n     let wf_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Ty(placeholder_ty)),\n         hypotheses: tcx.mk_goals(iter::once(hypothesis)),\n+        category: ProgramClauseCategory::Other,\n     };\n \n     // Rule Implied-Trait-From-AssocTy\n@@ -441,6 +450,7 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n     let from_env_clause = ProgramClause {\n         goal: DomainGoal::FromEnv(FromEnv::Trait(trait_predicate)),\n         hypotheses: tcx.mk_goals(iter::once(hypothesis)),\n+        category: ProgramClauseCategory::ImpliedBound,\n     };\n \n     let clauses = iter::once(projection_eq_clause)\n@@ -506,6 +516,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n                 .into_iter()\n                 .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n+        category: ProgramClauseCategory::Other,\n     };\n     tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }"}]}