{"sha": "8e904120487f67172eb2d509531ed8f9e230af3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTA0MTIwNDg3ZjY3MTcyZWIyZDUwOTUzMWVkOGY5ZTIzMGFmM2E=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-08T10:30:43Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-09T08:34:40Z"}, "message": "rustdoc: adding some common feature gates when testing a markdown file.\n\nThe manual, tutorial and guides need the feature gates quite often,\nunfortunately, so this is the low-cost path to migrating to use\nrustdoc. This is only activated for pure-Markdown files.\n\nPreferably this would be avoided: #12773", "tree": {"sha": "68c3ec630d9fb282ba20922c8742ac89042fb21a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68c3ec630d9fb282ba20922c8742ac89042fb21a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e904120487f67172eb2d509531ed8f9e230af3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e904120487f67172eb2d509531ed8f9e230af3a", "html_url": "https://github.com/rust-lang/rust/commit/8e904120487f67172eb2d509531ed8f9e230af3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e904120487f67172eb2d509531ed8f9e230af3a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a70ec1ba6e64949cab5edcad33b0d7538065884", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a70ec1ba6e64949cab5edcad33b0d7538065884", "html_url": "https://github.com/rust-lang/rust/commit/7a70ec1ba6e64949cab5edcad33b0d7538065884"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "5d8e0008b870d393069a7f33c64a5fb8dfa206a9", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e904120487f67172eb2d509531ed8f9e230af3a/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e904120487f67172eb2d509531ed8f9e230af3a/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=8e904120487f67172eb2d509531ed8f9e230af3a", "patch": "@@ -163,7 +163,7 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n pub fn test(input: &str, libs: @RefCell<HashSet<Path>>, mut test_args: ~[~str]) -> int {\n     let input_str = load_or_return!(input, 1, 2);\n \n-    let mut collector = Collector::new(input.to_owned(), libs, true);\n+    let mut collector = Collector::new(input.to_owned(), libs, true, true);\n     find_testable_code(input_str, &mut collector);\n     test_args.unshift(~\"rustdoctest\");\n     testing::test_main(test_args, collector.tests);"}, {"sha": "45607a0992e2342d42543785527083d3d16a14ba", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8e904120487f67172eb2d509531ed8f9e230af3a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e904120487f67172eb2d509531ed8f9e230af3a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8e904120487f67172eb2d509531ed8f9e230af3a", "patch": "@@ -77,7 +77,7 @@ pub fn run(input: &str, libs: @RefCell<HashSet<Path>>, mut test_args: ~[~str]) -\n     let (krate, _) = passes::unindent_comments(krate);\n     let (krate, _) = passes::collapse_docs(krate);\n \n-    let mut collector = Collector::new(krate.name.to_owned(), libs, false);\n+    let mut collector = Collector::new(krate.name.to_owned(), libs, false, false);\n     collector.fold_crate(krate);\n \n     test_args.unshift(~\"rustdoctest\");\n@@ -88,8 +88,8 @@ pub fn run(input: &str, libs: @RefCell<HashSet<Path>>, mut test_args: ~[~str]) -\n }\n \n fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n-           no_run: bool) {\n-    let test = maketest(test, cratename);\n+           no_run: bool, loose_feature_gating: bool) {\n+    let test = maketest(test, cratename, loose_feature_gating);\n     let parsesess = parse::new_parse_sess();\n     let input = driver::StrInput(test);\n \n@@ -162,11 +162,18 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n     }\n }\n \n-fn maketest(s: &str, cratename: &str) -> ~str {\n+fn maketest(s: &str, cratename: &str, loose_feature_gating: bool) -> ~str {\n     let mut prog = ~r\"\n #[deny(warnings)];\n #[allow(unused_variable, dead_assignment, unused_mut, attribute_usage, dead_code)];\n \";\n+\n+    if loose_feature_gating {\n+        // FIXME #12773: avoid inserting these when the tutorial & manual\n+        // etc. have been updated to not use them so prolifically.\n+        prog.push_str(\"#[ feature(macro_rules, globs, struct_variant, managed_boxes) ];\\n\");\n+    }\n+\n     if !s.contains(\"extern crate\") {\n         if s.contains(\"extra\") {\n             prog.push_str(\"extern crate extra;\\n\");\n@@ -194,18 +201,23 @@ pub struct Collector {\n     priv use_headers: bool,\n     priv current_header: Option<~str>,\n     priv cratename: ~str,\n+\n+    priv loose_feature_gating: bool\n }\n \n impl Collector {\n-    pub fn new(cratename: ~str, libs: @RefCell<HashSet<Path>>, use_headers: bool) -> Collector {\n+    pub fn new(cratename: ~str, libs: @RefCell<HashSet<Path>>,\n+               use_headers: bool, loose_feature_gating: bool) -> Collector {\n         Collector {\n             tests: ~[],\n             names: ~[],\n             libs: libs,\n             cnt: 0,\n             use_headers: use_headers,\n             current_header: None,\n-            cratename: cratename\n+            cratename: cratename,\n+\n+            loose_feature_gating: loose_feature_gating\n         }\n     }\n \n@@ -220,6 +232,7 @@ impl Collector {\n         let libs = self.libs.borrow();\n         let libs = (*libs.get()).clone();\n         let cratename = self.cratename.to_owned();\n+        let loose_feature_gating = self.loose_feature_gating;\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -228,7 +241,7 @@ impl Collector {\n                 should_fail: false, // compiler failures are test failures\n             },\n             testfn: testing::DynTestFn(proc() {\n-                runtest(test, cratename, libs, should_fail, no_run);\n+                runtest(test, cratename, libs, should_fail, no_run, loose_feature_gating);\n             }),\n         });\n     }"}]}