{"sha": "38f5151d3ff19d772deac0c6724ff8bde1d5c79f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZjUxNTFkM2ZmMTlkNzcyZGVhYzBjNjcyNGZmOGJkZTFkNWM3OWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-07T00:45:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-07T00:45:39Z"}, "message": "Rollup merge of #74102 - oli-obk:const_prop_icde, r=wesleywiser\n\nFix const prop ICE\n\nwe used to erase the local just before we tried to read it for diagnostics\n\nfixes #73993\n\nr? @wesleywiser", "tree": {"sha": "07e273310cb56dcdc4d862b2bffa352ff0692f7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e273310cb56dcdc4d862b2bffa352ff0692f7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38f5151d3ff19d772deac0c6724ff8bde1d5c79f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfA8WzCRBK7hj4Ov3rIwAAdHIIAKW0ghSJFic+5tgTvoOQORdk\nIUm8pT+5ZxwFgpsxO/DVlG5q5ZSwz9+FiG6no91nSk/hiL2uH1K+G+Ya8U4XNd2U\nNSDkMfk4aB8hT50NwsgAvFlNE4c6z+ioSegsG2fusSWJp5filak2J0eOi8XUsx30\nBLv4/usgXrRFO9R+lr3HQHQvhJE9EATizw6a2RlWPWD9cEoFqE1+Dtde7oxq8vsk\nfKKPL3q5dartmTnb9XeOOzFc6w7W5kTE/Lwog5GyaQVF5Q9Y1HIJIpmJ2Nb6w7Px\nf9dbOclY4ZCj69DiDeFdfJtc0zSDzPGhErOpZran0FTsdvFG1x+GBVJI7qPF/8U=\n=G0Os\n-----END PGP SIGNATURE-----\n", "payload": "tree 07e273310cb56dcdc4d862b2bffa352ff0692f7b\nparent 50e22bddcfd22d216763662e46fb5a6e5d10ae73\nparent ee8dd4e3cce3bf158a31e50205ee3ebd76c40370\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594082739 -0700\ncommitter GitHub <noreply@github.com> 1594082739 -0700\n\nRollup merge of #74102 - oli-obk:const_prop_icde, r=wesleywiser\n\nFix const prop ICE\n\nwe used to erase the local just before we tried to read it for diagnostics\n\nfixes #73993\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38f5151d3ff19d772deac0c6724ff8bde1d5c79f", "html_url": "https://github.com/rust-lang/rust/commit/38f5151d3ff19d772deac0c6724ff8bde1d5c79f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38f5151d3ff19d772deac0c6724ff8bde1d5c79f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e22bddcfd22d216763662e46fb5a6e5d10ae73", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e22bddcfd22d216763662e46fb5a6e5d10ae73", "html_url": "https://github.com/rust-lang/rust/commit/50e22bddcfd22d216763662e46fb5a6e5d10ae73"}, {"sha": "ee8dd4e3cce3bf158a31e50205ee3ebd76c40370", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370", "html_url": "https://github.com/rust-lang/rust/commit/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "fbe3377d87500f754797dfb1845d83c42594a379", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/38f5151d3ff19d772deac0c6724ff8bde1d5c79f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f5151d3ff19d772deac0c6724ff8bde1d5c79f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=38f5151d3ff19d772deac0c6724ff8bde1d5c79f", "patch": "@@ -1004,14 +1004,6 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     let expected = ScalarMaybeUninit::from(Scalar::from_bool(*expected));\n                     let value_const = self.ecx.read_scalar(value).unwrap();\n                     if expected != value_const {\n-                        // Poison all places this operand references so that further code\n-                        // doesn't use the invalid value\n-                        match cond {\n-                            Operand::Move(ref place) | Operand::Copy(ref place) => {\n-                                Self::remove_const(&mut self.ecx, place.local);\n-                            }\n-                            Operand::Constant(_) => {}\n-                        }\n                         let mut eval_to_int = |op| {\n                             let op = self\n                                 .eval_operand(op, source_info)\n@@ -1020,27 +1012,37 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                         };\n                         let msg = match msg {\n                             AssertKind::DivisionByZero(op) => {\n-                                AssertKind::DivisionByZero(eval_to_int(op))\n+                                Some(AssertKind::DivisionByZero(eval_to_int(op)))\n                             }\n                             AssertKind::RemainderByZero(op) => {\n-                                AssertKind::RemainderByZero(eval_to_int(op))\n+                                Some(AssertKind::RemainderByZero(eval_to_int(op)))\n                             }\n                             AssertKind::BoundsCheck { ref len, ref index } => {\n                                 let len = eval_to_int(len);\n                                 let index = eval_to_int(index);\n-                                AssertKind::BoundsCheck { len, index }\n+                                Some(AssertKind::BoundsCheck { len, index })\n                             }\n                             // Overflow is are already covered by checks on the binary operators.\n-                            AssertKind::Overflow(..) | AssertKind::OverflowNeg(_) => return,\n+                            AssertKind::Overflow(..) | AssertKind::OverflowNeg(_) => None,\n                             // Need proper const propagator for these.\n-                            _ => return,\n+                            _ => None,\n                         };\n-                        self.report_assert_as_lint(\n-                            lint::builtin::UNCONDITIONAL_PANIC,\n-                            source_info,\n-                            \"this operation will panic at runtime\",\n-                            msg,\n-                        );\n+                        // Poison all places this operand references so that further code\n+                        // doesn't use the invalid value\n+                        match cond {\n+                            Operand::Move(ref place) | Operand::Copy(ref place) => {\n+                                Self::remove_const(&mut self.ecx, place.local);\n+                            }\n+                            Operand::Constant(_) => {}\n+                        }\n+                        if let Some(msg) = msg {\n+                            self.report_assert_as_lint(\n+                                lint::builtin::UNCONDITIONAL_PANIC,\n+                                source_info,\n+                                \"this operation will panic at runtime\",\n+                                msg,\n+                            );\n+                        }\n                     } else {\n                         if self.should_const_prop(value) {\n                             if let ScalarMaybeUninit::Scalar(scalar) = value_const {"}, {"sha": "5f2d5e80243fe62a76362679ffc08cb042142daf", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38f5151d3ff19d772deac0c6724ff8bde1d5c79f/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f5151d3ff19d772deac0c6724ff8bde1d5c79f/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs?ref=38f5151d3ff19d772deac0c6724ff8bde1d5c79f", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+pub struct Fixed64(i64);\n+\n+pub fn div(f: Fixed64) {\n+    f.0 / 0;\n+}\n+\n+fn main() {}"}]}