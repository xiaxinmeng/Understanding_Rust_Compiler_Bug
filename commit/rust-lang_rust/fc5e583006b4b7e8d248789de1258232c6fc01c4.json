{"sha": "fc5e583006b4b7e8d248789de1258232c6fc01c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNWU1ODMwMDZiNGI3ZThkMjQ4Nzg5ZGUxMjU4MjMyYzZmYzAxYzQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-20T17:03:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-20T17:03:54Z"}, "message": "Warn on unsupported pass modes for extern \"C\"\n\ncc #10", "tree": {"sha": "e775f22eae19fd85d24f7bfb6c89040b5b46133b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e775f22eae19fd85d24f7bfb6c89040b5b46133b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc5e583006b4b7e8d248789de1258232c6fc01c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5e583006b4b7e8d248789de1258232c6fc01c4", "html_url": "https://github.com/rust-lang/rust/commit/fc5e583006b4b7e8d248789de1258232c6fc01c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc5e583006b4b7e8d248789de1258232c6fc01c4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "html_url": "https://github.com/rust-lang/rust/commit/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "dbfca15ead9fd74c901c99be23da9aeaab1801b2", "filename": "src/abi/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fc5e583006b4b7e8d248789de1258232c6fc01c4/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5e583006b4b7e8d248789de1258232c6fc01c4/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=fc5e583006b4b7e8d248789de1258232c6fc01c4", "patch": "@@ -81,6 +81,7 @@ fn clif_sig_from_fn_sig<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     triple: &target_lexicon::Triple,\n     sig: FnSig<'tcx>,\n+    span: Span,\n     is_vtable_fn: bool,\n     requires_caller_location: bool,\n ) -> Signature {\n@@ -118,7 +119,25 @@ fn clif_sig_from_fn_sig<'tcx>(\n                     .layout_of(ParamEnv::reveal_all().and(tcx.mk_mut_ptr(tcx.mk_unit())))\n                     .unwrap();\n             }\n-            get_pass_mode(tcx, layout).get_param_ty(tcx).into_iter()\n+            let pass_mode = get_pass_mode(tcx, layout);\n+            if abi != Abi::Rust && abi != Abi::RustCall && abi != Abi::RustIntrinsic {\n+                match pass_mode {\n+                    PassMode::NoPass | PassMode::ByVal(_) => {}\n+                    PassMode::ByValPair(_, _) | PassMode::ByRef { sized: _ } => {\n+                        tcx.sess.span_warn(\n+                            span,\n+                            &format!(\n+                                \"Argument of type `{:?}` with pass mode `{:?}` is not yet supported \\\n+                                for non-rust abi `{}`. Calling this function may result in a crash.\",\n+                                layout.ty,\n+                                pass_mode,\n+                                abi,\n+                            ),\n+                        );\n+                    }\n+                }\n+            }\n+            pass_mode.get_param_ty(tcx).into_iter()\n         })\n         .flatten();\n \n@@ -171,7 +190,7 @@ pub(crate) fn get_function_name_and_sig<'tcx>(\n     if fn_sig.c_variadic && !support_vararg {\n         tcx.sess.span_fatal(tcx.def_span(inst.def_id()), \"Variadic function definitions are not yet supported\");\n     }\n-    let sig = clif_sig_from_fn_sig(tcx, triple, fn_sig, false, inst.def.requires_caller_location(tcx));\n+    let sig = clif_sig_from_fn_sig(tcx, triple, fn_sig, tcx.def_span(inst.def_id()), false, inst.def.requires_caller_location(tcx));\n     (tcx.symbol_name(inst).name.as_str().to_string(), sig)\n }\n \n@@ -584,6 +603,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                     fx.tcx,\n                     fx.triple(),\n                     fn_sig,\n+                    span,\n                     is_virtual_call,\n                     false, // calls through function pointers never pass the caller location\n                 );\n@@ -654,6 +674,7 @@ pub(crate) fn codegen_drop<'tcx>(\n                     fx.tcx,\n                     fx.triple(),\n                     fn_sig,\n+                    span,\n                     true,\n                     false, // `drop_in_place` is never `#[track_caller]`\n                 );"}]}