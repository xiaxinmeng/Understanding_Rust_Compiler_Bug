{"sha": "15c876db9ce32922c331b9dab5e9dafc3d81387b", "node_id": "C_kwDOAAsO6NoAKDE1Yzg3NmRiOWNlMzI5MjJjMzMxYjlkYWI1ZTlkYWZjM2Q4MTM4N2I", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "loic.branstett@epitech.eu", "date": "2021-10-13T23:50:37Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "loic.branstett@epitech.eu", "date": "2021-10-13T23:51:35Z"}, "message": "Deduplicate macro_rules! from module_exports when documenting them\n\nThis can append if within the same module a `#[macro_export] macro_rules!`\nis declared but also a reexport of itself producing two export of the same\nmacro in the same module. In that case we only want to document it once.", "tree": {"sha": "76af28d102d847a55c875102a12dad0a84755870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76af28d102d847a55c875102a12dad0a84755870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c876db9ce32922c331b9dab5e9dafc3d81387b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c876db9ce32922c331b9dab5e9dafc3d81387b", "html_url": "https://github.com/rust-lang/rust/commit/15c876db9ce32922c331b9dab5e9dafc3d81387b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c876db9ce32922c331b9dab5e9dafc3d81387b/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb16a2a892c2a29b1da3085e29f39efa3486e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb16a2a892c2a29b1da3085e29f39efa3486e1c", "html_url": "https://github.com/rust-lang/rust/commit/eeb16a2a892c2a29b1da3085e29f39efa3486e1c"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "3e38ac822f50ad74449c744409cc41169b39f496", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15c876db9ce32922c331b9dab5e9dafc3d81387b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c876db9ce32922c331b9dab5e9dafc3d81387b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=15c876db9ce32922c331b9dab5e9dafc3d81387b", "patch": "@@ -87,13 +87,21 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // the rexport defines the path that a user will actually see. Accordingly,\n         // we add the rexport as an item here, and then skip over the original\n         // definition in `visit_item()` below.\n+        //\n+        // We also skip `#[macro_export] macro_rules!` that have alredy been inserted,\n+        // this can append if within the same module a `#[macro_export] macro_rules!`\n+        // is declared but also a reexport of itself producing two export of the same\n+        // macro in the same module.\n+        let mut inserted = FxHashSet::default();\n         for export in self.cx.tcx.module_exports(CRATE_DEF_ID).unwrap_or(&[]) {\n             if let Res::Def(DefKind::Macro(_), def_id) = export.res {\n                 if let Some(local_def_id) = def_id.as_local() {\n                     if self.cx.tcx.has_attr(def_id, sym::macro_export) {\n-                        let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_def_id);\n-                        let item = self.cx.tcx.hir().expect_item(hir_id);\n-                        top_level_module.items.push((item, None));\n+                        if !inserted.insert(def_id) {\n+                            let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_def_id);\n+                            let item = self.cx.tcx.hir().expect_item(hir_id);\n+                            top_level_module.items.push((item, None));\n+                        }\n                     }\n                 }\n             }"}]}