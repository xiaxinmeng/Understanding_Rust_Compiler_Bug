{"sha": "0cf204930a2ecaa5f7416602fca6054d4fd44b6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZjIwNDkzMGEyZWNhYTVmNzQxNjYwMmZjYTYwNTRkNGZkNDRiNmI=", "commit": {"author": {"name": "David Ross", "email": "daboross@daboross.net", "date": "2020-02-16T00:18:50Z"}, "committer": {"name": "David Ross", "email": "daboross@daboross.net", "date": "2020-02-16T03:51:02Z"}, "message": "Keep better fix suggestion if type ascription is likely unintended", "tree": {"sha": "30f25ef045c2a590885bcb1300e7c1b9c29b53ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30f25ef045c2a590885bcb1300e7c1b9c29b53ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf204930a2ecaa5f7416602fca6054d4fd44b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf204930a2ecaa5f7416602fca6054d4fd44b6b", "html_url": "https://github.com/rust-lang/rust/commit/0cf204930a2ecaa5f7416602fca6054d4fd44b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf204930a2ecaa5f7416602fca6054d4fd44b6b/comments", "author": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fc0532269f40c2870936faaebcdd14539613411", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc0532269f40c2870936faaebcdd14539613411", "html_url": "https://github.com/rust-lang/rust/commit/4fc0532269f40c2870936faaebcdd14539613411"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "fe5570f26abd53287049ef33a0d76156fd82f172", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0cf204930a2ecaa5f7416602fca6054d4fd44b6b/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf204930a2ecaa5f7416602fca6054d4fd44b6b/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=0cf204930a2ecaa5f7416602fca6054d4fd44b6b", "patch": "@@ -665,17 +665,23 @@ impl<'a> Parser<'a> {\n             );\n             let mut err = self.struct_span_err(span, &msg);\n             let suggestion = \"try surrounding the expression in parentheses\";\n-            if let Ok(expr_str) = expr_str {\n-                err.span_suggestion(\n-                    span,\n-                    suggestion,\n-                    format!(\"({})\", expr_str),\n-                    Applicability::MachineApplicable,\n-                )\n+            // if type ascription is \"likely an error\", the user will already be getting a useful\n+            // help message, and doesn't need a second.\n+            if self.last_type_ascription.map_or(false, |last_ascription| last_ascription.1) {\n+                self.maybe_annotate_with_ascription(&mut err, false);\n             } else {\n-                err.span_help(span, suggestion)\n+                if let Ok(expr_str) = expr_str {\n+                    err.span_suggestion(\n+                        span,\n+                        suggestion,\n+                        format!(\"({})\", expr_str),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    err.span_help(span, suggestion);\n+                }\n             }\n-            .emit();\n+            err.emit();\n         };\n         Ok(with_postfix)\n     }"}]}