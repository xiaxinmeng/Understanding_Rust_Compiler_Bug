{"sha": "0b77a49deef5fe0e8f46cefa652af4b55e7bac51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNzdhNDlkZWVmNWZlMGU4ZjQ2Y2VmYTY1MmFmNGI1NWU3YmFjNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-21T17:01:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-21T17:01:38Z"}, "message": "auto merge of #13553 : aochagavia/rust/pr, r=alexcrichton\n\nNow it is possible to specify run-flags in tests. For example, by using `run-flags: --bench` the Bencher is run.", "tree": {"sha": "d063a29e9de04bf243b1be50534f5a2fa9b7292f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d063a29e9de04bf243b1be50534f5a2fa9b7292f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b77a49deef5fe0e8f46cefa652af4b55e7bac51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b77a49deef5fe0e8f46cefa652af4b55e7bac51", "html_url": "https://github.com/rust-lang/rust/commit/0b77a49deef5fe0e8f46cefa652af4b55e7bac51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b77a49deef5fe0e8f46cefa652af4b55e7bac51/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c101da29b32d6a9a9e49e1d895cce711ddc8486", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c101da29b32d6a9a9e49e1d895cce711ddc8486", "html_url": "https://github.com/rust-lang/rust/commit/1c101da29b32d6a9a9e49e1d895cce711ddc8486"}, {"sha": "49ff21ed87aaa2a720653bbd0ac42c4028138034", "url": "https://api.github.com/repos/rust-lang/rust/commits/49ff21ed87aaa2a720653bbd0ac42c4028138034", "html_url": "https://github.com/rust-lang/rust/commit/49ff21ed87aaa2a720653bbd0ac42c4028138034"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "e17d8955c67c2498bd0c4323674d6bfe7272f165", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0b77a49deef5fe0e8f46cefa652af4b55e7bac51/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b77a49deef5fe0e8f46cefa652af4b55e7bac51/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=0b77a49deef5fe0e8f46cefa652af4b55e7bac51", "patch": "@@ -17,6 +17,8 @@ pub struct TestProps {\n     pub error_patterns: Vec<~str> ,\n     // Extra flags to pass to the compiler\n     pub compile_flags: Option<~str>,\n+    // Extra flags to pass when the compiled code is run (such as --bench)\n+    pub run_flags: Option<~str>,\n     // If present, the name of a file that this test should match when\n     // pretty-printed\n     pub pp_exact: Option<Path>,\n@@ -42,6 +44,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut aux_builds = Vec::new();\n     let mut exec_env = Vec::new();\n     let mut compile_flags = None;\n+    let mut run_flags = None;\n     let mut pp_exact = None;\n     let mut debugger_cmds = Vec::new();\n     let mut check_lines = Vec::new();\n@@ -58,6 +61,10 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             compile_flags = parse_compile_flags(ln);\n         }\n \n+        if run_flags.is_none() {\n+            run_flags = parse_run_flags(ln);\n+        }\n+\n         if pp_exact.is_none() {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n@@ -96,9 +103,11 @@ pub fn load_props(testfile: &Path) -> TestProps {\n \n         true\n     });\n-    return TestProps {\n+\n+    TestProps {\n         error_patterns: error_patterns,\n         compile_flags: compile_flags,\n+        run_flags: run_flags,\n         pp_exact: pp_exact,\n         aux_builds: aux_builds,\n         exec_env: exec_env,\n@@ -107,7 +116,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         force_host: force_host,\n         check_stdout: check_stdout,\n         no_prefer_dynamic: no_prefer_dynamic,\n-    };\n+    }\n }\n \n pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n@@ -160,6 +169,10 @@ fn parse_compile_flags(line: &str) -> Option<~str> {\n     parse_name_value_directive(line, \"compile-flags\".to_owned())\n }\n \n+fn parse_run_flags(line: &str) -> Option<~str> {\n+    parse_name_value_directive(line, ~\"run-flags\")\n+}\n+\n fn parse_debugger_cmd(line: &str) -> Option<~str> {\n     parse_name_value_directive(line, \"debugger\".to_owned())\n }"}, {"sha": "dd246cf611444b7c64c755edcb2a21cc9fd5b965", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b77a49deef5fe0e8f46cefa652af4b55e7bac51/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b77a49deef5fe0e8f46cefa652af4b55e7bac51/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=0b77a49deef5fe0e8f46cefa652af4b55e7bac51", "patch": "@@ -835,14 +835,19 @@ fn make_exe_name(config: &config, testfile: &Path) -> Path {\n     f\n }\n \n-fn make_run_args(config: &config, _props: &TestProps, testfile: &Path) ->\n+fn make_run_args(config: &config, props: &TestProps, testfile: &Path) ->\n    ProcArgs {\n     // If we've got another tool to run under (valgrind),\n     // then split apart its command\n     let mut args = split_maybe_args(&config.runtool);\n     let exe_file = make_exe_name(config, testfile);\n+\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     args.push(exe_file.as_str().unwrap().to_owned());\n+\n+    // Add the arguments in the run_flags directive\n+    args.push_all_move(split_maybe_args(&props.run_flags));\n+\n     let prog = args.shift().unwrap();\n     return ProcArgs {prog: prog, args: args};\n }"}]}