{"sha": "8024983ea73e1d1c16720a424d39fd1c239eee68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMjQ5ODNlYTczZTFkMWMxNjcyMGE0MjRkMzlmZDFjMjM5ZWVlNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-22T02:22:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-22T02:22:02Z"}, "message": "Auto merge of #87246 - rust-lang:placeholder-pretty, r=nikomatsakis\n\nWhen pretty printing, name placeholders as bound regions\n\nSplit from #85499\n\nWhen we see a placeholder that we are going to print, treat it as a bound var (and add it to a `for<...>`", "tree": {"sha": "7f9cee3408ac3190947f14da2b141fba53ba2b3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f9cee3408ac3190947f14da2b141fba53ba2b3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8024983ea73e1d1c16720a424d39fd1c239eee68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8024983ea73e1d1c16720a424d39fd1c239eee68", "html_url": "https://github.com/rust-lang/rust/commit/8024983ea73e1d1c16720a424d39fd1c239eee68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8024983ea73e1d1c16720a424d39fd1c239eee68/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "602150f21fd8a9bd3e903039c0d8c008d85aa7f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/602150f21fd8a9bd3e903039c0d8c008d85aa7f1", "html_url": "https://github.com/rust-lang/rust/commit/602150f21fd8a9bd3e903039c0d8c008d85aa7f1"}, {"sha": "b9ee2fb6d8ca9d70a173ae710f5073d5bf27eff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ee2fb6d8ca9d70a173ae710f5073d5bf27eff6", "html_url": "https://github.com/rust-lang/rust/commit/b9ee2fb6d8ca9d70a173ae710f5073d5bf27eff6"}], "stats": {"total": 164, "additions": 118, "deletions": 46}, "files": [{"sha": "f885c0a4b87bd1f6c42312128203d18381cb6227", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8024983ea73e1d1c16720a424d39fd1c239eee68/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8024983ea73e1d1c16720a424d39fd1c239eee68/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8024983ea73e1d1c16720a424d39fd1c239eee68", "patch": "@@ -995,7 +995,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let get_lifetimes = |sig| {\n             use rustc_hir::def::Namespace;\n             let mut s = String::new();\n-            let (_, (sig, reg)) = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS)\n+            let (_, sig, reg) = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS)\n                 .name_all_regions(sig)\n                 .unwrap();\n             let lts: Vec<String> = reg.into_iter().map(|(_, kind)| kind.to_string()).collect();"}, {"sha": "b5733bd2edc2e0cc29f90f02548d8b185e24d907", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 107, "deletions": 35, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/8024983ea73e1d1c16720a424d39fd1c239eee68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8024983ea73e1d1c16720a424d39fd1c239eee68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=8024983ea73e1d1c16720a424d39fd1c239eee68", "patch": "@@ -1776,13 +1776,73 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n     }\n }\n \n+/// Folds through bound vars and placeholders, naming them\n+struct RegionFolder<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    current_index: ty::DebruijnIndex,\n+    region_map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n+    name: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n+}\n+\n+impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: ty::Binder<'tcx, T>,\n+    ) -> ty::Binder<'tcx, T> {\n+        self.current_index.shift_in(1);\n+        let t = t.super_fold_with(self);\n+        self.current_index.shift_out(1);\n+        t\n+    }\n+\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+        match *t.kind() {\n+            _ if t.has_vars_bound_at_or_above(self.current_index) || t.has_placeholders() => {\n+                return t.super_fold_with(self);\n+            }\n+            _ => {}\n+        }\n+        t\n+    }\n+\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+        let name = &mut self.name;\n+        let region = match *r {\n+            ty::ReLateBound(_, br) => self.region_map.entry(br).or_insert_with(|| name(br)),\n+            ty::RePlaceholder(ty::PlaceholderRegion { name: kind, .. }) => {\n+                // If this is an anonymous placeholder, don't rename. Otherwise, in some\n+                // async fns, we get a `for<'r> Send` bound\n+                match kind {\n+                    ty::BrAnon(_) | ty::BrEnv => r,\n+                    _ => {\n+                        // Index doesn't matter, since this is just for naming and these never get bound\n+                        let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind };\n+                        self.region_map.entry(br).or_insert_with(|| name(br))\n+                    }\n+                }\n+            }\n+            _ => return r,\n+        };\n+        if let ty::ReLateBound(debruijn1, br) = *region {\n+            assert_eq!(debruijn1, ty::INNERMOST);\n+            self.tcx.mk_region(ty::ReLateBound(self.current_index, br))\n+        } else {\n+            region\n+        }\n+    }\n+}\n+\n // HACK(eddyb) limited to `FmtPrinter` because of `binder_depth`,\n // `region_index` and `used_region_names`.\n impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     pub fn name_all_regions<T>(\n         mut self,\n         value: &ty::Binder<'tcx, T>,\n-    ) -> Result<(Self, (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)), fmt::Error>\n+    ) -> Result<(Self, T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>), fmt::Error>\n     where\n         T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n     {\n@@ -1805,16 +1865,16 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n \n         let mut empty = true;\n         let mut start_or_continue = |cx: &mut Self, start: &str, cont: &str| {\n-            write!(\n-                cx,\n-                \"{}\",\n-                if empty {\n-                    empty = false;\n-                    start\n-                } else {\n-                    cont\n-                }\n-            )\n+            let w = if empty {\n+                empty = false;\n+                start\n+            } else {\n+                cont\n+            };\n+            let _ = write!(cx, \"{}\", w);\n+        };\n+        let do_continue = |cx: &mut Self, cont: Symbol| {\n+            let _ = write!(cx, \"{}\", cont);\n         };\n \n         define_scoped_cx!(self);\n@@ -1824,44 +1884,44 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         // aren't named. Eventually, we might just want this as the default, but\n         // this is not *quite* right and changes the ordering of some output\n         // anyways.\n-        let new_value = if self.tcx().sess.verbose() {\n+        let (new_value, map) = if self.tcx().sess.verbose() {\n             // anon index + 1 (BrEnv takes 0) -> name\n             let mut region_map: BTreeMap<u32, Symbol> = BTreeMap::default();\n             let bound_vars = value.bound_vars();\n             for var in bound_vars {\n                 match var {\n                     ty::BoundVariableKind::Region(ty::BrNamed(_, name)) => {\n-                        let _ = start_or_continue(&mut self, \"for<\", \", \");\n-                        let _ = write!(self, \"{}\", name);\n+                        start_or_continue(&mut self, \"for<\", \", \");\n+                        do_continue(&mut self, name);\n                     }\n                     ty::BoundVariableKind::Region(ty::BrAnon(i)) => {\n-                        let _ = start_or_continue(&mut self, \"for<\", \", \");\n+                        start_or_continue(&mut self, \"for<\", \", \");\n                         let name = loop {\n                             let name = name_by_region_index(region_index);\n                             region_index += 1;\n                             if !self.used_region_names.contains(&name) {\n                                 break name;\n                             }\n                         };\n-                        let _ = write!(self, \"{}\", name);\n+                        do_continue(&mut self, name);\n                         region_map.insert(i + 1, name);\n                     }\n                     ty::BoundVariableKind::Region(ty::BrEnv) => {\n-                        let _ = start_or_continue(&mut self, \"for<\", \", \");\n+                        start_or_continue(&mut self, \"for<\", \", \");\n                         let name = loop {\n                             let name = name_by_region_index(region_index);\n                             region_index += 1;\n                             if !self.used_region_names.contains(&name) {\n                                 break name;\n                             }\n                         };\n-                        let _ = write!(self, \"{}\", name);\n+                        do_continue(&mut self, name);\n                         region_map.insert(0, name);\n                     }\n                     _ => continue,\n                 }\n             }\n-            start_or_continue(&mut self, \"\", \"> \")?;\n+            start_or_continue(&mut self, \"\", \"> \");\n \n             self.tcx.replace_late_bound_regions(value.clone(), |br| {\n                 let kind = match br.kind {\n@@ -1881,11 +1941,12 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n                 ))\n             })\n         } else {\n-            let new_value = self.tcx.replace_late_bound_regions(value.clone(), |br| {\n-                let _ = start_or_continue(&mut self, \"for<\", \", \");\n+            let tcx = self.tcx;\n+            let mut name = |br: ty::BoundRegion| {\n+                start_or_continue(&mut self, \"for<\", \", \");\n                 let kind = match br.kind {\n                     ty::BrNamed(_, name) => {\n-                        let _ = write!(self, \"{}\", name);\n+                        do_continue(&mut self, name);\n                         br.kind\n                     }\n                     ty::BrAnon(_) | ty::BrEnv => {\n@@ -1896,31 +1957,36 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n                                 break name;\n                             }\n                         };\n-                        let _ = write!(self, \"{}\", name);\n+                        do_continue(&mut self, name);\n                         ty::BrNamed(DefId::local(CRATE_DEF_INDEX), name)\n                     }\n                 };\n-                self.tcx.mk_region(ty::ReLateBound(\n-                    ty::INNERMOST,\n-                    ty::BoundRegion { var: br.var, kind },\n-                ))\n-            });\n-            start_or_continue(&mut self, \"\", \"> \")?;\n-            new_value\n+                tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind }))\n+            };\n+            let mut folder = RegionFolder {\n+                tcx,\n+                current_index: ty::INNERMOST,\n+                name: &mut name,\n+                region_map: BTreeMap::new(),\n+            };\n+            let new_value = value.clone().skip_binder().fold_with(&mut folder);\n+            let region_map = folder.region_map;\n+            start_or_continue(&mut self, \"\", \"> \");\n+            (new_value, region_map)\n         };\n \n         self.binder_depth += 1;\n         self.region_index = region_index;\n-        Ok((self, new_value))\n+        Ok((self, new_value, map))\n     }\n \n     pub fn pretty_in_binder<T>(self, value: &ty::Binder<'tcx, T>) -> Result<Self, fmt::Error>\n     where\n         T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n     {\n         let old_region_index = self.region_index;\n-        let (new, new_value) = self.name_all_regions(value)?;\n-        let mut inner = new_value.0.print(new)?;\n+        let (new, new_value, _) = self.name_all_regions(value)?;\n+        let mut inner = new_value.print(new)?;\n         inner.region_index = old_region_index;\n         inner.binder_depth -= 1;\n         Ok(inner)\n@@ -1935,8 +2001,8 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n     {\n         let old_region_index = self.region_index;\n-        let (new, new_value) = self.name_all_regions(value)?;\n-        let mut inner = f(&new_value.0, new)?;\n+        let (new, new_value, _) = self.name_all_regions(value)?;\n+        let mut inner = f(&new_value, new)?;\n         inner.region_index = old_region_index;\n         inner.binder_depth -= 1;\n         Ok(inner)\n@@ -1960,6 +2026,12 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n                 debug!(\"LateBoundRegionNameCollector::visit_region(r: {:?}, address: {:p})\", r, &r);\n                 if let ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) = *r {\n                     self.used_region_names.insert(name);\n+                } else if let ty::RePlaceholder(ty::PlaceholderRegion {\n+                    name: ty::BrNamed(_, name),\n+                    ..\n+                }) = *r\n+                {\n+                    self.used_region_names.insert(name);\n                 }\n                 r.super_visit_with(self)\n             }"}, {"sha": "bad736b64c038122dc7988cae58fb89600e997c7", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs?ref=8024983ea73e1d1c16720a424d39fd1c239eee68", "patch": "@@ -11,7 +11,7 @@ where\n }\n \n impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n-    //~^ ERROR the trait bound `<T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n+    //~^ ERROR the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n     type Item = T;\n     //~^ ERROR the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref\n }"}, {"sha": "49fad4e1b1cb80e975cd9bad2e36fd1c8d9a9eb7", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=8024983ea73e1d1c16720a424d39fd1c239eee68", "patch": "@@ -14,16 +14,16 @@ LL |     type Item = T;\n              <&T as Deref>\n              <&mut T as Deref>\n \n-error[E0277]: the trait bound `<T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n+error[E0277]: the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n   --> $DIR/hr-associated-type-projection-1.rs:13:33\n    |\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n-   |                                 ^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n+   |                                 ^^^^^^^^^^^^^^^^^ the trait `for<'b> Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n    |\n help: consider further restricting the associated type\n    |\n-LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T where <T as UnsafeCopy<'b, T>>::Item: Deref {\n-   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T where for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref {\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ffe0bce6f0fd8b01d0c079e221c4ba9e3092a07e", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=8024983ea73e1d1c16720a424d39fd1c239eee68", "patch": "@@ -5,7 +5,7 @@ LL |     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n    |     ^^------^\n    |     | |\n    |     | found signature of `fn(u16) -> _`\n-   |     expected signature of `fn(<u32 as T<'x>>::V) -> _`\n+   |     expected signature of `for<'x> fn(<u32 as T<'x>>::V) -> _`\n    |\n    = note: required for the cast to the object type `dyn for<'x> Fn(<u32 as T<'x>>::V)`\n "}, {"sha": "cfcef9699f3721f7c91af8e607cb7eaa414168bc", "filename": "src/test/ui/coherence/coherence-fn-covariant-bound-vs-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr?ref=8024983ea73e1d1c16720a424d39fd1c239eee68", "patch": "@@ -1,10 +1,10 @@\n-error[E0119]: conflicting implementations of trait `Trait` for type `for<'r> fn(fn(&'r ()))`\n+error[E0119]: conflicting implementations of trait `Trait` for type `for<'r> fn(for<'r> fn(&'r ()))`\n   --> $DIR/coherence-fn-covariant-bound-vs-static.rs:17:1\n    |\n LL | impl Trait for for<'r> fn(fn(&'r ())) {}\n    | ------------------------------------- first implementation here\n LL | impl<'a> Trait for fn(fn(&'a ())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'r> fn(fn(&'r ()))`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'r> fn(for<'r> fn(&'r ()))`\n    |\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n "}, {"sha": "4bc5eb03e922cb26ffcf205feef26df4ed3467e4", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=8024983ea73e1d1c16720a424d39fd1c239eee68", "patch": "@@ -10,7 +10,7 @@ LL | {\n LL |     break_me::<Type, fn(_)>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n-   |     expected signature of `fn(<Type as Trait<'b>>::Assoc) -> _`\n+   |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n    |     found signature of `fn(()) -> _`\n \n error: aborting due to previous error"}, {"sha": "149562f8fb31c7e61d832fc8e1e9fcf1c2350628", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8024983ea73e1d1c16720a424d39fd1c239eee68/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=8024983ea73e1d1c16720a424d39fd1c239eee68", "patch": "@@ -10,7 +10,7 @@ LL |     F: for<'a> FnMut(<T as Trait<'a>>::Item),\n LL |     foo((), drop)\n    |             ^^^^\n    |             |\n-   |             expected signature of `fn(<() as Trait<'a>>::Item) -> _`\n+   |             expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n    |             found signature of `fn(()) -> _`\n \n error[E0277]: the size for values of type `<() as Trait<'_>>::Item` cannot be known at compilation time"}]}