{"sha": "97915ab943001b5a74df4b3e22e7c0a469433fb9", "node_id": "C_kwDOAAsO6NoAKDk3OTE1YWI5NDMwMDFiNWE3NGRmNGIzZTIyZTdjMGE0Njk0MzNmYjk", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-12-16T18:42:53Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-03-05T14:06:03Z"}, "message": "Add note for mismatched types with circular dependencies", "tree": {"sha": "98197edafee187516b8be42c7541fcad92bad6a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98197edafee187516b8be42c7541fcad92bad6a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97915ab943001b5a74df4b3e22e7c0a469433fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97915ab943001b5a74df4b3e22e7c0a469433fb9", "html_url": "https://github.com/rust-lang/rust/commit/97915ab943001b5a74df4b3e22e7c0a469433fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97915ab943001b5a74df4b3e22e7c0a469433fb9/comments", "author": null, "committer": null, "parents": [{"sha": "7650bd15d5f16130e0ea098dbbc444d2b833c9dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7650bd15d5f16130e0ea098dbbc444d2b833c9dd", "html_url": "https://github.com/rust-lang/rust/commit/7650bd15d5f16130e0ea098dbbc444d2b833c9dd"}], "stats": {"total": 68, "additions": 61, "deletions": 7}, "files": [{"sha": "7ce6bd418ebe13f242b9a88f383cdd4047f1a2e3", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97915ab943001b5a74df4b3e22e7c0a469433fb9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97915ab943001b5a74df4b3e22e7c0a469433fb9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=97915ab943001b5a74df4b3e22e7c0a469433fb9", "patch": "@@ -613,9 +613,10 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n \n         let report_path_match = |err: &mut Diagnostic, did1: DefId, did2: DefId| {\n-            // Only external crates, if either is from a local\n-            // module we could have false positives\n-            if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n+            // Only report definitions from different crates. If both definitions\n+            // are from a local module we could have false positives, e.g.\n+            // let _ = [{struct Foo; Foo}, {struct Foo; Foo}];\n+            if did1.krate != did2.krate {\n                 let abs_path =\n                     |def_id| AbsolutePathPrinter { tcx: self.tcx }.print_def_path(def_id, &[]);\n \n@@ -627,10 +628,16 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 };\n                 if same_path().unwrap_or(false) {\n                     let crate_name = self.tcx.crate_name(did1.krate);\n-                    err.note(&format!(\n-                        \"perhaps two different versions of crate `{}` are being used?\",\n-                        crate_name\n-                    ));\n+                    let msg = if did1.is_local() || did2.is_local() {\n+                        format!(\n+                            \"the crate `{crate_name}` is compiled multiple times, possibly with different configurations\"\n+                        )\n+                    } else {\n+                        format!(\n+                            \"perhaps two different versions of crate `{crate_name}` are being used?\"\n+                        )\n+                    };\n+                    err.note(msg);\n                 }\n             }\n         };"}, {"sha": "0e74eb1b2f2631b561ce698b9c352c687ffba803", "filename": "tests/incremental/auxiliary/circular-dependencies-aux.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97915ab943001b5a74df4b3e22e7c0a469433fb9/tests%2Fincremental%2Fauxiliary%2Fcircular-dependencies-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97915ab943001b5a74df4b3e22e7c0a469433fb9/tests%2Fincremental%2Fauxiliary%2Fcircular-dependencies-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fauxiliary%2Fcircular-dependencies-aux.rs?ref=97915ab943001b5a74df4b3e22e7c0a469433fb9", "patch": "@@ -0,0 +1,10 @@\n+// edition: 2021\n+// compile-flags: --crate-type lib --extern circular_dependencies={{build-base}}/circular-dependencies/libcircular_dependencies.rmeta --emit dep-info,metadata\n+\n+use circular_dependencies::Foo;\n+\n+pub fn consume_foo(_: Foo) {}\n+\n+pub fn produce_foo() -> Foo {\n+    Foo\n+}"}, {"sha": "10673066a9df09b2e1f9f29dc8eb836b57b3875a", "filename": "tests/incremental/circular-dependencies.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/97915ab943001b5a74df4b3e22e7c0a469433fb9/tests%2Fincremental%2Fcircular-dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97915ab943001b5a74df4b3e22e7c0a469433fb9/tests%2Fincremental%2Fcircular-dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fcircular-dependencies.rs?ref=97915ab943001b5a74df4b3e22e7c0a469433fb9", "patch": "@@ -0,0 +1,37 @@\n+// ignore-tidy-linelength\n+// revisions: cpass1 cfail2\n+// edition: 2021\n+// [cpass1] compile-flags: --crate-type lib --emit dep-info,metadata\n+// [cfail2] aux-build: circular-dependencies-aux.rs\n+// [cfail2] compile-flags: --test --extern aux={{build-base}}/circular-dependencies/auxiliary/libcircular_dependencies_aux.rmeta -L dependency={{build-base}}/circular-dependencies\n+\n+pub struct Foo;\n+//[cfail2]~^ NOTE `Foo` is defined in the current crate\n+//[cfail2]~| NOTE `Foo` is defined in the current crate\n+//[cfail2]~| NOTE `circular_dependencies::Foo` is defined in crate `circular_dependencies`\n+//[cfail2]~| NOTE `circular_dependencies::Foo` is defined in crate `circular_dependencies`\n+\n+pub fn consume_foo(_: Foo) {}\n+//[cfail2]~^ NOTE function defined here\n+\n+pub fn produce_foo() -> Foo {\n+    Foo\n+}\n+\n+#[test]\n+fn test() {\n+    aux::consume_foo(produce_foo());\n+    //[cfail2]~^ ERROR mismatched types [E0308]\n+    //[cfail2]~| NOTE expected `circular_dependencies::Foo`, found `Foo`\n+    //[cfail2]~| NOTE arguments to this function are incorrect\n+    //[cfail2]~| NOTE `Foo` and `circular_dependencies::Foo` have similar names, but are actually distinct types\n+    //[cfail2]~| NOTE the crate `circular_dependencies` is compiled multiple times, possibly with different configurations\n+    //[cfail2]~| NOTE function defined here\n+\n+    consume_foo(aux::produce_foo());\n+    //[cfail2]~^ ERROR mismatched types [E0308]\n+    //[cfail2]~| NOTE expected `Foo`, found `circular_dependencies::Foo`\n+    //[cfail2]~| NOTE arguments to this function are incorrect\n+    //[cfail2]~| NOTE `circular_dependencies::Foo` and `Foo` have similar names, but are actually distinct types\n+    //[cfail2]~| NOTE the crate `circular_dependencies` is compiled multiple times, possibly with different configurations\n+}"}]}