{"sha": "bcebec508422e3dc88215a621f3b51beb88b0330", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZWJlYzUwODQyMmUzZGM4ODIxNWE2MjFmM2I1MWJlYjg4YjAzMzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:35:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:35:00Z"}, "message": "rollup merge of #20706: nikomatsakis/assoc-types-projections-in-structs-issue-20470\n\nConflicts:\n\tsrc/librustc_trans/trans/expr.rs", "tree": {"sha": "ef21ffee1018a7073fc57aa9eeb4130abec97656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef21ffee1018a7073fc57aa9eeb4130abec97656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcebec508422e3dc88215a621f3b51beb88b0330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcebec508422e3dc88215a621f3b51beb88b0330", "html_url": "https://github.com/rust-lang/rust/commit/bcebec508422e3dc88215a621f3b51beb88b0330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcebec508422e3dc88215a621f3b51beb88b0330/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51357e04be5482d746053646b2af68cd34563ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/51357e04be5482d746053646b2af68cd34563ced", "html_url": "https://github.com/rust-lang/rust/commit/51357e04be5482d746053646b2af68cd34563ced"}, {"sha": "cb98c3d93a4c0e79ae87a04a6d3a439ac8ed87b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb98c3d93a4c0e79ae87a04a6d3a439ac8ed87b1", "html_url": "https://github.com/rust-lang/rust/commit/cb98c3d93a4c0e79ae87a04a6d3a439ac8ed87b1"}], "stats": {"total": 283, "additions": 204, "deletions": 79}, "files": [{"sha": "6bc424fdf9528f3d6a78629a4d249dfff655ea1f", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -135,10 +135,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                 t\n             }\n \n-            ty::ty_open(..) => {\n-                self.tcx().sess.bug(\"Cannot freshen an open existential type\");\n-            }\n-\n+            ty::ty_open(..) |\n             ty::ty_bool |\n             ty::ty_char |\n             ty::ty_int(..) |"}, {"sha": "f42f43d25764d8bb92a6bd84a3cd7ba0825ff9b6", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -1457,11 +1457,26 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(AmbiguousBuiltin)\n             }\n \n+            ty::ty_open(ty) => {\n+                // these only crop up in trans, and represent an\n+                // \"opened\" unsized/existential type (one that has\n+                // been dereferenced)\n+                match bound {\n+                    ty::BoundCopy |\n+                    ty::BoundSync |\n+                    ty::BoundSend => {\n+                        Ok(If(vec!(ty)))\n+                    }\n+\n+                    ty::BoundSized => {\n+                        Err(Unimplemented)\n+                    }\n+                }\n+            }\n             ty::ty_err => {\n                 Ok(If(Vec::new()))\n             }\n \n-            ty::ty_open(_) |\n             ty::ty_infer(ty::FreshTy(_)) |\n             ty::ty_infer(ty::FreshIntTy(_)) => {\n                 self.tcx().sess.bug("}, {"sha": "33efc1fa10b6c4016524de4d3cafe301fb7963cb", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -107,7 +107,7 @@ pub struct CrateAnalysis<'tcx> {\n     pub glob_map: Option<GlobMap>,\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct field<'tcx> {\n     pub name: ast::Name,\n     pub mt: mt<'tcx>\n@@ -7240,6 +7240,12 @@ impl<'tcx> HasProjectionTypes for FnSig<'tcx> {\n     }\n }\n \n+impl<'tcx> HasProjectionTypes for field<'tcx> {\n+    fn has_projection_types(&self) -> bool {\n+        self.mt.ty.has_projection_types()\n+    }\n+}\n+\n impl<'tcx> HasProjectionTypes for BareFnTy<'tcx> {\n     fn has_projection_types(&self) -> bool {\n         self.sig.has_projection_types()\n@@ -7339,3 +7345,11 @@ impl<'tcx> Repr<'tcx> for UnboxedClosureUpvar<'tcx> {\n                 self.ty.repr(tcx))\n     }\n }\n+\n+impl<'tcx> Repr<'tcx> for field<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        format!(\"field({},{})\",\n+                self.name.repr(tcx),\n+                self.mt.repr(tcx))\n+    }\n+}"}, {"sha": "dedd69deabb0b27a864fb6e9ff341e3325980e56", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -273,6 +273,15 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TraitRef<'tcx> {\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for ty::field<'tcx> {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::field<'tcx> {\n+        ty::field {\n+            name: self.name,\n+            mt: self.mt.fold_with(folder),\n+        }\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for ty::Region {\n     fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Region {\n         folder.fold_region(*self)"}, {"sha": "0275942e1d577ec99d1b6d3ec1e8e6523e5e20c8", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -51,21 +51,21 @@ use std::rc::Rc;\n use llvm::{ValueRef, True, IntEQ, IntNE};\n use back::abi::FAT_PTR_ADDR;\n use middle::subst;\n-use middle::subst::Subst;\n+use middle::ty::{mod, Ty, UnboxedClosureTyper};\n+use middle::ty::Disr;\n+use syntax::ast;\n+use syntax::attr;\n+use syntax::attr::IntType;\n use trans::_match;\n use trans::build::*;\n use trans::cleanup;\n use trans::cleanup::CleanupMethods;\n use trans::common::*;\n use trans::datum;\n use trans::machine;\n+use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n-use middle::ty::{self, Ty, UnboxedClosureTyper};\n-use middle::ty::Disr;\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::attr::IntType;\n use util::ppaux::ty_to_string;\n \n type Hint = attr::ReprAttr;\n@@ -159,7 +159,8 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_struct(def_id, substs) => {\n             let fields = ty::lookup_struct_fields(cx.tcx(), def_id);\n             let mut ftys = fields.iter().map(|field| {\n-                ty::lookup_field_type(cx.tcx(), def_id, field.id, substs)\n+                let fty = ty::lookup_field_type(cx.tcx(), def_id, field.id, substs);\n+                monomorphize::normalize_associated_type(cx.tcx(), &fty)\n             }).collect::<Vec<_>>();\n             let packed = ty::lookup_packed(cx.tcx(), def_id);\n             let dtor = ty::ty_dtor(cx.tcx(), def_id).has_drop_flag();\n@@ -432,7 +433,7 @@ fn get_cases<'tcx>(tcx: &ty::ctxt<'tcx>,\n                    -> Vec<Case<'tcx>> {\n     ty::enum_variants(tcx, def_id).iter().map(|vi| {\n         let arg_tys = vi.args.iter().map(|&raw_ty| {\n-            raw_ty.subst(tcx, substs)\n+            monomorphize::apply_param_substs(tcx, substs, &raw_ty)\n         }).collect();\n         Case { discr: vi.disr_val, tys: arg_tys }\n     }).collect()"}, {"sha": "1a74137c10df6c528858d2389dfedb52904116bc", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -50,7 +50,7 @@ use std::vec::Vec;\n use syntax::ast::Ident;\n use syntax::ast;\n use syntax::ast_map::{PathElem, PathName};\n-use syntax::codemap::Span;\n+use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n use util::common::memoized;\n@@ -114,8 +114,9 @@ pub fn normalize_ty<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n }\n \n // Is the type's representation size known at compile time?\n-pub fn type_is_sized<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-ty::type_contents(cx, ty).is_sized(cx)\n+pub fn type_is_sized<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    let param_env = ty::empty_parameter_environment(tcx);\n+    ty::type_is_sized(&param_env, DUMMY_SP, ty)\n }\n \n pub fn lltype_is_sized<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {"}, {"sha": "0e7dd42d3207dd52397e9c349785ba1769890290", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -50,6 +50,7 @@ use trans::debuginfo;\n use trans::glue;\n use trans::machine;\n use trans::meth;\n+use trans::monomorphize;\n use trans::inline;\n use trans::tvec;\n use trans::type_of;\n@@ -1318,7 +1319,9 @@ pub fn with_field_tys<'tcx, R, F>(tcx: &ty::ctxt<'tcx>,\n {\n     match ty.sty {\n         ty::ty_struct(did, substs) => {\n-            op(0, &struct_fields(tcx, did, substs)[])\n+            let fields = struct_fields(tcx, did, substs);\n+            let fields = monomorphize::normalize_associated_type(tcx, &fields);\n+            op(0, &fields[])\n         }\n \n         ty::ty_tup(ref v) => {\n@@ -1340,10 +1343,9 @@ pub fn with_field_tys<'tcx, R, F>(tcx: &ty::ctxt<'tcx>,\n                         def::DefVariant(enum_id, variant_id, _) => {\n                             let variant_info = ty::enum_variant_with_id(\n                                 tcx, enum_id, variant_id);\n-                            op(variant_info.disr_val,\n-                               &struct_fields(tcx,\n-                                             variant_id,\n-                                             substs)[])\n+                            let fields = struct_fields(tcx, variant_id, substs);\n+                            let fields = monomorphize::normalize_associated_type(tcx, &fields);\n+                            op(variant_info.disr_val, &fields.index[])\n                         }\n                         _ => {\n                             tcx.sess.bug(\"resolve didn't map this expr to a \\"}, {"sha": "435f94f35fa8aaab9c708bee94446fb08e18badf", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -300,8 +300,6 @@ pub fn apply_param_substs<'tcx,T>(tcx: &ty::ctxt<'tcx>,\n                                   -> T\n     where T : TypeFoldable<'tcx> + Repr<'tcx> + HasProjectionTypes + Clone\n {\n-    assert!(param_substs.regions.is_erased());\n-\n     let substituted = value.subst(tcx, param_substs);\n     normalize_associated_type(tcx, &substituted)\n }"}, {"sha": "2046ee015f685faafb8c95d22db9cc1c5d824170", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -52,7 +52,6 @@ use middle::const_eval;\n use middle::def;\n use middle::resolve_lifetime as rl;\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n-use middle::subst::{VecPerParamSpace};\n use middle::traits;\n use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty};\n use rscope::{self, UnelidableRscope, RegionScope, SpecificRscope,\n@@ -244,7 +243,7 @@ pub fn opt_ast_region_to_region<'tcx>(\n \n /// Given a path `path` that refers to an item `I` with the declared generics `decl_generics`,\n /// returns an appropriate set of substitutions for this particular reference to `I`.\n-fn ast_path_substs_for_ty<'tcx>(\n+pub fn ast_path_substs_for_ty<'tcx>(\n     this: &AstConv<'tcx>,\n     rscope: &RegionScope,\n     decl_generics: &ty::Generics<'tcx>,\n@@ -762,50 +761,6 @@ pub fn ast_path_to_ty<'tcx>(\n     TypeAndSubsts { substs: substs, ty: ty }\n }\n \n-/// Returns the type that this AST path refers to. If the path has no type\n-/// parameters and the corresponding type has type parameters, fresh type\n-/// and/or region variables are substituted.\n-///\n-/// This is used when checking the constructor in struct literals.\n-pub fn ast_path_to_ty_relaxed<'tcx>(\n-    this: &AstConv<'tcx>,\n-    rscope: &RegionScope,\n-    did: ast::DefId,\n-    path: &ast::Path)\n-    -> TypeAndSubsts<'tcx>\n-{\n-    let tcx = this.tcx();\n-    let ty::TypeScheme {\n-        generics,\n-        ty: decl_ty\n-    } = this.get_item_type_scheme(did);\n-\n-    let wants_params =\n-        generics.has_type_params(TypeSpace) || generics.has_region_params(TypeSpace);\n-\n-    let needs_defaults =\n-        wants_params &&\n-        path.segments.iter().all(|s| s.parameters.is_empty());\n-\n-    let substs = if needs_defaults {\n-        let type_params: Vec<_> = range(0, generics.types.len(TypeSpace))\n-                                      .map(|_| this.ty_infer(path.span)).collect();\n-        let region_params =\n-            rscope.anon_regions(path.span, generics.regions.len(TypeSpace))\n-                  .unwrap();\n-        Substs::new(VecPerParamSpace::params_from_type(type_params),\n-                    VecPerParamSpace::params_from_type(region_params))\n-    } else {\n-        ast_path_substs_for_ty(this, rscope, &generics, path)\n-    };\n-\n-    let ty = decl_ty.subst(tcx, &substs);\n-    TypeAndSubsts {\n-        substs: substs,\n-        ty: ty,\n-    }\n-}\n-\n /// Converts the given AST type to a built-in type. A \"built-in type\" is, at\n /// present, either a core numeric type, a string, or `Box`.\n pub fn ast_ty_to_builtin_ty<'tcx>("}, {"sha": "b98b327100cdb7e1abb2e8344298679638cca359", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 44, "deletions": 9, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -90,7 +90,7 @@ use middle::mem_categorization as mc;\n use middle::mem_categorization::McResult;\n use middle::pat_util::{self, pat_id_map};\n use middle::region::CodeExtent;\n-use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace};\n+use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace, TypeSpace};\n use middle::traits;\n use middle::ty::{FnSig, VariantInfo, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n@@ -1947,6 +1947,43 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Returns the type that this AST path refers to. If the path has no type\n+    /// parameters and the corresponding type has type parameters, fresh type\n+    /// and/or region variables are substituted.\n+    ///\n+    /// This is used when checking the constructor in struct literals.\n+    fn instantiate_struct_literal_ty(&self,\n+                                     did: ast::DefId,\n+                                     path: &ast::Path)\n+                                     -> TypeAndSubsts<'tcx>\n+    {\n+        let tcx = self.tcx();\n+\n+        let ty::TypeScheme { generics, ty: decl_ty } = ty::lookup_item_type(tcx, did);\n+\n+        let wants_params =\n+            generics.has_type_params(TypeSpace) || generics.has_region_params(TypeSpace);\n+\n+        let needs_defaults =\n+            wants_params &&\n+            path.segments.iter().all(|s| s.parameters.is_empty());\n+\n+        let substs = if needs_defaults {\n+            let tps =\n+                self.infcx().next_ty_vars(generics.types.len(TypeSpace));\n+            let rps =\n+                self.infcx().region_vars_for_defs(path.span,\n+                                                  generics.regions.get_slice(TypeSpace));\n+            Substs::new_type(tps, rps)\n+        } else {\n+            astconv::ast_path_substs_for_ty(self, self, &generics, path)\n+        };\n+\n+        let ty = self.instantiate_type_scheme(path.span, &substs, &decl_ty);\n+\n+        TypeAndSubsts { substs: substs, ty: ty }\n+    }\n+\n     pub fn write_nil(&self, node_id: ast::NodeId) {\n         self.write_ty(node_id, ty::mk_nil(self.tcx()));\n     }\n@@ -3490,17 +3527,18 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                     expected_field_type =\n                         ty::lookup_field_type(\n                             tcx, class_id, field_id, substitutions);\n+                    expected_field_type =\n+                        fcx.normalize_associated_types_in(\n+                            field.span, &expected_field_type);\n                     class_field_map.insert(\n                         field.ident.node.name, (field_id, true));\n                     fields_found += 1;\n                 }\n             }\n+\n             // Make sure to give a type to the field even if there's\n             // an error, so we can continue typechecking\n-            check_expr_coercable_to_type(\n-                    fcx,\n-                    &*field.expr,\n-                    expected_field_type);\n+            check_expr_coercable_to_type(fcx, &*field.expr, expected_field_type);\n         }\n \n         if error_happened {\n@@ -4149,10 +4187,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         // parameters correctly.\n         let actual_structure_type = fcx.expr_ty(&*expr);\n         if !ty::type_is_error(actual_structure_type) {\n-            let type_and_substs = astconv::ast_path_to_ty_relaxed(fcx,\n-                                                                  fcx,\n-                                                                  struct_id,\n-                                                                  path);\n+            let type_and_substs = fcx.instantiate_struct_literal_ty(struct_id, path);\n             match fcx.mk_subty(false,\n                                infer::Misc(path.span),\n                                actual_structure_type,"}, {"sha": "da05514f76300fe5d8c7a06c819904b24cb391aa", "filename": "src/test/compile-fail/recursion.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursion.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -8,6 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//~^^^^^^^^^^ ERROR overflow\n+//\n+// We also get a second error message at the top of file (dummy\n+// span). This is not helpful, but also kind of annoying to prevent,\n+// so for now just live with it, since we also get a second message\n+// that is more helpful.\n+\n enum Nil {NilValue}\n struct Cons<T> {head:int, tail:T}\n trait Dot {fn dot(&self, other:Self) -> int;}"}, {"sha": "3c7cc7c4975344f173fb7b0594199df53182d533", "filename": "src/test/run-pass/associated-types-ref-from-struct.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Ftest%2Frun-pass%2Fassociated-types-ref-from-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Ftest%2Frun-pass%2Fassociated-types-ref-from-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-from-struct.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test associated type references in structure fields.\n+\n+trait Test {\n+    type V;\n+\n+    fn test(&self, value: &Self::V) -> bool;\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+struct TesterPair<T:Test> {\n+    tester: T,\n+    value: T::V,\n+}\n+\n+impl<T:Test> TesterPair<T> {\n+    fn new(tester: T, value: T::V) -> TesterPair<T> {\n+        TesterPair { tester: tester, value: value }\n+    }\n+\n+    fn test(&self) -> bool {\n+        self.tester.test(&self.value)\n+    }\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+struct EqU32(u32);\n+impl Test for EqU32 {\n+    type V = u32;\n+\n+    fn test(&self, value: &u32) -> bool {\n+        self.0 == *value\n+    }\n+}\n+\n+struct EqI32(i32);\n+impl Test for EqI32 {\n+    type V = i32;\n+\n+    fn test(&self, value: &i32) -> bool {\n+        self.0 == *value\n+    }\n+}\n+\n+fn main() {\n+    let tester = TesterPair::new(EqU32(22), 23);\n+    tester.test();\n+\n+    let tester = TesterPair::new(EqI32(22), 23);\n+    tester.test();\n+}"}, {"sha": "b51d44a0c244bfb99bd7be0e42c42a21e25874dc", "filename": "src/test/run-pass/associated-types-ref-in-struct-literal.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebec508422e3dc88215a621f3b51beb88b0330/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs?ref=bcebec508422e3dc88215a621f3b51beb88b0330", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test associated type references in a struct literal. Issue #20535.\n+\n+pub trait Foo {\n+    type Bar;\n+}\n+\n+impl Foo for int {\n+    type Bar = int;\n+}\n+\n+struct Thing<F: Foo> {\n+    a: F,\n+    b: F::Bar,\n+}\n+\n+fn main() {\n+    let thing = Thing{a: 1i, b: 2i};\n+    assert_eq!(thing.a + 1, thing.b);\n+}"}]}