{"sha": "46fef766b0dc3717937911f0f67c9f1ee2a7f21e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZmVmNzY2YjBkYzM3MTc5Mzc5MTFmMGY2N2M5ZjFlZTJhN2YyMWU=", "commit": {"author": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2018-01-28T19:24:19Z"}, "committer": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2018-03-03T04:25:52Z"}, "message": "Have Vec use slice's implementations of Index<I> and IndexMut<I>", "tree": {"sha": "675d542815761ee38406465e8947dea272b67d17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/675d542815761ee38406465e8947dea272b67d17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46fef766b0dc3717937911f0f67c9f1ee2a7f21e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46fef766b0dc3717937911f0f67c9f1ee2a7f21e", "html_url": "https://github.com/rust-lang/rust/commit/46fef766b0dc3717937911f0f67c9f1ee2a7f21e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46fef766b0dc3717937911f0f67c9f1ee2a7f21e/comments", "author": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb18a92ad87852c4c5d6726b8fbe8c38deda4ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb18a92ad87852c4c5d6726b8fbe8c38deda4ba", "html_url": "https://github.com/rust-lang/rust/commit/9cb18a92ad87852c4c5d6726b8fbe8c38deda4ba"}], "stats": {"total": 130, "additions": 5, "deletions": 125}, "files": [{"sha": "9c6b10c32f1e477950619644bcd1e845e8bfc505", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 125, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/46fef766b0dc3717937911f0f67c9f1ee2a7f21e/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fef766b0dc3717937911f0f67c9f1ee2a7f21e/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=46fef766b0dc3717937911f0f67c9f1ee2a7f21e", "patch": "@@ -1527,146 +1527,26 @@ impl<T: Hash> Hash for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> Index<usize> for Vec<T> {\n-    type Output = T;\n+impl<T, I> Index<I> for Vec<T> where [T]: Index<I> {\n+    type Output = <[T] as Index<I>>::Output;\n \n     #[inline]\n-    fn index(&self, index: usize) -> &T {\n+    fn index(&self, index: I) -> &Self::Output {\n         // NB built-in indexing via `&[T]`\n         &(**self)[index]\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> IndexMut<usize> for Vec<T> {\n+impl<T, I> IndexMut<I> for Vec<T> where [T]: IndexMut<I> {\n     #[inline]\n-    fn index_mut(&mut self, index: usize) -> &mut T {\n+    fn index_mut(&mut self, index: I) -> &mut Self::Output {\n         // NB built-in indexing via `&mut [T]`\n         &mut (**self)[index]\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::Range<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::Range<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeTo<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeTo<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeFrom<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeFrom<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeFull> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, _index: ops::RangeFull) -> &[T] {\n-        self\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeInclusive<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeInclusive<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeToInclusive<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeToInclusive<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::Range<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeTo<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeFrom<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut [T] {\n-        self\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Deref for Vec<T> {\n     type Target = [T];"}]}