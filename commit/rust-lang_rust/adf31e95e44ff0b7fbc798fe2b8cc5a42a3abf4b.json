{"sha": "adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZjMxZTk1ZTQ0ZmYwYjdmYmM3OThmZTJiOGNjNWE0MmEzYWJmNGI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-10-12T15:43:49Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-10-15T16:57:57Z"}, "message": "resolve: suggest variants with placeholders\n\nThis commit improves the diagnostic modified in rust-lang/rust#77341 to\nsuggest not only those variants which do not have fields, but those with\nfields (by suggesting with placeholders).\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "40f3bb50f4b92979017a51442472d7ddfe61871c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f3bb50f4b92979017a51442472d7ddfe61871c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl+If5gACgkQJZLnbIc4\nH9k0lBAAilwL98sjKPgVqq3ZegO432jYOpHt+iWnbC6qrNN58njOtzgRJiPID+Bh\njKRW6OHKPiTjikmplWqOP3RPW1jYmaT3wQ7Pi6fZrPbPrC5q62T8aWjWsqM2b77v\n4vqD0w7+Wps19D6CEk+b/Ty8ldvoYPHQHuJy8vMGPJO7pEuO2+UC/ac4/LHyMFHA\n1sCWKiC6AXmiuHZNn9yZ6gEsI7rFc65uef5XQC/BkNLQSIZjn7pRBpUlFDSIxbGq\nThIgZA1/RjRmm1QmfblfxeRZWcf/gh7+U/BYTBT+HkkBN+7TY7SldaufgomVoFia\nr5JPZAnEnGeguuxEwbLHqgGZesmRY62BI5EC1+beAbxAe4cQnw73eIkoFoR+rJiD\noHkVSZ3LCf9fWM1k09pkVSZZLbtijSSa1Fafx5VxCNMxTxYVp1U9KST+gpyTm25H\nzetQEAU2JRBkkbNqHkdNnR+iUemKqt4JxB5GBIqVWcKxFq64JbLr+I0jwGpQUFH6\nli2sUL9yiigFl5QVAV/V6oTiY9f2V8ow1nxd6tCyVNdkGWSrlTMn88Ei+tyVYE0u\nQIMN9nRflBxwAsFYkf+nQaOZA01M1QcUECKzjbRfgT4Oh7/ZEkmx2JRqTM8U2UFj\nL18IgG29AEWndMR0W+wkNe1URkwfbPS+UeUDZpckzVpZsarHSko=\n=TC0m\n-----END PGP SIGNATURE-----", "payload": "tree 40f3bb50f4b92979017a51442472d7ddfe61871c\nparent 7f587168102498a488abf608a86c7fdfa62fb7bb\nauthor David Wood <david@davidtw.co> 1602517429 +0100\ncommitter David Wood <david@davidtw.co> 1602781077 +0100\n\nresolve: suggest variants with placeholders\n\nThis commit improves the diagnostic modified in rust-lang/rust#77341 to\nsuggest not only those variants which do not have fields, but those with\nfields (by suggesting with placeholders).\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b", "html_url": "https://github.com/rust-lang/rust/commit/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f587168102498a488abf608a86c7fdfa62fb7bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f587168102498a488abf608a86c7fdfa62fb7bb", "html_url": "https://github.com/rust-lang/rust/commit/7f587168102498a488abf608a86c7fdfa62fb7bb"}], "stats": {"total": 389, "additions": 311, "deletions": 78}, "files": [{"sha": "8ef99f36a04afe66e25c682407a2a5e644a7a473", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 86, "deletions": 60, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b", "patch": "@@ -1330,58 +1330,32 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         let suggest_only_tuple_variants =\n             matches!(source, PathSource::TupleStruct(..)) || source.is_call();\n-        let mut suggestable_variants = if suggest_only_tuple_variants {\n+        if suggest_only_tuple_variants {\n             // Suggest only tuple variants regardless of whether they have fields and do not\n             // suggest path with added parenthesis.\n-            variants\n+            let mut suggestable_variants = variants\n                 .iter()\n                 .filter(|(.., kind)| *kind == CtorKind::Fn)\n                 .map(|(variant, ..)| path_names_to_string(variant))\n-                .collect::<Vec<_>>()\n-        } else {\n-            variants\n-                .iter()\n-                .filter(|(_, def_id, kind)| {\n-                    // Suggest only variants that have no fields (these can definitely\n-                    // be constructed).\n-                    let has_fields =\n-                        self.r.field_names.get(&def_id).map(|f| f.is_empty()).unwrap_or(false);\n-                    match kind {\n-                        CtorKind::Const => true,\n-                        CtorKind::Fn | CtorKind::Fictive if has_fields => true,\n-                        _ => false,\n-                    }\n-                })\n-                .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n-                .map(|(variant_str, kind)| {\n-                    // Add constructor syntax where appropriate.\n-                    match kind {\n-                        CtorKind::Const => variant_str,\n-                        CtorKind::Fn => format!(\"({}())\", variant_str),\n-                        CtorKind::Fictive => format!(\"({} {{}})\", variant_str),\n-                    }\n-                })\n-                .collect::<Vec<_>>()\n-        };\n+                .collect::<Vec<_>>();\n \n-        let non_suggestable_variant_count = variants.len() - suggestable_variants.len();\n+            let non_suggestable_variant_count = variants.len() - suggestable_variants.len();\n \n-        if !suggestable_variants.is_empty() {\n-            let msg = if non_suggestable_variant_count == 0 && suggestable_variants.len() == 1 {\n-                \"try using the enum's variant\"\n-            } else {\n-                \"try using one of the enum's variants\"\n-            };\n+            if !suggestable_variants.is_empty() {\n+                let msg = if non_suggestable_variant_count == 0 && suggestable_variants.len() == 1 {\n+                    \"try using the enum's variant\"\n+                } else {\n+                    \"try using one of the enum's variants\"\n+                };\n \n-            err.span_suggestions(\n-                span,\n-                msg,\n-                suggestable_variants.drain(..),\n-                Applicability::MaybeIncorrect,\n-            );\n-        }\n+                err.span_suggestions(\n+                    span,\n+                    msg,\n+                    suggestable_variants.drain(..),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n \n-        if suggest_only_tuple_variants {\n             let source_msg = if source.is_call() {\n                 \"to construct\"\n             } else if matches!(source, PathSource::TupleStruct(..)) {\n@@ -1408,24 +1382,76 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 ));\n             }\n         } else {\n-            let made_suggestion = non_suggestable_variant_count != variants.len();\n-            if made_suggestion {\n-                if non_suggestable_variant_count == 1 {\n-                    err.help(\n-                        \"you might have meant to use the enum's other variant that has fields\",\n-                    );\n-                } else if non_suggestable_variant_count >= 1 {\n-                    err.help(\n-                        \"you might have meant to use one of the enum's other variants that \\\n-                         have fields\",\n-                    );\n-                }\n-            } else {\n-                if non_suggestable_variant_count == 1 {\n-                    err.help(\"you might have meant to use the enum's variant\");\n-                } else if non_suggestable_variant_count >= 1 {\n-                    err.help(\"you might have meant to use one of the enum's variants\");\n+            let needs_placeholder = |def_id: DefId, kind: CtorKind| {\n+                let has_no_fields =\n+                    self.r.field_names.get(&def_id).map(|f| f.is_empty()).unwrap_or(false);\n+                match kind {\n+                    CtorKind::Const => false,\n+                    CtorKind::Fn | CtorKind::Fictive if has_no_fields => false,\n+                    _ => true,\n                 }\n+            };\n+\n+            let mut suggestable_variants = variants\n+                .iter()\n+                .filter(|(_, def_id, kind)| !needs_placeholder(*def_id, *kind))\n+                .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n+                .map(|(variant, kind)| match kind {\n+                    CtorKind::Const => variant,\n+                    CtorKind::Fn => format!(\"({}())\", variant),\n+                    CtorKind::Fictive => format!(\"({} {{}})\", variant),\n+                })\n+                .collect::<Vec<_>>();\n+\n+            if !suggestable_variants.is_empty() {\n+                let msg = if suggestable_variants.len() == 1 {\n+                    \"you might have meant to use the following enum variant\"\n+                } else {\n+                    \"you might have meant to use one of the following enum variants\"\n+                };\n+\n+                err.span_suggestions(\n+                    span,\n+                    msg,\n+                    suggestable_variants.drain(..),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+\n+            let mut suggestable_variants_with_placeholders = variants\n+                .iter()\n+                .filter(|(_, def_id, kind)| needs_placeholder(*def_id, *kind))\n+                .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n+                .filter_map(|(variant, kind)| match kind {\n+                    CtorKind::Fn => Some(format!(\"({}(/* fields */))\", variant)),\n+                    CtorKind::Fictive => Some(format!(\"({} {{ /* fields */ }})\", variant)),\n+                    _ => None,\n+                })\n+                .collect::<Vec<_>>();\n+\n+            if !suggestable_variants_with_placeholders.is_empty() {\n+                let msg = match (\n+                    suggestable_variants.is_empty(),\n+                    suggestable_variants_with_placeholders.len(),\n+                ) {\n+                    (true, 1) => \"the following enum variant is available\",\n+                    (true, _) => \"the following enum variants are available\",\n+                    (false, 1) => \"alternatively, the following enum variant is available\",\n+                    (false, _) => \"alternatively, the following enum variants are also available\",\n+                };\n+\n+                err.span_suggestions(\n+                    span,\n+                    msg,\n+                    suggestable_variants_with_placeholders.drain(..),\n+                    Applicability::HasPlaceholders,\n+                );\n+            }\n+        };\n+\n+        if def_id.is_local() {\n+            if let Some(span) = self.def_span(def_id) {\n+                err.span_note(span, \"the enum is defined here\");\n             }\n         }\n     }"}, {"sha": "62a7649e2adf7457e18fcdc2b464afd8ce0114a5", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b", "patch": "@@ -21,6 +21,11 @@ LL |     if let Example(_) = y {\n    |            ^^^^^^^ help: try using one of the enum's variants: `Example::Ex`\n    |\n    = help: you might have meant to match against the enum's non-tuple variant\n+note: the enum is defined here\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:1:1\n+   |\n+LL | enum Example { Ex(String), NotEx }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found enum `Void`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:31:13\n@@ -29,6 +34,11 @@ LL |     let y = Void();\n    |             ^^^^\n    |\n    = help: the enum has no tuple variants to construct\n+note: the enum is defined here\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:3:1\n+   |\n+LL | enum Void {}\n+   | ^^^^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found enum `ManyVariants`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:33:13\n@@ -38,6 +48,17 @@ LL |     let z = ManyVariants();\n    |\n    = help: the enum has no tuple variants to construct\n    = help: you might have meant to construct one of the enum's non-tuple variants\n+note: the enum is defined here\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:5:1\n+   |\n+LL | / enum ManyVariants {\n+LL | |     One,\n+LL | |     Two,\n+LL | |     Three,\n+...  |\n+LL | |     Ten,\n+LL | | }\n+   | |_^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "cd128c1ea0b488d470d99f88c6facdcf595035c3", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b", "patch": "@@ -24,7 +24,17 @@ error[E0423]: expected value, found enum `B`\n   --> $DIR/glob-resolve1.rs:24:5\n    |\n LL |     B;\n-   |     ^ help: try using the enum's variant: `B::B1`\n+   |     ^\n+   |\n+note: the enum is defined here\n+  --> $DIR/glob-resolve1.rs:12:5\n+   |\n+LL |     pub enum B { B1 }\n+   |     ^^^^^^^^^^^^^^^^^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |     B::B1;\n+   |     ^^^^^\n \n error[E0425]: cannot find value `C` in this scope\n   --> $DIR/glob-resolve1.rs:25:5"}, {"sha": "4da5305e6870f782cd393f58438d9c1bc65c0700", "filename": "src/test/ui/issues/issue-73427.stderr", "status": "modified", "additions": 91, "deletions": 7, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/src%2Ftest%2Fui%2Fissues%2Fissue-73427.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/src%2Ftest%2Fui%2Fissues%2Fissue-73427.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73427.stderr?ref=adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b", "patch": "@@ -4,39 +4,101 @@ error[E0423]: expected value, found enum `A`\n LL |     A.foo();\n    |     ^\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n-help: try using one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:1:1\n+   |\n+LL | / enum A {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | |     Struct {},\n+LL | |     Tuple(),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n+help: you might have meant to use one of the following enum variants\n    |\n LL |     (A::Struct {}).foo();\n    |     ^^^^^^^^^^^^^^\n LL |     (A::Tuple()).foo();\n    |     ^^^^^^^^^^^^\n LL |     A::Unit.foo();\n    |     ^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |     (A::StructWithFields { /* fields */ }).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (A::TupleWithFields(/* fields */)).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found enum `B`\n   --> $DIR/issue-73427.rs:31:5\n    |\n LL |     B.foo();\n    |     ^\n    |\n-   = help: you might have meant to use one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:9:1\n+   |\n+LL | / enum B {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | | }\n+   | |_^\n+help: the following enum variants are available\n+   |\n+LL |     (B::StructWithFields { /* fields */ }).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (B::TupleWithFields(/* fields */)).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found enum `C`\n   --> $DIR/issue-73427.rs:33:5\n    |\n LL |     C.foo();\n-   |     ^ help: try using one of the enum's variants: `C::Unit`\n+   |     ^\n+   |\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:14:1\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n+LL | / enum C {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |     C::Unit.foo();\n+   |     ^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |     (C::StructWithFields { /* fields */ }).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (C::TupleWithFields(/* fields */)).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found enum `D`\n   --> $DIR/issue-73427.rs:35:5\n    |\n LL |     D.foo();\n-   |     ^ help: try using one of the enum's variants: `D::Unit`\n+   |     ^\n+   |\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:20:1\n+   |\n+LL | / enum D {\n+LL | |     TupleWithFields(()),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n+help: you might have meant to use the following enum variant\n    |\n-   = help: you might have meant to use the enum's other variant that has fields\n+LL |     D::Unit.foo();\n+   |     ^^^^^^^\n+help: the following enum variant is available\n+   |\n+LL |     (D::TupleWithFields(/* fields */)).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found enum `A`\n   --> $DIR/issue-73427.rs:40:13\n@@ -45,6 +107,17 @@ LL |     let x = A(3);\n    |             ^\n    |\n    = help: you might have meant to construct one of the enum's non-tuple variants\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:1:1\n+   |\n+LL | / enum A {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | |     Struct {},\n+LL | |     Tuple(),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n help: try using one of the enum's variants\n    |\n LL |     let x = A::TupleWithFields(3);\n@@ -59,6 +132,17 @@ LL |     if let A(3) = x { }\n    |            ^\n    |\n    = help: you might have meant to match against one of the enum's non-tuple variants\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:1:1\n+   |\n+LL | / enum A {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | |     Struct {},\n+LL | |     Tuple(),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n help: try using one of the enum's variants\n    |\n LL |     if let A::TupleWithFields(3) = x { }"}, {"sha": "807dadf417bf5c2a0d3b535c1a23101ce8a83eba", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 102, "deletions": 10, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=adf31e95e44ff0b7fbc798fe2b8cc5a42a3abf4b", "patch": "@@ -2,17 +2,57 @@ error[E0423]: expected value, found enum `n::Z`\n   --> $DIR/privacy-enum-ctor.rs:23:9\n    |\n LL |         n::Z;\n-   |         ^^^^ help: try using one of the enum's variants: `m::Z::Unit`\n+   |         ^^^^\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n+   |\n+LL | /         pub(in m) enum Z {\n+LL | |             Fn(u8),\n+LL | |             Struct {\n+LL | |                 s: u8,\n+LL | |             },\n+LL | |             Unit,\n+LL | |         }\n+   | |_________^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |         m::Z::Unit;\n+   |         ^^^^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |         (m::Z::Fn(/* fields */));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         (m::Z::Struct { /* fields */ });\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n    |\n LL |         Z;\n-   |         ^ help: try using one of the enum's variants: `m::Z::Unit`\n+   |         ^\n+   |\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n+LL | /         pub(in m) enum Z {\n+LL | |             Fn(u8),\n+LL | |             Struct {\n+LL | |                 s: u8,\n+LL | |             },\n+LL | |             Unit,\n+LL | |         }\n+   | |_________^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |         m::Z::Unit;\n+   |         ^^^^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |         (m::Z::Fn(/* fields */));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         (m::Z::Struct { /* fields */ });\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found struct variant `Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:29:20\n@@ -34,11 +74,27 @@ LL |     fn f() {\n LL |     let _: E = m::E;\n    |                ^^^^\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n-help: try using one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:2:5\n+   |\n+LL | /     pub enum E {\n+LL | |         Fn(u8),\n+LL | |         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+LL | |         Unit,\n+LL | |     }\n+   | |_____^\n+help: you might have meant to use the following enum variant\n    |\n LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |     let _: E = (E::Fn(/* fields */));\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _: E = (E::Struct { /* fields */ });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: a function with a similar name exists\n    |\n LL |     let _: E = m::f;\n@@ -67,11 +123,27 @@ error[E0423]: expected value, found enum `E`\n LL |     let _: E = E;\n    |                ^\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n-help: try using one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:2:5\n+   |\n+LL | /     pub enum E {\n+LL | |         Fn(u8),\n+LL | |         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+LL | |         Unit,\n+LL | |     }\n+   | |_____^\n+help: you might have meant to use the following enum variant\n    |\n LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |     let _: E = (E::Fn(/* fields */));\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _: E = (E::Struct { /* fields */ });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider importing one of these items instead\n    |\n LL | use std::f32::consts::E;\n@@ -112,9 +184,29 @@ error[E0423]: expected value, found enum `m::n::Z`\n   --> $DIR/privacy-enum-ctor.rs:57:16\n    |\n LL |     let _: Z = m::n::Z;\n-   |                ^^^^^^^ help: try using one of the enum's variants: `m::Z::Unit`\n+   |                ^^^^^^^\n+   |\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n+   |\n+LL | /         pub(in m) enum Z {\n+LL | |             Fn(u8),\n+LL | |             Struct {\n+LL | |                 s: u8,\n+LL | |             },\n+LL | |             Unit,\n+LL | |         }\n+   | |_________^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |     let _: Z = m::Z::Unit;\n+   |                ^^^^^^^^^^\n+help: the following enum variants are available\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n+LL |     let _: Z = (m::Z::Fn(/* fields */));\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _: Z = (m::Z::Struct { /* fields */ });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:61:12"}]}