{"sha": "14830209c8278a7372ab91181ebb8d62879c4a0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODMwMjA5YzgyNzhhNzM3MmFiOTExODFlYmI4ZDYyODc5YzRhMGM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-14T12:54:20Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:10:21Z"}, "message": "Port regionck from oldvisit to <V:Visitor> trait API.", "tree": {"sha": "ff86a06a1a5b3f5198331dd3c4dc4ae2fd317503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff86a06a1a5b3f5198331dd3c4dc4ae2fd317503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14830209c8278a7372ab91181ebb8d62879c4a0c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14830209c8278a7372ab91181ebb8d62879c4a0c", "html_url": "https://github.com/rust-lang/rust/commit/14830209c8278a7372ab91181ebb8d62879c4a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14830209c8278a7372ab91181ebb8d62879c4a0c/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a60ab7acb446ef190917ad95bdee7c18bed053", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a60ab7acb446ef190917ad95bdee7c18bed053", "html_url": "https://github.com/rust-lang/rust/commit/41a60ab7acb446ef190917ad95bdee7c18bed053"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "05f1323805b3527a4479bced18fc026e0f023375", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 45, "deletions": 39, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/14830209c8278a7372ab91181ebb8d62879c4a0c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14830209c8278a7372ab91181ebb8d62879c4a0c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=14830209c8278a7372ab91181ebb8d62879c4a0c", "patch": "@@ -43,7 +43,8 @@ use syntax::ast::{ManagedSigil, OwnedSigil, BorrowedSigil};\n use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n use syntax::ast;\n use syntax::codemap::span;\n-use syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n \n pub struct Rcx {\n     fcx: @mut FnCtxt,\n@@ -53,8 +54,6 @@ pub struct Rcx {\n     repeating_scope: ast::NodeId,\n }\n \n-pub type rvt = oldvisit::vt<@mut Rcx>;\n-\n fn encl_region_of_def(fcx: @mut FnCtxt, def: ast::def) -> ty::Region {\n     let tcx = fcx.tcx();\n     match def {\n@@ -146,8 +145,8 @@ pub fn regionck_expr(fcx: @mut FnCtxt, e: @ast::expr) {\n                          repeating_scope: e.id };\n     if fcx.err_count_since_creation() == 0 {\n         // regionck assumes typeck succeeded\n-        let v = regionck_visitor();\n-        (v.visit_expr)(e, (rcx, v));\n+        let mut v = regionck_visitor();\n+        v.visit_expr(e, rcx);\n     }\n     fcx.infcx().resolve_regions();\n }\n@@ -157,55 +156,62 @@ pub fn regionck_fn(fcx: @mut FnCtxt, blk: &ast::Block) {\n                          repeating_scope: blk.id };\n     if fcx.err_count_since_creation() == 0 {\n         // regionck assumes typeck succeeded\n-        let v = regionck_visitor();\n-        (v.visit_block)(blk, (rcx, v));\n+        let mut v = regionck_visitor();\n+        v.visit_block(blk, rcx);\n     }\n     fcx.infcx().resolve_regions();\n }\n \n-fn regionck_visitor() -> rvt {\n+struct RegionckVisitor;\n+\n+impl Visitor<@mut Rcx> for RegionckVisitor {\n     // (*) FIXME(#3238) should use visit_pat, not visit_arm/visit_local,\n     // However, right now we run into an issue whereby some free\n     // regions are not properly related if they appear within the\n     // types of arguments that must be inferred. This could be\n     // addressed by deferring the construction of the region\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n-    oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_item: visit_item,\n-        visit_expr: visit_expr,\n+\n+    fn visit_item(&mut self, i:@ast::item, e:@mut Rcx) { visit_item(self, i, e); }\n+\n+    fn visit_expr(&mut self, ex:@ast::expr, e:@mut Rcx) { visit_expr(self, ex, e); }\n \n         //visit_pat: visit_pat, // (*) see above\n-        visit_arm: visit_arm,\n-        visit_local: visit_local,\n \n-        visit_block: visit_block,\n-        .. *oldvisit::default_visitor()\n-    })\n+    fn visit_arm(&mut self, a:&ast::arm, e:@mut Rcx) { visit_arm(self, a, e); }\n+\n+    fn visit_local(&mut self, l:@ast::Local, e:@mut Rcx) { visit_local(self, l, e); }\n+\n+    fn visit_block(&mut self, b:&ast::Block, e:@mut Rcx) { visit_block(self, b, e); }\n+}\n+\n+fn regionck_visitor() -> RegionckVisitor {\n+    RegionckVisitor\n }\n \n-fn visit_item(_item: @ast::item, (_rcx, _v): (@mut Rcx, rvt)) {\n+fn visit_item(_v: &mut RegionckVisitor, _item: @ast::item, _rcx: @mut Rcx) {\n     // Ignore items\n }\n \n-fn visit_block(b: &ast::Block, (rcx, v): (@mut Rcx, rvt)) {\n+fn visit_block(v: &mut RegionckVisitor, b: &ast::Block, rcx: @mut Rcx) {\n     rcx.fcx.tcx().region_maps.record_cleanup_scope(b.id);\n-    oldvisit::visit_block(b, (rcx, v));\n+    visit::walk_block(v, b, rcx);\n }\n \n-fn visit_arm(arm: &ast::arm, (rcx, v): (@mut Rcx, rvt)) {\n+fn visit_arm(v: &mut RegionckVisitor, arm: &ast::arm, rcx: @mut Rcx) {\n     // see above\n     for &p in arm.pats.iter() {\n         constrain_bindings_in_pat(p, rcx);\n     }\n \n-    oldvisit::visit_arm(arm, (rcx, v));\n+    visit::walk_arm(v, arm, rcx);\n }\n \n-fn visit_local(l: @ast::Local, (rcx, v): (@mut Rcx, rvt)) {\n+fn visit_local(v: &mut RegionckVisitor, l: @ast::Local, rcx: @mut Rcx) {\n     // see above\n     constrain_bindings_in_pat(l.pat, rcx);\n-    oldvisit::visit_local(l, (rcx, v));\n+    visit::walk_local(v, l, rcx);\n }\n \n fn constrain_bindings_in_pat(pat: @ast::pat, rcx: @mut Rcx) {\n@@ -242,7 +248,7 @@ fn constrain_bindings_in_pat(pat: @ast::pat, rcx: @mut Rcx) {\n     }\n }\n \n-fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n+fn visit_expr(v: &mut RegionckVisitor, expr: @ast::expr, rcx: @mut Rcx) {\n     debug!(\"regionck::visit_expr(e=%s, repeating_scope=%?)\",\n            expr.repr(rcx.fcx.tcx()), rcx.repeating_scope);\n \n@@ -330,13 +336,13 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n             constrain_callee(rcx, callee.id, expr, callee);\n             constrain_call(rcx, callee.id, expr, None, *args, false);\n \n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n         }\n \n         ast::expr_method_call(callee_id, arg0, _, _, ref args, _) => {\n             constrain_call(rcx, callee_id, expr, Some(arg0), *args, false);\n \n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v,expr, rcx);\n         }\n \n         ast::expr_index(callee_id, lhs, rhs) |\n@@ -348,30 +354,30 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n             // should be converted to an adjustment!\n             constrain_call(rcx, callee_id, expr, Some(lhs), [rhs], true);\n \n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n         }\n \n         ast::expr_unary(callee_id, _, lhs) if has_method_map => {\n             // As above.\n             constrain_call(rcx, callee_id, expr, Some(lhs), [], true);\n \n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n         }\n \n         ast::expr_unary(_, ast::deref, base) => {\n             // For *a, the lifetime of a must enclose the deref\n             let base_ty = rcx.resolve_node_type(base.id);\n             constrain_derefs(rcx, expr, 1, base_ty);\n \n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n         }\n \n         ast::expr_index(_, vec_expr, _) => {\n             // For a[b], the lifetime of a must enclose the deref\n             let vec_type = rcx.resolve_expr_type_adjusted(vec_expr);\n             constrain_index(rcx, expr, vec_type);\n \n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n         }\n \n         ast::expr_cast(source, _) => {\n@@ -401,7 +407,7 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n                 _ => ()\n             }\n \n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n         }\n \n         ast::expr_addr_of(_, base) => {\n@@ -417,13 +423,13 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n             let ty0 = rcx.resolve_node_type(expr.id);\n             constrain_regions_in_type(rcx, ty::re_scope(expr.id),\n                                       infer::AddrOf(expr.span), ty0);\n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n         }\n \n         ast::expr_match(discr, ref arms) => {\n             guarantor::for_match(rcx, discr, *arms);\n \n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n         }\n \n         ast::expr_fn_block(*) => {\n@@ -432,29 +438,29 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n \n         ast::expr_loop(ref body, _) => {\n             let repeating_scope = rcx.set_repeating_scope(body.id);\n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n             rcx.set_repeating_scope(repeating_scope);\n         }\n \n         ast::expr_while(cond, ref body) => {\n             let repeating_scope = rcx.set_repeating_scope(cond.id);\n-            (v.visit_expr)(cond, (rcx, v));\n+            v.visit_expr(cond, rcx);\n \n             rcx.set_repeating_scope(body.id);\n-            (v.visit_block)(body, (rcx, v));\n+            v.visit_block(body, rcx);\n \n             rcx.set_repeating_scope(repeating_scope);\n         }\n \n         _ => {\n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n         }\n     }\n }\n \n fn check_expr_fn_block(rcx: @mut Rcx,\n                        expr: @ast::expr,\n-                       v: rvt) {\n+                       v: &mut RegionckVisitor) {\n     let tcx = rcx.fcx.tcx();\n     match expr.node {\n         ast::expr_fn_block(_, ref body) => {\n@@ -483,7 +489,7 @@ fn check_expr_fn_block(rcx: @mut Rcx,\n             }\n \n             let repeating_scope = rcx.set_repeating_scope(body.id);\n-            oldvisit::visit_expr(expr, (rcx, v));\n+            visit::walk_expr(v, expr, rcx);\n             rcx.set_repeating_scope(repeating_scope);\n         }\n "}]}