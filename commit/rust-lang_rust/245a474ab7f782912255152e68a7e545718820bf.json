{"sha": "245a474ab7f782912255152e68a7e545718820bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NWE0NzRhYjdmNzgyOTEyMjU1MTUyZTY4YTdlNTQ1NzE4ODIwYmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-12T19:27:06Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:57Z"}, "message": "Inline ConstError into TypeError", "tree": {"sha": "d9adfb9b8cd92e6703de0b4f09a2f689ebd59261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9adfb9b8cd92e6703de0b4f09a2f689ebd59261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/245a474ab7f782912255152e68a7e545718820bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/245a474ab7f782912255152e68a7e545718820bf", "html_url": "https://github.com/rust-lang/rust/commit/245a474ab7f782912255152e68a7e545718820bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/245a474ab7f782912255152e68a7e545718820bf/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf1a719c19c184ca3014204b21cbd0577dfbc2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1a719c19c184ca3014204b21cbd0577dfbc2a4", "html_url": "https://github.com/rust-lang/rust/commit/cf1a719c19c184ca3014204b21cbd0577dfbc2a4"}], "stats": {"total": 63, "additions": 10, "deletions": 53}, "files": [{"sha": "670c44bef3dbf89c51b40a317b1e41613292ba77", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=245a474ab7f782912255152e68a7e545718820bf", "patch": "@@ -34,7 +34,7 @@ use crate::hir::def_id::DefId;\n use crate::mir::interpret::ConstValue;\n use crate::ty::{IntType, UintType};\n use crate::ty::{self, Ty, TyCtxt, InferConst, LazyConst};\n-use crate::ty::error::{ConstError, TypeError};\n+use crate::ty::error::TypeError;\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::SubstsRef;\n use crate::traits::{Obligation, PredicateObligations};\n@@ -627,9 +627,7 @@ pub fn const_unification_error<'tcx>(\n     a_is_expected: bool,\n     (a, b): (&'tcx LazyConst<'tcx>, &'tcx LazyConst<'tcx>),\n ) -> TypeError<'tcx> {\n-    TypeError::ConstError(\n-        ConstError::Mismatch(ty::relate::expected_found_bool(a_is_expected, &a, &b))\n-    )\n+    TypeError::ConstMismatch(ty::relate::expected_found_bool(a_is_expected, &a, &b))\n }\n \n fn int_unification_error<'tcx>(a_is_expected: bool, v: (ty::IntVarValue, ty::IntVarValue))"}, {"sha": "82e802dc164075ba23d2c2ce4688db3d470a8798", "filename": "src/librustc/ty/_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2F_match.rs?ref=245a474ab7f782912255152e68a7e545718820bf", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::{self, Ty, TyCtxt, InferConst};\n-use crate::ty::error::{TypeError, ConstError};\n+use crate::ty::error::TypeError;\n use crate::ty::relate::{self, Relate, TypeRelation, RelateResult};\n use crate::mir::interpret::ConstValue;\n \n@@ -96,9 +96,7 @@ impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Match<'a, 'gcx, 'tcx> {\n                 }\n \n                 (ConstValue::Infer(_), _) | (_, ConstValue::Infer(_)) => {\n-                    return Err(TypeError::ConstError(\n-                        ConstError::Mismatch(relate::expected_found(self, &a, &b))\n-                    ));\n+                    return Err(TypeError::ConstMismatch(relate::expected_found(self, &a, &b)));\n                 }\n \n                 _ => {}"}, {"sha": "6a6708df5cb2e159f37176fdc969ee3f10051d23", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=245a474ab7f782912255152e68a7e545718820bf", "patch": "@@ -45,13 +45,7 @@ pub enum TypeError<'tcx> {\n     ProjectionBoundsLength(ExpectedFound<usize>),\n     ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>),\n \n-    ConstError(ConstError<'tcx>),\n-}\n-\n-// Data structure used in const unification\n-#[derive(Clone, Debug)]\n-pub enum ConstError<'tcx> {\n-    Mismatch(ExpectedFound<&'tcx ty::LazyConst<'tcx>>),\n+    ConstMismatch(ExpectedFound<&'tcx ty::LazyConst<'tcx>>),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n@@ -171,19 +165,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 report_maybe_different(f, &format!(\"trait `{}`\", values.expected),\n                                        &format!(\"trait `{}`\", values.found))\n             }\n-            ConstError(ref err) => {\n-                write!(f, \"{}\", err)\n-            }\n-        }\n-    }\n-}\n-\n-impl<'tcx> fmt::Display for ConstError<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use self::ConstError::*;\n-\n-        match *self {\n-            Mismatch(ref values) => {\n+            ConstMismatch(ref values) => {\n                 write!(f, \"expected `{:?}`, found `{:?}`\", values.expected, values.found)\n             }\n         }"}, {"sha": "5b5eb783f57727e671fff76714f31ff79f4902bb", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=245a474ab7f782912255152e68a7e545718820bf", "patch": "@@ -626,9 +626,7 @@ where\n                     );\n                 }\n                  _ => {\n-                    Err(TypeError::ConstError(\n-                        ConstError::Mismatch(expected_found(relation, &a, &b))\n-                    ))\n+                    Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n                 }\n             }\n         }\n@@ -642,9 +640,7 @@ where\n             Ok(tcx.mk_lazy_const(ty::LazyConst::Unevaluated(*a_def_id, substs)))\n         }\n         _ => {\n-            Err(TypeError::ConstError(\n-                ConstError::Mismatch(expected_found(relation, &a, &b))\n-            ))\n+            Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n         }\n     }\n }"}, {"sha": "3057c529ddfd47e63ce2fac812364f5124e919de", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245a474ab7f782912255152e68a7e545718820bf/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=245a474ab7f782912255152e68a7e545718820bf", "patch": "@@ -738,22 +738,11 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n             Sorts(ref x) => return tcx.lift(x).map(Sorts),\n             ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),\n-            ConstError(ref x) => return tcx.lift(x).map(ConstError),\n+            ConstMismatch(ref x) => return tcx.lift(x).map(ConstMismatch),\n         })\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for ty::error::ConstError<'a> {\n-    type Lifted = ty::error::ConstError<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        use ty::error::ConstError::*;\n-\n-        match *self {\n-            Mismatch(ref x) => return tcx.lift(x).map(Mismatch),\n-        }\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n     type Lifted = ty::InstanceDef<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n@@ -1332,13 +1321,7 @@ EnumTypeFoldableImpl! {\n         (ty::error::TypeError::ProjectionBoundsLength)(x),\n         (ty::error::TypeError::Sorts)(x),\n         (ty::error::TypeError::ExistentialMismatch)(x),\n-        (ty::error::TypeError::ConstError)(x),\n-    }\n-}\n-\n-EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::error::ConstError<'tcx> {\n-        (ty::error::ConstError::Mismatch)(x),\n+        (ty::error::TypeError::ConstMismatch)(x),\n     }\n }\n "}]}