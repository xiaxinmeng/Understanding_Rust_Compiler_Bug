{"sha": "68f04cec37a967413934852f37998655139ff7f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZjA0Y2VjMzdhOTY3NDEzOTM0ODUyZjM3OTk4NjU1MTM5ZmY3ZjA=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-04-17T21:15:37Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-04-17T21:15:37Z"}, "message": "Merge pull request #948 from flutterhash/master\n\nAdded option to configure if/else brace style", "tree": {"sha": "99599b3bbd3986aa77456c053742d127d7a0e4c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99599b3bbd3986aa77456c053742d127d7a0e4c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68f04cec37a967413934852f37998655139ff7f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68f04cec37a967413934852f37998655139ff7f0", "html_url": "https://github.com/rust-lang/rust/commit/68f04cec37a967413934852f37998655139ff7f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68f04cec37a967413934852f37998655139ff7f0/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe993dbdf33dd67b27675cf709a87e86d20cd105", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe993dbdf33dd67b27675cf709a87e86d20cd105", "html_url": "https://github.com/rust-lang/rust/commit/fe993dbdf33dd67b27675cf709a87e86d20cd105"}, {"sha": "d773cc53276cf49236615834cd4902710f0cb58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d773cc53276cf49236615834cd4902710f0cb58d", "html_url": "https://github.com/rust-lang/rust/commit/d773cc53276cf49236615834cd4902710f0cb58d"}], "stats": {"total": 600, "additions": 589, "deletions": 11}, "files": [{"sha": "82715c2164a437ef4395628e7a11a3940006e158", "filename": "src/config.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -38,6 +38,22 @@ configuration_option_enum! { BraceStyle:\n     SameLineWhere,\n }\n \n+configuration_option_enum! { ControlBraceStyle:\n+    // K&R/Stroustrup style, Rust community default\n+    AlwaysSameLine,\n+    // Allman style\n+    AlwaysNextLine,\n+}\n+\n+configuration_option_enum! { ElseIfBraceStyle:\n+    // K&R style, Rust community default\n+    AlwaysSameLine,\n+    // Stroustrup style\n+    ClosingNextLine,\n+    // Allman style\n+    AlwaysNextLine,\n+}\n+\n // How to indent a function's return type.\n configuration_option_enum! { ReturnIndent:\n     // Aligned with the arguments\n@@ -315,6 +331,10 @@ create_config! {\n     newline_style: NewlineStyle, NewlineStyle::Unix, \"Unix or Windows line endings\";\n     fn_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for functions\";\n     item_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for structs and enums\";\n+    else_if_brace_style: ElseIfBraceStyle, ElseIfBraceStyle::AlwaysSameLine,\n+        \"Brace style for if, else if, and else constructs\";\n+    control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine,\n+        \"Brace style for match, loop, for, and while constructs\";\n     impl_empty_single_line: bool, true, \"Put empty-body implementations on a single line\";\n     fn_empty_single_line: bool, true, \"Put empty-body functions on a single line\";\n     fn_single_line: bool, false, \"Put single-expression functions on a single line\";"}, {"sha": "248cc7e090a2128f0c219a37af81867385df2be2", "filename": "src/expr.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -23,7 +23,7 @@ use string::{StringFormat, rewrite_string};\n use utils::{CodeMapSpanUtils, extra_offset, last_line_width, wrap_str, binary_search,\n             first_line_width, semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr};\n use visitor::FmtVisitor;\n-use config::{Config, StructLitStyle, MultilineStyle};\n+use config::{Config, StructLitStyle, MultilineStyle, ElseIfBraceStyle, ControlBraceStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n use types::rewrite_path;\n use items::{span_lo_for_arg, span_hi_for_arg};\n@@ -648,14 +648,20 @@ impl<'a> Rewrite for Loop<'a> {\n             None => String::new(),\n         };\n \n+        let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n+        let block_sep = match context.config.control_brace_style {\n+            ControlBraceStyle::AlwaysNextLine => alt_block_sep.as_str(),\n+            ControlBraceStyle::AlwaysSameLine => \" \",\n+        };\n         // FIXME: this drops any comment between \"loop\" and the block.\n         self.block\n             .rewrite(context, width, offset)\n             .map(|result| {\n-                format!(\"{}{}{} {}\",\n+                format!(\"{}{}{}{}{}\",\n                         label_string,\n                         self.keyword,\n                         pat_expr_string,\n+                        block_sep,\n                         result)\n             })\n     }\n@@ -701,12 +707,16 @@ fn rewrite_if_else(context: &RewriteContext,\n                    allow_single_line: bool)\n                    -> Option<String> {\n     // 3 = \"if \", 2 = \" {\"\n+    let pat_penalty = match context.config.else_if_brace_style {\n+        ElseIfBraceStyle::AlwaysNextLine => 3,\n+        _ => 3 + 2,\n+    };\n     let pat_expr_string = try_opt!(rewrite_pat_expr(context,\n                                                     pat,\n                                                     cond,\n                                                     \"let \",\n                                                     \" =\",\n-                                                    try_opt!(width.checked_sub(3 + 2)),\n+                                                    try_opt!(width.checked_sub(pat_penalty)),\n                                                     offset + 3));\n \n     // Try to format if-else on single line.\n@@ -731,13 +741,19 @@ fn rewrite_if_else(context: &RewriteContext,\n                                              offset,\n                                              width);\n \n+    let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n+    let after_sep = match context.config.else_if_brace_style {\n+        ElseIfBraceStyle::AlwaysNextLine => alt_block_sep.as_str(),\n+        _ => \" \",\n+    };\n     let mut result = format!(\"if{}{}{}{}\",\n                              between_if_cond_comment.as_ref().map_or(\" \", |str| &**str),\n                              pat_expr_string,\n-                             after_cond_comment.as_ref().map_or(\" \", |str| &**str),\n+                             after_cond_comment.as_ref().map_or(after_sep, |str| &**str),\n                              if_block_string);\n \n     if let Some(else_block) = else_block_opt {\n+        let mut last_in_chain = false;\n         let rewrite = match else_block.node {\n             // If the else expression is another if-else expression, prevent it\n             // from being formatted on a single line.\n@@ -763,7 +779,10 @@ fn rewrite_if_else(context: &RewriteContext,\n                                 offset,\n                                 false)\n             }\n-            _ => else_block.rewrite(context, width, offset),\n+            _ => {\n+                last_in_chain = true;\n+                else_block.rewrite(context, width, offset)\n+            }\n         };\n \n         let between_if_else_block = mk_sp(if_block.span.hi,\n@@ -781,10 +800,20 @@ fn rewrite_if_else(context: &RewriteContext,\n                                else_block.span.lo);\n         let after_else_comment = extract_comment(after_else, &context, offset, width);\n \n+        let between_sep = match context.config.else_if_brace_style {\n+            ElseIfBraceStyle::AlwaysNextLine |\n+            ElseIfBraceStyle::ClosingNextLine => alt_block_sep.as_str(),\n+            ElseIfBraceStyle::AlwaysSameLine => \" \",\n+        };\n+        let after_sep = match context.config.else_if_brace_style {\n+            ElseIfBraceStyle::AlwaysNextLine if last_in_chain => alt_block_sep.as_str(),\n+            _ => \" \",\n+        };\n         try_opt!(write!(&mut result,\n                         \"{}else{}\",\n-                        between_if_else_block_comment.as_ref().map_or(\" \", |str| &**str),\n-                        after_else_comment.as_ref().map_or(\" \", |str| &**str))\n+                        between_if_else_block_comment.as_ref()\n+                                                     .map_or(between_sep, |str| &**str),\n+                        after_else_comment.as_ref().map_or(after_sep, |str| &**str))\n                      .ok());\n         result.push_str(&&try_opt!(rewrite));\n     }\n@@ -917,7 +946,12 @@ fn rewrite_match(context: &RewriteContext,\n     // `match `cond` {`\n     let cond_budget = try_opt!(width.checked_sub(8));\n     let cond_str = try_opt!(cond.rewrite(context, cond_budget, offset + 6));\n-    let mut result = format!(\"match {} {{\", cond_str);\n+    let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n+    let block_sep = match context.config.control_brace_style {\n+        ControlBraceStyle::AlwaysSameLine => \" \",\n+        ControlBraceStyle::AlwaysNextLine => alt_block_sep.as_str(),\n+    };\n+    let mut result = format!(\"match {}{}{{\", cond_str, block_sep);\n \n     let nested_context = context.nested_context();\n     let arm_indent = nested_context.block_indent;\n@@ -1076,6 +1110,7 @@ impl Rewrite for ast::Arm {\n         };\n \n         let comma = arm_comma(&context.config, self, body);\n+        let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n \n         // Let's try and get the arm body on the same line as the condition.\n         // 4 = ` => `.len()\n@@ -1089,12 +1124,17 @@ impl Rewrite for ast::Arm {\n                 false\n             };\n \n+            let block_sep = match context.config.control_brace_style {\n+                ControlBraceStyle::AlwaysNextLine if is_block => alt_block_sep.as_str(),\n+                _ => \" \",\n+            };\n             match rewrite {\n                 Some(ref body_str) if !body_str.contains('\\n') || !context.config.wrap_match_arms ||\n                                       is_block => {\n-                    return Some(format!(\"{}{} => {}{}\",\n+                    return Some(format!(\"{}{} =>{}{}{}\",\n                                         attr_str.trim_left(),\n                                         pats_str,\n+                                        block_sep,\n                                         body_str,\n                                         comma));\n                 }\n@@ -1122,10 +1162,14 @@ impl Rewrite for ast::Arm {\n             (\"\", \"\")\n         };\n \n-        Some(format!(\"{}{} =>{}\\n{}{}\\n{}{}\",\n+        let block_sep = match context.config.control_brace_style {\n+            ControlBraceStyle::AlwaysNextLine => alt_block_sep,\n+            ControlBraceStyle::AlwaysSameLine => String::from(body_prefix) + \"\\n\",\n+        };\n+        Some(format!(\"{}{} =>{}{}{}\\n{}{}\",\n                      attr_str.trim_left(),\n                      pats_str,\n-                     body_prefix,\n+                     block_sep,\n                      indent_str,\n                      next_line_body,\n                      offset.to_string(context.config),"}, {"sha": "9a2ec04e3004d968cde791534501c94c27139901", "filename": "tests/source/control-brace-style-always-next-line.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Fcontrol-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Fcontrol-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcontrol-brace-style-always-next-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-control_brace_style: AlwaysNextLine\n+\n+fn main() {\n+    loop {\n+        ();\n+        ();\n+        }\n+\n+\n+    'loop_label: loop // loop comment  \n+    {\n+        ();\n+    }\n+\n+\n+    cond = true;\n+    while cond {\n+        ();\n+    }\n+\n+\n+    'while_label: while cond { // while comment\n+        ();\n+    }\n+\n+\n+    for obj in iter {\n+        for sub_obj in obj\n+        {\n+            'nested_while_label: while cond {\n+                ();\n+            }\n+        }\n+    }\n+\n+    match some_var { // match comment\n+        pattern0 => val0,\n+        pattern1 => val1,\n+        pattern2 | pattern3 => {\n+            do_stuff();\n+            val2\n+        },\n+    };\n+}"}, {"sha": "52b0c8fdc466616deab6f4447e9f1152d1cb38d3", "filename": "tests/source/control-brace-style-always-same-line.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Fcontrol-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Fcontrol-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcontrol-brace-style-always-same-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-control_brace_style: AlwaysSameLine\n+\n+fn main() {\n+    loop {\n+        ();\n+        ();\n+        }\n+\n+\n+    'loop_label: loop // loop comment  \n+    {\n+        ();\n+    }\n+\n+\n+    cond = true;\n+    while cond {\n+        ();\n+    }\n+\n+\n+    'while_label: while cond { // while comment\n+        ();\n+    }\n+\n+\n+    for obj in iter {\n+        for sub_obj in obj\n+        {\n+            'nested_while_label: while cond {\n+                ();\n+            }\n+        }\n+    }\n+\n+    match some_var { // match comment\n+        pattern0 => val0,\n+        pattern1 => val1,\n+        pattern2 | pattern3 => {\n+            do_stuff();\n+            val2\n+        },\n+    };\n+}"}, {"sha": "18a8ace1f14c158efb0d8d374d9d183536a127cd", "filename": "tests/source/else-if-brace-style-always-next-line.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Felse-if-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Felse-if-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Felse-if-brace-style-always-next-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,54 @@\n+// rustfmt-else_if_brace_style: AlwaysNextLine\n+\n+fn main() {\n+    if false\n+    {\n+        ();\n+        ();\n+    }\n+\n+    if false // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a =\n+        if 0 > 1 {\n+            unreachable!()\n+        }\n+        else\n+        {\n+            0x0\n+        };\n+\n+\n+    if true\n+    {\n+        ();\n+    } else if false {\n+        ();\n+        ();\n+    }\n+    else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    } else // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "090b1e9a9db5a705f1203db6da76af1a77653219", "filename": "tests/source/else-if-brace-style-always-same-line.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Felse-if-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Felse-if-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Felse-if-brace-style-always-same-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,54 @@\n+// rustfmt-else_if_brace_style: AlwaysSameLine\n+\n+fn main() {\n+    if false\n+    {\n+        ();\n+        ();\n+    }\n+\n+    if false // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a =\n+        if 0 > 1 {\n+            unreachable!()\n+        }\n+        else\n+        {\n+            0x0\n+        };\n+\n+\n+    if true\n+    {\n+        ();\n+    } else if false {\n+        ();\n+        ();\n+    }\n+    else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    } else // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "755b95bd54199a202e817e2f6d6be0afc922b094", "filename": "tests/source/else-if-brace-style-closing-next-line.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Felse-if-brace-style-closing-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Fsource%2Felse-if-brace-style-closing-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Felse-if-brace-style-closing-next-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,54 @@\n+// rustfmt-else_if_brace_style: ClosingNextLine\n+\n+fn main() {\n+    if false\n+    {\n+        ();\n+        ();\n+    }\n+\n+    if false // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a =\n+        if 0 > 1 {\n+            unreachable!()\n+        }\n+        else\n+        {\n+            0x0\n+        };\n+\n+\n+    if true\n+    {\n+        ();\n+    } else if false {\n+        ();\n+        ();\n+    }\n+    else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    } else // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "534dfb89969fc5021a66aac7eefead59af741fc3", "filename": "tests/target/control-brace-style-always-next-line.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,52 @@\n+// rustfmt-control_brace_style: AlwaysNextLine\n+\n+fn main() {\n+    loop\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    'loop_label: loop\n+    {\n+        ();\n+    }\n+\n+\n+    cond = true;\n+    while cond\n+    {\n+        ();\n+    }\n+\n+\n+    'while_label: while cond\n+    {\n+        // while comment\n+        ();\n+    }\n+\n+\n+    for obj in iter\n+    {\n+        for sub_obj in obj\n+        {\n+            'nested_while_label: while cond\n+            {\n+                ();\n+            }\n+        }\n+    }\n+\n+    match some_var\n+    { // match comment\n+        pattern0 => val0,\n+        pattern1 => val1,\n+        pattern2 | pattern3 =>\n+        {\n+            do_stuff();\n+            val2\n+        }\n+    };\n+}"}, {"sha": "60a07e46986f8a87c93e817c3f2caf83dd2bc213", "filename": "tests/target/control-brace-style-always-same-line.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,43 @@\n+// rustfmt-control_brace_style: AlwaysSameLine\n+\n+fn main() {\n+    loop {\n+        ();\n+        ();\n+    }\n+\n+\n+    'loop_label: loop {\n+        ();\n+    }\n+\n+\n+    cond = true;\n+    while cond {\n+        ();\n+    }\n+\n+\n+    'while_label: while cond {\n+        // while comment\n+        ();\n+    }\n+\n+\n+    for obj in iter {\n+        for sub_obj in obj {\n+            'nested_while_label: while cond {\n+                ();\n+            }\n+        }\n+    }\n+\n+    match some_var { // match comment\n+        pattern0 => val0,\n+        pattern1 => val1,\n+        pattern2 | pattern3 => {\n+            do_stuff();\n+            val2\n+        }\n+    };\n+}"}, {"sha": "3fbd8b7af25ece6b9a9b575d8c160af0513a0329", "filename": "tests/target/else-if-brace-style-always-next-line.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Felse-if-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Felse-if-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Felse-if-brace-style-always-next-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,62 @@\n+// rustfmt-else_if_brace_style: AlwaysNextLine\n+\n+fn main() {\n+    if false\n+    {\n+        ();\n+        ();\n+    }\n+\n+    if false\n+    // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a = if 0 > 1\n+    {\n+        unreachable!()\n+    }\n+    else\n+    {\n+        0x0\n+    };\n+\n+\n+    if true\n+    {\n+        ();\n+    }\n+    else if false\n+    {\n+        ();\n+        ();\n+    }\n+    else\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true\n+    // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false\n+    // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    }\n+    else\n+    // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "393944133f752e8cb8307854e842328c5281f214", "filename": "tests/target/else-if-brace-style-always-same-line.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Felse-if-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Felse-if-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Felse-if-brace-style-always-same-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,51 @@\n+// rustfmt-else_if_brace_style: AlwaysSameLine\n+\n+fn main() {\n+    if false {\n+        ();\n+        ();\n+    }\n+\n+    if false\n+    // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a = if 0 > 1 {\n+        unreachable!()\n+    } else {\n+        0x0\n+    };\n+\n+\n+    if true {\n+        ();\n+    } else if false {\n+        ();\n+        ();\n+    } else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true\n+    // else-if-chain if comment\n+    {\n+        ();\n+    } else if false\n+    // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    } else\n+    // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "e50f29d2921d53ebeb477329a8f7ea8a6ecbce2b", "filename": "tests/target/else-if-brace-style-closing-next-line.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Felse-if-brace-style-closing-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f04cec37a967413934852f37998655139ff7f0/tests%2Ftarget%2Felse-if-brace-style-closing-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Felse-if-brace-style-closing-next-line.rs?ref=68f04cec37a967413934852f37998655139ff7f0", "patch": "@@ -0,0 +1,56 @@\n+// rustfmt-else_if_brace_style: ClosingNextLine\n+\n+fn main() {\n+    if false {\n+        ();\n+        ();\n+    }\n+\n+    if false\n+    // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a = if 0 > 1 {\n+        unreachable!()\n+    }\n+    else {\n+        0x0\n+    };\n+\n+\n+    if true {\n+        ();\n+    }\n+    else if false {\n+        ();\n+        ();\n+    }\n+    else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true\n+    // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false\n+    // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    }\n+    else\n+    // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}]}