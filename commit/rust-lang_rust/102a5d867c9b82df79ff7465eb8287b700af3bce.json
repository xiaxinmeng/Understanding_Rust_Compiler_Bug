{"sha": "102a5d867c9b82df79ff7465eb8287b700af3bce", "node_id": "C_kwDOAAsO6NoAKDEwMmE1ZDg2N2M5YjgyZGY3OWZmNzQ2NWViODI4N2I3MDBhZjNiY2U", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-11-20T02:22:17Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-11-20T02:22:17Z"}, "message": "Print all features with --print target-features, including aliases and tied features", "tree": {"sha": "53ae7ddfd9439aee9283971ba699052e2271ef53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53ae7ddfd9439aee9283971ba699052e2271ef53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/102a5d867c9b82df79ff7465eb8287b700af3bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/102a5d867c9b82df79ff7465eb8287b700af3bce", "html_url": "https://github.com/rust-lang/rust/commit/102a5d867c9b82df79ff7465eb8287b700af3bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/102a5d867c9b82df79ff7465eb8287b700af3bce/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d82ed7a4ad94a538bb87e5016e7d5ce0bd434b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d82ed7a4ad94a538bb87e5016e7d5ce0bd434b", "html_url": "https://github.com/rust-lang/rust/commit/c5d82ed7a4ad94a538bb87e5016e7d5ce0bd434b"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "8383a9c8535563a2b70b0f555ca419977dd5480f", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/102a5d867c9b82df79ff7465eb8287b700af3bce/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102a5d867c9b82df79ff7465eb8287b700af3bce/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=102a5d867c9b82df79ff7465eb8287b700af3bce", "patch": "@@ -292,30 +292,33 @@ fn llvm_target_features(tm: &llvm::TargetMachine) -> Vec<(&str, &str)> {\n }\n \n fn print_target_features(sess: &Session, tm: &llvm::TargetMachine) {\n-    let mut target_features = llvm_target_features(tm);\n+    let mut llvm_target_features = llvm_target_features(tm);\n+    let mut known_llvm_target_features = FxHashSet::<&'static str>::default();\n     let mut rustc_target_features = supported_target_features(sess)\n         .iter()\n-        .filter_map(|(feature, _gate)| {\n-            for llvm_feature in to_llvm_features(sess, *feature) {\n+        .map(|(feature, _gate)| {\n+            let desc = if let Some(llvm_feature) = to_llvm_features(sess, *feature).first() {\n                 // LLVM asserts that these are sorted. LLVM and Rust both use byte comparison for these strings.\n-                match target_features.binary_search_by_key(&llvm_feature, |(f, _d)| f).ok().map(\n-                    |index| {\n-                        let (_f, desc) = target_features.remove(index);\n-                        (*feature, desc)\n-                    },\n-                ) {\n-                    Some(v) => return Some(v),\n-                    None => {}\n+                match llvm_target_features.binary_search_by_key(&llvm_feature, |(f, _d)| f).ok() {\n+                    Some(index) => {\n+                        known_llvm_target_features.insert(llvm_feature);\n+                        llvm_target_features[index].1\n+                    }\n+                    None => \"\",\n                 }\n-            }\n-            None\n+            } else {\n+                \"\"\n+            };\n+            (*feature, desc)\n         })\n         .collect::<Vec<_>>();\n     rustc_target_features.extend_from_slice(&[(\n         \"crt-static\",\n         \"Enables C Run-time Libraries to be statically linked\",\n     )]);\n-    let max_feature_len = target_features\n+    llvm_target_features.retain(|(f, _d)| !known_llvm_target_features.contains(f));\n+\n+    let max_feature_len = llvm_target_features\n         .iter()\n         .chain(rustc_target_features.iter())\n         .map(|(feature, _desc)| feature.len())\n@@ -327,10 +330,10 @@ fn print_target_features(sess: &Session, tm: &llvm::TargetMachine) {\n         println!(\"    {1:0$} - {2}.\", max_feature_len, feature, desc);\n     }\n     println!(\"\\nCode-generation features supported by LLVM for this target:\");\n-    for (feature, desc) in &target_features {\n+    for (feature, desc) in &llvm_target_features {\n         println!(\"    {1:0$} - {2}.\", max_feature_len, feature, desc);\n     }\n-    if target_features.is_empty() {\n+    if llvm_target_features.is_empty() {\n         println!(\"    Target features listing is not supported by this LLVM version.\");\n     }\n     println!(\"\\nUse +feature to enable a feature, or -feature to disable it.\");"}]}