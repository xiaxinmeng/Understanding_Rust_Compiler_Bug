{"sha": "122549fd0959634d0255ba40be6c994e9e60d791", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMjU0OWZkMDk1OTYzNGQwMjU1YmE0MGJlNmM5OTRlOWU2MGQ3OTE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-26T14:03:45Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-26T14:03:45Z"}, "message": "Simplify `read` logic", "tree": {"sha": "9ab52693f5d3257fa32cc2723725b8dcbeecb684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab52693f5d3257fa32cc2723725b8dcbeecb684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/122549fd0959634d0255ba40be6c994e9e60d791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/122549fd0959634d0255ba40be6c994e9e60d791", "html_url": "https://github.com/rust-lang/rust/commit/122549fd0959634d0255ba40be6c994e9e60d791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/122549fd0959634d0255ba40be6c994e9e60d791/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7967f6b058b3dbf8608a76b0fbe165585a2b77c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7967f6b058b3dbf8608a76b0fbe165585a2b77c", "html_url": "https://github.com/rust-lang/rust/commit/d7967f6b058b3dbf8608a76b0fbe165585a2b77c"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "e8c42eb9a301771b4e8df7126cf75eac34890931", "filename": "src/shims/fs.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/122549fd0959634d0255ba40be6c994e9e60d791/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122549fd0959634d0255ba40be6c994e9e60d791/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=122549fd0959634d0255ba40be6c994e9e60d791", "patch": "@@ -177,15 +177,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // We want to read at most `count` bytes\n             let mut bytes = vec![0; count as usize];\n             let result = handle.file.read(&mut bytes).map(|c| c as i64);\n-            let written_count = this.try_unwrap_io_result(result)?;\n-            // `try_unwrap_io_result` returns Ok(`-1`) if `result` is an error. There is no other\n-            // way of returning `-1` because the `Ok` variant of `result` contains the number of\n-            // written bytes, which is a possitive value.\n-            if written_count != -1 {\n-                // If reading to `bytes` did not fail, we write those bytes to the buffer.\n+            // If reading to `bytes` did not fail, we write those bytes to the buffer.\n+            if result.is_ok() {\n                 this.memory.write_bytes(buf, bytes)?;\n             }\n-            Ok(written_count)\n+            this.try_unwrap_io_result(result)\n         } else {\n             this.handle_not_found()\n         }"}]}