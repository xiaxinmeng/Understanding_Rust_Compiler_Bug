{"sha": "d22b1646aafd51ffc85fcd24492a6211c2c0dfab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMmIxNjQ2YWFmZDUxZmZjODVmY2QyNDQ5MmE2MjExYzJjMGRmYWI=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-14T23:18:51Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-15T05:23:37Z"}, "message": "Use str::from_utf8_lossy() for os::env() and friends\n\nParse the environment by default with from_utf8_lossy. Also provide\nbyte-vector equivalents (e.g. os::env_as_bytes()).\n\nUnfortunately, setenv() can't have a byte-vector equivalent because of\nWindows support, unless we want to define a setenv_bytes() that fails\nunder Windows for non-UTF8 (or non-UTF16).", "tree": {"sha": "51620146a800605bda3a07bc1d10c87b59760eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51620146a800605bda3a07bc1d10c87b59760eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d22b1646aafd51ffc85fcd24492a6211c2c0dfab", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d22b1646aafd51ffc85fcd24492a6211c2c0dfab", "html_url": "https://github.com/rust-lang/rust/commit/d22b1646aafd51ffc85fcd24492a6211c2c0dfab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d22b1646aafd51ffc85fcd24492a6211c2c0dfab/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c73d5ce8ab0033d88027e6ab3db956731daf544e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73d5ce8ab0033d88027e6ab3db956731daf544e", "html_url": "https://github.com/rust-lang/rust/commit/c73d5ce8ab0033d88027e6ab3db956731daf544e"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "20d1ae2f3e2214a22026390c64a022062dedf7b4", "filename": "src/libstd/os.rs", "status": "modified", "additions": 60, "deletions": 11, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d22b1646aafd51ffc85fcd24492a6211c2c0dfab/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22b1646aafd51ffc85fcd24492a6211c2c0dfab/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=d22b1646aafd51ffc85fcd24492a6211c2c0dfab", "patch": "@@ -160,10 +160,23 @@ fn with_env_lock<T>(f: || -> T) -> T {\n \n /// Returns a vector of (variable, value) pairs for all the environment\n /// variables of the current process.\n+///\n+/// Invalid UTF-8 bytes are replaced with \\uFFFD. See `str::from_utf8_lossy()`\n+/// for details.\n pub fn env() -> ~[(~str,~str)] {\n+    env_as_bytes().move_iter().map(|(k,v)| {\n+        let k = str::from_utf8_lossy(k).into_owned();\n+        let v = str::from_utf8_lossy(v).into_owned();\n+        (k,v)\n+    }).collect()\n+}\n+\n+/// Returns a vector of (variable, value) byte-vector pairs for all the\n+/// environment variables of the current process.\n+pub fn env_as_bytes() -> ~[(~[u8],~[u8])] {\n     unsafe {\n         #[cfg(windows)]\n-        unsafe fn get_env_pairs() -> ~[~str] {\n+        unsafe fn get_env_pairs() -> ~[~[u8]] {\n             use c_str;\n             use str::StrSlice;\n \n@@ -178,13 +191,15 @@ pub fn env() -> ~[(~str,~str)] {\n             }\n             let mut result = ~[];\n             c_str::from_c_multistring(ch as *c_char, None, |cstr| {\n-                result.push(cstr.as_str().unwrap().to_owned());\n+                result.push(cstr.as_bytes_no_nul().to_owned());\n             });\n             FreeEnvironmentStringsA(ch);\n             result\n         }\n         #[cfg(unix)]\n-        unsafe fn get_env_pairs() -> ~[~str] {\n+        unsafe fn get_env_pairs() -> ~[~[u8]] {\n+            use c_str::CString;\n+\n             extern {\n                 fn rust_env_pairs() -> **c_char;\n             }\n@@ -195,20 +210,19 @@ pub fn env() -> ~[(~str,~str)] {\n             }\n             let mut result = ~[];\n             ptr::array_each(environ, |e| {\n-                let env_pair = str::raw::from_c_str(e);\n-                debug!(\"get_env_pairs: {}\", env_pair);\n+                let env_pair = CString::new(e, false).as_bytes_no_nul().to_owned();\n                 result.push(env_pair);\n             });\n             result\n         }\n \n-        fn env_convert(input: ~[~str]) -> ~[(~str, ~str)] {\n+        fn env_convert(input: ~[~[u8]]) -> ~[(~[u8], ~[u8])] {\n             let mut pairs = ~[];\n             for p in input.iter() {\n-                let vs: ~[&str] = p.splitn('=', 1).collect();\n-                debug!(\"splitting: len: {}\", vs.len());\n-                assert_eq!(vs.len(), 2);\n-                pairs.push((vs[0].to_owned(), vs[1].to_owned()));\n+                let vs: ~[&[u8]] = p.splitn(1, |b| *b == '=' as u8).collect();\n+                let key = vs[0].to_owned();\n+                let val = (if vs.len() < 2 { ~[] } else { vs[1].to_owned() });\n+                pairs.push((key, val));\n             }\n             pairs\n         }\n@@ -222,14 +236,34 @@ pub fn env() -> ~[(~str,~str)] {\n #[cfg(unix)]\n /// Fetches the environment variable `n` from the current process, returning\n /// None if the variable isn't set.\n+///\n+/// Any invalid UTF-8 bytes in the value are replaced by \\uFFFD. See\n+/// `str::from_utf8_lossy()` for details.\n+///\n+/// # Failure\n+///\n+/// Fails if `n` has any interior NULs.\n pub fn getenv(n: &str) -> Option<~str> {\n+    getenv_as_bytes(n).map(|v| str::from_utf8_lossy(v).into_owned())\n+}\n+\n+#[cfg(unix)]\n+/// Fetches the environment variable `n` byte vector from the current process,\n+/// returning None if the variable isn't set.\n+///\n+/// # Failure\n+///\n+/// Fails if `n` has any interior NULs.\n+pub fn getenv_as_bytes(n: &str) -> Option<~[u8]> {\n+    use c_str::CString;\n+\n     unsafe {\n         with_env_lock(|| {\n             let s = n.with_c_str(|buf| libc::getenv(buf));\n             if s.is_null() {\n                 None\n             } else {\n-                Some(str::raw::from_c_str(s))\n+                Some(CString::new(s, false).as_bytes_no_nul().to_owned())\n             }\n         })\n     }\n@@ -251,10 +285,21 @@ pub fn getenv(n: &str) -> Option<~str> {\n     }\n }\n \n+#[cfg(windows)]\n+/// Fetches the environment variable `n` byte vector from the current process,\n+/// returning None if the variable isn't set.\n+pub fn getenv_as_bytes(n: &str) -> Option<~[u8]> {\n+    getenv(n).map(|s| s.into_bytes())\n+}\n+\n \n #[cfg(unix)]\n /// Sets the environment variable `n` to the value `v` for the currently running\n /// process\n+///\n+/// # Failure\n+///\n+/// Fails if `n` or `v` have any interior NULs.\n pub fn setenv(n: &str, v: &str) {\n     unsafe {\n         with_env_lock(|| {\n@@ -285,6 +330,10 @@ pub fn setenv(n: &str, v: &str) {\n }\n \n /// Remove a variable from the environment entirely\n+///\n+/// # Failure\n+///\n+/// Fails (on unix) if `n` has any interior NULs.\n pub fn unsetenv(n: &str) {\n     #[cfg(unix)]\n     fn _unsetenv(n: &str) {"}]}