{"sha": "ce340af738909feae304f6617bcef55bbb8b7101", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMzQwYWY3Mzg5MDlmZWFlMzA0ZjY2MTdiY2VmNTViYmI4YjcxMDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-03T16:39:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-01T18:04:14Z"}, "message": "move outlives_components onto tcx", "tree": {"sha": "611f26bb19311dbec9efdb97edda72da1c6ca15f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611f26bb19311dbec9efdb97edda72da1c6ca15f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce340af738909feae304f6617bcef55bbb8b7101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce340af738909feae304f6617bcef55bbb8b7101", "html_url": "https://github.com/rust-lang/rust/commit/ce340af738909feae304f6617bcef55bbb8b7101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce340af738909feae304f6617bcef55bbb8b7101/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3cc3749271cf21e9f133e7d48136efed11f3be4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3cc3749271cf21e9f133e7d48136efed11f3be4", "html_url": "https://github.com/rust-lang/rust/commit/f3cc3749271cf21e9f133e7d48136efed11f3be4"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "51feab9d40c9a72d0d02bea8b7e3b2969ff1bc0b", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce340af738909feae304f6617bcef55bbb8b7101/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce340af738909feae304f6617bcef55bbb8b7101/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=ce340af738909feae304f6617bcef55bbb8b7101", "patch": "@@ -12,8 +12,7 @@\n // refers to rules defined in RFC 1214 (`OutlivesFooBar`), so see that\n // RFC for reference.\n \n-use infer::InferCtxt;\n-use ty::{self, Ty, TypeFoldable};\n+use ty::{self, Ty, TyCtxt, TypeFoldable};\n \n #[derive(Debug)]\n pub enum Component<'tcx> {\n@@ -55,9 +54,9 @@ pub enum Component<'tcx> {\n     EscapingProjection(Vec<Component<'tcx>>),\n }\n \n-impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Returns all the things that must outlive `'a` for the condition\n-    /// `ty0: 'a` to hold.\n+    /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n     pub fn outlives_components(&self, ty0: Ty<'tcx>)\n                                -> Vec<Component<'tcx>> {\n         let mut components = vec![];\n@@ -148,16 +147,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            // If we encounter an inference variable, try to resolve it\n-            // and proceed with resolved version. If we cannot resolve it,\n-            // then record the unresolved variable as a component.\n-            ty::TyInfer(_) => {\n-                let ty = self.resolve_type_vars_if_possible(&ty);\n-                if let ty::TyInfer(infer_ty) = ty.sty {\n-                    out.push(Component::UnresolvedInferenceVariable(infer_ty));\n-                } else {\n-                    self.compute_components(ty, out);\n-                }\n+            // We assume that inference variables are fully resolved.\n+            // So, if we encounter an inference variable, just record\n+            // the unresolved variable as a component.\n+            ty::TyInfer(infer_ty) => {\n+                out.push(Component::UnresolvedInferenceVariable(infer_ty));\n             }\n \n             // Most types do not introduce any region binders, nor"}, {"sha": "1392855fdb66ab9dd207ed58c262e1607191300d", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce340af738909feae304f6617bcef55bbb8b7101/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce340af738909feae304f6617bcef55bbb8b7101/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=ce340af738909feae304f6617bcef55bbb8b7101", "patch": "@@ -178,7 +178,8 @@ pub fn implied_bounds<'a, 'gcx, 'tcx>(\n                         match infcx.tcx.no_late_bound_regions(data) {\n                             None => vec![],\n                             Some(ty::OutlivesPredicate(ty_a, r_b)) => {\n-                                let components = infcx.outlives_components(ty_a);\n+                                let ty_a = infcx.resolve_type_vars_if_possible(&ty_a);\n+                                let components = infcx.tcx.outlives_components(ty_a);\n                                 implied_bounds_from_components(r_b, components)\n                             }\n                         },"}, {"sha": "23201acf8eebfa567af77630413bdac995c1d51c", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce340af738909feae304f6617bcef55bbb8b7101/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce340af738909feae304f6617bcef55bbb8b7101/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=ce340af738909feae304f6617bcef55bbb8b7101", "patch": "@@ -1474,7 +1474,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n \n         assert!(!ty.has_escaping_regions());\n \n-        let components = self.outlives_components(ty);\n+        let components = self.tcx.outlives_components(ty);\n         self.components_must_outlive(origin, components, region);\n     }\n "}]}