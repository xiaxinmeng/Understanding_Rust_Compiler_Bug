{"sha": "d909dad0667db82576e2d1bc2df1f0f30023d0e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDlkYWQwNjY3ZGI4MjU3NmUyZDFiYzJkZjFmMGYzMDAyM2QwZTg=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-01-23T01:08:21Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-01-23T11:35:52Z"}, "message": "Clean up `isize`, `usize`. Don't bench allocation but formatting.", "tree": {"sha": "afeac6a6b3f9243d7770beffdbb6c72a6fd05e7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afeac6a6b3f9243d7770beffdbb6c72a6fd05e7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d909dad0667db82576e2d1bc2df1f0f30023d0e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d909dad0667db82576e2d1bc2df1f0f30023d0e8", "html_url": "https://github.com/rust-lang/rust/commit/d909dad0667db82576e2d1bc2df1f0f30023d0e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d909dad0667db82576e2d1bc2df1f0f30023d0e8/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8160fc4786383fb2df5f99d7e35a3e6ac82c1b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12", "html_url": "https://github.com/rust-lang/rust/commit/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12"}], "stats": {"total": 142, "additions": 72, "deletions": 70}, "files": [{"sha": "e7792014446816c43fed31dae7cbe1c9ef285af0", "filename": "src/libcoretest/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d909dad0667db82576e2d1bc2df1f0f30023d0e8/src%2Flibcoretest%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d909dad0667db82576e2d1bc2df1f0f30023d0e8/src%2Flibcoretest%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fmod.rs?ref=d909dad0667db82576e2d1bc2df1f0f30023d0e8", "patch": "@@ -14,5 +14,5 @@ mod num;\n fn test_format_flags() {\n     // No residual flags left by pointer formatting\n     let p = \"\".as_ptr();\n-    assert_eq!(format!(\"{:p} {:x}\", p, 16u), format!(\"{:p} 10\", p));\n+    assert_eq!(format!(\"{:p} {:x}\", p, 16), format!(\"{:p} 10\", p));\n }"}, {"sha": "17180076cd8054feed8269470b647e9edde7ea6f", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 71, "deletions": 69, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/d909dad0667db82576e2d1bc2df1f0f30023d0e8/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d909dad0667db82576e2d1bc2df1f0f30023d0e8/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=d909dad0667db82576e2d1bc2df1f0f30023d0e8", "patch": "@@ -16,115 +16,115 @@ fn test_format_int() {\n     // Formatting integers should select the right implementation based off\n     // the type of the argument. Also, hex/octal/binary should be defined\n     // for integers, but they shouldn't emit the negative sign.\n-    assert!(format!(\"{}\", 1i) == \"1\");\n+    assert!(format!(\"{}\", 1is) == \"1\");\n     assert!(format!(\"{}\", 1i8) == \"1\");\n     assert!(format!(\"{}\", 1i16) == \"1\");\n     assert!(format!(\"{}\", 1i32) == \"1\");\n     assert!(format!(\"{}\", 1i64) == \"1\");\n-    assert!(format!(\"{}\", -1i) == \"-1\");\n+    assert!(format!(\"{}\", -1is) == \"-1\");\n     assert!(format!(\"{}\", -1i8) == \"-1\");\n     assert!(format!(\"{}\", -1i16) == \"-1\");\n     assert!(format!(\"{}\", -1i32) == \"-1\");\n     assert!(format!(\"{}\", -1i64) == \"-1\");\n-    assert!(format!(\"{:?}\", 1i) == \"1\");\n+    assert!(format!(\"{:?}\", 1is) == \"1\");\n     assert!(format!(\"{:?}\", 1i8) == \"1\");\n     assert!(format!(\"{:?}\", 1i16) == \"1\");\n     assert!(format!(\"{:?}\", 1i32) == \"1\");\n     assert!(format!(\"{:?}\", 1i64) == \"1\");\n-    assert!(format!(\"{:b}\", 1i) == \"1\");\n+    assert!(format!(\"{:b}\", 1is) == \"1\");\n     assert!(format!(\"{:b}\", 1i8) == \"1\");\n     assert!(format!(\"{:b}\", 1i16) == \"1\");\n     assert!(format!(\"{:b}\", 1i32) == \"1\");\n     assert!(format!(\"{:b}\", 1i64) == \"1\");\n-    assert!(format!(\"{:x}\", 1i) == \"1\");\n+    assert!(format!(\"{:x}\", 1is) == \"1\");\n     assert!(format!(\"{:x}\", 1i8) == \"1\");\n     assert!(format!(\"{:x}\", 1i16) == \"1\");\n     assert!(format!(\"{:x}\", 1i32) == \"1\");\n     assert!(format!(\"{:x}\", 1i64) == \"1\");\n-    assert!(format!(\"{:X}\", 1i) == \"1\");\n+    assert!(format!(\"{:X}\", 1is) == \"1\");\n     assert!(format!(\"{:X}\", 1i8) == \"1\");\n     assert!(format!(\"{:X}\", 1i16) == \"1\");\n     assert!(format!(\"{:X}\", 1i32) == \"1\");\n     assert!(format!(\"{:X}\", 1i64) == \"1\");\n-    assert!(format!(\"{:o}\", 1i) == \"1\");\n+    assert!(format!(\"{:o}\", 1is) == \"1\");\n     assert!(format!(\"{:o}\", 1i8) == \"1\");\n     assert!(format!(\"{:o}\", 1i16) == \"1\");\n     assert!(format!(\"{:o}\", 1i32) == \"1\");\n     assert!(format!(\"{:o}\", 1i64) == \"1\");\n \n-    assert!(format!(\"{}\", 1u) == \"1\");\n+    assert!(format!(\"{}\", 1us) == \"1\");\n     assert!(format!(\"{}\", 1u8) == \"1\");\n     assert!(format!(\"{}\", 1u16) == \"1\");\n     assert!(format!(\"{}\", 1u32) == \"1\");\n     assert!(format!(\"{}\", 1u64) == \"1\");\n-    assert!(format!(\"{:?}\", 1u) == \"1\");\n+    assert!(format!(\"{:?}\", 1us) == \"1\");\n     assert!(format!(\"{:?}\", 1u8) == \"1\");\n     assert!(format!(\"{:?}\", 1u16) == \"1\");\n     assert!(format!(\"{:?}\", 1u32) == \"1\");\n     assert!(format!(\"{:?}\", 1u64) == \"1\");\n-    assert!(format!(\"{:b}\", 1u) == \"1\");\n+    assert!(format!(\"{:b}\", 1us) == \"1\");\n     assert!(format!(\"{:b}\", 1u8) == \"1\");\n     assert!(format!(\"{:b}\", 1u16) == \"1\");\n     assert!(format!(\"{:b}\", 1u32) == \"1\");\n     assert!(format!(\"{:b}\", 1u64) == \"1\");\n-    assert!(format!(\"{:x}\", 1u) == \"1\");\n+    assert!(format!(\"{:x}\", 1us) == \"1\");\n     assert!(format!(\"{:x}\", 1u8) == \"1\");\n     assert!(format!(\"{:x}\", 1u16) == \"1\");\n     assert!(format!(\"{:x}\", 1u32) == \"1\");\n     assert!(format!(\"{:x}\", 1u64) == \"1\");\n-    assert!(format!(\"{:X}\", 1u) == \"1\");\n+    assert!(format!(\"{:X}\", 1us) == \"1\");\n     assert!(format!(\"{:X}\", 1u8) == \"1\");\n     assert!(format!(\"{:X}\", 1u16) == \"1\");\n     assert!(format!(\"{:X}\", 1u32) == \"1\");\n     assert!(format!(\"{:X}\", 1u64) == \"1\");\n-    assert!(format!(\"{:o}\", 1u) == \"1\");\n+    assert!(format!(\"{:o}\", 1us) == \"1\");\n     assert!(format!(\"{:o}\", 1u8) == \"1\");\n     assert!(format!(\"{:o}\", 1u16) == \"1\");\n     assert!(format!(\"{:o}\", 1u32) == \"1\");\n     assert!(format!(\"{:o}\", 1u64) == \"1\");\n \n     // Test a larger number\n-    assert!(format!(\"{:b}\", 55i) == \"110111\");\n-    assert!(format!(\"{:o}\", 55i) == \"67\");\n-    assert!(format!(\"{}\", 55i) == \"55\");\n-    assert!(format!(\"{:x}\", 55i) == \"37\");\n-    assert!(format!(\"{:X}\", 55i) == \"37\");\n+    assert!(format!(\"{:b}\", 55) == \"110111\");\n+    assert!(format!(\"{:o}\", 55) == \"67\");\n+    assert!(format!(\"{}\", 55) == \"55\");\n+    assert!(format!(\"{:x}\", 55) == \"37\");\n+    assert!(format!(\"{:X}\", 55) == \"37\");\n }\n \n #[test]\n fn test_format_int_zero() {\n-    assert!(format!(\"{}\", 0i) == \"0\");\n-    assert!(format!(\"{:?}\", 0i) == \"0\");\n-    assert!(format!(\"{:b}\", 0i) == \"0\");\n-    assert!(format!(\"{:o}\", 0i) == \"0\");\n-    assert!(format!(\"{:x}\", 0i) == \"0\");\n-    assert!(format!(\"{:X}\", 0i) == \"0\");\n-\n-    assert!(format!(\"{}\", 0u) == \"0\");\n-    assert!(format!(\"{:?}\", 0u) == \"0\");\n-    assert!(format!(\"{:b}\", 0u) == \"0\");\n-    assert!(format!(\"{:o}\", 0u) == \"0\");\n-    assert!(format!(\"{:x}\", 0u) == \"0\");\n-    assert!(format!(\"{:X}\", 0u) == \"0\");\n+    assert!(format!(\"{}\", 0) == \"0\");\n+    assert!(format!(\"{:?}\", 0) == \"0\");\n+    assert!(format!(\"{:b}\", 0) == \"0\");\n+    assert!(format!(\"{:o}\", 0) == \"0\");\n+    assert!(format!(\"{:x}\", 0) == \"0\");\n+    assert!(format!(\"{:X}\", 0) == \"0\");\n+\n+    assert!(format!(\"{}\", 0u32) == \"0\");\n+    assert!(format!(\"{:?}\", 0u32) == \"0\");\n+    assert!(format!(\"{:b}\", 0u32) == \"0\");\n+    assert!(format!(\"{:o}\", 0u32) == \"0\");\n+    assert!(format!(\"{:x}\", 0u32) == \"0\");\n+    assert!(format!(\"{:X}\", 0u32) == \"0\");\n }\n \n #[test]\n fn test_format_int_flags() {\n-    assert!(format!(\"{:3}\", 1i) == \"  1\");\n-    assert!(format!(\"{:>3}\", 1i) == \"  1\");\n-    assert!(format!(\"{:>+3}\", 1i) == \" +1\");\n-    assert!(format!(\"{:<3}\", 1i) == \"1  \");\n-    assert!(format!(\"{:#}\", 1i) == \"1\");\n-    assert!(format!(\"{:#x}\", 10i) == \"0xa\");\n-    assert!(format!(\"{:#X}\", 10i) == \"0xA\");\n-    assert!(format!(\"{:#5x}\", 10i) == \"  0xa\");\n-    assert!(format!(\"{:#o}\", 10i) == \"0o12\");\n-    assert!(format!(\"{:08x}\", 10i) == \"0000000a\");\n-    assert!(format!(\"{:8x}\", 10i) == \"       a\");\n-    assert!(format!(\"{:<8x}\", 10i) == \"a       \");\n-    assert!(format!(\"{:>8x}\", 10i) == \"       a\");\n-    assert!(format!(\"{:#08x}\", 10i) == \"0x00000a\");\n-    assert!(format!(\"{:08}\", -10i) == \"-0000010\");\n+    assert!(format!(\"{:3}\", 1) == \"  1\");\n+    assert!(format!(\"{:>3}\", 1) == \"  1\");\n+    assert!(format!(\"{:>+3}\", 1) == \" +1\");\n+    assert!(format!(\"{:<3}\", 1) == \"1  \");\n+    assert!(format!(\"{:#}\", 1) == \"1\");\n+    assert!(format!(\"{:#x}\", 10) == \"0xa\");\n+    assert!(format!(\"{:#X}\", 10) == \"0xA\");\n+    assert!(format!(\"{:#5x}\", 10) == \"  0xa\");\n+    assert!(format!(\"{:#o}\", 10) == \"0o12\");\n+    assert!(format!(\"{:08x}\", 10) == \"0000000a\");\n+    assert!(format!(\"{:8x}\", 10) == \"       a\");\n+    assert!(format!(\"{:<8x}\", 10) == \"a       \");\n+    assert!(format!(\"{:>8x}\", 10) == \"       a\");\n+    assert!(format!(\"{:#08x}\", 10) == \"0x00000a\");\n+    assert!(format!(\"{:08}\", -10) == \"-0000010\");\n     assert!(format!(\"{:x}\", -1u8) == \"ff\");\n     assert!(format!(\"{:X}\", -1u8) == \"FF\");\n     assert!(format!(\"{:b}\", -1u8) == \"11111111\");\n@@ -137,12 +137,12 @@ fn test_format_int_flags() {\n \n #[test]\n fn test_format_int_sign_padding() {\n-    assert!(format!(\"{:+5}\", 1i) == \"   +1\");\n-    assert!(format!(\"{:+5}\", -1i) == \"   -1\");\n-    assert!(format!(\"{:05}\", 1i) == \"00001\");\n-    assert!(format!(\"{:05}\", -1i) == \"-0001\");\n-    assert!(format!(\"{:+05}\", 1i) == \"+0001\");\n-    assert!(format!(\"{:+05}\", -1i) == \"-0001\");\n+    assert!(format!(\"{:+5}\", 1) == \"   +1\");\n+    assert!(format!(\"{:+5}\", -1) == \"   -1\");\n+    assert!(format!(\"{:05}\", 1) == \"00001\");\n+    assert!(format!(\"{:05}\", -1) == \"-0001\");\n+    assert!(format!(\"{:+05}\", 1) == \"+0001\");\n+    assert!(format!(\"{:+05}\", -1) == \"-0001\");\n }\n \n #[test]\n@@ -156,96 +156,98 @@ fn test_format_int_twos_complement() {\n \n #[test]\n fn test_format_radix() {\n-    assert!(format!(\"{:04}\", radix(3i, 2)) == \"0011\");\n-    assert!(format!(\"{}\", radix(55i, 36)) == \"1j\");\n+    assert!(format!(\"{:04}\", radix(3, 2)) == \"0011\");\n+    assert!(format!(\"{}\", radix(55, 36)) == \"1j\");\n }\n \n #[test]\n #[should_fail]\n fn test_radix_base_too_large() {\n-    let _ = radix(55i, 37);\n+    let _ = radix(55, 37);\n }\n \n-mod uint {\n+mod u32 {\n     use test::Bencher;\n     use core::fmt::radix;\n     use std::rand::{weak_rng, Rng};\n+    use std::io::util::NullWriter;\n \n     #[bench]\n     fn format_bin(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:b}\", rng.gen::<uint>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{:b}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_oct(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:o}\", rng.gen::<uint>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{:o}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_dec(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{}\", rng.gen::<uint>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_hex(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:x}\", rng.gen::<uint>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{:x}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_show(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:?}\", rng.gen::<uint>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{:?}\", rng.gen::<u32>()) })\n     }\n \n     #[bench]\n     fn format_base_36(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{}\", radix(rng.gen::<uint>(), 36)); })\n+        b.iter(|| { write!(&mut NullWriter, \"{}\", radix(rng.gen::<u32>(), 36)) })\n     }\n }\n \n-mod int {\n+mod i32 {\n     use test::Bencher;\n     use core::fmt::radix;\n     use std::rand::{weak_rng, Rng};\n+    use std::io::util::NullWriter;\n \n     #[bench]\n     fn format_bin(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:b}\", rng.gen::<int>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{:b}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_oct(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:o}\", rng.gen::<int>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{:o}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_dec(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{}\", rng.gen::<int>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_hex(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:x}\", rng.gen::<int>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{:x}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_show(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:?}\", rng.gen::<int>()); })\n+        b.iter(|| { write!(&mut NullWriter, \"{:?}\", rng.gen::<i32>()) })\n     }\n \n     #[bench]\n     fn format_base_36(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{}\", radix(rng.gen::<int>(), 36)); })\n+        b.iter(|| { write!(&mut NullWriter, \"{}\", radix(rng.gen::<i32>(), 36)) })\n     }\n }"}]}