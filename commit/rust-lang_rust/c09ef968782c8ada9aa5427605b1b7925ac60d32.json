{"sha": "c09ef968782c8ada9aa5427605b1b7925ac60d32", "node_id": "C_kwDOAAsO6NoAKGMwOWVmOTY4NzgyYzhhZGE5YWE1NDI3NjA1YjFiNzkyNWFjNjBkMzI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-06T09:24:10Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-06T09:34:21Z"}, "message": "Implement _mm_shuffle_epi8", "tree": {"sha": "bde9851b69b759980e07b9fe30e293ef149b76c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bde9851b69b759980e07b9fe30e293ef149b76c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09ef968782c8ada9aa5427605b1b7925ac60d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09ef968782c8ada9aa5427605b1b7925ac60d32", "html_url": "https://github.com/rust-lang/rust/commit/c09ef968782c8ada9aa5427605b1b7925ac60d32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09ef968782c8ada9aa5427605b1b7925ac60d32/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4d0811360e79b2789f27a65eed7d3248e1e092c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d0811360e79b2789f27a65eed7d3248e1e092c", "html_url": "https://github.com/rust-lang/rust/commit/e4d0811360e79b2789f27a65eed7d3248e1e092c"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "1bf0ff64c92492226f38426dac9604713e7eb0eb", "filename": "example/std_example.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c09ef968782c8ada9aa5427605b1b7925ac60d32/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09ef968782c8ada9aa5427605b1b7925ac60d32/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=c09ef968782c8ada9aa5427605b1b7925ac60d32", "patch": "@@ -197,6 +197,7 @@ unsafe fn test_simd() {\n \n     test_mm_extract_epi8();\n     test_mm_insert_epi16();\n+    test_mm_shuffle_epi8();\n \n     test_mm256_shuffle_epi8();\n     test_mm256_permute2x128_si256();\n@@ -345,6 +346,26 @@ unsafe fn test_mm_insert_epi16() {\n     assert_eq_m128i(r, e);\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n+#[target_feature(enable = \"ssse3\")]\n+unsafe fn test_mm_shuffle_epi8() {\n+    #[rustfmt::skip]\n+        let a = _mm_setr_epi8(\n+            1, 2, 3, 4, 5, 6, 7, 8,\n+            9, 10, 11, 12, 13, 14, 15, 16,\n+        );\n+    #[rustfmt::skip]\n+        let b = _mm_setr_epi8(\n+            4, 128_u8 as i8, 4, 3,\n+            24, 12, 6, 19,\n+            12, 5, 5, 10,\n+            4, 1, 8, 0,\n+        );\n+    let expected = _mm_setr_epi8(5, 0, 5, 4, 9, 13, 7, 4, 13, 6, 6, 11, 5, 2, 9, 1);\n+    let r = _mm_shuffle_epi8(a, b);\n+    assert_eq_m128i(r, expected);\n+}\n+\n #[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"avx2\")]\n unsafe fn test_mm256_shuffle_epi8() {"}, {"sha": "bbd5f4be78331ab64a8d3dfddbef726cb7f2ce81", "filename": "src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c09ef968782c8ada9aa5427605b1b7925ac60d32/src%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09ef968782c8ada9aa5427605b1b7925ac60d32/src%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_x86.rs?ref=c09ef968782c8ada9aa5427605b1b7925ac60d32", "patch": "@@ -222,7 +222,7 @@ pub(crate) fn codegen_x86_llvm_intrinsic_call<'tcx>(\n                 _ => fx.bcx.ins().iconst(types::I32, 0),\n             });\n         }\n-        \"llvm.x86.avx2.pshuf.b\" => {\n+        \"llvm.x86.ssse3.pshuf.b.128\" | \"llvm.x86.avx2.pshuf.b\" => {\n             let (a, b) = match args {\n                 [a, b] => (a, b),\n                 _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n@@ -241,15 +241,18 @@ pub(crate) fn codegen_x86_llvm_intrinsic_call<'tcx>(\n                 let res = fx.bcx.ins().select(is_zero, zero, a_lane);\n                 ret.place_lane(fx, i).to_ptr().store(fx, res, MemFlags::trusted());\n             }\n-            for i in 16..32 {\n-                let b_lane = b.value_lane(fx, i).load_scalar(fx);\n-                let is_zero = fx.bcx.ins().band_imm(b_lane, 0x80);\n-                let b_lane_masked = fx.bcx.ins().band_imm(b_lane, 0xf);\n-                let a_idx = fx.bcx.ins().iadd_imm(b_lane_masked, 16);\n-                let a_idx = fx.bcx.ins().uextend(fx.pointer_type, a_idx);\n-                let a_lane = a.value_lane_dyn(fx, a_idx).load_scalar(fx);\n-                let res = fx.bcx.ins().select(is_zero, zero, a_lane);\n-                ret.place_lane(fx, i).to_ptr().store(fx, res, MemFlags::trusted());\n+\n+            if intrinsic == \"llvm.x86.avx2.pshuf.b\" {\n+                for i in 16..32 {\n+                    let b_lane = b.value_lane(fx, i).load_scalar(fx);\n+                    let is_zero = fx.bcx.ins().band_imm(b_lane, 0x80);\n+                    let b_lane_masked = fx.bcx.ins().band_imm(b_lane, 0xf);\n+                    let a_idx = fx.bcx.ins().iadd_imm(b_lane_masked, 16);\n+                    let a_idx = fx.bcx.ins().uextend(fx.pointer_type, a_idx);\n+                    let a_lane = a.value_lane_dyn(fx, a_idx).load_scalar(fx);\n+                    let res = fx.bcx.ins().select(is_zero, zero, a_lane);\n+                    ret.place_lane(fx, i).to_ptr().store(fx, res, MemFlags::trusted());\n+                }\n             }\n         }\n         \"llvm.x86.avx2.vperm2i128\" => {"}]}