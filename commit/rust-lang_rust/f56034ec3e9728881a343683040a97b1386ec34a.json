{"sha": "f56034ec3e9728881a343683040a97b1386ec34a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NjAzNGVjM2U5NzI4ODgxYTM0MzY4MzA0MGE5N2IxMzg2ZWMzNGE=", "commit": {"author": {"name": "ibraheemdev", "email": "ibrah1440@gmail.com", "date": "2021-07-24T21:34:58Z"}, "committer": {"name": "ibraheemdev", "email": "ibrah1440@gmail.com", "date": "2021-08-31T21:29:42Z"}, "message": "emit suggestion byte literal is passed to `format!`", "tree": {"sha": "136a645b83ab9478198bbc9be3af363f15d6d7b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/136a645b83ab9478198bbc9be3af363f15d6d7b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f56034ec3e9728881a343683040a97b1386ec34a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f56034ec3e9728881a343683040a97b1386ec34a", "html_url": "https://github.com/rust-lang/rust/commit/f56034ec3e9728881a343683040a97b1386ec34a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f56034ec3e9728881a343683040a97b1386ec34a/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d49aaad4fde33469fdb786c29838a95a5d8a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d49aaad4fde33469fdb786c29838a95a5d8a11", "html_url": "https://github.com/rust-lang/rust/commit/e1d49aaad4fde33469fdb786c29838a95a5d8a11"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "4500e8c6d1b948b21501d910fa262584b87f3f48", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f56034ec3e9728881a343683040a97b1386ec34a/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56034ec3e9728881a343683040a97b1386ec34a/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=f56034ec3e9728881a343683040a97b1386ec34a", "patch": "@@ -412,7 +412,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n             match expr_to_spanned_string(ecx, template_expr, msg) {\n                 Ok(template_part) => template_part,\n                 Err(err) => {\n-                    if let Some(mut err) = err {\n+                    if let Some((mut err, _)) = err {\n                         err.emit();\n                     }\n                     return DummyResult::raw_expr(sp, true);"}, {"sha": "215dcabf74c0b9dc11b334f0de42b4d09b5f7fa2", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f56034ec3e9728881a343683040a97b1386ec34a/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56034ec3e9728881a343683040a97b1386ec34a/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=f56034ec3e9728881a343683040a97b1386ec34a", "patch": "@@ -946,17 +946,19 @@ pub fn expand_preparsed_format_args(\n         }\n         Ok(fmt) => fmt,\n         Err(err) => {\n-            if let Some(mut err) = err {\n+            if let Some((mut err, suggested)) = err {\n                 let sugg_fmt = match args.len() {\n                     0 => \"{}\".to_string(),\n                     _ => format!(\"{}{{}}\", \"{} \".repeat(args.len())),\n                 };\n-                err.span_suggestion(\n-                    fmt_sp.shrink_to_lo(),\n-                    \"you might be missing a string literal to format with\",\n-                    format!(\"\\\"{}\\\", \", sugg_fmt),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                if !suggested {\n+                    err.span_suggestion(\n+                        fmt_sp.shrink_to_lo(),\n+                        \"you might be missing a string literal to format with\",\n+                        format!(\"\\\"{}\\\", \", sugg_fmt),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err.emit();\n             }\n             return DummyResult::raw_expr(sp, true);"}, {"sha": "43b94e239eb9f83c6968771855c83adcc30d342c", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f56034ec3e9728881a343683040a97b1386ec34a/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56034ec3e9728881a343683040a97b1386ec34a/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=f56034ec3e9728881a343683040a97b1386ec34a", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n@@ -1133,36 +1133,51 @@ impl<'a> ExtCtxt<'a> {\n }\n \n /// Extracts a string literal from the macro expanded version of `expr`,\n-/// emitting `err_msg` if `expr` is not a string literal. This does not stop\n-/// compilation on error, merely emits a non-fatal error and returns `None`.\n+/// returning a diagnostic error of `err_msg` if `expr` is not a string literal.\n+/// The returned bool indicates whether an applicable suggestion has already been\n+/// added to the diagnostic to avoid emitting multiple suggestions. `Err(None)`\n+/// indicates that an ast error was encountered.\n pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n     err_msg: &str,\n-) -> Result<(Symbol, ast::StrStyle, Span), Option<DiagnosticBuilder<'a>>> {\n+) -> Result<(Symbol, ast::StrStyle, Span), Option<(DiagnosticBuilder<'a>, bool)>> {\n     // Perform eager expansion on the expression.\n     // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n     let expr = cx.expander().fully_expand_fragment(AstFragment::Expr(expr)).make_expr();\n \n     Err(match expr.kind {\n         ast::ExprKind::Lit(ref l) => match l.kind {\n             ast::LitKind::Str(s, style) => return Ok((s, style, expr.span)),\n+            ast::LitKind::ByteStr(_) => {\n+                let mut err = cx.struct_span_err(l.span, err_msg);\n+                err.span_suggestion(\n+                    expr.span.shrink_to_lo(),\n+                    \"consider removing the leading `b`\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                Some((err, true))\n+            }\n             ast::LitKind::Err(_) => None,\n-            _ => Some(cx.struct_span_err(l.span, err_msg)),\n+            _ => Some((cx.struct_span_err(l.span, err_msg), false)),\n         },\n         ast::ExprKind::Err => None,\n-        _ => Some(cx.struct_span_err(expr.span, err_msg)),\n+        _ => Some((cx.struct_span_err(expr.span, err_msg), false)),\n     })\n }\n \n+/// Extracts a string literal from the macro expanded version of `expr`,\n+/// emitting `err_msg` if `expr` is not a string literal. This does not stop\n+/// compilation on error, merely emits a non-fatal error and returns `None`.\n pub fn expr_to_string(\n     cx: &mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n     err_msg: &str,\n ) -> Option<(Symbol, ast::StrStyle)> {\n     expr_to_spanned_string(cx, expr, err_msg)\n         .map_err(|err| {\n-            err.map(|mut err| {\n+            err.map(|(mut err, _)| {\n                 err.emit();\n             })\n         })"}, {"sha": "01e0a20a5115c125731bea5af0eae8534b53df0e", "filename": "src/test/ui/issues/issue-86865.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f56034ec3e9728881a343683040a97b1386ec34a/src%2Ftest%2Fui%2Fissues%2Fissue-86865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56034ec3e9728881a343683040a97b1386ec34a/src%2Ftest%2Fui%2Fissues%2Fissue-86865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86865.rs?ref=f56034ec3e9728881a343683040a97b1386ec34a", "patch": "@@ -0,0 +1,11 @@\n+use std::fmt::Write;\n+\n+fn main() {\n+    println!(b\"foo\");\n+    //~^ ERROR format argument must be a string literal\n+    //~| HELP consider removing the leading `b`\n+    let mut s = String::new();\n+    write!(s, b\"foo{}\", \"bar\");\n+    //~^ ERROR format argument must be a string literal\n+    //~| HELP consider removing the leading `b`\n+}"}, {"sha": "eed755366311be409970a0dd9c725c85a8728311", "filename": "src/test/ui/issues/issue-86865.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f56034ec3e9728881a343683040a97b1386ec34a/src%2Ftest%2Fui%2Fissues%2Fissue-86865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f56034ec3e9728881a343683040a97b1386ec34a/src%2Ftest%2Fui%2Fissues%2Fissue-86865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86865.stderr?ref=f56034ec3e9728881a343683040a97b1386ec34a", "patch": "@@ -0,0 +1,18 @@\n+error: format argument must be a string literal\n+  --> $DIR/issue-86865.rs:4:14\n+   |\n+LL |     println!(b\"foo\");\n+   |              -^^^^^\n+   |              |\n+   |              help: consider removing the leading `b`\n+\n+error: format argument must be a string literal\n+  --> $DIR/issue-86865.rs:8:15\n+   |\n+LL |     write!(s, b\"foo{}\", \"bar\");\n+   |               -^^^^^^^\n+   |               |\n+   |               help: consider removing the leading `b`\n+\n+error: aborting due to 2 previous errors\n+"}]}