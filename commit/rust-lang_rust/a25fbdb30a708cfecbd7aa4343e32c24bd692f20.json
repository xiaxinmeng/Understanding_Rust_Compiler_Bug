{"sha": "a25fbdb30a708cfecbd7aa4343e32c24bd692f20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNWZiZGIzMGE3MDhjZmVjYmQ3YWE0MzQzZTMyYzI0YmQ2OTJmMjA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-06T14:07:45Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-06T14:07:45Z"}, "message": "Intern TypeRefs stored in Body\n\nMinor improvement to memory usage (1 MB or so)", "tree": {"sha": "6d98f5afbbcc8f694621b6bed167fc027b3242a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d98f5afbbcc8f694621b6bed167fc027b3242a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a25fbdb30a708cfecbd7aa4343e32c24bd692f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a25fbdb30a708cfecbd7aa4343e32c24bd692f20", "html_url": "https://github.com/rust-lang/rust/commit/a25fbdb30a708cfecbd7aa4343e32c24bd692f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a25fbdb30a708cfecbd7aa4343e32c24bd692f20/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d39b13996e312a8a738ed0dfccab45978fc42f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d39b13996e312a8a738ed0dfccab45978fc42f8", "html_url": "https://github.com/rust-lang/rust/commit/7d39b13996e312a8a738ed0dfccab45978fc42f8"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "bfb75a8a5995725b7dace29809885b6226fa173b", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a25fbdb30a708cfecbd7aa4343e32c24bd692f20/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25fbdb30a708cfecbd7aa4343e32c24bd692f20/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=a25fbdb30a708cfecbd7aa4343e32c24bd692f20", "patch": "@@ -30,6 +30,7 @@ use crate::{\n         LabelId, Literal, LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField,\n         Statement,\n     },\n+    intern::Interned,\n     item_scope::BuiltinShadowMode,\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n@@ -432,7 +433,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::CastExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let type_ref = Box::new(TypeRef::from_ast_opt(&self.ctx(), e.ty()));\n+                let type_ref = Interned::new(TypeRef::from_ast_opt(&self.ctx(), e.ty()));\n                 self.alloc_expr(Expr::Cast { expr, type_ref }, syntax_ptr)\n             }\n             ast::Expr::RefExpr(e) => {\n@@ -466,15 +467,16 @@ impl ExprCollector<'_> {\n                 if let Some(pl) = e.param_list() {\n                     for param in pl.params() {\n                         let pat = self.collect_pat_opt(param.pat());\n-                        let type_ref = param.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                        let type_ref =\n+                            param.ty().map(|it| Interned::new(TypeRef::from_ast(&self.ctx(), it)));\n                         args.push(pat);\n                         arg_types.push(type_ref);\n                     }\n                 }\n                 let ret_type = e\n                     .ret_type()\n                     .and_then(|r| r.ty())\n-                    .map(|it| Box::new(TypeRef::from_ast(&self.ctx(), it)));\n+                    .map(|it| Interned::new(TypeRef::from_ast(&self.ctx(), it)));\n                 let body = self.collect_expr_opt(e.body());\n                 self.alloc_expr(Expr::Lambda { args, arg_types, ret_type, body }, syntax_ptr)\n             }\n@@ -629,7 +631,8 @@ impl ExprCollector<'_> {\n                     return;\n                 }\n                 let pat = self.collect_pat_opt(stmt.pat());\n-                let type_ref = stmt.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                let type_ref =\n+                    stmt.ty().map(|it| Interned::new(TypeRef::from_ast(&self.ctx(), it)));\n                 let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n                 self.statements_in_scope.push(Statement::Let { pat, type_ref, initializer });\n             }"}, {"sha": "b4ad984bd90295e10fa14c1a5481438cd0552dd2", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a25fbdb30a708cfecbd7aa4343e32c24bd692f20/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25fbdb30a708cfecbd7aa4343e32c24bd692f20/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=a25fbdb30a708cfecbd7aa4343e32c24bd692f20", "patch": "@@ -18,6 +18,7 @@ use syntax::ast::RangeOp;\n \n use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n+    intern::Interned,\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n     BlockId,\n@@ -131,7 +132,7 @@ pub enum Expr {\n     },\n     Cast {\n         expr: ExprId,\n-        type_ref: Box<TypeRef>,\n+        type_ref: Interned<TypeRef>,\n     },\n     Ref {\n         expr: ExprId,\n@@ -161,8 +162,8 @@ pub enum Expr {\n     },\n     Lambda {\n         args: Vec<PatId>,\n-        arg_types: Vec<Option<TypeRef>>,\n-        ret_type: Option<Box<TypeRef>>,\n+        arg_types: Vec<Option<Interned<TypeRef>>>,\n+        ret_type: Option<Interned<TypeRef>>,\n         body: ExprId,\n     },\n     Tuple {\n@@ -240,7 +241,7 @@ pub struct RecordLitField {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Statement {\n-    Let { pat: PatId, type_ref: Option<TypeRef>, initializer: Option<ExprId> },\n+    Let { pat: PatId, type_ref: Option<Interned<TypeRef>>, initializer: Option<ExprId> },\n     Expr(ExprId),\n }\n "}]}