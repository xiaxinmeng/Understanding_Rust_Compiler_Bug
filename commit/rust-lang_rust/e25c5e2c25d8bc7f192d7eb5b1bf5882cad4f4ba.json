{"sha": "e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNWM1ZTJjMjVkOGJjN2YxOTJkN2ViNWIxYmY1ODgyY2FkNGY0YmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-24T16:53:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-24T16:53:15Z"}, "message": "Rollup merge of #84464 - jyn514:type-kind, r=CraftSpider\n\nrustdoc: Get rid of `clean::TypeKind`\n\nIt does exactly the same thing as ItemType.", "tree": {"sha": "a66be23157bf4d8f95b073a306e1087a6012e8ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a66be23157bf4d8f95b073a306e1087a6012e8ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghEz7CRBK7hj4Ov3rIwAAZNsIAKCAETkINe8FDrjIJT+/tJdJ\nNDOSk6nRnG4rZRiKaBnA2aEkR0qA7PrsGaUMmedmEcAk89fYnARZdFHZKhAZGR5K\nyHb7k9pGWq+yY2GjSz1CUU6916NV71vcWC2Xh6YmM1H1D3Ee2lr0CINz7RtUcu51\nwoQWWEXV2+f9x8eBazI3+Bs26lExKNfc76dwn/qTEOcEmRJMgZvju09LhoIO751+\nZijSgJgdlsPilAQvNVnq0eYbfR+enKMi7g0J8aLTxKgO/0myEEdqSiaMLQmzCeDI\nsVp/FEAYKAv+Ru+nSHPXETNtuKZ9ldh8BpKzhk+WbHV57XDmS8b6LqF+t6L8cKs=\n=4xG6\n-----END PGP SIGNATURE-----\n", "payload": "tree a66be23157bf4d8f95b073a306e1087a6012e8ff\nparent b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2\nparent ab54197a46db20c61a4f08cf0f87b64572f78447\nauthor Yuki Okushi <jtitor@2k36.org> 1619283195 +0900\ncommitter GitHub <noreply@github.com> 1619283195 +0900\n\nRollup merge of #84464 - jyn514:type-kind, r=CraftSpider\n\nrustdoc: Get rid of `clean::TypeKind`\n\nIt does exactly the same thing as ItemType.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "html_url": "https://github.com/rust-lang/rust/commit/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2", "html_url": "https://github.com/rust-lang/rust/commit/b566d0ae12aa53bfddfeafa61eaca3057a2c8ab2"}, {"sha": "ab54197a46db20c61a4f08cf0f87b64572f78447", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab54197a46db20c61a4f08cf0f87b64572f78447", "html_url": "https://github.com/rust-lang/rust/commit/ab54197a46db20c61a4f08cf0f87b64572f78447"}], "stats": {"total": 227, "additions": 93, "deletions": 134}, "files": [{"sha": "2f6a91641e48eebfa0ce46bb4f177729110bcb20", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "patch": "@@ -15,7 +15,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use crate::clean::{self, Attributes, GetDefId, ToSource, TypeKind};\n+use crate::clean::{self, Attributes, GetDefId, ToSource};\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n@@ -56,36 +56,36 @@ crate fn try_inline(\n \n     let kind = match res {\n         Res::Def(DefKind::Trait, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Trait);\n+            record_extern_fqn(cx, did, ItemType::Trait);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::TraitItem(build_external_trait(cx, did))\n         }\n         Res::Def(DefKind::Fn, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Function);\n+            record_extern_fqn(cx, did, ItemType::Function);\n             clean::FunctionItem(build_external_function(cx, did))\n         }\n         Res::Def(DefKind::Struct, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Struct);\n+            record_extern_fqn(cx, did, ItemType::Struct);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::StructItem(build_struct(cx, did))\n         }\n         Res::Def(DefKind::Union, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Union);\n+            record_extern_fqn(cx, did, ItemType::Union);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::UnionItem(build_union(cx, did))\n         }\n         Res::Def(DefKind::TyAlias, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Typedef);\n+            record_extern_fqn(cx, did, ItemType::Typedef);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::TypedefItem(build_type_alias(cx, did), false)\n         }\n         Res::Def(DefKind::Enum, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Enum);\n+            record_extern_fqn(cx, did, ItemType::Enum);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::EnumItem(build_enum(cx, did))\n         }\n         Res::Def(DefKind::ForeignTy, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Foreign);\n+            record_extern_fqn(cx, did, ItemType::ForeignType);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n             clean::ForeignTypeItem\n         }\n@@ -95,24 +95,24 @@ crate fn try_inline(\n         // their constructors.\n         Res::Def(DefKind::Ctor(..), _) | Res::SelfCtor(..) => return Some(Vec::new()),\n         Res::Def(DefKind::Mod, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Module);\n+            record_extern_fqn(cx, did, ItemType::Module);\n             clean::ModuleItem(build_module(cx, did, visited))\n         }\n         Res::Def(DefKind::Static, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Static);\n+            record_extern_fqn(cx, did, ItemType::Static);\n             clean::StaticItem(build_static(cx, did, cx.tcx.is_mutable_static(did)))\n         }\n         Res::Def(DefKind::Const, did) => {\n-            record_extern_fqn(cx, did, clean::TypeKind::Const);\n+            record_extern_fqn(cx, did, ItemType::Constant);\n             clean::ConstantItem(build_const(cx, did))\n         }\n         Res::Def(DefKind::Macro(kind), did) => {\n             let mac = build_macro(cx, did, name);\n \n             let type_kind = match kind {\n-                MacroKind::Bang => TypeKind::Macro,\n-                MacroKind::Attr => TypeKind::Attr,\n-                MacroKind::Derive => TypeKind::Derive,\n+                MacroKind::Bang => ItemType::Macro,\n+                MacroKind::Attr => ItemType::ProcAttribute,\n+                MacroKind::Derive => ItemType::ProcDerive,\n             };\n             record_extern_fqn(cx, did, type_kind);\n             mac\n@@ -157,15 +157,15 @@ crate fn load_attrs<'hir>(cx: &DocContext<'hir>, did: DefId) -> Attrs<'hir> {\n ///\n /// These names are used later on by HTML rendering to generate things like\n /// source links back to the original item.\n-crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: clean::TypeKind) {\n+crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: ItemType) {\n     let crate_name = cx.tcx.crate_name(did.krate).to_string();\n \n     let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n         // extern blocks have an empty name\n         let s = elem.data.to_string();\n         if !s.is_empty() { Some(s) } else { None }\n     });\n-    let fqn = if let clean::TypeKind::Macro = kind {\n+    let fqn = if let ItemType::Macro = kind {\n         // Check to see if it is a macro 2.0 or built-in macro\n         if matches!(\n             cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())),"}, {"sha": "2dc3f63a2d8e4b750628a1907dbf130301519041", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "patch": "@@ -36,6 +36,7 @@ use std::{mem, vec};\n \n use crate::core::{self, DocContext, ImplTraitParam};\n use crate::doctree;\n+use crate::formats::item_type::ItemType;\n \n use utils::*;\n \n@@ -154,7 +155,7 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n         let (trait_ref, bounds) = *self;\n-        inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n+        inline::record_extern_fqn(cx, trait_ref.def_id, ItemType::Trait);\n         let path = external_path(\n             cx,\n             cx.tcx.item_name(trait_ref.def_id),\n@@ -909,12 +910,6 @@ impl Clean<PolyTrait> for hir::PolyTraitRef<'_> {\n     }\n }\n \n-impl Clean<TypeKind> for hir::def::DefKind {\n-    fn clean(&self, _: &mut DocContext<'_>) -> TypeKind {\n-        (*self).into()\n-    }\n-}\n-\n impl Clean<Item> for hir::TraitItem<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let local_did = self.def_id.to_def_id();\n@@ -1449,16 +1444,16 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Adt(def, substs) => {\n                 let did = def.did;\n                 let kind = match def.adt_kind() {\n-                    AdtKind::Struct => TypeKind::Struct,\n-                    AdtKind::Union => TypeKind::Union,\n-                    AdtKind::Enum => TypeKind::Enum,\n+                    AdtKind::Struct => ItemType::Struct,\n+                    AdtKind::Union => ItemType::Union,\n+                    AdtKind::Enum => ItemType::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n                 let path = external_path(cx, cx.tcx.item_name(did), None, false, vec![], substs);\n                 ResolvedPath { path, param_names: None, did, is_generic: false }\n             }\n             ty::Foreign(did) => {\n-                inline::record_extern_fqn(cx, did, TypeKind::Foreign);\n+                inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n                 let path = external_path(\n                     cx,\n                     cx.tcx.item_name(did),\n@@ -1483,7 +1478,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     _ => cx.tcx.intern_substs(&[]),\n                 };\n \n-                inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+                inline::record_extern_fqn(cx, did, ItemType::Trait);\n \n                 let mut param_names = vec![];\n                 if let Some(b) = reg.clean(cx) {\n@@ -1493,7 +1488,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     let empty = cx.tcx.intern_substs(&[]);\n                     let path =\n                         external_path(cx, cx.tcx.item_name(did), Some(did), false, vec![], empty);\n-                    inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+                    inline::record_extern_fqn(cx, did, ItemType::Trait);\n                     let bound = GenericBound::TraitBound(\n                         PolyTrait {\n                             trait_: ResolvedPath {"}, {"sha": "0b55d276bad0eb7f03a34469463e207e74a075ca", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "patch": "@@ -1099,7 +1099,7 @@ impl GenericBound {\n         let did = cx.tcx.require_lang_item(LangItem::Sized, None);\n         let empty = cx.tcx.intern_substs(&[]);\n         let path = external_path(cx, cx.tcx.item_name(did), Some(did), false, vec![], empty);\n-        inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+        inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n             PolyTrait {\n                 trait_: ResolvedPath { path, param_names: None, did, is_generic: false },\n@@ -1438,62 +1438,6 @@ crate enum PrimitiveType {\n     Never,\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]\n-crate enum TypeKind {\n-    Enum,\n-    Function,\n-    Module,\n-    Const,\n-    Static,\n-    Struct,\n-    Union,\n-    Trait,\n-    Typedef,\n-    Foreign,\n-    Macro,\n-    Attr,\n-    Derive,\n-    TraitAlias,\n-    Primitive,\n-}\n-\n-impl From<hir::def::DefKind> for TypeKind {\n-    fn from(other: hir::def::DefKind) -> Self {\n-        match other {\n-            hir::def::DefKind::Enum => Self::Enum,\n-            hir::def::DefKind::Fn => Self::Function,\n-            hir::def::DefKind::Mod => Self::Module,\n-            hir::def::DefKind::Const => Self::Const,\n-            hir::def::DefKind::Static => Self::Static,\n-            hir::def::DefKind::Struct => Self::Struct,\n-            hir::def::DefKind::Union => Self::Union,\n-            hir::def::DefKind::Trait => Self::Trait,\n-            hir::def::DefKind::TyAlias => Self::Typedef,\n-            hir::def::DefKind::TraitAlias => Self::TraitAlias,\n-            hir::def::DefKind::Macro(_) => Self::Macro,\n-            hir::def::DefKind::ForeignTy\n-            | hir::def::DefKind::Variant\n-            | hir::def::DefKind::AssocTy\n-            | hir::def::DefKind::TyParam\n-            | hir::def::DefKind::ConstParam\n-            | hir::def::DefKind::Ctor(..)\n-            | hir::def::DefKind::AssocFn\n-            | hir::def::DefKind::AssocConst\n-            | hir::def::DefKind::ExternCrate\n-            | hir::def::DefKind::Use\n-            | hir::def::DefKind::ForeignMod\n-            | hir::def::DefKind::AnonConst\n-            | hir::def::DefKind::OpaqueTy\n-            | hir::def::DefKind::Field\n-            | hir::def::DefKind::LifetimeParam\n-            | hir::def::DefKind::GlobalAsm\n-            | hir::def::DefKind::Impl\n-            | hir::def::DefKind::Closure\n-            | hir::def::DefKind::Generator => Self::Foreign,\n-        }\n-    }\n-}\n-\n crate trait GetDefId {\n     /// Use this method to get the [`DefId`] of a [`clean`] AST node.\n     /// This will return [`None`] when called on a primitive [`clean::Type`]."}, {"sha": "7df8b442e5accdb7d79288c68e89705f414919ae", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "patch": "@@ -3,9 +3,9 @@ use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n     MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n-    TypeKind,\n };\n use crate::core::DocContext;\n+use crate::formats::item_type::ItemType;\n \n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -435,37 +435,37 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n     debug!(\"register_res({:?})\", res);\n \n     let (did, kind) = match res {\n-        Res::Def(DefKind::Fn, i) => (i, TypeKind::Function),\n-        Res::Def(DefKind::TyAlias, i) => (i, TypeKind::Typedef),\n-        Res::Def(DefKind::Enum, i) => (i, TypeKind::Enum),\n-        Res::Def(DefKind::Trait, i) => (i, TypeKind::Trait),\n+        Res::Def(DefKind::Fn, i) => (i, ItemType::Function),\n+        Res::Def(DefKind::TyAlias, i) => (i, ItemType::Typedef),\n+        Res::Def(DefKind::Enum, i) => (i, ItemType::Enum),\n+        Res::Def(DefKind::Trait, i) => (i, ItemType::Trait),\n         Res::Def(DefKind::AssocTy | DefKind::AssocFn | DefKind::AssocConst, i) => {\n-            (cx.tcx.parent(i).unwrap(), TypeKind::Trait)\n+            (cx.tcx.parent(i).unwrap(), ItemType::Trait)\n         }\n-        Res::Def(DefKind::Struct, i) => (i, TypeKind::Struct),\n-        Res::Def(DefKind::Union, i) => (i, TypeKind::Union),\n-        Res::Def(DefKind::Mod, i) => (i, TypeKind::Module),\n-        Res::Def(DefKind::ForeignTy, i) => (i, TypeKind::Foreign),\n-        Res::Def(DefKind::Const, i) => (i, TypeKind::Const),\n-        Res::Def(DefKind::Static, i) => (i, TypeKind::Static),\n+        Res::Def(DefKind::Struct, i) => (i, ItemType::Struct),\n+        Res::Def(DefKind::Union, i) => (i, ItemType::Union),\n+        Res::Def(DefKind::Mod, i) => (i, ItemType::Module),\n+        Res::Def(DefKind::ForeignTy, i) => (i, ItemType::ForeignType),\n+        Res::Def(DefKind::Const, i) => (i, ItemType::Constant),\n+        Res::Def(DefKind::Static, i) => (i, ItemType::Static),\n         Res::Def(DefKind::Variant, i) => {\n-            (cx.tcx.parent(i).expect(\"cannot get parent def id\"), TypeKind::Enum)\n+            (cx.tcx.parent(i).expect(\"cannot get parent def id\"), ItemType::Enum)\n         }\n         Res::Def(DefKind::Macro(mac_kind), i) => match mac_kind {\n-            MacroKind::Bang => (i, TypeKind::Macro),\n-            MacroKind::Attr => (i, TypeKind::Attr),\n-            MacroKind::Derive => (i, TypeKind::Derive),\n+            MacroKind::Bang => (i, ItemType::Macro),\n+            MacroKind::Attr => (i, ItemType::ProcAttribute),\n+            MacroKind::Derive => (i, ItemType::ProcDerive),\n         },\n-        Res::Def(DefKind::TraitAlias, i) => (i, TypeKind::TraitAlias),\n-        Res::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),\n+        Res::Def(DefKind::TraitAlias, i) => (i, ItemType::TraitAlias),\n+        Res::SelfTy(Some(def_id), _) => (def_id, ItemType::Trait),\n         Res::SelfTy(_, Some((impl_def_id, _))) => return impl_def_id,\n         _ => return res.def_id(),\n     };\n     if did.is_local() {\n         return did;\n     }\n     inline::record_extern_fqn(cx, did, kind);\n-    if let TypeKind::Trait = kind {\n+    if let ItemType::Trait = kind {\n         inline::record_extern_trait(cx, did);\n     }\n     did"}, {"sha": "955de57dc0e5f3ea9a3b231869ef33bb7fbb3706", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "patch": "@@ -4,6 +4,7 @@ use std::fmt;\n \n use serde::{Serialize, Serializer};\n \n+use rustc_hir::def::DefKind;\n use rustc_span::hygiene::MacroKind;\n \n use crate::clean;\n@@ -19,7 +20,7 @@ use crate::clean;\n /// module headings. If you are adding to this enum and want to ensure that the sidebar also prints\n /// a heading, edit the listing in `html/render.rs`, function `sidebar_module`. This uses an\n /// ordering based on a helper function inside `item_module`, in the same file.\n-#[derive(Copy, PartialEq, Eq, Clone, Debug, PartialOrd, Ord)]\n+#[derive(Copy, PartialEq, Eq, Hash, Clone, Debug, PartialOrd, Ord)]\n crate enum ItemType {\n     Module = 0,\n     ExternCrate = 1,\n@@ -102,24 +103,43 @@ impl<'a> From<&'a clean::Item> for ItemType {\n     }\n }\n \n-impl From<clean::TypeKind> for ItemType {\n-    fn from(kind: clean::TypeKind) -> ItemType {\n-        match kind {\n-            clean::TypeKind::Struct => ItemType::Struct,\n-            clean::TypeKind::Union => ItemType::Union,\n-            clean::TypeKind::Enum => ItemType::Enum,\n-            clean::TypeKind::Function => ItemType::Function,\n-            clean::TypeKind::Trait => ItemType::Trait,\n-            clean::TypeKind::Module => ItemType::Module,\n-            clean::TypeKind::Static => ItemType::Static,\n-            clean::TypeKind::Const => ItemType::Constant,\n-            clean::TypeKind::Typedef => ItemType::Typedef,\n-            clean::TypeKind::Foreign => ItemType::ForeignType,\n-            clean::TypeKind::Macro => ItemType::Macro,\n-            clean::TypeKind::Attr => ItemType::ProcAttribute,\n-            clean::TypeKind::Derive => ItemType::ProcDerive,\n-            clean::TypeKind::TraitAlias => ItemType::TraitAlias,\n-            clean::TypeKind::Primitive => ItemType::Primitive,\n+impl From<DefKind> for ItemType {\n+    fn from(other: DefKind) -> Self {\n+        match other {\n+            DefKind::Enum => Self::Enum,\n+            DefKind::Fn => Self::Function,\n+            DefKind::Mod => Self::Module,\n+            DefKind::Const => Self::Constant,\n+            DefKind::Static => Self::Static,\n+            DefKind::Struct => Self::Struct,\n+            DefKind::Union => Self::Union,\n+            DefKind::Trait => Self::Trait,\n+            DefKind::TyAlias => Self::Typedef,\n+            DefKind::TraitAlias => Self::TraitAlias,\n+            DefKind::Macro(kind) => match kind {\n+                MacroKind::Bang => ItemType::Macro,\n+                MacroKind::Attr => ItemType::ProcAttribute,\n+                MacroKind::Derive => ItemType::ProcDerive,\n+            },\n+            DefKind::ForeignTy\n+            | DefKind::Variant\n+            | DefKind::AssocTy\n+            | DefKind::TyParam\n+            | DefKind::ConstParam\n+            | DefKind::Ctor(..)\n+            | DefKind::AssocFn\n+            | DefKind::AssocConst\n+            | DefKind::ExternCrate\n+            | DefKind::Use\n+            | DefKind::ForeignMod\n+            | DefKind::AnonConst\n+            | DefKind::OpaqueTy\n+            | DefKind::Field\n+            | DefKind::LifetimeParam\n+            | DefKind::GlobalAsm\n+            | DefKind::Impl\n+            | DefKind::Closure\n+            | DefKind::Generator => Self::ForeignType,\n         }\n     }\n }"}, {"sha": "f93a0d4fc2d72cf9d38647f2bffd333cd4228baf", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "patch": "@@ -7,7 +7,7 @@ use rustc_span::symbol::{sym, Symbol};\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean::types::{\n-    FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, TypeKind, WherePredicate,\n+    FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, WherePredicate,\n };\n use crate::clean::{self, AttributesExt};\n use crate::formats::cache::Cache;\n@@ -316,15 +316,15 @@ crate fn get_real_types<'tcx>(\n     arg: &Type,\n     tcx: TyCtxt<'tcx>,\n     recurse: i32,\n-    res: &mut FxHashSet<(Type, TypeKind)>,\n+    res: &mut FxHashSet<(Type, ItemType)>,\n ) -> usize {\n-    fn insert(res: &mut FxHashSet<(Type, TypeKind)>, tcx: TyCtxt<'_>, ty: Type) -> usize {\n+    fn insert(res: &mut FxHashSet<(Type, ItemType)>, tcx: TyCtxt<'_>, ty: Type) -> usize {\n         if let Some(kind) = ty.def_id().map(|did| tcx.def_kind(did).into()) {\n             res.insert((ty, kind));\n             1\n         } else if ty.is_primitive() {\n             // This is a primitive, let's store it as such.\n-            res.insert((ty, TypeKind::Primitive));\n+            res.insert((ty, ItemType::Primitive));\n             1\n         } else {\n             0\n@@ -394,7 +394,7 @@ crate fn get_all_types<'tcx>(\n     generics: &Generics,\n     decl: &FnDecl,\n     tcx: TyCtxt<'tcx>,\n-) -> (Vec<(Type, TypeKind)>, Vec<(Type, TypeKind)>) {\n+) -> (Vec<(Type, ItemType)>, Vec<(Type, ItemType)>) {\n     let mut all_types = FxHashSet::default();\n     for arg in decl.inputs.values.iter() {\n         if arg.type_.is_self_type() {"}, {"sha": "3bf496f9d94b8f6338217b741bf5fbc971c2fe67", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e25c5e2c25d8bc7f192d7eb5b1bf5882cad4f4ba", "patch": "@@ -54,7 +54,7 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n-use crate::clean::{self, GetDefId, RenderedLink, SelfTy, TypeKind};\n+use crate::clean::{self, GetDefId, RenderedLink, SelfTy};\n use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n@@ -182,11 +182,11 @@ impl Serialize for IndexItemFunctionType {\n #[derive(Debug)]\n crate struct TypeWithKind {\n     ty: RenderType,\n-    kind: TypeKind,\n+    kind: ItemType,\n }\n \n-impl From<(RenderType, TypeKind)> for TypeWithKind {\n-    fn from(x: (RenderType, TypeKind)) -> TypeWithKind {\n+impl From<(RenderType, ItemType)> for TypeWithKind {\n+    fn from(x: (RenderType, ItemType)) -> TypeWithKind {\n         TypeWithKind { ty: x.0, kind: x.1 }\n     }\n }\n@@ -196,7 +196,7 @@ impl Serialize for TypeWithKind {\n     where\n         S: Serializer,\n     {\n-        (&self.ty.name, ItemType::from(self.kind)).serialize(serializer)\n+        (&self.ty.name, self.kind).serialize(serializer)\n     }\n }\n "}]}