{"sha": "53cee86666166c6a7316253317d5d40fc20f30f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzY2VlODY2NjYxNjZjNmE3MzE2MjUzMzE3ZDVkNDBmYzIwZjMwZjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-14T18:04:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-14T18:04:32Z"}, "message": "Merge #3140\n\n3140: Start manual r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5e4e50b502de134813b6d247b57f079f9c9fa71a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4e50b502de134813b6d247b57f079f9c9fa71a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53cee86666166c6a7316253317d5d40fc20f30f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRuEwCRBK7hj4Ov3rIwAAdHIIAJYhZpmRh7uPuhfICaPTyofC\nPN2iv7CCKqtg5XsEHCg5gg6C598wcROfF3iuuKJgw05j88efsVvD79OhWUjIifaq\n8gR5Ph1LVmT+a3q32ZGjhruYPPOqjNf83D95QWs7fgBLHB4xVLsXmCOtU0PASW6y\ngdwSM5vOTtGognMqHxgYaQqa9vMO5hP4l5wtPWLb5k7F1ssgEjUgL1WIlqjx7atI\nAjRuxUXMpVpy0HQlAdbQoC+6cV36SfJlgMrAw35xSoFXfOxIfeGFv0DZXOCahPSA\nir4kaSRcWQGYtxR9wKqZA8R4PdCunkiTqOimfrxdsIRl9gGL4FkLeMeDqUU5/Ag=\n=yeJa\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e4e50b502de134813b6d247b57f079f9c9fa71a\nparent 619b0e16513fe73054262463340c109028f0e11e\nparent 5acb467894053cb0342eb6ded4d162b4a6912483\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581703472 +0000\ncommitter GitHub <noreply@github.com> 1581703472 +0000\n\nMerge #3140\n\n3140: Start manual r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53cee86666166c6a7316253317d5d40fc20f30f2", "html_url": "https://github.com/rust-lang/rust/commit/53cee86666166c6a7316253317d5d40fc20f30f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53cee86666166c6a7316253317d5d40fc20f30f2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619b0e16513fe73054262463340c109028f0e11e", "url": "https://api.github.com/repos/rust-lang/rust/commits/619b0e16513fe73054262463340c109028f0e11e", "html_url": "https://github.com/rust-lang/rust/commit/619b0e16513fe73054262463340c109028f0e11e"}, {"sha": "5acb467894053cb0342eb6ded4d162b4a6912483", "url": "https://api.github.com/repos/rust-lang/rust/commits/5acb467894053cb0342eb6ded4d162b4a6912483", "html_url": "https://github.com/rust-lang/rust/commit/5acb467894053cb0342eb6ded4d162b4a6912483"}], "stats": {"total": 513, "additions": 214, "deletions": 299}, "files": [{"sha": "14ca6fd64257aac2be1c57605a6b5f49061798e3", "filename": "docs/user/README.md", "status": "removed", "additions": 0, "deletions": 280, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/619b0e16513fe73054262463340c109028f0e11e/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/619b0e16513fe73054262463340c109028f0e11e/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=619b0e16513fe73054262463340c109028f0e11e", "patch": "@@ -1,280 +0,0 @@\n-[github-releases]: https://github.com/rust-analyzer/rust-analyzer/releases\n-\n-The main interface to rust-analyzer is the\n-[LSP](https://microsoft.github.io/language-server-protocol/) implementation. To\n-install lsp server, you have three options:\n-\n-* **Preferred and default:** install the plugin/extension for your IDE and it will ask your permission to automatically download the latest lsp server for you from [GitHub releases][github-releases]. (See docs to find out whether this is implemented for your editor below).\n-* Manually download prebuilt binaries from [GitHub releases][github-releases]\n-    * `ra_lsp_server-linux` for Linux\n-    * `ra_lsp_server-mac` for Mac\n-    * `ra_lsp_server-windows.exe` for Windows\n-* Clone the repository and build from sources\n-```bash\n-$ git clone git@github.com:rust-analyzer/rust-analyzer && cd rust-analyzer\n-$ cargo xtask install --server # or cargo install --path ./crates/ra_lsp_server\n-```\n-\n-This way you will get a binary named `ra_lsp_server` (with os suffix for prebuilt binaries)\n-which you should be able to use with any LSP-compatible editor.\n-\n-We make use of custom extensions to LSP, so special client-side support is required to take full\n-advantage of rust-analyzer. This repository contains support code for VS Code.\n-\n-Rust Analyzer needs sources of rust standard library to work, so\n-you might also need to execute\n-\n-```\n-$ rustup component add rust-src\n-```\n-\n-See [./features.md](./features.md) document for a list of features that are available.\n-\n-## VS Code\n-\n-### Prerequisites\n-\n-You will need the most recent version of VS Code: we don't try to\n-maintain compatibility with older versions yet.\n-\n-### Installation from prebuilt binaries\n-\n-We ship prebuilt binaries for Linux, Mac and Windows via\n-[GitHub releases][github-releases].\n-In order to use them you need to install the client VSCode extension.\n-\n-Publishing to VS Code marketplace is currently WIP. Thus, you need to manually download\n-`rust-analyzer-0.1.0.vsix` file from latest [GitHub release][github-releases].\n-\n-After you downloaded the `.vsix` file you can install it from the terminal\n-\n-```\n-$ code --install-extension rust-analyzer-0.1.0.vsix\n-```\n-\n-Or open VS Code, press <kbd>Ctrl+Shift+P</kbd>, and search for the following command:\n-\n-<img width=\"500px\" alt=\"Install from VSIX command\" src=\"https://user-images.githubusercontent.com/36276403/74108225-c0c11d80-4b80-11ea-9b2a-0a43f09e29af.png\">\n-\n-Press <kbd>Enter</kbd> and go to `rust-analyzer-0.1.0.vsix` file through the file explorer.\n-\n-Then open some Rust project and you should\n-see an info message pop-up.\n-\n-<img height=\"140px\" src=\"https://user-images.githubusercontent.com/36276403/74103174-a40df100-4b52-11ea-81f4-372c70797924.png\" alt=\"Download now message\"/>\n-\n-\n-Click `Download now`, wait until the progress is 100% and you are ready to go.\n-\n-For updates you need to remove installed binary\n-```\n-rm -rf ${HOME}/.config/Code/User/globalStorage/matklad.rust-analyzer\n-```\n-\n-`\"Download latest language server\"` command for VSCode and automatic updates detection is currently WIP.\n-\n-\n-### Installation from sources\n-\n-In order to build the VS Code plugin from sources, you need to have node.js and npm with\n-a minimum version of 12 installed. Please refer to\n-[node.js and npm documentation](https://nodejs.org) for installation instructions.\n-\n-The experimental VS Code plugin can be built and installed by executing the\n-following commands:\n-\n-```\n-$ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n-$ cd rust-analyzer\n-$ cargo xtask install\n-```\n-\n-After that you need to amend your `settings.json` file to explicitly specify the\n-path to `ra_lsp_server` that you've just built.\n-```json\n-{\n-    \"rust-analyzer.raLspServerPath\": \"ra_lsp_server\"\n-}\n-```\n-This should work on all platforms, otherwise if installed `ra_lsp_server` is not available through your `$PATH` then see how to configure it [here](#setting-up-the-PATH-variable).\n-\n-\n-The automatic installation is expected to *just work* for common cases, if it\n-doesn't, report bugs!\n-\n-**Note** [#1831](https://github.com/rust-analyzer/rust-analyzer/issues/1831): If you are using the popular\n-[Vim emulation plugin](https://github.com/VSCodeVim/Vim), you will likely\n-need to turn off the `rust-analyzer.enableEnhancedTyping` setting.\n-(// TODO: This configuration is no longer available, enhanced typing shoud be disabled via removing Enter key binding, [see this issue](https://github.com/rust-analyzer/rust-analyzer/issues/3051))\n-\n-If you have an unusual setup (for example, `code` is not in the `PATH`), you\n-should adapt these manual installation instructions:\n-\n-```\n-$ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n-$ cd rust-analyzer\n-$ cargo install --path ./crates/ra_lsp_server/ --force --locked\n-$ cd ./editors/code\n-$ npm install\n-$ npm run package\n-$ code --install-extension ./rust-analyzer-0.1.0.vsix\n-```\n-\n-It's better to remove existing Rust plugins to avoid interference.\n-\n-Beyond basic LSP features, there are some extension commands which you can\n-invoke via <kbd>Ctrl+Shift+P</kbd> or bind to a shortcut. See [./features.md](./features.md)\n-for details.\n-\n-For updates, pull the latest changes from the master branch, run `cargo xtask install` again, and **restart** VS Code instance.\n-See [microsoft/vscode#72308](https://github.com/microsoft/vscode/issues/72308) for why a full restart is needed.\n-\n-### VS Code Remote\n-\n-You can also use `rust-analyzer` with the Visual Studio Code Remote extensions\n-(Remote SSH, Remote WSL, Remote Containers). In this case, however, you have to\n-manually install the `.vsix` package:\n-\n-1. Build the extension on the remote host using the instructions above (ignore the\n-   error if `code` cannot be found in your PATH: VSCode doesn't need to be installed\n-   on the remote host).\n-2. In Visual Studio Code open a connection to the remote host.\n-3. Open the Extensions View (`View > Extensions`, keyboard shortcut: `Ctrl+Shift+X`).\n-4. From the top-right kebab menu (`\u00b7\u00b7\u00b7`) select `Install from VSIX...`\n-5. Inside the `rust-analyzer` directory find the `editors/code` subdirectory and choose\n-   the `rust-analyzer-0.1.0.vsix` file.\n-6. Restart Visual Studio Code and re-establish the connection to the remote host.\n-\n-In case of errors please make sure that `~/.cargo/bin` is in your `PATH` on the remote\n-host.\n-\n-### Settings\n-\n-* `rust-analyzer.highlightingOn`: enables experimental syntax highlighting.\n-  Colors can be configured via `editor.tokenColorCustomizations`.\n-  As an example, [Pale Fire](https://github.com/matklad/pale-fire/) color scheme tweaks rust colors.\n-* `rust-analyzer.enableEnhancedTyping`: by default, rust-analyzer intercepts the\n-  `Enter` key to make it easier to continue comments. Note that it may conflict with VIM emulation plugin.\n-* `rust-analyzer.raLspServerPath`: path to `ra_lsp_server` executable, when absent or `null` defaults to prebuilt binary path\n-* `rust-analyzer.enableCargoWatchOnStartup`: prompt to install & enable `cargo\n-  watch` for live error highlighting (note, this **does not** use rust-analyzer)\n-* `rust-analyzer.excludeGlobs`: a list of glob-patterns for exclusion (see globset [docs](https://docs.rs/globset) for syntax).\n-  Note: glob patterns are applied to all Cargo packages and a rooted at a package root.\n-  This is not very intuitive and a limitation of a current implementation.\n-* `rust-analyzer.useClientWatching`: use client provided file watching instead\n-  of notify watching.\n-* `rust-analyzer.cargo-watch.command`: `cargo-watch` command. (e.g: `clippy` will run as `cargo watch -x clippy` )\n-* `rust-analyzer.cargo-watch.arguments`: cargo-watch check arguments.\n-  (e.g: `--features=\"shumway,pdf\"` will run as `cargo watch -x \"check --features=\"shumway,pdf\"\"` )\n-* `rust-analyzer.cargo-watch.ignore`: list of patterns for cargo-watch to ignore (will be passed as `--ignore`)\n-* `rust-analyzer.trace.server`: enables internal logging\n-* `rust-analyzer.trace.cargo-watch`: enables cargo-watch logging\n-* `RUST_SRC_PATH`: environment variable that overwrites the sysroot\n-* `rust-analyzer.featureFlags` -- a JSON object to tweak fine-grained behavior:\n-   ```jsonc\n-   {\n-       // Show diagnostics produced by rust-analyzer itself.\n-       \"lsp.diagnostics\": true,\n-       // Automatically insert `()` and `<>` when completing functions and types.\n-       \"completion.insertion.add-call-parenthesis\": true,\n-       // Enable completions like `.if`, `.match`, etc.\n-       \"completion.enable-postfix\": true,\n-       // Show notification when workspace is fully loaded\n-       \"notifications.workspace-loaded\": true,\n-       // Show error when no Cargo.toml was found\n-       \"notifications.cargo-toml-not-found\": true,\n-   }\n-   ```\n-\n-\n-## Emacs\n-\n-* install recent version of `emacs-lsp` package by following the instructions [here][emacs-lsp]\n-* set `lsp-rust-server` to `'rust-analyzer`\n-* run `lsp` in a Rust buffer\n-* (Optionally) bind commands like `lsp-rust-analyzer-join-lines`, `lsp-extend-selection` and `lsp-rust-analyzer-expand-macro` to keys\n-\n-[emacs-lsp]: https://github.com/emacs-lsp/lsp-mode\n-\n-\n-## Vim and NeoVim (coc-rust-analyzer)\n-\n-* Install coc.nvim by following the instructions at [coc.nvim][] (nodejs required)\n-* Run `:CocInstall coc-rust-analyzer` to install [coc-rust-analyzer], this extension implements _most_ of the features supported in the VSCode extension:\n-  - same configurations as VSCode extension, `rust-analyzer.raLspServerPath`, `rust-analyzer.enableCargoWatchOnStartup` etc.\n-  - same commands too, `rust-analyzer.analyzerStatus`, `rust-analyzer.startCargoWatch` etc.\n-  - highlighting and inlay_hints are not implemented yet\n-\n-[coc.nvim]: https://github.com/neoclide/coc.nvim\n-[coc-rust-analyzer]: https://github.com/fannheyward/coc-rust-analyzer\n-\n-## Vim and NeoVim (LanguageClient-neovim)\n-\n-* Install LanguageClient-neovim by following the instructions [here][lang-client-neovim]\n-  - The github project wiki has extra tips on configuration\n-\n-* Configure by adding this to your vim/neovim config file (replacing the existing rust specific line if it exists):\n-\n-```vim\n-let g:LanguageClient_serverCommands = {\n-\\ 'rust': ['ra_lsp_server'],\n-\\ }\n-```\n-\n-[lang-client-neovim]: https://github.com/autozimu/LanguageClient-neovim\n-\n-## NeoVim (nvim-lsp)\n-\n-NeoVim 0.5 (not yet released) has built in language server support. For a quick start configuration\n-of rust-analyzer, use [neovim/nvim-lsp](https://github.com/neovim/nvim-lsp#rust_analyzer).\n-Once `neovim/nvim-lsp` is installed, use `lua require'nvim_lsp'.rust_analyzer.setup({})` in your `init.vim`.\n-\n-\n-## Sublime Text 3\n-\n-Prequisites:\n-\n-`LSP` package.\n-\n-Installation:\n-\n-* Invoke the command palette with <kbd>Ctrl+Shift+P</kbd>\n-* Type `LSP Settings` to open the LSP preferences editor\n-* Add the following LSP client definition to your settings:\n-\n-```json\n-\"rust-analyzer\": {\n-    \"command\": [\"ra_lsp_server\"],\n-    \"languageId\": \"rust\",\n-    \"scopes\": [\"source.rust\"],\n-    \"syntaxes\": [\n-        \"Packages/Rust/Rust.sublime-syntax\",\n-        \"Packages/Rust Enhanced/RustEnhanced.sublime-syntax\"\n-    ],\n-    \"initializationOptions\": {\n-      \"featureFlags\": {\n-      }\n-    },\n-}\n-```\n-\n-* You can now invoke the command palette and type LSP enable to locally/globally enable the rust-analyzer LSP (type LSP enable, then choose either locally or globally, then select rust-analyzer)\n-\n-\n-<!-- Update links to this header when changing it! -->\n-### Setting up the `PATH` variable\n-\n-On Unix systems, `rustup` adds `~/.cargo/bin` to `PATH` by modifying the shell's\n-startup file. Depending on your configuration, your Desktop Environment might not\n-actually load it. If you find that `rust-analyzer` only runs when starting the\n-editor from the terminal, you will have to set up your `PATH` variable manually.\n-\n-There are a couple of ways to do that:\n-\n-- for Code, set `rust-analyzer.raLspServerPath` to `~/.cargo/bin` (the `~` is\n-  automatically resolved by the extension)\n-- copy the binary to a location that is already in `PATH`, e.g. `/usr/local/bin`\n-- on Linux, use PAM to configure the `PATH` variable, by e.g. putting\n-  `PATH DEFAULT=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:@{HOME}/.cargo/bin:@{HOME}/.local/bin`\n-  in your `~/.pam_environment` file; note that this might interfere with other\n-  defaults set by the system administrator via `/etc/environment`."}, {"sha": "b9ecc705557144418f00d2cdedf74cde1f26f968", "filename": "docs/user/readme.adoc", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/53cee86666166c6a7316253317d5d40fc20f30f2/docs%2Fuser%2Freadme.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/53cee86666166c6a7316253317d5d40fc20f30f2/docs%2Fuser%2Freadme.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Freadme.adoc?ref=53cee86666166c6a7316253317d5d40fc20f30f2", "patch": "@@ -0,0 +1,152 @@\n+= User Manual\n+:toc: preamble\n+:sectanchors:\n+:page-layout: post\n+\n+\n+// Master copy of this document lives in the https://github.com/rust-analyzer/rust-analyzer repository\n+\n+At it's core, rust-analyzer is a *library* for semantic analysis of the Rust code as it changes over time.\n+This manual focuses on a specific usage of the library -- the implementation of\n+https://microsoft.github.io/language-server-protocol/[Language Server Protocol].\n+LSP allows various code editors, like VS Code, Emacs or Vim, to implement semantic feature like completion or goto definition by talking to an external language server process.\n+\n+== Installation\n+\n+In theory, one should be able to just install the server binary and have it automatically work with any editor.\n+We are not there yet, so some editor specific setup is required.\n+\n+=== VS Code\n+\n+This the best supported editor at the moment.\n+rust-analyzer plugin for VS Code is maintained\n+https://github.com/rust-analyzer/rust-analyzer/tree/master/editors/code[in tree].\n+\n+You can install the latest release of the plugin from\n+https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer[the marketplace].\n+By default, the plugin will download the latest version of the server as well.\n+\n+image::https://user-images.githubusercontent.com/36276403/74103174-a40df100-4b52-11ea-81f4-372c70797924.png[]\n+\n+The server binary is stored in `~/.config/Code/User/globalStorage/matklad.rust-analyzer`.\n+\n+Note that we only support the latest version of VS Code.\n+\n+==== Updates\n+\n+The extension will be updated automatically as new versions become available.\n+The server update functionality is in progress.\n+For the time being, the workaround is to remove the binary from `globalStorage` and to restart the extension.\n+\n+==== Building From Source\n+\n+Alternatively, both the server and the plugin can be installed from source:\n+\n+[source]\n+----\n+$ git clone https://github.com/rust-analyzer/rust-analyzer.git && cs rust-analyzer\n+$ cargo xtask install\n+----\n+\n+You'll need Cargo, nodejs and npm for this.\n+To make VS Code use the freshly build server, add this to the settings:\n+\n+[source,json]\n+----\n+{ \"rust-analyzer.raLspServerPath\": \"ra_lsp_server\" }\n+----\n+\n+Note that installing via `xtask install` does not work for VS Code Remote, instead you'll need to install the `.vsix` manually.\n+\n+=== Language Server Binary\n+\n+Other editors generally require `ra_lsp_server` binary to be in `$PATH`.\n+You can download pre-build binary from\n+https://github.com/rust-analyzer/rust-analyzer/releases[relases]\n+page, or you can install it from source using the following command:\n+\n+[source,bash]\n+----\n+$ cargo xtask install --server\n+----\n+\n+=== Emacs\n+\n+Emacs support is maintained https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-rust.el[upstream].\n+\n+1. Install recent version of `emacs-lsp` package by following the instructions https://github.com/emacs-lsp/lsp-mode[here].\n+2. Set `lsp-rust-server` to `'rust-analyzer`.\n+3. Run `lsp` in a Rust buffer.\n+4. (Optionally) bind commands like `lsp-rust-analyzer-join-lines`, `lsp-extend-selection` and `lsp-rust-analyzer-expand-macro` to keys.\n+\n+=== Vim\n+\n+The are several LSP client implementations for vim:\n+\n+==== coc-rust-analyzer\n+\n+1. Install coc.nvim by following the instructions at\n+   https://github.com/neoclide/coc.nvim[coc.nvim]\n+   (nodejs required)\n+2. Run `:CocInstall coc-rust-analyzer` to install\n+   https://github.com/fannheyward/coc-rust-analyzer[coc-rust-analyzer],\n+   this extension implements _most_ of the features supported in the VSCode extension:\n+   * same configurations as VSCode extension, `rust-analyzer.raLspServerPath`, `rust-analyzer.enableCargoWatchOnStartup` etc.\n+   * same commands too, `rust-analyzer.analyzerStatus`, `rust-analyzer.startCargoWatch` etc.\n+   * highlighting and inlay_hints are not implemented yet\n+\n+==== LanguageClient-neovim\n+\n+1. Install LanguageClient-neovim by following the instructions\n+   https://github.com/autozimu/LanguageClient-neovim[here]\n+   * The github project wiki has extra tips on configuration\n+\n+2. Configure by adding this to your vim/neovim config file (replacing the existing rust specific line if it exists):\n++\n+[source,vim]\n+----\n+let g:LanguageClient_serverCommands = {\n+\\ 'rust': ['ra_lsp_server'],\n+\\ }\n+----\n+\n+==== nvim-lsp\n+\n+NeoVim 0.5 (not yet released) has built in language server support.\n+For a quick start configuration of rust-analyzer, use https://github.com/neovim/nvim-lsp#rust_analyzer[neovim/nvim-lsp].\n+Once `neovim/nvim-lsp` is installed, use `lua require'nvim_lsp'.rust_analyzer.setup({})` in your `init.vim`.\n+\n+=== Sublime Text 3\n+\n+Prerequisites:\n+\n+`LSP` package.\n+\n+Installation:\n+\n+1. Invoke the command palette with <kbd>Ctrl+Shift+P</kbd>\n+2. Type `LSP Settings` to open the LSP preferences editor\n+3. Add the following LSP client definition to your settings:\n++\n+[source,json]\n+----\n+\"rust-analyzer\": {\n+    \"command\": [\"ra_lsp_server\"],\n+    \"languageId\": \"rust\",\n+    \"scopes\": [\"source.rust\"],\n+    \"syntaxes\": [\n+        \"Packages/Rust/Rust.sublime-syntax\",\n+        \"Packages/Rust Enhanced/RustEnhanced.sublime-syntax\"\n+    ],\n+    \"initializationOptions\": {\n+      \"featureFlags\": {\n+      }\n+    },\n+}\n+----\n+\n+4. You can now invoke the command palette and type LSP enable to locally/globally enable the rust-analyzer LSP (type LSP enable, then choose either locally or globally, then select rust-analyzer)\n+\n+== Usage\n+\n+See https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/features.md[features.md]."}, {"sha": "25b64301c77d8478a95f3899af5561b6c2dae01a", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/53cee86666166c6a7316253317d5d40fc20f30f2/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53cee86666166c6a7316253317d5d40fc20f30f2/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=53cee86666166c6a7316253317d5d40fc20f30f2", "patch": "@@ -9,15 +9,15 @@ mod ast_src;\n \n use anyhow::Context;\n use std::{\n-    env, fs,\n+    env,\n     io::Write,\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n \n use crate::{\n     codegen::Mode,\n-    not_bash::{pushd, run},\n+    not_bash::{fs2, pushd, rm_rf, run},\n };\n \n pub use anyhow::Result;\n@@ -139,7 +139,7 @@ pub fn run_pre_cache() -> Result<()> {\n         }\n     }\n \n-    fs::remove_file(\"./target/.rustc_info.json\")?;\n+    fs2::remove_file(\"./target/.rustc_info.json\")?;\n     let to_delete = [\"ra_\", \"heavy_test\"];\n     for &dir in [\"./target/debug/deps\", \"target/debug/.fingerprint\"].iter() {\n         for entry in Path::new(dir).read_dir()? {\n@@ -153,22 +153,20 @@ pub fn run_pre_cache() -> Result<()> {\n     Ok(())\n }\n \n-fn rm_rf(path: &Path) -> Result<()> {\n-    if path.is_file() { fs::remove_file(path) } else { fs::remove_dir_all(path) }\n-        .with_context(|| format!(\"failed to remove {:?}\", path))\n-}\n-\n-pub fn run_release() -> Result<()> {\n-    run!(\"git switch release\")?;\n-    run!(\"git fetch upstream\")?;\n-    run!(\"git reset --hard upstream/master\")?;\n-    run!(\"git push\")?;\n+pub fn run_release(dry_run: bool) -> Result<()> {\n+    if !dry_run {\n+        run!(\"git switch release\")?;\n+        run!(\"git fetch upstream\")?;\n+        run!(\"git reset --hard upstream/master\")?;\n+        run!(\"git push\")?;\n+    }\n \n-    let changelog_dir = project_root().join(\"../rust-analyzer.github.io/thisweek/_posts\");\n+    let website_root = project_root().join(\"../rust-analyzer.github.io\");\n+    let changelog_dir = website_root.join(\"./thisweek/_posts\");\n \n     let today = run!(\"date --iso\")?;\n     let commit = run!(\"git rev-parse HEAD\")?;\n-    let changelog_n = fs::read_dir(changelog_dir.as_path())?.count();\n+    let changelog_n = fs2::read_dir(changelog_dir.as_path())?.count();\n \n     let contents = format!(\n         \"\\\n@@ -191,7 +189,9 @@ Release: release:{}[]\n     );\n \n     let path = changelog_dir.join(format!(\"{}-changelog-{}.adoc\", today, changelog_n));\n-    fs::write(&path, &contents)?;\n+    fs2::write(&path, &contents)?;\n+\n+    fs2::copy(project_root().join(\"./docs/user/readme.adoc\"), website_root.join(\"manual.adoc\"))?;\n \n     Ok(())\n }"}, {"sha": "a7dffe2cc87162c2af4f595da206123e3980537c", "filename": "xtask/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53cee86666166c6a7316253317d5d40fc20f30f2/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53cee86666166c6a7316253317d5d40fc20f30f2/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=53cee86666166c6a7316253317d5d40fc20f30f2", "patch": "@@ -93,8 +93,9 @@ FLAGS:\n             run_pre_cache()\n         }\n         \"release\" => {\n+            let dry_run = args.contains(\"--dry-run\");\n             args.finish()?;\n-            run_release()\n+            run_release(dry_run)\n         }\n         _ => {\n             eprintln!("}, {"sha": "3e30e7279ff4a75bc79e925c44cf7c646de358bb", "filename": "xtask/src/not_bash.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/53cee86666166c6a7316253317d5d40fc20f30f2/xtask%2Fsrc%2Fnot_bash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53cee86666166c6a7316253317d5d40fc20f30f2/xtask%2Fsrc%2Fnot_bash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fnot_bash.rs?ref=53cee86666166c6a7316253317d5d40fc20f30f2", "patch": "@@ -4,12 +4,45 @@ use std::{\n     env,\n     ffi::OsStr,\n     fs,\n-    path::PathBuf,\n+    path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n \n use anyhow::{bail, Context, Result};\n \n+pub mod fs2 {\n+    use std::{fs, path::Path};\n+\n+    use anyhow::{Context, Result};\n+\n+    pub fn read_dir<P: AsRef<Path>>(path: P) -> Result<fs::ReadDir> {\n+        let path = path.as_ref();\n+        fs::read_dir(path).with_context(|| format!(\"Failed to read {}\", path.display()))\n+    }\n+\n+    pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> Result<()> {\n+        let path = path.as_ref();\n+        fs::write(path, contents).with_context(|| format!(\"Failed to write {}\", path.display()))\n+    }\n+\n+    pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> Result<u64> {\n+        let from = from.as_ref();\n+        let to = to.as_ref();\n+        fs::copy(from, to)\n+            .with_context(|| format!(\"Failed to copy {} to {}\", from.display(), to.display()))\n+    }\n+\n+    pub fn remove_file<P: AsRef<Path>>(path: P) -> Result<()> {\n+        let path = path.as_ref();\n+        fs::remove_file(path).with_context(|| format!(\"Failed to remove file {}\", path.display()))\n+    }\n+\n+    pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> Result<()> {\n+        let path = path.as_ref();\n+        fs::remove_dir_all(path).with_context(|| format!(\"Failed to remove dir {}\", path.display()))\n+    }\n+}\n+\n macro_rules! _run {\n     ($($expr:expr),*) => {\n         run!($($expr),*; echo = true)\n@@ -41,6 +74,15 @@ pub fn rm(glob: &str) -> Result<()> {\n     Ok(())\n }\n \n+pub fn rm_rf(path: impl AsRef<Path>) -> Result<()> {\n+    let path = path.as_ref();\n+    if path.is_file() {\n+        fs2::remove_file(path)\n+    } else {\n+        fs2::remove_dir_all(path)\n+    }\n+}\n+\n pub fn ls(glob: &str) -> Result<Vec<PathBuf>> {\n     let cwd = Env::with(|env| env.cwd());\n     let mut res = Vec::new();\n@@ -90,7 +132,7 @@ fn run_process_inner(cmd: &str, echo: bool) -> Result<String> {\n         bail!(\"{}\", output.status)\n     }\n \n-    Ok(stdout)\n+    Ok(stdout.trim().to_string())\n }\n \n // FIXME: some real shell lexing here"}]}