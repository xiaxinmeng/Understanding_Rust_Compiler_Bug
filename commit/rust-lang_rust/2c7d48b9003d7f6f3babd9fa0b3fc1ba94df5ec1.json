{"sha": "2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjN2Q0OGI5MDAzZDdmNmYzYmFiZDlmYTBiM2ZjMWJhOTRkZjVlYzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-16T17:57:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-16T17:57:18Z"}, "message": "Rollup merge of #88729 - estebank:struct-literal-using-parens, r=oli-obk\n\nRecover from `Foo(a: 1, b: 2)`\n\nDetect likely `struct` literal using parentheses as delimiters and emit\ntargeted suggestion instead of type ascription parse error.\n\nFix #61326.", "tree": {"sha": "e838c281ebba42a323b728290d159cf9f63dd400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e838c281ebba42a323b728290d159cf9f63dd400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhQ4V+CRBK7hj4Ov3rIwAA5ykIADDh57oPcTt2EKu8lIdr36q/\nhi0Ujgq4ksjhyCflS+wiAloC9eyyUPV4wxxoqrwTagw3sLMl8uwKrqyYD+gs1RVz\nwHIG3zw1lp0bWgsZeX2QazZGQ4TltQ0fkaya/kiazLkHdsl9oRY7kMNIHcEhyz1Z\nOr42ku2dL4PxCLmZfylannBhDP7D2C1ql4Oq3aJ6DElX81anfdknKrTOAnbrMnb9\naeO7B1gxC4EFOdhHrYKtEUbDuR5an4AJhXYG90Y1Ub7NOe7o6mVJzyuApQWFsLTH\nP0O9cN1HvMpup0T3y82aTHsd9w3el9oYXd89LdU+OojEx6dU6WU/zGfEFf6YnF4=\n=aM6X\n-----END PGP SIGNATURE-----\n", "payload": "tree e838c281ebba42a323b728290d159cf9f63dd400\nparent 0ad800c417e7d4ed7d172c02666cb1da6ba62823\nparent ffc623ab93340f0c13fea3d518a00f6e0e49a7ec\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631815038 -0700\ncommitter GitHub <noreply@github.com> 1631815038 -0700\n\nRollup merge of #88729 - estebank:struct-literal-using-parens, r=oli-obk\n\nRecover from `Foo(a: 1, b: 2)`\n\nDetect likely `struct` literal using parentheses as delimiters and emit\ntargeted suggestion instead of type ascription parse error.\n\nFix #61326.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "html_url": "https://github.com/rust-lang/rust/commit/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad800c417e7d4ed7d172c02666cb1da6ba62823", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad800c417e7d4ed7d172c02666cb1da6ba62823", "html_url": "https://github.com/rust-lang/rust/commit/0ad800c417e7d4ed7d172c02666cb1da6ba62823"}, {"sha": "ffc623ab93340f0c13fea3d518a00f6e0e49a7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc623ab93340f0c13fea3d518a00f6e0e49a7ec", "html_url": "https://github.com/rust-lang/rust/commit/ffc623ab93340f0c13fea3d518a00f6e0e49a7ec"}], "stats": {"total": 167, "additions": 133, "deletions": 34}, "files": [{"sha": "737f1d9cbb15e0f55269c63c22b891063764b7d8", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 91, "deletions": 10, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "patch": "@@ -907,6 +907,12 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn look_ahead_type_ascription_as_field(&mut self) -> bool {\n+        self.look_ahead(1, |t| t.is_ident())\n+            && self.look_ahead(2, |t| t == &token::Colon)\n+            && self.look_ahead(3, |t| t.can_begin_expr())\n+    }\n+\n     fn parse_dot_suffix_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n         match self.token.uninterpolate().kind {\n             token::Ident(..) => self.parse_dot_suffix(base, lo),\n@@ -1056,12 +1062,76 @@ impl<'a> Parser<'a> {\n \n     /// Parse a function call expression, `expr(...)`.\n     fn parse_fn_call_expr(&mut self, lo: Span, fun: P<Expr>) -> P<Expr> {\n-        let seq = self.parse_paren_expr_seq().map(|args| {\n+        let snapshot = if self.token.kind == token::OpenDelim(token::Paren)\n+            && self.look_ahead_type_ascription_as_field()\n+        {\n+            Some((self.clone(), fun.kind.clone()))\n+        } else {\n+            None\n+        };\n+        let open_paren = self.token.span;\n+\n+        let mut seq = self.parse_paren_expr_seq().map(|args| {\n             self.mk_expr(lo.to(self.prev_token.span), self.mk_call(fun, args), AttrVec::new())\n         });\n+        if let Some(expr) =\n+            self.maybe_recover_struct_lit_bad_delims(lo, open_paren, &mut seq, snapshot)\n+        {\n+            return expr;\n+        }\n         self.recover_seq_parse_error(token::Paren, lo, seq)\n     }\n \n+    /// If we encounter a parser state that looks like the user has written a `struct` literal with\n+    /// parentheses instead of braces, recover the parser state and provide suggestions.\n+    fn maybe_recover_struct_lit_bad_delims(\n+        &mut self,\n+        lo: Span,\n+        open_paren: Span,\n+        seq: &mut PResult<'a, P<Expr>>,\n+        snapshot: Option<(Self, ExprKind)>,\n+    ) -> Option<P<Expr>> {\n+        match (seq.as_mut(), snapshot) {\n+            (Err(ref mut err), Some((mut snapshot, ExprKind::Path(None, path)))) => {\n+                let name = pprust::path_to_string(&path);\n+                snapshot.bump(); // `(`\n+                match snapshot.parse_struct_fields(path.clone(), false, token::Paren) {\n+                    Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {\n+                        // We have are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n+                        // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.\n+                        *self = snapshot;\n+                        let close_paren = self.prev_token.span;\n+                        let span = lo.to(self.prev_token.span);\n+                        err.cancel();\n+                        self.struct_span_err(\n+                            span,\n+                            \"invalid `struct` delimiters or `fn` call arguments\",\n+                        )\n+                        .multipart_suggestion(\n+                            &format!(\"if `{}` is a struct, use braces as delimiters\", name),\n+                            vec![(open_paren, \" { \".to_string()), (close_paren, \" }\".to_string())],\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .multipart_suggestion(\n+                            &format!(\"if `{}` is a function, use the arguments directly\", name),\n+                            fields\n+                                .into_iter()\n+                                .map(|field| (field.span.until(field.expr.span), String::new()))\n+                                .collect(),\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n+                        return Some(self.mk_expr_err(span));\n+                    }\n+                    Ok(_) => {}\n+                    Err(mut err) => err.emit(),\n+                }\n+            }\n+            _ => {}\n+        }\n+        None\n+    }\n+\n     /// Parse an indexing expression `expr[...]`.\n     fn parse_index_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n         self.bump(); // `[`\n@@ -2374,14 +2444,12 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n-    /// Precondition: already parsed the '{'.\n-    pub(super) fn parse_struct_expr(\n+    pub(super) fn parse_struct_fields(\n         &mut self,\n-        qself: Option<ast::QSelf>,\n         pth: ast::Path,\n-        attrs: AttrVec,\n         recover: bool,\n-    ) -> PResult<'a, P<Expr>> {\n+        close_delim: token::DelimToken,\n+    ) -> PResult<'a, (Vec<ExprField>, ast::StructRest, bool)> {\n         let mut fields = Vec::new();\n         let mut base = ast::StructRest::None;\n         let mut recover_async = false;\n@@ -2393,11 +2461,11 @@ impl<'a> Parser<'a> {\n             e.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n         };\n \n-        while self.token != token::CloseDelim(token::Brace) {\n+        while self.token != token::CloseDelim(close_delim) {\n             if self.eat(&token::DotDot) {\n                 let exp_span = self.prev_token.span;\n                 // We permit `.. }` on the left-hand side of a destructuring assignment.\n-                if self.check(&token::CloseDelim(token::Brace)) {\n+                if self.check(&token::CloseDelim(close_delim)) {\n                     self.sess.gated_spans.gate(sym::destructuring_assignment, self.prev_token.span);\n                     base = ast::StructRest::Rest(self.prev_token.span.shrink_to_hi());\n                     break;\n@@ -2438,7 +2506,7 @@ impl<'a> Parser<'a> {\n                 }\n             };\n \n-            match self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)]) {\n+            match self.expect_one_of(&[token::Comma], &[token::CloseDelim(close_delim)]) {\n                 Ok(_) => {\n                     if let Some(f) = parsed_field.or(recovery_field) {\n                         // Only include the field if there's no parse error for the field name.\n@@ -2469,8 +2537,21 @@ impl<'a> Parser<'a> {\n                 }\n             }\n         }\n+        Ok((fields, base, recover_async))\n+    }\n \n-        let span = pth.span.to(self.token.span);\n+    /// Precondition: already parsed the '{'.\n+    pub(super) fn parse_struct_expr(\n+        &mut self,\n+        qself: Option<ast::QSelf>,\n+        pth: ast::Path,\n+        attrs: AttrVec,\n+        recover: bool,\n+    ) -> PResult<'a, P<Expr>> {\n+        let lo = pth.span;\n+        let (fields, base, recover_async) =\n+            self.parse_struct_fields(pth.clone(), recover, token::Brace)?;\n+        let span = lo.to(self.token.span);\n         self.expect(&token::CloseDelim(token::Brace))?;\n         let expr = if recover_async {\n             ExprKind::Err"}, {"sha": "c70cd8b5077a924fa9ef52a5f988d7a31ff0b1ef", "filename": "src/test/ui/issues/issue-34255-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.rs?ref=2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "patch": "@@ -6,5 +6,5 @@ enum Test {\n \n fn main() {\n     Test::Drill(field: 42);\n-    //~^ ERROR expected type, found\n+    //~^ ERROR invalid `struct` delimiters or `fn` call arguments\n }"}, {"sha": "fbff75e37d9f0864ff0630fbf99acbe6b6f058dd", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "patch": "@@ -1,13 +1,18 @@\n-error: expected type, found `42`\n-  --> $DIR/issue-34255-1.rs:8:24\n+error: invalid `struct` delimiters or `fn` call arguments\n+  --> $DIR/issue-34255-1.rs:8:5\n    |\n LL |     Test::Drill(field: 42);\n-   |                      - ^^ expected type\n-   |                      |\n-   |                      tried to parse a type due to this type ascription\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+help: if `Test::Drill` is a struct, use braces as delimiters\n+   |\n+LL |     Test::Drill { field: 42 };\n+   |                 ~           ~\n+help: if `Test::Drill` is a function, use the arguments directly\n+   |\n+LL -     Test::Drill(field: 42);\n+LL +     Test::Drill(42);\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "a5b7e83a016223848f319673aea1dacefdf8ce17", "filename": "src/test/ui/parser/issue-44406.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fparser%2Fissue-44406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fparser%2Fissue-44406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-44406.rs?ref=2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "patch": "@@ -1,10 +1,10 @@\n macro_rules! foo {\n     ($rest: tt) => {\n-        bar(baz: $rest)\n+        bar(baz: $rest) //~ ERROR invalid `struct` delimiters or `fn` call arguments\n     }\n }\n \n fn main() {\n-    foo!(true); //~ ERROR expected type, found keyword\n+    foo!(true);\n     //~^ ERROR expected identifier, found keyword\n }"}, {"sha": "862026408ef7f8d9db8a9631a37f9b2f98c70f4e", "filename": "src/test/ui/parser/issue-44406.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr?ref=2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "patch": "@@ -9,17 +9,25 @@ help: you can escape reserved keywords to use them as identifiers\n LL |     foo!(r#true);\n    |          ~~~~~~\n \n-error: expected type, found keyword `true`\n-  --> $DIR/issue-44406.rs:8:10\n+error: invalid `struct` delimiters or `fn` call arguments\n+  --> $DIR/issue-44406.rs:3:9\n    |\n LL |         bar(baz: $rest)\n-   |                - help: try using a semicolon: `;`\n+   |         ^^^^^^^^^^^^^^^\n ...\n LL |     foo!(true);\n-   |          ^^^^ expected type\n+   |     ----------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: if `bar` is a struct, use braces as delimiters\n+   |\n+LL |         bar {  }\n+   |             ~\n+help: if `bar` is a function, use the arguments directly\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+LL -         bar(baz: $rest)\n+LL +         bar(true);\n+   | \n \n error: aborting due to 2 previous errors\n "}, {"sha": "e8887147cbc863a9debfa7ac8b91547874034b16", "filename": "src/test/ui/parser/recover-from-bad-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs?ref=2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "patch": "@@ -5,7 +5,7 @@ enum Enum {\n \n fn main() {\n     let x = Enum::Foo(a: 3, b: 4);\n-    //~^ ERROR expected type, found `3`\n+    //~^ ERROR invalid `struct` delimiters or `fn` call arguments\n     match x {\n         Enum::Foo(a, b) => {}\n         //~^ ERROR expected tuple struct or tuple variant, found struct variant `Enum::Foo`"}, {"sha": "8cb71069bdaaca5f3c08eaf17b521e68bc255d7f", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=2c7d48b9003d7f6f3babd9fa0b3fc1ba94df5ec1", "patch": "@@ -1,13 +1,18 @@\n-error: expected type, found `3`\n-  --> $DIR/recover-from-bad-variant.rs:7:26\n+error: invalid `struct` delimiters or `fn` call arguments\n+  --> $DIR/recover-from-bad-variant.rs:7:13\n    |\n LL |     let x = Enum::Foo(a: 3, b: 4);\n-   |                        - ^ expected type\n-   |                        |\n-   |                        tried to parse a type due to this type ascription\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+help: if `Enum::Foo` is a struct, use braces as delimiters\n+   |\n+LL |     let x = Enum::Foo { a: 3, b: 4 };\n+   |                       ~            ~\n+help: if `Enum::Foo` is a function, use the arguments directly\n+   |\n+LL -     let x = Enum::Foo(a: 3, b: 4);\n+LL +     let x = Enum::Foo(3, 4);\n+   | \n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `Enum::Foo`\n   --> $DIR/recover-from-bad-variant.rs:10:9"}]}