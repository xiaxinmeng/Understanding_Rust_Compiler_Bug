{"sha": "cd54e7772040cd268f911e9dfd088ad5f659f552", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNTRlNzc3MjA0MGNkMjY4ZjkxMWU5ZGZkMDg4YWQ1ZjY1OWY1NTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-16T22:21:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-17T18:04:56Z"}, "message": "Allow multiple imports in a single statement\n\nLike so: import foo::{bar, baz};\n\nIssue #817", "tree": {"sha": "d12ac71b3f3ec50fe345d8064c87f8a5b44a9010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d12ac71b3f3ec50fe345d8064c87f8a5b44a9010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd54e7772040cd268f911e9dfd088ad5f659f552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd54e7772040cd268f911e9dfd088ad5f659f552", "html_url": "https://github.com/rust-lang/rust/commit/cd54e7772040cd268f911e9dfd088ad5f659f552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd54e7772040cd268f911e9dfd088ad5f659f552/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4ce463f3709c7a8a92941d2e4bfab6db5da550f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4ce463f3709c7a8a92941d2e4bfab6db5da550f", "html_url": "https://github.com/rust-lang/rust/commit/c4ce463f3709c7a8a92941d2e4bfab6db5da550f"}], "stats": {"total": 158, "additions": 155, "deletions": 3}, "files": [{"sha": "b879b37f9e895d8b85ef2b0a8a45f9893a7f58b2", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -61,6 +61,7 @@ type scopes = list<scope>;\n \n tag import_state {\n     todo(@ast::view_item, scopes); // only used for explicit imports\n+    todo_from(@ast::view_item, ast::import_ident, scopes);\n \n     resolving(span);\n     resolved(option::t<def>,\n@@ -91,6 +92,7 @@ fn new_ext_hash() -> ext_hash {\n \n tag mod_index_entry {\n     mie_view_item(@ast::view_item);\n+    mie_import_ident(node_id);\n     mie_item(@ast::item);\n     mie_native_item(@ast::native_item);\n     mie_tag_variant(/* tag item */@ast::item, /* variant index */uint);\n@@ -173,6 +175,12 @@ fn map_crate(e: &@env, c: &@ast::crate) {\n           ast::view_item_import(_, ids, id) {\n             e.imports.insert(id, todo(i, sc));\n           }\n+          ast::view_item_import_from(mod_path, idents, id) {\n+            for ident in idents {\n+                e.imports.insert(ident.node.id,\n+                                 todo_from(i, ident, sc));\n+            }\n+          }\n           _ { }\n         }\n     }\n@@ -238,11 +246,27 @@ fn map_crate(e: &@env, c: &@ast::crate) {\n     }\n }\n \n+fn vi_from_to_vi(from_item: &@ast::view_item,\n+                 ident: ast::import_ident) -> @ast::view_item {\n+    alt from_item.node {\n+      ast::view_item_import_from(mod_path, idents, _) {\n+        @ast::respan(ident.span,\n+                     ast::view_item_import(ident.node.name,\n+                                           mod_path + ~[ident.node.name],\n+                                           ident.node.id))\n+      }\n+    }\n+}\n+\n fn resolve_imports(e: &env) {\n     for each it: @{key: ast::node_id, val: import_state} in e.imports.items()\n              {\n         alt it.val {\n           todo(item, sc) { resolve_import(e, item, sc); }\n+          todo_from(item, ident, sc) {\n+            let vi = vi_from_to_vi(item, ident);\n+            resolve_import(e, vi, sc);\n+          }\n           resolved(_, _, _) { }\n         }\n     }\n@@ -941,6 +965,11 @@ fn lookup_import(e: &env, defid: def_id, ns: namespace) -> option::t<def> {\n         resolve_import(e, item, sc);\n         ret lookup_import(e, defid, ns);\n       }\n+      todo_from(item, ident, sc) {\n+        let vi = vi_from_to_vi(item, ident);\n+        resolve_import(e, vi, sc);\n+        ret lookup_import(e, defid, ns);\n+      }\n       resolving(sp) { e.sess.span_err(sp, \"cyclic import\"); ret none; }\n       resolved(val, typ, md) {\n         ret alt ns { ns_value. { val } ns_type. { typ } ns_module. { md } };\n@@ -1044,6 +1073,7 @@ fn lookup_in_mie(e: &env, mie: &mod_index_entry, ns: namespace) ->\n    option::t<def> {\n     alt mie {\n       mie_view_item(view_item) { ret found_view_item(e, view_item, ns); }\n+      mie_import_ident(id) { ret lookup_import(e, local_def(id), ns); }\n       mie_item(item) { ret found_def_item(item, ns); }\n       mie_tag_variant(item, variant_idx) {\n         alt item.node {\n@@ -1070,7 +1100,6 @@ fn lookup_in_mie(e: &env, mie: &mod_index_entry, ns: namespace) ->\n           }\n         }\n       }\n-      _ { }\n     }\n     ret none::<def>;\n }\n@@ -1094,6 +1123,13 @@ fn index_mod(md: &ast::_mod) -> mod_index {\n             add_to_index(index, ident, mie_view_item(it));\n           }\n \n+          ast::view_item_import_from(_, idents, _) {\n+            for ident in idents {\n+                add_to_index(index, ident.node.name,\n+                             mie_import_ident(ident.node.id));\n+            }\n+          }\n+\n           //globbed imports have to be resolved lazily.\n           ast::view_item_import_glob(_, _) | ast::view_item_export(_, _) {\n           }\n@@ -1128,6 +1164,12 @@ fn index_nmod(md: &ast::native_mod) -> mod_index {\n           {\n             add_to_index(index, ident, mie_view_item(it));\n           }\n+          ast::view_item_import_from(_, idents, _) {\n+            for ident in idents {\n+                add_to_index(index, ident.node.name,\n+                             mie_import_ident(ident.node.id));\n+            }\n+          }\n           ast::view_item_import_glob(_, _) | ast::view_item_export(_, _) { }\n         }\n     }"}, {"sha": "066a0b9675bff7c5a502a3f294fb52cf2b9d31aa", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -564,10 +564,15 @@ type view_item = spanned<view_item_>;\n // 'import ::foo'\n type simple_path = [ident];\n \n+type import_ident_ = {name: ident, id: node_id};\n+\n+type import_ident = spanned<import_ident_>;\n+\n tag view_item_ {\n     view_item_use(ident, [@meta_item], node_id);\n     view_item_import(ident, simple_path, node_id);\n     view_item_import_glob(simple_path, node_id);\n+    view_item_import_from(simple_path, [import_ident], node_id);\n     view_item_export([ident], node_id);\n }\n "}, {"sha": "f92ab2ca6bde102d983c142ea18b1b02ffe9da3f", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -2288,11 +2288,17 @@ fn parse_rest_import_name(p: &parser, first: ast::ident,\n    ast::view_item_ {\n     let identifiers: [ast::ident] = ~[first];\n     let glob: bool = false;\n+    let from_idents = option::none::<[ast::import_ident]>;\n     while true {\n         alt p.peek() {\n           token::SEMI. { break; }\n           token::MOD_SEP. {\n-            if glob { p.fatal(\"cannot path into a glob\"); }\n+            if glob {\n+                p.fatal(\"cannot path into a glob\");\n+            }\n+            if option::is_some(from_idents) {\n+                p.fatal(\"cannot path into import list\");\n+            }\n             p.bump();\n           }\n           _ { p.fatal(\"expecting '::' or ';'\"); }\n@@ -2305,17 +2311,46 @@ fn parse_rest_import_name(p: &parser, first: ast::ident,\n             glob = true;\n             p.bump();\n           }\n+\n+          token::LBRACE. {\n+            fn parse_import_ident(p: &parser) -> ast::import_ident {\n+                let lo = p.get_lo_pos();\n+                let ident = parse_ident(p);\n+                let hi = p.get_hi_pos();\n+                ret spanned(lo, hi, {name: ident,\n+                                     id: p.get_id()});\n+            }\n+            let from_idents_ = parse_seq(token::LBRACE,\n+                                         token::RBRACE,\n+                                         some(token::COMMA),\n+                                         parse_import_ident,\n+                                         p).node;\n+            if vec::is_empty(from_idents_) {\n+                p.fatal(\"at least one import is required\");\n+            }\n+            from_idents = some(from_idents_);\n+          }\n+\n           _ { p.fatal(\"expecting an identifier, or '*'\"); }\n         }\n     }\n     alt def_ident {\n       some(i) {\n-        if glob { p.fatal(\"globbed imports can't be renamed\"); }\n+        if glob {\n+            p.fatal(\"globbed imports can't be renamed\");\n+        }\n+        if option::is_some(from_idents) {\n+            p.fatal(\"can't rename import list\");\n+        }\n         ret ast::view_item_import(i, identifiers, p.get_id());\n       }\n       _ {\n         if glob {\n             ret ast::view_item_import_glob(identifiers, p.get_id());\n+        } else if option::is_some(from_idents) {\n+            ret ast::view_item_import_from(identifiers,\n+                                           option::get(from_idents),\n+                                           p.get_id());\n         } else {\n             let len = vec::len(identifiers);\n             ret ast::view_item_import(identifiers.(len - 1u), identifiers,"}, {"sha": "a8f694e67554851865e7197612bbd8aa6846f1c4", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -1267,6 +1267,19 @@ fn print_view_item(s: &ps, item: &@ast::view_item) {\n             word(s.s, elt);\n         }\n       }\n+      ast::view_item_import_from(mod_path, idents, _) {\n+        head(s, \"import\");\n+        for elt: str in mod_path {\n+            word(s.s, elt);\n+            word(s.s, \"::\");\n+        }\n+        word(s.s, \"{\");\n+        commasep(s, inconsistent, idents,\n+                 fn(s: &ps, w: &ast::import_ident) {\n+                     word(s.s, w.node.name)\n+                 });\n+        word(s.s, \"}\");\n+      }\n       ast::view_item_import_glob(ids, _) {\n         head(s, \"import\");\n         let first = true;"}, {"sha": "1e0b38690537bbc9806245bd3e3b04248ccff773", "filename": "src/test/compile-fail/import-from-missing.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern:unresolved import: eggs\n+import spam::{ham, eggs};\n+\n+mod spam {\n+    fn ham() {}\n+}\n+\n+fn main() {\n+    ham();\n+    eggs();\n+}\n\\ No newline at end of file"}, {"sha": "d80aa4f7ade441d0c4f9641f9bec1511c9f5bc49", "filename": "src/test/compile-fail/import-from-none.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Fcompile-fail%2Fimport-from-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Fcompile-fail%2Fimport-from-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-none.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern:at least one import is required\n+import spam::{};\n+\n+mod spam {\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "91ea6efdf2a6d96b8cbda6e0065694ce61d877b2", "filename": "src/test/compile-fail/import-from-path.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Fcompile-fail%2Fimport-from-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Fcompile-fail%2Fimport-from-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-path.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -0,0 +1,2 @@\n+// error-pattern:cannot path into import list\n+import foo::{bar}::baz\n\\ No newline at end of file"}, {"sha": "e4aa78f6320b0239d43e4ba21aed18abc8b84dcc", "filename": "src/test/compile-fail/import-from-rename.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern:can't rename import list\n+\n+import baz = foo::{bar};\n+\n+mod foo {\n+    fn bar() {}\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "03c49b2adfef7d54107195db7904fc1cfd067573", "filename": "src/test/run-pass/import-from-native.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Frun-pass%2Fimport-from-native.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Frun-pass%2Fimport-from-native.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from-native.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -0,0 +1,15 @@\n+mod spam {\n+    fn ham() {}\n+    fn eggs() {}\n+}\n+\n+native \"rust\" mod rustrt {\n+    import spam::{ham, eggs};\n+    export ham;\n+    export eggs;\n+}\n+\n+fn main() {\n+    rustrt::ham();\n+    rustrt::eggs();\n+}\n\\ No newline at end of file"}, {"sha": "b42793d16df7c542cdce355b71f5e8da59843d5e", "filename": "src/test/run-pass/import-from.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Frun-pass%2Fimport-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd54e7772040cd268f911e9dfd088ad5f659f552/src%2Ftest%2Frun-pass%2Fimport-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from.rs?ref=cd54e7772040cd268f911e9dfd088ad5f659f552", "patch": "@@ -0,0 +1,11 @@\n+import spam::{ham, eggs};\n+\n+mod spam {\n+    fn ham() {}\n+    fn eggs() {}\n+}\n+\n+fn main() {\n+    ham();\n+    eggs();\n+}\n\\ No newline at end of file"}]}