{"sha": "6dba3e68e670a3b1418b259ca5f3758444dd1a68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYmEzZTY4ZTY3MGEzYjE0MThiMjU5Y2E1ZjM3NTg0NDRkZDFhNjg=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-12-06T09:18:03Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-12-07T09:14:41Z"}, "message": "Migrate even more feature gate tests to ui\n\nWe also rename some of the files to conform to the\nfeature-gate-<feat_name>.rs pattern that is most common.", "tree": {"sha": "deec386a3bbbbc37676603227787be64636c5b88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deec386a3bbbbc37676603227787be64636c5b88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dba3e68e670a3b1418b259ca5f3758444dd1a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dba3e68e670a3b1418b259ca5f3758444dd1a68", "html_url": "https://github.com/rust-lang/rust/commit/6dba3e68e670a3b1418b259ca5f3758444dd1a68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dba3e68e670a3b1418b259ca5f3758444dd1a68/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38438c618ca0238442e1feb245e0a71174c3db43", "url": "https://api.github.com/repos/rust-lang/rust/commits/38438c618ca0238442e1feb245e0a71174c3db43", "html_url": "https://github.com/rust-lang/rust/commit/38438c618ca0238442e1feb245e0a71174c3db43"}], "stats": {"total": 1083, "additions": 1012, "deletions": 71}, "files": [{"sha": "27f8fda98ab3430bce3e1c61e08a83b9de816b01", "filename": "src/test/compile-fail/no-core-gated.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38438c618ca0238442e1feb245e0a71174c3db43/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38438c618ca0238442e1feb245e0a71174c3db43/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs?ref=38438c618ca0238442e1feb245e0a71174c3db43", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// gate-test-no_core\n-\n-#![no_core] //~ ERROR no_core is experimental\n-\n-fn main() {}"}, {"sha": "501f4451ed8d51b6982f001ec10ddc214210001c", "filename": "src/test/ui/feature-gate-abi_unadjusted.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-abi_unadjusted\n-\n extern \"unadjusted\" fn foo() {\n //~^ ERROR: unadjusted ABI is an implementation detail and perma-unstable\n }", "previous_filename": "src/test/compile-fail/unadjusted-unstable.rs"}, {"sha": "3cc43847156a1d6fba3c5e943987f183e5e9284b", "filename": "src/test/ui/feature-gate-abi_unadjusted.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,12 @@\n+error: unadjusted ABI is an implementation detail and perma-unstable\n+  --> $DIR/feature-gate-abi_unadjusted.rs:11:1\n+   |\n+11 | / extern \"unadjusted\" fn foo() {\n+12 | | //~^ ERROR: unadjusted ABI is an implementation detail and perma-unstable\n+13 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(abi_unadjusted)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d053bdae789b1e3358a87a286a628eaefeca326", "filename": "src/test/ui/feature-gate-asm.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-asm\n-\n fn main() {\n     unsafe {\n         asm!(\"\"); //~ ERROR inline assembly is not stable enough", "previous_filename": "src/test/compile-fail/asm-gated.rs"}, {"sha": "ff68a4fb23ee11c5983ad42c8e2f89c3cd18fad8", "filename": "src/test/ui/feature-gate-asm.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n+  --> $DIR/feature-gate-asm.rs:13:9\n+   |\n+13 |         asm!(\"\"); //~ ERROR inline assembly is not stable enough\n+   |         ^^^^^^^^^\n+   |\n+   = help: add #![feature(asm)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "222190de9fe9c4a25651f78858bc413f5f8bc245", "filename": "src/test/ui/feature-gate-asm2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm2.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "previous_filename": "src/test/compile-fail/asm-gated2.rs"}, {"sha": "1e02cede61dc710bf149ca756a75f548c55245d8", "filename": "src/test/ui/feature-gate-asm2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm2.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n+  --> $DIR/feature-gate-asm2.rs:15:24\n+   |\n+15 |         println!(\"{}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n+   |                        ^^^^^^^^\n+   |\n+   = help: add #![feature(asm)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "e64081823e74c444ba225ee9fc5853e190e0ee2a", "filename": "src/test/ui/feature-gate-box_patterns.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-box_patterns\n-\n fn main() {\n     let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental\n     println!(\"x: {}\", x);", "previous_filename": "src/test/ui/feature-gate-box-pat.rs"}, {"sha": "0a30de58a1fcece7d0961d2ce46734e3d20a4869", "filename": "src/test/ui/feature-gate-box_patterns.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -1,7 +1,7 @@\n error: box pattern syntax is experimental (see issue #29641)\n-  --> $DIR/feature-gate-box-pat.rs:14:9\n+  --> $DIR/feature-gate-box_patterns.rs:12:9\n    |\n-14 |     let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental\n+12 |     let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental\n    |         ^^^^^\n    |\n    = help: add #![feature(box_patterns)] to the crate attributes to enable", "previous_filename": "src/test/ui/feature-gate-box-pat.stderr"}, {"sha": "a2643fe02b8f72bdc6fdd0594b73238386d01297", "filename": "src/test/ui/feature-gate-box_syntax.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -10,8 +10,6 @@\n \n // Test that the use of the box syntax is gated by `box_syntax` feature gate.\n \n-// gate-test-box_syntax\n-\n fn main() {\n     let x = box 3;\n     //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead.", "previous_filename": "src/test/compile-fail/gated-box-syntax.rs"}, {"sha": "9b21dd03051bff3f4a1960166ace19fb4f178f7d", "filename": "src/test/ui/feature-gate-box_syntax.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: box expression syntax is experimental; you can call `Box::new` instead. (see issue #27779)\n+  --> $DIR/feature-gate-box_syntax.rs:14:13\n+   |\n+14 |     let x = box 3;\n+   |             ^^^^^\n+   |\n+   = help: add #![feature(box_syntax)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "f4d97445725cd37de1a6b5f6f57e62e78e146ad7", "filename": "src/test/ui/feature-gate-concat_idents.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-concat_idents\n-\n const XY_1: i32 = 10;\n \n fn main() {", "previous_filename": "src/test/compile-fail/concat_idents-gate.rs"}, {"sha": "c980668c298b42cbb6bdb51c56f914a7d8dacb79", "filename": "src/test/ui/feature-gate-concat_idents.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,18 @@\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents.rs:15:13\n+   |\n+15 |     let a = concat_idents!(X, Y_1); //~ ERROR `concat_idents` is not stable\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents.rs:16:13\n+   |\n+16 |     let b = concat_idents!(X, Y_2); //~ ERROR `concat_idents` is not stable\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "af288a97904400eecdda6f45010f0c43fe003aa0", "filename": "src/test/ui/feature-gate-concat_idents2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "previous_filename": "src/test/compile-fail/gated-concat_idents.rs"}, {"sha": "9cfd954eec8606732a5f7bd588d28e5d397460ca", "filename": "src/test/ui/feature-gate-concat_idents2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents2.rs:14:5\n+   |\n+14 |     concat_idents!(a, b); //~ ERROR `concat_idents` is not stable enough\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "5a9ffe98c93cae0b8834dce062fd09cf3b0f8a45", "filename": "src/test/ui/feature-gate-concat_idents3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "previous_filename": "src/test/compile-fail/concat_idents-gate2.rs"}, {"sha": "8399ca3c5018cd83f0bc25b0ccc6a2ac332f9145", "filename": "src/test/ui/feature-gate-concat_idents3.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,18 @@\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents3.rs:17:20\n+   |\n+17 |     assert_eq!(10, concat_idents!(X, Y_1)); //~ ERROR `concat_idents` is not stable\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents3.rs:18:20\n+   |\n+18 |     assert_eq!(20, concat_idents!(X, Y_2)); //~ ERROR `concat_idents` is not stable\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7a3ae639bfc8927ddddcc13207fa423dd535d40f", "filename": "src/test/ui/feature-gate-conservative_impl_trait.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-conservative_impl_trait\n-\n fn foo() -> impl Fn() { || {} }\n //~^ ERROR `impl Trait` in return position is experimental\n ", "previous_filename": "src/test/compile-fail/impl-trait/feature-gate.rs"}, {"sha": "72a4f52926a6c842fc81ecfbfb344da177a8cfa3", "filename": "src/test/ui/feature-gate-conservative_impl_trait.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: `impl Trait` in return position is experimental (see issue #34511)\n+  --> $DIR/feature-gate-conservative_impl_trait.rs:11:13\n+   |\n+11 | fn foo() -> impl Fn() { || {} }\n+   |             ^^^^^^^^^\n+   |\n+   = help: add #![feature(conservative_impl_trait)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d1dedddaaa3e72099f70dab571a40f976d0359e", "filename": "src/test/ui/feature-gate-const_fn.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_fn.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-const_fn\n-\n // Test use of const fn without feature gate.\n \n const fn foo() -> usize { 0 } //~ ERROR const fn is unstable", "previous_filename": "src/test/compile-fail/const-fn-stability.rs"}, {"sha": "c62229ac71bad16319afb9aace035c38113bba27", "filename": "src/test/ui/feature-gate-const_fn.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_fn.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,60 @@\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/feature-gate-const_fn.rs:16:5\n+   |\n+16 |     const fn foo() -> u32; //~ ERROR const fn is unstable\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/feature-gate-const_fn.rs:18:5\n+   |\n+18 |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/feature-gate-const_fn.rs:27:5\n+   |\n+27 |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^ trait fns cannot be const\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:13:1\n+   |\n+13 | const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:16:5\n+   |\n+16 |     const fn foo() -> u32; //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:18:5\n+   |\n+18 |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:23:5\n+   |\n+23 |     const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:27:5\n+   |\n+27 |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "b54288035175d33c9a477d8279841fe374ad1c62", "filename": "src/test/ui/feature-gate-custom_attribute.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -10,8 +10,6 @@\n \n // Check that literals in attributes parse just fine.\n \n-// gate-test-custom_attribute\n-\n #![feature(rustc_attrs, attr_literals)]\n #![allow(dead_code)]\n #![allow(unused_variables)]", "previous_filename": "src/test/compile-fail/attr-literals.rs"}, {"sha": "866ebfe8f2f3a350ee97dc7708e22b7d93aec3bc", "filename": "src/test/ui/feature-gate-custom_attribute.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,106 @@\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:17:1\n+   |\n+17 | #[fake_attr] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:18:1\n+   |\n+18 | #[fake_attr(100)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:19:1\n+   |\n+19 | #[fake_attr(1, 2, 3)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:20:1\n+   |\n+20 | #[fake_attr(\"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:21:1\n+   |\n+21 | #[fake_attr(name = \"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:22:1\n+   |\n+22 | #[fake_attr(1, \"hi\", key = 12, true, false)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:23:1\n+   |\n+23 | #[fake_attr(key = \"hello\", val = 10)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:24:1\n+   |\n+24 | #[fake_attr(key(\"hello\"), val(10))] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:25:1\n+   |\n+25 | #[fake_attr(enabled = true, disabled = false)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:26:1\n+   |\n+26 | #[fake_attr(true)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:27:1\n+   |\n+27 | #[fake_attr(pi = 3.14159)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:28:1\n+   |\n+28 | #[fake_attr(b\"hi\")] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_doc` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:29:1\n+   |\n+29 | #[fake_doc(r\"doc\")] //~ ERROR attribute `fake_doc` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "0d89c52d885f9022a85dfffaddd905ddd7914263", "filename": "src/test/ui/feature-gate-custom_attribute2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "previous_filename": "src/test/compile-fail/attr-on-generic-formals-are-visited.rs"}, {"sha": "3e4ea58a7a3fb1e30e67ce5ad72d29937d3ad2d9", "filename": "src/test/ui/feature-gate-custom_attribute2.stderr", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,138 @@\n+error: The attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:23:13\n+   |\n+23 | struct StLt<#[lt_struct] 'a>(&'a u32);\n+   |             ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:25:13\n+   |\n+25 | struct StTy<#[ty_struct] I>(I);\n+   |             ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:28:11\n+   |\n+28 | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n+   |           ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:30:11\n+   |\n+30 | enum EnTy<#[ty_enum] J> { A(J), B }\n+   |           ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:33:12\n+   |\n+33 | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+   |            ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:35:12\n+   |\n+35 | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n+   |            ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:38:11\n+   |\n+38 | type TyLt<#[lt_type] 'd> = &'d u32;\n+   |           ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n+   |\n+40 | type TyTy<#[ty_type] L> = (L, );\n+   |           ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:43:6\n+   |\n+43 | impl<#[lt_inherent] 'e> StLt<'e> { }\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:45:6\n+   |\n+45 | impl<#[ty_inherent] M> StTy<M> { }\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:48:6\n+   |\n+48 | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:52:6\n+   |\n+52 | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:57:9\n+   |\n+57 | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+   |         ^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:59:9\n+   |\n+59 | fn f_ty<#[ty_fn] O>(_: O) { }\n+   |         ^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:63:13\n+   |\n+63 |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+   |             ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:65:13\n+   |\n+65 |     fn m_ty<#[ty_meth] P>(_: P) { }\n+   |             ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:70:19\n+   |\n+70 |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+   |                   ^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "0b1b3141f5bf7745e63496c1e0599399a2ba68c4", "filename": "src/test/ui/feature-gate-custom_derive.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-custom_derive\n-\n #[derive_Clone]\n //~^ ERROR attributes of the form `#[derive_*]` are reserved\n struct Test;", "previous_filename": "src/test/compile-fail/single-derive-attr.rs"}, {"sha": "e806c808631197e9509b9a4b8c2397e2b6880607", "filename": "src/test/ui/feature-gate-custom_derive.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n+  --> $DIR/feature-gate-custom_derive.rs:11:1\n+   |\n+11 | #[derive_Clone]\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_derive)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "ccc5ec49f1302500f1b7d8900468d2d599bcad4d", "filename": "src/test/ui/feature-gate-default_type_parameter_fallback.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-default_type_parameter_fallback\n-\n #![allow(unused)]\n \n fn avg<T=i32>(_: T) {}", "previous_filename": "src/test/compile-fail/type-parameter-invalid-lint.rs"}, {"sha": "d756a69e8c1ec944ef999defbe35add0d7cbc78c", "filename": "src/test/ui/feature-gate-default_type_parameter_fallback.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,21 @@\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n+  --> $DIR/feature-gate-default_type_parameter_fallback.rs:13:8\n+   |\n+13 | fn avg<T=i32>(_: T) {}\n+   |        ^\n+   |\n+   = note: #[deny(invalid_type_param_default)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n+  --> $DIR/feature-gate-default_type_parameter_fallback.rs:18:6\n+   |\n+18 | impl<T=i32> S<T> {}\n+   |      ^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "944802f450a6d0eee317fd634188dd448d9d8944", "filename": "src/test/ui/feature-gate-generic_param_attrs.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -16,8 +16,6 @@\n // using `rustc_attrs` feature. There is a separate compile-fail/ test\n // ensuring that the attribute feature-gating works in this context.)\n \n-// gate-test-generic_param_attrs\n-\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n ", "previous_filename": "src/test/compile-fail/attr-on-generic-formals-wo-feature-gate.rs"}, {"sha": "da2e64030292c8bd46c84baba9ca675cbbde3271", "filename": "src/test/ui/feature-gate-generic_param_attrs.stderr", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,138 @@\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:22:13\n+   |\n+22 | struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:24:13\n+   |\n+24 | struct StTy<#[rustc_ty_struct] I>(I);\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:27:11\n+   |\n+27 | enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:29:11\n+   |\n+29 | enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:32:12\n+   |\n+32 | trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:34:12\n+   |\n+34 | trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:37:11\n+   |\n+37 | type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:39:11\n+   |\n+39 | type TyTy<#[rustc_ty_type] L> = (L, );\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:42:6\n+   |\n+42 | impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n+   |      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:44:6\n+   |\n+44 | impl<#[rustc_ty_inherent] M> StTy<M> { }\n+   |      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:47:6\n+   |\n+47 | impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+   |      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:51:6\n+   |\n+51 | impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n+   |      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:56:9\n+   |\n+56 | fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+   |         ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:58:9\n+   |\n+58 | fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n+   |         ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:62:13\n+   |\n+62 |     fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:64:13\n+   |\n+64 |     fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:69:19\n+   |\n+69 |     where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+   |                   ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "ddb49a3e5d92a934d853e1553693a8481035d5f2", "filename": "src/test/ui/feature-gate-i128_type.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-i128_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-i128_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-i128_type\n-\n fn test2() {\n     0i128; //~ ERROR 128-bit integers are not stable\n }", "previous_filename": "src/test/compile-fail/i128-feature.rs"}, {"sha": "df623cac49a94da9605a637a8cd7b82fef14e2b8", "filename": "src/test/ui/feature-gate-i128_type.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,18 @@\n+error: 128-bit integers are not stable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type.rs:12:5\n+   |\n+12 |     0i128; //~ ERROR 128-bit integers are not stable\n+   |     ^^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: 128-bit integers are not stable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type.rs:16:5\n+   |\n+16 |     0u128; //~ ERROR 128-bit integers are not stable\n+   |     ^^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d3bd810ceb2b439100018e9ab621cf1c3e6d4e7f", "filename": "src/test/ui/feature-gate-i128_type2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "previous_filename": "src/test/compile-fail/i128-feature-2.rs"}, {"sha": "26653a5739b2c922a465640013a1c34f1496b176", "filename": "src/test/ui/feature-gate-i128_type2.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,46 @@\n+error: 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:13:15\n+   |\n+13 | fn test1() -> i128 { //~ ERROR 128-bit type is unstable\n+   |               ^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:17:17\n+   |\n+17 | fn test1_2() -> u128 { //~ ERROR 128-bit type is unstable\n+   |                 ^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:22:12\n+   |\n+22 |     let x: i128 = 0; //~ ERROR 128-bit type is unstable\n+   |            ^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:26:12\n+   |\n+26 |     let x: u128 = 0; //~ ERROR 128-bit type is unstable\n+   |            ^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error[E0601]: main function not found\n+\n+error: repr with 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:30:1\n+   |\n+30 | / enum A { //~ ERROR 128-bit type is unstable\n+31 | |     A(u64)\n+32 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(repr128)] to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "bd48ac673dd34eaf840086c3832a402f14af11ef", "filename": "src/test/ui/feature-gate-link_args.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_args.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -12,8 +12,6 @@\n // feature gate, both when it occurs where expected (atop\n // `extern { }` blocks) and where unexpected.\n \n-// gate-test-link_args\n-\n // sidestep warning (which is correct, but misleading for\n // purposes of this test)\n #![allow(unused_attributes)]", "previous_filename": "src/test/compile-fail/gated-link-args.rs"}, {"sha": "d6d059007d1f3d01b0faacbd4a392283c5aff4f8", "filename": "src/test/ui/feature-gate-link_args.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_args.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,26 @@\n+error: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+  --> $DIR/feature-gate-link_args.rs:22:1\n+   |\n+22 | #[link_args = \"-l expected_use_case\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_args)] to the crate attributes to enable\n+\n+error: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+  --> $DIR/feature-gate-link_args.rs:26:1\n+   |\n+26 | #[link_args = \"-l unexected_use_on_non_extern_item\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_args)] to the crate attributes to enable\n+\n+error: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+  --> $DIR/feature-gate-link_args.rs:19:1\n+   |\n+19 | #![link_args = \"-l unexpected_use_as_inner_attr_on_mod\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_args)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "27918a27caf50793fe7f63010d6d6c7188ef5336", "filename": "src/test/ui/feature-gate-link_cfg.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-link_cfg\n-\n #[link(name = \"foo\", cfg(foo))]\n //~^ ERROR: is feature gated\n extern {}", "previous_filename": "src/test/compile-fail/link-cfg-gated.rs"}, {"sha": "bbc52bd9d20af02efe38c38f18159b9c6d7df525", "filename": "src/test/ui/feature-gate-link_cfg.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: is feature gated (see issue #37406)\n+  --> $DIR/feature-gate-link_cfg.rs:11:1\n+   |\n+11 | #[link(name = \"foo\", cfg(foo))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_cfg)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "92a1b071437e60f9fb0867198ce5f1a46aaa3716", "filename": "src/test/ui/feature-gate-link_llvm_intrinsics.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-link_llvm_intrinsics\n-\n extern {\n     #[link_name = \"llvm.sqrt.f32\"]\n     fn sqrt(x: f32) -> f32;", "previous_filename": "src/test/compile-fail/gated-link-llvm-intrinsics.rs"}, {"sha": "b2e2caaa51af38b4b57d383289590e5821193803", "filename": "src/test/ui/feature-gate-link_llvm_intrinsics.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: linking to LLVM intrinsics is experimental (see issue #29602)\n+  --> $DIR/feature-gate-link_llvm_intrinsics.rs:13:5\n+   |\n+13 |     fn sqrt(x: f32) -> f32;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_llvm_intrinsics)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "555cc2b9a7aad95c8c43b10932550e08154b65c8", "filename": "src/test/ui/feature-gate-linkage.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-linkage.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-linkage\n-\n extern {\n     #[linkage = \"extern_weak\"] static foo: isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable", "previous_filename": "src/test/compile-fail/linkage1.rs"}, {"sha": "62d857ddf2c06fdf98d47d832df5b91e6c6f503a", "filename": "src/test/ui/feature-gate-linkage.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-linkage.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: the `linkage` attribute is experimental and not portable across platforms (see issue #29603)\n+  --> $DIR/feature-gate-linkage.rs:12:5\n+   |\n+12 |     #[linkage = \"extern_weak\"] static foo: isize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(linkage)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "63c66e53c5ee8909ccb4fb9c5f47405fbccd3d54", "filename": "src/test/ui/feature-gate-log_syntax.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-log_syntax\n-\n fn main() {\n     log_syntax!() //~ ERROR `log_syntax!` is not stable enough\n }", "previous_filename": "src/test/compile-fail/log-syntax-gate.rs"}, {"sha": "f1c0d305f6c31f02ed77424065b4ee93723bb47d", "filename": "src/test/ui/feature-gate-log_syntax.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n+  --> $DIR/feature-gate-log_syntax.rs:12:5\n+   |\n+12 |     log_syntax!() //~ ERROR `log_syntax!` is not stable enough\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(log_syntax)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "dcbe7eefee52c7004aea875cd588e4f7e9e06902", "filename": "src/test/ui/feature-gate-log_syntax2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "previous_filename": "src/test/compile-fail/log-syntax-gate2.rs"}, {"sha": "b1bb5557eed14dcd7a5c02c0280c7c28da12f05b", "filename": "src/test/ui/feature-gate-log_syntax2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n+  --> $DIR/feature-gate-log_syntax2.rs:14:20\n+   |\n+14 |     println!(\"{}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable\n+   |                    ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(log_syntax)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "ceb475e1192176c917e5a96679d16467d6a4e293", "filename": "src/test/ui/feature-gate-naked_functions.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-naked_functions\n-\n #[naked]\n //~^ the `#[naked]` attribute is an experimental feature\n fn naked() {}", "previous_filename": "src/test/compile-fail/gated-naked_functions.rs"}, {"sha": "9655982574ca33a1ae7b0d5e5455ee740df4754d", "filename": "src/test/ui/feature-gate-naked_functions.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,18 @@\n+error: the `#[naked]` attribute is an experimental feature (see issue #32408)\n+  --> $DIR/feature-gate-naked_functions.rs:11:1\n+   |\n+11 | #[naked]\n+   | ^^^^^^^^\n+   |\n+   = help: add #![feature(naked_functions)] to the crate attributes to enable\n+\n+error: the `#[naked]` attribute is an experimental feature (see issue #32408)\n+  --> $DIR/feature-gate-naked_functions.rs:15:1\n+   |\n+15 | #[naked]\n+   | ^^^^^^^^\n+   |\n+   = help: add #![feature(naked_functions)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "11b9f412957eb52c2ef5c5da3241c942a13733bd", "filename": "src/test/ui/feature-gate-never_type.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -10,8 +10,6 @@\n \n // Test that ! errors when used in illegal positions with feature(never_type) disabled\n \n-// gate-test-never_type\n-\n trait Foo {\n     type Wub;\n }", "previous_filename": "src/test/compile-fail/never-disabled.rs"}, {"sha": "c242e613ead755105f4d7dc3093a534c8abdc705", "filename": "src/test/ui/feature-gate-never_type.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,42 @@\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:17:17\n+   |\n+17 | type Ma = (u32, !, i32); //~ ERROR type is experimental\n+   |                 ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:18:20\n+   |\n+18 | type Meeshka = Vec<!>; //~ ERROR type is experimental\n+   |                    ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:19:16\n+   |\n+19 | type Mow = &fn(!) -> !; //~ ERROR type is experimental\n+   |                ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:20:19\n+   |\n+20 | type Skwoz = &mut !; //~ ERROR type is experimental\n+   |                   ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:23:16\n+   |\n+23 |     type Wub = !; //~ ERROR type is experimental\n+   |                ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "0a55a8a78ce5a8f3f8478be689c484008399cd49", "filename": "src/test/ui/feature-gate-no_core.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-no_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-no_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no_core.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-no_core\n-\n #![no_core] //~ ERROR no_core is experimental\n \n fn main() {}", "previous_filename": "src/test/compile-fail/gated-no-core.rs"}, {"sha": "02e0b176249682ca9c01db57f68081be014dece2", "filename": "src/test/ui/feature-gate-no_core.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-no_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-no_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no_core.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: no_core is experimental (see issue #29639)\n+  --> $DIR/feature-gate-no_core.rs:11:1\n+   |\n+11 | #![no_core] //~ ERROR no_core is experimental\n+   | ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(no_core)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "9e042c3a7d50e2313ad3bfd849133a35dfb552d1", "filename": "src/test/ui/feature-gate-non_ascii_idents.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-non_ascii_idents\n-\n extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n \n use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents", "previous_filename": "src/test/compile-fail/gated-non-ascii-idents.rs"}, {"sha": "df6ce6b61626844536056722ec43a3b63fa13056", "filename": "src/test/ui/feature-gate-non_ascii_idents.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,122 @@\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:11:1\n+   |\n+11 | extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:13:5\n+   |\n+13 | use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents\n+   |     ^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:15:1\n+   |\n+15 | / mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n+16 | |     pub fn bar() {}\n+17 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:19:1\n+   |\n+19 | / fn b\u00e4r( //~ ERROR non-ascii idents\n+20 | |     b\u00e4z: isize //~ ERROR non-ascii idents\n+21 | |     ) {\n+22 | |     let _\u00f6: isize; //~ ERROR non-ascii idents\n+...  |\n+26 | |     }\n+27 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:20:5\n+   |\n+20 |     b\u00e4z: isize //~ ERROR non-ascii idents\n+   |     ^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:22:9\n+   |\n+22 |     let _\u00f6: isize; //~ ERROR non-ascii idents\n+   |         ^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:25:10\n+   |\n+25 |         (_\u00e4, _) => {} //~ ERROR non-ascii idents\n+   |          ^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:29:1\n+   |\n+29 | / struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n+30 | |     f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n+31 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:30:5\n+   |\n+30 |     f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n+   |     ^^^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:33:1\n+   |\n+33 | / enum B\u00e4r { //~ ERROR non-ascii idents\n+34 | |     B\u00e4z { //~ ERROR non-ascii idents\n+35 | |         q\u00fcx: isize //~ ERROR non-ascii idents\n+36 | |     }\n+37 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:34:5\n+   |\n+34 | /     B\u00e4z { //~ ERROR non-ascii idents\n+35 | |         q\u00fcx: isize //~ ERROR non-ascii idents\n+36 | |     }\n+   | |_____^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:35:9\n+   |\n+35 |         q\u00fcx: isize //~ ERROR non-ascii idents\n+   |         ^^^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:40:5\n+   |\n+40 |     fn q\u00fcx();  //~ ERROR non-ascii idents\n+   |     ^^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "9cdebde7b7b9879946e83a4aaf2c274540cf6cda", "filename": "src/test/ui/feature-gate-plugin_registrar.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-plugin_registrar\n-\n // Test that `#[plugin_registrar]` attribute is gated by `plugin_registrar`\n // feature gate.\n ", "previous_filename": "src/test/compile-fail/gated-plugin_registrar.rs"}, {"sha": "3710239142af61e31abf4019223cf0443aa7b4d7", "filename": "src/test/ui/feature-gate-plugin_registrar.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+  --> $DIR/feature-gate-plugin_registrar.rs:16:1\n+   |\n+16 | pub fn registrar() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(plugin_registrar)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "da2e41a0f5e422347b8643fa42b683f2f517a25b", "filename": "src/test/ui/feature-gate-target_feature.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-target_feature\n-\n #[target_feature = \"+sse2\"]\n //~^ the `#[target_feature]` attribute is an experimental feature\n fn foo() {}", "previous_filename": "src/test/compile-fail/gated-target_feature.rs"}, {"sha": "8c89eabf753889084682b86192bd66c150eb9431", "filename": "src/test/ui/feature-gate-target_feature.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[target_feature]` attribute is an experimental feature\n+  --> $DIR/feature-gate-target_feature.rs:11:1\n+   |\n+11 | #[target_feature = \"+sse2\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(target_feature)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "f355c6562c8b0a2e18cd8babd32c44c608297ff2", "filename": "src/test/ui/feature-gate-thread_local.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-thread_local.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-thread_local\n-\n // Test that `#[thread_local]` attribute is gated by `thread_local`\n // feature gate.\n //", "previous_filename": "src/test/compile-fail/gated-thread-local.rs"}, {"sha": "2608018528ce74a6e849e014294885e3b5873f4d", "filename": "src/test/ui/feature-gate-thread_local.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-thread_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-thread_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-thread_local.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: `#[thread_local]` is an experimental feature, and does not currently handle destructors. There is no corresponding `#[task_local]` mapping to the task model (see issue #29594)\n+  --> $DIR/feature-gate-thread_local.rs:18:1\n+   |\n+18 | #[thread_local] //~ ERROR `#[thread_local]` is an experimental feature\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(thread_local)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "367ee6df50dfe9b7ab838b8cb3039f36d896e974", "filename": "src/test/ui/feature-gate-trace_macros.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-trace_macros\n-\n fn main() {\n     trace_macros!(true); //~ ERROR: `trace_macros` is not stable\n }", "previous_filename": "src/test/compile-fail/gated-trace_macros.rs"}, {"sha": "aca74099b7d99414c7d9f5c3857b197535501590", "filename": "src/test/ui/feature-gate-trace_macros.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n+  --> $DIR/feature-gate-trace_macros.rs:12:5\n+   |\n+12 |     trace_macros!(true); //~ ERROR: `trace_macros` is not stable\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(trace_macros)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "d3c07d653f40ce548d57cf994321f87f294896ad", "filename": "src/test/ui/feature-gate-type_ascription.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-type_ascription\n-\n // Type ascription is feature gated\n \n fn main() {", "previous_filename": "src/test/compile-fail/type-ascription-feature-gate.rs"}, {"sha": "d2a3ee2cf8f9c7506b203e4b86eb7c435ad9e48d", "filename": "src/test/ui/feature-gate-type_ascription.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: type ascription is experimental (see issue #23416)\n+  --> $DIR/feature-gate-type_ascription.rs:14:13\n+   |\n+14 |     let a = 10: u8; //~ ERROR type ascription is experimental\n+   |             ^^^^^^\n+   |\n+   = help: add #![feature(type_ascription)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "6533fddd947141c2f91f83037f257e46bc7550fa", "filename": "src/test/ui/feature-gate-untagged_unions.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-untagged_unions\n-\n union U1 { // OK\n     a: u8,\n }", "previous_filename": "src/test/compile-fail/union/union-feature-gate.rs"}, {"sha": "26b698912bc95eae650633169341256634329fc5", "filename": "src/test/ui/feature-gate-untagged_unions.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,32 @@\n+error: unions with non-`Copy` fields are unstable (see issue #32836)\n+  --> $DIR/feature-gate-untagged_unions.rs:19:1\n+   |\n+19 | / union U3 { //~ ERROR unions with non-`Copy` fields are unstable\n+20 | |     a: String,\n+21 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(untagged_unions)] to the crate attributes to enable\n+\n+error: unions with non-`Copy` fields are unstable (see issue #32836)\n+  --> $DIR/feature-gate-untagged_unions.rs:23:1\n+   |\n+23 | / union U4<T> { //~ ERROR unions with non-`Copy` fields are unstable\n+24 | |     a: T,\n+25 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(untagged_unions)] to the crate attributes to enable\n+\n+error: unions with `Drop` implementations are unstable (see issue #32836)\n+  --> $DIR/feature-gate-untagged_unions.rs:27:1\n+   |\n+27 | / union U5 { //~ ERROR unions with `Drop` implementations are unstable\n+28 | |     a: u8,\n+29 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(untagged_unions)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3a01ecdf9db6f71502f3776fa55b3df79de4d969", "filename": "src/test/ui/specialization-feature-gate-default.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "previous_filename": "src/test/compile-fail/specialization/specialization-feature-gate-default.rs"}, {"sha": "e17d13083858e617882fa1dd6f6c4fc7560f82a2", "filename": "src/test/ui/specialization-feature-gate-default.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,10 @@\n+error: specialization is unstable (see issue #31844)\n+  --> $DIR/specialization-feature-gate-default.rs:20:5\n+   |\n+20 |     default fn foo(&self) {} //~ ERROR specialization is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(specialization)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "5eb48eab15e52468a38da694093aef6f72fa6d34", "filename": "src/test/ui/specialization-feature-gate-overlap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.rs?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "previous_filename": "src/test/compile-fail/specialization/specialization-feature-gate-overlap.rs"}, {"sha": "7fe2891c9082de316f8020f531c04a86e1de87eb", "filename": "src/test/ui/specialization-feature-gate-overlap.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dba3e68e670a3b1418b259ca5f3758444dd1a68/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr?ref=6dba3e68e670a3b1418b259ca5f3758444dd1a68", "patch": "@@ -0,0 +1,15 @@\n+error[E0119]: conflicting implementations of trait `Foo` for type `u8`:\n+  --> $DIR/specialization-feature-gate-overlap.rs:23:1\n+   |\n+19 | / impl<T> Foo for T {\n+20 | |     fn foo(&self) {}\n+21 | | }\n+   | |_- first implementation here\n+22 | \n+23 | / impl Foo for u8 { //~ ERROR E0119\n+24 | |     fn foo(&self) {}\n+25 | | }\n+   | |_^ conflicting implementation for `u8`\n+\n+error: aborting due to previous error\n+"}]}