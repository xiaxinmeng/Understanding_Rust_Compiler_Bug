{"sha": "cf16f4f7e5bf5d37fc0e254e3c7ccdf0623c50d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMTZmNGY3ZTViZjVkMzdmYzBlMjU0ZTNjN2NjZGYwNjIzYzUwZDM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-01T01:47:53Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-01T03:15:11Z"}, "message": "Add a test for block expressions of generic types. XFAILed", "tree": {"sha": "cbff493127cfc131b6e3b0f2d230392ee8168804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbff493127cfc131b6e3b0f2d230392ee8168804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf16f4f7e5bf5d37fc0e254e3c7ccdf0623c50d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf16f4f7e5bf5d37fc0e254e3c7ccdf0623c50d3", "html_url": "https://github.com/rust-lang/rust/commit/cf16f4f7e5bf5d37fc0e254e3c7ccdf0623c50d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf16f4f7e5bf5d37fc0e254e3c7ccdf0623c50d3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c27b72e323d1aabb0eeb9939feb5584bc28ba9e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c27b72e323d1aabb0eeb9939feb5584bc28ba9e9", "html_url": "https://github.com/rust-lang/rust/commit/c27b72e323d1aabb0eeb9939feb5584bc28ba9e9"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "fc34d112419d7a0c59bad100cbfe84df19da6968", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cf16f4f7e5bf5d37fc0e254e3c7ccdf0623c50d3/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf16f4f7e5bf5d37fc0e254e3c7ccdf0623c50d3/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=cf16f4f7e5bf5d37fc0e254e3c7ccdf0623c50d3", "patch": "@@ -0,0 +1,56 @@\n+// xfail-boot\n+// xfail-stage0\n+// -*- rust -*-\n+\n+// Tests for standalone blocks as expressions with dynamic type sizes\n+\n+type compare[T] = fn(&T t1, &T t2) -> bool;\n+\n+fn test_generic[T](&T expected, &compare[T] eq) {\n+  let T actual = { expected };\n+  check (eq(expected, actual));\n+}\n+\n+fn test_bool() {\n+  fn compare_bool(&bool b1, &bool b2) -> bool {\n+    ret b1 == b2;\n+  }\n+  auto eq = bind compare_bool(_, _);\n+  test_generic[bool](true, eq);\n+}\n+\n+\n+fn test_tup() {\n+  type t = tup(int, int);\n+  fn compare_tup(&t t1, &t t2) -> bool {\n+    ret t1 == t2;\n+  }\n+  auto eq = bind compare_tup(_, _);\n+  test_generic[t](tup(1, 2), eq);\n+}\n+\n+fn test_vec() {\n+  fn compare_vec(&vec[int] v1, &vec[int] v2) -> bool {\n+    ret v1 == v2;\n+  }\n+  auto eq = bind compare_vec(_, _);\n+  test_generic[vec[int]](vec(1, 2), eq);\n+}\n+\n+fn test_box() {\n+  fn compare_box(&@bool b1, &@bool b2) -> bool {\n+    ret *b1 == *b2;\n+  }\n+  auto eq = bind compare_box(_, _);\n+  test_generic[@bool](@true, eq);\n+}\n+\n+fn main() {\n+  test_bool();\n+  test_tup();\n+  // FIXME: These two don't pass yet\n+  test_vec();\n+  test_box();\n+}\n+\n+"}]}