{"sha": "56441e19d1a0f294e69cb711f3a3b21184bf3b8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NDQxZTE5ZDFhMGYyOTRlNjljYjcxMWYzYTNiMjExODRiZjNiOGE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-27T17:22:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-27T19:19:02Z"}, "message": "Correctly split a.b.c into its path and field access components.", "tree": {"sha": "adac68cace520b95605cdd0ef3b846aa7953aea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adac68cace520b95605cdd0ef3b846aa7953aea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56441e19d1a0f294e69cb711f3a3b21184bf3b8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56441e19d1a0f294e69cb711f3a3b21184bf3b8a", "html_url": "https://github.com/rust-lang/rust/commit/56441e19d1a0f294e69cb711f3a3b21184bf3b8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56441e19d1a0f294e69cb711f3a3b21184bf3b8a/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce31b02113ad77d24a3e5ea00220d134513a1531", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce31b02113ad77d24a3e5ea00220d134513a1531", "html_url": "https://github.com/rust-lang/rust/commit/ce31b02113ad77d24a3e5ea00220d134513a1531"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "724664b32fbe3c2edee00b7731c9b5c86c59686e", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56441e19d1a0f294e69cb711f3a3b21184bf3b8a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56441e19d1a0f294e69cb711f3a3b21184bf3b8a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=56441e19d1a0f294e69cb711f3a3b21184bf3b8a", "patch": "@@ -35,7 +35,7 @@ tag def_wrap {\n     def_wrap_import(@ast.view_item);\n     def_wrap_mod(@ast.item);\n     def_wrap_other(def);\n-    def_wrap_expr_field(ident);\n+    def_wrap_expr_field(uint);\n     def_wrap_resolving;\n }\n \n@@ -141,8 +141,8 @@ fn find_final_def(&env e, import_map index,\n                 e.sess.span_err(sp, \"Crate access is not implemented\");\n             }\n             case (_) {\n-                auto first = idents.(0);\n-                ret def_wrap_expr_field(first);\n+                let uint l = _vec.len[ident](idents);\n+                ret def_wrap_expr_field(l);\n             }\n         }\n         fail;\n@@ -438,27 +438,28 @@ fn fold_expr_path(&env e, &span sp, &ast.path p, &option.t[def] d,\n         }\n     }\n \n-    // FIXME: All this call to find_final_def does right now is find\n-    // unresolved names. It should be extended to return a wrapper\n-    // over ast.expr. It is in a perfect position to construct\n-    // the expr_field(expr_field(...(expr_path(...)))) we should return.\n-\n     auto index = new_def_hash[def_wrap]();\n     auto d = find_final_def(e, index, sp, p.node.idents, none[ast.def_id]);\n+    let uint path_len = 0u;\n     alt (d) {\n-        case (def_wrap_expr_field(_)) {\n+        case (def_wrap_expr_field(?remaining)) {\n+            path_len = n_idents - remaining + 1u;\n         }\n         case (def_wrap_other(_)) {\n+            check (n_idents == 1u);\n+            path_len = 1u;\n         }\n         case (def_wrap_mod(?m)) {\n             e.sess.span_err(sp,\n                             \"can't refer to a module as a first-class value\");\n+            fail;\n         }\n     }\n-\n+    auto path_elems =\n+        _vec.slice[ident](p.node.idents, 0u, path_len);\n     auto p_ = rec(node=rec(idents = vec(id0) with p.node) with p);\n     auto ex = @fold.respan[ast.expr_](sp, ast.expr_path(p_, d_, a));\n-    auto i = 1u;\n+    auto i = path_len;\n     while (i < n_idents) {\n         auto id = p.node.idents.(i);\n         ex = @fold.respan[ast.expr_](sp, ast.expr_field(ex, id, a));\n@@ -476,7 +477,8 @@ fn fold_view_item_import(&env e, &span sp,\n     auto last_id = is.(len - 1u);\n     auto d = find_final_def(e, index, sp, is, some(id));\n     alt (d) {\n-        case (def_wrap_expr_field(?ident)) {\n+        case (def_wrap_expr_field(?remain)) {\n+            auto ident = is.(len - remain);\n             e.sess.span_err(sp, ident + \" is not a module or crate\");\n         }\n         case (_) {"}]}