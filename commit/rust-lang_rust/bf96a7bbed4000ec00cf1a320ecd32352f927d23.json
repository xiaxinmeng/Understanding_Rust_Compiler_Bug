{"sha": "bf96a7bbed4000ec00cf1a320ecd32352f927d23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOTZhN2JiZWQ0MDAwZWMwMGNmMWEzMjBlY2QzMjM1MmY5MjdkMjM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-03T10:07:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-03T10:07:07Z"}, "message": "Rollup merge of #56366 - alexreg:stabilise-self_in_typedefs, r=Centril\n\nStabilize self_in_typedefs feature\n\n[**Tracking Issue**](https://github.com/rust-lang/rust/issues/49303)\n\nr? @centril", "tree": {"sha": "34b7f26e3a7e051008f0f70947ec2c8cdab63d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b7f26e3a7e051008f0f70947ec2c8cdab63d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf96a7bbed4000ec00cf1a320ecd32352f927d23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcBQBLCRBK7hj4Ov3rIwAAdHIIAKCeNOGiId8ZClYrLkrVfnrE\nOBKUSqsuWL/qlenQMoomC871NFGkAzWDf0UDYQFymFpO1Sk++opg/T9Fx1t2DD0d\nwwjXKRKpqhEANP5a91ztMXV2SrX9WQ7NXPySvgRUDomwP2rI8rcdCryNm/tbDZRa\neOT1oCBkrPS6b63FExniGXKBWN25IcLQhfu523HDfPMbkFv4gwNjgJkVmVNqSVgF\nHVYZ77+kHETMoBNTbdKZ0zzdLMos3VV8qJ7Ak9m/FbY94yUeIYdJlXA1pM8FNhoC\nhkN70SO8Rdht73StfZs6RFH7ovcplAWHzk2WUlxXa6IFvzw1+cmoaIOI/2Xe+5M=\n=h5dG\n-----END PGP SIGNATURE-----\n", "payload": "tree 34b7f26e3a7e051008f0f70947ec2c8cdab63d36\nparent e9a805522c7cee40fdc88edfb7a6ae05c2ad1752\nparent d609fdf775f2789066cc92ba30f6de2875c10903\nauthor kennytm <kennytm@gmail.com> 1543831627 +0800\ncommitter GitHub <noreply@github.com> 1543831627 +0800\n\nRollup merge of #56366 - alexreg:stabilise-self_in_typedefs, r=Centril\n\nStabilize self_in_typedefs feature\n\n[**Tracking Issue**](https://github.com/rust-lang/rust/issues/49303)\n\nr? @centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf96a7bbed4000ec00cf1a320ecd32352f927d23", "html_url": "https://github.com/rust-lang/rust/commit/bf96a7bbed4000ec00cf1a320ecd32352f927d23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf96a7bbed4000ec00cf1a320ecd32352f927d23/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "html_url": "https://github.com/rust-lang/rust/commit/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752"}, {"sha": "d609fdf775f2789066cc92ba30f6de2875c10903", "url": "https://api.github.com/repos/rust-lang/rust/commits/d609fdf775f2789066cc92ba30f6de2875c10903", "html_url": "https://github.com/rust-lang/rust/commit/d609fdf775f2789066cc92ba30f6de2875c10903"}], "stats": {"total": 107, "additions": 25, "deletions": 82}, "files": [{"sha": "2416e85c17d1f68601ce0963670c286527e588b7", "filename": "src/doc/unstable-book/src/language-features/self-in-typedefs.md", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-in-typedefs.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-in-typedefs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-in-typedefs.md?ref=e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "patch": "@@ -1,24 +0,0 @@\n-# `self_in_typedefs`\n-\n-The tracking issue for this feature is: [#49303]\n-\n-[#49303]: https://github.com/rust-lang/rust/issues/49303\n-\n-------------------------\n-\n-The `self_in_typedefs` feature gate lets you use the special `Self` identifier\n-in `struct`, `enum`, and `union` type definitions.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(self_in_typedefs)]\n-\n-enum List<T>\n-where\n-    Self: PartialOrd<Self> // can write `Self` instead of `List<T>`\n-{\n-    Nil,\n-    Cons(T, Box<Self>) // likewise here\n-}\n-```"}, {"sha": "fdac1e3b8165239b744c51b95c7fe4415040f33c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=bf96a7bbed4000ec00cf1a320ecd32352f927d23", "patch": "@@ -2373,13 +2373,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.with_current_self_item(item, |this| {\n             this.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n                 let item_def_id = this.definitions.local_def_id(item.id);\n-                if this.session.features_untracked().self_in_typedefs {\n-                    this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n-                        visit::walk_item(this, item);\n-                    });\n-                } else {\n+                this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n                     visit::walk_item(this, item);\n-                }\n+                });\n             });\n         });\n     }\n@@ -3185,16 +3181,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             if is_self_type(path, ns) {\n                 __diagnostic_used!(E0411);\n                 err.code(DiagnosticId::Error(\"E0411\".into()));\n-                let available_in = if this.session.features_untracked().self_in_typedefs {\n-                    \"impls, traits, and type definitions\"\n-                } else {\n-                    \"traits and impls\"\n-                };\n-                err.span_label(span, format!(\"`Self` is only available in {}\", available_in));\n-                if this.current_self_item.is_some() && nightly_options::is_nightly_build() {\n-                    err.help(\"add #![feature(self_in_typedefs)] to the crate attributes \\\n-                              to enable\");\n-                }\n+                err.span_label(span, format!(\"`Self` is only available in impls, traits, \\\n+                                              and type definitions\"));\n                 return (err, Vec::new());\n             }\n             if is_self_value(path, ns) {"}, {"sha": "1ced452e45866127835655c94f31f4fceed1da14", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bf96a7bbed4000ec00cf1a320ecd32352f927d23", "patch": "@@ -462,9 +462,6 @@ declare_features! (\n     // Allows `use x::y;` to resolve through `self::x`, not just `::x`\n     (active, uniform_paths, \"1.30.0\", Some(53130), None),\n \n-    // Allows `Self` in type definitions\n-    (active, self_in_typedefs, \"1.30.0\", Some(49303), None),\n-\n     // Allows unsized rvalues at arguments and parameters\n     (active, unsized_locals, \"1.30.0\", Some(48055), None),\n \n@@ -675,21 +672,23 @@ declare_features! (\n     (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n     // Parentheses in patterns\n     (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n-    // Allows the definition of `const fn` functions.\n+    // Allows the definition of `const fn` functions\n     (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n     // Scoped lints\n     (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n     // impl<I:Iterator> Iterator for &mut Iterator\n     // impl Debug for Foo<'_>\n     (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n-    // `extern crate foo as bar;` puts `bar` into extern prelude.\n+    // `extern crate foo as bar;` puts `bar` into extern prelude\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n     (accepted, macro_literal_matcher, \"1.31.0\", Some(35625), None),\n     // Use `?` as the Kleene \"at most one\" operator\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n-    // Self struct constructor  (RFC 2302)\n+    // `Self` struct constructor (RFC 2302)\n     (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n+    // `Self` in type definitions (RFC 2300)\n+    (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n );\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must"}, {"sha": "84a7e18f91ad2cbd70d036252e3a770f3ea2d14e", "filename": "src/test/run-pass/self/self-in-typedefs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Frun-pass%2Fself%2Fself-in-typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Frun-pass%2Fself%2Fself-in-typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself%2Fself-in-typedefs.rs?ref=bf96a7bbed4000ec00cf1a320ecd32352f927d23", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n // run-pass\n-#![allow(unions_with_drop_fields)]\n \n-#![feature(self_in_typedefs)]\n #![feature(untagged_unions)]\n \n #![allow(dead_code)]\n+#![allow(unions_with_drop_fields)]\n \n enum A<'a, T: 'a>\n where"}, {"sha": "4e85f651b5533443daa616449059d964247672de", "filename": "src/test/ui/error-codes/E0411.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr?ref=bf96a7bbed4000ec00cf1a320ecd32352f927d23", "patch": "@@ -2,7 +2,7 @@ error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/E0411.rs:12:6\n    |\n LL |     <Self>::foo; //~ ERROR E0411\n-   |      ^^^^ `Self` is only available in traits and impls\n+   |      ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to previous error\n "}, {"sha": "4b476a0a645b1541900a37d9536985c75ceb5e98", "filename": "src/test/ui/feature-gates/feature-gate-self_in_typedefs.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.rs?ref=e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum StackList<'a, T: 'a> {\n-    Nil,\n-    Cons(T, &'a Self)\n-    //~^ ERROR cannot find type `Self` in this scope\n-    //~| `Self` is only available in traits and impls\n-}\n-\n-fn main() {}"}, {"sha": "ab04953f3e50c1f6943d8e3b656e886b490a362f", "filename": "src/test/ui/feature-gates/feature-gate-self_in_typedefs.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr?ref=e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "patch": "@@ -1,11 +0,0 @@\n-error[E0411]: cannot find type `Self` in this scope\n-  --> $DIR/feature-gate-self_in_typedefs.rs:13:17\n-   |\n-LL |     Cons(T, &'a Self)\n-   |                 ^^^^ `Self` is only available in traits and impls\n-   |\n-   = help: add #![feature(self_in_typedefs)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0411`."}, {"sha": "acb501c29fcebc7ca820f172cd03aa3dfd6938ec", "filename": "src/test/ui/issues/issue-36638.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs?ref=bf96a7bbed4000ec00cf1a320ecd32352f927d23", "patch": "@@ -12,6 +12,7 @@\n \n struct Foo<Self>(Self);\n //~^ ERROR expected identifier, found keyword `Self`\n+//~^^ ERROR E0392\n \n trait Bar<Self> {}\n //~^ ERROR expected identifier, found keyword `Self`"}, {"sha": "155eb170b091faaa3c4148dc7a39fa54389bacde", "filename": "src/test/ui/issues/issue-36638.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr?ref=bf96a7bbed4000ec00cf1a320ecd32352f927d23", "patch": "@@ -5,10 +5,19 @@ LL | struct Foo<Self>(Self);\n    |            ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/issue-36638.rs:16:11\n+  --> $DIR/issue-36638.rs:17:11\n    |\n LL | trait Bar<Self> {}\n    |           ^^^^ expected identifier, found keyword\n \n-error: aborting due to 2 previous errors\n+error[E0392]: parameter `Self` is never used\n+  --> $DIR/issue-36638.rs:13:12\n+   |\n+LL | struct Foo<Self>(Self);\n+   |            ^^^^ unused type parameter\n+   |\n+   = help: consider removing `Self` or using a marker such as `std::marker::PhantomData`\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "cfb20340504851f1e78a7cadd6cfadec71d418f6", "filename": "src/test/ui/resolve/issue-24968.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr?ref=bf96a7bbed4000ec00cf1a320ecd32352f927d23", "patch": "@@ -2,7 +2,7 @@ error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/issue-24968.rs:11:11\n    |\n LL | fn foo(_: Self) {\n-   |           ^^^^ `Self` is only available in traits and impls\n+   |           ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to previous error\n "}, {"sha": "b3a8261bcfc747479c3d58140a724c0770ddfa95", "filename": "src/test/ui/resolve/resolve-self-in-impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf96a7bbed4000ec00cf1a320ecd32352f927d23/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl-2.stderr?ref=bf96a7bbed4000ec00cf1a320ecd32352f927d23", "patch": "@@ -2,7 +2,7 @@ error[E0411]: expected trait, found self type `Self`\n   --> $DIR/resolve-self-in-impl-2.rs:14:6\n    |\n LL | impl Self for S {} //~ ERROR expected trait, found self type `Self`\n-   |      ^^^^ `Self` is only available in traits and impls\n+   |      ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error[E0405]: cannot find trait `N` in `Self`\n   --> $DIR/resolve-self-in-impl-2.rs:15:12"}]}