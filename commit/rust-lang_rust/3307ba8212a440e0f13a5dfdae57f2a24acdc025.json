{"sha": "3307ba8212a440e0f13a5dfdae57f2a24acdc025", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMDdiYTgyMTJhNDQwZTBmMTNhNWRmZGFlNTdmMmEyNGFjZGMwMjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-19T20:44:21Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-20T15:41:36Z"}, "message": "Ignore code examples on given items where it doesn't make sense", "tree": {"sha": "7d4801e676f8960d2559d587bcb5c063287062e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d4801e676f8960d2559d587bcb5c063287062e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3307ba8212a440e0f13a5dfdae57f2a24acdc025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3307ba8212a440e0f13a5dfdae57f2a24acdc025", "html_url": "https://github.com/rust-lang/rust/commit/3307ba8212a440e0f13a5dfdae57f2a24acdc025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3307ba8212a440e0f13a5dfdae57f2a24acdc025/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a22a0ff93d63f738151f096434e732466b4a42e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a22a0ff93d63f738151f096434e732466b4a42e", "html_url": "https://github.com/rust-lang/rust/commit/1a22a0ff93d63f738151f096434e732466b4a42e"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "1d79fc3f191f2b03ca8993d448466a90c267ba0c", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3307ba8212a440e0f13a5dfdae57f2a24acdc025/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3307ba8212a440e0f13a5dfdae57f2a24acdc025/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=3307ba8212a440e0f13a5dfdae57f2a24acdc025", "patch": "@@ -31,18 +31,27 @@ fn calculate_doc_coverage(krate: clean::Crate, ctx: &DocContext<'_>) -> clean::C\n struct ItemCount {\n     total: u64,\n     with_docs: u64,\n+    total_examples: u64,\n     with_examples: u64,\n }\n \n impl ItemCount {\n-    fn count_item(&mut self, has_docs: bool, has_doc_example: bool) {\n+    fn count_item(\n+        &mut self,\n+        has_docs: bool,\n+        has_doc_example: bool,\n+        should_have_doc_examples: bool,\n+    ) {\n         self.total += 1;\n \n         if has_docs {\n             self.with_docs += 1;\n         }\n-        if has_doc_example {\n-            self.with_examples += 1;\n+        if should_have_doc_examples {\n+            self.total_examples += 1;\n+            if has_doc_example {\n+                self.with_examples += 1;\n+            }\n         }\n     }\n \n@@ -55,8 +64,8 @@ impl ItemCount {\n     }\n \n     fn examples_percentage(&self) -> Option<f64> {\n-        if self.total > 0 {\n-            Some((self.with_examples as f64 * 100.0) / self.total as f64)\n+        if self.total_examples > 0 {\n+            Some((self.with_examples as f64 * 100.0) / self.total_examples as f64)\n         } else {\n             None\n         }\n@@ -70,6 +79,7 @@ impl ops::Sub for ItemCount {\n         ItemCount {\n             total: self.total - rhs.total,\n             with_docs: self.with_docs - rhs.with_docs,\n+            total_examples: self.total_examples - rhs.total_examples,\n             with_examples: self.with_examples - rhs.with_examples,\n         }\n     }\n@@ -79,6 +89,7 @@ impl ops::AddAssign for ItemCount {\n     fn add_assign(&mut self, rhs: Self) {\n         self.total += rhs.total;\n         self.with_docs += rhs.with_docs;\n+        self.total_examples += rhs.total_examples;\n         self.with_examples += rhs.with_examples;\n     }\n }\n@@ -176,19 +187,6 @@ impl CoverageCalculator {\n \n impl fold::DocFolder for CoverageCalculator {\n     fn fold_item(&mut self, i: clean::Item) -> Option<clean::Item> {\n-        let has_docs = !i.attrs.doc_strings.is_empty();\n-        let mut tests = Tests { found_tests: 0 };\n-\n-        find_testable_code(\n-            &i.attrs.doc_strings.iter().map(|d| d.as_str()).collect::<Vec<_>>().join(\"\\n\"),\n-            &mut tests,\n-            ErrorCodes::No,\n-            false,\n-            None,\n-        );\n-\n-        let has_doc_example = tests.found_tests != 0;\n-\n         match i.inner {\n             _ if !i.def_id.is_local() => {\n                 // non-local items are skipped because they can be out of the users control,\n@@ -237,11 +235,34 @@ impl fold::DocFolder for CoverageCalculator {\n                 }\n             }\n             _ => {\n+                let has_docs = !i.attrs.doc_strings.is_empty();\n+                let mut tests = Tests { found_tests: 0 };\n+\n+                let should_have_doc_examples = !matches!(i.inner,\n+                    clean::StructFieldItem(_)\n+                    | clean::VariantItem(_)\n+                    | clean::AssocConstItem(_, _)\n+                    | clean::AssocTypeItem(_, _)\n+                    | clean::TypedefItem(_, _)\n+                    | clean::StaticItem(_)\n+                    | clean::ConstantItem(_)\n+                );\n+                if should_have_doc_examples {\n+                    find_testable_code(\n+                        &i.attrs.doc_strings.iter().map(|d| d.as_str()).collect::<Vec<_>>().join(\"\\n\"),\n+                        &mut tests,\n+                        ErrorCodes::No,\n+                        false,\n+                        None,\n+                    );\n+                }\n+\n+                let has_doc_example = tests.found_tests != 0;\n                 debug!(\"counting {:?} {:?} in {}\", i.type_(), i.name, i.source.filename);\n                 self.items\n                     .entry(i.source.filename.clone())\n                     .or_default()\n-                    .count_item(has_docs, has_doc_example);\n+                    .count_item(has_docs, has_doc_example, should_have_doc_examples);\n             }\n         }\n "}]}