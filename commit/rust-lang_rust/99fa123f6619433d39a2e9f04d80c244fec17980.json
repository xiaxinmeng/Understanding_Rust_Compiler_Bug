{"sha": "99fa123f6619433d39a2e9f04d80c244fec17980", "node_id": "C_kwDOAAsO6NoAKDk5ZmExMjNmNjYxOTQzM2QzOWEyZTlmMDRkODBjMjQ0ZmVjMTc5ODA", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-05-23T07:50:32Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-05-25T16:13:18Z"}, "message": "bless existing test with compare-mode=nll and remove test", "tree": {"sha": "bac4435aa38dee0858d853ba7f6e6d4d9f24ef7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bac4435aa38dee0858d853ba7f6e6d4d9f24ef7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99fa123f6619433d39a2e9f04d80c244fec17980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99fa123f6619433d39a2e9f04d80c244fec17980", "html_url": "https://github.com/rust-lang/rust/commit/99fa123f6619433d39a2e9f04d80c244fec17980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99fa123f6619433d39a2e9f04d80c244fec17980/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca9d72540b0f90dee4a090b362843e9a38606520", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9d72540b0f90dee4a090b362843e9a38606520", "html_url": "https://github.com/rust-lang/rust/commit/ca9d72540b0f90dee4a090b362843e9a38606520"}], "stats": {"total": 303, "additions": 66, "deletions": 237}, "files": [{"sha": "09119ea2bb5f9338c34733e8f11d96b2def2d4f5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.krisskross.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr?ref=99fa123f6619433d39a2e9f04d80c244fec17980", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant-nll.rs:63:5\n+  --> $DIR/project-fn-ret-invariant-nll.rs:64:5\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              --  -- lifetime `'b` defined here\n@@ -15,7 +15,7 @@ LL |     (a, b)\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant-nll.rs:63:5\n+  --> $DIR/project-fn-ret-invariant-nll.rs:64:5\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              --  -- lifetime `'b` defined here"}, {"sha": "266f3b99f9f30a7f2bb436a493c2c884df19709e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.oneuse.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr?ref=99fa123f6619433d39a2e9f04d80c244fec17980", "patch": "@@ -15,19 +15,19 @@ LL |     let a = bar(f, x);\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant-nll.rs:47:13\n+  --> $DIR/project-fn-ret-invariant-nll.rs:46:13\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n-...\n-LL |     let b = bar(f, y);\n+LL |     let f = foo; // <-- No consistent type can be inferred for `f` here.\n+LL |     let a = bar(f, x);\n    |             ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n-   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n+   = note: requirement occurs because of a function pointer to `foo`\n+   = note: the function `foo` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'a` and `'b` must be the same: replace one with the other"}, {"sha": "15bf38dabc0601b71e1319e3f205956ce29b2282", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs?ref=99fa123f6619433d39a2e9f04d80c244fec17980", "patch": "@@ -44,7 +44,8 @@ fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n     let f = foo; // <-- No consistent type can be inferred for `f` here.\n     let a = bar(f, x); //[oneuse]~ ERROR lifetime may not live long enough\n-    let b = bar(f, y); //[oneuse]~ ERROR lifetime may not live long enough\n+    //[oneuse]~^ ERROR lifetime may not live long enough\n+    let b = bar(f, y);\n     (a, b)\n }\n "}, {"sha": "56f081529997febdce48b1d3566323d5ed14acdf", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr?ref=99fa123f6619433d39a2e9f04d80c244fec17980", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant-nll.rs:56:5\n+  --> $DIR/project-fn-ret-invariant-nll.rs:57:5\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |        -- lifetime `'a` defined here"}, {"sha": "02e47721e0cf928bc511c9da78cea5ffeeb39c95", "filename": "src/test/ui/async-await/issues/issue-72312.nll.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr?ref=99fa123f6619433d39a2e9f04d80c244fec17980", "patch": "@@ -1,24 +1,23 @@\n error[E0521]: borrowed data escapes outside of associated function\n-  --> $DIR/issue-72312.rs:20:24\n+  --> $DIR/issue-72312.rs:20:9\n    |\n LL |       pub async fn start(&self) {\n    |                          -----\n    |                          |\n    |                          `self` is a reference that is only valid in the associated function body\n    |                          let's call the lifetime of this reference `'1`\n ...\n-LL |           require_static(async move {\n-   |  ________________________^\n+LL | /         require_static(async move {\n LL | |\n LL | |\n LL | |\n LL | |\n LL | |             &self;\n LL | |         });\n-   | |         ^\n-   | |         |\n-   | |_________`self` escapes the associated function body here\n-   |           argument requires that `'1` must outlive `'static`\n+   | |          ^\n+   | |          |\n+   | |__________`self` escapes the associated function body here\n+   |            argument requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "ea835f2e05260a95425ecfbbd8911c85a6fdcecd", "filename": "src/test/ui/nll/impl-dyn-trait-static-bound.rs", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.rs?ref=ca9d72540b0f90dee4a090b362843e9a38606520", "patch": "@@ -1,116 +0,0 @@\n-#![allow(dead_code)]\n-#![feature(nll)]\n-\n-mod foo {\n-    trait OtherTrait<'a> {}\n-    impl<'a> OtherTrait<'a> for &'a () {}\n-\n-    trait ObjectTrait<T> {}\n-    trait MyTrait<T> {\n-        fn use_self<K>(&self) -> &();\n-    }\n-    trait Irrelevant {}\n-\n-    impl<T> MyTrait<T> for dyn ObjectTrait<T> {\n-        fn use_self<K>(&self) -> &() { panic!() }\n-    }\n-    impl<T> Irrelevant for dyn ObjectTrait<T> {}\n-\n-    fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n-        val.use_self::<T>()\n-        //~^ ERROR borrowed data escapes outside\n-    }\n-}\n-\n-mod bar {\n-    trait ObjectTrait {}\n-    trait MyTrait {\n-        fn use_self(&self) -> &();\n-    }\n-    trait Irrelevant {}\n-\n-    impl MyTrait for dyn ObjectTrait {\n-        fn use_self(&self) -> &() { panic!() }\n-    }\n-    impl Irrelevant for dyn ObjectTrait {}\n-\n-    fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n-        val.use_self()\n-    }\n-}\n-\n-mod baz {\n-    trait ObjectTrait {}\n-    trait MyTrait {\n-        fn use_self(&self) -> &();\n-    }\n-    trait Irrelevant {}\n-\n-    impl MyTrait for Box<dyn ObjectTrait> {\n-        fn use_self(&self) -> &() { panic!() }\n-    }\n-    impl Irrelevant for Box<dyn ObjectTrait> {}\n-\n-    fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n-        val.use_self()\n-    }\n-}\n-\n-mod bat {\n-    trait OtherTrait<'a> {}\n-    impl<'a> OtherTrait<'a> for &'a () {}\n-\n-    trait ObjectTrait {}\n-\n-    impl dyn ObjectTrait {\n-        fn use_self(&self) -> &() { panic!() }\n-    }\n-\n-    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-        val.use_self()\n-        //~^ ERROR borrowed data escapes outside\n-    }\n-}\n-\n-mod ban {\n-    trait OtherTrait<'a> {}\n-    impl<'a> OtherTrait<'a> for &'a () {}\n-\n-    trait ObjectTrait {}\n-    trait MyTrait {\n-        fn use_self(&self) -> &() { panic!() }\n-    }\n-    trait Irrelevant {\n-        fn use_self(&self) -> &() { panic!() }\n-    }\n-\n-    impl MyTrait for dyn ObjectTrait {}\n-\n-    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n-        val.use_self()\n-        //~^ ERROR borrowed data escapes outside\n-    }\n-}\n-\n-mod bal {\n-    trait OtherTrait<'a> {}\n-    impl<'a> OtherTrait<'a> for &'a () {}\n-\n-    trait ObjectTrait {}\n-    trait MyTrait {\n-        fn use_self(&self) -> &() { panic!() }\n-    }\n-    trait Irrelevant {\n-        fn use_self(&self) -> &() { panic!() }\n-    }\n-\n-    impl MyTrait for dyn ObjectTrait {}\n-    impl Irrelevant for dyn ObjectTrait {}\n-\n-    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-        MyTrait::use_self(val)\n-        //~^ ERROR borrowed data escapes outside\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "dd6b50839ef9daf2dedc82cda07bba92815829ba", "filename": "src/test/ui/nll/impl-dyn-trait-static-bound.stderr", "status": "removed", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.stderr?ref=ca9d72540b0f90dee4a090b362843e9a38606520", "patch": "@@ -1,105 +0,0 @@\n-error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/impl-dyn-trait-static-bound.rs:20:9\n-   |\n-LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n-   |               --     --- `val` is a reference that is only valid in the function body\n-   |               |\n-   |               lifetime `'a` defined here\n-LL |         val.use_self::<T>()\n-   |         ^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         `val` escapes the function body here\n-   |         argument requires that `'a` must outlive `'static`\n-   |\n-note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-dyn-trait-static-bound.rs:14:32\n-   |\n-LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> {\n-   |                                ^^^^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n-LL |         fn use_self<K>(&self) -> &() { panic!() }\n-   |            -------- calling this method introduces the `impl`'s 'static` requirement\n-help: consider relaxing the implicit `'static` requirement\n-   |\n-LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> + '_ {\n-   |                                               ++++\n-\n-error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/impl-dyn-trait-static-bound.rs:70:9\n-   |\n-LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-   |               --  --- `val` is a reference that is only valid in the function body\n-   |               |\n-   |               lifetime `'a` defined here\n-LL |         val.use_self()\n-   |         ^^^^^^^^^^^^^^\n-   |         |\n-   |         `val` escapes the function body here\n-   |         argument requires that `'a` must outlive `'static`\n-   |\n-note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-dyn-trait-static-bound.rs:65:14\n-   |\n-LL |     impl dyn ObjectTrait {\n-   |              ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n-LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- calling this method introduces the `impl`'s 'static` requirement\n-help: consider relaxing the implicit `'static` requirement\n-   |\n-LL |     impl dyn ObjectTrait + '_ {\n-   |                          ++++\n-\n-error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/impl-dyn-trait-static-bound.rs:90:9\n-   |\n-LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n-   |               --  --- `val` is a reference that is only valid in the function body\n-   |               |\n-   |               lifetime `'a` defined here\n-LL |         val.use_self()\n-   |         ^^^^^^^^^^^^^^\n-   |         |\n-   |         `val` escapes the function body here\n-   |         argument requires that `'a` must outlive `'static`\n-   |\n-note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-dyn-trait-static-bound.rs:87:26\n-   |\n-LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- calling this method introduces the `impl`'s 'static` requirement\n-...\n-LL |     impl MyTrait for dyn ObjectTrait {}\n-   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n-help: consider relaxing the implicit `'static` requirement\n-   |\n-LL |     impl MyTrait for dyn ObjectTrait + '_ {}\n-   |                                      ++++\n-\n-error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/impl-dyn-trait-static-bound.rs:111:9\n-   |\n-LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-   |               --  --- `val` is a reference that is only valid in the function body\n-   |               |\n-   |               lifetime `'a` defined here\n-LL |         MyTrait::use_self(val)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         `val` escapes the function body here\n-   |         argument requires that `'a` must outlive `'static`\n-   |\n-note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-dyn-trait-static-bound.rs:107:26\n-   |\n-LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- calling this method introduces the `impl`'s 'static` requirement\n-...\n-LL |     impl MyTrait for dyn ObjectTrait {}\n-   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n-help: consider relaxing the implicit `'static` requirement\n-   |\n-LL |     impl MyTrait for dyn ObjectTrait + '_ {}\n-   |                                      ++++\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "5d9c7077fa109b6b18d7ed6f4f86a3c0baf43584", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-nll.stderr", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fa123f6619433d39a2e9f04d80c244fec17980/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-nll.stderr?ref=99fa123f6619433d39a2e9f04d80c244fec17980", "patch": "@@ -10,6 +10,18 @@ LL |         val.use_self::<T>()\n    |         |\n    |         `val` escapes the function body here\n    |         argument requires that `'a` must outlive `'static`\n+   |\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:19:32\n+   |\n+LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> {\n+   |                                ^^^^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+LL |         fn use_self<K>(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> + '_ {\n+   |                                               ++++\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:74:9\n@@ -23,6 +35,18 @@ LL |         val.use_self()\n    |         |\n    |         `val` escapes the function body here\n    |         argument requires that `'a` must outlive `'static`\n+   |\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:69:14\n+   |\n+LL |     impl dyn ObjectTrait {\n+   |              ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl dyn ObjectTrait + '_ {\n+   |                          ++++\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:94:9\n@@ -36,6 +60,19 @@ LL |         val.use_self()\n    |         |\n    |         `val` escapes the function body here\n    |         argument requires that `'a` must outlive `'static`\n+   |\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:91:26\n+   |\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+...\n+LL |     impl MyTrait for dyn ObjectTrait {}\n+   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl MyTrait for dyn ObjectTrait + '_ {}\n+   |                                      ++++\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:114:9\n@@ -49,6 +86,19 @@ LL |         MyTrait::use_self(val)\n    |         |\n    |         `val` escapes the function body here\n    |         argument requires that `'a` must outlive `'static`\n+   |\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:110:26\n+   |\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+...\n+LL |     impl MyTrait for dyn ObjectTrait {}\n+   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl MyTrait for dyn ObjectTrait + '_ {}\n+   |                                      ++++\n \n error: aborting due to 4 previous errors\n "}]}