{"sha": "2e7bc0f808d9ad874010ac610ad796d07127c458", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlN2JjMGY4MDhkOWFkODc0MDEwYWM2MTBhZDc5NmQwNzEyN2M0NTg=", "commit": {"author": {"name": "Stuart Pernsteiner", "email": "spernsteiner@mozilla.com", "date": "2014-07-28T21:45:27Z"}, "committer": {"name": "Stuart Pernsteiner", "email": "spernsteiner@mozilla.com", "date": "2014-09-05T16:18:57Z"}, "message": "reuse original symbols for inlined items\n\nWhen inlining an item from another crate, use the original symbol from that\ncrate's metadata instead of generating a new symbol using the `ast::NodeId` of\nthe inlined copy.  This requires exporting symbols in the crate metadata in a\nfew additional cases.  Having predictable symbols for inlined items will be\nuseful later to avoid generating duplicate object code for inlined items.", "tree": {"sha": "bb98353133af71cc53bfd1ebed294a469816a4d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb98353133af71cc53bfd1ebed294a469816a4d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e7bc0f808d9ad874010ac610ad796d07127c458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7bc0f808d9ad874010ac610ad796d07127c458", "html_url": "https://github.com/rust-lang/rust/commit/2e7bc0f808d9ad874010ac610ad796d07127c458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e7bc0f808d9ad874010ac610ad796d07127c458/comments", "author": {"login": "spernsteiner", "id": 3031136, "node_id": "MDQ6VXNlcjMwMzExMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3031136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spernsteiner", "html_url": "https://github.com/spernsteiner", "followers_url": "https://api.github.com/users/spernsteiner/followers", "following_url": "https://api.github.com/users/spernsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/spernsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/spernsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spernsteiner/subscriptions", "organizations_url": "https://api.github.com/users/spernsteiner/orgs", "repos_url": "https://api.github.com/users/spernsteiner/repos", "events_url": "https://api.github.com/users/spernsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/spernsteiner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spernsteiner", "id": 3031136, "node_id": "MDQ6VXNlcjMwMzExMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3031136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spernsteiner", "html_url": "https://github.com/spernsteiner", "followers_url": "https://api.github.com/users/spernsteiner/followers", "following_url": "https://api.github.com/users/spernsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/spernsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/spernsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spernsteiner/subscriptions", "organizations_url": "https://api.github.com/users/spernsteiner/orgs", "repos_url": "https://api.github.com/users/spernsteiner/repos", "events_url": "https://api.github.com/users/spernsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/spernsteiner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf672850df05a05e8bb5785228c408a24e102d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf672850df05a05e8bb5785228c408a24e102d32", "html_url": "https://github.com/rust-lang/rust/commit/cf672850df05a05e8bb5785228c408a24e102d32"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "da73f25b6d164be2b91305a679f52a4cc4f14996", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e7bc0f808d9ad874010ac610ad796d07127c458/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7bc0f808d9ad874010ac610ad796d07127c458/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=2e7bc0f808d9ad874010ac610ad796d07127c458", "patch": "@@ -892,7 +892,8 @@ fn encode_info_for_method(ecx: &EncodeContext,\n                                 IITraitItemRef(local_def(parent_id),\n                                                RequiredInlinedTraitItemRef(\n                                                    &*ast_method)));\n-        } else {\n+        }\n+        if !any_types {\n             encode_symbol(ecx, rbml_w, m.def_id.node);\n         }\n         encode_method_argument_names(rbml_w, &*ast_method.pe_fn_decl());\n@@ -1047,7 +1048,8 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_attributes(rbml_w, item.attrs.as_slice());\n         if tps_len > 0u || should_inline(item.attrs.as_slice()) {\n             encode_inlined_item(ecx, rbml_w, IIItemRef(item));\n-        } else {\n+        }\n+        if tps_len == 0 {\n             encode_symbol(ecx, rbml_w, item.id);\n         }\n         encode_visibility(rbml_w, vis);\n@@ -1411,9 +1413,8 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n         encode_name(rbml_w, nitem.ident.name);\n         if abi == abi::RustIntrinsic {\n             encode_inlined_item(ecx, rbml_w, IIForeignRef(nitem));\n-        } else {\n-            encode_symbol(ecx, rbml_w, nitem.id);\n         }\n+        encode_symbol(ecx, rbml_w, nitem.id);\n       }\n       ForeignItemStatic(_, mutbl) => {\n         if mutbl {"}, {"sha": "c1b92f71878f14f565c1d98a225ec3f832c4b966", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e7bc0f808d9ad874010ac610ad796d07127c458/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7bc0f808d9ad874010ac610ad796d07127c458/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2e7bc0f808d9ad874010ac610ad796d07127c458", "patch": "@@ -2554,6 +2554,15 @@ pub fn create_entry_wrapper(ccx: &CrateContext,\n \n fn exported_name(ccx: &CrateContext, id: ast::NodeId,\n                  ty: ty::t, attrs: &[ast::Attribute]) -> String {\n+    match ccx.external_srcs().borrow().find(&id) {\n+        Some(&did) => {\n+            let sym = csearch::get_symbol(&ccx.sess().cstore, did);\n+            debug!(\"found item {} in other crate...\", sym);\n+            return sym;\n+        }\n+        None => {}\n+    }\n+\n     match attr::first_attr_value_str_by_name(attrs, \"export_name\") {\n         // Use provided name\n         Some(name) => name.get().to_string(),\n@@ -2597,16 +2606,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     // using the current crate's name/version\n                     // information in the hash of the symbol\n                     debug!(\"making {}\", sym);\n-                    let (sym, is_local) = {\n-                        match ccx.external_srcs().borrow().find(&i.id) {\n-                            Some(&did) => {\n-                                debug!(\"but found in other crate...\");\n-                                (csearch::get_symbol(&ccx.sess().cstore,\n-                                                     did), false)\n-                            }\n-                            None => (sym, true)\n-                        }\n-                    };\n+                    let is_local = !ccx.external_srcs().borrow().contains_key(&id);\n \n                     // We need the translated value here, because for enums the\n                     // LLVM type is not fully determined by the Rust type."}]}