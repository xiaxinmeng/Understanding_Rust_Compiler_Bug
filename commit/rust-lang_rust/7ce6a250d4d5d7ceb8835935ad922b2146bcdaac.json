{"sha": "7ce6a250d4d5d7ceb8835935ad922b2146bcdaac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZTZhMjUwZDRkNWQ3Y2ViODgzNTkzNWFkOTIyYjIxNDZiY2RhYWM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-19T13:07:47Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-19T13:07:47Z"}, "message": "Implement function calls.", "tree": {"sha": "2d36e0c1566649b8db4f0a733a47147a1f895dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d36e0c1566649b8db4f0a733a47147a1f895dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ce6a250d4d5d7ceb8835935ad922b2146bcdaac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce6a250d4d5d7ceb8835935ad922b2146bcdaac", "html_url": "https://github.com/rust-lang/rust/commit/7ce6a250d4d5d7ceb8835935ad922b2146bcdaac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ce6a250d4d5d7ceb8835935ad922b2146bcdaac/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7112fc8cd1d42bc660f60cbae7beb86cfa81936c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7112fc8cd1d42bc660f60cbae7beb86cfa81936c", "html_url": "https://github.com/rust-lang/rust/commit/7112fc8cd1d42bc660f60cbae7beb86cfa81936c"}], "stats": {"total": 84, "additions": 66, "deletions": 18}, "files": [{"sha": "596f539060fc8f8df999a5fc95ca509428207c60", "filename": "src/interpreter.rs", "status": "modified", "additions": 57, "deletions": 18, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/7ce6a250d4d5d7ceb8835935ad922b2146bcdaac/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce6a250d4d5d7ceb8835935ad922b2146bcdaac/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=7ce6a250d4d5d7ceb8835935ad922b2146bcdaac", "patch": "@@ -1,4 +1,4 @@\n-use rustc::middle::{const_eval, ty};\n+use rustc::middle::{const_eval, def_id, ty};\n use rustc_mir::mir_map::MirMap;\n use rustc_mir::repr::{self as mir, Mir};\n use syntax::ast::Attribute;\n@@ -11,6 +11,7 @@ enum Value {\n     Uninit,\n     Bool(bool),\n     Int(i64), // FIXME: Should be bit-width aware.\n+    Func(def_id::DefId),\n }\n \n #[derive(Debug)]\n@@ -21,20 +22,30 @@ struct Frame {\n     num_temps: usize,\n }\n \n-struct Interpreter {\n+impl Frame {\n+    fn size(&self) -> usize {\n+        1 + self.num_args + self.num_vars + self.num_temps\n+    }\n+}\n+\n+struct Interpreter<'a, 'tcx: 'a> {\n+    tcx: &'a ty::ctxt<'tcx>,\n+    mir_map: &'a MirMap<'tcx>,\n     value_stack: Vec<Value>,\n     call_stack: Vec<Frame>,\n }\n \n-impl Interpreter {\n-    fn new() -> Self {\n+impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n+    fn new(tcx: &'a ty::ctxt<'tcx>, mir_map: &'a MirMap<'tcx>) -> Self {\n         Interpreter {\n+            tcx: tcx,\n+            mir_map: mir_map,\n             value_stack: Vec::new(),\n             call_stack: Vec::new(),\n         }\n     }\n \n-    fn push_stack_frame(&mut self, mir: &Mir, _args: &[Value]) {\n+    fn push_stack_frame(&mut self, mir: &Mir, args: &[Value]) {\n         self.call_stack.push(Frame {\n             offset: self.value_stack.len(),\n             num_args: mir.arg_decls.len(),\n@@ -43,10 +54,16 @@ impl Interpreter {\n         });\n \n         let frame = self.call_stack.last().unwrap();\n-        let frame_size = 1 + frame.num_args + frame.num_vars + frame.num_temps;\n-        self.value_stack.extend(iter::repeat(Value::Uninit).take(frame_size));\n+        self.value_stack.extend(iter::repeat(Value::Uninit).take(frame.size()));\n+\n+        for (i, arg) in args.iter().enumerate() {\n+            self.value_stack[frame.offset + 1 + i] = arg.clone();\n+        }\n+    }\n \n-        // TODO(tsion): Write args into value_stack.\n+    fn pop_stack_frame(&mut self) {\n+        let frame = self.call_stack.pop().expect(\"tried to pop stack frame, but there were none\");\n+        self.value_stack.truncate(frame.offset);\n     }\n \n     fn call(&mut self, mir: &Mir, args: &[Value]) -> Value {\n@@ -74,27 +91,46 @@ impl Interpreter {\n                 }\n             }\n \n-            println!(\"{:?}\", block_data.terminator);\n             match block_data.terminator {\n+                Return => break,\n                 Goto { target } => block = target,\n \n-                Panic { target: _target } => unimplemented!(),\n+                Call { data: mir::CallData { ref destination, ref func, ref args }, targets } => {\n+                    let index = self.eval_lvalue(destination);\n+                    let func_val = self.eval_operand(func);\n+\n+                    if let Value::Func(def_id) = func_val {\n+                        let node_id = self.tcx.map.as_local_node_id(def_id).unwrap();\n+                        let mir = &self.mir_map[&node_id];\n+                        let arg_vals: Vec<Value> =\n+                            args.iter().map(|arg| self.eval_operand(arg)).collect();\n+\n+                        self.value_stack[index] = self.call(mir, &arg_vals);\n+                        block = targets[0];\n+                    } else {\n+                        panic!(\"tried to call a non-function value: {:?}\", func_val);\n+                    }\n+                }\n \n                 If { ref cond, targets } => {\n-                    match self.eval_operand(&cond) {\n+                    match self.eval_operand(cond) {\n                         Value::Bool(true) => block = targets[0],\n                         Value::Bool(false) => block = targets[1],\n                         cond_val => panic!(\"Non-boolean `if` condition value: {:?}\", cond_val),\n                     }\n                 }\n \n-                Return => break,\n-\n                 _ => unimplemented!(),\n+                // Diverge => unimplemented!(),\n+                // Panic { target } => unimplemented!(),\n+                // Switch { ref discr, adt_def, ref targets } => unimplemented!(),\n+                // SwitchInt { ref discr, switch_ty, ref values, ref targets } => unimplemented!(),\n             }\n         }\n \n-        self.value_stack[self.eval_lvalue(&mir::Lvalue::ReturnPointer)].clone()\n+        let ret_val = self.value_stack[self.eval_lvalue(&mir::Lvalue::ReturnPointer)].clone();\n+        self.pop_stack_frame();\n+        ret_val\n     }\n \n     fn eval_lvalue(&self, lvalue: &mir::Lvalue) -> usize {\n@@ -157,16 +193,19 @@ impl Interpreter {\n         }\n     }\n \n-    fn eval_operand(&self, op: &mir::Operand) -> Value {\n+    fn eval_operand(&mut self, op: &mir::Operand) -> Value {\n         use rustc_mir::repr::Operand::*;\n \n         match *op {\n             Consume(ref lvalue) => self.value_stack[self.eval_lvalue(lvalue)].clone(),\n \n             Constant(ref constant) => {\n                 match constant.literal {\n-                    mir::Literal::Value { value: ref const_val } => self.eval_constant(const_val),\n-                    mir::Literal::Item { .. } => unimplemented!(),\n+                    mir::Literal::Value { ref value } => self.eval_constant(value),\n+\n+                    mir::Literal::Item { def_id, substs: _ } => {\n+                        Value::Func(def_id)\n+                    }\n                 }\n             }\n         }\n@@ -196,7 +235,7 @@ pub fn interpret_start_points<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &MirMap<'tcx>\n                 let item = tcx.map.expect_item(id);\n \n                 println!(\"Interpreting: {}\", item.name);\n-                let mut interpreter = Interpreter::new();\n+                let mut interpreter = Interpreter::new(tcx, mir_map);\n                 let val = interpreter.call(mir, &[]);\n                 let val_str = format!(\"{:?}\", val);\n "}, {"sha": "2da62bfa6226d7a88ef5d0ed9bfae6acb1519c3d", "filename": "test/basic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ce6a250d4d5d7ceb8835935ad922b2146bcdaac/test%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce6a250d4d5d7ceb8835935ad922b2146bcdaac/test%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fbasic.rs?ref=7ce6a250d4d5d7ceb8835935ad922b2146bcdaac", "patch": "@@ -38,4 +38,13 @@ fn if_true() -> i32 {\n     if true { 1 } else { 0 }\n }\n \n+#[miri_run(expected = \"Int(2)\")]\n+fn call() -> i32 {\n+    fn increment(x: i32) -> i32 {\n+        x + 1\n+    }\n+\n+    increment(1)\n+}\n+\n fn main() {}"}]}