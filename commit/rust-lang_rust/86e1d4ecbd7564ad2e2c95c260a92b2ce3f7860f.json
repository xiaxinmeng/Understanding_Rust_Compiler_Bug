{"sha": "86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZTFkNGVjYmQ3NTY0YWQyZTJjOTVjMjYwYTkyYjJjZTNmNzg2MGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-21T00:56:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-21T00:56:59Z"}, "message": "rustdoc: astsrv::exec should return sendable types\n\nIn order to make it parallelizable someday.", "tree": {"sha": "177e1dc54dc213fb894c584398c852690b7dc5bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177e1dc54dc213fb894c584398c852690b7dc5bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f", "html_url": "https://github.com/rust-lang/rust/commit/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57be673025556516747f50117672cb293864a5a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/57be673025556516747f50117672cb293864a5a5", "html_url": "https://github.com/rust-lang/rust/commit/57be673025556516747f50117672cb293864a5a5"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "3397691d5e3ec1dd3e3776c1a2b59a00e830fa56", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f", "patch": "@@ -232,7 +232,7 @@ fn should_ignore_external_import_paths_that_dont_exist() {\n     mk_srv_from_str(source);\n }\n \n-fn exec<T>(\n+fn exec<T:send>(\n     srv: srv,\n     f: fn~(ctxt: ctxt) -> T\n ) -> T {"}, {"sha": "2d0db9cf47263472575ce58e86b3bcc84fce881c", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f", "patch": "@@ -86,7 +86,7 @@ fn fold_item(\n     }\n }\n \n-fn parse_item_attrs<T>(\n+fn parse_item_attrs<T:send>(\n     srv: astsrv::srv,\n     id: doc::ast_id,\n     parse_attrs: fn~([ast::attribute]) -> T) -> T {"}, {"sha": "6e199d88c4b45fe6fa4ca9d9b8ee5325bd187ec0", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 49, "deletions": 30, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=86e1d4ecbd7564ad2e2c95c260a92b2ce3f7860f", "patch": "@@ -31,17 +31,57 @@ fn run(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n     merge_reexports(doc, path_map)\n }\n \n+// Hash maps are not sendable so converting them back and forth\n+// to association lists. Yuck.\n+fn to_assoc_list<K:copy, V:copy>(\n+    map: map::hashmap<K, V>\n+) -> [(K, V)] {\n+\n+    let vec = [];\n+    map.items {|k, v|\n+        vec += [(k, v)];\n+    }\n+    ret vec;\n+}\n+\n+fn from_assoc_list<K:copy, V:copy>(\n+    list: [(K, V)],\n+    new_hash: fn() -> map::hashmap<K, V>\n+) -> map::hashmap<K, V> {\n+\n+    let map = new_hash();\n+    vec::iter(list) {|elt|\n+        let (k, v) = elt;\n+        map.insert(k, v);\n+    }\n+    ret map;\n+}\n+\n+fn from_def_assoc_list<V:copy>(\n+    list: [(ast::def_id, V)]\n+) -> map::hashmap<ast::def_id, V> {\n+    from_assoc_list(list, bind common::new_def_hash())\n+}\n+\n+fn from_str_assoc_list<V:copy>(\n+    list: [(str, V)]\n+) -> map::hashmap<str, V> {\n+    from_assoc_list(list, bind map::new_str_hash())\n+}\n+\n fn build_reexport_def_set(srv: astsrv::srv) -> def_set {\n-    astsrv::exec(srv) {|ctxt|\n+    let assoc_list = astsrv::exec(srv) {|ctxt|\n         let def_set = common::new_def_hash();\n         ctxt.exp_map.items {|_path, defs|\n             for def in *defs {\n                 let def_id = ast_util::def_id_of_def(def);\n                 def_set.insert(def_id, ());\n             }\n         }\n-        def_set\n-    }\n+        to_assoc_list(def_set)\n+    };\n+\n+    from_def_assoc_list(assoc_list)\n }\n \n fn build_reexport_def_map(\n@@ -85,38 +125,15 @@ fn build_reexport_def_map(\n     }\n }\n \n-fn to_assoc_list<V:copy>(\n-    map: map::hashmap<ast::def_id, V>\n-) -> [(ast::def_id, V)] {\n-\n-    let vec = [];\n-    map.items {|k, v|\n-        vec += [(k, v)];\n-    }\n-    ret vec;\n-}\n-\n-fn from_assoc_list<V:copy>(\n-    list: [(ast::def_id, V)]\n-) -> map::hashmap<ast::def_id, V> {\n-\n-    let map = common::new_def_hash();\n-    vec::iter(list) {|elt|\n-        let (k, v) = elt;\n-        map.insert(k, v);\n-    }\n-    ret map;\n-}\n-\n fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n \n     // This is real unfortunate. Lots of copying going on here\n     let def_assoc_list = to_assoc_list(def_map);\n     #debug(\"def_map: %?\", def_assoc_list);\n \n-    astsrv::exec(srv) {|ctxt|\n+    let assoc_list = astsrv::exec(srv) {|ctxt|\n \n-        let def_map = from_assoc_list(def_assoc_list);\n+        let def_map = from_def_assoc_list(def_assoc_list);\n         let path_map = map::new_str_hash();\n \n         ctxt.exp_map.items {|path, defs|\n@@ -149,8 +166,10 @@ fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n             }\n         }\n \n-        path_map\n-    }\n+        to_assoc_list(path_map)\n+    };\n+\n+    from_str_assoc_list(assoc_list)\n }\n \n fn merge_reexports("}]}