{"sha": "fba9d14779552c665c5431f0c993c0780c00adca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYTlkMTQ3Nzk1NTJjNjY1YzU0MzFmMGM5OTNjMDc4MGMwMGFkY2E=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-09-21T01:43:35Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-09-29T17:34:30Z"}, "message": "Lower type ascriptions to HAIR and MIR", "tree": {"sha": "39db9858b08a321b9851f5454ab0e3ace53e33b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39db9858b08a321b9851f5454ab0e3ace53e33b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba9d14779552c665c5431f0c993c0780c00adca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba9d14779552c665c5431f0c993c0780c00adca", "html_url": "https://github.com/rust-lang/rust/commit/fba9d14779552c665c5431f0c993c0780c00adca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba9d14779552c665c5431f0c993c0780c00adca/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8132d4e1000f012d1f25dbcedf006a9dc2f8598c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8132d4e1000f012d1f25dbcedf006a9dc2f8598c", "html_url": "https://github.com/rust-lang/rust/commit/8132d4e1000f012d1f25dbcedf006a9dc2f8598c"}], "stats": {"total": 77, "additions": 73, "deletions": 4}, "files": [{"sha": "29c3fb6933967f913cab065de8c1c19769930bb1", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=fba9d14779552c665c5431f0c993c0780c00adca", "patch": "@@ -16,6 +16,7 @@ use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::*;\n+use rustc::ty::Variance;\n \n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -136,6 +137,40 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ty: expr.ty,\n             }))),\n \n+            ExprKind::PlaceTypeAscription { source, user_ty } => {\n+                let place = unpack!(block = this.as_place(block, source));\n+                this.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::AscribeUserType(\n+                            place.clone(),\n+                            Variance::Invariant,\n+                            user_ty,\n+                        ),\n+                    },\n+                );\n+                block.and(place)\n+            }\n+            ExprKind::ValueTypeAscription { source, user_ty } => {\n+                let source = this.hir.mirror(source);\n+                let temp = unpack!(\n+                    block = this.as_temp(block, source.temp_lifetime, source, mutability)\n+                );\n+                this.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::AscribeUserType(\n+                            Place::Local(temp.clone()),\n+                            Variance::Invariant,\n+                            user_ty,\n+                        ),\n+                    },\n+                );\n+                block.and(Place::Local(temp))\n+            }\n+\n             ExprKind::Array { .. }\n             | ExprKind::Tuple { .. }\n             | ExprKind::Adt { .. }"}, {"sha": "8fee74390cc6b26fcd1668e117d346dc0a75c9e2", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=fba9d14779552c665c5431f0c993c0780c00adca", "patch": "@@ -386,7 +386,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Continue { .. }\n             | ExprKind::Return { .. }\n             | ExprKind::InlineAsm { .. }\n-            | ExprKind::StaticRef { .. } => {\n+            | ExprKind::StaticRef { .. }\n+            | ExprKind::PlaceTypeAscription { .. }\n+            | ExprKind::ValueTypeAscription { .. } => {\n                 // these do not have corresponding `Rvalue` variants,\n                 // so make an operand and then return that\n                 debug_assert!(match Category::of(&expr.kind) {"}, {"sha": "05a9079cdb1efcdf06be4518f214d23ac3d69427", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=fba9d14779552c665c5431f0c993c0780c00adca", "patch": "@@ -50,7 +50,9 @@ impl Category {\n             | ExprKind::Index { .. }\n             | ExprKind::SelfRef\n             | ExprKind::VarRef { .. }\n-            | ExprKind::StaticRef { .. } => Some(Category::Place),\n+            | ExprKind::StaticRef { .. }\n+            | ExprKind::PlaceTypeAscription { .. }\n+            | ExprKind::ValueTypeAscription { .. } => Some(Category::Place),\n \n             ExprKind::LogicalOp { .. }\n             | ExprKind::If { .. }"}, {"sha": "c05719ce95a63c3c1671b08a624f82c1c7dac122", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=fba9d14779552c665c5431f0c993c0780c00adca", "patch": "@@ -391,7 +391,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Adt { .. }\n             | ExprKind::Closure { .. }\n             | ExprKind::Literal { .. }\n-            | ExprKind::Yield { .. } => {\n+            | ExprKind::Yield { .. }\n+            | ExprKind::PlaceTypeAscription { .. }\n+            | ExprKind::ValueTypeAscription { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {\n                     Category::Rvalue(RvalueFunc::Into) => false,\n                     _ => true,"}, {"sha": "f94f1a1a8c8fededb17db6ab4b8ff33adca4c540", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=fba9d14779552c665c5431f0c993c0780c00adca", "patch": "@@ -718,7 +718,23 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 ExprKind::Cast { source }\n             }\n         }\n-        hir::ExprKind::Type(ref source, _) => return source.make_mirror(cx),\n+        hir::ExprKind::Type(ref source, ref ty) => {\n+            let user_provided_tys = cx.tables.user_provided_tys();\n+            let user_ty = *user_provided_tys\n+                .get(ty.hir_id)\n+                .expect(&format!(\"{:?} not found in user_provided_tys, source: {:?}\", ty, source));\n+            if source.is_place_expr() {\n+                ExprKind::PlaceTypeAscription {\n+                    source: source.to_ref(),\n+                    user_ty,\n+                }\n+            } else {\n+                ExprKind::ValueTypeAscription {\n+                    source: source.to_ref(),\n+                    user_ty,\n+                }\n+            }\n+        }\n         hir::ExprKind::Box(ref value) => {\n             ExprKind::Box {\n                 value: value.to_ref(),"}, {"sha": "9258845ad06a74535c9a7167e1277512f224248d", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=fba9d14779552c665c5431f0c993c0780c00adca", "patch": "@@ -268,6 +268,16 @@ pub enum ExprKind<'tcx> {\n         fields: Vec<FieldExprRef<'tcx>>,\n         base: Option<FruInfo<'tcx>>\n     },\n+    PlaceTypeAscription {\n+        source: ExprRef<'tcx>,\n+        /// Type that the user gave to this expression\n+        user_ty: CanonicalTy<'tcx>,\n+    },\n+    ValueTypeAscription {\n+        source: ExprRef<'tcx>,\n+        /// Type that the user gave to this expression\n+        user_ty: CanonicalTy<'tcx>,\n+    },\n     Closure {\n         closure_id: DefId,\n         substs: UpvarSubsts<'tcx>,"}, {"sha": "40af4b5f5aaebb5803af1165ffebbe6cf08f99e0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9d14779552c665c5431f0c993c0780c00adca/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fba9d14779552c665c5431f0c993c0780c00adca", "patch": "@@ -4118,6 +4118,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             hir::ExprKind::Type(ref e, ref t) => {\n                 let ty = self.to_ty(&t);\n                 self.check_expr_eq_type(&e, ty);\n+                let c_ty = self.infcx.canonicalize_response(&ty);\n+                self.tables.borrow_mut().user_provided_tys_mut().insert(t.hir_id, c_ty);\n                 ty\n             }\n             hir::ExprKind::Array(ref args) => {"}]}