{"sha": "ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "node_id": "C_kwDOAAsO6NoAKGVlMmNiZTBhZTgxMGNkODYyMTY2MmFjMzhmMmM3YTAyMGQwNjYyMGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T13:25:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T13:25:04Z"}, "message": "Auto merge of #12244 - jonas-schievink:closing-brace-hints, r=jonas-schievink\n\nfeat: Show inlay hints after a `}` to indicate the closed item\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/7315\n\n![screenshot-2022-05-13-19:42:00](https://user-images.githubusercontent.com/1786438/168338713-4cedef50-3611-4667-aa6a-49e154ec16a7.png)", "tree": {"sha": "8f00d8bc0d7a0f2a4fed1eea668a3148962f16d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f00d8bc0d7a0f2a4fed1eea668a3148962f16d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "html_url": "https://github.com/rust-lang/rust/commit/ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58234c64da2ab535c1028728f422be5dd94f8e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/58234c64da2ab535c1028728f422be5dd94f8e4c", "html_url": "https://github.com/rust-lang/rust/commit/58234c64da2ab535c1028728f422be5dd94f8e4c"}, {"sha": "fccc12982e6c05b49cb1ddd70ce2fc0b4600ed8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fccc12982e6c05b49cb1ddd70ce2fc0b4600ed8d", "html_url": "https://github.com/rust-lang/rust/commit/fccc12982e6c05b49cb1ddd70ce2fc0b4600ed8d"}], "stats": {"total": 216, "additions": 209, "deletions": 7}, "files": [{"sha": "d8769aacfc5e9131a17840b90dd0fdb221864a15", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 169, "deletions": 3, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "patch": "@@ -26,6 +26,7 @@ pub struct InlayHintsConfig {\n     pub param_names_for_lifetime_elision_hints: bool,\n     pub hide_named_constructor_hints: bool,\n     pub max_length: Option<usize>,\n+    pub closing_brace_hints_min_lines: Option<usize>,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -52,6 +53,7 @@ pub enum InlayKind {\n     LifetimeHint,\n     ParameterHint,\n     TypeHint,\n+    ClosingBraceHint,\n }\n \n #[derive(Debug)]\n@@ -104,7 +106,7 @@ pub(crate) fn inlay_hints(\n             NodeOrToken::Token(_) => return acc,\n             NodeOrToken::Node(n) => n\n                 .descendants()\n-                .filter(|descendant| range.contains_range(descendant.text_range()))\n+                .filter(|descendant| range.intersect(descendant.text_range()).is_some())\n                 .for_each(hints),\n         },\n         None => file.descendants().for_each(hints),\n@@ -124,6 +126,8 @@ fn hints(\n         None => return,\n     };\n \n+    closing_brace_hints(hints, sema, config, node.clone());\n+\n     if let Some(expr) = ast::Expr::cast(node.clone()) {\n         chaining_hints(hints, sema, &famous_defs, config, &expr);\n         match expr {\n@@ -147,6 +151,104 @@ fn hints(\n     }\n }\n \n+fn closing_brace_hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<RootDatabase>,\n+    config: &InlayHintsConfig,\n+    node: SyntaxNode,\n+) -> Option<()> {\n+    let min_lines = config.closing_brace_hints_min_lines?;\n+\n+    let mut closing_token;\n+    let label = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n+        closing_token = item_list.r_curly_token()?;\n+\n+        let parent = item_list.syntax().parent()?;\n+        match_ast! {\n+            match parent {\n+                ast::Impl(imp) => {\n+                    let imp = sema.to_def(&imp)?;\n+                    let ty = imp.self_ty(sema.db);\n+                    let trait_ = imp.trait_(sema.db);\n+\n+                    match trait_ {\n+                        Some(tr) => format!(\"impl {} for {}\", tr.name(sema.db), ty.display_truncated(sema.db, config.max_length)),\n+                        None => format!(\"impl {}\", ty.display_truncated(sema.db, config.max_length)),\n+                    }\n+                },\n+                ast::Trait(tr) => {\n+                    format!(\"trait {}\", tr.name()?)\n+                },\n+                _ => return None,\n+            }\n+        }\n+    } else if let Some(list) = ast::ItemList::cast(node.clone()) {\n+        closing_token = list.r_curly_token()?;\n+\n+        let module = ast::Module::cast(list.syntax().parent()?)?;\n+        format!(\"mod {}\", module.name()?)\n+    } else if let Some(block) = ast::BlockExpr::cast(node.clone()) {\n+        closing_token = block.stmt_list()?.r_curly_token()?;\n+\n+        let parent = block.syntax().parent()?;\n+        match_ast! {\n+            match parent {\n+                ast::Fn(it) => {\n+                    // FIXME: this could include parameters, but `HirDisplay` prints too much info\n+                    // and doesn't respect the max length either, so the hints end up way too long\n+                    format!(\"fn {}\", it.name()?)\n+                },\n+                ast::Static(it) => format!(\"static {}\", it.name()?),\n+                ast::Const(it) => {\n+                    if it.underscore_token().is_some() {\n+                        \"const _\".into()\n+                    } else {\n+                        format!(\"const {}\", it.name()?)\n+                    }\n+                },\n+                _ => return None,\n+            }\n+        }\n+    } else if let Some(mac) = ast::MacroCall::cast(node.clone()) {\n+        let last_token = mac.syntax().last_token()?;\n+        if last_token.kind() != T![;] && last_token.kind() != SyntaxKind::R_CURLY {\n+            return None;\n+        }\n+        closing_token = last_token;\n+\n+        format!(\"{}!\", mac.path()?)\n+    } else {\n+        return None;\n+    };\n+\n+    if let Some(mut next) = closing_token.next_token() {\n+        if next.kind() == T![;] {\n+            if let Some(tok) = next.next_token() {\n+                closing_token = next;\n+                next = tok;\n+            }\n+        }\n+        if !(next.kind() == SyntaxKind::WHITESPACE && next.text().contains('\\n')) {\n+            // Only display the hint if the `}` is the last token on the line\n+            return None;\n+        }\n+    }\n+\n+    let mut lines = 1;\n+    node.text().for_each_chunk(|s| lines += s.matches('\\n').count());\n+    if lines < min_lines {\n+        return None;\n+    }\n+\n+    acc.push(InlayHint {\n+        range: closing_token.text_range(),\n+        kind: InlayKind::ClosingBraceHint,\n+        label: label.into(),\n+    });\n+\n+    None\n+}\n+\n fn lifetime_hints(\n     acc: &mut Vec<InlayHint>,\n     config: &InlayHintsConfig,\n@@ -925,6 +1027,7 @@ mod tests {\n         hide_named_constructor_hints: false,\n         param_names_for_lifetime_elision_hints: false,\n         max_length: None,\n+        closing_brace_hints_min_lines: None,\n     };\n     const TEST_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         type_hints: true,\n@@ -1422,10 +1525,10 @@ fn main() {\n             let foo = foo();\n             let foo = foo1();\n             let foo = foo2();\n+             // ^^^ impl Fn(f64, f64)\n             let foo = foo3();\n              // ^^^ impl Fn(f64, f64) -> u32\n             let foo = foo4();\n-             // ^^^ &dyn Fn(f64, f64) -> u32\n             let foo = foo5();\n             let foo = foo6();\n             let foo = foo7();\n@@ -2290,7 +2393,70 @@ fn __(\n       //^^^^ &mut\n        //^ ref mut\n     }\n-}\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn hints_closing_brace() {\n+        check_with_config(\n+            InlayHintsConfig { closing_brace_hints_min_lines: Some(2), ..DISABLED_CONFIG },\n+            r#\"\n+fn a() {}\n+\n+fn f() {\n+} // no hint unless `}` is the last token on the line\n+\n+fn g() {\n+  }\n+//^ fn g\n+\n+fn h<T>(with: T, arguments: u8, ...) {\n+  }\n+//^ fn h\n+\n+trait Tr {\n+    fn f();\n+    fn g() {\n+    }\n+  //^ fn g\n+  }\n+//^ trait Tr\n+impl Tr for () {\n+  }\n+//^ impl Tr for ()\n+impl dyn Tr {\n+  }\n+//^ impl dyn Tr\n+\n+static S0: () = 0;\n+static S1: () = {};\n+static S2: () = {\n+ };\n+//^ static S2\n+const _: () = {\n+ };\n+//^ const _\n+\n+mod m {\n+  }\n+//^ mod m\n+\n+m! {}\n+m!();\n+m!(\n+ );\n+//^ m!\n+\n+m! {\n+  }\n+//^ m!\n+\n+fn f() {\n+    let v = vec![\n+    ];\n+  }\n+//^ fn f\n \"#,\n         );\n     }"}, {"sha": "01d7213630e4c5fa3de5c3f66f2d00bfdc5e1f9f", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "patch": "@@ -116,6 +116,7 @@ impl StaticIndex<'_> {\n                     param_names_for_lifetime_elision_hints: false,\n                     binding_mode_hints: false,\n                     max_length: Some(25),\n+                    closing_brace_hints_min_lines: Some(25),\n                 },\n                 file_id,\n                 None,"}, {"sha": "304254c3e26eb138e328953a92fef8a4f5af4a71", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "patch": "@@ -259,6 +259,11 @@ config_data! {\n         inlayHints_bindingModeHints_enable: bool                   = \"false\",\n         /// Whether to show inlay type hints for method chains.\n         inlayHints_chainingHints_enable: bool                      = \"true\",\n+        /// Whether to show inlay hints after a closing `}` to indicate what item it belongs to.\n+        inlayHints_closingBraceHints_enable: bool                  = \"true\",\n+        /// Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\n+        /// to always show them).\n+        inlayHints_closingBraceHints_minLines: usize               = \"25\",\n         /// Whether to show inlay type hints for return types of closures with blocks.\n         inlayHints_closureReturnTypeHints_enable: bool             = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n@@ -1005,6 +1010,11 @@ impl Config {\n                 .data\n                 .inlayHints_lifetimeElisionHints_useParameterNames,\n             max_length: self.data.inlayHints_maxLength,\n+            closing_brace_hints_min_lines: if self.data.inlayHints_closingBraceHints_enable {\n+                Some(self.data.inlayHints_closingBraceHints_minLines)\n+            } else {\n+                None\n+            },\n         }\n     }\n "}, {"sha": "8669d5de37d55b88448c75bd349cdc55beebb9bb", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "patch": "@@ -426,7 +426,8 @@ pub(crate) fn inlay_hint(\n             | InlayKind::TypeHint\n             | InlayKind::ChainingHint\n             | InlayKind::GenericParamListHint\n-            | InlayKind::LifetimeHint => position(line_index, inlay_hint.range.end()),\n+            | InlayKind::LifetimeHint\n+            | InlayKind::ClosingBraceHint => position(line_index, inlay_hint.range.end()),\n         },\n         label: lsp_types::InlayHintLabel::String(match inlay_hint.kind {\n             InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n@@ -442,12 +443,13 @@ pub(crate) fn inlay_hint(\n             InlayKind::BindingModeHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n-            | InlayKind::ImplicitReborrowHint => None,\n+            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::ClosingBraceHint => None,\n         },\n         tooltip: None,\n         padding_left: Some(match inlay_hint.kind {\n             InlayKind::TypeHint => !render_colons,\n-            InlayKind::ChainingHint => true,\n+            InlayKind::ChainingHint | InlayKind::ClosingBraceHint => true,\n             InlayKind::BindingModeHint\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n@@ -460,7 +462,8 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::ImplicitReborrowHint\n-            | InlayKind::TypeHint => false,\n+            | InlayKind::TypeHint\n+            | InlayKind::ClosingBraceHint => false,\n             InlayKind::BindingModeHint => inlay_hint.label != \"&\",\n             InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n         }),"}, {"sha": "d8585ffb1deb096001622c9558e45af0aa941db8", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "patch": "@@ -355,6 +355,17 @@ Whether to show inlay type hints for binding modes.\n --\n Whether to show inlay type hints for method chains.\n --\n+[[rust-analyzer.inlayHints.closingBraceHints.enable]]rust-analyzer.inlayHints.closingBraceHints.enable (default: `true`)::\n++\n+--\n+Whether to show inlay hints after a closing `}` to indicate what item it belongs to.\n+--\n+[[rust-analyzer.inlayHints.closingBraceHints.minLines]]rust-analyzer.inlayHints.closingBraceHints.minLines (default: `25`)::\n++\n+--\n+Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\n+to always show them).\n+--\n [[rust-analyzer.inlayHints.closureReturnTypeHints.enable]]rust-analyzer.inlayHints.closureReturnTypeHints.enable (default: `false`)::\n +\n --"}, {"sha": "d7978bab473ce8504db4e4809576616b6338ab50", "filename": "editors/code/package.json", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/ee2cbe0ae810cd8621662ac38f2c7a020d06620c/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=ee2cbe0ae810cd8621662ac38f2c7a020d06620c", "patch": "@@ -792,6 +792,17 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.closingBraceHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show inlay hints after a closing `}` to indicate what item it belongs to.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.closingBraceHints.minLines\": {\n+                    \"markdownDescription\": \"Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\\nto always show them).\",\n+                    \"default\": 25,\n+                    \"type\": \"integer\",\n+                    \"minimum\": 0\n+                },\n                 \"rust-analyzer.inlayHints.closureReturnTypeHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for return types of closures with blocks.\",\n                     \"default\": false,"}]}