{"sha": "17825c93ff548fbcb8be2b0151c69bec974ee11b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ODI1YzkzZmY1NDhmYmNiOGJlMmIwMTUxYzY5YmVjOTc0ZWUxMWI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-21T21:52:41Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-21T21:59:35Z"}, "message": "review", "tree": {"sha": "6ab8e626acebb0622804b562c8d720baae11676d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ab8e626acebb0622804b562c8d720baae11676d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17825c93ff548fbcb8be2b0151c69bec974ee11b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17825c93ff548fbcb8be2b0151c69bec974ee11b", "html_url": "https://github.com/rust-lang/rust/commit/17825c93ff548fbcb8be2b0151c69bec974ee11b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17825c93ff548fbcb8be2b0151c69bec974ee11b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8752a560b9f50e04c38ab75e2b5c37d03d3214d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8752a560b9f50e04c38ab75e2b5c37d03d3214d9", "html_url": "https://github.com/rust-lang/rust/commit/8752a560b9f50e04c38ab75e2b5c37d03d3214d9"}], "stats": {"total": 27, "additions": 6, "deletions": 21}, "files": [{"sha": "d9ec6bb20fda8e3a6622a00263ed0a8ee29369db", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17825c93ff548fbcb8be2b0151c69bec974ee11b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17825c93ff548fbcb8be2b0151c69bec974ee11b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=17825c93ff548fbcb8be2b0151c69bec974ee11b", "patch": "@@ -333,16 +333,14 @@ CloneTypeFoldableAndLiftImpls! {\n impl<'tcx, A: Lift<'tcx>, B: Lift<'tcx>> Lift<'tcx> for (A, B) {\n     type Lifted = (A::Lifted, B::Lifted);\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        let (a, b) = self;\n-        tcx.lift(a).and_then(|a| tcx.lift(b).map(|b| (a, b)))\n+        Some((tcx.lift(self.0)?, tcx.lift(self.1)?))\n     }\n }\n \n impl<'tcx, A: Lift<'tcx>, B: Lift<'tcx>, C: Lift<'tcx>> Lift<'tcx> for (A, B, C) {\n     type Lifted = (A::Lifted, B::Lifted, C::Lifted);\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        let (a, b, c) = self;\n-        tcx.lift(a).and_then(|a| tcx.lift(b).and_then(|b| tcx.lift(c).map(|c| (a, b, c))))\n+        Some((tcx.lift(self.0)?, tcx.lift(self.1)?, tcx.lift(self.2)?))\n     }\n }\n "}, {"sha": "de54c5582e0491a70211e1c9aedbb0167dccf555", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/17825c93ff548fbcb8be2b0151c69bec974ee11b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17825c93ff548fbcb8be2b0151c69bec974ee11b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=17825c93ff548fbcb8be2b0151c69bec974ee11b", "patch": "@@ -674,29 +674,16 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n             TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {\n                 self.consume_operand(loc, (discr, span), flow_state);\n             }\n-            TerminatorKind::Drop { place: ref drop_place, target: _, unwind: _ } => {\n-                let tcx = self.infcx.tcx;\n-\n-                // Compute the type with accurate region information.\n-                let drop_place_ty = drop_place.ty(self.body, self.infcx.tcx);\n-\n-                // Erase the regions.\n-                let drop_place_ty = self.infcx.tcx.erase_regions(&drop_place_ty).ty;\n-\n-                // \"Lift\" into the tcx -- once regions are erased, this type should be in the\n-                // global arenas; this \"lift\" operation basically just asserts that is true, but\n-                // that is useful later.\n-                tcx.lift(drop_place_ty).unwrap();\n-\n+            TerminatorKind::Drop { place, target: _, unwind: _ } => {\n                 debug!(\n                     \"visit_terminator_drop \\\n-                     loc: {:?} term: {:?} drop_place: {:?} drop_place_ty: {:?} span: {:?}\",\n-                    loc, term, drop_place, drop_place_ty, span\n+                     loc: {:?} term: {:?} place: {:?} span: {:?}\",\n+                    loc, term, place, span\n                 );\n \n                 self.access_place(\n                     loc,\n-                    (*drop_place, span),\n+                    (place, span),\n                     (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),\n                     LocalMutationIsAllowed::Yes,\n                     flow_state,"}]}