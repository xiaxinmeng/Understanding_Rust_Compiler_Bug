{"sha": "c73cf9f38737f89cbbd001480327943302a66d5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3M2NmOWYzODczN2Y4OWNiYmQwMDE0ODAzMjc5NDMzMDJhNjZkNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T16:33:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-12T16:33:57Z"}, "message": "Auto merge of #5893 - matthiaskrgr:lint_msg, r=yaahc\n\nfix remaining lint messages\n\nr? @yaahc\n\nchangelog:  make remaining lint messages adhere to rustc dev guide lint message convention.", "tree": {"sha": "d134548bd0e0cd3bc5aa03ef1befac1e0f6bf47a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d134548bd0e0cd3bc5aa03ef1befac1e0f6bf47a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c73cf9f38737f89cbbd001480327943302a66d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c73cf9f38737f89cbbd001480327943302a66d5b", "html_url": "https://github.com/rust-lang/rust/commit/c73cf9f38737f89cbbd001480327943302a66d5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c73cf9f38737f89cbbd001480327943302a66d5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f4de2fc7579b53f80f9946d5ab77708f9870301", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4de2fc7579b53f80f9946d5ab77708f9870301", "html_url": "https://github.com/rust-lang/rust/commit/2f4de2fc7579b53f80f9946d5ab77708f9870301"}, {"sha": "be3e695b60b07e911a88f6cb660c5617836c5365", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3e695b60b07e911a88f6cb660c5617836c5365", "html_url": "https://github.com/rust-lang/rust/commit/be3e695b60b07e911a88f6cb660c5617836c5365"}], "stats": {"total": 244, "additions": 122, "deletions": 122}, "files": [{"sha": "8ece44878fe32c6c7bcd1777e717cd6e185137ec", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for DurationSubsec {\n                     cx,\n                     DURATION_SUBSEC,\n                     expr.span,\n-                    &format!(\"Calling `{}()` is more concise than this calculation\", suggested_fn),\n+                    &format!(\"calling `{}()` is more concise than this calculation\", suggested_fn),\n                     \"try\",\n                     format!(\n                         \"{}.{}()\","}, {"sha": "48caf48dbdb2cab0e80f0e2f4ee70e631c225a62", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n                             cx,\n                             ENUM_CLIKE_UNPORTABLE_VARIANT,\n                             var.span,\n-                            \"Clike enum variant discriminant is not portable to 32-bit targets\",\n+                            \"C-like enum variant discriminant is not portable to 32-bit targets\",\n                         );\n                     };\n                 }"}, {"sha": "a9294a87f15d060d23878f0ff1a15705713d8395", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -183,10 +183,10 @@ fn check_variant(\n             && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n             && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n         {\n-            span_lint(cx, lint, var.span, \"Variant name starts with the enum's name\");\n+            span_lint(cx, lint, var.span, \"variant name starts with the enum's name\");\n         }\n         if partial_rmatch(item_name, &name) == item_name_chars {\n-            span_lint(cx, lint, var.span, \"Variant name ends with the enum's name\");\n+            span_lint(cx, lint, var.span, \"variant name ends with the enum's name\");\n         }\n     }\n     let first = &def.variants[0].ident.name.as_str();\n@@ -227,7 +227,7 @@ fn check_variant(\n         cx,\n         lint,\n         span,\n-        &format!(\"All variants have the same {}fix: `{}`\", what, value),\n+        &format!(\"all variants have the same {}fix: `{}`\", what, value),\n         None,\n         &format!(\n             \"remove the {}fixes and use full paths to \\"}, {"sha": "28b20cdeac343ecdf30c3cf66be49aa909765b96", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -61,8 +61,8 @@ impl<'tcx> LateLintPass<'tcx> for OkIfLet {\n                     cx,\n                     IF_LET_SOME_RESULT,\n                     expr.span.with_hi(op.span.hi()),\n-                    \"Matching on `Some` with `ok()` is redundant\",\n-                    &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                    \"matching on `Some` with `ok()` is redundant\",\n+                    &format!(\"consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n                     sugg,\n                     applicability,\n                 );"}, {"sha": "b86d2e766566bd16391dde7b738d288d873050ac", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -60,7 +60,7 @@ impl EarlyLintPass for IfNotElse {\n                             cx,\n                             IF_NOT_ELSE,\n                             item.span,\n-                            \"Unnecessary boolean `not` operation\",\n+                            \"unnecessary boolean `not` operation\",\n                             None,\n                             \"remove the `!` and swap the blocks of the `if`/`else`\",\n                         );\n@@ -70,7 +70,7 @@ impl EarlyLintPass for IfNotElse {\n                             cx,\n                             IF_NOT_ELSE,\n                             item.span,\n-                            \"Unnecessary `!=` operation\",\n+                            \"unnecessary `!=` operation\",\n                             None,\n                             \"change to `==` and swap the blocks of the `if`/`else`\",\n                         );"}, {"sha": "b57fe8dc4269e341b7f6299cae07331aff409562", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -158,9 +158,9 @@ fn print_lint_and_sugg(cx: &LateContext<'_>, var_name: &str, expr: &Expr<'_>) {\n         cx,\n         IMPLICIT_SATURATING_SUB,\n         expr.span,\n-        \"Implicitly performing saturating subtraction\",\n+        \"implicitly performing saturating subtraction\",\n         \"try\",\n-        format!(\"{} = {}.saturating_sub({});\", var_name, var_name, 1.to_string()),\n+        format!(\"{} = {}.saturating_sub({});\", var_name, var_name, '1'),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "4e6bb604785417977320c72d6de98ad623abd59e", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -81,9 +81,9 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n                             cx,\n                             MULTIPLE_INHERENT_IMPL,\n                             *additional_span,\n-                            \"Multiple implementations of this structure\",\n+                            \"multiple implementations of this structure\",\n                             |diag| {\n-                                diag.span_note(*initial_span, \"First implementation here\");\n+                                diag.span_note(*initial_span, \"first implementation here\");\n                             },\n                         )\n                     })"}, {"sha": "c629ee05ab97c1e2740441170c3ad142c857fbb7", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -152,7 +152,7 @@ impl IntPlusOne {\n             cx,\n             INT_PLUS_ONE,\n             block.span,\n-            \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n+            \"unnecessary `>= y + 1` or `x - 1 >=`\",\n             \"change it to\",\n             recommendation,\n             Applicability::MachineApplicable, // snippet\n@@ -163,8 +163,8 @@ impl IntPlusOne {\n impl EarlyLintPass for IntPlusOne {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, item: &Expr) {\n         if let ExprKind::Binary(ref kind, ref lhs, ref rhs) = item.kind {\n-            if let Some(ref rec) = Self::check_binop(cx, kind.node, lhs, rhs) {\n-                Self::emit_warning(cx, item, rec.clone());\n+            if let Some(rec) = Self::check_binop(cx, kind.node, lhs, rhs) {\n+                Self::emit_warning(cx, item, rec);\n             }\n         }\n     }"}, {"sha": "1cd5b2012922f72ac65772a64de3af1f3d38c2e8", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -111,8 +111,8 @@ fn lint_needless_cloning(cx: &LateContext<'_>, root: Span, receiver: Span) {\n         cx,\n         MAP_CLONE,\n         root.trim_start(receiver).unwrap(),\n-        \"You are needlessly cloning iterator elements\",\n-        \"Remove the `map` call\",\n+        \"you are needlessly cloning iterator elements\",\n+        \"remove the `map` call\",\n         String::new(),\n         Applicability::MachineApplicable,\n     )\n@@ -125,8 +125,8 @@ fn lint(cx: &LateContext<'_>, replace: Span, root: Span, copied: bool) {\n             cx,\n             MAP_CLONE,\n             replace,\n-            \"You are using an explicit closure for copying elements\",\n-            \"Consider calling the dedicated `copied` method\",\n+            \"you are using an explicit closure for copying elements\",\n+            \"consider calling the dedicated `copied` method\",\n             format!(\n                 \"{}.copied()\",\n                 snippet_with_applicability(cx, root, \"..\", &mut applicability)\n@@ -138,8 +138,8 @@ fn lint(cx: &LateContext<'_>, replace: Span, root: Span, copied: bool) {\n             cx,\n             MAP_CLONE,\n             replace,\n-            \"You are using an explicit closure for cloning elements\",\n-            \"Consider calling the dedicated `cloned` method\",\n+            \"you are using an explicit closure for cloning elements\",\n+            \"consider calling the dedicated `cloned` method\",\n             format!(\n                 \"{}.cloned()\",\n                 snippet_with_applicability(cx, root, \"..\", &mut applicability)"}, {"sha": "f4eb9c4516fc4f381eef67524ea03b3b81f104af", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -2280,7 +2280,7 @@ fn lint_iter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, iter_\n                     cx,\n                     ITER_NEXT_SLICE,\n                     expr.span,\n-                    \"Using `.iter().next()` on a Slice without end index.\",\n+                    \"using `.iter().next()` on a Slice without end index\",\n                     \"try calling\",\n                     format!(\"{}.get({})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability), start_idx),\n                     applicability,\n@@ -2299,7 +2299,7 @@ fn lint_iter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, iter_\n             cx,\n             ITER_NEXT_SLICE,\n             expr.span,\n-            \"Using `.iter().next()` on an array\",\n+            \"using `.iter().next()` on an array\",\n             \"try calling\",\n             format!(\n                 \"{}.get(0)\","}, {"sha": "21efee71269862484f60ca618249bb067dd363e5", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -72,8 +72,8 @@ impl<'tcx> LateLintPass<'tcx> for Mutex {\n                 let mutex_param = subst.type_at(0);\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!(\n-                        \"Consider using an `{}` instead of a `Mutex` here. If you just want the locking \\\n-                         behavior and not the internal type, consider using `Mutex<()>`.\",\n+                        \"consider using an `{}` instead of a `Mutex` here; if you just want the locking \\\n+                         behavior and not the internal type, consider using `Mutex<()>`\",\n                         atomic_name\n                     );\n                     match mutex_param.kind {"}, {"sha": "22c49a20451f1f16c5ad11d7891d05a46b6d497d", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -111,9 +111,9 @@ impl LateLintPass<'_> for StableSortPrimitive {\n                 STABLE_SORT_PRIMITIVE,\n                 expr.span,\n                 format!(\n-                    \"Use {} instead of {}\",\n-                    detection.method.unstable_name(),\n-                    detection.method.stable_name()\n+                    \"used {} instead of {}\",\n+                    detection.method.stable_name(),\n+                    detection.method.unstable_name()\n                 )\n                 .as_str(),\n                 \"try\","}, {"sha": "427a1b6577315c271611a0cd9c5c5d8e721a4346", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -50,7 +50,7 @@ declare_clippy_lint! {\n     /// ```\n     pub USE_SELF,\n     nursery,\n-    \"Unnecessary structure name repetition whereas `Self` is applicable\"\n+    \"unnecessary structure name repetition whereas `Self` is applicable\"\n }\n \n declare_lint_pass!(UseSelf => [USE_SELF]);"}, {"sha": "ccc9e2509521027370526f9cf166942b1b7bb50f", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -2498,7 +2498,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"use_self\",\n         group: \"nursery\",\n-        desc: \"Unnecessary structure name repetition whereas `Self` is applicable\",\n+        desc: \"unnecessary structure name repetition whereas `Self` is applicable\",\n         deprecation: None,\n         module: \"use_self\",\n     },"}, {"sha": "cdbeff6a037834f818e717ddc8ae24842dc8b412", "filename": "tests/ui/duration_subsec.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fduration_subsec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fduration_subsec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,30 +1,30 @@\n-error: Calling `subsec_millis()` is more concise than this calculation\n+error: calling `subsec_millis()` is more concise than this calculation\n   --> $DIR/duration_subsec.rs:10:24\n    |\n LL |     let bad_millis_1 = dur.subsec_micros() / 1_000;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n    |\n    = note: `-D clippy::duration-subsec` implied by `-D warnings`\n \n-error: Calling `subsec_millis()` is more concise than this calculation\n+error: calling `subsec_millis()` is more concise than this calculation\n   --> $DIR/duration_subsec.rs:11:24\n    |\n LL |     let bad_millis_2 = dur.subsec_nanos() / 1_000_000;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n \n-error: Calling `subsec_micros()` is more concise than this calculation\n+error: calling `subsec_micros()` is more concise than this calculation\n   --> $DIR/duration_subsec.rs:16:22\n    |\n LL |     let bad_micros = dur.subsec_nanos() / 1_000;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`\n \n-error: Calling `subsec_micros()` is more concise than this calculation\n+error: calling `subsec_micros()` is more concise than this calculation\n   --> $DIR/duration_subsec.rs:21:13\n    |\n LL |     let _ = (&dur).subsec_nanos() / 1_000;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(&dur).subsec_micros()`\n \n-error: Calling `subsec_micros()` is more concise than this calculation\n+error: calling `subsec_micros()` is more concise than this calculation\n   --> $DIR/duration_subsec.rs:25:13\n    |\n LL |     let _ = dur.subsec_nanos() / NANOS_IN_MICRO;"}, {"sha": "5935eea5e036e74845b71e7020526cd1d4426195", "filename": "tests/ui/enum_clike_unportable_variant.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fenum_clike_unportable_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fenum_clike_unportable_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_clike_unportable_variant.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,54 +1,54 @@\n-error: Clike enum variant discriminant is not portable to 32-bit targets\n+error: C-like enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:8:5\n    |\n LL |     X = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::enum-clike-unportable-variant` implied by `-D warnings`\n \n-error: Clike enum variant discriminant is not portable to 32-bit targets\n+error: C-like enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:15:5\n    |\n LL |     X = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: Clike enum variant discriminant is not portable to 32-bit targets\n+error: C-like enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:18:5\n    |\n LL |     A = 0xFFFF_FFFF,\n    |     ^^^^^^^^^^^^^^^\n \n-error: Clike enum variant discriminant is not portable to 32-bit targets\n+error: C-like enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:25:5\n    |\n LL |     Z = 0xFFFF_FFFF,\n    |     ^^^^^^^^^^^^^^^\n \n-error: Clike enum variant discriminant is not portable to 32-bit targets\n+error: C-like enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:26:5\n    |\n LL |     A = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: Clike enum variant discriminant is not portable to 32-bit targets\n+error: C-like enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:28:5\n    |\n LL |     C = (i32::MIN as isize) - 1,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Clike enum variant discriminant is not portable to 32-bit targets\n+error: C-like enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:34:5\n    |\n LL |     Z = 0xFFFF_FFFF,\n    |     ^^^^^^^^^^^^^^^\n \n-error: Clike enum variant discriminant is not portable to 32-bit targets\n+error: C-like enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:35:5\n    |\n LL |     A = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: Clike enum variant discriminant is not portable to 32-bit targets\n+error: C-like enum variant discriminant is not portable to 32-bit targets\n   --> $DIR/enum_clike_unportable_variant.rs:40:5\n    |\n LL |     X = <usize as Trait>::Number,"}, {"sha": "b1d481190ff53bdfa68e41934fa668c49edb05f6", "filename": "tests/ui/enum_variants.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,30 +1,30 @@\n-error: Variant name ends with the enum's name\n+error: variant name ends with the enum's name\n   --> $DIR/enum_variants.rs:16:5\n    |\n LL |     cFoo,\n    |     ^^^^\n    |\n    = note: `-D clippy::enum-variant-names` implied by `-D warnings`\n \n-error: Variant name starts with the enum's name\n+error: variant name starts with the enum's name\n   --> $DIR/enum_variants.rs:27:5\n    |\n LL |     FoodGood,\n    |     ^^^^^^^^\n \n-error: Variant name starts with the enum's name\n+error: variant name starts with the enum's name\n   --> $DIR/enum_variants.rs:28:5\n    |\n LL |     FoodMiddle,\n    |     ^^^^^^^^^^\n \n-error: Variant name starts with the enum's name\n+error: variant name starts with the enum's name\n   --> $DIR/enum_variants.rs:29:5\n    |\n LL |     FoodBad,\n    |     ^^^^^^^\n \n-error: All variants have the same prefix: `Food`\n+error: all variants have the same prefix: `Food`\n   --> $DIR/enum_variants.rs:26:1\n    |\n LL | / enum Food {\n@@ -36,7 +36,7 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: All variants have the same prefix: `CallType`\n+error: all variants have the same prefix: `CallType`\n   --> $DIR/enum_variants.rs:36:1\n    |\n LL | / enum BadCallType {\n@@ -48,7 +48,7 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: All variants have the same prefix: `Constant`\n+error: all variants have the same prefix: `Constant`\n   --> $DIR/enum_variants.rs:48:1\n    |\n LL | / enum Consts {\n@@ -60,7 +60,7 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: All variants have the same prefix: `With`\n+error: all variants have the same prefix: `With`\n   --> $DIR/enum_variants.rs:82:1\n    |\n LL | / enum Seallll {\n@@ -72,7 +72,7 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: All variants have the same prefix: `Prefix`\n+error: all variants have the same prefix: `Prefix`\n   --> $DIR/enum_variants.rs:88:1\n    |\n LL | / enum NonCaps {\n@@ -84,7 +84,7 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: All variants have the same prefix: `With`\n+error: all variants have the same prefix: `With`\n   --> $DIR/enum_variants.rs:94:1\n    |\n LL | / pub enum PubSeall {"}, {"sha": "6afee0f36b9da21b592e78b947cdc07140b14015", "filename": "tests/ui/if_let_some_result.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fif_let_some_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fif_let_some_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,22 +1,22 @@\n-error: Matching on `Some` with `ok()` is redundant\n+error: matching on `Some` with `ok()` is redundant\n   --> $DIR/if_let_some_result.rs:6:5\n    |\n LL |     if let Some(y) = x.parse().ok() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::if-let-some-result` implied by `-D warnings`\n-help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n+help: consider matching on `Ok(y)` and removing the call to `ok` instead\n    |\n LL |     if let Ok(y) = x.parse() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Matching on `Some` with `ok()` is redundant\n+error: matching on `Some` with `ok()` is redundant\n   --> $DIR/if_let_some_result.rs:24:9\n    |\n LL |         if let Some(y) = x   .   parse()   .   ok   ()    {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n+help: consider matching on `Ok(y)` and removing the call to `ok` instead\n    |\n LL |         if let Ok(y) = x   .   parse()       {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "53d1b86d02a962a639631ea29c6415573cb8ee51", "filename": "tests/ui/if_not_else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,4 +1,4 @@\n-error: Unnecessary boolean `not` operation\n+error: unnecessary boolean `not` operation\n   --> $DIR/if_not_else.rs:9:5\n    |\n LL | /     if !bla() {\n@@ -11,7 +11,7 @@ LL | |     }\n    = note: `-D clippy::if-not-else` implied by `-D warnings`\n    = help: remove the `!` and swap the blocks of the `if`/`else`\n \n-error: Unnecessary `!=` operation\n+error: unnecessary `!=` operation\n   --> $DIR/if_not_else.rs:14:5\n    |\n LL | /     if 4 != 5 {"}, {"sha": "aab688cc2d8b2b87d77ca9eb864a699a191edc3c", "filename": "tests/ui/impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,4 +1,4 @@\n-error: Multiple implementations of this structure\n+error: multiple implementations of this structure\n   --> $DIR/impl.rs:10:1\n    |\n LL | / impl MyStruct {\n@@ -7,23 +7,23 @@ LL | | }\n    | |_^\n    |\n    = note: `-D clippy::multiple-inherent-impl` implied by `-D warnings`\n-note: First implementation here\n+note: first implementation here\n   --> $DIR/impl.rs:6:1\n    |\n LL | / impl MyStruct {\n LL | |     fn first() {}\n LL | | }\n    | |_^\n \n-error: Multiple implementations of this structure\n+error: multiple implementations of this structure\n   --> $DIR/impl.rs:24:5\n    |\n LL | /     impl super::MyStruct {\n LL | |         fn third() {}\n LL | |     }\n    | |_____^\n    |\n-note: First implementation here\n+note: first implementation here\n   --> $DIR/impl.rs:6:1\n    |\n LL | / impl MyStruct {"}, {"sha": "5bb9a606422a13fdb740663f33850c3d3181f34b", "filename": "tests/ui/implicit_saturating_sub.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fimplicit_saturating_sub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fimplicit_saturating_sub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_sub.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,4 +1,4 @@\n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:13:5\n    |\n LL | /     if u_8 > 0 {\n@@ -8,175 +8,175 @@ LL | |     }\n    |\n    = note: `-D clippy::implicit-saturating-sub` implied by `-D warnings`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:20:13\n    |\n LL | /             if u_8 > 0 {\n LL | |                 u_8 -= 1;\n LL | |             }\n    | |_____________^ help: try: `u_8 = u_8.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:34:5\n    |\n LL | /     if u_16 > 0 {\n LL | |         u_16 -= 1;\n LL | |     }\n    | |_____^ help: try: `u_16 = u_16.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:44:5\n    |\n LL | /     if u_32 != 0 {\n LL | |         u_32 -= 1;\n LL | |     }\n    | |_____^ help: try: `u_32 = u_32.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:65:5\n    |\n LL | /     if u_64 > 0 {\n LL | |         u_64 -= 1;\n LL | |     }\n    | |_____^ help: try: `u_64 = u_64.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:70:5\n    |\n LL | /     if 0 < u_64 {\n LL | |         u_64 -= 1;\n LL | |     }\n    | |_____^ help: try: `u_64 = u_64.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:75:5\n    |\n LL | /     if 0 != u_64 {\n LL | |         u_64 -= 1;\n LL | |     }\n    | |_____^ help: try: `u_64 = u_64.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:96:5\n    |\n LL | /     if u_usize > 0 {\n LL | |         u_usize -= 1;\n LL | |     }\n    | |_____^ help: try: `u_usize = u_usize.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:108:5\n    |\n LL | /     if i_8 > i8::MIN {\n LL | |         i_8 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:113:5\n    |\n LL | /     if i_8 > i8::MIN {\n LL | |         i_8 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:118:5\n    |\n LL | /     if i_8 != i8::MIN {\n LL | |         i_8 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:123:5\n    |\n LL | /     if i_8 != i8::MIN {\n LL | |         i_8 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:133:5\n    |\n LL | /     if i_16 > i16::MIN {\n LL | |         i_16 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:138:5\n    |\n LL | /     if i_16 > i16::MIN {\n LL | |         i_16 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:143:5\n    |\n LL | /     if i_16 != i16::MIN {\n LL | |         i_16 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:148:5\n    |\n LL | /     if i_16 != i16::MIN {\n LL | |         i_16 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:158:5\n    |\n LL | /     if i_32 > i32::MIN {\n LL | |         i_32 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:163:5\n    |\n LL | /     if i_32 > i32::MIN {\n LL | |         i_32 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:168:5\n    |\n LL | /     if i_32 != i32::MIN {\n LL | |         i_32 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:173:5\n    |\n LL | /     if i_32 != i32::MIN {\n LL | |         i_32 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:183:5\n    |\n LL | /     if i64::MIN < i_64 {\n LL | |         i_64 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_64 = i_64.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:188:5\n    |\n LL | /     if i64::MIN != i_64 {\n LL | |         i_64 -= 1;\n LL | |     }\n    | |_____^ help: try: `i_64 = i_64.saturating_sub(1);`\n \n-error: Implicitly performing saturating subtraction\n+error: implicitly performing saturating subtraction\n   --> $DIR/implicit_saturating_sub.rs:193:5\n    |\n LL | /     if i64::MIN < i_64 {"}, {"sha": "c5b020ba8ced51bce578f1337fe5ac52c7801662", "filename": "tests/ui/int_plus_one.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fint_plus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fint_plus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,24 +1,24 @@\n-error: Unnecessary `>= y + 1` or `x - 1 >=`\n+error: unnecessary `>= y + 1` or `x - 1 >=`\n   --> $DIR/int_plus_one.rs:9:13\n    |\n LL |     let _ = x >= y + 1;\n    |             ^^^^^^^^^^ help: change it to: `x > y`\n    |\n    = note: `-D clippy::int-plus-one` implied by `-D warnings`\n \n-error: Unnecessary `>= y + 1` or `x - 1 >=`\n+error: unnecessary `>= y + 1` or `x - 1 >=`\n   --> $DIR/int_plus_one.rs:10:13\n    |\n LL |     let _ = y + 1 <= x;\n    |             ^^^^^^^^^^ help: change it to: `y < x`\n \n-error: Unnecessary `>= y + 1` or `x - 1 >=`\n+error: unnecessary `>= y + 1` or `x - 1 >=`\n   --> $DIR/int_plus_one.rs:12:13\n    |\n LL |     let _ = x - 1 >= y;\n    |             ^^^^^^^^^^ help: change it to: `x > y`\n \n-error: Unnecessary `>= y + 1` or `x - 1 >=`\n+error: unnecessary `>= y + 1` or `x - 1 >=`\n   --> $DIR/int_plus_one.rs:13:13\n    |\n LL |     let _ = y <= x - 1;"}, {"sha": "8c10a252ee01b427ead6cc1b2c2432a505003e49", "filename": "tests/ui/iter_next_slice.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fiter_next_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fiter_next_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,24 +1,24 @@\n-error: Using `.iter().next()` on an array\n+error: using `.iter().next()` on an array\n   --> $DIR/iter_next_slice.rs:9:5\n    |\n LL |     s.iter().next();\n    |     ^^^^^^^^^^^^^^^ help: try calling: `s.get(0)`\n    |\n    = note: `-D clippy::iter-next-slice` implied by `-D warnings`\n \n-error: Using `.iter().next()` on a Slice without end index.\n+error: using `.iter().next()` on a Slice without end index\n   --> $DIR/iter_next_slice.rs:12:5\n    |\n LL |     s[2..].iter().next();\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try calling: `s.get(2)`\n \n-error: Using `.iter().next()` on a Slice without end index.\n+error: using `.iter().next()` on a Slice without end index\n   --> $DIR/iter_next_slice.rs:15:5\n    |\n LL |     v[5..].iter().next();\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try calling: `v.get(5)`\n \n-error: Using `.iter().next()` on an array\n+error: using `.iter().next()` on an array\n   --> $DIR/iter_next_slice.rs:18:5\n    |\n LL |     v.iter().next();"}, {"sha": "4f43cff50244449b93b23b76db601285132eab85", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,40 +1,40 @@\n-error: You are using an explicit closure for copying elements\n+error: you are using an explicit closure for copying elements\n   --> $DIR/map_clone.rs:10:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n-error: You are using an explicit closure for cloning elements\n+error: you are using an explicit closure for cloning elements\n   --> $DIR/map_clone.rs:11:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n-error: You are using an explicit closure for copying elements\n+error: you are using an explicit closure for copying elements\n   --> $DIR/map_clone.rs:12:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `vec![42, 43].iter().copied()`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![42, 43].iter().copied()`\n \n-error: You are using an explicit closure for copying elements\n+error: you are using an explicit closure for copying elements\n   --> $DIR/map_clone.rs:14:26\n    |\n LL |     let _: Option<u64> = Some(&16).map(|b| *b);\n-   |                          ^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `Some(&16).copied()`\n+   |                          ^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&16).copied()`\n \n-error: You are using an explicit closure for copying elements\n+error: you are using an explicit closure for copying elements\n   --> $DIR/map_clone.rs:15:25\n    |\n LL |     let _: Option<u8> = Some(&1).map(|x| x.clone());\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `Some(&1).copied()`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&1).copied()`\n \n-error: You are needlessly cloning iterator elements\n+error: you are needlessly cloning iterator elements\n   --> $DIR/map_clone.rs:26:29\n    |\n LL |     let _ = std::env::args().map(|v| v.clone());\n-   |                             ^^^^^^^^^^^^^^^^^^^ help: Remove the `map` call\n+   |                             ^^^^^^^^^^^^^^^^^^^ help: remove the `map` call\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a3511ba708a885f808e6f4afd7d257149951c891", "filename": "tests/ui/mutex_atomic.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fmutex_atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fmutex_atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,44 +1,44 @@\n-error: Consider using an `AtomicBool` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicBool` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:6:5\n    |\n LL |     Mutex::new(true);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mutex-atomic` implied by `-D warnings`\n \n-error: Consider using an `AtomicUsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicUsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:7:5\n    |\n LL |     Mutex::new(5usize);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an `AtomicIsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicIsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:8:5\n    |\n LL |     Mutex::new(9isize);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an `AtomicPtr` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicPtr` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:10:5\n    |\n LL |     Mutex::new(&x as *const u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an `AtomicPtr` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicPtr` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:11:5\n    |\n LL |     Mutex::new(&mut x as *mut u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an `AtomicUsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicUsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:12:5\n    |\n LL |     Mutex::new(0u32);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mutex-integer` implied by `-D warnings`\n \n-error: Consider using an `AtomicIsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicIsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:13:5\n    |\n LL |     Mutex::new(0i32);"}, {"sha": "b73012a4691b65ffc31a183fd70bf89a3defda81", "filename": "tests/ui/stable_sort_primitive.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fstable_sort_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73cf9f38737f89cbbd001480327943302a66d5b/tests%2Fui%2Fstable_sort_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstable_sort_primitive.stderr?ref=c73cf9f38737f89cbbd001480327943302a66d5b", "patch": "@@ -1,42 +1,42 @@\n-error: Use sort_unstable instead of sort\n+error: used sort instead of sort_unstable\n   --> $DIR/stable_sort_primitive.rs:7:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n    = note: `-D clippy::stable-sort-primitive` implied by `-D warnings`\n \n-error: Use sort_unstable instead of sort\n+error: used sort instead of sort_unstable\n   --> $DIR/stable_sort_primitive.rs:9:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: Use sort_unstable instead of sort\n+error: used sort instead of sort_unstable\n   --> $DIR/stable_sort_primitive.rs:11:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: Use sort_unstable instead of sort\n+error: used sort instead of sort_unstable\n   --> $DIR/stable_sort_primitive.rs:13:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: Use sort_unstable instead of sort\n+error: used sort instead of sort_unstable\n   --> $DIR/stable_sort_primitive.rs:15:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: Use sort_unstable instead of sort\n+error: used sort instead of sort_unstable\n   --> $DIR/stable_sort_primitive.rs:17:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: Use sort_unstable instead of sort\n+error: used sort instead of sort_unstable\n   --> $DIR/stable_sort_primitive.rs:19:5\n    |\n LL |     arr.sort();"}]}