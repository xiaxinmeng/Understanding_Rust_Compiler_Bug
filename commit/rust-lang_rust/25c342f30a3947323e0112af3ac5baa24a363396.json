{"sha": "25c342f30a3947323e0112af3ac5baa24a363396", "node_id": "C_kwDOAAsO6NoAKDI1YzM0MmYzMGEzOTQ3MzIzZTAxMTJhZjNhYzViYWEyNGEzNjMzOTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-02T20:37:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-11T17:45:42Z"}, "message": "Split implied and super predicate queries", "tree": {"sha": "7e4905a53bafc632a2a9df83fa446c8aadb25e13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e4905a53bafc632a2a9df83fa446c8aadb25e13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c342f30a3947323e0112af3ac5baa24a363396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c342f30a3947323e0112af3ac5baa24a363396", "html_url": "https://github.com/rust-lang/rust/commit/25c342f30a3947323e0112af3ac5baa24a363396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c342f30a3947323e0112af3ac5baa24a363396/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dab259cb9f9ccdce2e86e45dad565f5e2123428", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dab259cb9f9ccdce2e86e45dad565f5e2123428", "html_url": "https://github.com/rust-lang/rust/commit/3dab259cb9f9ccdce2e86e45dad565f5e2123428"}], "stats": {"total": 221, "additions": 125, "deletions": 96}, "files": [{"sha": "cbbaf8f857dac3ef82b0250d81a933f5d1ba293e", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -64,9 +64,9 @@ pub fn provide(providers: &mut Providers) {\n         predicates_defined_on,\n         explicit_predicates_of: predicates_of::explicit_predicates_of,\n         super_predicates_of: predicates_of::super_predicates_of,\n-        super_predicates_that_define_assoc_type: |tcx, (def_id, assoc_name)| {\n-            predicates_of::super_predicates_that_define_assoc_type(tcx, (def_id, Some(assoc_name)))\n-        },\n+        implied_predicates_of: predicates_of::implied_predicates_of,\n+        super_predicates_that_define_assoc_type:\n+            predicates_of::super_predicates_that_define_assoc_type,\n         trait_explicit_predicates_and_bounds: predicates_of::trait_explicit_predicates_and_bounds,\n         type_param_predicates: predicates_of::type_param_predicates,\n         trait_def,\n@@ -597,6 +597,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n         }\n         hir::ItemKind::TraitAlias(..) => {\n             tcx.ensure().generics_of(def_id);\n+            tcx.at(it.span).implied_predicates_of(def_id);\n             tcx.at(it.span).super_predicates_of(def_id);\n             tcx.ensure().predicates_of(def_id);\n         }"}, {"sha": "9358ed612921f5e76dce6c7d8df516ed93017e24", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 81, "deletions": 32, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -125,7 +125,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n     // on a trait we need to add in the supertrait bounds and bounds found on\n     // associated types.\n     if let Some(_trait_ref) = is_trait {\n-        predicates.extend(tcx.super_predicates_of(def_id).predicates.iter().cloned());\n+        predicates.extend(tcx.implied_predicates_of(def_id).predicates.iter().cloned());\n     }\n \n     // In default impls, we can assume that the self type implements\n@@ -534,31 +534,62 @@ pub(super) fn explicit_predicates_of<'tcx>(\n     }\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum PredicateFilter {\n+    /// All predicates may be implied by the trait\n+    All,\n+\n+    /// Only traits that reference `Self: ..` are implied by the trait\n+    SelfOnly,\n+\n+    /// Only traits that reference `Self: ..` and define an associated type\n+    /// with the given ident are implied by the trait\n+    SelfThatDefines(Ident),\n+}\n+\n /// Ensures that the super-predicates of the trait with a `DefId`\n /// of `trait_def_id` are converted and stored. This also ensures that\n /// the transitive super-predicates are converted.\n pub(super) fn super_predicates_of(\n     tcx: TyCtxt<'_>,\n     trait_def_id: LocalDefId,\n ) -> ty::GenericPredicates<'_> {\n-    tcx.super_predicates_that_define_assoc_type((trait_def_id.to_def_id(), None))\n+    implied_predicates_with_filter(tcx, trait_def_id.to_def_id(), PredicateFilter::SelfOnly)\n+}\n+\n+pub(super) fn super_predicates_that_define_assoc_type(\n+    tcx: TyCtxt<'_>,\n+    (trait_def_id, assoc_name): (DefId, Ident),\n+) -> ty::GenericPredicates<'_> {\n+    implied_predicates_with_filter(tcx, trait_def_id, PredicateFilter::SelfThatDefines(assoc_name))\n+}\n+\n+pub(super) fn implied_predicates_of(\n+    tcx: TyCtxt<'_>,\n+    trait_def_id: LocalDefId,\n+) -> ty::GenericPredicates<'_> {\n+    if tcx.is_trait_alias(trait_def_id.to_def_id()) {\n+        implied_predicates_with_filter(tcx, trait_def_id.to_def_id(), PredicateFilter::All)\n+    } else {\n+        tcx.super_predicates_of(trait_def_id)\n+    }\n }\n \n /// Ensures that the super-predicates of the trait with a `DefId`\n /// of `trait_def_id` are converted and stored. This also ensures that\n /// the transitive super-predicates are converted.\n-pub(super) fn super_predicates_that_define_assoc_type(\n+pub(super) fn implied_predicates_with_filter(\n     tcx: TyCtxt<'_>,\n-    (trait_def_id, assoc_name): (DefId, Option<Ident>),\n+    trait_def_id: DefId,\n+    filter: PredicateFilter,\n ) -> ty::GenericPredicates<'_> {\n     let Some(trait_def_id) = trait_def_id.as_local() else {\n         // if `assoc_name` is None, then the query should've been redirected to an\n         // external provider\n-        assert!(assoc_name.is_some());\n+        assert!(matches!(filter, PredicateFilter::SelfThatDefines(_)));\n         return tcx.super_predicates_of(trait_def_id);\n     };\n \n-    debug!(\"local trait\");\n     let trait_hir_id = tcx.hir().local_def_id_to_hir_id(trait_def_id);\n \n     let Node::Item(item) = tcx.hir().get(trait_hir_id) else {\n@@ -573,48 +604,66 @@ pub(super) fn super_predicates_that_define_assoc_type(\n \n     let icx = ItemCtxt::new(tcx, trait_def_id);\n \n-    // Convert the bounds that follow the colon, e.g., `Bar + Zed` in `trait Foo: Bar + Zed`.\n     let self_param_ty = tcx.types.self_param;\n-    let superbounds1 = if let Some(assoc_name) = assoc_name {\n-        icx.astconv().compute_bounds_that_match_assoc_type(self_param_ty, bounds, assoc_name)\n-    } else {\n-        icx.astconv().compute_bounds(self_param_ty, bounds)\n+    let (superbounds, where_bounds_that_match) = match filter {\n+        PredicateFilter::All => (\n+            // Convert the bounds that follow the colon (or equal in trait aliases)\n+            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            // Also include all where clause bounds\n+            icx.type_parameter_bounds_in_generics(\n+                generics,\n+                item.owner_id.def_id,\n+                self_param_ty,\n+                OnlySelfBounds(false),\n+                None,\n+            ),\n+        ),\n+        PredicateFilter::SelfOnly => (\n+            // Convert the bounds that follow the colon (or equal in trait aliases)\n+            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            // Include where clause bounds for `Self`\n+            icx.type_parameter_bounds_in_generics(\n+                generics,\n+                item.owner_id.def_id,\n+                self_param_ty,\n+                OnlySelfBounds(true),\n+                None,\n+            ),\n+        ),\n+        PredicateFilter::SelfThatDefines(assoc_name) => (\n+            // Convert the bounds that follow the colon (or equal) that reference the associated name\n+            icx.astconv().compute_bounds_that_match_assoc_type(self_param_ty, bounds, assoc_name),\n+            // Include where clause bounds for `Self` that reference the associated name\n+            icx.type_parameter_bounds_in_generics(\n+                generics,\n+                item.owner_id.def_id,\n+                self_param_ty,\n+                OnlySelfBounds(true),\n+                Some(assoc_name),\n+            ),\n+        ),\n     };\n \n-    let superbounds1 = superbounds1.predicates();\n-\n-    // Convert any explicit superbounds in the where-clause,\n-    // e.g., `trait Foo where Self: Bar`.\n-    // In the case of trait aliases, however, we include all bounds in the where-clause,\n-    // so e.g., `trait Foo = where u32: PartialEq<Self>` would include `u32: PartialEq<Self>`\n-    // as one of its \"superpredicates\".\n-    let is_trait_alias = tcx.is_trait_alias(trait_def_id.to_def_id());\n-    let superbounds2 = icx.type_parameter_bounds_in_generics(\n-        generics,\n-        item.owner_id.def_id,\n-        self_param_ty,\n-        OnlySelfBounds(!is_trait_alias),\n-        assoc_name,\n-    );\n-\n     // Combine the two lists to form the complete set of superbounds:\n-    let superbounds = &*tcx.arena.alloc_from_iter(superbounds1.into_iter().chain(superbounds2));\n-    debug!(?superbounds);\n+    let implied_bounds = &*tcx\n+        .arena\n+        .alloc_from_iter(superbounds.predicates().into_iter().chain(where_bounds_that_match));\n+    debug!(?implied_bounds);\n \n     // Now require that immediate supertraits are converted,\n     // which will, in turn, reach indirect supertraits.\n-    if assoc_name.is_none() {\n+    if matches!(filter, PredicateFilter::SelfOnly) {\n         // Now require that immediate supertraits are converted,\n         // which will, in turn, reach indirect supertraits.\n-        for &(pred, span) in superbounds {\n+        for &(pred, span) in implied_bounds {\n             debug!(\"superbound: {:?}\", pred);\n             if let ty::PredicateKind::Clause(ty::Clause::Trait(bound)) = pred.kind().skip_binder() {\n                 tcx.at(span).super_predicates_of(bound.def_id());\n             }\n         }\n     }\n \n-    ty::GenericPredicates { parent: None, predicates: superbounds }\n+    ty::GenericPredicates { parent: None, predicates: implied_bounds }\n }\n \n /// Returns the predicates defined on `item_def_id` of the form"}, {"sha": "1f7c7652d94f2f250b74147c1649a80c7dbc14cd", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -192,7 +192,7 @@ impl<'tcx, O: Elaboratable<'tcx>> Elaborator<'tcx, O> {\n         match bound_predicate.skip_binder() {\n             ty::PredicateKind::Clause(ty::Clause::Trait(data)) => {\n                 // Get predicates declared on the trait.\n-                let predicates = tcx.super_predicates_of(data.def_id());\n+                let predicates = tcx.implied_predicates_of(data.def_id());\n \n                 let obligations =\n                     predicates.predicates.iter().enumerate().map(|(index, &(mut pred, span))| {"}, {"sha": "31798afb852c5da3e26e791223b6ad13ebe3dc09", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -253,7 +253,19 @@ provide! { tcx, def_id, other, cdata,\n             .get(cdata, def_id.index)\n             .map(|lazy| lazy.decode((cdata, tcx)))\n             .process_decoded(tcx, || panic!(\"{def_id:?} does not have trait_impl_trait_tys\")))\n-     }\n+    }\n+    implied_predicates_of => {\n+        cdata\n+            .root\n+            .tables\n+            .implied_predicates_of\n+            .get(cdata, def_id.index)\n+            .map(|lazy| lazy.decode((cdata, tcx)))\n+            .unwrap_or_else(|| {\n+                debug_assert_eq!(tcx.def_kind(def_id), DefKind::Trait);\n+                tcx.super_predicates_of(def_id)\n+            })\n+    }\n \n     associated_types_for_impl_traits_in_associated_fn => { table_defaulted_array }\n "}, {"sha": "dc8fa1ab7d31d7169fe0e2a57e94bff861bf0f46", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -1316,9 +1316,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let default = self.tcx.object_lifetime_default(def_id);\n                 record!(self.tables.object_lifetime_default[def_id] <- default);\n             }\n-            if let DefKind::Trait | DefKind::TraitAlias = def_kind {\n+            if let DefKind::Trait = def_kind {\n                 record!(self.tables.super_predicates_of[def_id] <- self.tcx.super_predicates_of(def_id));\n             }\n+            if let DefKind::TraitAlias = def_kind {\n+                record!(self.tables.super_predicates_of[def_id] <- self.tcx.super_predicates_of(def_id));\n+                record!(self.tables.implied_predicates_of[def_id] <- self.tcx.implied_predicates_of(def_id));\n+            }\n             if let DefKind::Enum | DefKind::Struct | DefKind::Union = def_kind {\n                 self.encode_info_for_adt(def_id);\n             }"}, {"sha": "569fd20fdfe63b86998b14f819f1801bc60a5627", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -372,6 +372,9 @@ define_tables! {\n     explicit_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n     generics_of: Table<DefIndex, LazyValue<ty::Generics>>,\n     super_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n+    // As an optimization, we only store this for trait aliases,\n+    // since it's identical to super_predicates_of for traits.\n+    implied_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n     type_of: Table<DefIndex, LazyValue<ty::EarlyBinder<Ty<'static>>>>,\n     variances_of: Table<DefIndex, LazyArray<ty::Variance>>,\n     fn_sig: Table<DefIndex, LazyValue<ty::EarlyBinder<ty::PolyFnSig<'static>>>>,\n@@ -383,7 +386,6 @@ define_tables! {\n     mir_for_ctfe: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n     mir_generator_witnesses: Table<DefIndex, LazyValue<mir::GeneratorLayout<'static>>>,\n     promoted_mir: Table<DefIndex, LazyValue<IndexVec<mir::Promoted, mir::Body<'static>>>>,\n-    // FIXME(compiler-errors): Why isn't this a LazyArray?\n     thir_abstract_const: Table<DefIndex, LazyValue<ty::Const<'static>>>,\n     impl_parent: Table<DefIndex, RawDefId>,\n     impl_polarity: Table<DefIndex, ty::ImplPolarity>,"}, {"sha": "2f6b7a3c860b7ea9c1c7484c0752f3ee793e49a4", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -627,6 +627,12 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query implied_predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n+        desc { |tcx| \"computing the implied predicates of `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n+        separate_provide_extern\n+    }\n+\n     /// The `Option<Ident>` is the name of an associated type. If it is `None`, then this query\n     /// returns the full set of predicates. If `Some<Ident>`, then the query returns only the\n     /// subset of super-predicates that reference traits that define the given associated type."}, {"sha": "60630979b34e4203c42263c73de54568245293cf", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n         }\n \n         // Get components of trait alias.\n-        let predicates = tcx.super_predicates_of(trait_ref.def_id());\n+        let predicates = tcx.implied_predicates_of(trait_ref.def_id());\n         debug!(?predicates);\n \n         let items = predicates.predicates.iter().rev().filter_map(|(pred, span)| {"}, {"sha": "575b00e09b02c6c076c484cc353e7505774a9de4", "filename": "tests/ui/associated-type-bounds/ambiguous-associated-type2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -5,7 +5,7 @@ LL | trait Baz: Foo + Bar<Self::Item> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which immediately requires computing the super traits of `Baz` with associated type name `Item` again\n-note: cycle used when computing the super traits of `Baz`\n+note: cycle used when computing the super predicates of `Baz`\n   --> $DIR/ambiguous-associated-type2.rs:7:1\n    |\n LL | trait Baz: Foo + Bar<Self::Item> {}"}, {"sha": "c4dea68b884a2576b47a9a2b51bf78c341995572", "filename": "tests/ui/associated-types/issue-20825.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fassociated-types%2Fissue-20825.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fassociated-types%2Fissue-20825.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-20825.stderr?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -5,7 +5,7 @@ LL | pub trait Processor: Subscriber<Input = Self::Input> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which immediately requires computing the super traits of `Processor` with associated type name `Input` again\n-note: cycle used when computing the super traits of `Processor`\n+note: cycle used when computing the super predicates of `Processor`\n   --> $DIR/issue-20825.rs:5:1\n    |\n LL | pub trait Processor: Subscriber<Input = Self::Input> {"}, {"sha": "e2b2aac05ac948eac3132860cc560d32ba60b087", "filename": "tests/ui/cycle-trait/cycle-trait-supertrait-direct.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-direct.stderr?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -1,15 +1,10 @@\n error[E0391]: cycle detected when computing the super predicates of `Chromosome`\n-  --> $DIR/cycle-trait-supertrait-direct.rs:3:1\n-   |\n-LL | trait Chromosome: Chromosome {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...which requires computing the super traits of `Chromosome`...\n   --> $DIR/cycle-trait-supertrait-direct.rs:3:19\n    |\n LL | trait Chromosome: Chromosome {\n    |                   ^^^^^^^^^^\n-   = note: ...which again requires computing the super predicates of `Chromosome`, completing the cycle\n+   |\n+   = note: ...which immediately requires computing the super predicates of `Chromosome` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-supertrait-direct.rs:3:1\n    |"}, {"sha": "c903e114657688d13b9592fe8d8d83dbc04f1187", "filename": "tests/ui/cycle-trait/cycle-trait-supertrait-indirect.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-indirect.stderr?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -1,26 +1,16 @@\n error[E0391]: cycle detected when computing the super predicates of `B`\n-  --> $DIR/cycle-trait-supertrait-indirect.rs:7:1\n-   |\n-LL | trait B: C {\n-   | ^^^^^^^^^^\n-   |\n-note: ...which requires computing the super traits of `B`...\n   --> $DIR/cycle-trait-supertrait-indirect.rs:7:10\n    |\n LL | trait B: C {\n    |          ^\n-note: ...which requires computing the super predicates of `C`...\n-  --> $DIR/cycle-trait-supertrait-indirect.rs:11:1\n    |\n-LL | trait C: B { }\n-   | ^^^^^^^^^^\n-note: ...which requires computing the super traits of `C`...\n+note: ...which requires computing the super predicates of `C`...\n   --> $DIR/cycle-trait-supertrait-indirect.rs:11:10\n    |\n LL | trait C: B { }\n    |          ^\n    = note: ...which again requires computing the super predicates of `B`, completing the cycle\n-note: cycle used when computing the super traits of `A`\n+note: cycle used when computing the super predicates of `A`\n   --> $DIR/cycle-trait-supertrait-indirect.rs:4:10\n    |\n LL | trait A: B {"}, {"sha": "683987b4943da1d5c2e1db32f6f90e3ab3cda2f2", "filename": "tests/ui/infinite/infinite-trait-alias-recursion.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -1,30 +1,15 @@\n error[E0391]: cycle detected when computing the super predicates of `T1`\n-  --> $DIR/infinite-trait-alias-recursion.rs:3:1\n-   |\n-LL | trait T1 = T2;\n-   | ^^^^^^^^\n-   |\n-note: ...which requires computing the super traits of `T1`...\n   --> $DIR/infinite-trait-alias-recursion.rs:3:12\n    |\n LL | trait T1 = T2;\n    |            ^^\n-note: ...which requires computing the super predicates of `T2`...\n-  --> $DIR/infinite-trait-alias-recursion.rs:6:1\n    |\n-LL | trait T2 = T3;\n-   | ^^^^^^^^\n-note: ...which requires computing the super traits of `T2`...\n+note: ...which requires computing the super predicates of `T2`...\n   --> $DIR/infinite-trait-alias-recursion.rs:6:12\n    |\n LL | trait T2 = T3;\n    |            ^^\n note: ...which requires computing the super predicates of `T3`...\n-  --> $DIR/infinite-trait-alias-recursion.rs:8:1\n-   |\n-LL | trait T3 = T1 + T3;\n-   | ^^^^^^^^\n-note: ...which requires computing the super traits of `T3`...\n   --> $DIR/infinite-trait-alias-recursion.rs:8:12\n    |\n LL | trait T3 = T1 + T3;"}, {"sha": "558aad10946eca0c407253013f239032333e8dd3", "filename": "tests/ui/issues/issue-12511.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fissues%2Fissue-12511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fissues%2Fissue-12511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-12511.stderr?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -1,20 +1,10 @@\n error[E0391]: cycle detected when computing the super predicates of `T1`\n-  --> $DIR/issue-12511.rs:1:1\n-   |\n-LL | trait T1 : T2 {\n-   | ^^^^^^^^^^^^^\n-   |\n-note: ...which requires computing the super traits of `T1`...\n   --> $DIR/issue-12511.rs:1:12\n    |\n LL | trait T1 : T2 {\n    |            ^^\n-note: ...which requires computing the super predicates of `T2`...\n-  --> $DIR/issue-12511.rs:5:1\n    |\n-LL | trait T2 : T1 {\n-   | ^^^^^^^^^^^^^\n-note: ...which requires computing the super traits of `T2`...\n+note: ...which requires computing the super predicates of `T2`...\n   --> $DIR/issue-12511.rs:5:12\n    |\n LL | trait T2 : T1 {"}, {"sha": "416fd8c062fa3afe77654ba41fc227d5ebf5c68f", "filename": "tests/ui/issues/issue-20772.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fissues%2Fissue-20772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Fissues%2Fissue-20772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-20772.stderr?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -5,7 +5,7 @@ LL | trait T : Iterator<Item=Self::Item>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which immediately requires computing the super traits of `T` with associated type name `Item` again\n-note: cycle used when computing the super traits of `T`\n+note: cycle used when computing the super predicates of `T`\n   --> $DIR/issue-20772.rs:1:1\n    |\n LL | trait T : Iterator<Item=Self::Item>"}, {"sha": "ca98e1831507e6733c904d1ef3243a6f4167c4a0", "filename": "tests/ui/traits/trait-upcasting/cyclic-trait-resolution.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c342f30a3947323e0112af3ac5baa24a363396/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr?ref=25c342f30a3947323e0112af3ac5baa24a363396", "patch": "@@ -1,15 +1,10 @@\n error[E0391]: cycle detected when computing the super predicates of `A`\n-  --> $DIR/cyclic-trait-resolution.rs:1:1\n-   |\n-LL | trait A: B + A {}\n-   | ^^^^^^^^^^^^^^\n-   |\n-note: ...which requires computing the super traits of `A`...\n   --> $DIR/cyclic-trait-resolution.rs:1:14\n    |\n LL | trait A: B + A {}\n    |              ^\n-   = note: ...which again requires computing the super predicates of `A`, completing the cycle\n+   |\n+   = note: ...which immediately requires computing the super predicates of `A` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cyclic-trait-resolution.rs:1:1\n    |"}]}