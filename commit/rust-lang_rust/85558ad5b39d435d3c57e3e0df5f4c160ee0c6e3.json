{"sha": "85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3", "node_id": "C_kwDOAAsO6NoAKDg1NTU4YWQ1YjM5ZDQzNWQzYzU3ZTNlMGRmNWY0YzE2MGVlMGM2ZTM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-28T19:00:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-28T19:00:58Z"}, "message": "adjust some const_eval_select safety comments", "tree": {"sha": "f5ab48ed6c5a3546708582676fe058b4f9c76602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ab48ed6c5a3546708582676fe058b4f9c76602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3", "html_url": "https://github.com/rust-lang/rust/commit/85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a4ed693722b4bb6d2fa43272a58ab94acfec1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a4ed693722b4bb6d2fa43272a58ab94acfec1a", "html_url": "https://github.com/rust-lang/rust/commit/15a4ed693722b4bb6d2fa43272a58ab94acfec1a"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "975dc593b5181a13a4a715cdfe10bfd20d6b1222", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3", "patch": "@@ -2068,8 +2068,8 @@ pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: us\n     #[cfg(debug_assertions)]\n     const fn compiletime_check<T>(_src: *const T, _dst: *mut T, _count: usize) {}\n     #[cfg(debug_assertions)]\n-    // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to\n-    // not do them during compile time\n+    // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.\n+    // Therefore, compiletime_check and runtime_check are observably equivalent.\n     unsafe {\n         const_eval_select((src, dst, count), compiletime_check, runtime_check);\n     }\n@@ -2159,8 +2159,8 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     #[cfg(debug_assertions)]\n     const fn compiletime_check<T>(_src: *const T, _dst: *mut T) {}\n     #[cfg(debug_assertions)]\n-    // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to\n-    // not do them during compile time\n+    // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.\n+    // Therefore, compiletime_check and runtime_check are observably equivalent.\n     unsafe {\n         const_eval_select((src, dst), compiletime_check, runtime_check);\n     }"}, {"sha": "a8667c3a8caf4e73582be4da4cf574e112dca62e", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=85558ad5b39d435d3c57e3e0df5f4c160ee0c6e3", "patch": "@@ -149,8 +149,8 @@ const fn debug_check_data_len<T>(data: *const T, len: usize) {\n     // it is not required for safety (the safety must be guatanteed by\n     // the `from_raw_parts[_mut]` caller).\n     //\n-    // Since the checks are not required, we ignore them in CTFE as they can't\n-    // be done there (alignment does not make much sense there).\n+    // As per our safety precondition, we may assume that assertion above never fails.\n+    // Therefore, noop and rt_check are observably equivalent.\n     unsafe {\n         crate::intrinsics::const_eval_select((data,), noop, rt_check);\n     }"}]}