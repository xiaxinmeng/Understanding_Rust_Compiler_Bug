{"sha": "2708ad8bb441fb500bbd2486779c215ffd57bcd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MDhhZDhiYjQ0MWZiNTAwYmJkMjQ4Njc3OWMyMTVmZmQ1N2JjZDI=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-08-31T22:26:15Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-09-25T21:46:15Z"}, "message": "Fix pretty-printing of `DisambiguatedDefPathData`", "tree": {"sha": "25b502c1ef735d9c9671f8135306afa90944a04f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25b502c1ef735d9c9671f8135306afa90944a04f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2708ad8bb441fb500bbd2486779c215ffd57bcd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2708ad8bb441fb500bbd2486779c215ffd57bcd2", "html_url": "https://github.com/rust-lang/rust/commit/2708ad8bb441fb500bbd2486779c215ffd57bcd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2708ad8bb441fb500bbd2486779c215ffd57bcd2/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f50c49117684c2806c54e94ee6aff7d11ca724f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f50c49117684c2806c54e94ee6aff7d11ca724f", "html_url": "https://github.com/rust-lang/rust/commit/9f50c49117684c2806c54e94ee6aff7d11ca724f"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "ae2ce6f176a858ae2d2e0a4a4682994fc827afca", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2708ad8bb441fb500bbd2486779c215ffd57bcd2/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2708ad8bb441fb500bbd2486779c215ffd57bcd2/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=2708ad8bb441fb500bbd2486779c215ffd57bcd2", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::ExpnId;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n use std::fmt::{self, Write};\n use std::hash::Hash;\n@@ -155,23 +155,32 @@ pub struct DisambiguatedDefPathData {\n     pub disambiguator: u32,\n }\n \n-impl fmt::Display for DisambiguatedDefPathData {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl DisambiguatedDefPathData {\n+    pub fn fmt_maybe_verbose(&self, writer: &mut impl Write, verbose: bool) -> fmt::Result {\n         match self.data.get_name() {\n             DefPathDataName::Named(name) => {\n-                if self.disambiguator == 0 {\n-                    f.write_str(&name.as_str())\n+                if Ident::with_dummy_span(name).is_raw_guess() {\n+                    writer.write_str(\"r#\")?;\n+                }\n+                if self.disambiguator == 0 || !verbose {\n+                    writer.write_str(&name.as_str())\n                 } else {\n-                    write!(f, \"{}#{}\", name, self.disambiguator)\n+                    write!(writer, \"{}#{}\", name, self.disambiguator)\n                 }\n             }\n             DefPathDataName::Anon { namespace } => {\n-                write!(f, \"{{{}#{}}}\", namespace, self.disambiguator)\n+                write!(writer, \"{{{}#{}}}\", namespace, self.disambiguator)\n             }\n         }\n     }\n }\n \n+impl fmt::Display for DisambiguatedDefPathData {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.fmt_maybe_verbose(f, true)\n+    }\n+}\n+\n #[derive(Clone, Debug, Encodable, Decodable)]\n pub struct DefPath {\n     /// The path leading from the crate root to the item.\n@@ -419,6 +428,7 @@ impl Definitions {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum DefPathDataName {\n     Named(Symbol),\n     Anon { namespace: Symbol },\n@@ -434,7 +444,7 @@ impl DefPathData {\n         }\n     }\n \n-    pub fn get_name(&self) -> DefPathDataName {\n+    pub fn name(&self) -> DefPathDataName {\n         use self::DefPathData::*;\n         match *self {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => {\n@@ -454,7 +464,7 @@ impl DefPathData {\n \n impl fmt::Display for DefPathData {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.get_name() {\n+        match self.name() {\n             DefPathDataName::Named(name) => f.write_str(&name.as_str()),\n             DefPathDataName::Anon { namespace } => write!(f, \"{{{{{}}}}}\", namespace),\n         }"}, {"sha": "7ec14d43892a5ce47134710c0ae46efac3dbc6d6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2708ad8bb441fb500bbd2486779c215ffd57bcd2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2708ad8bb441fb500bbd2486779c215ffd57bcd2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2708ad8bb441fb500bbd2486779c215ffd57bcd2", "patch": "@@ -1496,27 +1496,16 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n             return Ok(self);\n         }\n \n-        let name = match disambiguated_data.data.get_name() {\n-            DefPathDataName::Named(name) => name,\n-            DefPathDataName::Anon { namespace } => namespace,\n-        };\n-\n         // FIXME(eddyb) `name` should never be empty, but it\n         // currently is for `extern { ... }` \"foreign modules\".\n-        if name != kw::Invalid {\n+        let name = disambiguated_data.data.get_name();\n+        if name != DefPathDataName::Named(kw::Invalid) {\n             if !self.empty_path {\n                 write!(self, \"::\")?;\n             }\n-            if Ident::with_dummy_span(name).is_raw_guess() {\n-                write!(self, \"r#\")?;\n-            }\n \n-            match disambiguated_data.data.get_name() {\n-                DefPathDataName::Named(name) => self.write_str(&name.as_str())?,\n-                DefPathDataName::Anon { namespace } => {\n-                    write!(self, \"{{{}#{}}}\", namespace, disambiguated_data.disambiguator)?\n-                }\n-            }\n+            let verbose = self.tcx.sess.verbose();\n+            disambiguated_data.fmt_maybe_verbose(&mut self, verbose)?;\n \n             self.empty_path = false;\n         }"}]}