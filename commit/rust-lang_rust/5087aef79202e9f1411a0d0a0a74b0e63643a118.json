{"sha": "5087aef79202e9f1411a0d0a0a74b0e63643a118", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwODdhZWY3OTIwMmU5ZjE0MTFhMGQwYTBhNzRiMGU2MzY0M2ExMTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-12-13T20:50:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-12-13T22:05:12Z"}, "message": "rustc: Add an unstable `simd_select_bitmask` intrinsic\n\nThis is going to be required for binding a number of AVX-512 intrinsics\nin the `stdsimd` repository, and this intrinsic is the same as\n`simd_select` except that it takes a bitmask as the first argument\ninstead of a SIMD vector. This bitmask is then transmuted into a `<NN x\ni8>` argument, depending on how many bits it is.\n\ncc rust-lang-nursery/stdsimd#310", "tree": {"sha": "c698acf4b9af6e33b6165340583a4d1588ca7007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c698acf4b9af6e33b6165340583a4d1588ca7007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5087aef79202e9f1411a0d0a0a74b0e63643a118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5087aef79202e9f1411a0d0a0a74b0e63643a118", "html_url": "https://github.com/rust-lang/rust/commit/5087aef79202e9f1411a0d0a0a74b0e63643a118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5087aef79202e9f1411a0d0a0a74b0e63643a118/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a421ee3cf1259f0750ac7fabd19da1d8551e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a421ee3cf1259f0750ac7fabd19da1d8551e4c", "html_url": "https://github.com/rust-lang/rust/commit/f4a421ee3cf1259f0750ac7fabd19da1d8551e4c"}], "stats": {"total": 102, "additions": 97, "deletions": 5}, "files": [{"sha": "8b26ada1576063db231af8f977c05bb6b89447a3", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=5087aef79202e9f1411a0d0a0a74b0e63643a118", "patch": "@@ -1171,6 +1171,27 @@ fn generic_simd_intrinsic(\n     );\n     let arg_tys = sig.inputs();\n \n+    if name == \"simd_select_bitmask\" {\n+        let in_ty = arg_tys[0];\n+        let m_len = match in_ty.sty {\n+            // Note that this `.unwrap()` crashes for isize/usize, that's sort\n+            // of intentional as there's not currently a use case for that.\n+            ty::Int(i) => i.bit_width().unwrap(),\n+            ty::Uint(i) => i.bit_width().unwrap(),\n+            _ => return_error!(\"`{}` is not an integral type\", in_ty),\n+        };\n+        require_simd!(arg_tys[1], \"argument\");\n+        let v_len = arg_tys[1].simd_size(tcx);\n+        require!(m_len == v_len,\n+                 \"mismatched lengths: mask length `{}` != other vector length `{}`\",\n+                 m_len, v_len\n+        );\n+        let i1 = bx.type_i1();\n+        let i1xn = bx.type_vector(i1, m_len as u64);\n+        let m_i1s = bx.bitcast(args[0].immediate(), i1xn);\n+        return Ok(bx.select(m_i1s, args[1].immediate(), args[2].immediate()));\n+    }\n+\n     // every intrinsic takes a SIMD vector as its first argument\n     require_simd!(arg_tys[0], \"input\");\n     let in_ty = arg_tys[0];"}, {"sha": "a40e56d68ae8b28f6614be69a3c106ea86653896", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=5087aef79202e9f1411a0d0a0a74b0e63643a118", "patch": "@@ -435,7 +435,8 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         \"simd_insert\" => (2, vec![param(0), tcx.types.u32, param(1)], param(0)),\n         \"simd_extract\" => (2, vec![param(0), tcx.types.u32], param(1)),\n         \"simd_cast\" => (2, vec![param(0)], param(1)),\n-        \"simd_select\" => (2, vec![param(0), param(1), param(1)], param(1)),\n+        \"simd_select\" |\n+        \"simd_select_bitmask\" => (2, vec![param(0), param(1), param(1)], param(1)),\n         \"simd_reduce_all\" | \"simd_reduce_any\" => (1, vec![param(0)], tcx.types.bool),\n         \"simd_reduce_add_ordered\" | \"simd_reduce_mul_ordered\"\n             => (2, vec![param(0), param(1)], param(1)),"}, {"sha": "24a4b2b1b054f29add489d45cc65a2ccf1da6cdc", "filename": "src/test/codegen/simd-intrinsic-generic-select.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-select.rs?ref=5087aef79202e9f1411a0d0a0a74b0e63643a118", "patch": "@@ -19,12 +19,17 @@\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub struct f32x8(f32, f32, f32, f32, f32, f32, f32, f32);\n+\n #[repr(simd)]\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub struct b8x4(pub i8, pub i8, pub i8, pub i8);\n \n extern \"platform-intrinsic\" {\n     fn simd_select<T, U>(x: T, a: U, b: U) -> U;\n+    fn simd_select_bitmask<T, U>(x: T, a: U, b: U) -> U;\n }\n \n // CHECK-LABEL: @select\n@@ -33,3 +38,10 @@ pub unsafe fn select(m: b8x4, a: f32x4, b: f32x4) -> f32x4 {\n     // CHECK: select <4 x i1>\n     simd_select(m, a, b)\n }\n+\n+// CHECK-LABEL: @select_bitmask\n+#[no_mangle]\n+pub unsafe fn select_bitmask(m: i8, a: f32x8, b: f32x8) -> f32x8 {\n+    // CHECK: select <8 x i1>\n+    simd_select_bitmask(m, a, b)\n+}"}, {"sha": "74b99ca495081ab75f14f158d3cded0a683d343a", "filename": "src/test/run-pass/simd/simd-intrinsic-generic-select.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-select.rs?ref=5087aef79202e9f1411a0d0a0a74b0e63643a118", "patch": "@@ -26,6 +26,10 @@ struct i32x4(pub i32, pub i32, pub i32, pub i32);\n #[derive(Copy, Clone, PartialEq, Debug)]\n struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct u32x8(u32, u32, u32, u32, u32, u32, u32, u32);\n+\n #[repr(simd)]\n #[derive(Copy, Clone, PartialEq, Debug)]\n struct f32x4(pub f32, pub f32, pub f32, pub f32);\n@@ -36,6 +40,7 @@ struct b8x4(pub i8, pub i8, pub i8, pub i8);\n \n extern \"platform-intrinsic\" {\n     fn simd_select<T, U>(x: T, a: U, b: U) -> U;\n+    fn simd_select_bitmask<T, U>(x: T, a: U, b: U) -> U;\n }\n \n fn main() {\n@@ -146,4 +151,29 @@ fn main() {\n         let e = b8x4(t, f, t, t);\n         assert_eq!(r, e);\n     }\n+\n+    unsafe {\n+        let a = u32x8(0, 1, 2, 3, 4, 5, 6, 7);\n+        let b = u32x8(8, 9, 10, 11, 12, 13, 14, 15);\n+\n+        let r: u32x8 = simd_select_bitmask(0u8, a, b);\n+        let e = b;\n+        assert_eq!(r, e);\n+\n+        let r: u32x8 = simd_select_bitmask(0xffu8, a, b);\n+        let e = a;\n+        assert_eq!(r, e);\n+\n+        let r: u32x8 = simd_select_bitmask(0b01010101u8, a, b);\n+        let e = u32x8(0, 9, 2, 11, 4, 13, 6, 15);\n+        assert_eq!(r, e);\n+\n+        let r: u32x8 = simd_select_bitmask(0b10101010u8, a, b);\n+        let e = u32x8(8, 1, 10, 3, 12, 5, 14, 7);\n+        assert_eq!(r, e);\n+\n+        let r: u32x8 = simd_select_bitmask(0b11110000u8, a, b);\n+        let e = u32x8(8, 9, 10, 11, 4, 5, 6, 7);\n+        assert_eq!(r, e);\n+    }\n }"}, {"sha": "2a2d35e7bd9228a11d251881520e44d530c4a566", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-select.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs?ref=5087aef79202e9f1411a0d0a0a74b0e63643a118", "patch": "@@ -33,6 +33,7 @@ struct b8x8(pub i8, pub i8, pub i8, pub i8,\n \n extern \"platform-intrinsic\" {\n     fn simd_select<T, U>(x: T, a: U, b: U) -> U;\n+    fn simd_select_bitmask<T, U>(x: T, a: U, b: U) -> U;\n }\n \n fn main() {\n@@ -52,5 +53,14 @@ fn main() {\n \n         simd_select(z, z, z);\n         //~^ ERROR mask element type is `f32`, expected `i_`\n+\n+        simd_select_bitmask(0u8, x, x);\n+        //~^ ERROR mask length `8` != other vector length `4`\n+\n+        simd_select_bitmask(0.0f32, x, x);\n+        //~^ ERROR `f32` is not an integral type\n+\n+        simd_select_bitmask(\"x\", x, x);\n+        //~^ ERROR `&str` is not an integral type\n     }\n }"}, {"sha": "584f3d539213b8a99ea8cd0fc368ad99df1e2954", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-select.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5087aef79202e9f1411a0d0a0a74b0e63643a118/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.stderr?ref=5087aef79202e9f1411a0d0a0a74b0e63643a118", "patch": "@@ -1,21 +1,39 @@\n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mismatched lengths: mask length `8` != other vector length `4`\n-  --> $DIR/simd-intrinsic-generic-select.rs:47:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:48:9\n    |\n LL |         simd_select(m8, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mask element type is `u32`, expected `i_`\n-  --> $DIR/simd-intrinsic-generic-select.rs:50:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:51:9\n    |\n LL |         simd_select(x, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mask element type is `f32`, expected `i_`\n-  --> $DIR/simd-intrinsic-generic-select.rs:53:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:54:9\n    |\n LL |         simd_select(z, z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: mismatched lengths: mask length `8` != other vector length `4`\n+  --> $DIR/simd-intrinsic-generic-select.rs:57:9\n+   |\n+LL |         simd_select_bitmask(0u8, x, x);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `f32` is not an integral type\n+  --> $DIR/simd-intrinsic-generic-select.rs:60:9\n+   |\n+LL |         simd_select_bitmask(0.0f32, x, x);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `&str` is not an integral type\n+  --> $DIR/simd-intrinsic-generic-select.rs:63:9\n+   |\n+LL |         simd_select_bitmask(\"x\", x, x);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0511`."}]}