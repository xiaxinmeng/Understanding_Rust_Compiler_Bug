{"sha": "d543354d6c56e8962b0c03397d43df3f16b07d03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NDMzNTRkNmM1NmU4OTYyYjBjMDMzOTdkNDNkZjNmMTZiMDdkMDM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-21T13:55:07Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-21T13:55:07Z"}, "message": "Remove unnecessary allocations flagged by lint from rustdoc", "tree": {"sha": "18a4f7d7761538e27d26c01f2cacd64f397297ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a4f7d7761538e27d26c01f2cacd64f397297ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d543354d6c56e8962b0c03397d43df3f16b07d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d543354d6c56e8962b0c03397d43df3f16b07d03", "html_url": "https://github.com/rust-lang/rust/commit/d543354d6c56e8962b0c03397d43df3f16b07d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d543354d6c56e8962b0c03397d43df3f16b07d03/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3e3205144969fe9a9ec724929d641f309a6162", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3e3205144969fe9a9ec724929d641f309a6162", "html_url": "https://github.com/rust-lang/rust/commit/5a3e3205144969fe9a9ec724929d641f309a6162"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "ec31795337bb54a77521fadce50a82ed90fcddc6", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=d543354d6c56e8962b0c03397d43df3f16b07d03", "patch": "@@ -26,7 +26,7 @@ fn doc_metas(\n     attrs: ~[ast::attribute]\n ) -> ~[@ast::meta_item] {\n \n-    let doc_attrs = attr::find_attrs_by_name(attrs, ~\"doc\");\n+    let doc_attrs = attr::find_attrs_by_name(attrs, \"doc\");\n     let doc_metas = do doc_attrs.map |attr| {\n         attr::attr_meta(attr::desugar_doc_attr(attr))\n     };\n@@ -36,7 +36,7 @@ fn doc_metas(\n \n pub fn parse_crate(attrs: ~[ast::attribute]) -> CrateAttrs {\n     let link_metas = attr::find_linkage_metas(attrs);\n-    let name = attr::last_meta_item_value_str_by_name(link_metas, ~\"name\");\n+    let name = attr::last_meta_item_value_str_by_name(link_metas, \"name\");\n \n     CrateAttrs {\n         name: name.map(|s| copy **s)\n@@ -58,7 +58,7 @@ pub fn parse_hidden(attrs: ~[ast::attribute]) -> bool {\n     do doc_metas(attrs).find |meta| {\n         match attr::get_meta_item_list(*meta) {\n             Some(metas) => {\n-                let hiddens = attr::find_meta_items_by_name(metas, ~\"hidden\");\n+                let hiddens = attr::find_meta_items_by_name(metas, \"hidden\");\n                 !hiddens.is_empty()\n             }\n             None => false"}, {"sha": "7464b708045af135d4eec092d4c7c2917d8631c0", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=d543354d6c56e8962b0c03397d43df3f16b07d03", "patch": "@@ -70,12 +70,12 @@ fn opts() -> ~[(getopts::Opt, ~str)] {\n pub fn usage() {\n     use core::io::println;\n \n-    println(~\"Usage: rustdoc [options] <cratefile>\\n\");\n-    println(~\"Options:\\n\");\n+    println(\"Usage: rustdoc [options] <cratefile>\\n\");\n+    println(\"Options:\\n\");\n     for opts().each |opt| {\n         println(fmt!(\"    %s\", opt.second()));\n     }\n-    println(~\"\");\n+    println(\"\");\n }\n \n pub fn default_config(input_crate: &Path) -> Config {\n@@ -227,7 +227,7 @@ pub fn maybe_find_pandoc(\n     };\n \n     let pandoc = do vec::find(possible_pandocs) |pandoc| {\n-        let output = program_output(*pandoc, ~[~\"--version\"]);\n+        let output = program_output(*pandoc, [~\"--version\"]);\n         debug!(\"testing pandoc cmd %s: %?\", *pandoc, output);\n         output.status == 0\n     };"}, {"sha": "c61b38743fd1fbf851e8228fdf4ae3f2d813cdf0", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=d543354d6c56e8962b0c03397d43df3f16b07d03", "patch": "@@ -104,7 +104,7 @@ fn first_sentence(s: ~str) -> Option<~str> {\n     let paras = paragraphs(s);\n     if !paras.is_empty() {\n         let first_para = paras.head();\n-        Some(str::replace(first_sentence_(*first_para), ~\"\\n\", ~\" \"))\n+        Some(str::replace(first_sentence_(*first_para), \"\\n\", \" \"))\n     } else {\n         None\n     }\n@@ -132,7 +132,7 @@ fn first_sentence_(s: &str) -> ~str {\n             str::to_owned(str::slice(s, 0, idx - 1))\n         }\n         _ => {\n-            if str::ends_with(s, ~\".\") {\n+            if str::ends_with(s, \".\") {\n                 str::to_owned(s)\n             } else {\n                 str::to_owned(s)"}, {"sha": "045e916b11006798fee4108330adcb7593667445", "filename": "src/librustdoc/escape_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fescape_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fescape_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fescape_pass.rs?ref=d543354d6c56e8962b0c03397d43df3f16b07d03", "patch": "@@ -20,7 +20,7 @@ pub fn mk_pass() -> Pass {\n }\n \n fn escape(s: &str) -> ~str {\n-    str::replace(s, ~\"\\\\\", ~\"\\\\\\\\\")\n+    str::replace(s, \"\\\\\", \"\\\\\\\\\")\n }\n \n #[test]"}, {"sha": "c7329c4a54b5e2900e262e3960891c68c03300f0", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=d543354d6c56e8962b0c03397d43df3f16b07d03", "patch": "@@ -124,33 +124,33 @@ pub fn pandoc_header_id(header: &str) -> ~str {\n     return header;\n \n     fn remove_formatting(s: &str) -> ~str {\n-        str::replace(s, ~\"`\", ~\"\")\n+        str::replace(s, \"`\", \"\")\n     }\n     fn remove_punctuation(s: &str) -> ~str {\n-        let s = str::replace(s, ~\"<\", ~\"\");\n-        let s = str::replace(s, ~\">\", ~\"\");\n-        let s = str::replace(s, ~\"[\", ~\"\");\n-        let s = str::replace(s, ~\"]\", ~\"\");\n-        let s = str::replace(s, ~\"(\", ~\"\");\n-        let s = str::replace(s, ~\")\", ~\"\");\n-        let s = str::replace(s, ~\"@~\", ~\"\");\n-        let s = str::replace(s, ~\"~\", ~\"\");\n-        let s = str::replace(s, ~\"/\", ~\"\");\n-        let s = str::replace(s, ~\":\", ~\"\");\n-        let s = str::replace(s, ~\"&\", ~\"\");\n-        let s = str::replace(s, ~\"^\", ~\"\");\n-        let s = str::replace(s, ~\",\", ~\"\");\n-        let s = str::replace(s, ~\"'\", ~\"\");\n-        let s = str::replace(s, ~\"+\", ~\"\");\n+        let s = str::replace(s, \"<\", \"\");\n+        let s = str::replace(s, \">\", \"\");\n+        let s = str::replace(s, \"[\", \"\");\n+        let s = str::replace(s, \"]\", \"\");\n+        let s = str::replace(s, \"(\", \"\");\n+        let s = str::replace(s, \")\", \"\");\n+        let s = str::replace(s, \"@~\", \"\");\n+        let s = str::replace(s, \"~\", \"\");\n+        let s = str::replace(s, \"/\", \"\");\n+        let s = str::replace(s, \":\", \"\");\n+        let s = str::replace(s, \"&\", \"\");\n+        let s = str::replace(s, \"^\", \"\");\n+        let s = str::replace(s, \",\", \"\");\n+        let s = str::replace(s, \"'\", \"\");\n+        let s = str::replace(s, \"+\", \"\");\n         return s;\n     }\n     fn replace_with_hyphens(s: &str) -> ~str {\n         // Collapse sequences of whitespace to a single dash\n         // XXX: Hacky implementation here that only covers\n         // one or two spaces.\n         let s = str::trim(s);\n-        let s = str::replace(s, ~\"  \", ~\"-\");\n-        let s = str::replace(s, ~\" \", ~\"-\");\n+        let s = str::replace(s, \"  \", \"-\");\n+        let s = str::replace(s, \" \", \"-\");\n         return s;\n     }\n     // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use"}, {"sha": "4f4bb4194a897769dd3140d69b6559e81e7b632f", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=d543354d6c56e8962b0c03397d43df3f16b07d03", "patch": "@@ -110,7 +110,7 @@ fn make_title(page: doc::Page) -> ~str {\n         }\n     };\n     let title = markdown_pass::header_text(item);\n-    let title = str::replace(title, ~\"`\", ~\"\");\n+    let title = str::replace(title, \"`\", \"\");\n     return title;\n }\n \n@@ -169,7 +169,7 @@ pub fn header_kind(doc: doc::ItemTag) -> ~str {\n }\n \n pub fn header_name(doc: doc::ItemTag) -> ~str {\n-    let fullpath = str::connect(doc.path() + ~[doc.name()], ~\"::\");\n+    let fullpath = str::connect(doc.path() + ~[doc.name()], \"::\");\n     match &doc {\n         &doc::ModTag(_) if doc.id() != syntax::ast::crate_node_id => {\n             fullpath\n@@ -471,7 +471,7 @@ fn write_methods(ctxt: &Ctxt, docs: &[doc::MethodDoc]) {\n }\n \n fn write_method(ctxt: &Ctxt, doc: doc::MethodDoc) {\n-    write_header_(ctxt, H3, header_text_(~\"Method\", doc.name));\n+    write_header_(ctxt, H3, header_text_(\"Method\", doc.name));\n     write_fnlike(\n         ctxt,\n         copy doc.sig,"}, {"sha": "671364f4dbb346f578d1aaef20b8446d27ddea88", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=d543354d6c56e8962b0c03397d43df3f16b07d03", "patch": "@@ -101,7 +101,7 @@ fn pandoc_writer(\n         use core::io::WriterUtil;\n \n         debug!(\"pandoc cmd: %s\", pandoc_cmd);\n-        debug!(\"pandoc args: %s\", str::connect(pandoc_args, ~\" \"));\n+        debug!(\"pandoc args: %s\", str::connect(pandoc_args, \" \"));\n \n         let pipe_in = os::pipe();\n         let pipe_out = os::pipe();\n@@ -198,7 +198,7 @@ pub fn make_filename(\n             }\n           }\n           doc::ItemPage(doc) => {\n-            str::connect(doc.path() + ~[doc.name()], ~\"_\")\n+            str::connect(doc.path() + ~[doc.name()], \"_\")\n           }\n         }\n     };\n@@ -213,7 +213,7 @@ pub fn make_filename(\n fn write_file(path: &Path, s: ~str) {\n     use core::io::WriterUtil;\n \n-    match io::file_writer(path, ~[io::Create, io::Truncate]) {\n+    match io::file_writer(path, [io::Create, io::Truncate]) {\n       result::Ok(writer) => {\n         writer.write_str(s);\n       }"}, {"sha": "afd29ab72486759b8f4aa96a1f786697a8679156", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=d543354d6c56e8962b0c03397d43df3f16b07d03", "patch": "@@ -149,7 +149,7 @@ fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n }\n \n fn parse_header(line: ~str) -> Option<~str> {\n-    if str::starts_with(line, ~\"# \") {\n+    if str::starts_with(line, \"# \") {\n         Some(str::slice(line, 2u, str::len(line)).to_owned())\n     } else {\n         None"}, {"sha": "1e3e4acce050c883e237e3e60be1835c7b07c581", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d543354d6c56e8962b0c03397d43df3f16b07d03/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=d543354d6c56e8962b0c03397d43df3f16b07d03", "patch": "@@ -82,7 +82,7 @@ fn unindent(s: &str) -> ~str {\n                 str::slice(*line, min_indent, str::len(*line)).to_owned()\n             }\n         };\n-        str::connect(unindented, ~\"\\n\")\n+        str::connect(unindented, \"\\n\")\n     } else {\n         s.to_str()\n     }"}]}