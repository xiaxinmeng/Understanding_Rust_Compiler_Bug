{"sha": "48a376da18b27c787818eec18ad26ba96ebdff67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YTM3NmRhMThiMjdjNzg3ODE4ZWVjMThhZDI2YmE5NmViZGZmNjc=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T17:39:58Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T17:39:58Z"}, "message": "rustc: Add long diagnostics for E0302", "tree": {"sha": "32359905ed0794083a37c21c4be9785c2b3df897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32359905ed0794083a37c21c4be9785c2b3df897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48a376da18b27c787818eec18ad26ba96ebdff67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48a376da18b27c787818eec18ad26ba96ebdff67", "html_url": "https://github.com/rust-lang/rust/commit/48a376da18b27c787818eec18ad26ba96ebdff67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48a376da18b27c787818eec18ad26ba96ebdff67/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab1723b6704f31390a55a160955240aef817c8b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1723b6704f31390a55a160955240aef817c8b3", "html_url": "https://github.com/rust-lang/rust/commit/ab1723b6704f31390a55a160955240aef817c8b3"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "7f77c0fceea1f8c67d9fc6ed86b2ea08240d9d71", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48a376da18b27c787818eec18ad26ba96ebdff67/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48a376da18b27c787818eec18ad26ba96ebdff67/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=48a376da18b27c787818eec18ad26ba96ebdff67", "patch": "@@ -153,6 +153,20 @@ match Some(()) {\n }\n \"##,\n \n+E0302: r##\"\n+Assignments are not allowed in pattern guards, because matching cannot have\n+side effects. Side effects could alter the matched object or the environment\n+on which the match depends in such a way, that the match would not be\n+exhaustive. For instance, the following would not match any arm if assignments\n+were allowed:\n+\n+match Some(()) {\n+    None => { },\n+    option if { option = None; false } { },\n+    Some(_) => { } // When the previous match failed, the option became `None`.\n+}\n+\"##,\n+\n E0303: r##\"\n In certain cases it is possible for sub-bindings to violate memory safety.\n Updates to the borrow checker in a future version of Rust may remove this\n@@ -238,7 +252,6 @@ register_diagnostics! {\n     E0298, // mismatched types between arms\n     E0299, // mismatched types between arms\n     E0300, // unexpanded macro\n-    E0302, // cannot assign in a pattern guard\n     E0304, // expected signed integer constant\n     E0305, // expected constant\n     E0306, // expected positive integer for repeat count"}]}