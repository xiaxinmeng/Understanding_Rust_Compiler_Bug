{"sha": "2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOGNiY2NhNTQzYzlhZWI3ZWFkNmJlYmQ4OTUxY2M5OWMzNmM2N2Q=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-06T04:55:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-06T04:55:00Z"}, "message": "Rollup merge of #65105 - Mark-Simulacrum:split-librustc, r=nikomatsakis\n\nSplit out some passes from librustc\n\nThis is just moving them out to librustc_passes -- I've not measured compile time or run time. I don't expect any significant impact, but this seems prudent regardless.", "tree": {"sha": "152637bcf32750fe5bf95b8d57b6302f063b74fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/152637bcf32750fe5bf95b8d57b6302f063b74fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdmXOkCRBK7hj4Ov3rIwAAdHIIAFj8IZFOfmbUpJJdJjFsKePc\n355UmagkYaN7mvo3JSQ4nAZo5N2If7KYPETKyv8hNCztxjY7hJN7+gY7aqvmyuXD\niprQrsHgKkpjLG7ehf1IY/LVXkVlXopXgFc0VmEPC+iEKRhWD1mH44UKow9iegbb\nteGBDmWjMeL0v108P+ctUdo9phco1nQWPov4NZLw/9cwfsSGfwIH6RdSUeIKP2fK\n7q05sM/dartvIC+yxHlwLm/y/Ya8xkoLJ2fW7BLHUJPp7g5NnwinpxT65we7qH1i\nwTi/KfNSoEnHzi+SHsI21Oxi0KS36WcfxJybMxXaaGnnjPyECQm2qp8iV0ZX1aU=\n=rB31\n-----END PGP SIGNATURE-----\n", "payload": "tree 152637bcf32750fe5bf95b8d57b6302f063b74fd\nparent 7739f173eba6cfea7008eeb5794891697970985f\nparent 7c3f65b3c4691ff0df270505ebfab89f171c0d28\nauthor Tyler Mandry <tmandry@gmail.com> 1570337700 -0700\ncommitter GitHub <noreply@github.com> 1570337700 -0700\n\nRollup merge of #65105 - Mark-Simulacrum:split-librustc, r=nikomatsakis\n\nSplit out some passes from librustc\n\nThis is just moving them out to librustc_passes -- I've not measured compile time or run time. I don't expect any significant impact, but this seems prudent regardless.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "html_url": "https://github.com/rust-lang/rust/commit/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7739f173eba6cfea7008eeb5794891697970985f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7739f173eba6cfea7008eeb5794891697970985f", "html_url": "https://github.com/rust-lang/rust/commit/7739f173eba6cfea7008eeb5794891697970985f"}, {"sha": "7c3f65b3c4691ff0df270505ebfab89f171c0d28", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3f65b3c4691ff0df270505ebfab89f171c0d28", "html_url": "https://github.com/rust-lang/rust/commit/7c3f65b3c4691ff0df270505ebfab89f171c0d28"}], "stats": {"total": 468, "additions": 239, "deletions": 229}, "files": [{"sha": "512dc5fd887c62a2d5a1534642894cbb07ed4184", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -3613,6 +3613,8 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_index\",\n+ \"rustc_target\",\n  \"syntax\",\n  \"syntax_pos\",\n ]"}, {"sha": "66c51000066b2d35e1b89d41b07ad92b0262df4e", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -466,66 +466,6 @@ fn main() {\n ```\n \"##,\n \n-// This shouldn't really ever trigger since the repeated value error comes first\n-E0136: r##\"\n-A binary can only have one entry point, and by default that entry point is the\n-function `main()`. If there are multiple such functions, please rename one.\n-\"##,\n-\n-E0137: r##\"\n-More than one function was declared with the `#[main]` attribute.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0137\n-#![feature(main)]\n-\n-#[main]\n-fn foo() {}\n-\n-#[main]\n-fn f() {} // error: multiple functions with a `#[main]` attribute\n-```\n-\n-This error indicates that the compiler found multiple functions with the\n-`#[main]` attribute. This is an error because there must be a unique entry\n-point into a Rust program. Example:\n-\n-```\n-#![feature(main)]\n-\n-#[main]\n-fn f() {} // ok!\n-```\n-\"##,\n-\n-E0138: r##\"\n-More than one function was declared with the `#[start]` attribute.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0138\n-#![feature(start)]\n-\n-#[start]\n-fn foo(argc: isize, argv: *const *const u8) -> isize {}\n-\n-#[start]\n-fn f(argc: isize, argv: *const *const u8) -> isize {}\n-// error: multiple 'start' functions\n-```\n-\n-This error indicates that the compiler found multiple functions with the\n-`#[start]` attribute. This is an error because there must be a unique entry\n-point into a Rust program. Example:\n-\n-```\n-#![feature(start)]\n-\n-#[start]\n-fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n-```\n-\"##,\n \n E0139: r##\"\n #### Note: this error code is no longer emitted by the compiler.\n@@ -1626,33 +1566,6 @@ It is not possible to use stability attributes outside of the standard library.\n Also, for now, it is not possible to write deprecation messages either.\n \"##,\n \n-E0512: r##\"\n-Transmute with two differently sized types was attempted. Erroneous code\n-example:\n-\n-```compile_fail,E0512\n-fn takes_u8(_: u8) {}\n-\n-fn main() {\n-    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n-    // error: cannot transmute between types of different sizes,\n-    //        or dependently-sized types\n-}\n-```\n-\n-Please use types with same size or use the expected type directly. Example:\n-\n-```\n-fn takes_u8(_: u8) {}\n-\n-fn main() {\n-    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n-    // or:\n-    unsafe { takes_u8(0u8); } // ok!\n-}\n-```\n-\"##,\n-\n E0517: r##\"\n This error indicates that a `#[repr(..)]` attribute was placed on an\n unsupported item.\n@@ -1847,84 +1760,6 @@ See [RFC 1522] for more details.\n [RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n \"##,\n \n-E0591: r##\"\n-Per [RFC 401][rfc401], if you have a function declaration `foo`:\n-\n-```\n-// For the purposes of this explanation, all of these\n-// different kinds of `fn` declarations are equivalent:\n-struct S;\n-fn foo(x: S) { /* ... */ }\n-# #[cfg(for_demonstration_only)]\n-extern \"C\" { fn foo(x: S); }\n-# #[cfg(for_demonstration_only)]\n-impl S { fn foo(self) { /* ... */ } }\n-```\n-\n-the type of `foo` is **not** `fn(S)`, as one might expect.\n-Rather, it is a unique, zero-sized marker type written here as `typeof(foo)`.\n-However, `typeof(foo)` can be _coerced_ to a function pointer `fn(S)`,\n-so you rarely notice this:\n-\n-```\n-# struct S;\n-# fn foo(_: S) {}\n-let x: fn(S) = foo; // OK, coerces\n-```\n-\n-The reason that this matter is that the type `fn(S)` is not specific to\n-any particular function: it's a function _pointer_. So calling `x()` results\n-in a virtual call, whereas `foo()` is statically dispatched, because the type\n-of `foo` tells us precisely what function is being called.\n-\n-As noted above, coercions mean that most code doesn't have to be\n-concerned with this distinction. However, you can tell the difference\n-when using **transmute** to convert a fn item into a fn pointer.\n-\n-This is sometimes done as part of an FFI:\n-\n-```compile_fail,E0591\n-extern \"C\" fn foo(userdata: Box<i32>) {\n-    /* ... */\n-}\n-\n-# fn callback(_: extern \"C\" fn(*mut i32)) {}\n-# use std::mem::transmute;\n-# unsafe {\n-let f: extern \"C\" fn(*mut i32) = transmute(foo);\n-callback(f);\n-# }\n-```\n-\n-Here, transmute is being used to convert the types of the fn arguments.\n-This pattern is incorrect because, because the type of `foo` is a function\n-**item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n-is a function pointer, which is not zero-sized.\n-This pattern should be rewritten. There are a few possible ways to do this:\n-\n-- change the original fn declaration to match the expected signature,\n-  and do the cast in the fn body (the preferred option)\n-- cast the fn item fo a fn pointer before calling transmute, as shown here:\n-\n-    ```\n-    # extern \"C\" fn foo(_: Box<i32>) {}\n-    # use std::mem::transmute;\n-    # unsafe {\n-    let f: extern \"C\" fn(*mut i32) = transmute(foo as extern \"C\" fn(_));\n-    let f: extern \"C\" fn(*mut i32) = transmute(foo as usize); // works too\n-    # }\n-    ```\n-\n-The same applies to transmutes to `*mut fn()`, which were observed in practice.\n-Note though that use of this type is generally incorrect.\n-The intention is typically to describe a function pointer, but just `fn()`\n-alone suffices for that. `*mut fn()` is a pointer to a fn pointer.\n-(Since these values are typically just passed to C code, however, this rarely\n-makes a difference in practice.)\n-\n-[rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n-\"##,\n-\n E0593: r##\"\n You tried to supply an `Fn`-based type with an incorrect number of arguments\n than what was expected.\n@@ -1941,21 +1776,6 @@ fn main() {\n ```\n \"##,\n \n-E0601: r##\"\n-No `main` function was found in a binary crate. To fix this error, add a\n-`main` function. For example:\n-\n-```\n-fn main() {\n-    // Your program will start here.\n-    println!(\"Hello world!\");\n-}\n-```\n-\n-If you don't know the basics of Rust, you can go look to the Rust Book to get\n-started: https://doc.rust-lang.org/book/\n-\"##,\n-\n E0602: r##\"\n An unknown lint was used on the command line.\n "}, {"sha": "9c3cb3af9e79c9e61f493a065f88bbd08c8ca514", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -101,16 +101,12 @@ pub mod lint;\n pub mod middle {\n     pub mod expr_use_visitor;\n     pub mod cstore;\n-    pub mod dead;\n     pub mod dependency_format;\n     pub mod diagnostic_items;\n-    pub mod entry;\n     pub mod exported_symbols;\n     pub mod free_region;\n-    pub mod intrinsicck;\n     pub mod lib_features;\n     pub mod lang_items;\n-    pub mod liveness;\n     pub mod mem_categorization;\n     pub mod privacy;\n     pub mod reachable;"}, {"sha": "870f804ed4478e62d32584fcc0c2717d6e3b8e9f", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -780,13 +780,10 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     ty::provide(providers);\n     traits::provide(providers);\n     stability::provide(providers);\n-    middle::intrinsicck::provide(providers);\n-    middle::liveness::provide(providers);\n     reachable::provide(providers);\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);\n-    middle::entry::provide(providers);\n     cstore::provide(providers);\n     lint::provide(providers);\n     rustc_lint::provide(providers);\n@@ -892,7 +889,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     time(sess, \"misc checking 1\", || {\n         parallel!({\n             entry_point = time(sess, \"looking for entry point\", || {\n-                middle::entry::find_entry_point(tcx)\n+                rustc_passes::entry::find_entry_point(tcx)\n             });\n \n             time(sess, \"looking for plugin registrar\", || {\n@@ -973,7 +970,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n                     tcx.ensure().check_private_in_public(LOCAL_CRATE);\n                 });\n             }, {\n-                time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n+                time(sess, \"death checking\", || rustc_passes::dead::check_crate(tcx));\n             },  {\n                 time(sess, \"unused lib feature checking\", || {\n                     stability::check_unused_or_stable_features(tcx)"}, {"sha": "9d29a230314437f8e6b887d91c901551ebffdd78", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -15,3 +15,5 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_target = { path = \"../librustc_target\" }\n+rustc_index = { path = \"../librustc_index\" }"}, {"sha": "f2aef2c12c7df1b4d3cfffb223247ea3d83265b4", "filename": "src/librustc_passes/dead.rs", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -2,18 +2,18 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use crate::hir::Node;\n-use crate::hir::{self, PatKind, TyKind};\n-use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-\n-use crate::hir::def::{CtorOf, Res, DefKind};\n-use crate::hir::CodegenFnAttrFlags;\n-use crate::hir::def_id::{DefId, LOCAL_CRATE};\n-use crate::lint;\n-use crate::middle::privacy;\n-use crate::ty::{self, DefIdTree, TyCtxt};\n-use crate::util::nodemap::FxHashSet;\n+use rustc::hir::Node;\n+use rustc::hir::{self, PatKind, TyKind};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+\n+use rustc::hir::def::{CtorOf, Res, DefKind};\n+use rustc::hir::CodegenFnAttrFlags;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::lint;\n+use rustc::middle::privacy;\n+use rustc::ty::{self, DefIdTree, TyCtxt};\n+use rustc::util::nodemap::FxHashSet;\n \n use rustc_data_structures::fx::FxHashMap;\n ", "previous_filename": "src/librustc/middle/dead.rs"}, {"sha": "bf68807a0c29b1ffd24069fad760e9163edb8b3f", "filename": "src/librustc_passes/entry.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -1,15 +1,15 @@\n-use crate::hir::map as hir_map;\n-use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n-use crate::session::{config, Session};\n-use crate::session::config::EntryFnType;\n+use rustc::hir::map as hir_map;\n+use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n+use rustc::session::{config, Session};\n+use rustc::session::config::EntryFnType;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n use syntax::symbol::sym;\n use syntax_pos::Span;\n-use crate::hir::{HirId, Item, ItemKind, ImplItem, TraitItem};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-use crate::ty::TyCtxt;\n-use crate::ty::query::Providers;\n+use rustc::hir::{HirId, Item, ItemKind, ImplItem, TraitItem};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n \n struct EntryContext<'a, 'tcx> {\n     session: &'a Session,", "previous_filename": "src/librustc/middle/entry.rs"}, {"sha": "1c61eb35497d7ab26adbdc83533d794d2b93cadf", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -319,6 +319,188 @@ async fn foo() {}\n \n Switch to the Rust 2018 edition to use `async fn`.\n \"##,\n+\n+// This shouldn't really ever trigger since the repeated value error comes first\n+E0136: r##\"\n+A binary can only have one entry point, and by default that entry point is the\n+function `main()`. If there are multiple such functions, please rename one.\n+\"##,\n+\n+E0137: r##\"\n+More than one function was declared with the `#[main]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0137\n+#![feature(main)]\n+\n+#[main]\n+fn foo() {}\n+\n+#[main]\n+fn f() {} // error: multiple functions with a `#[main]` attribute\n+```\n+\n+This error indicates that the compiler found multiple functions with the\n+`#[main]` attribute. This is an error because there must be a unique entry\n+point into a Rust program. Example:\n+\n+```\n+#![feature(main)]\n+\n+#[main]\n+fn f() {} // ok!\n+```\n+\"##,\n+\n+E0138: r##\"\n+More than one function was declared with the `#[start]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0138\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize {}\n+\n+#[start]\n+fn f(argc: isize, argv: *const *const u8) -> isize {}\n+// error: multiple 'start' functions\n+```\n+\n+This error indicates that the compiler found multiple functions with the\n+`#[start]` attribute. This is an error because there must be a unique entry\n+point into a Rust program. Example:\n+\n+```\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n+```\n+\"##,\n+\n+E0601: r##\"\n+No `main` function was found in a binary crate. To fix this error, add a\n+`main` function. For example:\n+\n+```\n+fn main() {\n+    // Your program will start here.\n+    println!(\"Hello world!\");\n+}\n+```\n+\n+If you don't know the basics of Rust, you can go look to the Rust Book to get\n+started: https://doc.rust-lang.org/book/\n+\"##,\n+\n+E0591: r##\"\n+Per [RFC 401][rfc401], if you have a function declaration `foo`:\n+\n+```\n+// For the purposes of this explanation, all of these\n+// different kinds of `fn` declarations are equivalent:\n+struct S;\n+fn foo(x: S) { /* ... */ }\n+# #[cfg(for_demonstration_only)]\n+extern \"C\" { fn foo(x: S); }\n+# #[cfg(for_demonstration_only)]\n+impl S { fn foo(self) { /* ... */ } }\n+```\n+\n+the type of `foo` is **not** `fn(S)`, as one might expect.\n+Rather, it is a unique, zero-sized marker type written here as `typeof(foo)`.\n+However, `typeof(foo)` can be _coerced_ to a function pointer `fn(S)`,\n+so you rarely notice this:\n+\n+```\n+# struct S;\n+# fn foo(_: S) {}\n+let x: fn(S) = foo; // OK, coerces\n+```\n+\n+The reason that this matter is that the type `fn(S)` is not specific to\n+any particular function: it's a function _pointer_. So calling `x()` results\n+in a virtual call, whereas `foo()` is statically dispatched, because the type\n+of `foo` tells us precisely what function is being called.\n+\n+As noted above, coercions mean that most code doesn't have to be\n+concerned with this distinction. However, you can tell the difference\n+when using **transmute** to convert a fn item into a fn pointer.\n+\n+This is sometimes done as part of an FFI:\n+\n+```compile_fail,E0591\n+extern \"C\" fn foo(userdata: Box<i32>) {\n+    /* ... */\n+}\n+\n+# fn callback(_: extern \"C\" fn(*mut i32)) {}\n+# use std::mem::transmute;\n+# unsafe {\n+let f: extern \"C\" fn(*mut i32) = transmute(foo);\n+callback(f);\n+# }\n+```\n+\n+Here, transmute is being used to convert the types of the fn arguments.\n+This pattern is incorrect because, because the type of `foo` is a function\n+**item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n+is a function pointer, which is not zero-sized.\n+This pattern should be rewritten. There are a few possible ways to do this:\n+\n+- change the original fn declaration to match the expected signature,\n+  and do the cast in the fn body (the preferred option)\n+- cast the fn item fo a fn pointer before calling transmute, as shown here:\n+\n+    ```\n+    # extern \"C\" fn foo(_: Box<i32>) {}\n+    # use std::mem::transmute;\n+    # unsafe {\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo as extern \"C\" fn(_));\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo as usize); // works too\n+    # }\n+    ```\n+\n+The same applies to transmutes to `*mut fn()`, which were observed in practice.\n+Note though that use of this type is generally incorrect.\n+The intention is typically to describe a function pointer, but just `fn()`\n+alone suffices for that. `*mut fn()` is a pointer to a fn pointer.\n+(Since these values are typically just passed to C code, however, this rarely\n+makes a difference in practice.)\n+\n+[rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+\"##,\n+\n+E0512: r##\"\n+Transmute with two differently sized types was attempted. Erroneous code\n+example:\n+\n+```compile_fail,E0512\n+fn takes_u8(_: u8) {}\n+\n+fn main() {\n+    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n+    // error: cannot transmute between types of different sizes,\n+    //        or dependently-sized types\n+}\n+```\n+\n+Please use types with same size or use the expected type directly. Example:\n+\n+```\n+fn takes_u8(_: u8) {}\n+\n+fn main() {\n+    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n+    // or:\n+    unsafe { takes_u8(0u8); } // ok!\n+}\n+```\n+\"##,\n+\n ;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target"}, {"sha": "91a7e9f5d7fcadbaf8eea16c67cc91676fd3e8f0", "filename": "src/librustc_passes/intrinsicck.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -1,14 +1,14 @@\n-use crate::hir::def::{Res, DefKind};\n-use crate::hir::def_id::DefId;\n-use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n-use crate::ty::query::Providers;\n+use rustc::hir::def::{Res, DefKind};\n+use rustc::hir::def_id::DefId;\n+use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n+use rustc::ty::query::Providers;\n \n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_index::vec::Idx;\n use syntax_pos::{Span, sym};\n-use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use crate::hir;\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use rustc::hir;\n \n fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(", "previous_filename": "src/librustc/middle/intrinsicck.rs"}, {"sha": "db59d8e101f77df07c0655f3e7bc5c761196cd7a", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -13,6 +13,10 @@\n \n #[macro_use]\n extern crate rustc;\n+#[macro_use]\n+extern crate log;\n+#[macro_use]\n+extern crate syntax;\n \n use rustc::ty::query::Providers;\n \n@@ -22,7 +26,14 @@ pub mod ast_validation;\n pub mod hir_stats;\n pub mod layout_test;\n pub mod loops;\n+pub mod dead;\n+pub mod entry;\n+mod liveness;\n+mod intrinsicck;\n \n pub fn provide(providers: &mut Providers<'_>) {\n+    entry::provide(providers);\n     loops::provide(providers);\n+    liveness::provide(providers);\n+    intrinsicck::provide(providers);\n }"}, {"sha": "fb06808619f66f096719656fc0fc507a061a9d03", "filename": "src/librustc_passes/liveness.rs", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=2c8cbcca543c9aeb7ead6bebd8951cc99c36c67d", "patch": "@@ -96,17 +96,17 @@\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use crate::hir;\n-use crate::hir::{Expr, HirId};\n-use crate::hir::def::*;\n-use crate::hir::def_id::DefId;\n-use crate::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n-use crate::hir::Node;\n-use crate::hir::ptr::P;\n-use crate::ty::{self, TyCtxt};\n-use crate::ty::query::Providers;\n-use crate::lint;\n-use crate::util::nodemap::{HirIdMap, HirIdSet};\n+use rustc::hir;\n+use rustc::hir::{Expr, HirId};\n+use rustc::hir::def::*;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n+use rustc::hir::Node;\n+use rustc::hir::ptr::P;\n+use rustc::ty::{self, TyCtxt};\n+use rustc::ty::query::Providers;\n+use rustc::lint;\n+use rustc::util::nodemap::{HirIdMap, HirIdSet};\n \n use errors::Applicability;\n use rustc_data_structures::fx::FxIndexMap;\n@@ -373,7 +373,7 @@ fn visit_fn<'tcx>(\n \n     for param in &body.params {\n         let is_shorthand = match param.pat.kind {\n-            crate::hir::PatKind::Struct(..) => true,\n+            rustc::hir::PatKind::Struct(..) => true,\n             _ => false,\n         };\n         param.pat.each_binding(|_bm, hir_id, _x, ident| {\n@@ -411,7 +411,7 @@ fn add_from_pat(ir: &mut IrMaps<'_>, pat: &P<hir::Pat>) {\n     let mut pats = VecDeque::new();\n     pats.push_back(pat);\n     while let Some(pat) = pats.pop_front() {\n-        use crate::hir::PatKind::*;\n+        use rustc::hir::PatKind::*;\n         match &pat.kind {\n             Binding(.., inner_pat) => {\n                 pats.extend(inner_pat.iter());", "previous_filename": "src/librustc/middle/liveness.rs"}]}