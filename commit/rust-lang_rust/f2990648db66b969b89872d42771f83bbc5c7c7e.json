{"sha": "f2990648db66b969b89872d42771f83bbc5c7c7e", "node_id": "C_kwDOAAsO6NoAKGYyOTkwNjQ4ZGI2NmI5NjliODk4NzJkNDI3NzFmODNiYmM1YzdjN2U", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-06-25T19:31:14Z"}, "committer": {"name": "Christopher Hotchkiss", "email": "christopher.hotchkiss@gmail.com", "date": "2022-07-30T15:29:06Z"}, "message": "Change `Ipv4Addr::is_global` to be in line with `Ipv6Addr::is_global`\n\nRebasing off master", "tree": {"sha": "831d5876d8003704c82b69c9764b0565736f8018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/831d5876d8003704c82b69c9764b0565736f8018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2990648db66b969b89872d42771f83bbc5c7c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2990648db66b969b89872d42771f83bbc5c7c7e", "html_url": "https://github.com/rust-lang/rust/commit/f2990648db66b969b89872d42771f83bbc5c7c7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2990648db66b969b89872d42771f83bbc5c7c7e/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chotchki", "id": 226950, "node_id": "MDQ6VXNlcjIyNjk1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/226950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chotchki", "html_url": "https://github.com/chotchki", "followers_url": "https://api.github.com/users/chotchki/followers", "following_url": "https://api.github.com/users/chotchki/following{/other_user}", "gists_url": "https://api.github.com/users/chotchki/gists{/gist_id}", "starred_url": "https://api.github.com/users/chotchki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chotchki/subscriptions", "organizations_url": "https://api.github.com/users/chotchki/orgs", "repos_url": "https://api.github.com/users/chotchki/repos", "events_url": "https://api.github.com/users/chotchki/events{/privacy}", "received_events_url": "https://api.github.com/users/chotchki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d8805a47f9b670403b43f056a96d3d4cc4fdc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6", "html_url": "https://github.com/rust-lang/rust/commit/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6"}], "stats": {"total": 119, "additions": 60, "deletions": 59}, "files": [{"sha": "7bc1ad4b05ba6dc8e7bdc73b3556402b11f9f32f", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 60, "deletions": 59, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/f2990648db66b969b89872d42771f83bbc5c7c7e/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2990648db66b969b89872d42771f83bbc5c7c7e/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=f2990648db66b969b89872d42771f83bbc5c7c7e", "patch": "@@ -631,25 +631,31 @@ impl Ipv4Addr {\n         matches!(self.octets(), [169, 254, ..])\n     }\n \n-    /// Returns [`true`] if the address appears to be globally routable.\n-    /// See [iana-ipv4-special-registry][ipv4-sr].\n+    /// Returns [`true`] if the address appears to be globally reachable\n+    /// as specified by the [IANA IPv4 Special-Purpose Address Registry].\n+    /// Whether or not an address is practically reachable will depend on your network configuration.\n+    ///\n+    /// Most IPv4 addresses are globally reachable;\n+    /// unless they are specifically defined as *not* globally reachable.\n+    ///\n+    /// Non-exhaustive list of notable addresses that are not globally reachable:\n     ///\n-    /// The following return [`false`]:\n+    /// - The [unspecified address] ([`is_unspecified`](Ipv4Addr::is_unspecified))\n+    /// - Addresses reserved for private use ([`is_private`](Ipv4Addr::is_private))\n+    /// - Addresses in the shared address space ([`is_shared`](Ipv4Addr::is_shared))\n+    /// - Loopback addresses ([`is_loopback`](Ipv4Addr::is_loopback))\n+    /// - Link-local addresses ([`is_link_local`](Ipv4Addr::is_link_local))\n+    /// - Addresses reserved for documentation ([`is_documentation`](Ipv4Addr::is_documentation))\n+    /// - Addresses reserved for benchmarking ([`is_benchmarking`](Ipv4Addr::is_benchmarking))\n+    /// - Reserved addresses ([`is_reserved`](Ipv4Addr::is_reserved))\n+    /// - The [broadcast address] ([`is_broadcast`](Ipv4Addr::is_broadcast))\n     ///\n-    /// - private addresses (see [`Ipv4Addr::is_private()`])\n-    /// - the loopback address (see [`Ipv4Addr::is_loopback()`])\n-    /// - the link-local address (see [`Ipv4Addr::is_link_local()`])\n-    /// - the broadcast address (see [`Ipv4Addr::is_broadcast()`])\n-    /// - addresses used for documentation (see [`Ipv4Addr::is_documentation()`])\n-    /// - the unspecified address (see [`Ipv4Addr::is_unspecified()`]), and the whole\n-    ///   `0.0.0.0/8` block\n-    /// - addresses reserved for future protocols, except\n-    /// `192.0.0.9/32` and `192.0.0.10/32` which are globally routable\n-    /// - addresses reserved for future use (see [`Ipv4Addr::is_reserved()`]\n-    /// - addresses reserved for networking devices benchmarking (see\n-    /// [`Ipv4Addr::is_benchmarking()`])\n+    /// For the complete overview of which addresses are globally reachable, see the table at the [IANA IPv4 Special-Purpose Address Registry].\n     ///\n-    /// [ipv4-sr]: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n+    /// [IANA IPv4 Special-Purpose Address Registry]: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n+    /// [unspecified address]: Ipv4Addr::UNSPECIFIED\n+    /// [broadcast address]: Ipv4Addr::BROADCAST\n+\n     ///\n     /// # Examples\n     ///\n@@ -658,71 +664,66 @@ impl Ipv4Addr {\n     ///\n     /// use std::net::Ipv4Addr;\n     ///\n-    /// // private addresses are not global\n+    /// // Most IPv4 addresses are globally reachable:\n+    /// assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n+    ///\n+    /// // However some addresses have been assigned a special meaning\n+    /// // that makes them not globally reachable. Some examples are:\n+    ///\n+    /// // The unspecified address (`0.0.0.0`)\n+    /// assert_eq!(Ipv4Addr::UNSPECIFIED.is_global(), false);\n+    ///\n+    /// // Addresses reserved for private use (`10.0.0.0/8`, `172.16.0.0/12`, 192.168.0.0/16)\n     /// assert_eq!(Ipv4Addr::new(10, 254, 0, 0).is_global(), false);\n     /// assert_eq!(Ipv4Addr::new(192, 168, 10, 65).is_global(), false);\n     /// assert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_global(), false);\n     ///\n-    /// // the 0.0.0.0/8 block is not global\n-    /// assert_eq!(Ipv4Addr::new(0, 1, 2, 3).is_global(), false);\n-    /// // in particular, the unspecified address is not global\n-    /// assert_eq!(Ipv4Addr::new(0, 0, 0, 0).is_global(), false);\n+    /// // Addresses in the shared address space (`100.64.0.0/10`)\n+    /// assert_eq!(Ipv4Addr::new(100, 100, 0, 0).is_global(), false);\n     ///\n-    /// // the loopback address is not global\n-    /// assert_eq!(Ipv4Addr::new(127, 0, 0, 1).is_global(), false);\n+    /// // The loopback addresses (`127.0.0.0/8`)\n+    /// assert_eq!(Ipv4Addr::LOCALHOST.is_global(), false);\n     ///\n-    /// // link local addresses are not global\n+    /// // Link-local addresses (`169.254.0.0/16`)\n     /// assert_eq!(Ipv4Addr::new(169, 254, 45, 1).is_global(), false);\n     ///\n-    /// // the broadcast address is not global\n-    /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_global(), false);\n-    ///\n-    /// // the address space designated for documentation is not global\n+    /// // Addresses reserved for documentation (`192.0.2.0/24`, `198.51.100.0/24`, `203.0.113.0/24`)\n     /// assert_eq!(Ipv4Addr::new(192, 0, 2, 255).is_global(), false);\n     /// assert_eq!(Ipv4Addr::new(198, 51, 100, 65).is_global(), false);\n     /// assert_eq!(Ipv4Addr::new(203, 0, 113, 6).is_global(), false);\n     ///\n-    /// // shared addresses are not global\n-    /// assert_eq!(Ipv4Addr::new(100, 100, 0, 0).is_global(), false);\n-    ///\n-    /// // addresses reserved for protocol assignment are not global\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 0).is_global(), false);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 255).is_global(), false);\n+    /// // Addresses reserved for benchmarking (`198.18.0.0/15`)\n+    /// assert_eq!(Ipv4Addr::new(198, 18, 0, 0).is_global(), false);\n     ///\n-    /// // addresses reserved for future use are not global\n+    /// // Reserved addresses (`240.0.0.0/4`)\n     /// assert_eq!(Ipv4Addr::new(250, 10, 20, 30).is_global(), false);\n     ///\n-    /// // addresses reserved for network devices benchmarking are not global\n-    /// assert_eq!(Ipv4Addr::new(198, 18, 0, 0).is_global(), false);\n+    /// // The broadcast address (`255.255.255.255`)\n+    /// assert_eq!(Ipv4Addr::BROADCAST.is_global(), false);\n     ///\n-    /// // All the other addresses are global\n-    /// assert_eq!(Ipv4Addr::new(1, 1, 1, 1).is_global(), true);\n-    /// assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n+    /// // For a complete overview see the IANA IPv4 Special-Purpose Address Registry.\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n-        // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n-        // globally routable addresses in the 192.0.0.0/24 range.\n-        if u32::from_be_bytes(self.octets()) == 0xc0000009\n-            || u32::from_be_bytes(self.octets()) == 0xc000000a\n-        {\n-            return true;\n-        }\n-        !self.is_private()\n-            && !self.is_loopback()\n-            && !self.is_link_local()\n-            && !self.is_broadcast()\n-            && !self.is_documentation()\n-            && !self.is_shared()\n-            // addresses reserved for future protocols (`192.0.0.0/24`)\n-            && !(self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0)\n-            && !self.is_reserved()\n-            && !self.is_benchmarking()\n-            // Make sure the address is not in 0.0.0.0/8\n-            && self.octets()[0] != 0\n+        !(self.octets()[0] == 0 // \"This network\"\n+            || self.is_private()\n+            || self.is_shared()\n+            || self.is_loopback()\n+            || self.is_link_local()\n+            || (self.is_ietf_protocol_assignment()\n+                && !(\n+                    // Port Control Protocol Anycast (`192.0.0.9`)\n+                    u32::from_be_bytes(self.octets()) == 0xc0000009\n+                    // Traversal Using Relays around NAT Anycast (`192.0.0.10`)\n+                    || u32::from_be_bytes(self.octets()) == 0xc000000a\n+                ))\n+            || self.is_documentation()\n+            || self.is_benchmarking()\n+            || self.is_reserved()\n+            || self.is_broadcast())\n     }\n \n     /// Returns [`true`] if this address is part of the Shared Address Space defined in"}]}