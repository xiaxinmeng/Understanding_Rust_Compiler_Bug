{"sha": "46dc7c59de28d9390ae1142ea5c15d99872e0c0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZGM3YzU5ZGUyOGQ5MzkwYWUxMTQyZWE1YzE1ZDk5ODcyZTBjMGE=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-10-02T13:49:11Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2017-12-14T17:56:26Z"}, "message": "stub out trait aliases in save_analysis", "tree": {"sha": "f94db75b59feacd2c32bbd720167717bae2dc581", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94db75b59feacd2c32bbd720167717bae2dc581"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46dc7c59de28d9390ae1142ea5c15d99872e0c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46dc7c59de28d9390ae1142ea5c15d99872e0c0a", "html_url": "https://github.com/rust-lang/rust/commit/46dc7c59de28d9390ae1142ea5c15d99872e0c0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46dc7c59de28d9390ae1142ea5c15d99872e0c0a/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1c4a922fe00cd236bb4360f5fb7077d70a1e675", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c4a922fe00cd236bb4360f5fb7077d70a1e675", "html_url": "https://github.com/rust-lang/rust/commit/f1c4a922fe00cd236bb4360f5fb7077d70a1e675"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "fe6ad92ad00b2fc00072ad3e888ab3e29c07d5b9", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46dc7c59de28d9390ae1142ea5c15d99872e0c0a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46dc7c59de28d9390ae1142ea5c15d99872e0c0a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=46dc7c59de28d9390ae1142ea5c15d99872e0c0a", "patch": "@@ -285,6 +285,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             HirDef::Enum(..) |\n             HirDef::TyAlias(..) |\n             HirDef::TyForeign(..) |\n+            HirDef::TraitAlias(..) |\n             HirDef::Trait(_) => {\n                 let span = self.span_from_span(sub_span.expect(\"No span found for type ref\"));\n                 self.dumper.dump_ref(Ref {"}, {"sha": "97f77b20f8114b90be10040c51d59866bda1b57b", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46dc7c59de28d9390ae1142ea5c15d99872e0c0a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46dc7c59de28d9390ae1142ea5c15d99872e0c0a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=46dc7c59de28d9390ae1142ea5c15d99872e0c0a", "patch": "@@ -721,6 +721,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::Enum(def_id) |\n             HirDef::TyAlias(def_id) |\n             HirDef::TyForeign(def_id) |\n+            HirDef::TraitAlias(def_id) |\n             HirDef::AssociatedTy(def_id) |\n             HirDef::Trait(def_id) |\n             HirDef::TyParam(def_id) => {"}, {"sha": "11d17e0227fdf867a366364f82316e788f31e955", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/46dc7c59de28d9390ae1142ea5c15d99872e0c0a/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46dc7c59de28d9390ae1142ea5c15d99872e0c0a/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=46dc7c59de28d9390ae1142ea5c15d99872e0c0a", "patch": "@@ -487,6 +487,25 @@ impl Sig for ast::Item {\n \n                 Ok(sig)\n             }\n+            ast::ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                let mut text = String::new();\n+                text.push_str(\"trait \");\n+                let mut sig = name_and_generics(text,\n+                                                offset,\n+                                                generics,\n+                                                self.id,\n+                                                self.ident,\n+                                                scx)?;\n+\n+                if !bounds.is_empty() {\n+                    sig.text.push_str(\" = \");\n+                    sig.text.push_str(&pprust::bounds_to_string(bounds));\n+                }\n+                // FIXME where clause\n+                sig.text.push_str(\";\");\n+\n+                Ok(sig)\n+            }\n             ast::ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n                 let mut text = String::new();\n                 if unsafety == ast::Unsafety::Unsafe {"}]}