{"sha": "389aff333d17053878823fc8e6b09096f8eeb78c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OWFmZjMzM2QxNzA1Mzg3ODgyM2ZjOGU2YjA5MDk2ZjhlZWI3OGM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-21T13:51:17Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-21T16:08:14Z"}, "message": "Make the cleanup tag in resource types a u8\n\nCloses #1184", "tree": {"sha": "91e7f778ee6c787689a88dda45ff59edaa6f3168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e7f778ee6c787689a88dda45ff59edaa6f3168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389aff333d17053878823fc8e6b09096f8eeb78c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389aff333d17053878823fc8e6b09096f8eeb78c", "html_url": "https://github.com/rust-lang/rust/commit/389aff333d17053878823fc8e6b09096f8eeb78c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389aff333d17053878823fc8e6b09096f8eeb78c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5458da0fd924c18791c80b31659469f636dcbb9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5458da0fd924c18791c80b31659469f636dcbb9a", "html_url": "https://github.com/rust-lang/rust/commit/5458da0fd924c18791c80b31659469f636dcbb9a"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "c7661183a48f2d970d81ae14e919bdb0625c7b0f", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/389aff333d17053878823fc8e6b09096f8eeb78c/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389aff333d17053878823fc8e6b09096f8eeb78c/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=389aff333d17053878823fc8e6b09096f8eeb78c", "patch": "@@ -139,8 +139,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n       ty::ty_iface(_, _) { T_opaque_iface(cx) }\n       ty::ty_res(_, sub, tps) {\n         let sub1 = ty::substitute_type_params(cx.tcx, tps, sub);\n-        // FIXME #1184: Resource flag is larger than necessary\n-        ret T_struct([cx.int_type, type_of(cx, sub1)]);\n+        ret T_struct([T_i8(), type_of(cx, sub1)]);\n       }\n       ty::ty_param(_, _) { T_typaram(cx.tn) }\n       ty::ty_send_type | ty::ty_type { T_ptr(cx.tydesc_type) }\n@@ -1050,8 +1049,7 @@ fn trans_res_drop(bcx: block, rs: ValueRef, did: ast::def_id,\n         Call(bcx, dtor_addr, args + [val_cast]);\n \n         bcx = drop_ty(bcx, valptr, inner_t_s);\n-        // FIXME #1184: Resource flag is larger than necessary\n-        Store(bcx, C_int(ccx, 0), drop_flag);\n+        Store(bcx, C_u8(0u), drop_flag);\n         bcx\n     }\n }\n@@ -1479,9 +1477,10 @@ fn free_ty(cx: block, v: ValueRef, t: ty::t) -> block {\n \n fn call_memmove(cx: block, dst: ValueRef, src: ValueRef,\n                 n_bytes: ValueRef) -> result {\n-    // FIXME: Provide LLVM with better alignment information when the alignment\n-    // is statically known (it must be nothing more than a constant int, or\n-    // LLVM complains -- not even a constant element of a tydesc works).\n+    // FIXME: Provide LLVM with better alignment information when the\n+    // alignment is statically known (it must be nothing more than a constant\n+    // int, or LLVM complains -- not even a constant element of a tydesc\n+    // works).\n \n     let ccx = cx.ccx();\n     let key = alt ccx.sess.targ_cfg.arch {\n@@ -1493,7 +1492,6 @@ fn call_memmove(cx: block, dst: ValueRef, src: ValueRef,\n     let memmove = i.get(key);\n     let src_ptr = PointerCast(cx, src, T_ptr(T_i8()));\n     let dst_ptr = PointerCast(cx, dst, T_ptr(T_i8()));\n-    // FIXME #1184: Resource flag is larger than necessary\n     let size = IntCast(cx, n_bytes, ccx.int_type);\n     let align = C_i32(1i32);\n     let volatile = C_bool(false);\n@@ -4114,7 +4112,8 @@ fn trans_res_ctor(ccx: @crate_ctxt, path: path, dtor: ast::fn_decl,\n     let bcx = top_scope_block(fcx, none), lltop = bcx.llbb;\n     let fty = node_id_type(bcx, ctor_id);\n     let arg_t = ty::ty_fn_args(fty)[0].ty;\n-    let tup_t = ty::mk_tup(ccx.tcx, [ty::mk_int(ccx.tcx), arg_t]);\n+    let tup_t = ty::mk_tup(ccx.tcx, [ty::mk_mach_uint(ccx.tcx, ast::ty_u8),\n+                                     arg_t]);\n     let arg = alt fcx.llargs.find(dtor.inputs[0].id) {\n       some(local_mem(x)) { x }\n       _ { ccx.sess.bug(\"Someone forgot to document an invariant \\\n@@ -4130,8 +4129,7 @@ fn trans_res_ctor(ccx: @crate_ctxt, path: path, dtor: ast::fn_decl,\n     bcx = memmove_ty(bcx, dst, arg, arg_t);\n     let flag = GEP_tup_like(bcx, tup_t, llretptr, [0, 0]);\n     bcx = flag.bcx;\n-    // FIXME #1184: Resource flag is larger than necessary\n-    let one = C_int(ccx, 1);\n+    let one = C_u8(1u);\n     Store(bcx, one, flag.val);\n     build_return(bcx);\n     finish_fn(fcx, lltop);"}]}