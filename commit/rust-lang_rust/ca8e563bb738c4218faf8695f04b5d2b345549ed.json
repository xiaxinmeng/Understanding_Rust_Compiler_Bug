{"sha": "ca8e563bb738c4218faf8695f04b5d2b345549ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOGU1NjNiYjczOGM0MjE4ZmFmODY5NWYwNGI1ZDJiMzQ1NTQ5ZWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-23T00:54:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-25T11:09:13Z"}, "message": "Remove as much of TypeContents as I can -- unfortunately, it is still\nused by EUV to compute whether a given type moves-by-default.", "tree": {"sha": "63fe34ab635fcebe89c4a214fec1fb5eaa75aa13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63fe34ab635fcebe89c4a214fec1fb5eaa75aa13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca8e563bb738c4218faf8695f04b5d2b345549ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8e563bb738c4218faf8695f04b5d2b345549ed", "html_url": "https://github.com/rust-lang/rust/commit/ca8e563bb738c4218faf8695f04b5d2b345549ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca8e563bb738c4218faf8695f04b5d2b345549ed/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3694f42b8c6e930054986061cac5d486a303bc9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3694f42b8c6e930054986061cac5d486a303bc9d", "html_url": "https://github.com/rust-lang/rust/commit/3694f42b8c6e930054986061cac5d486a303bc9d"}], "stats": {"total": 61, "additions": 10, "deletions": 51}, "files": [{"sha": "5ecf7c0d48d18274a4e271eee375ee5960eeb650", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 51, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ca8e563bb738c4218faf8695f04b5d2b345549ed/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8e563bb738c4218faf8695f04b5d2b345549ed/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ca8e563bb738c4218faf8695f04b5d2b345549ed", "patch": "@@ -2244,35 +2244,25 @@ def_type_content_sets!(\n         OwnsAll                             = 0b0000_0000__1111_1111__0000,\n \n         // Things that are reachable by the value in any way (fourth nibble):\n-        ReachesNonsendAnnot                 = 0b0000_0001__0000_0000__0000,\n         ReachesBorrowed                     = 0b0000_0010__0000_0000__0000,\n         // ReachesManaged /* see [1] below */  = 0b0000_0100__0000_0000__0000,\n         ReachesMutable                      = 0b0000_1000__0000_0000__0000,\n-        ReachesNoSync                       = 0b0001_0000__0000_0000__0000,\n         ReachesFfiUnsafe                    = 0b0010_0000__0000_0000__0000,\n         ReachesAll                          = 0b0011_1111__0000_0000__0000,\n \n-        // Things that cause values to *move* rather than *copy*\n+        // Things that cause values to *move* rather than *copy*. This\n+        // is almost the same as the `Copy` trait, but for managed\n+        // data -- atm, we consider managed data to copy, not move,\n+        // but it does not impl Copy as a pure memcpy is not good\n+        // enough. Yuck.\n         Moves                               = 0b0000_0000__0000_1011__0000,\n \n         // Things that mean drop glue is necessary\n         NeedsDrop                           = 0b0000_0000__0000_0111__0000,\n \n-        // Things that prevent values from being sent\n-        //\n-        // Note: For checking whether something is sendable, it'd\n-        //       be sufficient to have ReachesManaged. However, we include\n-        //       both ReachesManaged and OwnsManaged so that when\n-        //       a parameter has a bound T:Send, we are able to deduce\n-        //       that it neither reaches nor owns a managed pointer.\n-        Nonsendable                         = 0b0000_0111__0000_0100__0000,\n-\n         // Things that prevent values from being considered sized\n         Nonsized                            = 0b0000_0000__0000_0000__0001,\n \n-        // Things that prevent values from being sync\n-        Nonsync                             = 0b0001_0000__0000_0000__0000,\n-\n         // Things that make values considered not POD (would be same\n         // as `Moves`, but for the fact that managed data `@` is\n         // not considered POD)\n@@ -2291,15 +2281,6 @@ def_type_content_sets!(\n )\n \n impl TypeContents {\n-    pub fn meets_builtin_bound(&self, cx: &ctxt, bb: BuiltinBound) -> bool {\n-        match bb {\n-            BoundSend => self.is_sendable(cx),\n-            BoundSized => self.is_sized(cx),\n-            BoundCopy => self.is_copy(cx),\n-            BoundSync => self.is_sync(cx),\n-        }\n-    }\n-\n     pub fn when(&self, cond: bool) -> TypeContents {\n         if cond {*self} else {TC::None}\n     }\n@@ -2308,14 +2289,6 @@ impl TypeContents {\n         (self.bits & tc.bits) != 0\n     }\n \n-    pub fn is_sendable(&self, _: &ctxt) -> bool {\n-        !self.intersects(TC::Nonsendable)\n-    }\n-\n-    pub fn is_sync(&self, _: &ctxt) -> bool {\n-        !self.intersects(TC::Nonsync)\n-    }\n-\n     pub fn owns_managed(&self) -> bool {\n         self.intersects(TC::OwnsManaged)\n     }\n@@ -2328,10 +2301,6 @@ impl TypeContents {\n         !self.intersects(TC::Nonsized)\n     }\n \n-    pub fn is_copy(&self, _: &ctxt) -> bool {\n-        !self.intersects(TC::Noncopy)\n-    }\n-\n     pub fn interior_unsafe(&self) -> bool {\n         self.intersects(TC::InteriorUnsafe)\n     }\n@@ -2416,10 +2385,6 @@ impl fmt::Show for TypeContents {\n     }\n }\n \n-pub fn type_is_sendable(cx: &ctxt, t: ty::t) -> bool {\n-    type_contents(cx, t).is_sendable(cx)\n-}\n-\n pub fn type_interior_is_unsafe(cx: &ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).interior_unsafe()\n }\n@@ -2661,19 +2626,14 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n     fn apply_lang_items(cx: &ctxt,\n                         did: ast::DefId,\n                         tc: TypeContents)\n-                        -> TypeContents {\n-        if Some(did) == cx.lang_items.no_send_bound() {\n-            tc | TC::ReachesNonsendAnnot\n-        } else if Some(did) == cx.lang_items.managed_bound() {\n+                        -> TypeContents\n+    {\n+        if Some(did) == cx.lang_items.managed_bound() {\n             tc | TC::Managed\n         } else if Some(did) == cx.lang_items.no_copy_bound() {\n             tc | TC::OwnsAffine\n-        } else if Some(did) == cx.lang_items.no_sync_bound() {\n-            tc | TC::ReachesNoSync\n         } else if Some(did) == cx.lang_items.unsafe_type() {\n-            // FIXME(#13231): This shouldn't be needed after\n-            // opt-in built-in bounds are implemented.\n-            (tc | TC::InteriorUnsafe) - TC::Nonsync\n+            tc | TC::InteriorUnsafe\n         } else {\n             tc\n         }\n@@ -2733,10 +2693,9 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n         let mut tc = TC::All;\n         each_inherited_builtin_bound(cx, bounds, traits, |bound| {\n             tc = tc - match bound {\n-                BoundSend => TC::Nonsendable,\n+                BoundSync | BoundSend => TC::None,\n                 BoundSized => TC::Nonsized,\n                 BoundCopy => TC::Noncopy,\n-                BoundSync => TC::Nonsync,\n             };\n         });\n         return tc;"}]}