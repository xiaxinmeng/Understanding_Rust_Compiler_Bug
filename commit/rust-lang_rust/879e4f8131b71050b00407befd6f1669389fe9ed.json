{"sha": "879e4f8131b71050b00407befd6f1669389fe9ed", "node_id": "C_kwDOAAsO6NoAKDg3OWU0ZjgxMzFiNzEwNTBiMDA0MDdiZWZkNmYxNjY5Mzg5ZmU5ZWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-12T21:30:30Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-15T04:01:52Z"}, "message": "use an enum in matches_projection_projection", "tree": {"sha": "2dfeb88034a1045b9c8effa799a209088751a23e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dfeb88034a1045b9c8effa799a209088751a23e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879e4f8131b71050b00407befd6f1669389fe9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879e4f8131b71050b00407befd6f1669389fe9ed", "html_url": "https://github.com/rust-lang/rust/commit/879e4f8131b71050b00407befd6f1669389fe9ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879e4f8131b71050b00407befd6f1669389fe9ed/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "784c7a6cadf218b518734c4f21690334401ff83a", "url": "https://api.github.com/repos/rust-lang/rust/commits/784c7a6cadf218b518734c4f21690334401ff83a", "html_url": "https://github.com/rust-lang/rust/commit/784c7a6cadf218b518734c4f21690334401ff83a"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "584e412b8a228588f356b8fd05305e2a6ea686b5", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/879e4f8131b71050b00407befd6f1669389fe9ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879e4f8131b71050b00407befd6f1669389fe9ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=879e4f8131b71050b00407befd6f1669389fe9ed", "patch": "@@ -19,6 +19,7 @@ use super::{Normalized, NormalizedTy, ProjectionCacheEntry, ProjectionCacheKey};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use crate::traits::error_reporting::InferCtxtExt as _;\n+use crate::traits::select::ProjectionMatchesProjection;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n@@ -1248,7 +1249,7 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n             });\n \n             match is_match {\n-                Some(true) => {\n+                ProjectionMatchesProjection::Yes => {\n                     candidate_set.push_candidate(ctor(data));\n \n                     if potentially_unnormalized_candidates\n@@ -1260,10 +1261,10 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n                         return;\n                     }\n                 }\n-                Some(false) => {}\n-                None => {\n+                ProjectionMatchesProjection::Ambiguous => {\n                     candidate_set.mark_ambiguous();\n                 }\n+                ProjectionMatchesProjection::No => {}\n             }\n         }\n     }"}, {"sha": "2f85417a5b6184b102ac95ff1ece34d1435d8f77", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/879e4f8131b71050b00407befd6f1669389fe9ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879e4f8131b71050b00407befd6f1669389fe9ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=879e4f8131b71050b00407befd6f1669389fe9ed", "patch": "@@ -1508,15 +1508,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         })\n     }\n \n-    /// Return Some(true) if the obligation's predicate type applies to the env_predicate, and\n-    /// Some(false) if it does not. Returns None in the case that the projection type is a GAT,\n+    /// Return `Yes` if the obligation's predicate type applies to the env_predicate, and\n+    /// `No` if it does not. Return `Ambiguous` in the case that the projection type is a GAT,\n     /// and applying this env_predicate constrains any of the obligation's GAT substitutions.\n+    ///\n+    /// This behavior is a somewhat of a hack to prevent overconstraining inference variables\n+    /// in cases like #91762.\n     pub(super) fn match_projection_projections(\n         &mut self,\n         obligation: &ProjectionTyObligation<'tcx>,\n         env_predicate: PolyProjectionPredicate<'tcx>,\n         potentially_unnormalized_candidates: bool,\n-    ) -> Option<bool> {\n+    ) -> ProjectionMatchesProjection {\n         let mut nested_obligations = Vec::new();\n         let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n             obligation.cause.span,\n@@ -1553,20 +1556,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         if is_match {\n             let generics = self.tcx().generics_of(obligation.predicate.item_def_id);\n-            if !generics.params.is_empty() {\n-                // If any of the obligation's predicate substs shallow-resolve to\n-                // something new, that means that we must have newly inferred something\n-                // about the GAT. We should give up with ambiguity in that case.\n-                if obligation.predicate.substs[generics.parent_count..]\n+            // FIXME(generic-associated-types): Addresses aggressive inference in #92917.\n+            // If this type is a GAT, and of the GAT substs resolve to something new,\n+            // that means that we must have newly inferred something about the GAT.\n+            // We should give up in that case.\n+            if !generics.params.is_empty()\n+                && obligation.predicate.substs[generics.parent_count..]\n                     .iter()\n                     .any(|&p| p.has_infer_types_or_consts() && self.infcx.shallow_resolve(p) != p)\n-                {\n-                    return None;\n-                }\n+            {\n+                ProjectionMatchesProjection::Ambiguous\n+            } else {\n+                ProjectionMatchesProjection::Yes\n             }\n+        } else {\n+            ProjectionMatchesProjection::No\n         }\n-\n-        Some(is_match)\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n@@ -2766,3 +2771,9 @@ impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {\n         write!(f, \"TraitObligationStack({:?})\", self.obligation)\n     }\n }\n+\n+pub enum ProjectionMatchesProjection {\n+    Yes,\n+    Ambiguous,\n+    No,\n+}"}]}