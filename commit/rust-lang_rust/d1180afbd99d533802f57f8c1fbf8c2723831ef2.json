{"sha": "d1180afbd99d533802f57f8c1fbf8c2723831ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTgwYWZiZDk5ZDUzMzgwMmY1N2Y4YzFmYmY4YzI3MjM4MzFlZjI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-04-19T21:13:30Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-04-19T21:13:30Z"}, "message": "Generate block containing return lazily instead", "tree": {"sha": "6b322d84d7c35e7eda324e7d8d8eb6dba6ca0423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b322d84d7c35e7eda324e7d8d8eb6dba6ca0423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1180afbd99d533802f57f8c1fbf8c2723831ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1180afbd99d533802f57f8c1fbf8c2723831ef2", "html_url": "https://github.com/rust-lang/rust/commit/d1180afbd99d533802f57f8c1fbf8c2723831ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1180afbd99d533802f57f8c1fbf8c2723831ef2/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "135657206fba40c3f6138362b62457f4452e578b", "url": "https://api.github.com/repos/rust-lang/rust/commits/135657206fba40c3f6138362b62457f4452e578b", "html_url": "https://github.com/rust-lang/rust/commit/135657206fba40c3f6138362b62457f4452e578b"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "d5c321ffa6a3e956026628a7bbef42e6c489565c", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1180afbd99d533802f57f8c1fbf8c2723831ef2/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1180afbd99d533802f57f8c1fbf8c2723831ef2/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=d1180afbd99d533802f57f8c1fbf8c2723831ef2", "patch": "@@ -213,13 +213,6 @@ impl BasicBlock {\n         BasicBlock(index as u32)\n     }\n \n-    /// Returns a BasicBlock with index 1. This is actual end block (containing\n-    /// the Return terminator) only during the building of MIR and should not be\n-    /// used outside that.\n-    pub const fn end_block() -> BasicBlock {\n-        BasicBlock(1)\n-    }\n-\n     /// Extract the index.\n     pub fn index(self) -> usize {\n         self.0 as usize"}, {"sha": "fe32f1de0c52053306ee6286d2b188a1432f7adc", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1180afbd99d533802f57f8c1fbf8c2723831ef2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1180afbd99d533802f57f8c1fbf8c2723831ef2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=d1180afbd99d533802f57f8c1fbf8c2723831ef2", "patch": "@@ -262,7 +262,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                     }\n                 };\n                 let extent = this.extent_of_return_scope();\n-                this.exit_scope(expr_span, extent, block, BasicBlock::end_block());\n+                let return_block = this.return_block();\n+                this.exit_scope(expr_span, extent, block, return_block);\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::Call { ty, fun, args } => {"}, {"sha": "82916f08999b2227634b203ba5473398781b600b", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d1180afbd99d533802f57f8c1fbf8c2723831ef2/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1180afbd99d533802f57f8c1fbf8c2723831ef2/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d1180afbd99d533802f57f8c1fbf8c2723831ef2", "patch": "@@ -24,33 +24,35 @@ pub struct Builder<'a, 'tcx: 'a> {\n \n     fn_span: Span,\n \n-    // the current set of scopes, updated as we traverse;\n-    // see the `scope` module for more details\n+    /// the current set of scopes, updated as we traverse;\n+    /// see the `scope` module for more details\n     scopes: Vec<scope::Scope<'tcx>>,\n \n-    // for each scope, a span of blocks that defines it;\n-    // we track these for use in region and borrow checking,\n-    // but these are liable to get out of date once optimization\n-    // begins. They are also hopefully temporary, and will be\n-    // no longer needed when we adopt graph-based regions.\n+    ///  for each scope, a span of blocks that defines it;\n+    ///  we track these for use in region and borrow checking,\n+    ///  but these are liable to get out of date once optimization\n+    ///  begins. They are also hopefully temporary, and will be\n+    ///  no longer needed when we adopt graph-based regions.\n     scope_auxiliary: ScopeAuxiliaryVec,\n \n-    // the current set of loops; see the `scope` module for more\n-    // details\n+    /// the current set of loops; see the `scope` module for more\n+    /// details\n     loop_scopes: Vec<scope::LoopScope>,\n \n-    // the vector of all scopes that we have created thus far;\n-    // we track this for debuginfo later\n+    /// the vector of all scopes that we have created thus far;\n+    /// we track this for debuginfo later\n     scope_datas: Vec<ScopeData>,\n \n     var_decls: Vec<VarDecl<'tcx>>,\n     var_indices: FnvHashMap<ast::NodeId, u32>,\n     temp_decls: Vec<TempDecl<'tcx>>,\n     unit_temp: Option<Lvalue<'tcx>>,\n \n-    // cached block with a RESUME terminator; we create this at the\n-    // first panic\n+    /// cached block with the RESUME terminator; this is created\n+    /// when first set of cleanups are built.\n     cached_resume_block: Option<BasicBlock>,\n+    /// cached block with the RETURN terminator\n+    cached_return_block: Option<BasicBlock>,\n }\n \n struct CFG<'tcx> {\n@@ -180,12 +182,10 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n         var_indices: FnvHashMap(),\n         unit_temp: None,\n         cached_resume_block: None,\n+        cached_return_block: None\n     };\n \n     assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n-    let end_block = builder.cfg.start_new_block();\n-    assert_eq!(end_block, BasicBlock::end_block());\n-\n \n     let mut arg_decls = None; // assigned to `Some` in closures below\n     let call_site_extent =\n@@ -205,11 +205,12 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n             block.unit()\n         }));\n \n+        let return_block = builder.return_block();\n         builder.cfg.terminate(block, call_site_scope_id, span,\n-                              TerminatorKind::Goto { target: end_block });\n-        builder.cfg.terminate(end_block, call_site_scope_id, span,\n+                              TerminatorKind::Goto { target: return_block });\n+        builder.cfg.terminate(return_block, call_site_scope_id, span,\n                               TerminatorKind::Return);\n-        end_block.unit()\n+        return_block.unit()\n     });\n \n     assert!(\n@@ -290,6 +291,17 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n         }\n     }\n+\n+    fn return_block(&mut self) -> BasicBlock {\n+        match self.cached_return_block {\n+            Some(rb) => rb,\n+            None => {\n+                let rb = self.cfg.start_new_block();\n+                self.cached_return_block = Some(rb);\n+                rb\n+            }\n+        }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "ced73f34e0d92f9631c9eedea56ea8e912e26f6a", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1180afbd99d533802f57f8c1fbf8c2723831ef2/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1180afbd99d533802f57f8c1fbf8c2723831ef2/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=d1180afbd99d533802f57f8c1fbf8c2723831ef2", "patch": "@@ -21,7 +21,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n \n #![feature(box_patterns)]\n-#![feature(const_fn)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(question_mark)]"}]}