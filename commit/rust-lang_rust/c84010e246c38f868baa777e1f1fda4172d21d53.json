{"sha": "c84010e246c38f868baa777e1f1fda4172d21d53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NDAxMGUyNDZjMzhmODY4YmFhNzc3ZTFmMWZkYTQxNzJkMjFkNTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T17:14:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T17:14:49Z"}, "message": "Slightly more fluent API", "tree": {"sha": "554d3e1dac1c770d98c75b820684002f19a46fed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554d3e1dac1c770d98c75b820684002f19a46fed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c84010e246c38f868baa777e1f1fda4172d21d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c84010e246c38f868baa777e1f1fda4172d21d53", "html_url": "https://github.com/rust-lang/rust/commit/c84010e246c38f868baa777e1f1fda4172d21d53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c84010e246c38f868baa777e1f1fda4172d21d53/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8296d3208d30b2b21c897d73e1c847d9549aef21", "url": "https://api.github.com/repos/rust-lang/rust/commits/8296d3208d30b2b21c897d73e1c847d9549aef21", "html_url": "https://github.com/rust-lang/rust/commit/8296d3208d30b2b21c897d73e1c847d9549aef21"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "3037f2715f27ef82138874bb0e7560ea5d0f23cb", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84010e246c38f868baa777e1f1fda4172d21d53/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84010e246c38f868baa777e1f1fda4172d21d53/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=c84010e246c38f868baa777e1f1fda4172d21d53", "patch": "@@ -22,7 +22,7 @@ impl ast::BinExpr {\n     #[must_use]\n     pub fn replace_op(&self, op: SyntaxKind) -> Option<ast::BinExpr> {\n         let op_node: SyntaxElement = self.op_details()?.0.into();\n-        let to_insert: Option<SyntaxElement> = Some(tokens::op(op).into());\n+        let to_insert: Option<SyntaxElement> = Some(make::token(op).into());\n         Some(replace_children(self, single_node(op_node), to_insert.into_iter()))\n     }\n }"}, {"sha": "4a79d0dec51b7c6f93ea6196047a43ef4b733933", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c84010e246c38f868baa777e1f1fda4172d21d53/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84010e246c38f868baa777e1f1fda4172d21d53/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=c84010e246c38f868baa777e1f1fda4172d21d53", "patch": "@@ -2,7 +2,7 @@\n //! of smaller pieces.\n use itertools::Itertools;\n \n-use crate::{algo, ast, AstNode, SourceFile};\n+use crate::{algo, ast, AstNode, SourceFile, SyntaxKind, SyntaxToken};\n \n pub fn name(text: &str) -> ast::Name {\n     ast_from_text(&format!(\"mod {};\", text))\n@@ -181,28 +181,28 @@ pub fn let_stmt(pattern: ast::Pat, initializer: Option<ast::Expr>) -> ast::LetSt\n     ast_from_text(&format!(\"fn f() {{ {} }}\", text))\n }\n \n+pub fn token(kind: SyntaxKind) -> SyntaxToken {\n+    tokens::SOURCE_FILE\n+        .tree()\n+        .syntax()\n+        .descendants_with_tokens()\n+        .filter_map(|it| it.into_token())\n+        .find(|it| it.kind() == kind)\n+        .unwrap_or_else(|| panic!(\"unhandled token: {:?}\", kind))\n+}\n+\n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n     parse.tree().syntax().descendants().find_map(N::cast).unwrap()\n }\n \n pub mod tokens {\n-    use crate::{AstNode, Parse, SourceFile, SyntaxKind, SyntaxKind::*, SyntaxToken, T};\n+    use crate::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken, T};\n     use once_cell::sync::Lazy;\n \n-    static SOURCE_FILE: Lazy<Parse<SourceFile>> =\n+    pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> =\n         Lazy::new(|| SourceFile::parse(\"const C: () = (1 != 1, 2 == 2)\\n;\"));\n \n-    pub fn op(op: SyntaxKind) -> SyntaxToken {\n-        SOURCE_FILE\n-            .tree()\n-            .syntax()\n-            .descendants_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == op)\n-            .unwrap()\n-    }\n-\n     pub fn comma() -> SyntaxToken {\n         SOURCE_FILE\n             .tree()"}]}