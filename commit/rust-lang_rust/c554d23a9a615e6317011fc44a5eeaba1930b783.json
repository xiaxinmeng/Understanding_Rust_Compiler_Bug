{"sha": "c554d23a9a615e6317011fc44a5eeaba1930b783", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTRkMjNhOWE2MTVlNjMxNzAxMWZjNDRhNWVlYWJhMTkzMGI3ODM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T03:10:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:27Z"}, "message": "librustc: De-`@mut` `trait_impls` in the type context", "tree": {"sha": "3c2a7066c7d4cddf53f4d28767bb290a4d61444b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c2a7066c7d4cddf53f4d28767bb290a4d61444b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c554d23a9a615e6317011fc44a5eeaba1930b783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c554d23a9a615e6317011fc44a5eeaba1930b783", "html_url": "https://github.com/rust-lang/rust/commit/c554d23a9a615e6317011fc44a5eeaba1930b783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c554d23a9a615e6317011fc44a5eeaba1930b783/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66fcca9c9c279db5ab804734a0310b6aec60415", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66fcca9c9c279db5ab804734a0310b6aec60415", "html_url": "https://github.com/rust-lang/rust/commit/a66fcca9c9c279db5ab804734a0310b6aec60415"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "35652e809c52599c8ec4d7e2c258d6b672e087f7", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c554d23a9a615e6317011fc44a5eeaba1930b783", "patch": "@@ -878,7 +878,8 @@ fn encode_inherent_implementations(ecx: &EncodeContext,\n fn encode_extension_implementations(ecx: &EncodeContext,\n                                     ebml_w: &mut writer::Encoder,\n                                     trait_def_id: DefId) {\n-    match ecx.tcx.trait_impls.find(&trait_def_id) {\n+    let trait_impls = ecx.tcx.trait_impls.borrow();\n+    match trait_impls.get().find(&trait_def_id) {\n         None => {}\n         Some(&implementations) => {\n             for implementation in implementations.iter() {"}, {"sha": "f3ba0feb37a9c06df4ce7557328d966c8fb9ea0c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c554d23a9a615e6317011fc44a5eeaba1930b783", "patch": "@@ -333,7 +333,7 @@ struct ctxt_ {\n     destructors: RefCell<HashSet<ast::DefId>>,\n \n     // Maps a trait onto a list of impls of that trait.\n-    trait_impls: @mut HashMap<ast::DefId, @mut ~[@Impl]>,\n+    trait_impls: RefCell<HashMap<ast::DefId, @mut ~[@Impl]>>,\n \n     // Maps a def_id of a type to a list of its inherent impls.\n     // Contains implementations of methods that are inherent to a type.\n@@ -1005,7 +1005,7 @@ pub fn mk_ctxt(s: session::Session,\n         supertraits: RefCell::new(HashMap::new()),\n         destructor_for_type: RefCell::new(HashMap::new()),\n         destructors: RefCell::new(HashSet::new()),\n-        trait_impls: @mut HashMap::new(),\n+        trait_impls: RefCell::new(HashMap::new()),\n         inherent_impls:  @mut HashMap::new(),\n         impls:  @mut HashMap::new(),\n         used_unsafe: @mut HashSet::new(),\n@@ -4498,10 +4498,11 @@ fn record_trait_implementation(tcx: ctxt,\n                                trait_def_id: DefId,\n                                implementation: @Impl) {\n     let implementation_list;\n-    match tcx.trait_impls.find(&trait_def_id) {\n+    let mut trait_impls = tcx.trait_impls.borrow_mut();\n+    match trait_impls.get().find(&trait_def_id) {\n         None => {\n             implementation_list = @mut ~[];\n-            tcx.trait_impls.insert(trait_def_id, implementation_list);\n+            trait_impls.get().insert(trait_def_id, implementation_list);\n         }\n         Some(&existing_implementation_list) => {\n             implementation_list = existing_implementation_list"}, {"sha": "f2222dba6977e2fc9ddc62335ef4f36232b682cb", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=c554d23a9a615e6317011fc44a5eeaba1930b783", "patch": "@@ -352,7 +352,8 @@ impl<'a> LookupContext<'a> {\n                     *trait_did);\n \n                 // Look for explicit implementations.\n-                let opt_impl_infos = self.tcx().trait_impls.find(trait_did);\n+                let trait_impls = self.tcx().trait_impls.borrow();\n+                let opt_impl_infos = trait_impls.get().find(trait_did);\n                 for impl_infos in opt_impl_infos.iter() {\n                     for impl_info in impl_infos.iter() {\n                         self.push_candidates_from_impl("}, {"sha": "5ddb2c78d1929fede84cd2f1838c0808cd9f0f63", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=c554d23a9a615e6317011fc44a5eeaba1930b783", "patch": "@@ -329,7 +329,12 @@ fn search_for_vtable(vcx: &VtableContext,\n \n     // XXX: this is a bad way to do this, since we do\n     // pointless allocations.\n-    let impls = tcx.trait_impls.find(&trait_ref.def_id).map_default(@mut ~[], |x| *x);\n+    let impls = {\n+        let trait_impls = tcx.trait_impls.borrow();\n+        trait_impls.get()\n+                   .find(&trait_ref.def_id)\n+                   .map_default(@mut ~[], |x| *x)\n+    };\n     // impls is the list of all impls in scope for trait_ref.\n     for im in impls.iter() {\n         // im is one specific impl of trait_ref."}, {"sha": "d9c053fa57e7596a9211f0cf990afdfb72cf808e", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c554d23a9a615e6317011fc44a5eeaba1930b783/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=c554d23a9a615e6317011fc44a5eeaba1930b783", "patch": "@@ -402,10 +402,11 @@ impl CoherenceChecker {\n                           implementation: @Impl) {\n         let tcx = self.crate_context.tcx;\n         let implementation_list;\n-        match tcx.trait_impls.find(&base_def_id) {\n+        let mut trait_impls = tcx.trait_impls.borrow_mut();\n+        match trait_impls.get().find(&base_def_id) {\n             None => {\n                 implementation_list = @mut ~[];\n-                tcx.trait_impls.insert(base_def_id, implementation_list);\n+                trait_impls.get().insert(base_def_id, implementation_list);\n             }\n             Some(&existing_implementation_list) => {\n                 implementation_list = existing_implementation_list;\n@@ -416,7 +417,8 @@ impl CoherenceChecker {\n     }\n \n     pub fn check_implementation_coherence(&self) {\n-        self.crate_context.tcx.trait_impls.each_key(|&trait_id| {\n+        let trait_impls = self.crate_context.tcx.trait_impls.borrow();\n+        trait_impls.get().each_key(|&trait_id| {\n             self.check_implementation_coherence_of(trait_id);\n             true\n         });\n@@ -455,7 +457,8 @@ impl CoherenceChecker {\n     }\n \n     pub fn iter_impls_of_trait(&self, trait_def_id: DefId, f: |@Impl|) {\n-        match self.crate_context.tcx.trait_impls.find(&trait_def_id) {\n+        let trait_impls = self.crate_context.tcx.trait_impls.borrow();\n+        match trait_impls.get().find(&trait_def_id) {\n             Some(impls) => {\n                 for &im in impls.iter() {\n                     f(im);\n@@ -687,11 +690,12 @@ impl CoherenceChecker {\n         let drop_trait = match tcx.lang_items.drop_trait() {\n             Some(id) => id, None => { return }\n         };\n-        let impls_opt = tcx.trait_impls.find(&drop_trait);\n \n+        let trait_impls = tcx.trait_impls.borrow();\n+        let impls_opt = trait_impls.get().find(&drop_trait);\n         let impls;\n         match impls_opt {\n-            None => return, // No types with (new-style) destructors present.\n+            None => return, // No types with (new-style) dtors present.\n             Some(found_impls) => impls = found_impls\n         }\n "}]}