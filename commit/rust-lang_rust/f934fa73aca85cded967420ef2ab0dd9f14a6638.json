{"sha": "f934fa73aca85cded967420ef2ab0dd9f14a6638", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MzRmYTczYWNhODVjZGVkOTY3NDIwZWYyYWIwZGQ5ZjE0YTY2Mzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-07T06:11:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-14T21:52:07Z"}, "message": "core::rt: Docs", "tree": {"sha": "f10156a78e48c3ce83e52033112675e0fa3f9544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f10156a78e48c3ce83e52033112675e0fa3f9544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f934fa73aca85cded967420ef2ab0dd9f14a6638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f934fa73aca85cded967420ef2ab0dd9f14a6638", "html_url": "https://github.com/rust-lang/rust/commit/f934fa73aca85cded967420ef2ab0dd9f14a6638", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f934fa73aca85cded967420ef2ab0dd9f14a6638/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329dfcaba0af7af736ac7e853be45783ad7ac4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/329dfcaba0af7af736ac7e853be45783ad7ac4b0", "html_url": "https://github.com/rust-lang/rust/commit/329dfcaba0af7af736ac7e853be45783ad7ac4b0"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "5a6a6e4c7d88d205dc482b622d8f4a5ef985bc06", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 61, "deletions": 13, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f934fa73aca85cded967420ef2ab0dd9f14a6638/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f934fa73aca85cded967420ef2ab0dd9f14a6638/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=f934fa73aca85cded967420ef2ab0dd9f14a6638", "patch": "@@ -8,7 +8,57 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Rust runtime services, including the task scheduler and I/O interface\n+/*! The Rust Runtime, including the task scheduler and I/O\n+\n+The `rt` module provides the private runtime infrastructure necessary\n+to support core language features like the exchange and local heap,\n+the garbage collector, logging, local data and unwinding. It also\n+implements the default task scheduler and task model. Initialization\n+routines are provided for setting up runtime resources in common\n+configurations, including that used by `rustc` when generating\n+executables.\n+\n+It is intended that the features provided by `rt` can be factored in a\n+way such that the core library can be built with different 'profiles'\n+for different use cases, e.g. excluding the task scheduler. A number\n+of runtime features though are critical to the functioning of the\n+language and an implementation must be provided regardless of the\n+execution environment.\n+\n+Of foremost importance is the global exchange heap, in the module\n+`global_heap`. Very little practical Rust code can be written without\n+access to the global heap. Unlike most of `rt` the global heap is\n+truly a global resource and generally operates independently of the\n+rest of the runtime.\n+\n+All other runtime features are 'local', either thread-local or\n+task-local.  Those critical to the functioning of the language are\n+defined in the module `local_services`. Local services are those which\n+are expected to be available to Rust code generally but rely on\n+thread- or task-local state. These currently include the local heap,\n+the garbage collector, local storage, logging and the stack unwinder.\n+Local services are primarily implemented for tasks, but may also\n+be implemented for use outside of tasks.\n+\n+The relationship between `rt` and the rest of the core library is\n+not entirely clear yet and some modules will be moving into or\n+out of `rt` as development proceeds.\n+\n+Several modules in `core` are clients of `rt`:\n+\n+* `core::task` - The user-facing interface to the Rust task model.\n+* `core::task::local_data` - The interface to local data.\n+* `core::gc` - The garbage collector.\n+* `core::unstable::lang` - Miscellaneous lang items, some of which rely on `core::rt`.\n+* `core::condition` - Uses local data.\n+* `core::cleanup` - Local heap destruction.\n+* `core::io` - In the future `core::io` will use an `rt` implementation.\n+* `core::logging`\n+* `core::pipes`\n+* `core::comm`\n+* `core::stackwalk`\n+\n+*/\n \n #[doc(hidden)];\n \n@@ -20,39 +70,37 @@ pub mod global_heap;\n /// The Scheduler and Task types.\n mod sched;\n \n-/// Thread-local access to the current Scheduler\n+/// Thread-local access to the current Scheduler.\n pub mod local_sched;\n \n-/// Synchronous I/O\n+/// Synchronous I/O.\n #[path = \"io/mod.rs\"]\n pub mod io;\n \n-/// Thread-local implementations of language-critical runtime features like @\n+/// Thread-local implementations of language-critical runtime features like @.\n pub mod local_services;\n \n-/// The EventLoop and internal synchronous I/O interface, dynamically\n-/// overridable so that it's primary implementation on libuv can\n-/// live outside of core.\n+/// The EventLoop and internal synchronous I/O interface.\n mod rtio;\n \n-/// libuv\n+/// libuv and default rtio implementation.\n #[path = \"uv/mod.rs\"]\n pub mod uv;\n \n // FIXME #5248: The import in `sched` doesn't resolve unless this is pub!\n-/// Bindings to pthread/windows thread-local storage\n+/// Bindings to pthread/windows thread-local storage.\n pub mod thread_local_storage;\n \n-/// A parallel work-stealing queue\n+/// A parallel work-stealing dequeue.\n mod work_queue;\n \n-/// Stack segments and their cacheing\n+/// Stack segments and caching.\n mod stack;\n \n-/// CPU context swapping\n+/// CPU context swapping.\n mod context;\n \n-/// Bindings to system threading libraries\n+/// Bindings to system threading libraries.\n mod thread;\n \n /// The runtime configuration, read from environment variables"}]}