{"sha": "f627c2ff21405199bc59c8d388d9b25185465753", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MjdjMmZmMjE0MDUxOTliYzU5YzhkMzg4ZDliMjUxODU0NjU3NTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-11T01:29:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-11T01:29:14Z"}, "message": "rustc: Don't interleave allocas with stores when copying arguments to allocas", "tree": {"sha": "f1f6d624516641dd8aaf743ae4a1bdfb4aa4dd51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f6d624516641dd8aaf743ae4a1bdfb4aa4dd51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f627c2ff21405199bc59c8d388d9b25185465753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f627c2ff21405199bc59c8d388d9b25185465753", "html_url": "https://github.com/rust-lang/rust/commit/f627c2ff21405199bc59c8d388d9b25185465753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f627c2ff21405199bc59c8d388d9b25185465753/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "390ce40165e1052d675782812d8505064427ec51", "url": "https://api.github.com/repos/rust-lang/rust/commits/390ce40165e1052d675782812d8505064427ec51", "html_url": "https://github.com/rust-lang/rust/commit/390ce40165e1052d675782812d8505064427ec51"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "92bb11618873736fda2e3cfa5fbac10c701b446c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f627c2ff21405199bc59c8d388d9b25185465753/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f627c2ff21405199bc59c8d388d9b25185465753/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f627c2ff21405199bc59c8d388d9b25185465753", "patch": "@@ -6160,28 +6160,24 @@ fn copy_any_self_to_alloca(@fn_ctxt fcx,\n }\n \n \n-fn copy_args_to_allocas(@fn_ctxt fcx,\n+fn copy_args_to_allocas(@block_ctxt bcx,\n                         vec[ast.arg] args,\n                         vec[ty.arg] arg_tys) {\n \n-    auto bcx = llallocas_block_ctxt(fcx);\n-\n     let uint arg_n = 0u;\n \n     for (ast.arg aarg in args) {\n         if (aarg.mode != ast.alias) {\n-            auto arg_t = type_of_arg(fcx.lcx, arg_tys.(arg_n));\n+            auto arg_t = type_of_arg(bcx.fcx.lcx, arg_tys.(arg_n));\n             auto a = alloca(bcx, arg_t);\n-            auto argval = fcx.llargs.get(aarg.id);\n+            auto argval = bcx.fcx.llargs.get(aarg.id);\n             bcx.build.Store(argval, a);\n             // Overwrite the llargs entry for this arg with its alloca.\n-            fcx.llargs.insert(aarg.id, a);\n+            bcx.fcx.llargs.insert(aarg.id, a);\n         }\n \n         arg_n += 1u;\n     }\n-\n-    fcx.llallocas = bcx.llbb;\n }\n \n fn add_cleanups_for_args(&@block_ctxt bcx,\n@@ -6317,9 +6313,9 @@ fn trans_fn(@local_ctxt cx, &ast._fn f, ast.def_id fid,\n     }\n \n     auto arg_tys = arg_tys_of_fn(fcx.lcx.ccx, ann);\n-    copy_args_to_allocas(fcx, f.decl.inputs, arg_tys);\n \n     auto bcx = new_top_block_ctxt(fcx);\n+    copy_args_to_allocas(bcx, f.decl.inputs, arg_tys);\n \n     add_cleanups_for_args(bcx, f.decl.inputs, arg_tys);\n \n@@ -6431,9 +6427,9 @@ fn trans_obj(@local_ctxt cx, &ast._obj ob, ast.def_id oid,\n                               fn_args, ty_params);\n \n     let vec[ty.arg] arg_tys = arg_tys_of_fn(ccx, ann);\n-    copy_args_to_allocas(fcx, fn_args, arg_tys);\n \n     auto bcx = new_top_block_ctxt(fcx);\n+    copy_args_to_allocas(bcx, fn_args, arg_tys);\n     auto lltop = bcx.llbb;\n \n     auto self_ty = ret_ty_of_fn(ccx, ann);\n@@ -6584,9 +6580,9 @@ fn trans_tag_variant(@local_ctxt cx, ast.def_id tag_id,\n     }\n \n     auto arg_tys = arg_tys_of_fn(cx.ccx, variant.node.ann);\n-    copy_args_to_allocas(fcx, fn_args, arg_tys);\n \n     auto bcx = new_top_block_ctxt(fcx);\n+    copy_args_to_allocas(bcx, fn_args, arg_tys);\n     auto lltop = bcx.llbb;\n \n     // Cast the tag to a type we can GEP into."}]}