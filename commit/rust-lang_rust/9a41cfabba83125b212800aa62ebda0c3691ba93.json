{"sha": "9a41cfabba83125b212800aa62ebda0c3691ba93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNDFjZmFiYmE4MzEyNWIyMTI4MDBhYTYyZWJkYTBjMzY5MWJhOTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-10-05T16:15:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-10-05T16:15:48Z"}, "message": "Revert \"Add docs and debug asserts\"\n\nThis reverts commit 1a1a7f6167edf18b8a0ab488e651f7748cc2e9d3.", "tree": {"sha": "82c8114b79707d2ae0c5a31d46645e02b8f34537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c8114b79707d2ae0c5a31d46645e02b8f34537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a41cfabba83125b212800aa62ebda0c3691ba93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a41cfabba83125b212800aa62ebda0c3691ba93", "html_url": "https://github.com/rust-lang/rust/commit/9a41cfabba83125b212800aa62ebda0c3691ba93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a41cfabba83125b212800aa62ebda0c3691ba93/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54441484d13998eef3354780c86e97342776483d", "url": "https://api.github.com/repos/rust-lang/rust/commits/54441484d13998eef3354780c86e97342776483d", "html_url": "https://github.com/rust-lang/rust/commit/54441484d13998eef3354780c86e97342776483d"}], "stats": {"total": 34, "additions": 11, "deletions": 23}, "files": [{"sha": "7c16258e84ef08830befb12ee0b0b757369a70f4", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9a41cfabba83125b212800aa62ebda0c3691ba93/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a41cfabba83125b212800aa62ebda0c3691ba93/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=9a41cfabba83125b212800aa62ebda0c3691ba93", "patch": "@@ -202,17 +202,10 @@ impl<T> VecDeque<T> {\n                                  len);\n     }\n \n-    /// Copies all values from `src` to the back of `self`, wrapping around if needed.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The capacity must be sufficient to hold self.len() + src.len() elements.\n-    /// If so, this function never panics.\n+    /// Copies all values from `src` to `self`, wrapping around if needed.\n+    /// Assumes capacity is sufficient.\n     #[inline]\n     unsafe fn copy_slice(&mut self, src: &[T]) {\n-        let expected_new_len = self.len() + src.len();\n-        debug_assert!(self.capacity() >= expected_new_len);\n-\n         let dst_high_ptr = self.ptr().add(self.head);\n         let dst_high_len = self.cap() - self.head;\n \n@@ -223,7 +216,6 @@ impl<T> VecDeque<T> {\n         ptr::copy_nonoverlapping(src_low.as_ptr(), self.ptr(), src_low.len());\n \n         self.head = self.wrap_add(self.head, src.len());\n-        debug_assert!(self.len() == expected_new_len);\n     }\n \n     /// Copies a potentially wrapping block of memory len long from src to dest.\n@@ -1858,21 +1850,17 @@ impl<T> VecDeque<T> {\n     #[inline]\n     #[stable(feature = \"append\", since = \"1.4.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n-        unsafe {\n-            // Guarantees there is space in `self` for `other`.\n-            self.reserve(other.len());\n-\n-            {\n-                let (src_high, src_low) = other.as_slices();\n+        // Guarantees there is space in `self` for `other\n+        self.reserve(other.len());\n \n-                // This is only safe because copy_slice never panics when capacity is sufficient.\n-                self.copy_slice(src_low);\n-                self.copy_slice(src_high);\n-            }\n-\n-            // Some values now exist in both `other` and `self` but are made inaccessible in `other`.\n-            other.tail = other.head;\n+        unsafe {\n+            let (src_high, src_low) = other.as_slices();\n+            self.copy_slice(src_low);\n+            self.copy_slice(src_high);\n         }\n+\n+        // Some values now exist in both `other` and `self` but are made inaccessible in `other`.\n+        other.tail = other.head;\n     }\n \n     /// Retains only the elements specified by the predicate."}]}