{"sha": "0f3c7d18fb1213ad285173210820924b76b534a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmM2M3ZDE4ZmIxMjEzYWQyODUxNzMyMTA4MjA5MjRiNzZiNTM0YTE=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-12-21T18:16:01Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2021-06-12T06:56:46Z"}, "message": "Explain non-dropped sender recv in docs\n\nOriginal senders that are still hanging around could cause\nReceiver::recv to not block since this is a potential footgun\nfor beginners, clarify more on this in the docs for readers to\nbe aware about it.\n\nFix minor tidbits in sender recv doc\n\nCo-authored-by: Dylan DPC <dylan.dpc@gmail.com>\n\nAdd example for unbounded receive loops in doc\n\nShow the drop(tx) pattern, based on tokio docs\nhttps://tokio-rs.github.io/tokio/doc/tokio/sync/index.html\n\nFix example code for drop sender recv\n\nFix wording in sender docs\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>", "tree": {"sha": "e424e00a04a8576bdd0ea37efd9a0e0595106917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e424e00a04a8576bdd0ea37efd9a0e0595106917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f3c7d18fb1213ad285173210820924b76b534a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3c7d18fb1213ad285173210820924b76b534a1", "html_url": "https://github.com/rust-lang/rust/commit/0f3c7d18fb1213ad285173210820924b76b534a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f3c7d18fb1213ad285173210820924b76b534a1/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c94a197726b6a981828cb1837d7c3eed1b841d", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c94a197726b6a981828cb1837d7c3eed1b841d", "html_url": "https://github.com/rust-lang/rust/commit/11c94a197726b6a981828cb1837d7c3eed1b841d"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "0465a19a47817e435bb17ee6d9dd2330d463e3f5", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0f3c7d18fb1213ad285173210820924b76b534a1/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3c7d18fb1213ad285173210820924b76b534a1/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=0f3c7d18fb1213ad285173210820924b76b534a1", "patch": "@@ -105,6 +105,35 @@\n //! });\n //! rx.recv().unwrap();\n //! ```\n+//!\n+//! Unbounded receive loop:\n+//!\n+//! ```\n+//! use std::sync::mpsc::sync_channel;\n+//! use std::thread;\n+//!\n+//! let (tx, rx) = sync_channel(3);\n+//!\n+//! for _ in 0..3 {\n+//!     // It would be the same without thread and clone here\n+//!     // since there will still be one `tx` left.\n+//!     let tx = tx.clone();\n+//!     // cloned tx dropped within thread\n+//!     thread::spawn(move || tx.send(\"ok\").unwrap());\n+//! }\n+//!\n+//! // Drop the last sender to stop `rx` waiting for message.\n+//! // The program will not complete if we comment this out.\n+//! // **All** `tx` needs to be dropped for `rx` to have `Err`.\n+//! drop(tx);\n+//!\n+//! // Unbounded receiver waiting for all senders to complete.\n+//! while let Ok(msg) = rx.recv() {\n+//!     println!(\"{}\", msg);\n+//! }\n+//!\n+//! println!(\"completed\");\n+//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -436,6 +465,9 @@ pub struct IntoIter<T> {\n ///\n /// Messages can be sent through this channel with [`send`].\n ///\n+/// Note: all senders (the original and the clones) need to be dropped for the receiver\n+/// to stop blocking to receive messages with [`Receiver::recv`].\n+///\n /// [`send`]: Sender::send\n ///\n /// # Examples\n@@ -642,7 +674,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// the same order as it was sent, and no [`send`] will block the calling thread\n /// (this channel has an \"infinite buffer\", unlike [`sync_channel`], which will\n /// block after its buffer limit is reached). [`recv`] will block until a message\n-/// is available.\n+/// is available while there is at least one [`Sender`] alive (including clones).\n ///\n /// The [`Sender`] can be cloned to [`send`] to the same channel multiple times, but\n /// only one [`Receiver`] is supported.\n@@ -805,6 +837,11 @@ impl<T> Sender<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Clone for Sender<T> {\n+    /// Clone a sender to send to other threads.\n+    ///\n+    /// Note, be aware of the lifetime of the sender because all senders\n+    /// (including the original) need to be dropped in order for\n+    /// [`Receiver::recv`] to stop blocking.\n     fn clone(&self) -> Sender<T> {\n         let packet = match *unsafe { self.inner() } {\n             Flavor::Oneshot(ref p) => {\n@@ -1063,9 +1100,10 @@ impl<T> Receiver<T> {\n     /// corresponding channel has hung up.\n     ///\n     /// This function will always block the current thread if there is no data\n-    /// available and it's possible for more data to be sent. Once a message is\n-    /// sent to the corresponding [`Sender`] (or [`SyncSender`]), then this\n-    /// receiver will wake up and return that message.\n+    /// available and it's possible for more data to be sent (at least one sender\n+    /// still exists). Once a message is sent to the corresponding [`Sender`]\n+    /// (or [`SyncSender`]), this receiver will wake up and return that\n+    /// message.\n     ///\n     /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n     /// this call is blocking, this call will wake up and return [`Err`] to\n@@ -1145,9 +1183,10 @@ impl<T> Receiver<T> {\n     /// corresponding channel has hung up, or if it waits more than `timeout`.\n     ///\n     /// This function will always block the current thread if there is no data\n-    /// available and it's possible for more data to be sent. Once a message is\n-    /// sent to the corresponding [`Sender`] (or [`SyncSender`]), then this\n-    /// receiver will wake up and return that message.\n+    /// available and it's possible for more data to be sent (at least one sender\n+    /// still exists). Once a message is sent to the corresponding [`Sender`]\n+    /// (or [`SyncSender`]), this receiver will wake up and return that\n+    /// message.\n     ///\n     /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n     /// this call is blocking, this call will wake up and return [`Err`] to"}]}