{"sha": "c5648981108e50cf706d146ad9e1b35742102a27", "node_id": "C_kwDOAAsO6NoAKGM1NjQ4OTgxMTA4ZTUwY2Y3MDZkMTQ2YWQ5ZTFiMzU3NDIxMDJhMjc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-27T15:46:48Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:12Z"}, "message": "Remove a now-useless field", "tree": {"sha": "6f3b558e782a2ffc67eb7eb9219a3c038a8be362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f3b558e782a2ffc67eb7eb9219a3c038a8be362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5648981108e50cf706d146ad9e1b35742102a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5648981108e50cf706d146ad9e1b35742102a27", "html_url": "https://github.com/rust-lang/rust/commit/c5648981108e50cf706d146ad9e1b35742102a27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5648981108e50cf706d146ad9e1b35742102a27/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d4b9b8b8bd3ea9c29f9cfefa686da785044ae9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4b9b8b8bd3ea9c29f9cfefa686da785044ae9a", "html_url": "https://github.com/rust-lang/rust/commit/3d4b9b8b8bd3ea9c29f9cfefa686da785044ae9a"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "195fbd7752065298138b1d24f917366d03ea2880", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5648981108e50cf706d146ad9e1b35742102a27/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5648981108e50cf706d146ad9e1b35742102a27/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=c5648981108e50cf706d146ad9e1b35742102a27", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyS};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyS, TypeFoldable};\n use rustc_span::{MultiSpan, Span};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n@@ -506,9 +506,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         outer_ty: &'tcx TyS<'tcx>,\n         orig_expected: Expectation<'tcx>,\n     ) -> Option<Span> {\n-        match (orig_expected, self.ret_coercion_impl_trait.map(|ty| (self.body_id.owner, ty))) {\n-            (Expectation::ExpectHasType(expected), Some(_))\n-                if self.in_tail_expr && self.can_coerce(outer_ty, expected) =>\n+        match orig_expected {\n+            Expectation::ExpectHasType(expected)\n+                if self.in_tail_expr\n+                    && self.ret_coercion.as_ref()?.borrow().merged_ty().has_opaque_types()\n+                    && self.can_coerce(outer_ty, expected) =>\n             {\n                 let obligations = self.fulfillment_cx.borrow().pending_obligations();\n                 let mut suggest_box = !obligations.is_empty();"}, {"sha": "d10d3e43b5b18fc8f58941bcb16cf742baa53e85", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5648981108e50cf706d146ad9e1b35742102a27/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5648981108e50cf706d146ad9e1b35742102a27/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=c5648981108e50cf706d146ad9e1b35742102a27", "patch": "@@ -95,11 +95,6 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(declared_ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());\n-    if let ty::Opaque(..) = declared_ret_ty.kind() {\n-        // FIXME(oli-obk): remove this and have diagnostics check the signature's return type directly\n-        // as we don't reveal here anymore.\n-        fcx.ret_coercion_impl_trait = Some(declared_ret_ty);\n-    }\n \n     let span = body.value.span;\n "}, {"sha": "234775ab45269c7845443fd67a7e9c34003ab841", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5648981108e50cf706d146ad9e1b35742102a27/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5648981108e50cf706d146ad9e1b35742102a27/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=c5648981108e50cf706d146ad9e1b35742102a27", "patch": "@@ -57,8 +57,6 @@ pub struct FnCtxt<'a, 'tcx> {\n     /// any).\n     pub(super) ret_coercion: Option<RefCell<DynamicCoerceMany<'tcx>>>,\n \n-    pub(super) ret_coercion_impl_trait: Option<Ty<'tcx>>,\n-\n     pub(super) ret_type_span: Option<Span>,\n \n     /// Used exclusively to reduce cost of advanced evaluation used for\n@@ -130,7 +128,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             param_env,\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,\n-            ret_coercion_impl_trait: None,\n             ret_type_span: None,\n             in_tail_expr: false,\n             ret_coercion_span: Cell::new(None),"}]}