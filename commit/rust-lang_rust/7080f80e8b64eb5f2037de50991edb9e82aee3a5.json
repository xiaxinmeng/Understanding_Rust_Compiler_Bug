{"sha": "7080f80e8b64eb5f2037de50991edb9e82aee3a5", "node_id": "C_kwDOAAsO6NoAKDcwODBmODBlOGI2NGViNWYyMDM3ZGU1MDk5MWVkYjllODJhZWUzYTU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-01-30T18:05:12Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-01-30T18:06:18Z"}, "message": "rustdoc: remove unnecessary wrapper div.item-decl from HTML", "tree": {"sha": "26c2d27d0b59e40d240a2a631e5e51e98a5ab8d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26c2d27d0b59e40d240a2a631e5e51e98a5ab8d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7080f80e8b64eb5f2037de50991edb9e82aee3a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7080f80e8b64eb5f2037de50991edb9e82aee3a5", "html_url": "https://github.com/rust-lang/rust/commit/7080f80e8b64eb5f2037de50991edb9e82aee3a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7080f80e8b64eb5f2037de50991edb9e82aee3a5/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "006ca9b14da1e0145844598b3d6a554c042c702a", "url": "https://api.github.com/repos/rust-lang/rust/commits/006ca9b14da1e0145844598b3d6a554c042c702a", "html_url": "https://github.com/rust-lang/rust/commit/006ca9b14da1e0145844598b3d6a554c042c702a"}], "stats": {"total": 1139, "additions": 549, "deletions": 590}, "files": [{"sha": "1644d1c5a29a78e561f2da29c5fa1004e9e93aec", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -58,11 +58,11 @@ pub(crate) fn render_example_with_highlighting(\n     write_footer(out, playground_button);\n }\n \n-/// Highlights `src` as a macro, returning the HTML output.\n-pub(crate) fn render_macro_with_highlighting(src: &str, out: &mut Buffer) {\n-    write_header(out, \"macro\", None, Tooltip::None);\n+/// Highlights `src` as an item-decl, returning the HTML output.\n+pub(crate) fn render_item_decl_with_highlighting(src: &str, out: &mut Buffer) {\n+    write!(out, \"<pre class=\\\"rust item-decl\\\">\");\n     write_code(out, src, None, None);\n-    write_footer(out, None);\n+    write!(out, \"</pre>\");\n }\n \n /// Highlights `src` as a source code page, returning the HTML output."}, {"sha": "71cde1f964cd96813e0a1da139df0e8c2a6490f4", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 272, "deletions": 312, "changes": 584, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -530,26 +530,24 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n     let notable_traits =\n         f.decl.output.as_return().and_then(|output| notable_traits_button(output, cx));\n \n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            w.reserve(header_len);\n-            write!(\n-                w,\n-                \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-                 {name}{generics}{decl}{notable_traits}{where_clause}\",\n-                vis = visibility,\n-                constness = constness,\n-                asyncness = asyncness,\n-                unsafety = unsafety,\n-                abi = abi,\n-                name = name,\n-                generics = f.generics.print(cx),\n-                where_clause = print_where_clause(&f.generics, cx, 0, Ending::Newline),\n-                decl = f.decl.full_print(header_len, 0, cx),\n-                notable_traits = notable_traits.unwrap_or_default(),\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        w.reserve(header_len);\n+        write!(\n+            w,\n+            \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n+                {name}{generics}{decl}{notable_traits}{where_clause}\",\n+            vis = visibility,\n+            constness = constness,\n+            asyncness = asyncness,\n+            unsafety = unsafety,\n+            abi = abi,\n+            name = name,\n+            generics = f.generics.print(cx),\n+            where_clause = print_where_clause(&f.generics, cx, 0, Ending::Newline),\n+            decl = f.decl.full_print(header_len, 0, cx),\n+            notable_traits = notable_traits.unwrap_or_default(),\n+        );\n     });\n     document(w, cx, it, None, HeadingOffset::H2);\n }\n@@ -569,145 +567,140 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n     let must_implement_one_of_functions = tcx.trait_def(t.def_id).must_implement_one_of.clone();\n \n     // Output the trait definition\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            write!(\n-                w,\n-                \"{}{}{}trait {}{}{}\",\n-                visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n-                t.unsafety(tcx).print_with_space(),\n-                if t.is_auto(tcx) { \"auto \" } else { \"\" },\n-                it.name.unwrap(),\n-                t.generics.print(cx),\n-                bounds\n-            );\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        write!(\n+            w,\n+            \"{}{}{}trait {}{}{}\",\n+            visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n+            t.unsafety(tcx).print_with_space(),\n+            if t.is_auto(tcx) { \"auto \" } else { \"\" },\n+            it.name.unwrap(),\n+            t.generics.print(cx),\n+            bounds\n+        );\n \n-            if !t.generics.where_predicates.is_empty() {\n-                write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, Ending::Newline));\n-            } else {\n-                w.write_str(\" \");\n-            }\n+        if !t.generics.where_predicates.is_empty() {\n+            write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, Ending::Newline));\n+        } else {\n+            w.write_str(\" \");\n+        }\n \n-            if t.items.is_empty() {\n-                w.write_str(\"{ }\");\n-            } else {\n-                // FIXME: we should be using a derived_id for the Anchors here\n-                w.write_str(\"{\\n\");\n-                let mut toggle = false;\n-\n-                // If there are too many associated types, hide _everything_\n-                if should_hide_fields(count_types) {\n-                    toggle = true;\n-                    toggle_open(\n-                        w,\n-                        format_args!(\n-                            \"{} associated items\",\n-                            count_types + count_consts + count_methods\n-                        ),\n-                    );\n-                }\n-                for types in [&required_types, &provided_types] {\n-                    for t in types {\n-                        render_assoc_item(\n-                            w,\n-                            t,\n-                            AssocItemLink::Anchor(None),\n-                            ItemType::Trait,\n-                            cx,\n-                            RenderMode::Normal,\n-                        );\n-                        w.write_str(\";\\n\");\n-                    }\n-                }\n-                // If there are too many associated constants, hide everything after them\n-                // We also do this if the types + consts is large because otherwise we could\n-                // render a bunch of types and _then_ a bunch of consts just because both were\n-                // _just_ under the limit\n-                if !toggle && should_hide_fields(count_types + count_consts) {\n-                    toggle = true;\n-                    toggle_open(\n-                        w,\n-                        format_args!(\n-                            \"{} associated constant{} and {} method{}\",\n-                            count_consts,\n-                            pluralize(count_consts),\n-                            count_methods,\n-                            pluralize(count_methods),\n-                        ),\n-                    );\n-                }\n-                if count_types != 0 && (count_consts != 0 || count_methods != 0) {\n-                    w.write_str(\"\\n\");\n-                }\n-                for consts in [&required_consts, &provided_consts] {\n-                    for c in consts {\n-                        render_assoc_item(\n-                            w,\n-                            c,\n-                            AssocItemLink::Anchor(None),\n-                            ItemType::Trait,\n-                            cx,\n-                            RenderMode::Normal,\n-                        );\n-                        w.write_str(\";\\n\");\n-                    }\n-                }\n-                if !toggle && should_hide_fields(count_methods) {\n-                    toggle = true;\n-                    toggle_open(w, format_args!(\"{} methods\", count_methods));\n-                }\n-                if count_consts != 0 && count_methods != 0 {\n-                    w.write_str(\"\\n\");\n-                }\n-                for (pos, m) in required_methods.iter().enumerate() {\n+        if t.items.is_empty() {\n+            w.write_str(\"{ }\");\n+        } else {\n+            // FIXME: we should be using a derived_id for the Anchors here\n+            w.write_str(\"{\\n\");\n+            let mut toggle = false;\n+\n+            // If there are too many associated types, hide _everything_\n+            if should_hide_fields(count_types) {\n+                toggle = true;\n+                toggle_open(\n+                    w,\n+                    format_args!(\"{} associated items\", count_types + count_consts + count_methods),\n+                );\n+            }\n+            for types in [&required_types, &provided_types] {\n+                for t in types {\n                     render_assoc_item(\n                         w,\n-                        m,\n+                        t,\n                         AssocItemLink::Anchor(None),\n                         ItemType::Trait,\n                         cx,\n                         RenderMode::Normal,\n                     );\n                     w.write_str(\";\\n\");\n-\n-                    if pos < required_methods.len() - 1 {\n-                        w.write_str(\"<span class=\\\"item-spacer\\\"></span>\");\n-                    }\n-                }\n-                if !required_methods.is_empty() && !provided_methods.is_empty() {\n-                    w.write_str(\"\\n\");\n                 }\n-                for (pos, m) in provided_methods.iter().enumerate() {\n+            }\n+            // If there are too many associated constants, hide everything after them\n+            // We also do this if the types + consts is large because otherwise we could\n+            // render a bunch of types and _then_ a bunch of consts just because both were\n+            // _just_ under the limit\n+            if !toggle && should_hide_fields(count_types + count_consts) {\n+                toggle = true;\n+                toggle_open(\n+                    w,\n+                    format_args!(\n+                        \"{} associated constant{} and {} method{}\",\n+                        count_consts,\n+                        pluralize(count_consts),\n+                        count_methods,\n+                        pluralize(count_methods),\n+                    ),\n+                );\n+            }\n+            if count_types != 0 && (count_consts != 0 || count_methods != 0) {\n+                w.write_str(\"\\n\");\n+            }\n+            for consts in [&required_consts, &provided_consts] {\n+                for c in consts {\n                     render_assoc_item(\n                         w,\n-                        m,\n+                        c,\n                         AssocItemLink::Anchor(None),\n                         ItemType::Trait,\n                         cx,\n                         RenderMode::Normal,\n                     );\n-                    match *m.kind {\n-                        clean::MethodItem(ref inner, _)\n-                            if !inner.generics.where_predicates.is_empty() =>\n-                        {\n-                            w.write_str(\",\\n    { ... }\\n\");\n-                        }\n-                        _ => {\n-                            w.write_str(\" { ... }\\n\");\n-                        }\n-                    }\n+                    w.write_str(\";\\n\");\n+                }\n+            }\n+            if !toggle && should_hide_fields(count_methods) {\n+                toggle = true;\n+                toggle_open(w, format_args!(\"{} methods\", count_methods));\n+            }\n+            if count_consts != 0 && count_methods != 0 {\n+                w.write_str(\"\\n\");\n+            }\n+            for (pos, m) in required_methods.iter().enumerate() {\n+                render_assoc_item(\n+                    w,\n+                    m,\n+                    AssocItemLink::Anchor(None),\n+                    ItemType::Trait,\n+                    cx,\n+                    RenderMode::Normal,\n+                );\n+                w.write_str(\";\\n\");\n \n-                    if pos < provided_methods.len() - 1 {\n-                        w.write_str(\"<span class=\\\"item-spacer\\\"></span>\");\n+                if pos < required_methods.len() - 1 {\n+                    w.write_str(\"<span class=\\\"item-spacer\\\"></span>\");\n+                }\n+            }\n+            if !required_methods.is_empty() && !provided_methods.is_empty() {\n+                w.write_str(\"\\n\");\n+            }\n+            for (pos, m) in provided_methods.iter().enumerate() {\n+                render_assoc_item(\n+                    w,\n+                    m,\n+                    AssocItemLink::Anchor(None),\n+                    ItemType::Trait,\n+                    cx,\n+                    RenderMode::Normal,\n+                );\n+                match *m.kind {\n+                    clean::MethodItem(ref inner, _)\n+                        if !inner.generics.where_predicates.is_empty() =>\n+                    {\n+                        w.write_str(\",\\n    { ... }\\n\");\n+                    }\n+                    _ => {\n+                        w.write_str(\" { ... }\\n\");\n                     }\n                 }\n-                if toggle {\n-                    toggle_close(w);\n+\n+                if pos < provided_methods.len() - 1 {\n+                    w.write_str(\"<span class=\\\"item-spacer\\\"></span>\");\n                 }\n-                w.write_str(\"}\");\n             }\n-        });\n+            if toggle {\n+                toggle_close(w);\n+            }\n+            w.write_str(\"}\");\n+        }\n     });\n \n     // Trait documentation\n@@ -1050,18 +1043,16 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n }\n \n fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            write!(\n-                w,\n-                \"trait {}{}{} = {};\",\n-                it.name.unwrap(),\n-                t.generics.print(cx),\n-                print_where_clause(&t.generics, cx, 0, Ending::Newline),\n-                bounds(&t.bounds, true, cx)\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        write!(\n+            w,\n+            \"trait {}{}{} = {};\",\n+            it.name.unwrap(),\n+            t.generics.print(cx),\n+            print_where_clause(&t.generics, cx, 0, Ending::Newline),\n+            bounds(&t.bounds, true, cx)\n+        );\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1074,18 +1065,16 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n }\n \n fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            write!(\n-                w,\n-                \"type {}{}{where_clause} = impl {bounds};\",\n-                it.name.unwrap(),\n-                t.generics.print(cx),\n-                where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n-                bounds = bounds(&t.bounds, false, cx),\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        write!(\n+            w,\n+            \"type {}{}{where_clause} = impl {bounds};\",\n+            it.name.unwrap(),\n+            t.generics.print(cx),\n+            where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n+            bounds = bounds(&t.bounds, false, cx),\n+        );\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1113,7 +1102,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n         });\n     }\n \n-    wrap_into_item_decl(w, |w| write_content(w, cx, it, t));\n+    write_content(w, cx, it, t);\n \n     document(w, cx, it, None, HeadingOffset::H2);\n \n@@ -1127,11 +1116,9 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n }\n \n fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Union) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            render_union(w, it, Some(&s.generics), &s.fields, \"\", cx);\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        render_union(w, it, Some(&s.generics), &s.fields, \"\", cx);\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1192,60 +1179,58 @@ fn print_tuple_struct_fields(w: &mut Buffer, cx: &Context<'_>, s: &[clean::Item]\n fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::Enum) {\n     let tcx = cx.tcx();\n     let count_variants = e.variants().count();\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n-            write!(\n-                w,\n-                \"{}enum {}{}\",\n-                visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n-                it.name.unwrap(),\n-                e.generics.print(cx),\n-            );\n-            if !print_where_clause_and_check(w, &e.generics, cx) {\n-                // If there wasn't a `where` clause, we add a whitespace.\n-                w.write_str(\" \");\n-            }\n+    wrap_item(w, |w| {\n+        render_attributes_in_pre(w, it, \"\");\n+        write!(\n+            w,\n+            \"{}enum {}{}\",\n+            visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n+            it.name.unwrap(),\n+            e.generics.print(cx),\n+        );\n+        if !print_where_clause_and_check(w, &e.generics, cx) {\n+            // If there wasn't a `where` clause, we add a whitespace.\n+            w.write_str(\" \");\n+        }\n \n-            let variants_stripped = e.has_stripped_entries();\n-            if count_variants == 0 && !variants_stripped {\n-                w.write_str(\"{}\");\n-            } else {\n-                w.write_str(\"{\\n\");\n-                let toggle = should_hide_fields(count_variants);\n-                if toggle {\n-                    toggle_open(w, format_args!(\"{} variants\", count_variants));\n-                }\n-                for v in e.variants() {\n-                    w.write_str(\"    \");\n-                    let name = v.name.unwrap();\n-                    match *v.kind {\n-                        // FIXME(#101337): Show discriminant\n-                        clean::VariantItem(ref var) => match var.kind {\n-                            clean::VariantKind::CLike => write!(w, \"{}\", name),\n-                            clean::VariantKind::Tuple(ref s) => {\n-                                write!(w, \"{}(\", name);\n-                                print_tuple_struct_fields(w, cx, s);\n-                                w.write_str(\")\");\n-                            }\n-                            clean::VariantKind::Struct(ref s) => {\n-                                render_struct(w, v, None, None, &s.fields, \"    \", false, cx);\n-                            }\n-                        },\n-                        _ => unreachable!(),\n-                    }\n-                    w.write_str(\",\\n\");\n+        let variants_stripped = e.has_stripped_entries();\n+        if count_variants == 0 && !variants_stripped {\n+            w.write_str(\"{}\");\n+        } else {\n+            w.write_str(\"{\\n\");\n+            let toggle = should_hide_fields(count_variants);\n+            if toggle {\n+                toggle_open(w, format_args!(\"{} variants\", count_variants));\n+            }\n+            for v in e.variants() {\n+                w.write_str(\"    \");\n+                let name = v.name.unwrap();\n+                match *v.kind {\n+                    // FIXME(#101337): Show discriminant\n+                    clean::VariantItem(ref var) => match var.kind {\n+                        clean::VariantKind::CLike => write!(w, \"{}\", name),\n+                        clean::VariantKind::Tuple(ref s) => {\n+                            write!(w, \"{}(\", name);\n+                            print_tuple_struct_fields(w, cx, s);\n+                            w.write_str(\")\");\n+                        }\n+                        clean::VariantKind::Struct(ref s) => {\n+                            render_struct(w, v, None, None, &s.fields, \"    \", false, cx);\n+                        }\n+                    },\n+                    _ => unreachable!(),\n                 }\n+                w.write_str(\",\\n\");\n+            }\n \n-                if variants_stripped {\n-                    w.write_str(\"    // some variants omitted\\n\");\n-                }\n-                if toggle {\n-                    toggle_close(w);\n-                }\n-                w.write_str(\"}\");\n+            if variants_stripped {\n+                w.write_str(\"    // some variants omitted\\n\");\n             }\n-        });\n+            if toggle {\n+                toggle_close(w);\n+            }\n+            w.write_str(\"}\");\n+        }\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1346,38 +1331,30 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n }\n \n fn item_macro(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::Macro) {\n-    wrap_into_item_decl(w, |w| {\n-        highlight::render_macro_with_highlighting(&t.source, w);\n-    });\n+    highlight::render_item_decl_with_highlighting(&t.source, w);\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_proc_macro(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, m: &clean::ProcMacro) {\n-    wrap_into_item_decl(w, |w| {\n+    wrap_item(w, |w| {\n         let name = it.name.expect(\"proc-macros always have names\");\n         match m.kind {\n             MacroKind::Bang => {\n-                wrap_item(w, |w| {\n-                    write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n-                });\n+                write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n             }\n             MacroKind::Attr => {\n-                wrap_item(w, |w| {\n-                    write!(w, \"#[{}]\", name);\n-                });\n+                write!(w, \"#[{}]\", name);\n             }\n             MacroKind::Derive => {\n-                wrap_item(w, |w| {\n-                    write!(w, \"#[derive({})]\", name);\n-                    if !m.helpers.is_empty() {\n-                        w.push_str(\"\\n{\\n\");\n-                        w.push_str(\"    // Attributes available to this derive:\\n\");\n-                        for attr in &m.helpers {\n-                            writeln!(w, \"    #[{}]\", attr);\n-                        }\n-                        w.push_str(\"}\\n\");\n+                write!(w, \"#[derive({})]\", name);\n+                if !m.helpers.is_empty() {\n+                    w.push_str(\"\\n{\\n\");\n+                    w.push_str(\"    // Attributes available to this derive:\\n\");\n+                    for attr in &m.helpers {\n+                        writeln!(w, \"    #[{}]\", attr);\n                     }\n-                });\n+                    w.push_str(\"}\\n\");\n+                }\n             }\n         }\n     });\n@@ -1400,61 +1377,57 @@ fn item_primitive(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n }\n \n fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &clean::Constant) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            let tcx = cx.tcx();\n-            render_attributes_in_code(w, it);\n+    wrap_item(w, |w| {\n+        let tcx = cx.tcx();\n+        render_attributes_in_code(w, it);\n \n-            write!(\n-                w,\n-                \"{vis}const {name}: {typ}\",\n-                vis = visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n-                name = it.name.unwrap(),\n-                typ = c.type_.print(cx),\n-            );\n+        write!(\n+            w,\n+            \"{vis}const {name}: {typ}\",\n+            vis = visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n+            name = it.name.unwrap(),\n+            typ = c.type_.print(cx),\n+        );\n \n-            // FIXME: The code below now prints\n-            //            ` = _; // 100i32`\n-            //        if the expression is\n-            //            `50 + 50`\n-            //        which looks just wrong.\n-            //        Should we print\n-            //            ` = 100i32;`\n-            //        instead?\n-\n-            let value = c.value(tcx);\n-            let is_literal = c.is_literal(tcx);\n-            let expr = c.expr(tcx);\n-            if value.is_some() || is_literal {\n-                write!(w, \" = {expr};\", expr = Escape(&expr));\n-            } else {\n-                w.write_str(\";\");\n-            }\n+        // FIXME: The code below now prints\n+        //            ` = _; // 100i32`\n+        //        if the expression is\n+        //            `50 + 50`\n+        //        which looks just wrong.\n+        //        Should we print\n+        //            ` = 100i32;`\n+        //        instead?\n+\n+        let value = c.value(tcx);\n+        let is_literal = c.is_literal(tcx);\n+        let expr = c.expr(tcx);\n+        if value.is_some() || is_literal {\n+            write!(w, \" = {expr};\", expr = Escape(&expr));\n+        } else {\n+            w.write_str(\";\");\n+        }\n \n-            if !is_literal {\n-                if let Some(value) = &value {\n-                    let value_lowercase = value.to_lowercase();\n-                    let expr_lowercase = expr.to_lowercase();\n+        if !is_literal {\n+            if let Some(value) = &value {\n+                let value_lowercase = value.to_lowercase();\n+                let expr_lowercase = expr.to_lowercase();\n \n-                    if value_lowercase != expr_lowercase\n-                        && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n-                    {\n-                        write!(w, \" // {value}\", value = Escape(value));\n-                    }\n+                if value_lowercase != expr_lowercase\n+                    && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n+                {\n+                    write!(w, \" // {value}\", value = Escape(value));\n                 }\n             }\n-        });\n+        }\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Struct) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_code(w, it);\n-            render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_code(w, it);\n+        render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1503,34 +1476,30 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n }\n \n fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            render_attributes_in_code(w, it);\n-            write!(\n-                w,\n-                \"{vis}static {mutability}{name}: {typ}\",\n-                vis = visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n-                mutability = s.mutability.print_with_space(),\n-                name = it.name.unwrap(),\n-                typ = s.type_.print(cx)\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        render_attributes_in_code(w, it);\n+        write!(\n+            w,\n+            \"{vis}static {mutability}{name}: {typ}\",\n+            vis = visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n+            mutability = s.mutability.print_with_space(),\n+            name = it.name.unwrap(),\n+            typ = s.type_.print(cx)\n+        );\n     });\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n-    wrap_into_item_decl(w, |w| {\n-        wrap_item(w, |w| {\n-            w.write_str(\"extern {\\n\");\n-            render_attributes_in_code(w, it);\n-            write!(\n-                w,\n-                \"    {}type {};\\n}}\",\n-                visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n-                it.name.unwrap(),\n-            );\n-        });\n+    wrap_item(w, |w| {\n+        w.write_str(\"extern {\\n\");\n+        render_attributes_in_code(w, it);\n+        write!(\n+            w,\n+            \"    {}type {};\\n}}\",\n+            visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n+            it.name.unwrap(),\n+        );\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1609,20 +1578,11 @@ fn bounds(t_bounds: &[clean::GenericBound], trait_alias: bool, cx: &Context<'_>)\n     bounds\n }\n \n-fn wrap_into_item_decl<F>(w: &mut Buffer, f: F)\n-where\n-    F: FnOnce(&mut Buffer),\n-{\n-    w.write_str(\"<div class=\\\"item-decl\\\">\");\n-    f(w);\n-    w.write_str(\"</div>\")\n-}\n-\n fn wrap_item<F>(w: &mut Buffer, f: F)\n where\n     F: FnOnce(&mut Buffer),\n {\n-    w.write_str(r#\"<pre class=\"rust\"><code>\"#);\n+    w.write_str(r#\"<pre class=\"rust item-decl\"><code>\"#);\n     f(w);\n     w.write_str(\"</code></pre>\");\n }"}, {"sha": "e9f0ae39f3ef366ca12ef9fccc654c1686034c7d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -335,7 +335,7 @@ pre {\n \tpadding: 14px;\n \tline-height: 1.5; /* https://github.com/rust-lang/rust/issues/105906 */\n }\n-.item-decl pre {\n+pre.item-decl {\n \toverflow-x: auto;\n }\n /* This rule allows to have scrolling on the X axis. */"}, {"sha": "ca337cbc323e219c56590138e641e6c1c33f0cae", "filename": "tests/rustdoc-gui/code-tags.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc-gui%2Fcode-tags.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc-gui%2Fcode-tags.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fcode-tags.goml?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -9,16 +9,16 @@ size: (1080, 600)\n // Check that their content is inside <pre><code>\n assert-count: (\".example-wrap pre > code\", 4)\n // Check that function signature is inside <pre><code>\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/enum.AnEnum.html\"\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait.AnotherOne.html\"\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/type.SomeType.html\"\n-assert: \".item-decl pre.rust > code\"\n+assert: \"pre.rust.item-decl > code\""}, {"sha": "aad334d2bd29586e8aef37365aaacae1cf9e610b", "filename": "tests/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ffont-weight.goml?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,6 +1,6 @@\n // This test checks that the font weight is correctly applied.\n goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.Foo.html\"\n-assert-css: (\"//*[@class='item-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n+assert-css: (\"//*[@class='rust item-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n assert-css: (\n     \"//*[@class='structfield small-section-header']//a[text()='Alias']\",\n     {\"font-weight\": \"400\"},\n@@ -19,8 +19,7 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n \n // This is a complex selector, so here's how it works:\n //\n-// * //*[@class='item-decl'] \u2014 selects element of any tag with classes docblock and item-decl\n-// * /pre[@class='rust'] \u2014 selects immediate child with tag pre and class rust\n+// * //pre[@class='rust item-decl'] \u2014 selects item-decl code block\n // * /code \u2014 selects immediate child with tag code\n // * /a[@class='constant'] \u2014 selects immediate child with tag a and class constant\n // * //text() \u2014 selects child that is text node\n@@ -29,11 +28,11 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n // This uses '/parent::*' as a proxy for the style of the text node.\n // We can't just select the '<a>' because intermediate tags could be added.\n assert-count: (\n-    \"//*[@class='item-decl']/pre[@class='rust']/code/a[@class='constant']//text()/parent::*\",\n+    \"//pre[@class='rust item-decl']/code/a[@class='constant']//text()/parent::*\",\n     1,\n )\n assert-css: (\n-    \"//*[@class='item-decl']/pre[@class='rust']/code/a[@class='constant']//text()/parent::*\",\n+    \"//pre[@class='rust item-decl']/code/a[@class='constant']//text()/parent::*\",\n     {\"font-weight\": \"400\"},\n )\n "}, {"sha": "4c477d70c8956e1a1335a5d6a5859d5bfec6ebfe", "filename": "tests/rustdoc-gui/list_code_block.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc-gui%2Flist_code_block.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc-gui%2Flist_code_block.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Flist_code_block.goml?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,4 +1,4 @@\n // This test checks that code blocks in list are supported.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n goto: \"./fn.check_list_code_block.html\"\n-assert: (\".item-decl pre.rust\")\n+assert: (\"pre.rust.item-decl\")"}, {"sha": "708e9dca0ee7b5d73e56d87a21ff2e9ec541216e", "filename": "tests/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -12,7 +12,7 @@ size: (1100, 800)\n // Logically, the <body> scroll width should be the width of the window.\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // However, since there is overflow in the type declaration, its scroll width is bigger.\n-assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1324\"})\n+assert-property: (\"pre.item-decl\", {\"scrollWidth\": \"1324\"})\n \n // In the table-ish view on the module index, the name should not be wrapped more than necessary.\n goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/index.html\"\n@@ -24,7 +24,7 @@ assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n // And now checking that it has scrollable content.\n-assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1103\"})\n+assert-property: (\"pre.item-decl\", {\"scrollWidth\": \"1103\"})\n \n // ... and constant.\n // On a sidenote, it also checks that the (very) long title isn't changing the docblock width.\n@@ -33,7 +33,7 @@ assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n // And now checking that it has scrollable content.\n-assert-property: (\".item-decl pre\", {\"scrollWidth\": \"950\"})\n+assert-property: (\"pre.item-decl\", {\"scrollWidth\": \"950\"})\n \n // On mobile:\n size: (600, 600)\n@@ -65,12 +65,12 @@ compare-elements-position-false: (\".main-heading h1\", \".main-heading .out-of-ban\n goto: \"file://\" + |DOC_PATH| + \"/lib2/scroll_traits/trait.Iterator.html\"\n \n click: \".item-decl .type-contents-toggle\"\n-assert-property: (\".item-decl > pre\", {\"scrollLeft\": 0})\n-scroll-to: \"//*[@class='item-decl']//details/a[text()='String']\"\n-assert-property-false: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+assert-property: (\"pre.item-decl\", {\"scrollLeft\": 0})\n+scroll-to: \"//*[@class='rust item-decl']//details/a[text()='String']\"\n+assert-property-false: (\"pre.item-decl\", {\"scrollLeft\": 0})\n \n // Then on an item without \"hidden methods\".\n goto: \"file://\" + |DOC_PATH| + \"/lib2/scroll_traits/trait.TraitWithLongItemsName.html\"\n-assert-property: (\".item-decl > pre\", {\"scrollLeft\": 0})\n-scroll-to: \"//*[@class='item-decl']//code/a[text()='String']\"\n-assert-property-false: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+assert-property: (\"pre.item-decl\", {\"scrollLeft\": 0})\n+scroll-to: \"//*[@class='rust item-decl']//code/a[text()='String']\"\n+assert-property-false: (\"pre.item-decl\", {\"scrollLeft\": 0})"}, {"sha": "8ee294daa963d7e535c23889f4eb83277c94f430", "filename": "tests/rustdoc/array-links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Farray-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Farray-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Farray-links.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -4,25 +4,25 @@\n pub struct MyBox<T: ?Sized>(*const T);\n \n // @has 'foo/fn.alpha.html'\n-// @snapshot link_slice_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_slice_u32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn alpha() -> &'static [u32; 1] {\n     loop {}\n }\n \n // @has 'foo/fn.beta.html'\n-// @snapshot link_slice_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_slice_generic - '//pre[@class=\"rust item-decl\"]/code'\n pub fn beta<T>() -> &'static [T; 1] {\n     loop {}\n }\n \n // @has 'foo/fn.gamma.html'\n-// @snapshot link_box_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_box_u32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn gamma() -> MyBox<[u32; 1]> {\n     loop {}\n }\n \n // @has 'foo/fn.delta.html'\n-// @snapshot link_box_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_box_generic - '//pre[@class=\"rust item-decl\"]/code'\n pub fn delta<T>() -> MyBox<[T; 1]> {\n     loop {}\n }"}, {"sha": "68a11c57b5292e81cf5abda3dbccf75156cac080", "filename": "tests/rustdoc/assoc-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-consts.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,5 +1,5 @@\n pub trait Foo {\n-    // @has assoc_consts/trait.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has assoc_consts/trait.Foo.html '//pre[@class=\"rust item-decl\"]' \\\n     //      'const FOO: usize = 13usize;'\n     // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n     const FOO: usize = 12 + 1;"}, {"sha": "ad8235985bcf06e45a1a842df03f1778b6abb362", "filename": "tests/rustdoc/assoc-item-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fassoc-item-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fassoc-item-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-item-cast.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -10,5 +10,5 @@ pub trait AsExpression<T> {\n }\n \n // @has foo/type.AsExprOf.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n pub type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;"}, {"sha": "e74db7578d132cd6379bf3e6af46b4ca89c0f230", "filename": "tests/rustdoc/assoc-types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-types.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -12,8 +12,8 @@ pub trait Index<I: ?Sized> {\n }\n \n // @has assoc_types/fn.use_output.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '-> &T::Output'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Index.html#associatedtype.Output\"]' 'Output'\n+// @has - '//pre[@class=\"rust item-decl\"]' '-> &T::Output'\n+// @has - '//pre[@class=\"rust item-decl\"]//a[@href=\"trait.Index.html#associatedtype.Output\"]' 'Output'\n pub fn use_output<T: Index<usize>>(obj: &T, index: usize) -> &T::Output {\n     obj.index(index)\n }\n@@ -23,13 +23,13 @@ pub trait Feed {\n }\n \n // @has assoc_types/fn.use_input.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'T::Input'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'T::Input'\n+// @has - '//pre[@class=\"rust item-decl\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn use_input<T: Feed>(_feed: &T, _element: T::Input) { }\n \n // @has assoc_types/fn.cmp_input.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T::Input: PartialEq<U::Input>'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'where T::Input: PartialEq<U::Input>'\n+// @has - '//pre[@class=\"rust item-decl\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn cmp_input<T: Feed, U: Feed>(a: &T::Input, b: &U::Input) -> bool\n     where T::Input: PartialEq<U::Input>\n {"}, {"sha": "3db344af67439c5c877b2d532dfc538eea9623d5", "filename": "tests/rustdoc/async-fn.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fasync-fn.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,35 +1,35 @@\n // edition:2018\n-// @has async_fn/fn.foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn foo() -> Option<Foo>'\n+// @has async_fn/fn.foo.html '//pre[@class=\"rust item-decl\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {\n     None\n }\n \n-// @has async_fn/fn.bar.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n+// @has async_fn/fn.bar.html '//pre[@class=\"rust item-decl\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n pub async fn bar(a: i32, b: i32) -> i32 {\n     0\n }\n \n-// @has async_fn/fn.baz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn baz<T>(a: T) -> T'\n+// @has async_fn/fn.baz.html '//pre[@class=\"rust item-decl\"]' 'pub async fn baz<T>(a: T) -> T'\n pub async fn baz<T>(a: T) -> T {\n     a\n }\n \n-// @has async_fn/fn.qux.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async unsafe fn qux() -> char'\n+// @has async_fn/fn.qux.html '//pre[@class=\"rust item-decl\"]' 'pub async unsafe fn qux() -> char'\n pub async unsafe fn qux() -> char {\n     '\u26a0'\n }\n \n-// @has async_fn/fn.mut_args.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn mut_args(a: usize)'\n+// @has async_fn/fn.mut_args.html '//pre[@class=\"rust item-decl\"]' 'pub async fn mut_args(a: usize)'\n pub async fn mut_args(mut a: usize) {}\n \n-// @has async_fn/fn.mut_ref.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn mut_ref(x: i32)'\n+// @has async_fn/fn.mut_ref.html '//pre[@class=\"rust item-decl\"]' 'pub async fn mut_ref(x: i32)'\n pub async fn mut_ref(ref mut x: i32) {}\n \n trait Bar {}\n \n impl Bar for () {}\n \n-// @has async_fn/fn.quux.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn quux() -> impl Bar'\n+// @has async_fn/fn.quux.html '//pre[@class=\"rust item-decl\"]' 'pub async fn quux() -> impl Bar'\n pub async fn quux() -> impl Bar {\n     ()\n }\n@@ -50,27 +50,27 @@ pub trait Pattern<'a> {}\n \n pub trait Trait<const N: usize> {}\n // @has async_fn/fn.const_generics.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}\n \n // test that elided lifetimes are properly elided and not displayed as `'_`\n // regression test for #63037\n // @has async_fn/fn.elided.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn elided(foo: &str) -> &str'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub async fn elided(foo: &str) -> &str'\n pub async fn elided(foo: &str) -> &str {}\n // This should really be shown as written, but for implementation reasons it's difficult.\n // See `impl Clean for TyKind::Ref`.\n // @has async_fn/fn.user_elided.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn user_elided(foo: &str) -> &str'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub async fn user_elided(foo: &str) -> &str'\n pub async fn user_elided(foo: &'_ str) -> &str {}\n // @has async_fn/fn.static_trait.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n pub async fn static_trait(foo: &str) -> Box<dyn Bar> {}\n // @has async_fn/fn.lifetime_for_trait.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_> {}\n // @has async_fn/fn.elided_in_input_trait.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n pub async fn elided_in_input_trait(t: impl Pattern<'_>) {}\n \n struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n@@ -88,8 +88,8 @@ impl Foo {\n \n // test named lifetimes, just in case\n // @has async_fn/fn.named.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n pub async fn named<'a, 'b>(foo: &'a str) -> &'b str {}\n // @has async_fn/fn.named_trait.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b> {}"}, {"sha": "a652fda1604cdbc6ea6fac045925a4c8ca5da0de", "filename": "tests/rustdoc/attribute-rendering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fattribute-rendering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fattribute-rendering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fattribute-rendering.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,7 +1,7 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/fn.f.html'\n-// @has - //*[@'class=\"item-decl\"]' '#[export_name = \"f\"] pub fn f()'\n+// @has - //*[@'class=\"rust item-decl\"]' '#[export_name = \"f\"] pub fn f()'\n #[export_name = \"\\\n f\"]\n pub fn f() {}"}, {"sha": "86333c7534a3f0e61be90c62aa9f52ec6a7d64dd", "filename": "tests/rustdoc/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fattributes.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,13 +1,13 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/fn.f.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '#[no_mangle]'\n+// @has foo/fn.f.html '//pre[@class=\"rust item-decl\"]' '#[no_mangle]'\n #[no_mangle]\n pub extern \"C\" fn f() {}\n \n-// @has foo/fn.g.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '#[export_name = \"bar\"]'\n+// @has foo/fn.g.html '//pre[@class=\"rust item-decl\"]' '#[export_name = \"bar\"]'\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @has foo/struct.Repr.html '//div[@class=\"item-decl\"]' '#[repr(C, align(8))]'\n+// @has foo/struct.Repr.html '//pre[@class=\"rust item-decl\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "5db4fe053af6e00d7ba35e7002fd0dbe084645f1", "filename": "tests/rustdoc/auxiliary/issue-85454.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,5 +1,5 @@\n // @has issue_85454/trait.FromResidual.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n }"}, {"sha": "f661618568121c2d4d611b028e00e89132bf6f1e", "filename": "tests/rustdoc/const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-fn.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,7 +1,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const fn bar() -> '\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub const fn bar() -> '\n /// foo\n pub const fn bar() -> usize {\n     2"}, {"sha": "195e47bc8ba80aff1557b80618c1e7415e1c5b7a", "filename": "tests/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -2,7 +2,7 @@\n \n use std::ops::Add;\n \n-// @has foo/struct.Simd.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Simd<T, const WIDTH: usize>'\n+// @has foo/struct.Simd.html '//pre[@class=\"rust item-decl\"]' 'pub struct Simd<T, const WIDTH: usize>'\n pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }"}, {"sha": "f781c6a62f24b4b397e6594e9b8073880052abe4", "filename": "tests/rustdoc/const-generics/const-generic-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.Foo.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(_);'\n pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(T);"}, {"sha": "ade70bbe80d923a1b5f02467eecd13e6e4b5916e", "filename": "tests/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -3,21 +3,21 @@\n #![crate_name = \"foo\"]\n \n extern crate extern_crate;\n-// @has foo/fn.extern_fn.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.extern_fn.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]>'\n pub use extern_crate::extern_fn;\n-// @has foo/struct.ExternTy.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.ExternTy.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct ExternTy<const N: usize> {'\n pub use extern_crate::ExternTy;\n-// @has foo/type.TyAlias.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/type.TyAlias.html '//pre[@class=\"rust item-decl\"]' \\\n //      'type TyAlias<const N: usize> = ExternTy<N>;'\n pub use extern_crate::TyAlias;\n-// @has foo/trait.WTrait.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/trait.WTrait.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub trait WTrait<const N: usize, const M: usize>'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn hey<const P: usize>() -> usize'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn hey<const P: usize>() -> usize'\n pub use extern_crate::WTrait;\n \n-// @has foo/trait.Trait.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/trait.Trait.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub trait Trait<const N: usize>'\n // @has - '//*[@id=\"impl-Trait%3C1%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<1> for u8'\n // @has - '//*[@id=\"impl-Trait%3C2%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<2> for u8'\n@@ -30,10 +30,10 @@ impl Trait<2> for u8 {}\n impl Trait<{1 + 2}> for u8 {}\n impl<const N: usize> Trait<N> for [u8; N] {}\n \n-// @has foo/struct.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.Foo.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct Foo<const N: usize>where u8: Trait<N>'\n pub struct Foo<const N: usize> where u8: Trait<N>;\n-// @has foo/struct.Bar.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Bar<T, const N: usize>(_)'\n+// @has foo/struct.Bar.html '//pre[@class=\"rust item-decl\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n // @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header\"]' 'impl<const M: usize> Foo<M>where u8: Trait<M>'\n@@ -56,32 +56,32 @@ impl<const M: usize> Bar<u8, M> {\n     }\n }\n \n-// @has foo/fn.test.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.test.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub fn test<const N: usize>() -> impl Trait<N>where u8: Trait<N>'\n pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N> {\n     2u8\n }\n \n-// @has foo/fn.a_sink.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.a_sink.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N>'\n pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N> {\n     v\n }\n \n-// @has foo/fn.b_sink.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.b_sink.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub async fn b_sink<const N: usize>(_: impl Trait<N>)'\n pub async fn b_sink<const N: usize>(_: impl Trait<N>) {}\n \n-// @has foo/fn.concrete.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.concrete.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub fn concrete() -> [u8; 22]'\n pub fn concrete() -> [u8; 3 + std::mem::size_of::<u64>() << 1] {\n     Default::default()\n }\n \n-// @has foo/type.Faz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/type.Faz.html '//pre[@class=\"rust item-decl\"]' \\\n //      'type Faz<const N: usize> = [u8; N];'\n pub type Faz<const N: usize> = [u8; N];\n-// @has foo/type.Fiz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/type.Fiz.html '//pre[@class=\"rust item-decl\"]' \\\n //      'type Fiz<const N: usize> = [[u8; N]; 48];'\n pub type Fiz<const N: usize> = [[u8; N]; 3 << 4];\n \n@@ -91,7 +91,7 @@ macro_rules! define_me {\n     }\n }\n \n-// @has foo/struct.Foz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.Foz.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct Foz<const N: usize>(_);'\n define_me!(Foz<N>);\n \n@@ -103,13 +103,13 @@ impl<const N: usize> Q for [u8; N] {\n     const ASSOC: usize = N;\n }\n \n-// @has foo/fn.q_user.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/fn.q_user.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub fn q_user() -> [u8; 13]'\n pub fn q_user() -> [u8; <[u8; 13] as Q>::ASSOC] {\n     [0; <[u8; 13] as Q>::ASSOC]\n }\n \n-// @has foo/union.Union.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/union.Union.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub union Union<const N: usize>'\n pub union Union<const N: usize> {\n     // @has - //pre \"pub arr: [u8; N]\"\n@@ -118,7 +118,7 @@ pub union Union<const N: usize> {\n     pub another_arr: [(); N],\n }\n \n-// @has foo/enum.Enum.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/enum.Enum.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub enum Enum<const N: usize>'\n pub enum Enum<const N: usize> {\n     // @has - //pre \"Variant([u8; N])\""}, {"sha": "91866b7d890c77f34d8d78544694d831e496da61", "filename": "tests/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -8,7 +8,7 @@ pub enum Order {\n     Unsorted,\n }\n \n-// @has foo/struct.VSet.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct VSet<T, const ORDER: Order>'\n+// @has foo/struct.VSet.html '//pre[@class=\"rust item-decl\"]' 'pub struct VSet<T, const ORDER: Order>'\n // @has foo/struct.VSet.html '//*[@id=\"impl-Send-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n // @has foo/struct.VSet.html '//*[@id=\"impl-Sync-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {"}, {"sha": "e23b3006da6cda335b7670fd964860c5908d030f", "filename": "tests/rustdoc/const-generics/generic_const_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -2,6 +2,6 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n // make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n-// @has foo/struct.Ice.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/struct.Ice.html '//pre[@class=\"rust item-decl\"]' \\\n //      'pub struct Ice<const N: usize>;'\n pub struct Ice<const N: usize> where [(); N + 1]:;"}, {"sha": "4b93e72d27370ecfd3ce8dc5cc886cb40c914beb", "filename": "tests/rustdoc/const-generics/type-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,4 +1,4 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/type.CellIndex.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type CellIndex<const D: usize> = [i64; D];'\n+// @has foo/type.CellIndex.html '//pre[@class=\"rust item-decl\"]' 'type CellIndex<const D: usize> = [i64; D];'\n pub type CellIndex<const D: usize> = [i64; D];"}, {"sha": "6d2c6cce29c294f29bc7455912eca792b1a941d3", "filename": "tests/rustdoc/const-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-intrinsic.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -6,20 +6,20 @@\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.transmute.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const unsafe extern \"rust-intrinsic\" fn transmute<T, U>(_: T) -> U'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub const unsafe extern \"rust-intrinsic\" fn transmute<T, U>(_: T) -> U'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     pub fn transmute<T, U>(_: T) -> U;\n \n     // @has 'foo/fn.unreachable.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     pub fn unreachable() -> !;\n }\n \n extern \"C\" {\n     // @has 'foo/fn.needs_drop.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     pub fn needs_drop() -> !;\n }"}, {"sha": "a7548ad2cc4671ae9433e032dadc15ed3816fc5a", "filename": "tests/rustdoc/const-value-display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-value-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fconst-value-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-value-display.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,9 +1,9 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/constant.HOUR_IN_SECONDS.html'\n-// @has - '//*[@class=\"item-decl\"]//code' 'pub const HOUR_IN_SECONDS: u64 = _; // 3_600u64'\n+// @has - '//*[@class=\"rust item-decl\"]//code' 'pub const HOUR_IN_SECONDS: u64 = _; // 3_600u64'\n pub const HOUR_IN_SECONDS: u64 = 60 * 60;\n \n // @has 'foo/constant.NEGATIVE.html'\n-// @has - '//*[@class=\"item-decl\"]//code' 'pub const NEGATIVE: i64 = _; // -3_600i64'\n+// @has - '//*[@class=\"rust item-decl\"]//code' 'pub const NEGATIVE: i64 = _; // -3_600i64'\n pub const NEGATIVE: i64 = -60 * 60;"}, {"sha": "d2a12435d8f2758d4c01056a2c98b66d009114a4", "filename": "tests/rustdoc/decl-trailing-whitespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fdecl-trailing-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fdecl-trailing-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdecl-trailing-whitespace.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -7,7 +7,7 @@ pub struct Error;\n // @has 'foo/trait.Write.html'\n \n pub trait Write {\n-    // @snapshot 'declaration' - '//*[@class=\"item-decl\"]//code'\n+    // @snapshot 'declaration' - '//*[@class=\"rust item-decl\"]//code'\n     fn poll_write(\n         self: Option<String>,\n         cx: &mut Option<String>,"}, {"sha": "359ca64ee8d6777a96b364dd1987d64a0cf1eae5", "filename": "tests/rustdoc/fn-pointer-arg-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ffn-pointer-arg-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ffn-pointer-arg-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ffn-pointer-arg-name.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f(callback: fn(len: usize, foo: u32))'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub fn f(callback: fn(len: usize, foo: u32))'\n pub fn f(callback: fn(len: usize, foo: u32)) {}"}, {"sha": "d368db909fa013267ddbde68946532d1202f4b11", "filename": "tests/rustdoc/hide-complex-unevaluated-const-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -63,7 +63,7 @@ impl<const S: Struct, St: Stage + ?Sized> Helper<S> for St {\n // this test as long as one can ensure that private fields are not leaked!\n //\n // @has hide_complex_unevaluated_const_arguments/trait.Sub.html \\\n-//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+//      '//pre[@class=\"rust item-decl\"]' \\\n //      'pub trait Sub: Sup<{ _ }, { _ }> { }'\n pub trait Sub: Sup<{ 90 * 20 * 4 }, { Struct { private: () } }> {}\n "}, {"sha": "e6468316f583b46b7f2dba066807c94b9dd89f62", "filename": "tests/rustdoc/inline-default-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Finline-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Finline-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline-default-methods.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -4,6 +4,6 @@\n extern crate inline_default_methods;\n \n // @has inline_default_methods/trait.Foo.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn bar(&self);'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn foo(&mut self) { ... }'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn bar(&self);'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn foo(&mut self) { ... }'\n pub use inline_default_methods::Foo;"}, {"sha": "649d98f71396a24f0200d7ca7ee6c5eb7f4b6f5b", "filename": "tests/rustdoc/inline_cross/dyn_trait.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -4,28 +4,28 @@\n // edition:2021\n \n // @has user/type.Ty0.html\n-// @has - '//*[@class=\"item-decl\"]//code' \"dyn for<'any> FnOnce(&'any str) -> bool + 'static\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"dyn for<'any> FnOnce(&'any str) -> bool + 'static\"\n // FIXME(fmease): Hide default lifetime bound `'static`\n pub use dyn_trait::Ty0;\n \n // @has user/type.Ty1.html\n-// @has - '//*[@class=\"item-decl\"]//code' \"dyn Display + 'obj\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"dyn Display + 'obj\"\n pub use dyn_trait::Ty1;\n \n // @has user/type.Ty2.html\n-// @has - '//*[@class=\"item-decl\"]//code' \"dyn for<'a, 'r> Container<'r, Item<'a, 'static> = ()>\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"dyn for<'a, 'r> Container<'r, Item<'a, 'static> = ()>\"\n pub use dyn_trait::Ty2;\n \n // @has user/type.Ty3.html\n-// @has - '//*[@class=\"item-decl\"]//code' \"&'s (dyn ToString + 's)\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"&'s (dyn ToString + 's)\"\n // FIXME(fmease): Hide default lifetime bound, render \"&'s dyn ToString\"\n pub use dyn_trait::Ty3;\n \n // @has user/fn.func0.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func0(_: &dyn Fn())\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func0(_: &dyn Fn())\"\n // FIXME(fmease): Show placeholder-lifetime bound, render \"func0(_: &(dyn Fn() + '_))\"\n pub use dyn_trait::func0;\n \n // @has user/fn.func1.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n pub use dyn_trait::func1;"}, {"sha": "7d810ab4813720120026e9f21a4c8fd0f15d0561", "filename": "tests/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -4,37 +4,37 @@\n extern crate impl_trait_aux;\n \n // @has impl_trait/fn.func.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn func<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub fn func<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func;\n \n // @has impl_trait/fn.func2.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func2<T>(\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_y: impl Iterator<Item = u8>)\"\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func2<T>(\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_y: impl Iterator<Item = u8>)\"\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func2;\n \n // @has impl_trait/fn.func3.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func3(\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone)\"\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func3(\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone)\"\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func3;\n \n // @has impl_trait/fn.func4.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func4<T>(\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"T: Iterator<Item = impl Clone>,\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func4<T>(\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"T: Iterator<Item = impl Clone>,\"\n pub use impl_trait_aux::func4;\n \n // @has impl_trait/fn.func5.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func5(\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n+// @has - '//pre[@class=\"rust item-decl\"]' \"func5(\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func5;\n \n // @has impl_trait/fn.async_fn.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn async_fn()\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub async fn async_fn()\"\n pub use impl_trait_aux::async_fn;\n \n // @has impl_trait/struct.Foo.html"}, {"sha": "751a32385e812d30e6ab5142e5763fed659c2b7d", "filename": "tests/rustdoc/inline_cross/issue-24183.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Finline_cross%2Fissue-24183.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Finline_cross%2Fissue-24183.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fissue-24183.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -5,7 +5,7 @@\n // edition: 2021\n \n // @has usr/trait.U.html\n-// @has - '//*[@class=\"item-decl\"]' \"pub trait U {\"\n+// @has - '//*[@class=\"rust item-decl\"]' \"pub trait U {\"\n // @has - '//*[@id=\"method.modified\"]' \\\n // \"fn modified(self) -> Self\\\n // where \\\n@@ -14,5 +14,5 @@\n pub use issue_24183::U;\n \n // @has usr/trait.S.html\n-// @has - '//*[@class=\"item-decl\"]' 'pub trait S: Sized {'\n+// @has - '//*[@class=\"rust item-decl\"]' 'pub trait S: Sized {'\n pub use issue_24183::S;"}, {"sha": "b2ee9c26014b3d90e089f579d0609ad398bbb161", "filename": "tests/rustdoc/issue-20646.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20646.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -13,14 +13,14 @@ pub trait Trait {\n }\n \n // @has issue_20646/fn.fun.html \\\n-//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T: Trait<Output = i32>'\n+//      '//pre[@class=\"rust item-decl\"]' 'where T: Trait<Output = i32>'\n pub fn fun<T>(_: T) where T: Trait<Output=i32> {}\n \n pub mod reexport {\n     // @has issue_20646/reexport/trait.Trait.html \\\n     //      '//*[@id=\"associatedtype.Output\"]' \\\n     //      'type Output'\n     // @has issue_20646/reexport/fn.fun.html \\\n-    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T: Trait<Output = i32>'\n+    //      '//pre[@class=\"rust item-decl\"]' 'where T: Trait<Output = i32>'\n     pub use issue_20646::{Trait, fun};\n }"}, {"sha": "c1aa9617b2e25ea5e1fc492a439f38fb5e9f710c", "filename": "tests/rustdoc/issue-20727-2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20727-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20727-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-2.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -5,18 +5,18 @@ extern crate issue_20727;\n \n // @has issue_20727_2/trait.Add.html\n pub trait Add<RHS = Self> {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Add<RHS = Self> {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Output;'\n     type Output;\n \n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n     fn add(self, rhs: RHS) -> Self::Output;\n }\n \n // @has issue_20727_2/reexport/trait.Add.html\n pub mod reexport {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Add<RHS = Self> {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output;'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Output;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n     pub use issue_20727::Add;\n }"}, {"sha": "2f9d91fc5f724188d8941fbf3df52866ef3f26a8", "filename": "tests/rustdoc/issue-20727-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20727-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20727-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-3.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -7,18 +7,18 @@ pub trait Bar {}\n \n // @has issue_20727_3/trait.Deref2.html\n pub trait Deref2 {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref2 {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: Bar;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Deref2 {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Target: Bar;'\n     type Target: Bar;\n \n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn deref(&self) -> Self::Target;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'fn deref(&self) -> Self::Target;'\n     fn deref(&self) -> Self::Target;\n }\n \n // @has issue_20727_3/reexport/trait.Deref2.html\n pub mod reexport {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref2 {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: Bar;'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn deref(&self) -> Self::Target;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Deref2 {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Target: Bar;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'fn deref(&self) -> Self::Target;'\n     pub use issue_20727::Deref2;\n }"}, {"sha": "ec9f18fc3feb848124d9ec3fb3f0bd6907e2850e", "filename": "tests/rustdoc/issue-20727-4.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20727-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20727-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-4.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -5,36 +5,36 @@ extern crate issue_20727;\n \n // @has issue_20727_4/trait.Index.html\n pub trait Index<Idx: ?Sized> {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Index<Idx: ?Sized> {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output: ?Sized'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Index<Idx: ?Sized> {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Output: ?Sized'\n     type Output: ?Sized;\n \n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     fn index(&self, index: Idx) -> &Self::Output;\n }\n \n // @has issue_20727_4/trait.IndexMut.html\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'trait IndexMut<Idx: ?Sized>: Index<Idx> {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }\n \n pub mod reexport {\n     // @has issue_20727_4/reexport/trait.Index.html\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output: ?Sized'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Output: ?Sized'\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     pub use issue_20727::Index;\n \n     // @has issue_20727_4/reexport/trait.IndexMut.html\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'trait IndexMut<Idx>: Index<Idx>where Idx: ?Sized,{'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     pub use issue_20727::IndexMut;\n }"}, {"sha": "266848beef93d9aa531e2e5ff51b7740a75fa2f9", "filename": "tests/rustdoc/issue-20727.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -5,20 +5,20 @@ extern crate issue_20727;\n \n // @has issue_20727/trait.Deref.html\n pub trait Deref {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: ?Sized;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Deref {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Target: ?Sized;'\n     type Target: ?Sized;\n \n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //        \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     fn deref<'a>(&'a self) -> &'a Self::Target;\n }\n \n // @has issue_20727/reexport/trait.Deref.html\n pub mod reexport {\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref {'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: ?Sized;'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'trait Deref {'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'type Target: ?Sized;'\n+    // @has - '//pre[@class=\"rust item-decl\"]' \\\n     //      \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     pub use issue_20727::Deref;\n }"}, {"sha": "de6cc78707c6d10bd76b69f34172aad532ea0f9d", "filename": "tests/rustdoc/issue-22038.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-22038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-22038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-22038.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,19 +1,19 @@\n extern \"C\" {\n     // @has issue_22038/fn.foo1.html \\\n-    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn foo1()'\n+    //      '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"C\" fn foo1()'\n     pub fn foo1();\n }\n \n extern \"system\" {\n     // @has issue_22038/fn.foo2.html \\\n-    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"system\" fn foo2()'\n+    //      '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"system\" fn foo2()'\n     pub fn foo2();\n }\n \n // @has issue_22038/fn.bar.html \\\n-//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"C\" fn bar()'\n+//      '//pre[@class=\"rust item-decl\"]' 'pub extern \"C\" fn bar()'\n pub extern \"C\" fn bar() {}\n \n // @has issue_22038/fn.baz.html \\\n-//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"system\" fn baz()'\n+//      '//pre[@class=\"rust item-decl\"]' 'pub extern \"system\" fn baz()'\n pub extern \"system\" fn baz() {}"}, {"sha": "a316f3ad99bcf891b7dca835a3f0eefe2520f091", "filename": "tests/rustdoc/issue-33302.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-33302.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -6,17 +6,17 @@ macro_rules! make {\n         pub struct S;\n \n         // @has issue_33302/constant.CST.html \\\n-        //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const CST: i32'\n+        //        '//pre[@class=\"rust item-decl\"]' 'pub const CST: i32'\n         pub const CST: i32 = ($n * $n);\n         // @has issue_33302/static.ST.html \\\n-        //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub static ST: i32'\n+        //        '//pre[@class=\"rust item-decl\"]' 'pub static ST: i32'\n         pub static ST: i32 = ($n * $n);\n \n         pub trait T<X> {\n             fn ignore(_: &X) {}\n             const C: X;\n             // @has issue_33302/trait.T.html \\\n-            //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'const D: i32'\n+            //        '//pre[@class=\"rust item-decl\"]' 'const D: i32'\n             // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n             const D: i32 = ($n * $n);\n         }"}, {"sha": "2d410a5974afa46d40bc363afd2d94a780cd5971", "filename": "tests/rustdoc/issue-85454.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-85454.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -5,7 +5,7 @@\n extern crate issue_85454;\n \n // @has foo/trait.FromResidual.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n }\n@@ -24,6 +24,6 @@ pub enum ControlFlow<B, C = ()> {\n \n pub mod reexport {\n     // @has foo/reexport/trait.FromResidual.html\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n     pub use issue_85454::*;\n }"}, {"sha": "5d5aee1fe1df67cd66cabca132645ac7febeda8c", "filename": "tests/rustdoc/issue-98697.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-98697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fissue-98697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-98697.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -8,8 +8,8 @@\n \n extern crate issue_98697_reexport_with_anonymous_lifetime;\n \n-// @has issue_98697/fn.repro.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code' 'fn repro<F>()where F: Fn(&str)'\n-// @!has issue_98697/fn.repro.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code' 'for<'\n+// @has issue_98697/fn.repro.html '//pre[@class=\"rust item-decl\"]/code' 'fn repro<F>()where F: Fn(&str)'\n+// @!has issue_98697/fn.repro.html '//pre[@class=\"rust item-decl\"]/code' 'for<'\n pub use issue_98697_reexport_with_anonymous_lifetime::repro;\n \n // @has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header\"]' 'impl MyTrait<&Extra> for Extra'"}, {"sha": "3a488bdd2088b6320cd9951c207efb46287a81d6", "filename": "tests/rustdoc/legacy-const-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Flegacy-const-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Flegacy-const-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Flegacy-const-generic.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -2,14 +2,14 @@\n #![feature(rustc_attrs)]\n \n // @has 'foo/fn.foo.html'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn foo(x: usize, const Y: usize, z: usize) -> [usize; 3]'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn foo(x: usize, const Y: usize, z: usize) -> [usize; 3]'\n #[rustc_legacy_const_generics(1)]\n pub fn foo<const Y: usize>(x: usize, z: usize) -> [usize; 3] {\n     [x, Y, z]\n }\n \n // @has 'foo/fn.bar.html'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn bar(x: usize, const Y: usize, const Z: usize) -> [usize; 3]'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'fn bar(x: usize, const Y: usize, const Z: usize) -> [usize; 3]'\n #[rustc_legacy_const_generics(1, 2)]\n pub fn bar<const Y: usize, const Z: usize>(x: usize) -> [usize; 3] {\n     [x, Y, z]"}, {"sha": "15e09f5165a2fbb2984a2670369c59290a9a5e11", "filename": "tests/rustdoc/lifetime-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Flifetime-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Flifetime-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Flifetime-name.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/type.Resolutions.html'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub type Resolutions<'tcx> = &'tcx u8;\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"pub type Resolutions<'tcx> = &'tcx u8;\"\n pub type Resolutions<'tcx> = &'tcx u8;"}, {"sha": "a45ef37a7fce594c1ade8ad784dbf98c1bbf7e92", "filename": "tests/rustdoc/macro-higher-kinded-function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fmacro-higher-kinded-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fmacro-higher-kinded-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fmacro-higher-kinded-function.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -11,8 +11,8 @@ macro_rules! gen {\n }\n \n // @has 'foo/struct.Providers.html'\n-// @has - '//*[@class=\"item-decl\"]//code' \"pub a: for<'tcx> fn(_: TyCtxt<'tcx>, _: u8) -> i8,\"\n-// @has - '//*[@class=\"item-decl\"]//code' \"pub b: for<'tcx> fn(_: TyCtxt<'tcx>, _: u16) -> i16,\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"pub a: for<'tcx> fn(_: TyCtxt<'tcx>, _: u8) -> i8,\"\n+// @has - '//*[@class=\"rust item-decl\"]//code' \"pub b: for<'tcx> fn(_: TyCtxt<'tcx>, _: u16) -> i16,\"\n // @has - '//*[@id=\"structfield.a\"]/code' \"a: for<'tcx> fn(_: TyCtxt<'tcx>, _: u8) -> i8\"\n // @has - '//*[@id=\"structfield.b\"]/code' \"b: for<'tcx> fn(_: TyCtxt<'tcx>, _: u16) -> i16\"\n gen! {"}, {"sha": "e403b7b78c9e74ea3744ccd25d7fbb7328b4702a", "filename": "tests/rustdoc/mut-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fmut-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fmut-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fmut-params.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -13,6 +13,6 @@ impl Foo {\n     pub fn bar(mut bar: ()) {}\n }\n \n-// @count foo/fn.baz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 1\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'mut'\n+// @count foo/fn.baz.html '//pre[@class=\"rust item-decl\"]' 1\n+// @!has - '//pre[@class=\"rust item-decl\"]' 'mut'\n pub fn baz(mut foo: Foo) {}"}, {"sha": "af7b2f955fd4eaa174a883452395ad9241e95bc6", "filename": "tests/rustdoc/normalize-assoc-item.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnormalize-assoc-item.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -19,12 +19,12 @@ impl Trait for isize {\n     type X = <() as Trait>::X;\n }\n \n-// @has 'normalize_assoc_item/fn.f.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f() -> isize'\n+// @has 'normalize_assoc_item/fn.f.html' '//pre[@class=\"rust item-decl\"]' 'pub fn f() -> isize'\n pub fn f() -> <usize as Trait>::X {\n     0\n }\n \n-// @has 'normalize_assoc_item/fn.f2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f2() -> fn() -> i32'\n+// @has 'normalize_assoc_item/fn.f2.html' '//pre[@class=\"rust item-decl\"]' 'pub fn f2() -> fn() -> i32'\n pub fn f2() -> <isize as Trait>::X {\n     todo!()\n }\n@@ -49,10 +49,10 @@ impl<Inner: Trait> Trait for Generic<Inner> {\n // These can't be normalized because they depend on a generic parameter.\n // However the user can choose whether the text should be displayed as `Inner::X` or `<Inner as Trait>::X`.\n \n-// @has 'normalize_assoc_item/struct.Unknown.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);'\n+// @has 'normalize_assoc_item/struct.Unknown.html' '//pre[@class=\"rust item-decl\"]' 'pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);'\n pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);\n \n-// @has 'normalize_assoc_item/struct.Unknown2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Unknown2<Inner: Trait>(pub Inner::X);'\n+// @has 'normalize_assoc_item/struct.Unknown2.html' '//pre[@class=\"rust item-decl\"]' 'pub struct Unknown2<Inner: Trait>(pub Inner::X);'\n pub struct Unknown2<Inner: Trait>(pub Inner::X);\n \n trait Lifetimes<'a> {\n@@ -63,20 +63,20 @@ impl<'a> Lifetimes<'a> for usize {\n     type Y = &'a isize;\n }\n \n-// @has 'normalize_assoc_item/fn.g.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn g() -> &isize\"\n+// @has 'normalize_assoc_item/fn.g.html' '//pre[@class=\"rust item-decl\"]' \"pub fn g() -> &isize\"\n pub fn g() -> <usize as Lifetimes<'static>>::Y {\n     &0\n }\n \n-// @has 'normalize_assoc_item/constant.A.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub const A: &isize\"\n+// @has 'normalize_assoc_item/constant.A.html' '//pre[@class=\"rust item-decl\"]' \"pub const A: &isize\"\n pub const A: <usize as Lifetimes<'static>>::Y = &0;\n \n // test cross-crate re-exports\n extern crate inner;\n-// @has 'normalize_assoc_item/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn foo() -> i32\"\n+// @has 'normalize_assoc_item/fn.foo.html' '//pre[@class=\"rust item-decl\"]' \"pub fn foo() -> i32\"\n pub use inner::foo;\n \n-// @has 'normalize_assoc_item/fn.h.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn h<T>() -> IntoIter<T, Global>\"\n+// @has 'normalize_assoc_item/fn.h.html' '//pre[@class=\"rust item-decl\"]' \"pub fn h<T>() -> IntoIter<T, Global>\"\n pub fn h<T>() -> <Vec<T> as IntoIterator>::IntoIter {\n     vec![].into_iter()\n }"}, {"sha": "ea4791579cd65baba1a7e3422f32d640ce4dc9b1", "filename": "tests/rustdoc/pub-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fpub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fpub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fpub-method.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -3,7 +3,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn bar() -> '\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub fn bar() -> '\n /// foo\n pub fn bar() -> usize {\n     2"}, {"sha": "d0d9111bb4088187b742cc6a535a95c22c66d45c", "filename": "tests/rustdoc/range-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Frange-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Frange-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Frange-arg-pattern.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f(_: u8)'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub fn f(_: u8)'\n pub fn f(0u8..=255: u8) {}"}, {"sha": "e7f5720d583c90b56234ef5b82849e6c31df73ae", "filename": "tests/rustdoc/reexport-dep-foreign-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Freexport-dep-foreign-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Freexport-dep-foreign-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexport-dep-foreign-fn.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -8,5 +8,5 @@\n extern crate all_item_types;\n \n // @has 'foo/fn.foo_ffn.html'\n-// @has - '//*[@class=\"item-decl\"]//code' 'pub unsafe extern \"C\" fn foo_ffn()'\n+// @has - '//*[@class=\"rust item-decl\"]//code' 'pub unsafe extern \"C\" fn foo_ffn()'\n pub use all_item_types::foo_ffn;"}, {"sha": "84ea4ad2c9ef30ea8fbb08b948661821ce29cbbe", "filename": "tests/rustdoc/reexports-priv.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports-priv.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -5,7 +5,7 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"item-decl\"]' 'pub macro addr_of($place:expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"rust item-decl\"]' 'pub macro addr_of($place:expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n@@ -14,7 +14,7 @@ pub(self) use reexports::addr_of_self;\n // @!has 'foo/macro.addr_of_local.html'\n use reexports::addr_of_local;\n \n-// @has 'foo/struct.Foo.html' '//*[@class=\"item-decl\"]' 'pub struct Foo;'\n+// @has 'foo/struct.Foo.html' '//*[@class=\"rust item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n // @!has 'foo/struct.FooCrate.html'\n pub(crate) use reexports::FooCrate;\n@@ -23,7 +23,7 @@ pub(self) use reexports::FooSelf;\n // @!has 'foo/struct.FooLocal.html'\n use reexports::FooLocal;\n \n-// @has 'foo/enum.Bar.html' '//*[@class=\"item-decl\"]' 'pub enum Bar {'\n+// @has 'foo/enum.Bar.html' '//*[@class=\"rust item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n // @!has 'foo/enum.BarCrate.html'\n pub(crate) use reexports::BarCrate;\n@@ -32,7 +32,7 @@ pub(self) use reexports::BarSelf;\n // @!has 'foo/enum.BarLocal.html'\n use reexports::BarLocal;\n \n-// @has 'foo/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n+// @has 'foo/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo()'\n pub use reexports::foo;\n // @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n@@ -41,7 +41,7 @@ pub(self) use reexports::foo_self;\n // @!has 'foo/fn.foo_local.html'\n use reexports::foo_local;\n \n-// @has 'foo/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n+// @has 'foo/type.Type.html' '//pre[@class=\"rust item-decl\"]' 'pub type Type ='\n pub use reexports::Type;\n // @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n@@ -50,7 +50,7 @@ pub(self) use reexports::TypeSelf;\n // @!has 'foo/type.TypeLocal.html'\n use reexports::TypeLocal;\n \n-// @has 'foo/union.Union.html' '//*[@class=\"item-decl\"]' 'pub union Union {'\n+// @has 'foo/union.Union.html' '//*[@class=\"rust item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n // @!has 'foo/union.UnionCrate.html'\n pub(crate) use reexports::UnionCrate;\n@@ -61,66 +61,66 @@ use reexports::UnionLocal;\n \n pub mod outer {\n     pub mod inner {\n-        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"item-decl\"]' 'pub macro addr_of($place:expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"rust item-decl\"]' 'pub macro addr_of($place:expr) {'\n         pub use reexports::addr_of;\n-        // @has 'foo/outer/inner/macro.addr_of_crate.html' '//*[@class=\"item-decl\"]' 'pub(crate) macro addr_of_crate($place:expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of_crate.html' '//*[@class=\"rust item-decl\"]' 'pub(crate) macro addr_of_crate($place:expr) {'\n         pub(crate) use reexports::addr_of_crate;\n-        // @has 'foo/outer/inner/macro.addr_of_super.html' '//*[@class=\"item-decl\"]' 'pub(in outer) macro addr_of_super($place:expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of_super.html' '//*[@class=\"rust item-decl\"]' 'pub(in outer) macro addr_of_super($place:expr) {'\n         pub(super) use reexports::addr_of_super;\n         // @!has 'foo/outer/inner/macro.addr_of_self.html'\n         pub(self) use reexports::addr_of_self;\n         // @!has 'foo/outer/inner/macro.addr_of_local.html'\n         use reexports::addr_of_local;\n \n-        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"item-decl\"]' 'pub struct Foo;'\n+        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"rust item-decl\"]' 'pub struct Foo;'\n         pub use reexports::Foo;\n-        // @has 'foo/outer/inner/struct.FooCrate.html' '//*[@class=\"item-decl\"]' 'pub(crate) struct FooCrate;'\n+        // @has 'foo/outer/inner/struct.FooCrate.html' '//*[@class=\"rust item-decl\"]' 'pub(crate) struct FooCrate;'\n         pub(crate) use reexports::FooCrate;\n-        // @has 'foo/outer/inner/struct.FooSuper.html' '//*[@class=\"item-decl\"]' 'pub(in outer) struct FooSuper;'\n+        // @has 'foo/outer/inner/struct.FooSuper.html' '//*[@class=\"rust item-decl\"]' 'pub(in outer) struct FooSuper;'\n         pub(super) use reexports::FooSuper;\n         // @!has 'foo/outer/inner/struct.FooSelf.html'\n         pub(self) use reexports::FooSelf;\n         // @!has 'foo/outer/inner/struct.FooLocal.html'\n         use reexports::FooLocal;\n \n-        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"item-decl\"]' 'pub enum Bar {'\n+        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"rust item-decl\"]' 'pub enum Bar {'\n         pub use reexports::Bar;\n-        // @has 'foo/outer/inner/enum.BarCrate.html' '//*[@class=\"item-decl\"]' 'pub(crate) enum BarCrate {'\n+        // @has 'foo/outer/inner/enum.BarCrate.html' '//*[@class=\"rust item-decl\"]' 'pub(crate) enum BarCrate {'\n         pub(crate) use reexports::BarCrate;\n-        // @has 'foo/outer/inner/enum.BarSuper.html' '//*[@class=\"item-decl\"]' 'pub(in outer) enum BarSuper {'\n+        // @has 'foo/outer/inner/enum.BarSuper.html' '//*[@class=\"rust item-decl\"]' 'pub(in outer) enum BarSuper {'\n         pub(super) use reexports::BarSuper;\n         // @!has 'foo/outer/inner/enum.BarSelf.html'\n         pub(self) use reexports::BarSelf;\n         // @!has 'foo/outer/inner/enum.BarLocal.html'\n         use reexports::BarLocal;\n \n-        // @has 'foo/outer/inner/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n+        // @has 'foo/outer/inner/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo()'\n         pub use reexports::foo;\n-        // @has 'foo/outer/inner/fn.foo_crate.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(crate) fn foo_crate()'\n+        // @has 'foo/outer/inner/fn.foo_crate.html' '//pre[@class=\"rust item-decl\"]' 'pub(crate) fn foo_crate()'\n         pub(crate) use reexports::foo_crate;\n-        // @has 'foo/outer/inner/fn.foo_super.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(in outer) fn foo_super()'\n+        // @has 'foo/outer/inner/fn.foo_super.html' '//pre[@class=\"rust item-decl\"]' 'pub(in outer) fn foo_super()'\n         pub(super) use::reexports::foo_super;\n         // @!has 'foo/outer/inner/fn.foo_self.html'\n         pub(self) use reexports::foo_self;\n         // @!has 'foo/outer/inner/fn.foo_local.html'\n         use reexports::foo_local;\n \n-        // @has 'foo/outer/inner/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n+        // @has 'foo/outer/inner/type.Type.html' '//pre[@class=\"rust item-decl\"]' 'pub type Type ='\n         pub use reexports::Type;\n-        // @has 'foo/outer/inner/type.TypeCrate.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(crate) type TypeCrate ='\n+        // @has 'foo/outer/inner/type.TypeCrate.html' '//pre[@class=\"rust item-decl\"]' 'pub(crate) type TypeCrate ='\n         pub(crate) use reexports::TypeCrate;\n-        // @has 'foo/outer/inner/type.TypeSuper.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(in outer) type TypeSuper ='\n+        // @has 'foo/outer/inner/type.TypeSuper.html' '//pre[@class=\"rust item-decl\"]' 'pub(in outer) type TypeSuper ='\n         pub(super) use reexports::TypeSuper;\n         // @!has 'foo/outer/inner/type.TypeSelf.html'\n         pub(self) use reexports::TypeSelf;\n         // @!has 'foo/outer/inner/type.TypeLocal.html'\n         use reexports::TypeLocal;\n \n-        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"item-decl\"]' 'pub union Union {'\n+        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"rust item-decl\"]' 'pub union Union {'\n         pub use reexports::Union;\n-        // @has 'foo/outer/inner/union.UnionCrate.html' '//*[@class=\"item-decl\"]' 'pub(crate) union UnionCrate {'\n+        // @has 'foo/outer/inner/union.UnionCrate.html' '//*[@class=\"rust item-decl\"]' 'pub(crate) union UnionCrate {'\n         pub(crate) use reexports::UnionCrate;\n-        // @has 'foo/outer/inner/union.UnionSuper.html' '//*[@class=\"item-decl\"]' 'pub(in outer) union UnionSuper {'\n+        // @has 'foo/outer/inner/union.UnionSuper.html' '//*[@class=\"rust item-decl\"]' 'pub(in outer) union UnionSuper {'\n         pub(super) use reexports::UnionSuper;\n         // @!has 'foo/outer/inner/union.UnionSelf.html'\n         pub(self) use reexports::UnionSelf;"}, {"sha": "3c51ac395afc5f987b354e6a17c8a481d7d92159", "filename": "tests/rustdoc/reexports.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -4,7 +4,7 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"item-decl\"]' 'pub macro addr_of($place:expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"rust item-decl\"]' 'pub macro addr_of($place:expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n@@ -13,7 +13,7 @@ pub(self) use reexports::addr_of_self;\n // @!has 'foo/macro.addr_of_local.html'\n use reexports::addr_of_local;\n \n-// @has 'foo/struct.Foo.html' '//*[@class=\"item-decl\"]' 'pub struct Foo;'\n+// @has 'foo/struct.Foo.html' '//*[@class=\"rust item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n // @!has 'foo/struct.FooCrate.html'\n pub(crate) use reexports::FooCrate;\n@@ -22,7 +22,7 @@ pub(self) use reexports::FooSelf;\n // @!has 'foo/struct.FooLocal.html'\n use reexports::FooLocal;\n \n-// @has 'foo/enum.Bar.html' '//*[@class=\"item-decl\"]' 'pub enum Bar {'\n+// @has 'foo/enum.Bar.html' '//*[@class=\"rust item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n // @!has 'foo/enum.BarCrate.html'\n pub(crate) use reexports::BarCrate;\n@@ -31,7 +31,7 @@ pub(self) use reexports::BarSelf;\n // @!has 'foo/enum.BarLocal.html'\n use reexports::BarLocal;\n \n-// @has 'foo/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n+// @has 'foo/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo()'\n pub use reexports::foo;\n // @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n@@ -40,7 +40,7 @@ pub(self) use reexports::foo_self;\n // @!has 'foo/fn.foo_local.html'\n use reexports::foo_local;\n \n-// @has 'foo/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n+// @has 'foo/type.Type.html' '//pre[@class=\"rust item-decl\"]' 'pub type Type ='\n pub use reexports::Type;\n // @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n@@ -49,7 +49,7 @@ pub(self) use reexports::TypeSelf;\n // @!has 'foo/type.TypeLocal.html'\n use reexports::TypeLocal;\n \n-// @has 'foo/union.Union.html' '//*[@class=\"item-decl\"]' 'pub union Union {'\n+// @has 'foo/union.Union.html' '//*[@class=\"rust item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n // @!has 'foo/union.UnionCrate.html'\n pub(crate) use reexports::UnionCrate;\n@@ -60,7 +60,7 @@ use reexports::UnionLocal;\n \n pub mod outer {\n     pub mod inner {\n-        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"item-decl\"]' 'pub macro addr_of($place:expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"rust item-decl\"]' 'pub macro addr_of($place:expr) {'\n         pub use reexports::addr_of;\n         // @!has 'foo/outer/inner/macro.addr_of_crate.html'\n         pub(crate) use reexports::addr_of_crate;\n@@ -71,7 +71,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/macro.addr_of_local.html'\n         use reexports::addr_of_local;\n \n-        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"item-decl\"]' 'pub struct Foo;'\n+        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"rust item-decl\"]' 'pub struct Foo;'\n         pub use reexports::Foo;\n         // @!has 'foo/outer/inner/struct.FooCrate.html'\n         pub(crate) use reexports::FooCrate;\n@@ -82,7 +82,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/struct.FooLocal.html'\n         use reexports::FooLocal;\n \n-        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"item-decl\"]' 'pub enum Bar {'\n+        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"rust item-decl\"]' 'pub enum Bar {'\n         pub use reexports::Bar;\n         // @!has 'foo/outer/inner/enum.BarCrate.html'\n         pub(crate) use reexports::BarCrate;\n@@ -93,7 +93,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/enum.BarLocal.html'\n         use reexports::BarLocal;\n \n-        // @has 'foo/outer/inner/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n+        // @has 'foo/outer/inner/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo()'\n         pub use reexports::foo;\n         // @!has 'foo/outer/inner/fn.foo_crate.html'\n         pub(crate) use reexports::foo_crate;\n@@ -104,7 +104,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/fn.foo_local.html'\n         use reexports::foo_local;\n \n-        // @has 'foo/outer/inner/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n+        // @has 'foo/outer/inner/type.Type.html' '//pre[@class=\"rust item-decl\"]' 'pub type Type ='\n         pub use reexports::Type;\n         // @!has 'foo/outer/inner/type.TypeCrate.html'\n         pub(crate) use reexports::TypeCrate;\n@@ -115,7 +115,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/type.TypeLocal.html'\n         use reexports::TypeLocal;\n \n-        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"item-decl\"]' 'pub union Union {'\n+        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"rust item-decl\"]' 'pub union Union {'\n         pub use reexports::Union;\n         // @!has 'foo/outer/inner/union.UnionCrate.html'\n         pub(crate) use reexports::UnionCrate;"}, {"sha": "1120302ac7ea92efe4c80a1969dc577def92c7c8", "filename": "tests/rustdoc/rfc-2632-const-trait-impl.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -12,10 +12,10 @@ use std::marker::Destruct;\n \n pub struct S<T>(T);\n \n-// @!has foo/trait.Tr.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' 'Clone'\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where\"]' '~const'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where\"]' ': Clone'\n+// @!has foo/trait.Tr.html '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' '~const'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where\"]' '~const'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where\"]' ': Clone'\n #[const_trait]\n pub trait Tr<T> {\n     // @!has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n@@ -45,10 +45,10 @@ where\n     }\n }\n \n-// @!has foo/fn.foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' 'Clone'\n-// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n+// @!has foo/fn.foo.html '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' '~const'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n pub const fn foo<F: ~const Clone + ~const Destruct>()\n where\n     Option<F>: ~const Clone + ~const Destruct,"}, {"sha": "c508909f9aafa2421296ad0a54baca7f812311c4", "filename": "tests/rustdoc/safe-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fsafe-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fsafe-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsafe-intrinsic.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -7,16 +7,16 @@\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.abort.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n     #[rustc_safe_intrinsic]\n     pub fn abort() -> !;\n     // @has 'foo/fn.unreachable.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n     pub fn unreachable() -> !;\n }\n \n extern \"C\" {\n     // @has 'foo/fn.needs_drop.html'\n-    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    // @has - '//pre[@class=\"rust item-decl\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n     pub fn needs_drop() -> !;\n }"}, {"sha": "6dea3b74ea3ec901dcc2fb78ea21bd784d3f4e97", "filename": "tests/rustdoc/slice-links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fslice-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fslice-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fslice-links.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -4,25 +4,25 @@\n pub struct MyBox<T: ?Sized>(*const T);\n \n // @has 'foo/fn.alpha.html'\n-// @snapshot link_slice_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_slice_u32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn alpha() -> &'static [u32] {\n     loop {}\n }\n \n // @has 'foo/fn.beta.html'\n-// @snapshot link_slice_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_slice_generic - '//pre[@class=\"rust item-decl\"]/code'\n pub fn beta<T>() -> &'static [T] {\n     loop {}\n }\n \n // @has 'foo/fn.gamma.html'\n-// @snapshot link_box_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_box_u32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn gamma() -> MyBox<[u32]> {\n     loop {}\n }\n \n // @has 'foo/fn.delta.html'\n-// @snapshot link_box_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_box_generic - '//pre[@class=\"rust item-decl\"]/code'\n pub fn delta<T>() -> MyBox<[T]> {\n     loop {}\n }"}, {"sha": "6f06c8c9c49965f1ee4199ed27e169401fcf6eab", "filename": "tests/rustdoc/struct-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fstruct-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fstruct-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fstruct-arg-pattern.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -4,7 +4,7 @@ struct BodyId {\n     hir_id: usize,\n }\n \n-// @has 'foo/fn.body_owner.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn body_owner(_: BodyId)'\n+// @has 'foo/fn.body_owner.html' '//pre[@class=\"rust item-decl\"]' 'pub fn body_owner(_: BodyId)'\n pub fn body_owner(BodyId { hir_id }: BodyId) {\n     // ...\n }"}, {"sha": "9640b96b6b546b2aac923e62df70484d8647a6d9", "filename": "tests/rustdoc/test-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftest-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftest-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftest-parens.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_: &(dyn ToString + 'static)\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_: &(dyn ToString + 'static)\"\n pub fn foo(_: &(ToString + 'static)) {}"}, {"sha": "1f745043894ea8fa7a974c55e035f3788da93e68", "filename": "tests/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftoggle-item-contents.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -55,7 +55,7 @@ pub union Union {\n \n // @has 'toggle_item_contents/struct.PrivStruct.html'\n // @count - '//details[@class=\"toggle type-contents-toggle\"]' 0\n-// @has - '//div[@class=\"item-decl\"]' '/* private fields */'\n+// @has - '//pre[@class=\"rust item-decl\"]' '/* private fields */'\n pub struct PrivStruct {\n     a: usize,\n     b: usize,\n@@ -81,8 +81,8 @@ pub enum EnumStructVariant {\n }\n \n // @has 'toggle_item_contents/enum.LargeEnum.html'\n-// @count - '//div[@class=\"item-decl\"]/pre//details[@class=\"toggle type-contents-toggle\"]' 1\n-// @has - '//div[@class=\"item-decl\"]/pre//details[@class=\"toggle type-contents-toggle\"]' 'Show 13 variants'\n+// @count - '//pre[@class=\"rust item-decl\"]//details[@class=\"toggle type-contents-toggle\"]' 1\n+// @has - '//pre[@class=\"rust item-decl\"]//details[@class=\"toggle type-contents-toggle\"]' 'Show 13 variants'\n pub enum LargeEnum {\n     A, B, C, D, E, F(u8), G, H, I, J, K, L, M\n }"}, {"sha": "5c3f82c6b3cff0f2b8ff6cbcf91ca8dc8ce45911", "filename": "tests/rustdoc/trait_alias.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftrait_alias.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -14,13 +14,13 @@ use std::fmt::Debug;\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Foo'\n \n // @has foo/traitalias.CopyAlias.html\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-decl\"]/pre' 'trait CopyAlias = Copy;'\n+// @has - '//section[@id=\"main-content\"]/pre[@class=\"rust item-decl\"]' 'trait CopyAlias = Copy;'\n pub trait CopyAlias = Copy;\n // @has foo/traitalias.Alias2.html\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-decl\"]/pre' 'trait Alias2 = Copy + Debug;'\n+// @has - '//section[@id=\"main-content\"]/pre[@class=\"rust item-decl\"]' 'trait Alias2 = Copy + Debug;'\n pub trait Alias2 = Copy + Debug;\n // @has foo/traitalias.Foo.html\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-decl\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n+// @has - '//section[@id=\"main-content\"]/pre[@class=\"rust item-decl\"]' 'trait Foo<T> = Into<T> + Debug;'\n pub trait Foo<T> = Into<T> + Debug;\n // @has foo/fn.bar.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n pub fn bar<T>() where T: Alias2 {}"}, {"sha": "2836ddedc2b20f952726d4a0cdc720da8dc26331", "filename": "tests/rustdoc/tuple-struct-fields-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -19,7 +19,7 @@ pub struct Foo(\n );\n \n // @has foo/enum.Bar.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'BarVariant(String),'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'BarVariant(String),'\n // @matches - '//*[@id=\"variant.BarVariant.fields\"]/h4' '^Tuple Fields$'\n // @has - '//*[@id=\"variant.BarVariant.field.0\"]' '0: String'\n // @has - '//*[@id=\"variant.BarVariant.fields\"]//*[@class=\"docblock\"]' 'Hello docs'"}, {"sha": "0ea5b5bfac90833c994b61f338b4bde6e4ae6e64", "filename": "tests/rustdoc/tuples.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftuples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Ftuples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftuples.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,20 +1,20 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.tuple0.html //pre 'pub fn tuple0(x: ())'\n-// @snapshot link_unit - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link_unit - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple0(x: ()) -> () { x }\n // @has foo/fn.tuple1.html //pre 'pub fn tuple1(x: (i32,)) -> (i32,)'\n-// @snapshot link1_i32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link1_i32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple1(x: (i32,)) -> (i32,) { x }\n // @has foo/fn.tuple2.html //pre 'pub fn tuple2(x: (i32, i32)) -> (i32, i32)'\n-// @snapshot link2_i32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link2_i32 - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple2(x: (i32, i32)) -> (i32, i32) { x }\n // @has foo/fn.tuple1_t.html //pre 'pub fn tuple1_t<T>(x: (T,)) -> (T,)'\n-// @snapshot link1_t - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link1_t - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple1_t<T>(x: (T,)) -> (T,) { x }\n // @has foo/fn.tuple2_t.html //pre 'pub fn tuple2_t<T>(x: (T, T)) -> (T, T)'\n-// @snapshot link2_t - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link2_t - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple2_t<T>(x: (T, T)) -> (T, T) { x }\n // @has foo/fn.tuple2_tu.html //pre 'pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U)'\n-// @snapshot link2_tu - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n+// @snapshot link2_tu - '//pre[@class=\"rust item-decl\"]/code'\n pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U) { x }"}, {"sha": "6ddfa0c4d5ca2f9a624e74a38a6f52671974d591", "filename": "tests/rustdoc/unit-return.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Funit-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Funit-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Funit-return.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -4,14 +4,14 @@\n \n extern crate unit_return;\n \n-// @has 'foo/fn.f0.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u8) + Clone'\n+// @has 'foo/fn.f0.html' '//pre[@class=\"rust item-decl\"]' 'F: FnMut(u8) + Clone'\n pub fn f0<F: FnMut(u8) + Clone>(f: F) {}\n \n-// @has 'foo/fn.f1.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u16) + Clone'\n+// @has 'foo/fn.f1.html' '//pre[@class=\"rust item-decl\"]' 'F: FnMut(u16) + Clone'\n pub fn f1<F: FnMut(u16) -> () + Clone>(f: F) {}\n \n-// @has 'foo/fn.f2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u32) + Clone'\n+// @has 'foo/fn.f2.html' '//pre[@class=\"rust item-decl\"]' 'F: FnMut(u32) + Clone'\n pub use unit_return::f2;\n \n-// @has 'foo/fn.f3.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u64) + Clone'\n+// @has 'foo/fn.f3.html' '//pre[@class=\"rust item-decl\"]' 'F: FnMut(u64) + Clone'\n pub use unit_return::f3;"}, {"sha": "c1ac834b2fcb8544001591942218d8aaeb6c33b9", "filename": "tests/rustdoc/where-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhere-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhere-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere-sized.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n-// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where X: ?Sized,'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n+// @has - '//pre[@class=\"rust item-decl\"]' 'where X: ?Sized,'\n pub fn foo<X, Y: ?Sized>(_: &X) where X: ?Sized {}"}, {"sha": "6f151f2328e4f69878f096086df403ef0610e6fa", "filename": "tests/rustdoc/where.SWhere_Simd_item-decl.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1 +1 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre></div>\n\\ No newline at end of file\n+<pre class=\"rust item-decl\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre>\n\\ No newline at end of file"}, {"sha": "11df902f3720f7d6cc9c87d72fd1163b3bacb2b8", "filename": "tests/rustdoc/where.SWhere_TraitWhere_item-decl.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,8 +1,8 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait TraitWhere {\n+<pre class=\"rust item-decl\"><code>pub trait TraitWhere {\n     type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: 'a</span>;\n \n     fn <a href=\"#method.func\" class=\"fn\">func</a>(self)<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n     { ... }\n <span class=\"item-spacer\" />    fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"{{channel}}/std/io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n     { ... }\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "4c34c7e51d93793338ecfa1c6ce6d272fe45d27a", "filename": "tests/rustdoc/where.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -22,13 +22,13 @@ impl<D> Delta<D> where D: MyTrait {\n pub struct Echo<E>(E);\n \n // @has 'foo/struct.Simd.html'\n-// @snapshot SWhere_Simd_item-decl - '//div[@class=\"item-decl\"]'\n+// @snapshot SWhere_Simd_item-decl - '//pre[@class=\"rust item-decl\"]'\n pub struct Simd<T>([T; 1])\n where\n     T: MyTrait;\n \n // @has 'foo/trait.TraitWhere.html'\n-// @snapshot SWhere_TraitWhere_item-decl - '//div[@class=\"item-decl\"]'\n+// @snapshot SWhere_TraitWhere_item-decl - '//pre[@class=\"rust item-decl\"]'\n pub trait TraitWhere {\n     type Item<'a> where Self: 'a;\n \n@@ -57,6 +57,6 @@ pub enum Foxtrot<F> { Foxtrot1(F) }\n //          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n impl<F> MyTrait for Foxtrot<F>where F: MyTrait {}\n \n-// @has foo/type.Golf.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n+// @has foo/type.Golf.html '//pre[@class=\"rust item-decl\"]' \\\n //          \"type Golf<T>where T: Clone, = (T, T)\"\n pub type Golf<T> where T: Clone = (T, T);"}, {"sha": "904d461103617eefdc2fdc39f3db10c064c440cf", "filename": "tests/rustdoc/whitespace-after-where-clause.enum.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "7bc9b780197bb58467800803801a7e5d727dee6e", "filename": "tests/rustdoc/whitespace-after-where-clause.enum2.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub enum Cow2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<pre class=\"rust item-decl\"><code>pub enum Cow2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "b540c7c97c1f40e6d909e7eec7df074f95d1460e", "filename": "tests/rustdoc/whitespace-after-where-clause.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -4,7 +4,7 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/trait.ToOwned.html'\n-// @snapshot trait - '//*[@class=\"item-decl\"]'\n+// @snapshot trait - '//*[@class=\"rust item-decl\"]'\n pub trait ToOwned<T>\n where T: Clone\n {\n@@ -14,7 +14,7 @@ where T: Clone\n }\n \n // @has 'foo/trait.ToOwned2.html'\n-// @snapshot trait2 - '//*[@class=\"item-decl\"]'\n+// @snapshot trait2 - '//*[@class=\"rust item-decl\"]'\n // There should be a whitespace before `{` in this case!\n pub trait ToOwned2<T: Clone> {\n     type Owned;\n@@ -23,7 +23,7 @@ pub trait ToOwned2<T: Clone> {\n }\n \n // @has 'foo/enum.Cow.html'\n-// @snapshot enum - '//*[@class=\"item-decl\"]'\n+// @snapshot enum - '//*[@class=\"rust item-decl\"]'\n pub enum Cow<'a, B: ?Sized + 'a>\n where\n     B: ToOwned<Clone>,\n@@ -33,15 +33,15 @@ where\n }\n \n // @has 'foo/enum.Cow2.html'\n-// @snapshot enum2 - '//*[@class=\"item-decl\"]'\n+// @snapshot enum2 - '//*[@class=\"rust item-decl\"]'\n // There should be a whitespace before `{` in this case!\n pub enum Cow2<'a, B: ?Sized + ToOwned<Clone> + 'a> {\n     Borrowed(&'a B),\n     Whatever(u32),\n }\n \n // @has 'foo/struct.Struct.html'\n-// @snapshot struct - '//*[@class=\"item-decl\"]'\n+// @snapshot struct - '//*[@class=\"rust item-decl\"]'\n pub struct Struct<'a, B: ?Sized + 'a>\n where\n     B: ToOwned<Clone>,\n@@ -51,15 +51,15 @@ where\n }\n \n // @has 'foo/struct.Struct2.html'\n-// @snapshot struct2 - '//*[@class=\"item-decl\"]'\n+// @snapshot struct2 - '//*[@class=\"rust item-decl\"]'\n // There should be a whitespace before `{` in this case!\n pub struct Struct2<'a, B: ?Sized + ToOwned<Clone> + 'a> {\n     pub a: &'a B,\n     pub b: u32,\n }\n \n // @has 'foo/union.Union.html'\n-// @snapshot union - '//*[@class=\"item-decl\"]'\n+// @snapshot union - '//*[@class=\"rust item-decl\"]'\n pub union Union<'a, B: ?Sized + 'a>\n where\n     B: ToOwned<Clone>,\n@@ -69,7 +69,7 @@ where\n }\n \n // @has 'foo/union.Union2.html'\n-// @snapshot union2 - '//*[@class=\"item-decl\"]'\n+// @snapshot union2 - '//*[@class=\"rust item-decl\"]'\n // There should be a whitespace before `{` in this case!\n pub union Union2<'a, B: ?Sized + ToOwned<Clone> + 'a> {\n     a: &'a B,"}, {"sha": "54faee9e4052bc0da60e9db96d78e6fbd5a4bf6d", "filename": "tests/rustdoc/whitespace-after-where-clause.struct.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "d872d516c09438c91107b43db2270e3b24867366", "filename": "tests/rustdoc/whitespace-after-where-clause.struct2.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Struct2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<pre class=\"rust item-decl\"><code>pub struct Struct2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "bc3653de52d165d53fb8bd3af0730ca4b70c1fd8", "filename": "tests/rustdoc/whitespace-after-where-clause.trait.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,6 +1,6 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n+<pre class=\"rust item-decl\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned.html#associatedtype.Owned\" title=\"type foo::ToOwned::Owned\">Owned</a>;\n <span class=\"item-spacer\" />    fn <a href=\"#tymethod.whatever\" class=\"fn\">whatever</a>(&amp;self) -&gt; T;\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "eda4ca72acc1805ad6fda74dbcdcedfb62b26c2d", "filename": "tests/rustdoc/whitespace-after-where-clause.trait2.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,6 +1,6 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait ToOwned2&lt;T:&#160;<a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; {\n+<pre class=\"rust item-decl\"><code>pub trait ToOwned2&lt;T:&#160;<a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; {\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned2.html#associatedtype.Owned\" title=\"type foo::ToOwned2::Owned\">Owned</a>;\n <span class=\"item-spacer\" />    fn <a href=\"#tymethod.whatever\" class=\"fn\">whatever</a>(&amp;self) -&gt; T;\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "03a26280ba2cf9f5eb27e848f8651138227c8413", "filename": "tests/rustdoc/whitespace-after-where-clause.union.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,3 +1,3 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     /* private fields */\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "fc78e9b6039b0f2c7a32917ddd8a3461eae4056d", "filename": "tests/rustdoc/whitespace-after-where-clause.union2.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,3 +1,3 @@\n-<div class=\"item-decl\"><pre class=\"rust\"><code>pub union Union2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<pre class=\"rust item-decl\"><code>pub union Union2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     /* private fields */\n-}</code></pre></div>\n\\ No newline at end of file\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "dd5c700329f14eafa5d2c3519f1fbd7f0a451589", "filename": "tests/rustdoc/wrapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7080f80e8b64eb5f2037de50991edb9e82aee3a5/tests%2Frustdoc%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwrapping.rs?ref=7080f80e8b64eb5f2037de50991edb9e82aee3a5", "patch": "@@ -1,5 +1,5 @@\n use std::fmt::Debug;\n \n-// @has 'wrapping/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo() -> impl Debug'\n-// @count - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/br' 0\n+// @has 'wrapping/fn.foo.html' '//pre[@class=\"rust item-decl\"]' 'pub fn foo() -> impl Debug'\n+// @count - '//pre[@class=\"rust item-decl\"]/br' 0\n pub fn foo() -> impl Debug {}"}]}