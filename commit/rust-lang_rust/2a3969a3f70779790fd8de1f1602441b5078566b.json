{"sha": "2a3969a3f70779790fd8de1f1602441b5078566b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzk2OWEzZjcwNzc5NzkwZmQ4ZGUxZjE2MDI0NDFiNTA3ODU2NmI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-14T14:12:02Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-21T11:35:00Z"}, "message": "Use new region infer errors for explaining borrows\n\nThis gives at least some explanation for why a borrow is expected to\nlast for a certain free region. Also:\n\n* Reports E0373: \"closure may outlive the current function\" with NLL.\n* Special cases the case of returning a reference to (or value\n  referencing) a local variable or temporary (E0515).\n* Special case assigning a reference to a local variable in a closure\n  to a captured variable.", "tree": {"sha": "475915e8d6062700fcced479edfa9aa4b9475d13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/475915e8d6062700fcced479edfa9aa4b9475d13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a3969a3f70779790fd8de1f1602441b5078566b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3969a3f70779790fd8de1f1602441b5078566b", "html_url": "https://github.com/rust-lang/rust/commit/2a3969a3f70779790fd8de1f1602441b5078566b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a3969a3f70779790fd8de1f1602441b5078566b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "275432c1151d1c77afbaebaefa2379a76d1af051", "url": "https://api.github.com/repos/rust-lang/rust/commits/275432c1151d1c77afbaebaefa2379a76d1af051", "html_url": "https://github.com/rust-lang/rust/commit/275432c1151d1c77afbaebaefa2379a76d1af051"}], "stats": {"total": 3669, "additions": 1849, "deletions": 1820}, "files": [{"sha": "b6bb130d3e27f22615d5a73a3e90e23e55e0fe5e", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 283, "deletions": 15, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -9,27 +9,29 @@\n // except according to those terms.\n \n use borrow_check::nll::explain_borrow::BorrowExplanation;\n+use borrow_check::nll::region_infer::{RegionName, RegionNameSource};\n use borrow_check::prefixes::IsPrefixOf;\n use borrow_check::WriteKind;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region::ScopeTree;\n use rustc::mir::{\n-    self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, Constant, Field, Local,\n-    LocalDecl, LocalKind, Location, Operand, Place, PlaceProjection, ProjectionElem,\n-    Rvalue, Statement, StatementKind, TerminatorKind, VarBindingForm,\n+    self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, Constant,\n+    ConstraintCategory, Field, Local, LocalDecl, LocalKind, Location, Operand,\n+    Place, PlaceProjection, ProjectionElem, Rvalue, Statement, StatementKind,\n+    TerminatorKind, VarBindingForm,\n };\n use rustc::ty::{self, DefIdTree};\n use rustc::util::ppaux::with_highlight_region_for_bound_region;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n \n use super::borrow_set::BorrowData;\n use super::{Context, MirBorrowckCtxt};\n use super::{InitializationRequiringAction, PrefixSet};\n-\n use dataflow::drop_flag_effects;\n use dataflow::move_paths::indexes::MoveOutIndex;\n use dataflow::move_paths::MovePathIndex;\n@@ -581,26 +583,81 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n         }\n \n-        let err = match &self.describe_place(&borrow.borrowed_place) {\n-            Some(_) if self.is_place_thread_local(root_place) => {\n+        let place_desc = self.describe_place(&borrow.borrowed_place);\n+\n+        let kind_place = kind.filter(|_| place_desc.is_some()).map(|k| (k, place_span.0));\n+        let explanation = self.explain_why_borrow_contains_point(context, &borrow, kind_place);\n+\n+        let err = match (place_desc, explanation) {\n+            (Some(_), _) if self.is_place_thread_local(root_place) => {\n                 self.report_thread_local_value_does_not_live_long_enough(drop_span, borrow_span)\n             }\n-            Some(name) => self.report_local_value_does_not_live_long_enough(\n+            // If the outlives constraint comes from inside the closure,\n+            // for example:\n+            //\n+            // let x = 0;\n+            // let y = &x;\n+            // Box::new(|| y) as Box<Fn() -> &'static i32>\n+            //\n+            // then just use the normal error. The closure isn't escaping\n+            // and `move` will not help here.\n+            (\n+                Some(ref name),\n+                BorrowExplanation::MustBeValidFor {\n+                    category: category @ ConstraintCategory::Return,\n+                    from_closure: false,\n+                    ref region_name,\n+                    span,\n+                    ..\n+                },\n+            )\n+            | (\n+                Some(ref name),\n+                BorrowExplanation::MustBeValidFor {\n+                    category: category @ ConstraintCategory::CallArgument,\n+                    from_closure: false,\n+                    ref region_name,\n+                    span,\n+                    ..\n+                },\n+            ) if borrow_spans.for_closure() => self.report_escaping_closure_capture(\n+                borrow_spans.args_or_use(),\n+                borrow_span,\n+                region_name,\n+                category,\n+                span,\n+                &format!(\"`{}`\", name),\n+            ),\n+            (\n+                ref name,\n+                BorrowExplanation::MustBeValidFor {\n+                    category: ConstraintCategory::Assignment,\n+                    from_closure: false,\n+                    region_name: RegionName {\n+                        source: RegionNameSource::AnonRegionFromUpvar(upvar_span, ref upvar_name),\n+                        ..\n+                    },\n+                    span,\n+                    ..\n+                },\n+            ) => self.report_escaping_data(borrow_span, name, upvar_span, upvar_name, span),\n+            (Some(name), explanation) => self.report_local_value_does_not_live_long_enough(\n                 context,\n-                name,\n+                &name,\n                 &scope_tree,\n                 &borrow,\n                 drop_span,\n                 borrow_spans,\n-                kind.map(|k| (k, place_span.0)),\n+                explanation,\n             ),\n-            None => self.report_temporary_value_does_not_live_long_enough(\n+            (None, explanation) => self.report_temporary_value_does_not_live_long_enough(\n                 context,\n                 &scope_tree,\n                 &borrow,\n                 drop_span,\n                 borrow_spans,\n                 proper_span,\n+                explanation,\n             ),\n         };\n \n@@ -615,7 +672,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n         borrow_spans: UseSpans,\n-        kind_place: Option<(WriteKind, &Place<'tcx>)>,\n+        explanation: BorrowExplanation,\n     ) -> DiagnosticBuilder<'cx> {\n         debug!(\n             \"report_local_value_does_not_live_long_enough(\\\n@@ -625,13 +682,27 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         let borrow_span = borrow_spans.var_or_use();\n+        if let BorrowExplanation::MustBeValidFor {\n+            category: ConstraintCategory::Return,\n+            span,\n+            ref opt_place_desc,\n+            from_closure: false,\n+            ..\n+        } = explanation {\n+            return self.report_cannot_return_reference_to_local(\n+                borrow,\n+                borrow_span,\n+                span,\n+                opt_place_desc.as_ref(),\n+            );\n+        }\n+\n         let mut err = self.infcx.tcx.path_does_not_live_long_enough(\n             borrow_span,\n             &format!(\"`{}`\", name),\n             Origin::Mir,\n         );\n \n-        let explanation = self.explain_why_borrow_contains_point(context, borrow, kind_place);\n         if let Some(annotation) = self.annotate_argument_and_return_for_borrow(borrow) {\n             let region_name = annotation.emit(&mut err);\n \n@@ -665,7 +736,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 );\n             }\n \n-            if let BorrowExplanation::MustBeValidFor(..) = explanation {\n+            if let BorrowExplanation::MustBeValidFor { .. } = explanation {\n             } else {\n                 explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n             }\n@@ -693,7 +764,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err\n     }\n \n-    pub(super) fn report_borrow_conflicts_with_destructor(\n+    fn report_borrow_conflicts_with_destructor(\n         &mut self,\n         context: Context,\n         borrow: &BorrowData<'tcx>,\n@@ -785,6 +856,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         drop_span: Span,\n         borrow_spans: UseSpans,\n         proper_span: Span,\n+        explanation: BorrowExplanation,\n     ) -> DiagnosticBuilder<'cx> {\n         debug!(\n             \"report_temporary_value_does_not_live_long_enough(\\\n@@ -793,6 +865,20 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             context, scope_tree, borrow, drop_span, proper_span\n         );\n \n+        if let BorrowExplanation::MustBeValidFor {\n+            category: ConstraintCategory::Return,\n+            span,\n+            from_closure: false,\n+            ..\n+        } = explanation {\n+            return self.report_cannot_return_reference_to_local(\n+                borrow,\n+                proper_span,\n+                span,\n+                None,\n+            );\n+        }\n+\n         let tcx = self.infcx.tcx;\n         let mut err = tcx.temporary_value_borrowed_for_too_long(proper_span, Origin::Mir);\n         err.span_label(\n@@ -804,7 +890,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             \"temporary value is freed at the end of this statement\",\n         );\n \n-        let explanation = self.explain_why_borrow_contains_point(context, borrow, None);\n         match explanation {\n             BorrowExplanation::UsedLater(..)\n             | BorrowExplanation::UsedLaterInLoop(..)\n@@ -830,6 +915,189 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err\n     }\n \n+    fn report_cannot_return_reference_to_local(\n+        &self,\n+        borrow: &BorrowData<'tcx>,\n+        borrow_span: Span,\n+        return_span: Span,\n+        opt_place_desc: Option<&String>,\n+    ) -> DiagnosticBuilder<'cx> {\n+        let tcx = self.infcx.tcx;\n+\n+        // FIXME use a better heuristic than Spans\n+        let reference_desc = if return_span == self.mir.source_info(borrow.reserve_location).span {\n+            \"reference to\"\n+        } else {\n+            \"value referencing\"\n+        };\n+\n+        let (place_desc, note) = if let Some(place_desc) = opt_place_desc {\n+            let local_kind = match borrow.borrowed_place {\n+                Place::Local(local) => {\n+                    match self.mir.local_kind(local) {\n+                        LocalKind::ReturnPointer\n+                        | LocalKind::Temp => bug!(\"temporary or return pointer with a name\"),\n+                        LocalKind::Var => \"local variable \",\n+                        LocalKind::Arg\n+                        if !self.mir.upvar_decls.is_empty()\n+                            && local == Local::new(1) => {\n+                            \"variable captured by `move` \"\n+                        }\n+                        LocalKind::Arg => {\n+                            \"function parameter \"\n+                        }\n+                    }\n+                }\n+                _ => \"local data \",\n+            };\n+            (\n+                format!(\"{}`{}`\", local_kind, place_desc),\n+                format!(\"`{}` is borrowed here\", place_desc),\n+            )\n+        } else {\n+            let root_place = self.prefixes(&borrow.borrowed_place, PrefixSet::All)\n+                .last()\n+                .unwrap();\n+            let local = if let Place::Local(local) = *root_place {\n+                local\n+            } else {\n+                bug!(\"report_cannot_return_reference_to_local: not a local\")\n+            };\n+            match self.mir.local_kind(local) {\n+                LocalKind::ReturnPointer | LocalKind::Temp => {\n+                    (\n+                        \"temporary value\".to_string(),\n+                        \"temporary value created here\".to_string(),\n+                    )\n+                }\n+                LocalKind::Arg => {\n+                    (\n+                        \"function parameter\".to_string(),\n+                        \"function parameter borrowed here\".to_string(),\n+                    )\n+                },\n+                LocalKind::Var => bug!(\"local variable without a name\"),\n+            }\n+        };\n+\n+        let mut err = tcx.cannot_return_reference_to_local(\n+            return_span,\n+            reference_desc,\n+            &place_desc,\n+            Origin::Mir,\n+        );\n+\n+        if return_span != borrow_span {\n+            err.span_label(borrow_span, note);\n+        }\n+\n+        err\n+    }\n+\n+    fn report_escaping_closure_capture(\n+        &mut self,\n+        args_span: Span,\n+        var_span: Span,\n+        fr_name: &RegionName,\n+        category: ConstraintCategory,\n+        constraint_span: Span,\n+        captured_var: &str,\n+    ) -> DiagnosticBuilder<'cx> {\n+        let tcx = self.infcx.tcx;\n+\n+        let mut err = tcx.cannot_capture_in_long_lived_closure(\n+            args_span,\n+            captured_var,\n+            var_span,\n+          Origin::Mir,\n+        );\n+\n+        let suggestion = match tcx.sess.source_map().span_to_snippet(args_span) {\n+            Ok(string) => format!(\"move {}\", string),\n+            Err(_) => \"move |<args>| <body>\".to_string()\n+        };\n+\n+        err.span_suggestion_with_applicability(\n+            args_span,\n+            &format!(\"to force the closure to take ownership of {} (and any \\\n+                      other referenced variables), use the `move` keyword\",\n+                      captured_var),\n+            suggestion,\n+            Applicability::MachineApplicable,\n+        );\n+\n+        match category {\n+            ConstraintCategory::Return => {\n+                err.span_note(constraint_span, &format!(\"closure is returned here\"));\n+            }\n+            ConstraintCategory::CallArgument => {\n+                fr_name.highlight_region_name(&mut err);\n+                err.span_note(\n+                    constraint_span,\n+                    &format!(\"function requires argument type to outlive `{}`\", fr_name),\n+                );\n+            }\n+            _ => bug!(\"report_escaping_closure_capture called with unexpected constraint \\\n+                       category: `{:?}`\", category),\n+        }\n+        err\n+    }\n+\n+    fn report_escaping_data(\n+        &mut self,\n+        borrow_span: Span,\n+        name: &Option<String>,\n+        upvar_span: Span,\n+        upvar_name: &str,\n+        escape_span: Span,\n+    ) -> DiagnosticBuilder<'cx> {\n+        let tcx = self.infcx.tcx;\n+\n+        let escapes_from = if tcx.is_closure(self.mir_def_id) {\n+            let tables = tcx.typeck_tables_of(self.mir_def_id);\n+            let mir_hir_id = tcx.hir.def_index_to_hir_id(self.mir_def_id.index);\n+            match tables.node_id_to_type(mir_hir_id).sty {\n+                ty::Closure(..) => \"closure\",\n+                ty::Generator(..) => \"generator\",\n+                _ => bug!(\"Closure body doesn't have a closure or generator type\"),\n+            }\n+        } else {\n+            \"function\"\n+        };\n+\n+        let mut err = tcx.borrowed_data_escapes_closure(escape_span, escapes_from, Origin::Mir);\n+\n+        err.span_label(\n+            upvar_span,\n+            format!(\n+                \"`{}` is declared here, outside of the {} body\",\n+                upvar_name, escapes_from\n+            ),\n+        );\n+\n+        err.span_label(\n+            borrow_span,\n+            format!(\n+                \"borrow is only valid in the {} body\",\n+                escapes_from\n+            ),\n+        );\n+\n+        if let Some(name) = name {\n+            err.span_label(\n+                escape_span,\n+                format!(\"reference to `{}` escapes the {} body here\", name, escapes_from),\n+            );\n+        } else {\n+            err.span_label(\n+                escape_span,\n+                format!(\"reference escapes the {} body here\", escapes_from),\n+            );\n+        }\n+\n+        err\n+    }\n+\n     fn get_moved_indexes(&mut self, context: Context, mpi: MovePathIndex) -> Vec<MoveSite> {\n         let mir = self.mir;\n "}, {"sha": "2bf531d1d3e56660f45b6138024cab33cb14c70e", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 57, "deletions": 21, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -10,27 +10,35 @@\n \n use borrow_check::borrow_set::BorrowData;\n use borrow_check::error_reporting::UseSpans;\n-use borrow_check::nll::region_infer::Cause;\n+use borrow_check::nll::ConstraintDescription;\n+use borrow_check::nll::region_infer::{Cause, RegionName};\n use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n-use rustc::ty::{self, Region, TyCtxt};\n+use rustc::ty::{self, TyCtxt};\n use rustc::mir::{\n-    CastKind, FakeReadCause, Local, Location, Mir, Operand, Place, Projection, ProjectionElem,\n-    Rvalue, Statement, StatementKind, TerminatorKind\n+    CastKind, ConstraintCategory, FakeReadCause, Local, Location, Mir, Operand,\n+    Place, Projection, ProjectionElem, Rvalue, Statement, StatementKind,\n+    TerminatorKind\n };\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n mod find_use;\n \n-pub(in borrow_check) enum BorrowExplanation<'tcx> {\n+pub(in borrow_check) enum BorrowExplanation {\n     UsedLater(LaterUseKind, Span),\n     UsedLaterInLoop(LaterUseKind, Span),\n     UsedLaterWhenDropped {\n         drop_loc: Location,\n         dropped_local: Local,\n         should_note_order: bool,\n     },\n-    MustBeValidFor(Region<'tcx>),\n+    MustBeValidFor {\n+        category: ConstraintCategory,\n+        from_closure: bool,\n+        span: Span,\n+        region_name: RegionName,\n+        opt_place_desc: Option<String>,\n+    },\n     Unexplained,\n }\n \n@@ -43,8 +51,8 @@ pub(in borrow_check) enum LaterUseKind {\n     Other,\n }\n \n-impl<'tcx> BorrowExplanation<'tcx> {\n-    pub(in borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx>(\n+impl BorrowExplanation {\n+    pub(in borrow_check) fn add_explanation_to_diagnostic<'cx, 'gcx, 'tcx>(\n         &self,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n         mir: &Mir<'tcx>,\n@@ -142,15 +150,27 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                         }\n                     }\n                 }\n-            }\n-\n-            BorrowExplanation::MustBeValidFor(region) => {\n-                tcx.note_and_explain_free_region(\n-                    err,\n-                    &format!(\"{}{}\", borrow_desc, \"borrowed value must be valid for \"),\n-                    region,\n-                    \"...\",\n-                );\n+            },\n+            BorrowExplanation::MustBeValidFor {\n+                category,\n+                span,\n+                ref region_name,\n+                ref opt_place_desc,\n+                from_closure: _,\n+            } => {\n+                region_name.highlight_region_name(err);\n+\n+                if let Some(desc) = opt_place_desc {\n+                    err.span_label(span, format!(\n+                        \"{}requires that `{}` is borrowed for `{}`\",\n+                        category.description(), desc, region_name,\n+                    ));\n+                } else {\n+                    err.span_label(span, format!(\n+                        \"{}requires that {}borrow lasts for `{}`\",\n+                        category.description(), borrow_desc, region_name,\n+                    ));\n+                };\n             },\n             _ => {},\n         }\n@@ -176,7 +196,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         context: Context,\n         borrow: &BorrowData<'tcx>,\n         kind_place: Option<(WriteKind, &Place<'tcx>)>,\n-    ) -> BorrowExplanation<'tcx> {\n+    ) -> BorrowExplanation {\n         debug!(\n             \"explain_why_borrow_contains_point(context={:?}, borrow={:?}, kind_place={:?})\",\n             context, borrow, kind_place\n@@ -241,11 +261,27 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                  }\n             }\n \n-            None => if let Some(region) = regioncx.to_error_region(region_sub) {\n-                BorrowExplanation::MustBeValidFor(region)\n+            None => if let Some(region) = regioncx.to_error_region_vid(borrow_region_vid) {\n+                let (category, from_closure, span, region_name) = self\n+                    .nonlexical_regioncx\n+                    .free_region_constraint_info(\n+                        self.mir,\n+                        self.mir_def_id,\n+                        self.infcx,\n+                        borrow_region_vid,\n+                        region,\n+                    );\n+                let opt_place_desc = self.describe_place(&borrow.borrowed_place);\n+                BorrowExplanation::MustBeValidFor {\n+                    category,\n+                    from_closure,\n+                    span,\n+                    region_name,\n+                    opt_place_desc,\n+                }\n             } else {\n                 BorrowExplanation::Unexplained\n-            },\n+            }\n         }\n     }\n "}, {"sha": "8fc54b6ff92a3e2b0099aade09ff191e0fe7f6b2", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -371,3 +371,7 @@ impl ToRegionVid for RegionVid {\n         self\n     }\n }\n+\n+crate trait ConstraintDescription {\n+    fn description(&self) -> &'static str;\n+}"}, {"sha": "ccb44c670f72fd9873469655ddbacfbcdd2b3a67", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use borrow_check::nll::ConstraintDescription;\n use borrow_check::nll::constraints::{OutlivesConstraint};\n use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::region_infer::error_reporting::region_name::RegionNameSource;\n use borrow_check::nll::type_check::Locations;\n use borrow_check::nll::universal_regions::DefiningTy;\n use util::borrowck_errors::{BorrowckErrors, Origin};\n@@ -29,11 +29,7 @@ use syntax::errors::Applicability;\n mod region_name;\n mod var_name;\n \n-use self::region_name::RegionName;\n-\n-trait ConstraintDescription {\n-    fn description(&self) -> &'static str;\n-}\n+crate use self::region_name::{RegionName, RegionNameSource};\n \n impl ConstraintDescription for ConstraintCategory {\n     fn description(&self) -> &'static str {\n@@ -76,7 +72,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir: &Mir<'tcx>,\n         from_region: RegionVid,\n         target_test: impl Fn(RegionVid) -> bool,\n-    ) -> (ConstraintCategory, Span, RegionVid) {\n+    ) -> (ConstraintCategory, bool, Span) {\n         debug!(\"best_blame_constraint(from_region={:?})\", from_region);\n \n         // Find all paths\n@@ -96,13 +92,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n \n         // Classify each of the constraints along the path.\n-        let mut categorized_path: Vec<(ConstraintCategory, Span)> = path\n+        let mut categorized_path: Vec<(ConstraintCategory, bool, Span)> = path\n             .iter()\n             .map(|constraint| {\n                 if constraint.category == ConstraintCategory::ClosureBounds {\n                     self.retrieve_closure_constraint_info(mir, &constraint)\n                 } else {\n-                    (constraint.category, constraint.locations.span(mir))\n+                    (constraint.category, false, constraint.locations.span(mir))\n                 }\n             })\n             .collect();\n@@ -147,20 +143,17 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n         });\n         if let Some(i) = best_choice {\n-            let (category, span) = categorized_path[i];\n-            return (category, span, target_region);\n+            return categorized_path[i]\n         }\n \n         // If that search fails, that is.. unusual. Maybe everything\n         // is in the same SCC or something. In that case, find what\n         // appears to be the most interesting point to report to the\n         // user via an even more ad-hoc guess.\n         categorized_path.sort_by(|p0, p1| p0.0.cmp(&p1.0));\n-        debug!(\"best_blame_constraint: sorted_path={:#?}\", categorized_path);\n+        debug!(\"`: sorted_path={:#?}\", categorized_path);\n \n-        let &(category, span) = categorized_path.first().unwrap();\n-\n-        (category, span, target_region)\n+        *categorized_path.first().unwrap()\n     }\n \n     /// Walks the graph of constraints (where `'a: 'b` is considered\n@@ -247,7 +240,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) {\n         debug!(\"report_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n \n-        let (category, span, _) = self.best_blame_constraint(\n+        let (category, _, span) = self.best_blame_constraint(\n             mir,\n             fr,\n             |r| r == outlived_fr\n@@ -580,6 +573,24 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n     }\n \n+    crate fn free_region_constraint_info(\n+        &self,\n+        mir: &Mir<'tcx>,\n+        mir_def_id: DefId,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        borrow_region: RegionVid,\n+        outlived_region: RegionVid,\n+    ) -> (ConstraintCategory, bool, Span, RegionName) {\n+        let (category, from_closure, span) = self.best_blame_constraint(\n+            mir,\n+            borrow_region,\n+            |r| r == outlived_region\n+        );\n+        let outlived_fr_name = self.give_region_a_name(\n+            infcx, mir, mir_def_id, outlived_region, &mut 1);\n+        (category, from_closure, span, outlived_fr_name)\n+    }\n+\n     // Finds some region R such that `fr1: R` and `R` is live at\n     // `elem`.\n     crate fn find_sub_region_live_at(&self, fr1: RegionVid, elem: Location) -> RegionVid {\n@@ -598,24 +609,26 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr1: RegionVid,\n         fr2: RegionVid,\n     ) -> (ConstraintCategory, Span) {\n-        let (category, span, _) = self.best_blame_constraint(mir, fr1, |r| r == fr2);\n+        let (category, _, span) = self.best_blame_constraint(mir, fr1, |r| r == fr2);\n         (category, span)\n     }\n \n     fn retrieve_closure_constraint_info(\n         &self,\n         mir: &Mir<'tcx>,\n         constraint: &OutlivesConstraint\n-    ) -> (ConstraintCategory, Span) {\n+    ) -> (ConstraintCategory, bool, Span) {\n         let loc = match constraint.locations {\n-            Locations::All(span) => return (constraint.category, span),\n+            Locations::All(span) => return (constraint.category, false, span),\n             Locations::Single(loc) => loc,\n         };\n \n         let opt_span_category = self\n             .closure_bounds_mapping[&loc]\n             .get(&(constraint.sup, constraint.sub));\n-        *opt_span_category.unwrap_or(&(constraint.category, mir.source_info(loc).span))\n+        opt_span_category\n+            .map(|&(category, span)| (category, true, span))\n+            .unwrap_or((constraint.category, false, mir.source_info(loc).span))\n     }\n \n     /// Returns `true` if a closure is inferred to be an `FnMut` closure."}, {"sha": "5ed25406da4e67f8a547c538f73b672aa2fffee5", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -35,6 +35,7 @@ use std::rc::Rc;\n \n mod dump_mir;\n mod error_reporting;\n+crate use self::error_reporting::{RegionName, RegionNameSource};\n mod graphviz;\n pub mod values;\n use self::values::{LivenessValues, RegionValueElements, RegionValues};\n@@ -669,13 +670,19 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// to find a good name from that. Returns `None` if we can't find\n     /// one (e.g., this is just some random part of the CFG).\n     pub fn to_error_region(&self, r: RegionVid) -> Option<ty::Region<'tcx>> {\n+        self.to_error_region_vid(r).and_then(|r| self.definitions[r].external_name)\n+    }\n+\n+    /// Returns the [RegionVid] corresponding to the region returned by\n+    /// `to_error_region`.\n+    pub fn to_error_region_vid(&self, r: RegionVid) -> Option<RegionVid> {\n         if self.universal_regions.is_universal_region(r) {\n-            return self.definitions[r].external_name;\n+            Some(r)\n         } else {\n             let r_scc = self.constraint_sccs.scc(r);\n             let upper_bound = self.universal_upper_bound(r);\n             if self.scc_values.contains(r_scc, upper_bound) {\n-                self.to_error_region(upper_bound)\n+                self.to_error_region_vid(upper_bound)\n             } else {\n                 None\n             }"}, {"sha": "bb3e4a8d8813f7968a4adc6da21b557422b97c57", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2011,6 +2011,46 @@ match 5u32 {\n ```\n \"##,\n \n+E0515: r##\"\n+Cannot return value that references local variable\n+\n+Local variables, function parameters and temporaries are all dropped before the\n+end of the function body. So a reference to them cannot be returned.\n+\n+```compile_fail,E0515\n+#![feature(nll)]\n+fn get_dangling_reference() -> &'static i32 {\n+    let x = 0;\n+    &x\n+}\n+```\n+\n+```compile_fail,E0515\n+#![feature(nll)]\n+use std::slice::Iter;\n+fn get_dangling_iterator<'a>() -> Iter<'a, i32> {\n+    let v = vec![1, 2, 3];\n+    v.iter()\n+}\n+```\n+\n+Consider returning an owned value instead:\n+\n+```\n+use std::vec::IntoIter;\n+\n+fn get_integer() -> i32 {\n+    let x = 0;\n+    x\n+}\n+\n+fn get_owned_iterator() -> IntoIter<i32> {\n+    let v = vec![1, 2, 3];\n+    v.into_iter()\n+}\n+```\n+\"##,\n+\n E0595: r##\"\n Closures cannot mutate immutable captured variables.\n "}, {"sha": "1715086686c4224dfb70900f34c14a9cf37a0a16", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -632,6 +632,31 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self.cancel_if_wrong_origin(err, o)\n     }\n \n+    fn cannot_return_reference_to_local(\n+        self,\n+        span: Span,\n+        reference_desc: &str,\n+        path_desc: &str,\n+        o: Origin,\n+    ) -> DiagnosticBuilder<'cx> {\n+        let mut err = struct_span_err!(\n+            self,\n+            span,\n+            E0515,\n+            \"cannot return {REFERENCE} {LOCAL}{OGN}\",\n+            REFERENCE=reference_desc,\n+            LOCAL=path_desc,\n+            OGN = o\n+        );\n+\n+        err.span_label(\n+            span,\n+            format!(\"returns a {} data owned by the current function\", reference_desc),\n+        );\n+\n+        self.cancel_if_wrong_origin(err, o)\n+    }\n+\n     fn lifetime_too_short_for_reborrow(\n         self,\n         span: Span,"}, {"sha": "d8df914a8b9f31c6fb1188f9ff0c3e9234a8e2ee", "filename": "src/test/ui/borrowck/borrowck-borrow-from-temporary.nll.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,18 +1,11 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-borrow-from-temporary.rs:19:24\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/borrowck-borrow-from-temporary.rs:20:5\n    |\n LL |     let &Foo(ref x) = &id(Foo(3)); //~ ERROR borrowed value does not live long enough\n-   |                        ^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |                        ---------- temporary value created here\n LL |     x\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 18:8...\n-  --> $DIR/borrowck-borrow-from-temporary.rs:18:8\n-   |\n-LL | fn foo<'a>() -> &'a isize {\n-   |        ^^\n+   |     ^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "ceb145eea7721e535f15ccd39f51280b1e585582", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.nll.stderr", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,16 +1,21 @@\n-error[E0597]: `books` does not live long enough\n-  --> $DIR/borrowck-escaping-closure-error-1.rs:23:14\n+error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n+  --> $DIR/borrowck-escaping-closure-error-1.rs:23:11\n    |\n LL |     spawn(|| books.push(4));\n-   |           -- ^^^^^ borrowed value does not live long enough\n+   |           ^^ ----- `books` is borrowed here\n    |           |\n-   |           value captured here\n-LL |     //~^ ERROR E0373\n-LL | }\n-   | - `books` dropped here while still borrowed\n+   |           may outlive borrowed value `books`\n    |\n-   = note: borrowed value must be valid for the static lifetime...\n+note: function requires argument type to outlive `'static`\n+  --> $DIR/borrowck-escaping-closure-error-1.rs:23:5\n+   |\n+LL |     spawn(|| books.push(4));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     spawn(move || books.push(4));\n+   |           ^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "454264727de79a552cf68d33ca73f25f8348fe1d", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.nll.stderr", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,20 +1,21 @@\n-error[E0597]: `books` does not live long enough\n-  --> $DIR/borrowck-escaping-closure-error-2.rs:21:17\n+error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:21:14\n    |\n LL |     Box::new(|| books.push(4))\n-   |              -- ^^^^^ borrowed value does not live long enough\n+   |              ^^ ----- `books` is borrowed here\n    |              |\n-   |              value captured here\n-LL |     //~^ ERROR E0373\n-LL | }\n-   | - `books` dropped here while still borrowed\n+   |              may outlive borrowed value `books`\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 19:8...\n-  --> $DIR/borrowck-escaping-closure-error-2.rs:19:8\n+note: closure is returned here\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:21:5\n    |\n-LL | fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n-   |        ^^\n+LL |     Box::new(|| books.push(4))\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     Box::new(move || books.push(4))\n+   |              ^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "70173058a3676808d5a5420b21e618c39249ffe0", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-c.nll.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,11 +2,9 @@ error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/borrowck-fn-in-const-c.rs:27:16\n    |\n LL |         return &local.inner; //~ ERROR does not live long enough\n-   |                ^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^ returning this value requires that `local.inner` is borrowed for `'static`\n LL |     }\n    |     - here, drop of `local` needs exclusive access to `local.inner`, because the type `DropString` implements the `Drop` trait\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "54865123b7112d61473509f25ca2295395fe27a5", "filename": "src/test/ui/borrowck/borrowck-loan-of-static-data-issue-27616.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,12 +2,12 @@ error[E0506]: cannot assign to `*s` because it is borrowed\n   --> $DIR/borrowck-loan-of-static-data-issue-27616.rs:26:5\n    |\n LL |     let alias: &'static mut String = s;\n-   |                                      - borrow of `*s` occurs here\n+   |                -------------------   - borrow of `*s` occurs here\n+   |                |\n+   |                type annotation requires that `*s` is borrowed for `'static`\n ...\n LL |     *s = String::new(); //~ ERROR cannot assign\n    |     ^^ assignment to borrowed `*s` occurs here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "c806545c591784eaf63adc815dc4cb259336e6a3", "filename": "src/test/ui/borrowck/borrowck-local-borrow-outlives-fn.ast.nll.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.ast.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,14 +1,9 @@\n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to function parameter `x`\n   --> $DIR/borrowck-local-borrow-outlives-fn.rs:15:5\n    |\n LL |     &x\n-   |     ^^ borrowed value does not live long enough\n-...\n-LL | }\n-   |  - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^^ returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "c806545c591784eaf63adc815dc4cb259336e6a3", "filename": "src/test/ui/borrowck/borrowck-local-borrow-outlives-fn.mir.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.mir.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,14 +1,9 @@\n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to function parameter `x`\n   --> $DIR/borrowck-local-borrow-outlives-fn.rs:15:5\n    |\n LL |     &x\n-   |     ^^ borrowed value does not live long enough\n-...\n-LL | }\n-   |  - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^^ returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "7d78925f2db0cf1b1dd472ae2d073bbb1b59568f", "filename": "src/test/ui/borrowck/borrowck-local-borrow-outlives-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -14,7 +14,7 @@\n fn cplusplus_mode(x: isize) -> &'static isize {\n     &x\n     //[ast]~^ ERROR `x` does not live long enough [E0597]\n-    //[mir]~^^ ERROR `x` does not live long enough [E0597]\n+    //[mir]~^^ ERROR cannot return reference to function parameter `x` [E0515]\n }\n \n fn main() {}"}, {"sha": "c62cbfd1ee9f639da5dc99573d285a7564ddba49", "filename": "src/test/ui/borrowck/borrowck-local-borrow-with-panic-outlives-fn.ast.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.ast.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,12 +2,13 @@ error[E0597]: `z.1` does not live long enough\n   --> $DIR/borrowck-local-borrow-with-panic-outlives-fn.rs:16:15\n    |\n LL |     *x = Some(&mut z.1);\n-   |               ^^^^^^^^ borrowed value does not live long enough\n+   |     ----------^^^^^^^^-\n+   |     |         |\n+   |     |         borrowed value does not live long enough\n+   |     assignment requires that `z.1` is borrowed for `'static`\n ...\n LL | }\n    | - `z.1` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "c62cbfd1ee9f639da5dc99573d285a7564ddba49", "filename": "src/test/ui/borrowck/borrowck-local-borrow-with-panic-outlives-fn.mir.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.mir.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,12 +2,13 @@ error[E0597]: `z.1` does not live long enough\n   --> $DIR/borrowck-local-borrow-with-panic-outlives-fn.rs:16:15\n    |\n LL |     *x = Some(&mut z.1);\n-   |               ^^^^^^^^ borrowed value does not live long enough\n+   |     ----------^^^^^^^^-\n+   |     |         |\n+   |     |         borrowed value does not live long enough\n+   |     assignment requires that `z.1` is borrowed for `'static`\n ...\n LL | }\n    | - `z.1` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "7d6b670e53658fcf74ad147a3a0645e4ef294c85", "filename": "src/test/ui/borrowck/borrowck-return-variable-on-stack-via-clone.nll.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,17 +1,12 @@\n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return value referencing function parameter `x`\n   --> $DIR/borrowck-return-variable-on-stack-via-clone.rs:17:5\n    |\n LL |     (&x).clone() //~ ERROR `x` does not live long enough\n-   |     ^^^^ borrowed value does not live long enough\n-LL | }\n-   | - `x` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 16:9...\n-  --> $DIR/borrowck-return-variable-on-stack-via-clone.rs:16:9\n-   |\n-LL | fn leak<'a, T>(x: T) -> &'a T {\n-   |         ^^\n+   |     ----^^^^^^^^\n+   |     |\n+   |     returns a value referencing data owned by the current function\n+   |     `x` is borrowed here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "f32509737a1ddecffce42926a79ce76900e08877", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-element-loan.nll.stderr", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,48 +1,30 @@\n-error[E0597]: `vec` does not live long enough\n-  --> $DIR/borrowck-vec-pattern-element-loan.rs:15:25\n+error[E0515]: cannot return value referencing local variable `vec`\n+  --> $DIR/borrowck-vec-pattern-element-loan.rs:20:5\n    |\n LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n-   |                         ^^^^ borrowed value does not live long enough\n+   |                         ---- `vec` is borrowed here\n ...\n-LL | }\n-   | - `vec` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:6...\n-  --> $DIR/borrowck-vec-pattern-element-loan.rs:13:6\n-   |\n-LL | fn a<'a>() -> &'a [isize] {\n-   |      ^^\n+LL |     tail\n+   |     ^^^^ returns a value referencing data owned by the current function\n \n-error[E0597]: `vec` does not live long enough\n-  --> $DIR/borrowck-vec-pattern-element-loan.rs:25:25\n+error[E0515]: cannot return value referencing local variable `vec`\n+  --> $DIR/borrowck-vec-pattern-element-loan.rs:30:5\n    |\n LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n-   |                         ^^^^ borrowed value does not live long enough\n+   |                         ---- `vec` is borrowed here\n ...\n-LL | }\n-   | - `vec` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 23:6...\n-  --> $DIR/borrowck-vec-pattern-element-loan.rs:23:6\n-   |\n-LL | fn b<'a>() -> &'a [isize] {\n-   |      ^^\n+LL |     init\n+   |     ^^^^ returns a value referencing data owned by the current function\n \n-error[E0597]: `vec` does not live long enough\n-  --> $DIR/borrowck-vec-pattern-element-loan.rs:35:25\n+error[E0515]: cannot return value referencing local variable `vec`\n+  --> $DIR/borrowck-vec-pattern-element-loan.rs:40:5\n    |\n LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n-   |                         ^^^^ borrowed value does not live long enough\n+   |                         ---- `vec` is borrowed here\n ...\n-LL | }\n-   | - `vec` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 33:6...\n-  --> $DIR/borrowck-vec-pattern-element-loan.rs:33:6\n-   |\n-LL | fn c<'a>() -> &'a [isize] {\n-   |      ^^\n+LL |     slice\n+   |     ^^^^^ returns a value referencing data owned by the current function\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "dcbc283062ffb32991590dc37c60a4e60fd5f318", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-tail-element-loan.nll.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,18 +1,12 @@\n-error[E0597]: `vec` does not live long enough\n-  --> $DIR/borrowck-vec-pattern-tail-element-loan.rs:15:25\n+error[E0515]: cannot return value referencing local variable `vec`\n+  --> $DIR/borrowck-vec-pattern-tail-element-loan.rs:20:5\n    |\n LL |     let vec: &[isize] = &vec; //~ ERROR `vec` does not live long enough\n-   |                         ^^^^ borrowed value does not live long enough\n+   |                         ---- `vec` is borrowed here\n ...\n-LL | }\n-   | - `vec` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:6...\n-  --> $DIR/borrowck-vec-pattern-tail-element-loan.rs:13:6\n-   |\n-LL | fn a<'a>() -> &'a isize {\n-   |      ^^\n+LL |     tail\n+   |     ^^^^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "e57c64ae12730394a36d5a5557e18eacdb1f2b0c", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.nll.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,38 +1,38 @@\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:20:25\n    |\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n-   |                         ^^^ mutable borrow starts here in previous iteration of loop\n-   |\n-note: first borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n-  --> $DIR/mut-borrow-in-loop.rs:17:6\n-   |\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n-   |      ^^\n+   |      -- lifetime `'a` defined here\n+...\n+LL |             (self.func)(arg) //~ ERROR cannot borrow\n+   |             ------------^^^-\n+   |             |           |\n+   |             |           mutable borrow starts here in previous iteration of loop\n+   |             argument requires that `*arg` is borrowed for `'a`\n \n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:26:25\n    |\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n-   |                         ^^^ mutable borrow starts here in previous iteration of loop\n-   |\n-note: first borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n-  --> $DIR/mut-borrow-in-loop.rs:17:6\n-   |\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n-   |      ^^\n+   |      -- lifetime `'a` defined here\n+...\n+LL |             (self.func)(arg) //~ ERROR cannot borrow\n+   |             ------------^^^-\n+   |             |           |\n+   |             |           mutable borrow starts here in previous iteration of loop\n+   |             argument requires that `*arg` is borrowed for `'a`\n \n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:33:25\n    |\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n-   |                         ^^^ mutable borrow starts here in previous iteration of loop\n-   |\n-note: first borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n-  --> $DIR/mut-borrow-in-loop.rs:17:6\n-   |\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n-   |      ^^\n+   |      -- lifetime `'a` defined here\n+...\n+LL |             (self.func)(arg) //~ ERROR cannot borrow\n+   |             ------------^^^-\n+   |             |           |\n+   |             |           mutable borrow starts here in previous iteration of loop\n+   |             argument requires that `*arg` is borrowed for `'a`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "229da2a330bd676697cb23cd0040c9e77943a137", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.nll.stderr", "status": "modified", "additions": 35, "deletions": 42, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,57 +1,50 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:15:21\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:16:5\n    |\n LL |     let ref mut x = 1234543; //~ ERROR\n-   |                     ^^^^^^^ creates a temporary which is freed while still in use\n+   |                     ------- temporary value created here\n LL |     x\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^ returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:20:25\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:21:5\n    |\n LL |     let (ref mut x, ) = (1234543, ); //~ ERROR\n-   |                         ^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |                         ----------- temporary value created here\n LL |     x\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^ returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:25:11\n-   |\n-LL |     match 1234543 {\n-   |           ^^^^^^^ creates a temporary which is freed while still in use\n-...\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:25:5\n+   |\n+LL |       match 1234543 {\n+   |       ^     ------- temporary value created here\n+   |  _____|\n+   | |\n+LL | |         ref mut x => x //~ ERROR\n+LL | |     }\n+   | |_____^ returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:31:11\n-   |\n-LL |     match (123443,) {\n-   |           ^^^^^^^^^ creates a temporary which is freed while still in use\n-...\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:31:5\n+   |\n+LL |       match (123443,) {\n+   |       ^     --------- temporary value created here\n+   |  _____|\n+   | |\n+LL | |         (ref mut x,) => x, //~ ERROR\n+LL | |     }\n+   | |_____^ returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:37:10\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:37:5\n    |\n LL |     &mut 1234543 //~ ERROR\n-   |          ^^^^^^^ creates a temporary which is freed while still in use\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^^^^^-------\n+   |     |    |\n+   |     |    temporary value created here\n+   |     returns a reference to data owned by the current function\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "5a90a9ff52c0830236863abb606309b4ff52681f", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.nll.stderr", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -68,17 +68,15 @@ LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:183:5\n    |\n+LL | fn register_plugins<'a>(mk_reg: impl Fn() -> &'a mut Registry<'a>) {\n+   |                     -- lifetime `'a` defined here\n+...\n LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n-   |     |                                           |\n-   |     |                                           immutable borrow occurs here\n+   |     ^^^^^^^^^^^^^^^^^^-----------------------------------------^\n+   |     |                 |                         |\n+   |     |                 |                         immutable borrow occurs here\n+   |     |                 cast requires that `reg.sess_mut` is borrowed for `'a`\n    |     mutable borrow occurs here\n-   |\n-note: immutable borrowed value must be valid for the lifetime 'a as defined on the function body at 122:21...\n-  --> $DIR/two-phase-surprise-no-conflict.rs:122:21\n-   |\n-LL | fn register_plugins<'a>(mk_reg: impl Fn() -> &'a mut Registry<'a>) {\n-   |                     ^^\n \n error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:188:5\n@@ -112,17 +110,15 @@ LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:206:5\n    |\n+LL | fn register_plugins<'a>(mk_reg: impl Fn() -> &'a mut Registry<'a>) {\n+   |                     -- lifetime `'a` defined here\n+...\n LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n-   |     |                                               |\n-   |     |                                               first mutable borrow occurs here\n+   |     ^^^^^^^^^^^^^^^^^^-------------------------------------------------^\n+   |     |                 |                             |\n+   |     |                 |                             first mutable borrow occurs here\n+   |     |                 cast requires that `reg.sess_mut` is borrowed for `'a`\n    |     second mutable borrow occurs here\n-   |\n-note: first borrowed value must be valid for the lifetime 'a as defined on the function body at 122:21...\n-  --> $DIR/two-phase-surprise-no-conflict.rs:122:21\n-   |\n-LL | fn register_plugins<'a>(mk_reg: impl Fn() -> &'a mut Registry<'a>) {\n-   |                     ^^\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:206:53"}, {"sha": "8c4806cddfe0d40f7b7aa048a5d96afd40339098", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -10,33 +10,33 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn.rs:28:28\n    |\n LL |     let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n-   |                            ^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn.rs:32:28\n    |\n LL |     let _: &'static u32 = &meh(); //~ ERROR does not live long enough\n-   |                            ^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn.rs:33:26\n    |\n LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |     //~^ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 4 previous errors\n "}, {"sha": "15fd28cd5a50a231050262b525eb87479f792fbc", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn_cross_crate.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,22 +2,22 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:18:28\n    |\n LL |     let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n-   |                            ^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |     let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:19:29\n    |\n LL |     let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n-   |                             ^^^^^ creates a temporary which is freed while still in use\n+   |             ------------    ^^^^^ creates a temporary which is freed while still in use\n+   |             |\n+   |             type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bd14b1a2b5d41b6522ccc7be7431e2a425baab4a", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,12 +2,12 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_const_fn_fail.rs:30:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1); //~ ERROR does not live long enough\n-   |                           ^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "7141d7ac8b8625396852c91bb6cee85fc7598781", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,44 +2,44 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:14:29\n    |\n LL |     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:16:30\n    |\n LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:17:28\n    |\n LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:18:29\n    |\n LL |     let a: &'static bool = &(main as fn() == main as fn()); //~ ERROR does not live long enough\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a8ae44362660e49b7ccc9b47e3eac9c1e5a52d71", "filename": "src/test/ui/consts/const-eval/transmute-const-promotion.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,12 +2,12 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/transmute-const-promotion.rs:16:37\n    |\n LL |     let x: &'static u32 = unsafe { &mem::transmute(3.0f32) };\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------             ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |     //~^ ERROR value does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "60ce75a6f9b3933fc2d603524619f1c6810019cc", "filename": "src/test/ui/consts/const-eval/union_promotion.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,14 +2,14 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/union_promotion.rs:19:29\n    |\n LL |       let x: &'static bool = &unsafe { //~ borrowed value does not live long enough\n-   |  _____________________________^\n+   |  ____________-------------____^\n+   | |            |\n+   | |            type annotation requires that borrow lasts for `'static`\n LL | |         Foo { a: &1 }.b == Foo { a: &2 }.b\n LL | |     };\n    | |_____^ creates a temporary which is freed while still in use\n LL |   }\n    |   - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "fbf0803214b5661f54d26f3f0ab85340b8363b1e", "filename": "src/test/ui/consts/const-int-conversion.nll.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,78 +2,78 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:14:28\n    |\n LL |     let x: &'static i32 = &(5_i32.reverse_bits());\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:16:28\n    |\n LL |     let y: &'static i32 = &(i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]));\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:18:28\n    |\n LL |     let z: &'static i32 = &(i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]));\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:20:28\n    |\n LL |     let a: &'static i32 = &(i32::from_be(i32::from_ne_bytes([0x80, 0, 0, 0])));\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:22:29\n    |\n LL |     let b: &'static [u8] = &(0x12_34_56_78_i32.to_be_bytes());\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:24:29\n    |\n LL |     let c: &'static [u8] = &(0x12_34_56_78_i32.to_le_bytes());\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:26:29\n    |\n LL |     let d: &'static [u8] = &(i32::min_value().to_be().to_ne_bytes());\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |         //~^ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 7 previous errors\n "}, {"sha": "64ea01dd1d6ac0659b2f31c95da8f1e861383692", "filename": "src/test/ui/consts/const-int-overflowing.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,33 +2,33 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-overflowing.rs:12:36\n    |\n LL |     let x: &'static (i32, bool) = &(5_i32.overflowing_add(3)); //~ ERROR does not live long enough\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-overflowing.rs:13:36\n    |\n LL |     let y: &'static (i32, bool) = &(5_i32.overflowing_sub(3)); //~ ERROR does not live long enough\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |     let z: &'static (i32, bool) = &(5_i32.overflowing_mul(3)); //~ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-overflowing.rs:14:36\n    |\n LL |     let z: &'static (i32, bool) = &(5_i32.overflowing_mul(3)); //~ ERROR does not live long enough\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a8a7973bc03beba6311e0d34150b7409c21ac829", "filename": "src/test/ui/consts/const-int-rotate.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,22 +2,22 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-rotate.rs:12:28\n    |\n LL |     let x: &'static i32 = &(5_i32.rotate_left(3)); //~ ERROR does not live long enough\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |     let y: &'static i32 = &(5_i32.rotate_right(3)); //~ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-rotate.rs:13:28\n    |\n LL |     let y: &'static i32 = &(5_i32.rotate_right(3)); //~ ERROR does not live long enough\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "afc994457b6cccf0ea74a2de83a222a780cfbff4", "filename": "src/test/ui/consts/const-int-sign.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,22 +2,22 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-sign.rs:12:29\n    |\n LL |     let x: &'static bool = &(5_i32.is_negative()); //~ ERROR does not live long enough\n-   |                             ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |     let y: &'static bool = &(5_i32.is_positive()); //~ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-sign.rs:13:29\n    |\n LL |     let y: &'static bool = &(5_i32.is_positive()); //~ ERROR does not live long enough\n-   |                             ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4f89c79b83bf08af6a925ea185254f79874b2e89", "filename": "src/test/ui/consts/const-int-wrapping.nll.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,55 +2,55 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:12:28\n    |\n LL |     let x: &'static i32 = &(5_i32.wrapping_add(3)); //~ ERROR does not live long enough\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:13:28\n    |\n LL |     let y: &'static i32 = &(5_i32.wrapping_sub(3)); //~ ERROR does not live long enough\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:14:28\n    |\n LL |     let z: &'static i32 = &(5_i32.wrapping_mul(3)); //~ ERROR does not live long enough\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:15:28\n    |\n LL |     let a: &'static i32 = &(5_i32.wrapping_shl(3)); //~ ERROR does not live long enough\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |     let b: &'static i32 = &(5_i32.wrapping_shr(3)); //~ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:16:28\n    |\n LL |     let b: &'static i32 = &(5_i32.wrapping_shr(3)); //~ ERROR does not live long enough\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 5 previous errors\n "}, {"sha": "451f49c1cb57abecf1253e7298ccedeabcc1b9e6", "filename": "src/test/ui/consts/issue-54224.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,21 +2,21 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-54224.rs:3:39\n    |\n LL | const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]); //~ ERROR temporary value dropped while borrowed\n-   |                                       ^^^^^^^^^- temporary value is freed at the end of this statement\n-   |                                       |\n-   |                                       creates a temporary which is freed while still in use\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |                                 ------^^^^^^^^^-\n+   |                                 |     |        |\n+   |                                 |     |        temporary value is freed at the end of this statement\n+   |                                 |     creates a temporary which is freed while still in use\n+   |                                 using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-54224.rs:11:57\n    |\n LL | pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n-   |                                                         ^^^^^^^^^- temporary value is freed at the end of this statement\n-   |                                                         |\n-   |                                                         creates a temporary which is freed while still in use\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |                                          ---------------^^^^^^^^^-\n+   |                                          |              |        |\n+   |                                          |              |        temporary value is freed at the end of this statement\n+   |                                          |              creates a temporary which is freed while still in use\n+   |                                          using this value as a constant requires that borrow lasts for `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f43befb37c134ad72629ffde0c713f995dc34081", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -190,15 +190,15 @@ error: trait bounds other than `Sized` on const fn parameters are unstable\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning[E0716]: temporary value dropped while borrowed\n-  --> $DIR/min_const_fn.rs:142:64\n+warning[E0515]: cannot return reference to temporary value\n+  --> $DIR/min_const_fn.rs:142:63\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                                                ^^ - temporary value is freed at the end of this statement\n-   |                                                                |\n-   |                                                                creates a temporary which is freed while still in use\n+   |                                                               ^--\n+   |                                                               ||\n+   |                                                               |temporary value created here\n+   |                                                               returns a reference to data owned by the current function\n    |\n-   = note: borrowed value must be valid for the static lifetime...\n    = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n            It represents potential unsoundness in your code.\n            This warning will become a hard error in the future.\n@@ -223,5 +223,5 @@ LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n \n error: aborting due to 35 previous errors\n \n-Some errors occurred: E0493, E0716.\n+Some errors occurred: E0493, E0515.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "4ec00a164566a899faadf02060660d6019ecb6f0", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -14,11 +14,11 @@ warning[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn_dyn.rs:22:67\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-   |                                                                   ^    - temporary value is freed at the end of this statement\n-   |                                                                   |\n-   |                                                                   creates a temporary which is freed while still in use\n+   |                                                                  -^    - temporary value is freed at the end of this statement\n+   |                                                                  ||\n+   |                                                                  |creates a temporary which is freed while still in use\n+   |                                                                  cast requires that borrow lasts for `'static`\n    |\n-   = note: borrowed value must be valid for the static lifetime...\n    = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n            It represents potential unsoundness in your code.\n            This warning will become a hard error in the future."}, {"sha": "eb186ce4951372189cb8f8c32096cf53bd5b3639", "filename": "src/test/ui/consts/min_const_fn/promotion.nll.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,66 +2,66 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:11:27\n    |\n LL |     let x: &'static () = &foo1(); //~ ERROR does not live long enough\n-   |                           ^^^^^^ creates a temporary which is freed while still in use\n+   |            -----------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:12:28\n    |\n LL |     let y: &'static i32 = &foo2(42); //~ ERROR does not live long enough\n-   |                            ^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:13:28\n    |\n LL |     let z: &'static i32 = &foo3(); //~ ERROR does not live long enough\n-   |                            ^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:14:34\n    |\n LL |     let a: &'static Cell<i32> = &foo4();  //~ ERROR does not live long enough\n-   |                                  ^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:15:42\n    |\n LL |     let a: &'static Option<Cell<i32>> = &foo5(); //~ ERROR does not live long enough\n-   |                                          ^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:16:42\n    |\n LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n-   |                                          ^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6200ec3722cbf88159f6d415c2c9900b0702d9e5", "filename": "src/test/ui/dropck/drop-with-active-borrows-2.nll.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-2.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,18 +1,12 @@\n-error[E0597]: `raw_lines` does not live long enough\n+error[E0515]: cannot return value referencing local variable `raw_lines`\n   --> $DIR/drop-with-active-borrows-2.rs:13:5\n    |\n LL |     raw_lines.iter().map(|l| l.trim()).collect()\n-   |     ^^^^^^^^^ borrowed value does not live long enough\n-LL |     //~^ ERROR `raw_lines` does not live long enough\n-LL | }\n-   | - `raw_lines` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 11:24...\n-  --> $DIR/drop-with-active-borrows-2.rs:11:24\n-   |\n-LL | fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n-   |                        ^^\n+   |     ---------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     returns a value referencing data owned by the current function\n+   |     `raw_lines` is borrowed here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "d4b74841b0db71fa8685a7ec3fa08061cdf7ce56", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.nll.stderr", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,67 +1,72 @@\n error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:121:13\n    |\n+LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n LL |     o1.set0(&o2); //~ ERROR `o2` does not live long enough\n    |             ^^^ borrowed value does not live long enough\n ...\n LL | }\n    | - `o2` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:122:13\n    |\n+LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                             -------- cast requires that `o3` is borrowed for `'static`\n+LL |     o1.set0(&o2); //~ ERROR `o2` does not live long enough\n LL |     o1.set1(&o3); //~ ERROR `o3` does not live long enough\n    |             ^^^ borrowed value does not live long enough\n ...\n LL | }\n    | - `o3` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:123:13\n    |\n+LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n+...\n LL |     o2.set0(&o2); //~ ERROR `o2` does not live long enough\n    |             ^^^ borrowed value does not live long enough\n ...\n LL | }\n    | - `o2` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:124:13\n    |\n+LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                             -------- cast requires that `o3` is borrowed for `'static`\n+...\n LL |     o2.set1(&o3); //~ ERROR `o3` does not live long enough\n    |             ^^^ borrowed value does not live long enough\n ...\n LL | }\n    | - `o3` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `o1` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:125:13\n    |\n+LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n+   |                                                         -------- cast requires that `o1` is borrowed for `'static`\n+...\n LL |     o3.set0(&o1); //~ ERROR `o1` does not live long enough\n    |             ^^^ borrowed value does not live long enough\n LL |     o3.set1(&o2); //~ ERROR `o2` does not live long enough\n LL | }\n    | - `o1` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:126:13\n    |\n+LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n+...\n LL |     o3.set1(&o2); //~ ERROR `o2` does not live long enough\n    |             ^^^ borrowed value does not live long enough\n LL | }\n    | - `o2` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 6 previous errors\n "}, {"sha": "4f85266e3fd7fa3203c927745b4760097da4af02", "filename": "src/test/ui/dst/dst-bad-coerce3.nll.stderr", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,62 +1,57 @@\n error[E0597]: `f1` does not live long enough\n   --> $DIR/dst-bad-coerce3.rs:26:32\n    |\n+LL | fn baz<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n LL |     let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough\n    |                                ^^^ borrowed value does not live long enough\n+LL |     let f3: &'a Fat<[isize]> = f2;\n+   |             ---------------- type annotation requires that `f1` is borrowed for `'a`\n ...\n LL | }\n    | - `f1` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 23:8...\n-  --> $DIR/dst-bad-coerce3.rs:23:8\n-   |\n-LL | fn baz<'a>() {\n-   |        ^^\n \n error[E0597]: `f1` does not live long enough\n   --> $DIR/dst-bad-coerce3.rs:31:25\n    |\n+LL | fn baz<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n LL |     let f2: &Fat<Foo> = &f1; //~ ERROR `f1` does not live long enough\n    |                         ^^^ borrowed value does not live long enough\n+LL |     let f3: &'a Fat<Bar> = f2;\n+   |             ------------ type annotation requires that `f1` is borrowed for `'a`\n ...\n LL | }\n    | - `f1` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 23:8...\n-  --> $DIR/dst-bad-coerce3.rs:23:8\n-   |\n-LL | fn baz<'a>() {\n-   |        ^^\n \n error[E0597]: `f1` does not live long enough\n   --> $DIR/dst-bad-coerce3.rs:36:30\n    |\n+LL | fn baz<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n LL |     let f2: &([isize; 3],) = &f1; //~ ERROR `f1` does not live long enough\n    |                              ^^^ borrowed value does not live long enough\n+LL |     let f3: &'a ([isize],) = f2;\n+   |             -------------- type annotation requires that `f1` is borrowed for `'a`\n ...\n LL | }\n    | - `f1` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 23:8...\n-  --> $DIR/dst-bad-coerce3.rs:23:8\n-   |\n-LL | fn baz<'a>() {\n-   |        ^^\n \n error[E0597]: `f1` does not live long enough\n   --> $DIR/dst-bad-coerce3.rs:41:23\n    |\n+LL | fn baz<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n LL |     let f2: &(Foo,) = &f1; //~ ERROR `f1` does not live long enough\n    |                       ^^^ borrowed value does not live long enough\n LL |     let f3: &'a (Bar,) = f2;\n+   |             ---------- type annotation requires that `f1` is borrowed for `'a`\n LL | }\n    | - `f1` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 23:8...\n-  --> $DIR/dst-bad-coerce3.rs:23:8\n-   |\n-LL | fn baz<'a>() {\n-   |        ^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6a423aea7eceb24e6046d4106e9b38d89eb4aa35", "filename": "src/test/ui/generator/generator-region-requirements.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,11 +1,11 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/generator-region-requirements.rs:11:9\n+  --> $DIR/generator-region-requirements.rs:15:51\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              -------- help: add explicit lifetime `'static` to the type of `x`: `&'static mut i32`\n ...\n-LL |         x\n-   |         ^ lifetime `'static` required\n+LL |             GeneratorState::Complete(c) => return c,\n+   |                                                   ^ lifetime `'static` required\n \n error: aborting due to previous error\n "}, {"sha": "b9096c42a0d420bb0f929b23c9bc49302a0a6914", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.nll.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,12 +1,15 @@\n-error[E0597]: `b` does not live long enough\n-  --> $DIR/ref-escapes-but-not-over-yield.rs:24:13\n+error[E0521]: borrowed data escapes outside of generator\n+  --> $DIR/ref-escapes-but-not-over-yield.rs:24:9\n    |\n+LL |     let mut a = &3;\n+   |         ----- `a` is declared here, outside of the generator body\n+...\n LL |         a = &b;\n-   |             ^^ borrowed value does not live long enough\n-LL |         //~^ ERROR `b` does not live long enough\n-LL |     };\n-   |     - `b` dropped here while still borrowed\n+   |         ^^^^--\n+   |         |   |\n+   |         |   borrow is only valid in the generator body\n+   |         reference to `b` escapes the generator body here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "0ea60fdf461056ace4f99833e990b88f45ab2218", "filename": "src/test/ui/issues/issue-11681.nll.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-11681.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-11681.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11681.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,18 +1,11 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-11681.rs:22:20\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/issue-11681.rs:23:10\n    |\n LL |   let testValue = &Test; //~ ERROR borrowed value does not live long enough\n-   |                    ^^^^ creates a temporary which is freed while still in use\n+   |                    ---- temporary value created here\n LL |   return testValue;\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:15...\n-  --> $DIR/issue-11681.rs:21:15\n-   |\n-LL | fn createTest<'a>() -> &'a Test {\n-   |               ^^\n+   |          ^^^^^^^^^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "af4fa8de0e93fa1b8485f987d70ed4c99ab96584", "filename": "src/test/ui/issues/issue-12470.nll.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-12470.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-12470.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12470.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,18 +1,11 @@\n-error[E0597]: `*b` does not live long enough\n-  --> $DIR/issue-12470.rs:38:18\n+error[E0515]: cannot return value referencing local data `*b`\n+  --> $DIR/issue-12470.rs:39:5\n    |\n LL |     let bb: &B = &*b;    //~ ERROR does not live long enough\n-   |                  ^^^ borrowed value does not live long enough\n+   |                  --- `*b` is borrowed here\n LL |     make_a(bb)\n-LL | }\n-   | - `*b` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 36:16...\n-  --> $DIR/issue-12470.rs:36:16\n-   |\n-LL | fn make_make_a<'a>() -> A<'a> {\n-   |                ^^\n+   |     ^^^^^^^^^^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "e66afef93143a1c8ac51b6007ff73be6c35e0cf5", "filename": "src/test/ui/issues/issue-13497-2.nll.stderr", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,18 +1,14 @@\n-error[E0597]: `rawLines` does not live long enough\n+error[E0515]: cannot return value referencing local variable `rawLines`\n   --> $DIR/issue-13497-2.rs:13:5\n    |\n-LL |     rawLines //~ ERROR `rawLines` does not live long enough\n-   |     ^^^^^^^^ borrowed value does not live long enough\n-LL |         .iter().map(|l| l.trim()).collect()\n-LL | }\n-   | - `rawLines` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 11:24...\n-  --> $DIR/issue-13497-2.rs:11:24\n-   |\n-LL | fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n-   |                        ^^\n+LL |       rawLines //~ ERROR `rawLines` does not live long enough\n+   |       ^-------\n+   |       |\n+   |  _____`rawLines` is borrowed here\n+   | |\n+LL | |         .iter().map(|l| l.trim()).collect()\n+   | |___________________________________________^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "b64bbe10477a6c42252cb0a5bbbec59895c79bb8", "filename": "src/test/ui/issues/issue-17545.nll.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-17545.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-17545.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17545.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,16 +1,15 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-17545.rs:17:10\n    |\n-LL |         &id(()), //~ ERROR borrowed value does not live long enough\n-   |          ^^^^^^ creates a temporary which is freed while still in use\n-LL |     ));\n-   |       - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:12...\n-  --> $DIR/issue-17545.rs:15:12\n-   |\n-LL | pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n-   |            ^^\n+LL |   pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n+   |              -- lifetime `'a` defined here\n+LL | /     bar.call((\n+LL | |         &id(()), //~ ERROR borrowed value does not live long enough\n+   | |          ^^^^^^ creates a temporary which is freed while still in use\n+LL | |     ));\n+   | |      -- temporary value is freed at the end of this statement\n+   | |______|\n+   |        argument requires that borrow lasts for `'a`\n \n error: aborting due to previous error\n "}, {"sha": "b59bd5a0f9725025a431ac3d52a45061469c8563", "filename": "src/test/ui/issues/issue-17718-constants-not-static.nll.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-17718-constants-not-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-17718-constants-not-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-constants-not-static.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,13 +1,12 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-17718-constants-not-static.rs:15:31\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/issue-17718-constants-not-static.rs:15:30\n    |\n LL | fn foo() -> &'static usize { &id(FOO) }\n-   |                               ^^^^^^^ - temporary value is freed at the end of this statement\n-   |                               |\n-   |                               creates a temporary which is freed while still in use\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |                              ^-------\n+   |                              ||\n+   |                              |temporary value created here\n+   |                              returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "9e680e87f79a89aa81b69556dcd94fb5610b67b0", "filename": "src/test/ui/issues/issue-18118.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18118.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -54,12 +54,13 @@ error[E0597]: `p` does not live long enough\n   --> $DIR/issue-18118.rs:18:9\n    |\n LL |         &p //~ ERROR `p` does not live long enough\n-   |         ^^ borrowed value does not live long enough\n+   |         ^^\n+   |         |\n+   |         borrowed value does not live long enough\n+   |         using this value as a constant requires that `p` is borrowed for `'static`\n LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n    |     - `p` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 6 previous errors\n "}, {"sha": "630eab8613da0944d83bdda63ae5648f5e8cb54b", "filename": "src/test/ui/issues/issue-27592.nll.stderr", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-27592.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-27592.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,19 +1,21 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-27592.rs:26:27\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/issue-27592.rs:26:14\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n-   |                           ^^^^                             - temporary value is freed at the end of this statement\n-   |                           |\n-   |                           creates a temporary which is freed while still in use\n+   |              ^^^^^^^^^^^^^^^^^^^---------------------------^\n+   |              |                  |\n+   |              |                  temporary value created here\n+   |              returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-27592.rs:26:33\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/issue-27592.rs:26:14\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n-   |                                 |\n-   |                                 creates a temporary which is freed while still in use\n+   |              ^^^^^^^^^^^^^----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |            |\n+   |              |            temporary value created here\n+   |              returns a value referencing data owned by the current function\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "8f7afc8a78d5f27fe504697ea211ec24a5f98977", "filename": "src/test/ui/issues/issue-30438-a.nll.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-30438-a.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-30438-a.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30438-a.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,20 +1,12 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-30438-a.rs:22:17\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/issue-30438-a.rs:22:16\n    |\n LL |         return &Test { s: &self.s};\n-   |                 ^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n-   |                 |\n-   |                 creates a temporary which is freed while still in use\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 21:5...\n-  --> $DIR/issue-30438-a.rs:21:5\n-   |\n-LL | /     fn index(&self, _: usize) -> &Self::Output {\n-LL | |         return &Test { s: &self.s};\n-LL | |         //~^ ERROR: borrowed value does not live long enough\n-LL | |     }\n-   | |_____^\n+   |                ^------------------\n+   |                ||\n+   |                |temporary value created here\n+   |                returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "6be8180e00720ac895731cf3f2cbe292ad5d2c87", "filename": "src/test/ui/issues/issue-30438-b.nll.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-30438-b.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-30438-b.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30438-b.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,21 +1,12 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-30438-b.rs:23:10\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/issue-30438-b.rs:23:9\n    |\n LL |         &Test { s: &self.s}\n-   |          ^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n-LL |         //~^ ERROR: borrowed value does not live long enough\n-LL |     }\n-   |     - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 22:5...\n-  --> $DIR/issue-30438-b.rs:22:5\n-   |\n-LL | /     fn index(&self, _: usize) -> &Self::Output {\n-LL | |         &Test { s: &self.s}\n-LL | |         //~^ ERROR: borrowed value does not live long enough\n-LL | |     }\n-   | |_____^\n+   |         ^------------------\n+   |         ||\n+   |         |temporary value created here\n+   |         returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "bce4bc4812a179d4551b8a3c4de349f83e51073a", "filename": "src/test/ui/issues/issue-30438-c.nll.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-30438-c.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-30438-c.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30438-c.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,21 +1,9 @@\n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to local variable `x`\n   --> $DIR/issue-30438-c.rs:19:5\n    |\n-LL | fn silly<'y, 'z>(_s: &'y Test<'z>) -> &'y <Test<'z> as Trait>::Out where 'z: 'static {\n-   |                       --               -- also has lifetime `'y`\n-   |                       |\n-   |                       has lifetime `'y`\n-LL |     let x = Test { s: \"this cannot last\" };\n LL |     &x\n-   |     ^^ `x` would have to be valid for `'y`...\n-LL |     //~^ ERROR: `x` does not live long enough\n-LL | }\n-   | - ...but `x` will be dropped here, when the function `silly` returns\n-   |\n-   = help: use data from the highlighted arguments which match the `'y` lifetime of the return type\n-   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   |     ^^ returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "beb853fc91ae504c96115018b02595406c2ee959", "filename": "src/test/ui/issues/issue-4335.nll.stderr", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -15,24 +15,25 @@ LL |     id(Box::new(|| *v))\n    |                    cannot move out of `*v` which is behind a `&` reference\n    |                    cannot move\n \n-error[E0597]: `v` does not live long enough\n-  --> $DIR/issue-4335.rs:16:21\n+error[E0373]: closure may outlive the current function, but it borrows `v`, which is owned by the current function\n+  --> $DIR/issue-4335.rs:16:17\n    |\n LL |     id(Box::new(|| *v))\n-   |                 --  ^ borrowed value does not live long enough\n+   |                 ^^  - `v` is borrowed here\n    |                 |\n-   |                 value captured here\n-...\n-LL | }\n-   | - `v` dropped here while still borrowed\n+   |                 may outlive borrowed value `v`\n    |\n-note: borrowed value must be valid for the lifetime 'r as defined on the function body at 15:6...\n-  --> $DIR/issue-4335.rs:15:6\n+note: closure is returned here\n+  --> $DIR/issue-4335.rs:16:5\n    |\n-LL | fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n-   |      ^^\n+LL |     id(Box::new(|| *v))\n+   |     ^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     id(Box::new(move || *v))\n+   |                 ^^^^^^^\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0507, E0597.\n-For more information about an error, try `rustc --explain E0507`.\n+Some errors occurred: E0373, E0507.\n+For more information about an error, try `rustc --explain E0373`."}, {"sha": "f214d4661593b2e58b371fb535891b92486d60ce", "filename": "src/test/ui/issues/issue-44373.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-44373.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-44373.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44373.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,11 +2,11 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-44373.rs:15:42\n    |\n LL |     let _val: &'static [&'static u32] = &[&FOO]; //~ ERROR borrowed value does not live long enough\n-   |                                          ^^^^^^ creates a temporary which is freed while still in use\n+   |               -----------------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "00df5c859bf07366993eb1d3bd16927e7ac1df66", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.migrate.stderr", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,53 +1,44 @@\n warning[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n    |\n+LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n+   |              -- lifetime `'a` defined here\n LL |     &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 62:14...\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:14\n-   |\n-LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n-   |              ^^\n    = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n            It represents potential unsoundness in your code.\n            This warning will become a hard error in the future.\n \n warning[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n    |\n+LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n+   |                    -- lifetime `'a` defined here\n LL |     &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 72:20...\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:72:20\n-   |\n-LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n-   |                    ^^\n    = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n            It represents potential unsoundness in your code.\n            This warning will become a hard error in the future.\n \n warning[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:83:5\n    |\n+LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n+   |                          -- lifetime `'a` defined here\n LL |     &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-   |     ^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 82:26...\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:82:26\n-   |\n-LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n-   |                          ^^\n    = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n            It represents potential unsoundness in your code.\n            This warning will become a hard error in the future."}, {"sha": "5640dbd4e8c2c4849227a307eaa048ea70e52fa3", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.nll.stderr", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,47 +1,35 @@\n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n    |\n+LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n+   |              -- lifetime `'a` defined here\n LL |     &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 62:14...\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:14\n-   |\n-LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n-   |              ^^\n \n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n    |\n+LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n+   |                    -- lifetime `'a` defined here\n LL |     &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 72:20...\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:72:20\n-   |\n-LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n-   |                    ^^\n \n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:83:5\n    |\n+LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n+   |                          -- lifetime `'a` defined here\n LL |     &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-   |     ^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n ...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 82:26...\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:82:26\n-   |\n-LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n-   |                          ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "55f13a699d0efeba6fb2d07cb8f05a1ad9ecb3d3", "filename": "src/test/ui/issues/issue-46036.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46036.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,12 +2,13 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/issue-46036.rs:19:24\n    |\n LL |     let foo = Foo { x: &a }; //~ ERROR E0597\n-   |                        ^^ borrowed value does not live long enough\n+   |                        ^^\n+   |                        |\n+   |                        borrowed value does not live long enough\n+   |                        requires that `a` is borrowed for `'static`\n LL |     loop { }\n LL | }\n    | - `a` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "654a3d8f964d2871618afd7d1c8a5b9fa0fa8d24", "filename": "src/test/ui/issues/issue-46471.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46471.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46471.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -14,7 +14,7 @@ fn foo() -> &'static u32 {\n     let x = 0;\n     &x\n     //~^ ERROR `x` does not live long enough (Ast) [E0597]\n-    //~| ERROR `x` does not live long enough (Mir) [E0597]\n+    //~| ERROR cannot return reference to local variable `x` (Mir) [E0515]\n }\n \n fn main() { }"}, {"sha": "e6ec6831fe9641cf2ddbb0dd6c93cba76a543c6d", "filename": "src/test/ui/issues/issue-46471.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -9,17 +9,13 @@ LL | }\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: `x` does not live long enough (Mir)\n+error[E0515]: cannot return reference to local variable `x` (Mir)\n   --> $DIR/issue-46471.rs:15:5\n    |\n LL |     &x\n-   |     ^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^^ returns a reference to data owned by the current function\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0515, E0597.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "8137cd2dd89137a603ea2b9a4d2c00e53125001a", "filename": "src/test/ui/issues/issue-46472.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46472.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -13,7 +13,7 @@\n fn bar<'a>() -> &'a mut u32 {\n     &mut 4\n     //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n-    //~| ERROR temporary value dropped while borrowed (Mir) [E0716]\n+    //~| ERROR cannot return reference to temporary value (Mir) [E0515]\n }\n \n fn main() { }"}, {"sha": "b1d34ff24d4b0bdbba53a84345f0a7b59412b208", "filename": "src/test/ui/issues/issue-46472.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -13,22 +13,16 @@ note: borrowed value must be valid for the lifetime 'a as defined on the functio\n LL | fn bar<'a>() -> &'a mut u32 {\n    |        ^^\n \n-error[E0716]: temporary value dropped while borrowed (Mir)\n-  --> $DIR/issue-46472.rs:14:10\n+error[E0515]: cannot return reference to temporary value (Mir)\n+  --> $DIR/issue-46472.rs:14:5\n    |\n LL |     &mut 4\n-   |          ^ creates a temporary which is freed while still in use\n-...\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:8...\n-  --> $DIR/issue-46472.rs:13:8\n-   |\n-LL | fn bar<'a>() -> &'a mut u32 {\n-   |        ^^\n+   |     ^^^^^-\n+   |     |    |\n+   |     |    temporary value created here\n+   |     returns a reference to data owned by the current function\n \n error: aborting due to 2 previous errors\n \n-Some errors occurred: E0597, E0716.\n-For more information about an error, try `rustc --explain E0597`.\n+Some errors occurred: E0515, E0597.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "62ca682b1e342ea60f154c84599211add1f40f0e", "filename": "src/test/ui/issues/issue-47184.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,11 +2,10 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-47184.rs:14:44\n    |\n LL |     let _vec: Vec<&'static String> = vec![&String::new()];\n-   |                                            ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n-   |                                            |\n-   |                                            creates a temporary which is freed while still in use\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |               --------------------         ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n+   |               |                            |\n+   |               |                            creates a temporary which is freed while still in use\n+   |               type annotation requires that borrow lasts for `'static`\n \n error: aborting due to previous error\n "}, {"sha": "d64332bf07c87c82cba32df01f7b05ef05ccf5f8", "filename": "src/test/ui/issues/issue-52049.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-52049.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fissues%2Fissue-52049.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52049.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,11 +2,12 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-52049.rs:16:10\n    |\n LL |     foo(&unpromotable(5u32));\n-   |          ^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |     -----^^^^^^^^^^^^^^^^^^-\n+   |     |    |\n+   |     |    creates a temporary which is freed while still in use\n+   |     argument requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "283b32df99c210b1de6973934ddd8aee8b6547d3", "filename": "src/test/ui/nll/borrowed-universal-error-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -14,7 +14,7 @@\n fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n     let v = 22;\n     &v\n-    //~^ ERROR `v` does not live long enough [E0597]\n+    //~^ ERROR cannot return reference to local variable `v` [E0515]\n }\n \n fn main() {}"}, {"sha": "ae160338013b18fc0cd8ae46d404559f2e98e036", "filename": "src/test/ui/nll/borrowed-universal-error-2.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,21 +1,9 @@\n-error[E0597]: `v` does not live long enough\n+error[E0515]: cannot return reference to local variable `v`\n   --> $DIR/borrowed-universal-error-2.rs:16:5\n    |\n-LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n-   |                --             -- also has lifetime `'a`\n-   |                |\n-   |                has lifetime `'a`\n-LL |     let v = 22;\n LL |     &v\n-   |     ^^ `v` would have to be valid for `'a`...\n-LL |     //~^ ERROR `v` does not live long enough [E0597]\n-LL | }\n-   | - ...but `v` will be dropped here, when the function `foo` returns\n-   |\n-   = help: use data from the highlighted arguments which match the `'a` lifetime of the return type\n-   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   |     ^^ returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "68a7237fdd6c61e8215be37d2f590255319cb152", "filename": "src/test/ui/nll/borrowed-universal-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -18,7 +18,7 @@ fn gimme(x: &(u32,)) -> &u32 {\n fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n     let v = 22;\n     gimme(&(v,))\n-    //~^ ERROR temporary value dropped while borrowed [E0716]\n+    //~^ ERROR cannot return value referencing temporary value [E0515]\n }\n \n fn main() {}"}, {"sha": "a5b3e6bcf35010d2a08a18ff276c1956b8403989", "filename": "src/test/ui/nll/borrowed-universal-error.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,18 +1,12 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowed-universal-error.rs:20:12\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/borrowed-universal-error.rs:20:5\n    |\n LL |     gimme(&(v,))\n-   |            ^^^^ creates a temporary which is freed while still in use\n-LL |     //~^ ERROR temporary value dropped while borrowed [E0716]\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 18:8...\n-  --> $DIR/borrowed-universal-error.rs:18:8\n-   |\n-LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n-   |        ^^\n+   |     ^^^^^^^----^\n+   |     |      |\n+   |     |      temporary value created here\n+   |     returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "43b4844bbf9b4214fd119f14934d42cbf432a162", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -71,12 +71,13 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:40:26\n    |\n LL |     let cell = Cell::new(&a);\n-   |                          ^^ borrowed value does not live long enough\n+   |                ----------^^-\n+   |                |         |\n+   |                |         borrowed value does not live long enough\n+   |                argument requires that `a` is borrowed for `'static`\n ...\n LL | }\n    | - `a` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fc4118a0998994335bfe1bad533c24da1679b21d", "filename": "src/test/ui/nll/do-not-ignore-lifetime-bounds-in-copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -3,11 +3,11 @@ error[E0597]: `s` does not live long enough\n    |\n LL |     let a = Foo(&s); //~ ERROR `s` does not live long enough [E0597]\n    |                 ^^ borrowed value does not live long enough\n-...\n+LL |     drop(a);\n+   |          - copying this value requires that `s` is borrowed for `'static`\n+LL |     drop(a);\n LL | }\n    | - `s` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "da9c96f7bc2e803691155bc47f38cdbe38ceecc8", "filename": "src/test/ui/nll/enum-drop-access.stderr", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,44 +1,30 @@\n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/enum-drop-access.rs:15:31\n    |\n+LL | fn drop_enum(opt: DropOption<&mut i32>) -> Option<&mut i32> {\n+   |                              - let's call the lifetime of this reference `'1`\n+LL |     match opt {\n LL |         DropOption::Some(&mut ref mut r) => { //~ ERROR\n    |                               ^^^^^^^^^\n+LL |             Some(r)\n+   |             ------- returning this value requires that `*opt.0` is borrowed for `'1`\n ...\n LL | }\n    | - here, drop of `opt` needs exclusive access to `*opt.0`, because the type `DropOption<&mut i32>` implements the `Drop` trait\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 13:1...\n-  --> $DIR/enum-drop-access.rs:13:1\n-   |\n-LL | / fn drop_enum(opt: DropOption<&mut i32>) -> Option<&mut i32> {\n-LL | |     match opt {\n-LL | |         DropOption::Some(&mut ref mut r) => { //~ ERROR\n-LL | |             Some(r)\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n \n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/enum-drop-access.rs:24:36\n    |\n+LL | fn optional_drop_enum(opt: Option<DropOption<&mut i32>>) -> Option<&mut i32> {\n+   |                                              - let's call the lifetime of this reference `'1`\n+LL |     match opt {\n LL |         Some(DropOption::Some(&mut ref mut r)) => { //~ ERROR\n    |                                    ^^^^^^^^^\n+LL |             Some(r)\n+   |             ------- returning this value requires that `*opt.0.0` is borrowed for `'1`\n ...\n LL | }\n    | - here, drop of `opt` needs exclusive access to `*opt.0.0`, because the type `DropOption<&mut i32>` implements the `Drop` trait\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 22:1...\n-  --> $DIR/enum-drop-access.rs:22:1\n-   |\n-LL | / fn optional_drop_enum(opt: Option<DropOption<&mut i32>>) -> Option<&mut i32> {\n-LL | |     match opt {\n-LL | |         Some(DropOption::Some(&mut ref mut r)) => { //~ ERROR\n-LL | |             Some(r)\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4f9c832d423bb11c915a6232f3b5f65a5e1f6f84", "filename": "src/test/ui/nll/get_default.nll.stderr", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -37,65 +37,47 @@ LL | }\n error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n   --> $DIR/get_default.rs:33:17\n    |\n+LL | fn ok(map: &mut Map) -> &String {\n+   |            - let's call the lifetime of this reference `'1`\n+LL |     loop {\n LL |         match map.get() {\n    |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n ...\n LL |                 map.set(String::new()); // Ideally, this would not error.\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-   |\n-note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 26:1...\n-  --> $DIR/get_default.rs:26:1\n-   |\n-LL | / fn ok(map: &mut Map) -> &String {\n-LL | |     loop {\n-LL | |         match map.get() {\n-LL | |             Some(v) => {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n \n error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n   --> $DIR/get_default.rs:45:17\n    |\n+LL | fn err(map: &mut Map) -> &String {\n+   |             - let's call the lifetime of this reference `'1`\n+LL |     loop {\n LL |         match map.get() {\n    |               --- immutable borrow occurs here\n LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-   |\n-note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n-  --> $DIR/get_default.rs:41:1\n-   |\n-LL | / fn err(map: &mut Map) -> &String {\n-LL | |     loop {\n-LL | |         match map.get() {\n-LL | |             Some(v) => {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+...\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n \n error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n   --> $DIR/get_default.rs:51:17\n    |\n+LL | fn err(map: &mut Map) -> &String {\n+   |             - let's call the lifetime of this reference `'1`\n+LL |     loop {\n LL |         match map.get() {\n    |               --- immutable borrow occurs here\n ...\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n+...\n LL |                 map.set(String::new()); // Ideally, just AST would error here\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-   |\n-note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n-  --> $DIR/get_default.rs:41:1\n-   |\n-LL | / fn err(map: &mut Map) -> &String {\n-LL | |     loop {\n-LL | |         match map.get() {\n-LL | |             Some(v) => {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "98112e8b8629add81b22ad8790c98682b1aa13c6", "filename": "src/test/ui/nll/get_default.stderr", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -37,65 +37,47 @@ LL | }\n error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n   --> $DIR/get_default.rs:33:17\n    |\n+LL | fn ok(map: &mut Map) -> &String {\n+   |            - let's call the lifetime of this reference `'1`\n+LL |     loop {\n LL |         match map.get() {\n    |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n ...\n LL |                 map.set(String::new()); // Ideally, this would not error.\n    |                 ^^^ mutable borrow occurs here\n-   |\n-note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 26:1...\n-  --> $DIR/get_default.rs:26:1\n-   |\n-LL | / fn ok(map: &mut Map) -> &String {\n-LL | |     loop {\n-LL | |         match map.get() {\n-LL | |             Some(v) => {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n \n error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n   --> $DIR/get_default.rs:45:17\n    |\n+LL | fn err(map: &mut Map) -> &String {\n+   |             - let's call the lifetime of this reference `'1`\n+LL |     loop {\n LL |         match map.get() {\n    |               --- immutable borrow occurs here\n LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n    |                 ^^^ mutable borrow occurs here\n-   |\n-note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n-  --> $DIR/get_default.rs:41:1\n-   |\n-LL | / fn err(map: &mut Map) -> &String {\n-LL | |     loop {\n-LL | |         match map.get() {\n-LL | |             Some(v) => {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+...\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n \n error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n   --> $DIR/get_default.rs:51:17\n    |\n+LL | fn err(map: &mut Map) -> &String {\n+   |             - let's call the lifetime of this reference `'1`\n+LL |     loop {\n LL |         match map.get() {\n    |               --- immutable borrow occurs here\n ...\n+LL |                 return v;\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n+...\n LL |                 map.set(String::new()); // Ideally, just AST would error here\n    |                 ^^^ mutable borrow occurs here\n-   |\n-note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n-  --> $DIR/get_default.rs:41:1\n-   |\n-LL | / fn err(map: &mut Map) -> &String {\n-LL | |     loop {\n-LL | |         match map.get() {\n-LL | |             Some(v) => {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "106f53dcf70a81d346c490a10c24163fea4682a1", "filename": "src/test/ui/nll/issue-31567.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,17 +1,15 @@\n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-31567.rs:22:26\n    |\n+LL | fn get_dangling<'a>(v: VecWrapper<'a>) -> &'a u32 {\n+   |                 -- lifetime `'a` defined here\n LL |     let s_inner: &'a S = &*v.0; //~ ERROR borrow may still be in use when destructor runs [E0713]\n-   |                          ^^^^^\n+   |                  -----   ^^^^^\n+   |                  |\n+   |                  type annotation requires that `*v.0` is borrowed for `'a`\n LL |     &s_inner.0\n LL | }\n    | - here, drop of `v` needs exclusive access to `*v.0`, because the type `VecWrapper<'_>` implements the `Drop` trait\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:17...\n-  --> $DIR/issue-31567.rs:21:17\n-   |\n-LL | fn get_dangling<'a>(v: VecWrapper<'a>) -> &'a u32 {\n-   |                 ^^\n \n error: aborting due to previous error\n "}, {"sha": "38edb19a970aa680c17c422e416a5c50907c6ef4", "filename": "src/test/ui/nll/issue-47470.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-47470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-47470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47470.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -24,7 +24,7 @@ impl<'a> Bar for Foo<'a> {\n     type Assoc = &'a u32;\n     fn get(self) -> Self::Assoc {\n         let local = 42;\n-        &local //~ ERROR `local` does not live long enough\n+        &local //~ ERROR cannot return reference to local variable `local`\n     }\n }\n "}, {"sha": "143566413aa7e540d9a6d40c3f101ec6ffb1981c", "filename": "src/test/ui/nll/issue-47470.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,17 +1,9 @@\n-error[E0597]: `local` does not live long enough\n+error[E0515]: cannot return reference to local variable `local`\n   --> $DIR/issue-47470.rs:27:9\n    |\n-LL |         &local //~ ERROR `local` does not live long enough\n-   |         ^^^^^^ borrowed value does not live long enough\n-LL |     }\n-   |     - `local` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the impl at 23:6...\n-  --> $DIR/issue-47470.rs:23:6\n-   |\n-LL | impl<'a> Bar for Foo<'a> {\n-   |      ^^\n+LL |         &local //~ ERROR cannot return reference to local variable `local`\n+   |         ^^^^^^ returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "e2036ee4ac0c10be77c62e402cd456b4c6f4cf7b", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.stderr", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,50 +1,32 @@\n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:14:5\n    |\n+LL | fn finish_1(s: S) -> &mut String {\n+   |             - has type `S<'1>`\n LL |     s.url\n-   |     ^^^^^\n+   |     ^^^^^ returning this value requires that `*s.url` is borrowed for `'1`\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 13:1...\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:13:1\n-   |\n-LL | / fn finish_1(s: S) -> &mut String {\n-LL | |     s.url\n-LL | | }\n-   | |_^\n \n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:19:13\n    |\n+LL | fn finish_2(s: S) -> &mut String {\n+   |             - has type `S<'1>`\n LL |     let p = &mut *s.url; p\n-   |             ^^^^^^^^^^^\n+   |             ^^^^^^^^^^^  - returning this value requires that `*s.url` is borrowed for `'1`\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 18:1...\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:18:1\n-   |\n-LL | / fn finish_2(s: S) -> &mut String {\n-LL | |     let p = &mut *s.url; p\n-LL | | }\n-   | |_^\n \n error[E0713]: borrow may still be in use when destructor runs\n   --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:24:21\n    |\n+LL | fn finish_3(s: S) -> &mut String {\n+   |             - has type `S<'1>`\n LL |     let p: &mut _ = s.url; p\n-   |                     ^^^^^\n+   |                     ^^^^^  - returning this value requires that `*s.url` is borrowed for `'1`\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 23:1...\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:23:1\n-   |\n-LL | / fn finish_3(s: S) -> &mut String {\n-LL | |     let p: &mut _ = s.url; p\n-LL | | }\n-   | |_^\n \n error[E0509]: cannot move out of type `S<'_>`, which implements the `Drop` trait\n   --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:29:13"}, {"sha": "44a3ef3bb5d48d46768eddbfe1b711ec30b54c6e", "filename": "src/test/ui/nll/issue-52534-1.stderr", "status": "modified", "additions": 25, "deletions": 109, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,141 +1,57 @@\n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to local variable `x`\n   --> $DIR/issue-52534-1.rs:19:9\n    |\n-LL |     fn bar(&self, x: &u32) -> &u32 {\n-   |            -----              ---- has type `&'0 u32`\n-   |            |\n-   |            has type `&'0 Test`\n-LL |         let x = 22;\n LL |         &x\n-   |         ^^ `x` would have to be valid for `'0`...\n-LL |     }\n-   |     - ...but `x` will be dropped here, when the function `bar` returns\n-   |\n-   = note: argument and return type have the same lifetime due to lifetime elision rules\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision>\n-   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   |         ^^ returns a reference to data owned by the current function\n \n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to local variable `x`\n   --> $DIR/issue-52534-1.rs:25:5\n    |\n-LL | fn foo(x: &u32) -> &u32 {\n-   |           ----     ---- also has type `&'0 u32`\n-   |           |\n-   |           has type `&'0 u32`\n-LL |     let x = 22;\n LL |     &x\n-   |     ^^ `x` would have to be valid for `'0`...\n-LL | }\n-   | - ...but `x` will be dropped here, when the function `foo` returns\n-   |\n-   = note: argument and return type have the same lifetime due to lifetime elision rules\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision>\n-   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   |     ^^ returns a reference to data owned by the current function\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/issue-52534-1.rs:30:6\n+error[E0515]: cannot return value referencing local variable `x`\n+  --> $DIR/issue-52534-1.rs:30:5\n    |\n-LL | fn baz(x: &u32) -> &&u32 {\n-   |           ----     ----- has type `&'0 &'0 u32`\n-   |           |\n-   |           has type `&'0 u32`\n-LL |     let x = 22;\n LL |     &&x\n-   |      ^^ `x` would have to be valid for `'0`...\n-LL | }\n-   | - ...but `x` will be dropped here, when the function `baz` returns\n-   |\n-   = note: argument and return type have the same lifetime due to lifetime elision rules\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision>\n-   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   |     ^--\n+   |     ||\n+   |     |`x` is borrowed here\n+   |     returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-52534-1.rs:30:6\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/issue-52534-1.rs:30:5\n    |\n LL |     &&x\n-   |      ^^ creates a temporary which is freed while still in use\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 28:1...\n-  --> $DIR/issue-52534-1.rs:28:1\n-   |\n-LL | / fn baz(x: &u32) -> &&u32 {\n-LL | |     let x = 22;\n-LL | |     &&x\n-LL | | }\n-   | |_^\n+   |     ^--\n+   |     ||\n+   |     |temporary value created here\n+   |     returns a reference to data owned by the current function\n \n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to local variable `x`\n   --> $DIR/issue-52534-1.rs:35:5\n    |\n-LL | fn foobazbar<'a>(x: u32, y: &'a u32) -> &'a u32 {\n-   |                              --          -- also has lifetime `'a`\n-   |                              |\n-   |                              has lifetime `'a`\n-LL |     let x = 22;\n LL |     &x\n-   |     ^^ `x` would have to be valid for `'a`...\n-LL | }\n-   | - ...but `x` will be dropped here, when the function `foobazbar` returns\n-   |\n-   = help: use data from the highlighted arguments which match the `'a` lifetime of the return type\n-   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   |     ^^ returns a reference to data owned by the current function\n \n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to local variable `x`\n   --> $DIR/issue-52534-1.rs:40:5\n    |\n-LL | fn foobar<'a>(x: &'a u32) -> &'a u32 {\n-   |                   --          -- also has lifetime `'a`\n-   |                   |\n-   |                   has lifetime `'a`\n-LL |     let x = 22;\n LL |     &x\n-   |     ^^ `x` would have to be valid for `'a`...\n-LL | }\n-   | - ...but `x` will be dropped here, when the function `foobar` returns\n-   |\n-   = help: use data from the highlighted arguments which match the `'a` lifetime of the return type\n-   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   |     ^^ returns a reference to data owned by the current function\n \n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to local variable `x`\n   --> $DIR/issue-52534-1.rs:45:5\n    |\n-LL | fn foobaz<'a, 'b>(x: &'a u32, y: &'b u32) -> &'a u32 {\n-   |                       -- has lifetime `'a`    -- also has lifetime `'a`\n-LL |     let x = 22;\n LL |     &x\n-   |     ^^ `x` would have to be valid for `'a`...\n-LL | }\n-   | - ...but `x` will be dropped here, when the function `foobaz` returns\n-   |\n-   = help: use data from the highlighted arguments which match the `'a` lifetime of the return type\n-   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   |     ^^ returns a reference to data owned by the current function\n \n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to local variable `x`\n   --> $DIR/issue-52534-1.rs:50:5\n    |\n-LL | fn foobarbaz<'a, 'b>(x: &'a u32, y: &'b u32, z: &'a u32) -> &'a u32 {\n-   |                          --                      --          -- also has lifetime `'a`\n-   |                          |                       |\n-   |                          has lifetime `'a`       has lifetime `'a`\n-LL |     let x = 22;\n LL |     &x\n-   |     ^^ `x` would have to be valid for `'a`...\n-LL | }\n-   | - ...but `x` will be dropped here, when the function `foobarbaz` returns\n-   |\n-   = help: use data from the highlighted arguments which match the `'a` lifetime of the return type\n-   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   |     ^^ returns a reference to data owned by the current function\n \n error: aborting due to 8 previous errors\n \n-Some errors occurred: E0597, E0716.\n-For more information about an error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "c4aab0b8b1d6a50fe97dfa44d41880dd13af446e", "filename": "src/test/ui/nll/polonius-smoke-test.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fpolonius-smoke-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fpolonius-smoke-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius-smoke-test.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,12 +1,8 @@\n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to local variable `x`\n   --> $DIR/polonius-smoke-test.rs:7:5\n    |\n LL |     &x //~ ERROR\n-   |     ^^ borrowed value does not live long enough\n-LL | }\n-   | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^^ returns a reference to data owned by the current function\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/polonius-smoke-test.rs:13:13\n@@ -41,5 +37,5 @@ LL |     tmp;\n \n error: aborting due to 4 previous errors\n \n-Some errors occurred: E0503, E0505, E0597.\n+Some errors occurred: E0503, E0505, E0515.\n For more information about an error, try `rustc --explain E0503`."}, {"sha": "9a46f8d7e92f55a08a82cfac5a625635173ffda3", "filename": "src/test/ui/nll/relate_tys/var-appears-twice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,12 +2,12 @@ error[E0597]: `b` does not live long enough\n   --> $DIR/var-appears-twice.rs:33:38\n    |\n LL |     let x: DoubleCell<_> = make_cell(&b); //~ ERROR\n-   |                                      ^^ borrowed value does not live long enough\n+   |            -------------             ^^ borrowed value does not live long enough\n+   |            |\n+   |            type annotation requires that `b` is borrowed for `'static`\n ...\n LL | }\n    | - `b` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "a1feadfb0d1f55a289d35977c7c712154756c417", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -14,8 +14,8 @@\n #![allow(dead_code)]\n \n fn gimme_static_mut() -> &'static mut u32 {\n-    let ref mut x = 1234543; //~ ERROR temporary value dropped while borrowed [E0716]\n-    x\n+    let ref mut x = 1234543;\n+    x //~ ERROR cannot return value referencing temporary value [E0515]\n }\n \n fn main() {}"}, {"sha": "4b74aa042f7593992419ba67b0d6785c8a448431", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,14 +1,11 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/return-ref-mut-issue-46557.rs:17:21\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/return-ref-mut-issue-46557.rs:18:5\n    |\n-LL |     let ref mut x = 1234543; //~ ERROR temporary value dropped while borrowed [E0716]\n-   |                     ^^^^^^^ creates a temporary which is freed while still in use\n-LL |     x\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+LL |     let ref mut x = 1234543;\n+   |                     ------- temporary value created here\n+LL |     x //~ ERROR cannot return value referencing temporary value [E0515]\n+   |     ^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "7a4a62a9fb22d75ee522207191751bd24f1e9b42", "filename": "src/test/ui/nll/user-annotations/adt-brace-enums.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,39 +2,40 @@ error[E0597]: `c` does not live long enough\n   --> $DIR/adt-brace-enums.rs:37:48\n    |\n LL |     SomeEnum::SomeVariant::<&'static u32> { t: &c }; //~ ERROR\n-   |                                                ^^ borrowed value does not live long enough\n+   |                                                ^^\n+   |                                                |\n+   |                                                borrowed value does not live long enough\n+   |                                                requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-brace-enums.rs:42:43\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+LL |     let c = 66;\n LL |     SomeEnum::SomeVariant::<&'a u32> { t: &c }; //~ ERROR\n-   |                                           ^^ borrowed value does not live long enough\n+   |                                           ^^\n+   |                                           |\n+   |                                           borrowed value does not live long enough\n+   |                                           requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 40:35...\n-  --> $DIR/adt-brace-enums.rs:40:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-brace-enums.rs:52:47\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |         SomeEnum::SomeVariant::<&'a u32> { t: &c }; //~ ERROR\n-   |                                               ^^ borrowed value does not live long enough\n+   |                                               ^^\n+   |                                               |\n+   |                                               borrowed value does not live long enough\n+   |                                               requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 49:46...\n-  --> $DIR/adt-brace-enums.rs:49:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8b057a3eb8c86c6c55db70a2d8042ba34a844bc4", "filename": "src/test/ui/nll/user-annotations/adt-brace-structs.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,39 +2,40 @@ error[E0597]: `c` does not live long enough\n   --> $DIR/adt-brace-structs.rs:35:37\n    |\n LL |     SomeStruct::<&'static u32> { t: &c }; //~ ERROR\n-   |                                     ^^ borrowed value does not live long enough\n+   |                                     ^^\n+   |                                     |\n+   |                                     borrowed value does not live long enough\n+   |                                     requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-brace-structs.rs:40:32\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+LL |     let c = 66;\n LL |     SomeStruct::<&'a u32> { t: &c }; //~ ERROR\n-   |                                ^^ borrowed value does not live long enough\n+   |                                ^^\n+   |                                |\n+   |                                borrowed value does not live long enough\n+   |                                requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 38:35...\n-  --> $DIR/adt-brace-structs.rs:38:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-brace-structs.rs:50:36\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |         SomeStruct::<&'a u32> { t: &c }; //~ ERROR\n-   |                                    ^^ borrowed value does not live long enough\n+   |                                    ^^\n+   |                                    |\n+   |                                    borrowed value does not live long enough\n+   |                                    requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 47:46...\n-  --> $DIR/adt-brace-structs.rs:47:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1626dc333a89bd258ed33256a96a82a26ecc4c83", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,42 +2,43 @@ error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:44:41\n    |\n LL |         SomeEnum::SomeVariant(Cell::new(&c)), //~ ERROR\n-   |                                         ^^ borrowed value does not live long enough\n+   |                               ----------^^-\n+   |                               |         |\n+   |                               |         borrowed value does not live long enough\n+   |                               argument requires that `c` is borrowed for `'static`\n ...\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:52:41\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+...\n LL |         SomeEnum::SomeVariant(Cell::new(&c)), //~ ERROR\n-   |                                         ^^ borrowed value does not live long enough\n+   |                               ----------^^-\n+   |                               |         |\n+   |                               |         borrowed value does not live long enough\n+   |                               argument requires that `c` is borrowed for `'a`\n ...\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 49:35...\n-  --> $DIR/adt-nullary-enums.rs:49:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:65:45\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |             SomeEnum::SomeVariant(Cell::new(&c)), //~ ERROR\n-   |                                             ^^ borrowed value does not live long enough\n+   |                                   ----------^^-\n+   |                                   |         |\n+   |                                   |         borrowed value does not live long enough\n+   |                                   argument requires that `c` is borrowed for `'a`\n ...\n LL |     };\n    |     - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 61:46...\n-  --> $DIR/adt-nullary-enums.rs:61:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6e47eb1a3edc1d75bd2e2bbd89fd0693a851e262", "filename": "src/test/ui/nll/user-annotations/adt-tuple-enums.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,39 +2,40 @@ error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-enums.rs:39:43\n    |\n LL |     SomeEnum::SomeVariant::<&'static u32>(&c); //~ ERROR\n-   |                                           ^^ borrowed value does not live long enough\n+   |                                           ^^\n+   |                                           |\n+   |                                           borrowed value does not live long enough\n+   |                                           requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-enums.rs:44:38\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+LL |     let c = 66;\n LL |     SomeEnum::SomeVariant::<&'a u32>(&c); //~ ERROR\n-   |                                      ^^ borrowed value does not live long enough\n+   |                                      ^^\n+   |                                      |\n+   |                                      borrowed value does not live long enough\n+   |                                      requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 42:35...\n-  --> $DIR/adt-tuple-enums.rs:42:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-enums.rs:54:42\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |         SomeEnum::SomeVariant::<&'a u32>(&c); //~ ERROR\n-   |                                          ^^ borrowed value does not live long enough\n+   |                                          ^^\n+   |                                          |\n+   |                                          borrowed value does not live long enough\n+   |                                          requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 51:46...\n-  --> $DIR/adt-tuple-enums.rs:51:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "136c727550ce8e48dccbf9700516e956d6bc946e", "filename": "src/test/ui/nll/user-annotations/adt-tuple-struct.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,39 +2,40 @@ error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-struct.rs:35:32\n    |\n LL |     SomeStruct::<&'static u32>(&c); //~ ERROR\n-   |                                ^^ borrowed value does not live long enough\n+   |                                ^^\n+   |                                |\n+   |                                borrowed value does not live long enough\n+   |                                requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-struct.rs:40:27\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+LL |     let c = 66;\n LL |     SomeStruct::<&'a u32>(&c); //~ ERROR\n-   |                           ^^ borrowed value does not live long enough\n+   |                           ^^\n+   |                           |\n+   |                           borrowed value does not live long enough\n+   |                           requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 38:35...\n-  --> $DIR/adt-tuple-struct.rs:38:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-struct.rs:50:31\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |         SomeStruct::<&'a u32>(&c); //~ ERROR\n-   |                               ^^ borrowed value does not live long enough\n+   |                               ^^\n+   |                               |\n+   |                               borrowed value does not live long enough\n+   |                               requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 47:46...\n-  --> $DIR/adt-tuple-struct.rs:47:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c664746437d2ecbf98f0bf50b5bdf3ae5e7ac530", "filename": "src/test/ui/nll/user-annotations/cast_static_lifetime.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,11 +2,12 @@ error[E0597]: `x` does not live long enough\n   --> $DIR/cast_static_lifetime.rs:16:19\n    |\n LL |     let y: &u32 = (&x) as &'static u32;\n-   |                   ^^^^ borrowed value does not live long enough\n+   |                   ^^^^----------------\n+   |                   |\n+   |                   borrowed value does not live long enough\n+   |                   type annotation requires that `x` is borrowed for `'static`\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "80b79bfef8b6c61194e5e9022539c91b2a25c56d", "filename": "src/test/ui/nll/user-annotations/fns.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,39 +2,40 @@ error[E0597]: `c` does not live long enough\n   --> $DIR/fns.rs:35:29\n    |\n LL |     some_fn::<&'static u32>(&c); //~ ERROR\n-   |                             ^^ borrowed value does not live long enough\n+   |     ------------------------^^-\n+   |     |                       |\n+   |     |                       borrowed value does not live long enough\n+   |     argument requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/fns.rs:40:24\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+LL |     let c = 66;\n LL |     some_fn::<&'a u32>(&c); //~ ERROR\n-   |                        ^^ borrowed value does not live long enough\n+   |     -------------------^^-\n+   |     |                  |\n+   |     |                  borrowed value does not live long enough\n+   |     argument requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 38:35...\n-  --> $DIR/fns.rs:38:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/fns.rs:50:28\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |         some_fn::<&'a u32>(&c); //~ ERROR\n-   |                            ^^ borrowed value does not live long enough\n+   |         -------------------^^-\n+   |         |                  |\n+   |         |                  borrowed value does not live long enough\n+   |         argument requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 47:46...\n-  --> $DIR/fns.rs:47:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "32803839d31c537814e868203c0e4fcc8ac7e43e", "filename": "src/test/ui/nll/user-annotations/method-call.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,39 +2,40 @@ error[E0597]: `c` does not live long enough\n   --> $DIR/method-call.rs:48:34\n    |\n LL |     a.method::<&'static u32>(b,  &c); //~ ERROR\n-   |                                  ^^ borrowed value does not live long enough\n+   |     -----------------------------^^-\n+   |     |                            |\n+   |     |                            borrowed value does not live long enough\n+   |     argument requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/method-call.rs:55:29\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+...\n LL |     a.method::<&'a u32>(b,  &c); //~ ERROR\n-   |                             ^^ borrowed value does not live long enough\n+   |     ------------------------^^-\n+   |     |                       |\n+   |     |                       borrowed value does not live long enough\n+   |     argument requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 51:35...\n-  --> $DIR/method-call.rs:51:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/method-call.rs:69:33\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |         a.method::<&'a u32>(b,  &c); //~ ERROR\n-   |                                 ^^ borrowed value does not live long enough\n+   |         ------------------------^^-\n+   |         |                       |\n+   |         |                       borrowed value does not live long enough\n+   |         argument requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:46...\n-  --> $DIR/method-call.rs:64:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "10a2f10bb7fb535d84f51ec1bbe4edd8d80bdaa6", "filename": "src/test/ui/nll/user-annotations/method-ufcs-1.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,43 +2,44 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/method-ufcs-1.rs:42:7\n    |\n LL |     x(&a, b, c); //~ ERROR\n-   |       ^^ borrowed value does not live long enough\n+   |     --^^-------\n+   |     | |\n+   |     | borrowed value does not live long enough\n+   |     argument requires that `a` is borrowed for `'static`\n LL | }\n    | - `a` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/method-ufcs-1.rs:49:36\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+...\n LL |     <&'a u32 as Bazoom<_>>::method(&a, b, c); //~ ERROR\n-   |                                    ^^ borrowed value does not live long enough\n+   |     -------------------------------^^-------\n+   |     |                              |\n+   |     |                              borrowed value does not live long enough\n+   |     argument requires that `a` is borrowed for `'a`\n LL | }\n    | - `a` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 45:35...\n-  --> $DIR/method-ufcs-1.rs:45:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/method-ufcs-1.rs:63:41\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |     let _closure = || {\n    |                    -- value captured here\n LL |         let c = 66;\n LL |         <&'a u32 as Bazoom<_>>::method(&a, b, c); //~ ERROR\n-   |                                         ^ borrowed value does not live long enough\n+   |         --------------------------------^-------\n+   |         |                               |\n+   |         |                               borrowed value does not live long enough\n+   |         argument requires that `a` is borrowed for `'a`\n LL |     };\n LL | }\n    | - `a` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 58:46...\n-  --> $DIR/method-ufcs-1.rs:58:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "972f6af24ebfb00bb04bb40bc4cf828c0c67645c", "filename": "src/test/ui/nll/user-annotations/method-ufcs-2.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,43 +2,44 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/method-ufcs-2.rs:42:7\n    |\n LL |     x(&a, b, c); //~ ERROR\n-   |       ^^ borrowed value does not live long enough\n+   |     --^^-------\n+   |     | |\n+   |     | borrowed value does not live long enough\n+   |     argument requires that `a` is borrowed for `'static`\n LL | }\n    | - `a` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `b` does not live long enough\n   --> $DIR/method-ufcs-2.rs:49:39\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+...\n LL |     <_ as Bazoom<&'a u32>>::method(a, &b, c); //~ ERROR\n-   |                                       ^^ borrowed value does not live long enough\n+   |     ----------------------------------^^----\n+   |     |                                 |\n+   |     |                                 borrowed value does not live long enough\n+   |     argument requires that `b` is borrowed for `'a`\n LL | }\n    | - `b` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 45:35...\n-  --> $DIR/method-ufcs-2.rs:45:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `b` does not live long enough\n   --> $DIR/method-ufcs-2.rs:63:44\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |     let _closure = || {\n    |                    -- value captured here\n LL |         let c = 66;\n LL |         <_ as Bazoom<&'a u32>>::method(a, &b, c); //~ ERROR\n-   |                                            ^ borrowed value does not live long enough\n+   |         -----------------------------------^----\n+   |         |                                  |\n+   |         |                                  borrowed value does not live long enough\n+   |         argument requires that `b` is borrowed for `'a`\n LL |     };\n LL | }\n    | - `b` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 58:46...\n-  --> $DIR/method-ufcs-2.rs:58:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7313787fa170ba0116155f4257ce82516305a519", "filename": "src/test/ui/nll/user-annotations/method-ufcs-3.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,39 +2,40 @@ error[E0597]: `c` does not live long enough\n   --> $DIR/method-ufcs-3.rs:48:53\n    |\n LL |     <_ as Bazoom<_>>::method::<&'static u32>(&a, b, &c); //~ ERROR\n-   |                                                     ^^ borrowed value does not live long enough\n+   |     ------------------------------------------------^^-\n+   |     |                                               |\n+   |     |                                               borrowed value does not live long enough\n+   |     argument requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/method-ufcs-3.rs:55:48\n    |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   -- lifetime `'a` defined here\n+...\n LL |     <_ as Bazoom<_>>::method::<&'a u32>(&a, b, &c); //~ ERROR\n-   |                                                ^^ borrowed value does not live long enough\n+   |     -------------------------------------------^^-\n+   |     |                                          |\n+   |     |                                          borrowed value does not live long enough\n+   |     argument requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 51:35...\n-  --> $DIR/method-ufcs-3.rs:51:35\n-   |\n-LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n-   |                                   ^^\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/method-ufcs-3.rs:69:52\n    |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              -- lifetime `'a` defined here\n+...\n LL |         <_ as Bazoom<_>>::method::<&'a u32>(&a, b, &c); //~ ERROR\n-   |                                                    ^^ borrowed value does not live long enough\n+   |         -------------------------------------------^^-\n+   |         |                                          |\n+   |         |                                          borrowed value does not live long enough\n+   |         argument requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:46...\n-  --> $DIR/method-ufcs-3.rs:64:46\n-   |\n-LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n-   |                                              ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cb6cc6479646100170dca4741c4e48b2e4dca548", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-1.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-1.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,17 +1,17 @@\n error[E0597]: `v` does not live long enough\n   --> $DIR/method-ufcs-inherent-1.rs:16:26\n    |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     let v = 22;\n LL |     let x = A::<'a>::new(&v, 22);\n-   |                          ^^ borrowed value does not live long enough\n+   |             -------------^^-----\n+   |             |            |\n+   |             |            borrowed value does not live long enough\n+   |             argument requires that `v` is borrowed for `'a`\n LL |     //~^ ERROR\n LL | }\n    | - `v` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n-  --> $DIR/method-ufcs-inherent-1.rs:14:8\n-   |\n-LL | fn foo<'a>() {\n-   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "4dc534b2e77acb5b5e8285d09f85ef8c499f7e0a", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-2.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,32 +1,32 @@\n error[E0597]: `v` does not live long enough\n   --> $DIR/method-ufcs-inherent-2.rs:16:37\n    |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     let v = 22;\n LL |     let x = A::<'a>::new::<&'a u32>(&v, &v);\n-   |                                     ^^ borrowed value does not live long enough\n+   |             ------------------------^^-----\n+   |             |                       |\n+   |             |                       borrowed value does not live long enough\n+   |             argument requires that `v` is borrowed for `'a`\n ...\n LL | }\n    | - `v` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n-  --> $DIR/method-ufcs-inherent-2.rs:14:8\n-   |\n-LL | fn foo<'a>() {\n-   |        ^^\n \n error[E0597]: `v` does not live long enough\n   --> $DIR/method-ufcs-inherent-2.rs:16:41\n    |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     let v = 22;\n LL |     let x = A::<'a>::new::<&'a u32>(&v, &v);\n-   |                                         ^^ borrowed value does not live long enough\n+   |             ----------------------------^^-\n+   |             |                           |\n+   |             |                           borrowed value does not live long enough\n+   |             argument requires that `v` is borrowed for `'a`\n ...\n LL | }\n    | - `v` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n-  --> $DIR/method-ufcs-inherent-2.rs:14:8\n-   |\n-LL | fn foo<'a>() {\n-   |        ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2f83283ef912247566020b36ea4fb47f7476d8cb", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-3.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-3.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,17 +1,17 @@\n error[E0597]: `v` does not live long enough\n   --> $DIR/method-ufcs-inherent-3.rs:16:26\n    |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     let v = 22;\n LL |     let x = <A<'a>>::new(&v, 22);\n-   |                          ^^ borrowed value does not live long enough\n+   |             -------------^^-----\n+   |             |            |\n+   |             |            borrowed value does not live long enough\n+   |             argument requires that `v` is borrowed for `'a`\n LL |     //~^ ERROR\n LL | }\n    | - `v` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n-  --> $DIR/method-ufcs-inherent-3.rs:14:8\n-   |\n-LL | fn foo<'a>() {\n-   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "a41cf50465e876dbfeedb290cc69a5dd111d592b", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-4.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,32 +1,32 @@\n error[E0597]: `v` does not live long enough\n   --> $DIR/method-ufcs-inherent-4.rs:17:37\n    |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     let v = 22;\n LL |     let x = <A<'a>>::new::<&'a u32>(&v, &v);\n-   |                                     ^^ borrowed value does not live long enough\n+   |             ------------------------^^-----\n+   |             |                       |\n+   |             |                       borrowed value does not live long enough\n+   |             argument requires that `v` is borrowed for `'a`\n ...\n LL | }\n    | - `v` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:8...\n-  --> $DIR/method-ufcs-inherent-4.rs:15:8\n-   |\n-LL | fn foo<'a>() {\n-   |        ^^\n \n error[E0597]: `v` does not live long enough\n   --> $DIR/method-ufcs-inherent-4.rs:17:41\n    |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     let v = 22;\n LL |     let x = <A<'a>>::new::<&'a u32>(&v, &v);\n-   |                                         ^^ borrowed value does not live long enough\n+   |             ----------------------------^^-\n+   |             |                           |\n+   |             |                           borrowed value does not live long enough\n+   |             argument requires that `v` is borrowed for `'a`\n ...\n LL | }\n    | - `v` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:8...\n-  --> $DIR/method-ufcs-inherent-4.rs:15:8\n-   |\n-LL | fn foo<'a>() {\n-   |        ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b059d5aa89ad0758207e5d7b0888412afe11ab5c", "filename": "src/test/ui/nll/user-annotations/normalization.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,11 +2,11 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/normalization.rs:12:31\n    |\n LL |     let b: <() as Foo>::Out = &a; //~ ERROR\n-   |                               ^^ borrowed value does not live long enough\n+   |            ----------------   ^^ borrowed value does not live long enough\n+   |            |\n+   |            type annotation requires that `a` is borrowed for `'static`\n LL | }\n    | - `a` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "800c822058d0aec8300f352582a550db88680241", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_enum_variant.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -3,22 +3,23 @@ error[E0597]: `y` does not live long enough\n    |\n LL |     let foo = Foo::Bar { field: &y };\n    |                                 ^^ borrowed value does not live long enough\n-...\n+LL |     //~^ ERROR `y` does not live long enough\n+LL |     let Foo::Bar::<'static> { field: _z } = foo;\n+   |         --------------------------------- type annotation requires that `y` is borrowed for `'static`\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_brace_enum_variant.rs:16:33\n    |\n LL |     let foo = Foo::Bar { field: &y };\n    |                                 ^^ borrowed value does not live long enough\n ...\n+LL |         Foo::Bar::<'static> { field: _z } => {\n+   |         --------------------------------- type annotation requires that `y` is borrowed for `'static`\n+...\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8adadfb8b6796f2ed1beca41e8e1ca5fdde17839", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_struct.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -3,22 +3,23 @@ error[E0597]: `y` does not live long enough\n    |\n LL |     let foo = Foo { field: &y };\n    |                            ^^ borrowed value does not live long enough\n-...\n+LL |     //~^ ERROR `y` does not live long enough\n+LL |     let Foo::<'static> { field: _z } = foo;\n+   |         ---------------------------- type annotation requires that `y` is borrowed for `'static`\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_brace_struct.rs:14:28\n    |\n LL |     let foo = Foo { field: &y };\n    |                            ^^ borrowed value does not live long enough\n ...\n+LL |         Foo::<'static> { field: _z } => {\n+   |         ---------------------------- type annotation requires that `y` is borrowed for `'static`\n+...\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0fd5fc3578d57de8b3e7e3dbebcd214206590043", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_enum_variant.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -3,22 +3,23 @@ error[E0597]: `y` does not live long enough\n    |\n LL |     let foo = Foo::Bar(&y);\n    |                        ^^ borrowed value does not live long enough\n-...\n+LL |     //~^ ERROR `y` does not live long enough\n+LL |     let Foo::Bar::<'static>(_z) = foo;\n+   |         ----------------------- type annotation requires that `y` is borrowed for `'static`\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_tuple_enum_variant.rs:16:24\n    |\n LL |     let foo = Foo::Bar(&y);\n    |                        ^^ borrowed value does not live long enough\n ...\n+LL |         Foo::Bar::<'static>(_z) => {\n+   |         ----------------------- type annotation requires that `y` is borrowed for `'static`\n+...\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3d114fa5d7535d2e9fee02aefd45aaf437444188", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_struct.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -3,22 +3,23 @@ error[E0597]: `y` does not live long enough\n    |\n LL |     let foo = Foo(&y);\n    |                   ^^ borrowed value does not live long enough\n-...\n+LL |     //~^ ERROR `y` does not live long enough\n+LL |     let Foo::<'static>(_z) = foo;\n+   |         ------------------ type annotation requires that `y` is borrowed for `'static`\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/pattern_substs_on_tuple_struct.rs:14:19\n    |\n LL |     let foo = Foo(&y);\n    |                   ^^ borrowed value does not live long enough\n ...\n+LL |         Foo::<'static>(_z) => {\n+   |         ------------------ type annotation requires that `y` is borrowed for `'static`\n+...\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0c50b98ee2713ad7219a97bed9d2f655d421653c", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,125 +1,122 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:8:9\n    |\n+LL |     let y: &'static u32;\n+   |            ------------ type annotation requires that `x` is borrowed for `'static`\n LL |     y = &x; //~ ERROR\n    |         ^^ borrowed value does not live long enough\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:22:13\n    |\n LL |     let y = &x; //~ ERROR\n    |             ^^ borrowed value does not live long enough\n-...\n+LL |     let ref z: &'static u32 = y;\n+   |                ------------ type annotation requires that `x` is borrowed for `'static`\n+LL |     **z\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:46:27\n    |\n LL |     let y: &'static u32 = &x; //~ ERROR\n-   |                           ^^ borrowed value does not live long enough\n+   |            ------------   ^^ borrowed value does not live long enough\n+   |            |\n+   |            type annotation requires that `x` is borrowed for `'static`\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:51:27\n    |\n LL |     let _: &'static u32 = &x; //~ ERROR\n-   |                           ^^ borrowed value does not live long enough\n+   |            ------------   ^^ borrowed value does not live long enough\n+   |            |\n+   |            type annotation requires that `x` is borrowed for `'static`\n ...\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/patterns.rs:53:41\n    |\n LL |     let _: Vec<&'static String> = vec![&String::new()];\n-   |                                         ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n-   |                                         |\n-   |                                         creates a temporary which is freed while still in use\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |            --------------------         ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n+   |            |                            |\n+   |            |                            creates a temporary which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/patterns.rs:56:52\n    |\n LL |     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n-   |                                                    ^^^^^^^^^^^^^      - temporary value is freed at the end of this statement\n-   |                                                    |\n-   |                                                    creates a temporary which is freed while still in use\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |                 -------------------------          ^^^^^^^^^^^^^      - temporary value is freed at the end of this statement\n+   |                 |                                  |\n+   |                 |                                  creates a temporary which is freed while still in use\n+   |                 type annotation requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/patterns.rs:59:53\n    |\n LL |     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n-   |                                                     ^^^^^^^^^^^^^      - temporary value is freed at the end of this statement\n-   |                                                     |\n-   |                                                     creates a temporary which is freed while still in use\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |                  -------------------------          ^^^^^^^^^^^^^      - temporary value is freed at the end of this statement\n+   |                  |                                  |\n+   |                  |                                  creates a temporary which is freed while still in use\n+   |                  type annotation requires that borrow lasts for `'static`\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:65:40\n    |\n LL |     let (_, _): (&'static u32, u32) = (&x, 44); //~ ERROR\n-   |                                        ^^ borrowed value does not live long enough\n+   |                 -------------------    ^^ borrowed value does not live long enough\n+   |                 |\n+   |                 type annotation requires that `x` is borrowed for `'static`\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:70:40\n    |\n LL |     let (y, _): (&'static u32, u32) = (&x, 44); //~ ERROR\n-   |                                        ^^ borrowed value does not live long enough\n+   |                 -------------------    ^^ borrowed value does not live long enough\n+   |                 |\n+   |                 type annotation requires that `x` is borrowed for `'static`\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:75:69\n    |\n LL |     let Single { value: y }: Single<&'static u32> = Single { value: &x }; //~ ERROR\n-   |                                                                     ^^ borrowed value does not live long enough\n+   |                              --------------------                   ^^ borrowed value does not live long enough\n+   |                              |\n+   |                              type annotation requires that `x` is borrowed for `'static`\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:80:69\n    |\n LL |     let Single { value: _ }: Single<&'static u32> = Single { value: &x }; //~ ERROR\n-   |                                                                     ^^ borrowed value does not live long enough\n+   |                              --------------------                   ^^ borrowed value does not live long enough\n+   |                              |\n+   |                              type annotation requires that `x` is borrowed for `'static`\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/patterns.rs:88:17\n    |\n+LL |     let Double { value1: _, value2: _ }: Double<&'static u32> = Double {\n+   |                                          -------------------- type annotation requires that `x` is borrowed for `'static`\n LL |         value1: &x, //~ ERROR\n    |                 ^^ borrowed value does not live long enough\n ...\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: unsatisfied lifetime constraints\n   --> $DIR/patterns.rs:101:5"}, {"sha": "50df5f615fae511e9ac7a320d4bf4ddf9b562db3", "filename": "src/test/ui/nll/user-annotations/type_ascription_static_lifetime.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,11 +2,12 @@ error[E0597]: `x` does not live long enough\n   --> $DIR/type_ascription_static_lifetime.rs:18:19\n    |\n LL |     let y: &u32 = &x: &'static u32; //~ ERROR E0597\n-   |                   ^^ borrowed value does not live long enough\n+   |                   ^^--------------\n+   |                   |\n+   |                   borrowed value does not live long enough\n+   |                   type annotation requires that `x` is borrowed for `'static`\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "d41d36075000e8ee16c2a5a3a0491c7e163f30d9", "filename": "src/test/ui/regions/region-borrow-params-issue-29793-big.ast.nll.stderr", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.ast.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,25 +1,39 @@\n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-big.rs:81:43\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-big.rs:81:26\n    |\n LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n-   |                          ---------        ^ borrowed value does not live long enough\n+   |                          ^^^^^^^^^        - `x` is borrowed here\n    |                          |\n-   |                          value captured here\n-...\n-LL |     });\n-   |     - `x` dropped here while still borrowed\n+   |                          may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-big.rs:81:9\n+   |\n+LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         WrapB::new().set(move |t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n+   |                          ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-big.rs:81:54\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-big.rs:81:26\n    |\n LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n-   |                          ---------                   ^ borrowed value does not live long enough\n+   |                          ^^^^^^^^^                   - `y` is borrowed here\n    |                          |\n-   |                          value captured here\n-...\n-LL |     });\n-   |     - `y` dropped here while still borrowed\n+   |                          may outlive borrowed value `y`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-big.rs:81:9\n+   |\n+LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         WrapB::new().set(move |t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n+   |                          ^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "d41d36075000e8ee16c2a5a3a0491c7e163f30d9", "filename": "src/test/ui/regions/region-borrow-params-issue-29793-big.mir.stderr", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.mir.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,25 +1,39 @@\n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-big.rs:81:43\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-big.rs:81:26\n    |\n LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n-   |                          ---------        ^ borrowed value does not live long enough\n+   |                          ^^^^^^^^^        - `x` is borrowed here\n    |                          |\n-   |                          value captured here\n-...\n-LL |     });\n-   |     - `x` dropped here while still borrowed\n+   |                          may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-big.rs:81:9\n+   |\n+LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         WrapB::new().set(move |t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n+   |                          ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-big.rs:81:54\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-big.rs:81:26\n    |\n LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n-   |                          ---------                   ^ borrowed value does not live long enough\n+   |                          ^^^^^^^^^                   - `y` is borrowed here\n    |                          |\n-   |                          value captured here\n-...\n-LL |     });\n-   |     - `y` dropped here while still borrowed\n+   |                          may outlive borrowed value `y`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-big.rs:81:9\n+   |\n+LL |         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         WrapB::new().set(move |t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n+   |                          ^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "ecd48d0b819e97cd6f7da4673ea07ed241401f67", "filename": "src/test/ui/regions/region-borrow-params-issue-29793-big.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-big.rs?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -81,8 +81,8 @@ fn main() {\n         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n             //[ast]~^ ERROR `x` does not live long enough\n             //[ast]~| ERROR `y` does not live long enough\n-            //[mir]~^^^ ERROR `x` does not live long enough\n-            //[mir]~| ERROR `y` does not live long enough\n+            //[mir]~^^^ ERROR closure may outlive the current function\n+            //[mir]~| ERROR closure may outlive the current function\n     });\n \n     w.handle(); // This works"}, {"sha": "f2d6e796872c5fba1349e431b78704c62ffce1f9", "filename": "src/test/ui/regions/region-borrow-params-issue-29793-small.nll.stderr", "status": "modified", "additions": 249, "deletions": 205, "changes": 454, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-small.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-small.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-borrow-params-issue-29793-small.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,319 +1,363 @@\n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:19:34\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:19:17\n    |\n LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------        ^ borrowed value does not live long enough\n+   |                 ^^^^^^^^^        - `x` is borrowed here\n    |                 |\n-   |                 value captured here\n-...\n-LL |     };\n-   |      - `x` dropped here while still borrowed\n+   |                 may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:22:16\n+   |\n+LL |         return f;\n+   |                ^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:19:45\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:19:17\n    |\n LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------                   ^ borrowed value does not live long enough\n+   |                 ^^^^^^^^^                   - `y` is borrowed here\n    |                 |\n-   |                 value captured here\n-...\n-LL |     };\n-   |      - `y` dropped here while still borrowed\n+   |                 may outlive borrowed value `y`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:22:16\n+   |\n+LL |         return f;\n+   |                ^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:34:34\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:34:17\n    |\n LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------        ^ borrowed value does not live long enough\n+   |                 ^^^^^^^^^        - `x` is borrowed here\n    |                 |\n-   |                 value captured here\n-...\n-LL |     };\n-   |      - `x` dropped here while still borrowed\n+   |                 may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:37:9\n+   |\n+LL |         f\n+   |         ^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:34:45\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:34:17\n    |\n LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------                   ^ borrowed value does not live long enough\n+   |                 ^^^^^^^^^                   - `y` is borrowed here\n    |                 |\n-   |                 value captured here\n-...\n-LL |     };\n-   |      - `y` dropped here while still borrowed\n+   |                 may outlive borrowed value `y`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:37:9\n+   |\n+LL |         f\n+   |         ^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:65:34\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:65:17\n    |\n LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------        ^ borrowed value does not live long enough\n+   |                 ^^^^^^^^^        - `x` is borrowed here\n    |                 |\n-   |                 value captured here\n-...\n-LL |     };\n-   |     - `x` dropped here while still borrowed\n+   |                 may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:68:16\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:10...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:64:10\n+LL |         return Box::new(f);\n+   |                ^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |          ^^\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:65:45\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:65:17\n    |\n LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------                   ^ borrowed value does not live long enough\n+   |                 ^^^^^^^^^                   - `y` is borrowed here\n    |                 |\n-   |                 value captured here\n-...\n-LL |     };\n-   |     - `y` dropped here while still borrowed\n+   |                 may outlive borrowed value `y`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:68:16\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:10...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:64:10\n+LL |         return Box::new(f);\n+   |                ^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |          ^^\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:76:34\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:76:17\n    |\n LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------        ^ borrowed value does not live long enough\n+   |                 ^^^^^^^^^        - `x` is borrowed here\n    |                 |\n-   |                 value captured here\n-...\n-LL |     };\n-   |     - `x` dropped here while still borrowed\n+   |                 may outlive borrowed value `x`\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:10...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:75:10\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:79:9\n    |\n-LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |          ^^\n+LL |         Box::new(f)\n+   |         ^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:76:45\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:76:17\n    |\n LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------                   ^ borrowed value does not live long enough\n+   |                 ^^^^^^^^^                   - `y` is borrowed here\n    |                 |\n-   |                 value captured here\n-...\n-LL |     };\n-   |     - `y` dropped here while still borrowed\n+   |                 may outlive borrowed value `y`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:79:9\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:10...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:75:10\n+LL |         Box::new(f)\n+   |         ^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |          ^^\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                 ^^^^^^^^^^^^^^\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:100:38\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:100:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------        ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^        - `x` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `x` dropped here while still borrowed\n+   |                     may outlive borrowed value `x`\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:99:14\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:103:20\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             return Box::new(f);\n+   |                    ^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:100:49\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:100:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------                   ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^                   - `y` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `y` dropped here while still borrowed\n+   |                     may outlive borrowed value `y`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:103:20\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:99:14\n+LL |             return Box::new(f);\n+   |                    ^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:114:38\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:114:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------        ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^        - `x` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `x` dropped here while still borrowed\n+   |                     may outlive borrowed value `x`\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:113:14\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:117:13\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             Box::new(f)\n+   |             ^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:114:49\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:114:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------                   ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^                   - `y` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `y` dropped here while still borrowed\n+   |                     may outlive borrowed value `y`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:117:13\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:113:14\n+LL |             Box::new(f)\n+   |             ^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:142:38\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:142:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------        ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^        - `x` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `x` dropped here while still borrowed\n+   |                     may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:145:20\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:141:14\n+LL |             return Box::new(f);\n+   |                    ^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:142:49\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:142:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------                   ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^                   - `y` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `y` dropped here while still borrowed\n+   |                     may outlive borrowed value `y`\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:141:14\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:145:20\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             return Box::new(f);\n+   |                    ^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:157:38\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:157:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------        ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^        - `x` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `x` dropped here while still borrowed\n+   |                     may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:160:13\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:156:14\n+LL |             Box::new(f)\n+   |             ^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:157:49\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:157:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------                   ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^                   - `y` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `y` dropped here while still borrowed\n+   |                     may outlive borrowed value `y`\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:156:14\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:160:13\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             Box::new(f)\n+   |             ^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:185:38\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:185:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------        ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^        - `x` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `x` dropped here while still borrowed\n+   |                     may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:188:20\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:184:14\n+LL |             return Box::new(f);\n+   |                    ^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:185:49\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:185:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------                   ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^                   - `y` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `y` dropped here while still borrowed\n+   |                     may outlive borrowed value `y`\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:184:14\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:188:20\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             return Box::new(f);\n+   |                    ^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `x` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:199:38\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:199:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------        ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^        - `x` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `x` dropped here while still borrowed\n+   |                     may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:202:13\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:198:14\n+LL |             Box::new(f)\n+   |             ^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n-error[E0597]: `y` does not live long enough\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:199:49\n+error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:199:21\n    |\n LL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                     ---------                   ^ borrowed value does not live long enough\n+   |                     ^^^^^^^^^                   - `y` is borrowed here\n    |                     |\n-   |                     value captured here\n-...\n-LL |         }\n-   |         - `y` dropped here while still borrowed\n+   |                     may outlive borrowed value `y`\n+   |\n+note: closure is returned here\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:202:13\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:14...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:198:14\n+LL |             Box::new(f)\n+   |             ^^^^^^^^^^^\n+help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |              ^^\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+   |                     ^^^^^^^^^^^^^^\n \n error: aborting due to 20 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "59871a510d3f3dde0880cd073668150a7ceb9a97", "filename": "src/test/ui/regions/region-object-lifetime-5.nll.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,13 +1,12 @@\n-error[E0597]: `*x` does not live long enough\n+error[E0515]: cannot return value referencing local data `*x`\n   --> $DIR/region-object-lifetime-5.rs:21:5\n    |\n LL |     x.borrowed() //~ ERROR `*x` does not live long enough\n-   |     ^ borrowed value does not live long enough\n-LL | }\n-   | - `*x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     -^^^^^^^^^^^\n+   |     |\n+   |     returns a value referencing data owned by the current function\n+   |     `*x` is borrowed here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "bfe5bd8ae69f1c84fac1fc0d892008aea034d645", "filename": "src/test/ui/regions/regions-addr-of-arg.nll.stderr", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-arg.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-arg.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-arg.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,26 +2,19 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/regions-addr-of-arg.rs:15:30\n    |\n LL |     let _p: &'static isize = &a; //~ ERROR `a` does not live long enough\n-   |                              ^^ borrowed value does not live long enough\n+   |             --------------   ^^ borrowed value does not live long enough\n+   |             |\n+   |             type annotation requires that `a` is borrowed for `'static`\n LL | }\n    |  - `a` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: `a` does not live long enough\n+error[E0515]: cannot return reference to function parameter `a`\n   --> $DIR/regions-addr-of-arg.rs:23:5\n    |\n LL |     &a //~ ERROR `a` does not live long enough\n-   |     ^^ borrowed value does not live long enough\n-LL | }\n-   |  - `a` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 22:8...\n-  --> $DIR/regions-addr-of-arg.rs:22:8\n-   |\n-LL | fn zed<'a>(a: isize) -> &'a isize {\n-   |        ^^\n+   |     ^^ returns a reference to data owned by the current function\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0515, E0597.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "9ad7ee8d4470c13186de62f24b2ff9fc67006d24", "filename": "src/test/ui/regions/regions-close-object-into-object-1.nll.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-1.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,13 +1,12 @@\n-error[E0597]: `*v` does not live long enough\n-  --> $DIR/regions-close-object-into-object-1.rs:22:11\n+error[E0515]: cannot return value referencing local data `*v`\n+  --> $DIR/regions-close-object-into-object-1.rs:22:5\n    |\n LL |     box B(&*v) as Box<X> //~ ERROR `*v` does not live long enough\n-   |           ^^^ borrowed value does not live long enough\n-LL | }\n-   | - `*v` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^^^^^^---^^^^^^^^^^^\n+   |     |     |\n+   |     |     `*v` is borrowed here\n+   |     returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "56ce993dc71dd2c33fd0d578fe6dd9a3a9ccc4a5", "filename": "src/test/ui/regions/regions-close-object-into-object-3.nll.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-3.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,13 +1,12 @@\n-error[E0597]: `*v` does not live long enough\n-  --> $DIR/regions-close-object-into-object-3.rs:21:11\n+error[E0515]: cannot return value referencing local data `*v`\n+  --> $DIR/regions-close-object-into-object-3.rs:21:5\n    |\n LL |     box B(&*v) as Box<X> //~ ERROR `*v` does not live long enough\n-   |           ^^^ borrowed value does not live long enough\n-LL | }\n-   | - `*v` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^^^^^^---^^^^^^^^^^^\n+   |     |     |\n+   |     |     `*v` is borrowed here\n+   |     returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "de3142939b799a167344b276289378ff7b7fcd6d", "filename": "src/test/ui/regions/regions-creating-enums.nll.stderr", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,31 +1,21 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/regions-creating-enums.rs:33:17\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/regions-creating-enums.rs:33:16\n    |\n LL |         return &ast::num((*f)(x)); //~ ERROR borrowed value does not live long enough\n-   |                 ^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n-   |                 |\n-   |                 creates a temporary which is freed while still in use\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 30:13...\n-  --> $DIR/regions-creating-enums.rs:30:13\n-   |\n-LL | fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(usize) -> usize {\n-   |             ^^\n+   |                ^-----------------\n+   |                ||\n+   |                |temporary value created here\n+   |                returns a reference to data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/regions-creating-enums.rs:38:17\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/regions-creating-enums.rs:38:16\n    |\n LL |         return &ast::add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n-   |                 ^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n-   |                 |\n-   |                 creates a temporary which is freed while still in use\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 30:13...\n-  --> $DIR/regions-creating-enums.rs:30:13\n-   |\n-LL | fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(usize) -> usize {\n-   |             ^^\n+   |                ^------------------\n+   |                ||\n+   |                |temporary value created here\n+   |                returns a reference to data owned by the current function\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "c6bd5b7fa0d2492554a924205a7db6f93cfde8fa", "filename": "src/test/ui/regions/regions-free-region-ordering-caller1.nll.stderr", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,32 +1,30 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-free-region-ordering-caller1.rs:19:27\n    |\n+LL | fn call1<'a>(x: &'a usize) {\n+   |          -- lifetime `'a` defined here\n+...\n LL |     let z: &'a & usize = &(&y);\n-   |                           ^^^^ creates a temporary which is freed while still in use\n+   |            -----------    ^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'a`\n ...\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:10...\n-  --> $DIR/regions-free-region-ordering-caller1.rs:15:10\n-   |\n-LL | fn call1<'a>(x: &'a usize) {\n-   |          ^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/regions-free-region-ordering-caller1.rs:19:27\n    |\n+LL | fn call1<'a>(x: &'a usize) {\n+   |          -- lifetime `'a` defined here\n+...\n LL |     let z: &'a & usize = &(&y);\n-   |                           ^^^^ borrowed value does not live long enough\n+   |            -----------    ^^^^ borrowed value does not live long enough\n+   |            |\n+   |            type annotation requires that `y` is borrowed for `'a`\n ...\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:10...\n-  --> $DIR/regions-free-region-ordering-caller1.rs:15:10\n-   |\n-LL | fn call1<'a>(x: &'a usize) {\n-   |          ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a444f90bbe1c9e2c3abbcaaa71d7b44b971e7edc", "filename": "src/test/ui/regions/regions-infer-borrow-scope-too-big.nll.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-borrow-scope-too-big.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,18 +1,12 @@\n-error[E0597]: `*p` does not live long enough\n-  --> $DIR/regions-infer-borrow-scope-too-big.rs:22:22\n+error[E0515]: cannot return value referencing local data `*p`\n+  --> $DIR/regions-infer-borrow-scope-too-big.rs:24:12\n    |\n LL |     let xc = x_coord(&*p); //~ ERROR `*p` does not live long enough\n-   |                      ^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `*p` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:8...\n-  --> $DIR/regions-infer-borrow-scope-too-big.rs:21:8\n-   |\n-LL | fn foo<'a>(p: Box<point>) -> &'a isize {\n-   |        ^^\n+   |                      --- `*p` is borrowed here\n+LL |     assert_eq!(*xc, 3);\n+LL |     return xc;\n+   |            ^^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "67b9e0975a777cadaa384afb14381bdd39c271b8", "filename": "src/test/ui/regions/regions-infer-proc-static-upvar.nll.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-infer-proc-static-upvar.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-infer-proc-static-upvar.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-proc-static-upvar.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,13 +1,14 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/regions-infer-proc-static-upvar.rs:20:13\n    |\n-LL |     let y = &x; //~ ERROR `x` does not live long enough\n-   |             ^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+LL |       let y = &x; //~ ERROR `x` does not live long enough\n+   |               ^^ borrowed value does not live long enough\n+LL | /     foo(move|| {\n+LL | |         let _a = *y;\n+LL | |     });\n+   | |______- argument requires that `x` is borrowed for `'static`\n+LL |   }\n+   |   - `x` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "c3a9a57d9eebbfa99e447ae3127e8d33b3a6d4b8", "filename": "src/test/ui/regions/regions-lifetime-of-struct-or-enum-variant.nll.stderr", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-of-struct-or-enum-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-of-struct-or-enum-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-of-struct-or-enum-variant.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,33 +1,21 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:24:20\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:26:3\n    |\n LL |   let testValue = &id(Test);\n-   |                    ^^^^^^^^ creates a temporary which is freed while still in use\n-...\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 23:19...\n-  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:23:19\n-   |\n-LL | fn structLifetime<'a>() -> &'a Test {\n-   |                   ^^\n+   |                    -------- temporary value created here\n+LL |   //~^ ERROR borrowed value does not live long enough\n+LL |   testValue\n+   |   ^^^^^^^^^ returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:30:20\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:32:3\n    |\n LL |   let testValue = &id(MyEnum::Variant1);\n-   |                    ^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n-...\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 29:20...\n-  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:29:20\n-   |\n-LL | fn variantLifetime<'a>() -> &'a MyEnum {\n-   |                    ^^\n+   |                    -------------------- temporary value created here\n+LL |   //~^ ERROR borrowed value does not live long enough\n+LL |   testValue\n+   |   ^^^^^^^^^ returns a value referencing data owned by the current function\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "c45325f8c1e6056975960912172fad10e79f5492", "filename": "src/test/ui/regions/regions-nested-fns-2.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns-2.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -5,12 +5,13 @@ LL |         |z| {\n    |         --- value captured here\n LL |             //~^ ERROR E0373\n LL |             if false { &y } else { z }\n-   |                         ^ borrowed value does not live long enough\n+   |                        -^\n+   |                        ||\n+   |                        |borrowed value does not live long enough\n+   |                        returning this value requires that `y` is borrowed for `'static`\n LL |         });\n LL | }\n    | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "927865a3d28c2779721cbe609a012ddc260a6031", "filename": "src/test/ui/regions/regions-pattern-typing-issue-19552.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19552.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19552.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-pattern-typing-issue-19552.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -3,11 +3,11 @@ error[E0597]: `line` does not live long enough\n    |\n LL |     match [&*line] { //~ ERROR `line` does not live long enough\n    |              ^^^^ borrowed value does not live long enough\n-...\n+LL |         [ word ] => { assert_static(word); }\n+   |                       ------------------- argument requires that `line` is borrowed for `'static`\n+LL |     }\n LL | }\n    | - `line` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "b6f89540bd46c34cceb527771881a4daf69f8117", "filename": "src/test/ui/regions/regions-ref-in-fn-arg.nll.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,22 +1,19 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/regions-ref-in-fn-arg.rs:14:13\n+error[E0515]: cannot return value referencing function parameter\n+  --> $DIR/regions-ref-in-fn-arg.rs:15:5\n    |\n LL | fn arg_item(box ref x: Box<isize>) -> &'static isize {\n-   |             ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |             --------- function parameter borrowed here\n LL |     x //~^ ERROR borrowed value does not live long enough\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^ returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/regions-ref-in-fn-arg.rs:21:11\n+error[E0515]: cannot return value referencing function parameter\n+  --> $DIR/regions-ref-in-fn-arg.rs:21:22\n    |\n LL |     with(|box ref x| x) //~ ERROR borrowed value does not live long enough\n-   |           ^^^^^^^^^  - temporary value is freed at the end of this statement\n+   |           ---------  ^ returns a value referencing data owned by the current function\n    |           |\n-   |           creates a temporary which is freed while still in use\n+   |           function parameter borrowed here\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "35c1113fb624c6ee3aac614d4be6a8867a10b67b", "filename": "src/test/ui/regions/regions-ret.nll.stderr", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-ret.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-ret.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,19 +1,12 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/regions-ret.rs:14:13\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/regions-ret.rs:14:12\n    |\n LL |     return &id(3); //~ ERROR borrowed value does not live long enough\n-   |             ^^^^^- temporary value is freed at the end of this statement\n-   |             |\n-   |             creates a temporary which is freed while still in use\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 13:1...\n-  --> $DIR/regions-ret.rs:13:1\n-   |\n-LL | / fn f(_x: &isize) -> &isize {\n-LL | |     return &id(3); //~ ERROR borrowed value does not live long enough\n-LL | | }\n-   | |_^\n+   |            ^-----\n+   |            ||\n+   |            |temporary value created here\n+   |            returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "041d627f58447bfc9e45f30b9756bf3937f7a094", "filename": "src/test/ui/regions/regions-return-stack-allocated-vec.nll.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-return-stack-allocated-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-return-stack-allocated-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-stack-allocated-vec.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,13 +1,12 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/regions-return-stack-allocated-vec.rs:14:6\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/regions-return-stack-allocated-vec.rs:14:5\n    |\n LL |     &[x] //~ ERROR borrowed value does not live long enough\n-   |      ^^^ creates a temporary which is freed while still in use\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     ^---\n+   |     ||\n+   |     |temporary value created here\n+   |     returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0716`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "92d5a10af3a1d27f93bf807a576c6f53e39498af", "filename": "src/test/ui/regions/regions-trait-variance.nll.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-trait-variance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fregions%2Fregions-trait-variance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-variance.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,18 +1,11 @@\n-error[E0597]: `*b` does not live long enough\n-  --> $DIR/regions-trait-variance.rs:47:18\n+error[E0515]: cannot return value referencing local data `*b`\n+  --> $DIR/regions-trait-variance.rs:48:5\n    |\n LL |     let bb: &B = &*b; //~ ERROR `*b` does not live long enough\n-   |                  ^^^ borrowed value does not live long enough\n+   |                  --- `*b` is borrowed here\n LL |     make_a(bb)\n-LL | }\n-   | - `*b` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 43:16...\n-  --> $DIR/regions-trait-variance.rs:43:16\n-   |\n-LL | fn make_make_a<'a>() -> A<'a> {\n-   |                ^^\n+   |     ^^^^^^^^^^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "7f14956e90b9024a2b375d4c495056a0192120bc", "filename": "src/test/ui/span/issue-11925.nll.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,12 +1,9 @@\n-error[E0597]: `x` does not live long enough\n+error[E0515]: cannot return reference to local data `x`\n   --> $DIR/issue-11925.rs:18:35\n    |\n LL |         let f = to_fn_once(move|| &x); //~ ERROR does not live long enough\n-   |                                   ^-\n-   |                                   ||\n-   |                                   |`x` dropped here while still borrowed\n-   |                                   borrowed value does not live long enough\n+   |                                   ^^ returns a reference to data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "745f390a4f3e9d40aee2c519584653a0af6ef069", "filename": "src/test/ui/static/static-drop-scope.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -8,11 +8,11 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-drop-scope.rs:19:60\n    |\n LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n-   |                                                            ^^^^^^^^- temporary value is freed at the end of this statement\n-   |                                                            |\n-   |                                                            creates a temporary which is freed while still in use\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |                                                      ------^^^^^^^^-\n+   |                                                      |     |       |\n+   |                                                      |     |       temporary value is freed at the end of this statement\n+   |                                                      |     creates a temporary which is freed while still in use\n+   |                                                      using this value as a static requires that borrow lasts for `'static`\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:23:59\n@@ -24,11 +24,11 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-drop-scope.rs:23:59\n    |\n LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n-   |                                                           ^^^^^^^^- temporary value is freed at the end of this statement\n-   |                                                           |\n-   |                                                           creates a temporary which is freed while still in use\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |                                                     ------^^^^^^^^-\n+   |                                                     |     |       |\n+   |                                                     |     |       temporary value is freed at the end of this statement\n+   |                                                     |     creates a temporary which is freed while still in use\n+   |                                                     using this value as a constant requires that borrow lasts for `'static`\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:27:28"}, {"sha": "d195b4ce39ab4258eb074e95574e6a8e8ce63301", "filename": "src/test/ui/static/static-lifetime-bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime-bound.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -10,11 +10,12 @@ error[E0597]: `x` does not live long enough\n   --> $DIR/static-lifetime-bound.rs:15:7\n    |\n LL |     f(&x); //~ERROR does not live long enough\n-   |       ^^ borrowed value does not live long enough\n+   |     --^^-\n+   |     | |\n+   |     | borrowed value does not live long enough\n+   |     argument requires that `x` is borrowed for `'static`\n LL | }\n    | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "eec1a4d9f12433f0b6ea30679c8653e84df1ff7a", "filename": "src/test/ui/static/static-reference-to-fn-2.nll.stderr", "status": "modified", "additions": 29, "deletions": 50, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,68 +1,47 @@\n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-reference-to-fn-2.rs:28:22\n    |\n+LL | fn state1(self_: &mut StateMachineIter) -> Option<&'static str> {\n+   |           ----- has type `&mut StateMachineIter<'1>`\n LL |     self_.statefn = &id(state2 as StateMachineFunc);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n-   |                      |\n-   |                      creates a temporary which is freed while still in use\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #2 defined on the function body at 27:1...\n-  --> $DIR/static-reference-to-fn-2.rs:27:1\n-   |\n-LL | / fn state1(self_: &mut StateMachineIter) -> Option<&'static str> {\n-LL | |     self_.statefn = &id(state2 as StateMachineFunc);\n-LL | |     //~^ ERROR borrowed value does not live long enough\n-LL | |     return Some(\"state1\");\n-LL | | }\n-   | |_^\n+   |     -----------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n+   |     |                |\n+   |     |                creates a temporary which is freed while still in use\n+   |     assignment requires that borrow lasts for `'1`\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-reference-to-fn-2.rs:34:22\n    |\n+LL | fn state2(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n+   |           ----- has type `&mut StateMachineIter<'1>`\n LL |     self_.statefn = &id(state3 as StateMachineFunc);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n-   |                      |\n-   |                      creates a temporary which is freed while still in use\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #2 defined on the function body at 33:1...\n-  --> $DIR/static-reference-to-fn-2.rs:33:1\n-   |\n-LL | / fn state2(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n-LL | |     self_.statefn = &id(state3 as StateMachineFunc);\n-LL | |     //~^ ERROR borrowed value does not live long enough\n-LL | |     return Some(\"state2\");\n-LL | | }\n-   | |_^\n+   |     -----------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n+   |     |                |\n+   |     |                creates a temporary which is freed while still in use\n+   |     assignment requires that borrow lasts for `'1`\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-reference-to-fn-2.rs:40:22\n    |\n+LL | fn state3(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n+   |           ----- has type `&mut StateMachineIter<'1>`\n LL |     self_.statefn = &id(finished as StateMachineFunc);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n-   |                      |\n-   |                      creates a temporary which is freed while still in use\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #2 defined on the function body at 39:1...\n-  --> $DIR/static-reference-to-fn-2.rs:39:1\n-   |\n-LL | / fn state3(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n-LL | |     self_.statefn = &id(finished as StateMachineFunc);\n-LL | |     //~^ ERROR borrowed value does not live long enough\n-LL | |     return Some(\"state3\");\n-LL | | }\n-   | |_^\n+   |     -----------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n+   |     |                |\n+   |     |                creates a temporary which is freed while still in use\n+   |     assignment requires that borrow lasts for `'1`\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/static-reference-to-fn-2.rs:51:19\n-   |\n-LL |         statefn: &id(state1 as StateMachineFunc)\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n-...\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/static-reference-to-fn-2.rs:50:5\n+   |\n+LL | /     StateMachineIter {\n+LL | |         statefn: &id(state1 as StateMachineFunc)\n+   | |                   ------------------------------ temporary value created here\n+LL | |         //~^ ERROR borrowed value does not live long enough\n+LL | |     }\n+   | |_____^ returns a value referencing data owned by the current function\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+Some errors occurred: E0515, E0716.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "c33c1a4554782ab66fef4b2b4d976e17abd0e6cc", "filename": "src/test/ui/static/static-region-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -4,10 +4,9 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let x = &id(3); //~ ERROR borrowed value does not live long enough\n    |              ^^^^^ creates a temporary which is freed while still in use\n LL |     f(x);\n+   |     ---- argument requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "a5b126f60ecdfb7f4d1064f9e04d136d106cec2b", "filename": "src/test/ui/traits/trait-coercion-generic-regions.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Ftraits%2Ftrait-coercion-generic-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Ftraits%2Ftrait-coercion-generic-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-coercion-generic-regions.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -2,12 +2,13 @@ error[E0597]: `person` does not live long enough\n   --> $DIR/trait-coercion-generic-regions.rs:27:24\n    |\n LL |     let person: &str = &person;  //~ ERROR `person` does not live long enough\n-   |                        ^^^^^^^ borrowed value does not live long enough\n+   |                        ^^^^^^^\n+   |                        |\n+   |                        borrowed value does not live long enough\n+   |                        assignment requires that `person` is borrowed for `'static`\n LL |     let s: Box<Trait<&'static str>> = Box::new(Struct { person: person });\n LL | }\n    | - `person` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n "}, {"sha": "f1cbb95b1ae42dfd2c098ae3f5621238f0fa0389", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.nll.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -29,6 +29,9 @@ LL |     factorial = Some(Box::new(f));\n error[E0597]: `factorial` does not live long enough\n   --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:38:17\n    |\n+LL |     let mut factorial: Option<Box<Fn(u32) -> u32 + 'static>> = None;\n+   |                        ------------------------------------- type annotation requires that `factorial` is borrowed for `'static`\n+LL | \n LL |     let f = |x: u32| -> u32 {\n    |             --------------- value captured here\n LL |         //~^ ERROR closure may outlive the current function, but it borrows `factorial`\n@@ -37,12 +40,13 @@ LL |         let g = factorial.as_ref().unwrap();\n ...\n LL | }\n    | - `factorial` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error[E0506]: cannot assign to `factorial` because it is borrowed\n   --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:42:5\n    |\n+LL |     let mut factorial: Option<Box<Fn(u32) -> u32 + 'static>> = None;\n+   |                        ------------------------------------- type annotation requires that `factorial` is borrowed for `'static`\n+LL | \n LL |     let f = |x: u32| -> u32 {\n    |             --------------- borrow of `factorial` occurs here\n LL |         //~^ ERROR closure may outlive the current function, but it borrows `factorial`\n@@ -51,8 +55,6 @@ LL |         let g = factorial.as_ref().unwrap();\n ...\n LL |     factorial = Some(Box::new(f));\n    |     ^^^^^^^^^ assignment to borrowed `factorial` occurs here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f938c219478b34f4dc349b64eb911d912bf6eb6d", "filename": "src/test/ui/wf/wf-misc-methods-issue-28609.nll.stderr", "status": "modified", "additions": 33, "deletions": 90, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fwf%2Fwf-misc-methods-issue-28609.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3969a3f70779790fd8de1f1602441b5078566b/src%2Ftest%2Fui%2Fwf%2Fwf-misc-methods-issue-28609.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-misc-methods-issue-28609.nll.stderr?ref=2a3969a3f70779790fd8de1f1602441b5078566b", "patch": "@@ -1,112 +1,55 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/wf-misc-methods-issue-28609.rs:32:31\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/wf-misc-methods-issue-28609.rs:32:5\n    |\n LL |     s.transmute_inherent(&mut 42) //~ ERROR does not live long enough\n-   |                               ^^ creates a temporary which is freed while still in use\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 30:1...\n-  --> $DIR/wf-misc-methods-issue-28609.rs:30:1\n-   |\n-LL | / fn return_dangling_pointer_inherent(s: S2) -> &u32 {\n-LL | |     let s = s;\n-LL | |     s.transmute_inherent(&mut 42) //~ ERROR does not live long enough\n-LL | | }\n-   | |_^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^--^\n+   |     |                         |\n+   |     |                         temporary value created here\n+   |     returns a value referencing data owned by the current function\n \n-error[E0597]: `four` does not live long enough\n-  --> $DIR/wf-misc-methods-issue-28609.rs:45:19\n+error[E0515]: cannot return value referencing local variable `four`\n+  --> $DIR/wf-misc-methods-issue-28609.rs:46:5\n    |\n LL |     s.bomb = Some(&four); //~ ERROR does not live long enough\n-   |                   ^^^^^ borrowed value does not live long enough\n+   |                   ----- `four` is borrowed here\n LL |     &s\n-LL | }\n-   | - `four` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 42:1...\n-  --> $DIR/wf-misc-methods-issue-28609.rs:42:1\n-   |\n-LL | / fn return_dangling_pointer_coerce(s: S2) -> &u32 {\n-LL | |     let four = 4;\n-LL | |     let mut s = s;\n-LL | |     s.bomb = Some(&four); //~ ERROR does not live long enough\n-LL | |     &s\n-LL | | }\n-   | |_^\n+   |     ^^ returns a value referencing data owned by the current function\n \n-error[E0597]: `four` does not live long enough\n-  --> $DIR/wf-misc-methods-issue-28609.rs:52:19\n+error[E0515]: cannot return value referencing local variable `four`\n+  --> $DIR/wf-misc-methods-issue-28609.rs:53:5\n    |\n LL |     s.bomb = Some(&four); //~ ERROR does not live long enough\n-   |                   ^^^^^ borrowed value does not live long enough\n+   |                   ----- `four` is borrowed here\n LL |     &*s\n-LL | }\n-   | - `four` dropped here while still borrowed\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 49:1...\n-  --> $DIR/wf-misc-methods-issue-28609.rs:49:1\n-   |\n-LL | / fn return_dangling_pointer_unary_op(s: S2) -> &u32 {\n-LL | |     let four = 4;\n-LL | |     let mut s = s;\n-LL | |     s.bomb = Some(&four); //~ ERROR does not live long enough\n-LL | |     &*s\n-LL | | }\n-   | |_^\n+   |     ^^^ returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/wf-misc-methods-issue-28609.rs:63:15\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/wf-misc-methods-issue-28609.rs:63:5\n    |\n LL |     s << &mut 3 //~ ERROR does not live long enough\n-   |               ^ creates a temporary which is freed while still in use\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 61:1...\n-  --> $DIR/wf-misc-methods-issue-28609.rs:61:1\n-   |\n-LL | / fn return_dangling_pointer_binary_op(s: S2) -> &u32 {\n-LL | |     let s = s;\n-LL | |     s << &mut 3 //~ ERROR does not live long enough\n-LL | | }\n-   | |_^\n+   |     ^^^^^^^^^^-\n+   |     |         |\n+   |     |         temporary value created here\n+   |     returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/wf-misc-methods-issue-28609.rs:68:16\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/wf-misc-methods-issue-28609.rs:68:5\n    |\n LL |     s.shl(&mut 3) //~ ERROR does not live long enough\n-   |                ^ creates a temporary which is freed while still in use\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 66:1...\n-  --> $DIR/wf-misc-methods-issue-28609.rs:66:1\n-   |\n-LL | / fn return_dangling_pointer_method(s: S2) -> &u32 {\n-LL | |     let s = s;\n-LL | |     s.shl(&mut 3) //~ ERROR does not live long enough\n-LL | | }\n-   | |_^\n+   |     ^^^^^^^^^^^-^\n+   |     |          |\n+   |     |          temporary value created here\n+   |     returns a value referencing data owned by the current function\n \n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/wf-misc-methods-issue-28609.rs:73:21\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/wf-misc-methods-issue-28609.rs:73:5\n    |\n LL |     S2::shl(s, &mut 3) //~ ERROR does not live long enough\n-   |                     ^ creates a temporary which is freed while still in use\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 71:1...\n-  --> $DIR/wf-misc-methods-issue-28609.rs:71:1\n-   |\n-LL | / fn return_dangling_pointer_ufcs(s: S2) -> &u32 {\n-LL | |     let s = s;\n-LL | |     S2::shl(s, &mut 3) //~ ERROR does not live long enough\n-LL | | }\n-   | |_^\n+   |     ^^^^^^^^^^^^^^^^-^\n+   |     |               |\n+   |     |               temporary value created here\n+   |     returns a value referencing data owned by the current function\n \n error: aborting due to 6 previous errors\n \n-Some errors occurred: E0597, E0716.\n-For more information about an error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}]}