{"sha": "1dcc986d5292713cd3b75e9804cbf20807c1a43c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkY2M5ODZkNTI5MjcxM2NkM2I3NWU5ODA0Y2JmMjA4MDdjMWE0M2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-31T23:06:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-31T23:06:55Z"}, "message": "auto merge of #11173 : whitequark/rust/master, r=thestinger\n\nThis PR adds `std::unsafe::intrinsics::{volatile_load,volatile_store}`, which map to LLVM's `load volatile` and `store volatile` operations correspondingly.\r\n\r\nThis would fix #11172.\r\n\r\nI have addressed several uncertainties with this PR in the line comments.", "tree": {"sha": "190c956899e6a909561f289908c06caa6676fe3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/190c956899e6a909561f289908c06caa6676fe3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dcc986d5292713cd3b75e9804cbf20807c1a43c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcc986d5292713cd3b75e9804cbf20807c1a43c", "html_url": "https://github.com/rust-lang/rust/commit/1dcc986d5292713cd3b75e9804cbf20807c1a43c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dcc986d5292713cd3b75e9804cbf20807c1a43c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd52e6acc6341b3ced6fe02fec3fdd10d6f2a242", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd52e6acc6341b3ced6fe02fec3fdd10d6f2a242", "html_url": "https://github.com/rust-lang/rust/commit/bd52e6acc6341b3ced6fe02fec3fdd10d6f2a242"}, {"sha": "f98f83a15de649f3b4d152737336e95a0969e265", "url": "https://api.github.com/repos/rust-lang/rust/commits/f98f83a15de649f3b4d152737336e95a0969e265", "html_url": "https://github.com/rust-lang/rust/commit/f98f83a15de649f3b4d152737336e95a0969e265"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "ae90acd3cb713f524aab5626492726c0b50734a9", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=1dcc986d5292713cd3b75e9804cbf20807c1a43c", "patch": "@@ -787,6 +787,10 @@ pub mod llvm {\n         pub fn LLVMIsTailCall(CallInst: ValueRef) -> Bool;\n         pub fn LLVMSetTailCall(CallInst: ValueRef, IsTailCall: Bool);\n \n+        /* Operations on load/store instructions (only) */\n+        pub fn LLVMGetVolatile(MemoryAccessInst: ValueRef) -> Bool;\n+        pub fn LLVMSetVolatile(MemoryAccessInst: ValueRef, volatile: Bool);\n+\n         /* Operations on phi nodes */\n         pub fn LLVMAddIncoming(PhiNode: ValueRef,\n                                IncomingValues: *ValueRef,"}, {"sha": "7a0e319e505016d63e93b284e0c86946888c3a9e", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=1dcc986d5292713cd3b75e9804cbf20807c1a43c", "patch": "@@ -349,6 +349,13 @@ pub fn Load(cx: &Block, PointerVal: ValueRef) -> ValueRef {\n     }\n }\n \n+pub fn VolatileLoad(cx: &Block, PointerVal: ValueRef) -> ValueRef {\n+    unsafe {\n+        if cx.unreachable.get() { return llvm::LLVMGetUndef(Type::nil().to_ref()); }\n+        B(cx).volatile_load(PointerVal)\n+    }\n+}\n+\n pub fn AtomicLoad(cx: &Block, PointerVal: ValueRef, order: AtomicOrdering) -> ValueRef {\n     unsafe {\n         let ccx = cx.fcx.ccx;\n@@ -383,6 +390,11 @@ pub fn Store(cx: &Block, Val: ValueRef, Ptr: ValueRef) {\n     B(cx).store(Val, Ptr)\n }\n \n+pub fn VolatileStore(cx: &Block, Val: ValueRef, Ptr: ValueRef) {\n+    if cx.unreachable.get() { return; }\n+    B(cx).volatile_store(Val, Ptr)\n+}\n+\n pub fn AtomicStore(cx: &Block, Val: ValueRef, Ptr: ValueRef, order: AtomicOrdering) {\n     if cx.unreachable.get() { return; }\n     B(cx).atomic_store(Val, Ptr, order)"}, {"sha": "c4beb935ffecfc96512fe3454f809a99aa00bb38", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=1dcc986d5292713cd3b75e9804cbf20807c1a43c", "patch": "@@ -449,6 +449,15 @@ impl Builder {\n         }\n     }\n \n+    pub fn volatile_load(&self, ptr: ValueRef) -> ValueRef {\n+        self.count_insn(\"load.volatile\");\n+        unsafe {\n+            let insn = llvm::LLVMBuildLoad(self.llbuilder, ptr, noname());\n+            llvm::LLVMSetVolatile(insn, lib::llvm::True);\n+            insn\n+        }\n+    }\n+\n     pub fn atomic_load(&self, ptr: ValueRef, order: AtomicOrdering) -> ValueRef {\n         self.count_insn(\"load.atomic\");\n         unsafe {\n@@ -488,6 +497,18 @@ impl Builder {\n         }\n     }\n \n+    pub fn volatile_store(&self, val: ValueRef, ptr: ValueRef) {\n+        debug!(\"Store {} -> {}\",\n+               self.ccx.tn.val_to_str(val),\n+               self.ccx.tn.val_to_str(ptr));\n+        assert!(is_not_null(self.llbuilder));\n+        self.count_insn(\"store.volatile\");\n+        unsafe {\n+            let insn = llvm::LLVMBuildStore(self.llbuilder, val, ptr);\n+            llvm::LLVMSetVolatile(insn, lib::llvm::True);\n+        }\n+    }\n+\n     pub fn atomic_store(&self, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) {\n         debug!(\"Store {} -> {}\",\n                self.ccx.tn.val_to_str(val),"}, {"sha": "f652fbec228cccd54474e124977e47acdf85da77", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=1dcc986d5292713cd3b75e9804cbf20807c1a43c", "patch": "@@ -73,6 +73,23 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n         }\n     }\n \n+    fn volatile_load_intrinsic(bcx: @Block) {\n+        let first_real_arg = bcx.fcx.arg_pos(0u);\n+        let src = get_param(bcx.fcx.llfn, first_real_arg);\n+\n+        let val = VolatileLoad(bcx, src);\n+        Ret(bcx, val);\n+    }\n+\n+    fn volatile_store_intrinsic(bcx: @Block) {\n+        let first_real_arg = bcx.fcx.arg_pos(0u);\n+        let dst = get_param(bcx.fcx.llfn, first_real_arg);\n+        let val = get_param(bcx.fcx.llfn, first_real_arg + 1);\n+\n+        VolatileStore(bcx, val, dst);\n+        RetVoid(bcx);\n+    }\n+\n     fn copy_intrinsic(bcx: @Block, allow_overlap: bool, tp_ty: ty::t) {\n         let ccx = bcx.ccx();\n         let lltp_ty = type_of::type_of(ccx, tp_ty);\n@@ -480,6 +497,9 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n         \"bswap32\" => simple_llvm_intrinsic(bcx, \"llvm.bswap.i32\", 1),\n         \"bswap64\" => simple_llvm_intrinsic(bcx, \"llvm.bswap.i64\", 1),\n \n+        \"volatile_load\" => volatile_load_intrinsic(bcx),\n+        \"volatile_store\" => volatile_store_intrinsic(bcx),\n+\n         \"i8_add_with_overflow\" =>\n             with_overflow_instrinsic(bcx, \"llvm.sadd.with.overflow.i8\", output_type),\n         \"i16_add_with_overflow\" =>"}, {"sha": "ef968d5cf36606764e8b15120eb66af84e7f3a2e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1dcc986d5292713cd3b75e9804cbf20807c1a43c", "patch": "@@ -4226,6 +4226,11 @@ pub fn check_intrinsic_type(ccx: @CrateCtxt, it: @ast::foreign_item) {\n             \"bswap32\"      => (0, ~[ ty::mk_i32() ], ty::mk_i32()),\n             \"bswap64\"      => (0, ~[ ty::mk_i64() ], ty::mk_i64()),\n \n+            \"volatile_load\" =>\n+                (1, ~[ ty::mk_imm_ptr(tcx, param(ccx, 0)) ], param(ccx, 0)),\n+            \"volatile_store\" =>\n+                (1, ~[ ty::mk_mut_ptr(tcx, param(ccx, 0)), param(ccx, 0) ], ty::mk_nil()),\n+\n             \"i8_add_with_overflow\" | \"i8_sub_with_overflow\" | \"i8_mul_with_overflow\" =>\n                 (0, ~[ty::mk_i8(), ty::mk_i8()],\n                 ty::mk_tup(tcx, ~[ty::mk_i8(), ty::mk_bool()])),"}, {"sha": "46dc03e82b0b825a49f27b1ef6bf9b14528eecba", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=1dcc986d5292713cd3b75e9804cbf20807c1a43c", "patch": "@@ -12,6 +12,15 @@\n \n The corresponding definitions are in librustc/middle/trans/foreign.rs.\n \n+# Volatiles\n+\n+The volatile intrinsics provide operations intended to act on I/O\n+memory, which are guaranteed to not be reordered by the compiler\n+across other volatile intrinsics. See the LLVM documentation on\n+[[volatile]].\n+\n+[volatile]: http://llvm.org/docs/LangRef.html#volatile-memory-accesses\n+\n # Atomics\n \n The atomic intrinsics provide common atomic operations on machine\n@@ -179,6 +188,9 @@ extern \"rust-intrinsic\" {\n     /// Execute a breakpoint trap, for inspection by a debugger.\n     pub fn breakpoint();\n \n+    #[cfg(not(stage0))] pub fn volatile_load<T>(src: *T) -> T;\n+    #[cfg(not(stage0))] pub fn volatile_store<T>(dst: *mut T, val: T);\n+\n     /// Atomic compare and exchange, sequentially consistent.\n     pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n     /// Atomic compare and exchange, acquire ordering."}, {"sha": "fc19412e2ef54a2788f33b28a174763e7ea90b8d", "filename": "src/test/run-make/volatile-intrinsics/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2FMakefile?ref=1dcc986d5292713cd3b75e9804cbf20807c1a43c", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+all:\n+\t# The tests must pass...\n+\t$(RUSTC) main.rs\n+\t$(call RUN,main)\n+\t# ... and the loads/stores must not be optimized out.\n+\t$(RUSTC) main.rs --emit-llvm -S\n+\tgrep \"load volatile\"  $(TMPDIR)/main.ll\n+\tgrep \"store volatile\" $(TMPDIR)/main.ll"}, {"sha": "5011a7540a726413269979ef83da184fb832f651", "filename": "src/test/run-make/volatile-intrinsics/main.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcc986d5292713cd3b75e9804cbf20807c1a43c/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs?ref=1dcc986d5292713cd3b75e9804cbf20807c1a43c", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::unstable::intrinsics::{volatile_load, volatile_store};\n+\n+pub fn main() {\n+    unsafe {\n+        let mut i : int = 1;\n+        volatile_store(&mut i, 2);\n+        assert_eq!(volatile_load(&i), 2);\n+    }\n+}"}]}