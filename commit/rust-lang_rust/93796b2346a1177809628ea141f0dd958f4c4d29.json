{"sha": "93796b2346a1177809628ea141f0dd958f4c4d29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNzk2YjIzNDZhMTE3NzgwOTYyOGVhMTQxZjBkZDk1OGY0YzRkMjk=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-15T05:22:31Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-15T05:43:37Z"}, "message": "Add some restrictions to default_numeric_fallback to avoid FNs", "tree": {"sha": "72b37ff74f6bed72535ec00afb33a0232dc80e8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72b37ff74f6bed72535ec00afb33a0232dc80e8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93796b2346a1177809628ea141f0dd958f4c4d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93796b2346a1177809628ea141f0dd958f4c4d29", "html_url": "https://github.com/rust-lang/rust/commit/93796b2346a1177809628ea141f0dd958f4c4d29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93796b2346a1177809628ea141f0dd958f4c4d29/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d4483dee55fbf0c9ba48a3ddfd8abe06805c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d4483dee55fbf0c9ba48a3ddfd8abe06805c07", "html_url": "https://github.com/rust-lang/rust/commit/22d4483dee55fbf0c9ba48a3ddfd8abe06805c07"}], "stats": {"total": 263, "additions": 218, "deletions": 45}, "files": [{"sha": "3102d0320571d0c678d84d1db6d975ba534b20cb", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 132, "deletions": 39, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/93796b2346a1177809628ea141f0dd958f4c4d29/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93796b2346a1177809628ea141f0dd958f4c4d29/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=93796b2346a1177809628ea141f0dd958f4c4d29", "patch": "@@ -1,9 +1,14 @@\n-use rustc_ast::{LitFloatType, LitIntType, LitKind};\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{Expr, ExprKind, HirId, Stmt, StmtKind};\n+use rustc_ast::ast::{LitFloatType, LitIntType, LitKind};\n+use rustc_hir::{\n+    intravisit::{walk_expr, walk_stmt, NestedVisitorMap, Visitor},\n+    Body, Expr, ExprKind, Lit, Stmt, StmtKind,\n+};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, FloatTy, IntTy};\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_middle::{\n+    hir::map::Map,\n+    ty::{self, FloatTy, IntTy, Ty},\n+};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use if_chain::if_chain;\n \n@@ -33,53 +38,141 @@ declare_clippy_lint! {\n     /// Use instead:\n     /// ```rust\n     /// let i = 10i32;\n-    /// let f: f64 = 1.23;\n+    /// let f = 1.23f64;\n     /// ```\n     pub DEFAULT_NUMERIC_FALLBACK,\n     restriction,\n     \"usage of unconstrained numeric literals which may cause default numeric fallback.\"\n }\n \n-#[derive(Default)]\n-pub struct DefaultNumericFallback {\n-    /// Hold `init` in `Local` if `Local` has a type annotation.\n-    bounded_inits: FxHashSet<HirId>,\n+declare_lint_pass!(DefaultNumericFallback => [DEFAULT_NUMERIC_FALLBACK]);\n+\n+impl LateLintPass<'_> for DefaultNumericFallback {\n+    fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx Body<'_>) {\n+        let mut visitor = NumericFallbackVisitor::new(cx);\n+        visitor.visit_body(body);\n+    }\n }\n \n-impl_lint_pass!(DefaultNumericFallback => [DEFAULT_NUMERIC_FALLBACK]);\n+struct NumericFallbackVisitor<'a, 'tcx> {\n+    /// Stack manages type bound of exprs. The top element holds current expr type.\n+    ty_bounds: Vec<TyBound<'tcx>>,\n \n-impl LateLintPass<'_> for DefaultNumericFallback {\n-    fn check_stmt(&mut self, _: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n-        if_chain! {\n-            if let StmtKind::Local(local) = stmt.kind;\n-            if local.ty.is_some();\n-            if let Some(init) = local.init;\n-            then {\n-                self.bounded_inits.insert(init.hir_id);\n-            }\n+    cx: &'a LateContext<'tcx>,\n+}\n+\n+impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'tcx>) -> Self {\n+        Self {\n+            ty_bounds: vec![TyBound::Nothing],\n+            cx,\n         }\n     }\n \n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        let expr_ty = cx.typeck_results().expr_ty(expr);\n-        let hir_id = expr.hir_id;\n+    /// Check whether a passed literal has potential to cause fallback or not.\n+    fn check_lit(&self, lit: &Lit, lit_ty: Ty<'tcx>) {\n+        let ty_bound = self.ty_bounds.last().unwrap();\n         if_chain! {\n-            if let ExprKind::Lit(ref lit) = expr.kind;\n-            if matches!(lit.node,\n-                        LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed));\n-            if matches!(expr_ty.kind(), ty::Int(IntTy::I32) | ty::Float(FloatTy::F64));\n-            if !self.bounded_inits.contains(&hir_id);\n-            if !cx.tcx.hir().parent_iter(hir_id).any(|(ref hir_id, _)| self.bounded_inits.contains(hir_id));\n-            then {\n-                 span_lint_and_help(\n-                    cx,\n-                    DEFAULT_NUMERIC_FALLBACK,\n-                    lit.span,\n-                    \"default numeric fallback might occur\",\n-                    None,\n-                    \"consider adding suffix to avoid default numeric fallback\",\n-                 )\n-            }\n+                if matches!(lit.node,\n+                            LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed));\n+                if matches!(lit_ty.kind(), ty::Int(IntTy::I32) | ty::Float(FloatTy::F64));\n+                if !ty_bound.is_integral();\n+                then {\n+                    span_lint_and_help(\n+                        self.cx,\n+                        DEFAULT_NUMERIC_FALLBACK,\n+                        lit.span,\n+                        \"default numeric fallback might occur\",\n+                        None,\n+                        \"consider adding suffix to avoid default numeric fallback\",\n+                    );\n+                }\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    #[allow(clippy::too_many_lines)]\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        match &expr.kind {\n+            ExprKind::Call(func, args) => {\n+                if_chain! {\n+                    if let ExprKind::Path(ref func_path) = func.kind;\n+                    if let Some(def_id) = self.cx.qpath_res(func_path, func.hir_id).opt_def_id();\n+                    then {\n+                        let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n+                        for (expr, bound) in args.iter().zip(fn_sig.inputs().iter()) {\n+                            // Push found arg type, then visit arg.\n+                            self.ty_bounds.push(TyBound::Ty(bound));\n+                            self.visit_expr(expr);\n+                            self.ty_bounds.pop();\n+                        }\n+                        return;\n+                    }\n+                }\n+            },\n+\n+            ExprKind::MethodCall(_, _, args, _) => {\n+                if let Some(def_id) = self.cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n+                    let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n+                    for (expr, bound) in args.iter().zip(fn_sig.inputs().iter()) {\n+                        self.ty_bounds.push(TyBound::Ty(bound));\n+                        self.visit_expr(expr);\n+                        self.ty_bounds.pop();\n+                    }\n+                    return;\n+                }\n+            },\n+\n+            ExprKind::Lit(lit) => {\n+                let ty = self.cx.typeck_results().expr_ty(expr);\n+                self.check_lit(lit, ty);\n+                return;\n+            },\n+\n+            _ => {},\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+\n+    fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n+        match stmt.kind {\n+            StmtKind::Local(local) => {\n+                if local.ty.is_some() {\n+                    self.ty_bounds.push(TyBound::Any)\n+                } else {\n+                    self.ty_bounds.push(TyBound::Nothing)\n+                }\n+            },\n+\n+            _ => self.ty_bounds.push(TyBound::Nothing),\n+        }\n+\n+        walk_stmt(self, stmt);\n+        self.ty_bounds.pop();\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy)]\n+enum TyBound<'ctx> {\n+    Any,\n+    Ty(Ty<'ctx>),\n+    Nothing,\n+}\n+\n+impl<'ctx> TyBound<'ctx> {\n+    fn is_integral(self) -> bool {\n+        match self {\n+            TyBound::Any => true,\n+            TyBound::Ty(t) => t.is_integral(),\n+            TyBound::Nothing => false,\n         }\n     }\n }"}, {"sha": "642c1e68dacba173e70c485b77f73a6de811e5dc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93796b2346a1177809628ea141f0dd958f4c4d29/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93796b2346a1177809628ea141f0dd958f4c4d29/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=93796b2346a1177809628ea141f0dd958f4c4d29", "patch": "@@ -1028,7 +1028,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n-    store.register_late_pass(|| box default_numeric_fallback::DefaultNumericFallback::default());\n+    store.register_late_pass(|| box default_numeric_fallback::DefaultNumericFallback);\n \n     let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {"}, {"sha": "420c1f0c9316b0973fa2835ffb33ed681fbd4c43", "filename": "tests/ui/default_numeric_fallback.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/93796b2346a1177809628ea141f0dd958f4c4d29/tests%2Fui%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93796b2346a1177809628ea141f0dd958f4c4d29/tests%2Fui%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.rs?ref=93796b2346a1177809628ea141f0dd958f4c4d29", "patch": "@@ -1,18 +1,58 @@\n #![warn(clippy::default_numeric_fallback)]\n #![allow(unused)]\n+#![allow(clippy::never_loop)]\n+#![allow(clippy::no_effect)]\n+#![allow(clippy::unnecessary_operation)]\n+\n+fn concrete_arg(x: i32) {}\n+\n+fn generic_arg<T>(t: T) {}\n+\n+struct ConcreteStruct {\n+    x: i32,\n+}\n+\n+struct StructForMethodCallTest {\n+    x: i32,\n+}\n+\n+impl StructForMethodCallTest {\n+    fn concrete_arg(&self, x: i32) {}\n+\n+    fn generic_arg<T>(&self, t: T) {}\n+}\n \n fn main() {\n+    let s = StructForMethodCallTest { x: 10_i32 };\n+\n     // Bad.\n     let x = 1;\n     let x = 0.1;\n+\n     let x = if true { 1 } else { 2 };\n \n+    let x: _ = {\n+        let y = 1;\n+        1\n+    };\n+\n+    generic_arg(10);\n+    s.generic_arg(10);\n+    let x: _ = generic_arg(10);\n+    let x: _ = s.generic_arg(10);\n+\n     // Good.\n     let x = 1_i32;\n     let x: i32 = 1;\n     let x: _ = 1;\n     let x = 0.1_f64;\n     let x: f64 = 0.1;\n     let x: _ = 0.1;\n+\n     let x: _ = if true { 1 } else { 2 };\n+\n+    concrete_arg(10);\n+    s.concrete_arg(10);\n+    let x = concrete_arg(10);\n+    let x = s.concrete_arg(10);\n }"}, {"sha": "cb7c174ad8d412bf5205ff1aaf0448445434e7f7", "filename": "tests/ui/default_numeric_fallback.stderr", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/93796b2346a1177809628ea141f0dd958f4c4d29/tests%2Fui%2Fdefault_numeric_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93796b2346a1177809628ea141f0dd958f4c4d29/tests%2Fui%2Fdefault_numeric_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.stderr?ref=93796b2346a1177809628ea141f0dd958f4c4d29", "patch": "@@ -1,5 +1,5 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:6:13\n+  --> $DIR/default_numeric_fallback.rs:29:13\n    |\n LL |     let x = 1;\n    |             ^\n@@ -8,28 +8,68 @@ LL |     let x = 1;\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:7:13\n+  --> $DIR/default_numeric_fallback.rs:30:13\n    |\n LL |     let x = 0.1;\n    |             ^^^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:8:23\n+  --> $DIR/default_numeric_fallback.rs:32:23\n    |\n LL |     let x = if true { 1 } else { 2 };\n    |                       ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:8:34\n+  --> $DIR/default_numeric_fallback.rs:32:34\n    |\n LL |     let x = if true { 1 } else { 2 };\n    |                                  ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n-error: aborting due to 4 previous errors\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:35:17\n+   |\n+LL |         let y = 1;\n+   |                 ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:39:17\n+   |\n+LL |     generic_arg(10);\n+   |                 ^^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:40:19\n+   |\n+LL |     s.generic_arg(10);\n+   |                   ^^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:41:28\n+   |\n+LL |     let x: _ = generic_arg(10);\n+   |                            ^^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:42:30\n+   |\n+LL |     let x: _ = s.generic_arg(10);\n+   |                              ^^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: aborting due to 9 previous errors\n "}]}