{"sha": "efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYmFhNDEzMDYxYzJhNmU1MmYwNmYwMGE2MGVlNzgzMGZjZjNlYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-05T02:49:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-05T02:49:51Z"}, "message": "Auto merge of #77557 - Dylan-DPC:rollup-aib9ptp, r=Dylan-DPC\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #75853 (Use more intra-doc-links in `core::fmt`)\n - #75928 (Remove trait_selection error message in specific case)\n - #76329 (Add check for doc alias attribute at crate level)\n - #77219 (core::global_allocator docs link to std::alloc::GlobalAlloc)\n - #77395 (BTreeMap: admit the existence of leaf edges in comments)\n - #77407 (Improve build-manifest to work with the improved promote-release)\n - #77426 (Include scope id in SocketAddrV6::Display)\n - #77439 (Fix missing diagnostic span for `impl Trait` with const generics, and add various tests for `min_const_generics` and `const_generics`)\n - #77471 (BTreeMap: refactoring around edges, missed spots)\n - #77512 (Allow `Abort` terminators in all const-contexts)\n - #77514 (Replace some once(x).chain(once(y)) with [x, y] IntoIter)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "d728ec6e5c6bbcaaf0accc89b53a176515718745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d728ec6e5c6bbcaaf0accc89b53a176515718745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "html_url": "https://github.com/rust-lang/rust/commit/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced813fec0fb9e883906f18b76d618baf9f5bc08", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced813fec0fb9e883906f18b76d618baf9f5bc08", "html_url": "https://github.com/rust-lang/rust/commit/ced813fec0fb9e883906f18b76d618baf9f5bc08"}, {"sha": "9dbc9ed870a3956d938c823338ac8943377845e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbc9ed870a3956d938c823338ac8943377845e8", "html_url": "https://github.com/rust-lang/rust/commit/9dbc9ed870a3956d938c823338ac8943377845e8"}], "stats": {"total": 2306, "additions": 1645, "deletions": 661}, "files": [{"sha": "fd27f053638329422284cf9f590d0123df5087f8", "filename": "Cargo.lock", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -183,7 +183,16 @@ dependencies = [\n  \"block-padding\",\n  \"byte-tools\",\n  \"byteorder\",\n- \"generic-array\",\n+ \"generic-array 0.12.3\",\n+]\n+\n+[[package]]\n+name = \"block-buffer\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"\n+dependencies = [\n+ \"generic-array 0.14.4\",\n ]\n \n [[package]]\n@@ -233,8 +242,11 @@ version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n  \"flate2\",\n+ \"hex 0.4.2\",\n+ \"rayon\",\n  \"serde\",\n  \"serde_json\",\n+ \"sha2\",\n  \"tar\",\n  \"toml\",\n ]\n@@ -687,6 +699,12 @@ version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9a21fa21941700a3cd8fcb4091f361a6a712fac632f85d9f487cc892045d55c6\"\n \n+[[package]]\n+name = \"cpuid-bool\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8aebca1129a03dc6dc2b127edd729435bbc4a37e1d5f4d7513165089ceb02634\"\n+\n [[package]]\n name = \"crates-io\"\n version = \"0.31.1\"\n@@ -884,7 +902,16 @@ version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n dependencies = [\n- \"generic-array\",\n+ \"generic-array 0.12.3\",\n+]\n+\n+[[package]]\n+name = \"digest\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"\n+dependencies = [\n+ \"generic-array 0.14.4\",\n ]\n \n [[package]]\n@@ -1166,6 +1193,16 @@ dependencies = [\n  \"typenum\",\n ]\n \n+[[package]]\n+name = \"generic-array\"\n+version = \"0.14.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817\"\n+dependencies = [\n+ \"typenum\",\n+ \"version_check\",\n+]\n+\n [[package]]\n name = \"getopts\"\n version = \"0.2.21\"\n@@ -1835,9 +1872,9 @@ version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a18af3dcaf2b0219366cdb4e2af65a6101457b415c3d1a5c71dd9c2b7c77b9c8\"\n dependencies = [\n- \"block-buffer\",\n- \"digest\",\n- \"opaque-debug\",\n+ \"block-buffer 0.7.3\",\n+ \"digest 0.8.1\",\n+ \"opaque-debug 0.2.3\",\n ]\n \n [[package]]\n@@ -2097,6 +2134,12 @@ version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n \n+[[package]]\n+name = \"opaque-debug\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5\"\n+\n [[package]]\n name = \"open\"\n version = \"1.4.0\"\n@@ -4362,10 +4405,23 @@ version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\n dependencies = [\n- \"block-buffer\",\n- \"digest\",\n+ \"block-buffer 0.7.3\",\n+ \"digest 0.8.1\",\n  \"fake-simd\",\n- \"opaque-debug\",\n+ \"opaque-debug 0.2.3\",\n+]\n+\n+[[package]]\n+name = \"sha2\"\n+version = \"0.9.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2933378ddfeda7ea26f48c555bdad8bb446bf8a3d17832dc83e380d444cfb8c1\"\n+dependencies = [\n+ \"block-buffer 0.9.0\",\n+ \"cfg-if\",\n+ \"cpuid-bool\",\n+ \"digest 0.9.0\",\n+ \"opaque-debug 0.3.0\",\n ]\n \n [[package]]"}, {"sha": "cd018ae1204f9a2c527cf5064fb9014c9edd7ff5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -581,7 +581,7 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n \n-    /// Allows non trivial generic constants which have to be manually propageted upwards.\n+    /// Allows non-trivial generic constants which have to be manually propageted upwards.\n     (active, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n \n     /// Allows basic arithmetic on floating point types in a `const fn`."}, {"sha": "62b1254287724aedacab6f5a7642124dbfd2bcdb", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -341,9 +341,7 @@ impl<T> PerNS<Option<T>> {\n \n     /// Returns an iterator over the items which are `Some`.\n     pub fn present_items(self) -> impl Iterator<Item = T> {\n-        use std::iter::once;\n-\n-        once(self.type_ns).chain(once(self.value_ns)).chain(once(self.macro_ns)).filter_map(|it| it)\n+        IntoIter::new([self.type_ns, self.value_ns, self.macro_ns]).filter_map(|it| it)\n     }\n }\n "}, {"sha": "fd6a312ef3af967cfc8ba2953f39fa5758d13576", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -9,13 +9,13 @@ use crate::{Item, ItemKind, TraitItem, TraitItemKind};\n \n use std::fmt::{self, Display};\n \n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MethodKind {\n     Trait { body: bool },\n     Inherent,\n }\n \n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum Target {\n     ExternCrate,\n     Use,"}, {"sha": "9a1b77e994d1350d66b89fe561d28d5a1ab13ac0", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -41,18 +41,6 @@ pub trait NonConstOp: std::fmt::Debug {\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx>;\n }\n \n-#[derive(Debug)]\n-pub struct Abort;\n-impl NonConstOp for Abort {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        mcf_status_in_item(ccx)\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        mcf_build_error(ccx, span, \"abort is not stable in const fn\")\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct FloatingPointOp;\n impl NonConstOp for FloatingPointOp {"}, {"sha": "94806116eaf2e5f5cba82aa022db15c869e18c04", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -434,11 +434,13 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n     fn visit_basic_block_data(&mut self, bb: BasicBlock, block: &BasicBlockData<'tcx>) {\n         trace!(\"visit_basic_block_data: bb={:?} is_cleanup={:?}\", bb, block.is_cleanup);\n \n-        // Just as the old checker did, we skip const-checking basic blocks on the unwind path.\n-        // These blocks often drop locals that would otherwise be returned from the function.\n+        // We don't const-check basic blocks on the cleanup path since we never unwind during\n+        // const-eval: a panic causes an immediate compile error. In other words, cleanup blocks\n+        // are unreachable during const-eval.\n         //\n-        // FIXME: This shouldn't be unsound since a panic at compile time will cause a compiler\n-        // error anyway, but maybe we should do more here?\n+        // We can't be more conservative (e.g., by const-checking cleanup blocks anyways) because\n+        // locals that would never be dropped during normal execution are sometimes dropped during\n+        // unwinding, which means backwards-incompatible live-drop errors.\n         if block.is_cleanup {\n             return;\n         }\n@@ -874,12 +876,16 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             }\n \n             TerminatorKind::InlineAsm { .. } => self.check_op(ops::InlineAsm),\n-            TerminatorKind::Abort => self.check_op(ops::Abort),\n \n             TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {\n                 self.check_op(ops::Generator(hir::GeneratorKind::Gen))\n             }\n \n+            TerminatorKind::Abort => {\n+                // Cleanup blocks are skipped for const checking (see `visit_basic_block_data`).\n+                span_bug!(self.span, \"`Abort` terminator outside of cleanup block\")\n+            }\n+\n             TerminatorKind::Assert { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }"}, {"sha": "59955b273342071af14744a430eb512da2b8703c", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -13,12 +13,14 @@ use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{self, FnSig, ForeignItem, ForeignItemKind, HirId, Item, ItemKind, TraitItem};\n+use rustc_hir::{\n+    self, FnSig, ForeignItem, ForeignItemKind, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID,\n+};\n use rustc_hir::{MethodKind, Target};\n use rustc_session::lint::builtin::{CONFLICTING_REPR_HINTS, UNUSED_ATTRIBUTES};\n use rustc_session::parse::feature_err;\n-use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{Span, DUMMY_SP};\n \n pub(crate) fn target_from_impl_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -333,6 +335,17 @@ impl CheckAttrVisitor<'tcx> {\n                                 .emit();\n                             return false;\n                         }\n+                        if CRATE_HIR_ID == hir_id {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    meta.span(),\n+                                    \"`#![doc(alias = \\\"...\\\")]` isn't allowed as a crate \\\n+                                     level attribute\",\n+                                )\n+                                .emit();\n+                            return false;\n+                        }\n                     }\n                 }\n             }\n@@ -808,9 +821,46 @@ fn is_c_like_enum(item: &Item<'_>) -> bool {\n     }\n }\n \n+fn check_invalid_crate_level_attr(tcx: TyCtxt<'_>, attrs: &[Attribute]) {\n+    const ATTRS_TO_CHECK: &[Symbol] = &[\n+        sym::macro_export,\n+        sym::repr,\n+        sym::path,\n+        sym::automatically_derived,\n+        sym::start,\n+        sym::main,\n+    ];\n+\n+    for attr in attrs {\n+        for attr_to_check in ATTRS_TO_CHECK {\n+            if tcx.sess.check_name(attr, *attr_to_check) {\n+                tcx.sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        &format!(\n+                            \"`{}` attribute cannot be used at crate level\",\n+                            attr_to_check.to_ident_string()\n+                        ),\n+                    )\n+                    .emit();\n+            }\n+        }\n+    }\n+}\n+\n fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir()\n         .visit_item_likes_in_module(module_def_id, &mut CheckAttrVisitor { tcx }.as_deep_visitor());\n+    if module_def_id.is_top_level_module() {\n+        CheckAttrVisitor { tcx }.check_attributes(\n+            CRATE_HIR_ID,\n+            tcx.hir().krate_attrs(),\n+            &DUMMY_SP,\n+            Target::Mod,\n+            None,\n+        );\n+        check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());\n+    }\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "e87adb378e7f77fe3166b7952dcb06df89e609ff", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -78,29 +78,38 @@ fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(LocalDefId, EntryFnType)\n // Beware, this is duplicated in `librustc_builtin_macros/test_harness.rs`\n // (with `ast::Item`), so make sure to keep them in sync.\n fn entry_point_type(sess: &Session, item: &Item<'_>, at_root: bool) -> EntryPointType {\n-    match item.kind {\n-        ItemKind::Fn(..) => {\n-            if sess.contains_name(&item.attrs, sym::start) {\n-                EntryPointType::Start\n-            } else if sess.contains_name(&item.attrs, sym::main) {\n-                EntryPointType::MainAttr\n-            } else if item.ident.name == sym::main {\n-                if at_root {\n-                    // This is a top-level function so can be `main`.\n-                    EntryPointType::MainNamed\n-                } else {\n-                    EntryPointType::OtherMain\n-                }\n-            } else {\n-                EntryPointType::None\n-            }\n+    if sess.contains_name(&item.attrs, sym::start) {\n+        EntryPointType::Start\n+    } else if sess.contains_name(&item.attrs, sym::main) {\n+        EntryPointType::MainAttr\n+    } else if item.ident.name == sym::main {\n+        if at_root {\n+            // This is a top-level function so can be `main`.\n+            EntryPointType::MainNamed\n+        } else {\n+            EntryPointType::OtherMain\n         }\n-        _ => EntryPointType::None,\n+    } else {\n+        EntryPointType::None\n     }\n }\n \n+fn throw_attr_err(sess: &Session, span: Span, attr: &str) {\n+    sess.struct_span_err(span, &format!(\"`{}` attribute can only be used on functions\", attr))\n+        .emit();\n+}\n+\n fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n     match entry_point_type(&ctxt.session, item, at_root) {\n+        EntryPointType::None => (),\n+        _ if !matches!(item.kind, ItemKind::Fn(..)) => {\n+            if let Some(attr) = ctxt.session.find_by_name(item.attrs, sym::start) {\n+                throw_attr_err(&ctxt.session, attr.span, \"start\");\n+            }\n+            if let Some(attr) = ctxt.session.find_by_name(item.attrs, sym::main) {\n+                throw_attr_err(&ctxt.session, attr.span, \"main\");\n+            }\n+        }\n         EntryPointType::MainNamed => {\n             if ctxt.main_fn.is_none() {\n                 ctxt.main_fn = Some((item.hir_id, item.span));\n@@ -137,7 +146,6 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                     .emit();\n             }\n         }\n-        EntryPointType::None => (),\n     }\n }\n "}, {"sha": "e3cf6d12bd5eb28191ba05d12ce9fe5522e1a599", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -469,7 +469,7 @@ impl<'a> Resolver<'a> {\n             ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n                 let mut err = self.session.struct_span_err(\n                     span,\n-                    \"generic parameters must not be used inside of non trivial constant values\",\n+                    \"generic parameters must not be used inside of non-trivial constant values\",\n                 );\n                 err.span_label(\n                     span,"}, {"sha": "fe8f592638594a643a99340c953cd65efbbfe5e7", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -218,7 +218,7 @@ enum ResolutionError<'a> {\n     ParamInTyOfConstParam(Symbol),\n     /// constant values inside of type parameter defaults must not depend on generic parameters.\n     ParamInAnonConstInTyDefault(Symbol),\n-    /// generic parameters must not be used inside of non trivial constant values.\n+    /// generic parameters must not be used inside of non-trivial constant values.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n     ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },"}, {"sha": "3e899e00d11f1dae0e67eb6e4d93f0768726e26e", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -518,7 +518,7 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![macro_export]\n+    /// #![ignore]\n     /// ```\n     ///\n     /// {{produces}}"}, {"sha": "406e8936e6ecfcfc67aa40461693229ca658338d", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -11,6 +11,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(array_value_iter)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]"}, {"sha": "967374ffdc2c01f5ce541d45a07465d0822f7065", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1907,6 +1907,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::BuiltinDerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(&data.parent_trait_ref);\n                 let ty = parent_trait_ref.skip_binder().self_ty();\n+                if parent_trait_ref.references_error() {\n+                    err.cancel();\n+                    return;\n+                }\n+\n                 err.note(&format!(\"required because it appears within the type `{}`\", ty));\n                 obligated_types.push(ty);\n "}, {"sha": "8fc14cb29971d1c1c698bc91bcd94e8c5fcb03f4", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -24,6 +24,7 @@ use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use smallvec::SmallVec;\n \n+use std::array;\n use std::iter;\n \n pub use crate::traits::{MethodViolationCode, ObjectSafetyViolation};\n@@ -652,8 +653,7 @@ fn receiver_is_dispatchable<'tcx>(\n         let caller_bounds: Vec<Predicate<'tcx>> = param_env\n             .caller_bounds()\n             .iter()\n-            .chain(iter::once(unsize_predicate))\n-            .chain(iter::once(trait_predicate))\n+            .chain(array::IntoIter::new([unsize_predicate, trait_predicate]))\n             .collect();\n \n         ty::ParamEnv::new(tcx.intern_predicates(&caller_bounds), param_env.reveal())"}, {"sha": "b867798c76cf77f0a7cb95c1c0d1e74193896516", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -562,7 +562,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .args\n                 .iter()\n                 .filter_map(|arg| match arg {\n-                    GenericArg::Type(_) => Some(arg.span()),\n+                    GenericArg::Type(_) | GenericArg::Const(_) => Some(arg.span()),\n                     _ => None,\n                 })\n                 .collect::<Vec<_>>();"}, {"sha": "170ca2ce744cd94f66ce5cad8ac1178fd71b0031", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -35,8 +35,8 @@ use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n use rustc_trait_selection::traits::wf::object_region_bounds;\n \n use smallvec::SmallVec;\n+use std::array;\n use std::collections::BTreeSet;\n-use std::iter;\n use std::slice;\n \n #[derive(Debug)]\n@@ -1346,7 +1346,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             debug!(\"one_bound_for_assoc_type: bound2 = {:?}\", bound2);\n \n             let is_equality = is_equality();\n-            let bounds = iter::once(bound).chain(iter::once(bound2)).chain(matching_candidates);\n+            let bounds = array::IntoIter::new([bound, bound2]).chain(matching_candidates);\n             let mut err = if is_equality.is_some() {\n                 // More specific Error Index entry.\n                 struct_span_err!("}, {"sha": "1f4f40fca9be33dbb161b01273f8e3d84c410465", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -222,6 +222,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                 hir::GenericParamKind::Const { .. } => {\n                     let def_id = self.tcx.hir().local_def_id(param.hir_id);\n                     self.tcx.ensure().type_of(def_id);\n+                    // FIXME(const_generics:defaults)\n                 }\n             }\n         }"}, {"sha": "7efda54fbe035a697b046d6ec27e442dbba6d008", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -56,6 +56,7 @@ This API is completely unstable and subject to change.\n */\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(array_value_iter)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "880627e94c33469af7f49d4057af509876d420e7", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -9,11 +9,8 @@\n // struct Node<K, V, height: usize> {\n //     keys: [K; 2 * B - 1],\n //     vals: [V; 2 * B - 1],\n-//     edges: if height > 0 {\n-//         [Box<Node<K, V, height - 1>>; 2 * B]\n-//     } else { () },\n-//     parent: Option<NonNull<Node<K, V, height + 1>>>,\n-//     parent_idx: u16,\n+//     edges: [if height > 0 { Box<Node<K, V, height - 1>> } else { () }; 2 * B],\n+//     parent: Option<(NonNull<Node<K, V, height + 1>>, u16)>,\n //     len: u16,\n // }\n // ```\n@@ -28,8 +25,8 @@\n //\n // - Trees must have uniform depth/height. This means that every path down to a leaf from a\n //   given node has exactly the same length.\n-// - A node of length `n` has `n` keys, `n` values, and (in an internal node) `n + 1` edges.\n-//   This implies that even an empty internal node has at least one edge.\n+// - A node of length `n` has `n` keys, `n` values, and `n + 1` edges.\n+//   This implies that even an empty node has at least one edge.\n \n use core::cmp::Ordering;\n use core::marker::PhantomData;\n@@ -298,9 +295,8 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n-    /// Finds the length of the node. This is the number of keys or values. In an\n-    /// internal node, the number of edges is `len() + 1`.\n-    /// For any node, the number of possible edge handles is also `len() + 1`.\n+    /// Finds the length of the node. This is the number of keys or values.\n+    /// The number of edges is `len() + 1`.\n     /// Note that, despite being safe, calling this function can have the side effect\n     /// of invalidating mutable references that unsafe code has created.\n     pub fn len(&self) -> usize {\n@@ -321,9 +317,6 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     }\n \n     /// Exposes the leaf portion of any leaf or internal node.\n-    /// If the node is a leaf, this function simply opens up its data.\n-    /// If the node is an internal node, so not a leaf, it does have all the data a leaf has\n-    /// (header, keys and values), and this function exposes that.\n     ///\n     /// Returns a raw ptr to avoid invalidating other references to this node,\n     /// which is possible when BorrowType is marker::ValMut.\n@@ -471,9 +464,6 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n \n     /// Exposes the leaf portion of any leaf or internal node for writing.\n-    /// If the node is a leaf, this function simply opens up its data.\n-    /// If the node is an internal node, so not a leaf, it does have all the data a leaf has\n-    /// (header, keys and values), and this function exposes that.\n     ///\n     /// We don't need to return a raw ptr because we have unique access to the entire node.\n     fn as_leaf_mut(&mut self) -> &'a mut LeafNode<K, V> {\n@@ -484,15 +474,15 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     ///\n     /// # Safety\n     /// The node has more than `idx` initialized elements.\n-    pub unsafe fn key_mut_at(&mut self, idx: usize) -> &mut K {\n+    unsafe fn key_mut_at(&mut self, idx: usize) -> &mut K {\n         unsafe { self.reborrow_mut().into_key_mut_at(idx) }\n     }\n \n     /// Borrows a mutable reference to one of the values stored in the node.\n     ///\n     /// # Safety\n     /// The node has more than `idx` initialized elements.\n-    pub unsafe fn val_mut_at(&mut self, idx: usize) -> &mut V {\n+    unsafe fn val_mut_at(&mut self, idx: usize) -> &mut V {\n         unsafe { self.reborrow_mut().into_val_mut_at(idx) }\n     }\n \n@@ -655,7 +645,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n \n     /// Adds a key/value pair, and an edge to go to the left of that pair,\n     /// to the beginning of the node.\n-    pub fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) {\n+    fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) {\n         assert!(edge.height == self.height - 1);\n         assert!(self.len() < CAPACITY);\n \n@@ -679,9 +669,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Removes a key/value pair from the end of this node and returns the pair.\n-    /// If this is an internal node, also removes the edge that was to the right\n-    /// of that pair and returns the orphaned node that this edge owned.\n+    /// Removes a key/value pair from the end of the node and returns the pair.\n+    /// Also removes the edge that was to the right of that pair and, if the node\n+    /// is internal, returns the orphaned subtree that this edge owned.\n     fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n         debug_assert!(self.len() > 0);\n \n@@ -705,9 +695,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n         }\n     }\n \n-    /// Removes a key/value pair from the beginning of this node and returns the pair.\n-    /// If this is an internal node, also removes the edge that was to the left\n-    /// of that pair and returns the orphaned node that this edge owned.\n+    /// Removes a key/value pair from the beginning of the node and returns the pair.\n+    /// Also removes the edge that was to the left of that pair and, if the node is\n+    /// internal, returns the orphaned subtree that this edge owned.\n     fn pop_front(&mut self) -> (K, V, Option<Root<K, V>>) {\n         debug_assert!(self.len() > 0);\n \n@@ -1011,18 +1001,18 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n             let (middle_kv_idx, insertion) = splitpoint(self.idx);\n             let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };\n             let (mut left, k, v, mut right) = middle.split();\n-            match insertion {\n+            let mut insertion_edge = match insertion {\n                 InsertionPlace::Left(insert_idx) => unsafe {\n-                    Handle::new_edge(left.reborrow_mut(), insert_idx).insert_fit(key, val, edge);\n+                    Handle::new_edge(left.reborrow_mut(), insert_idx)\n                 },\n                 InsertionPlace::Right(insert_idx) => unsafe {\n                     Handle::new_edge(\n                         right.node_as_mut().cast_unchecked::<marker::Internal>(),\n                         insert_idx,\n                     )\n-                    .insert_fit(key, val, edge);\n                 },\n-            }\n+            };\n+            insertion_edge.insert_fit(key, val, edge);\n             InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right })\n         }\n     }"}, {"sha": "adb08543334f00426ee3258053cd5d4b87d3933a", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -9,10 +9,11 @@\n \n // ignore-tidy-filelength\n \n+use core::array;\n use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n-use core::iter::{once, repeat_with, FromIterator, FusedIterator};\n+use core::iter::{repeat_with, FromIterator, FusedIterator};\n use core::mem::{self, replace, ManuallyDrop};\n use core::ops::{Index, IndexMut, Range, RangeBounds, Try};\n use core::ptr::{self, NonNull};\n@@ -99,7 +100,7 @@ impl<'a, 'b, T> PairSlices<'a, 'b, T> {\n     }\n \n     fn remainder(self) -> impl Iterator<Item = &'b [T]> {\n-        once(self.b0).chain(once(self.b1))\n+        array::IntoIter::new([self.b0, self.b1])\n     }\n }\n "}, {"sha": "046c3867d840328d2f1b25b267f33869f47f2cb6", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -77,6 +77,7 @@\n #![cfg_attr(test, feature(new_uninit))]\n #![feature(allocator_api)]\n #![feature(array_chunks)]\n+#![feature(array_value_iter)]\n #![feature(array_windows)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]"}, {"sha": "54772ebb523a3a0d8ec2743ef285b24cb63daa15", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -102,7 +102,7 @@ pub struct Error;\n /// library. The [`write!`] macro accepts an instance of [`io::Write`], and the\n /// [`io::Write`] trait is favored over implementing this trait.\n ///\n-/// [`write!`]: ../../std/macro.write.html\n+/// [`write!`]: crate::write!\n /// [`io::Write`]: ../../std/io/trait.Write.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Write {\n@@ -1058,7 +1058,7 @@ pub trait UpperExp {\n /// assert_eq!(output, \"Hello world!\");\n /// ```\n ///\n-/// [`write!`]: ../../std/macro.write.html\n+/// [`write!`]: crate::write!\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     let mut formatter = Formatter {\n@@ -1886,7 +1886,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"{10, 11}\");\n     /// ```\n     ///\n-    /// [`format_args!`]: ../../std/macro.format_args.html\n+    /// [`format_args!`]: crate::format_args\n     ///\n     /// In this more complex example, we use [`format_args!`] and `.debug_set()`\n     /// to build a list of match arms:"}, {"sha": "4c62c16f5063c113720a8cc98cc522550d03917c", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1365,6 +1365,8 @@ pub(crate) mod builtin {\n     }\n \n     /// Attribute macro applied to a static to register it as a global allocator.\n+    ///\n+    /// See also [`std::alloc::GlobalAlloc`](../std/alloc/trait.GlobalAlloc.html).\n     #[stable(feature = \"global_allocator\", since = \"1.28.0\")]\n     #[allow_internal_unstable(rustc_attrs)]\n     #[rustc_builtin_macro]"}, {"sha": "63de87128340f38d4cb9ae01a63788dcdd8122ff", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -623,19 +623,27 @@ impl fmt::Display for SocketAddrV6 {\n         // Fast path: if there's no alignment stuff, write to the output\n         // buffer directly\n         if f.precision().is_none() && f.width().is_none() {\n-            write!(f, \"[{}]:{}\", self.ip(), self.port())\n+            match self.scope_id() {\n+                0 => write!(f, \"[{}]:{}\", self.ip(), self.port()),\n+                scope_id => write!(f, \"[{}%{}]:{}\", self.ip(), scope_id, self.port()),\n+            }\n         } else {\n             const IPV6_SOCKET_BUF_LEN: usize = (4 * 8)  // The address\n             + 7  // The colon separators\n             + 2  // The brackets\n+            + 1 + 10 // The scope id\n             + 1 + 5; // The port\n \n             let mut buf = [0; IPV6_SOCKET_BUF_LEN];\n             let mut buf_slice = &mut buf[..];\n \n+            match self.scope_id() {\n+                0 => write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()),\n+                scope_id => write!(buf_slice, \"[{}%{}]:{}\", self.ip(), scope_id, self.port()),\n+            }\n             // Unwrap is fine because writing to a sufficiently-sized\n             // buffer is infallible\n-            write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()).unwrap();\n+            .unwrap();\n             let len = IPV6_SOCKET_BUF_LEN - buf_slice.len();\n \n             // This unsafe is OK because we know what is being written to the buffer"}, {"sha": "43f965de25e65d2f1ef8a7bc4dc9fd5cabc1959b", "filename": "library/std/src/net/addr/tests.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Ftests.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -178,13 +178,21 @@ fn socket_v4_to_str() {\n \n #[test]\n fn socket_v6_to_str() {\n-    let socket: SocketAddrV6 = \"[2a02:6b8:0:1::1]:53\".parse().unwrap();\n+    let mut socket = SocketAddrV6::new(Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), 53, 0, 0);\n \n     assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1]:53\");\n     assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1]:53    \");\n     assert_eq!(format!(\"{:>24}\", socket), \"    [2a02:6b8:0:1::1]:53\");\n     assert_eq!(format!(\"{:^24}\", socket), \"  [2a02:6b8:0:1::1]:53  \");\n     assert_eq!(format!(\"{:.15}\", socket), \"[2a02:6b8:0:1::\");\n+\n+    socket.set_scope_id(5);\n+\n+    assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1%5]:53\");\n+    assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1%5]:53  \");\n+    assert_eq!(format!(\"{:>24}\", socket), \"  [2a02:6b8:0:1::1%5]:53\");\n+    assert_eq!(format!(\"{:^24}\", socket), \" [2a02:6b8:0:1::1%5]:53 \");\n+    assert_eq!(format!(\"{:.18}\", socket), \"[2a02:6b8:0:1::1%5\");\n }\n \n #[test]"}, {"sha": "c87476d8f58b85c5b5964cf9e428e77397637fa0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -477,7 +477,7 @@ impl<'a> Builder<'a> {\n                 install::Src,\n                 install::Rustc\n             ),\n-            Kind::Run => describe!(run::ExpandYamlAnchors,),\n+            Kind::Run => describe!(run::ExpandYamlAnchors, run::BuildManifest,),\n         }\n     }\n "}, {"sha": "857e06d846de4b52ce5be2a9d17e00f5b38c2934", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -46,7 +46,7 @@ pub fn pkgname(builder: &Builder<'_>, component: &str) -> String {\n     }\n }\n \n-fn distdir(builder: &Builder<'_>) -> PathBuf {\n+pub(crate) fn distdir(builder: &Builder<'_>) -> PathBuf {\n     builder.out.join(\"dist\")\n }\n \n@@ -2371,6 +2371,7 @@ impl Step for HashSign {\n         cmd.arg(addr);\n         cmd.arg(&builder.config.channel);\n         cmd.arg(&builder.src);\n+        cmd.env(\"BUILD_MANIFEST_LEGACY\", \"1\");\n \n         builder.create_dir(&distdir(builder));\n "}, {"sha": "80c093e713eff8619d427c5ec2872b5a6b0c9e27", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,5 +1,7 @@\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use crate::dist::distdir;\n use crate::tool::Tool;\n+use build_helper::output;\n use std::process::Command;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n@@ -41,3 +43,43 @@ fn try_run(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     }\n     true\n }\n+\n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct BuildManifest;\n+\n+impl Step for BuildManifest {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/build-manifest\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(BuildManifest);\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        // This gets called by `promote-release`\n+        // (https://github.com/rust-lang/promote-release).\n+        let mut cmd = builder.tool_cmd(Tool::BuildManifest);\n+        let sign = builder.config.dist_sign_folder.as_ref().unwrap_or_else(|| {\n+            panic!(\"\\n\\nfailed to specify `dist.sign-folder` in `config.toml`\\n\\n\")\n+        });\n+        let addr = builder.config.dist_upload_addr.as_ref().unwrap_or_else(|| {\n+            panic!(\"\\n\\nfailed to specify `dist.upload-addr` in `config.toml`\\n\\n\")\n+        });\n+\n+        let today = output(Command::new(\"date\").arg(\"+%Y-%m-%d\"));\n+\n+        cmd.arg(sign);\n+        cmd.arg(distdir(builder));\n+        cmd.arg(today.trim());\n+        cmd.arg(addr);\n+        cmd.arg(&builder.config.channel);\n+        cmd.arg(&builder.src);\n+\n+        builder.create_dir(&distdir(builder));\n+        builder.run(&mut cmd);\n+    }\n+}"}, {"sha": "309d0bc4d43030cef50455fbc79d8d59fa076ef5", "filename": "src/test/rustdoc-ui/doc-alias-crate-level.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,6 @@\n+#![feature(doc_alias)]\n+\n+#![doc(alias = \"crate-level-not-working\")] //~ ERROR\n+\n+#[doc(alias = \"shouldn't work!\")] //~ ERROR\n+pub fn foo() {}"}, {"sha": "fc14266cd714c608a5d1ca3f49e418ab7dd2e3d7", "filename": "src/test/rustdoc-ui/doc-alias-crate-level.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-alias-crate-level.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,14 @@\n+error: '\\'' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/doc-alias-crate-level.rs:5:7\n+   |\n+LL | #[doc(alias = \"shouldn't work!\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#![doc(alias = \"...\")]` isn't allowed as a crate level attribute\n+  --> $DIR/doc-alias-crate-level.rs:3:8\n+   |\n+LL | #![doc(alias = \"crate-level-not-working\")]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0fc45513cd78a32a2547f65217cb456cf3f30db8", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/array-size-in-generic-struct-param.rs:9:48\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                                ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/array-size-in-generic-struct-param.rs:20:15\n    |\n LL |     arr: [u8; CFG.arr_size],"}, {"sha": "dd45b6ed278e8cca74fb7c03f08b0e89a08e1868", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -8,7 +8,7 @@\n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n #[derive(PartialEq, Eq)]\n struct Config {\n@@ -19,7 +19,7 @@ struct B<const CFG: Config> {\n     //[min]~^ ERROR `Config` is forbidden\n     arr: [u8; CFG.arr_size],\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n }\n \n const C: Config = Config { arr_size: 5 };"}, {"sha": "9b1c1be1aa09b625221b7f71c4655b598ae8057c", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,42 @@\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:8:28\n+   |\n+LL | pub const fn is_zst<T: ?Sized>() -> usize {\n+   |                     - this type parameter needs to be `Sized`\n+LL |     if std::mem::size_of::<T>() == 0 {\n+   |                            ^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-argument-if-length.rs:19:15\n+   |\n+LL |     pad: [u8; is_zst::<T>()],\n+   |               ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:17:12\n+   |\n+LL | pub struct AtLeastByte<T: ?Sized> {\n+   |                        - this type parameter needs to be `Sized`\n+LL |     value: T,\n+   |            ^ doesn't have a size known at compile-time\n+   |\n+   = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0080, E0277.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "c666dce479f65318c175271c34bbf48ceda649d8", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,30 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/const-argument-if-length.rs:19:24\n+   |\n+LL |     pad: [u8; is_zst::<T>()],\n+   |                        ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:17:12\n+   |\n+LL | pub struct AtLeastByte<T: ?Sized> {\n+   |                        - this type parameter needs to be `Sized`\n+LL |     value: T,\n+   |            ^ doesn't have a size known at compile-time\n+   |\n+   = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "481ff97d68dbe02f1f2a1068dcdf65f876a65ea5", "filename": "src/test/ui/const-generics/const-argument-if-length.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,24 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+pub const fn is_zst<T: ?Sized>() -> usize {\n+    if std::mem::size_of::<T>() == 0 {\n+        //[full]~^ ERROR the size for values of type `T` cannot be known at compilation time\n+        1\n+    } else {\n+        0\n+    }\n+}\n+\n+pub struct AtLeastByte<T: ?Sized> {\n+    value: T,\n+    //~^ ERROR the size for values of type `T` cannot be known at compilation time\n+    pad: [u8; is_zst::<T>()],\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ ERROR evaluation of constant value failed\n+}\n+\n+fn main() {}"}, {"sha": "4b3235fd08783f6fde9b56a857216bff06c673da", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/feature-gate-const_evaluatable_checked.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];"}, {"sha": "d552e0f543080a7ffe4d8cc8c39843d597d68bd0", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -4,7 +4,7 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n type Arr<const N: usize> = [u8; N - 1];\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n     //[full]~^ ERROR constant expression depends"}, {"sha": "85a15b1e75fdcc5feaf82c222a25256178b4316c", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/simple.rs:8:53\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/simple.rs:8:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {"}, {"sha": "2eac9505624dd23a70f34ea92631cf2943329958", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/simple_fail.rs:7:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];"}, {"sha": "637c940f7143270fda540d5b1fc994c7716f5209", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -5,7 +5,7 @@\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1]; //[full]~ ERROR evaluation of constant\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n     todo!()"}, {"sha": "43b42d82d0c45908219029b6fcbeeacc725561d6", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/generic-function-call-in-array-length.rs:9:29\n+   |\n+LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n+   |                             ^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "e7e968e4c2ad26b6b8e83f6f31a168eae98868ec", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-function-call-in-array-length.rs:9:39\n+   |\n+LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n+   |                                       ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-function-call-in-array-length.rs:12:13\n+   |\n+LL |     [0; foo(N)]\n+   |             ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c8bbae29343dc094e5695ef6532befaa65e57fdf", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,16 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+const fn foo(n: usize) -> usize { n * 2 }\n+\n+fn bar<const N: usize>() -> [u32; foo(N)] {\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ ERROR constant expression depends on a generic parameter\n+    [0; foo(N)]\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+}\n+\n+fn main() {}"}, {"sha": "d311e1c0bae01c362d61f5cb509dd7ac3e34447e", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/generic-sum-in-array-length.rs:7:45\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                             ^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "6f157fbbbbb8ad961e19affde48b587ab6da8961", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-sum-in-array-length.rs:7:53\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                                     ^ non-trivial anonymous constants must not depend on the parameter `A`\n+   |\n+   = help: it is currently only allowed to use either `A` or `{ A }` as generic constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/generic-sum-in-array-length.rs:7:57\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                                         ^ non-trivial anonymous constants must not depend on the parameter `B`\n+   |\n+   = help: it is currently only allowed to use either `B` or `{ B }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "810095b384baa3ee5ab46372264aada3268a37c7", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,12 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n+//[full]~^^^ ERROR constant expression depends on a generic parameter\n+\n+fn main() {}"}, {"sha": "a587cb618731a015897b5bb414414ec084f1779c", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.full.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,8 @@\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+  --> $DIR/impl-trait-with-const-arguments.rs:24:20\n+   |\n+LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n+   |                    ^^^^^^ explicit generic argument not allowed\n+\n+error: aborting due to previous error\n+"}, {"sha": "a587cb618731a015897b5bb414414ec084f1779c", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,8 @@\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+  --> $DIR/impl-trait-with-const-arguments.rs:24:20\n+   |\n+LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n+   |                    ^^^^^^ explicit generic argument not allowed\n+\n+error: aborting due to previous error\n+"}, {"sha": "a4c75792ee359bb71ec2494a36f00115b599d23b", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,26 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+trait Usizer {\n+    fn m(self) -> usize;\n+}\n+\n+fn f<const N: usize>(u: impl Usizer) -> usize {\n+    N + u.m()\n+}\n+\n+struct Usizable;\n+\n+impl Usizer for Usizable {\n+    fn m(self) -> usize {\n+        16\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(f::<4usize>(Usizable), 20usize);\n+//~^ ERROR cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+}"}, {"sha": "c09d16d0ab05b86f9e95b935b550236174ef50f7", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:15:8\n+   |\n+LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "307db088bf892a153c71cb7a63f72b990dd7cbb6", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,19 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:15:44\n+   |\n+LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n+   |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: `&'static str` is forbidden as the type of a const generic parameter\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22\n+   |\n+LL | trait Trait<const S: &'static str> {}\n+   |                      ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "37b6cf4bab92bf9f57ea4c91316d4f04729a6a1d", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,22 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+#![feature(core_intrinsics)]\n+#![feature(const_type_name)]\n+\n+trait Trait<const S: &'static str> {}\n+//[min]~^ ERROR `&'static str` is forbidden as the type of a const generic parameter\n+\n+struct Bug<T>\n+where\n+    T: Trait<{std::intrinsics::type_name::<T>()}>\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ ERROR constant expression depends on a generic parameter\n+{\n+    t: T\n+}\n+\n+fn main() {}"}, {"sha": "2c1bc055b28ae85ea17a4d48c8f4168cae4e880c", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61522-array-len-succ.rs:7:45\n    |\n LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                             ^^^^^ non-trivial anonymous constants must not depend on the parameter `COUNT`\n    |\n    = help: it is currently only allowed to use either `COUNT` or `{ COUNT }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61522-array-len-succ.rs:12:30\n    |\n LL |     fn inner(&self) -> &[u8; COUNT + 1] {"}, {"sha": "e15d65f197e29b47301bf9913009528bbee7cde2", "filename": "src/test/ui/const-generics/issue-67375.full.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,21 @@\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/issue-67375.rs:9:12\n+   |\n+LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/issue-67375.rs:7:12\n+   |\n+LL | struct Bug<T> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "b13d9fdab0d965ec8bad47044dfbbf2c9d22cd56", "filename": "src/test/ui/const-generics/issue-67375.min.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,19 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67375.rs:9:25\n+   |\n+LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n+   |                         ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/issue-67375.rs:7:12\n+   |\n+LL | struct Bug<T> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "994ec92cfb501b4135cdd96690559eb0503f899c", "filename": "src/test/ui/const-generics/issue-67375.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,15 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct Bug<T> {\n+    //~^ ERROR parameter `T` is never used\n+    inner: [(); { [|_: &T| {}; 0].len() }],\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[full]~^^ WARN cannot use constants which depend on generic parameters in types\n+    //[full]~^^^ WARN this was previously accepted by the compiler\n+}\n+\n+fn main() {}"}, {"sha": "e79c4f5374e1a511e16cc32f0c7d0a903b640e7c", "filename": "src/test/ui/const-generics/issue-67945-1.full.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,26 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67945-1.rs:14:20\n+   |\n+LL | struct Bug<S> {\n+   |            - this type parameter\n+...\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found union `MaybeUninit`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected type parameter `S`\n+                       found union `MaybeUninit<_>`\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-1.rs:11:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0392.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "949b5da5920b1669a06d5bbb36bf496dd9c077d8", "filename": "src/test/ui/const-generics/issue-67945-1.min.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,27 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-1.rs:14:16\n+   |\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-1.rs:17:45\n+   |\n+LL |         let b = &*(&x as *const _ as *const S);\n+   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-1.rs:11:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "d1a83e978d1b8243276fd389235c6da931cd097c", "filename": "src/test/ui/const-generics/issue-67945-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,23 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+use std::marker::PhantomData;\n+\n+use std::mem::{self, MaybeUninit};\n+\n+struct Bug<S> {\n+    //~^ ERROR parameter `S` is never used\n+    A: [(); {\n+        let x: S = MaybeUninit::uninit();\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[full]~^^ ERROR mismatched types\n+        let b = &*(&x as *const _ as *const S);\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        0\n+    }],\n+}\n+\n+fn main() {}"}, {"sha": "2f54b802df8a497d73bca082bb05452056796066", "filename": "src/test/ui/const-generics/issue-67945-2.full.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,26 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67945-2.rs:12:20\n+   |\n+LL | struct Bug<S> {\n+   |            - this type parameter\n+...\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found union `MaybeUninit`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected type parameter `S`\n+                       found union `MaybeUninit<_>`\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-2.rs:9:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0392.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "ed445b3e8f7909d94d7237db7669ab61132555b1", "filename": "src/test/ui/const-generics/issue-67945-2.min.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,27 @@\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-2.rs:12:16\n+   |\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: generic parameters must not be used inside of non-trivial constant values\n+  --> $DIR/issue-67945-2.rs:15:45\n+   |\n+LL |         let b = &*(&x as *const _ as *const S);\n+   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-2.rs:9:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "7f789297df0342663baabc7c670be306381ec62b", "filename": "src/test/ui/const-generics/issue-67945-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,21 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+use std::mem::MaybeUninit;\n+\n+struct Bug<S> {\n+    //~^ ERROR parameter `S` is never used\n+    A: [(); {\n+        let x: S = MaybeUninit::uninit();\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[full]~^^ ERROR mismatched types\n+        let b = &*(&x as *const _ as *const S);\n+        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        0\n+    }],\n+}\n+\n+fn main() {}"}, {"sha": "c33b88588c0d0cf2dd19c0eba2669275a318493c", "filename": "src/test/ui/const-generics/issue-67945-3.full.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.full.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,16 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-67945-3.rs:8:8\n+   |\n+LL |       A: [(); {\n+   |  ________^\n+LL | |\n+LL | |         let x: Option<Box<Self>> = None;\n+LL | |\n+LL | |         0\n+LL | |     }],\n+   | |______^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "9c6e101ece868dc40d18a23a2f37282c8f602d5e", "filename": "src/test/ui/const-generics/issue-67945-3.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,8 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/issue-67945-3.rs:10:27\n+   |\n+LL |         let x: Option<Box<Self>> = None;\n+   |                           ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "bca079101e2b30a08f2d964777e6d3df8d7f5d85", "filename": "src/test/ui/const-generics/issue-67945-3.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,17 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct Bug<S: ?Sized> {\n+    A: [(); {\n+        //[full]~^ ERROR constant expression depends on a generic parameter\n+        let x: Option<Box<Self>> = None;\n+        //[min]~^ ERROR generic `Self` types are currently not permitted in anonymous constants\n+        0\n+    }],\n+    B: S\n+}\n+\n+fn main() {}"}, {"sha": "fdd9a569748e262745980e5063bb2fefdecf4e6a", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61747.rs:8:30\n    |\n LL |     fn successor() -> Const<{C + 1}> {"}, {"sha": "f461a31eeae3a86c1ada139e52fcbf8027b00b0a", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61935.rs:10:23\n    |\n LL |         Self:FooImpl<{N==0}>"}, {"sha": "a181a8dabe5aab320991c36e1e544cfbcf043e95", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -9,7 +9,7 @@ impl<const N: usize> Foo for [(); N]\n     where\n         Self:FooImpl<{N==0}>\n //[full]~^ERROR constant expression depends on a generic parameter\n-//[min]~^^ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ERROR generic parameters must not be used inside of non-trivial constant values\n {}\n \n trait FooImpl<const IS_ZERO: bool>{}"}, {"sha": "84975e8f3be6b96a30e5111d12bbbbccb5577b1f", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-62220.rs:8:59\n    |\n LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;"}, {"sha": "5694dc6d04da17cce4f033c02abfcd72b2bf609f", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -6,7 +6,7 @@\n pub struct Vector<T, const N: usize>([T; N]);\n \n pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n impl<T, const N: usize> Vector<T, { N }> {\n     /// Drop the last component and return the vector with one fewer dimension."}, {"sha": "f94ba8c0c9b87b43f3ccebd3732f048f5ed86c92", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-62456.rs:7:20\n    |\n LL |     let _ = [0u64; N + 1];"}, {"sha": "338ec42799d1759a03fb5f829416cc8ac6520936", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -6,7 +6,7 @@\n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "f712171bbac615b9ff00556bc1788ce7e5567f05", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-64494.rs:16:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n    |\n    = note: type parameters are currently not permitted in anonymous constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-64494.rs:19:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}"}, {"sha": "b62ebf846d5b1d6220527f7f6d5164dbbbbc67ea", "filename": "src/test/ui/const-generics/issues/issue-64494.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -15,10 +15,10 @@ impl True for Is<{true}> {}\n \n impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n //[min]~| ERROR conflicting implementations of trait `MyTrait`\n \n fn main() {}"}, {"sha": "a18126ccfef6d12dabc89619f369e5427a6d2d85", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-66205.rs:8:14\n    |\n LL |     fact::<{ N - 1 }>();"}, {"sha": "668f49852e1ef1170f3a149874fa7e6173083080", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -7,7 +7,7 @@\n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "ba378de4156540b0b1ab90bfb58c21fd5b29f547", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-67739.rs:12:30\n    |\n LL |         [0u8; mem::size_of::<Self::Associated>()];"}, {"sha": "296e4d423c48a246a9ec46f74a8e49db4eaa6dc7", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -11,7 +11,7 @@ pub trait Trait {\n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+        //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n         0\n     }\n }"}, {"sha": "73d6fec6f9b565609a09e3c9353b5c671ed56a14", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-68366.rs:12:37\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}"}, {"sha": "ac313eb3b2ff3a10cca570915fdf85c3360a92ad", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -11,7 +11,7 @@ struct Collatz<const N: Option<usize>>;\n \n impl <const N: usize> Collatz<{Some(N)}> {}\n //~^ ERROR the const parameter\n-//[min]~^^ generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ generic parameters must not be used inside of non-trivial constant values\n \n struct Foo;\n "}, {"sha": "59d2be3ce4b42a9cb1819b1299f369cb5f276ddf", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-68977.rs:29:17\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                 ^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `INT_BITS`\n    |\n    = help: it is currently only allowed to use either `INT_BITS` or `{ INT_BITS }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-68977.rs:29:28\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;"}, {"sha": "49b305a5a783f62a7203e23980872d422781eff0", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -27,8 +27,8 @@ fxp_storage_impls! {\n \n type FxpStorageHelper<const INT_BITS: u8, const FRAC_BITS: u8> =\n     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-    //[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n-    //[min]~| ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n \n struct Fxp<const INT_BITS: u8, const FRAC_BITS: u8>\n where"}, {"sha": "a4c80b1d8c01e29cfdefbc9d56949e41889737ed", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,28 +1,28 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:11:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ non-trivial anonymous constants must not depend on the parameter `LHS`\n    |\n    = help: it is currently only allowed to use either `LHS` or `{ LHS }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:11:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ non-trivial anonymous constants must not depend on the parameter `RHS`\n    |\n    = help: it is currently only allowed to use either `RHS` or `{ RHS }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:26:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ non-trivial anonymous constants must not depend on the parameter `I`\n    |\n    = help: it is currently only allowed to use either `I` or `{ I }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:26:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,"}, {"sha": "779c1d2950e4d510cc10d1bbba5430ef53ee2d96", "filename": "src/test/ui/const-generics/issues/issue-72787.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -10,8 +10,8 @@ pub trait True {}\n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n     Condition<{ LHS <= RHS }>: True\n //[full]~^ Error constant expression depends on a generic parameter\n-//[min]~^^ Error generic parameters must not be used inside of non trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n {\n }\n impl True for Condition<true> {}\n@@ -28,8 +28,8 @@ where\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n-//[min]~^^^^^ Error generic parameters must not be used inside of non trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non trivial constant values\n+//[min]~^^^^^ Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n     // Condition<{ 8 - I <= 8 - J }>: True,\n {\n     fn print() {"}, {"sha": "afc14c7dcff575af88eac6651b3d9d81d1cc843e", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n    |\n LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,"}, {"sha": "65c7f00a72ae5e20b2a686b530bf5779ea90ecc7", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -8,7 +8,7 @@\n struct Arr<const N: usize>\n where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n {\n }\n "}, {"sha": "0db948d0a45dba0785093ca95c96e86a9492188f", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-76701-ty-param-in-const.rs:6:46\n    |\n LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    |                                              ^ non-trivial anonymous constants must not depend on the parameter `T`\n    |\n    = note: type parameters are currently not permitted in anonymous constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n    |\n LL | fn const_param<const N: usize>() -> [u8; N + 1] {"}, {"sha": "3c5bfb03f080176b6e4b95b98ca56de88e182026", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -5,13 +5,13 @@\n \n fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n     todo!()\n }\n \n fn const_param<const N: usize>() -> [u8; N + 1] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n     todo!()\n }\n "}, {"sha": "c6380f6394d0195abb18f45667764141b9c26fca", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -7,19 +7,19 @@ fn ok<const M: usize>() -> [u8; M] {\n }\n \n struct Break0<const N: usize>([u8; { N + 1 }]);\n-//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n struct Break1<const N: usize>([u8; { { N } }]);\n-//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn break2<const N: usize>() {\n     let _: [u8; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn break3<const N: usize>() {\n     let _ = [0; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n trait Foo {"}, {"sha": "d8897f53d7f748d974a5183c5d9869c9bbc0f449", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,28 +1,28 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:9:38\n    |\n LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:12:40\n    |\n LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:16:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:21:17\n    |\n LL |     let _ = [0; N + 1];"}, {"sha": "7dc81bf45af9aeec284d9d3f9c46605e3950b3b3", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/self-ty-in-const-1.rs:4:41\n    |\n LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];"}, {"sha": "0ef17109bed40333528f57bc90f1cbb6181a53b5", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,8 @@\n+#![feature(min_const_generics)]\n+\n+fn a<const X: &'static [u32]>() {}\n+//~^ ERROR `&'static [u32]` is forbidden as the type of a const generic parameter\n+\n+fn main() {\n+    a::<{&[]}>();\n+}"}, {"sha": "cc32d8a67fed01fac7e9a9294be521b149d2606c", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,11 @@\n+error: `&'static [u32]` is forbidden as the type of a const generic parameter\n+  --> $DIR/static-reference-array-const-param.rs:3:15\n+   |\n+LL | fn a<const X: &'static [u32]>() {}\n+   |               ^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "dfa1ece2f36578df3095ed52b37a4bce8136f347", "filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,12 @@\n+#![feature(min_const_generics)]\n+\n+struct Const<const P: &'static ()>;\n+//~^ ERROR `&'static ()` is forbidden as the type of a const generic parameter\n+\n+fn main() {\n+    const A: &'static () = unsafe {\n+        std::mem::transmute(10 as *const ())\n+    };\n+\n+    let _ = Const::<{A}>;\n+}"}, {"sha": "063120ad074a0afe7c78a5e1d74d291c9926a330", "filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,11 @@\n+error: `&'static ()` is forbidden as the type of a const generic parameter\n+  --> $DIR/transmute-const-param-static-reference.rs:3:23\n+   |\n+LL | struct Const<const P: &'static ()>;\n+   |                       ^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0dd591d891f2b98a299ef2c6d55d2463f2f6c8f6", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -6,7 +6,7 @@ LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);"}, {"sha": "b9d74850f37d6ecb749c2240c79a473775722ceb", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -6,7 +6,7 @@\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n //[full]~^ ERROR constant values inside of type parameter defaults\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n \n // FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "1c52d6017499770a60c6f508007342f6a8239cad", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/wf-misc.rs:9:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/wf-misc.rs:17:21\n    |\n LL |     let _: Const::<{N + 1}>;"}, {"sha": "f8c41404c467b616d0ddadbb9094e6e0ab5de951", "filename": "src/test/ui/const-generics/wf-misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -8,15 +8,15 @@\n pub fn arr_len<const N: usize>() {\n     let _: [u8; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n }\n \n struct Const<const N: usize>;\n \n pub fn func_call<const N: usize>() {\n     let _: Const::<{N + 1}>;\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n }\n \n fn main() {}"}, {"sha": "b8b95dea1e77039b8903fb7cec7c7c784838b470", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,13 @@\n+#![feature(unwind_attributes, const_panic)]\n+\n+#[unwind(aborts)]\n+const fn foo() {\n+    panic!() //~ evaluation of constant value failed\n+}\n+\n+const _: () = foo(); //~ any use of this value will cause an error\n+// Ensure that the CTFE engine handles calls to `#[unwind(aborts)]` gracefully\n+\n+fn main() {\n+    let _ = foo();\n+}"}, {"sha": "084beb19eb934973d935748996464ff89ca113c7", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,21 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/unwind-abort.rs:5:5\n+   |\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: any use of this value will cause an error\n+  --> $DIR/unwind-abort.rs:8:15\n+   |\n+LL | const _: () = foo();\n+   | --------------^^^^^-\n+   |               |\n+   |               referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "f9011f908a75e90ae3cc0d875fb8fe6d0db48ec5", "filename": "src/test/ui/consts/unwind-abort.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funwind-abort.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+#![feature(unwind_attributes, const_panic)]\n+\n+// `#[unwind(aborts)]` is okay for a `const fn`. We don't unwind in const-eval anyways.\n+#[unwind(aborts)]\n+const fn foo() {\n+    panic!()\n+}\n+\n+const fn bar() {\n+    foo();\n+}\n+\n+fn main() {\n+    bar();\n+}"}, {"sha": "b1b17f2de8adf1d7fe251c78ae2acc4e973fcf5f", "filename": "src/test/ui/doc-alias-crate-level.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fdoc-alias-crate-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fdoc-alias-crate-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdoc-alias-crate-level.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -Zdeduplicate-diagnostics=no\n+\n+#![feature(doc_alias)]\n+\n+#![crate_type = \"lib\"]\n+\n+#![doc(alias = \"shouldn't work!\")] //~ ERROR"}, {"sha": "45756d6a04bd05b8318e6679649771eb46b3ad53", "filename": "src/test/ui/doc-alias-crate-level.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fdoc-alias-crate-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Fdoc-alias-crate-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdoc-alias-crate-level.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,8 @@\n+error: '\\'' character isn't allowed in `#[doc(alias = \"...\")]`\n+  --> $DIR/doc-alias-crate-level.rs:7:8\n+   |\n+LL | #![doc(alias = \"shouldn't work!\")]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6404b2c3115cbf023b3efe3e326834a5ca7ec5b3", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs-error.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,3 +1,6 @@\n+//~ NOTE: not an `extern crate` item\n+//~^ NOTE: not a function or static\n+//~^^ NOTE: not a function or closure\n // This is testing whether various builtin attributes signals an\n // error or warning when put in \"weird\" places.\n //\n@@ -7,9 +10,25 @@\n \n // ignore-tidy-linelength\n \n-// Crate-level is accepted, though it is almost certainly unused?\n+#![macro_export]\n+//~^ ERROR: `macro_export` attribute cannot be used at crate level\n+#![main]\n+//~^ ERROR: `main` attribute cannot be used at crate level\n+#![start]\n+//~^ ERROR: `start` attribute cannot be used at crate level\n+#![repr()]\n+//~^ ERROR: `repr` attribute cannot be used at crate level\n+#![path = \"3800\"]\n+//~^ ERROR: `path` attribute cannot be used at crate level\n+#![automatically_derived]\n+//~^ ERROR: `automatically_derived` attribute cannot be used at crate level\n+#![no_mangle]\n+#![no_link]\n+//~^ ERROR: attribute should be applied to an `extern crate` item\n+#![export_name = \"2200\"]\n+//~^ ERROR: attribute should be applied to a function or static\n #![inline]\n-\n+//~^ ERROR: attribute should be applied to function or closure\n #[inline]\n //~^ ERROR attribute should be applied to function or closure\n mod inline {\n@@ -88,4 +107,40 @@ mod export_name {\n     //~| NOTE not a function or static\n }\n \n+#[main]\n+//~^ ERROR: `main` attribute can only be used on functions\n+mod main {\n+    mod inner { #![main] }\n+    //~^ ERROR: `main` attribute can only be used on functions\n+\n+    // for `fn f()` case, see feature-gate-main.rs\n+\n+    #[main] struct S;\n+    //~^ ERROR: `main` attribute can only be used on functions\n+\n+    #[main] type T = S;\n+    //~^ ERROR: `main` attribute can only be used on functions\n+\n+    #[main] impl S { }\n+    //~^ ERROR: `main` attribute can only be used on functions\n+}\n+\n+#[start]\n+//~^ ERROR: `start` attribute can only be used on functions\n+mod start {\n+    mod inner { #![start] }\n+    //~^ ERROR: `start` attribute can only be used on functions\n+\n+    // for `fn f()` case, see feature-gate-start.rs\n+\n+    #[start] struct S;\n+    //~^ ERROR: `start` attribute can only be used on functions\n+\n+    #[start] type T = S;\n+    //~^ ERROR: `start` attribute can only be used on functions\n+\n+    #[start] impl S { }\n+    //~^ ERROR: `start` attribute can only be used on functions\n+}\n+\n fn main() {}"}, {"sha": "3ca1bd2ea7e48c7bf64ff69d61f8c7c97065f244", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs-error.stderr", "status": "modified", "additions": 132, "deletions": 18, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,5 +1,5 @@\n error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:22:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:41:5\n    |\n LL |     #[inline = \"2100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n@@ -8,8 +8,68 @@ LL |     #[inline = \"2100\"] fn f() { }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n+error: `main` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:110:1\n+   |\n+LL | #[main]\n+   | ^^^^^^^\n+\n+error: `main` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:113:17\n+   |\n+LL |     mod inner { #![main] }\n+   |                 ^^^^^^^^\n+\n+error: `main` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:118:5\n+   |\n+LL |     #[main] struct S;\n+   |     ^^^^^^^\n+\n+error: `main` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:121:5\n+   |\n+LL |     #[main] type T = S;\n+   |     ^^^^^^^\n+\n+error: `main` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:124:5\n+   |\n+LL |     #[main] impl S { }\n+   |     ^^^^^^^\n+\n+error: `start` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:128:1\n+   |\n+LL | #[start]\n+   | ^^^^^^^^\n+\n+error: `start` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:131:17\n+   |\n+LL |     mod inner { #![start] }\n+   |                 ^^^^^^^^^\n+\n+error: `start` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:136:5\n+   |\n+LL |     #[start] struct S;\n+   |     ^^^^^^^^\n+\n+error: `start` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:139:5\n+   |\n+LL |     #[start] type T = S;\n+   |     ^^^^^^^^\n+\n+error: `start` attribute can only be used on functions\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:142:5\n+   |\n+LL |     #[start] impl S { }\n+   |     ^^^^^^^^\n+\n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:13:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:32:1\n    |\n LL |   #[inline]\n    |   ^^^^^^^^^\n@@ -24,7 +84,7 @@ LL | | }\n    | |_- not a function or closure\n \n error: attribute should be applied to an `extern crate` item\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:41:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:60:1\n    |\n LL |   #[no_link]\n    |   ^^^^^^^^^^\n@@ -39,7 +99,7 @@ LL | | }\n    | |_- not an `extern crate` item\n \n error: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:67:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:86:1\n    |\n LL |   #[export_name = \"2200\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,84 +113,138 @@ LL | |\n LL | | }\n    | |_- not a function or static\n \n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:26:1\n+   |\n+LL | #![no_link]\n+   | ^^^^^^^^^^^\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:28:1\n+   |\n+LL | #![export_name = \"2200\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:30:1\n+   |\n+LL | #![inline]\n+   | ^^^^^^^^^^\n+\n+error: `macro_export` attribute cannot be used at crate level\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:13:1\n+   |\n+LL | #![macro_export]\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: `main` attribute cannot be used at crate level\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:15:1\n+   |\n+LL | #![main]\n+   | ^^^^^^^^\n+\n+error: `start` attribute cannot be used at crate level\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:17:1\n+   |\n+LL | #![start]\n+   | ^^^^^^^^^\n+\n+error: `repr` attribute cannot be used at crate level\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:19:1\n+   |\n+LL | #![repr()]\n+   | ^^^^^^^^^^\n+\n+error: `path` attribute cannot be used at crate level\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:21:1\n+   |\n+LL | #![path = \"3800\"]\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: `automatically_derived` attribute cannot be used at crate level\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:23:1\n+   |\n+LL | #![automatically_derived]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:18:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:37:17\n    |\n LL |     mod inner { #![inline] }\n    |     ------------^^^^^^^^^^-- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:28:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:47:5\n    |\n LL |     #[inline] struct S;\n    |     ^^^^^^^^^ --------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:32:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:51:5\n    |\n LL |     #[inline] type T = S;\n    |     ^^^^^^^^^ ----------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:36:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:55:5\n    |\n LL |     #[inline] impl S { }\n    |     ^^^^^^^^^ ---------- not a function or closure\n \n error: attribute should be applied to an `extern crate` item\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:46:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:65:17\n    |\n LL |     mod inner { #![no_link] }\n    |     ------------^^^^^^^^^^^-- not an `extern crate` item\n \n error: attribute should be applied to an `extern crate` item\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:50:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:69:5\n    |\n LL |     #[no_link] fn f() { }\n    |     ^^^^^^^^^^ ---------- not an `extern crate` item\n \n error: attribute should be applied to an `extern crate` item\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:54:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:73:5\n    |\n LL |     #[no_link] struct S;\n    |     ^^^^^^^^^^ --------- not an `extern crate` item\n \n error: attribute should be applied to an `extern crate` item\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:58:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:77:5\n    |\n LL |     #[no_link]type T = S;\n    |     ^^^^^^^^^^----------- not an `extern crate` item\n \n error: attribute should be applied to an `extern crate` item\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:62:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:81:5\n    |\n LL |     #[no_link] impl S { }\n    |     ^^^^^^^^^^ ---------- not an `extern crate` item\n \n error: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:72:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:91:17\n    |\n LL |     mod inner { #![export_name=\"2200\"] }\n    |     ------------^^^^^^^^^^^^^^^^^^^^^^-- not a function or static\n \n error: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:78:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:97:5\n    |\n LL |     #[export_name = \"2200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ --------- not a function or static\n \n error: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:82:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:101:5\n    |\n LL |     #[export_name = \"2200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a function or static\n \n error: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:86:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:105:5\n    |\n LL |     #[export_name = \"2200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a function or static\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 36 previous errors\n \n For more information about this error, try `rustc --explain E0518`."}, {"sha": "aba6c08f41dae4a9c232aea56285b7c8c740ed98", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 9, "deletions": 50, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,3 +1,6 @@\n+//~ NOTE not a function\n+//~^ NOTE not a foreign function or static\n+//~^^ NOTE not a function or static\n // This test enumerates as many compiler-builtin ungated attributes as\n // possible (that is, all the mutually compatible ones), and checks\n // that we get \"expected\" (*) warnings for each in the various weird\n@@ -52,20 +55,8 @@\n #![forbid(x5200)] //~ WARN unknown lint: `x5200`\n #![deny(x5100)] //~ WARN unknown lint: `x5100`\n #![macro_use] // (allowed if no argument; see issue-43160-gating-of-macro_use.rs)\n-#![macro_export] //~ WARN unused attribute\n // skipping testing of cfg\n // skipping testing of cfg_attr\n-#![main] //~ WARN unused attribute\n-#![start] //~ WARN unused attribute\n-// see issue-43106-gating-of-test.rs for crate-level; but non crate-level is below at \"4200\"\n-// see issue-43106-gating-of-bench.rs for crate-level; but non crate-level is below at \"4100\"\n-#![repr()]\n-//~^ WARN unused attribute\n-#![path = \"3800\"] //~ WARN unused attribute\n-#![automatically_derived] //~ WARN unused attribute\n-#![no_mangle]\n-#![no_link] //~ WARN unused attribute\n-// see issue-43106-gating-of-derive.rs\n #![should_panic] //~ WARN unused attribute\n #![ignore] //~ WARN unused attribute\n #![no_implicit_prelude]\n@@ -75,12 +66,16 @@\n // (cannot easily test gating of crate-level #[no_std]; but non crate-level is below at \"2600\")\n #![proc_macro_derive()] //~ WARN unused attribute\n #![doc = \"2400\"]\n-#![cold]\n-#![export_name = \"2200\"]\n+#![cold] //~ WARN attribute should be applied to a function\n+//~^ WARN\n // see issue-43106-gating-of-builtin-attrs-error.rs\n #![link()]\n #![link_name = \"1900\"]\n+//~^ WARN attribute should be applied to a foreign function\n+//~^^ WARN this was previously accepted by the compiler\n #![link_section = \"1800\"]\n+//~^ WARN attribute should be applied to a function or static\n+//~^^ WARN this was previously accepted by the compiler\n // see issue-43106-gating-of-rustc_deprecated.rs\n #![must_use]\n // see issue-43106-gating-of-stable.rs\n@@ -254,42 +249,6 @@ mod plugin_registrar {\n     //~| HELP may be removed in a future compiler version\n }\n \n-#[main]\n-//~^ WARN unused attribute\n-mod main {\n-    mod inner { #![main] }\n-    //~^ WARN unused attribute\n-\n-    // for `fn f()` case, see feature-gate-main.rs\n-\n-    #[main] struct S;\n-    //~^ WARN unused attribute\n-\n-    #[main] type T = S;\n-    //~^ WARN unused attribute\n-\n-    #[main] impl S { }\n-    //~^ WARN unused attribute\n-}\n-\n-#[start]\n-//~^ WARN unused attribute\n-mod start {\n-    mod inner { #![start] }\n-    //~^ WARN unused attribute\n-\n-    // for `fn f()` case, see feature-gate-start.rs\n-\n-    #[start] struct S;\n-    //~^ WARN unused attribute\n-\n-    #[start] type T = S;\n-    //~^ WARN unused attribute\n-\n-    #[start] impl S { }\n-    //~^ WARN unused attribute\n-}\n-\n // At time of unit test authorship, if compiling without `--test` then\n // non-crate-level #[test] attributes seem to be ignored.\n "}, {"sha": "ef9c9ef48a8093ef47d0dd0e456d4d42c5214ac6", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 230, "deletions": 308, "changes": 538, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -1,243 +1,243 @@\n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:50:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:9\n    |\n LL | #![warn(x5400)]\n    |         ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:37:28\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:28\n    |\n LL | #![warn(unused_attributes, unknown_lints)]\n    |                            ^^^^^^^^^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:51:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:54:10\n    |\n LL | #![allow(x5300)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:52:11\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:11\n    |\n LL | #![forbid(x5200)]\n    |           ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:9\n    |\n LL | #![deny(x5100)]\n    |         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:116:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:111:8\n    |\n LL | #[warn(x5400)]\n    |        ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:119:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:114:25\n    |\n LL |     mod inner { #![warn(x5400)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:122:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:117:12\n    |\n LL |     #[warn(x5400)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:125:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:12\n    |\n LL |     #[warn(x5400)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:128:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:123:12\n    |\n LL |     #[warn(x5400)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:131:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:126:12\n    |\n LL |     #[warn(x5400)] impl S { }\n    |            ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:135:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:130:9\n    |\n LL | #[allow(x5300)]\n    |         ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:138:26\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:133:26\n    |\n LL |     mod inner { #![allow(x5300)] }\n    |                          ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:141:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:136:13\n    |\n LL |     #[allow(x5300)] fn f() { }\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:144:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:13\n    |\n LL |     #[allow(x5300)] struct S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:147:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:142:13\n    |\n LL |     #[allow(x5300)] type T = S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:150:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:145:13\n    |\n LL |     #[allow(x5300)] impl S { }\n    |             ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:154:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:149:10\n    |\n LL | #[forbid(x5200)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:157:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:152:27\n    |\n LL |     mod inner { #![forbid(x5200)] }\n    |                           ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:160:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:155:14\n    |\n LL |     #[forbid(x5200)] fn f() { }\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:163:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:14\n    |\n LL |     #[forbid(x5200)] struct S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:166:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:161:14\n    |\n LL |     #[forbid(x5200)] type T = S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:169:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:164:14\n    |\n LL |     #[forbid(x5200)] impl S { }\n    |              ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:173:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:168:8\n    |\n LL | #[deny(x5100)]\n    |        ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:176:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:171:25\n    |\n LL |     mod inner { #![deny(x5100)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:179:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:174:12\n    |\n LL |     #[deny(x5100)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:182:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:177:12\n    |\n LL |     #[deny(x5100)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:185:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:180:12\n    |\n LL |     #[deny(x5100)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:188:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:183:12\n    |\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:479:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:441:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n    = help: try an outer attribute: `#[macro_use]`\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:233:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:228:17\n    |\n LL |     mod inner { #![plugin_registrar] }\n    |                 ^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:241:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:236:5\n    |\n LL |     #[plugin_registrar] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:246:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:241:5\n    |\n LL |     #[plugin_registrar] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:251:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:246:5\n    |\n LL |     #[plugin_registrar] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:228:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:223:1\n    |\n LL | #[plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:43:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:46:1\n    |\n LL | #![plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `crate_id`: no longer used.\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:96:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:91:1\n    |\n LL | #![crate_id = \"10\"]\n    | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n \n warning: use of deprecated attribute `no_start`: no longer used.\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:105:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:100:1\n    |\n LL | #![no_start]\n    | ^^^^^^^^^^^^ help: remove this attribute\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:374:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:333:1\n    |\n LL |   #[no_mangle]\n    |   ^^^^^^^^^^^^\n@@ -252,14 +252,14 @@ LL | | }\n    | |_- not a function or static\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:37:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:9\n    |\n LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:541:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:500:1\n    |\n LL |   #[cold]\n    |   ^^^^^^^\n@@ -276,7 +276,7 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:570:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:529:1\n    |\n LL |   #[link_name = \"1900\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^\n@@ -293,7 +293,7 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:609:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:568:1\n    |\n LL |   #[link_section = \"1800\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -309,72 +309,96 @@ LL | | }\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n+warning: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n+   |\n+LL | #![cold]\n+   | ^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:73:1\n+   |\n+LL | #![link_name = \"1900\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:379:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:76:1\n+   |\n+LL | #![link_section = \"1800\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+warning: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:338:17\n    |\n LL |     mod inner { #![no_mangle] }\n    |     ------------^^^^^^^^^^^^^-- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:345:5\n    |\n LL |     #[no_mangle] struct S;\n    |     ^^^^^^^^^^^^ --------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:391:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:350:5\n    |\n LL |     #[no_mangle] type T = S;\n    |     ^^^^^^^^^^^^ ----------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:396:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:355:5\n    |\n LL |     #[no_mangle] impl S { }\n    |     ^^^^^^^^^^^^ ---------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:547:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:506:17\n    |\n LL |     mod inner { #![cold] }\n    |     ------------^^^^^^^^-- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:554:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:513:5\n    |\n LL |     #[cold] struct S;\n    |     ^^^^^^^ --------- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:559:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:518:5\n    |\n LL |     #[cold] type T = S;\n    |     ^^^^^^^ ----------- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:564:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:523:5\n    |\n LL |     #[cold] impl S { }\n    |     ^^^^^^^ ---------- not a function\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:576:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:535:5\n    |\n LL |     #[link_name = \"1900\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n@@ -384,1038 +408,936 @@ LL |     extern { }\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n help: try `#[link(name = \"1900\")]` instead\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:576:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:535:5\n    |\n LL |     #[link_name = \"1900\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:583:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:542:17\n    |\n LL |     mod inner { #![link_name=\"1900\"] }\n    |     ------------^^^^^^^^^^^^^^^^^^^^-- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:588:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:547:5\n    |\n LL |     #[link_name = \"1900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:593:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:552:5\n    |\n LL |     #[link_name = \"1900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^ --------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:598:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:557:5\n    |\n LL |     #[link_name = \"1900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^ ----------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:603:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:562:5\n    |\n LL |     #[link_name = \"1900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:615:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:574:17\n    |\n LL |     mod inner { #![link_section=\"1800\"] }\n    |     ------------^^^^^^^^^^^^^^^^^^^^^^^-- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:622:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:581:5\n    |\n LL |     #[link_section = \"1800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ --------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:627:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:586:5\n    |\n LL |     #[link_section = \"1800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:632:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:591:5\n    |\n LL |     #[link_section = \"1800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: the feature `rust1` has been stable since 1.0.0 and no longer requires an attribute to enable\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:101:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:96:12\n    |\n LL | #![feature(rust1)]\n    |            ^^^^^\n    |\n    = note: `#[warn(stable_features)]` on by default\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:196:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:191:5\n    |\n LL |     #[macro_use] fn f() { }\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:199:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:194:5\n    |\n LL |     #[macro_use] struct S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:202:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:197:5\n    |\n LL |     #[macro_use] type T = S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:205:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:200:5\n    |\n LL |     #[macro_use] impl S { }\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:212:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:207:17\n    |\n LL |     mod inner { #![macro_export] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:215:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:210:5\n    |\n LL |     #[macro_export] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:218:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:5\n    |\n LL |     #[macro_export] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:221:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:5\n    |\n LL |     #[macro_export] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:224:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:219:5\n    |\n LL |     #[macro_export] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:209:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:204:1\n    |\n LL | #[macro_export]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:233:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:228:17\n    |\n LL |     mod inner { #![plugin_registrar] }\n    |                 ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:241:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:236:5\n    |\n LL |     #[plugin_registrar] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:246:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:241:5\n    |\n LL |     #[plugin_registrar] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:251:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:246:5\n    |\n LL |     #[plugin_registrar] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:228:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:223:1\n    |\n LL | #[plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:260:17\n-   |\n-LL |     mod inner { #![main] }\n-   |                 ^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:265:5\n-   |\n-LL |     #[main] struct S;\n-   |     ^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:268:5\n-   |\n-LL |     #[main] type T = S;\n-   |     ^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:271:5\n-   |\n-LL |     #[main] impl S { }\n-   |     ^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:257:1\n-   |\n-LL | #[main]\n-   | ^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:278:17\n-   |\n-LL |     mod inner { #![start] }\n-   |                 ^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:283:5\n-   |\n-LL |     #[start] struct S;\n-   |     ^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:286:5\n-   |\n-LL |     #[start] type T = S;\n-   |     ^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:289:5\n-   |\n-LL |     #[start] impl S { }\n-   |     ^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:275:1\n-   |\n-LL | #[start]\n-   | ^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:342:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:301:5\n    |\n LL |     #[path = \"3800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:345:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:304:5\n    |\n LL |     #[path = \"3800\"]  struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:348:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:307:5\n    |\n LL |     #[path = \"3800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:351:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:310:5\n    |\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:358:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:317:17\n    |\n LL |     mod inner { #![automatically_derived] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:361:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:320:5\n    |\n LL |     #[automatically_derived] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:323:5\n    |\n LL |     #[automatically_derived] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:326:5\n    |\n LL |     #[automatically_derived] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:329:5\n    |\n LL |     #[automatically_derived] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:355:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:314:1\n    |\n LL | #[automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:17\n    |\n LL |     mod inner { #![should_panic] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:5\n    |\n LL |     #[should_panic] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:5\n    |\n LL |     #[should_panic] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:373:5\n    |\n LL |     #[should_panic] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:5\n    |\n LL |     #[should_panic] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:402:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:361:1\n    |\n LL | #[should_panic]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:383:17\n    |\n LL |     mod inner { #![ignore] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:5\n    |\n LL |     #[ignore] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:389:5\n    |\n LL |     #[ignore] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:392:5\n    |\n LL |     #[ignore] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:5\n    |\n LL |     #[ignore] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:421:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:380:1\n    |\n LL | #[ignore]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:443:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:402:17\n    |\n LL |     mod inner { #![no_implicit_prelude] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:5\n    |\n LL |     #[no_implicit_prelude] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:5\n    |\n LL |     #[no_implicit_prelude] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:5\n    |\n LL |     #[no_implicit_prelude] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n    |\n LL |     #[no_implicit_prelude] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:440:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:399:1\n    |\n LL | #[no_implicit_prelude]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:462:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:421:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:465:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:468:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:471:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:459:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:418:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:445:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:448:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:451:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:454:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:462:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:462:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:507:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:507:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:511:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:511:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:515:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:515:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:659:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:659:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:713:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:713:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:709:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:709:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:739:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:739:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:743:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:743:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:747:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:747:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:735:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:735:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:773:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:773:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:843:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:802:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:843:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:802:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:847:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:806:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:847:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:806:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:851:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:810:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:851:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:810:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:855:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:855:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:859:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:859:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:839:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:798:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:839:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:798:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:43:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:46:1\n    |\n LL | #![plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:1\n-   |\n-LL | #![macro_export]\n-   | ^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:58:1\n-   |\n-LL | #![main]\n-   | ^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n-   |\n-LL | #![start]\n-   | ^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n-   |\n-LL | #![repr()]\n-   | ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:64:1\n-   |\n-LL | #![path = \"3800\"]\n-   | ^^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n-   |\n-LL | #![automatically_derived]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:67:1\n-   |\n-LL | #![no_link]\n-   | ^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:60:1\n    |\n LL | #![should_panic]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:70:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:61:1\n    |\n LL | #![ignore]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:76:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:67:1\n    |\n LL | #![proc_macro_derive()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: 219 warnings emitted\n+warning: 205 warnings emitted\n "}, {"sha": "93a2ec1cc50c33e019d50d3b7544af732f97974d", "filename": "src/test/ui/traits/issue-75627.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ftraits%2Fissue-75627.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ftraits%2Fissue-75627.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-75627.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,6 @@\n+struct Foo<T>(T, *const ());\n+\n+unsafe impl Send for Foo<T> {}\n+//~^ ERROR cannot find type\n+\n+fn main() {}"}, {"sha": "92d9ac0f84c990a622e6fb149688f595c1835f60", "filename": "src/test/ui/traits/issue-75627.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ftraits%2Fissue-75627.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ftraits%2Fissue-75627.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-75627.stderr?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/issue-75627.rs:3:26\n+   |\n+LL | unsafe impl Send for Foo<T> {}\n+   |                          ^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "d9524e99f9ad067bc43e2d618972a725c2921035", "filename": "src/test/ui/try-block/try-block-bad-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(try_blocks)]\n \n-#![inline(never)]\n+#[inline(never)]\n fn do_something_with<T>(_x: T) {}\n \n // This test checks that borrows made and returned inside try blocks are properly constrained"}, {"sha": "cd2ddf63a2f01a449fe93a4c4591080e0091344a", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(try_blocks)]\n \n-#![inline(never)]\n+#[inline(never)]\n fn do_something_with<T>(_x: T) {}\n \n // This test checks that borrows made and returned inside try blocks are properly constrained"}, {"sha": "4ae4dbfc06edead6bd990ceef7a23301b2c06006", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -11,3 +11,6 @@ serde_json = \"1.0\"\n anyhow = \"1.0.32\"\n flate2 = \"1.0.16\"\n tar = \"0.4.29\"\n+sha2 = \"0.9.1\"\n+rayon = \"1.3.1\"\n+hex = \"0.4.2\""}, {"sha": "26e96c9fd8fdaf56d035dc6c3816af25b569b858", "filename": "src/tools/build-manifest/README.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -20,8 +20,7 @@ Then, you can generate the manifest and all the packages from `path/to/dist` to\n `path/to/output` with:\n \n ```\n-$ BUILD_MANIFEST_DISABLE_SIGNING=1 cargo +nightly run \\\n-    path/to/dist path/to/output 1970-01-01 http://example.com \\\n+$ cargo +nightly run path/to/dist path/to/output 1970-01-01 http://example.com \\\n     CHANNEL path/to/rust/repo\n ```\n "}, {"sha": "c7e7d88c68fa8e85cf4303d97a30d5a56c1aed15", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 107, "deletions": 118, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -4,17 +4,22 @@\n //! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n //! by rustbuild (in `src/bootstrap/dist.rs`).\n \n+mod manifest;\n mod versions;\n \n+use crate::manifest::{Component, FileHash, Manifest, Package, Rename, Target};\n use crate::versions::{PkgType, Versions};\n-use serde::Serialize;\n-use std::collections::BTreeMap;\n-use std::collections::HashMap;\n+use rayon::prelude::*;\n+use sha2::Digest;\n+use std::collections::{BTreeMap, HashMap, HashSet};\n use std::env;\n+use std::error::Error;\n use std::fs::{self, File};\n-use std::io::{self, Read, Write};\n+use std::io::{self, BufReader, Read, Write};\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n+use std::sync::Mutex;\n+use std::time::Instant;\n \n static HOSTS: &[&str] = &[\n     \"aarch64-unknown-linux-gnu\",\n@@ -167,57 +172,6 @@ static MINGW: &[&str] = &[\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"];\n \n static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\", \"rust-analyzer-preview\"];\n \n-#[derive(Serialize)]\n-#[serde(rename_all = \"kebab-case\")]\n-struct Manifest {\n-    manifest_version: String,\n-    date: String,\n-    pkg: BTreeMap<String, Package>,\n-    renames: BTreeMap<String, Rename>,\n-    profiles: BTreeMap<String, Vec<String>>,\n-}\n-\n-#[derive(Serialize)]\n-struct Package {\n-    version: String,\n-    git_commit_hash: Option<String>,\n-    target: BTreeMap<String, Target>,\n-}\n-\n-#[derive(Serialize)]\n-struct Rename {\n-    to: String,\n-}\n-\n-#[derive(Serialize, Default)]\n-struct Target {\n-    available: bool,\n-    url: Option<String>,\n-    hash: Option<String>,\n-    xz_url: Option<String>,\n-    xz_hash: Option<String>,\n-    components: Option<Vec<Component>>,\n-    extensions: Option<Vec<Component>>,\n-}\n-\n-impl Target {\n-    fn unavailable() -> Self {\n-        Self::default()\n-    }\n-}\n-\n-#[derive(Serialize)]\n-struct Component {\n-    pkg: String,\n-    target: String,\n-}\n-\n-impl Component {\n-    fn from_str(pkg: &str, target: &str) -> Self {\n-        Self { pkg: pkg.to_string(), target: target.to_string() }\n-    }\n-}\n-\n macro_rules! t {\n     ($e:expr) => {\n         match $e {\n@@ -232,25 +186,33 @@ struct Builder {\n \n     input: PathBuf,\n     output: PathBuf,\n-    gpg_passphrase: String,\n-    digests: BTreeMap<String, String>,\n     s3_address: String,\n     date: String,\n \n-    should_sign: bool,\n+    legacy: bool,\n+    legacy_gpg_passphrase: String,\n }\n \n fn main() {\n-    // Avoid signing packages while manually testing\n-    // Do NOT set this envvar in CI\n-    let should_sign = env::var(\"BUILD_MANIFEST_DISABLE_SIGNING\").is_err();\n-\n-    // Safety check to ensure signing is always enabled on CI\n-    // The CI environment variable is set by both Travis and AppVeyor\n-    if !should_sign && env::var(\"CI\").is_ok() {\n-        println!(\"The 'BUILD_MANIFEST_DISABLE_SIGNING' env var can't be enabled on CI.\");\n-        println!(\"If you're not running this on CI, unset the 'CI' env var.\");\n-        panic!();\n+    // Up until Rust 1.48 the release process relied on build-manifest to create the SHA256\n+    // checksums of released files and to sign the tarballs. That was moved over to promote-release\n+    // in time for the branching of Rust 1.48, but the old release process still had to work the\n+    // old way.\n+    //\n+    // When running build-manifest through the old ./x.py dist hash-and-sign the environment\n+    // variable will be set, enabling the legacy behavior of generating the .sha256 files and\n+    // signing the tarballs.\n+    //\n+    // Once the old release process is fully decommissioned, the environment variable, all the\n+    // related code in this tool and ./x.py dist hash-and-sign can be removed.\n+    let legacy = env::var(\"BUILD_MANIFEST_LEGACY\").is_ok();\n+\n+    // Avoid overloading the old server in legacy mode.\n+    if legacy {\n+        rayon::ThreadPoolBuilder::new()\n+            .num_threads(1)\n+            .build_global()\n+            .expect(\"failed to initialize Rayon\");\n     }\n \n     let mut args = env::args().skip(1);\n@@ -263,7 +225,7 @@ fn main() {\n \n     // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n-    if should_sign {\n+    if legacy {\n         // `x.py` passes the passphrase via stdin.\n         t!(io::stdin().read_to_string(&mut passphrase));\n     }\n@@ -273,20 +235,21 @@ fn main() {\n \n         input,\n         output,\n-        gpg_passphrase: passphrase,\n-        digests: BTreeMap::new(),\n         s3_address,\n         date,\n \n-        should_sign,\n+        legacy,\n+        legacy_gpg_passphrase: passphrase,\n     }\n     .build();\n }\n \n impl Builder {\n     fn build(&mut self) {\n         self.check_toolstate();\n-        self.digest_and_sign();\n+        if self.legacy {\n+            self.digest_and_sign();\n+        }\n         let manifest = self.build_manifest();\n \n         let rust_version = self.versions.package_version(&PkgType::Rust).unwrap();\n@@ -324,10 +287,9 @@ impl Builder {\n     /// Hash all files, compute their signatures, and collect the hashes in `self.digests`.\n     fn digest_and_sign(&mut self) {\n         for file in t!(self.input.read_dir()).map(|e| t!(e).path()) {\n-            let filename = file.file_name().unwrap().to_str().unwrap();\n-            let digest = self.hash(&file);\n+            file.file_name().unwrap().to_str().unwrap();\n+            self.hash(&file);\n             self.sign(&file);\n-            assert!(self.digests.insert(filename.to_string(), digest).is_none());\n         }\n     }\n \n@@ -343,6 +305,9 @@ impl Builder {\n         self.add_profiles_to(&mut manifest);\n         self.add_renames_to(&mut manifest);\n         manifest.pkg.insert(\"rust\".to_string(), self.rust_package(&manifest));\n+\n+        self.fill_missing_hashes(&mut manifest);\n+\n         manifest\n     }\n \n@@ -438,9 +403,12 @@ impl Builder {\n \n     fn target_host_combination(&mut self, host: &str, manifest: &Manifest) -> Option<Target> {\n         let filename = self.versions.tarball_name(&PkgType::Rust, host).unwrap();\n-        let digest = self.digests.remove(&filename)?;\n-        let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");\n-        let xz_digest = self.digests.remove(&xz_filename);\n+\n+        let mut target = Target::from_compressed_tar(self, &filename);\n+        if !target.available {\n+            return None;\n+        }\n+\n         let mut components = Vec::new();\n         let mut extensions = Vec::new();\n \n@@ -496,15 +464,9 @@ impl Builder {\n         extensions.retain(&has_component);\n         components.retain(&has_component);\n \n-        Some(Target {\n-            available: true,\n-            url: Some(self.url(&filename)),\n-            hash: Some(digest),\n-            xz_url: xz_digest.as_ref().map(|_| self.url(&xz_filename)),\n-            xz_hash: xz_digest,\n-            components: Some(components),\n-            extensions: Some(extensions),\n-        })\n+        target.components = Some(components);\n+        target.extensions = Some(extensions);\n+        Some(target)\n     }\n \n     fn profile(\n@@ -542,37 +504,19 @@ impl Builder {\n         let targets = targets\n             .iter()\n             .map(|name| {\n-                if is_present {\n-                    // The component generally exists, but it might still be missing for this target.\n+                let target = if is_present {\n                     let filename = self\n                         .versions\n                         .tarball_name(&PkgType::from_component(pkgname), name)\n                         .unwrap();\n-                    let digest = match self.digests.remove(&filename) {\n-                        Some(digest) => digest,\n-                        // This component does not exist for this target -- skip it.\n-                        None => return (name.to_string(), Target::unavailable()),\n-                    };\n-                    let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");\n-                    let xz_digest = self.digests.remove(&xz_filename);\n-\n-                    (\n-                        name.to_string(),\n-                        Target {\n-                            available: true,\n-                            url: Some(self.url(&filename)),\n-                            hash: Some(digest),\n-                            xz_url: xz_digest.as_ref().map(|_| self.url(&xz_filename)),\n-                            xz_hash: xz_digest,\n-                            components: None,\n-                            extensions: None,\n-                        },\n-                    )\n+\n+                    Target::from_compressed_tar(self, &filename)\n                 } else {\n                     // If the component is not present for this build add it anyway but mark it as\n                     // unavailable -- this way rustup won't allow upgrades without --force\n-                    (name.to_string(), Target::unavailable())\n-                }\n+                    Target::unavailable()\n+                };\n+                (name.to_string(), target)\n             })\n             .collect();\n \n@@ -586,8 +530,9 @@ impl Builder {\n         );\n     }\n \n-    fn url(&self, filename: &str) -> String {\n-        format!(\"{}/{}/{}\", self.s3_address, self.date, filename)\n+    fn url(&self, path: &Path) -> String {\n+        let file_name = path.file_name().unwrap().to_str().unwrap();\n+        format!(\"{}/{}/{}\", self.s3_address, self.date, file_name)\n     }\n \n     fn hash(&self, path: &Path) -> String {\n@@ -608,7 +553,7 @@ impl Builder {\n     }\n \n     fn sign(&self, path: &Path) {\n-        if !self.should_sign {\n+        if !self.legacy {\n             return;\n         }\n \n@@ -631,10 +576,45 @@ impl Builder {\n             .arg(path)\n             .stdin(Stdio::piped());\n         let mut child = t!(cmd.spawn());\n-        t!(child.stdin.take().unwrap().write_all(self.gpg_passphrase.as_bytes()));\n+        t!(child.stdin.take().unwrap().write_all(self.legacy_gpg_passphrase.as_bytes()));\n         assert!(t!(child.wait()).success());\n     }\n \n+    fn fill_missing_hashes(&self, manifest: &mut Manifest) {\n+        // First collect all files that need hashes\n+        let mut need_hashes = HashSet::new();\n+        crate::manifest::visit_file_hashes(manifest, |file_hash| {\n+            if let FileHash::Missing(path) = file_hash {\n+                need_hashes.insert(path.clone());\n+            }\n+        });\n+\n+        let collected = Mutex::new(HashMap::new());\n+        let collection_start = Instant::now();\n+        println!(\n+            \"collecting hashes for {} tarballs across {} threads\",\n+            need_hashes.len(),\n+            rayon::current_num_threads().min(need_hashes.len()),\n+        );\n+        need_hashes.par_iter().for_each(|path| match fetch_hash(path) {\n+            Ok(hash) => {\n+                collected.lock().unwrap().insert(path, hash);\n+            }\n+            Err(err) => eprintln!(\"error while fetching the hash for {}: {}\", path.display(), err),\n+        });\n+        let collected = collected.into_inner().unwrap();\n+        println!(\"collected {} hashes in {:.2?}\", collected.len(), collection_start.elapsed());\n+\n+        crate::manifest::visit_file_hashes(manifest, |file_hash| {\n+            if let FileHash::Missing(path) = file_hash {\n+                match collected.get(path) {\n+                    Some(hash) => *file_hash = FileHash::Present(hash.clone()),\n+                    None => panic!(\"missing hash for file {}\", path.display()),\n+                }\n+            }\n+        })\n+    }\n+\n     fn write_channel_files(&self, channel_name: &str, manifest: &Manifest) {\n         self.write(&toml::to_string(&manifest).unwrap(), channel_name, \".toml\");\n         self.write(&manifest.date, channel_name, \"-date.txt\");\n@@ -648,7 +628,16 @@ impl Builder {\n     fn write(&self, contents: &str, channel_name: &str, suffix: &str) {\n         let dst = self.output.join(format!(\"channel-rust-{}{}\", channel_name, suffix));\n         t!(fs::write(&dst, contents));\n-        self.hash(&dst);\n-        self.sign(&dst);\n+        if self.legacy {\n+            self.hash(&dst);\n+            self.sign(&dst);\n+        }\n     }\n }\n+\n+fn fetch_hash(path: &Path) -> Result<String, Box<dyn Error>> {\n+    let mut file = BufReader::new(File::open(path)?);\n+    let mut sha256 = sha2::Sha256::default();\n+    std::io::copy(&mut file, &mut sha256)?;\n+    Ok(hex::encode(sha256.finalize()))\n+}"}, {"sha": "20e62abb54cfa33bfa3f6fc4ffcd8e0c86903d0a", "filename": "src/tools/build-manifest/src/manifest.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbaa413061c2a6e52f06f00a60ee7830fcf3ea5/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs?ref=efbaa413061c2a6e52f06f00a60ee7830fcf3ea5", "patch": "@@ -0,0 +1,114 @@\n+use crate::Builder;\n+use serde::{Serialize, Serializer};\n+use std::collections::BTreeMap;\n+use std::path::{Path, PathBuf};\n+\n+#[derive(Serialize)]\n+#[serde(rename_all = \"kebab-case\")]\n+pub(crate) struct Manifest {\n+    pub(crate) manifest_version: String,\n+    pub(crate) date: String,\n+    pub(crate) pkg: BTreeMap<String, Package>,\n+    pub(crate) renames: BTreeMap<String, Rename>,\n+    pub(crate) profiles: BTreeMap<String, Vec<String>>,\n+}\n+\n+#[derive(Serialize)]\n+pub(crate) struct Package {\n+    pub(crate) version: String,\n+    pub(crate) git_commit_hash: Option<String>,\n+    pub(crate) target: BTreeMap<String, Target>,\n+}\n+\n+#[derive(Serialize)]\n+pub(crate) struct Rename {\n+    pub(crate) to: String,\n+}\n+\n+#[derive(Serialize, Default)]\n+pub(crate) struct Target {\n+    pub(crate) available: bool,\n+    pub(crate) url: Option<String>,\n+    pub(crate) hash: Option<FileHash>,\n+    pub(crate) xz_url: Option<String>,\n+    pub(crate) xz_hash: Option<FileHash>,\n+    pub(crate) components: Option<Vec<Component>>,\n+    pub(crate) extensions: Option<Vec<Component>>,\n+}\n+\n+impl Target {\n+    pub(crate) fn from_compressed_tar(builder: &Builder, base_path: &str) -> Self {\n+        let base_path = builder.input.join(base_path);\n+        let gz = Self::tarball_variant(&base_path, \"gz\");\n+        let xz = Self::tarball_variant(&base_path, \"xz\");\n+\n+        if gz.is_none() {\n+            return Self::unavailable();\n+        }\n+\n+        Self {\n+            available: true,\n+            components: None,\n+            extensions: None,\n+            // .gz\n+            url: gz.as_ref().map(|path| builder.url(path)),\n+            hash: gz.map(FileHash::Missing),\n+            // .xz\n+            xz_url: xz.as_ref().map(|path| builder.url(path)),\n+            xz_hash: xz.map(FileHash::Missing),\n+        }\n+    }\n+\n+    fn tarball_variant(base: &Path, ext: &str) -> Option<PathBuf> {\n+        let mut path = base.to_path_buf();\n+        path.set_extension(ext);\n+        if path.is_file() { Some(path) } else { None }\n+    }\n+\n+    pub(crate) fn unavailable() -> Self {\n+        Self::default()\n+    }\n+}\n+\n+#[derive(Serialize)]\n+pub(crate) struct Component {\n+    pub(crate) pkg: String,\n+    pub(crate) target: String,\n+}\n+\n+impl Component {\n+    pub(crate) fn from_str(pkg: &str, target: &str) -> Self {\n+        Self { pkg: pkg.to_string(), target: target.to_string() }\n+    }\n+}\n+\n+#[allow(unused)]\n+pub(crate) enum FileHash {\n+    Missing(PathBuf),\n+    Present(String),\n+}\n+\n+impl Serialize for FileHash {\n+    fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {\n+        match self {\n+            FileHash::Missing(path) => Err(serde::ser::Error::custom(format!(\n+                \"can't serialize a missing hash for file {}\",\n+                path.display()\n+            ))),\n+            FileHash::Present(inner) => inner.serialize(serializer),\n+        }\n+    }\n+}\n+\n+pub(crate) fn visit_file_hashes(manifest: &mut Manifest, mut f: impl FnMut(&mut FileHash)) {\n+    for pkg in manifest.pkg.values_mut() {\n+        for target in pkg.target.values_mut() {\n+            if let Some(hash) = &mut target.hash {\n+                f(hash);\n+            }\n+            if let Some(hash) = &mut target.xz_hash {\n+                f(hash);\n+            }\n+        }\n+    }\n+}"}]}