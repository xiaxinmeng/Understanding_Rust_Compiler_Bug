{"sha": "bdf968c9d9e12d54c7dd724807684724aa23763d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZjk2OGM5ZDllMTJkNTRjN2RkNzI0ODA3Njg0NzI0YWEyMzc2M2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-21T21:14:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-21T21:15:43Z"}, "message": "rustc: Add a version of `demand` that takes in a set of region variable bindings", "tree": {"sha": "2e6a8dec32f54ced426dcede48c7d181cd80c879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e6a8dec32f54ced426dcede48c7d181cd80c879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf968c9d9e12d54c7dd724807684724aa23763d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf968c9d9e12d54c7dd724807684724aa23763d", "html_url": "https://github.com/rust-lang/rust/commit/bdf968c9d9e12d54c7dd724807684724aa23763d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf968c9d9e12d54c7dd724807684724aa23763d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c272cb3a42cfd842736ddb90133362fe899290", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c272cb3a42cfd842736ddb90133362fe899290", "html_url": "https://github.com/rust-lang/rust/commit/30c272cb3a42cfd842736ddb90133362fe899290"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "0964463aed48cdac47fd23bc0517a09aab31e8bb", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdf968c9d9e12d54c7dd724807684724aa23763d/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf968c9d9e12d54c7dd724807684724aa23763d/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=bdf968c9d9e12d54c7dd724807684724aa23763d", "patch": "@@ -1542,8 +1542,8 @@ mod unify {\n     export resolve_type_structure;\n     export resolve_type_var;\n     export unify;\n-    export var_bindings;\n-    export precise, in_bindings;\n+    export var_bindings, region_bindings;\n+    export precise, in_bindings, in_region_bindings;\n \n     type ures<T> = result<T,type_err>;\n \n@@ -1669,7 +1669,11 @@ mod unify {\n         typ: t, variance: variance,\n         nxt: fn(t) -> ures<T>) -> ures<T> {\n \n-        let vb = alt check cx.st { in_bindings(vb) { vb } };\n+        let vb = alt cx.st {\n+            in_bindings(vb) | in_region_bindings(vb, _) { vb }\n+            precise { fail; }\n+        };\n+\n         ufind::grow(vb.sets, (key as uint) + 1u);\n         let root = ufind::find(vb.sets, key as uint);\n         let result_type = typ;"}, {"sha": "a30322842231550f3a0e87c3d14cbe6f31c9c88f", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bdf968c9d9e12d54c7dd724807684724aa23763d/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf968c9d9e12d54c7dd724807684724aa23763d/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=bdf968c9d9e12d54c7dd724807684724aa23763d", "patch": "@@ -1089,6 +1089,15 @@ mod collect {\n \n // Type unification\n mod unify {\n+    fn unify_with_region_bindings(fcx: @fn_ctxt,\n+                                  rb: @ty::unify::region_bindings,\n+                                  expected: ty::t,\n+                                  actual: ty::t)\n+            -> result<ty::t, ty::type_err> {\n+        let irb = ty::unify::in_region_bindings(fcx.var_bindings, rb);\n+        ret ty::unify::unify(expected, actual, irb, fcx.ccx.tcx);\n+    }\n+\n     fn unify(fcx: @fn_ctxt, expected: ty::t, actual: ty::t) ->\n         result<ty::t, ty::type_err> {\n         ret ty::unify::unify(expected, actual,\n@@ -1146,17 +1155,32 @@ type ty_param_substs_and_ty = {substs: [ty::t], ty: ty::t};\n mod demand {\n     fn simple(fcx: @fn_ctxt, sp: span, expected: ty::t, actual: ty::t) ->\n        ty::t {\n-        full(fcx, sp, expected, actual, []).ty\n+        full(fcx, sp, unify::unify, expected, actual, []).ty\n+    }\n+\n+    fn with_region_bindings(fcx: @fn_ctxt,\n+                            sp: span,\n+                            rb: @ty::unify::region_bindings,\n+                            expected: ty::t,\n+                            actual: ty::t)\n+            -> ty::t {\n+        full(fcx, sp, bind unify::unify_with_region_bindings(_, rb, _, _),\n+             expected, actual, []).ty\n     }\n \n     fn with_substs(fcx: @fn_ctxt, sp: span, expected: ty::t, actual: ty::t,\n                    ty_param_substs_0: [ty::t]) -> ty_param_substs_and_ty {\n-        full(fcx, sp, expected, actual, ty_param_substs_0)\n+        full(fcx, sp, unify::unify, expected, actual, ty_param_substs_0)\n     }\n \n     // Requires that the two types unify, and prints an error message if they\n     // don't. Returns the unified type and the type parameter substitutions.\n-    fn full(fcx: @fn_ctxt, sp: span, expected: ty::t, actual: ty::t,\n+    fn full(fcx: @fn_ctxt,\n+            sp: span,\n+            unifier: fn@(@fn_ctxt, ty::t, ty::t)\n+                -> result<ty::t, ty::type_err>,\n+            expected: ty::t,\n+            actual: ty::t,\n             ty_param_substs_0: [ty::t]) ->\n        ty_param_substs_and_ty {\n \n@@ -1183,7 +1207,7 @@ mod demand {\n         }\n \n \n-        alt unify::unify(fcx, expected, actual) {\n+        alt unifier(fcx, expected, actual) {\n           result::ok(t) { ret mk_result(fcx, t, ty_param_subst_var_ids); }\n           result::err(err) {\n             let e_err = resolve_type_vars_if_possible(fcx, expected);"}]}