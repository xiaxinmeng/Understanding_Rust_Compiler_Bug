{"sha": "64e1b63b2537667a12c84be2b6f8775ab666e8f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZTFiNjNiMjUzNzY2N2ExMmM4NGJlMmI2Zjg3NzVhYjY2NmU4ZjM=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-08-12T19:23:34Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-08-12T19:28:35Z"}, "message": "Forbid `!` from being used in `asm!` output", "tree": {"sha": "ab46f0304fea2493963fa31fd3497ff5437fe180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab46f0304fea2493963fa31fd3497ff5437fe180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64e1b63b2537667a12c84be2b6f8775ab666e8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64e1b63b2537667a12c84be2b6f8775ab666e8f3", "html_url": "https://github.com/rust-lang/rust/commit/64e1b63b2537667a12c84be2b6f8775ab666e8f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64e1b63b2537667a12c84be2b6f8775ab666e8f3/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4498e300e41f47c75abe4e49ec91ae949aaeea5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4498e300e41f47c75abe4e49ec91ae949aaeea5f", "html_url": "https://github.com/rust-lang/rust/commit/4498e300e41f47c75abe4e49ec91ae949aaeea5f"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "96e9a40df3685fd418aefea3faf7cfc39585dbec", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64e1b63b2537667a12c84be2b6f8775ab666e8f3/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e1b63b2537667a12c84be2b6f8775ab666e8f3/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=64e1b63b2537667a12c84be2b6f8775ab666e8f3", "patch": "@@ -139,6 +139,7 @@ impl ExprVisitor<'tcx> {\n         reg: InlineAsmRegOrRegClass,\n         expr: &hir::Expr<'tcx>,\n         template: &[InlineAsmTemplatePiece],\n+        is_input: bool,\n         tied_input: Option<(&hir::Expr<'tcx>, Option<InlineAsmType>)>,\n     ) -> Option<InlineAsmType> {\n         // Check the type against the allowed types for inline asm.\n@@ -150,7 +151,9 @@ impl ExprVisitor<'tcx> {\n             _ => unreachable!(),\n         };\n         let asm_ty = match *ty.kind() {\n-            ty::Never | ty::Error(_) => return None,\n+            // `!` is allowed for input but not for output (issue #87802)\n+            ty::Never if is_input => return None,\n+            ty::Error(_) => return None,\n             ty::Int(IntTy::I8) | ty::Uint(UintTy::U8) => Some(InlineAsmType::I8),\n             ty::Int(IntTy::I16) | ty::Uint(UintTy::U16) => Some(InlineAsmType::I16),\n             ty::Int(IntTy::I32) | ty::Uint(UintTy::U32) => Some(InlineAsmType::I32),\n@@ -350,24 +353,26 @@ impl ExprVisitor<'tcx> {\n         for (idx, (op, _)) in asm.operands.iter().enumerate() {\n             match *op {\n                 hir::InlineAsmOperand::In { reg, ref expr } => {\n-                    self.check_asm_operand_type(idx, reg, expr, asm.template, None);\n+                    self.check_asm_operand_type(idx, reg, expr, asm.template, true, None);\n                 }\n                 hir::InlineAsmOperand::Out { reg, late: _, ref expr } => {\n                     if let Some(expr) = expr {\n-                        self.check_asm_operand_type(idx, reg, expr, asm.template, None);\n+                        self.check_asm_operand_type(idx, reg, expr, asm.template, false, None);\n                     }\n                 }\n                 hir::InlineAsmOperand::InOut { reg, late: _, ref expr } => {\n-                    self.check_asm_operand_type(idx, reg, expr, asm.template, None);\n+                    self.check_asm_operand_type(idx, reg, expr, asm.template, false, None);\n                 }\n                 hir::InlineAsmOperand::SplitInOut { reg, late: _, ref in_expr, ref out_expr } => {\n-                    let in_ty = self.check_asm_operand_type(idx, reg, in_expr, asm.template, None);\n+                    let in_ty =\n+                        self.check_asm_operand_type(idx, reg, in_expr, asm.template, true, None);\n                     if let Some(out_expr) = out_expr {\n                         self.check_asm_operand_type(\n                             idx,\n                             reg,\n                             out_expr,\n                             asm.template,\n+                            false,\n                             Some((in_expr, in_ty)),\n                         );\n                     }"}, {"sha": "b1fc13b6a7e8cfac6141b0c9eebf25e99ad36de9", "filename": "src/test/ui/asm/issue-87802.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/64e1b63b2537667a12c84be2b6f8775ab666e8f3/src%2Ftest%2Fui%2Fasm%2Fissue-87802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e1b63b2537667a12c84be2b6f8775ab666e8f3/src%2Ftest%2Fui%2Fasm%2Fissue-87802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-87802.rs?ref=64e1b63b2537667a12c84be2b6f8775ab666e8f3", "patch": "@@ -0,0 +1,17 @@\n+// only-x86_64\n+// Make sure rustc doesn't ICE on asm! when output type is !.\n+\n+#![feature(asm)]\n+\n+fn hmm() -> ! {\n+    let x;\n+    unsafe {\n+        asm!(\"/* {0} */\", out(reg) x);\n+        //~^ ERROR cannot use value of type `!` for inline assembly\n+    }\n+    x\n+}\n+\n+fn main() {\n+    hmm();\n+}"}, {"sha": "1eb72b68a7f044bd266a061ad8c83998acf2396b", "filename": "src/test/ui/asm/issue-87802.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64e1b63b2537667a12c84be2b6f8775ab666e8f3/src%2Ftest%2Fui%2Fasm%2Fissue-87802.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64e1b63b2537667a12c84be2b6f8775ab666e8f3/src%2Ftest%2Fui%2Fasm%2Fissue-87802.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-87802.stderr?ref=64e1b63b2537667a12c84be2b6f8775ab666e8f3", "patch": "@@ -0,0 +1,10 @@\n+error: cannot use value of type `!` for inline assembly\n+  --> $DIR/issue-87802.rs:9:36\n+   |\n+LL |         asm!(\"/* {0} */\", out(reg) x);\n+   |                                    ^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: aborting due to previous error\n+"}]}