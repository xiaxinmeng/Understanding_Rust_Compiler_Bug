{"sha": "bdcc02360f34fe773c38f8ae86111fb831f8ec9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkY2MwMjM2MGYzNGZlNzczYzM4ZjhhZTg2MTExZmI4MzFmOGVjOWU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-26T15:54:24Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-02T11:43:07Z"}, "message": "Mark cleanup cold", "tree": {"sha": "bf8df684a3c8ba76aea724e588ebca2e4d81b251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf8df684a3c8ba76aea724e588ebca2e4d81b251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdcc02360f34fe773c38f8ae86111fb831f8ec9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcc02360f34fe773c38f8ae86111fb831f8ec9e", "html_url": "https://github.com/rust-lang/rust/commit/bdcc02360f34fe773c38f8ae86111fb831f8ec9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdcc02360f34fe773c38f8ae86111fb831f8ec9e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6c3b7c3900f58f5b97a6cec379328e855287ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6c3b7c3900f58f5b97a6cec379328e855287ed", "html_url": "https://github.com/rust-lang/rust/commit/dd6c3b7c3900f58f5b97a6cec379328e855287ed"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "3dd1f09e07656f819cdc024a4c641a0f123578e3", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdcc02360f34fe773c38f8ae86111fb831f8ec9e/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdcc02360f34fe773c38f8ae86111fb831f8ec9e/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=bdcc02360f34fe773c38f8ae86111fb831f8ec9e", "patch": "@@ -307,6 +307,11 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n         Err(cleanup(payload.assume_init()))\n     };\n \n+    // We consider unwinding to be rare, so mark this function as cold. However,\n+    // do not mark it no-inline -- that decision is best to leave to the\n+    // optimizer (in most cases this function is not inlined even as a normal,\n+    // non-cold function, though, as of the writing of this comment).\n+    #[cold]\n     unsafe fn cleanup(mut payload: Payload) -> Box<dyn Any + Send + 'static> {\n         let obj = crate::mem::transmute(__rust_panic_cleanup(&mut payload as *mut _ as *mut u8));\n         update_panic_count(-1);"}]}