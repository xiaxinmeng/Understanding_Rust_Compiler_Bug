{"sha": "edb8d1c0d4b2e32088f3c6a77437b091b10ddf7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYjhkMWMwZDRiMmUzMjA4OGYzYzZhNzc0MzdiMDkxYjEwZGRmN2U=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-13T15:11:53Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-01T20:28:54Z"}, "message": "Conservatively assume dropping a generator touches its upvars, via locals' dtors.\n\nThis is meant to address rust-lang/rust#49918.\n\nReview feedback: put back comment justifying skipping interior traversal.\n\nReview feedback: dropck generators like trait objects: all their upvars must\noutlive the generator itself, so just create a DtorckConstraint saying so.", "tree": {"sha": "004215cfb42495e6a8e8fea5ff93889140f90d50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/004215cfb42495e6a8e8fea5ff93889140f90d50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edb8d1c0d4b2e32088f3c6a77437b091b10ddf7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edb8d1c0d4b2e32088f3c6a77437b091b10ddf7e", "html_url": "https://github.com/rust-lang/rust/commit/edb8d1c0d4b2e32088f3c6a77437b091b10ddf7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edb8d1c0d4b2e32088f3c6a77437b091b10ddf7e/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d7bbdd82682b0c4891538b241f7fe584f148710", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7bbdd82682b0c4891538b241f7fe584f148710", "html_url": "https://github.com/rust-lang/rust/commit/4d7bbdd82682b0c4891538b241f7fe584f148710"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "ba31ce2692fbcabe38a67fcd0b3f3821d102d5e8", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/edb8d1c0d4b2e32088f3c6a77437b091b10ddf7e/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb8d1c0d4b2e32088f3c6a77437b091b10ddf7e/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=edb8d1c0d4b2e32088f3c6a77437b091b10ddf7e", "patch": "@@ -193,14 +193,38 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n             .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty))\n             .collect(),\n \n-        ty::TyGenerator(def_id, substs, _) => {\n-            // Note that the interior types are ignored here.\n-            // Any type reachable inside the interior must also be reachable\n-            // through the upvars.\n-            substs\n-                .upvar_tys(def_id, tcx)\n-                .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty))\n-                .collect()\n+        ty::TyGenerator(def_id, substs, _interior) => {\n+            // rust-lang/rust#49918: types can be constructed, stored\n+            // in the interior, and sit idle when generator yields\n+            // (and is subsequently dropped).\n+            //\n+            // It would be nice to descend into interior of a\n+            // generator to determine what effects dropping it might\n+            // have (by looking at any drop effects associated with\n+            // its interior).\n+            //\n+            // However, the interior's representation uses things like\n+            // TyGeneratorWitness that explicitly assume they are not\n+            // traversed in such a manner. So instead, we will\n+            // simplify things for now by treating all generators as\n+            // if they were like trait objects, where its upvars must\n+            // all be alive for the generator's (potential)\n+            // destructor.\n+            //\n+            // In particular, skipping over `_interior` is safe\n+            // because any side-effects from dropping `_interior` can\n+            // only take place through references with lifetimes\n+            // derived from lifetimes attached to the upvars, and we\n+            // *do* incorporate the upvars here.\n+\n+            let constraint = DtorckConstraint {\n+                outlives: substs.upvar_tys(def_id, tcx).map(|t| t.into()).collect(),\n+                dtorck_types: vec![],\n+                overflows: vec![],\n+            };\n+            debug!(\"dtorck_constraint: generator {:?} => {:?}\", def_id, constraint);\n+\n+            Ok(constraint)\n         }\n \n         ty::TyAdt(def, substs) => {"}]}