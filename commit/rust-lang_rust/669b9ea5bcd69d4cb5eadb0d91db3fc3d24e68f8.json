{"sha": "669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OWI5ZWE1YmNkNjlkNGNiNWVhZGIwZDkxZGIzZmMzZDI0ZTY4Zjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-20T14:00:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-20T14:00:22Z"}, "message": "Merge pull request #535 from RalfJung/tests-edition-2018\n\nUse edition 2018 for tests", "tree": {"sha": "dccac30f2d2ae07ec2b4084b192beffde8a91dd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dccac30f2d2ae07ec2b4084b192beffde8a91dd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb9BN2CRBK7hj4Ov3rIwAAdHIIAKzu1CSE2GTh9ihJGpLSLy0e\nzjCzpg2fdWlaj5gqIvPh6OcTwkS8rUX93viN9bz1RJT9ZPuJLFDLUP2nMbp0FZ0z\n86zGhPn37a3yd/7r2ReSVM+RJIIxDkubBXbJgSYPa50Wp5/OsmwV2freRAvn2xSP\nPfqeF5a3da5aiBBiWoyBUrTINZTeq4XJ17ldQsx4fr51aTM+aD/Z0YAnSMd38nd6\n3I7UI+uDetRiheZpM6TLcEwxPh10LnzbavPadIPBs7zwd3rJW8ArxZQDeRzQmDwn\ns65gOu9Nmsys5ag8olnN9Fnq1SQ1S7ygeydWs6o9O1XPUKfysTjWEOCmZpp4bpE=\n=L0kj\n-----END PGP SIGNATURE-----\n", "payload": "tree dccac30f2d2ae07ec2b4084b192beffde8a91dd0\nparent 3cfaed2dbd1cd3defd641b183a00d2af21f4cbf2\nparent 22f11b8eec844624a0285d2d6c6ee47880542636\nauthor Ralf Jung <post@ralfj.de> 1542722422 +0100\ncommitter GitHub <noreply@github.com> 1542722422 +0100\n\nMerge pull request #535 from RalfJung/tests-edition-2018\n\nUse edition 2018 for tests"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "html_url": "https://github.com/rust-lang/rust/commit/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cfaed2dbd1cd3defd641b183a00d2af21f4cbf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cfaed2dbd1cd3defd641b183a00d2af21f4cbf2", "html_url": "https://github.com/rust-lang/rust/commit/3cfaed2dbd1cd3defd641b183a00d2af21f4cbf2"}, {"sha": "22f11b8eec844624a0285d2d6c6ee47880542636", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f11b8eec844624a0285d2d6c6ee47880542636", "html_url": "https://github.com/rust-lang/rust/commit/22f11b8eec844624a0285d2d6c6ee47880542636"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "86fd5ec46c202218328e514b7540c7769cd7c478", "filename": "tests/compile-fail/ctlz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fctlz_nonzero.rs?ref=669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "patch": "@@ -8,7 +8,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        use rusti::*;\n+        use crate::rusti::*;\n \n         ctlz_nonzero(0u8); //~ ERROR constant evaluation error: ctlz_nonzero called on 0\n     }"}, {"sha": "a6c3b03cfb5c15e12ef21fde591c00020e9b4780", "filename": "tests/compile-fail/cttz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcttz_nonzero.rs?ref=669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "patch": "@@ -8,7 +8,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        use rusti::*;\n+        use crate::rusti::*;\n \n         cttz_nonzero(0u8); //~ ERROR constant evaluation error: cttz_nonzero called on 0\n     }"}, {"sha": "7aa55ef6634081dc7d7ca3105675cd28b1a3b2fc", "filename": "tests/compiletest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "patch": "@@ -62,6 +62,7 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n     let mut flags = Vec::new();\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n+    flags.push(\"--edition 2018\".to_owned());\n     if opt {\n         // Optimizing too aggressivley makes UB detection harder, but test at least\n         // the default value.\n@@ -98,6 +99,7 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n     let mut flags = Vec::new();\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n+    flags.push(\"--edition 2018\".to_owned());\n     if opt {\n         // FIXME: We use opt level 1 because MIR inlining defeats the validation\n         // whitelist."}, {"sha": "b61cfa84ef75249ebbe27595a31d2818b7ba5cea", "filename": "tests/run-pass-fullmir/foreign-fn-linkname.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Frun-pass-fullmir%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Frun-pass-fullmir%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fforeign-fn-linkname.rs?ref=669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "patch": "@@ -9,14 +9,16 @@\n // except according to those terms.\n \n //ignore-windows: Uses POSIX APIs\n-#![feature(libc)]\n+\n+#![feature(libc, extern_crate_item_prelude)]\n+#![allow(unused_extern_crates)] // rustc bug https://github.com/rust-lang/rust/issues/56098\n \n extern crate libc;\n+\n use std::ffi::CString;\n \n mod mlibc {\n     use libc::{c_char, size_t};\n-\n     extern {\n         #[link_name = \"strlen\"]\n         pub fn my_strlen(str: *const c_char) -> size_t;"}, {"sha": "2f5e2c4bb739ed1c814f33f7c115a62f283d7675", "filename": "tests/run-pass-fullmir/memchr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Frun-pass-fullmir%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Frun-pass-fullmir%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fmemchr.rs?ref=669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "patch": "@@ -1,6 +1,5 @@\n #![feature(slice_internals)]\n \n-extern crate core;\n use core::slice::memchr::{memchr, memrchr};\n \n // test fallback implementations on all platforms"}, {"sha": "de59314eff5a06b2bc6efda7b84a06ab10b528ab", "filename": "tests/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-integer.rs?ref=669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "patch": "@@ -23,7 +23,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        use rusti::*;\n+        use crate::rusti::*;\n \n         assert_eq!(ctpop(0u8), 0); assert_eq!(ctpop(0i8), 0);\n         assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);"}, {"sha": "72f26763be14094ff32e9c9d4517f2cff91f8425", "filename": "tests/run-pass/stacked-borrows.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Frun-pass%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8/tests%2Frun-pass%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows.rs?ref=669b9ea5bcd69d4cb5eadb0d91db3fc3d24e68f8", "patch": "@@ -68,13 +68,11 @@ fn mut_shr_raw() {\n // That should work.\n fn mut_raw_then_mut_shr() {\n     let mut x = 2;\n-    {\n-        let xref = &mut x;\n-        let xraw = &mut *xref as *mut _;\n-        let xshr = &*xref;\n-        assert_eq!(*xshr, 2);\n-        unsafe { *xraw = 4; }\n-    }\n+    let xref = &mut x;\n+    let xraw = &mut *xref as *mut _;\n+    let xshr = &*xref;\n+    assert_eq!(*xshr, 2);\n+    unsafe { *xraw = 4; }\n     assert_eq!(x, 4);\n }\n "}]}