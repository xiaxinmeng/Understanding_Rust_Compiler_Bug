{"sha": "e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ODI1YzI5YzMzZGRlNzMzNWU4ZmQ2NGNkMzg2MWFhNjQyOGVhOWI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-25T00:31:26Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:20:19Z"}, "message": "Prefer iterator to vec", "tree": {"sha": "aed3d097f04ffc1c1b6f2751df1307b0bf57b2cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aed3d097f04ffc1c1b6f2751df1307b0bf57b2cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "html_url": "https://github.com/rust-lang/rust/commit/e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "html_url": "https://github.com/rust-lang/rust/commit/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29"}], "stats": {"total": 119, "additions": 55, "deletions": 64}, "files": [{"sha": "735598fd436c88fb305c597e9f3e4652f31929dc", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -1459,10 +1459,9 @@ impl<'a> LoweringContext<'a> {\n                             return n;\n                         }\n                         assert!(!def_id.is_local());\n-                        let n = self.cstore\n-                            .item_generics_cloned_untracked(def_id, self.sess)\n-                            .lifetimes()\n-                            .len();\n+                        let item_generics =\n+                            self.cstore.item_generics_cloned_untracked(def_id, self.sess);\n+                        let n = item_generics.lifetimes().count();\n                         self.type_def_lifetime_params.insert(def_id, n);\n                         n\n                     });"}, {"sha": "225384ed0cb4769082fee338f81e92ba4ea16f22", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -1660,7 +1660,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     .or_insert_with(|| {\n                         tcx.generics_of(def_id)\n                             .types()\n-                            .iter()\n                             .map(|def| def.object_lifetime_default)\n                             .collect()\n                     })"}, {"sha": "00a0d4dc554d57a2b6a474e42cdd7280511c3101", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -378,7 +378,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"_Self\".to_string(), Some(self.tcx.type_of(def.did).to_string())));\n         }\n \n-        for param in generics.types().iter() {\n+        for param in generics.types() {\n             let name = param.name.to_string();\n             let ty = trait_ref.substs.type_for_def(param);\n             let ty_str = ty.to_string();"}, {"sha": "3c82dbd7ad662c61cfbc6f9be7a2c83789bc1b73", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         // We can't monomorphize things like `fn foo<A>(...)`.\n-        if !self.generics_of(method.def_id).types().is_empty() {\n+        if self.generics_of(method.def_id).types().count() != 0 {\n             return Some(MethodViolationCode::Generic);\n         }\n "}, {"sha": "a44dcc7c274e575cc39dce4b14f62dc4ddd86d7d", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -243,7 +243,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n         let parser = Parser::new(&self.0);\n-        let types = generics.types();\n+        let mut types = generics.types();\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -254,7 +254,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                     // `{ThisTraitsName}` is allowed\n                     Position::ArgumentNamed(s) if s == name => (),\n                     // So is `{A}` if A is a type parameter\n-                    Position::ArgumentNamed(s) => match types.iter().find(|t| {\n+                    Position::ArgumentNamed(s) => match types.find(|t| {\n                         t.name == s\n                     }) {\n                         Some(_) => (),\n@@ -288,7 +288,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let name = tcx.item_name(trait_ref.def_id);\n         let trait_str = tcx.item_path_str(trait_ref.def_id);\n         let generics = tcx.generics_of(trait_ref.def_id);\n-        let generic_map = generics.types().iter().map(|param| {\n+        let generic_map = generics.types().map(|param| {\n             (param.name.to_string(),\n              trait_ref.substs.type_for_def(param).to_string())\n         }).collect::<FxHashMap<String, String>>();"}, {"sha": "bf4bc9d3b3e24255ba7022da47c7aa5a33a7d375", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -803,28 +803,28 @@ impl<'a, 'gcx, 'tcx> Generics {\n         self.parent_count + self.own_count()\n     }\n \n-    pub fn lifetimes(&self) -> Vec<&RegionParameterDef> {\n+    pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &RegionParameterDef> {\n         self.params.iter().filter_map(|p| {\n             if let GenericParam::Lifetime(lt) = p {\n                 Some(lt)\n             } else {\n                 None\n             }\n-        }).collect()\n+        })\n     }\n \n-    pub fn types(&self) -> Vec<&TypeParameterDef> {\n+    pub fn types(&self) -> impl DoubleEndedIterator<Item = &TypeParameterDef> {\n         self.params.iter().filter_map(|p| {\n             if let GenericParam::Type(ty) = p {\n                 Some(ty)\n             } else {\n                 None\n             }\n-        }).collect()\n+        })\n     }\n \n     pub fn has_type_parameters(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        if self.types().len() != 0 {\n+        if self.types().count() != 0 {\n             return true;\n         }\n         if let Some(parent_def_id) = self.parent {\n@@ -885,7 +885,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n             // And it can be seen that in both cases, to move from a substs\n             // offset to a generics offset you just have to offset by the\n             // number of regions.\n-            let type_param_offset = self.lifetimes().len();\n+            let type_param_offset = self.lifetimes().count();\n \n             let has_self = self.has_self && self.parent.is_none();\n             let is_separated_self = type_param_offset != 0 && idx == 0 && has_self;"}, {"sha": "2f4daf61a074c095081afee0a8ff8b28b3a8bb60", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -242,8 +242,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     where FR: FnMut(&ty::RegionParameterDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n           FT: FnMut(&ty::TypeParameterDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n         // Handle Self first, before all regions.\n-        let types = defs.types();\n-        let mut types = types.iter();\n+        let mut types = defs.types();\n         let mut skip_self = defs.parent.is_none() && defs.has_self;\n         if skip_self {\n             let def = types.next().unwrap();"}, {"sha": "431fd59e02cb35f19ddf4c67cb90e548f0931472", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -310,10 +310,10 @@ impl PrintContext {\n             if let Some(def_id) = generics.parent {\n                 // Methods.\n                 assert!(is_value_path);\n-                child_types = generics.types().len();\n+                child_types = generics.types().count();\n                 generics = tcx.generics_of(def_id);\n-                num_regions = generics.lifetimes().len();\n-                num_types = generics.types().len();\n+                num_regions = generics.lifetimes().count();\n+                num_types = generics.types().count();\n \n                 if has_self {\n                     print!(f, self, write(\"<\"), print_display(substs.type_at(0)), write(\" as \"))?;\n@@ -328,16 +328,16 @@ impl PrintContext {\n                     assert_eq!(has_self, false);\n                 } else {\n                     // Types and traits.\n-                    num_regions = generics.lifetimes().len();\n-                    num_types = generics.types().len();\n+                    num_regions = generics.lifetimes().count();\n+                    num_types = generics.types().count();\n                 }\n             }\n \n             if !verbose {\n                 if generics.types().last().map_or(false, |def| def.has_default) {\n                     if let Some(substs) = tcx.lift(&substs) {\n                         let tps = substs.types().rev().skip(child_types);\n-                        for (def, actual) in generics.types().iter().rev().zip(tps) {\n+                        for (def, actual) in generics.types().rev().zip(tps) {\n                             if !def.has_default {\n                                 break;\n                             }"}, {"sha": "8646df02e5108c803389131540205c105d15a129", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -1108,7 +1108,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         continue;\n                     }\n \n-                    if !tcx.generics_of(method.def_id).types().is_empty() {\n+                    if tcx.generics_of(method.def_id).types().count() != 0 {\n                         continue;\n                     }\n "}, {"sha": "68b8b256f290d4c86e774d76ae8ec0e65a2e7277", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -357,7 +357,7 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n \n     // FIXME: when we make this a hard error, this should have its\n     // own error code.\n-    let message = if !tcx.generics_of(def_id).types().is_empty() {\n+    let message = if tcx.generics_of(def_id).types().count() != 0 {\n         format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n                  type parameters (error E0133)\")\n     } else {"}, {"sha": "d590210925597ddd97351c0af3173f4f8e825623", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n \n impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        for def in &self.ev.tcx.generics_of(self.item_def_id).types() {\n+        for def in self.ev.tcx.generics_of(self.item_def_id).types() {\n             if def.has_default {\n                 self.ev.tcx.type_of(def.def_id).visit_with(self);\n             }\n@@ -1335,7 +1335,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        for def in &self.tcx.generics_of(self.item_def_id).types() {\n+        for def in self.tcx.generics_of(self.item_def_id).types() {\n             if def.has_default {\n                 self.tcx.type_of(def.def_id).visit_with(self);\n             }"}, {"sha": "1282626974df03ea41c4a05168381e3f262a3182", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -417,7 +417,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         let mut names = generics.parent.map_or(vec![], |def_id| {\n             get_type_parameter_names(cx, cx.tcx.generics_of(def_id))\n         });\n-        names.extend(generics.types().iter().map(|param| param.name));\n+        names.extend(generics.types().map(|param| param.name));\n         names\n     }\n "}, {"sha": "fab8eec35f3b4f6cece3c4d6bd672faa4192bf60", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -209,7 +209,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         // whatever & would get replaced with).\n         let decl_generics = tcx.generics_of(def_id);\n         let num_types_provided = parameters.types.len();\n-        let expected_num_region_params = decl_generics.lifetimes().len();\n+        let expected_num_region_params = decl_generics.lifetimes().count();\n         let supplied_num_region_params = parameters.lifetimes.len();\n         if expected_num_region_params != supplied_num_region_params {\n             report_lifetime_number_error(tcx, span,\n@@ -221,9 +221,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         assert_eq!(decl_generics.has_self, self_ty.is_some());\n \n         // Check the number of type parameters supplied by the user.\n-        let ty_param_defs = &decl_generics.types()[self_ty.is_some() as usize..];\n+        let ty_param_defs =\n+            decl_generics.types().skip(self_ty.is_some() as usize).collect::<Vec<_>>();\n         if !infer_types || num_types_provided > ty_param_defs.len() {\n-            check_type_argument_count(tcx, span, num_types_provided, ty_param_defs);\n+            check_type_argument_count(tcx, span, num_types_provided, &ty_param_defs);\n         }\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n@@ -254,7 +255,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 return ty;\n             }\n \n-            let i = i - self_ty.is_some() as usize - decl_generics.lifetimes().len();\n+            let i = i - self_ty.is_some() as usize - decl_generics.lifetimes().count();\n             if i < num_types_provided {\n                 // A provided type parameter.\n                 self.ast_ty_to_ty(&parameters.types[i])"}, {"sha": "30620caf6927490431ec1985285aa11d7b6c33f2", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -377,7 +377,7 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // but found 0\" it's confusing, because it looks like there\n     // are zero. Since I don't quite know how to phrase things at\n     // the moment, give a kind of vague error message.\n-    if trait_params.len() != impl_params.len() {\n+    if trait_params.count() != impl_params.count() {\n         let mut err = struct_span_err!(tcx.sess,\n                                        span,\n                                        E0195,\n@@ -574,8 +574,8 @@ fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         -> Result<(), ErrorReported> {\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n-    let num_impl_m_type_params = impl_m_generics.types().len();\n-    let num_trait_m_type_params = trait_m_generics.types().len();\n+    let num_impl_m_type_params = impl_m_generics.types().count();\n+    let num_trait_m_type_params = trait_m_generics.types().count();\n     if num_impl_m_type_params != num_trait_m_type_params {\n         let impl_m_node_id = tcx.hir.as_local_node_id(impl_m.def_id).unwrap();\n         let impl_m_item = tcx.hir.expect_impl_item(impl_m_node_id);\n@@ -728,7 +728,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut error_found = false;\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n-    for (impl_ty, trait_ty) in impl_m_generics.types().iter().zip(trait_m_generics.types().iter()) {\n+    for (impl_ty, trait_ty) in impl_m_generics.types().zip(trait_m_generics.types()) {\n         if impl_ty.synthetic != trait_ty.synthetic {\n             let impl_node_id = tcx.hir.as_local_node_id(impl_ty.def_id).unwrap();\n             let impl_span = tcx.hir.span(impl_node_id);"}, {"sha": "e2deca38302cdc3db162a07de337b761d3b67cef", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -45,7 +45,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    let i_n_tps = tcx.generics_of(def_id).types().len();\n+    let i_n_tps = tcx.generics_of(def_id).types().count();\n     if i_n_tps != n_tps {\n         let span = match it.node {\n             hir::ForeignItemFn(_, _, ref generics) => generics.span,\n@@ -346,7 +346,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     let def_id = tcx.hir.local_def_id(it.id);\n-    let i_n_tps = tcx.generics_of(def_id).types().len();\n+    let i_n_tps = tcx.generics_of(def_id).types().count();\n     let name = it.name.as_str();\n \n     let (n_tps, inputs, output) = match &*name {"}, {"sha": "f075cd911ad9e61c6cfba2478838f70b2e65c6a6", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                 parent_substs.type_at(i)\n             } else if let Some(ast_ty)\n                 = provided.as_ref().and_then(|p| {\n-                    p.types.get(i - parent_substs.len() - method_generics.lifetimes().len())\n+                    p.types.get(i - parent_substs.len() - method_generics.lifetimes().count())\n                 })\n             {\n                 self.to_ty(ast_ty)"}, {"sha": "b6f3d5a80d64c64e533fb11b2c0c94ff5e73458c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -1239,7 +1239,7 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n         } else {\n             for item in &m.items {\n                 let generics = tcx.generics_of(tcx.hir.local_def_id(item.id));\n-                if !generics.types().is_empty() {\n+                if generics.types().count() != 0 {\n                     let mut err = struct_span_err!(tcx.sess, item.span, E0044,\n                         \"foreign items may not have type parameters\");\n                     err.span_label(item.span, \"can't have type parameters\");\n@@ -4799,7 +4799,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             // Skip over the lifetimes in the same segment.\n             if let Some((_, generics)) = segment {\n-                i -= generics.lifetimes().len();\n+                i -= generics.lifetimes().count();\n             }\n \n             if let Some(ast_ty) = types.get(i) {\n@@ -4920,9 +4920,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Check provided type parameters.\n         let type_defs = segment.map_or(vec![], |(_, generics)| {\n             if generics.parent.is_none() {\n-                generics.types()[generics.has_self as usize..].to_vec()\n+                generics.types().skip(generics.has_self as usize).collect()\n             } else {\n-                generics.types()\n+                generics.types().collect()\n             }\n         });\n         let required_len = type_defs.iter().take_while(|d| !d.has_default).count();\n@@ -4957,7 +4957,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         // Check provided lifetime parameters.\n-        let lifetime_defs = segment.map_or(vec![], |(_, generics)| generics.lifetimes());\n+        let lifetime_defs = segment.map_or(vec![], |(_, generics)| generics.lifetimes().collect());\n         let required_len = lifetime_defs.len();\n \n         // Prohibit explicit lifetime arguments if late bound lifetime parameters are present.\n@@ -4968,7 +4968,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let primary_msg = \"cannot specify lifetime arguments explicitly \\\n                                if late bound lifetime parameters are present\";\n             let note_msg = \"the late bound lifetime parameter is introduced here\";\n-            if !is_method_call && (lifetimes.len() > lifetime_defs.len() ||\n+            if !is_method_call && (lifetimes.len() > required_len ||\n                                    lifetimes.len() < required_len && !infer_lifetimes) {\n                 let mut err = self.tcx.sess.struct_span_err(lifetimes[0].span, primary_msg);\n                 err.span_note(span_late, note_msg);\n@@ -4983,9 +4983,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             return;\n         }\n \n-        if lifetimes.len() > lifetime_defs.len() {\n-            let span = lifetimes[lifetime_defs.len()].span;\n-            let expected_text = count_lifetime_params(lifetime_defs.len());\n+        if lifetimes.len() > required_len {\n+            let span = lifetimes[required_len].span;\n+            let expected_text = count_lifetime_params(required_len);\n             let actual_text = count_lifetime_params(lifetimes.len());\n             struct_span_err!(self.tcx.sess, span, E0088,\n                              \"too many lifetime parameters provided: \\\n@@ -4994,7 +4994,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 .span_label(span, format!(\"expected {}\", expected_text))\n                 .emit();\n         } else if lifetimes.len() < required_len && !infer_lifetimes {\n-            let expected_text = count_lifetime_params(lifetime_defs.len());\n+            let expected_text = count_lifetime_params(required_len);\n             let actual_text = count_lifetime_params(lifetimes.len());\n             struct_span_err!(self.tcx.sess, span, E0090,\n                              \"too few lifetime parameters provided: \\\n@@ -5014,8 +5014,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let segment = segment.map(|(path_segment, generics)| {\n             let explicit = !path_segment.infer_types;\n-            let impl_trait = generics.types().iter()\n-                                             .any(|ty_param| {\n+            let impl_trait = generics.types().any(|ty_param| {\n                                                  match ty_param.synthetic {\n                                                      Some(ImplTrait) => true,\n                                                      _ => false,"}, {"sha": "2fafee3a6582c309c5d38b3ac5a95bf45fc8e7cc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -642,7 +642,6 @@ fn reject_shadowing_type_parameters(tcx: TyCtxt, def_id: DefId) {\n     let generics = tcx.generics_of(def_id);\n     let parent = tcx.generics_of(generics.parent.unwrap());\n     let impl_params: FxHashMap<_, _> = parent.types()\n-                                             .iter()\n                                              .map(|tp| (tp.name, tp.def_id))\n                                              .collect();\n "}, {"sha": "60a998db3594fbda546fc752258f63fb74d96a52", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -105,7 +105,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx, &impl_predicates.predicates.as_slice(), impl_trait_ref, &mut input_parameters);\n \n     // Disallow ANY unconstrained type parameters.\n-    for (ty_param, param) in impl_generics.types().iter().zip(impl_hir_generics.ty_params()) {\n+    for (ty_param, param) in impl_generics.types().zip(impl_hir_generics.ty_params()) {\n         let param_ty = ty::ParamTy::for_def(ty_param);\n         if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n             report_unused_parameter(tcx, param.span, \"type\", &param_ty.to_string());\n@@ -114,23 +114,19 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Disallow unconstrained lifetimes, but only if they appear in assoc types.\n     let lifetimes_in_associated_types: FxHashSet<_> = impl_item_refs.iter()\n-        .map(|item_ref|  tcx.hir.local_def_id(item_ref.id.node_id))\n+        .map(|item_ref| tcx.hir.local_def_id(item_ref.id.node_id))\n         .filter(|&def_id| {\n             let item = tcx.associated_item(def_id);\n             item.kind == ty::AssociatedKind::Type && item.defaultness.has_value()\n         })\n         .flat_map(|def_id| {\n             ctp::parameters_for(&tcx.type_of(def_id), true)\n         }).collect();\n-    for (ty_lifetime, lifetime) in impl_generics.lifetimes().iter()\n-        .zip(impl_hir_generics.lifetimes())\n-    {\n+    for (ty_lifetime, lifetime) in impl_generics.lifetimes().zip(impl_hir_generics.lifetimes()) {\n         let param = ctp::Parameter::from(ty_lifetime.to_early_bound_region_data());\n \n-        if\n-            lifetimes_in_associated_types.contains(&param) && // (*)\n-            !input_parameters.contains(&param)\n-        {\n+        if lifetimes_in_associated_types.contains(&param) && // (*)\n+            !input_parameters.contains(&param) {\n             report_unused_parameter(tcx, lifetime.lifetime.span,\n                                     \"lifetime\", &lifetime.lifetime.name.name().to_string());\n         }"}, {"sha": "ea7371f0647261ad1937721183967cfea690a283", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -226,7 +226,6 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     fn generics_to_path_params(&self, generics: ty::Generics) -> hir::PathParameters {\n         let lifetimes = HirVec::from_vec(\n             generics.lifetimes()\n-                    .iter()\n                     .map(|p| {\n                         let name = if p.name == \"\" {\n                             hir::LifetimeName::Static"}, {"sha": "25ca42db67e4566ff18df6b16bdcc00d82d54301", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5825c29c33dde7335e8fd64cd3861aa6428ea9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e5825c29c33dde7335e8fd64cd3861aa6428ea9b", "patch": "@@ -1800,7 +1800,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         // Bounds in the type_params and lifetimes fields are repeated in the\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n-        let stripped_typarams = gens.types().iter().filter_map(|tp| {\n+        let stripped_typarams = gens.types().filter_map(|tp| {\n             if tp.name == keywords::SelfType.name().as_str() {\n                 assert_eq!(tp.index, 0);\n                 None"}]}