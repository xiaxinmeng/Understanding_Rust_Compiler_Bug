{"sha": "ffaa47736866ca89b8d23cd3f14d54efefdb6243", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYWE0NzczNjg2NmNhODliOGQyM2NkM2YxNGQ1NGVmZWZkYjYyNDM=", "commit": {"author": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2012-12-23T22:38:01Z"}, "committer": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2012-12-23T22:38:01Z"}, "message": "std: Mark some functions as pure", "tree": {"sha": "b50b45c4598ce48f3dc62610d299ee76ba74ce88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b50b45c4598ce48f3dc62610d299ee76ba74ce88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffaa47736866ca89b8d23cd3f14d54efefdb6243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaa47736866ca89b8d23cd3f14d54efefdb6243", "html_url": "https://github.com/rust-lang/rust/commit/ffaa47736866ca89b8d23cd3f14d54efefdb6243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffaa47736866ca89b8d23cd3f14d54efefdb6243/comments", "author": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d8621ae7f0df0bc3878c256b98a6483fc3d9a32", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8621ae7f0df0bc3878c256b98a6483fc3d9a32", "html_url": "https://github.com/rust-lang/rust/commit/6d8621ae7f0df0bc3878c256b98a6483fc3d9a32"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "9054f9355ad87950414baed577a4b81a6b1be532", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffaa47736866ca89b8d23cd3f14d54efefdb6243/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaa47736866ca89b8d23cd3f14d54efefdb6243/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=ffaa47736866ca89b8d23cd3f14d54efefdb6243", "patch": "@@ -95,7 +95,7 @@ pub fn Arena() -> Arena {\n }\n \n #[inline(always)]\n-fn round_up_to(base: uint, align: uint) -> uint {\n+pure fn round_up_to(base: uint, align: uint) -> uint {\n     (base + (align - 1)) & !(align - 1)\n }\n "}, {"sha": "cc8cadb709d940400e55dd9a42f9d0eca3c0471b", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffaa47736866ca89b8d23cd3f14d54efefdb6243/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaa47736866ca89b8d23cd3f14d54efefdb6243/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=ffaa47736866ca89b8d23cd3f14d54efefdb6243", "patch": "@@ -135,7 +135,7 @@ pub fn set<T: Copy>(t: CVec<T>, ofs: uint, v: T) {\n  */\n \n /// Returns the length of the vector\n-pub fn len<T>(t: CVec<T>) -> uint {\n+pub pure fn len<T>(t: CVec<T>) -> uint {\n     return (*t).len;\n }\n "}, {"sha": "e41aab8ec1ffb5d4a5e5e920b9cf255a6dc1a6e8", "filename": "src/libstd/list.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffaa47736866ca89b8d23cd3f14d54efefdb6243/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaa47736866ca89b8d23cd3f14d54efefdb6243/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=ffaa47736866ca89b8d23cd3f14d54efefdb6243", "patch": "@@ -22,8 +22,8 @@ pub enum List<T> {\n     Nil,\n }\n \n-/// Cregate a list from a vector\n-pub fn from_vec<T: Copy>(v: &[T]) -> @List<T> {\n+/// Create a list from a vector\n+pub pure fn from_vec<T: Copy>(v: &[T]) -> @List<T> {\n     vec::foldr(v, @Nil::<T>, |h, t| @Cons(*h, t))\n }\n \n@@ -53,7 +53,7 @@ pub fn foldl<T: Copy, U>(z: T, ls: @List<U>, f: fn(&T, &U) -> T) -> T {\n  * When function `f` returns true then an option containing the element\n  * is returned. If `f` matches no elements then none is returned.\n  */\n-pub fn find<T: Copy>(ls: @List<T>, f: fn(&T) -> bool) -> Option<T> {\n+pub pure fn find<T: Copy>(ls: @List<T>, f: fn(&T) -> bool) -> Option<T> {\n     let mut ls = ls;\n     loop {\n         ls = match *ls {\n@@ -88,7 +88,7 @@ pub pure fn is_not_empty<T: Copy>(ls: @List<T>) -> bool {\n }\n \n /// Returns the length of a list\n-pub fn len<T>(ls: @List<T>) -> uint {\n+pub pure fn len<T>(ls: @List<T>) -> uint {\n     let mut count = 0u;\n     iter(ls, |_e| count += 1u);\n     count\n@@ -131,7 +131,7 @@ pure fn push<T: Copy>(ll: &mut @list<T>, vv: T) {\n */\n \n /// Iterate over a list\n-pub fn iter<T>(l: @List<T>, f: fn(&T)) {\n+pub pure fn iter<T>(l: @List<T>, f: fn(&T)) {\n     let mut cur = l;\n     loop {\n         cur = match *cur {\n@@ -145,7 +145,7 @@ pub fn iter<T>(l: @List<T>, f: fn(&T)) {\n }\n \n /// Iterate over a list\n-pub fn each<T>(l: @List<T>, f: fn(&T) -> bool) {\n+pub pure fn each<T>(l: @List<T>, f: fn(&T) -> bool) {\n     let mut cur = l;\n     loop {\n         cur = match *cur {"}, {"sha": "aa78d22e4c8ddaaf816c5605143edd35391a404a", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffaa47736866ca89b8d23cd3f14d54efefdb6243/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaa47736866ca89b8d23cd3f14d54efefdb6243/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=ffaa47736866ca89b8d23cd3f14d54efefdb6243", "patch": "@@ -43,7 +43,7 @@ pub type Rope = node::Root;\n  */\n \n /// Create an empty rope\n-pub fn empty() -> Rope {\n+pub pure fn empty() -> Rope {\n    return node::Empty;\n }\n \n@@ -479,7 +479,7 @@ pub mod iterator {\n  *\n  * Constant time.\n  */\n-pub fn height(rope: Rope) -> uint {\n+pub pure fn height(rope: Rope) -> uint {\n    match (rope) {\n       node::Empty      => return 0u,\n       node::Content(x) => return node::height(x)\n@@ -1019,7 +1019,7 @@ mod node {\n                     })\n     }\n \n-    pub fn height(node: @Node) -> uint {\n+    pub pure fn height(node: @Node) -> uint {\n         match (*node) {\n           Leaf(_)   => return 0u,\n           Concat(ref x) => return x.height\n@@ -1100,7 +1100,7 @@ mod node {\n      * proportional to the height of the rope + the (bounded)\n      * length of the largest leaf.\n      */\n-    pub fn char_at(node: @Node, pos: uint) -> char {\n+    pub pure fn char_at(node: @Node, pos: uint) -> char {\n         let mut node    = node;\n         let mut pos     = pos;\n         loop {"}]}