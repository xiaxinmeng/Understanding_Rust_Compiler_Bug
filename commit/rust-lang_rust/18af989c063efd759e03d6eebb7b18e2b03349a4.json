{"sha": "18af989c063efd759e03d6eebb7b18e2b03349a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YWY5ODljMDYzZWZkNzU5ZTAzZDZlZWJiN2IxOGUyYjAzMzQ5YTQ=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-04-01T20:49:05Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-04-01T20:49:31Z"}, "message": "Update lint message", "tree": {"sha": "0a18f6080c8683c9905c368e785df8ac65e1f7cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a18f6080c8683c9905c368e785df8ac65e1f7cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18af989c063efd759e03d6eebb7b18e2b03349a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18af989c063efd759e03d6eebb7b18e2b03349a4", "html_url": "https://github.com/rust-lang/rust/commit/18af989c063efd759e03d6eebb7b18e2b03349a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18af989c063efd759e03d6eebb7b18e2b03349a4/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78fac56015ca2d926237704b02e555604a99e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78fac56015ca2d926237704b02e555604a99e9d", "html_url": "https://github.com/rust-lang/rust/commit/e78fac56015ca2d926237704b02e555604a99e9d"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "cd93cbbe965a10f9dcc037fc23e576333ec4e961", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/18af989c063efd759e03d6eebb7b18e2b03349a4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18af989c063efd759e03d6eebb7b18e2b03349a4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=18af989c063efd759e03d6eebb7b18e2b03349a4", "patch": "@@ -479,7 +479,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n \n         if !need_migrations.is_empty() {\n-            let migrations_text = migration_suggestion_for_2229(self.tcx, &need_migrations);\n+            let (migration_string, migrated_variables_concat) =\n+                migration_suggestion_for_2229(self.tcx, &need_migrations);\n \n             let local_def_id = closure_def_id.expect_local();\n             let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n@@ -495,15 +496,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let (sugg, app) =\n                         match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n                             Ok(s) => (\n-                                format!(\"{{ {} {} }}\", migrations_text, s),\n+                                format!(\"{{ {}; {} }}\", migration_string, s),\n                                 Applicability::MachineApplicable,\n                             ),\n-                            Err(_) => (migrations_text.clone(), Applicability::HasPlaceholders),\n+                            Err(_) => (migration_string.clone(), Applicability::HasPlaceholders),\n                         };\n \n+                    let diagnostic_msg = format!(\n+                        \"`{}` causes {} to be fully captured\",\n+                        migration_string, migrated_variables_concat\n+                    );\n+\n                     diagnostics_builder.span_suggestion(\n                         closure_body_span,\n-                        &format!(\"You can restore original behavior adding `{}` to the closure/generator\", migrations_text),\n+                        &diagnostic_msg,\n                         sugg,\n                         app,\n                     );\n@@ -1537,16 +1543,29 @@ fn should_do_migration_analysis(tcx: TyCtxt<'_>, closure_id: hir::HirId) -> bool\n     !matches!(level, lint::Level::Allow)\n }\n \n-fn migration_suggestion_for_2229(tcx: TyCtxt<'_>, need_migrations: &Vec<hir::HirId>) -> String {\n-    let need_migrations_strings =\n-        need_migrations.iter().map(|v| format!(\"&{}\", var_name(tcx, *v))).collect::<Vec<_>>();\n-    let migrations_list_concat = need_migrations_strings.join(\", \");\n+/// Return a two string tuple (s1, s2)\n+/// - s1: Line of code that is needed for the migration: eg: `let _ = (&x, ...)`.\n+/// - s2: Comma separated names of the variables being migrated.\n+fn migration_suggestion_for_2229(\n+    tcx: TyCtxt<'_>,\n+    need_migrations: &Vec<hir::HirId>,\n+) -> (String, String) {\n+    let need_migrations_variables =\n+        need_migrations.iter().map(|v| var_name(tcx, *v)).collect::<Vec<_>>();\n+\n+    let migration_ref_concat =\n+        need_migrations_variables.iter().map(|v| format!(\"&{}\", v)).collect::<Vec<_>>().join(\", \");\n \n-    if 1 == need_migrations.len() {\n-        format!(\"let _ = {};\", migrations_list_concat)\n+    let migration_string = if 1 == need_migrations.len() {\n+        format!(\"let _ = {}\", migration_ref_concat)\n     } else {\n-        format!(\"let _ = ({});\", migrations_list_concat)\n-    }\n+        format!(\"let _ = ({})\", migration_ref_concat)\n+    };\n+\n+    let migrated_variables_concat =\n+        need_migrations_variables.iter().map(|v| format!(\"`{}`\", v)).collect::<Vec<_>>().join(\", \");\n+\n+    (migration_string, migrated_variables_concat)\n }\n \n /// Helper function to determine if we need to escalate CaptureKind from"}]}