{"sha": "c8578c1f40021b881e432a782134dad40826c5ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NTc4YzFmNDAwMjFiODgxZTQzMmE3ODIxMzRkYWQ0MDgyNmM1ZWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-11T21:11:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-12T01:17:58Z"}, "message": "Rollup merge of #32186 - srinivasreddy:libcoretest, r=steveklabnik\n\ncleanup int suffixes in libcoretest", "tree": {"sha": "bea57c9a7c4244ad8b92c1f5d0f48514462ced9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea57c9a7c4244ad8b92c1f5d0f48514462ced9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8578c1f40021b881e432a782134dad40826c5ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8578c1f40021b881e432a782134dad40826c5ed", "html_url": "https://github.com/rust-lang/rust/commit/c8578c1f40021b881e432a782134dad40826c5ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8578c1f40021b881e432a782134dad40826c5ed/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667dcebaf9dcbb896da57e7c07bf80759a5dad10", "url": "https://api.github.com/repos/rust-lang/rust/commits/667dcebaf9dcbb896da57e7c07bf80759a5dad10", "html_url": "https://github.com/rust-lang/rust/commit/667dcebaf9dcbb896da57e7c07bf80759a5dad10"}, {"sha": "e1cc628549020207e07ce8271478f7baff602757", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cc628549020207e07ce8271478f7baff602757", "html_url": "https://github.com/rust-lang/rust/commit/e1cc628549020207e07ce8271478f7baff602757"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "e71e61bda5efdec258bf7a5d81f302d17b66ba38", "filename": "src/libcoretest/fmt/builders.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fbuilders.rs?ref=c8578c1f40021b881e432a782134dad40826c5ed", "patch": "@@ -53,7 +53,7 @@ mod debug_struct {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\")\n                     .field(\"bar\", &true)\n-                    .field(\"baz\", &format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .field(\"baz\", &format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }\n@@ -75,7 +75,7 @@ mod debug_struct {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\")\n                     .field(\"bar\", &true)\n-                    .field(\"baz\", &format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .field(\"baz\", &format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }\n@@ -150,7 +150,7 @@ mod debug_tuple {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\")\n                     .field(&true)\n-                    .field(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .field(&format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }\n@@ -172,7 +172,7 @@ mod debug_tuple {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\")\n                     .field(&true)\n-                    .field(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .field(&format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }\n@@ -247,7 +247,7 @@ mod debug_map {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"bar\", &true)\n-                    .entry(&10i32, &format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .entry(&10, &format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }\n@@ -269,7 +269,7 @@ mod debug_map {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"bar\", &true)\n-                    .entry(&10i32, &format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .entry(&10, &format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }\n@@ -348,7 +348,7 @@ mod debug_set {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&true)\n-                    .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .entry(&format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }\n@@ -370,7 +370,7 @@ mod debug_set {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&true)\n-                    .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .entry(&format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }\n@@ -445,7 +445,7 @@ mod debug_list {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&true)\n-                    .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .entry(&format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }\n@@ -467,7 +467,7 @@ mod debug_list {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&true)\n-                    .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .entry(&format_args!(\"{}/{}\", 10, 20))\n                     .finish()\n             }\n         }"}, {"sha": "6c0cb03b5f775db269b4de142ab681b201ce7f5b", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=c8578c1f40021b881e432a782134dad40826c5ed", "patch": "@@ -677,7 +677,7 @@ fn test_rev() {\n \n #[test]\n fn test_cloned() {\n-    let xs = [2u8, 4, 6, 8];\n+    let xs = [2, 4, 6, 8];\n \n     let mut it = xs.iter().cloned();\n     assert_eq!(it.len(), 4);\n@@ -861,8 +861,8 @@ fn test_range() {\n     assert_eq!((-10..-1).size_hint(), (9, Some(9)));\n     assert_eq!((-1..-10).size_hint(), (0, Some(0)));\n \n-    assert_eq!((-70..58i8).size_hint(), (128, Some(128)));\n-    assert_eq!((-128..127i8).size_hint(), (255, Some(255)));\n+    assert_eq!((-70..58).size_hint(), (128, Some(128)));\n+    assert_eq!((-128..127).size_hint(), (255, Some(255)));\n     assert_eq!((-2..isize::MAX).size_hint(),\n                (isize::MAX as usize + 2, Some(isize::MAX as usize + 2)));\n }\n@@ -1013,7 +1013,7 @@ fn bench_max_by_key2(b: &mut Bencher) {\n         array.iter().enumerate().max_by_key(|&(_, item)| item).unwrap().0\n     }\n \n-    let mut data = vec![0i32; 1638];\n+    let mut data = vec![0; 1638];\n     data[514] = 9999;\n \n     b.iter(|| max_index_iter(&data));"}, {"sha": "8d791283ab87ebd22846667445f7414dc53a60b9", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=c8578c1f40021b881e432a782134dad40826c5ed", "patch": "@@ -208,11 +208,11 @@ mod tests {\n     fn test_pow() {\n         let mut r = 2 as $T;\n \n-        assert_eq!(r.pow(2u32), 4 as $T);\n-        assert_eq!(r.pow(0u32), 1 as $T);\n+        assert_eq!(r.pow(2), 4 as $T);\n+        assert_eq!(r.pow(0), 1 as $T);\n         r = -2 as $T;\n-        assert_eq!(r.pow(2u32), 4 as $T);\n-        assert_eq!(r.pow(3u32), -8 as $T);\n+        assert_eq!(r.pow(2), 4 as $T);\n+        assert_eq!(r.pow(3), -8 as $T);\n     }\n }\n "}, {"sha": "11c1bd667fb366d2da3709d99414becfcdadb4b0", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=c8578c1f40021b881e432a782134dad40826c5ed", "patch": "@@ -99,8 +99,8 @@ mod tests {\n \n     #[test]\n     fn test_leading_plus() {\n-        assert_eq!(\"+127\".parse::<u8>().ok(), Some(127u8));\n-        assert_eq!(\"+9223372036854775807\".parse::<i64>().ok(), Some(9223372036854775807i64));\n+        assert_eq!(\"+127\".parse::<u8>().ok(), Some(127));\n+        assert_eq!(\"+9223372036854775807\".parse::<i64>().ok(), Some(9223372036854775807));\n     }\n \n     #[test]"}, {"sha": "51b0655f680f6186857c7e07cdedaa640326ab16", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8578c1f40021b881e432a782134dad40826c5ed/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=c8578c1f40021b881e432a782134dad40826c5ed", "patch": "@@ -251,7 +251,7 @@ fn test_collect() {\n \n #[test]\n fn test_cloned() {\n-    let val = 1u32;\n+    let val = 1;\n     let val_ref = &val;\n     let opt_none: Option<&'static u32> = None;\n     let opt_ref = Some(&val);\n@@ -263,10 +263,10 @@ fn test_cloned() {\n \n     // Immutable ref works\n     assert_eq!(opt_ref.clone(), Some(&val));\n-    assert_eq!(opt_ref.cloned(), Some(1u32));\n+    assert_eq!(opt_ref.cloned(), Some(1));\n \n     // Double Immutable ref works\n     assert_eq!(opt_ref_ref.clone(), Some(&val_ref));\n     assert_eq!(opt_ref_ref.clone().cloned(), Some(&val));\n-    assert_eq!(opt_ref_ref.cloned().cloned(), Some(1u32));\n+    assert_eq!(opt_ref_ref.cloned().cloned(), Some(1));\n }"}]}