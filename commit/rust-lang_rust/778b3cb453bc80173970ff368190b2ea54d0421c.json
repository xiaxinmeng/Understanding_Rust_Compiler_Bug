{"sha": "778b3cb453bc80173970ff368190b2ea54d0421c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OGIzY2I0NTNiYzgwMTczOTcwZmYzNjgxOTBiMmVhNTRkMDQyMWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-12T23:18:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-15T00:57:45Z"}, "message": "Add `MarkdownHmtl` escape struct\n\n`MarkdownHtml` structs escape HTML tags from its text.", "tree": {"sha": "a0b9cbeb6a80fc7f29cb9a6316565568880453dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0b9cbeb6a80fc7f29cb9a6316565568880453dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/778b3cb453bc80173970ff368190b2ea54d0421c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/778b3cb453bc80173970ff368190b2ea54d0421c", "html_url": "https://github.com/rust-lang/rust/commit/778b3cb453bc80173970ff368190b2ea54d0421c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/778b3cb453bc80173970ff368190b2ea54d0421c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ae2245a4e89d90f8bacef1d1d05fcf7461596fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae2245a4e89d90f8bacef1d1d05fcf7461596fe", "html_url": "https://github.com/rust-lang/rust/commit/1ae2245a4e89d90f8bacef1d1d05fcf7461596fe"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "b4f86c1ae77aec0ea5679e237e5abb5b1e962487", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/778b3cb453bc80173970ff368190b2ea54d0421c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778b3cb453bc80173970ff368190b2ea54d0421c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=778b3cb453bc80173970ff368190b2ea54d0421c", "patch": "@@ -49,6 +49,8 @@ pub struct Markdown<'a>(pub &'a str);\n /// A unit struct like `Markdown`, that renders the markdown with a\n /// table of contents.\n pub struct MarkdownWithToc<'a>(pub &'a str);\n+/// A unit struct like `Markdown`, that renders the markdown escaping HTML tags.\n+pub struct MarkdownHtml<'a>(pub &'a str);\n \n const DEF_OUNIT: libc::size_t = 64;\n const HOEDOWN_EXT_NO_INTRA_EMPHASIS: libc::c_uint = 1 << 11;\n@@ -58,6 +60,7 @@ const HOEDOWN_EXT_AUTOLINK: libc::c_uint = 1 << 3;\n const HOEDOWN_EXT_STRIKETHROUGH: libc::c_uint = 1 << 4;\n const HOEDOWN_EXT_SUPERSCRIPT: libc::c_uint = 1 << 8;\n const HOEDOWN_EXT_FOOTNOTES: libc::c_uint = 1 << 2;\n+const HOEDOWN_HTML_ESCAPE: libc::c_uint = 1 << 1;\n \n const HOEDOWN_EXTENSIONS: libc::c_uint =\n     HOEDOWN_EXT_NO_INTRA_EMPHASIS | HOEDOWN_EXT_TABLES |\n@@ -220,7 +223,11 @@ thread_local!(pub static PLAYGROUND: RefCell<Option<(Option<String>, String)>> =\n     RefCell::new(None)\n });\n \n-pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n+\n+pub fn render(w: &mut fmt::Formatter,\n+              s: &str,\n+              print_toc: bool,\n+              html_flags: libc::c_uint) -> fmt::Result {\n     extern fn block(ob: *mut hoedown_buffer, orig_text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer, data: *const hoedown_renderer_data) {\n         unsafe {\n@@ -383,7 +390,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n \n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n-        let renderer = hoedown_html_renderer_new(0, 0);\n+        let renderer = hoedown_html_renderer_new(html_flags, 0);\n         let mut opaque = MyOpaque {\n             dfltblk: (*renderer).blockcode.unwrap(),\n             toc_builder: if print_toc {Some(TocBuilder::new())} else {None}\n@@ -553,14 +560,23 @@ impl<'a> fmt::Display for Markdown<'a> {\n         let Markdown(md) = *self;\n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n-        render(fmt, md, false)\n+        render(fmt, md, false, 0)\n     }\n }\n \n impl<'a> fmt::Display for MarkdownWithToc<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let MarkdownWithToc(md) = *self;\n-        render(fmt, md, true)\n+        render(fmt, md, true, 0)\n+    }\n+}\n+\n+impl<'a> fmt::Display for MarkdownHtml<'a> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        let MarkdownHtml(md) = *self;\n+        // This is actually common enough to special-case\n+        if md.is_empty() { return Ok(()) }\n+        render(fmt, md, false, HOEDOWN_HTML_ESCAPE)\n     }\n }\n "}, {"sha": "e21898499a3ce30a76770c2c8d589582836b2fe1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/778b3cb453bc80173970ff368190b2ea54d0421c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778b3cb453bc80173970ff368190b2ea54d0421c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=778b3cb453bc80173970ff368190b2ea54d0421c", "patch": "@@ -71,7 +71,7 @@ use html::format::{TyParamBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n-use html::markdown::{self, Markdown};\n+use html::markdown::{self, Markdown, MarkdownHtml};\n use html::{highlight, layout};\n \n /// A pair of name and its optional document.\n@@ -1844,7 +1844,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n \n     if let Some(stab) = item.stability.as_ref() {\n         let deprecated_reason = if show_reason && !stab.deprecated_reason.is_empty() {\n-            format!(\": {}\", Escape(&stab.deprecated_reason))\n+            format!(\": {}\", stab.deprecated_reason)\n         } else {\n             String::new()\n         };\n@@ -1854,7 +1854,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             } else {\n                 String::new()\n             };\n-            let text = format!(\"Deprecated{}{}\", since, Markdown(&deprecated_reason));\n+            let text = format!(\"Deprecated{}{}\", since, MarkdownHtml(&deprecated_reason));\n             stability.push(format!(\"<em class='stab deprecated'>{}</em>\", text))\n         };\n \n@@ -1875,16 +1875,16 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n                 String::new()\n             };\n             let unstable_reason = if show_reason && !stab.unstable_reason.is_empty() {\n-                format!(\": {}\", Escape(&stab.unstable_reason))\n+                format!(\": {}\", stab.unstable_reason)\n             } else {\n                 String::new()\n             };\n-            let text = format!(\"Unstable{}{}\", unstable_extra, Markdown(&unstable_reason));\n+            let text = format!(\"Unstable{}{}\", unstable_extra, MarkdownHtml(&unstable_reason));\n             stability.push(format!(\"<em class='stab unstable'>{}</em>\", text))\n         };\n     } else if let Some(depr) = item.deprecation.as_ref() {\n         let note = if show_reason && !depr.note.is_empty() {\n-            format!(\": {}\", Escape(&depr.note))\n+            format!(\": {}\", depr.note)\n         } else {\n             String::new()\n         };\n@@ -1894,7 +1894,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             String::new()\n         };\n \n-        let text = format!(\"Deprecated{}{}\", since, Markdown(&note));\n+        let text = format!(\"Deprecated{}{}\", since, MarkdownHtml(&note));\n         stability.push(format!(\"<em class='stab deprecated'>{}</em>\", text))\n     }\n "}]}