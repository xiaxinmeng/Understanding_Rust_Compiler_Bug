{"sha": "3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "node_id": "C_kwDOAAsO6NoAKDNkZDJmOTljNDlkMjI1YjA4ZTM4Y2NkMTk4MWUxYWRlZjhmZDI5MDE", "commit": {"author": {"name": "Cameron", "email": "cameron.studdstreet@gmail.com", "date": "2022-10-22T05:23:23Z"}, "committer": {"name": "Cameron", "email": "cameron.studdstreet@gmail.com", "date": "2022-10-22T05:23:23Z"}, "message": "fix tests", "tree": {"sha": "d0d41c80f937fa3a0ff1eb01731271b52664f157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0d41c80f937fa3a0ff1eb01731271b52664f157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "html_url": "https://github.com/rust-lang/rust/commit/3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/comments", "author": {"login": "cameron1024", "id": 29902409, "node_id": "MDQ6VXNlcjI5OTAyNDA5", "avatar_url": "https://avatars.githubusercontent.com/u/29902409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cameron1024", "html_url": "https://github.com/cameron1024", "followers_url": "https://api.github.com/users/cameron1024/followers", "following_url": "https://api.github.com/users/cameron1024/following{/other_user}", "gists_url": "https://api.github.com/users/cameron1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/cameron1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cameron1024/subscriptions", "organizations_url": "https://api.github.com/users/cameron1024/orgs", "repos_url": "https://api.github.com/users/cameron1024/repos", "events_url": "https://api.github.com/users/cameron1024/events{/privacy}", "received_events_url": "https://api.github.com/users/cameron1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cameron1024", "id": 29902409, "node_id": "MDQ6VXNlcjI5OTAyNDA5", "avatar_url": "https://avatars.githubusercontent.com/u/29902409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cameron1024", "html_url": "https://github.com/cameron1024", "followers_url": "https://api.github.com/users/cameron1024/followers", "following_url": "https://api.github.com/users/cameron1024/following{/other_user}", "gists_url": "https://api.github.com/users/cameron1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/cameron1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cameron1024/subscriptions", "organizations_url": "https://api.github.com/users/cameron1024/orgs", "repos_url": "https://api.github.com/users/cameron1024/repos", "events_url": "https://api.github.com/users/cameron1024/events{/privacy}", "received_events_url": "https://api.github.com/users/cameron1024/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b56d7bd90fe4f11b67005bf9c6044ea03251dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b56d7bd90fe4f11b67005bf9c6044ea03251dd3", "html_url": "https://github.com/rust-lang/rust/commit/5b56d7bd90fe4f11b67005bf9c6044ea03251dd3"}], "stats": {"total": 123, "additions": 117, "deletions": 6}, "files": [{"sha": "1e927b898ad6a70d15e5e7e0f09d403bdd251f13", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "patch": "@@ -2857,6 +2857,13 @@ impl Type {\n         matches!(self.ty.kind(Interner), TyKind::Scalar(Scalar::Uint(UintTy::Usize)))\n     }\n \n+    pub fn is_int_or_uint(&self) -> bool {\n+        match self.ty.kind(Interner) {\n+            TyKind::Scalar(Scalar::Int(_) | Scalar::Uint(_)) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn remove_ref(&self) -> Option<Type> {\n         match &self.ty.kind(Interner) {\n             TyKind::Ref(.., ty) => Some(self.derived(ty.clone())),"}, {"sha": "ff1fba5818cce480096de29263e18c80fb891063", "filename": "crates/ide-assists/src/handlers/replace_arith_with_checked.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_checked.rs?ref=3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "patch": "@@ -1,10 +1,22 @@\n use crate::assist_context::{AssistContext, Assists};\n use crate::utils::{replace_arith, ArithKind};\n \n-pub(crate) fn replace_arith_with_checked(\n-    acc: &mut Assists,\n-    ctx: &AssistContext<'_>,\n-) -> Option<()> {\n+// Assist: replace_arith_with_checked\n+//\n+// Replaces arithmetic on integers with the `checked_*` equivalent.\n+//\n+// ```\n+// fn main() {\n+//   let x = 1 $0+ 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//   let x = 1.checked_add(2);\n+// }\n+// ```\n+pub(crate) fn replace_arith_with_checked(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     replace_arith(acc, ctx, ArithKind::Checked)\n }\n "}, {"sha": "717875e84f032d94d8e28f38d4d8299573b4cbbd", "filename": "crates/ide-assists/src/handlers/replace_arith_with_saturating.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_saturating.rs?ref=3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "patch": "@@ -1,6 +1,21 @@\n use crate::assist_context::{AssistContext, Assists};\n use crate::utils::{replace_arith, ArithKind};\n \n+// Assist: replace_arith_with_saturating\n+//\n+// Replaces arithmetic on integers with the `saturating_*` equivalent.\n+//\n+// ```\n+// fn main() {\n+//   let x = 1 $0+ 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//   let x = 1.saturating_add(2);\n+// }\n+// ```\n pub(crate) fn replace_arith_with_saturating(\n     acc: &mut Assists,\n     ctx: &AssistContext<'_>,"}, {"sha": "e0a90292b1948ff65d18262bd43a8eb5826c34f6", "filename": "crates/ide-assists/src/handlers/replace_arith_with_wrapping.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_wrapping.rs?ref=3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "patch": "@@ -1,6 +1,21 @@\n use crate::assist_context::{AssistContext, Assists};\n use crate::utils::{replace_arith, ArithKind};\n \n+// Assist: replace_arith_with_wrapping\n+//\n+// Replaces arithmetic on integers with the `wrapping_*` equivalent.\n+//\n+// ```\n+// fn main() {\n+//   let x = 1 $0+ 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//   let x = 1.wrapping_add(2);\n+// }\n+// ```\n pub(crate) fn replace_arith_with_wrapping(\n     acc: &mut Assists,\n     ctx: &AssistContext<'_>,"}, {"sha": "7eac40d6e8f09c218e125756b4769ede86a1e513", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "patch": "@@ -1978,6 +1978,57 @@ impl Foo for Bar {\n     )\n }\n \n+#[test]\n+fn doctest_replace_arith_with_checked() {\n+    check_doc_test(\n+        \"replace_arith_with_checked\",\n+        r#####\"\n+fn main() {\n+  let x = 1 $0+ 2;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+  let x = 1.checked_add(2);\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_replace_arith_with_saturating() {\n+    check_doc_test(\n+        \"replace_arith_with_saturating\",\n+        r#####\"\n+fn main() {\n+  let x = 1 $0+ 2;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+  let x = 1.saturating_add(2);\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_replace_arith_with_wrapping() {\n+    check_doc_test(\n+        \"replace_arith_with_wrapping\",\n+        r#####\"\n+fn main() {\n+  let x = 1 $0+ 2;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+  let x = 1.wrapping_add(2);\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_char_with_string() {\n     check_doc_test("}, {"sha": "0227222c08966aadffe677f974b95c9d709f9716", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "patch": "@@ -722,8 +722,8 @@ impl ArithKind {\n     fn assist_id(&self) -> AssistId {\n         let s = match self {\n             ArithKind::Saturating => \"replace_arith_with_saturating\",\n-            ArithKind::Checked => \"replace_arith_with_saturating\",\n-            ArithKind::Wrapping => \"replace_arith_with_saturating\",\n+            ArithKind::Checked => \"replace_arith_with_checked\",\n+            ArithKind::Wrapping => \"replace_arith_with_wrapping\",\n         };\n \n         AssistId(s, AssistKind::RefactorRewrite)\n@@ -771,6 +771,10 @@ pub(crate) fn replace_arith(\n ) -> Option<()> {\n     let (lhs, op, rhs) = parse_binary_op(ctx)?;\n \n+    if !is_primitive_int(ctx, &lhs) || !is_primitive_int(ctx, &rhs) {\n+        return None;\n+    }\n+\n     let start = lhs.syntax().text_range().start();\n     let end = rhs.syntax().text_range().end();\n     let range = TextRange::new(start, end);\n@@ -782,6 +786,13 @@ pub(crate) fn replace_arith(\n     })\n }\n \n+fn is_primitive_int(ctx: &AssistContext<'_>, expr: &Expr) -> bool {\n+    match ctx.sema.type_of_expr(expr) {\n+        Some(ty) => ty.adjusted().is_int_or_uint(),\n+        _ => false,\n+    }\n+}\n+\n /// Extract the operands of an arithmetic expression (e.g. `1 + 2` or `1.checked_add(2)`)\n fn parse_binary_op(ctx: &AssistContext<'_>) -> Option<(Expr, ArithOp, Expr)> {\n     let expr = ctx.find_node_at_offset::<BinExpr>()?;"}]}