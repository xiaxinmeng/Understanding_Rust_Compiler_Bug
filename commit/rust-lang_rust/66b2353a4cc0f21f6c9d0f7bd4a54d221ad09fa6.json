{"sha": "66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjIzNTNhNGNjMGYyMWY2YzlkMGY3YmQ0YTU0ZDIyMWFkMDlmYTY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T08:58:36Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T08:58:36Z"}, "message": "Clear up comment", "tree": {"sha": "e41d2adbcc8e1f1fa59a7f6516d82720b78de230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e41d2adbcc8e1f1fa59a7f6516d82720b78de230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6", "html_url": "https://github.com/rust-lang/rust/commit/66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6250191a6580317adb5c5fc3b1126c46f80d8d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6250191a6580317adb5c5fc3b1126c46f80d8d6", "html_url": "https://github.com/rust-lang/rust/commit/d6250191a6580317adb5c5fc3b1126c46f80d8d6"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "2082de51d7e5d10d22d569837723c0b50f7202cd", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=66b2353a4cc0f21f6c9d0f7bd4a54d221ad09fa6", "patch": "@@ -360,7 +360,9 @@ impl<'tcx> AllocMap<'tcx> {\n         id\n     }\n \n-    /// Returns `None` in case the `AllocId` is dangling.\n+    /// Returns `None` in case the `AllocId` is dangling. An `EvalContext` can still have a\n+    /// local `Allocation` for that `AllocId`, but having such an `AllocId` in a constant is\n+    /// illegal and will likely ICE.\n     /// This function exists to allow const eval to detect the difference between evaluation-\n     /// local dangling pointers and allocations in constants/statics.\n     pub fn get(&self, id: AllocId) -> Option<AllocKind<'tcx>> {"}]}