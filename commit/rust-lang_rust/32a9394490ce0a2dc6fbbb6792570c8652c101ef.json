{"sha": "32a9394490ce0a2dc6fbbb6792570c8652c101ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYTkzOTQ0OTBjZTBhMmRjNmZiYmI2NzkyNTcwYzg2NTJjMTAxZWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-13T13:34:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-13T13:34:04Z"}, "message": "Rustup", "tree": {"sha": "ed24959a6c84149180c4b55bf6fba4792672b151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed24959a6c84149180c4b55bf6fba4792672b151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32a9394490ce0a2dc6fbbb6792570c8652c101ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlm5M9EACgkQpp+NIls6\n19lEihAAsgUHpmIzNb+nbYL42tBdj+TSgiet2RMGC3sLOvGVAvo4VlntfjeddMiJ\nLOJIyQmfLYzUIjb7tlmUV24F7+39LHO+nqZSrNh9HJ7hjLVq7Xr5agea6v8JUXXD\npy6+8RzxriQK1dboeqir/wlsx7CNMYH21B9kQlOtC2goE9co5yBqpnR+DOecFV29\nBa/+J5QWB3WVb6tvLO9pTALpAsxsgR+h5RKul4eC8AGSrwKJEBN4OPkrwj4ZOsIJ\nEEnGWaoqfnFXorPkcQBHnHyJtUjXsqcBL2pzqu/IGP/KOU14gKBK7627RTxakxy7\n6erz+ROcWl55F8vmgGZZkMhzq5xrT/OtS3BtZPn6SJikBk/vP5n5Rt0HpsebIpzz\n+C2NuRQs08utaqtmuGLVEGf2cNVCga2dmoRuFReFrA0ZkY/s8JL/0NDgRa2w71ip\n0xk0l8j4z70tHGJHO/nD2neZkUBzzeOwq/oUJDtFMnD1XLjxl+0S3yqh6FavqMa2\nZkqKNJdgfvN9WXYrWL8uPST3seyZrYDPtG0UkU2jku9GIOb0Jw2CVG3KJtX4LQnY\nqtXTZfosyNFAPVbJEMXZ+HLDR/0tpFobGkd65xAmAYNDsVRLv36u52Oo7FGXtoFa\npJrG8I9Qfuqo1sGq/T31yq8bkKLL4gJn9xprZkgn4h8uQc07mEU=\n=dXtA\n-----END PGP SIGNATURE-----", "payload": "tree ed24959a6c84149180c4b55bf6fba4792672b151\nparent b7222be9173d891c0d4e69e89ddf2dd2857cdef9\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1505309644 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1505309644 +0200\n\nRustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32a9394490ce0a2dc6fbbb6792570c8652c101ef", "html_url": "https://github.com/rust-lang/rust/commit/32a9394490ce0a2dc6fbbb6792570c8652c101ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32a9394490ce0a2dc6fbbb6792570c8652c101ef/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7222be9173d891c0d4e69e89ddf2dd2857cdef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7222be9173d891c0d4e69e89ddf2dd2857cdef9", "html_url": "https://github.com/rust-lang/rust/commit/b7222be9173d891c0d4e69e89ddf2dd2857cdef9"}], "stats": {"total": 199, "additions": 118, "deletions": 81}, "files": [{"sha": "17a12efda5989c699ad262695127cdf0aa151c52", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.160\n+* Update to *rustc 1.22.0-nightly (dd08c3070 2017-09-12)*\n+\n ## 0.0.159\n * Update to *rustc 1.22.0-nightly (eba374fb2 2017-09-11)*\n * New lint: [`clone_on_ref_ptr`]"}, {"sha": "6511a5c2010e947a8bdb762bdabaf2aaf310f534", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -1,6 +1,6 @@\n [root]\n name = \"clippy_lints\"\n-version = \"0.0.158\"\n+version = \"0.0.159\"\n dependencies = [\n  \"itertools 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -73,11 +73,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"clippy\"\n-version = \"0.0.158\"\n+version = \"0.0.159\"\n dependencies = [\n  \"cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy-mini-macro-test 0.1.0\",\n- \"clippy_lints 0.0.158\",\n+ \"clippy_lints 0.0.159\",\n  \"compiletest_rs 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "b1676b45a8e414b9b44cf35215da6a7b0d26beb3", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.159\"\n+version = \"0.0.160\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -31,7 +31,7 @@ path = \"src/main.rs\"\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.159\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.160\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.2\"\n "}, {"sha": "b0e86bb7760c341373adb5ac48746f6ec0f0b537", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.159\"\n+version = \"0.0.160\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "aa2d6db6853a784db2bf4f2504d7f6dae576051a", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -7,6 +7,7 @@ use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n use rustc::hir;\n use syntax::ast::RangeLimits;\n use utils::{self, higher};\n+use utils::const_to_u64;\n \n /// **What it does:** Checks for out of bounds array indexing with a constant\n /// index.\n@@ -63,21 +64,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n             let ty = cx.tables.expr_ty(array);\n             if let ty::TyArray(_, size) = ty.sty {\n                 let size = ConstInt::Usize(\n-                    ConstUsize::new(size as u64, cx.sess().target.uint_type).expect(\"array size is invalid\"),\n+                    ConstUsize::new(const_to_u64(size), cx.sess().target.usize_ty).expect(\"array size is invalid\"),\n                 );\n                 let parent_item = cx.tcx.hir.get_parent(e.id);\n                 let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n                 let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n                 let constcx = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables);\n \n                 // Index is a constant uint\n-                let const_index = constcx.eval(index);\n-                if let Ok(ConstVal::Integral(const_index)) = const_index {\n-                    if size <= const_index {\n-                        utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"const index is out of bounds\");\n-                    }\n+                if let Ok(const_index) = constcx.eval(index) {\n+                    if let ConstVal::Integral(const_index) = const_index.val {\n+                        if size <= const_index {\n+                            utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"const index is out of bounds\");\n+                        }\n \n-                    return;\n+                        return;\n+                    }\n                 }\n \n                 // Index is a constant range\n@@ -112,19 +114,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n /// Returns an option containing a tuple with the start and end (exclusive) of\n /// the range.\n fn to_const_range(\n-    start: &Option<Option<ConstVal>>,\n-    end: &Option<Option<ConstVal>>,\n+    start: &Option<Option<&ty::Const>>,\n+    end: &Option<Option<&ty::Const>>,\n     limits: RangeLimits,\n     array_size: ConstInt,\n ) -> Option<(ConstInt, ConstInt)> {\n     let start = match *start {\n-        Some(Some(ConstVal::Integral(x))) => x,\n+        Some(Some(&ty::Const { val: ConstVal::Integral(x), .. })) => x,\n         Some(_) => return None,\n         None => ConstInt::U8(0),\n     };\n \n     let end = match *end {\n-        Some(Some(ConstVal::Integral(x))) => if limits == RangeLimits::Closed {\n+        Some(Some(&ty::Const { val: ConstVal::Integral(x), .. })) => if limits == RangeLimits::Closed {\n             match x {\n                 ConstInt::U8(_) => (x + ConstInt::U8(1)),\n                 ConstInt::U16(_) => (x + ConstInt::U16(1)),"}, {"sha": "2611ba1adf2da2e4d69aeddfae9c3e2b00a042e6", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -14,6 +14,7 @@ use std::mem;\n use std::rc::Rc;\n use syntax::ast::{FloatTy, LitKind, StrStyle};\n use syntax::ptr::P;\n+use utils::const_to_u64;\n \n #[derive(Debug, Copy, Clone)]\n pub enum FloatWidth {\n@@ -49,7 +50,7 @@ pub enum Constant {\n     /// an array of constants\n     Vec(Vec<Constant>),\n     /// also an array, but with only one constant, repeated N times\n-    Repeat(Box<Constant>, usize),\n+    Repeat(Box<Constant>, u64),\n     /// a tuple of constants\n     Tuple(Vec<Constant>),\n }\n@@ -175,10 +176,10 @@ pub fn lit_to_constant<'a, 'tcx>(lit: &LitKind, tcx: TyCtxt<'a, 'tcx, 'tcx>, mut\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, hint) => match (&ty.sty, hint) {\n             (&ty::TyInt(ity), _) | (_, Signed(ity)) => {\n-                Constant::Int(ConstInt::new_signed_truncating(n as i128, ity, tcx.sess.target.int_type))\n+                Constant::Int(ConstInt::new_signed_truncating(n as i128, ity, tcx.sess.target.isize_ty))\n             },\n             (&ty::TyUint(uty), _) | (_, Unsigned(uty)) => {\n-                Constant::Int(ConstInt::new_unsigned_truncating(n as u128, uty, tcx.sess.target.uint_type))\n+                Constant::Int(ConstInt::new_unsigned_truncating(n as u128, uty, tcx.sess.target.usize_ty))\n             },\n             _ => bug!(),\n         },\n@@ -249,7 +250,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             ExprTup(ref tup) => self.multi(tup).map(Constant::Tuple),\n             ExprRepeat(ref value, _) => {\n                 let n = match self.tables.expr_ty(e).sty {\n-                    ty::TyArray(_, n) => n,\n+                    ty::TyArray(_, n) => const_to_u64(n),\n                     _ => span_bug!(e.span, \"typeck error\"),\n                 };\n                 self.expr(value).map(|v| Constant::Repeat(Box::new(v), n))"}, {"sha": "a891d7721c3f37e0b534ea293147d554c543d6f8", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -143,17 +143,8 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n             // Some types are not Clone by default but could be cloned \u201cby hand\u201d if necessary\n             ty::TyAdt(def, substs) => for variant in &def.variants {\n                 for field in &variant.fields {\n-                    match field.ty(cx.tcx, substs).sty {\n-                        ty::TyArray(_, size) if size > 32 => {\n-                            return;\n-                        },\n-                        ty::TyFnPtr(..) => {\n-                            return;\n-                        },\n-                        ty::TyTuple(tys, _) if tys.len() > 12 => {\n-                            return;\n-                        },\n-                        _ => (),\n+                    if let ty::TyFnDef(..) = field.ty(cx.tcx, substs).sty {\n+                        return;\n                     }\n                 }\n             },"}, {"sha": "c019ab0b385f968d00547129e273b83b5eadc454", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -55,8 +55,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                         .at(expr.span)\n                         .const_eval(param_env.and((did, substs)))\n                     {\n-                        Ok(ConstVal::Integral(Usize(Us64(i)))) => u64::from(i as u32) != i,\n-                        Ok(ConstVal::Integral(Isize(Is64(i)))) => i64::from(i as i32) != i,\n+                        Ok(&ty::Const { val: ConstVal::Integral(Usize(Us64(i))), .. }) => u64::from(i as u32) != i,\n+                        Ok(&ty::Const { val: ConstVal::Integral(Isize(Is64(i))), .. }) => i64::from(i as i32) != i,\n                         _ => false,\n                     };\n                     if bad {"}, {"sha": "520f9362c0fd479334d678e8556b65b615202026", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -8,6 +8,7 @@\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]\n #![feature(conservative_impl_trait)]\n+#![feature(inclusive_range_syntax, range_contains)]\n #![allow(unknown_lints, indexing_slicing, shadow_reuse, missing_docs_in_private_items)]\n \n #[macro_use]"}, {"sha": "41218a989fc1ab6dbcc8607f4391242a66d71089", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -13,6 +13,7 @@ use rustc_const_eval::ConstContext;\n use std::collections::{HashMap, HashSet};\n use syntax::ast;\n use utils::sugg;\n+use utils::const_to_u64;\n \n use utils::{get_enclosing_block, get_parent_expr, higher, in_external_macro, is_integer_literal, is_refutable,\n             last_path_segment, match_trait_method, match_type, multispan_sugg, snippet, snippet_opt,\n@@ -969,7 +970,7 @@ fn is_len_call(expr: &Expr, var: &Name) -> bool {\n     false\n }\n \n-fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n+fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx Expr, expr: &'tcx Expr) {\n     // if this for loop is iterating over a two-sided range...\n     if let Some(higher::Range {\n         start: Some(start),\n@@ -989,7 +990,7 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n                 // who think that this will iterate from the larger value to the\n                 // smaller value.\n                 let (sup, eq) = match (start_idx, end_idx) {\n-                    (ConstVal::Integral(start_idx), ConstVal::Integral(end_idx)) => {\n+                    (&ty::Const{ val: ConstVal::Integral(start_idx), .. }, &ty::Const{ val: ConstVal::Integral(end_idx), .. }) => {\n                         (start_idx > end_idx, start_idx == end_idx)\n                     },\n                     _ => (false, false),\n@@ -1461,7 +1462,7 @@ fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {\n fn is_iterable_array(ty: Ty) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.sty {\n-        ty::TyArray(_, 0...32) => true,\n+        ty::TyArray(_, n) => (0...32).contains(const_to_u64(n)),\n         _ => false,\n     }\n }"}, {"sha": "78a85c4a6864c4b7109e292a5af53c9f3afd3f4e", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -318,7 +318,7 @@ fn check_match_bool(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n     }\n }\n \n-fn check_overlapping_arms(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n+fn check_overlapping_arms<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ex: &'tcx Expr, arms: &'tcx [Arm]) {\n     if arms.len() >= 2 && cx.tables.expr_ty(ex).is_integral() {\n         let ranges = all_ranges(cx, arms, ex.id);\n         let type_ranges = type_ranges(&ranges);\n@@ -411,7 +411,7 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n }\n \n /// Get all arms that are unbounded `PatRange`s.\n-fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &[Arm], id: NodeId) -> Vec<SpannedRange<ConstVal<'tcx>>> {\n+fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &'tcx [Arm], id: NodeId) -> Vec<SpannedRange<&'tcx ty::Const<'tcx>>> {\n     let parent_item = cx.tcx.hir.get_parent(id);\n     let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n     let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n@@ -444,7 +444,7 @@ fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &[Arm], id: NodeId) ->\n                     let PatKind::Lit(ref value) = pat.node,\n                     let Ok(value) = constcx.eval(value)\n                 ], {\n-                    return Some(SpannedRange { span: pat.span, node: (value.clone(), Bound::Included(value)) });\n+                    return Some(SpannedRange { span: pat.span, node: (value, Bound::Included(value)) });\n                 }}\n \n                 None\n@@ -464,19 +464,19 @@ type TypedRanges = Vec<SpannedRange<ConstInt>>;\n /// Get all `Int` ranges or all `Uint` ranges. Mixed types are an error anyway\n /// and other types than\n /// `Uint` and `Int` probably don't make sense.\n-fn type_ranges(ranges: &[SpannedRange<ConstVal>]) -> TypedRanges {\n+fn type_ranges(ranges: &[SpannedRange<&ty::Const>]) -> TypedRanges {\n     ranges\n         .iter()\n         .filter_map(|range| match range.node {\n-            (ConstVal::Integral(start), Bound::Included(ConstVal::Integral(end))) => Some(SpannedRange {\n+            (&ty::Const { val: ConstVal::Integral(start), .. }, Bound::Included(&ty::Const { val: ConstVal::Integral(end), .. })) => Some(SpannedRange {\n                 span: range.span,\n                 node: (start, Bound::Included(end)),\n             }),\n-            (ConstVal::Integral(start), Bound::Excluded(ConstVal::Integral(end))) => Some(SpannedRange {\n+            (&ty::Const { val: ConstVal::Integral(start), .. }, Bound::Excluded(&ty::Const { val: ConstVal::Integral(end), .. })) => Some(SpannedRange {\n                 span: range.span,\n                 node: (start, Bound::Excluded(end)),\n             }),\n-            (ConstVal::Integral(start), Bound::Unbounded) => Some(SpannedRange {\n+            (&ty::Const { val: ConstVal::Integral(start), .. }, Bound::Unbounded) => Some(SpannedRange {\n                 span: range.span,\n                 node: (start, Bound::Unbounded),\n             }),"}, {"sha": "08336fca0ae681fe1b6a75e83881c999bc744ed8", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -14,6 +14,7 @@ use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, is_\n             span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n use utils::paths;\n use utils::sugg;\n+use utils::const_to_u64;\n \n #[derive(Clone)]\n pub struct Pass;\n@@ -1049,7 +1050,7 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: Ty) -> Option<sugg::S\n             ty::TySlice(_) => true,\n             ty::TyAdt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::TyAdt(..) => match_type(cx, ty, &paths::VEC),\n-            ty::TyArray(_, size) => size < 32,\n+            ty::TyArray(_, size) => const_to_u64(size) < 32,\n             ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) => may_slice(cx, inner),\n             _ => false,\n         }\n@@ -1155,7 +1156,7 @@ fn lint_map_unwrap_or(cx: &LateContext, expr: &hir::Expr, map_args: &[hir::Expr]\n }\n \n /// lint use of `map().unwrap_or_else()` for `Option`s\n-fn lint_map_unwrap_or_else(cx: &LateContext, expr: &hir::Expr, map_args: &[hir::Expr], unwrap_args: &[hir::Expr]) {\n+fn lint_map_unwrap_or_else<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, map_args: &'tcx [hir::Expr], unwrap_args: &'tcx [hir::Expr]) {\n     // lint if the caller of `map()` is an `Option`\n     if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) {\n         // lint message\n@@ -1188,7 +1189,7 @@ fn lint_map_unwrap_or_else(cx: &LateContext, expr: &hir::Expr, map_args: &[hir::\n }\n \n /// lint use of `filter().next()` for `Iterators`\n-fn lint_filter_next(cx: &LateContext, expr: &hir::Expr, filter_args: &[hir::Expr]) {\n+fn lint_filter_next<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, filter_args: &'tcx [hir::Expr]) {\n     // lint if caller of `.filter().next()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n@@ -1211,7 +1212,7 @@ fn lint_filter_next(cx: &LateContext, expr: &hir::Expr, filter_args: &[hir::Expr\n }\n \n /// lint use of `filter().map()` for `Iterators`\n-fn lint_filter_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &[hir::Expr], _map_args: &[hir::Expr]) {\n+fn lint_filter_map<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, _filter_args: &'tcx [hir::Expr], _map_args: &'tcx [hir::Expr]) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).map(q)` on an `Iterator`. \\\n@@ -1221,7 +1222,7 @@ fn lint_filter_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &[hir::Expr\n }\n \n /// lint use of `filter().map()` for `Iterators`\n-fn lint_filter_map_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &[hir::Expr], _map_args: &[hir::Expr]) {\n+fn lint_filter_map_map<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, _filter_args: &'tcx [hir::Expr], _map_args: &'tcx [hir::Expr]) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter_map(p).map(q)` on an `Iterator`. \\\n@@ -1231,7 +1232,7 @@ fn lint_filter_map_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &[hir::\n }\n \n /// lint use of `filter().flat_map()` for `Iterators`\n-fn lint_filter_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &[hir::Expr], _map_args: &[hir::Expr]) {\n+fn lint_filter_flat_map<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, _filter_args: &'tcx [hir::Expr], _map_args: &'tcx [hir::Expr]) {\n     // lint if caller of `.filter().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).flat_map(q)` on an `Iterator`. \\\n@@ -1242,7 +1243,7 @@ fn lint_filter_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &[hir:\n }\n \n /// lint use of `filter_map().flat_map()` for `Iterators`\n-fn lint_filter_map_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &[hir::Expr], _map_args: &[hir::Expr]) {\n+fn lint_filter_map_flat_map<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, _filter_args: &'tcx [hir::Expr], _map_args: &'tcx [hir::Expr]) {\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`. \\\n@@ -1253,12 +1254,12 @@ fn lint_filter_map_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &[\n }\n \n /// lint searching an Iterator followed by `is_some()`\n-fn lint_search_is_some(\n-    cx: &LateContext,\n-    expr: &hir::Expr,\n+fn lint_search_is_some<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n     search_method: &str,\n-    search_args: &[hir::Expr],\n-    is_some_args: &[hir::Expr],\n+    search_args: &'tcx [hir::Expr],\n+    is_some_args: &'tcx [hir::Expr],\n ) {\n     // lint if caller of search is an Iterator\n     if match_trait_method(cx, &is_some_args[0], &paths::ITERATOR) {\n@@ -1285,7 +1286,7 @@ fn lint_search_is_some(\n }\n \n /// Checks for the `CHARS_NEXT_CMP` lint.\n-fn lint_chars_next(cx: &LateContext, expr: &hir::Expr, chain: &hir::Expr, other: &hir::Expr, eq: bool) -> bool {\n+fn lint_chars_next<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, chain: &'tcx hir::Expr, other: &'tcx hir::Expr, eq: bool) -> bool {\n     if_let_chain! {[\n         let Some(args) = method_chain_args(chain, &[\"chars\", \"next\"]),\n         let hir::ExprCall(ref fun, ref arg_char) = other.node,\n@@ -1317,11 +1318,11 @@ fn lint_chars_next(cx: &LateContext, expr: &hir::Expr, chain: &hir::Expr, other:\n }\n \n /// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n-fn lint_single_char_pattern(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr) {\n+fn lint_single_char_pattern<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, arg: &'tcx hir::Expr) {\n     let parent_item = cx.tcx.hir.get_parent(arg.id);\n     let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n     let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n-    if let Ok(ConstVal::Str(r)) = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(arg) {\n+    if let Ok(&ty::Const { val: ConstVal::Str(r), .. }) = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(arg) {\n         if r.len() == 1 {\n             let hint = snippet(cx, expr.span, \"..\").replace(&format!(\"\\\"{}\\\"\", r), &format!(\"'{}'\", r));\n             span_lint_and_then("}, {"sha": "98fb90f57c1f668b136b5f585957d3755d399ccd", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -419,12 +419,12 @@ fn check_nan(cx: &LateContext, path: &Path, expr: &Expr) {\n     }\n }\n \n-fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n+fn is_allowed<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> bool {\n     let parent_item = cx.tcx.hir.get_parent(expr.id);\n     let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n     let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n     let res = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(expr);\n-    if let Ok(ConstVal::Float(val)) = res {\n+    if let Ok(&ty::Const { val: ConstVal::Float(val), .. }) = res {\n         use std::cmp::Ordering;\n         match val.ty {\n             FloatTy::F32 => {"}, {"sha": "61b61c9fb6f5b794366e951c58366d05544ed14f", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StepByZero {\n                 use consts::{constant, Constant};\n                 use rustc_const_math::ConstInt::Usize;\n                 if let Some((Constant::Int(Usize(us)), _)) = constant(cx, &args[1]) {\n-                    if us.as_u64(cx.sess().target.uint_type) == 0 {\n+                    if us.as_u64() == 0 {\n                         span_lint(\n                             cx,\n                             ITERATOR_STEP_BY_ZERO,"}, {"sha": "a9bee3a5261dc5039a92b6592f4216c849e05b18", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -1,6 +1,7 @@\n use regex_syntax;\n use rustc::hir::*;\n use rustc::lint::*;\n+use rustc::ty;\n use rustc::middle::const_val::ConstVal;\n use rustc_const_eval::ConstContext;\n use rustc::ty::subst::Substs;\n@@ -145,12 +146,12 @@ fn str_span(base: Span, s: &str, c: usize) -> Span {\n     }\n }\n \n-fn const_str(cx: &LateContext, e: &Expr) -> Option<InternedString> {\n+fn const_str<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) -> Option<InternedString> {\n     let parent_item = cx.tcx.hir.get_parent(e.id);\n     let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n     let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n     match ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(e) {\n-        Ok(ConstVal::Str(r)) => Some(r),\n+        Ok(&ty::Const { val: ConstVal::Str(r), .. }) => Some(r),\n         _ => None,\n     }\n }\n@@ -179,7 +180,7 @@ fn is_trivial_regex(s: &regex_syntax::Expr) -> Option<&'static str> {\n     }\n }\n \n-fn check_set(cx: &LateContext, expr: &Expr, utf8: bool) {\n+fn check_set<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, utf8: bool) {\n     if_let_chain! {[\n         let ExprAddrOf(_, ref expr) = expr.node,\n         let ExprArray(ref exprs) = expr.node,\n@@ -190,7 +191,7 @@ fn check_set(cx: &LateContext, expr: &Expr, utf8: bool) {\n     }}\n }\n \n-fn check_regex(cx: &LateContext, expr: &Expr, utf8: bool) {\n+fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, utf8: bool) {\n     let builder = regex_syntax::ExprBuilder::new().unicode(utf8);\n \n     if let ExprLit(ref lit) = expr.node {"}, {"sha": "567e8b5423e1924c5cd786f2daf4a3fde0d83300", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -1061,12 +1061,12 @@ enum AbsurdComparisonResult {\n \n \n \n-fn detect_absurd_comparison<'a>(\n-    cx: &LateContext,\n+fn detect_absurd_comparison<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n     op: BinOp_,\n-    lhs: &'a Expr,\n-    rhs: &'a Expr,\n-) -> Option<(ExtremeExpr<'a>, AbsurdComparisonResult)> {\n+    lhs: &'tcx Expr,\n+    rhs: &'tcx Expr,\n+) -> Option<(ExtremeExpr<'tcx>, AbsurdComparisonResult)> {\n     use types::ExtremeType::*;\n     use types::AbsurdComparisonResult::*;\n     use utils::comparisons::*;\n@@ -1108,7 +1108,7 @@ fn detect_absurd_comparison<'a>(\n     })\n }\n \n-fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeExpr<'a>> {\n+fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<ExtremeExpr<'tcx>> {\n     use rustc::middle::const_val::ConstVal::*;\n     use rustc_const_math::*;\n     use rustc_const_eval::*;\n@@ -1129,7 +1129,7 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n         Err(_) => return None,\n     };\n \n-    let which = match (&ty.sty, cv) {\n+    let which = match (&ty.sty, cv.val) {\n         (&ty::TyBool, Bool(false)) |\n         (&ty::TyInt(IntTy::Is), Integral(Isize(Is32(::std::i32::MIN)))) |\n         (&ty::TyInt(IntTy::Is), Integral(Isize(Is64(::std::i64::MIN)))) |\n@@ -1336,15 +1336,15 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n }\n \n #[allow(cast_possible_wrap)]\n-fn node_as_const_fullint(cx: &LateContext, expr: &Expr) -> Option<FullInt> {\n+fn node_as_const_fullint<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<FullInt> {\n     use rustc::middle::const_val::ConstVal::*;\n     use rustc_const_eval::ConstContext;\n \n     let parent_item = cx.tcx.hir.get_parent(expr.id);\n     let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n     let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n     match ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(expr) {\n-        Ok(val) => if let Integral(const_int) = val {\n+        Ok(val) => if let Integral(const_int) = val.val {\n             match const_int.int_type() {\n                 IntType::SignedInt(_) => Some(FullInt::S(const_int.to_u128_unchecked() as i128)),\n                 IntType::UnsignedInt(_) => Some(FullInt::U(const_int.to_u128_unchecked())),\n@@ -1371,13 +1371,13 @@ fn err_upcast_comparison(cx: &LateContext, span: &Span, expr: &Expr, always: boo\n     }\n }\n \n-fn upcast_comparison_bounds_err(\n-    cx: &LateContext,\n+fn upcast_comparison_bounds_err<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n     span: &Span,\n     rel: comparisons::Rel,\n     lhs_bounds: Option<(FullInt, FullInt)>,\n-    lhs: &Expr,\n-    rhs: &Expr,\n+    lhs: &'tcx Expr,\n+    rhs: &'tcx Expr,\n     invert: bool,\n ) {\n     use utils::comparisons::*;"}, {"sha": "6173073fb766f21fe0dacc8876ece136c56d9945", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -313,6 +313,10 @@ pub fn path_to_def(cx: &LateContext, path: &[&str]) -> Option<def::Def> {\n     }\n }\n \n+pub fn const_to_u64(c: &ty::Const) -> u64 {\n+    c.val.to_const_int().expect(\"eddyb says this works\").to_u64().expect(\"see previous expect\")\n+}\n+\n /// Convenience function to get the `DefId` of a trait by path.\n pub fn get_trait_def_id(cx: &LateContext, path: &[&str]) -> Option<DefId> {\n     let def = match path_to_def(cx, path) {"}, {"sha": "367235f7eeed2ed1a7b3e0b1adbe4dd32a892b87", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n+fn check_vec_macro<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, vec_args: &higher::VecArgs<'tcx>, span: Span) {\n     let snippet = match *vec_args {\n         higher::VecArgs::Repeat(elem, len) => {\n             let parent_item = cx.tcx.hir.get_parent(len.id);"}, {"sha": "ffeed948ba55c6eea704aa069d4af62d9baa7c8d", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/32a9394490ce0a2dc6fbbb6792570c8652c101ef/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32a9394490ce0a2dc6fbbb6792570c8652c101ef/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=32a9394490ce0a2dc6fbbb6792570c8652c101ef", "patch": "@@ -74,5 +74,37 @@ note: consider deriving `Clone` or removing `Copy`\n 67 | | }\n    | |_^\n \n-error: aborting due to 5 previous errors\n+error: you are implementing `Clone` explicitly on a `Copy` type\n+  --> $DIR/derive.rs:75:1\n+   |\n+75 | / impl Clone for BigArray {\n+76 | |     fn clone(&self) -> Self { unimplemented!() }\n+77 | | }\n+   | |_^\n+   |\n+note: consider deriving `Clone` or removing `Copy`\n+  --> $DIR/derive.rs:75:1\n+   |\n+75 | / impl Clone for BigArray {\n+76 | |     fn clone(&self) -> Self { unimplemented!() }\n+77 | | }\n+   | |_^\n+\n+error: you are implementing `Clone` explicitly on a `Copy` type\n+  --> $DIR/derive.rs:85:1\n+   |\n+85 | / impl Clone for FnPtr {\n+86 | |     fn clone(&self) -> Self { unimplemented!() }\n+87 | | }\n+   | |_^\n+   |\n+note: consider deriving `Clone` or removing `Copy`\n+  --> $DIR/derive.rs:85:1\n+   |\n+85 | / impl Clone for FnPtr {\n+86 | |     fn clone(&self) -> Self { unimplemented!() }\n+87 | | }\n+   | |_^\n+\n+error: aborting due to 7 previous errors\n "}]}