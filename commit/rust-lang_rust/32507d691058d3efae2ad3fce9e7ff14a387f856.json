{"sha": "32507d691058d3efae2ad3fce9e7ff14a387f856", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNTA3ZDY5MTA1OGQzZWZhZTJhZDNmY2U5ZTdmZjE0YTM4N2Y4NTY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-25T19:13:56Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-08T11:57:08Z"}, "message": "Fix tests", "tree": {"sha": "1665b2195b08774df7e60a594860853ee5c0a33c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1665b2195b08774df7e60a594860853ee5c0a33c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32507d691058d3efae2ad3fce9e7ff14a387f856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32507d691058d3efae2ad3fce9e7ff14a387f856", "html_url": "https://github.com/rust-lang/rust/commit/32507d691058d3efae2ad3fce9e7ff14a387f856", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32507d691058d3efae2ad3fce9e7ff14a387f856/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf21d48387fbcdca39ef9acd3abc601ee8bd7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf21d48387fbcdca39ef9acd3abc601ee8bd7c9", "html_url": "https://github.com/rust-lang/rust/commit/7bf21d48387fbcdca39ef9acd3abc601ee8bd7c9"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "f51439f89ffbe9a5f2cfcba73294339095e0eb0b", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=32507d691058d3efae2ad3fce9e7ff14a387f856", "patch": "@@ -4,11 +4,12 @@ use rustc_ast::ast;\n use rustc_ast::with_default_globals;\n use rustc_span;\n use rustc_span::source_map::respan;\n+use rustc_span::symbol::Ident;\n \n fn fun_to_string(\n     decl: &ast::FnDecl,\n     header: ast::FnHeader,\n-    name: ast::Ident,\n+    name: Ident,\n     generics: &ast::Generics,\n ) -> String {\n     to_string(|s| {\n@@ -26,7 +27,7 @@ fn variant_to_string(var: &ast::Variant) -> String {\n #[test]\n fn test_fun_to_string() {\n     with_default_globals(|| {\n-        let abba_ident = ast::Ident::from_str(\"abba\");\n+        let abba_ident = Ident::from_str(\"abba\");\n \n         let decl =\n             ast::FnDecl { inputs: Vec::new(), output: ast::FnRetTy::Default(rustc_span::DUMMY_SP) };\n@@ -41,7 +42,7 @@ fn test_fun_to_string() {\n #[test]\n fn test_variant_to_string() {\n     with_default_globals(|| {\n-        let ident = ast::Ident::from_str(\"principal_skinner\");\n+        let ident = Ident::from_str(\"principal_skinner\");\n \n         let var = ast::Variant {\n             ident,"}, {"sha": "48da1a3ccc420a41c70ca975cf02b2ab529983a8", "filename": "src/librustc_expand/mut_visit/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs?ref=32507d691058d3efae2ad3fce9e7ff14a387f856", "patch": "@@ -1,9 +1,10 @@\n use crate::tests::{matches_codepattern, string_to_crate};\n \n-use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast;\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::with_default_globals;\n use rustc_ast_pretty::pprust;\n+use rustc_span::symbol::Ident;\n \n // This version doesn't care about getting comments or doc-strings in.\n fn fake_print_crate(s: &mut pprust::State<'_>, krate: &ast::Crate) {\n@@ -14,7 +15,7 @@ fn fake_print_crate(s: &mut pprust::State<'_>, krate: &ast::Crate) {\n struct ToZzIdentMutVisitor;\n \n impl MutVisitor for ToZzIdentMutVisitor {\n-    fn visit_ident(&mut self, ident: &mut ast::Ident) {\n+    fn visit_ident(&mut self, ident: &mut Ident) {\n         *ident = Ident::from_str(\"zz\");\n     }\n     fn visit_mac(&mut self, mac: &mut ast::MacCall) {"}, {"sha": "437f6e62d7d330473b209b68a15f080bf5699aca", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=32507d691058d3efae2ad3fce9e7ff14a387f856", "patch": "@@ -1,6 +1,6 @@\n use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_parse};\n \n-use rustc_ast::ast::{self, Name, PatKind};\n+use rustc_ast::ast::{self, PatKind};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n@@ -100,12 +100,12 @@ fn string_to_tts_1() {\n \n         let expected = TokenStream::new(vec![\n             TokenTree::token(token::Ident(kw::Fn, false), sp(0, 2)).into(),\n-            TokenTree::token(token::Ident(Name::intern(\"a\"), false), sp(3, 4)).into(),\n+            TokenTree::token(token::Ident(Symbol::intern(\"a\"), false), sp(3, 4)).into(),\n             TokenTree::Delimited(\n                 DelimSpan::from_pair(sp(5, 6), sp(13, 14)),\n                 token::DelimToken::Paren,\n                 TokenStream::new(vec![\n-                    TokenTree::token(token::Ident(Name::intern(\"b\"), false), sp(6, 7)).into(),\n+                    TokenTree::token(token::Ident(Symbol::intern(\"b\"), false), sp(6, 7)).into(),\n                     TokenTree::token(token::Colon, sp(8, 9)).into(),\n                     TokenTree::token(token::Ident(sym::i32, false), sp(10, 13)).into(),\n                 ])\n@@ -116,7 +116,7 @@ fn string_to_tts_1() {\n                 DelimSpan::from_pair(sp(15, 16), sp(20, 21)),\n                 token::DelimToken::Brace,\n                 TokenStream::new(vec![\n-                    TokenTree::token(token::Ident(Name::intern(\"b\"), false), sp(17, 18)).into(),\n+                    TokenTree::token(token::Ident(Symbol::intern(\"b\"), false), sp(17, 18)).into(),\n                     TokenTree::token(token::Semi, sp(18, 19)).into(),\n                 ])\n                 .into(),"}, {"sha": "caaa08df499812105d4e654f0a8e2fbd97cbd93e", "filename": "src/librustc_expand/tokenstream/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs?ref=32507d691058d3efae2ad3fce9e7ff14a387f856", "patch": "@@ -1,10 +1,9 @@\n use crate::tests::string_to_stream;\n \n-use rustc_ast::ast::Name;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{TokenStream, TokenStreamBuilder, TokenTree};\n use rustc_ast::with_default_globals;\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, Span, Symbol};\n use smallvec::smallvec;\n \n fn string_to_ts(string: &str) -> TokenStream {\n@@ -87,7 +86,7 @@ fn test_is_empty() {\n     with_default_globals(|| {\n         let test0: TokenStream = Vec::<TokenTree>::new().into_iter().collect();\n         let test1: TokenStream =\n-            TokenTree::token(token::Ident(Name::intern(\"a\"), false), sp(0, 1)).into();\n+            TokenTree::token(token::Ident(Symbol::intern(\"a\"), false), sp(0, 1)).into();\n         let test2 = string_to_ts(\"foo(bar::baz)\");\n \n         assert_eq!(test0.is_empty(), true);"}, {"sha": "716263393ba8d69173936f7c21197dce3244f686", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=32507d691058d3efae2ad3fce9e7ff14a387f856", "patch": "@@ -3,7 +3,7 @@ use super::*;\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::with_default_globals;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n \n fn word_cfg(s: &str) -> Cfg {"}, {"sha": "a3d31d257748d9e340d931a43be31a718d79cf2d", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32507d691058d3efae2ad3fce9e7ff14a387f856/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=32507d691058d3efae2ad3fce9e7ff14a387f856", "patch": "@@ -32,6 +32,7 @@ use rustc_parse::new_parser_from_source_str;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{Spanned, DUMMY_SP, FileName};\n use rustc_span::source_map::FilePathMapping;\n+use rustc_span::symbol::Ident;\n use rustc_ast::ast::*;\n use rustc_ast::mut_visit::{self, MutVisitor, visit_clobber};\n use rustc_ast::ptr::P;"}]}