{"sha": "5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNWQ5OTUxMjZhYzNlOWI0NjI5YTU1ZmNlOTQxYzU1OGQ1YmIwY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T06:21:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T06:21:38Z"}, "message": "auto merge of #11965 : alexcrichton/rust/issue-7385, r=alexcrichton\n\nI've verified that it works on osx x86_64\r\n\r\nCloses #7385\r\n\r\nRolled up PRs:\r\n\r\nCloses #11898\r\nCloses #11934\r\nCloses #11942\r\nCloses #11952 \r\nCloses #11960 \r\nCloses #11966\r\nCloses #11953 \r\n\r\nClosed issues:\r\n\r\nCloses #4063 \r\nCloses #7911", "tree": {"sha": "454a14962add2bfc63aa8c0beff080daf313a15e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/454a14962add2bfc63aa8c0beff080daf313a15e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "html_url": "https://github.com/rust-lang/rust/commit/5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc6afe1ec0d3e5e9da4c0f7d0443991afe74dfaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6afe1ec0d3e5e9da4c0f7d0443991afe74dfaf", "html_url": "https://github.com/rust-lang/rust/commit/cc6afe1ec0d3e5e9da4c0f7d0443991afe74dfaf"}, {"sha": "a67a3b7749c9a0544b2fe69338c17c6314be935d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a67a3b7749c9a0544b2fe69338c17c6314be935d", "html_url": "https://github.com/rust-lang/rust/commit/a67a3b7749c9a0544b2fe69338c17c6314be935d"}], "stats": {"total": 486, "additions": 305, "deletions": 181}, "files": [{"sha": "6fa264a99d1c17362ffb3ca5b836d7f554caa8d1", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -71,9 +71,9 @@ fetch snapshots, and an OS that can execute the available snapshot binaries.\n \n Snapshot binaries are currently built and tested on several platforms:\n \n-* Windows (7, Server 2008 R2), x86 only\n-* Linux (various distributions), x86 and x86-64\n-* OSX 10.6 (\"Snow Leopard\") or greater, x86 and x86-64\n+* Windows (7, 8, Server 2008 R2), x86 only\n+* Linux (2.6.18 or later, various distributions), x86 and x86-64\n+* OSX 10.7 (Lion) or greater, x86 and x86-64\n \n You may find that other platforms work, but these are our officially\n supported build environments that are most likely to work."}, {"sha": "ff36511a31942d19dddc9fc60f89d00142467c5a", "filename": "doc/tutorial.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -72,9 +72,9 @@ from the Internet on our supported platforms.\n \n Snapshot binaries are currently built and tested on several platforms:\n \n-* Windows (7, Server 2008 R2), x86 only\n-* Linux (various distributions), x86 and x86-64\n-* OSX 10.6 (\"Snow Leopard\") or greater, x86 and x86-64\n+* Windows (7, 8, Server 2008 R2), x86 only\n+* Linux (2.6.18 or later, various distributions), x86 and x86-64\n+* OSX 10.7 (Lion) or greater, x86 and x86-64\n \n You may find that other platforms work, but these are our \"tier 1\"\n supported build environments that are most likely to work."}, {"sha": "4fd59bb3aa503c0820d469922a0f87276b2d4305", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -60,7 +60,7 @@ pub trait FromHex {\n pub enum FromHexError {\n     /// The input contained a character not part of the hex format\n     InvalidHexCharacter(char, uint),\n-    /// The input had a invalid length\n+    /// The input had an invalid length\n     InvalidHexLength,\n }\n "}, {"sha": "c1959843d598b300ee6bdf2d11634b63495831a2", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1292,7 +1292,7 @@ impl ToStrRadix for BigInt {\n }\n \n impl FromStrRadix for BigInt {\n-    /// Creates and initializes an BigInt.\n+    /// Creates and initializes a BigInt.\n     #[inline]\n     fn from_str_radix(s: &str, radix: uint) -> Option<BigInt> {\n         BigInt::parse_bytes(s.as_bytes(), radix)\n@@ -1385,7 +1385,7 @@ impl<R: Rng> RandBigInt for R {\n }\n \n impl BigInt {\n-    /// Creates and initializes an BigInt.\n+    /// Creates and initializes a BigInt.\n     #[inline]\n     pub fn new(sign: Sign, v: ~[BigDigit]) -> BigInt {\n         BigInt::from_biguint(sign, BigUint::new(v))"}, {"sha": "c05ca3e87695067d716a1254d30d53b6b0a322e5", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -485,7 +485,7 @@ pub fn check_durable(tcx: ty::ctxt, ty: ty::t, sp: Span) -> bool {\n     }\n }\n \n-/// This is rather subtle.  When we are casting a value to a instantiated\n+/// This is rather subtle.  When we are casting a value to an instantiated\n /// trait like `a as trait<'r>`, regionck already ensures that any references\n /// that appear in the type of `a` are bounded by `'r` (ed.: rem\n /// FIXME(#5723)).  However, it is possible that there are *type parameters*\n@@ -516,7 +516,7 @@ pub fn check_cast_for_escaping_regions(\n     target_ty: ty::t,\n     source_span: Span)\n {\n-    // Determine what type we are casting to; if it is not an trait, then no\n+    // Determine what type we are casting to; if it is not a trait, then no\n     // worries.\n     match ty::get(target_ty).sty {\n         ty::ty_trait(..) => {}"}, {"sha": "82c927a1c2d58eb5ced2b792330ce6fd0ba7654a", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 76, "deletions": 89, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -33,41 +33,28 @@ use std::hashmap::HashMap;\n use std::iter::Enumerate;\n use std::vec;\n \n-\n-// Get the last \"argument\" (has to be done recursively to avoid phoney local ambiguity error)\n-macro_rules! last {\n-    ( $first:expr, $( $remainder:expr, )+ ) => ( last!( $( $remainder, )+ ) );\n-    ( $first:expr, ) => ( $first )\n-}\n-\n // The actual lang items defined come at the end of this file in one handy table.\n // So you probably just want to nip down to the end.\n macro_rules! lets_do_this {\n-    // secondary rule to allow us to use `$num` as both an expression\n-    // and a pattern.\n     (\n-        $( $num:tt, $variant:ident, $name:expr, $method:ident; )*\n-    ) => {\n-        lets_do_this!(count = 1 + last!($($num,)*),\n-                      $($num, $variant, $name, $method; )*)\n-    };\n-\n-    (\n-        count = $num_lang_items:expr, $( $num:pat, $variant:ident, $name:expr, $method:ident; )*\n+        $( $variant:ident, $name:expr, $method:ident; )*\n     ) => {\n \n+#[deriving(FromPrimitive)]\n pub enum LangItem {\n     $($variant),*\n }\n \n pub struct LanguageItems {\n-    items: [Option<ast::DefId>, ..$num_lang_items]\n+    items: ~[Option<ast::DefId>],\n }\n \n impl LanguageItems {\n     pub fn new() -> LanguageItems {\n+        fn foo(_: LangItem) -> Option<ast::DefId> { None }\n+\n         LanguageItems {\n-            items: [ None, ..$num_lang_items ]\n+            items: ~[$(foo($variant)),*]\n         }\n     }\n \n@@ -76,9 +63,10 @@ impl LanguageItems {\n     }\n \n     pub fn item_name(index: uint) -> &'static str {\n-        match index {\n-            $( $num => $name, )*\n-            _ => \"???\"\n+        let item: Option<LangItem> = FromPrimitive::from_uint(index);\n+        match item {\n+            $( Some($variant) => $name, )*\n+            None => \"???\"\n         }\n     }\n \n@@ -208,82 +196,81 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<@str> {\n }\n \n pub fn collect_language_items(crate: &ast::Crate,\n-                              session: Session)\n-                           -> LanguageItems {\n+                              session: Session) -> @LanguageItems {\n     let mut collector = LanguageItemCollector::new(session);\n     collector.collect(crate);\n     let LanguageItemCollector { items, .. } = collector;\n     session.abort_if_errors();\n-    items\n+    @items\n }\n \n // End of the macro\n     }\n }\n \n lets_do_this! {\n-//  ID, Variant name,                    Name,                      Method name;\n-    0,  FreezeTraitLangItem,             \"freeze\",                  freeze_trait;\n-    1,  SendTraitLangItem,               \"send\",                    send_trait;\n-    2,  SizedTraitLangItem,              \"sized\",                   sized_trait;\n-    3,  PodTraitLangItem,                \"pod\",                     pod_trait;\n-\n-    4,  DropTraitLangItem,               \"drop\",                    drop_trait;\n-\n-    5,  AddTraitLangItem,                \"add\",                     add_trait;\n-    6,  SubTraitLangItem,                \"sub\",                     sub_trait;\n-    7,  MulTraitLangItem,                \"mul\",                     mul_trait;\n-    8,  DivTraitLangItem,                \"div\",                     div_trait;\n-    9,  RemTraitLangItem,                \"rem\",                     rem_trait;\n-    10, NegTraitLangItem,                \"neg\",                     neg_trait;\n-    11, NotTraitLangItem,                \"not\",                     not_trait;\n-    12, BitXorTraitLangItem,             \"bitxor\",                  bitxor_trait;\n-    13, BitAndTraitLangItem,             \"bitand\",                  bitand_trait;\n-    14, BitOrTraitLangItem,              \"bitor\",                   bitor_trait;\n-    15, ShlTraitLangItem,                \"shl\",                     shl_trait;\n-    16, ShrTraitLangItem,                \"shr\",                     shr_trait;\n-    17, IndexTraitLangItem,              \"index\",                   index_trait;\n-\n-    18, EqTraitLangItem,                 \"eq\",                      eq_trait;\n-    19, OrdTraitLangItem,                \"ord\",                     ord_trait;\n-\n-    20, StrEqFnLangItem,                 \"str_eq\",                  str_eq_fn;\n-    21, UniqStrEqFnLangItem,             \"uniq_str_eq\",             uniq_str_eq_fn;\n-    22, FailFnLangItem,                  \"fail_\",                   fail_fn;\n-    23, FailBoundsCheckFnLangItem,       \"fail_bounds_check\",       fail_bounds_check_fn;\n-    24, ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n-    25, ClosureExchangeMallocFnLangItem, \"closure_exchange_malloc\", closure_exchange_malloc_fn;\n-    26, ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;\n-    27, MallocFnLangItem,                \"malloc\",                  malloc_fn;\n-    28, FreeFnLangItem,                  \"free\",                    free_fn;\n-    29, StrDupUniqFnLangItem,            \"strdup_uniq\",             strdup_uniq_fn;\n-\n-    30, StartFnLangItem,                 \"start\",                   start_fn;\n-\n-    31, TyDescStructLangItem,            \"ty_desc\",                 ty_desc;\n-    32, TyVisitorTraitLangItem,          \"ty_visitor\",              ty_visitor;\n-    33, OpaqueStructLangItem,            \"opaque\",                  opaque;\n-\n-    34, EventLoopFactoryLangItem,        \"event_loop_factory\",      event_loop_factory;\n-\n-    35, TypeIdLangItem,                  \"type_id\",                 type_id;\n-\n-    36, EhPersonalityLangItem,           \"eh_personality\",          eh_personality_fn;\n-\n-    37, ManagedHeapLangItem,             \"managed_heap\",            managed_heap;\n-    38, ExchangeHeapLangItem,            \"exchange_heap\",           exchange_heap;\n-    39, GcLangItem,                      \"gc\",                      gc;\n-\n-    40, CovariantTypeItem,               \"covariant_type\",          covariant_type;\n-    41, ContravariantTypeItem,           \"contravariant_type\",      contravariant_type;\n-    42, InvariantTypeItem,               \"invariant_type\",          invariant_type;\n-\n-    43, CovariantLifetimeItem,           \"covariant_lifetime\",      covariant_lifetime;\n-    44, ContravariantLifetimeItem,       \"contravariant_lifetime\",  contravariant_lifetime;\n-    45, InvariantLifetimeItem,           \"invariant_lifetime\",      invariant_lifetime;\n-\n-    46, NoFreezeItem,                    \"no_freeze_bound\",         no_freeze_bound;\n-    47, NoSendItem,                      \"no_send_bound\",           no_send_bound;\n-    48, NoPodItem,                       \"no_pod_bound\",            no_pod_bound;\n-    49, ManagedItem,                     \"managed_bound\",           managed_bound;\n+//  Variant name,                    Name,                      Method name;\n+    FreezeTraitLangItem,             \"freeze\",                  freeze_trait;\n+    SendTraitLangItem,               \"send\",                    send_trait;\n+    SizedTraitLangItem,              \"sized\",                   sized_trait;\n+    PodTraitLangItem,                \"pod\",                     pod_trait;\n+\n+    DropTraitLangItem,               \"drop\",                    drop_trait;\n+\n+    AddTraitLangItem,                \"add\",                     add_trait;\n+    SubTraitLangItem,                \"sub\",                     sub_trait;\n+    MulTraitLangItem,                \"mul\",                     mul_trait;\n+    DivTraitLangItem,                \"div\",                     div_trait;\n+    RemTraitLangItem,                \"rem\",                     rem_trait;\n+    NegTraitLangItem,                \"neg\",                     neg_trait;\n+    NotTraitLangItem,                \"not\",                     not_trait;\n+    BitXorTraitLangItem,             \"bitxor\",                  bitxor_trait;\n+    BitAndTraitLangItem,             \"bitand\",                  bitand_trait;\n+    BitOrTraitLangItem,              \"bitor\",                   bitor_trait;\n+    ShlTraitLangItem,                \"shl\",                     shl_trait;\n+    ShrTraitLangItem,                \"shr\",                     shr_trait;\n+    IndexTraitLangItem,              \"index\",                   index_trait;\n+\n+    EqTraitLangItem,                 \"eq\",                      eq_trait;\n+    OrdTraitLangItem,                \"ord\",                     ord_trait;\n+\n+    StrEqFnLangItem,                 \"str_eq\",                  str_eq_fn;\n+    UniqStrEqFnLangItem,             \"uniq_str_eq\",             uniq_str_eq_fn;\n+    FailFnLangItem,                  \"fail_\",                   fail_fn;\n+    FailBoundsCheckFnLangItem,       \"fail_bounds_check\",       fail_bounds_check_fn;\n+    ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n+    ClosureExchangeMallocFnLangItem, \"closure_exchange_malloc\", closure_exchange_malloc_fn;\n+    ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;\n+    MallocFnLangItem,                \"malloc\",                  malloc_fn;\n+    FreeFnLangItem,                  \"free\",                    free_fn;\n+    StrDupUniqFnLangItem,            \"strdup_uniq\",             strdup_uniq_fn;\n+\n+    StartFnLangItem,                 \"start\",                   start_fn;\n+\n+    TyDescStructLangItem,            \"ty_desc\",                 ty_desc;\n+    TyVisitorTraitLangItem,          \"ty_visitor\",              ty_visitor;\n+    OpaqueStructLangItem,            \"opaque\",                  opaque;\n+\n+    EventLoopFactoryLangItem,        \"event_loop_factory\",      event_loop_factory;\n+\n+    TypeIdLangItem,                  \"type_id\",                 type_id;\n+\n+    EhPersonalityLangItem,           \"eh_personality\",          eh_personality_fn;\n+\n+    ManagedHeapLangItem,             \"managed_heap\",            managed_heap;\n+    ExchangeHeapLangItem,            \"exchange_heap\",           exchange_heap;\n+    GcLangItem,                      \"gc\",                      gc;\n+\n+    CovariantTypeItem,               \"covariant_type\",          covariant_type;\n+    ContravariantTypeItem,           \"contravariant_type\",      contravariant_type;\n+    InvariantTypeItem,               \"invariant_type\",          invariant_type;\n+\n+    CovariantLifetimeItem,           \"covariant_lifetime\",      covariant_lifetime;\n+    ContravariantLifetimeItem,       \"contravariant_lifetime\",  contravariant_lifetime;\n+    InvariantLifetimeItem,           \"invariant_lifetime\",      invariant_lifetime;\n+\n+    NoFreezeItem,                    \"no_freeze_bound\",         no_freeze_bound;\n+    NoSendItem,                      \"no_send_bound\",           no_send_bound;\n+    NoPodItem,                       \"no_pod_bound\",            no_pod_bound;\n+    ManagedItem,                     \"managed_bound\",           managed_bound;\n }"}, {"sha": "7cb549d91a8a10d193c07004f5b78446953e2026", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -371,7 +371,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n     (\"unused_must_use\",\n     LintSpec {\n         lint: UnusedMustUse,\n-        desc: \"unused result of an type flagged as #[must_use]\",\n+        desc: \"unused result of a type flagged as #[must_use]\",\n         default: warn,\n     }),\n "}, {"sha": "c28306a7aaca38031c7e110ca875f7282fccfec1", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -765,7 +765,7 @@ fn namespace_error_to_str(ns: NamespaceError) -> &'static str {\n }\n \n fn Resolver(session: Session,\n-            lang_items: LanguageItems,\n+            lang_items: @LanguageItems,\n             crate_span: Span) -> Resolver {\n     let graph_root = @NameBindings();\n \n@@ -823,7 +823,7 @@ fn Resolver(session: Session,\n /// The main resolver class.\n struct Resolver {\n     session: @Session,\n-    lang_items: LanguageItems,\n+    lang_items: @LanguageItems,\n \n     intr: @IdentInterner,\n \n@@ -5550,7 +5550,7 @@ pub struct CrateMap {\n \n /// Entry point to crate resolution.\n pub fn resolve_crate(session: Session,\n-                     lang_items: LanguageItems,\n+                     lang_items: @LanguageItems,\n                      crate: &Crate)\n                   -> CrateMap {\n     let mut resolver = Resolver(session, lang_items, crate.span);"}, {"sha": "7bc37d4e695127df31f180d120855baff87c1a14", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -244,7 +244,7 @@ pub enum VecLenOpt {\n     vec_len_ge(/* length of prefix */uint)\n }\n \n-// An option identifying a branch (either a literal, a enum variant or a\n+// An option identifying a branch (either a literal, an enum variant or a\n // range)\n enum Opt {\n     lit(Lit),"}, {"sha": "9062949b000d9f5edff9a00e3d17cabe93e8f243", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -299,7 +299,7 @@ pub struct ctxt_ {\n     ty_param_defs: RefCell<HashMap<ast::NodeId, TypeParameterDef>>,\n     adjustments: RefCell<HashMap<ast::NodeId, @AutoAdjustment>>,\n     normalized_cache: RefCell<HashMap<t, t>>,\n-    lang_items: middle::lang_items::LanguageItems,\n+    lang_items: @middle::lang_items::LanguageItems,\n     // A mapping of fake provided method def_ids to the default implementation\n     provided_method_sources: RefCell<HashMap<ast::DefId, ast::DefId>>,\n     supertraits: RefCell<HashMap<ast::DefId, @~[@TraitRef]>>,\n@@ -947,7 +947,7 @@ pub fn mk_ctxt(s: session::Session,\n                amap: ast_map::Map,\n                freevars: freevars::freevar_map,\n                region_maps: middle::region::RegionMaps,\n-               lang_items: middle::lang_items::LanguageItems)\n+               lang_items: @middle::lang_items::LanguageItems)\n             -> ctxt {\n     @ctxt_ {\n         named_region_map: named_region_map,\n@@ -2591,7 +2591,7 @@ pub fn type_is_sized(cx: ctxt, ty: ty::t) -> bool {\n     }\n }\n \n-// Whether a type is enum like, that is a enum type with only nullary\n+// Whether a type is enum like, that is an enum type with only nullary\n // constructors\n pub fn type_is_c_like_enum(cx: ctxt, ty: t) -> bool {\n     match get(ty).sty {"}, {"sha": "9f44aa1a0237e8d0ee8d4a2940075c4d43789553", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -385,7 +385,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n     }\n \n     // Handle @, ~, and & being able to mean strs and vecs.\n-    // If a_seq_ty is a str or a vec, make it an str/vec.\n+    // If a_seq_ty is a str or a vec, make it a str/vec.\n     // Also handle first-class trait types.\n     fn mk_pointer<AC:AstConv,\n                   RS:RegionScope>("}, {"sha": "7e8fa4e66713c5204bb019a96149b08502a106d6", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -2008,7 +2008,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         }\n     }\n \n-    // could be either a expr_binop or an expr_assign_binop\n+    // could be either an expr_binop or an expr_assign_binop\n     fn check_binop(fcx: @FnCtxt,\n                    callee_id: ast::NodeId,\n                    expr: &ast::Expr,"}, {"sha": "d9a9d9f8fe1239fe9bb39b4073a1a91fd8b2d009", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -737,7 +737,7 @@ pub fn instantiate_trait_ref(ccx: &CrateCtxt,\n     /*!\n      * Instantiates the path for the given trait reference, assuming that\n      * it's bound to a valid trait type. Returns the def_id for the defining\n-     * trait. Fails if the type is a type other than an trait type.\n+     * trait. Fails if the type is a type other than a trait type.\n      */\n \n     // FIXME(#5121) -- distinguish early vs late lifetime params"}, {"sha": "74fefe4168369e60d30535843218e1acbfdf7103", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -476,7 +476,7 @@ pub struct Sha256 {\n }\n \n impl Sha256 {\n-    /// Construct an new instance of a SHA-256 digest.\n+    /// Construct a new instance of a SHA-256 digest.\n     pub fn new() -> Sha256 {\n         Sha256 {\n             engine: Engine256::new(&H256)"}, {"sha": "2885d05a5bd5c32fef4bfa4a243ff57505ecc958", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -101,7 +101,7 @@ pub enum ExternalLocation {\n enum Implementor {\n     /// Paths are displayed specially by omitting the `impl XX for` cruft\n     PathType(clean::Type),\n-    /// This is the generic representation of an trait implementor, used for\n+    /// This is the generic representation of a trait implementor, used for\n     /// primitive types and otherwise non-path types.\n     OtherType(clean::Generics, /* trait */ clean::Type, /* for */ clean::Type),\n }"}, {"sha": "72ccf6be023eac4d2734d21f161a2d325ad04a29", "filename": "src/libstd/any.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -118,7 +118,7 @@ impl<'a> AnyMutRefExt<'a> for &'a mut Any {\n     }\n }\n \n-/// Extension methods for a owning `Any` trait object\n+/// Extension methods for an owning `Any` trait object\n pub trait AnyOwnExt {\n     /// Returns the boxed value if it is of type `T`, or\n     /// `Err(Self)` if it isn't."}, {"sha": "83aec9d0aa639b13c482ecacead126bbfcf44da2", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -27,13 +27,13 @@ use option::{Option, Some, None};\n pub struct Ascii { priv chr: u8 }\n \n impl Ascii {\n-    /// Converts a ascii character into a `u8`.\n+    /// Converts an ascii character into a `u8`.\n     #[inline]\n     pub fn to_byte(self) -> u8 {\n         self.chr\n     }\n \n-    /// Converts a ascii character into a `char`.\n+    /// Converts an ascii character into a `char`.\n     #[inline]\n     pub fn to_char(self) -> char {\n         self.chr as char\n@@ -314,9 +314,9 @@ impl IterBytes for Ascii {\n     }\n }\n \n-/// Trait to convert to a owned byte array by consuming self\n+/// Trait to convert to an owned byte array by consuming self\n pub trait IntoBytes {\n-    /// Converts to a owned byte array by consuming self\n+    /// Converts to an owned byte array by consuming self\n     fn into_bytes(self) -> ~[u8];\n }\n "}, {"sha": "b7374b6f15d08ecb61ef81e8cda41fa49987adec", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -162,17 +162,25 @@ impl CString {\n     }\n \n     /// Converts the CString into a `&str` without copying.\n-    /// Returns None if the CString is not UTF-8 or is null.\n+    /// Returns None if the CString is not UTF-8.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the CString is null.\n     #[inline]\n     pub fn as_str<'a>(&'a self) -> Option<&'a str> {\n-        if self.buf.is_null() { return None; }\n         let buf = self.as_bytes();\n         let buf = buf.slice_to(buf.len()-1); // chop off the trailing NUL\n         str::from_utf8(buf)\n     }\n \n     /// Return a CString iterator.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the CString is null.\n     pub fn iter<'a>(&'a self) -> CChars<'a> {\n+        if self.buf.is_null() { fail!(\"CString is null!\"); }\n         CChars {\n             ptr: self.buf,\n             marker: marker::ContravariantLifetime,\n@@ -191,8 +199,14 @@ impl Drop for CString {\n }\n \n impl Container for CString {\n+    /// Return the number of bytes in the CString (not including the NUL terminator).\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the CString is null.\n     #[inline]\n     fn len(&self) -> uint {\n+        if self.buf.is_null() { fail!(\"CString is null!\"); }\n         unsafe {\n             ptr::position(self.buf, |c| *c == 0)\n         }\n@@ -562,8 +576,27 @@ mod tests {\n         assert_eq!(c_str.as_str(), Some(\"\"));\n         let c_str = bytes!(\"foo\", 0xff).to_c_str();\n         assert_eq!(c_str.as_str(), None);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_as_str_fail() {\n         let c_str = unsafe { CString::new(ptr::null(), false) };\n-        assert_eq!(c_str.as_str(), None);\n+        c_str.as_str();\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_len_fail() {\n+        let c_str = unsafe { CString::new(ptr::null(), false) };\n+        c_str.len();\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_iter_fail() {\n+        let c_str = unsafe { CString::new(ptr::null(), false) };\n+        c_str.iter();\n     }\n }\n "}, {"sha": "69f0cf96ffc345b124e1a40b4ec25a98fce1faba", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -83,7 +83,7 @@ Some examples of obvious things you might want to do\n     let lines: ~[~str] = file.lines().collect();\n     ```\n \n-* Make an simple HTTP request\n+* Make a simple HTTP request\n   FIXME This needs more improvement: TcpStream constructor taking &str,\n   `write_str` and `write_line` methods.\n "}, {"sha": "df7b04dcd1976e606c63416c84d76b0ebbc55037", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -213,7 +213,7 @@ pub trait Iterator<A> {\n \n \n     /// Creates an iterator that has a `.peek()` method\n-    /// that returns a optional reference to the next element.\n+    /// that returns an optional reference to the next element.\n     ///\n     /// # Example\n     ///"}, {"sha": "a4b6aca86f7f15e6040091bd4290be9815dc5649", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -812,7 +812,7 @@ impl num::ToStrRadix for f32 {\n }\n \n /// Convert a string in base 16 to a float.\n-/// Accepts a optional binary exponent.\n+/// Accepts an optional binary exponent.\n ///\n /// This function accepts strings such as\n ///\n@@ -844,7 +844,7 @@ pub fn from_str_hex(num: &str) -> Option<f32> {\n \n impl FromStr for f32 {\n     /// Convert a string in base 10 to a float.\n-    /// Accepts a optional decimal exponent.\n+    /// Accepts an optional decimal exponent.\n     ///\n     /// This function accepts strings such as\n     ///\n@@ -876,7 +876,7 @@ impl FromStr for f32 {\n }\n \n impl num::FromStrRadix for f32 {\n-    /// Convert a string in an given base to a float.\n+    /// Convert a string in a given base to a float.\n     ///\n     /// Due to possible conflicts, this function does **not** accept\n     /// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**"}, {"sha": "d51f6b602d72b73d69fd770d89d2f1eec2221865", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -814,7 +814,7 @@ impl num::ToStrRadix for f64 {\n }\n \n /// Convert a string in base 16 to a float.\n-/// Accepts a optional binary exponent.\n+/// Accepts an optional binary exponent.\n ///\n /// This function accepts strings such as\n ///\n@@ -846,7 +846,7 @@ pub fn from_str_hex(num: &str) -> Option<f64> {\n \n impl FromStr for f64 {\n     /// Convert a string in base 10 to a float.\n-    /// Accepts a optional decimal exponent.\n+    /// Accepts an optional decimal exponent.\n     ///\n     /// This function accepts strings such as\n     ///\n@@ -878,7 +878,7 @@ impl FromStr for f64 {\n }\n \n impl num::FromStrRadix for f64 {\n-    /// Convert a string in an given base to a float.\n+    /// Convert a string in a given base to a float.\n     ///\n     /// Due to possible conflicts, this function does **not** accept\n     /// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**"}, {"sha": "1ecabff875872d90dace565ff20f4ced22311c23", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -517,7 +517,7 @@ static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n  *     - `ExpBin`:  Accepts numbers with a binary exponent like `42P-8` or\n  *                  `FFp128`. The exponent string itself is always base 10.\n  *                  Can conflict with `radix`, see Failure.\n- * - `empty_zero` - Whether to accept a empty `buf` as a 0 or not.\n+ * - `empty_zero` - Whether to accept an empty `buf` as a 0 or not.\n  * - `ignore_underscores` - Whether all underscores within the string should\n  *                          be ignored.\n  *"}, {"sha": "fd5f3a233e6bfbe1d6348e1d23a91c2cfb64b74c", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -121,7 +121,7 @@ impl<T> Option<T> {\n     // Getting to contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Unwraps a option, yielding the content of a `Some`\n+    /// Unwraps an option, yielding the content of a `Some`\n     /// Fails if the value is a `None` with a custom failure message provided by `msg`.\n     #[inline]\n     pub fn expect<M: Any + Send>(self, msg: M) -> T {"}, {"sha": "4783c983d00f93e31cb685b420c48cb2d6c7f79e", "filename": "src/libstd/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -102,7 +102,7 @@ impl<T, E> Result<T, E> {\n     // Transforming contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Maps an `Result<T, E>` to `Result<U, E>` by applying a function to an\n+    /// Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\n     /// contained `Ok` value, leaving an `Err` value untouched.\n     ///\n     /// This function can be used to compose the results of two functions.\n@@ -120,7 +120,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Maps an `Result<T, E>` to `Result<T, F>` by applying a function to an\n+    /// Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\n     /// contained `Err` value, leaving an `Ok` value untouched.\n     ///\n     /// This function can be used to pass through a successful result while handling"}, {"sha": "2599a74a748cbe74b37fa1017baf5bd88649d5b1", "filename": "src/libstd/send_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fsend_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fsend_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_str.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -38,7 +38,7 @@ impl SendStr {\n         }\n     }\n \n-    /// Returns `true` if this `SendStr` wraps an static string\n+    /// Returns `true` if this `SendStr` wraps a static string\n     #[inline]\n     pub fn is_static(&self) -> bool {\n         match *self {"}, {"sha": "16af8367edf3d2c0c088191a745ae9f61f479c6f", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -417,7 +417,7 @@ pub struct CharSplitsN<'a, Sep> {\n     priv invert: bool,\n }\n \n-/// An iterator over the words of a string, separated by an sequence of whitespace\n+/// An iterator over the words of a string, separated by a sequence of whitespace\n pub type Words<'a> =\n     Filter<'a, &'a str, CharSplits<'a, extern \"Rust\" fn(char) -> bool>>;\n "}, {"sha": "8e73368647271566cb67dae6a0e14ad837b4c955", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -804,7 +804,7 @@ pub trait CloneableVector<T> {\n     /// Copy `self` into a new owned vector\n     fn to_owned(&self) -> ~[T];\n \n-    /// Convert `self` into a owned vector, not making a copy if possible.\n+    /// Convert `self` into an owned vector, not making a copy if possible.\n     fn into_owned(self) -> ~[T];\n }\n "}, {"sha": "1513946e401d3b784cb3299ceb6c1b9e2f59a7b3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -680,7 +680,7 @@ pub enum TokenTree {\n //\n // As a final, horrifying aside, note that macro-by-example's input is\n // also matched by one of these matchers. Holy self-referential! It is matched\n-// by an MatchSeq, specifically this one:\n+// by a MatchSeq, specifically this one:\n //\n //                   $( $lhs:matchers => $rhs:tt );+\n //"}, {"sha": "6449d0aab5e54d75f6c39f9d546d5698a72597c9", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -42,7 +42,7 @@ arguments:\n   the same variant (e.g. `None`, `Some(1)` and `None`). If\n   `const_nonmatching` is true, this will contain an empty list.\n - `StaticEnum` and `StaticStruct` for static methods, where the type\n-  being derived upon is either a enum or struct respectively. (Any\n+  being derived upon is either an enum or struct respectively. (Any\n   argument with type Self is just grouped among the non-self\n   arguments.)\n "}, {"sha": "c4887d55e2a29cf7b915c4b519d3f29c963e66c7", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -36,7 +36,6 @@ pub enum ObsoleteSyntax {\n     ObsoleteUnsafeExternFn,\n     ObsoleteTraitFuncVisibility,\n     ObsoleteConstPointer,\n-    ObsoleteEmptyImpl,\n     ObsoleteLoopAsContinue,\n     ObsoleteEnumWildcard,\n     ObsoleteStructWildcard,\n@@ -110,10 +109,6 @@ impl ParserObsoleteMethods for Parser {\n                 \"instead of `&const Foo` or `@const Foo`, write `&Foo` or \\\n                  `@Foo`\"\n             ),\n-            ObsoleteEmptyImpl => (\n-                \"empty implementation\",\n-                \"instead of `impl A;`, write `impl A {}`\"\n-            ),\n             ObsoleteLoopAsContinue => (\n                 \"`loop` instead of `continue`\",\n                 \"`loop` is now only used for loops and `continue` is used for \\"}, {"sha": "642624adfb2b5d1aaec8483515b3cfa90f102322", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -3926,21 +3926,15 @@ impl Parser {\n         };\n \n         let mut meths = ~[];\n-        let inner_attrs = if self.eat(&token::SEMI) {\n-            self.obsolete(self.last_span, ObsoleteEmptyImpl);\n-            None\n-        } else {\n-            self.expect(&token::LBRACE);\n-            let (inner_attrs, next) = self.parse_inner_attrs_and_next();\n-            let mut method_attrs = Some(next);\n-            while !self.eat(&token::RBRACE) {\n-                meths.push(self.parse_method(method_attrs));\n-                method_attrs = None;\n-            }\n-            Some(inner_attrs)\n-        };\n+        self.expect(&token::LBRACE);\n+        let (inner_attrs, next) = self.parse_inner_attrs_and_next();\n+        let mut method_attrs = Some(next);\n+        while !self.eat(&token::RBRACE) {\n+            meths.push(self.parse_method(method_attrs));\n+            method_attrs = None;\n+        }\n \n-        (ident, ItemImpl(generics, opt_trait, ty, meths), inner_attrs)\n+        (ident, ItemImpl(generics, opt_trait, ty, meths), Some(inner_attrs))\n     }\n \n     // parse a::B<~str,int>"}, {"sha": "46215d6b164364a2c543c42755f0849ec0c8774f", "filename": "src/test/compile-fail/borrowck-anon-fields-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,5 +1,5 @@\n // Tests that we are able to distinguish when loans borrow different\n-// anonymous fields of an tuple vs the same anonymous field.\n+// anonymous fields of a tuple vs the same anonymous field.\n \n struct Y(uint, uint);\n "}, {"sha": "1a8751cb91aeb58aea687a8fcd2750a17222fc07", "filename": "src/test/compile-fail/empty-impl-semicolon.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Fcompile-fail%2Fempty-impl-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Fcompile-fail%2Fempty-impl-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-impl-semicolon.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+impl Foo; //~ ERROR expected `{` but found `;`"}, {"sha": "cc03361ee27e1e1c794c587990a672ba57f88e6a", "filename": "src/test/compile-fail/issue-9575.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Fcompile-fail%2Fissue-9575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Fcompile-fail%2Fissue-9575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9575.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[start]\n+fn start(argc: int, argv: **u8, crate_map: *u8) -> int {\n+    //~^ ERROR start function expects type: `fn(int, **u8) -> int`\n+    0\n+}"}, {"sha": "883ba5b0eaa673ceb2aa133ae9f77bbb11387ce5", "filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum State { ST_NULL, ST_WHITESPACE }\n+\n+fn main() {\n+    ~[ST_NULL, ..(ST_WHITESPACE as uint)]; //~ ERROR expected constant integer for repeat count but found variable\n+}"}, {"sha": "44b91fcee3c71ea03fb2c15b4795d6de0f46ce9c", "filename": "src/test/run-pass/const-enum-vec-repeat.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fconst-enum-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fconst-enum-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-repeat.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum State { ST_NULL, ST_WHITESPACE = 1 }\n+\n+pub fn main() {\n+    ~[ST_NULL, ..(ST_WHITESPACE as uint)];\n+}"}, {"sha": "45ba9f1cab5e3d241876a1a6c6b8217049464076", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-// FIXME: #7385: hits a codegen bug on OS X x86_64\n-\n /*!\n  * Try to double-check that static fns have the right size (with or\n  * without dummy env ptr, as appropriate) by iterating a size-2 array.\n@@ -25,5 +22,8 @@ static closures: &'static [S<'static>] = &[S(f), S(f)];\n \n pub fn main() {\n     for &bare_fn in bare_fns.iter() { bare_fn() }\n-    for &closure in closures.iter() { (*closure)() }\n+    for closure in closures.iter() {\n+        let S(ref closure) = *closure;\n+        (*closure)()\n+    }\n }"}, {"sha": "5c83e81d8be2cbb73eefb506d4d67c43e5d0a41b", "filename": "src/test/run-pass/expr-match-fail-all.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,7 +11,7 @@\n \n \n \n-// When all branches of an match expression result in fail, the entire\n+// When all branches of a match expression result in fail, the entire\n // match expression results in fail.\n pub fn main() {\n     let _x ="}, {"sha": "a21e6e04abcd5ab4f1d7129ee9c1ea1d3d7c22fa", "filename": "src/test/run-pass/issue-7911.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fissue-7911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fissue-7911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7911.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-pretty\n+\n+// (Closes #7911) Test that we can use the same self expression \n+// with different mutability in macro in two methods\n+\n+#[allow(unused_variable)]; // unused foobar_immut + foobar_mut\n+#[feature(macro_rules)];\n+\n+trait FooBar {}\n+struct Bar(i32);\n+struct Foo { bar: Bar }\n+\n+impl FooBar for Bar {}\n+\n+trait Test {\n+    fn get_immut<'r>(&'r self) -> &'r FooBar;\n+    fn get_mut<'r>(&'r mut self) -> &'r mut FooBar;\n+}\n+\n+macro_rules! generate_test(($type_:path, $field:expr) => (\n+    impl Test for $type_ {\n+        fn get_immut<'r>(&'r self) -> &'r FooBar {\n+            &$field as &FooBar\n+        }\n+\n+        fn get_mut<'r>(&'r mut self) -> &'r mut FooBar {\n+            &mut $field as &mut FooBar\n+        }\n+    }\n+))\n+\n+generate_test!(Foo, self.bar)\n+\n+pub fn main() {\n+    let mut foo: Foo = Foo { bar: Bar(42) };\n+    { let foobar_immut = foo.get_immut(); }\n+    { let foobar_mut = foo.get_mut(); }\n+}"}, {"sha": "f5d09e308ba88783c9b47aa6b317b2970ceeb07a", "filename": "src/test/run-pass/vec-repeat-with-cast.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fvec-repeat-with-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5d995126ac3e9b4629a55fce941c558d5bb0cb/src%2Ftest%2Frun-pass%2Fvec-repeat-with-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-repeat-with-cast.rs?ref=5c5d995126ac3e9b4629a55fce941c558d5bb0cb", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() { let _a = [0, ..1 as uint]; }"}]}