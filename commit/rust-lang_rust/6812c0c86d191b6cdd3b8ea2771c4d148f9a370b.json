{"sha": "6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MTJjMGM4NmQxOTFiNmNkZDNiOGVhMjc3MWM0ZDE0OGY5YTM3MGI=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-13T18:10:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-13T18:10:51Z"}, "message": "Merge pull request #3253 from JoshMcguigan/new_ret_no_self-3220\n\nnew_ret_no_self", "tree": {"sha": "607713d027f7f54e2cd12c4c6b1ec3ecbc2b2e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/607713d027f7f54e2cd12c4c6b1ec3ecbc2b2e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwjUrCRBK7hj4Ov3rIwAAdHIIAKTVKjeyXtRqrm+2BkysLnh6\nGEGnGWPNlGFWfnmjka56wQZujYr3I0rmrdCdWynxs3o0cEz7Xzp87BDxFcDLJUmK\n+0ZPdA7tHU0KV7nfSmHX9DPACCQIjDaa54jovWIEz6i1QcefVVBWVd26GKjB03Oy\n4Wky2Jja1sb9z9nhHPr1KyZhBGyj3sJyMwkperzLkQMmhfPOBoIClFtbyP5rFMWZ\nZemrOTVaRWvrs++oUEJE8h4nC4rD9jPoPBund/zTj3ZdgO14pzp3NnPWVnQxoo+n\n/iRWzknrifXL/nrDYMpZISq8I9CS3Aq41KCRFb/Z95gKxFMKvr659LcgDc8bzCw=\n=WS52\n-----END PGP SIGNATURE-----\n", "payload": "tree 607713d027f7f54e2cd12c4c6b1ec3ecbc2b2e3c\nparent 8b12eee1120daaf8894a095904d814b52cdabc49\nparent 3f386d33f92c4bf439043cf2866f44fc0ee5b27c\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1539454251 +0200\ncommitter GitHub <noreply@github.com> 1539454251 +0200\n\nMerge pull request #3253 from JoshMcguigan/new_ret_no_self-3220\n\nnew_ret_no_self"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "html_url": "https://github.com/rust-lang/rust/commit/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b12eee1120daaf8894a095904d814b52cdabc49", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b12eee1120daaf8894a095904d814b52cdabc49", "html_url": "https://github.com/rust-lang/rust/commit/8b12eee1120daaf8894a095904d814b52cdabc49"}, {"sha": "3f386d33f92c4bf439043cf2866f44fc0ee5b27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f386d33f92c4bf439043cf2866f44fc0ee5b27c", "html_url": "https://github.com/rust-lang/rust/commit/3f386d33f92c4bf439043cf2866f44fc0ee5b27c"}], "stats": {"total": 179, "additions": 157, "deletions": 22}, "files": [{"sha": "f9c010beea7e32da8a5699db85dbb0cf1a17774f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "patch": "@@ -11,7 +11,7 @@\n use crate::rustc::hir;\n use crate::rustc::hir::def::Def;\n use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n-use crate::rustc::ty::{self, Ty};\n+use crate::rustc::ty::{self, Ty, TyKind, Predicate};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_errors::Applicability;\n use crate::syntax::ast;\n@@ -878,6 +878,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         let name = implitem.ident.name;\n         let parent = cx.tcx.hir.get_parent(implitem.id);\n         let item = cx.tcx.hir.expect_item(parent);\n+        let def_id = cx.tcx.hir.local_def_id(item.id);\n+        let ty = cx.tcx.type_of(def_id);\n         if_chain! {\n             if let hir::ImplItemKind::Method(ref sig, id) = implitem.node;\n             if let Some(first_arg_ty) = sig.decl.inputs.get(0);\n@@ -899,8 +901,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 }\n \n                 // check conventions w.r.t. conversion method names and predicates\n-                let def_id = cx.tcx.hir.local_def_id(item.id);\n-                let ty = cx.tcx.type_of(def_id);\n                 let is_copy = is_copy(cx, ty);\n                 for &(ref conv, self_kinds) in &CONVENTIONS {\n                     if conv.check(&name.as_str()) {\n@@ -928,16 +928,37 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         break;\n                     }\n                 }\n+            }\n+        }\n+\n+        if let hir::ImplItemKind::Method(_, _) = implitem.node {\n+            let ret_ty = return_ty(cx, implitem.id);\n+\n+            // if return type is impl trait\n+            if let TyKind::Opaque(def_id, _) = ret_ty.sty {\n+\n+                // then one of the associated types must be Self\n+                for predicate in cx.tcx.predicates_of(def_id).predicates.iter() {\n+                    match predicate {\n+                        (Predicate::Projection(poly_projection_predicate), _) => {\n+                            let binder = poly_projection_predicate.ty();\n+                            let associated_type = binder.skip_binder();\n+                            let associated_type_is_self_type = same_tys(cx, ty, associated_type);\n \n-                let ret_ty = return_ty(cx, implitem.id);\n-                if name == \"new\" &&\n-                   !ret_ty.walk().any(|t| same_tys(cx, t, ty)) {\n-                    span_lint(cx,\n-                              NEW_RET_NO_SELF,\n-                              implitem.span,\n-                              \"methods called `new` usually return `Self`\");\n+                            // if the associated type is self, early return and do not trigger lint\n+                            if associated_type_is_self_type { return; }\n+                        },\n+                        (_, _) => {},\n+                    }\n                 }\n             }\n+\n+            if name == \"new\" && !same_tys(cx, ret_ty, ty) {\n+                span_lint(cx,\n+                          NEW_RET_NO_SELF,\n+                          implitem.span,\n+                          \"methods called `new` usually return `Self`\");\n+            }\n         }\n     }\n }"}, {"sha": "59c55168232915948504750e1eec478aaa1b3f36", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "patch": "@@ -1920,6 +1920,7 @@ enum ImplicitHasherType<'tcx> {\n \n impl<'tcx> ImplicitHasherType<'tcx> {\n     /// Checks that `ty` is a target type without a BuildHasher.\n+    #[allow(clippy::new_ret_no_self)]\n     fn new<'a>(cx: &LateContext<'a, 'tcx>, hir_ty: &hir::Ty) -> Option<Self> {\n         if let TyKind::Path(QPath::Resolved(None, ref path)) = hir_ty.node {\n             let params: Vec<_> = path.segments.last().as_ref()?.args.as_ref()?"}, {"sha": "ae1b1642be7ead7b12914cc2d618b95bd6efbd17", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "patch": "@@ -14,7 +14,7 @@\n #![warn(clippy::all, clippy::pedantic, clippy::option_unwrap_used)]\n #![allow(clippy::blacklisted_name, unused, clippy::print_stdout, clippy::non_ascii_literal, clippy::new_without_default,\n     clippy::new_without_default_derive, clippy::missing_docs_in_private_items, clippy::needless_pass_by_value,\n-    clippy::default_trait_access, clippy::use_self, clippy::useless_format)]\n+    clippy::default_trait_access, clippy::use_self, clippy::new_ret_no_self, clippy::useless_format)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;\n@@ -43,7 +43,7 @@ impl T {\n \n     fn to_something(self) -> u32 { 0 }\n \n-    fn new(self) {}\n+    fn new(self) -> Self { unimplemented!(); }\n }\n \n struct Lt<'a> {"}, {"sha": "307814824eaa3613c2ec8d48c640687d04b9218e", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "patch": "@@ -23,17 +23,9 @@ error: methods called `to_*` usually take self by reference; consider choosing a\n error: methods called `new` usually take no self; consider choosing a less ambiguous name\n   --> $DIR/methods.rs:46:12\n    |\n-46 |     fn new(self) {}\n+46 |     fn new(self) -> Self { unimplemented!(); }\n    |            ^^^^\n \n-error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:46:5\n-   |\n-46 |     fn new(self) {}\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n-\n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n    --> $DIR/methods.rs:114:13\n     |\n@@ -465,5 +457,5 @@ error: used unwrap() on an Option value. If you don't want to handle the None ca\n     |\n     = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 58 previous errors\n+error: aborting due to 57 previous errors\n "}, {"sha": "1a4b91cc9da93530171b45a04c497a379681738e", "filename": "tests/ui/new_ret_no_self.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "patch": "@@ -0,0 +1,93 @@\n+#![warn(clippy::new_ret_no_self)]\n+#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n+\n+fn main(){}\n+\n+trait R {\n+    type Item;\n+}\n+\n+trait Q {\n+    type Item;\n+    type Item2;\n+}\n+\n+struct S;\n+\n+impl R for S {\n+    type Item = Self;\n+}\n+\n+impl S {\n+    // should not trigger the lint\n+    pub fn new() -> impl R<Item = Self> {\n+        S\n+    }\n+}\n+\n+struct S2;\n+\n+impl R for S2 {\n+    type Item = Self;\n+}\n+\n+impl S2 {\n+    // should not trigger the lint\n+    pub fn new(_: String) -> impl R<Item = Self> {\n+        S2\n+    }\n+}\n+\n+struct S3;\n+\n+impl R for S3 {\n+    type Item = u32;\n+}\n+\n+impl S3 {\n+    // should trigger the lint\n+    pub fn new(_: String) -> impl R<Item = u32> {\n+        S3\n+    }\n+}\n+\n+struct S4;\n+\n+impl Q for S4 {\n+    type Item = u32;\n+    type Item2 = Self;\n+}\n+\n+impl S4 {\n+    // should not trigger the lint\n+    pub fn new(_: String) -> impl Q<Item = u32, Item2 = Self> {\n+        S4\n+    }\n+}\n+\n+struct T;\n+\n+impl T {\n+    // should not trigger lint\n+    pub fn new() -> Self {\n+        unimplemented!();\n+    }\n+}\n+\n+struct U;\n+\n+impl U {\n+    // should trigger lint\n+    pub fn new() -> u32 {\n+        unimplemented!();\n+    }\n+}\n+\n+struct V;\n+\n+impl V {\n+    // should trigger lint\n+    pub fn new(_: String) -> u32 {\n+        unimplemented!();\n+    }\n+}"}, {"sha": "ad26438d4efe73e4324f9b748004d0609d4d4d12", "filename": "tests/ui/new_ret_no_self.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/tests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6812c0c86d191b6cdd3b8ea2771c4d148f9a370b/tests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.stderr?ref=6812c0c86d191b6cdd3b8ea2771c4d148f9a370b", "patch": "@@ -0,0 +1,28 @@\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:49:5\n+   |\n+49 | /     pub fn new(_: String) -> impl R<Item = u32> {\n+50 | |         S3\n+51 | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:81:5\n+   |\n+81 | /     pub fn new() -> u32 {\n+82 | |         unimplemented!();\n+83 | |     }\n+   | |_____^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:90:5\n+   |\n+90 | /     pub fn new(_: String) -> u32 {\n+91 | |         unimplemented!();\n+92 | |     }\n+   | |_____^\n+\n+error: aborting due to 3 previous errors\n+"}]}