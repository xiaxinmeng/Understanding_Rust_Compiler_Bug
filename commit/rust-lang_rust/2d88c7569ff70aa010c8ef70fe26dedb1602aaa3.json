{"sha": "2d88c7569ff70aa010c8ef70fe26dedb1602aaa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkODhjNzU2OWZmNzBhYTAxMGM4ZWY3MGZlMjZkZWRiMTYwMmFhYTM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-07T22:29:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-07T22:29:02Z"}, "message": "Merge pull request #1513 from topecongiro/refactoring\n\nAdd methods to Shape", "tree": {"sha": "38503c94da683e93a44090bcc5e92e282412d2e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38503c94da683e93a44090bcc5e92e282412d2e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3", "html_url": "https://github.com/rust-lang/rust/commit/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7799e07ea2d4f8a74640454616140ba87203eda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7799e07ea2d4f8a74640454616140ba87203eda0", "html_url": "https://github.com/rust-lang/rust/commit/7799e07ea2d4f8a74640454616140ba87203eda0"}, {"sha": "4a28be486edd7255424ee7d84e5e565a838564ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a28be486edd7255424ee7d84e5e565a838564ee", "html_url": "https://github.com/rust-lang/rust/commit/4a28be486edd7255424ee7d84e5e565a838564ee"}], "stats": {"total": 157, "additions": 63, "deletions": 94}, "files": [{"sha": "a188634f98f70da3e2c9d5f27e3de9c52628cb5e", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2d88c7569ff70aa010c8ef70fe26dedb1602aaa3", "patch": "@@ -592,10 +592,7 @@ fn rewrite_closure(capture: ast::CaptureBy,\n \n         // The body of the closure is big enough to be block indented, that\n         // means we must re-format.\n-        let block_shape = Shape {\n-            width: context.config.max_width - shape.block().indent.width(),\n-            ..shape.block()\n-        };\n+        let block_shape = shape.block().with_max_width(context.config);\n         let block_str = try_opt!(block.rewrite(&context, block_shape));\n         Some(format!(\"{} {}\",\n                      prefix,\n@@ -1212,11 +1209,7 @@ fn rewrite_match(context: &RewriteContext,\n         result.push('\\n');\n         result.push_str(&arm_indent_str);\n \n-        let arm_str = arm.rewrite(&context,\n-                                  Shape {\n-                                      width: context.config.max_width - arm_shape.indent.width(),\n-                                      ..arm_shape\n-                                  });\n+        let arm_str = arm.rewrite(&context, arm_shape.with_max_width(context.config));\n         if let Some(ref arm_str) = arm_str {\n             result.push_str(arm_str);\n         } else {\n@@ -1323,10 +1316,7 @@ impl Rewrite for ast::Arm {\n         let pats_str = try_opt!(write_list(items, &fmt));\n \n         let guard_shape = if pats_str.contains('\\n') {\n-            Shape {\n-                width: context.config.max_width - shape.indent.width(),\n-                ..shape\n-            }\n+            shape.with_max_width(context.config)\n         } else {\n             shape\n         };"}, {"sha": "4b49d0a93f996d24f2ad0c878885de3cf9602e7e", "filename": "src/items.rs", "status": "modified", "additions": 27, "deletions": 42, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2d88c7569ff70aa010c8ef70fe26dedb1602aaa3", "patch": "@@ -208,8 +208,8 @@ impl<'a> FmtVisitor<'a> {\n                 let prefix = format!(\"{}static {}{}: \", vis, mut_str, item.ident);\n                 let offset = self.block_indent + prefix.len();\n                 // 1 = ;\n-                let width = self.config.max_width - offset.width() - 1;\n-                let rewrite = ty.rewrite(&self.get_context(), Shape::legacy(width, offset));\n+                let shape = Shape::indented(offset, self.config).sub_width(1).unwrap();\n+                let rewrite = ty.rewrite(&self.get_context(), shape);\n \n                 match rewrite {\n                     Some(result) => {\n@@ -332,17 +332,13 @@ impl<'a> FmtVisitor<'a> {\n                             let suffix = if semicolon_for_expr(e) { \";\" } else { \"\" };\n \n                             e.rewrite(&self.get_context(),\n-                                         Shape::legacy(self.config.max_width -\n-                                                       self.block_indent.width(),\n-                                                       self.block_indent))\n+                                         Shape::indented(self.block_indent, self.config))\n                                 .map(|s| s + suffix)\n                                 .or_else(|| Some(self.snippet(e.span)))\n                         }\n                         None => {\n                             stmt.rewrite(&self.get_context(),\n-                                         Shape::legacy(self.config.max_width -\n-                                                       self.block_indent.width(),\n-                                                       self.block_indent))\n+                                         Shape::indented(self.block_indent, self.config))\n                         }\n                     }\n                 } else {\n@@ -434,12 +430,14 @@ impl<'a> FmtVisitor<'a> {\n                                  body_lo,\n                                  body_hi);\n \n-        let budget = self.config.max_width - self.block_indent.width() - 2;\n+        let shape = Shape::indented(self.block_indent, self.config)\n+            .sub_width(2)\n+            .unwrap();\n         let fmt = ListFormatting {\n             tactic: DefinitiveListTactic::Vertical,\n             separator: \",\",\n             trailing_separator: self.config.trailing_comma,\n-            shape: Shape::legacy(budget, self.block_indent),\n+            shape: shape,\n             ends_with_newline: true,\n             config: self.config,\n         };\n@@ -463,9 +461,7 @@ impl<'a> FmtVisitor<'a> {\n                                       .node\n                                       .attrs\n                                       .rewrite(&self.get_context(),\n-                                               Shape::legacy(self.config.max_width -\n-                                                             indent.width(),\n-                                                             indent)));\n+                                               Shape::indented(indent, self.config)));\n         if !result.is_empty() {\n             result.push('\\n');\n             result.push_str(&indent.to_string(self.config));\n@@ -495,7 +491,7 @@ impl<'a> FmtVisitor<'a> {\n \n                 wrap_str(tag,\n                          self.config.max_width,\n-                         Shape::legacy(self.config.max_width - indent.width(), indent))\n+                         Shape::indented(indent, self.config))\n             }\n         };\n \n@@ -643,7 +639,7 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n             None => self_ty.span.lo,\n         };\n         let generics_indent = offset + last_line_width(&result);\n-        let shape = try_opt!(generics_shape(context.config, generics_indent));\n+        let shape = Shape::indented(generics_indent, context.config);\n         let generics_str = try_opt!(rewrite_generics(context, generics, shape, mk_sp(lo, hi)));\n         result.push_str(&generics_str);\n \n@@ -697,8 +693,8 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n         // Can't fit the self type on what's left of the line, so start a new one.\n         let indent = offset.block_indent(context.config);\n         result.push_str(&format!(\"\\n{}\", indent.to_string(context.config)));\n-        let budget = try_opt!(context.config.max_width.checked_sub(indent.width()));\n-        result.push_str(&*try_opt!(self_ty.rewrite(context, Shape::legacy(budget, indent))));\n+        result.push_str(&*try_opt!(self_ty.rewrite(context,\n+                                                   Shape::indented(indent, context.config))));\n         Some(result)\n     } else {\n         unreachable!();\n@@ -755,7 +751,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let body_lo = context.codemap.span_after(item.span, \"{\");\n \n         let generics_indent = offset + last_line_width(&result);\n-        let shape = try_opt!(generics_shape(context.config, generics_indent));\n+        let shape = Shape::indented(generics_indent, context.config);\n         let generics_str =\n             try_opt!(rewrite_generics(context, generics, shape, mk_sp(item.span.lo, body_lo)));\n         result.push_str(&generics_str);\n@@ -1000,7 +996,7 @@ fn format_tuple_struct(context: &RewriteContext,\n     let where_clause_str = match generics {\n         Some(generics) => {\n             let generics_indent = offset + last_line_width(&header_str);\n-            let shape = try_opt!(generics_shape(context.config, generics_indent));\n+            let shape = Shape::indented(generics_indent, context.config);\n             let generics_str =\n                 try_opt!(rewrite_generics(context, generics, shape, mk_sp(span.lo, body_lo)));\n             result.push_str(&generics_str);\n@@ -1131,7 +1127,7 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n     let generics_indent = indent + result.len();\n     let generics_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n-    let shape = try_opt!(try_opt!(generics_shape(context.config, generics_indent))\n+    let shape = try_opt!(Shape::indented(generics_indent, context.config)\n                              .sub_width(\" =\".len()));\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n \n@@ -1205,11 +1201,9 @@ impl Rewrite for ast::StructField {\n \n         let name = self.ident;\n         let vis = format_visibility(&self.vis);\n-        let mut attr_str = try_opt!(self.attrs\n-                                        .rewrite(context,\n-                                                 Shape::legacy(context.config.max_width -\n-                                                               shape.indent.width(),\n-                                                               shape.indent)));\n+        let mut attr_str =\n+            try_opt!(self.attrs\n+                         .rewrite(context, Shape::indented(shape.indent, context.config)));\n         if !attr_str.is_empty() {\n             attr_str.push('\\n');\n             attr_str.push_str(&shape.indent.to_string(context.config));\n@@ -1223,8 +1217,8 @@ impl Rewrite for ast::StructField {\n \n         let type_offset = shape.indent.block_indent(context.config);\n         let rewrite_type_in_next_line = || {\n-            let budget = try_opt!(context.config.max_width.checked_sub(type_offset.width()));\n-            self.ty.rewrite(context, Shape::legacy(budget, type_offset))\n+            self.ty\n+                .rewrite(context, Shape::indented(type_offset, context.config))\n         };\n \n         let last_line_width = last_line_width(&result) + type_annotation_spacing.1.len();\n@@ -1555,7 +1549,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n     // Generics.\n     let generics_indent = indent + last_line_width(&result);\n     let generics_span = mk_sp(span.lo, span_for_return(&fd.output).lo);\n-    let shape = try_opt!(generics_shape(context.config, generics_indent));\n+    let shape = Shape::indented(generics_indent, context.config);\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n     result.push_str(&generics_str);\n \n@@ -1564,10 +1558,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n     // Note that the width and indent don't really matter, we'll re-layout the\n     // return type later anyway.\n     let ret_str = try_opt!(fd.output\n-                               .rewrite(&context,\n-                                        Shape::legacy(context.config.max_width -\n-                                                      indent.width(),\n-                                                      indent)));\n+                               .rewrite(&context, Shape::indented(indent, context.config)));\n \n     let multi_line_ret_str = ret_str.contains('\\n');\n     let ret_str_len = if multi_line_ret_str { 0 } else { ret_str.len() };\n@@ -1701,9 +1692,9 @@ fn rewrite_fn_base(context: &RewriteContext,\n         if multi_line_ret_str || ret_should_indent {\n             // Now that we know the proper indent and width, we need to\n             // re-layout the return type.\n-            let budget = try_opt!(context.config.max_width.checked_sub(ret_indent.width()));\n             let ret_str = try_opt!(fd.output\n-                                       .rewrite(context, Shape::legacy(budget, ret_indent)));\n+                                       .rewrite(context,\n+                                                Shape::indented(ret_indent, context.config)));\n             result.push_str(&ret_str);\n         } else {\n             result.push_str(&ret_str);\n@@ -1759,11 +1750,10 @@ fn rewrite_fn_base(context: &RewriteContext,\n         }\n     }\n \n-    let budget = try_opt!(context.config.max_width.checked_sub(indent.block_indent));\n     let where_clause_str = try_opt!(rewrite_where_clause(context,\n                                                          where_clause,\n                                                          context.config.fn_brace_style,\n-                                                         Shape::legacy(budget, indent),\n+                                                         Shape::indented(indent, context.config),\n                                                          Density::Tall,\n                                                          \"{\",\n                                                          !has_braces,\n@@ -2226,7 +2216,7 @@ fn format_generics(context: &RewriteContext,\n                    offset: Indent,\n                    span: Span)\n                    -> Option<String> {\n-    let shape = try_opt!(generics_shape(context.config, offset));\n+    let shape = Shape::indented(offset, context.config);\n     let mut result = try_opt!(rewrite_generics(context, generics, shape, span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n@@ -2269,8 +2259,3 @@ fn format_generics(context: &RewriteContext,\n \n     Some(result)\n }\n-\n-fn generics_shape(config: &Config, indent: Indent) -> Option<Shape> {\n-    Some(Shape::legacy(try_opt!(config.max_width.checked_sub(indent.width())),\n-                       indent))\n-}"}, {"sha": "13b2df0674059d78834d17ac9ac4f817df223d45", "filename": "src/lib.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2d88c7569ff70aa010c8ef70fe26dedb1602aaa3", "patch": "@@ -223,14 +223,6 @@ pub struct Shape {\n }\n \n impl Shape {\n-    pub fn indented(indent: Indent, config: &Config) -> Shape {\n-        Shape {\n-            width: config.max_width,\n-            indent: indent,\n-            offset: indent.width(),\n-        }\n-    }\n-\n     /// `indent` is the indentation of the first line. The next lines\n     /// should begin with at least `indent` spaces (except backwards\n     /// indentation). The first line should not begin with indentation.\n@@ -254,6 +246,24 @@ impl Shape {\n         }\n     }\n \n+    pub fn indented(indent: Indent, config: &Config) -> Shape {\n+        Shape {\n+            width: config.max_width.checked_sub(indent.width()).unwrap_or(0),\n+            indent: indent,\n+            offset: indent.alignment,\n+        }\n+    }\n+\n+    pub fn with_max_width(&self, config: &Config) -> Shape {\n+        Shape {\n+            width: config\n+                .max_width\n+                .checked_sub(self.indent.width())\n+                .unwrap_or(0),\n+            ..*self\n+        }\n+    }\n+\n     pub fn offset(width: usize, indent: Indent, offset: usize) -> Shape {\n         Shape {\n             width: width,\n@@ -288,34 +298,27 @@ impl Shape {\n     }\n \n     pub fn block_left(&self, width: usize) -> Option<Shape> {\n-        let block_shape = self.block_indent(width);\n-        Some(Shape {\n-                 width: try_opt!(block_shape.width.checked_sub(width)),\n-                 ..block_shape\n-             })\n+        self.block_indent(width).sub_width(width)\n     }\n \n     pub fn add_offset(&self, extra_width: usize) -> Shape {\n         Shape {\n-            width: self.width,\n-            indent: self.indent,\n             offset: self.offset + extra_width,\n+            ..*self\n         }\n     }\n \n     pub fn block(&self) -> Shape {\n         Shape {\n-            width: self.width,\n             indent: self.indent.block_only(),\n-            offset: self.offset,\n+            ..*self\n         }\n     }\n \n     pub fn sub_width(&self, width: usize) -> Option<Shape> {\n         Some(Shape {\n                  width: try_opt!(self.width.checked_sub(width)),\n-                 indent: self.indent,\n-                 offset: self.offset,\n+                 ..*self\n              })\n     }\n \n@@ -328,11 +331,7 @@ impl Shape {\n     }\n \n     pub fn offset_left(&self, width: usize) -> Option<Shape> {\n-        Some(Shape {\n-                 width: try_opt!(self.width.checked_sub(width)),\n-                 indent: self.indent,\n-                 offset: self.offset + width,\n-             })\n+        self.add_offset(width).sub_width(width)\n     }\n \n     pub fn used_width(&self) -> usize {\n@@ -712,20 +711,20 @@ mod test {\n     fn shape_visual_indent() {\n         let config = Config::default();\n         let indent = Indent::new(4, 8);\n-        let shape = Shape::indented(indent, &config);\n+        let shape = Shape::legacy(config.max_width, indent);\n         let shape = shape.visual_indent(20);\n \n         assert_eq!(config.max_width, shape.width);\n         assert_eq!(4, shape.indent.block_indent);\n-        assert_eq!(32, shape.indent.alignment);\n-        assert_eq!(32, shape.offset);\n+        assert_eq!(28, shape.indent.alignment);\n+        assert_eq!(28, shape.offset);\n     }\n \n     #[test]\n     fn shape_block_indent_without_alignment() {\n         let config = Config::default();\n         let indent = Indent::new(4, 0);\n-        let shape = Shape::indented(indent, &config);\n+        let shape = Shape::legacy(config.max_width, indent);\n         let shape = shape.block_indent(20);\n \n         assert_eq!(config.max_width, shape.width);\n@@ -738,7 +737,7 @@ mod test {\n     fn shape_block_indent_with_alignment() {\n         let config = Config::default();\n         let indent = Indent::new(4, 8);\n-        let shape = Shape::indented(indent, &config);\n+        let shape = Shape::legacy(config.max_width, indent);\n         let shape = shape.block_indent(20);\n \n         assert_eq!(config.max_width, shape.width);"}, {"sha": "38185047b7e0140a0500e84ad11c0ec2dfb489d2", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d88c7569ff70aa010c8ef70fe26dedb1602aaa3/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2d88c7569ff70aa010c8ef70fe26dedb1602aaa3", "patch": "@@ -62,10 +62,9 @@ impl<'a> FmtVisitor<'a> {\n             ast::StmtKind::Local(..) |\n             ast::StmtKind::Expr(..) |\n             ast::StmtKind::Semi(..) => {\n-                let rewrite = stmt.rewrite(&self.get_context(),\n-                                           Shape::legacy(self.config.max_width -\n-                                                         self.block_indent.width(),\n-                                                         self.block_indent));\n+                let rewrite =\n+                    stmt.rewrite(&self.get_context(),\n+                                 Shape::indented(self.block_indent, self.config));\n                 if rewrite.is_none() {\n                     self.failed = true;\n                 }\n@@ -456,10 +455,7 @@ impl<'a> FmtVisitor<'a> {\n             codemap: parse_session.codemap(),\n             buffer: StringBuffer::new(),\n             last_pos: BytePos(0),\n-            block_indent: Indent {\n-                block_indent: 0,\n-                alignment: 0,\n-            },\n+            block_indent: Indent::empty(),\n             config: config,\n             failed: false,\n         }\n@@ -497,8 +493,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let rewrite = outers\n             .rewrite(&self.get_context(),\n-                     Shape::legacy(self.config.max_width - self.block_indent.width(),\n-                                   self.block_indent))\n+                     Shape::indented(self.block_indent, self.config))\n             .unwrap();\n         self.buffer.push_str(&rewrite);\n         let last = outers.last().unwrap();"}]}