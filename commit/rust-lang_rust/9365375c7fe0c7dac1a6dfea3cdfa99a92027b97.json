{"sha": "9365375c7fe0c7dac1a6dfea3cdfa99a92027b97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNjUzNzVjN2ZlMGM3ZGFjMWE2ZGZlYTNjZGZhOTlhOTIwMjdiOTc=", "commit": {"author": {"name": "Jack Moffitt", "email": "jack@metajack.im", "date": "2013-11-28T03:06:35Z"}, "committer": {"name": "Jack Moffitt", "email": "jack@metajack.im", "date": "2013-12-12T20:57:47Z"}, "message": "Add --dep-info to write Makefile-compatible dependency info.\n\nWhen --dep-info is given, rustc will write out a `$input_base.d` file in the\noutput directory that contains Makefile compatible dependency information for\nuse with tools like make and ninja.", "tree": {"sha": "cf66b92d4377c79419f54384d112065d22ea3347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf66b92d4377c79419f54384d112065d22ea3347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97", "html_url": "https://github.com/rust-lang/rust/commit/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/comments", "author": {"login": "metajack", "id": 28357, "node_id": "MDQ6VXNlcjI4MzU3", "avatar_url": "https://avatars.githubusercontent.com/u/28357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metajack", "html_url": "https://github.com/metajack", "followers_url": "https://api.github.com/users/metajack/followers", "following_url": "https://api.github.com/users/metajack/following{/other_user}", "gists_url": "https://api.github.com/users/metajack/gists{/gist_id}", "starred_url": "https://api.github.com/users/metajack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metajack/subscriptions", "organizations_url": "https://api.github.com/users/metajack/orgs", "repos_url": "https://api.github.com/users/metajack/repos", "events_url": "https://api.github.com/users/metajack/events{/privacy}", "received_events_url": "https://api.github.com/users/metajack/received_events", "type": "User", "site_admin": false}, "committer": {"login": "metajack", "id": 28357, "node_id": "MDQ6VXNlcjI4MzU3", "avatar_url": "https://avatars.githubusercontent.com/u/28357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metajack", "html_url": "https://github.com/metajack", "followers_url": "https://api.github.com/users/metajack/followers", "following_url": "https://api.github.com/users/metajack/following{/other_user}", "gists_url": "https://api.github.com/users/metajack/gists{/gist_id}", "starred_url": "https://api.github.com/users/metajack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metajack/subscriptions", "organizations_url": "https://api.github.com/users/metajack/orgs", "repos_url": "https://api.github.com/users/metajack/repos", "events_url": "https://api.github.com/users/metajack/events{/privacy}", "received_events_url": "https://api.github.com/users/metajack/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd4d2ea7a75b915d70112731e815ed835a683e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd4d2ea7a75b915d70112731e815ed835a683e8", "html_url": "https://github.com/rust-lang/rust/commit/5bd4d2ea7a75b915d70112731e815ed835a683e8"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "d621f82e0fd349801dfba3b38a9de4fc3fd4eda9", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=9365375c7fe0c7dac1a6dfea3cdfa99a92027b97", "patch": "@@ -720,7 +720,7 @@ pub fn link_binary(sess: Session,\n                    trans: &CrateTranslation,\n                    obj_filename: &Path,\n                    out_filename: &Path,\n-                   lm: &LinkMeta) {\n+                   lm: &LinkMeta) -> ~[Path] {\n     // If we're generating a test executable, then ignore all other output\n     // styles at all other locations\n     let outputs = if sess.opts.test {\n@@ -729,15 +729,19 @@ pub fn link_binary(sess: Session,\n         (*sess.outputs).clone()\n     };\n \n+    let mut out_filenames = ~[];\n     for output in outputs.move_iter() {\n-        link_binary_output(sess, trans, output, obj_filename, out_filename, lm);\n+        let out_file = link_binary_output(sess, trans, output, obj_filename, out_filename, lm);\n+        out_filenames.push(out_file);\n     }\n \n     // Remove the temporary object file and metadata if we aren't saving temps\n     if !sess.opts.save_temps {\n         fs::unlink(obj_filename);\n         fs::unlink(&obj_filename.with_extension(\"metadata.o\"));\n     }\n+\n+    out_filenames\n }\n \n fn is_writeable(p: &Path) -> bool {\n@@ -754,7 +758,7 @@ fn link_binary_output(sess: Session,\n                       output: session::OutputStyle,\n                       obj_filename: &Path,\n                       out_filename: &Path,\n-                      lm: &LinkMeta) {\n+                      lm: &LinkMeta) -> Path {\n     let libname = output_lib_filename(lm);\n     let out_filename = match output {\n         session::OutputRlib => {\n@@ -805,6 +809,8 @@ fn link_binary_output(sess: Session,\n             link_natively(sess, true, obj_filename, &out_filename);\n         }\n     }\n+\n+    out_filename\n }\n \n // Create an 'rlib'"}, {"sha": "6206b4efa321d813af5de85973a938e10195559d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=9365375c7fe0c7dac1a6dfea3cdfa99a92027b97", "patch": "@@ -384,13 +384,34 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n /// This should produce either a finished executable or library.\n pub fn phase_6_link_output(sess: Session,\n                            trans: &CrateTranslation,\n+                           input: &input,\n                            outputs: &OutputFilenames) {\n-    time(sess.time_passes(), \"linking\", (), |_|\n+    let outputs = time(sess.time_passes(), \"linking\", (), |_|\n          link::link_binary(sess,\n                            trans,\n                            &outputs.obj_filename,\n                            &outputs.out_filename,\n                            &trans.link));\n+\n+    // Write out dependency rules to the .d file if requested\n+    if sess.opts.write_dependency_info {\n+        match *input {\n+            file_input(ref input_path) => {\n+                let files: ~[@str] = sess.codemap.files.iter()\n+                    .filter_map(|fmap| if fmap.is_real_file() { Some(fmap.name) } else { None })\n+                    .collect();\n+                let mut output_path = outputs[0].dir_path();\n+                let filestem = input_path.filestem().expect(\"input file must have stem\");\n+                output_path.push(Path::new(filestem).with_extension(\"d\"));\n+                let mut file = io::File::create(&output_path);\n+                for output in outputs.iter() {\n+                    write!(&mut file as &mut Writer,\n+                           \"{}: {}\\n\\n\", output.display(), files.connect(\" \"));\n+                }\n+            }\n+            str_input(_) => {}\n+        }\n+    }\n }\n \n pub fn stop_after_phase_3(sess: Session) -> bool {\n@@ -438,7 +459,7 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n     };\n     phase_5_run_llvm_passes(sess, &trans, outputs);\n     if stop_after_phase_5(sess) { return; }\n-    phase_6_link_output(sess, &trans, outputs);\n+    phase_6_link_output(sess, &trans, input, outputs);\n }\n \n struct IdentifiedAnnotation {\n@@ -750,6 +771,7 @@ pub fn build_session_options(binary: @str,\n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"), demitter);\n     let test = matches.opt_present(\"test\");\n     let android_cross_path = matches.opt_str(\"android-cross-path\");\n+    let write_dependency_info = matches.opt_present(\"dep-info\");\n \n     let custom_passes = match matches.opt_str(\"passes\") {\n         None => ~[],\n@@ -793,7 +815,8 @@ pub fn build_session_options(binary: @str,\n         parse_only: parse_only,\n         no_trans: no_trans,\n         debugging_opts: debugging_opts,\n-        android_cross_path: android_cross_path\n+        android_cross_path: android_cross_path,\n+        write_dependency_info: write_dependency_info,\n     };\n     return sopts;\n }\n@@ -902,6 +925,8 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n                           or identified (fully parenthesized,\n                           AST nodes and blocks with IDs)\", \"TYPE\"),\n   optflag(\"S\", \"\",    \"Compile only; do not assemble or link\"),\n+  optflag(\"\", \"dep-info\",\n+                        \"Output dependency info to .d file after compiling\"),\n   optflag(\"\", \"save-temps\",\n                         \"Write intermediate files (.bc, .opt.bc, .o)\n                           in addition to normal output\"),"}, {"sha": "d12e06fab3fc73023bcb5e7f8c55f8b0b37e03c5", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=9365375c7fe0c7dac1a6dfea3cdfa99a92027b97", "patch": "@@ -170,6 +170,8 @@ pub struct options {\n     no_trans: bool,\n     debugging_opts: uint,\n     android_cross_path: Option<~str>,\n+    // Whether to write .d dependency files\n+    write_dependency_info: bool,\n }\n \n pub struct crate_metadata {\n@@ -393,6 +395,7 @@ pub fn basic_options() -> @options {\n         no_trans: false,\n         debugging_opts: 0u,\n         android_cross_path: None,\n+        write_dependency_info: false,\n     }\n }\n "}, {"sha": "0f46a1acf87d9cbb5635f0920b358845ec5ae9c4", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=9365375c7fe0c7dac1a6dfea3cdfa99a92027b97", "patch": "@@ -353,7 +353,8 @@ pub fn compile_crate_from_input(input: &Path,\n \n     // bad copy\n     debug!(\"out_dir = {}\", out_dir.display());\n-    let mut outputs = driver::build_output_filenames(&driver::file_input(input.clone()),\n+    let file_input = driver::file_input(input.clone());\n+    let mut outputs = driver::build_output_filenames(&file_input,\n                                                      &Some(out_dir.clone()), &None,\n                                                      crate.attrs, sess);\n     match what {\n@@ -388,7 +389,7 @@ pub fn compile_crate_from_input(input: &Path,\n     // -c\n     if driver::stop_after_phase_5(sess)\n         || stop_before == Link || stop_before == Assemble { return Some(outputs.out_filename); }\n-    driver::phase_6_link_output(sess, &translation, outputs);\n+    driver::phase_6_link_output(sess, &translation, &file_input, outputs);\n \n     // Register dependency on the source file\n     // FIXME (#9639): This needs to handle non-utf8 paths"}, {"sha": "0509760120a428ba2bcc176fd3b1e087a4d392f4", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9365375c7fe0c7dac1a6dfea3cdfa99a92027b97/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=9365375c7fe0c7dac1a6dfea3cdfa99a92027b97", "patch": "@@ -260,6 +260,10 @@ impl FileMap {\n         };\n         self.multibyte_chars.push(mbc);\n     }\n+\n+    pub fn is_real_file(&self) -> bool {\n+        !(self.name.starts_with(\"<\") && self.name.ends_with(\">\"))\n+    }\n }\n \n pub struct CodeMap {"}]}