{"sha": "e572c5a3d53e2ca608aa38d8d1a07a0e91c524a9", "node_id": "C_kwDOAAsO6NoAKGU1NzJjNWEzZDUzZTJjYTYwOGFhMzhkOGQxYTA3YTBlOTFjNTI0YTk", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-01-22T15:02:18Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-01-22T15:02:18Z"}, "message": "Simplify Send/Sync of std::thread::Packet.", "tree": {"sha": "e4b043c0abff7923d4e28420701b73aab097db5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b043c0abff7923d4e28420701b73aab097db5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e572c5a3d53e2ca608aa38d8d1a07a0e91c524a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e572c5a3d53e2ca608aa38d8d1a07a0e91c524a9", "html_url": "https://github.com/rust-lang/rust/commit/e572c5a3d53e2ca608aa38d8d1a07a0e91c524a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e572c5a3d53e2ca608aa38d8d1a07a0e91c524a9/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb73704e2f0be18f44c295a9b8435e015419dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb73704e2f0be18f44c295a9b8435e015419dda", "html_url": "https://github.com/rust-lang/rust/commit/4cb73704e2f0be18f44c295a9b8435e015419dda"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "8f16259b87016f449479def3a8a680ad09255e8e", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e572c5a3d53e2ca608aa38d8d1a07a0e91c524a9/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e572c5a3d53e2ca608aa38d8d1a07a0e91c524a9/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=e572c5a3d53e2ca608aa38d8d1a07a0e91c524a9", "patch": "@@ -1270,18 +1270,16 @@ pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;\n // (the caller will never read this packet until the thread has exited).\n //\n // An Arc to the packet is stored into a `JoinInner` which in turns is placed\n-// in `JoinHandle`. Due to the usage of `UnsafeCell` we need to manually worry\n-// about impls like Send and Sync. The type `T` should already always be Send\n-// (otherwise the thread could not have been created) and this type is\n-// inherently Sync because no methods take &self. Regardless, however, we add\n-// inheriting impls for Send/Sync to this type to ensure it's Send/Sync and\n-// that future modifications will still appropriately classify it.\n+// in `JoinHandle`.\n struct Packet<'scope, T> {\n     scope: Option<&'scope scoped::ScopeData>,\n     result: UnsafeCell<Option<Result<T>>>,\n }\n \n-unsafe impl<'scope, T: Send> Send for Packet<'scope, T> {}\n+// Due to the usage of `UnsafeCell` we need to manually implement Sync.\n+// The type `T` should already always be Send (otherwise the thread could not\n+// have been created) and the Packet is Sync because all access to the\n+// `UnsafeCell` synchronized (by the `join()` boundary), and `ScopeData` is Sync.\n unsafe impl<'scope, T: Sync> Sync for Packet<'scope, T> {}\n \n impl<'scope, T> Drop for Packet<'scope, T> {"}]}