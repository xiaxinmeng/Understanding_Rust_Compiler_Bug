{"sha": "e644f64f2a68a14a841adb3f3e897d1fcb35f23f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NDRmNjRmMmE2OGExNGE4NDFhZGIzZjNlODk3ZDFmY2IzNWYyM2Y=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-03T11:27:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-03T11:27:10Z"}, "message": "Merge #4678\n\n4678: Unsquish parameter types in tooltips for macro-generated functions r=aloucks a=aloucks\n\nNote the missing whitespace between `:` and the parameter type.\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/221559/83364680-faf13d80-a370-11ea-96b7-a041969a4954.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/221559/83364685-03e20f00-a371-11ea-9668-4e6ebcb81947.png)\r\n\n\nCo-authored-by: Aaron Loucks <aloucks@cofront.net>", "tree": {"sha": "09c4d8eff84a57c684f7a961bf948b38c14d3da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09c4d8eff84a57c684f7a961bf948b38c14d3da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e644f64f2a68a14a841adb3f3e897d1fcb35f23f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe14kOCRBK7hj4Ov3rIwAAdHIIACxz4bExaiSPTSQQFSQhXYGH\nABUwO8GyMYTIwUYSiUHH4BDF8SGyu0vBGKPYOrOFXi8abZmPjSXcMY3iSTXHvCFd\nCwprE7fF+c3HsJ4eIbB/CztdD5bEwoEknai2MTU1p3ctd+lKSi9ug+c3Jlw+fvRh\nQNnTNFxj8yKxB73E79YE2SzDqPEkdw9jMHripdurapgcLrCem2EwQzDDXvQul0c3\n8fUMj691tIePFHhMbwI5EkKG0JxUsHILPYSW96ZiLi3phPb/Jku9WL+8+hbWBPwj\nFbfcNI6DLLgBnCr7togRTDjqNgSU7/4ExWzP2us+2KrQLiIxUds+/NNDulMrgjc=\n=zP7i\n-----END PGP SIGNATURE-----\n", "payload": "tree 09c4d8eff84a57c684f7a961bf948b38c14d3da3\nparent c6b739bad0c0a458d3ae6bb2bc4514477f325e31\nparent f06b2bcd91329fb795839a4eabd8f43aa472aeb2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591183630 +0000\ncommitter GitHub <noreply@github.com> 1591183630 +0000\n\nMerge #4678\n\n4678: Unsquish parameter types in tooltips for macro-generated functions r=aloucks a=aloucks\n\nNote the missing whitespace between `:` and the parameter type.\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/221559/83364680-faf13d80-a370-11ea-96b7-a041969a4954.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/221559/83364685-03e20f00-a371-11ea-9668-4e6ebcb81947.png)\r\n\n\nCo-authored-by: Aaron Loucks <aloucks@cofront.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e644f64f2a68a14a841adb3f3e897d1fcb35f23f", "html_url": "https://github.com/rust-lang/rust/commit/e644f64f2a68a14a841adb3f3e897d1fcb35f23f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "html_url": "https://github.com/rust-lang/rust/commit/c6b739bad0c0a458d3ae6bb2bc4514477f325e31"}, {"sha": "f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f06b2bcd91329fb795839a4eabd8f43aa472aeb2", "html_url": "https://github.com/rust-lang/rust/commit/f06b2bcd91329fb795839a4eabd8f43aa472aeb2"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "cc63ec36ceda99ce6c35a617146fc9772ce62935", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e644f64f2a68a14a841adb3f3e897d1fcb35f23f", "patch": "@@ -1640,6 +1640,7 @@ dependencies = [\n  \"relative-path\",\n  \"rustc-hash\",\n  \"serde_json\",\n+ \"stdx\",\n  \"text-size\",\n ]\n "}, {"sha": "ca8a6a650994c38f24da8ec16d9f98fe0d5aad21", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=e644f64f2a68a14a841adb3f3e897d1fcb35f23f", "patch": "@@ -10,7 +10,7 @@ use std::{\n use hir::{Docs, Documentation, HasSource, HirDisplay};\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n-use stdx::SepBy;\n+use stdx::{split1, SepBy};\n \n use crate::display::{generic_parameters, where_predicates};\n \n@@ -207,7 +207,16 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n                     res.push(raw_param);\n                 }\n \n-                res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\n+                // macro-generated functions are missing whitespace\n+                fn fmt_param(param: ast::Param) -> String {\n+                    let text = param.syntax().text().to_string();\n+                    match split1(&text, ':') {\n+                        Some((left, right)) => format!(\"{}: {}\", left.trim(), right.trim()),\n+                        _ => text,\n+                    }\n+                }\n+\n+                res.extend(param_list.params().map(fmt_param));\n                 res_types.extend(param_list.params().map(|param| {\n                     let param_text = param.syntax().text().to_string();\n                     match param_text.split(':').nth(1).and_then(|it| it.get(1..)) {"}, {"sha": "c0356344ca24e94f75a75d1fb08f225241f7a261", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=e644f64f2a68a14a841adb3f3e897d1fcb35f23f", "patch": "@@ -124,3 +124,8 @@ pub fn replace(buf: &mut String, from: char, to: &str) {\n     // FIXME: do this in place.\n     *buf = buf.replace(from, to)\n }\n+\n+pub fn split1(haystack: &str, delim: char) -> Option<(&str, &str)> {\n+    let idx = haystack.find(delim)?;\n+    Some((&haystack[..idx], &haystack[idx + delim.len_utf8()..]))\n+}"}, {"sha": "8840bf36ae325c79b39eaccaaa2ebdd56fa709d2", "filename": "crates/test_utils/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/crates%2Ftest_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/crates%2Ftest_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2FCargo.toml?ref=e644f64f2a68a14a841adb3f3e897d1fcb35f23f", "patch": "@@ -14,4 +14,5 @@ serde_json = \"1.0.48\"\n relative-path = \"1.0.0\"\n rustc-hash = \"1.1.0\"\n \n-ra_cfg = { path = \"../ra_cfg\" }\n\\ No newline at end of file\n+ra_cfg = { path = \"../ra_cfg\" }\n+stdx = { path = \"../stdx\" }\n\\ No newline at end of file"}, {"sha": "2141bfc202779a705eb7da0f378b2a94b61896d8", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e644f64f2a68a14a841adb3f3e897d1fcb35f23f/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=e644f64f2a68a14a841adb3f3e897d1fcb35f23f", "patch": "@@ -15,6 +15,7 @@ use std::{\n };\n \n pub use ra_cfg::CfgOptions;\n+use stdx::split1;\n \n pub use relative_path::{RelativePath, RelativePathBuf};\n pub use rustc_hash::FxHashMap;\n@@ -332,11 +333,6 @@ fn parse_meta(meta: &str) -> FixtureMeta {\n     FixtureMeta::File(FileMeta { path, crate_name: krate, deps, edition, cfg, env })\n }\n \n-fn split1(haystack: &str, delim: char) -> Option<(&str, &str)> {\n-    let idx = haystack.find(delim)?;\n-    Some((&haystack[..idx], &haystack[idx + delim.len_utf8()..]))\n-}\n-\n /// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n /// This allows fixtures to start off in a different indentation, e.g. to align the first line with\n /// the other lines visually:"}]}