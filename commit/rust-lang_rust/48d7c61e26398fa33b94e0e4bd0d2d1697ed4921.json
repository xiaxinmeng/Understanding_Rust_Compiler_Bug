{"sha": "48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZDdjNjFlMjYzOThmYTMzYjk0ZTBlNGJkMGQyZDE2OTdlZDQ5MjE=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-23T18:59:18Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-23T18:59:18Z"}, "message": "add support of feature flag for runnables #4464\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "7d22388871a7f4cb261cf37148c31fea91772d63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d22388871a7f4cb261cf37148c31fea91772d63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "html_url": "https://github.com/rust-lang/rust/commit/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43339058e32e8bb0d218390b9df5b5a68fe57ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/43339058e32e8bb0d218390b9df5b5a68fe57ca7", "html_url": "https://github.com/rust-lang/rust/commit/43339058e32e8bb0d218390b9df5b5a68fe57ca7"}], "stats": {"total": 244, "additions": 145, "deletions": 99}, "files": [{"sha": "b406522d2404ae3bf59cf0405d38e39f8d2fe636", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "patch": "@@ -1387,17 +1387,20 @@ dependencies = [\n  \"lsp-types\",\n  \"parking_lot\",\n  \"pico-args\",\n+ \"ra_cfg\",\n  \"ra_db\",\n  \"ra_flycheck\",\n  \"ra_hir\",\n  \"ra_hir_def\",\n  \"ra_hir_ty\",\n  \"ra_ide\",\n+ \"ra_mbe\",\n  \"ra_proc_macro_srv\",\n  \"ra_prof\",\n  \"ra_project_model\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n+ \"ra_tt\",\n  \"ra_vfs\",\n  \"rand\",\n  \"relative-path\","}, {"sha": "85b100c6adfe6523c1e3cf5488815682ad90c05f", "filename": "crates/ra_cfg/src/cfg_expr.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs?ref=48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "patch": "@@ -33,33 +33,6 @@ impl CfgExpr {\n             CfgExpr::Not(pred) => pred.fold(query).map(|s| !s),\n         }\n     }\n-\n-    /// Return minimal features needed\n-    pub fn minimal_features_needed(&self) -> Vec<SmolStr> {\n-        let mut features = vec![];\n-        self.collect_minimal_features_needed(&mut features);\n-\n-        features\n-    }\n-\n-    fn collect_minimal_features_needed(&self, features: &mut Vec<SmolStr>) {\n-        match self {\n-            CfgExpr::KeyValue { key, value } if key == \"feature\" => features.push(value.clone()),\n-            CfgExpr::All(preds) => {\n-                preds.iter().for_each(|cfg| cfg.collect_minimal_features_needed(features));\n-            }\n-            CfgExpr::Any(preds) => {\n-                for cfg in preds {\n-                    let len_features = features.len();\n-                    cfg.collect_minimal_features_needed(features);\n-                    if len_features != features.len() {\n-                        break;\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n }\n \n pub fn parse_cfg(tt: &Subtree) -> CfgExpr {\n@@ -160,32 +133,4 @@ mod tests {\n             ]),\n         );\n     }\n-\n-    #[test]\n-    fn test_cfg_expr_minimal_features_needed() {\n-        let (subtree, _) = get_token_tree_generated(r#\"#![cfg(feature = \"baz\")]\"#);\n-        let cfg_expr = parse_cfg(&subtree);\n-\n-        assert_eq!(cfg_expr.minimal_features_needed(), vec![SmolStr::new(\"baz\")]);\n-\n-        let (subtree, _) =\n-            get_token_tree_generated(r#\"#![cfg(all(feature = \"baz\", feature = \"foo\"))]\"#);\n-        let cfg_expr = parse_cfg(&subtree);\n-\n-        assert_eq!(\n-            cfg_expr.minimal_features_needed(),\n-            vec![SmolStr::new(\"baz\"), SmolStr::new(\"foo\")]\n-        );\n-\n-        let (subtree, _) =\n-            get_token_tree_generated(r#\"#![cfg(any(feature = \"baz\", feature = \"foo\", unix))]\"#);\n-        let cfg_expr = parse_cfg(&subtree);\n-\n-        assert_eq!(cfg_expr.minimal_features_needed(), vec![SmolStr::new(\"baz\")]);\n-\n-        let (subtree, _) = get_token_tree_generated(r#\"#![cfg(foo)]\"#);\n-        let cfg_expr = parse_cfg(&subtree);\n-\n-        assert!(cfg_expr.minimal_features_needed().is_empty());\n-    }\n }"}, {"sha": "a96c5f157ba596b823997f3fef3109fe75b121fe", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "patch": "@@ -10,13 +10,14 @@ use ra_syntax::{\n \n use crate::FileId;\n use ast::DocCommentsOwner;\n+use ra_cfg::CfgExpr;\n use std::fmt::Display;\n \n #[derive(Debug)]\n pub struct Runnable {\n     pub range: TextRange,\n     pub kind: RunnableKind,\n-    pub features_needed: Option<Vec<SmolStr>>,\n+    pub cfg_exprs: Vec<CfgExpr>,\n }\n \n #[derive(Debug)]\n@@ -118,9 +119,10 @@ fn runnable_fn(\n     };\n \n     let attrs = Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &fn_def));\n-    let features_needed = get_features_needed(attrs);\n+    let cfg_exprs =\n+        attrs.by_key(\"cfg\").tt_values().map(|subtree| ra_cfg::parse_cfg(subtree)).collect();\n \n-    Some(Runnable { range: fn_def.syntax().text_range(), kind, features_needed })\n+    Some(Runnable { range: fn_def.syntax().text_range(), kind, cfg_exprs })\n }\n \n #[derive(Debug)]\n@@ -183,15 +185,10 @@ fn runnable_mod(\n         .join(\"::\");\n \n     let attrs = Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &module));\n-    let features_needed = get_features_needed(attrs);\n+    let cfg_exprs =\n+        attrs.by_key(\"cfg\").tt_values().map(|subtree| ra_cfg::parse_cfg(subtree)).collect();\n \n-    Some(Runnable { range, kind: RunnableKind::TestMod { path }, features_needed })\n-}\n-\n-fn get_features_needed(attrs: Attrs) -> Option<Vec<SmolStr>> {\n-    let cfg_expr = attrs.by_key(\"cfg\").tt_values().map(|subtree| ra_cfg::parse_cfg(subtree));\n-    let features_needed = cfg_expr.map(|cfg| cfg.minimal_features_needed()).flatten().collect();\n-    Some(features_needed).filter(|it: &Vec<SmolStr>| !it.is_empty())\n+    Some(Runnable { range, kind: RunnableKind::TestMod { path }, cfg_exprs })\n }\n \n #[cfg(test)]\n@@ -223,7 +220,7 @@ mod tests {\n             Runnable {\n                 range: 1..21,\n                 kind: Bin,\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n             Runnable {\n                 range: 22..46,\n@@ -235,7 +232,7 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n             Runnable {\n                 range: 47..81,\n@@ -247,7 +244,7 @@ mod tests {\n                         ignore: true,\n                     },\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n         ]\n         \"###\n@@ -275,7 +272,7 @@ mod tests {\n             Runnable {\n                 range: 1..21,\n                 kind: Bin,\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n             Runnable {\n                 range: 22..64,\n@@ -284,7 +281,7 @@ mod tests {\n                         \"foo\",\n                     ),\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n         ]\n         \"###\n@@ -315,7 +312,7 @@ mod tests {\n             Runnable {\n                 range: 1..21,\n                 kind: Bin,\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n             Runnable {\n                 range: 51..105,\n@@ -324,7 +321,7 @@ mod tests {\n                         \"Data::foo\",\n                     ),\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n         ]\n         \"###\n@@ -352,7 +349,7 @@ mod tests {\n                 kind: TestMod {\n                     path: \"test_mod\",\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n             Runnable {\n                 range: 28..57,\n@@ -364,7 +361,7 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n         ]\n         \"###\n@@ -394,7 +391,7 @@ mod tests {\n                 kind: TestMod {\n                     path: \"foo::test_mod\",\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n             Runnable {\n                 range: 46..79,\n@@ -406,7 +403,7 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n         ]\n         \"###\n@@ -438,7 +435,7 @@ mod tests {\n                 kind: TestMod {\n                     path: \"foo::bar::test_mod\",\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n             Runnable {\n                 range: 68..105,\n@@ -450,7 +447,7 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n-                features_needed: None,\n+                cfg_exprs: [],\n             },\n         ]\n         \"###\n@@ -482,11 +479,12 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n-                features_needed: Some(\n-                    [\n-                        \"foo\",\n-                    ],\n-                ),\n+                cfg_exprs: [\n+                    KeyValue {\n+                        key: \"feature\",\n+                        value: \"foo\",\n+                    },\n+                ],\n             },\n         ]\n         \"###\n@@ -518,12 +516,20 @@ mod tests {\n                         ignore: false,\n                     },\n                 },\n-                features_needed: Some(\n-                    [\n-                        \"foo\",\n-                        \"bar\",\n-                    ],\n-                ),\n+                cfg_exprs: [\n+                    All(\n+                        [\n+                            KeyValue {\n+                                key: \"feature\",\n+                                value: \"foo\",\n+                            },\n+                            KeyValue {\n+                                key: \"feature\",\n+                                value: \"bar\",\n+                            },\n+                        ],\n+                    ),\n+                ],\n             },\n         ]\n         \"###"}, {"sha": "65b487db3b98267547d659452b6553568dc41d67", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "patch": "@@ -40,6 +40,7 @@ ra_project_model = { path = \"../ra_project_model\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_vfs = \"0.6.0\"\n+ra_cfg = { path = \"../ra_cfg\"}\n \n # This should only be used in CLI\n ra_db = { path = \"../ra_db\" }\n@@ -55,6 +56,8 @@ winapi = \"0.3.8\"\n tempfile = \"3.1.0\"\n insta = \"0.16.0\"\n test_utils = { path = \"../test_utils\" }\n+mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n+tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n \n [features]\n jemalloc = [ \"ra_prof/jemalloc\" ]"}, {"sha": "441fb61df006185f0e69f003b329b853140e0e7d", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "patch": "@@ -21,7 +21,7 @@ impl CargoTargetSpec {\n     pub(crate) fn runnable_args(\n         spec: Option<CargoTargetSpec>,\n         kind: &RunnableKind,\n-        features_needed: &Option<Vec<SmolStr>>,\n+        features_needed: &Vec<SmolStr>,\n     ) -> Result<(Vec<String>, Vec<String>)> {\n         let mut args = Vec::new();\n         let mut extra_args = Vec::new();\n@@ -76,12 +76,11 @@ impl CargoTargetSpec {\n             }\n         }\n \n-        if let Some(features_needed) = features_needed {\n-            features_needed.iter().for_each(|feature| {\n-                args.push(\"--features\".to_string());\n-                args.push(feature.to_string());\n-            });\n-        }\n+        features_needed.iter().for_each(|feature| {\n+            args.push(\"--features\".to_string());\n+            args.push(feature.to_string());\n+        });\n+\n         Ok((args, extra_args))\n     }\n "}, {"sha": "5f6e845a8878ed66c0a972ad52ed50db05f6324d", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d7c61e26398fa33b94e0e4bd0d2d1697ed4921/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=48d7c61e26398fa33b94e0e4bd0d2d1697ed4921", "patch": "@@ -17,12 +17,13 @@ use lsp_types::{\n     SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n     SemanticTokensResult, SymbolInformation, TextDocumentIdentifier, TextEdit, Url, WorkspaceEdit,\n };\n+use ra_cfg::CfgExpr;\n use ra_ide::{\n     Assist, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n };\n use ra_prof::profile;\n use ra_project_model::TargetKind;\n-use ra_syntax::{AstNode, SyntaxKind, TextRange, TextSize};\n+use ra_syntax::{AstNode, SmolStr, SyntaxKind, TextRange, TextSize};\n use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n@@ -38,6 +39,7 @@ use crate::{\n     world::WorldSnapshot,\n     LspError, Result,\n };\n+use hir::Attrs;\n \n pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n     let _p = profile(\"handle_analyzer_status\");\n@@ -1006,8 +1008,12 @@ fn to_lsp_runnable(\n ) -> Result<lsp_ext::Runnable> {\n     let spec = CargoTargetSpec::for_file(world, file_id)?;\n     let target = spec.as_ref().map(|s| s.target.clone());\n+    let mut features_needed = vec![];\n+    for cfg_expr in &runnable.cfg_exprs {\n+        collect_minimal_features_needed(cfg_expr, &mut features_needed);\n+    }\n     let (args, extra_args) =\n-        CargoTargetSpec::runnable_args(spec, &runnable.kind, &runnable.features_needed)?;\n+        CargoTargetSpec::runnable_args(spec, &runnable.kind, &features_needed)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n         RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n@@ -1033,6 +1039,39 @@ fn to_lsp_runnable(\n     })\n }\n \n+fn get_features_needed(attrs: Attrs) -> Option<Vec<SmolStr>> {\n+    let cfg_expr = attrs.by_key(\"cfg\").tt_values().map(|subtree| ra_cfg::parse_cfg(subtree));\n+    let features_needed = cfg_expr\n+        .map(|cfg| {\n+            let mut min_features = vec![];\n+            collect_minimal_features_needed(&cfg, &mut min_features);\n+            min_features\n+        })\n+        .flatten()\n+        .collect();\n+    Some(features_needed).filter(|it: &Vec<SmolStr>| !it.is_empty())\n+}\n+\n+/// Fill minimal features needed\n+fn collect_minimal_features_needed(cfg_expr: &CfgExpr, features: &mut Vec<SmolStr>) {\n+    match cfg_expr {\n+        CfgExpr::KeyValue { key, value } if key == \"feature\" => features.push(value.clone()),\n+        CfgExpr::All(preds) => {\n+            preds.iter().for_each(|cfg| collect_minimal_features_needed(cfg, features));\n+        }\n+        CfgExpr::Any(preds) => {\n+            for cfg in preds {\n+                let len_features = features.len();\n+                collect_minimal_features_needed(cfg, features);\n+                if len_features != features.len() {\n+                    break;\n+                }\n+            }\n+        }\n+        _ => {}\n+    }\n+}\n+\n pub fn handle_inlay_hints(\n     world: WorldSnapshot,\n     params: InlayHintsParams,\n@@ -1169,3 +1208,54 @@ pub fn handle_semantic_tokens_range(\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n     Ok(Some(semantic_tokens.into()))\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use mbe::{ast_to_token_tree, TokenMap};\n+    use ra_cfg::parse_cfg;\n+    use ra_syntax::{\n+        ast::{self, AstNode},\n+        SmolStr,\n+    };\n+\n+    fn get_token_tree_generated(input: &str) -> (tt::Subtree, TokenMap) {\n+        let source_file = ast::SourceFile::parse(input).ok().unwrap();\n+        let tt = source_file.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n+        ast_to_token_tree(&tt).unwrap()\n+    }\n+\n+    #[test]\n+    fn test_cfg_expr_minimal_features_needed() {\n+        let (subtree, _) = get_token_tree_generated(r#\"#![cfg(feature = \"baz\")]\"#);\n+        let cfg_expr = parse_cfg(&subtree);\n+        let mut min_features = vec![];\n+        collect_minimal_features_needed(&cfg_expr, &mut min_features);\n+\n+        assert_eq!(min_features, vec![SmolStr::new(\"baz\")]);\n+\n+        let (subtree, _) =\n+            get_token_tree_generated(r#\"#![cfg(all(feature = \"baz\", feature = \"foo\"))]\"#);\n+        let cfg_expr = parse_cfg(&subtree);\n+\n+        let mut min_features = vec![];\n+        collect_minimal_features_needed(&cfg_expr, &mut min_features);\n+        assert_eq!(min_features, vec![SmolStr::new(\"baz\"), SmolStr::new(\"foo\")]);\n+\n+        let (subtree, _) =\n+            get_token_tree_generated(r#\"#![cfg(any(feature = \"baz\", feature = \"foo\", unix))]\"#);\n+        let cfg_expr = parse_cfg(&subtree);\n+\n+        let mut min_features = vec![];\n+        collect_minimal_features_needed(&cfg_expr, &mut min_features);\n+        assert_eq!(min_features, vec![SmolStr::new(\"baz\")]);\n+\n+        let (subtree, _) = get_token_tree_generated(r#\"#![cfg(foo)]\"#);\n+        let cfg_expr = parse_cfg(&subtree);\n+\n+        let mut min_features = vec![];\n+        collect_minimal_features_needed(&cfg_expr, &mut min_features);\n+        assert!(min_features.is_empty());\n+    }\n+}"}]}