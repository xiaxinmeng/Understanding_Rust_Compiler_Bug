{"sha": "f7cb9a09e4f05260f19c9e626457e3a7f2835c81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Y2I5YTA5ZTRmMDUyNjBmMTljOWU2MjY0NTdlM2E3ZjI4MzVjODE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-17T18:40:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-17T18:40:26Z"}, "message": "Merge pull request #84 from oli-obk/master\n\nrustup", "tree": {"sha": "c2a0f92b6eb59104e5ed1830c5efd746a74f6233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2a0f92b6eb59104e5ed1830c5efd746a74f6233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7cb9a09e4f05260f19c9e626457e3a7f2835c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cb9a09e4f05260f19c9e626457e3a7f2835c81", "html_url": "https://github.com/rust-lang/rust/commit/f7cb9a09e4f05260f19c9e626457e3a7f2835c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7cb9a09e4f05260f19c9e626457e3a7f2835c81/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9322dec830ba56ab81e5c7a467441501df4680f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9322dec830ba56ab81e5c7a467441501df4680f6", "html_url": "https://github.com/rust-lang/rust/commit/9322dec830ba56ab81e5c7a467441501df4680f6"}, {"sha": "4ebf7bfea6eeecab4ec605abfa01cc61af53f95e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ebf7bfea6eeecab4ec605abfa01cc61af53f95e", "html_url": "https://github.com/rust-lang/rust/commit/4ebf7bfea6eeecab4ec605abfa01cc61af53f95e"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "a80ac216aa23fa8e67790fdadecd817bd9632184", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7cb9a09e4f05260f19c9e626457e3a7f2835c81/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cb9a09e4f05260f19c9e626457e3a7f2835c81/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=f7cb9a09e4f05260f19c9e626457e3a7f2835c81", "patch": "@@ -5,7 +5,6 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::{self, Ty, TyCtxt, BareFnTy};\n-use std::rc::Rc;\n use syntax::codemap::{DUMMY_SP, Span};\n use syntax::{ast, attr};\n \n@@ -479,7 +478,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     _ => bug!(\"cannot convert {:?} to {:?}\", closure_kind, trait_closure_kind),\n                 }\n-                Ok((vtable_closure.closure_def_id, vtable_closure.substs.func_substs))\n+                Ok((vtable_closure.closure_def_id, vtable_closure.substs.substs))\n             }\n \n             traits::VtableFnPointer(vtable_fn_ptr) => {\n@@ -715,7 +714,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n #[derive(Debug)]\n pub(super) struct ImplMethod<'tcx> {\n-    pub(super) method: Rc<ty::Method<'tcx>>,\n+    pub(super) method: ty::AssociatedItem,\n     pub(super) substs: &'tcx Substs<'tcx>,\n     pub(super) is_provided: bool,\n }\n@@ -733,7 +732,7 @@ pub(super) fn get_impl_method<'a, 'tcx>(\n     let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n     let trait_def = tcx.lookup_trait_def(trait_def_id);\n \n-    match trait_def.ancestors(impl_def_id).fn_defs(tcx, name).next() {\n+    match trait_def.ancestors(impl_def_id).defs(tcx, name, ty::AssociatedKind::Method).next() {\n         Some(node_item) => {\n             let substs = tcx.infer_ctxt(None, None, Reveal::All).enter(|infcx| {\n                 let substs = substs.rebase_onto(tcx, trait_def_id, impl_substs);\n@@ -770,7 +769,7 @@ pub fn find_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n     let trait_def = tcx.lookup_trait_def(trait_def_id);\n \n-    match trait_def.ancestors(impl_def_id).fn_defs(tcx, name).next() {\n+    match trait_def.ancestors(impl_def_id).defs(tcx, name, ty::AssociatedKind::Method).next() {\n         Some(node_item) => {\n             let substs = tcx.infer_ctxt(None, None, Reveal::All).enter(|infcx| {\n                 let substs = substs.rebase_onto(tcx, trait_def_id, impl_substs);"}, {"sha": "181dafa77d9c8f93e8358d8667b12c4746697fb0", "filename": "src/interpreter/vtable.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f7cb9a09e4f05260f19c9e626457e3a7f2835c81/src%2Finterpreter%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cb9a09e4f05260f19c9e626457e3a7f2835c81/src%2Finterpreter%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvtable.rs?ref=f7cb9a09e4f05260f19c9e626457e3a7f2835c81", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::def_id::DefId;\n use rustc::traits::{self, Reveal, SelectionContext};\n-use rustc::ty::subst::{Substs, Subst};\n+use rustc::ty::subst::Substs;\n use rustc::ty;\n \n use super::EvalContext;\n@@ -35,7 +35,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     self.get_vtable_methods(id, substs)\n                         .into_iter()\n                         .map(|opt_mth| opt_mth.map(|mth| {\n-                            let fn_ty = self.tcx.erase_regions(&mth.method.fty);\n+                            let fn_ty = self.tcx.item_type(mth.method.def_id);\n+                            let fn_ty = match fn_ty.sty {\n+                                ty::TyFnDef(_, _, fn_ty) => fn_ty,\n+                                _ => bug!(\"bad function type: {}\", fn_ty),\n+                            };\n+                            let fn_ty = self.tcx.erase_regions(&fn_ty);\n                             self.memory.create_fn_ptr(self.tcx, mth.method.def_id, mth.substs, fn_ty)\n                         }))\n                         .collect::<Vec<_>>()\n@@ -85,8 +90,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.memory.write_usize(vtable, 0)?;\n         if let ty::TyAdt(adt_def, substs) = trait_ref.self_ty().sty {\n             if let Some(drop_def_id) = adt_def.destructor() {\n-                let ty_scheme = self.tcx.lookup_item_type(drop_def_id);\n-                let fn_ty = match ty_scheme.ty.sty {\n+                let fn_ty = match  self.tcx.item_type(drop_def_id).sty {\n                     ty::TyFnDef(_, _, fn_ty) => self.tcx.erase_regions(&fn_ty),\n                     _ => bug!(\"drop method is not a TyFnDef\"),\n                 };\n@@ -120,18 +124,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         self.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n-        let trait_item_def_ids = self.tcx.impl_or_trait_items(trait_id);\n-        trait_item_def_ids\n-            .iter()\n-\n+        self.tcx\n+            .associated_items(trait_id)\n             // Filter out non-method items.\n-            .filter_map(|&trait_method_def_id| {\n-                let trait_method_type = match self.tcx.impl_or_trait_item(trait_method_def_id) {\n-                    ty::MethodTraitItem(trait_method_type) => trait_method_type,\n-                    _ => return None,\n-                };\n-                debug!(\"get_vtable_methods: trait_method_def_id={:?}\",\n-                       trait_method_def_id);\n+            .filter_map(|trait_method_type| {\n+                if trait_method_type.kind != ty::AssociatedKind::Method {\n+                    return None;\n+                }\n+                debug!(\"get_vtable_methods: trait_method_type={:?}\",\n+                       trait_method_type);\n \n                 let name = trait_method_type.name;\n \n@@ -146,7 +147,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                 // the method may have some early-bound lifetimes, add\n                 // regions for those\n-                let method_substs = Substs::for_item(self.tcx, trait_method_def_id,\n+                let method_substs = Substs::for_item(self.tcx, trait_method_type.def_id,\n                                                      |_, _| self.tcx.mk_region(ty::ReErased),\n                                                      |_, _| self.tcx.types.err);\n \n@@ -162,8 +163,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // method could then never be called, so we do not want to\n                 // try and trans it, in that case. Issue #23435.\n                 if mth.is_provided {\n-                    let predicates = mth.method.predicates.predicates.subst(self.tcx, mth.substs);\n-                    if !self.normalize_and_test_predicates(predicates) {\n+                    let predicates = self.tcx.item_predicates(trait_method_type.def_id).instantiate_own(self.tcx, mth.substs);\n+                    if !self.normalize_and_test_predicates(predicates.predicates) {\n                         debug!(\"get_vtable_methods: predicates do not hold\");\n                         return Some(None);\n                     }"}, {"sha": "6670ed66cf02ea6344a582f13d30f0f8555d679e", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7cb9a09e4f05260f19c9e626457e3a7f2835c81/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cb9a09e4f05260f19c9e626457e3a7f2835c81/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=f7cb9a09e4f05260f19c9e626457e3a7f2835c81", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         });\n         self.create_fn_alloc(FunctionDefinition {\n             def_id: def_id,\n-            substs: substs.func_substs,\n+            substs: substs.substs,\n             abi: fn_ty.abi,\n             // FIXME: why doesn't this compile?\n             //sig: tcx.erase_late_bound_regions(&fn_ty.sig),"}, {"sha": "181f06ba1ebd2c36081919c6a139de16efdcd0ba", "filename": "tests/compiletest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7cb9a09e4f05260f19c9e626457e3a7f2835c81/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cb9a09e4f05260f19c9e626457e3a7f2835c81/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=f7cb9a09e4f05260f19c9e626457e3a7f2835c81", "patch": "@@ -34,8 +34,9 @@ fn for_all_targets<F: FnMut(String)>(sysroot: &str, mut f: F) {\n             continue;\n         }\n         let target = target.file_name().into_string().unwrap();\n-        if target == \"etc\" {\n-            continue;\n+        match &*target {\n+            \"etc\" | \"src\" => continue,\n+            _ => {},\n         }\n         let stderr = std::io::stderr();\n         writeln!(stderr.lock(), \"running tests for target {}\", target).unwrap();"}]}