{"sha": "5938fd704d4358a12081cba810f3055531da4386", "node_id": "C_kwDOAAsO6NoAKDU5MzhmZDcwNGQ0MzU4YTEyMDgxY2JhODEwZjMwNTU1MzFkYTQzODY", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-07-16T16:07:40Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-08-10T03:17:48Z"}, "message": "rustdoc: simplify highlight.rs\n\nSplit render_with_highlighting, which took many optional parameters, into three\nfunctions for specific purposes, which each take a smaller number of mostly\nrequired parameters.\n\nRemove some plumbing to pass through an \"edition\" parameter, which was used\nsolely to avoid highlighting some 2021 Edition keywords in non-2021 code.", "tree": {"sha": "6411b7d2f976631ce771535444b07928eee818e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6411b7d2f976631ce771535444b07928eee818e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5938fd704d4358a12081cba810f3055531da4386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5938fd704d4358a12081cba810f3055531da4386", "html_url": "https://github.com/rust-lang/rust/commit/5938fd704d4358a12081cba810f3055531da4386", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5938fd704d4358a12081cba810f3055531da4386/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b573e10d21b69ebfadf41aa9c2f0a27919fe4480", "url": "https://api.github.com/repos/rust-lang/rust/commits/b573e10d21b69ebfadf41aa9c2f0a27919fe4480", "html_url": "https://github.com/rust-lang/rust/commit/b573e10d21b69ebfadf41aa9c2f0a27919fe4480"}], "stats": {"total": 154, "additions": 75, "deletions": 79}, "files": [{"sha": "7dfae15ad034fa21e7ee84d60455790aeb82a473", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 55, "deletions": 33, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=5938fd704d4358a12081cba810f3055531da4386", "patch": "@@ -33,48 +33,80 @@ pub(crate) struct HrefContext<'a, 'b, 'c> {\n \n /// Decorations are represented as a map from CSS class to vector of character ranges.\n /// Each range will be wrapped in a span with that class.\n+#[derive(Default)]\n pub(crate) struct DecorationInfo(pub(crate) FxHashMap<&'static str, Vec<(u32, u32)>>);\n \n-/// Highlights `src`, returning the HTML output.\n-pub(crate) fn render_with_highlighting(\n+#[derive(Eq, PartialEq, Clone, Copy)]\n+pub(crate) enum Tooltip {\n+    Ignore,\n+    CompileFail,\n+    ShouldPanic,\n+    Edition(Edition),\n+    None,\n+}\n+\n+/// Highlights `src` as an inline example, returning the HTML output.\n+pub(crate) fn render_example_with_highlighting(\n     src: &str,\n     out: &mut Buffer,\n-    class: Option<&str>,\n+    tooltip: Tooltip,\n     playground_button: Option<&str>,\n-    tooltip: Option<(Option<Edition>, &str)>,\n-    edition: Edition,\n-    extra_content: Option<Buffer>,\n-    href_context: Option<HrefContext<'_, '_, '_>>,\n-    decoration_info: Option<DecorationInfo>,\n ) {\n-    debug!(\"highlighting: ================\\n{}\\n==============\", src);\n-    if let Some((edition_info, class)) = tooltip {\n+    let class = match tooltip {\n+        Tooltip::Ignore => \" ignore\",\n+        Tooltip::CompileFail => \" compile_fail\",\n+        Tooltip::ShouldPanic => \" should_panic\",\n+        Tooltip::Edition(_) => \" edition\",\n+        Tooltip::None => \"\",\n+    };\n+\n+    if tooltip != Tooltip::None {\n         write!(\n             out,\n-            \"<div class='information'><div class='tooltip {}'{}>\u24d8</div></div>\",\n+            \"<div class='information'><div class='tooltip{}'{}>\u24d8</div></div>\",\n             class,\n-            if let Some(edition_info) = edition_info {\n+            if let Tooltip::Edition(edition_info) = tooltip {\n                 format!(\" data-edition=\\\"{}\\\"\", edition_info)\n             } else {\n                 String::new()\n             },\n         );\n     }\n \n-    write_header(out, class, extra_content);\n-    write_code(out, src, edition, href_context, decoration_info);\n+    write_header(out, &format!(\"rust-example-rendered{}\", class), None);\n+    write_code(out, src, None, None);\n     write_footer(out, playground_button);\n }\n \n-fn write_header(out: &mut Buffer, class: Option<&str>, extra_content: Option<Buffer>) {\n+/// Highlights `src` as a macro, returning the HTML output.\n+pub(crate) fn render_macro_with_highlighting(src: &str, out: &mut Buffer) {\n+    write_header(out, \"macro\", None);\n+    write_code(out, src, None, None);\n+    write_footer(out, None);\n+}\n+\n+/// Highlights `src` as a source code page, returning the HTML output.\n+pub(crate) fn render_source_with_highlighting(\n+    src: &str,\n+    out: &mut Buffer,\n+    line_numbers: Buffer,\n+    href_context: HrefContext<'_, '_, '_>,\n+    decoration_info: DecorationInfo,\n+) {\n+    write_header(out, \"\", Some(line_numbers));\n+    write_code(out, src, Some(href_context), Some(decoration_info));\n+    write_footer(out, None);\n+}\n+\n+fn write_header(out: &mut Buffer, class: &str, extra_content: Option<Buffer>) {\n     write!(out, \"<div class=\\\"example-wrap\\\">\");\n     if let Some(extra) = extra_content {\n         out.push_buffer(extra);\n     }\n-    if let Some(class) = class {\n-        write!(out, \"<pre class=\\\"rust {}\\\">\", class);\n-    } else {\n+    if class.is_empty() {\n         write!(out, \"<pre class=\\\"rust\\\">\");\n+    } else {\n+        write!(out, \"<pre class=\\\"rust {}\\\">\", class);\n     }\n     write!(out, \"<code>\");\n }\n@@ -93,7 +125,6 @@ fn write_header(out: &mut Buffer, class: Option<&str>, extra_content: Option<Buf\n fn write_code(\n     out: &mut Buffer,\n     src: &str,\n-    edition: Edition,\n     href_context: Option<HrefContext<'_, '_, '_>>,\n     decoration_info: Option<DecorationInfo>,\n ) {\n@@ -102,7 +133,6 @@ fn write_code(\n     let mut closing_tags: Vec<&'static str> = Vec::new();\n     Classifier::new(\n         &src,\n-        edition,\n         href_context.as_ref().map(|c| c.file_span).unwrap_or(DUMMY_SP),\n         decoration_info,\n     )\n@@ -220,7 +250,7 @@ impl<'a> Iterator for TokenIter<'a> {\n }\n \n /// Classifies into identifier class; returns `None` if this is a non-keyword identifier.\n-fn get_real_ident_class(text: &str, edition: Edition, allow_path_keywords: bool) -> Option<Class> {\n+fn get_real_ident_class(text: &str, allow_path_keywords: bool) -> Option<Class> {\n     let ignore: &[&str] =\n         if allow_path_keywords { &[\"self\", \"Self\", \"super\", \"crate\"] } else { &[\"self\", \"Self\"] };\n     if ignore.iter().any(|k| *k == text) {\n@@ -229,7 +259,7 @@ fn get_real_ident_class(text: &str, edition: Edition, allow_path_keywords: bool)\n     Some(match text {\n         \"ref\" | \"mut\" => Class::RefKeyWord,\n         \"false\" | \"true\" => Class::Bool,\n-        _ if Symbol::intern(text).is_reserved(|| edition) => Class::KeyWord,\n+        _ if Symbol::intern(text).is_reserved(|| Edition::Edition2021) => Class::KeyWord,\n         _ => return None,\n     })\n }\n@@ -311,7 +341,6 @@ struct Classifier<'a> {\n     in_attribute: bool,\n     in_macro: bool,\n     in_macro_nonterminal: bool,\n-    edition: Edition,\n     byte_pos: u32,\n     file_span: Span,\n     src: &'a str,\n@@ -321,20 +350,14 @@ struct Classifier<'a> {\n impl<'a> Classifier<'a> {\n     /// Takes as argument the source code to HTML-ify, the rust edition to use and the source code\n     /// file span which will be used later on by the `span_correspondance_map`.\n-    fn new(\n-        src: &str,\n-        edition: Edition,\n-        file_span: Span,\n-        decoration_info: Option<DecorationInfo>,\n-    ) -> Classifier<'_> {\n+    fn new(src: &str, file_span: Span, decoration_info: Option<DecorationInfo>) -> Classifier<'_> {\n         let tokens = PeekIter::new(TokenIter { src });\n         let decorations = decoration_info.map(Decorations::new);\n         Classifier {\n             tokens,\n             in_attribute: false,\n             in_macro: false,\n             in_macro_nonterminal: false,\n-            edition,\n             byte_pos: 0,\n             file_span,\n             src,\n@@ -354,7 +377,6 @@ impl<'a> Classifier<'a> {\n         let start = self.byte_pos as usize;\n         let mut pos = start;\n         let mut has_ident = false;\n-        let edition = self.edition;\n \n         loop {\n             let mut nb = 0;\n@@ -376,7 +398,7 @@ impl<'a> Classifier<'a> {\n \n             if let Some((None, text)) = self.tokens.peek().map(|(token, text)| {\n                 if *token == TokenKind::Ident {\n-                    let class = get_real_ident_class(text, edition, true);\n+                    let class = get_real_ident_class(text, true);\n                     (class, text)\n                 } else {\n                     // Doesn't matter which Class we put in here...\n@@ -634,7 +656,7 @@ impl<'a> Classifier<'a> {\n                 sink(Highlight::Token { text, class: None });\n                 return;\n             }\n-            TokenKind::Ident => match get_real_ident_class(text, self.edition, false) {\n+            TokenKind::Ident => match get_real_ident_class(text, false) {\n                 None => match text {\n                     \"Option\" | \"Result\" => Class::PreludeTy,\n                     \"Some\" | \"None\" | \"Ok\" | \"Err\" => Class::PreludeVal,"}, {"sha": "4861a8ad32da6fa34b63478a637536c841fa792f", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=5938fd704d4358a12081cba810f3055531da4386", "patch": "@@ -3,7 +3,6 @@ use crate::html::format::Buffer;\n use expect_test::expect_file;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::create_default_session_globals_then;\n-use rustc_span::edition::Edition;\n \n const STYLE: &str = r#\"\n <style>\n@@ -23,7 +22,7 @@ fn test_html_highlighting() {\n         let src = include_str!(\"fixtures/sample.rs\");\n         let html = {\n             let mut out = Buffer::new();\n-            write_code(&mut out, src, Edition::Edition2018, None, None);\n+            write_code(&mut out, src, None, None);\n             format!(\"{}<pre><code>{}</code></pre>\\n\", STYLE, out.into_inner())\n         };\n         expect_file![\"fixtures/sample.html\"].assert_eq(&html);\n@@ -37,7 +36,7 @@ fn test_dos_backline() {\n     println!(\\\"foo\\\");\\r\\n\\\n }\\r\\n\";\n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None, None);\n+        write_code(&mut html, src, None, None);\n         expect_file![\"fixtures/dos_line.html\"].assert_eq(&html.into_inner());\n     });\n }\n@@ -51,7 +50,7 @@ let x = super::b::foo;\n let y = Self::whatever;\";\n \n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None, None);\n+        write_code(&mut html, src, None, None);\n         expect_file![\"fixtures/highlight.html\"].assert_eq(&html.into_inner());\n     });\n }\n@@ -61,7 +60,7 @@ fn test_union_highlighting() {\n     create_default_session_globals_then(|| {\n         let src = include_str!(\"fixtures/union.rs\");\n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None, None);\n+        write_code(&mut html, src, None, None);\n         expect_file![\"fixtures/union.html\"].assert_eq(&html.into_inner());\n     });\n }\n@@ -75,7 +74,7 @@ let y = 2;\";\n         decorations.insert(\"example\", vec![(0, 10)]);\n \n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None, Some(DecorationInfo(decorations)));\n+        write_code(&mut html, src, None, Some(DecorationInfo(decorations)));\n         expect_file![\"fixtures/decorations.html\"].assert_eq(&html.into_inner());\n     });\n }"}, {"sha": "cf11d1328fa7d067156c2b015cd28f9d38c2b1d4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=5938fd704d4358a12081cba810f3055531da4386", "patch": "@@ -330,34 +330,27 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n         });\n \n         let tooltip = if ignore != Ignore::None {\n-            Some((None, \"ignore\"))\n+            highlight::Tooltip::Ignore\n         } else if compile_fail {\n-            Some((None, \"compile_fail\"))\n+            highlight::Tooltip::CompileFail\n         } else if should_panic {\n-            Some((None, \"should_panic\"))\n+            highlight::Tooltip::ShouldPanic\n         } else if explicit_edition {\n-            Some((Some(edition), \"edition\"))\n+            highlight::Tooltip::Edition(edition)\n         } else {\n-            None\n+            highlight::Tooltip::None\n         };\n \n         // insert newline to clearly separate it from the\n         // previous block so we can shorten the html output\n         let mut s = Buffer::new();\n         s.push_str(\"\\n\");\n-        highlight::render_with_highlighting(\n+\n+        highlight::render_example_with_highlighting(\n             &text,\n             &mut s,\n-            Some(&format!(\n-                \"rust-example-rendered{}\",\n-                if let Some((_, class)) = tooltip { format!(\" {}\", class) } else { String::new() }\n-            )),\n-            playground_button.as_deref(),\n             tooltip,\n-            edition,\n-            None,\n-            None,\n-            None,\n+            playground_button.as_deref(),\n         );\n         Some(Event::Html(s.into_inner().into()))\n     }"}, {"sha": "7cde99b3ebd21c67fb7ec6a8d81ec6877425c6c3", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5938fd704d4358a12081cba810f3055531da4386", "patch": "@@ -2764,11 +2764,10 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n         sources::print_src(\n             w,\n             contents_subset,\n-            call_data.edition,\n             file_span,\n             cx,\n             &root_path,\n-            Some(highlight::DecorationInfo(decoration_info)),\n+            highlight::DecorationInfo(decoration_info),\n             sources::SourceContext::Embedded { offset: line_min },\n         );\n         write!(w, \"</div></div>\");"}, {"sha": "93e49115944faf0f73642bfc72d31cce899e5372", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=5938fd704d4358a12081cba810f3055531da4386", "patch": "@@ -1320,17 +1320,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n \n fn item_macro(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::Macro) {\n     wrap_into_docblock(w, |w| {\n-        highlight::render_with_highlighting(\n-            &t.source,\n-            w,\n-            Some(\"macro\"),\n-            None,\n-            None,\n-            it.span(cx.tcx()).inner().edition(),\n-            None,\n-            None,\n-            None,\n-        );\n+        highlight::render_macro_with_highlighting(&t.source, w);\n     });\n     document(w, cx, it, None, HeadingOffset::H2)\n }"}, {"sha": "f508808a8b6f5c3fae86e527563c80522d11f516", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5938fd704d4358a12081cba810f3055531da4386/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=5938fd704d4358a12081cba810f3055531da4386", "patch": "@@ -11,7 +11,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n-use rustc_span::edition::Edition;\n use rustc_span::source_map::FileName;\n \n use std::ffi::OsStr;\n@@ -213,11 +212,10 @@ impl SourceCollector<'_, '_> {\n                 print_src(\n                     buf,\n                     contents,\n-                    cx.shared.edition(),\n                     file_span,\n                     cx,\n                     &root_path,\n-                    None,\n+                    highlight::DecorationInfo::default(),\n                     SourceContext::Standalone,\n                 )\n             },\n@@ -266,11 +264,10 @@ pub(crate) enum SourceContext {\n pub(crate) fn print_src(\n     buf: &mut Buffer,\n     s: &str,\n-    edition: Edition,\n     file_span: rustc_span::Span,\n     context: &Context<'_>,\n     root_path: &str,\n-    decoration_info: Option<highlight::DecorationInfo>,\n+    decoration_info: highlight::DecorationInfo,\n     source_context: SourceContext,\n ) {\n     let lines = s.lines().count();\n@@ -289,15 +286,11 @@ pub(crate) fn print_src(\n         }\n     }\n     line_numbers.write_str(\"</pre>\");\n-    highlight::render_with_highlighting(\n+    highlight::render_source_with_highlighting(\n         s,\n         buf,\n-        None,\n-        None,\n-        None,\n-        edition,\n-        Some(line_numbers),\n-        Some(highlight::HrefContext { context, file_span, root_path }),\n+        line_numbers,\n+        highlight::HrefContext { context, file_span, root_path },\n         decoration_info,\n     );\n }"}]}