{"sha": "0954e66442a169be40f1e65de68a85d7e3dacf3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NTRlNjY0NDJhMTY5YmU0MGYxZTY1ZGU2OGE4NWQ3ZTNkYWNmM2E=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-05T21:15:00Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:11Z"}, "message": "uncomment mtwt_resolve calls", "tree": {"sha": "51d8968d8eb83931f7be39c61ca130e91d128c06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51d8968d8eb83931f7be39c61ca130e91d128c06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0954e66442a169be40f1e65de68a85d7e3dacf3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0954e66442a169be40f1e65de68a85d7e3dacf3a", "html_url": "https://github.com/rust-lang/rust/commit/0954e66442a169be40f1e65de68a85d7e3dacf3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0954e66442a169be40f1e65de68a85d7e3dacf3a/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9ba61c786f94ff86339fe83136061657a4c19f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ba61c786f94ff86339fe83136061657a4c19f9", "html_url": "https://github.com/rust-lang/rust/commit/d9ba61c786f94ff86339fe83136061657a4c19f9"}], "stats": {"total": 76, "additions": 53, "deletions": 23}, "files": [{"sha": "292047d885d5245fd99717ae97f454e04453bce0", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0954e66442a169be40f1e65de68a85d7e3dacf3a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0954e66442a169be40f1e65de68a85d7e3dacf3a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0954e66442a169be40f1e65de68a85d7e3dacf3a", "patch": "@@ -23,7 +23,7 @@ use middle::pat_util::pat_bindings;\n \n use syntax::ast::*;\n use syntax::ast;\n-use syntax::ast_util::{def_id_of_def, local_def}; // mtwt_resolve\n+use syntax::ast_util::{def_id_of_def, local_def, mtwt_resolve};\n use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n use syntax::ast_util::{Privacy, Public, Private};\n use syntax::ast_util::{variant_visibility_to_privacy, visibility_to_privacy};\n@@ -4067,17 +4067,23 @@ impl Resolver {\n                              None, visitor);\n     }\n \n+    // build a map from pattern identifiers to binding-info's.\n+    // this is done hygienically. This could arise for a macro\n+    // that expands into an or-pattern where one 'x' was from the\n+    // user and one 'x' came from the macro.\n     pub fn binding_mode_map(@mut self, pat: @Pat) -> BindingMap {\n         let mut result = HashMap::new();\n         do pat_bindings(self.def_map, pat) |binding_mode, _id, sp, path| {\n-            let name = path_to_ident(path).name; // mtwt_resolve(path_to_ident(path));\n+            let name = mtwt_resolve(path_to_ident(path));\n             result.insert(name,\n                           binding_info {span: sp,\n                                         binding_mode: binding_mode});\n         }\n         return result;\n     }\n \n+    // check that all of the arms in an or-pattern have exactly the\n+    // same set of bindings, with the same binding modes for each.\n     pub fn check_consistent_bindings(@mut self, arm: &Arm) {\n         if arm.pats.len() == 0 { return; }\n         let map_0 = self.binding_mode_map(arm.pats[0]);\n@@ -4293,7 +4299,7 @@ impl Resolver {\n                     // what you want).\n \n                     let ident = path.segments[0].identifier;\n-                    let renamed = ident.name; // mtwt_resolve(ident);\n+                    let renamed = mtwt_resolve(ident);\n \n                     match self.resolve_bare_identifier_pattern(ident) {\n                         FoundStructOrEnumVariant(def)\n@@ -4833,7 +4839,7 @@ impl Resolver {\n         let search_result;\n         match namespace {\n             ValueNS => {\n-                let renamed = ident.name; // mtwt_resolve(ident);\n+                let renamed = mtwt_resolve(ident);\n                 search_result = self.search_ribs(self.value_ribs, renamed,\n                                                  span,\n                                                  DontAllowCapturingSelf);"}, {"sha": "321ac9428ea94fb78f3dc66716a8fbd0c103cefa", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0954e66442a169be40f1e65de68a85d7e3dacf3a/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0954e66442a169be40f1e65de68a85d7e3dacf3a/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=0954e66442a169be40f1e65de68a85d7e3dacf3a", "patch": "@@ -991,20 +991,19 @@ pub fn getLast(arr: &~[Mrk]) -> uint {\n pub fn path_name_eq(a : &ast::Path, b : &ast::Path) -> bool {\n     (a.span == b.span)\n     && (a.global == b.global)\n-    // NOTE: ident->name in lifetimes!\n-    && (a.rp == b.rp)\n-    // NOTE: can a type contain an ident?\n-    && (a.types == b.types)\n-    && (idents_name_eq(a.idents, b.idents))\n+    && (segments_name_eq(a.segments, b.segments))\n }\n \n-// are two arrays of idents equal when compared unhygienically?\n-pub fn idents_name_eq(a : &[ast::ident], b : &[ast::ident]) -> bool {\n+// are two arrays of segments equal when compared unhygienically?\n+pub fn segments_name_eq(a : &[ast::PathSegment], b : &[ast::PathSegment]) -> bool {\n     if (a.len() != b.len()) {\n         false\n     } else {\n-        for a.iter().enumerate().advance |(idx,id)|{\n-            if (id.name != b[idx].name) {\n+        for (idx,seg) in a.iter().enumerate() {\n+            if (seg.identifier.name != b[idx].identifier.name)\n+                // ident -> name problems in lifetime comparison?\n+                || (seg.lifetime != b[idx].lifetime)\n+                || (seg.types != b[idx].types) {\n                 return false;\n             }\n         }\n@@ -1017,16 +1016,21 @@ mod test {\n     use ast::*;\n     use super::*;\n     use std::io;\n+    use opt_vec;\n+\n+    fn ident_to_segment(id : &ident) -> PathSegment {\n+        PathSegment{identifier:id.clone(), lifetime: None, types: opt_vec::Empty}\n+    }\n \n     #[test] fn idents_name_eq_test() {\n-        assert!(idents_name_eq(~[ident{name:3,ctxt:4},\n-                                 ident{name:78,ctxt:82}],\n-                               ~[ident{name:3,ctxt:104},\n-                                 ident{name:78,ctxt:182}]));\n-        assert!(!idents_name_eq(~[ident{name:3,ctxt:4},\n-                                  ident{name:78,ctxt:82}],\n-                                ~[ident{name:3,ctxt:104},\n-                                  ident{name:77,ctxt:182}]));\n+        assert!(segments_name_eq([ident{name:3,ctxt:4},\n+                                   ident{name:78,ctxt:82}].map(ident_to_segment),\n+                                 [ident{name:3,ctxt:104},\n+                                   ident{name:78,ctxt:182}].map(ident_to_segment)));\n+        assert!(!segments_name_eq([ident{name:3,ctxt:4},\n+                                    ident{name:78,ctxt:82}].map(ident_to_segment),\n+                                  [ident{name:3,ctxt:104},\n+                                    ident{name:77,ctxt:182}].map(ident_to_segment)));\n     }\n \n     #[test] fn xorpush_test () {"}, {"sha": "aa4183837e3b38d4554fe1b16931f8bdb72e9a7a", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0954e66442a169be40f1e65de68a85d7e3dacf3a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0954e66442a169be40f1e65de68a85d7e3dacf3a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=0954e66442a169be40f1e65de68a85d7e3dacf3a", "patch": "@@ -355,8 +355,8 @@ pub fn parse(\n                   match_nonterminal(_,_,_) => { bb_eis.push(ei) }\n                   match_tok(ref t) => {\n                     let mut ei_t = ei.clone();\n-                    if (token_name_eq(t,&tok)) {\n-                    //if (token::mtwt_token_eq(t,&tok)) {\n+                    //if (token_name_eq(t,&tok)) {\n+                    if (token::mtwt_token_eq(t,&tok)) {\n                         ei_t.idx += 1;\n                         next_eis.push(ei_t);\n                     }"}, {"sha": "39e0f85920c5ef6415a89ecac9919ca34dd6cd77", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0954e66442a169be40f1e65de68a85d7e3dacf3a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0954e66442a169be40f1e65de68a85d7e3dacf3a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=0954e66442a169be40f1e65de68a85d7e3dacf3a", "patch": "@@ -720,6 +720,15 @@ pub fn is_reserved_keyword(tok: &Token) -> bool {\n     }\n }\n \n+pub fn mtwt_token_eq(t1 : &Token, t2 : &Token) -> bool {\n+    match (t1,t2) {\n+        (&IDENT(id1,_),&IDENT(id2,_)) =>\n+        ast_util::mtwt_resolve(id1) == ast_util::mtwt_resolve(id2),\n+        _ => *t1 == *t2\n+    }\n+}\n+\n+\n #[cfg(test)]\n mod test {\n     use super::*;\n@@ -728,6 +737,17 @@ mod test {\n     use ast;\n     use ast_util;\n \n+    fn mark_ident(id : ast::ident, m : ast::Mrk) -> ast::ident {\n+        ast::ident{name:id.name,ctxt:ast_util::new_mark(m,id.ctxt)}\n+    }\n+\n+    #[test] fn mtwt_token_eq_test() {\n+        assert!(mtwt_token_eq(&GT,&GT));\n+        let a = str_to_ident(\"bac\");\n+        let a1 = mark_ident(a,92);\n+        assert!(mtwt_token_eq(&IDENT(a,true),&IDENT(a1,false)));\n+    }\n+\n \n     #[test] fn str_ptr_eq_tests(){\n         let a = @\"abc\";"}]}