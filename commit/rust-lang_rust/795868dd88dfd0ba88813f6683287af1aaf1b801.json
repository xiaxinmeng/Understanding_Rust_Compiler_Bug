{"sha": "795868dd88dfd0ba88813f6683287af1aaf1b801", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NTg2OGRkODhkZmQwYmE4ODgxM2Y2NjgzMjg3YWYxYWFmMWI4MDE=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-07-08T13:45:19Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-07-08T13:45:19Z"}, "message": "Rename run_lints -> lints_enabled", "tree": {"sha": "3f99a0f6e51e940e0dc5772ec0b7f865b7543e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f99a0f6e51e940e0dc5772ec0b7f865b7543e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795868dd88dfd0ba88813f6683287af1aaf1b801", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmDnAXYACgkQHKDfKvWd\naKUDgRAAip+Ac0JscHF/GNYThUfmna8UM/6g8pITpcUNEanaqAHA3LvsRyQ3D3IX\n7UhyLrtQjzbmyP3VEkmNsZFFCj94ZBU2SOxorjJlXm/PrJkpH/2kk0CCBDDV7PLu\nLvlJuUPTtyMRv7E9Xnsnwv3dt5RCK4hpK+4aZsyCk8tRH67RzojmfDAkdtobXhnH\nBOQXo1ibptLGHx+etoyf5wxJlB4LyQGQUj22TEOucn8pO6629Rqpj+MhKKE0myvD\ndUk1cBp85CTc+VqOwi8xJNQidIRlN5WSQS5jcZT+g/mrz5+fcjMcKsjKvanz00XY\ncjjF592RO7K3rwrhMWw1ClCnbcZZmUviZvvi1D4Hac+JEhNTPNg7Lfo6cR4w9648\nEcIGxC5HXVYu9O5h9ti4c25029IworCowkMRSaHWMT4rNUHrbnx2LFitbS6aNbZB\nlHFwYXFq3fhYoHuIQ5AJUJve+THk+MIbaEWblxcQ4YrVVPbwlqkrCGKXqPe1NpTJ\nIu/k25LAXRKR0MSQvCk1gOZjMjDY0yUPqE1z4wMk24MbnvThZ0APlSau7Y9WjwIY\nkiA/9Q2D+CnNOMLg62KKAsazM5TKeihaFmJaZC4kyrptuDtpgU6szd8LsrzsOWP2\nHQffk1pwaxdbUhVdf0qQqHy1S46x3ArTFl1tW8Rg11edwzr5VMA=\n=RxW8\n-----END PGP SIGNATURE-----", "payload": "tree 3f99a0f6e51e940e0dc5772ec0b7f865b7543e0e\nparent 28e769951fd6ed98c625b4f2d9bab046034ca2f2\nauthor flip1995 <philipp.krones@embecosm.com> 1625751919 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1625751919 +0200\n\nRename run_lints -> lints_enabled\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795868dd88dfd0ba88813f6683287af1aaf1b801", "html_url": "https://github.com/rust-lang/rust/commit/795868dd88dfd0ba88813f6683287af1aaf1b801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795868dd88dfd0ba88813f6683287af1aaf1b801/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28e769951fd6ed98c625b4f2d9bab046034ca2f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e769951fd6ed98c625b4f2d9bab046034ca2f2", "html_url": "https://github.com/rust-lang/rust/commit/28e769951fd6ed98c625b4f2d9bab046034ca2f2"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "a84d1d5d9a0cb8e0ca19ebe361c67c518701b1ab", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=795868dd88dfd0ba88813f6683287af1aaf1b801", "patch": "@@ -3,7 +3,7 @@\n use std::path::PathBuf;\n \n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::run_lints;\n+use clippy_utils::lints_enabled;\n use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -85,7 +85,7 @@ fn is_empty_vec(value: &[String]) -> bool {\n \n impl LateLintPass<'_> for CargoCommonMetadata {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        if !run_lints(cx, &[CARGO_COMMON_METADATA], CRATE_HIR_ID) {\n+        if !lints_enabled(cx, &[CARGO_COMMON_METADATA], CRATE_HIR_ID) {\n             return;\n         }\n "}, {"sha": "91e0f2a55d5ce9d443e9d7cff2a93a948dc86b4e", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=795868dd88dfd0ba88813f6683287af1aaf1b801", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_then};\n use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, snippet, snippet_opt};\n use clippy_utils::{\n     both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, in_macro, is_else_clause,\n-    run_lints, search_same, ContainsName, SpanlessEq, SpanlessHash,\n+    lints_enabled, search_same, ContainsName, SpanlessEq, SpanlessHash,\n };\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n@@ -337,8 +337,8 @@ fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> Option<\n             if block_expr_eq;\n             if l_stmts.len() == r_stmts.len();\n             if l_stmts.len() == current_start_eq;\n-            if run_lints(cx, &[IF_SAME_THEN_ELSE], win[0].hir_id);\n-            if run_lints(cx, &[IF_SAME_THEN_ELSE], win[1].hir_id);\n+            if lints_enabled(cx, &[IF_SAME_THEN_ELSE], win[0].hir_id);\n+            if lints_enabled(cx, &[IF_SAME_THEN_ELSE], win[1].hir_id);\n             then {\n                 span_lint_and_note(\n                     cx,"}, {"sha": "1eba7c124cf94b72399b27d07e8ce038b96ecde6", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=795868dd88dfd0ba88813f6683287af1aaf1b801", "patch": "@@ -1,7 +1,7 @@\n //! lint on multiple versions of a crate being used\n \n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::run_lints;\n+use clippy_utils::lints_enabled;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::{Crate, CRATE_HIR_ID};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -39,7 +39,7 @@ declare_lint_pass!(MultipleCrateVersions => [MULTIPLE_CRATE_VERSIONS]);\n \n impl LateLintPass<'_> for MultipleCrateVersions {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        if !run_lints(cx, &[MULTIPLE_CRATE_VERSIONS], CRATE_HIR_ID) {\n+        if !lints_enabled(cx, &[MULTIPLE_CRATE_VERSIONS], CRATE_HIR_ID) {\n             return;\n         }\n "}, {"sha": "e8b14ee8e0b94d694b47f8b21935821aa0207d1a", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=795868dd88dfd0ba88813f6683287af1aaf1b801", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sug\n use clippy_utils::source::snippet;\n use clippy_utils::ty::match_type;\n use clippy_utils::{\n-    is_else_clause, is_expn_of, is_expr_path_def_path, match_def_path, method_calls, path_to_res, paths, run_lints,\n+    is_else_clause, is_expn_of, is_expr_path_def_path, lints_enabled, match_def_path, method_calls, path_to_res, paths,\n     SpanlessEq,\n };\n use if_chain::if_chain;\n@@ -353,7 +353,7 @@ impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n \n impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if !run_lints(cx, &[DEFAULT_LINT], item.hir_id()) {\n+        if !lints_enabled(cx, &[DEFAULT_LINT], item.hir_id()) {\n             return;\n         }\n \n@@ -411,7 +411,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n     }\n \n     fn check_crate_post(&mut self, cx: &LateContext<'tcx>, _: &'tcx Crate<'_>) {\n-        if !run_lints(cx, &[LINT_WITHOUT_LINT_PASS], CRATE_HIR_ID) {\n+        if !lints_enabled(cx, &[LINT_WITHOUT_LINT_PASS], CRATE_HIR_ID) {\n             return;\n         }\n \n@@ -497,7 +497,7 @@ impl_lint_pass!(CompilerLintFunctions => [COMPILER_LINT_FUNCTIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !run_lints(cx, &[COMPILER_LINT_FUNCTIONS], expr.hir_id) {\n+        if !lints_enabled(cx, &[COMPILER_LINT_FUNCTIONS], expr.hir_id) {\n             return;\n         }\n \n@@ -526,7 +526,7 @@ declare_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n impl<'tcx> LateLintPass<'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !run_lints(cx, &[OUTER_EXPN_EXPN_DATA], expr.hir_id) {\n+        if !lints_enabled(cx, &[OUTER_EXPN_EXPN_DATA], expr.hir_id) {\n             return;\n         }\n \n@@ -576,7 +576,7 @@ declare_lint_pass!(CollapsibleCalls => [COLLAPSIBLE_SPAN_LINT_CALLS]);\n \n impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !run_lints(cx, &[COLLAPSIBLE_SPAN_LINT_CALLS], expr.hir_id) {\n+        if !lints_enabled(cx, &[COLLAPSIBLE_SPAN_LINT_CALLS], expr.hir_id) {\n             return;\n         }\n \n@@ -757,7 +757,7 @@ declare_lint_pass!(MatchTypeOnDiagItem => [MATCH_TYPE_ON_DIAGNOSTIC_ITEM]);\n \n impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !run_lints(cx, &[MATCH_TYPE_ON_DIAGNOSTIC_ITEM], expr.hir_id) {\n+        if !lints_enabled(cx, &[MATCH_TYPE_ON_DIAGNOSTIC_ITEM], expr.hir_id) {\n             return;\n         }\n "}, {"sha": "fe74698d7c280cddd1c069f60fdf6075735ead66", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=795868dd88dfd0ba88813f6683287af1aaf1b801", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::run_lints;\n+use clippy_utils::lints_enabled;\n use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -31,7 +31,7 @@ declare_lint_pass!(WildcardDependencies => [WILDCARD_DEPENDENCIES]);\n \n impl LateLintPass<'_> for WildcardDependencies {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        if !run_lints(cx, &[WILDCARD_DEPENDENCIES], CRATE_HIR_ID) {\n+        if !lints_enabled(cx, &[WILDCARD_DEPENDENCIES], CRATE_HIR_ID) {\n             return;\n         }\n "}, {"sha": "9f09027aadc4a5361603e32e3d350c4502743494", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795868dd88dfd0ba88813f6683287af1aaf1b801/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=795868dd88dfd0ba88813f6683287af1aaf1b801", "patch": "@@ -1546,12 +1546,12 @@ pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n ///\n /// ```ignore\n /// #[deny(clippy::YOUR_AWESOME_LINT)]\n-/// println!(\"Hello, World!\"); // <- Clippy code: run_lints(cx, &[YOUR_AWESOME_LINT], id) == true\n+/// println!(\"Hello, World!\"); // <- Clippy code: lints_enabled(cx, &[YOUR_AWESOME_LINT], id) == true\n ///\n /// #[allow(clippy::YOUR_AWESOME_LINT)]\n-/// println!(\"See you soon!\"); // <- Clippy code: run_lints(cx, &[YOUR_AWESOME_LINT], id) == false\n+/// println!(\"See you soon!\"); // <- Clippy code: lints_enabled(cx, &[YOUR_AWESOME_LINT], id) == false\n /// ```\n-pub fn run_lints(cx: &LateContext<'_>, lints: &[&'static Lint], id: HirId) -> bool {\n+pub fn lints_enabled(cx: &LateContext<'_>, lints: &[&'static Lint], id: HirId) -> bool {\n     lints.iter().any(|lint| {\n         matches!(\n             cx.tcx.lint_level_at_node(lint, id),"}]}