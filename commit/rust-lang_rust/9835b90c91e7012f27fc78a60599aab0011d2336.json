{"sha": "9835b90c91e7012f27fc78a60599aab0011d2336", "node_id": "C_kwDOAAsO6NoAKDk4MzViOTBjOTFlNzAxMmYyN2ZjNzhhNjA1OTlhYWIwMDExZDIzMzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-16T15:58:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-16T15:58:17Z"}, "message": "Rollup merge of #92710 - jackh726:issue-92280, r=nikomatsakis\n\nInclude Projections when elaborating TypeOutlives\n\nFixes #92280\n\nIn `Elaborator`, we elaborate that `Foo<<Bar as Baz>::Assoc>: 'a` -> `<Bar as Baz>::Assoc: 'a`. This is the same rule that would be applied to any other `Param`. If there are escaping vars, we continue to do nothing.\n\nr? `@nikomatsakis`", "tree": {"sha": "e6845343d1b9cab06bc8cf4d5f654df318d0d591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6845343d1b9cab06bc8cf4d5f654df318d0d591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9835b90c91e7012f27fc78a60599aab0011d2336", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5ECZCRBK7hj4Ov3rIwAA61wIAFKBes3T6h77TnUtbwISozgy\nLBMMJ7COGohLSaR/cmlWW19LLVN9kpevXpXGOoeQ4PYICMrWm9YakWjxaO1UUstg\nibW4LT4M9uEZnhRDQma2aGPXbq3qeOoX/SgcEnxlNMHVBNdsxxXn25iTwg8RHZ0e\nAG57bdzUBT57Ww//bktBh7ZiKYgKz1HJcVVxsFYddZVhUs5rIR7af/c3wq+TqzTs\nyAQpGYqKKU1o72F5n2RbH01kALHwMii1ZRDzypSdnL74A4mSrVbW77BVMW75xEuY\nns//ktf3urm/WrNOXUq58aO2Ral/mtmNluZEfe6rwlFxDvuwkUTJXxX+2YbBgAg=\n=B2Ek\n-----END PGP SIGNATURE-----\n", "payload": "tree e6845343d1b9cab06bc8cf4d5f654df318d0d591\nparent 039d6dc2896366b45cb71cef61dcbbd6cfc518a4\nparent ea562aeed553eaee9961a2adb259f48ffbe83666\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642348697 +0100\ncommitter GitHub <noreply@github.com> 1642348697 +0100\n\nRollup merge of #92710 - jackh726:issue-92280, r=nikomatsakis\n\nInclude Projections when elaborating TypeOutlives\n\nFixes #92280\n\nIn `Elaborator`, we elaborate that `Foo<<Bar as Baz>::Assoc>: 'a` -> `<Bar as Baz>::Assoc: 'a`. This is the same rule that would be applied to any other `Param`. If there are escaping vars, we continue to do nothing.\n\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9835b90c91e7012f27fc78a60599aab0011d2336", "html_url": "https://github.com/rust-lang/rust/commit/9835b90c91e7012f27fc78a60599aab0011d2336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9835b90c91e7012f27fc78a60599aab0011d2336/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "039d6dc2896366b45cb71cef61dcbbd6cfc518a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/039d6dc2896366b45cb71cef61dcbbd6cfc518a4", "html_url": "https://github.com/rust-lang/rust/commit/039d6dc2896366b45cb71cef61dcbbd6cfc518a4"}, {"sha": "ea562aeed553eaee9961a2adb259f48ffbe83666", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea562aeed553eaee9961a2adb259f48ffbe83666", "html_url": "https://github.com/rust-lang/rust/commit/ea562aeed553eaee9961a2adb259f48ffbe83666"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "a5276afc5bfa7ed03b59fd2cc5ccecaa4378a70c", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9835b90c91e7012f27fc78a60599aab0011d2336/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9835b90c91e7012f27fc78a60599aab0011d2336/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=9835b90c91e7012f27fc78a60599aab0011d2336", "patch": "@@ -164,7 +164,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             \"cannot process registered region obligations in a snapshot\"\n         );\n \n-        debug!(\"process_registered_region_obligations()\");\n+        debug!(?param_env, \"process_registered_region_obligations()\");\n \n         let my_region_obligations = self.take_registered_region_obligations();\n \n@@ -356,6 +356,8 @@ where\n         let trait_bounds: Vec<_> =\n             self.verify_bound.projection_declared_bounds_from_trait(projection_ty).collect();\n \n+        debug!(?trait_bounds);\n+\n         // Compute the bounds we can derive from the environment. This\n         // is an \"approximate\" match -- in some cases, these bounds\n         // may not apply."}, {"sha": "674c75fdee56113bb3b1b29067d7b7ecb235d549", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9835b90c91e7012f27fc78a60599aab0011d2336/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9835b90c91e7012f27fc78a60599aab0011d2336/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=9835b90c91e7012f27fc78a60599aab0011d2336", "patch": "@@ -241,10 +241,19 @@ impl<'tcx> Elaborator<'tcx> {\n \n                             Component::UnresolvedInferenceVariable(_) => None,\n \n-                            Component::Projection(_) | Component::EscapingProjection(_) => {\n-                                // We can probably do more here. This\n-                                // corresponds to a case like `<T as\n-                                // Foo<'a>>::U: 'b`.\n+                            Component::Projection(projection) => {\n+                                // We might end up here if we have `Foo<<Bar as Baz>::Assoc>: 'a`.\n+                                // With this, we can deduce that `<Bar as Baz>::Assoc: 'a`.\n+                                let ty =\n+                                    tcx.mk_projection(projection.item_def_id, projection.substs);\n+                                Some(ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(\n+                                    ty, r_min,\n+                                )))\n+                            }\n+\n+                            Component::EscapingProjection(_) => {\n+                                // We might be able to do more here, but we don't\n+                                // want to deal with escaping vars right now.\n                                 None\n                             }\n                         })"}, {"sha": "669b6023397ee03f7f253601b51c6ac2ddcf534f", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9835b90c91e7012f27fc78a60599aab0011d2336/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9835b90c91e7012f27fc78a60599aab0011d2336/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=9835b90c91e7012f27fc78a60599aab0011d2336", "patch": "@@ -206,7 +206,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             })?);\n \n             if let ty::Projection(..) = placeholder_self_ty.kind() {\n-                for predicate in tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates {\n+                let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates;\n+                debug!(?predicates, \"projection predicates\");\n+                for predicate in predicates {\n                     let normalized = normalize_with_depth_to(\n                         self,\n                         obligation.param_env,"}, {"sha": "72ade5774d749898fba7524c13e2a95cbcf6c42f", "filename": "src/test/ui/generic-associated-types/issue-92096.migrate.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9835b90c91e7012f27fc78a60599aab0011d2336/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9835b90c91e7012f27fc78a60599aab0011d2336/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr?ref=9835b90c91e7012f27fc78a60599aab0011d2336", "patch": "@@ -0,0 +1,18 @@\n+error[E0311]: the parameter type `C` may not live long enough\n+  --> $DIR/issue-92096.rs:20:33\n+   |\n+LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n+   |                 -               ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |                 |\n+   |                 help: consider adding an explicit lifetime bound...: `C: 'a`\n+\n+error[E0311]: the parameter type `C` may not live long enough\n+  --> $DIR/issue-92096.rs:20:33\n+   |\n+LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n+   |                 -               ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |                 |\n+   |                 help: consider adding an explicit lifetime bound...: `C: 'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "066132a5d98bb8bea0323094eb2f72dcf672b3e2", "filename": "src/test/ui/generic-associated-types/issue-92096.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9835b90c91e7012f27fc78a60599aab0011d2336/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9835b90c91e7012f27fc78a60599aab0011d2336/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs?ref=9835b90c91e7012f27fc78a60599aab0011d2336", "patch": "@@ -0,0 +1,29 @@\n+// edition:2018\n+// [nll] check-pass\n+// revisions: migrate nll\n+// Explicitly testing nll with revision, so ignore compare-mode=nll\n+// ignore-compare-mode-nll\n+\n+#![cfg_attr(nll, feature(nll))]\n+#![feature(generic_associated_types)]\n+\n+use std::future::Future;\n+\n+trait Client {\n+    type Connecting<'a>: Future + Send\n+    where\n+        Self: 'a;\n+\n+    fn connect(&'_ self) -> Self::Connecting<'_>;\n+}\n+\n+fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n+//[migrate]~^ ERROR the parameter\n+//[migrate]~| ERROR the parameter\n+where\n+    C: Client + Send + Sync,\n+{\n+    async move { c.connect().await }\n+}\n+\n+fn main() {}"}, {"sha": "db26493ecadfab926b1df9c68cf74ccba707e815", "filename": "src/test/ui/generic-associated-types/issue-92280.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9835b90c91e7012f27fc78a60599aab0011d2336/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9835b90c91e7012f27fc78a60599aab0011d2336/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs?ref=9835b90c91e7012f27fc78a60599aab0011d2336", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+#![allow(non_camel_case_types)]\n+\n+trait HasAssoc {\n+    type Assoc;\n+}\n+\n+trait Iterate<S: HasAssoc> {\n+    type Iter<'a>\n+    where\n+        Self: 'a;\n+}\n+\n+struct KeySegment_Broken<T> {\n+    key: T,\n+}\n+impl<S: HasAssoc> Iterate<S> for KeySegment_Broken<S::Assoc> {\n+    type Iter<'a>\n+    where\n+        Self: 'a,\n+    = ();\n+}\n+\n+fn main() {}"}]}