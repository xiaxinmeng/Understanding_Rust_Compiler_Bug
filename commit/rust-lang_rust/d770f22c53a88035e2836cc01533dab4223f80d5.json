{"sha": "d770f22c53a88035e2836cc01533dab4223f80d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzBmMjJjNTNhODgwMzVlMjgzNmNjMDE1MzNkYWI0MjIzZjgwZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-26T18:42:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-26T18:42:52Z"}, "message": "Merge #2420\n\n2420: Remove last traces of adt from Ty r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "186c1272704f589a67837b82823c31e91234f52b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/186c1272704f589a67837b82823c31e91234f52b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d770f22c53a88035e2836cc01533dab4223f80d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3XIsCRBK7hj4Ov3rIwAAdHIIAHmZ39YonBSjBfkb89pxtieJ\nZ+lyBo+15rCbqyFrDU2zvw1GgJH+1Knclv7RAI0WvotnnPK7gyXzFhFSKXUmfAxT\npQwFBCVWKbOwrDUB9NfHROWCFZ1/w3CTEQDH3ey2dpWc3ZTuCEWwVOeMjsg7SbCK\nKPqYhBhpeItzRfxLe07G9V21Hherjt+PoqB5WDUr7hzPH7zYuSb023BDW1dTVVsH\ncUhX9XlCI3dMkS0wPON4vyF25kJ4uACy9Cya8Waf3RY3dDdz0hvD56wUWRwG/0s0\nEqQZqi0+UrDxRn3zwDgo3SWzWATWkDjkJ3e2gyv0B7C2vKthFNnuYahRkmQDyXg=\n=/Imn\n-----END PGP SIGNATURE-----\n", "payload": "tree 186c1272704f589a67837b82823c31e91234f52b\nparent 3206b83a70b4e9140a5f0d9d8454abb7864b543a\nparent 936c6950e78d073f54c9ba66795f7f6f3abb351b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574793772 +0000\ncommitter GitHub <noreply@github.com> 1574793772 +0000\n\nMerge #2420\n\n2420: Remove last traces of adt from Ty r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d770f22c53a88035e2836cc01533dab4223f80d5", "html_url": "https://github.com/rust-lang/rust/commit/d770f22c53a88035e2836cc01533dab4223f80d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d770f22c53a88035e2836cc01533dab4223f80d5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3206b83a70b4e9140a5f0d9d8454abb7864b543a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3206b83a70b4e9140a5f0d9d8454abb7864b543a", "html_url": "https://github.com/rust-lang/rust/commit/3206b83a70b4e9140a5f0d9d8454abb7864b543a"}, {"sha": "936c6950e78d073f54c9ba66795f7f6f3abb351b", "url": "https://api.github.com/repos/rust-lang/rust/commits/936c6950e78d073f54c9ba66795f7f6f3abb351b", "html_url": "https://github.com/rust-lang/rust/commit/936c6950e78d073f54c9ba66795f7f6f3abb351b"}], "stats": {"total": 147, "additions": 70, "deletions": 77}, "files": [{"sha": "a842dfed6d63ae3217c56ecfbe54dcee66c38280", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d770f22c53a88035e2836cc01533dab4223f80d5", "patch": "@@ -982,7 +982,7 @@ impl ImplBlock {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n     pub(crate) krate: CrateId,\n     pub(crate) ty: InEnvironment<Ty>,\n@@ -1104,7 +1104,7 @@ impl Type {\n \n     pub fn as_adt(&self) -> Option<Adt> {\n         let (adt, _subst) = self.ty.value.as_adt()?;\n-        Some(adt)\n+        Some(adt.into())\n     }\n \n     fn derived(&self, ty: Ty) -> Type {"}, {"sha": "5c82c23d6c738af24cd92c6ee216746e9ef59751", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=d770f22c53a88035e2836cc01533dab4223f80d5", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     db::HirDatabase,\n     diagnostics::{MissingFields, MissingOkInTailExpr},\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n-    Adt, Function, Name, Path,\n+    Function, Name, Path, Struct,\n };\n \n pub use hir_def::{\n@@ -69,7 +69,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n \n         let struct_def = match self.infer[id].as_adt() {\n-            Some((Adt::Struct(s), _)) => s,\n+            Some((AdtId::StructId(s), _)) => Struct::from(s),\n             _ => return,\n         };\n "}, {"sha": "791b6064ac48f12ee510056d5ee0c6d7932936fb", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=d770f22c53a88035e2836cc01533dab4223f80d5", "patch": "@@ -22,13 +22,14 @@ use hir_def::{\n     expr::ExprId, generics::GenericParams, type_ref::Mutability, AdtId, ContainerId, DefWithBodyId,\n     GenericDefId, HasModule, Lookup, TraitId, TypeAliasId,\n };\n+use hir_expand::name::Name;\n use ra_db::{impl_intern_key, salsa};\n \n use crate::{\n     db::HirDatabase,\n     ty::primitive::{FloatTy, IntTy, Uncertain},\n     util::make_mut_slice,\n-    Adt, Crate, Name,\n+    Crate,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -598,10 +599,10 @@ impl Ty {\n         }\n     }\n \n-    pub fn as_adt(&self) -> Option<(Adt, &Substs)> {\n+    pub fn as_adt(&self) -> Option<(AdtId, &Substs)> {\n         match self {\n             Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(adt_def), parameters }) => {\n-                Some(((*adt_def).into(), parameters))\n+                Some((*adt_def, parameters))\n             }\n             _ => None,\n         }"}, {"sha": "c10a6c8448dd18555a87227ed9a5f158354960bc", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=d770f22c53a88035e2836cc01533dab4223f80d5", "patch": "@@ -71,10 +71,11 @@ pub(crate) fn reference_definition(\n             Some(nav) => return Exact(nav),\n             None => return Approximate(vec![]),\n         },\n-        Some(SelfType(ty)) => {\n-            if let Some((adt, _)) = ty.as_adt() {\n-                return Exact(adt.to_nav(db));\n-            }\n+        Some(SelfType(imp)) => {\n+            // FIXME: ideally, this should point to the type in the impl, and\n+            // not at the whole impl. And goto **type** definition should bring\n+            // us to the actual type\n+            return Exact(imp.to_nav(db));\n         }\n         Some(Local(local)) => return Exact(local.to_nav(db)),\n         Some(GenericParam(_)) => {\n@@ -503,7 +504,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"impl IMPL_BLOCK FileId(1) [12; 73)\",\n         );\n \n         check_goto(\n@@ -516,7 +517,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"impl IMPL_BLOCK FileId(1) [12; 73)\",\n         );\n \n         check_goto(\n@@ -529,7 +530,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo ENUM_DEF FileId(1) [0; 14) [5; 8)\",\n+            \"impl IMPL_BLOCK FileId(1) [15; 75)\",\n         );\n \n         check_goto(\n@@ -541,7 +542,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo ENUM_DEF FileId(1) [0; 14) [5; 8)\",\n+            \"impl IMPL_BLOCK FileId(1) [15; 62)\",\n         );\n     }\n \n@@ -560,7 +561,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"impl IMPL_BLOCK FileId(1) [49; 115)\",\n         );\n \n         check_goto(\n@@ -572,11 +573,11 @@ mod tests {\n             }\n             impl Make for Foo {\n                 fn new() -> Self<|> {\n-                    Self{}\n+                    Self {}\n                 }\n             }\n             \",\n-            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+            \"impl IMPL_BLOCK FileId(1) [49; 115)\",\n         );\n     }\n "}, {"sha": "260a7b86947888b9df1241413f93418218201b64", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 45, "deletions": 50, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=d770f22c53a88035e2836cc01533dab4223f80d5", "patch": "@@ -133,20 +133,12 @@ fn hover_text_from_name_kind(\n             hir::ModuleDef::TypeAlias(it) => from_def_source(db, it),\n             hir::ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n-        SelfType(ty) => match ty.as_adt() {\n-            Some((adt_def, _)) => match adt_def {\n-                hir::Adt::Struct(it) => from_def_source(db, it),\n-                hir::Adt::Union(it) => from_def_source(db, it),\n-                hir::Adt::Enum(it) => from_def_source(db, it),\n-            },\n-            _ => None,\n-        },\n         Local(_) => {\n             // Hover for these shows type names\n             *no_fallback = true;\n             None\n         }\n-        GenericParam(_) => {\n+        GenericParam(_) | SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n         }\n@@ -622,49 +614,52 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"struct Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n-\n-        let (analysis, position) = single_file_with_position(\n-            \"\n-            struct Thing { x: u32 }\n-            impl Thing {\n-                fn new() -> Self<|> {\n-                    Self { x: 0 }\n-                }\n-            }\n-            \",\n-        );\n-        let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"struct Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n-\n-        let (analysis, position) = single_file_with_position(\n-            \"\n-            enum Thing { A }\n-            impl Thing {\n-                pub fn new() -> Self<|> {\n-                    Thing::A\n-                }\n-            }\n-            \",\n-        );\n-        let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n         assert_eq!(hover.info.is_exact(), true);\n \n-        let (analysis, position) = single_file_with_position(\n-            \"\n-            enum Thing { A }\n-            impl Thing {\n-                pub fn thing(a: Self<|>) {\n-                }\n-            }\n-            \",\n-        );\n-        let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n+        /* FIXME: revive these tests\n+                let (analysis, position) = single_file_with_position(\n+                    \"\n+                    struct Thing { x: u32 }\n+                    impl Thing {\n+                        fn new() -> Self<|> {\n+                            Self { x: 0 }\n+                        }\n+                    }\n+                    \",\n+                );\n+\n+                let hover = analysis.hover(position).unwrap().unwrap();\n+                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n+                assert_eq!(hover.info.is_exact(), true);\n+\n+                let (analysis, position) = single_file_with_position(\n+                    \"\n+                    enum Thing { A }\n+                    impl Thing {\n+                        pub fn new() -> Self<|> {\n+                            Thing::A\n+                        }\n+                    }\n+                    \",\n+                );\n+                let hover = analysis.hover(position).unwrap().unwrap();\n+                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+                assert_eq!(hover.info.is_exact(), true);\n+\n+                let (analysis, position) = single_file_with_position(\n+                    \"\n+                    enum Thing { A }\n+                    impl Thing {\n+                        pub fn thing(a: Self<|>) {\n+                        }\n+                    }\n+                    \",\n+                );\n+                let hover = analysis.hover(position).unwrap().unwrap();\n+                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+                assert_eq!(hover.info.is_exact(), true);\n+        */\n     }\n \n     #[test]"}, {"sha": "21a1ea69ebbd48796c4e49f3b8bc55e7b68f09b0", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=d770f22c53a88035e2836cc01533dab4223f80d5", "patch": "@@ -83,10 +83,7 @@ pub(crate) fn find_all_refs(\n         NameKind::Field(field) => field.to_nav(db),\n         NameKind::AssocItem(assoc) => assoc.to_nav(db),\n         NameKind::Def(def) => NavigationTarget::from_def(db, def)?,\n-        NameKind::SelfType(ref ty) => match ty.as_adt() {\n-            Some((adt, _)) => adt.to_nav(db),\n-            None => return None,\n-        },\n+        NameKind::SelfType(imp) => imp.to_nav(db),\n         NameKind::Local(local) => local.to_nav(db),\n         NameKind::GenericParam(_) => return None,\n     };"}, {"sha": "5cea805ec92af66180f8b300f72f60cbc8d0c0a5", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=d770f22c53a88035e2836cc01533dab4223f80d5", "patch": "@@ -178,8 +178,7 @@ pub(crate) fn classify_name_ref(\n             Some(NameDefinition { kind, container, visibility })\n         }\n         PathResolution::SelfType(impl_block) => {\n-            let ty = impl_block.target_ty(db);\n-            let kind = NameKind::SelfType(ty);\n+            let kind = NameKind::SelfType(impl_block);\n             let container = impl_block.module(db);\n             Some(NameDefinition { kind, container, visibility })\n         }"}, {"sha": "10d3a2364c1a2e6ffc52a31844bce36b28b561df", "filename": "crates/ra_ide_api/src/references/name_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d770f22c53a88035e2836cc01533dab4223f80d5/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs?ref=d770f22c53a88035e2836cc01533dab4223f80d5", "patch": "@@ -4,8 +4,8 @@\n //! Note that the reference search is possible for not all of the classified items.\n \n use hir::{\n-    Adt, AssocItem, GenericParam, HasSource, Local, MacroDef, Module, ModuleDef, StructField, Ty,\n-    VariantDef,\n+    Adt, AssocItem, GenericParam, HasSource, ImplBlock, Local, MacroDef, Module, ModuleDef,\n+    StructField, VariantDef,\n };\n use ra_syntax::{ast, ast::VisibilityOwner};\n \n@@ -17,7 +17,7 @@ pub enum NameKind {\n     Field(StructField),\n     AssocItem(AssocItem),\n     Def(ModuleDef),\n-    SelfType(Ty),\n+    SelfType(ImplBlock),\n     Local(Local),\n     GenericParam(GenericParam),\n }"}]}