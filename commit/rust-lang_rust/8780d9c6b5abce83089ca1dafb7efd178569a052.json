{"sha": "8780d9c6b5abce83089ca1dafb7efd178569a052", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ODBkOWM2YjVhYmNlODMwODljYTFkYWZiN2VmZDE3ODU2OWEwNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-12T19:05:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-12T19:05:53Z"}, "message": "auto merge of #17134 : vberger/rust/lint_unused_extern_crate, r=alexcrichton\n\nThis PR creates a new lint : ``unused_extern_crate``, which do pretty much the same thing as ``unused_import``, but for ``extern crate`` statements. It is related to feature request #10385.\r\n\r\nI adapted the code tracking used imports so that it tracks extern crates usage as well. This was mainly trial and error and while I believe all cases are covered, there might be some code I added that is useless (long compile times didn't give me the opportunity to check this in detail).\r\n\r\nAlso, I removed some unused ``extern crate`` statements from the libs, that where spotted by this new lint.", "tree": {"sha": "0ea04c413b3aea1d8477956f19ffb199deb28537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea04c413b3aea1d8477956f19ffb199deb28537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8780d9c6b5abce83089ca1dafb7efd178569a052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8780d9c6b5abce83089ca1dafb7efd178569a052", "html_url": "https://github.com/rust-lang/rust/commit/8780d9c6b5abce83089ca1dafb7efd178569a052", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8780d9c6b5abce83089ca1dafb7efd178569a052/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c68679f2ebd5b165694e9346e4ad96a3e32aceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c68679f2ebd5b165694e9346e4ad96a3e32aceb", "html_url": "https://github.com/rust-lang/rust/commit/9c68679f2ebd5b165694e9346e4ad96a3e32aceb"}, {"sha": "8e61612889233e7df26067e9d1c0ec7ffbac630c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e61612889233e7df26067e9d1c0ec7ffbac630c", "html_url": "https://github.com/rust-lang/rust/commit/8e61612889233e7df26067e9d1c0ec7ffbac630c"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "616219a3cb99510e63a3010bd15306e4067831ce", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=8780d9c6b5abce83089ca1dafb7efd178569a052", "patch": "@@ -1525,6 +1525,9 @@ impl LintPass for Stability {\n declare_lint!(pub UNUSED_IMPORTS, Warn,\n               \"imports that are never used\")\n \n+declare_lint!(pub UNUSED_EXTERN_CRATE, Allow,\n+              \"extern crates that are never used\")\n+\n declare_lint!(pub UNNECESSARY_QUALIFICATION, Allow,\n               \"detects unnecessarily qualified names\")\n \n@@ -1569,6 +1572,7 @@ impl LintPass for HardwiredLints {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(\n             UNUSED_IMPORTS,\n+            UNUSED_EXTERN_CRATE,\n             UNNECESSARY_QUALIFICATION,\n             UNRECOGNIZED_LINT,\n             UNUSED_VARIABLE,"}, {"sha": "b1975ab913fc2e1d7b04ca338883ca552889a9b0", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=8780d9c6b5abce83089ca1dafb7efd178569a052", "patch": "@@ -201,7 +201,7 @@ impl LintStore {\n \n         add_lint_group!(sess, \"unused\",\n                         UNUSED_IMPORTS, UNUSED_VARIABLE, DEAD_ASSIGNMENT, DEAD_CODE,\n-                        UNUSED_MUT, UNREACHABLE_CODE)\n+                        UNUSED_MUT, UNREACHABLE_CODE, UNUSED_EXTERN_CRATE)\n \n         // We have one lint pass defined in this module.\n         self.register_pass(sess, false, box GatherNodeLevels as LintPassObject);"}, {"sha": "ed795ff0aacc4a816f1db9bf442ff5df989c9474", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=8780d9c6b5abce83089ca1dafb7efd178569a052", "patch": "@@ -21,7 +21,7 @@ use middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use middle::ty::{ExplicitSelfCategory, StaticExplicitSelfCategory};\n use util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n \n-use syntax::ast::{Arm, BindByRef, BindByValue, BindingMode, Block, Crate};\n+use syntax::ast::{Arm, BindByRef, BindByValue, BindingMode, Block, Crate, CrateNum};\n use syntax::ast::{DeclItem, DefId, Expr, ExprAgain, ExprBreak, ExprField};\n use syntax::ast::{ExprFnBlock, ExprForLoop, ExprLoop, ExprWhile, ExprMethodCall};\n use syntax::ast::{ExprPath, ExprProc, ExprStruct, ExprUnboxedFn, FnDecl};\n@@ -899,6 +899,7 @@ struct Resolver<'a> {\n     emit_errors: bool,\n \n     used_imports: HashSet<(NodeId, Namespace)>,\n+    used_crates: HashSet<CrateNum>,\n }\n \n struct BuildReducedGraphVisitor<'a, 'b:'a> {\n@@ -995,6 +996,7 @@ impl<'a> Resolver<'a> {\n             export_map2: RefCell::new(NodeMap::new()),\n             trait_map: NodeMap::new(),\n             used_imports: HashSet::new(),\n+            used_crates: HashSet::new(),\n             external_exports: DefIdSet::new(),\n             last_private: NodeMap::new(),\n \n@@ -2462,7 +2464,14 @@ impl<'a> Resolver<'a> {\n                                     debug!(\"(resolving single import) found \\\n                                             import in ns {:?}\", namespace);\n                                     let id = import_resolution.id(namespace);\n+                                    // track used imports and extern crates as well\n                                     this.used_imports.insert((id, namespace));\n+                                    match target_module.def_id.get() {\n+                                        Some(DefId{krate: kid, ..}) => {\n+                                            this.used_crates.insert(kid);\n+                                        },\n+                                        _ => {}\n+                                    }\n                                     return BoundResult(target_module, bindings);\n                                 }\n                             }\n@@ -2505,6 +2514,11 @@ impl<'a> Resolver<'a> {\n                     Some(module) => {\n                         debug!(\"(resolving single import) found external \\\n                                 module\");\n+                        // track the module as used.\n+                        match module.def_id.get() {\n+                            Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+                            _ => {}\n+                        }\n                         let name_bindings =\n                             Rc::new(Resolver::create_name_bindings_from_module(\n                                 module));\n@@ -3039,6 +3053,14 @@ impl<'a> Resolver<'a> {\n                                         (_, _) => {\n                                             search_module = module_def.clone();\n \n+                                            // track extern crates for unused_extern_crate lint\n+                                            match module_def.def_id.get() {\n+                                                Some(did) => {\n+                                                    self.used_crates.insert(did.krate);\n+                                                }\n+                                                _ => {}\n+                                            }\n+\n                                             // Keep track of the closest\n                                             // private module used when\n                                             // resolving this import chain.\n@@ -3222,7 +3244,12 @@ impl<'a> Resolver<'a> {\n                     Some(target) => {\n                         debug!(\"(resolving item in lexical scope) using \\\n                                 import resolution\");\n+                        // track used imports and extern crates as well\n                         self.used_imports.insert((import_resolution.id(namespace), namespace));\n+                        match target.target_module.def_id.get() {\n+                            Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+                            _ => {}\n+                        }\n                         return Success((target, false));\n                     }\n                 }\n@@ -3501,7 +3528,12 @@ impl<'a> Resolver<'a> {\n                     Some(target) => {\n                         debug!(\"(resolving name in module) resolved to \\\n                                 import\");\n+                        // track used imports and extern crates as well\n                         self.used_imports.insert((import_resolution.id(namespace), namespace));\n+                        match target.target_module.def_id.get() {\n+                            Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+                            _ => {}\n+                        }\n                         return Success((target, true));\n                     }\n                 }\n@@ -5068,7 +5100,14 @@ impl<'a> Resolver<'a> {\n                             Some(def) => {\n                                 // Found it.\n                                 let id = import_resolution.id(namespace);\n+                                // track imports and extern crates as well\n                                 self.used_imports.insert((id, namespace));\n+                                match target.target_module.def_id.get() {\n+                                    Some(DefId{krate: kid, ..}) => {\n+                                        self.used_crates.insert(kid);\n+                                    },\n+                                    _ => {}\n+                                }\n                                 return ImportNameDefinition(def, LastMod(AllPublic));\n                             }\n                             None => {\n@@ -5092,6 +5131,8 @@ impl<'a> Resolver<'a> {\n                     match module.def_id.get() {\n                         None => {} // Continue.\n                         Some(def_id) => {\n+                            // track used crates\n+                            self.used_crates.insert(def_id.krate);\n                             let lp = if module.is_public {LastMod(AllPublic)} else {\n                                 LastMod(DependsOn(def_id))\n                             };\n@@ -5175,6 +5216,10 @@ impl<'a> Resolver<'a> {\n             },\n             _ => (),\n         }\n+        match containing_module.def_id.get() {\n+            Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+            _ => {}\n+        }\n         return Some(def);\n     }\n \n@@ -5794,6 +5839,10 @@ impl<'a> Resolver<'a> {\n                 if self.trait_item_map.borrow().contains_key(&(name, did)) {\n                     add_trait_info(&mut found_traits, did, name);\n                     self.used_imports.insert((import.type_id, TypeNS));\n+                    match target.target_module.def_id.get() {\n+                        Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+                        _ => {}\n+                    }\n                 }\n             }\n \n@@ -5866,10 +5915,22 @@ impl<'a> Resolver<'a> {\n         if vi.span == DUMMY_SP { return }\n \n         match vi.node {\n-            ViewItemExternCrate(..) => {} // ignore\n+            ViewItemExternCrate(_, _, id) => {\n+                match self.session.cstore.find_extern_mod_stmt_cnum(id)\n+                {\n+                    Some(crate_num) => if !self.used_crates.contains(&crate_num) {\n+                    self.session.add_lint(lint::builtin::UNUSED_EXTERN_CRATE,\n+                                          id,\n+                                          vi.span,\n+                                          \"unused extern crate\".to_string());\n+                    },\n+                    _ => {}\n+                }\n+            },\n             ViewItemUse(ref p) => {\n                 match p.node {\n                     ViewPathSimple(_, _, id) => self.finalize_import(id, p.span),\n+\n                     ViewPathList(_, ref list, _) => {\n                         for i in list.iter() {\n                             self.finalize_import(i.node.id(), i.span);"}, {"sha": "e48f9df75648f75fab9f982c68825d5a8bb2c29d", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=8780d9c6b5abce83089ca1dafb7efd178569a052", "patch": "@@ -36,8 +36,6 @@\n #[phase(plugin, link)]\n extern crate log;\n extern crate syntax;\n-extern crate libc;\n-extern crate flate;\n extern crate serialize;\n \n pub mod abi;"}, {"sha": "78d3d86b29692d5483fa587d96e3458d51b355f2", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=8780d9c6b5abce83089ca1dafb7efd178569a052", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate libc;\n-\n use codemap::{Pos, Span};\n use codemap;\n use diagnostics;"}, {"sha": "a4dfdbdaeae01ed24a11ffbeadcc48f6377ef5e0", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8780d9c6b5abce83089ca1dafb7efd178569a052/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=8780d9c6b5abce83089ca1dafb7efd178569a052", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(globs)]\n+#![deny(unused_extern_crate)]\n+#![allow(unused_variable)]\n+\n+extern crate libc; //~ ERROR: unused extern crate\n+\n+extern crate \"collections\" as collecs; // no error, it is used\n+\n+extern crate rand; // no error, the use marks it as used\n+                   // even if imported objects aren't used\n+\n+extern crate time; // no error, the use * marks it as used\n+\n+#[allow(unused_imports)]\n+use rand::isaac::IsaacRng;\n+\n+use time::*;\n+\n+fn main() {\n+    let x: collecs::vec::Vec<uint> = Vec::new();\n+    let y = now();\n+}"}]}