{"sha": "6e86ab007cdcebd5fce87a598f7be9169080934e", "node_id": "C_kwDOAAsO6NoAKDZlODZhYjAwN2NkY2ViZDVmY2U4N2E1OThmN2JlOTE2OTA4MDkzNGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T17:49:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T17:49:00Z"}, "message": "Auto merge of #8752 - Serial-ATA:improve-filtering, r=xFrednet\n\nAdd version filtering option to the lint list\n\nI'm no web dev, so I don't know if this is the best execution :smile:.\n\nHere's how it looks:\n\n![Desktop](https://user-images.githubusercontent.com/69764315/165403602-9e39fe0f-6a96-46cb-ba51-8b035e74cce4.gif)\n\nAnd on mobile:\n\n![Mobile](https://user-images.githubusercontent.com/69764315/165403908-fc4a0051-2ed4-48a3-b45b-b261f49ce259.png)\n\nI've split this into two commits, in the second one I moved the JS into its own file to make it easier to work on. Is that alright? And if so, could the same thing be done to the css?\n\nchangelog: none\ncc: #7958, `@repi`\nr? `@xFrednet`", "tree": {"sha": "9266c078381fa10f7dc7be143ffbbb62edb55c34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9266c078381fa10f7dc7be143ffbbb62edb55c34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e86ab007cdcebd5fce87a598f7be9169080934e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e86ab007cdcebd5fce87a598f7be9169080934e", "html_url": "https://github.com/rust-lang/rust/commit/6e86ab007cdcebd5fce87a598f7be9169080934e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e86ab007cdcebd5fce87a598f7be9169080934e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1632fffc13b35be1b58b24edabed9cada06b160", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1632fffc13b35be1b58b24edabed9cada06b160", "html_url": "https://github.com/rust-lang/rust/commit/a1632fffc13b35be1b58b24edabed9cada06b160"}, {"sha": "f112e4d445006426830752e23c716efb835acea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f112e4d445006426830752e23c716efb835acea5", "html_url": "https://github.com/rust-lang/rust/commit/f112e4d445006426830752e23c716efb835acea5"}], "stats": {"total": 744, "additions": 442, "deletions": 302}, "files": [{"sha": "5a59f94ec918bbc3c824b828f97a53ea98979034", "filename": ".github/deploy.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e86ab007cdcebd5fce87a598f7be9169080934e/.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6e86ab007cdcebd5fce87a598f7be9169080934e/.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy.sh?ref=6e86ab007cdcebd5fce87a598f7be9169080934e", "patch": "@@ -8,6 +8,7 @@ rm -rf out/master/ || exit 0\n echo \"Making the docs for master\"\n mkdir out/master/\n cp util/gh-pages/index.html out/master\n+cp util/gh-pages/script.js out/master\n cp util/gh-pages/lints.json out/master\n \n if [[ -n $TAG_NAME ]]; then"}, {"sha": "1171da3f4e5271602838e0ecf45ba8b57c4fed34", "filename": "util/gh-pages/index.html", "status": "modified", "additions": 91, "deletions": 302, "changes": 393, "blob_url": "https://github.com/rust-lang/rust/blob/6e86ab007cdcebd5fce87a598f7be9169080934e/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/6e86ab007cdcebd5fce87a598f7be9169080934e/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=6e86ab007cdcebd5fce87a598f7be9169080934e", "patch": "@@ -94,6 +94,29 @@\n         @media (min-width: 992px) {\n             .search-control {\n                 margin-top: 0;\n+                float: right;\n+            }\n+        }\n+\n+        @media (min-width: 405px) {\n+            #upper-filters {\n+                display: flex;\n+            }\n+        }\n+\n+        @media (max-width: 430px) {\n+            /* Turn the version filter list to the left */\n+            #version-filter-selector {\n+                right: 0;\n+                left: auto;\n+            }\n+        }\n+\n+        @media (max-width: 412px) {\n+            #upper-filters,\n+            .panel-body .search-control  {\n+                padding-right: 8px;\n+                padding-left: 8px;\n             }\n         }\n \n@@ -244,7 +267,7 @@\n             cursor: pointer;\n         }\n \n-        .theme-choice>li:hover {\n+        .theme-choice > li:hover {\n             background: var(--theme-hover);\n         }\n \n@@ -273,23 +296,44 @@\n             border: 1px solid var(--theme-popup-border);\n         }\n \n-        #filter-label, #filter-clear {\n+        #version-filter-selector .checkbox {\n+            display: flex;\n+        }\n+\n+        #version-filter {\n+            min-width: available;\n+        }\n+\n+        #version-filter li label {\n+            padding-right: 0;\n+            width: 35%;\n+        }\n+\n+        .version-filter-input {\n+            height: 60%;\n+            width: 30%;\n+            text-align: center;\n+            border: none;\n+            border-bottom: 1px solid #000000;\n+        }\n+\n+        #filter-label, .filter-clear {\n             background: var(--searchbar-bg);\n             color: var(--searchbar-fg);\n             border-color: var(--theme-popup-border);\n             filter: brightness(95%);\n         }\n-        #filter-label:hover, #filter-clear:hover {\n+        #filter-label:hover, .filter-clear:hover {\n             filter: brightness(90%);\n         }\n-        #filter-input {\n+        .filter-input {\n             background: var(--searchbar-bg);\n             color: var(--searchbar-fg);\n             border-color: var(--theme-popup-border);\n         }\n \n-        #filter-input::-webkit-input-placeholder,\n-        #filter-input::-moz-placeholder {\n+        .filter-input::-webkit-input-placeholder,\n+        .filter-input::-moz-placeholder {\n             color: var(--searchbar-fg);\n             opacity: 30%;\n         }\n@@ -338,7 +382,7 @@ <h1>Clippy Lints</h1>\n \n             <div class=\"panel panel-default\" ng-show=\"data\">\n                 <div class=\"panel-body row\">\n-                    <div class=\"col-12 col-md-4\">\n+                    <div id=\"upper-filters\" class=\"col-12 col-md-4\">\n                         <div class=\"btn-group\" filter-dropdown>\n                             <button type=\"button\" class=\"btn btn-default dropdown-toggle\">\n                                 Lint levels <span class=\"badge\">{{selectedValuesCount(levels)}}</span> <span class=\"caret\"></span>\n@@ -391,13 +435,47 @@ <h1>Clippy Lints</h1>\n                                 </li>\n                             </ul>\n                         </div>\n+                        <div id=\"version-filter\">\n+                            <div class=\"btn-group\" filter-dropdown>\n+                                <button type=\"button\" class=\"btn btn-default dropdown-toggle\">\n+                                    Version\n+                                    <span id=\"version-filter-count\" class=\"badge\">\n+                                        {{versionFilterCount(versionFilters)}}\n+                                    </span>\n+                                    <span class=\"caret\"></span>\n+                                </button>\n+                                <ul id=\"version-filter-selector\" class=\"dropdown-menu\">\n+                                    <li class=\"checkbox\">\n+                                        <label ng-click=\"clearVersionFilters()\">\n+                                            <input type=\"checkbox\" class=\"invisible\" />\n+                                            Clear filters\n+                                        </label>\n+                                    </li>\n+                                    <li role=\"separator\" class=\"divider\"></li>\n+                                    <li class=\"checkbox\" ng-repeat=\"(filter, vars) in versionFilters\">\n+                                        <label ng-attr-for=\"filter-{filter}\">{{filter}}</label>\n+                                        <span>1.</span>\n+                                        <input type=\"number\"\n+                                                min=\"29\"\n+                                                ng-attr-id=\"filter-{filter}\"\n+                                                class=\"version-filter-input form-control filter-input\"\n+                                                maxlength=\"2\"\n+                                                ng-model=\"versionFilters[filter].minorVersion\"\n+                                                ng-model-options=\"{debounce: 50}\"\n+                                                ng-change=\"updateVersionFilters()\" />\n+                                        <span>.0</span>\n+                                    </li>\n+                                </ul>\n+                            </div>\n+                        </div>\n+\n                     </div>\n-                    <div class=\"col-12 col-md-8 search-control\">\n+                    <div class=\"col-12 col-md-7 search-control\">\n                         <div class=\"input-group\">\n-                            <label class=\"input-group-addon\" id=\"filter-label\" for=\"filter-input\">Filter:</label>\n-                            <input type=\"text\" class=\"form-control\" placeholder=\"Keywords or search string\" id=\"filter-input\" ng-model=\"search\" ng-model-options=\"{debounce: 50}\"/>\n+                            <label class=\"input-group-addon\" id=\"filter-label\" for=\"search-input\">Filter:</label>\n+                            <input type=\"text\" class=\"form-control filter-input\" placeholder=\"Keywords or search string\" id=\"search-input\" ng-model=\"search\" ng-model-options=\"{debounce: 50}\"/>\n                             <span class=\"input-group-btn\">\n-                                <button id=\"filter-clear\" class=\"btn\" type=\"button\" ng-click=\"search = ''\">\n+                                <button class=\"filter-clear btn\" type=\"button\" ng-click=\"search = ''\">\n                                     Clear\n                                 </button>\n                             </span>\n@@ -406,7 +484,7 @@ <h1>Clippy Lints</h1>\n                 </div>\n             </div>\n             <!-- The order of the filters should be from most likely to remove a lint to least likely to improve performance. -->\n-            <article class=\"panel panel-default\" id=\"{{lint.id}}\" ng-repeat=\"lint in data | filter:bySearch | filter:byGroups | filter:byLevels\">\n+            <article class=\"panel panel-default\" id=\"{{lint.id}}\" ng-repeat=\"lint in data | filter:bySearch | filter:byGroups | filter:byLevels | filter:byVersion\">\n                 <header class=\"panel-heading\" ng-click=\"open[lint.id] = !open[lint.id]\">\n                     <h2 class=\"panel-title\">\n                         <div class=\"panel-title-name\">\n@@ -462,295 +540,6 @@ <h2 class=\"panel-title\">\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/highlight.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/languages/rust.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.12/angular.min.js\"></script>\n-    <script>\n-    (function () {\n-        var md = window.markdownit({\n-            html: true,\n-            linkify: true,\n-            typographer: true,\n-            highlight: function (str, lang) {\n-                if (lang && hljs.getLanguage(lang)) {\n-                    try {\n-                        return '<pre class=\"hljs\"><code>' +\n-                            hljs.highlight(lang, str, true).value +\n-                            '</code></pre>';\n-                    } catch (__) {}\n-                }\n-\n-                return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n-            }\n-        });\n-\n-        function scrollToLint(lintId) {\n-            var target = document.getElementById(lintId);\n-            if (!target) {\n-                return;\n-            }\n-            target.scrollIntoView();\n-        }\n-\n-        function scrollToLintByURL($scope) {\n-            var removeListener = $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {\n-                scrollToLint(window.location.hash.slice(1));\n-                removeListener();\n-            });\n-        }\n-\n-        function selectGroup($scope, selectedGroup) {\n-            var groups = $scope.groups;\n-            for (var group in groups) {\n-                if (groups.hasOwnProperty(group)) {\n-                    if (group === selectedGroup) {\n-                        groups[group] = true;\n-                    } else {\n-                        groups[group] = false;\n-                    }\n-                }\n-            }\n-        }\n-\n-        angular.module(\"clippy\", [])\n-        .filter('markdown', function ($sce) {\n-            return function (text) {\n-                return $sce.trustAsHtml(\n-                    md.render(text || '')\n-                    // Oh deer, what a hack :O\n-                    .replace('<table', '<table class=\"table\"')\n-                );\n-            };\n-        })\n-        .directive('themeDropdown', function ($document) {\n-            return {\n-                restrict: 'A',\n-                link: function ($scope, $element, $attr) {\n-                    $element.bind('click', function () {\n-                        $element.toggleClass('open');\n-                        $element.addClass('open-recent');\n-                    });\n-\n-                    $document.bind('click', function () {\n-                        if (!$element.hasClass('open-recent')) {\n-                            $element.removeClass('open');\n-                        }\n-                        $element.removeClass('open-recent');\n-                    })\n-                }\n-            }\n-        })\n-        .directive('filterDropdown', function ($document) {\n-            return {\n-                restrict: 'A',\n-                link: function ($scope, $element, $attr) {\n-                    $element.bind('click', function (event) {\n-                        if (event.target.closest('button')) {\n-                            $element.toggleClass('open');\n-                        } else {\n-                            $element.addClass('open');\n-                        }\n-                        $element.addClass('open-recent');\n-                    });\n-\n-                    $document.bind('click', function () {\n-                        if (!$element.hasClass('open-recent')) {\n-                            $element.removeClass('open');\n-                        }\n-                        $element.removeClass('open-recent');\n-                    })\n-                }\n-            }\n-        })\n-        .directive('onFinishRender', function ($timeout) {\n-            return {\n-                restrict: 'A',\n-                link: function (scope, element, attr) {\n-                    if (scope.$last === true) {\n-                        $timeout(function () {\n-                            scope.$emit(attr.onFinishRender);\n-                        });\n-                    }\n-                }\n-            };\n-        })\n-        .controller(\"lintList\", function ($scope, $http, $timeout) {\n-            // Level filter\n-            var LEVEL_FILTERS_DEFAULT = {allow: true, warn: true, deny: true, none: true};\n-            $scope.levels = LEVEL_FILTERS_DEFAULT;\n-            $scope.byLevels = function (lint) {\n-                return $scope.levels[lint.level];\n-            };\n-\n-            var GROUPS_FILTER_DEFAULT = {\n-                cargo: true,\n-                complexity: true,\n-                correctness: true,\n-                deprecated: false,\n-                nursery: true,\n-                pedantic: true,\n-                perf: true,\n-                restriction: true,\n-                style: true,\n-                suspicious: true,\n-            };\n-            $scope.groups = GROUPS_FILTER_DEFAULT;\n-            const THEMES_DEFAULT = {\n-                light: \"Light\",\n-                rust: \"Rust\",\n-                coal: \"Coal\",\n-                navy: \"Navy\",\n-                ayu: \"Ayu\"\n-            };\n-            $scope.themes = THEMES_DEFAULT;\n-\n-            $scope.selectTheme = function (theme) {\n-                setTheme(theme, true);\n-            }\n-\n-            $scope.toggleLevels = function (value) {\n-                const levels = $scope.levels;\n-                for (const key in levels) {\n-                    if (levels.hasOwnProperty(key)) {\n-                        levels[key] = value;\n-                    }\n-                }\n-            };\n-            $scope.toggleGroups = function (value) {\n-                const groups = $scope.groups;\n-                for (const key in groups) {\n-                    if (groups.hasOwnProperty(key)) {\n-                        groups[key] = value;\n-                    }\n-                }\n-            };\n-            $scope.selectedValuesCount = function (obj) {\n-                return Object.values(obj).filter(x => x).length;\n-            }\n-            $scope.byGroups = function (lint) {\n-                return $scope.groups[lint.group];\n-            };\n-\n-            $scope.bySearch = function (lint, index, array) {\n-                let searchStr = $scope.search;\n-                // It can be `null` I haven't missed this value\n-                if (searchStr == null || searchStr.length < 3) {\n-                    return true;\n-                }\n-                searchStr = searchStr.toLowerCase();\n-\n-                // Search by id\n-                if (lint.id.indexOf(searchStr.replace(\"-\", \"_\")) !== -1) {\n-                    return true;\n-                }\n-\n-                // Search the description\n-                // The use of `for`-loops instead of `foreach` enables us to return early\n-                let terms = searchStr.split(\" \");\n-                let docsLowerCase = lint.docs.toLowerCase();\n-                for (index = 0; index < terms.length; index++) {\n-                    // This is more likely and will therefor be checked first\n-                    if (docsLowerCase.indexOf(terms[index]) !== -1) {\n-                        continue;\n-                    }\n-\n-                    if (lint.id.indexOf(terms[index]) !== -1) {\n-                        continue;\n-                    }\n-\n-                    return false;\n-                }\n-\n-                return true;\n-            }\n-\n-            // Get data\n-            $scope.open = {};\n-            $scope.loading = true;\n-            // This will be used to jump into the source code of the version that this documentation is for.\n-            $scope.docVersion = window.location.pathname.split('/')[2] || \"master\";\n-\n-            if (window.location.hash.length > 1) {\n-                $scope.search = window.location.hash.slice(1);\n-                $scope.open[window.location.hash.slice(1)] = true;\n-                scrollToLintByURL($scope);\n-            }\n-\n-            $http.get('./lints.json')\n-            .success(function (data) {\n-                $scope.data = data;\n-                $scope.loading = false;\n-\n-                var selectedGroup = getQueryVariable(\"sel\");\n-                if (selectedGroup) {\n-                    selectGroup($scope, selectedGroup.toLowerCase());\n-                }\n-\n-                scrollToLintByURL($scope);\n-\n-                setTimeout(function () {\n-                    var el = document.getElementById('filter-input');\n-                    if (el) { el.focus() }\n-                }, 0);\n-            })\n-            .error(function (data) {\n-                $scope.error = data;\n-                $scope.loading = false;\n-            });\n-\n-            window.addEventListener('hashchange', function () {\n-                // trigger re-render\n-                $timeout(function () {\n-                    $scope.levels = LEVEL_FILTERS_DEFAULT;\n-                    $scope.search = window.location.hash.slice(1);\n-                    $scope.open[window.location.hash.slice(1)] = true;\n-\n-                    scrollToLintByURL($scope);\n-                });\n-                return true;\n-            }, false);\n-        });\n-    })();\n-\n-    function getQueryVariable(variable) {\n-        var query = window.location.search.substring(1);\n-        var vars = query.split('&');\n-        for (var i = 0; i < vars.length; i++) {\n-            var pair = vars[i].split('=');\n-            if (decodeURIComponent(pair[0]) == variable) {\n-                return decodeURIComponent(pair[1]);\n-            }\n-        }\n-    }\n-\n-    function setTheme(theme, store) {\n-        let enableHighlight = false;\n-        let enableNight = false;\n-        let enableAyu = false;\n-\n-        if (theme == \"ayu\") {\n-            enableAyu = true;\n-        } else if (theme == \"coal\" || theme == \"navy\") {\n-            enableNight = true;\n-        } else if (theme == \"rust\") {\n-            enableHighlight = true;\n-        } else {\n-            enableHighlight = true;\n-            // this makes sure that an unknown theme request gets set to a known one\n-            theme = \"light\";\n-        }\n-        document.getElementsByTagName(\"body\")[0].className = theme;\n-\n-        document.getElementById(\"styleHighlight\").disabled = !enableHighlight;\n-        document.getElementById(\"styleNight\").disabled = !enableNight;\n-        document.getElementById(\"styleAyu\").disabled = !enableAyu;\n-\n-        if (store) {\n-            try {\n-                localStorage.setItem('clippy-lint-list-theme', theme);\n-            } catch (e) { }\n-        }\n-    }\n-\n-    // loading the theme after the initial load\n-    setTheme(localStorage.getItem('clippy-lint-list-theme'), false);\n-    </script>\n+    <script src=\"script.js\"></script>\n </body>\n </html>"}, {"sha": "c3250afdea209165ed188505c0dd72e3e9a7b410", "filename": "util/gh-pages/script.js", "status": "added", "additions": 350, "deletions": 0, "changes": 350, "blob_url": "https://github.com/rust-lang/rust/blob/6e86ab007cdcebd5fce87a598f7be9169080934e/util%2Fgh-pages%2Fscript.js", "raw_url": "https://github.com/rust-lang/rust/raw/6e86ab007cdcebd5fce87a598f7be9169080934e/util%2Fgh-pages%2Fscript.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Fscript.js?ref=6e86ab007cdcebd5fce87a598f7be9169080934e", "patch": "@@ -0,0 +1,350 @@\n+(function () {\n+    var md = window.markdownit({\n+        html: true,\n+        linkify: true,\n+        typographer: true,\n+        highlight: function (str, lang) {\n+            if (lang && hljs.getLanguage(lang)) {\n+                try {\n+                    return '<pre class=\"hljs\"><code>' +\n+                        hljs.highlight(lang, str, true).value +\n+                        '</code></pre>';\n+                } catch (__) {}\n+            }\n+\n+            return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n+        }\n+    });\n+\n+    function scrollToLint(lintId) {\n+        var target = document.getElementById(lintId);\n+        if (!target) {\n+            return;\n+        }\n+        target.scrollIntoView();\n+    }\n+\n+    function scrollToLintByURL($scope) {\n+        var removeListener = $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {\n+            scrollToLint(window.location.hash.slice(1));\n+            removeListener();\n+        });\n+    }\n+\n+    function selectGroup($scope, selectedGroup) {\n+        var groups = $scope.groups;\n+        for (var group in groups) {\n+            if (groups.hasOwnProperty(group)) {\n+                if (group === selectedGroup) {\n+                    groups[group] = true;\n+                } else {\n+                    groups[group] = false;\n+                }\n+            }\n+        }\n+    }\n+\n+    angular.module(\"clippy\", [])\n+        .filter('markdown', function ($sce) {\n+            return function (text) {\n+                return $sce.trustAsHtml(\n+                    md.render(text || '')\n+                        // Oh deer, what a hack :O\n+                        .replace('<table', '<table class=\"table\"')\n+                );\n+            };\n+        })\n+        .directive('themeDropdown', function ($document) {\n+            return {\n+                restrict: 'A',\n+                link: function ($scope, $element, $attr) {\n+                    $element.bind('click', function () {\n+                        $element.toggleClass('open');\n+                        $element.addClass('open-recent');\n+                    });\n+\n+                    $document.bind('click', function () {\n+                        if (!$element.hasClass('open-recent')) {\n+                            $element.removeClass('open');\n+                        }\n+                        $element.removeClass('open-recent');\n+                    })\n+                }\n+            }\n+        })\n+        .directive('filterDropdown', function ($document) {\n+            return {\n+                restrict: 'A',\n+                link: function ($scope, $element, $attr) {\n+                    $element.bind('click', function (event) {\n+                        if (event.target.closest('button')) {\n+                            $element.toggleClass('open');\n+                        } else {\n+                            $element.addClass('open');\n+                        }\n+                        $element.addClass('open-recent');\n+                    });\n+\n+                    $document.bind('click', function () {\n+                        if (!$element.hasClass('open-recent')) {\n+                            $element.removeClass('open');\n+                        }\n+                        $element.removeClass('open-recent');\n+                    })\n+                }\n+            }\n+        })\n+        .directive('onFinishRender', function ($timeout) {\n+            return {\n+                restrict: 'A',\n+                link: function (scope, element, attr) {\n+                    if (scope.$last === true) {\n+                        $timeout(function () {\n+                            scope.$emit(attr.onFinishRender);\n+                        });\n+                    }\n+                }\n+            };\n+        })\n+        .controller(\"lintList\", function ($scope, $http, $timeout) {\n+            // Level filter\n+            var LEVEL_FILTERS_DEFAULT = {allow: true, warn: true, deny: true, none: true};\n+            $scope.levels = LEVEL_FILTERS_DEFAULT;\n+            $scope.byLevels = function (lint) {\n+                return $scope.levels[lint.level];\n+            };\n+\n+            var GROUPS_FILTER_DEFAULT = {\n+                cargo: true,\n+                complexity: true,\n+                correctness: true,\n+                deprecated: false,\n+                nursery: true,\n+                pedantic: true,\n+                perf: true,\n+                restriction: true,\n+                style: true,\n+                suspicious: true,\n+            };\n+            $scope.groups = GROUPS_FILTER_DEFAULT;\n+            const THEMES_DEFAULT = {\n+                light: \"Light\",\n+                rust: \"Rust\",\n+                coal: \"Coal\",\n+                navy: \"Navy\",\n+                ayu: \"Ayu\"\n+            };\n+            $scope.themes = THEMES_DEFAULT;\n+\n+            $scope.versionFilters = {\n+                \"\u2265\": {enabled: false, minorVersion: null },\n+                \"\u2264\": {enabled: false, minorVersion: null },\n+                \"=\": {enabled: false, minorVersion: null },\n+            };\n+\n+            $scope.selectTheme = function (theme) {\n+                setTheme(theme, true);\n+            }\n+\n+            $scope.toggleLevels = function (value) {\n+                const levels = $scope.levels;\n+                for (const key in levels) {\n+                    if (levels.hasOwnProperty(key)) {\n+                        levels[key] = value;\n+                    }\n+                }\n+            };\n+\n+            $scope.toggleGroups = function (value) {\n+                const groups = $scope.groups;\n+                for (const key in groups) {\n+                    if (groups.hasOwnProperty(key)) {\n+                        groups[key] = value;\n+                    }\n+                }\n+            };\n+\n+            $scope.selectedValuesCount = function (obj) {\n+                return Object.values(obj).filter(x => x).length;\n+            }\n+\n+            $scope.clearVersionFilters = function () {\n+                for (let filter in $scope.versionFilters) {\n+                    $scope.versionFilters[filter] = { enabled: false, minorVersion: null };\n+                }\n+            }\n+\n+            $scope.versionFilterCount = function(obj) {\n+                return Object.values(obj).filter(x => x.enabled).length;\n+            }\n+\n+            $scope.updateVersionFilters = function() {\n+                for (const filter in $scope.versionFilters) {\n+                    let minorVersion = $scope.versionFilters[filter].minorVersion;\n+\n+                    // 1.29.0 and greater\n+                    if (minorVersion && minorVersion > 28) {\n+                        $scope.versionFilters[filter].enabled = true;\n+                        continue;\n+                    }\n+\n+                    $scope.versionFilters[filter].enabled = false;\n+                }\n+            }\n+\n+            $scope.byVersion = function(lint) {\n+                let filters = $scope.versionFilters;\n+                for (const filter in filters) {\n+                    if (filters[filter].enabled) {\n+                        let minorVersion = filters[filter].minorVersion;\n+\n+                        // Strip the \"pre \" prefix for pre 1.29.0 lints\n+                        let lintVersion = lint.version.startsWith(\"pre \") ? lint.version.substring(4, lint.version.length) : lint.version;\n+                        let lintMinorVersion = lintVersion.substring(2, 4);\n+\n+                        switch (filter) {\n+                            // \"=\" gets the highest priority, since all filters are inclusive\n+                            case \"=\":\n+                                return (lintMinorVersion == minorVersion);\n+                            case \"\u2265\":\n+                                if (lintMinorVersion < minorVersion) { return false; }\n+                                break;\n+                            case \"\u2264\":\n+                                if (lintMinorVersion > minorVersion) { return false; }\n+                                break;\n+                            default:\n+                                return true\n+                        }\n+                    }\n+                }\n+\n+                return true;\n+            }\n+\n+            $scope.byGroups = function (lint) {\n+                return $scope.groups[lint.group];\n+            };\n+\n+            $scope.bySearch = function (lint, index, array) {\n+                let searchStr = $scope.search;\n+                // It can be `null` I haven't missed this value\n+                if (searchStr == null || searchStr.length < 3) {\n+                    return true;\n+                }\n+                searchStr = searchStr.toLowerCase();\n+\n+                // Search by id\n+                if (lint.id.indexOf(searchStr.replace(\"-\", \"_\")) !== -1) {\n+                    return true;\n+                }\n+\n+                // Search the description\n+                // The use of `for`-loops instead of `foreach` enables us to return early\n+                let terms = searchStr.split(\" \");\n+                let docsLowerCase = lint.docs.toLowerCase();\n+                for (index = 0; index < terms.length; index++) {\n+                    // This is more likely and will therefor be checked first\n+                    if (docsLowerCase.indexOf(terms[index]) !== -1) {\n+                        continue;\n+                    }\n+\n+                    if (lint.id.indexOf(terms[index]) !== -1) {\n+                        continue;\n+                    }\n+\n+                    return false;\n+                }\n+\n+                return true;\n+            }\n+\n+            // Get data\n+            $scope.open = {};\n+            $scope.loading = true;\n+            // This will be used to jump into the source code of the version that this documentation is for.\n+            $scope.docVersion = window.location.pathname.split('/')[2] || \"master\";\n+\n+            if (window.location.hash.length > 1) {\n+                $scope.search = window.location.hash.slice(1);\n+                $scope.open[window.location.hash.slice(1)] = true;\n+                scrollToLintByURL($scope);\n+            }\n+\n+            $http.get('./lints.json')\n+                .success(function (data) {\n+                    $scope.data = data;\n+                    $scope.loading = false;\n+\n+                    var selectedGroup = getQueryVariable(\"sel\");\n+                    if (selectedGroup) {\n+                        selectGroup($scope, selectedGroup.toLowerCase());\n+                    }\n+\n+                    scrollToLintByURL($scope);\n+\n+                    setTimeout(function () {\n+                        var el = document.getElementById('filter-input');\n+                        if (el) { el.focus() }\n+                    }, 0);\n+                })\n+                .error(function (data) {\n+                    $scope.error = data;\n+                    $scope.loading = false;\n+                });\n+\n+            window.addEventListener('hashchange', function () {\n+                // trigger re-render\n+                $timeout(function () {\n+                    $scope.levels = LEVEL_FILTERS_DEFAULT;\n+                    $scope.search = window.location.hash.slice(1);\n+                    $scope.open[window.location.hash.slice(1)] = true;\n+\n+                    scrollToLintByURL($scope);\n+                });\n+                return true;\n+            }, false);\n+        });\n+})();\n+\n+function getQueryVariable(variable) {\n+    var query = window.location.search.substring(1);\n+    var vars = query.split('&');\n+    for (var i = 0; i < vars.length; i++) {\n+        var pair = vars[i].split('=');\n+        if (decodeURIComponent(pair[0]) == variable) {\n+            return decodeURIComponent(pair[1]);\n+        }\n+    }\n+}\n+\n+function setTheme(theme, store) {\n+    let enableHighlight = false;\n+    let enableNight = false;\n+    let enableAyu = false;\n+\n+    if (theme == \"ayu\") {\n+        enableAyu = true;\n+    } else if (theme == \"coal\" || theme == \"navy\") {\n+        enableNight = true;\n+    } else if (theme == \"rust\") {\n+        enableHighlight = true;\n+    } else {\n+        enableHighlight = true;\n+        // this makes sure that an unknown theme request gets set to a known one\n+        theme = \"light\";\n+    }\n+    document.getElementsByTagName(\"body\")[0].className = theme;\n+\n+    document.getElementById(\"styleHighlight\").disabled = !enableHighlight;\n+    document.getElementById(\"styleNight\").disabled = !enableNight;\n+    document.getElementById(\"styleAyu\").disabled = !enableAyu;\n+\n+    if (store) {\n+        try {\n+            localStorage.setItem('clippy-lint-list-theme', theme);\n+        } catch (e) { }\n+    }\n+}\n+\n+// loading the theme after the initial load\n+setTheme(localStorage.getItem('clippy-lint-list-theme'), false);"}]}