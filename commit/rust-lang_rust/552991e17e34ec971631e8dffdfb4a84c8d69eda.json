{"sha": "552991e17e34ec971631e8dffdfb4a84c8d69eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1Mjk5MWUxN2UzNGVjOTcxNjMxZThkZmZkZmI0YTg0YzhkNjllZGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-16T16:45:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-16T16:45:19Z"}, "message": "Replace FxHashMap with IndexVec for local_map\n\nFixes #745", "tree": {"sha": "ae4b3fefb40a0cb1e73572e372ff71472a8101c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4b3fefb40a0cb1e73572e372ff71472a8101c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552991e17e34ec971631e8dffdfb4a84c8d69eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552991e17e34ec971631e8dffdfb4a84c8d69eda", "html_url": "https://github.com/rust-lang/rust/commit/552991e17e34ec971631e8dffdfb4a84c8d69eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552991e17e34ec971631e8dffdfb4a84c8d69eda/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a18a1948e04dcd619e5112724d37eb81b35a6687", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18a1948e04dcd619e5112724d37eb81b35a6687", "html_url": "https://github.com/rust-lang/rust/commit/a18a1948e04dcd619e5112724d37eb81b35a6687"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "7065eefe17066db1ba580b898963d0042de80f86", "filename": "src/abi/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=552991e17e34ec971631e8dffdfb4a84c8d69eda", "patch": "@@ -325,7 +325,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n }\n \n-fn local_place<'tcx>(\n+fn make_local_place<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     local: Local,\n     layout: TyAndLayout<'tcx>,\n@@ -344,9 +344,7 @@ fn local_place<'tcx>(\n     #[cfg(debug_assertions)]\n     self::comments::add_local_place_comments(fx, place, local);\n \n-    let prev_place = fx.local_map.insert(local, place);\n-    debug_assert!(prev_place.is_none());\n-    fx.local_map[&local]\n+    place\n }\n \n pub(crate) fn codegen_fn_prelude<'tcx>(\n@@ -358,7 +356,8 @@ pub(crate) fn codegen_fn_prelude<'tcx>(\n     #[cfg(debug_assertions)]\n     self::comments::add_args_header_comment(fx);\n \n-    self::returning::codegen_return_param(fx, &ssa_analyzed, start_block);\n+    let ret_place = self::returning::codegen_return_param(fx, &ssa_analyzed, start_block);\n+    assert_eq!(fx.local_map.push(ret_place), RETURN_PLACE);\n \n     // None means pass_mode == NoPass\n     enum ArgKind<'tcx> {\n@@ -441,16 +440,16 @@ pub(crate) fn codegen_fn_prelude<'tcx>(\n                         #[cfg(debug_assertions)]\n                         self::comments::add_local_place_comments(fx, place, local);\n \n-                        let prev_place = fx.local_map.insert(local, place);\n-                        debug_assert!(prev_place.is_none());\n+                        assert_eq!(fx.local_map.push(place), local);\n                         continue;\n                     }\n                 }\n             }\n             _ => {}\n         }\n \n-        let place = local_place(fx, local, layout, is_ssa);\n+        let place = make_local_place(fx, local, layout, is_ssa);\n+        assert_eq!(fx.local_map.push(place), local);\n \n         match arg_kind {\n             ArgKind::Normal(param) => {\n@@ -476,7 +475,8 @@ pub(crate) fn codegen_fn_prelude<'tcx>(\n \n         let is_ssa = ssa_analyzed[local] == crate::analyze::SsaKind::Ssa;\n \n-        local_place(fx, local, layout, is_ssa);\n+        let place = make_local_place(fx, local, layout, is_ssa);\n+        assert_eq!(fx.local_map.push(place), local);\n     }\n \n     fx.bcx"}, {"sha": "690f5cd5cba3393cb472800e26a1873f31b70e5e", "filename": "src/abi/returning.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=552991e17e34ec971631e8dffdfb4a84c8d69eda", "patch": "@@ -16,34 +16,28 @@ pub(crate) fn can_return_to_ssa_var<'tcx>(\n     }\n }\n \n-pub(super) fn codegen_return_param(\n-    fx: &mut FunctionCx<'_, '_, impl Backend>,\n+pub(super) fn codegen_return_param<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n     start_block: Block,\n-) {\n+) -> CPlace<'tcx> {\n     let ret_layout = return_layout(fx);\n     let ret_pass_mode = get_pass_mode(fx.tcx, ret_layout);\n-    let ret_param = match ret_pass_mode {\n-        PassMode::NoPass => {\n-            fx.local_map\n-                .insert(RETURN_PLACE, CPlace::no_place(ret_layout));\n-            Empty\n-        }\n+    let (ret_place, ret_param) = match ret_pass_mode {\n+        PassMode::NoPass => (CPlace::no_place(ret_layout), Empty),\n         PassMode::ByVal(_) | PassMode::ByValPair(_, _) => {\n             let is_ssa = ssa_analyzed[RETURN_PLACE] == crate::analyze::SsaKind::Ssa;\n-\n-            super::local_place(fx, RETURN_PLACE, ret_layout, is_ssa);\n-\n-            Empty\n+            (\n+                super::make_local_place(fx, RETURN_PLACE, ret_layout, is_ssa),\n+                Empty,\n+            )\n         }\n         PassMode::ByRef { size: Some(_) } => {\n             let ret_param = fx.bcx.append_block_param(start_block, fx.pointer_type);\n-            fx.local_map.insert(\n-                RETURN_PLACE,\n+            (\n                 CPlace::for_ptr(Pointer::new(ret_param), ret_layout),\n-            );\n-\n-            Single(ret_param)\n+                Single(ret_param),\n+            )\n         }\n         PassMode::ByRef { size: None } => todo!(),\n     };\n@@ -61,6 +55,8 @@ pub(super) fn codegen_return_param(\n         ret_pass_mode,\n         ret_layout.ty,\n     );\n+\n+    ret_place\n }\n \n pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>("}, {"sha": "0d86a6010be6a1cb4df709683fe6d838b66dfb21", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=552991e17e34ec971631e8dffdfb4a84c8d69eda", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n \n         bcx,\n         block_map,\n-        local_map: FxHashMap::with_capacity_and_hasher(mir.local_decls.len(), Default::default()),\n+        local_map: IndexVec::with_capacity(mir.local_decls.len()),\n         caller_location: None, // set by `codegen_fn_prelude`\n         cold_blocks: EntitySet::new(),\n "}, {"sha": "9ac82eaeb3df6b23798b397cda2057b9e256e429", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=552991e17e34ec971631e8dffdfb4a84c8d69eda", "patch": "@@ -297,7 +297,7 @@ pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n \n     pub(crate) bcx: FunctionBuilder<'clif>,\n     pub(crate) block_map: IndexVec<BasicBlock, Block>,\n-    pub(crate) local_map: FxHashMap<Local, CPlace<'tcx>>,\n+    pub(crate) local_map: IndexVec<Local, CPlace<'tcx>>,\n \n     /// When `#[track_caller]` is used, the implicit caller location is stored in this variable.\n     pub(crate) caller_location: Option<CValue<'tcx>>,\n@@ -383,7 +383,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n \n     pub(crate) fn get_local_place(&mut self, local: Local) -> CPlace<'tcx> {\n-        *self.local_map.get(&local).unwrap_or_else(|| {\n+        *self.local_map.get(local).unwrap_or_else(|| {\n             panic!(\"Local {:?} doesn't exist\", local);\n         })\n     }"}, {"sha": "8f7d21dfb4fccca2eca5bc4e100e698a4ff0246e", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552991e17e34ec971631e8dffdfb4a84c8d69eda/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=552991e17e34ec971631e8dffdfb4a84c8d69eda", "patch": "@@ -4,6 +4,8 @@ mod unwind;\n \n use crate::prelude::*;\n \n+use rustc_index::vec::IndexVec;\n+\n use cranelift_codegen::entity::EntityRef;\n use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n use cranelift_codegen::isa::TargetIsa;\n@@ -269,7 +271,7 @@ impl<'tcx> DebugContext<'tcx> {\n         isa: &dyn TargetIsa,\n         context: &Context,\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n-        local_map: FxHashMap<mir::Local, CPlace<'tcx>>,\n+        local_map: IndexVec<mir::Local, CPlace<'tcx>>,\n     ) {\n         let symbol = func_id.as_u32() as usize;\n         let mir = self.tcx.instance_mir(instance.def);\n@@ -390,7 +392,7 @@ fn place_location<'tcx>(\n     isa: &dyn TargetIsa,\n     symbol: usize,\n     context: &Context,\n-    local_map: &FxHashMap<mir::Local, CPlace<'tcx>>,\n+    local_map: &IndexVec<mir::Local, CPlace<'tcx>>,\n     #[allow(rustc::default_hash_types)] value_labels_ranges: &std::collections::HashMap<\n         ValueLabel,\n         Vec<ValueLocRange>,\n@@ -399,7 +401,7 @@ fn place_location<'tcx>(\n ) -> AttributeValue {\n     assert!(place.projection.is_empty()); // FIXME implement them\n \n-    match local_map[&place.local].inner() {\n+    match local_map[place.local].inner() {\n         CPlaceInner::Var(_local, var) => {\n             let value_label = cranelift_codegen::ir::ValueLabel::new(var.index());\n             if let Some(value_loc_ranges) = value_labels_ranges.get(&value_label) {"}]}