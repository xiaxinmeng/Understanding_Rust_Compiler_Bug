{"sha": "ba3dec23792c1e5107df845c2e3894fe9e64e8f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhM2RlYzIzNzkyYzFlNTEwN2RmODQ1YzJlMzg5NGZlOWU2NGU4Zjc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-01-29T02:51:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-29T02:51:16Z"}, "message": "Merge pull request #2395 from davidalber/fix-configuration-snippets2\n\nFixing straightforward configuration snippets (Part 2)", "tree": {"sha": "84e7cd95099922eb224964ce01d8209345e51537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e7cd95099922eb224964ce01d8209345e51537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3dec23792c1e5107df845c2e3894fe9e64e8f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJabowkCRBK7hj4Ov3rIwAAdHIIAK6KYey8a6i2ZTL3jIMC2Kpu\neDkzNlH2xo8kVR+z0CWvTQQ2/amGSaO34Nu8lpwS77/Rj5sDa6ieijZLDpuVvbdQ\n9QqdXUi0ccpZASMeQDIJ2fy+f9aUjZpREGoeMC82FlIkyodz7nWC4sXHpfB6MnUL\nrtb5zihYUfOfKUTscIr91hbHVvD6msegVA+oxlijPpCzWO3Lo8fGwObjS/5NYpj/\nfOLiUxY3Xp6VcLmdQvQazQWPwwNtGDwHeiWAnwMRc6UN9s3R5n884TgL6lu8SkZG\nuMSy2RLx2tHRciTaZmrgaMceplO3okWHT2RN/L7/luVEZ9SWuVJtrEmNXkvZ1jo=\n=bahf\n-----END PGP SIGNATURE-----\n", "payload": "tree 84e7cd95099922eb224964ce01d8209345e51537\nparent 4633786848f79a8a8bc3b8679b7b40418f1f0f7f\nparent 476ec77fa372449dc803fb0d1c37131b35f7cd8b\nauthor Nick Cameron <nrc@ncameron.org> 1517194276 +1100\ncommitter GitHub <noreply@github.com> 1517194276 +1100\n\nMerge pull request #2395 from davidalber/fix-configuration-snippets2\n\nFixing straightforward configuration snippets (Part 2)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3dec23792c1e5107df845c2e3894fe9e64e8f7", "html_url": "https://github.com/rust-lang/rust/commit/ba3dec23792c1e5107df845c2e3894fe9e64e8f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3dec23792c1e5107df845c2e3894fe9e64e8f7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "html_url": "https://github.com/rust-lang/rust/commit/4633786848f79a8a8bc3b8679b7b40418f1f0f7f"}, {"sha": "476ec77fa372449dc803fb0d1c37131b35f7cd8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/476ec77fa372449dc803fb0d1c37131b35f7cd8b", "html_url": "https://github.com/rust-lang/rust/commit/476ec77fa372449dc803fb0d1c37131b35f7cd8b"}], "stats": {"total": 165, "additions": 94, "deletions": 71}, "files": [{"sha": "5a914a0d61039aed7ea010995c8a6e25053f12b1", "filename": "Configurations.md", "status": "modified", "additions": 94, "deletions": 71, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/ba3dec23792c1e5107df845c2e3894fe9e64e8f7/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/ba3dec23792c1e5107df845c2e3894fe9e64e8f7/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=ba3dec23792c1e5107df845c2e3894fe9e64e8f7", "patch": "@@ -1161,37 +1161,40 @@ Force multiline closure and match arm bodies to be wrapped in a block\n #### `false` (default):\n \n ```rust\n-result.and_then(|maybe_value| match maybe_value {\n-    None => ...,\n-    Some(value) => ...,\n-})\n-\n-match lorem {\n-    None => if ipsum {\n-        println!(\"Hello World\");\n-    },\n-    Some(dolor) => ...,\n+fn main() {\n+    result.and_then(|maybe_value| match maybe_value {\n+        None => foo(),\n+        Some(value) => bar(),\n+    });\n+\n+    match lorem {\n+        None => if ipsum {\n+            println!(\"Hello World\");\n+        },\n+        Some(dolor) => foo(),\n+    }\n }\n ```\n \n #### `true`:\n \n ```rust\n+fn main() {\n+    result.and_then(|maybe_value| {\n+        match maybe_value {\n+            None => foo(),\n+            Some(value) => bar(),\n+        }\n+    });\n \n-result.and_then(|maybe_value| {\n-    match maybe_value {\n-        None => ...,\n-        Some(value) => ...,\n-    }\n-})\n-\n-match lorem {\n-    None => {\n-        if ipsum {\n-            println!(\"Hello World\");\n+    match lorem {\n+        None => {\n+            if ipsum {\n+                println!(\"Hello World\");\n+            }\n         }\n+        Some(dolor) => foo(),\n     }\n-    Some(dolor) => ...,\n }\n ```\n \n@@ -1589,24 +1592,28 @@ fn lorem<T: Eq>(t: T) {\n }\n \n // non-empty square brackets\n-let lorem: [usize; 2] = [ipsum, dolor];\n+fn lorem<T: Eq>(t: T) {\n+    let lorem: [usize; 2] = [ipsum, dolor];\n+}\n ```\n \n #### `true`:\n \n ```rust\n // generic arguments\n-fn lorem< T: Eq >(t: T) {\n+fn lorem< T: Eq >( t: T ) {\n     // body\n }\n \n // non-empty parentheses\n-fn lorem<T: Eq>( t: T ) {\n+fn lorem< T: Eq >( t: T ) {\n     let lorem = ( ipsum, dolor );\n }\n \n // non-empty square brackets\n-let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n+fn lorem< T: Eq >( t: T ) {\n+    let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n+}\n ```\n \n ## `struct_lit_single_line`\n@@ -1626,10 +1633,12 @@ let lorem = Lorem { ipsum: dolor, sit: amet };\n #### `false`:\n \n ```rust\n-let lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n-};\n+fn main() {\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+}\n ```\n \n See also: [`indent_style`](#indent_style).\n@@ -1649,7 +1658,7 @@ Number of spaces per tab\n fn lorem() {\n     let ipsum = dolor();\n     let sit = vec![\n-        \"amet consectetur adipiscing elit.\"\n+        \"amet consectetur adipiscing elit amet consectetur adipiscing elit amet consectetur.\",\n     ];\n }\n ```\n@@ -1660,7 +1669,7 @@ fn lorem() {\n fn lorem() {\n   let ipsum = dolor();\n   let sit = vec![\n-    \"amet consectetur adipiscing elit.\"\n+    \"amet consectetur adipiscing elit amet consectetur adipiscing elit amet consectetur.\",\n   ];\n }\n ```\n@@ -1679,43 +1688,49 @@ How to handle trailing commas for lists\n #### `\"Vertical\"` (default):\n \n ```rust\n-let Lorem { ipsum, dolor, sit } = amet;\n-let Lorem {\n-    ipsum,\n-    dolor,\n-    sit,\n-    amet,\n-    consectetur,\n-    adipiscing,\n-} = elit;\n+fn main() {\n+    let Lorem { ipsum, dolor, sit } = amet;\n+    let Lorem {\n+        ipsum,\n+        dolor,\n+        sit,\n+        amet,\n+        consectetur,\n+        adipiscing,\n+    } = elit;\n+}\n ```\n \n #### `\"Always\"`:\n \n ```rust\n-let Lorem { ipsum, dolor, sit, } = amet;\n-let Lorem {\n-    ipsum,\n-    dolor,\n-    sit,\n-    amet,\n-    consectetur,\n-    adipiscing,\n-} = elit;\n+fn main() {\n+    let Lorem { ipsum, dolor, sit, } = amet;\n+    let Lorem {\n+        ipsum,\n+        dolor,\n+        sit,\n+        amet,\n+        consectetur,\n+        adipiscing,\n+    } = elit;\n+}\n ```\n \n #### `\"Never\"`:\n \n ```rust\n-let Lorem { ipsum, dolor, sit } = amet;\n-let Lorem {\n-    ipsum,\n-    dolor,\n-    sit,\n-    amet,\n-    consectetur,\n-    adipiscing\n-} = elit;\n+fn main() {\n+    let Lorem { ipsum, dolor, sit } = amet;\n+    let Lorem {\n+        ipsum,\n+        dolor,\n+        sit,\n+        amet,\n+        consectetur,\n+        adipiscing\n+    } = elit;\n+}\n ```\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n@@ -1754,15 +1769,15 @@ Determines if `+` or `=` are wrapped in spaces in the punctuation of types\n \n ```rust\n fn lorem<Ipsum: Dolor + Sit = Amet>() {\n-\t// body\n+    // body\n }\n ```\n \n #### `\"Compressed\"`:\n \n ```rust\n fn lorem<Ipsum: Dolor+Sit=Amet>() {\n-\t// body\n+    // body\n }\n ```\n \n@@ -1777,13 +1792,17 @@ Replace uses of the try! macro by the ? shorthand\n #### `false` (default):\n \n ```rust\n-let lorem = try!(ipsum.map(|dolor|dolor.sit()));\n+fn main() {\n+    let lorem = try!(ipsum.map(|dolor| dolor.sit()));\n+}\n ```\n \n #### `true`:\n \n ```rust\n-let lorem = ipsum.map(|dolor| dolor.sit())?;\n+fn main() {\n+    let lorem = ipsum.map(|dolor| dolor.sit())?;\n+}\n ```\n \n \n@@ -1822,21 +1841,25 @@ Wrap the body of arms in blocks when it does not fit on the same line with the p\n #### `true` (default):\n \n ```rust\n-match lorem {\n-    true => {\n-        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n+fn main() {\n+    match lorem {\n+        true => {\n+            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n+        }\n+        false => println!(\"{}\", sit),\n     }\n-    false => println!(\"{}\", sit),\n }\n ```\n \n #### `false`:\n \n ```rust\n-match lorem {\n-    true =>\n-        foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n-    false => println!(\"{}\", sit),\n+fn main() {\n+    match lorem {\n+        true =>\n+            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n+        false => println!(\"{}\", sit),\n+    }\n }\n ```\n "}]}