{"sha": "ef75761fb1aa5ce04954349a85e89b8cffbf5c42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNzU3NjFmYjFhYTVjZTA0OTU0MzQ5YTg1ZTg5YjhjZmZiZjVjNDI=", "commit": {"author": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-12-22T15:18:34Z"}, "committer": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-12-22T15:18:34Z"}, "message": "Turn helper method into a closure\n\n`replace_prefix` is currently implemented as a method but has no real relation\nto the struct it is implemented on. Turn it into a closure and move it into the\nonly method from which it is called.", "tree": {"sha": "8d4728a7f6ed56da19a42baf2dace9a7bf6267ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d4728a7f6ed56da19a42baf2dace9a7bf6267ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef75761fb1aa5ce04954349a85e89b8cffbf5c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef75761fb1aa5ce04954349a85e89b8cffbf5c42", "html_url": "https://github.com/rust-lang/rust/commit/ef75761fb1aa5ce04954349a85e89b8cffbf5c42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef75761fb1aa5ce04954349a85e89b8cffbf5c42/comments", "author": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "html_url": "https://github.com/rust-lang/rust/commit/75e1acb63a642fa78cb8c382d7462b41fa2b56cd"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "2728e03171a75df207825ecfa5c56049ae050c87", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ef75761fb1aa5ce04954349a85e89b8cffbf5c42/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef75761fb1aa5ce04954349a85e89b8cffbf5c42/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=ef75761fb1aa5ce04954349a85e89b8cffbf5c42", "patch": "@@ -360,10 +360,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n-    fn replace_prefix(&self, s: &str, old: &str, new: &str) -> Option<String> {\n-        s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n-    }\n-\n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n     /// provide them useful help. For example:\n     ///\n@@ -394,6 +390,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         }\n \n+        let replace_prefix = |s: &str, old: &str, new: &str| {\n+            s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n+        };\n+\n         let is_struct_pat_shorthand_field =\n             self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id, sp);\n \n@@ -409,7 +409,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Str, &ty::Array(arr, _) | &ty::Slice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = self.replace_prefix(&src, \"b\\\"\", \"\\\"\") {\n+                            if let Some(src) = replace_prefix(&src, \"b\\\"\", \"\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider removing the leading `b`\",\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Array(arr, _) | &ty::Slice(arr), &ty::Str) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = self.replace_prefix(&src, \"\\\"\", \"b\\\"\") {\n+                            if let Some(src) = replace_prefix(&src, \"\\\"\", \"b\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider adding a leading `b`\",\n@@ -583,23 +583,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 hir::Mutability::Mut => {\n                                     let new_prefix = \"&mut \".to_owned() + derefs;\n                                     match mutbl_a {\n-                                        hir::Mutability::Mut => self\n-                                            .replace_prefix(&src, \"&mut \", &new_prefix)\n-                                            .map(|s| (s, Applicability::MachineApplicable)),\n-                                        hir::Mutability::Not => self\n-                                            .replace_prefix(&src, \"&\", &new_prefix)\n-                                            .map(|s| (s, Applicability::Unspecified)),\n+                                        hir::Mutability::Mut => {\n+                                            replace_prefix(&src, \"&mut \", &new_prefix)\n+                                                .map(|s| (s, Applicability::MachineApplicable))\n+                                        }\n+                                        hir::Mutability::Not => {\n+                                            replace_prefix(&src, \"&\", &new_prefix)\n+                                                .map(|s| (s, Applicability::Unspecified))\n+                                        }\n                                     }\n                                 }\n                                 hir::Mutability::Not => {\n                                     let new_prefix = \"&\".to_owned() + derefs;\n                                     match mutbl_a {\n-                                        hir::Mutability::Mut => self\n-                                            .replace_prefix(&src, \"&mut \", &new_prefix)\n-                                            .map(|s| (s, Applicability::MachineApplicable)),\n-                                        hir::Mutability::Not => self\n-                                            .replace_prefix(&src, \"&\", &new_prefix)\n-                                            .map(|s| (s, Applicability::MachineApplicable)),\n+                                        hir::Mutability::Mut => {\n+                                            replace_prefix(&src, \"&mut \", &new_prefix)\n+                                                .map(|s| (s, Applicability::MachineApplicable))\n+                                        }\n+                                        hir::Mutability::Not => {\n+                                            replace_prefix(&src, \"&\", &new_prefix)\n+                                                .map(|s| (s, Applicability::MachineApplicable))\n+                                        }\n                                     }\n                                 }\n                             } {"}]}