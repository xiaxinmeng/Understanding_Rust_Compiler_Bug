{"sha": "7d873fcfa1cb56cf6e9571ece4e70bef90772469", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkODczZmNmYTFjYjU2Y2Y2ZTk1NzFlY2U0ZTcwYmVmOTA3NzI0Njk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-05T10:08:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-05T10:08:31Z"}, "message": "Move PathResolution", "tree": {"sha": "204f25916588700a2c1ab1724c932e399454c125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/204f25916588700a2c1ab1724c932e399454c125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d873fcfa1cb56cf6e9571ece4e70bef90772469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d873fcfa1cb56cf6e9571ece4e70bef90772469", "html_url": "https://github.com/rust-lang/rust/commit/7d873fcfa1cb56cf6e9571ece4e70bef90772469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d873fcfa1cb56cf6e9571ece4e70bef90772469/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b6716e50ed3fa99fc25dcd80df1b97fd03aef39", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6716e50ed3fa99fc25dcd80df1b97fd03aef39", "html_url": "https://github.com/rust-lang/rust/commit/7b6716e50ed3fa99fc25dcd80df1b97fd03aef39"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "9f59d590ce308c76a7e1d676af66da5f720be0d9", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d873fcfa1cb56cf6e9571ece4e70bef90772469/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d873fcfa1cb56cf6e9571ece4e70bef90772469/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=7d873fcfa1cb56cf6e9571ece4e70bef90772469", "patch": "@@ -45,8 +45,7 @@ pub use crate::{\n         StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n     },\n     has_source::HasSource,\n-    semantics::{original_range, Semantics, SemanticsScope},\n-    source_analyzer::PathResolution,\n+    semantics::{original_range, PathResolution, Semantics, SemanticsScope},\n };\n \n pub use hir_def::{"}, {"sha": "965d185a474add56b49a50b098812a0587b6d0d4", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7d873fcfa1cb56cf6e9571ece4e70bef90772469/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d873fcfa1cb56cf6e9571ece4e70bef90772469/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=7d873fcfa1cb56cf6e9571ece4e70bef90772469", "patch": "@@ -20,10 +20,23 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Function, HirFileId, InFile, Local, MacroDef, Module, ModuleDef, Name, Origin, Path,\n-    PathResolution, ScopeDef, StructField, Trait, Type, TypeParam, VariantDef,\n+    AssocItem, Function, HirFileId, ImplDef, InFile, Local, MacroDef, Module, ModuleDef, Name,\n+    Origin, Path, ScopeDef, StructField, Trait, Type, TypeParam, VariantDef,\n };\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum PathResolution {\n+    /// An item\n+    Def(ModuleDef),\n+    /// A local binding (only value namespace)\n+    Local(Local),\n+    /// A generic parameter\n+    TypeParam(TypeParam),\n+    SelfType(ImplDef),\n+    Macro(MacroDef),\n+    AssocItem(AssocItem),\n+}\n+\n /// Primary API to get semantic information, like types, from syntax trees.\n pub struct Semantics<'db, DB> {\n     pub db: &'db DB,"}, {"sha": "f3f1ed05a3777f38c2874cbd38410bee5b794cfb", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7d873fcfa1cb56cf6e9571ece4e70bef90772469/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d873fcfa1cb56cf6e9571ece4e70bef90772469/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=7d873fcfa1cb56cf6e9571ece4e70bef90772469", "patch": "@@ -24,8 +24,8 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, Adt, Const, EnumVariant, Function, Local, MacroDef, ModPath, ModuleDef, Path,\n-    PathKind, Static, Struct, Trait, Type, TypeAlias, TypeParam,\n+    db::HirDatabase, semantics::PathResolution, Adt, Const, EnumVariant, Function, Local, MacroDef,\n+    ModPath, ModuleDef, Path, PathKind, Static, Struct, Trait, Type, TypeAlias, TypeParam,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -40,19 +40,6 @@ pub(crate) struct SourceAnalyzer {\n     scopes: Option<Arc<ExprScopes>>,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub enum PathResolution {\n-    /// An item\n-    Def(crate::ModuleDef),\n-    /// A local binding (only value namespace)\n-    Local(Local),\n-    /// A generic parameter\n-    TypeParam(TypeParam),\n-    SelfType(crate::ImplDef),\n-    Macro(MacroDef),\n-    AssocItem(crate::AssocItem),\n-}\n-\n impl SourceAnalyzer {\n     pub(crate) fn new_for_body(\n         db: &impl HirDatabase,"}]}