{"sha": "8b4b20836b832e91aa605a2faf5e2a55190202c8", "node_id": "C_kwDOAAsO6NoAKDhiNGIyMDgzNmI4MzJlOTFhYTYwNWEyZmFmNWUyYTU1MTkwMjAyYzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-22T20:33:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-22T20:33:51Z"}, "message": "Auto merge of #111848 - Dylan-DPC:rollup-7jqydzg, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #111501 (MIR drive-by cleanups)\n - #111609 (Mark internal functions and traits unsafe to reflect preconditions)\n - #111612 (Give better error when collecting into `&[T]`)\n - #111756 (Rename `{drop,forget}_{copy,ref}` lints to more consistent naming)\n - #111843 (move lcnr to only review types stuff)\n - #111844 (Migrate GUI colors test to original CSS color format)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2f39d24e87501b8f6b75c8dd7581125958154eb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f39d24e87501b8f6b75c8dd7581125958154eb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b4b20836b832e91aa605a2faf5e2a55190202c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4b20836b832e91aa605a2faf5e2a55190202c8", "html_url": "https://github.com/rust-lang/rust/commit/8b4b20836b832e91aa605a2faf5e2a55190202c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b4b20836b832e91aa605a2faf5e2a55190202c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfcde247cd9ff23c193f520b4930ccedffa584b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcde247cd9ff23c193f520b4930ccedffa584b2", "html_url": "https://github.com/rust-lang/rust/commit/cfcde247cd9ff23c193f520b4930ccedffa584b2"}, {"sha": "ec372a17e2f588334b77efa1dc8d4bc7758121e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec372a17e2f588334b77efa1dc8d4bc7758121e3", "html_url": "https://github.com/rust-lang/rust/commit/ec372a17e2f588334b77efa1dc8d4bc7758121e3"}], "stats": {"total": 748, "additions": 376, "deletions": 372}, "files": [{"sha": "e1658d3ff82b7fe2f56cc37d855b32bd98431601", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -521,18 +521,18 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n \n-lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+lint_dropping_references = calls to `std::mem::drop` with a reference instead of an owned value does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n \n-lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+lint_dropping_copy_types = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n \n-lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+lint_forgetting_references = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n \n-lint_forget_copy = calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+lint_forgetting_copy_types = calls to `std::mem::forget` with a value that implements `Copy` does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result"}, {"sha": "ed2b384805e056a9a0d2c605e8a5af74972f86bc", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -7,7 +7,7 @@ use crate::{\n };\n \n declare_lint! {\n-    /// The `drop_ref` lint checks for calls to `std::mem::drop` with a reference\n+    /// The `dropping_references` lint checks for calls to `std::mem::drop` with a reference\n     /// instead of an owned value.\n     ///\n     /// ### Example\n@@ -29,13 +29,13 @@ declare_lint! {\n     /// reference itself, which is a no-op. It will not call the `drop` method (from\n     /// the `Drop` trait implementation) on the underlying referenced value, which\n     /// is likely what was intended.\n-    pub DROP_REF,\n+    pub DROPPING_REFERENCES,\n     Warn,\n     \"calls to `std::mem::drop` with a reference instead of an owned value\"\n }\n \n declare_lint! {\n-    /// The `forget_ref` lint checks for calls to `std::mem::forget` with a reference\n+    /// The `forgetting_references` lint checks for calls to `std::mem::forget` with a reference\n     /// instead of an owned value.\n     ///\n     /// ### Example\n@@ -52,13 +52,13 @@ declare_lint! {\n     /// Calling `forget` on a reference will only forget the\n     /// reference itself, which is a no-op. It will not forget the underlying\n     /// referenced value, which is likely what was intended.\n-    pub FORGET_REF,\n+    pub FORGETTING_REFERENCES,\n     Warn,\n     \"calls to `std::mem::forget` with a reference instead of an owned value\"\n }\n \n declare_lint! {\n-    /// The `drop_copy` lint checks for calls to `std::mem::drop` with a value\n+    /// The `dropping_copy_types` lint checks for calls to `std::mem::drop` with a value\n     /// that derives the Copy trait.\n     ///\n     /// ### Example\n@@ -76,13 +76,13 @@ declare_lint! {\n     /// Calling `std::mem::drop` [does nothing for types that\n     /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n     /// value will be copied and moved into the function on invocation.\n-    pub DROP_COPY,\n+    pub DROPPING_COPY_TYPES,\n     Warn,\n     \"calls to `std::mem::drop` with a value that implements Copy\"\n }\n \n declare_lint! {\n-    /// The `forget_copy` lint checks for calls to `std::mem::forget` with a value\n+    /// The `forgetting_copy_types` lint checks for calls to `std::mem::forget` with a value\n     /// that derives the Copy trait.\n     ///\n     /// ### Example\n@@ -104,12 +104,12 @@ declare_lint! {\n     /// An alternative, but also valid, explanation is that Copy types do not\n     /// implement the Drop trait, which means they have no destructors. Without a\n     /// destructor, there is nothing for `std::mem::forget` to ignore.\n-    pub FORGET_COPY,\n+    pub FORGETTING_COPY_TYPES,\n     Warn,\n     \"calls to `std::mem::forget` with a value that implements Copy\"\n }\n \n-declare_lint_pass!(DropForgetUseless => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n+declare_lint_pass!(DropForgetUseless => [DROPPING_REFERENCES, FORGETTING_REFERENCES, DROPPING_COPY_TYPES, FORGETTING_COPY_TYPES]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -123,16 +123,16 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             match fn_name {\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => {\n-                    cx.emit_spanned_lint(DROP_REF, expr.span, DropRefDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(DROPPING_REFERENCES, expr.span, DropRefDiag { arg_ty, label: arg.span });\n                 },\n                 sym::mem_forget if arg_ty.is_ref() => {\n-                    cx.emit_spanned_lint(FORGET_REF, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(FORGETTING_REFERENCES, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n                 },\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n-                    cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(DROPPING_COPY_TYPES, expr.span, DropCopyDiag { arg_ty, label: arg.span });\n                 }\n                 sym::mem_forget if is_copy => {\n-                    cx.emit_spanned_lint(FORGET_COPY, expr.span, ForgetCopyDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(FORGETTING_COPY_TYPES, expr.span, ForgetCopyDiag { arg_ty, label: arg.span });\n                 }\n                 _ => return,\n             };"}, {"sha": "de1c2be287576287cac7cc59358c40aded7d9851", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -662,9 +662,9 @@ pub struct ForLoopsOverFalliblesSuggestion<'a> {\n     pub end_span: Span,\n }\n \n-// drop_ref.rs\n+// drop_forget_useless.rs\n #[derive(LintDiagnostic)]\n-#[diag(lint_drop_ref)]\n+#[diag(lint_dropping_references)]\n #[note]\n pub struct DropRefDiag<'a> {\n     pub arg_ty: Ty<'a>,\n@@ -673,7 +673,7 @@ pub struct DropRefDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_drop_copy)]\n+#[diag(lint_dropping_copy_types)]\n #[note]\n pub struct DropCopyDiag<'a> {\n     pub arg_ty: Ty<'a>,\n@@ -682,7 +682,7 @@ pub struct DropCopyDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_forget_ref)]\n+#[diag(lint_forgetting_references)]\n #[note]\n pub struct ForgetRefDiag<'a> {\n     pub arg_ty: Ty<'a>,\n@@ -691,7 +691,7 @@ pub struct ForgetRefDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_forget_copy)]\n+#[diag(lint_forgetting_copy_types)]\n #[note]\n pub struct ForgetCopyDiag<'a> {\n     pub arg_ty: Ty<'a>,"}, {"sha": "21faf1958e9113541ad956e6f43a78403c88f7bb", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -749,6 +749,29 @@ pub enum TerminatorKind<'tcx> {\n     },\n }\n \n+impl TerminatorKind<'_> {\n+    /// Returns a simple string representation of a `TerminatorKind` variant, independent of any\n+    /// values it might hold (e.g. `TerminatorKind::Call` always returns `\"Call\"`).\n+    pub const fn name(&self) -> &'static str {\n+        match self {\n+            TerminatorKind::Goto { .. } => \"Goto\",\n+            TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n+            TerminatorKind::Resume => \"Resume\",\n+            TerminatorKind::Terminate => \"Terminate\",\n+            TerminatorKind::Return => \"Return\",\n+            TerminatorKind::Unreachable => \"Unreachable\",\n+            TerminatorKind::Drop { .. } => \"Drop\",\n+            TerminatorKind::Call { .. } => \"Call\",\n+            TerminatorKind::Assert { .. } => \"Assert\",\n+            TerminatorKind::Yield { .. } => \"Yield\",\n+            TerminatorKind::GeneratorDrop => \"GeneratorDrop\",\n+            TerminatorKind::FalseEdge { .. } => \"FalseEdge\",\n+            TerminatorKind::FalseUnwind { .. } => \"FalseUnwind\",\n+            TerminatorKind::InlineAsm { .. } => \"InlineAsm\",\n+        }\n+    }\n+}\n+\n /// Action to be taken when a stack unwind happens.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n #[derive(TypeFoldable, TypeVisitable)]"}, {"sha": "b01b6fbf22259f7447a5038ba654885b589f3bf0", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -644,24 +644,27 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         };\n \n-        if let Some(destination) = destination {\n-            if let Some(value) = value {\n+        match (destination, value) {\n+            (Some(destination), Some(value)) => {\n                 debug!(\"stmt_expr Break val block_context.push(SubExpr)\");\n                 self.block_context.push(BlockFrame::SubExpr);\n                 unpack!(block = self.expr_into_dest(destination, block, value));\n                 self.block_context.pop();\n-            } else {\n+            }\n+            (Some(destination), None) => {\n                 self.cfg.push_assign_unit(block, source_info, destination, self.tcx)\n             }\n-        } else {\n-            assert!(value.is_none(), \"`return` and `break` should have a destination\");\n-            if self.tcx.sess.instrument_coverage() {\n+            (None, Some(_)) => {\n+                panic!(\"`return`, `become` and `break` with value and must have a destination\")\n+            }\n+            (None, None) if self.tcx.sess.instrument_coverage() => {\n                 // Unlike `break` and `return`, which push an `Assign` statement to MIR, from which\n                 // a Coverage code region can be generated, `continue` needs no `Assign`; but\n                 // without one, the `InstrumentCoverage` MIR pass cannot generate a code region for\n                 // `continue`. Coverage will be missing unless we add a dummy `Assign` to MIR.\n                 self.add_dummy_assignment(span, block, source_info);\n             }\n+            (None, None) => {}\n         }\n \n         let region_scope = self.scopes.breakable_scopes[break_index].region_scope;\n@@ -671,12 +674,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         } else {\n             self.scopes.breakable_scopes[break_index].continue_drops.as_mut().unwrap()\n         };\n-        let mut drop_idx = ROOT_NODE;\n-        for scope in &self.scopes.scopes[scope_index + 1..] {\n-            for drop in &scope.drops {\n-                drop_idx = drops.add_drop(*drop, drop_idx);\n-            }\n-        }\n+\n+        let drop_idx = self.scopes.scopes[scope_index + 1..]\n+            .iter()\n+            .flat_map(|scope| &scope.drops)\n+            .fold(ROOT_NODE, |drop_idx, &drop| drops.add_drop(drop, drop_idx));\n+\n         drops.add_entry(block, drop_idx);\n \n         // `build_drop_trees` doesn't have access to our source_info, so we"}, {"sha": "c8648224ac1e89c135b2777f23bbf46dc5d6825b", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -130,6 +130,7 @@ impl<'tcx> Cx<'tcx> {\n                 ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }\n             }\n             Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },\n+            Adjust::NeverToAny if adjustment.target.is_never() => return expr,\n             Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },\n             Adjust::Deref(None) => {\n                 adjust_span(&mut expr);"}, {"sha": "35e4c24dc462b7caeb20fb5bcf694c679a39b84c", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -118,7 +118,7 @@ use rustc_middle::mir::spanview::{self, SpanViewable};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::coverage::*;\n-use rustc_middle::mir::{self, BasicBlock, TerminatorKind};\n+use rustc_middle::mir::{self, BasicBlock};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n@@ -796,36 +796,15 @@ fn bcb_to_string_sections<'tcx>(\n     }\n     let non_term_blocks = bcb_data.basic_blocks[0..len - 1]\n         .iter()\n-        .map(|&bb| format!(\"{:?}: {}\", bb, term_type(&mir_body[bb].terminator().kind)))\n+        .map(|&bb| format!(\"{:?}: {}\", bb, mir_body[bb].terminator().kind.name()))\n         .collect::<Vec<_>>();\n     if non_term_blocks.len() > 0 {\n         sections.push(non_term_blocks.join(\"\\n\"));\n     }\n     sections.push(format!(\n         \"{:?}: {}\",\n         bcb_data.basic_blocks.last().unwrap(),\n-        term_type(&bcb_data.terminator(mir_body).kind)\n+        bcb_data.terminator(mir_body).kind.name(),\n     ));\n     sections\n }\n-\n-/// Returns a simple string representation of a `TerminatorKind` variant, independent of any\n-/// values it might hold.\n-pub(super) fn term_type(kind: &TerminatorKind<'_>) -> &'static str {\n-    match kind {\n-        TerminatorKind::Goto { .. } => \"Goto\",\n-        TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n-        TerminatorKind::Resume => \"Resume\",\n-        TerminatorKind::Terminate => \"Terminate\",\n-        TerminatorKind::Return => \"Return\",\n-        TerminatorKind::Unreachable => \"Unreachable\",\n-        TerminatorKind::Drop { .. } => \"Drop\",\n-        TerminatorKind::Call { .. } => \"Call\",\n-        TerminatorKind::Assert { .. } => \"Assert\",\n-        TerminatorKind::Yield { .. } => \"Yield\",\n-        TerminatorKind::GeneratorDrop => \"GeneratorDrop\",\n-        TerminatorKind::FalseEdge { .. } => \"FalseEdge\",\n-        TerminatorKind::FalseUnwind { .. } => \"FalseUnwind\",\n-        TerminatorKind::InlineAsm { .. } => \"InlineAsm\",\n-    }\n-}"}, {"sha": "14937912cc599dc368933a256c41e8de6ad25f35", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,4 +1,3 @@\n-use super::debug::term_type;\n use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph, START_BCB};\n \n use itertools::Itertools;\n@@ -40,7 +39,7 @@ impl CoverageStatement {\n                     \"{}: @{}.{}: {:?}\",\n                     source_range_no_file(tcx, span),\n                     bb.index(),\n-                    term_type(&term.kind),\n+                    term.kind.name(),\n                     term.kind\n                 )\n             }"}, {"sha": "90b58933df7c0a3d1f8837756320498302c6cfbf", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -25,7 +25,6 @@\n //! to: `rustc_span::create_default_session_globals_then(|| { test_here(); })`.\n \n use super::counters;\n-use super::debug;\n use super::graph;\n use super::spans;\n \n@@ -188,12 +187,12 @@ fn debug_basic_blocks(mir_body: &Body<'_>) -> String {\n                     | TerminatorKind::Goto { target }\n                     | TerminatorKind::InlineAsm { destination: Some(target), .. }\n                     | TerminatorKind::Yield { resume: target, .. } => {\n-                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, debug::term_type(kind), target)\n+                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, kind.name(), target)\n                     }\n                     TerminatorKind::SwitchInt { targets, .. } => {\n-                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, debug::term_type(kind), targets)\n+                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, kind.name(), targets)\n                     }\n-                    _ => format!(\"{}{:?}:{}\", sp, bb, debug::term_type(kind)),\n+                    _ => format!(\"{}{:?}:{}\", sp, bb, kind.name()),\n                 }\n             })\n             .collect::<Vec<_>>()\n@@ -215,7 +214,7 @@ fn print_mir_graphviz(name: &str, mir_body: &Body<'_>) {\n                         \"    {:?} [label=\\\"{:?}: {}\\\"];\\n{}\",\n                         bb,\n                         bb,\n-                        debug::term_type(&data.terminator().kind),\n+                        data.terminator().kind.name(),\n                         mir_body\n                             .basic_blocks\n                             .successors(bb)\n@@ -244,7 +243,7 @@ fn print_coverage_graphviz(\n                         \"    {:?} [label=\\\"{:?}: {}\\\"];\\n{}\",\n                         bcb,\n                         bcb,\n-                        debug::term_type(&bcb_data.terminator(mir_body).kind),\n+                        bcb_data.terminator(mir_body).kind.name(),\n                         basic_coverage_blocks\n                             .successors(bcb)\n                             .map(|successor| { format!(\"    {:?} -> {:?};\", bcb, successor) })"}, {"sha": "10bd027b6848a1600da45c9f404e9a98cd08f8ba", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -306,6 +306,14 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n                 }\n             }\n+\n+            // `&[{integral}]` - `FromIterator` needs that.\n+            if let ty::Ref(_, ref_ty, rustc_ast::Mutability::Not) = self_ty.kind()\n+                && let ty::Slice(sty) = ref_ty.kind()\n+                && sty.is_integral()\n+            {\n+                flags.push((sym::_Self, Some(\"&[{integral}]\".to_owned())));\n+            }\n         });\n \n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item(self.tcx, def_id) {"}, {"sha": "5ecd0479971ea804b345f8a9585a35d5de974b73", "filename": "library/alloc/src/vec/in_place_collect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -178,7 +178,8 @@ where\n             )\n         };\n \n-        let len = SpecInPlaceCollect::collect_in_place(&mut iterator, dst_buf, dst_end);\n+        // SAFETY: `dst_buf` and `dst_end` are the start and end of the buffer.\n+        let len = unsafe { SpecInPlaceCollect::collect_in_place(&mut iterator, dst_buf, dst_end) };\n \n         let src = unsafe { iterator.as_inner().as_into_iter() };\n         // check if SourceIter contract was upheld\n@@ -239,15 +240,15 @@ trait SpecInPlaceCollect<T, I>: Iterator<Item = T> {\n     /// `Iterator::__iterator_get_unchecked` calls with a `TrustedRandomAccessNoCoerce` bound\n     /// on `I` which means the caller of this method must take the safety conditions\n     /// of that trait into consideration.\n-    fn collect_in_place(&mut self, dst: *mut T, end: *const T) -> usize;\n+    unsafe fn collect_in_place(&mut self, dst: *mut T, end: *const T) -> usize;\n }\n \n impl<T, I> SpecInPlaceCollect<T, I> for I\n where\n     I: Iterator<Item = T>,\n {\n     #[inline]\n-    default fn collect_in_place(&mut self, dst_buf: *mut T, end: *const T) -> usize {\n+    default unsafe fn collect_in_place(&mut self, dst_buf: *mut T, end: *const T) -> usize {\n         // use try-fold since\n         // - it vectorizes better for some iterator adapters\n         // - unlike most internal iteration methods, it only takes a &mut self\n@@ -265,7 +266,7 @@ where\n     I: Iterator<Item = T> + TrustedRandomAccessNoCoerce,\n {\n     #[inline]\n-    fn collect_in_place(&mut self, dst_buf: *mut T, end: *const T) -> usize {\n+    unsafe fn collect_in_place(&mut self, dst_buf: *mut T, end: *const T) -> usize {\n         let len = self.size();\n         let mut drop_guard = InPlaceDrop { inner: dst_buf, dst: dst_buf };\n         for i in 0..len {"}, {"sha": "3bbf5d8770bd2ba14bf1957e047c1e13c54098fe", "filename": "library/core/src/fmt/float.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -45,7 +45,8 @@ where\n         &mut buf,\n         &mut parts,\n     );\n-    fmt.pad_formatted_parts(&formatted)\n+    // SAFETY: `to_exact_fixed_str` and `format_exact` produce only ASCII characters.\n+    unsafe { fmt.pad_formatted_parts(&formatted) }\n }\n \n // Don't inline this so callers that call both this and the above won't wind\n@@ -71,7 +72,8 @@ where\n         &mut buf,\n         &mut parts,\n     );\n-    fmt.pad_formatted_parts(&formatted)\n+    // SAFETY: `to_shortest_str` and `format_shortest` produce only ASCII characters.\n+    unsafe { fmt.pad_formatted_parts(&formatted) }\n }\n \n fn float_to_decimal_display<T>(fmt: &mut Formatter<'_>, num: &T) -> Result\n@@ -116,7 +118,8 @@ where\n         &mut buf,\n         &mut parts,\n     );\n-    fmt.pad_formatted_parts(&formatted)\n+    // SAFETY: `to_exact_exp_str` and `format_exact` produce only ASCII characters.\n+    unsafe { fmt.pad_formatted_parts(&formatted) }\n }\n \n // Don't inline this so callers that call both this and the above won't wind\n@@ -143,7 +146,8 @@ where\n         &mut buf,\n         &mut parts,\n     );\n-    fmt.pad_formatted_parts(&formatted)\n+    // SAFETY: `to_shortest_exp_str` and `format_shortest` produce only ASCII characters.\n+    unsafe { fmt.pad_formatted_parts(&formatted) }\n }\n \n // Common code of floating point LowerExp and UpperExp."}, {"sha": "1786b309c5bd3ea77e1f5684b8b17eb334a10e83", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1415,7 +1415,11 @@ impl<'a> Formatter<'a> {\n     /// Takes the formatted parts and applies the padding.\n     /// Assumes that the caller already has rendered the parts with required precision,\n     /// so that `self.precision` can be ignored.\n-    fn pad_formatted_parts(&mut self, formatted: &numfmt::Formatted<'_>) -> Result {\n+    ///\n+    /// # Safety\n+    ///\n+    /// Any `numfmt::Part::Copy` parts in `formatted` must contain valid UTF-8.\n+    unsafe fn pad_formatted_parts(&mut self, formatted: &numfmt::Formatted<'_>) -> Result {\n         if let Some(mut width) = self.width {\n             // for the sign-aware zero padding, we render the sign first and\n             // behave as if we had no sign from the beginning.\n@@ -1438,31 +1442,35 @@ impl<'a> Formatter<'a> {\n             let len = formatted.len();\n             let ret = if width <= len {\n                 // no padding\n-                self.write_formatted_parts(&formatted)\n+                // SAFETY: Per the precondition.\n+                unsafe { self.write_formatted_parts(&formatted) }\n             } else {\n                 let post_padding = self.padding(width - len, Alignment::Right)?;\n-                self.write_formatted_parts(&formatted)?;\n+                // SAFETY: Per the precondition.\n+                unsafe {\n+                    self.write_formatted_parts(&formatted)?;\n+                }\n                 post_padding.write(self)\n             };\n             self.fill = old_fill;\n             self.align = old_align;\n             ret\n         } else {\n             // this is the common case and we take a shortcut\n-            self.write_formatted_parts(formatted)\n+            // SAFETY: Per the precondition.\n+            unsafe { self.write_formatted_parts(formatted) }\n         }\n     }\n \n-    fn write_formatted_parts(&mut self, formatted: &numfmt::Formatted<'_>) -> Result {\n-        fn write_bytes(buf: &mut dyn Write, s: &[u8]) -> Result {\n+    /// # Safety\n+    ///\n+    /// Any `numfmt::Part::Copy` parts in `formatted` must contain valid UTF-8.\n+    unsafe fn write_formatted_parts(&mut self, formatted: &numfmt::Formatted<'_>) -> Result {\n+        unsafe fn write_bytes(buf: &mut dyn Write, s: &[u8]) -> Result {\n             // SAFETY: This is used for `numfmt::Part::Num` and `numfmt::Part::Copy`.\n             // It's safe to use for `numfmt::Part::Num` since every char `c` is between\n-            // `b'0'` and `b'9'`, which means `s` is valid UTF-8.\n-            // It's also probably safe in practice to use for `numfmt::Part::Copy(buf)`\n-            // since `buf` should be plain ASCII, but it's possible for someone to pass\n-            // in a bad value for `buf` into `numfmt::to_shortest_str` since it is a\n-            // public function.\n-            // FIXME: Determine whether this could result in UB.\n+            // `b'0'` and `b'9'`, which means `s` is valid UTF-8. It's safe to use for\n+            // `numfmt::Part::Copy` due to this function's precondition.\n             buf.write_str(unsafe { str::from_utf8_unchecked(s) })\n         }\n \n@@ -1489,11 +1497,15 @@ impl<'a> Formatter<'a> {\n                         *c = b'0' + (v % 10) as u8;\n                         v /= 10;\n                     }\n-                    write_bytes(self.buf, &s[..len])?;\n+                    // SAFETY: Per the precondition.\n+                    unsafe {\n+                        write_bytes(self.buf, &s[..len])?;\n+                    }\n                 }\n-                numfmt::Part::Copy(buf) => {\n+                // SAFETY: Per the precondition.\n+                numfmt::Part::Copy(buf) => unsafe {\n                     write_bytes(self.buf, buf)?;\n-                }\n+                },\n             }\n         }\n         Ok(())"}, {"sha": "4f42f73ebbaffd73cbf5f7f3c9f16bc98f1fea19", "filename": "library/core/src/fmt/num.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -52,8 +52,12 @@ impl_int! { i8 i16 i32 i64 i128 isize }\n impl_uint! { u8 u16 u32 u64 u128 usize }\n \n /// A type that represents a specific radix\n+///\n+/// # Safety\n+///\n+/// `digit` must return an ASCII character.\n #[doc(hidden)]\n-trait GenericRadix: Sized {\n+unsafe trait GenericRadix: Sized {\n     /// The number of digits.\n     const BASE: u8;\n \n@@ -129,7 +133,7 @@ struct UpperHex;\n \n macro_rules! radix {\n     ($T:ident, $base:expr, $prefix:expr, $($x:pat => $conv:expr),+) => {\n-        impl GenericRadix for $T {\n+        unsafe impl GenericRadix for $T {\n             const BASE: u8 = $base;\n             const PREFIX: &'static str = $prefix;\n             fn digit(x: u8) -> u8 {\n@@ -407,7 +411,7 @@ macro_rules! impl_Exp {\n             let parts = &[\n                 numfmt::Part::Copy(buf_slice),\n                 numfmt::Part::Zero(added_precision),\n-                numfmt::Part::Copy(exp_slice)\n+                numfmt::Part::Copy(exp_slice),\n             ];\n             let sign = if !is_nonnegative {\n                 \"-\"\n@@ -416,8 +420,9 @@ macro_rules! impl_Exp {\n             } else {\n                 \"\"\n             };\n-            let formatted = numfmt::Formatted{sign, parts};\n-            f.pad_formatted_parts(&formatted)\n+            let formatted = numfmt::Formatted { sign, parts };\n+            // SAFETY: `buf_slice` and `exp_slice` contain only ASCII characters.\n+            unsafe { f.pad_formatted_parts(&formatted) }\n         }\n \n         $("}, {"sha": "0675e56358f9bd76b9cedaa9d875c1ef6f0837c6", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -94,6 +94,16 @@\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n+    on(\n+        _Self = \"&[{A}]\",\n+        message = \"a slice of type `{Self}` cannot be built since we need to store the elements somewhere\",\n+        label = \"try explicitly collecting into a `Vec<{A}>`\",\n+    ),\n+    on(\n+        all(A = \"{integer}\", any(_Self = \"&[{integral}]\",)),\n+        message = \"a slice of type `{Self}` cannot be built since we need to store the elements somewhere\",\n+        label = \"try explicitly collecting into a `Vec<{A}>`\",\n+    ),\n     on(\n         _Self = \"[{A}]\",\n         message = \"a slice of type `{Self}` cannot be built since `{Self}` has no definite size\","}, {"sha": "afbfd6d362dc9c2d7092bcf445efb37ef6669751", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -968,7 +968,7 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// Integers and other types implementing [`Copy`] are unaffected by `drop`.\n ///\n /// ```\n-/// # #![cfg_attr(not(bootstrap), allow(drop_copy))]\n+/// # #![cfg_attr(not(bootstrap), allow(dropping_copy_types))]\n /// #[derive(Copy, Clone)]\n /// struct Foo(u8);\n ///"}, {"sha": "febdeb514634cd5c5edc12554f30606705b6d35c", "filename": "library/std/src/path.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -733,8 +733,9 @@ impl<'a> Components<'a> {\n         }\n     }\n \n-    // parse a given byte sequence into the corresponding path component\n-    fn parse_single_component<'b>(&self, comp: &'b [u8]) -> Option<Component<'b>> {\n+    // parse a given byte sequence following the OsStr encoding into the\n+    // corresponding path component\n+    unsafe fn parse_single_component<'b>(&self, comp: &'b [u8]) -> Option<Component<'b>> {\n         match comp {\n             b\".\" if self.prefix_verbatim() => Some(Component::CurDir),\n             b\".\" => None, // . components are normalized away, except at\n@@ -754,7 +755,8 @@ impl<'a> Components<'a> {\n             None => (0, self.path),\n             Some(i) => (1, &self.path[..i]),\n         };\n-        (comp.len() + extra, self.parse_single_component(comp))\n+        // SAFETY: `comp` is a valid substring, since it is split on a separator.\n+        (comp.len() + extra, unsafe { self.parse_single_component(comp) })\n     }\n \n     // parse a component from the right, saying how many bytes to consume to\n@@ -766,7 +768,8 @@ impl<'a> Components<'a> {\n             None => (0, &self.path[start..]),\n             Some(i) => (1, &self.path[start + i + 1..]),\n         };\n-        (comp.len() + extra, self.parse_single_component(comp))\n+        // SAFETY: `comp` is a valid substring, since it is split on a separator.\n+        (comp.len() + extra, unsafe { self.parse_single_component(comp) })\n     }\n \n     // trim away repeated separators (i.e., empty components) on the left"}, {"sha": "806935b827ff55b1395d32406839fdb78753dd88", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1 +1 @@\n-0.16.3\n\\ No newline at end of file\n+0.16.4\n\\ No newline at end of file"}, {"sha": "9c60edb179415b62140008d8f9f60e4347d1fc4d", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                // early return for uplifted lints: drop_ref, drop_copy, forget_ref, forget_copy\n+                // early return for uplifted lints: dropping_references, dropping_copy_types, forgetting_references, forgetting_copy_types\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => return,\n                 sym::mem_forget if arg_ty.is_ref() => return,\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => return,"}, {"sha": "b0db56bb417ea37a6d2fb04413ade1ebe686ed6a", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -33,13 +33,13 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n-    (\"clippy::drop_copy\", \"drop_copy\"),\n-    (\"clippy::drop_ref\", \"drop_ref\"),\n+    (\"clippy::drop_copy\", \"dropping_copy_types\"),\n+    (\"clippy::drop_ref\", \"dropping_references\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n-    (\"clippy::forget_copy\", \"forget_copy\"),\n-    (\"clippy::forget_ref\", \"forget_ref\"),\n+    (\"clippy::forget_copy\", \"forgetting_copy_types\"),\n+    (\"clippy::forget_ref\", \"forgetting_references\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),"}, {"sha": "edb9d87d032ec9e7bb6958e08983bb30adff5891", "filename": "src/tools/clippy/tests/ui/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -5,7 +5,7 @@ use std::mem as memstuff;\n use std::mem::forget as forgetSomething;\n \n #[warn(clippy::mem_forget)]\n-#[allow(forget_copy)]\n+#[allow(forgetting_copy_types)]\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);"}, {"sha": "4ef6f0ca92f2dae22939a1ab32a22efa426b1908", "filename": "src/tools/clippy/tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n extern crate proc_macros;"}, {"sha": "dfe45dec8a7456f33b7f70bcb4f1c0260a31d27c", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -30,11 +30,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n-#![allow(drop_copy)]\n-#![allow(drop_ref)]\n+#![allow(dropping_copy_types)]\n+#![allow(dropping_references)]\n #![allow(for_loops_over_fallibles)]\n-#![allow(forget_copy)]\n-#![allow(forget_ref)]\n+#![allow(forgetting_copy_types)]\n+#![allow(forgetting_references)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n@@ -77,13 +77,13 @@\n #![warn(clippy::invisible_characters)]\n #![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n-#![warn(drop_copy)]\n-#![warn(drop_ref)]\n+#![warn(dropping_copy_types)]\n+#![warn(dropping_references)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n-#![warn(forget_copy)]\n-#![warn(forget_ref)]\n+#![warn(forgetting_copy_types)]\n+#![warn(forgetting_references)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]"}, {"sha": "ce8eca5a3081c8959f027c105ea89651614c55f3", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -30,11 +30,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n-#![allow(drop_copy)]\n-#![allow(drop_ref)]\n+#![allow(dropping_copy_types)]\n+#![allow(dropping_references)]\n #![allow(for_loops_over_fallibles)]\n-#![allow(forget_copy)]\n-#![allow(forget_ref)]\n+#![allow(forgetting_copy_types)]\n+#![allow(forgetting_references)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]"}, {"sha": "3fca60aa2ebd33baaa438e14b3e2f371805fc6ec", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -186,17 +186,17 @@ error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n-error: lint `clippy::drop_copy` has been renamed to `drop_copy`\n+error: lint `clippy::drop_copy` has been renamed to `dropping_copy_types`\n   --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::drop_copy)]\n-   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `drop_copy`\n+   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `dropping_copy_types`\n \n-error: lint `clippy::drop_ref` has been renamed to `drop_ref`\n+error: lint `clippy::drop_ref` has been renamed to `dropping_references`\n   --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::drop_ref)]\n-   |         ^^^^^^^^^^^^^^^^ help: use the new name: `drop_ref`\n+   |         ^^^^^^^^^^^^^^^^ help: use the new name: `dropping_references`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:82:9\n@@ -216,17 +216,17 @@ error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_ov\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n-error: lint `clippy::forget_copy` has been renamed to `forget_copy`\n+error: lint `clippy::forget_copy` has been renamed to `forgetting_copy_types`\n   --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::forget_copy)]\n-   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_copy`\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_copy_types`\n \n-error: lint `clippy::forget_ref` has been renamed to `forget_ref`\n+error: lint `clippy::forget_ref` has been renamed to `forgetting_references`\n   --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::forget_ref)]\n-   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_ref`\n+   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_references`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n   --> $DIR/rename.rs:87:9"}, {"sha": "fd082e367a83a07acf6706b30ead7d3d20345715", "filename": "src/tools/miri/tests/fail/never_say_never.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -6,10 +6,8 @@\n \n fn main() {\n     let y = &5;\n-    let x: ! = unsafe {\n-        *(y as *const _ as *const !) //~ ERROR: entering unreachable code\n-    };\n-    f(x)\n+    let x: ! = unsafe { *(y as *const _ as *const !) };\n+    f(x) //~ ERROR: entering unreachable code\n }\n \n fn f(x: !) -> ! {"}, {"sha": "9d3a8df525a49178bc6bfd6a1bcc52524b4e187f", "filename": "src/tools/miri/tests/fail/never_say_never.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.stderr?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: entering unreachable code\n   --> $DIR/never_say_never.rs:LL:CC\n    |\n-LL |         *(y as *const _ as *const !)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n+LL |     f(x)\n+   |     ^^^^ entering unreachable code\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "a5a1930ed65bb5304172dd6d162f57ed2ab1431e", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,4 +1,4 @@\n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n fn main() {\n     let target = &mut 42;"}, {"sha": "d622b2fa7d81207576d4b5dda90548f7beb254e7", "filename": "src/tools/miri/tests/fail/uninit_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x10]\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;"}, {"sha": "ca825901372c5eb05b5d6ea1e80297ea1ce7a89b", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x8]\n //@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n #![feature(strict_provenance)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // Test printing allocations that contain single-byte provenance.\n "}, {"sha": "6e13a9ea8369bdd7124cbfcb1ff8cd0ade8b4ce7", "filename": "src/tools/miri/tests/pass/stacked-borrows/zst-field-retagging-terminates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n //@compile-flags: -Zmiri-retag-fields\n // Checks that the test does not run forever (which relies on a fast path).\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n fn main() {\n     let array = [(); usize::MAX];"}, {"sha": "5258d75bdf78635ce0dab443f7a3bbf8b502b900", "filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.32bit.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,24 +3,20 @@\n   \n   fn unreachable_box() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _2 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _1 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: Box<Never>, val: Value(Scalar(0x00000001)) }\n-          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "7e57e06a5cf8b136531e06f4cca4c75cd93cf500", "filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.64bit.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,24 +3,20 @@\n   \n   fn unreachable_box() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _2 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _1 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: Box<Never>, val: Value(Scalar(0x0000000000000001)) }\n-          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "032681f230ba64d3912d1b327282bb74fb330cc7", "filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.32bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,22 +3,19 @@\n   \n   fn unreachable_direct() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:39: +0:40\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:41: +3:2\n-      let _2: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n-      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:15\n+      let _1: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:41: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _3 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _2 = move _3 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _2 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _1 = move _2 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n           unreachable;                     // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n       }\n   }"}, {"sha": "032681f230ba64d3912d1b327282bb74fb330cc7", "filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.64bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,22 +3,19 @@\n   \n   fn unreachable_direct() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:39: +0:40\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:41: +3:2\n-      let _2: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n-      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:15\n+      let _1: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:41: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _3 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _2 = move _3 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _2 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _1 = move _2 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n           unreachable;                     // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n       }\n   }"}, {"sha": "ec8a62bd62cd6efb073d9a7be3e5459928439baa", "filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.32bit.diff", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,28 +3,24 @@\n   \n   fn unreachable_mut() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _2: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n--         _3 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _3 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+-         _2 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _2 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: &mut Never, val: Value(Scalar(0x00000001)) }\n-          _2 = &mut (*_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-          StorageDead(_3);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n-          StorageLive(_4);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          _1 = &mut (*_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageDead(_2);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "288da6e56c53c43750f17e3297e98f7cd1195b23", "filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.64bit.diff", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,28 +3,24 @@\n   \n   fn unreachable_mut() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _2: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n--         _3 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _3 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+-         _2 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n++         _2 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: &mut Never, val: Value(Scalar(0x0000000000000001)) }\n-          _2 = &mut (*_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-          StorageDead(_3);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n-          StorageLive(_4);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          _1 = &mut (*_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageDead(_2);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "dcca0fca619b0a89f7d8366f4a98bebe99c01682", "filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.32bit.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,24 +3,20 @@\n   \n   fn unreachable_ref() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _2 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n-+         _2 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _1 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n++         _1 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: &Never, val: Value(Scalar(0x00000001)) }\n-          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "3a0b967e66f1ad7097c8a2018f567d211fe2bcdd", "filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.64bit.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,24 +3,20 @@\n   \n   fn unreachable_ref() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-      let _2: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      let _1: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _2 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n-+         _2 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+-         _1 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n++         _1 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: &Never, val: Value(Scalar(0x0000000000000001)) }\n-          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "25f472251137d95fe71e4556d76da7e69df8cf2d", "filename": "tests/mir-opt/issue_72181_1.f.built.after.mir", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_72181_1.f.built.after.mir?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,27 +3,13 @@\n fn f(_1: Void) -> ! {\n     debug v => _1;                       // in scope 0 at $DIR/issue_72181_1.rs:+0:6: +0:7\n     let mut _0: !;                       // return place in scope 0 at $DIR/issue_72181_1.rs:+0:18: +0:19\n-    let mut _2: !;                       // in scope 0 at $DIR/issue_72181_1.rs:+0:20: +2:2\n-    let mut _3: !;                       // in scope 0 at $DIR/issue_72181_1.rs:+1:5: +1:15\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue_72181_1.rs:+0:20: +2:2\n-        StorageLive(_3);                 // scope 0 at $DIR/issue_72181_1.rs:+1:5: +1:15\n         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/issue_72181_1.rs:+1:11: +1:12\n         unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+1:11: +1:12\n     }\n \n     bb1: {\n-        unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+1:5: +1:15\n-    }\n-\n-    bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue_72181_1.rs:+1:14: +1:15\n-        unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+0:20: +2:2\n-    }\n-\n-    bb3: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue_72181_1.rs:+2:1: +2:2\n         return;                          // scope 0 at $DIR/issue_72181_1.rs:+2:2: +2:2\n     }\n }"}, {"sha": "aa5d9619d10a9bdac318fc443b2f08b160f47b92", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,26 +3,22 @@\n   \n   fn transmute_to_box_uninhabited() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50\n-      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-      let _2: std::boxed::Box<Never>;      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+      let _1: std::boxed::Box<Never>;      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, Box<Never>>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+-         _1 = transmute::<usize, Box<Never>>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:70:25: 70:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> Box<Never> {transmute::<usize, Box<Never>>}, val: Value(<ZST>) }\n-+         _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n++         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n       }\n   \n       bb1: {\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "5fafd45fe85263a1d570d28116dc6bcd3527cc6b", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,26 +3,22 @@\n   \n   fn transmute_to_mut_uninhabited() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50\n-      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-      let _2: &mut Never;                  // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+      let _1: &mut Never;                  // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, &mut Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+-         _1 = transmute::<usize, &mut Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:64:25: 64:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &mut Never {transmute::<usize, &mut Never>}, val: Value(<ZST>) }\n-+         _2 = const 1_usize as &mut Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n++         _1 = const 1_usize as &mut Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n       }\n   \n       bb1: {\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "08dead13211947021accdb6691f6cfb05f6bee27", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,26 +3,22 @@\n   \n   fn transmute_to_ref_uninhabited() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50\n-      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-      let _2: &Never;                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n-      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+      let _1: &Never;                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, &Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+-         _1 = transmute::<usize, &Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:58:21: 58:40\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &Never {transmute::<usize, &Never>}, val: Value(<ZST>) }\n-+         _2 = const 1_usize as &Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n++         _1 = const 1_usize as &Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n       }\n   \n       bb1: {\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n           unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13\n       }\n   }"}, {"sha": "28e45909c3372213590a5a0c33ba031de48fb9b3", "filename": "tests/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,16 +3,15 @@\n   \n   fn unreachable() -> ! {\n       let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:25: +0:26\n-      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:27: +2:2\n-      let _2: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n-      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+      let _1: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+      let mut _2: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:47\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n--         _3 = std::intrinsics::unreachable() -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:47\n+          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+-         _2 = std::intrinsics::unreachable() -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:31:14: 31:43\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(<ZST>) }"}, {"sha": "0052d18dc560d9be4a66a4d9050861b0d3ab1a28", "filename": "tests/rustdoc-gui/scrape-examples-color.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Frustdoc-gui%2Fscrape-examples-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Frustdoc-gui%2Fscrape-examples-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fscrape-examples-color.goml?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -81,16 +81,16 @@ define-function: (\n \n call-function: (\"check-background\", {\n     \"theme\": \"ayu\",\n-    \"background_color_start\": \"rgb(15, 20, 25)\",\n+    \"background_color_start\": \"rgba(15, 20, 25, 1)\",\n     \"background_color_end\": \"rgba(15, 20, 25, 0)\",\n })\n call-function: (\"check-background\", {\n     \"theme\": \"dark\",\n-    \"background_color_start\": \"rgb(53, 53, 53)\",\n+    \"background_color_start\": \"rgba(53, 53, 53, 1)\",\n     \"background_color_end\": \"rgba(53, 53, 53, 0)\",\n })\n call-function: (\"check-background\", {\n     \"theme\": \"light\",\n-    \"background_color_start\": \"rgb(255, 255, 255)\",\n+    \"background_color_start\": \"rgba(255, 255, 255, 1)\",\n     \"background_color_end\": \"rgba(255, 255, 255, 0)\",\n })"}, {"sha": "ebd8e1d55945f9bea073c9e71519b14898824086", "filename": "tests/ui/associated-inherent-types/inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Finference.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,7 +3,7 @@\n \n #![feature(inherent_associated_types)]\n #![allow(incomplete_features)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::convert::identity;\n "}, {"sha": "60128c9419d11e52e55b0f9b48fbe8bb8d209fcc", "filename": "tests/ui/borrowck/borrowck-closures-slice-patterns-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n // Check that closure captures for slice patterns are inferred correctly\n \n #![allow(unused_variables)]\n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n // run-pass\n "}, {"sha": "78e965cc4bc7b577ee3513301d5aa191e389df14", "filename": "tests/ui/borrowck/borrowck-field-sensitivity-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(unused_mut)]\n #![allow(unused_variables)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n // pretty-expanded FIXME #23616\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "9acb1ec5e43a68ff52945fc9c46cf220c1dfc970", "filename": "tests/ui/borrowck/borrowck-use-mut-borrow-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n struct A { a: isize, b: Box<isize> }\n "}, {"sha": "98f8d5d473380adbbc72c40f72cf36447d804cfe", "filename": "tests/ui/closures/2229_closure_analysis/migrations/issue-78720.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![warn(rust_2021_incompatible_closure_captures)]\n-#![allow(drop_ref, drop_copy)]\n+#![allow(dropping_references, dropping_copy_types)]\n \n fn main() {\n     if let a = \"\" {"}, {"sha": "5496d0e5fc7e3f1236b381d00ec58fbd54e686e9", "filename": "tests/ui/closures/2229_closure_analysis/optimization/edge_case_run_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,7 +3,7 @@\n \n #![allow(unused)]\n #![allow(dead_code)]\n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Int(i32);\n struct B<'a>(&'a i32);"}, {"sha": "b5e97ec1c1b8dc191cbb27612dcf59d2aaab4ff2", "filename": "tests/ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -2,7 +2,7 @@\n // check-pass\n \n #![feature(rustc_attrs)]\n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n fn main() {\n     let mut x = 1;"}, {"sha": "f06149f2cb9947799d461e291980ef96ed2fd496", "filename": "tests/ui/consts/const_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fconsts%2Fconst_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fconsts%2Fconst_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_forget.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![allow(forget_copy)]\n+#![allow(forgetting_copy_types)]\n \n use std::mem::forget;\n "}, {"sha": "7b375dc05667532ab354dc7e3646c59d6f85db7f", "filename": "tests/ui/consts/issue-104155.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fconsts%2Fissue-104155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fconsts%2Fissue-104155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-104155.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![allow(forget_copy)]\n+#![allow(forgetting_copy_types)]\n \n const _: () = core::mem::forget(Box::<u32>::default);\n const _: () = core::mem::forget(|| Box::<u32>::default());"}, {"sha": "fce97d9ba2370ddbc859b666f4181bf0cf661bce", "filename": "tests/ui/crate-leading-sep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fcrate-leading-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fcrate-leading-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate-leading-sep.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n fn main() {\n     use ::std::mem;"}, {"sha": "0afb4bb11bc89ec4c40fd3f6222fcd1401737afe", "filename": "tests/ui/drop/repeat-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Frepeat-drop.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // needs-unwind\n \n-#![allow(drop_ref, drop_copy)]\n+#![allow(dropping_references, dropping_copy_types)]\n \n static mut CHECK: usize = 0;\n "}, {"sha": "bb093a4af4a3eec242a5f37de416199c0417b988", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Foo {\n     x: isize"}, {"sha": "1a9f89c054f396bfecde674c5447a1796846db5a", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Foo {\n     x: isize"}, {"sha": "137a407931a1761fdf537afd28add1c82d305ad9", "filename": "tests/ui/generator/drop-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-env.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -4,7 +4,7 @@\n //[nomiropt]compile-flags: -Z mir-opt-level=0\n \n #![feature(generators, generator_trait)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::ops::Generator;\n use std::pin::Pin;"}, {"sha": "381897c77a5c35822809cae1f1e011728ef3a88c", "filename": "tests/ui/generator/issue-57017.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -5,7 +5,7 @@\n // [drop_tracking_mir] build-pass\n \n #![feature(generators, negative_impls)]\n-#![allow(drop_ref, drop_copy)]\n+#![allow(dropping_references, dropping_copy_types)]\n \n macro_rules! type_combinations {\n     ("}, {"sha": "a5dde3912cc00efb54f2952971a5a5beadf3c5fd", "filename": "tests/ui/generator/non-static-is-unpin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n \n #![feature(generators, generator_trait)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::marker::{PhantomPinned, Unpin};\n "}, {"sha": "195166f975b638dc0352f87f7279cd3f36537829", "filename": "tests/ui/generator/resume-arg-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,5 +1,5 @@\n #![feature(generators)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // run-pass\n "}, {"sha": "721bb7281c0ffee5eddcbcc46a4b9bbf76651fb7", "filename": "tests/ui/hygiene/stdlib-prelude-from-opaque-late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(decl_macro)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n macro mac() {\n     mod m {"}, {"sha": "c088c82791b4dd35fd4d5f94054c3ce953a36e09", "filename": "tests/ui/illegal-ufcs-drop.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fillegal-ufcs-drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fillegal-ufcs-drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.fixed?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Foo;\n "}, {"sha": "1389b112188657578e699c1a9fe5a995002787f0", "filename": "tests/ui/illegal-ufcs-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fillegal-ufcs-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fillegal-ufcs-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Foo;\n "}, {"sha": "045d40a6f71ae61b22cb0a53fd82e51bd674a850", "filename": "tests/ui/iterators/collect-into-slice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fiterators%2Fcollect-into-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fiterators%2Fcollect-into-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Fcollect-into-slice.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -14,4 +14,10 @@ fn main() {\n     //~| NOTE doesn't have a size known at compile-time\n     //~| NOTE doesn't have a size known at compile-time\n     process_slice(&some_generated_vec);\n+\n+    let some_generated_vec = (0..10).collect();\n+    //~^ ERROR a slice of type `&[i32]` cannot be built since we need to store the elements somewhere\n+    //~| NOTE try explicitly collecting into a `Vec<{integer}>`\n+    //~| NOTE required by a bound in `collect`\n+    process_slice(some_generated_vec);\n }"}, {"sha": "07dc561f06a690009a37fac5e6e547fc77e78f6b", "filename": "tests/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -28,6 +28,16 @@ LL |     let some_generated_vec = (0..10).collect();\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n-error: aborting due to 3 previous errors\n+error[E0277]: a slice of type `&[i32]` cannot be built since we need to store the elements somewhere\n+  --> $DIR/collect-into-slice.rs:18:38\n+   |\n+LL |     let some_generated_vec = (0..10).collect();\n+   |                                      ^^^^^^^ try explicitly collecting into a `Vec<{integer}>`\n+   |\n+   = help: the trait `FromIterator<{integer}>` is not implemented for `&[i32]`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "2937320e5d833b05776b2ed0e0103a2369191803", "filename": "tests/ui/lint/dropping_copy_types.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fdropping_copy_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fdropping_copy_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_copy_types.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(drop_copy)]\n+#![warn(dropping_copy_types)]\n \n use std::mem::drop;\n use std::vec::Vec;", "previous_filename": "tests/ui/lint/drop_copy.rs"}, {"sha": "b6291aa5ed6346680c8574d974039c78e8a05095", "filename": "tests/ui/lint/dropping_copy_types.stderr", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fdropping_copy_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fdropping_copy_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_copy_types.stderr?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:34:5\n+  --> $DIR/dropping_copy_types.rs:34:5\n    |\n LL |     drop(s1);\n    |     ^^^^^--^\n@@ -8,13 +8,13 @@ LL |     drop(s1);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/drop_copy.rs:3:9\n+  --> $DIR/dropping_copy_types.rs:3:9\n    |\n-LL | #![warn(drop_copy)]\n-   |         ^^^^^^^^^\n+LL | #![warn(dropping_copy_types)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:35:5\n+  --> $DIR/dropping_copy_types.rs:35:5\n    |\n LL |     drop(s2);\n    |     ^^^^^--^\n@@ -24,18 +24,18 @@ LL |     drop(s2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:36:5\n+  --> $DIR/dropping_copy_types.rs:36:5\n    |\n LL |     drop(s3);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `&SomeStruct`\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n-   = note: `#[warn(drop_ref)]` on by default\n+   = note: `#[warn(dropping_references)]` on by default\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:37:5\n+  --> $DIR/dropping_copy_types.rs:37:5\n    |\n LL |     drop(s4);\n    |     ^^^^^--^\n@@ -45,7 +45,7 @@ LL |     drop(s4);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:38:5\n+  --> $DIR/dropping_copy_types.rs:38:5\n    |\n LL |     drop(s5);\n    |     ^^^^^--^\n@@ -55,7 +55,7 @@ LL |     drop(s5);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:50:5\n+  --> $DIR/dropping_copy_types.rs:50:5\n    |\n LL |     drop(a2);\n    |     ^^^^^--^\n@@ -65,7 +65,7 @@ LL |     drop(a2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:52:5\n+  --> $DIR/dropping_copy_types.rs:52:5\n    |\n LL |     drop(a4);\n    |     ^^^^^--^\n@@ -75,7 +75,7 @@ LL |     drop(a4);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:71:13\n+  --> $DIR/dropping_copy_types.rs:71:13\n    |\n LL |             drop(println_and(13));\n    |             ^^^^^---------------^\n@@ -85,7 +85,7 @@ LL |             drop(println_and(13));\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:74:14\n+  --> $DIR/dropping_copy_types.rs:74:14\n    |\n LL |         3 if drop(println_and(14)) == () => (),\n    |              ^^^^^---------------^\n@@ -95,7 +95,7 @@ LL |         3 if drop(println_and(14)) == () => (),\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:76:14\n+  --> $DIR/dropping_copy_types.rs:76:14\n    |\n LL |         4 => drop(2),\n    |              ^^^^^-^", "previous_filename": "tests/ui/lint/drop_copy.stderr"}, {"sha": "0d5d484f4517fae6b02abf9b1e42329a5339eedb", "filename": "tests/ui/lint/dropping_references.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fdropping_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fdropping_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_references.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(drop_ref)]\n+#![warn(dropping_references)]\n \n struct SomeStruct;\n ", "previous_filename": "tests/ui/lint/drop_ref.rs"}, {"sha": "7e25a46216ecf013c8696765f1e232fa944a2728", "filename": "tests/ui/lint/dropping_references.stderr", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fdropping_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fdropping_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_references.stderr?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:8:5\n+  --> $DIR/dropping_references.rs:8:5\n    |\n LL |     drop(&SomeStruct);\n    |     ^^^^^-----------^\n@@ -8,13 +8,13 @@ LL |     drop(&SomeStruct);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/drop_ref.rs:3:9\n+  --> $DIR/dropping_references.rs:3:9\n    |\n-LL | #![warn(drop_ref)]\n-   |         ^^^^^^^^\n+LL | #![warn(dropping_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:11:5\n+  --> $DIR/dropping_references.rs:11:5\n    |\n LL |     drop(&owned1);\n    |     ^^^^^-------^\n@@ -24,7 +24,7 @@ LL |     drop(&owned1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:12:5\n+  --> $DIR/dropping_references.rs:12:5\n    |\n LL |     drop(&&owned1);\n    |     ^^^^^--------^\n@@ -34,7 +34,7 @@ LL |     drop(&&owned1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:13:5\n+  --> $DIR/dropping_references.rs:13:5\n    |\n LL |     drop(&mut owned1);\n    |     ^^^^^-----------^\n@@ -44,7 +44,7 @@ LL |     drop(&mut owned1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:17:5\n+  --> $DIR/dropping_references.rs:17:5\n    |\n LL |     drop(reference1);\n    |     ^^^^^----------^\n@@ -54,7 +54,7 @@ LL |     drop(reference1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:20:5\n+  --> $DIR/dropping_references.rs:20:5\n    |\n LL |     drop(reference2);\n    |     ^^^^^----------^\n@@ -64,7 +64,7 @@ LL |     drop(reference2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:23:5\n+  --> $DIR/dropping_references.rs:23:5\n    |\n LL |     drop(reference3);\n    |     ^^^^^----------^\n@@ -74,7 +74,7 @@ LL |     drop(reference3);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:28:5\n+  --> $DIR/dropping_references.rs:28:5\n    |\n LL |     drop(&val);\n    |     ^^^^^----^\n@@ -84,7 +84,7 @@ LL |     drop(&val);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:36:5\n+  --> $DIR/dropping_references.rs:36:5\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^-----------^\n@@ -94,7 +94,7 @@ LL |     std::mem::drop(&SomeStruct);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:91:13\n+  --> $DIR/dropping_references.rs:91:13\n    |\n LL |             drop(println_and(&13));\n    |             ^^^^^----------------^\n@@ -104,7 +104,7 @@ LL |             drop(println_and(&13));\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:94:14\n+  --> $DIR/dropping_references.rs:94:14\n    |\n LL |         3 if drop(println_and(&14)) == () => (),\n    |              ^^^^^----------------^\n@@ -114,7 +114,7 @@ LL |         3 if drop(println_and(&14)) == () => (),\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:96:14\n+  --> $DIR/dropping_references.rs:96:14\n    |\n LL |         4 => drop(&2),\n    |              ^^^^^--^", "previous_filename": "tests/ui/lint/drop_ref.stderr"}, {"sha": "224c7bcd5f63e765a0eee74ff3e18e6ab0677096", "filename": "tests/ui/lint/forgetting_copy_types.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fforgetting_copy_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fforgetting_copy_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_copy_types.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(forget_copy)]\n+#![warn(forgetting_copy_types)]\n \n use std::mem::forget;\n use std::vec::Vec;", "previous_filename": "tests/ui/lint/forget_copy.rs"}, {"sha": "36d1ef5c53e930fcd8cb0dbc05b0bc1dc02cd76e", "filename": "tests/ui/lint/forgetting_copy_types.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fforgetting_copy_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fforgetting_copy_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_copy_types.stderr?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n-  --> $DIR/forget_copy.rs:34:5\n+  --> $DIR/forgetting_copy_types.rs:34:5\n    |\n LL |     forget(s1);\n    |     ^^^^^^^--^\n@@ -8,13 +8,13 @@ LL |     forget(s1);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/forget_copy.rs:3:9\n+  --> $DIR/forgetting_copy_types.rs:3:9\n    |\n-LL | #![warn(forget_copy)]\n-   |         ^^^^^^^^^^^\n+LL | #![warn(forgetting_copy_types)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n-  --> $DIR/forget_copy.rs:35:5\n+  --> $DIR/forgetting_copy_types.rs:35:5\n    |\n LL |     forget(s2);\n    |     ^^^^^^^--^\n@@ -24,18 +24,18 @@ LL |     forget(s2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:36:5\n+  --> $DIR/forgetting_copy_types.rs:36:5\n    |\n LL |     forget(s3);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `&SomeStruct`\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n-   = note: `#[warn(forget_ref)]` on by default\n+   = note: `#[warn(forgetting_references)]` on by default\n \n warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n-  --> $DIR/forget_copy.rs:37:5\n+  --> $DIR/forgetting_copy_types.rs:37:5\n    |\n LL |     forget(s4);\n    |     ^^^^^^^--^\n@@ -45,7 +45,7 @@ LL |     forget(s4);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:38:5\n+  --> $DIR/forgetting_copy_types.rs:38:5\n    |\n LL |     forget(s5);\n    |     ^^^^^^^--^\n@@ -55,7 +55,7 @@ LL |     forget(s5);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:50:5\n+  --> $DIR/forgetting_copy_types.rs:50:5\n    |\n LL |     forget(a2);\n    |     ^^^^^^^--^\n@@ -65,7 +65,7 @@ LL |     forget(a2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:52:5\n+  --> $DIR/forgetting_copy_types.rs:52:5\n    |\n LL |     forget(a3);\n    |     ^^^^^^^--^\n@@ -75,7 +75,7 @@ LL |     forget(a3);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:53:5\n+  --> $DIR/forgetting_copy_types.rs:53:5\n    |\n LL |     forget(a4);\n    |     ^^^^^^^--^", "previous_filename": "tests/ui/lint/forget_copy.stderr"}, {"sha": "bd51e98003159df98c4bddd9867118f283aa5509", "filename": "tests/ui/lint/forgetting_references.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fforgetting_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fforgetting_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_references.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(forget_ref)]\n+#![warn(forgetting_references)]\n \n use std::mem::forget;\n ", "previous_filename": "tests/ui/lint/forget_ref.rs"}, {"sha": "5624b690789f88d257cff55a16a3ad5b05fcd4c9", "filename": "tests/ui/lint/forgetting_references.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fforgetting_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Flint%2Fforgetting_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_references.stderr?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:10:5\n+  --> $DIR/forgetting_references.rs:10:5\n    |\n LL |     forget(&SomeStruct);\n    |     ^^^^^^^-----------^\n@@ -8,13 +8,13 @@ LL |     forget(&SomeStruct);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/forget_ref.rs:3:9\n+  --> $DIR/forgetting_references.rs:3:9\n    |\n-LL | #![warn(forget_ref)]\n-   |         ^^^^^^^^^^\n+LL | #![warn(forgetting_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:13:5\n+  --> $DIR/forgetting_references.rs:13:5\n    |\n LL |     forget(&owned);\n    |     ^^^^^^^------^\n@@ -24,7 +24,7 @@ LL |     forget(&owned);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:14:5\n+  --> $DIR/forgetting_references.rs:14:5\n    |\n LL |     forget(&&owned);\n    |     ^^^^^^^-------^\n@@ -34,7 +34,7 @@ LL |     forget(&&owned);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:15:5\n+  --> $DIR/forgetting_references.rs:15:5\n    |\n LL |     forget(&mut owned);\n    |     ^^^^^^^----------^\n@@ -44,7 +44,7 @@ LL |     forget(&mut owned);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:19:5\n+  --> $DIR/forgetting_references.rs:19:5\n    |\n LL |     forget(&*reference1);\n    |     ^^^^^^^------------^\n@@ -54,7 +54,7 @@ LL |     forget(&*reference1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:22:5\n+  --> $DIR/forgetting_references.rs:22:5\n    |\n LL |     forget(reference2);\n    |     ^^^^^^^----------^\n@@ -64,7 +64,7 @@ LL |     forget(reference2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:25:5\n+  --> $DIR/forgetting_references.rs:25:5\n    |\n LL |     forget(reference3);\n    |     ^^^^^^^----------^\n@@ -74,7 +74,7 @@ LL |     forget(reference3);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:30:5\n+  --> $DIR/forgetting_references.rs:30:5\n    |\n LL |     forget(&val);\n    |     ^^^^^^^----^\n@@ -84,7 +84,7 @@ LL |     forget(&val);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:38:5\n+  --> $DIR/forgetting_references.rs:38:5\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^-----------^", "previous_filename": "tests/ui/lint/forget_ref.stderr"}, {"sha": "ba635e6638c8c13c3426bb3b4971638019bd71a4", "filename": "tests/ui/liveness/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-unused.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,7 +1,7 @@\n #![warn(unused)]\n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n-#![allow(dead_code, non_camel_case_types, trivial_numeric_casts, drop_copy)]\n+#![allow(dead_code, non_camel_case_types, trivial_numeric_casts, dropping_copy_types)]\n \n use std::ops::AddAssign;\n "}, {"sha": "10810388d2033ba1b37c5b2e8b52dc7ab6cd8b93", "filename": "tests/ui/macros/parse-complex-macro-invoc-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -4,7 +4,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n #![allow(stable_features)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // Test parsing binary operators after macro invocations.\n "}, {"sha": "39df7de5a7fbb9dc51322ada7f290032a7cd7c51", "filename": "tests/ui/never_type/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,7 +3,7 @@\n // check-pass\n \n #![feature(never_type)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "2e9eff59386de53497a70c29ff598deba9873caf", "filename": "tests/ui/nll/relate_tys/hr-fn-aba-as-aaa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -5,7 +5,7 @@\n // check-pass\n // compile-flags:-Zno-leak-check\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n fn make_it() -> for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 {\n     panic!()"}, {"sha": "722d6747102fc7ceb4db33a10e0115b0788f3535", "filename": "tests/ui/nll/ty-outlives/projection-body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,7 +3,7 @@\n //\n // check-pass\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n trait MyTrait<'a> {\n     type Output;"}, {"sha": "df6aab0e6a88501b23b41a073534bca54b8d2775", "filename": "tests/ui/or-patterns/or-patterns-default-binding-modes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,8 +3,8 @@\n // check-pass\n \n #![allow(irrefutable_let_patterns)]\n-#![allow(drop_copy)]\n-#![allow(drop_ref)]\n+#![allow(dropping_copy_types)]\n+#![allow(dropping_references)]\n \n fn main() {\n     // A regression test for a mistake we made at one point:"}, {"sha": "43b53b7cf1f17d2e451d6962df31fac319e6d2c6", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -2,8 +2,8 @@\n \n // Test `@` patterns combined with `box` patterns.\n \n-#![allow(drop_ref)]\n-#![allow(drop_copy)]\n+#![allow(dropping_references)]\n+#![allow(dropping_copy_types)]\n \n #![feature(box_patterns)]\n "}, {"sha": "1df51c0edd911538647b301d6d21068ca4342311", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -2,7 +2,7 @@\n \n // Test `Copy` bindings in the rhs of `@` patterns.\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n #[derive(Copy, Clone)]\n struct C;"}, {"sha": "204cd3e665762fc40751ac951478b0666be4c4b7", "filename": "tests/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n fn main() {}\n "}, {"sha": "4de1f653db03abdd9ffb6b6ef716254e253b390d", "filename": "tests/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n fn main() {\n     struct U;"}, {"sha": "f38a6e674da99513460ea819594329fa6efee88a", "filename": "tests/ui/print_type_sizes/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,7 +3,7 @@\n // build-pass\n // ignore-pass\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n async fn wait() {}\n "}, {"sha": "6adc14f9b99e1cb1857fc292f119079ae56a9d54", "filename": "tests/ui/print_type_sizes/generator_discr_placement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -6,7 +6,7 @@\n \n // Avoid emitting panic handlers, like the rest of these tests...\n #![feature(generators)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n pub fn foo() {\n     let a = || {"}, {"sha": "0c1e931444162034e05a5bef42913c1e0f9a871d", "filename": "tests/ui/regions/type-param-outlives-reempty-issue-74429.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,7 +3,7 @@\n \n // check-pass\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::marker::PhantomData;\n "}, {"sha": "b9ff24c7624dc017ba67d28e96eb03b18ca09530", "filename": "tests/ui/rfc-2008-non-exhaustive/borrowck-exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -3,7 +3,7 @@\n \n // check-pass\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n // aux-build:monovariants.rs\n extern crate monovariants;"}, {"sha": "542be3942b7eecd380cc983bb27bfb7ffd380cb8", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -4,7 +4,7 @@\n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n #[derive(Copy, Clone, Debug)]\n struct Unit;"}, {"sha": "209b91af1ddfb6a023cf86969511c4e463478d2c", "filename": "tests/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -5,7 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n  //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "ef3c2db696af2d5186ab26ff135519b857cefc7a", "filename": "tests/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -5,7 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n extern crate core; //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "c6268dba567f73f74f5af0f254181b70324dc9a3", "filename": "tests/ui/statics/issue-91050-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatics%2Fissue-91050-1.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -12,7 +12,7 @@\n //\n // In regular builds, the bad cast was UB, like \"Invalid LLVMRustVisibility value!\"\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n pub mod before {\n     #[no_mangle]"}, {"sha": "af25010e3bd282bb9907f05112625152a62c9168", "filename": "tests/ui/traits/copy-guessing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcopy-guessing.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -1,5 +1,5 @@\n #![allow(dead_code)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // \"guessing\" in trait selection can affect `copy_or_move`. Check that this\n // is correctly handled. I am not sure what is the \"correct\" behaviour,"}, {"sha": "2ce0b6b0df8f06423f4ba2d5a3b2e54f23606184", "filename": "tests/ui/traits/impl-evaluation-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -6,7 +6,7 @@\n \n // check-pass\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n trait A {\n     type B;"}, {"sha": "e311a4af2f4ea165e99ed8df53ef851caf9424b4", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -14,7 +14,7 @@ async fn foo() {\n     #[cfg(fail)]\n     let x = &NotSync;\n     bar().await;\n-    #[allow(drop_ref)]\n+    #[allow(dropping_references)]\n     drop(x);\n }\n "}, {"sha": "f98c3164d7eb59776e3f6a6af51361e210154a39", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -2,7 +2,7 @@\n // Check tautalogically false `Copy` bounds\n \n #![feature(trivial_bounds)]\n-#![allow(drop_ref, drop_copy)]\n+#![allow(dropping_references, dropping_copy_types)]\n \n fn copy_string(t: String) -> String where String: Copy { //~ WARNING trivial_bounds\n     is_copy(&t);"}, {"sha": "d7cd3ea1275c5c1ea6e02c4cc51d775a042098c1", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4b20836b832e91aa605a2faf5e2a55190202c8/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8b4b20836b832e91aa605a2faf5e2a55190202c8/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=8b4b20836b832e91aa605a2faf5e2a55190202c8", "patch": "@@ -482,7 +482,6 @@ compiler-team = [\n     \"@petrochenkov\",\n     \"@davidtwco\",\n     \"@oli-obk\",\n-    \"@lcnr\",\n     \"@wesleywiser\",\n ]\n compiler-team-contributors = [\n@@ -593,6 +592,7 @@ style-team = [\n \"/compiler/rustc_llvm\" =                     [\"@cuviper\"]\n \"/compiler/rustc_middle/src/mir\" =           [\"compiler\", \"mir\"]\n \"/compiler/rustc_middle/src/traits\" =        [\"compiler\", \"types\"]\n+\"/compiler/rustc_middle/src/ty\" =            [\"compiler\", \"types\"]\n \"/compiler/rustc_const_eval/src/interpret\" = [\"compiler\", \"mir\"]\n \"/compiler/rustc_const_eval/src/transform\" = [\"compiler\", \"mir-opt\"]\n \"/compiler/rustc_mir_build/src/build\" =      [\"compiler\", \"mir\"]"}]}