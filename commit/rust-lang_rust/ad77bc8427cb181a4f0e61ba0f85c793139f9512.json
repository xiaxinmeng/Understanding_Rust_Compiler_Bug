{"sha": "ad77bc8427cb181a4f0e61ba0f85c793139f9512", "node_id": "C_kwDOAAsO6NoAKGFkNzdiYzg0MjdjYjE4MWE0ZjBlNjFiYTBmODVjNzkzMTM5Zjk1MTI", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-26T15:01:23Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-26T15:01:29Z"}, "message": "print const and type errors in braces not square brackets", "tree": {"sha": "5e45f9705aebb03489877a439747ccaadbe4b7bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e45f9705aebb03489877a439747ccaadbe4b7bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad77bc8427cb181a4f0e61ba0f85c793139f9512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad77bc8427cb181a4f0e61ba0f85c793139f9512", "html_url": "https://github.com/rust-lang/rust/commit/ad77bc8427cb181a4f0e61ba0f85c793139f9512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad77bc8427cb181a4f0e61ba0f85c793139f9512/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1221e43bdf413f7c405e9b17ef19d76c88222098", "url": "https://api.github.com/repos/rust-lang/rust/commits/1221e43bdf413f7c405e9b17ef19d76c88222098", "html_url": "https://github.com/rust-lang/rust/commit/1221e43bdf413f7c405e9b17ef19d76c88222098"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "2c60a0624605f983c03d0a8b9f2c318cc5420c86", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad77bc8427cb181a4f0e61ba0f85c793139f9512/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad77bc8427cb181a4f0e61ba0f85c793139f9512/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=ad77bc8427cb181a4f0e61ba0f85c793139f9512", "patch": "@@ -1159,7 +1159,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // those that do.\n             self.one_bound_for_assoc_type(\n                 || traits::supertraits(tcx, trait_ref),\n-                trait_ref.print_only_trait_path(),\n+                trait_ref.skip_binder().print_only_trait_name(),\n                 binding.item_name,\n                 path_span,\n                 match binding.kind {"}, {"sha": "d6c88ea96ca4300bed186a848953cf0db081fd4c", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad77bc8427cb181a4f0e61ba0f85c793139f9512/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad77bc8427cb181a4f0e61ba0f85c793139f9512/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=ad77bc8427cb181a4f0e61ba0f85c793139f9512", "patch": "@@ -700,7 +700,7 @@ pub trait PrettyPrinter<'tcx>:\n                     if verbose { p!(write(\"{:?}\", infer_ty)) } else { p!(write(\"{}\", infer_ty)) }\n                 }\n             }\n-            ty::Error(_) => p!(\"[type error]\"),\n+            ty::Error(_) => p!(\"{{type error}}\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n                 ty::BoundTyKind::Anon => debug_bound_var(&mut self, debruijn, bound_ty.var)?,\n@@ -1379,8 +1379,8 @@ pub trait PrettyPrinter<'tcx>:\n             },\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n-            ty::ConstKind::Expr(_) => p!(\"[const expr]\"),\n-            ty::ConstKind::Error(_) => p!(\"[const error]\"),\n+            ty::ConstKind::Expr(_) => p!(\"{{const expr}}\"),\n+            ty::ConstKind::Error(_) => p!(\"{{const error}}\"),\n         };\n         Ok(self)\n     }"}, {"sha": "3d1197afd0f79a5d0b06d0e91b557f1aed109362", "filename": "tests/ui/const-generics/transmute-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad77bc8427cb181a4f0e61ba0f85c793139f9512/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad77bc8427cb181a4f0e61ba0f85c793139f9512/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr?ref=ad77bc8427cb181a4f0e61ba0f85c793139f9512", "patch": "@@ -4,8 +4,8 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `[[u32; H+1]; W]` (generic size [const expr])\n-   = note: target type: `[[u32; W+1]; H]` (generic size [const expr])\n+   = note: source type: `[[u32; H+1]; W]` (generic size {const expr})\n+   = note: target type: `[[u32; W+1]; H]` (generic size {const expr})\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/transmute-fail.rs:16:5\n@@ -34,8 +34,8 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `[[u32; H]; W]` (generic size [const expr])\n-   = note: target type: `[u32; W * H * H]` (generic size [const expr])\n+   = note: source type: `[[u32; H]; W]` (generic size {const expr})\n+   = note: target type: `[u32; W * H * H]` (generic size {const expr})\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/transmute-fail.rs:30:5"}, {"sha": "e7f7fdc513bb79bc37efb0c46deb8f87c03573d1", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad77bc8427cb181a4f0e61ba0f85c793139f9512/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad77bc8427cb181a4f0e61ba0f85c793139f9512/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs?ref=ad77bc8427cb181a4f0e61ba0f85c793139f9512", "patch": "@@ -2,7 +2,7 @@\n \n trait One<A> { fn foo(&self) -> A; }\n \n-fn foo(_: &dyn One()) //~ ERROR associated type `Output` not found for `One<()>`\n+fn foo(_: &dyn One()) //~ ERROR associated type `Output` not found for `One`\n {}\n \n fn main() { }"}, {"sha": "e4772478bd91056e0ac4eb7075ee92515c2b4aaa", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad77bc8427cb181a4f0e61ba0f85c793139f9512/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad77bc8427cb181a4f0e61ba0f85c793139f9512/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr?ref=ad77bc8427cb181a4f0e61ba0f85c793139f9512", "patch": "@@ -1,4 +1,4 @@\n-error[E0220]: associated type `Output` not found for `One<()>`\n+error[E0220]: associated type `Output` not found for `One`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs:5:16\n    |\n LL | fn foo(_: &dyn One())"}, {"sha": "eb18b121957c4258fd49b5b26d5f2c72ac0efc18", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad77bc8427cb181a4f0e61ba0f85c793139f9512/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad77bc8427cb181a4f0e61ba0f85c793139f9512/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=ad77bc8427cb181a4f0e61ba0f85c793139f9512", "patch": "@@ -12,7 +12,7 @@ note: trait defined here, with 3 generic parameters: `A`, `B`, `C`\n LL | trait Three<A,B,C> { fn dummy(&self) -> (A,B,C); }\n    |       ^^^^^ - - -\n \n-error[E0220]: associated type `Output` not found for `Three<(), [type error], [type error]>`\n+error[E0220]: associated type `Output` not found for `Three`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())"}]}