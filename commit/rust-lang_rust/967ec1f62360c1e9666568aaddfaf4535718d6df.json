{"sha": "967ec1f62360c1e9666568aaddfaf4535718d6df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2N2VjMWY2MjM2MGMxZTk2NjY1NjhhYWRkZmFmNDUzNTcxOGQ2ZGY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-17T22:03:38Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-19T12:18:24Z"}, "message": "Refactor `impl_for_type` into a separate function", "tree": {"sha": "5c983dc5bb6191ab53f00852f4afca09d13cd643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c983dc5bb6191ab53f00852f4afca09d13cd643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/967ec1f62360c1e9666568aaddfaf4535718d6df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/967ec1f62360c1e9666568aaddfaf4535718d6df", "html_url": "https://github.com/rust-lang/rust/commit/967ec1f62360c1e9666568aaddfaf4535718d6df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/967ec1f62360c1e9666568aaddfaf4535718d6df/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "html_url": "https://github.com/rust-lang/rust/commit/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "65dfc7b2481ad9dd95136d6e7859764375021ff0", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/967ec1f62360c1e9666568aaddfaf4535718d6df/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967ec1f62360c1e9666568aaddfaf4535718d6df/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=967ec1f62360c1e9666568aaddfaf4535718d6df", "patch": "@@ -15,7 +15,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::mir::interpret::{sign_extend, ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, DefIdTree, Ty};\n+use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n \n@@ -350,8 +350,39 @@ pub fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n     s\n }\n \n-pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n+pub fn impl_for_type(tcx: TyCtxt<'_>, primitive: PrimitiveType) -> Option<DefId> {\n     use self::PrimitiveType::*;\n+\n+    match primitive {\n+        Isize => tcx.lang_items().isize_impl(),\n+        I8 => tcx.lang_items().i8_impl(),\n+        I16 => tcx.lang_items().i16_impl(),\n+        I32 => tcx.lang_items().i32_impl(),\n+        I64 => tcx.lang_items().i64_impl(),\n+        I128 => tcx.lang_items().i128_impl(),\n+        Usize => tcx.lang_items().usize_impl(),\n+        U8 => tcx.lang_items().u8_impl(),\n+        U16 => tcx.lang_items().u16_impl(),\n+        U32 => tcx.lang_items().u32_impl(),\n+        U64 => tcx.lang_items().u64_impl(),\n+        U128 => tcx.lang_items().u128_impl(),\n+        F32 => tcx.lang_items().f32_impl(),\n+        F64 => tcx.lang_items().f64_impl(),\n+        Char => tcx.lang_items().char_impl(),\n+        Bool => tcx.lang_items().bool_impl(),\n+        Str => tcx.lang_items().str_impl(),\n+        Slice => tcx.lang_items().slice_impl(),\n+        Array => tcx.lang_items().array_impl(),\n+        Tuple => None,\n+        Unit => None,\n+        RawPointer => tcx.lang_items().const_ptr_impl(),\n+        Reference => None,\n+        Fn => None,\n+        Never => None,\n+    }\n+}\n+\n+pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n     let tcx = cx.tcx;\n \n     for item in items {\n@@ -370,33 +401,7 @@ pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut V\n                 None => continue,\n             },\n         };\n-        let did = match primitive {\n-            Isize => tcx.lang_items().isize_impl(),\n-            I8 => tcx.lang_items().i8_impl(),\n-            I16 => tcx.lang_items().i16_impl(),\n-            I32 => tcx.lang_items().i32_impl(),\n-            I64 => tcx.lang_items().i64_impl(),\n-            I128 => tcx.lang_items().i128_impl(),\n-            Usize => tcx.lang_items().usize_impl(),\n-            U8 => tcx.lang_items().u8_impl(),\n-            U16 => tcx.lang_items().u16_impl(),\n-            U32 => tcx.lang_items().u32_impl(),\n-            U64 => tcx.lang_items().u64_impl(),\n-            U128 => tcx.lang_items().u128_impl(),\n-            F32 => tcx.lang_items().f32_impl(),\n-            F64 => tcx.lang_items().f64_impl(),\n-            Char => tcx.lang_items().char_impl(),\n-            Bool => tcx.lang_items().bool_impl(),\n-            Str => tcx.lang_items().str_impl(),\n-            Slice => tcx.lang_items().slice_impl(),\n-            Array => tcx.lang_items().array_impl(),\n-            Tuple => None,\n-            Unit => None,\n-            RawPointer => tcx.lang_items().const_ptr_impl(),\n-            Reference => None,\n-            Fn => None,\n-            Never => None,\n-        };\n+        let did = impl_for_type(tcx, primitive);\n         if let Some(did) = did {\n             if !did.is_local() {\n                 inline::build_impl(cx, did, None, ret);"}]}