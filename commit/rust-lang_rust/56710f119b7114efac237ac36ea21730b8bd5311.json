{"sha": "56710f119b7114efac237ac36ea21730b8bd5311", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NzEwZjExOWI3MTE0ZWZhYzIzN2FjMzZlYTIxNzMwYjhiZDUzMTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T14:11:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T14:11:57Z"}, "message": "Move enum&union to new loc", "tree": {"sha": "9e54318d6f291e3d997a9fe99554c24eeb4a47bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e54318d6f291e3d997a9fe99554c24eeb4a47bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56710f119b7114efac237ac36ea21730b8bd5311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56710f119b7114efac237ac36ea21730b8bd5311", "html_url": "https://github.com/rust-lang/rust/commit/56710f119b7114efac237ac36ea21730b8bd5311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56710f119b7114efac237ac36ea21730b8bd5311/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "html_url": "https://github.com/rust-lang/rust/commit/f135a8ea55c0a46c67713fb3b79b5f62ada430c1"}], "stats": {"total": 202, "additions": 123, "deletions": 79}, "files": [{"sha": "c705d16302bfe3267a1d66994bfaf097a016f0fb", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AstItemDef, ConstId, ContainerId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId,\n+    AdtId, ConstId, ContainerId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId,\n     LocalEnumVariantId, LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId,\n     StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n@@ -309,11 +309,11 @@ impl Union {\n     }\n \n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).container }\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.module(db).krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n     }\n \n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n@@ -337,7 +337,7 @@ pub struct Enum {\n \n impl Enum {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).container }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -357,7 +357,7 @@ impl Enum {\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.module(db).krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n     }\n }\n "}, {"sha": "f7411c5cf104d900e998c6f01d0e218bae3fe3e8", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n use hir_def::{\n-    child_by_source::ChildBySource, dyn_map::DynMap, keys, nameres::ModuleSource, AstItemDef,\n-    EnumVariantId, GenericDefId, LocationCtx, ModuleId, VariantId,\n+    child_by_source::ChildBySource, dyn_map::DynMap, keys, nameres::ModuleSource, EnumVariantId,\n+    GenericDefId, ModuleId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n@@ -32,15 +32,19 @@ impl FromSource for Struct {\n impl FromSource for Union {\n     type Ast = ast::UnionDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Union { id })\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::UNION]\n+            .get(&src)\n+            .copied()\n+            .map(Union::from)\n     }\n }\n impl FromSource for Enum {\n     type Ast = ast::EnumDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Enum { id })\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::ENUM]\n+            .get(&src)\n+            .copied()\n+            .map(Enum::from)\n     }\n }\n impl FromSource for Trait {\n@@ -250,19 +254,6 @@ impl Module {\n     }\n }\n \n-fn from_source<N, DEF>(db: &(impl DefDatabase + AstDatabase), src: InFile<N>) -> Option<DEF>\n-where\n-    N: AstNode,\n-    DEF: AstItemDef<N>,\n-{\n-    let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n-    let module = Module::from_definition(db, InFile::new(src.file_id, module_src))?;\n-    let ctx = LocationCtx::new(db, module.id, src.file_id);\n-    let items = db.ast_id_map(src.file_id);\n-    let item_id = items.ast_id(&src.value);\n-    Some(DEF::from_ast_id(ctx, item_id))\n-}\n-\n fn analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> DynMap {\n     _analyze_container(db, src).unwrap_or_default()\n }"}, {"sha": "72afecf26c3d71318a27a586b8f389f69203d9f0", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -4,7 +4,7 @@ use either::Either;\n use hir_def::{\n     nameres::ModuleSource,\n     src::{HasChildSource, HasSource as _},\n-    AstItemDef, Lookup, VariantId,\n+    Lookup, VariantId,\n };\n use ra_syntax::ast;\n \n@@ -57,13 +57,13 @@ impl HasSource for Struct {\n impl HasSource for Union {\n     type Ast = ast::UnionDef;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::UnionDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Enum {\n     type Ast = ast::EnumDef;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::EnumDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for EnumVariant {"}, {"sha": "ec3d57d1a98e0a4e6a31a313a7ee91225add874b", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -11,9 +11,8 @@ use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace, type_ref::TypeRef,\n-    AstItemDef, EnumId, LocalEnumVariantId, LocalStructFieldId, Lookup, StructId, UnionId,\n-    VariantId,\n+    db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace, type_ref::TypeRef, EnumId,\n+    LocalEnumVariantId, LocalStructFieldId, Lookup, StructId, UnionId, VariantId,\n };\n \n /// Note that we use `StructData` for unions as well!\n@@ -58,7 +57,7 @@ impl StructData {\n         Arc::new(StructData { name, variant_data })\n     }\n     pub(crate) fn union_data_query(db: &impl DefDatabase, id: UnionId) -> Arc<StructData> {\n-        let src = id.source(db);\n+        let src = id.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let variant_data = VariantData::new(\n             src.value\n@@ -73,7 +72,7 @@ impl StructData {\n \n impl EnumData {\n     pub(crate) fn enum_data_query(db: &impl DefDatabase, e: EnumId) -> Arc<EnumData> {\n-        let src = e.source(db);\n+        let src = e.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let mut trace = Trace::new_for_arena();\n         lower_enum(&mut trace, &src.value);\n@@ -90,7 +89,7 @@ impl HasChildSource for EnumId {\n     type ChildId = LocalEnumVariantId;\n     type Value = ast::EnumVariant;\n     fn child_source(&self, db: &impl DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n-        let src = self.source(db);\n+        let src = self.lookup(db).source(db);\n         let mut trace = Trace::new_for_map();\n         lower_enum(&mut trace, &src.value);\n         src.with_value(trace.into_map())\n@@ -155,7 +154,7 @@ impl HasChildSource for VariantId {\n                 src.map(|map| map[it.local_id].kind())\n             }\n             VariantId::StructId(it) => it.lookup(db).source(db).map(|it| it.kind()),\n-            VariantId::UnionId(it) => it.source(db).map(|it| {\n+            VariantId::UnionId(it) => it.lookup(db).source(db).map(|it| {\n                 it.record_field_def_list()\n                     .map(ast::StructKind::Record)\n                     .unwrap_or(ast::StructKind::Unit)"}, {"sha": "5bf82e191cd69b73bf50ed277c433decae5544a3", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -12,8 +12,7 @@ use ra_syntax::{\n use tt::Subtree;\n \n use crate::{\n-    db::DefDatabase, path::Path, src::HasChildSource, src::HasSource, AdtId, AstItemDef, AttrDefId,\n-    Lookup,\n+    db::DefDatabase, path::Path, src::HasChildSource, src::HasSource, AdtId, AttrDefId, Lookup,\n };\n \n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n@@ -57,8 +56,8 @@ impl Attrs {\n             }\n             AttrDefId::AdtId(it) => match it {\n                 AdtId::StructId(it) => attrs_from_loc(it.lookup(db), db),\n-                AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n-                AdtId::UnionId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+                AdtId::EnumId(it) => attrs_from_loc(it.lookup(db), db),\n+                AdtId::UnionId(it) => attrs_from_loc(it.lookup(db), db),\n             },\n             AttrDefId::TraitId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::MacroDefId(it) => {"}, {"sha": "3c9379b151c65397844c58af7a5a38c1295c8f94", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -103,8 +103,14 @@ impl ChildBySource for ModuleId {\n                         let src = strukt.lookup(db).source(db);\n                         res[keys::STRUCT].insert(src, strukt)\n                     }\n-                    AdtId::UnionId(_) => (),\n-                    AdtId::EnumId(_) => (),\n+                    AdtId::UnionId(union_) => {\n+                        let src = union_.lookup(db).source(db);\n+                        res[keys::UNION].insert(src, union_)\n+                    }\n+                    AdtId::EnumId(enum_) => {\n+                        let src = enum_.lookup(db).source(db);\n+                        res[keys::ENUM].insert(src, enum_)\n+                    }\n                 },\n                 _ => (),\n             }"}, {"sha": "98bff6cb7836686900497803c159bf189563d8e8", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use hir_expand::{db::AstDatabase, HirFileId};\n use ra_db::{salsa, CrateId, SourceDatabase};\n-use ra_syntax::{ast, SmolStr};\n+use ra_syntax::SmolStr;\n \n use crate::{\n     adt::{EnumData, StructData},\n@@ -17,9 +17,9 @@ use crate::{\n         raw::{ImportSourceMap, RawItems},\n         CrateDefMap,\n     },\n-    AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, FunctionId, FunctionLoc, GenericDefId,\n-    ImplId, ImplLoc, ItemLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n-    TraitLoc, TypeAliasId, TypeAliasLoc, UnionId,\n+    AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n+    GenericDefId, ImplId, ImplLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n+    TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -29,9 +29,9 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_struct(&self, loc: StructLoc) -> StructId;\n     #[salsa::interned]\n-    fn intern_union(&self, loc: ItemLoc<ast::UnionDef>) -> UnionId;\n+    fn intern_union(&self, loc: UnionLoc) -> UnionId;\n     #[salsa::interned]\n-    fn intern_enum(&self, loc: ItemLoc<ast::EnumDef>) -> EnumId;\n+    fn intern_enum(&self, loc: EnumLoc) -> EnumId;\n     #[salsa::interned]\n     fn intern_const(&self, loc: ConstLoc) -> ConstId;\n     #[salsa::interned]"}, {"sha": "b29f142e3307c67440cff861738fe90c25ef2159", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::ast;\n use crate::{\n     db::DefDatabase,\n     src::{HasChildSource, HasSource},\n-    AdtId, AstItemDef, AttrDefId, Lookup,\n+    AdtId, AttrDefId, Lookup,\n };\n \n /// Holds documentation\n@@ -52,8 +52,8 @@ impl Documentation {\n             }\n             AttrDefId::AdtId(it) => match it {\n                 AdtId::StructId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n-                AdtId::EnumId(it) => docs_from_ast(&it.source(db).value),\n-                AdtId::UnionId(it) => docs_from_ast(&it.source(db).value),\n+                AdtId::EnumId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n+                AdtId::UnionId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             },\n             AttrDefId::EnumVariantId(it) => {\n                 let src = it.parent.child_source(db);"}, {"sha": "e502dd7983b13e1dac0d156806de16446d9d33a5", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     src::HasChildSource,\n     src::HasSource,\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, GenericDefId, LocalTypeParamId, Lookup, TypeParamId,\n+    AdtId, GenericDefId, LocalTypeParamId, Lookup, TypeParamId,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -76,12 +76,12 @@ impl GenericParams {\n                 src.file_id\n             }\n             GenericDefId::AdtId(AdtId::UnionId(it)) => {\n-                let src = it.source(db);\n+                let src = it.lookup(db).source(db);\n                 generics.fill(&mut sm, &src.value);\n                 src.file_id\n             }\n             GenericDefId::AdtId(AdtId::EnumId(it)) => {\n-                let src = it.source(db);\n+                let src = it.lookup(db).source(db);\n                 generics.fill(&mut sm, &src.value);\n                 src.file_id\n             }"}, {"sha": "ada145379c8a7d82cb556f5e9541aca696f6da36", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -9,7 +9,7 @@ use rustc_hash::FxHashMap;\n use crate::{\n     dyn_map::{DynMap, Policy},\n     ConstId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, StructId, TraitId,\n-    TypeAliasId, TypeParamId,\n+    TypeAliasId, TypeParamId, EnumId, UnionId,\n };\n \n type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n@@ -21,6 +21,8 @@ pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::ImplBlock, ImplId> = Key::new();\n pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n pub const STRUCT: Key<ast::StructDef, StructId> = Key::new();\n+pub const UNION: Key<ast::UnionDef, UnionId> = Key::new();\n+pub const ENUM: Key<ast::EnumDef, EnumId> = Key::new();\n \n pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleFieldDef, StructFieldId> = Key::new();"}, {"sha": "c9e4e6a0f55bef557d24e0ec923f57eee61a410b", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -173,24 +173,48 @@ impl Lookup for StructId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct UnionId(salsa::InternId);\n impl_intern_key!(UnionId);\n-impl AstItemDef<ast::UnionDef> for UnionId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::UnionDef>) -> Self {\n-        db.intern_union(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct UnionLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::UnionDef>,\n+}\n+\n+impl Intern for UnionLoc {\n+    type ID = UnionId;\n+    fn intern(self, db: &impl db::DefDatabase) -> UnionId {\n+        db.intern_union(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::UnionDef> {\n-        db.lookup_intern_union(self)\n+}\n+\n+impl Lookup for UnionId {\n+    type Data = UnionLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> UnionLoc {\n+        db.lookup_intern_union(*self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumId(salsa::InternId);\n impl_intern_key!(EnumId);\n-impl AstItemDef<ast::EnumDef> for EnumId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::EnumDef>) -> Self {\n-        db.intern_enum(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct EnumLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::EnumDef>,\n+}\n+\n+impl Intern for EnumLoc {\n+    type ID = EnumId;\n+    fn intern(self, db: &impl db::DefDatabase) -> EnumId {\n+        db.intern_enum(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::EnumDef> {\n-        db.lookup_intern_enum(self)\n+}\n+\n+impl Lookup for EnumId {\n+    type Data = EnumLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> EnumLoc {\n+        db.lookup_intern_enum(*self)\n     }\n }\n \n@@ -545,8 +569,8 @@ impl HasModule for AdtId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self {\n             AdtId::StructId(it) => it.lookup(db).container,\n-            AdtId::UnionId(it) => it.module(db),\n-            AdtId::EnumId(it) => it.module(db),\n+            AdtId::UnionId(it) => it.lookup(db).container,\n+            AdtId::EnumId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -569,7 +593,7 @@ impl HasModule for GenericDefId {\n             GenericDefId::TraitId(it) => it.lookup(db).container,\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n             GenericDefId::ImplId(it) => it.lookup(db).container,\n-            GenericDefId::EnumVariantId(it) => it.parent.module(db),\n+            GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container,\n             GenericDefId::ConstId(it) => it.lookup(db).module(db),\n         }\n     }"}, {"sha": "04aadead19ba8df88f2463b43658cd56a8de0b49", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -24,9 +24,9 @@ use crate::{\n     },\n     path::{Path, PathKind},\n     per_ns::PerNs,\n-    AdtId, AstId, AstItemDef, ConstLoc, ContainerId, EnumId, EnumVariantId, FunctionLoc, ImplLoc,\n-    Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticLoc, StructLoc,\n-    TraitLoc, TypeAliasLoc, UnionId,\n+    AdtId, AstId, ConstLoc, ContainerId, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n+    LocalImportId, LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc, TraitLoc,\n+    TypeAliasLoc, UnionLoc,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -753,8 +753,6 @@ where\n \n     fn define_def(&mut self, def: &raw::DefData, attrs: &Attrs) {\n         let module = ModuleId { krate: self.def_collector.def_map.krate, local_id: self.module_id };\n-        let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id);\n-\n         // FIXME: check attrs to see if this is an attribute macro invocation;\n         // in which case we don't add the invocation, just a single attribute\n         // macro invocation\n@@ -778,10 +776,15 @@ where\n                 PerNs::both(def.into(), def.into())\n             }\n             raw::DefKind::Union(ast_id) => {\n-                let id = UnionId::from_ast_id(ctx, ast_id).into();\n-                PerNs::both(id, id)\n+                let def = UnionLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+                PerNs::both(def.into(), def.into())\n+            }\n+            raw::DefKind::Enum(ast_id) => {\n+                let def = EnumLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+                PerNs::types(def.into())\n             }\n-            raw::DefKind::Enum(ast_id) => PerNs::types(EnumId::from_ast_id(ctx, ast_id).into()),\n             raw::DefKind::Const(ast_id) => {\n                 let def = ConstLoc {\n                     container: ContainerId::ModuleId(module),"}, {"sha": "20200d1db49d0b392ba92833bf32011b8d92684a", "filename": "crates/ra_hir_def/src/src.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -5,7 +5,8 @@ use ra_arena::map::ArenaMap;\n use ra_syntax::ast;\n \n use crate::{\n-    db::DefDatabase, ConstLoc, FunctionLoc, ImplLoc, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc,\n+    db::DefDatabase, ConstLoc, EnumLoc, FunctionLoc, ImplLoc, StaticLoc, StructLoc, TraitLoc,\n+    TypeAliasLoc, UnionLoc,\n };\n \n pub trait HasSource {\n@@ -76,6 +77,24 @@ impl HasSource for StructLoc {\n     }\n }\n \n+impl HasSource for UnionLoc {\n+    type Value = ast::UnionDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::UnionDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n+impl HasSource for EnumLoc {\n+    type Value = ast::EnumDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::EnumDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n pub trait HasChildSource {\n     type ChildId;\n     type Value;"}, {"sha": "5f795bc022c3882230dba89e58944603630f48de", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56710f119b7114efac237ac36ea21730b8bd5311/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=56710f119b7114efac237ac36ea21730b8bd5311", "patch": "@@ -14,7 +14,7 @@ use hir_def::{\n     path::{GenericArg, Path, PathKind, PathSegment},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId,\n+    AdtId, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId,\n     LocalStructFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n };\n use ra_arena::map::ArenaMap;\n@@ -698,10 +698,11 @@ impl_froms!(CallableDef: FunctionId, StructId, EnumVariantId);\n impl CallableDef {\n     pub fn krate(self, db: &impl HirDatabase) -> CrateId {\n         match self {\n-            CallableDef::FunctionId(f) => f.lookup(db).module(db).krate,\n-            CallableDef::StructId(s) => s.lookup(db).container.krate,\n-            CallableDef::EnumVariantId(e) => e.parent.module(db).krate,\n+            CallableDef::FunctionId(f) => f.lookup(db).module(db),\n+            CallableDef::StructId(s) => s.lookup(db).container,\n+            CallableDef::EnumVariantId(e) => e.parent.lookup(db).container,\n         }\n+        .krate\n     }\n }\n "}]}