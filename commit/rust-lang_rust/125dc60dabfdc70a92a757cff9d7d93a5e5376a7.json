{"sha": "125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNWRjNjBkYWJmZGM3MGE5MmE3NTdjZmY5ZDdkOTNhNWU1Mzc2YTc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-04T00:47:16Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-05T15:48:42Z"}, "message": "rustc: replace uses of with_freevars with the freevars query.", "tree": {"sha": "023e7ee8c3b0a6da2fe3f2f01b201315cfb9c40f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/023e7ee8c3b0a6da2fe3f2f01b201315cfb9c40f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "html_url": "https://github.com/rust-lang/rust/commit/125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d8fd98d347239bc7e29c19988d7c19cf860cced", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8fd98d347239bc7e29c19988d7c19cf860cced", "html_url": "https://github.com/rust-lang/rust/commit/5d8fd98d347239bc7e29c19988d7c19cf860cced"}], "stats": {"total": 123, "additions": 49, "deletions": 74}, "files": [{"sha": "9f24644d912928263e4830d352e99995c5f3215f", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -931,8 +931,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"walk_captures({:?})\", closure_expr);\n \n         let closure_def_id = self.tcx().hir().local_def_id_from_hir_id(closure_expr.hir_id);\n-        self.tcx().with_freevars(closure_expr.hir_id, |freevars| {\n-            for freevar in freevars {\n+        if let Some(freevars) = self.tcx().freevars(closure_def_id) {\n+            for freevar in freevars.iter() {\n                 let var_hir_id = freevar.var_id();\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath { hir_id: var_hir_id },\n@@ -960,7 +960,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-        });\n+        }\n     }\n \n     fn cat_captured_var(&mut self,"}, {"sha": "b1d60dd3a55d31bb1d909e6e94f1336ae0272fc8", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -483,16 +483,17 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n         // in better error messages than just pointing at the closure\n         // construction site.\n         let mut call_caps = Vec::new();\n-        ir.tcx.with_freevars(expr.hir_id, |freevars| {\n-            call_caps.extend(freevars.iter().filter_map(|fv| {\n-                if let Res::Local(rv) = fv.res {\n-                    let fv_ln = ir.add_live_node(FreeVarNode(fv.span));\n-                    Some(CaptureInfo { ln: fv_ln, var_hid: rv })\n+        let closure_def_id = ir.tcx.hir().local_def_id_from_hir_id(expr.hir_id);\n+        if let Some(freevars) = ir.tcx.freevars(closure_def_id) {\n+            call_caps.extend(freevars.iter().filter_map(|freevar| {\n+                if let Res::Local(rv) = freevar.res {\n+                    let freevar_ln = ir.add_live_node(FreeVarNode(freevar.span));\n+                    Some(CaptureInfo { ln: freevar_ln, var_hid: rv })\n                 } else {\n                     None\n                 }\n             }));\n-        });\n+        }\n         ir.set_captures(expr.hir_id, call_caps);\n \n         intravisit::walk_expr(ir, expr);"}, {"sha": "3b60d0af736c9b6580dc4b9cb9afaa6a4b078ad6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -2572,12 +2572,12 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             };\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n-                            tcx.with_freevars(hir_id, |freevars| {\n+                            if let Some(freevars) = tcx.freevars(def_id) {\n                                 for (freevar, place) in freevars.iter().zip(places) {\n                                     let var_name = tcx.hir().name_by_hir_id(freevar.var_id());\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n-                            });\n+                            }\n \n                             struct_fmt.finish()\n                         } else {\n@@ -2591,12 +2591,12 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                                                tcx.hir().span_by_hir_id(hir_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n-                            tcx.with_freevars(hir_id, |freevars| {\n+                            if let Some(freevars) = tcx.freevars(def_id) {\n                                 for (freevar, place) in freevars.iter().zip(places) {\n                                     let var_name = tcx.hir().name_by_hir_id(freevar.var_id());\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n-                            });\n+                            }\n \n                             struct_fmt.finish()\n                         } else {"}, {"sha": "9d3c4b5fba5c178d559be4e2c0146bff88216624", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -9,7 +9,7 @@ pub use self::IntVarValue::*;\n pub use self::fold::TypeFoldable;\n \n use crate::hir::{map as hir_map, FreevarMap, GlobMap, TraitMap};\n-use crate::hir::{HirId, Node};\n+use crate::hir::Node;\n use crate::hir::def::{Res, DefKind, CtorOf, CtorKind, ExportMap};\n use crate::hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_data_structures::svh::Svh;\n@@ -3120,18 +3120,6 @@ impl Iterator for AssociatedItemsIterator<'_, '_, '_> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    pub fn with_freevars<T, F>(self, fid: HirId, f: F) -> T where\n-        F: FnOnce(&[hir::Freevar]) -> T,\n-    {\n-        let def_id = self.hir().local_def_id_from_hir_id(fid);\n-        match self.freevars(def_id) {\n-            None => f(&[]),\n-            Some(d) => f(&d),\n-        }\n-    }\n-}\n-\n fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> AssociatedItem {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let parent_id = tcx.hir().get_parent_item(id);"}, {"sha": "f131f19379156a4c4a21037d247c5400578e915c", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -584,7 +584,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                     let mut sep = \" \";\n                     for (freevar, upvar_ty) in self.tcx().freevars(did)\n                         .as_ref()\n-                        .map_or(&[][..], |fv| &fv[..])\n+                        .map_or(&[][..], |v| &v[..])\n                         .iter()\n                         .zip(upvar_tys)\n                     {\n@@ -627,7 +627,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                     let mut sep = \" \";\n                     for (freevar, upvar_ty) in self.tcx().freevars(did)\n                         .as_ref()\n-                        .map_or(&[][..], |fv| &fv[..])\n+                        .map_or(&[][..], |v| &v[..])\n                         .iter()\n                         .zip(upvar_tys)\n                     {"}, {"sha": "64b32114ebc62715d1a2397ded5c4eea41180817", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -1814,14 +1814,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 ty::Array(ty, _) | ty::Slice(ty) =>\n                     self.describe_field_from_ty(&ty, field, variant_index),\n                 ty::Closure(def_id, _) | ty::Generator(def_id, _, _) => {\n-                    // Convert the def-id into a node-id. node-ids are only valid for\n-                    // the local code in the current crate, so this returns an `Option` in case\n+                    // `tcx.freevars(def_id)` returns an `Option`, which is `None` in case\n                     // the closure comes from another crate. But in that case we wouldn't\n                     // be borrowck'ing it, so we can just unwrap:\n-                    let hir_id = self.infcx.tcx.hir().as_local_hir_id(def_id).unwrap();\n-                    let freevar = self.infcx\n-                        .tcx\n-                        .with_freevars(hir_id, |fv| fv[field.index()]);\n+                    let freevar = self.infcx.tcx.freevars(def_id).unwrap()[field.index()];\n \n                     self.infcx.tcx.hir().name_by_hir_id(freevar.var_id()).to_string()\n                 }\n@@ -2613,28 +2609,19 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         if let hir::ExprKind::Closure(\n             .., args_span, _\n         ) = expr {\n-            let var_span = self.infcx.tcx.with_freevars(\n-                hir_id,\n-                |freevars| {\n-                    for (v, place) in freevars.iter().zip(places) {\n-                        match place {\n-                            Operand::Copy(place) |\n-                            Operand::Move(place) if target_place == place => {\n-                                debug!(\"closure_span: found captured local {:?}\", place);\n-                                return Some(v.span);\n-                            },\n-                            _ => {}\n-                        }\n-                    }\n-\n-                    None\n-                },\n-            )?;\n+            for (v, place) in self.infcx.tcx.freevars(def_id)?.iter().zip(places) {\n+                match place {\n+                    Operand::Copy(place) |\n+                    Operand::Move(place) if target_place == place => {\n+                        debug!(\"closure_span: found captured local {:?}\", place);\n+                        return Some((*args_span, v.span));\n+                    },\n+                    _ => {}\n+                }\n+            }\n \n-            Some((*args_span, var_span))\n-        } else {\n-            None\n         }\n+        None\n     }\n \n     /// Helper to retrieve span(s) of given borrow from the current MIR"}, {"sha": "07557421779b4008a25af50e76111dfca01cce85", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -516,12 +516,11 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     span_bug!(expr.span, \"closure expr w/o closure type: {:?}\", closure_ty);\n                 }\n             };\n-            let upvars = cx.tcx.with_freevars(expr.hir_id, |freevars| {\n-                freevars.iter()\n-                    .zip(substs.upvar_tys(def_id, cx.tcx))\n-                    .map(|(fv, ty)| capture_freevar(cx, expr, fv, ty))\n-                    .collect()\n-            });\n+            let upvars = cx.tcx.freevars(def_id).iter()\n+                .flat_map(|freevars| freevars.iter())\n+                .zip(substs.upvar_tys(def_id, cx.tcx))\n+                .map(|(freevar, ty)| capture_freevar(cx, expr, freevar, ty))\n+                .collect();\n             ExprKind::Closure {\n                 closure_id: def_id,\n                 substs,"}, {"sha": "642144c32439b06f9ccd6745d78a09b00d266083", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -449,7 +449,8 @@ fn check_expr_kind<'a, 'tcx>(\n             let nested_body_promotable = v.check_nested_body(body_id);\n             // Paths in constant contexts cannot refer to local variables,\n             // as there are none, and thus closures can't have upvars there.\n-            if v.tcx.with_freevars(e.hir_id, |fv| !fv.is_empty()) {\n+            let closure_def_id = v.tcx.hir().local_def_id_from_hir_id(e.hir_id);\n+            if !v.tcx.freevars(closure_def_id).map_or(true, |v| v.is_empty()) {\n                 NotPromotable\n             } else {\n                 nested_body_promotable"}, {"sha": "9f3a9de92cc71437cd5dced09cd7f4a30ed9899c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -721,9 +721,8 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n         let b = self.shallow_resolve(b);\n \n-        let hir_id_a = self.tcx.hir().as_local_hir_id(def_id_a).unwrap();\n         match b.sty {\n-            ty::FnPtr(fn_ty) if self.tcx.with_freevars(hir_id_a, |v| v.is_empty()) => {\n+            ty::FnPtr(fn_ty) if self.tcx.freevars(def_id_a).map_or(true, |v| v.is_empty()) => {\n                 // We coerce the closure, which has fn type\n                 //     `extern \"rust-call\" fn((arg0,arg1,...)) -> _`\n                 // to"}, {"sha": "9cdfcad37212c29dd131185faa9537af2a796e6b", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -121,9 +121,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             None\n         };\n \n-        self.tcx.with_freevars(closure_hir_id, |freevars| {\n+        if let Some(freevars) = self.tcx.freevars(closure_def_id) {\n             let mut freevar_list: Vec<ty::UpvarId> = Vec::with_capacity(freevars.len());\n-            for freevar in freevars {\n+            for freevar in freevars.iter() {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath {\n                         hir_id: freevar.var_id(),\n@@ -155,14 +155,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             // Add the vector of freevars to the map keyed with the closure id.\n             // This gives us an easier access to them without having to call\n-            // with_freevars again..\n+            // tcx.freevars again..\n             if !freevar_list.is_empty() {\n                 self.tables\n                     .borrow_mut()\n                     .upvar_list\n                     .insert(closure_def_id, freevar_list);\n             }\n-        });\n+        }\n \n         let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id());\n         let region_scope_tree = &self.tcx.region_scope_tree(body_owner_def_id);\n@@ -244,17 +244,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // This may change if abstract return types of some sort are\n         // implemented.\n         let tcx = self.tcx;\n-        let closure_def_index = tcx.hir().local_def_id_from_hir_id(closure_id);\n+        let closure_def_id = tcx.hir().local_def_id_from_hir_id(closure_id);\n \n-        tcx.with_freevars(closure_id, |freevars| {\n+        tcx.freevars(closure_def_id).iter().flat_map(|freevars| {\n             freevars\n                 .iter()\n                 .map(|freevar| {\n                     let var_hir_id = freevar.var_id();\n                     let freevar_ty = self.node_ty(var_hir_id);\n                     let upvar_id = ty::UpvarId {\n                         var_path: ty::UpvarPath { hir_id: var_hir_id },\n-                        closure_expr_id: LocalDefId::from_def_id(closure_def_index),\n+                        closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                     };\n                     let capture = self.tables.borrow().upvar_capture(upvar_id);\n \n@@ -274,8 +274,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         ),\n                     }\n                 })\n-                .collect()\n         })\n+            .collect()\n     }\n }\n "}, {"sha": "a40012a4a7932a8cc131f53e7223671b768583e2", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125dc60dabfdc70a92a757cff9d7d93a5e5376a7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=125dc60dabfdc70a92a757cff9d7d93a5e5376a7", "patch": "@@ -1093,8 +1093,8 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n                 }),\n         );\n \n-        tcx.with_freevars(hir_id, |fv| {\n-            params.extend(fv.iter().zip((dummy_args.len() as u32)..).map(|(_, i)| {\n+        if let Some(freevars) = tcx.freevars(def_id) {\n+            params.extend(freevars.iter().zip((dummy_args.len() as u32)..).map(|(_, i)| {\n                 ty::GenericParamDef {\n                     index: type_start + i,\n                     name: Symbol::intern(\"<upvar>\").as_interned_str(),\n@@ -1107,7 +1107,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n                     },\n                 }\n             }));\n-        });\n+        }\n     }\n \n     let param_def_id_to_index = params"}]}