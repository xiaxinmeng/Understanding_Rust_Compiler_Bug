{"sha": "7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiM2NkMWI2NzRlYjdhYTdkYThmZTAwMTkyNDA0ZTRjOWYyNTRhZDg=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-10-04T23:25:20Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-10-13T00:08:33Z"}, "message": "Use empty typeck tables when nesting on items without those", "tree": {"sha": "0a18f3cc70587442fa64bc5ef0a1cf1e4a1b1f7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a18f3cc70587442fa64bc5ef0a1cf1e4a1b1f7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8", "html_url": "https://github.com/rust-lang/rust/commit/7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429fc9d7b714feebeb78893f9b92b7bdab3b8b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/429fc9d7b714feebeb78893f9b92b7bdab3b8b93", "html_url": "https://github.com/rust-lang/rust/commit/429fc9d7b714feebeb78893f9b92b7bdab3b8b93"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "2f2b8fee27d2dc5922382074e5b89d7a3ca2bd79", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8", "patch": "@@ -115,15 +115,17 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         F: FnOnce(&mut Self),\n     {\n         let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n-        if self.tcx.has_typeck_tables(item_def_id) {\n-            let tables = self.tcx.typeck_tables_of(item_def_id);\n-            let old_tables = self.save_ctxt.tables;\n-            self.save_ctxt.tables = tables;\n-            f(self);\n-            self.save_ctxt.tables = old_tables;\n+\n+        let tables = if self.tcx.has_typeck_tables(item_def_id) {\n+            self.tcx.typeck_tables_of(item_def_id)\n         } else {\n-            f(self);\n-        }\n+            self.save_ctxt.empty_tables\n+        };\n+\n+        let old_tables = self.save_ctxt.tables;\n+        self.save_ctxt.tables = tables;\n+        f(self);\n+        self.save_ctxt.tables = old_tables;\n     }\n \n     fn span_from_span(&self, span: Span) -> SpanData {"}, {"sha": "1cfb84bb511e4b4ca5c8c16d73235790f35b4db8", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=7b3cd1b674eb7aa7da8fe00192404e4c9f254ad8", "patch": "@@ -48,6 +48,9 @@ use log::{debug, error, info};\n pub struct SaveContext<'l, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n+    /// Used as a fallback when nesting the typeck tables during item processing\n+    /// (if these are not available for that item, e.g. don't own a body)\n+    empty_tables: &'l ty::TypeckTables<'tcx>,\n     access_levels: &'l AccessLevels,\n     span_utils: SpanUtils<'tcx>,\n     config: Config,\n@@ -1114,6 +1117,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n         let save_ctxt = SaveContext {\n             tcx,\n             tables: &ty::TypeckTables::empty(None),\n+            empty_tables: &ty::TypeckTables::empty(None),\n             access_levels: &access_levels,\n             span_utils: SpanUtils::new(&tcx.sess),\n             config: find_config(config),"}]}