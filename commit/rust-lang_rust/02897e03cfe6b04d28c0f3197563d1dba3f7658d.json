{"sha": "02897e03cfe6b04d28c0f3197563d1dba3f7658d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyODk3ZTAzY2ZlNmIwNGQyOGMwZjMxOTc1NjNkMWRiYTNmNzY1OGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-28T08:50:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-28T08:50:24Z"}, "message": "cleanup tcx usage and a few comments", "tree": {"sha": "622ac4fdfd9cc185d79d99dbf7f9bce60cec7767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/622ac4fdfd9cc185d79d99dbf7f9bce60cec7767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02897e03cfe6b04d28c0f3197563d1dba3f7658d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02897e03cfe6b04d28c0f3197563d1dba3f7658d", "html_url": "https://github.com/rust-lang/rust/commit/02897e03cfe6b04d28c0f3197563d1dba3f7658d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02897e03cfe6b04d28c0f3197563d1dba3f7658d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "html_url": "https://github.com/rust-lang/rust/commit/f4308a07286fc65a365d87e8ba5d8ba6ad16027e"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0bed688187b08e68c5246dbded72bbfe2c84e104", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=02897e03cfe6b04d28c0f3197563d1dba3f7658d", "patch": "@@ -124,7 +124,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         };\n         // Strip linker suffixes (seen on 32-bit macOS).\n         let link_name = link_name.trim_end_matches(\"$UNIX2003\");\n-        let tcx = &{ this.tcx.tcx };\n+        let tcx = this.tcx.tcx;\n \n         // First: functions that diverge.\n         let (dest, ret) = match ret {\n@@ -133,8 +133,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // The implementation is provided by the function with the `#[panic_handler]` attribute.\n                 \"panic_impl\" => {\n                     this.check_panic_supported()?;\n-                    let panic_impl_id = this.tcx.lang_items().panic_impl().unwrap();\n-                    let panic_impl_instance = ty::Instance::mono(*this.tcx, panic_impl_id);\n+                    let panic_impl_id = tcx.lang_items().panic_impl().unwrap();\n+                    let panic_impl_instance = ty::Instance::mono(tcx, panic_impl_id);\n                     return Ok(Some(&*this.load_mir(panic_impl_instance.def, None)?));\n                 }\n                 | \"exit\""}, {"sha": "425fe4b1b479a3d3eb477b372a8d6075751b7491", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=02897e03cfe6b04d28c0f3197563d1dba3f7658d", "patch": "@@ -17,7 +17,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n-        let tcx = &{ this.tcx.tcx };\n \n         match link_name {\n             // Environment related shims\n@@ -65,7 +64,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"write\" => {\n                 let fd = this.read_scalar(args[0])?.to_i32()?;\n                 let buf = this.read_scalar(args[1])?.not_undef()?;\n-                let n = this.read_scalar(args[2])?.to_machine_usize(tcx)?;\n+                let n = this.read_scalar(args[2])?.to_machine_usize(this)?;\n                 trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n                 let result = if fd == 1 || fd == 2 {\n                     // stdout/stderr\n@@ -209,7 +208,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"pthread_getspecific\" => {\n                 let key = this.force_bits(this.read_scalar(args[0])?.not_undef()?, args[0].layout.size)?;\n-                let ptr = this.machine.tls.load_tls(key, tcx)?;\n+                let ptr = this.machine.tls.load_tls(key, this)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"pthread_setspecific\" => {"}, {"sha": "9e71ba7d90741c6f7ddc316d1bb5a51670874a3a", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=02897e03cfe6b04d28c0f3197563d1dba3f7658d", "patch": "@@ -13,7 +13,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n-        let tcx = &{ this.tcx.tcx };\n \n         match link_name {\n             // Windows API stubs.\n@@ -160,7 +159,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"TlsGetValue\" => {\n                 let key = u128::from(this.read_scalar(args[0])?.to_u32()?);\n-                let ptr = this.machine.tls.load_tls(key, tcx)?;\n+                let ptr = this.machine.tls.load_tls(key, this)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"TlsSetValue\" => {"}, {"sha": "84e8cca556a1ce0bb9e01d472e920dd3bf93ca03", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=02897e03cfe6b04d28c0f3197563d1dba3f7658d", "patch": "@@ -24,13 +24,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if this.emulate_intrinsic(span, instance, args, ret)? {\n             return Ok(());\n         }\n-        let tcx = &{ this.tcx.tcx };\n         let substs = instance.substs;\n \n         // All these intrinsics take raw pointers, so if we access memory directly\n         // (as opposed to through a place), we have to remember to erase any tag\n         // that might still hang around!\n-        let intrinsic_name = &*tcx.item_name(instance.def_id()).as_str();\n+        let intrinsic_name = &*this.tcx.item_name(instance.def_id()).as_str();\n \n         // First handle intrinsics without return place.\n         let (dest, ret) = match ret {"}, {"sha": "461b5b3eed6a246509aa4438cb491b94d3d16c2a", "filename": "src/shims/tls.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02897e03cfe6b04d28c0f3197563d1dba3f7658d/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=02897e03cfe6b04d28c0f3197563d1dba3f7658d", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> TlsData<'tcx> {\n     }\n \n     pub fn load_tls(\n-        &mut self,\n+        &self,\n         key: TlsKey,\n         cx: &impl HasDataLayout,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n@@ -107,7 +107,8 @@ impl<'tcx> TlsData<'tcx> {\n         Ok(())\n     }\n \n-    /// Returns a dtor, its argument and its index, if one is supposed to run\n+    /// Returns a dtor, its argument and its index, if one is supposed to run.\n+    /// `key` is the last dtors that was run; we return the *next* one after that.\n     ///\n     /// An optional destructor function may be associated with each key value.\n     /// At thread exit, if a key value has a non-NULL destructor pointer,\n@@ -191,8 +192,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // step until out of stackframes\n             this.run()?;\n \n+            // Fetch next dtor after `key`.\n             dtor = match this.machine.tls.fetch_tls_dtor(Some(key)) {\n                 dtor @ Some(_) => dtor,\n+                // We ran each dtor once, start over from the beginning.\n                 None => this.machine.tls.fetch_tls_dtor(None),\n             };\n         }"}]}