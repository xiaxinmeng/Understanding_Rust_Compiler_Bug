{"sha": "0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a", "node_id": "C_kwDOAAsO6NoAKDBmNDBlOTViMmU3MTMxOWI3ZGNkNGM4ZTc3ODJhMzhlZjhjNTIyMmE", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-11-01T03:03:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-01T03:03:43Z"}, "message": "Rollup merge of #103798 - RalfJung:type_name, r=oli-obk\n\ninterpret: move type_name implementation to an interpreter-independent helper file\n\nThis should avoid pinging rust-lang/miri each time that file changes, which is really not necessary.\n\nr? `@oli-obk`", "tree": {"sha": "779e0fe37304f5bd287aa30bde635d22e483f0f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/779e0fe37304f5bd287aa30bde635d22e483f0f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYIyPCRBK7hj4Ov3rIwAAE18IAGV12eazKl0qqwNz5H+1hsTX\ng9PhOCdetjerRklNYxGI3G6nEGuqeSXKtGP7JDVcrCNdHmLkq+KxOD3h2NpmcCeh\nWUzWE0kGP2OG8yrC1QWuK5/XdMoQDUBNjo3ag/wP1ceYx0qCDmo9RTYPjnduPLEU\naFDlCKI6k1X/aFtBON6YZbi3vxXTk/X9T/il2IjTbXL0ly3n8mlhwDl8U2VMfi5r\nkg2gdVfRfkks7FqpHewaVK0H+Qs/wGrABgO7UNsNZ7HcLkCQFPgl3RjLIEVvcDrr\nwT6tZdC0AdzHwLcwez+W4aWfYTFZV7qos0CfWE3B4xM7/fizT07y66JAdJvjXKY=\n=O48Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 779e0fe37304f5bd287aa30bde635d22e483f0f0\nparent 2c7f1374ec9f572c234eca245dc74da7c933131f\nparent fa2aa1cedbe258fe13e8cb0933da95810a8f34ed\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1667271823 +0900\ncommitter GitHub <noreply@github.com> 1667271823 +0900\n\nRollup merge of #103798 - RalfJung:type_name, r=oli-obk\n\ninterpret: move type_name implementation to an interpreter-independent helper file\n\nThis should avoid pinging rust-lang/miri each time that file changes, which is really not necessary.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a", "html_url": "https://github.com/rust-lang/rust/commit/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7f1374ec9f572c234eca245dc74da7c933131f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7f1374ec9f572c234eca245dc74da7c933131f", "html_url": "https://github.com/rust-lang/rust/commit/2c7f1374ec9f572c234eca245dc74da7c933131f"}, {"sha": "fa2aa1cedbe258fe13e8cb0933da95810a8f34ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2aa1cedbe258fe13e8cb0933da95810a8f34ed", "html_url": "https://github.com/rust-lang/rust/commit/fa2aa1cedbe258fe13e8cb0933da95810a8f34ed"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "b92a68788475fcd60c2907b4d36f5cfef02b3e92", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a", "patch": "@@ -7,7 +7,9 @@ use std::convert::TryFrom;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     self,\n-    interpret::{ConstValue, GlobalId, InterpResult, PointerArithmetic, Scalar},\n+    interpret::{\n+        Allocation, ConstAllocation, ConstValue, GlobalId, InterpResult, PointerArithmetic, Scalar,\n+    },\n     BinOp, NonDivergingIntrinsic,\n };\n use rustc_middle::ty;\n@@ -23,7 +25,6 @@ use super::{\n };\n \n mod caller_location;\n-mod type_name;\n \n fn numeric_intrinsic<Prov>(name: Symbol, bits: u128, kind: Primitive) -> Scalar<Prov> {\n     let size = match kind {\n@@ -42,6 +43,13 @@ fn numeric_intrinsic<Prov>(name: Symbol, bits: u128, kind: Primitive) -> Scalar<\n     Scalar::from_uint(bits_out, size)\n }\n \n+/// Directly returns an `Allocation` containing an absolute path representation of the given type.\n+pub(crate) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ConstAllocation<'tcx> {\n+    let path = crate::util::type_name(tcx, ty);\n+    let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n+    tcx.intern_const_alloc(alloc)\n+}\n+\n /// The logic for all nullary intrinsics is implemented here. These intrinsics don't get evaluated\n /// inside an `InterpCx` and instead have their value computed directly from rustc internal info.\n pub(crate) fn eval_nullary_intrinsic<'tcx>(\n@@ -55,7 +63,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n     Ok(match name {\n         sym::type_name => {\n             ensure_monomorphic_enough(tcx, tp_ty)?;\n-            let alloc = type_name::alloc_type_name(tcx, tp_ty);\n+            let alloc = alloc_type_name(tcx, tp_ty);\n             ConstValue::Slice { data: alloc, start: 0, end: alloc.inner().len() }\n         }\n         sym::needs_drop => {"}, {"sha": "4d0f81a4060088b669d85902ca9013a50f7e3e4c", "filename": "compiler/rustc_const_eval/src/util/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs?ref=0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a", "patch": "@@ -4,9 +4,11 @@ mod call_kind;\n pub mod collect_writes;\n mod find_self_call;\n mod might_permit_raw_init;\n+mod type_name;\n \n pub use self::aggregate::expand_aggregate;\n pub use self::alignment::is_disaligned;\n pub use self::call_kind::{call_kind, CallDesugaringKind, CallKind};\n pub use self::find_self_call::find_self_call;\n pub use self::might_permit_raw_init::might_permit_raw_init;\n+pub use self::type_name::type_name;"}, {"sha": "221efc6f98140b129a82a0e0e54dbbf707f66962", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "renamed", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=0f40e95b2e71319b7dcd4c8e7782a38ef8c5222a", "patch": "@@ -1,7 +1,6 @@\n use rustc_data_structures::intern::Interned;\n use rustc_hir::def_id::CrateNum;\n use rustc_hir::definitions::DisambiguatedDefPathData;\n-use rustc_middle::mir::interpret::{Allocation, ConstAllocation};\n use rustc_middle::ty::{\n     self,\n     print::{PrettyPrinter, Print, Printer},\n@@ -193,9 +192,6 @@ impl Write for AbsolutePathPrinter<'_> {\n     }\n }\n \n-/// Directly returns an `Allocation` containing an absolute path representation of the given type.\n-pub(crate) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ConstAllocation<'tcx> {\n-    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n-    let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n-    tcx.intern_const_alloc(alloc)\n+pub fn type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> String {\n+    AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path\n }", "previous_filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs"}]}