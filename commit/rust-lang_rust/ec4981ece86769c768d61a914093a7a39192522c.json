{"sha": "ec4981ece86769c768d61a914093a7a39192522c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNDk4MWVjZTg2NzY5Yzc2OGQ2MWE5MTQwOTNhN2EzOTE5MjUyMmM=", "commit": {"author": {"name": "Vojtech Kral", "email": "vojtech@kral.hk", "date": "2015-01-27T02:38:07Z"}, "committer": {"name": "Vojtech Kral", "email": "vojtech@kral.hk", "date": "2015-01-27T02:41:49Z"}, "message": "Thread native name setting, fix #10302", "tree": {"sha": "e9afe09961dc83f92a2f03be21ade1ea844e4d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9afe09961dc83f92a2f03be21ade1ea844e4d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec4981ece86769c768d61a914093a7a39192522c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4981ece86769c768d61a914093a7a39192522c", "html_url": "https://github.com/rust-lang/rust/commit/ec4981ece86769c768d61a914093a7a39192522c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec4981ece86769c768d61a914093a7a39192522c/comments", "author": {"login": "vojtechkral", "id": 424891, "node_id": "MDQ6VXNlcjQyNDg5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/424891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vojtechkral", "html_url": "https://github.com/vojtechkral", "followers_url": "https://api.github.com/users/vojtechkral/followers", "following_url": "https://api.github.com/users/vojtechkral/following{/other_user}", "gists_url": "https://api.github.com/users/vojtechkral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vojtechkral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vojtechkral/subscriptions", "organizations_url": "https://api.github.com/users/vojtechkral/orgs", "repos_url": "https://api.github.com/users/vojtechkral/repos", "events_url": "https://api.github.com/users/vojtechkral/events{/privacy}", "received_events_url": "https://api.github.com/users/vojtechkral/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vojtechkral", "id": 424891, "node_id": "MDQ6VXNlcjQyNDg5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/424891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vojtechkral", "html_url": "https://github.com/vojtechkral", "followers_url": "https://api.github.com/users/vojtechkral/followers", "following_url": "https://api.github.com/users/vojtechkral/following{/other_user}", "gists_url": "https://api.github.com/users/vojtechkral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vojtechkral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vojtechkral/subscriptions", "organizations_url": "https://api.github.com/users/vojtechkral/orgs", "repos_url": "https://api.github.com/users/vojtechkral/repos", "events_url": "https://api.github.com/users/vojtechkral/events{/privacy}", "received_events_url": "https://api.github.com/users/vojtechkral/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a637365b10c175e23af40171af1724d5474cb303", "url": "https://api.github.com/repos/rust-lang/rust/commits/a637365b10c175e23af40171af1724d5474cb303", "html_url": "https://github.com/rust-lang/rust/commit/a637365b10c175e23af40171af1724d5474cb303"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "3c34e1f9dd4c06f6c795bc7ed29508778fc94cd9", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ec4981ece86769c768d61a914093a7a39192522c/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4981ece86769c768d61a914093a7a39192522c/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=ec4981ece86769c768d61a914093a7a39192522c", "patch": "@@ -17,6 +17,7 @@ use ptr;\n use libc::consts::os::posix01::{PTHREAD_CREATE_JOINABLE, PTHREAD_STACK_MIN};\n use libc;\n use thunk::Thunk;\n+use ffi::CString;\n \n use sys_common::stack::RED_ZONE;\n use sys_common::thread::*;\n@@ -206,6 +207,29 @@ pub unsafe fn create(stack: uint, p: Thunk) -> rust_thread {\n     native\n }\n \n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+pub unsafe fn set_name(name: &str) {\n+    // Using prctl() rather than pthread_setname_np(),\n+    // because pthread_setname_np() wasn't added until glibc 2.12\n+    // PR_SET_NAME since Linux 2.6.9\n+    let cname = CString::from_slice(name.as_bytes());\n+    prctl(15i32 /* = PR_SET_NAME */, cname.as_ptr() as u64, 0u64, 0u64, 0u64);\n+}\n+\n+#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+pub unsafe fn set_name(name: &str) {\n+    // pthread_set_name_np() since almost forever on all BSDs\n+    let cname = CString::from_slice(name.as_bytes());\n+    pthread_set_name_np(pthread_self(), cname.as_ptr());\n+}\n+\n+#[cfg(target_os = \"macos\")]\n+pub unsafe fn set_name(name: &str) {\n+    // pthread_setname_np() since OS X 10.6\n+    let cname = CString::from_slice(name.as_bytes());\n+    pthread_setname_np(cname.as_ptr());\n+}\n+\n pub unsafe fn join(native: rust_thread) {\n     assert_eq!(pthread_join(native, ptr::null_mut()), 0);\n }\n@@ -246,6 +270,15 @@ fn min_stack_size(_: *const libc::pthread_attr_t) -> libc::size_t {\n     PTHREAD_STACK_MIN\n }\n \n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+extern {\n+    fn prctl(option: libc::c_int,\n+        arg2: libc::c_ulong,\n+        arg3: libc::c_ulong,\n+        arg4: libc::c_ulong,\n+        arg5: libc::c_ulong) -> libc::c_int;\n+}\n+\n #[cfg(any(target_os = \"linux\"))]\n extern {\n     pub fn pthread_self() -> libc::pthread_t;\n@@ -258,11 +291,18 @@ extern {\n                                  stacksize: *mut libc::size_t) -> libc::c_int;\n }\n \n+#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+extern {\n+    pub fn pthread_self() -> libc::pthread_t;\n+    fn pthread_set_name_np(tid: libc::pthread_t, name: *const c_char);\n+}\n+\n #[cfg(target_os = \"macos\")]\n extern {\n     pub fn pthread_self() -> libc::pthread_t;\n     pub fn pthread_get_stackaddr_np(thread: libc::pthread_t) -> *mut libc::c_void;\n     pub fn pthread_get_stacksize_np(thread: libc::pthread_t) -> libc::size_t;\n+    fn pthread_setname_np(name: *const c_char) -> libc::c_int;\n }\n \n extern {"}, {"sha": "b6027ea2e7e8e42b1942b6b235b85cf69c6e5ca6", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec4981ece86769c768d61a914093a7a39192522c/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4981ece86769c768d61a914093a7a39192522c/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=ec4981ece86769c768d61a914093a7a39192522c", "patch": "@@ -67,6 +67,13 @@ pub unsafe fn create(stack: uint, p: Thunk) -> rust_thread {\n     return ret;\n }\n \n+pub unsafe fn set_name(name: &str) {\n+    // Windows threads are nameless\n+    // The names in MSVC debugger are obtained using a \"magic\" exception,\n+    // which requires a use of C++ macros.\n+    // See https://msdn.microsoft.com/en-us/library/xcb2z8hs.aspx\n+}\n+\n pub unsafe fn join(native: rust_thread) {\n     use libc::consts::os::extra::INFINITE;\n     WaitForSingleObject(native, INFINITE);"}, {"sha": "0cab7e69928df18ea536b50708ab4f27a1b635e8", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec4981ece86769c768d61a914093a7a39192522c/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4981ece86769c768d61a914093a7a39192522c/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=ec4981ece86769c768d61a914093a7a39192522c", "patch": "@@ -275,6 +275,10 @@ impl Builder {\n             unsafe {\n                 stack::record_os_managed_stack_bounds(my_stack_bottom, my_stack_top);\n             }\n+            match their_thread.name() {\n+                Some(thename) => unsafe { imp::set_name(thename.as_slice()); },\n+                None => {}\n+            }\n             thread_info::set(\n                 (my_stack_bottom, my_stack_top),\n                 unsafe { imp::guard::current() },"}]}