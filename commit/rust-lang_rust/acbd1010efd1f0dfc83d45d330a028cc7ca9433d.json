{"sha": "acbd1010efd1f0dfc83d45d330a028cc7ca9433d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYmQxMDEwZWZkMWYwZGZjODNkNDVkMzMwYTAyOGNjN2NhOTQzM2Q=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-26T19:43:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-26T19:43:28Z"}, "message": "Rollup merge of #81369 - tgnottingham:codegen-to-llvm-ir-wall-time, r=lcnr\n\nrustc_codegen_ssa: use wall time for codegen_to_LLVM_IR time-passes entry\n\nUse elapsed wall time spent on codegen_to_LLVM_IR for all CGUs as a\nwhole, rather than the sum for each CGU (the distinction matters for\nparallel builds, where some CGUs are processed in parallel).", "tree": {"sha": "a4f59ddcb72a8675b42c01fcf925ee5897809e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f59ddcb72a8675b42c01fcf925ee5897809e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acbd1010efd1f0dfc83d45d330a028cc7ca9433d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgEHDhCRBK7hj4Ov3rIwAAdHIIAJ+tlDezFToYKZ7UaWs6Hlso\nge5Xq7kwwh+U2tdMXEPazValSlfoss7boQtp8/rsgHY7ff4g24pnPGYwW0GxlotB\nrtfgbrerJTV6CDouqYpPZYKH6Y5bgreJCa69NehHiDvHORL6y0Y191xGThXjxzqw\nB6SFW8FuVJXI0qSLzoFHKpuyf0MJZRPxrQJFf+o/q3CEW0WSMXaRdMa6u+ORR9IV\nTYqKABKbgnO2PAQlXXiymE0JWpJsj+273KqUiPkJJs5HvbReO45MZSl6/BuJqjpH\nX9jDIUdiUgk0zmOdJRYaAedYmWCehVNm9NagYkvKKpZJxsWY7jEdO/HvSXXeSpk=\n=cWbd\n-----END PGP SIGNATURE-----\n", "payload": "tree a4f59ddcb72a8675b42c01fcf925ee5897809e57\nparent 3741844711916e306bf570232417d4155c1c7caf\nparent 59195a277246ec194ca3a02ecc563c4dd9c06857\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611690208 +0900\ncommitter GitHub <noreply@github.com> 1611690208 +0900\n\nRollup merge of #81369 - tgnottingham:codegen-to-llvm-ir-wall-time, r=lcnr\n\nrustc_codegen_ssa: use wall time for codegen_to_LLVM_IR time-passes entry\n\nUse elapsed wall time spent on codegen_to_LLVM_IR for all CGUs as a\nwhole, rather than the sum for each CGU (the distinction matters for\nparallel builds, where some CGUs are processed in parallel).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acbd1010efd1f0dfc83d45d330a028cc7ca9433d", "html_url": "https://github.com/rust-lang/rust/commit/acbd1010efd1f0dfc83d45d330a028cc7ca9433d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acbd1010efd1f0dfc83d45d330a028cc7ca9433d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3741844711916e306bf570232417d4155c1c7caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3741844711916e306bf570232417d4155c1c7caf", "html_url": "https://github.com/rust-lang/rust/commit/3741844711916e306bf570232417d4155c1c7caf"}, {"sha": "59195a277246ec194ca3a02ecc563c4dd9c06857", "url": "https://api.github.com/repos/rust-lang/rust/commits/59195a277246ec194ca3a02ecc563c4dd9c06857", "html_url": "https://github.com/rust-lang/rust/commit/59195a277246ec194ca3a02ecc563c4dd9c06857"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "ca7d3d1d81bf04a5d6499f82653eecccdf5aa4b6", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/acbd1010efd1f0dfc83d45d330a028cc7ca9433d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acbd1010efd1f0dfc83d45d330a028cc7ca9433d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=acbd1010efd1f0dfc83d45d330a028cc7ca9433d", "patch": "@@ -13,7 +13,7 @@ use crate::{CachedModuleCodegen, CrateInfo, MemFlags, ModuleCodegen, ModuleKind}\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::print_time_passes_entry;\n-use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n+use rustc_data_structures::sync::{par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n@@ -554,8 +554,6 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         codegen_units\n     };\n \n-    let total_codegen_time = Lock::new(Duration::new(0, 0));\n-\n     // The non-parallel compiler can only translate codegen units to LLVM IR\n     // on a single thread, leading to a staircase effect where the N LLVM\n     // threads have to wait on the single codegen threads to generate work\n@@ -578,23 +576,25 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                     .collect();\n \n                 // Compile the found CGUs in parallel.\n-                par_iter(cgus)\n+                let start_time = Instant::now();\n+\n+                let pre_compiled_cgus = par_iter(cgus)\n                     .map(|(i, _)| {\n-                        let start_time = Instant::now();\n                         let module = backend.compile_codegen_unit(tcx, codegen_units[i].name());\n-                        let mut time = total_codegen_time.lock();\n-                        *time += start_time.elapsed();\n                         (i, module)\n                     })\n-                    .collect()\n+                    .collect();\n+\n+                (pre_compiled_cgus, start_time.elapsed())\n             })\n         } else {\n-            FxHashMap::default()\n+            (FxHashMap::default(), Duration::new(0, 0))\n         }\n     };\n \n     let mut cgu_reuse = Vec::new();\n     let mut pre_compiled_cgus: Option<FxHashMap<usize, _>> = None;\n+    let mut total_codegen_time = Duration::new(0, 0);\n \n     for (i, cgu) in codegen_units.iter().enumerate() {\n         ongoing_codegen.wait_for_signal_to_codegen_item();\n@@ -607,7 +607,9 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                 codegen_units.iter().map(|cgu| determine_cgu_reuse(tcx, &cgu)).collect()\n             });\n             // Pre compile some CGUs\n-            pre_compiled_cgus = Some(pre_compile_cgus(&cgu_reuse));\n+            let (compiled_cgus, codegen_time) = pre_compile_cgus(&cgu_reuse);\n+            pre_compiled_cgus = Some(compiled_cgus);\n+            total_codegen_time += codegen_time;\n         }\n \n         let cgu_reuse = cgu_reuse[i];\n@@ -621,8 +623,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                     } else {\n                         let start_time = Instant::now();\n                         let module = backend.compile_codegen_unit(tcx, cgu.name());\n-                        let mut time = total_codegen_time.lock();\n-                        *time += start_time.elapsed();\n+                        total_codegen_time += start_time.elapsed();\n                         module\n                     };\n                 submit_codegened_module_to_llvm(\n@@ -663,11 +664,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n     // Since the main thread is sometimes blocked during codegen, we keep track\n     // -Ztime-passes output manually.\n-    print_time_passes_entry(\n-        tcx.sess.time_passes(),\n-        \"codegen_to_LLVM_IR\",\n-        total_codegen_time.into_inner(),\n-    );\n+    print_time_passes_entry(tcx.sess.time_passes(), \"codegen_to_LLVM_IR\", total_codegen_time);\n \n     ongoing_codegen.check_for_errors(tcx.sess);\n "}]}