{"sha": "54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "node_id": "C_kwDOAAsO6NoAKDU0ZDdiMzI3ZTUxODJiOTdmY2RiOGQ5MGJmNzg1M2ZmZTU0MzY0YzM", "commit": {"author": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-06-08T04:38:50Z"}, "committer": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-06-08T04:38:50Z"}, "message": "Removed stable/unstable sort arg from into_sorted_stable_ord, fixed a few misc issues, added collect to UnordItems", "tree": {"sha": "0fe3d310bbd67c354f4157cfad9b7dc9ddbbc6e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fe3d310bbd67c354f4157cfad9b7dc9ddbbc6e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "html_url": "https://github.com/rust-lang/rust/commit/54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/comments", "author": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f638c12434e3c277fde8f4245273c2cc3c8110", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f638c12434e3c277fde8f4245273c2cc3c8110", "html_url": "https://github.com/rust-lang/rust/commit/f5f638c12434e3c277fde8f4245273c2cc3c8110"}], "stats": {"total": 129, "additions": 81, "deletions": 48}, "files": [{"sha": "e1b9987f5781619a813c31e172b9f51238e58845", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -414,7 +414,9 @@ pub struct Size {\n // Safety: Ord is implement as just comparing numerical values and numerical values\n // are not changed by (de-)serialization.\n #[cfg(feature = \"nightly\")]\n-unsafe impl StableOrd for Size {}\n+unsafe impl StableOrd for Size {\n+    const CAN_USE_UNSTABLE_SORT: bool = true;\n+}\n \n // This is debug-printed a lot in larger structs, don't waste too much space there\n impl fmt::Debug for Size {"}, {"sha": "0c1fb7518fa3bb477bbd95dbc8dd22b7937986c9", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -233,7 +233,17 @@ pub trait ToStableHashKey<HCX> {\n ///  - `DefIndex`, `CrateNum`, `LocalDefId`, because their concrete\n ///    values depend on state that might be different between\n ///    compilation sessions.\n-pub unsafe trait StableOrd: Ord {}\n+///\n+/// The associated constant `CAN_USE_UNSTABLE_SORT` denotes whether\n+/// unstable sorting can be used for this type. Set to true if and\n+/// only if `a == b` implies `a` and `b` are fully indistinguishable.\n+pub unsafe trait StableOrd: Ord {\n+    const CAN_USE_UNSTABLE_SORT: bool;\n+}\n+\n+unsafe impl<T: StableOrd> StableOrd for &T {\n+    const CAN_USE_UNSTABLE_SORT: bool = T::CAN_USE_UNSTABLE_SORT;\n+}\n \n /// Implement HashStable by just calling `Hash::hash()`. Also implement `StableOrd` for the type since\n /// that has the same requirements.\n@@ -253,7 +263,9 @@ macro_rules! impl_stable_traits_for_trivial_type {\n             }\n         }\n \n-        unsafe impl $crate::stable_hasher::StableOrd for $t {}\n+        unsafe impl $crate::stable_hasher::StableOrd for $t {\n+            const CAN_USE_UNSTABLE_SORT: bool = true;\n+        }\n     };\n }\n \n@@ -339,7 +351,9 @@ impl<T1: HashStable<CTX>, T2: HashStable<CTX>, CTX> HashStable<CTX> for (T1, T2)\n     }\n }\n \n-unsafe impl<T1: StableOrd, T2: StableOrd> StableOrd for (T1, T2) {}\n+unsafe impl<T1: StableOrd, T2: StableOrd> StableOrd for (T1, T2) {\n+    const CAN_USE_UNSTABLE_SORT: bool = T1::CAN_USE_UNSTABLE_SORT && T2::CAN_USE_UNSTABLE_SORT;\n+}\n \n impl<T1, T2, T3, CTX> HashStable<CTX> for (T1, T2, T3)\n where\n@@ -355,7 +369,10 @@ where\n     }\n }\n \n-unsafe impl<T1: StableOrd, T2: StableOrd, T3: StableOrd> StableOrd for (T1, T2, T3) {}\n+unsafe impl<T1: StableOrd, T2: StableOrd, T3: StableOrd> StableOrd for (T1, T2, T3) {\n+    const CAN_USE_UNSTABLE_SORT: bool =\n+        T1::CAN_USE_UNSTABLE_SORT && T2::CAN_USE_UNSTABLE_SORT && T3::CAN_USE_UNSTABLE_SORT;\n+}\n \n impl<T1, T2, T3, T4, CTX> HashStable<CTX> for (T1, T2, T3, T4)\n where\n@@ -376,6 +393,10 @@ where\n unsafe impl<T1: StableOrd, T2: StableOrd, T3: StableOrd, T4: StableOrd> StableOrd\n     for (T1, T2, T3, T4)\n {\n+    const CAN_USE_UNSTABLE_SORT: bool = T1::CAN_USE_UNSTABLE_SORT\n+        && T2::CAN_USE_UNSTABLE_SORT\n+        && T3::CAN_USE_UNSTABLE_SORT\n+        && T4::CAN_USE_UNSTABLE_SORT;\n }\n \n impl<T: HashStable<CTX>, CTX> HashStable<CTX> for [T] {\n@@ -468,7 +489,9 @@ impl<CTX> HashStable<CTX> for str {\n     }\n }\n \n-unsafe impl StableOrd for &str {}\n+unsafe impl StableOrd for &str {\n+    const CAN_USE_UNSTABLE_SORT: bool = true;\n+}\n \n impl<CTX> HashStable<CTX> for String {\n     #[inline]\n@@ -479,7 +502,9 @@ impl<CTX> HashStable<CTX> for String {\n \n // Safety: String comparison only depends on their contents and the\n // contents are not changed by (de-)serialization.\n-unsafe impl StableOrd for String {}\n+unsafe impl StableOrd for String {\n+    const CAN_USE_UNSTABLE_SORT: bool = true;\n+}\n \n impl<HCX> ToStableHashKey<HCX> for String {\n     type KeyType = String;\n@@ -505,7 +530,9 @@ impl<CTX> HashStable<CTX> for bool {\n }\n \n // Safety: sort order of bools is not changed by (de-)serialization.\n-unsafe impl StableOrd for bool {}\n+unsafe impl StableOrd for bool {\n+    const CAN_USE_UNSTABLE_SORT: bool = true;\n+}\n \n impl<T, CTX> HashStable<CTX> for Option<T>\n where\n@@ -523,7 +550,9 @@ where\n }\n \n // Safety: the Option wrapper does not add instability to comparison.\n-unsafe impl<T: StableOrd> StableOrd for Option<T> {}\n+unsafe impl<T: StableOrd> StableOrd for Option<T> {\n+    const CAN_USE_UNSTABLE_SORT: bool = T::CAN_USE_UNSTABLE_SORT;\n+}\n \n impl<T1, T2, CTX> HashStable<CTX> for Result<T1, T2>\n where"}, {"sha": "e18c7b415f6cf32be5ba35f71668a0e17859a4fd", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -140,12 +140,12 @@ impl<T: Ord, I: Iterator<Item = T>> UnordItems<T, I> {\n     }\n \n     #[inline]\n-    pub fn into_sorted_stable_ord(self, use_stable_sort: bool) -> Vec<T>\n+    pub fn into_sorted_stable_ord(self) -> Vec<T>\n     where\n         T: Ord + StableOrd,\n     {\n         let mut items: Vec<T> = self.0.collect();\n-        if use_stable_sort {\n+        if !T::CAN_USE_UNSTABLE_SORT {\n             items.sort();\n         } else {\n             items.sort_unstable()\n@@ -161,6 +161,10 @@ impl<T: Ord, I: Iterator<Item = T>> UnordItems<T, I> {\n         items.sort_by_cached_key(|x| x.to_stable_hash_key(hcx));\n         items\n     }\n+\n+    pub fn collect<C: From<UnordItems<T, I>>>(self) -> C {\n+        self.into()\n+    }\n }\n \n /// This is a set collection type that tries very hard to not expose"}, {"sha": "34c615779366329bf09a81fe3830c4d2f5a5ebd5", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -166,7 +166,9 @@ impl ItemLocalId {\n \n // Safety: Ord is implement as just comparing the ItemLocalId's numerical\n // values and these are not changed by (de-)serialization.\n-unsafe impl StableOrd for ItemLocalId {}\n+unsafe impl StableOrd for ItemLocalId {\n+    const CAN_USE_UNSTABLE_SORT: bool = true;\n+}\n \n /// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_ID`.\n pub const CRATE_HIR_ID: HirId ="}, {"sha": "0111a6d302d4a679b803aba7addeff2de812ba1c", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -119,7 +119,7 @@ impl<'tcx> AssertModuleSource<'tcx> {\n \n         if !self.available_cgus.contains(&cgu_name) {\n             let cgu_names: Vec<&str> =\n-                self.available_cgus.items().map(|cgu| cgu.as_str()).into_sorted_stable_ord(true);\n+                self.available_cgus.items().map(|cgu| cgu.as_str()).into_sorted_stable_ord();\n             self.tcx.sess.emit_err(errors::NoModuleNamed {\n                 span: attr.span,\n                 user_path,"}, {"sha": "cbe77e7b16de8dfcfcfbb964b75a0690230fa23b", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -198,7 +198,7 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n         let (name, mut auto) = self.auto_labels(item_id, attr);\n         let except = self.except(attr);\n         let loaded_from_disk = self.loaded_from_disk(attr);\n-        for e in except.items().map(|x| x.as_str()).into_sorted_stable_ord(false) {\n+        for e in except.items().map(|x| x.as_str()).into_sorted_stable_ord() {\n             if !auto.remove(e) {\n                 self.tcx.sess.emit_fatal(errors::AssertionAuto { span: attr.span, name, e });\n             }\n@@ -377,16 +377,16 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n                 continue;\n             };\n             self.checked_attrs.insert(attr.id);\n-            for label in assertion.clean.items().map(|x| x.as_str()).into_sorted_stable_ord(false) {\n+            for label in assertion.clean.items().map(|x| x.as_str()).into_sorted_stable_ord() {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_clean(item_span, dep_node);\n             }\n-            for label in assertion.dirty.items().map(|x| x.as_str()).into_sorted_stable_ord(false) {\n+            for label in assertion.dirty.items().map(|x| x.as_str()).into_sorted_stable_ord() {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_dirty(item_span, dep_node);\n             }\n             for label in\n-                assertion.loaded_from_disk.items().map(|x| x.as_str()).into_sorted_stable_ord(false)\n+                assertion.loaded_from_disk.items().map(|x| x.as_str()).into_sorted_stable_ord()\n             {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_loaded_from_disk(item_span, dep_node);"}, {"sha": "243057b99bca206627e4d0c85ce64a5ab230b173", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -676,11 +676,8 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n     // Delete all lock files, that don't have an associated directory. They must\n     // be some kind of leftover\n-    let lock_file_to_session_dir_iter = lock_file_to_session_dir\n-        .items()\n-        .map(|(file, dir)| (file.as_str(), dir.as_ref().map(|y| y.as_str())));\n     for (lock_file_name, directory_name) in\n-        lock_file_to_session_dir_iter.into_sorted_stable_ord(false)\n+        lock_file_to_session_dir.items().into_sorted_stable_ord()\n     {\n         if directory_name.is_none() {\n             let Ok(timestamp) = extract_timestamp_from_session_dir(lock_file_name) else {\n@@ -712,10 +709,10 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n     }\n \n     // Filter out `None` directories\n-    let lock_file_to_session_dir: UnordMap<String, String> =\n-        UnordMap::from(lock_file_to_session_dir.into_items().filter_map(\n-            |(lock_file_name, directory_name)| directory_name.map(|n| (lock_file_name, n)),\n-        ));\n+    let lock_file_to_session_dir: UnordMap<String, String> = lock_file_to_session_dir\n+        .into_items()\n+        .filter_map(|(lock_file_name, directory_name)| directory_name.map(|n| (lock_file_name, n)))\n+        .into();\n \n     // Delete all session directories that don't have a lock file.\n     for directory_name in session_directories {\n@@ -821,7 +818,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n             }\n             None\n         });\n-    let deletion_candidates = UnordMap::from(deletion_candidates);\n+    let deletion_candidates = deletion_candidates.into();\n \n     // Delete all but the most recent of the candidates\n     all_except_most_recent(deletion_candidates).into_items().all(|(path, lock)| {"}, {"sha": "644b8187621c979afa9a4c21c69c3347a4ff95b2", "filename": "compiler/rustc_incremental/src/persist/fs/tests.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs%2Ftests.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -2,23 +2,16 @@ use super::*;\n \n #[test]\n fn test_all_except_most_recent() {\n-    let computed: UnordMap<_, Option<flock::Lock>> = UnordMap::from_iter([\n+    let input: UnordMap<_, Option<flock::Lock>> = UnordMap::from_iter([\n         ((UNIX_EPOCH + Duration::new(4, 0), PathBuf::from(\"4\")), None),\n         ((UNIX_EPOCH + Duration::new(1, 0), PathBuf::from(\"1\")), None),\n         ((UNIX_EPOCH + Duration::new(5, 0), PathBuf::from(\"5\")), None),\n         ((UNIX_EPOCH + Duration::new(3, 0), PathBuf::from(\"3\")), None),\n         ((UNIX_EPOCH + Duration::new(2, 0), PathBuf::from(\"2\")), None),\n     ]);\n-    let mut paths = UnordSet::default();\n-    paths.extend_unord(all_except_most_recent(computed).into_items().map(|(path, _)| path));\n     assert_eq!(\n-        UnordSet::from(paths),\n-        UnordSet::from_iter([\n-            PathBuf::from(\"1\"),\n-            PathBuf::from(\"2\"),\n-            PathBuf::from(\"3\"),\n-            PathBuf::from(\"4\")\n-        ])\n+        all_except_most_recent(input).into_items().map(|(path, _)| path).into_sorted_stable_ord(),\n+        vec![PathBuf::from(\"1\"), PathBuf::from(\"2\"), PathBuf::from(\"3\"), PathBuf::from(\"4\")]\n     );\n \n     assert!(all_except_most_recent(UnordMap::default()).is_empty());"}, {"sha": "bce5ca1e16bd15491715586181a8a00c0bd35e62", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -46,12 +46,7 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n \n /// Removes files for a given work product.\n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n-    for path in work_product\n-        .saved_files\n-        .items()\n-        .map(|(_, path)| path.as_str())\n-        .into_sorted_stable_ord(false)\n-    {\n+    for (_, path) in work_product.saved_files.items().into_sorted_stable_ord() {\n         let path = in_incr_comp_dir_sess(sess, path);\n         if let Err(err) = std_fs::remove_file(&path) {\n             sess.emit_warning(errors::DeleteWorkProduct { path: &path, err });"}, {"sha": "455a8129656d4a915d5da528997c2ace43d49bfb", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -194,10 +194,15 @@ impl<'tcx> Queries<'tcx> {\n             let future_opt = self.dep_graph_future()?.steal();\n             let dep_graph = future_opt\n                 .and_then(|future| {\n-                    let (prev_graph, prev_work_products) =\n+                    let (prev_graph, mut prev_work_products) =\n                         sess.time(\"blocked_on_dep_graph_loading\", || future.open().open(sess));\n-                    let prev_work_products =\n-                        FxIndexMap::from_iter(prev_work_products.into_sorted(&(), false));\n+                    // Convert from UnordMap to FxIndexMap by sorting\n+                    let prev_work_product_ids =\n+                        prev_work_products.items().map(|x| *x.0).into_sorted_stable_ord();\n+                    let prev_work_products = prev_work_product_ids\n+                        .into_iter()\n+                        .map(|x| (x, prev_work_products.remove(&x).unwrap()))\n+                        .collect::<FxIndexMap<_, _>>();\n                     rustc_incremental::build_dep_graph(sess, prev_graph, prev_work_products)\n                 })\n                 .unwrap_or_else(DepGraph::new_disabled);"}, {"sha": "39a4cb1b179b4a265fee2ab3eb72d1e2e37ac998", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -46,7 +46,7 @@ use super::{DepContext, DepKind, FingerprintStyle};\n use crate::ich::StableHashingContext;\n \n use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableOrd, ToStableHashKey};\n use rustc_hir::definitions::DefPathHash;\n use std::fmt;\n use std::hash::Hash;\n@@ -254,3 +254,7 @@ impl<HCX> ToStableHashKey<HCX> for WorkProductId {\n         self.hash\n     }\n }\n+unsafe impl StableOrd for WorkProductId {\n+    // Fingerprint can use unstable (just a tuple of `u64`s), so WorkProductId can as well\n+    const CAN_USE_UNSTABLE_SORT: bool = true;\n+}"}, {"sha": "84d9f75532b0830ce0e60287da1bcef8f00bc5f2", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -311,7 +311,9 @@ pub enum OutputType {\n }\n \n // Safety: Trivial C-Style enums have a stable sort order across compilation sessions.\n-unsafe impl StableOrd for OutputType {}\n+unsafe impl StableOrd for OutputType {\n+    const CAN_USE_UNSTABLE_SORT: bool = true;\n+}\n \n impl<HCX: HashStableContext> ToStableHashKey<HCX> for OutputType {\n     type KeyType = Self;"}, {"sha": "2a3d86988bb04ef5130df6b8312bb60b7a03bad6", "filename": "src/tools/clippy/clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d7b327e5182b97fcdb8d90bf7853ffe54364c3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=54d7b327e5182b97fcdb8d90bf7853ffe54364c3", "patch": "@@ -160,7 +160,7 @@ impl LateLintPass<'_> for WildcardImports {\n                     )\n                 };\n \n-                let mut imports = used_imports.items().map(ToString::to_string).into_sorted_stable_ord(false);\n+                let mut imports = used_imports.items().map(ToString::to_string).into_sorted_stable_ord();\n                 let imports_string = if imports.len() == 1 {\n                     imports.pop().unwrap()\n                 } else if braced_glob {"}]}