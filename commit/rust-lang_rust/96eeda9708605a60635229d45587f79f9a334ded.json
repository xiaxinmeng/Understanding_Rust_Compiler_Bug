{"sha": "96eeda9708605a60635229d45587f79f9a334ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZWVkYTk3MDg2MDVhNjA2MzUyMjlkNDU1ODdmNzlmOWEzMzRkZWQ=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-04-16T04:56:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:08Z"}, "message": "compiletest: Modernize typenames", "tree": {"sha": "382b03a8e91dd9e2e86346f92564e7dab1058578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/382b03a8e91dd9e2e86346f92564e7dab1058578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96eeda9708605a60635229d45587f79f9a334ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96eeda9708605a60635229d45587f79f9a334ded", "html_url": "https://github.com/rust-lang/rust/commit/96eeda9708605a60635229d45587f79f9a334ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96eeda9708605a60635229d45587f79f9a334ded/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0350d8e6d048d7af37ec00622fc40b504981f100", "url": "https://api.github.com/repos/rust-lang/rust/commits/0350d8e6d048d7af37ec00622fc40b504981f100", "html_url": "https://github.com/rust-lang/rust/commit/0350d8e6d048d7af37ec00622fc40b504981f100"}], "stats": {"total": 231, "additions": 119, "deletions": 112}, "files": [{"sha": "ca59f344e288f6e984e3a28394cf80cbf69d48b1", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=96eeda9708605a60635229d45587f79f9a334ded", "patch": "@@ -8,19 +8,52 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::from_str::FromStr;\n+use std::fmt;\n+\n #[deriving(Clone, Eq)]\n-pub enum mode {\n-    mode_compile_fail,\n-    mode_run_fail,\n-    mode_run_pass,\n-    mode_pretty,\n-    mode_debug_info_gdb,\n-    mode_debug_info_lldb,\n-    mode_codegen\n+pub enum Mode {\n+    CompileFail,\n+    RunFail,\n+    RunPass,\n+    Pretty,\n+    DebugInfoGdb,\n+    DebugInfoLldb,\n+    Codegen\n+}\n+\n+impl FromStr for Mode {\n+    fn from_str(s: &str) -> Option<Mode> {\n+        match s {\n+          \"compile-fail\" => Some(CompileFail),\n+          \"run-fail\" => Some(RunFail),\n+          \"run-pass\" => Some(RunPass),\n+          \"pretty\" => Some(Pretty),\n+          \"debuginfo-lldb\" => Some(DebugInfoLldb),\n+          \"debuginfo-gdb\" => Some(DebugInfoGdb),\n+          \"codegen\" => Some(Codegen),\n+          _ => None,\n+        }\n+    }\n+}\n+\n+impl fmt::Show for Mode {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let msg = match *self {\n+          CompileFail => \"compile-fail\",\n+          RunFail => \"run-fail\",\n+          RunPass => \"run-pass\",\n+          Pretty => \"pretty\",\n+          DebugInfoGdb => \"debuginfo-gdb\",\n+          DebugInfoLldb => \"debuginfo-lldb\",\n+          Codegen => \"codegen\",\n+        };\n+        write!(f.buf, \"{}\", msg)\n+    }\n }\n \n #[deriving(Clone)]\n-pub struct config {\n+pub struct Config {\n     // The library paths required for running the compiler\n     pub compile_lib_path: ~str,\n \n@@ -49,7 +82,7 @@ pub struct config {\n     pub stage_id: ~str,\n \n     // The test mode, compile-fail, run-fail, run-pass\n-    pub mode: mode,\n+    pub mode: Mode,\n \n     // Run ignored tests\n     pub run_ignored: bool,"}, {"sha": "d23182b5225986a50936785e971d46eaff838ed8", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 22, "deletions": 49, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=96eeda9708605a60635229d45587f79f9a334ded", "patch": "@@ -14,7 +14,6 @@\n // we use our own (green) start below; do not link in libnative; issue #13247.\n #![no_start]\n \n-#![allow(non_camel_case_types)]\n #![deny(warnings)]\n \n extern crate test;\n@@ -27,9 +26,10 @@ extern crate rustuv;\n use std::os;\n use std::io;\n use std::io::fs;\n+use std::from_str::FromStr;\n use getopts::{optopt, optflag, reqopt};\n-use common::{config, mode_run_pass, mode_run_fail, mode_compile_fail, mode_pretty,\n-             mode_debug_info_gdb, mode_debug_info_lldb, mode_codegen, mode};\n+use common::Config;\n+use common::{Pretty, DebugInfo, Codegen};\n use util::logv;\n \n pub mod procsrv;\n@@ -51,7 +51,7 @@ pub fn main() {\n     run_tests(&config);\n }\n \n-pub fn parse_config(args: Vec<~str> ) -> config {\n+pub fn parse_config(args: Vec<~str> ) -> Config {\n \n     let groups : Vec<getopts::OptGroup> =\n         vec!(reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n@@ -112,7 +112,7 @@ pub fn parse_config(args: Vec<~str> ) -> config {\n         Path::new(m.opt_str(nm).unwrap())\n     }\n \n-    config {\n+    Config {\n         compile_lib_path: matches.opt_str(\"compile-lib-path\").unwrap(),\n         run_lib_path: matches.opt_str(\"run-lib-path\").unwrap(),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n@@ -122,7 +122,7 @@ pub fn parse_config(args: Vec<~str> ) -> config {\n         build_base: opt_path(matches, \"build-base\"),\n         aux_base: opt_path(matches, \"aux-base\"),\n         stage_id: matches.opt_str(\"stage-id\").unwrap(),\n-        mode: str_mode(matches.opt_str(\"mode\").unwrap()),\n+        mode: FromStr::from_str(matches.opt_str(\"mode\").unwrap()).expect(\"invalid mode\"),\n         run_ignored: matches.opt_present(\"ignored\"),\n         filter:\n             if !matches.free.is_empty() {\n@@ -155,7 +155,7 @@ pub fn parse_config(args: Vec<~str> ) -> config {\n     }\n }\n \n-pub fn log_config(config: &config) {\n+pub fn log_config(config: &Config) {\n     let c = config;\n     logv(c, format!(\"configuration:\"));\n     logv(c, format!(\"compile_lib_path: {}\", config.compile_lib_path));\n@@ -164,7 +164,7 @@ pub fn log_config(config: &config) {\n     logv(c, format!(\"src_base: {}\", config.src_base.display()));\n     logv(c, format!(\"build_base: {}\", config.build_base.display()));\n     logv(c, format!(\"stage_id: {}\", config.stage_id));\n-    logv(c, format!(\"mode: {}\", mode_str(config.mode)));\n+    logv(c, format!(\"mode: {}\", config.mode));\n     logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n     logv(c, format!(\"filter: {}\", opt_str(&config.filter)));\n     logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n@@ -198,35 +198,10 @@ pub fn opt_str2(maybestr: Option<~str>) -> ~str {\n     match maybestr { None => \"(none)\".to_owned(), Some(s) => { s } }\n }\n \n-pub fn str_mode(s: ~str) -> mode {\n-    match s.as_slice() {\n-        \"compile-fail\" => mode_compile_fail,\n-        \"run-fail\" => mode_run_fail,\n-        \"run-pass\" => mode_run_pass,\n-        \"pretty\" => mode_pretty,\n-        \"debuginfo-gdb\" => mode_debug_info_gdb,\n-        \"debuginfo-lldb\" => mode_debug_info_lldb,\n-        \"codegen\" => mode_codegen,\n-        s => fail!(\"invalid mode: \" + s)\n-    }\n-}\n-\n-pub fn mode_str(mode: mode) -> ~str {\n-    match mode {\n-      mode_compile_fail => \"compile-fail\".to_owned(),\n-      mode_run_fail => \"run-fail\".to_owned(),\n-      mode_run_pass => \"run-pass\".to_owned(),\n-      mode_pretty => \"pretty\".to_owned(),\n-      mode_debug_info_gdb => \"debuginfo-gdb\".to_owned(),\n-      mode_debug_info_lldb => \"debuginfo-lldb\".to_owned(),\n-      mode_codegen => \"codegen\".to_owned(),\n-    }\n-}\n-\n-pub fn run_tests(config: &config) {\n-    if config.target == \"arm-linux-androideabi\".to_owned() {\n-        match config.mode{\n-            mode_debug_info_gdb => {\n+pub fn run_tests(config: &Config) {\n+    if config.target == ~\"arm-linux-androideabi\" {\n+        match config.mode {\n+            DebugInfoGdb => {\n                 println!(\"arm-linux-androideabi debug-info \\\n                          test uses tcp 5039 port. please reserve it\");\n             }\n@@ -255,7 +230,7 @@ pub fn run_tests(config: &config) {\n     }\n }\n \n-pub fn test_opts(config: &config) -> test::TestOpts {\n+pub fn test_opts(config: &Config) -> test::TestOpts {\n     test::TestOpts {\n         filter: config.filter.clone(),\n         run_ignored: config.run_ignored,\n@@ -270,7 +245,7 @@ pub fn test_opts(config: &config) -> test::TestOpts {\n     }\n }\n \n-pub fn make_tests(config: &config) -> Vec<test::TestDescAndFn> {\n+pub fn make_tests(config: &Config) -> Vec<test::TestDescAndFn> {\n     debug!(\"making tests from {}\",\n            config.src_base.display());\n     let mut tests = Vec::new();\n@@ -281,7 +256,7 @@ pub fn make_tests(config: &config) -> Vec<test::TestDescAndFn> {\n         if is_test(config, &file) {\n             let t = make_test(config, &file, || {\n                 match config.mode {\n-                    mode_codegen => make_metrics_test_closure(config, &file),\n+                    Codegen => make_metrics_test_closure(config, &file),\n                     _ => make_test_closure(config, &file)\n                 }\n             });\n@@ -291,11 +266,11 @@ pub fn make_tests(config: &config) -> Vec<test::TestDescAndFn> {\n     tests\n }\n \n-pub fn is_test(config: &config, testfile: &Path) -> bool {\n+pub fn is_test(config: &Config, testfile: &Path) -> bool {\n     // Pretty-printer does not work with .rc files yet\n     let valid_extensions =\n         match config.mode {\n-          mode_pretty => vec!(\".rs\".to_owned()),\n+          Pretty => vec!(\".rs\".to_owned()),\n           _ => vec!(\".rc\".to_owned(), \".rs\".to_owned())\n         };\n     let invalid_prefixes = vec!(\".\".to_owned(), \"#\".to_owned(), \"~\".to_owned());\n@@ -314,7 +289,7 @@ pub fn is_test(config: &config, testfile: &Path) -> bool {\n     return valid;\n }\n \n-pub fn make_test(config: &config, testfile: &Path, f: || -> test::TestFn)\n+pub fn make_test(config: &Config, testfile: &Path, f: || -> test::TestFn)\n                  -> test::TestDescAndFn {\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n@@ -326,7 +301,7 @@ pub fn make_test(config: &config, testfile: &Path, f: || -> test::TestFn)\n     }\n }\n \n-pub fn make_test_name(config: &config, testfile: &Path) -> test::TestName {\n+pub fn make_test_name(config: &Config, testfile: &Path) -> test::TestName {\n \n     // Try to elide redundant long paths\n     fn shorten(path: &Path) -> ~str {\n@@ -336,19 +311,17 @@ pub fn make_test_name(config: &config, testfile: &Path) -> test::TestName {\n         format!(\"{}/{}\", dir.unwrap_or(\"\"), filename.unwrap_or(\"\"))\n     }\n \n-    test::DynTestName(format!(\"[{}] {}\",\n-                              mode_str(config.mode),\n-                              shorten(testfile)))\n+    test::DynTestName(format!(\"[{}] {}\", config.mode, shorten(testfile)))\n }\n \n-pub fn make_test_closure(config: &config, testfile: &Path) -> test::TestFn {\n+pub fn make_test_closure(config: &Config, testfile: &Path) -> test::TestFn {\n     let config = (*config).clone();\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let testfile = testfile.as_str().unwrap().to_owned();\n     test::DynTestFn(proc() { runtest::run(config, testfile) })\n }\n \n-pub fn make_metrics_test_closure(config: &config, testfile: &Path) -> test::TestFn {\n+pub fn make_metrics_test_closure(config: &Config, testfile: &Path) -> test::TestFn {\n     let config = (*config).clone();\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let testfile = testfile.as_str().unwrap().to_owned();"}, {"sha": "e9c41a137d9019dcd9a34ed587bf225e1baa89fc", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=96eeda9708605a60635229d45587f79f9a334ded", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use common::config;\n+use common::Config;\n use common;\n use util;\n \n@@ -110,19 +110,19 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     }\n }\n \n-pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n-    fn ignore_target(config: &config) -> ~str {\n+pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n+    fn ignore_target(config: &Config) -> ~str {\n         \"ignore-\".to_owned() + util::get_os(config.target)\n     }\n-    fn ignore_stage(config: &config) -> ~str {\n+    fn ignore_stage(config: &Config) -> ~str {\n         \"ignore-\".to_owned() + config.stage_id.split('-').next().unwrap()\n     }\n \n     let val = iter_header(testfile, |ln| {\n         if parse_name_directive(ln, \"ignore-test\") { false }\n         else if parse_name_directive(ln, ignore_target(config)) { false }\n         else if parse_name_directive(ln, ignore_stage(config)) { false }\n-        else if config.mode == common::mode_pretty &&\n+        else if config.mode == common::Pretty &&\n             parse_name_directive(ln, \"ignore-pretty\") { false }\n         else if config.target != config.host &&\n             parse_name_directive(ln, \"ignore-cross-compile\") { false }"}, {"sha": "66bebaff014817a4a4e6833ca02146a173cfdabb", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 47, "deletions": 46, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=96eeda9708605a60635229d45587f79f9a334ded", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use common::{config, mode_compile_fail, mode_pretty, mode_run_fail, mode_run_pass};\n+use common::Config;\n+use common::{CompileFail, Pretty, RunFail, RunPass};\n use errors;\n use header::TestProps;\n use header;\n@@ -30,7 +31,7 @@ use std::strbuf::StrBuf;\n use std::task;\n use test::MetricMap;\n \n-pub fn run(config: config, testfile: ~str) {\n+pub fn run(config: Config, testfile: ~str) {\n \n     match config.target.as_slice() {\n \n@@ -47,7 +48,7 @@ pub fn run(config: config, testfile: ~str) {\n     run_metrics(config, testfile, &mut _mm);\n }\n \n-pub fn run_metrics(config: config, testfile: ~str, mm: &mut MetricMap) {\n+pub fn run_metrics(config: Config, testfile: ~str, mm: &mut MetricMap) {\n     if config.verbose {\n         // We're going to be dumping a lot of info. Start on a new line.\n         print!(\"\\n\\n\");\n@@ -57,17 +58,17 @@ pub fn run_metrics(config: config, testfile: ~str, mm: &mut MetricMap) {\n     let props = header::load_props(&testfile);\n     debug!(\"loaded props\");\n     match config.mode {\n-      mode_compile_fail => run_cfail_test(&config, &props, &testfile),\n-      mode_run_fail => run_rfail_test(&config, &props, &testfile),\n-      mode_run_pass => run_rpass_test(&config, &props, &testfile),\n-      mode_pretty => run_pretty_test(&config, &props, &testfile),\n-      mode_debug_info_gdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n-      mode_debug_info_lldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n-      mode_codegen => run_codegen_test(&config, &props, &testfile, mm)\n+      CompileFail => run_cfail_test(&config, &props, &testfile),\n+      RunFail => run_rfail_test(&config, &props, &testfile),\n+      RunPass => run_rpass_test(&config, &props, &testfile),\n+      Pretty => run_pretty_test(&config, &props, &testfile),\n+      DebugInfoGdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n+      DebugInfoLldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n+      Codegen => run_codegen_test(&config, &props, &testfile, mm)\n     }\n }\n \n-fn run_cfail_test(config: &config, props: &TestProps, testfile: &Path) {\n+fn run_cfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n     let proc_res = compile_test(config, props, testfile);\n \n     if proc_res.status.success() {\n@@ -88,7 +89,7 @@ fn run_cfail_test(config: &config, props: &TestProps, testfile: &Path) {\n     check_no_compiler_crash(&proc_res);\n }\n \n-fn run_rfail_test(config: &config, props: &TestProps, testfile: &Path) {\n+fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n     let proc_res = if !config.jit {\n         let proc_res = compile_test(config, props, testfile);\n \n@@ -121,7 +122,7 @@ fn check_correct_failure_status(proc_res: &ProcRes) {\n     }\n }\n \n-fn run_rpass_test(config: &config, props: &TestProps, testfile: &Path) {\n+fn run_rpass_test(config: &Config, props: &TestProps, testfile: &Path) {\n     if !config.jit {\n         let mut proc_res = compile_test(config, props, testfile);\n \n@@ -141,7 +142,7 @@ fn run_rpass_test(config: &config, props: &TestProps, testfile: &Path) {\n     }\n }\n \n-fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n+fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n     if props.pp_exact.is_some() {\n         logv(config, \"testing for exact pretty-printing\".to_owned());\n     } else { logv(config, \"testing for converging pretty-printing\".to_owned()); }\n@@ -198,12 +199,12 @@ fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n \n     return;\n \n-    fn print_source(config: &config, testfile: &Path, src: ~str) -> ProcRes {\n+    fn print_source(config: &Config, testfile: &Path, src: ~str) -> ProcRes {\n         compose_and_run(config, testfile, make_pp_args(config, testfile),\n                         Vec::new(), config.compile_lib_path, Some(src))\n     }\n \n-    fn make_pp_args(config: &config, _testfile: &Path) -> ProcArgs {\n+    fn make_pp_args(config: &Config, _testfile: &Path) -> ProcArgs {\n         let args = vec!(\"-\".to_owned(), \"--pretty\".to_owned(), \"normal\".to_owned(),\n                      \"--target=\".to_owned() + config.target);\n         // FIXME (#9639): This needs to handle non-utf8 paths\n@@ -228,13 +229,13 @@ actual:\\n\\\n         }\n     }\n \n-    fn typecheck_source(config: &config, props: &TestProps,\n+    fn typecheck_source(config: &Config, props: &TestProps,\n                         testfile: &Path, src: ~str) -> ProcRes {\n         let args = make_typecheck_args(config, props, testfile);\n         compose_and_run_compiler(config, props, testfile, args, Some(src))\n     }\n \n-    fn make_typecheck_args(config: &config, props: &TestProps, testfile: &Path) -> ProcArgs {\n+    fn make_typecheck_args(config: &Config, props: &TestProps, testfile: &Path) -> ProcArgs {\n         let aux_dir = aux_output_dir_name(config, testfile);\n         let target = if props.force_host {\n             config.host.as_slice()\n@@ -255,8 +256,8 @@ actual:\\n\\\n     }\n }\n \n-fn run_debuginfo_gdb_test(config: &config, props: &TestProps, testfile: &Path) {\n-    let mut config = config {\n+fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n+    let mut config = Config {\n         target_rustcflags: cleanup_debug_info_options(&config.target_rustcflags),\n         host_rustcflags: cleanup_debug_info_options(&config.host_rustcflags),\n         .. config.clone()\n@@ -834,16 +835,16 @@ struct ProcArgs {prog: ~str, args: Vec<~str> }\n \n struct ProcRes {status: ProcessExit, stdout: ~str, stderr: ~str, cmdline: ~str}\n \n-fn compile_test(config: &config, props: &TestProps,\n+fn compile_test(config: &Config, props: &TestProps,\n                 testfile: &Path) -> ProcRes {\n     compile_test_(config, props, testfile, [])\n }\n \n-fn jit_test(config: &config, props: &TestProps, testfile: &Path) -> ProcRes {\n+fn jit_test(config: &Config, props: &TestProps, testfile: &Path) -> ProcRes {\n     compile_test_(config, props, testfile, [\"--jit\".to_owned()])\n }\n \n-fn compile_test_(config: &config, props: &TestProps,\n+fn compile_test_(config: &Config, props: &TestProps,\n                  testfile: &Path, extra_args: &[~str]) -> ProcRes {\n     let aux_dir = aux_output_dir_name(config, testfile);\n     // FIXME (#9639): This needs to handle non-utf8 paths\n@@ -855,7 +856,7 @@ fn compile_test_(config: &config, props: &TestProps,\n     compose_and_run_compiler(config, props, testfile, args, None)\n }\n \n-fn exec_compiled_test(config: &config, props: &TestProps,\n+fn exec_compiled_test(config: &Config, props: &TestProps,\n                       testfile: &Path) -> ProcRes {\n \n     let env = props.exec_env.clone();\n@@ -876,7 +877,7 @@ fn exec_compiled_test(config: &config, props: &TestProps,\n }\n \n fn compose_and_run_compiler(\n-    config: &config,\n+    config: &Config,\n     props: &TestProps,\n     testfile: &Path,\n     args: ProcArgs,\n@@ -934,7 +935,7 @@ fn ensure_dir(path: &Path) {\n     fs::mkdir(path, io::UserRWX).unwrap();\n }\n \n-fn compose_and_run(config: &config, testfile: &Path,\n+fn compose_and_run(config: &Config, testfile: &Path,\n                    ProcArgs{ args, prog }: ProcArgs,\n                    procenv: Vec<(~str, ~str)> ,\n                    lib_path: &str,\n@@ -948,10 +949,10 @@ enum TargetLocation {\n     ThisDirectory(Path),\n }\n \n-fn make_compile_args(config: &config,\n+fn make_compile_args(config: &Config,\n                      props: &TestProps,\n                      extras: Vec<~str> ,\n-                     xform: |&config, &Path| -> TargetLocation,\n+                     xform: |&Config, &Path| -> TargetLocation,\n                      testfile: &Path)\n                      -> ProcArgs {\n     let xform_file = xform(config, testfile);\n@@ -983,14 +984,14 @@ fn make_compile_args(config: &config,\n     return ProcArgs {prog: config.rustc_path.as_str().unwrap().to_owned(), args: args};\n }\n \n-fn make_lib_name(config: &config, auxfile: &Path, testfile: &Path) -> Path {\n+fn make_lib_name(config: &Config, auxfile: &Path, testfile: &Path) -> Path {\n     // what we return here is not particularly important, as it\n     // happens; rustc ignores everything except for the directory.\n     let auxname = output_testname(auxfile);\n     aux_output_dir_name(config, testfile).join(&auxname)\n }\n \n-fn make_exe_name(config: &config, testfile: &Path) -> Path {\n+fn make_exe_name(config: &Config, testfile: &Path) -> Path {\n     let mut f = output_base_name(config, testfile);\n     if !os::consts::EXE_SUFFIX.is_empty() {\n         match f.filename().map(|s| Vec::from_slice(s).append(os::consts::EXE_SUFFIX.as_bytes())) {\n@@ -1001,7 +1002,7 @@ fn make_exe_name(config: &config, testfile: &Path) -> Path {\n     f\n }\n \n-fn make_run_args(config: &config, props: &TestProps, testfile: &Path) ->\n+fn make_run_args(config: &Config, props: &TestProps, testfile: &Path) ->\n    ProcArgs {\n     // If we've got another tool to run under (valgrind),\n     // then split apart its command\n@@ -1029,7 +1030,7 @@ fn split_maybe_args(argstr: &Option<~str>) -> Vec<~str> {\n     }\n }\n \n-fn program_output(config: &config, testfile: &Path, lib_path: &str, prog: ~str,\n+fn program_output(config: &Config, testfile: &Path, lib_path: &str, prog: ~str,\n                   args: Vec<~str> , env: Vec<(~str, ~str)> ,\n                   input: Option<~str>) -> ProcRes {\n     let cmdline =\n@@ -1069,23 +1070,23 @@ fn lib_path_cmd_prefix(path: &str) -> ~str {\n     format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n }\n \n-fn dump_output(config: &config, testfile: &Path, out: &str, err: &str) {\n+fn dump_output(config: &Config, testfile: &Path, out: &str, err: &str) {\n     dump_output_file(config, testfile, out, \"out\");\n     dump_output_file(config, testfile, err, \"err\");\n     maybe_dump_to_stdout(config, out, err);\n }\n \n-fn dump_output_file(config: &config, testfile: &Path,\n+fn dump_output_file(config: &Config, testfile: &Path,\n                     out: &str, extension: &str) {\n     let outfile = make_out_name(config, testfile, extension);\n     File::create(&outfile).write(out.as_bytes()).unwrap();\n }\n \n-fn make_out_name(config: &config, testfile: &Path, extension: &str) -> Path {\n+fn make_out_name(config: &Config, testfile: &Path, extension: &str) -> Path {\n     output_base_name(config, testfile).with_extension(extension)\n }\n \n-fn aux_output_dir_name(config: &config, testfile: &Path) -> Path {\n+fn aux_output_dir_name(config: &Config, testfile: &Path) -> Path {\n     let mut f = output_base_name(config, testfile);\n     match f.filename().map(|s| Vec::from_slice(s).append(bytes!(\".libaux\"))) {\n         Some(v) => f.set_filename(v),\n@@ -1098,13 +1099,13 @@ fn output_testname(testfile: &Path) -> Path {\n     Path::new(testfile.filestem().unwrap())\n }\n \n-fn output_base_name(config: &config, testfile: &Path) -> Path {\n+fn output_base_name(config: &Config, testfile: &Path) -> Path {\n     config.build_base\n         .join(&output_testname(testfile))\n         .with_extension(config.stage_id.as_slice())\n }\n \n-fn maybe_dump_to_stdout(config: &config, out: &str, err: &str) {\n+fn maybe_dump_to_stdout(config: &Config, out: &str, err: &str) {\n     if config.verbose {\n         println!(\"------{}------------------------------\", \"stdout\");\n         println!(\"{}\", out);\n@@ -1137,7 +1138,7 @@ stderr:\\n\\\n     fail!();\n }\n \n-fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n+fn _arm_exec_compiled_test(config: &Config, props: &TestProps,\n                       testfile: &Path, env: Vec<(~str, ~str)> ) -> ProcRes {\n \n     let args = make_run_args(config, props, testfile);\n@@ -1237,7 +1238,7 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n     }\n }\n \n-fn _arm_push_aux_shared_library(config: &config, testfile: &Path) {\n+fn _arm_push_aux_shared_library(config: &Config, testfile: &Path) {\n     let tdir = aux_output_dir_name(config, testfile);\n \n     let dirs = fs::readdir(&tdir).unwrap();\n@@ -1260,7 +1261,7 @@ fn _arm_push_aux_shared_library(config: &config, testfile: &Path) {\n \n // codegen tests (vs. clang)\n \n-fn make_o_name(config: &config, testfile: &Path) -> Path {\n+fn make_o_name(config: &Config, testfile: &Path) -> Path {\n     output_base_name(config, testfile).with_extension(\"o\")\n }\n \n@@ -1273,7 +1274,7 @@ fn append_suffix_to_stem(p: &Path, suffix: &str) -> Path {\n     }\n }\n \n-fn compile_test_and_save_bitcode(config: &config, props: &TestProps,\n+fn compile_test_and_save_bitcode(config: &Config, props: &TestProps,\n                                  testfile: &Path) -> ProcRes {\n     let aux_dir = aux_output_dir_name(config, testfile);\n     // FIXME (#9639): This needs to handle non-utf8 paths\n@@ -1287,7 +1288,7 @@ fn compile_test_and_save_bitcode(config: &config, props: &TestProps,\n     compose_and_run_compiler(config, props, testfile, args, None)\n }\n \n-fn compile_cc_with_clang_and_save_bitcode(config: &config, _props: &TestProps,\n+fn compile_cc_with_clang_and_save_bitcode(config: &Config, _props: &TestProps,\n                                           testfile: &Path) -> ProcRes {\n     let bitcodefile = output_base_name(config, testfile).with_extension(\"bc\");\n     let bitcodefile = append_suffix_to_stem(&bitcodefile, \"clang\");\n@@ -1303,7 +1304,7 @@ fn compile_cc_with_clang_and_save_bitcode(config: &config, _props: &TestProps,\n     compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None)\n }\n \n-fn extract_function_from_bitcode(config: &config, _props: &TestProps,\n+fn extract_function_from_bitcode(config: &Config, _props: &TestProps,\n                                  fname: &str, testfile: &Path,\n                                  suffix: &str) -> ProcRes {\n     let bitcodefile = output_base_name(config, testfile).with_extension(\"bc\");\n@@ -1320,7 +1321,7 @@ fn extract_function_from_bitcode(config: &config, _props: &TestProps,\n     compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None)\n }\n \n-fn disassemble_extract(config: &config, _props: &TestProps,\n+fn disassemble_extract(config: &Config, _props: &TestProps,\n                        testfile: &Path, suffix: &str) -> ProcRes {\n     let bitcodefile = output_base_name(config, testfile).with_extension(\"bc\");\n     let bitcodefile = append_suffix_to_stem(&bitcodefile, suffix);\n@@ -1344,7 +1345,7 @@ fn count_extracted_lines(p: &Path) -> uint {\n }\n \n \n-fn run_codegen_test(config: &config, props: &TestProps,\n+fn run_codegen_test(config: &Config, props: &TestProps,\n                     testfile: &Path, mm: &mut MetricMap) {\n \n     if config.llvm_bin_path.is_none() {"}, {"sha": "253b7e87d02234199ae2cf2a7e6172248b9c05c1", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eeda9708605a60635229d45587f79f9a334ded/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=96eeda9708605a60635229d45587f79f9a334ded", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use common::config;\n+use common::Config;\n \n #[cfg(target_os = \"win32\")]\n use std::os::getenv;\n@@ -51,7 +51,7 @@ pub fn lib_path_env_var() -> ~str { \"PATH\".to_owned() }\n #[cfg(target_os = \"win32\")]\n pub fn path_div() -> ~str { \";\".to_owned() }\n \n-pub fn logv(config: &config, s: ~str) {\n+pub fn logv(config: &Config, s: ~str) {\n     debug!(\"{}\", s);\n     if config.verbose { println!(\"{}\", s); }\n }"}]}