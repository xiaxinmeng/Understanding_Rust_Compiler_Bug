{"sha": "025e6ff1586999caef7460a1884cbd9685ad2277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNWU2ZmYxNTg2OTk5Y2FlZjc0NjBhMTg4NGNiZDk2ODVhZDIyNzc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-27T02:13:43Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-28T17:18:34Z"}, "message": "core: add vec spliting functions.", "tree": {"sha": "6beabc47ea1959815a838893e553a978de2febdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6beabc47ea1959815a838893e553a978de2febdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/025e6ff1586999caef7460a1884cbd9685ad2277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/025e6ff1586999caef7460a1884cbd9685ad2277", "html_url": "https://github.com/rust-lang/rust/commit/025e6ff1586999caef7460a1884cbd9685ad2277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/025e6ff1586999caef7460a1884cbd9685ad2277/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8", "html_url": "https://github.com/rust-lang/rust/commit/1be3a7c2637b11f82bcbbbff5e92532d7e2fc9b8"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "9a0970fae4e5e86cf7e30aa0bc22136dd6a2e0a9", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/025e6ff1586999caef7460a1884cbd9685ad2277/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025e6ff1586999caef7460a1884cbd9685ad2277/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=025e6ff1586999caef7460a1884cbd9685ad2277", "patch": "@@ -278,6 +278,110 @@ fn slice_mut<T: copy>(v: [const T], start: uint, end: uint) -> [mutable T] {\n     ret result;\n }\n \n+/*\n+Function: split\n+\n+Split the vector `v` by applying each element against the predicate `f`.\n+*/\n+fn split<T: copy>(v: [T], f: fn(T) -> bool) -> [[T]] {\n+    let ln = len(v);\n+    if (ln == 0u) { ret [] }\n+\n+    let start = 0u;\n+    let result = [];\n+    while start < ln {\n+        alt position_from(v, start, ln, f) {\n+          none { break }\n+          some(i) {\n+            push(result, slice(v, start, i));\n+            start = i + 1u;\n+          }\n+        }\n+    }\n+    push(result, slice(v, start, ln));\n+    result\n+}\n+\n+/*\n+Function: splitn\n+\n+Split the vector `v` by applying each element against the predicate `f` up\n+to `n` times.\n+*/\n+fn splitn<T: copy>(v: [T], n: uint, f: fn(T) -> bool) -> [[T]] {\n+    let ln = len(v);\n+    if (ln == 0u) { ret [] }\n+\n+    let start = 0u;\n+    let count = n;\n+    let result = [];\n+    while start < ln && count > 0u {\n+        alt position_from(v, start, ln, f) {\n+          none { break }\n+          some(i) {\n+            push(result, slice(v, start, i));\n+            // Make sure to skip the separator.\n+            start = i + 1u;\n+            count -= 1u;\n+          }\n+        }\n+    }\n+    push(result, slice(v, start, ln));\n+    result\n+}\n+\n+/*\n+Function: rsplit\n+\n+Reverse split the vector `v` by applying each element against the predicate\n+`f`.\n+*/\n+fn rsplit<T: copy>(v: [T], f: fn(T) -> bool) -> [[T]] {\n+    let ln = len(v);\n+    if (ln == 0u) { ret [] }\n+\n+    let end = ln;\n+    let result = [];\n+    while end > 0u {\n+        alt rposition_from(v, 0u, end, f) {\n+          none { break }\n+          some(i) {\n+            push(result, slice(v, i + 1u, end));\n+            end = i;\n+          }\n+        }\n+    }\n+    push(result, slice(v, 0u, end));\n+    reversed(result)\n+}\n+\n+/*\n+Function: rsplitn\n+\n+Reverse split the vector `v` by applying each element against the predicate\n+`f` up to `n times.\n+*/\n+fn rsplitn<T: copy>(v: [T], n: uint, f: fn(T) -> bool) -> [[T]] {\n+    let ln = len(v);\n+    if (ln == 0u) { ret [] }\n+\n+    let end = ln;\n+    let count = n;\n+    let result = [];\n+    while end > 0u && count > 0u {\n+        alt rposition_from(v, 0u, end, f) {\n+          none { break }\n+          some(i) {\n+            push(result, slice(v, i + 1u, end));\n+            // Make sure to skip the separator.\n+            end = i;\n+            count -= 1u;\n+          }\n+        }\n+    }\n+    push(result, slice(v, 0u, end));\n+    reversed(result)\n+}\n \n // Mutators\n \n@@ -1641,6 +1745,48 @@ mod tests {\n         assert v == [1, 2];\n     }\n \n+    #[test]\n+    fn test_split() {\n+        fn f(&&x: int) -> bool { x == 3 }\n+\n+        assert split([], f) == [];\n+        assert split([1, 2], f) == [[1, 2]];\n+        assert split([3, 1, 2], f) == [[], [1, 2]];\n+        assert split([1, 2, 3], f) == [[1, 2], []];\n+        assert split([1, 2, 3, 4, 3, 5], f) == [[1, 2], [4], [5]];\n+    }\n+\n+    #[test]\n+    fn test_splitn() {\n+        fn f(&&x: int) -> bool { x == 3 }\n+\n+        assert splitn([], 1u, f) == [];\n+        assert splitn([1, 2], 1u, f) == [[1, 2]];\n+        assert splitn([3, 1, 2], 1u, f) == [[], [1, 2]];\n+        assert splitn([1, 2, 3], 1u, f) == [[1, 2], []];\n+        assert splitn([1, 2, 3, 4, 3, 5], 1u, f) == [[1, 2], [4, 3, 5]];\n+    }\n+\n+    #[test]\n+    fn test_rsplit() {\n+        fn f(&&x: int) -> bool { x == 3 }\n+\n+        assert rsplit([], f) == [];\n+        assert rsplit([1, 2], f) == [[1, 2]];\n+        assert rsplit([1, 2, 3], f) == [[1, 2], []];\n+        assert rsplit([1, 2, 3, 4, 3, 5], f) == [[1, 2], [4], [5]];\n+    }\n+\n+    #[test]\n+    fn test_rsplitn() {\n+        fn f(&&x: int) -> bool { x == 3 }\n+\n+        assert rsplitn([], 1u, f) == [];\n+        assert rsplitn([1, 2], 1u, f) == [[1, 2]];\n+        assert rsplitn([1, 2, 3], 1u, f) == [[1, 2], []];\n+        assert rsplitn([1, 2, 3, 4, 3, 5], 1u, f) == [[1, 2, 3, 4], [5]];\n+    }\n+\n     #[test]\n     // FIXME: Windows can't undwind\n     #[ignore(cfg(target_os = \"win32\"))]"}]}