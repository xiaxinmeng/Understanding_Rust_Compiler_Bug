{"sha": "62137b6d7976635c0c8271f14c5f09fe519d8ba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMTM3YjZkNzk3NjYzNWMwYzgyNzFmMTRjNWYwOWZlNTE5ZDhiYTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-26T17:47:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-27T00:50:13Z"}, "message": "rollup merge of #19336: apasel422/guide\n\n- `s/(left|right) hand/\\1-hand/`\n- `s/parenthesis/parentheses/`\n- `s/unicode/Unicode/`\n- `s/validly-encoded/validly encoded/`", "tree": {"sha": "aff236d615e05693a5c7bb050872aa77b8d2d1db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aff236d615e05693a5c7bb050872aa77b8d2d1db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62137b6d7976635c0c8271f14c5f09fe519d8ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62137b6d7976635c0c8271f14c5f09fe519d8ba9", "html_url": "https://github.com/rust-lang/rust/commit/62137b6d7976635c0c8271f14c5f09fe519d8ba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62137b6d7976635c0c8271f14c5f09fe519d8ba9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f94ea0823327602b336113f4c45c74e8817b19a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f94ea0823327602b336113f4c45c74e8817b19a", "html_url": "https://github.com/rust-lang/rust/commit/8f94ea0823327602b336113f4c45c74e8817b19a"}, {"sha": "b7520f595f42ab6729075ec151cecfb0e3e7ee4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7520f595f42ab6729075ec151cecfb0e3e7ee4c", "html_url": "https://github.com/rust-lang/rust/commit/b7520f595f42ab6729075ec151cecfb0e3e7ee4c"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "670af614b95a70e76a2f77e5c022f1cf0ec33b57", "filename": "src/doc/guide.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62137b6d7976635c0c8271f14c5f09fe519d8ba9/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/62137b6d7976635c0c8271f14c5f09fe519d8ba9/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=62137b6d7976635c0c8271f14c5f09fe519d8ba9", "patch": "@@ -689,7 +689,7 @@ fn main() {\n ```\n \n This is the simplest possible function declaration. As we mentioned before,\n-`fn` says 'this is a function,' followed by the name, some parenthesis because\n+`fn` says 'this is a function,' followed by the name, some parentheses because\n this function takes no arguments, and then some curly braces to indicate the\n body. Here's a function named `foo`:\n \n@@ -890,7 +890,7 @@ Tuples are an ordered list of a fixed size. Like this:\n let x = (1i, \"hello\");\n ```\n \n-The parenthesis and commas form this two-length tuple. Here's the same code, but\n+The parentheses and commas form this two-length tuple. Here's the same code, but\n with the type annotated:\n \n ```rust\n@@ -914,9 +914,9 @@ let (x, y, z) = (1i, 2i, 3i);\n println!(\"x is {}\", x);\n ```\n \n-Remember before when I said the left hand side of a `let` statement was more\n+Remember before when I said the left-hand side of a `let` statement was more\n powerful than just assigning a binding? Here we are. We can put a pattern on\n-the left hand side of the `let`, and if it matches up to the right hand side,\n+the left-hand side of the `let`, and if it matches up to the right-hand side,\n we can assign multiple bindings at once. In this case, `let` 'destructures,'\n or 'breaks up,' the tuple, and assigns the bits to three bindings.\n \n@@ -1459,9 +1459,9 @@ focus. Any time you have a data structure of variable size, things can get\n tricky, and strings are a re-sizable data structure. That said, Rust's strings\n also work differently than in some other systems languages, such as C.\n \n-Let's dig into the details. A **string** is a sequence of unicode scalar values\n+Let's dig into the details. A **string** is a sequence of Unicode scalar values\n encoded as a stream of UTF-8 bytes. All strings are guaranteed to be\n-validly-encoded UTF-8 sequences. Additionally, strings are not null-terminated\n+validly encoded UTF-8 sequences. Additionally, strings are not null-terminated\n and can contain null bytes.\n \n Rust has two main types of strings: `&str` and `String`.\n@@ -3939,7 +3939,7 @@ match x {\n }\n ```\n \n-Here, the `val` inside the `match` has type `int`. In other words, the left hand\n+Here, the `val` inside the `match` has type `int`. In other words, the left-hand\n side of the pattern destructures the value. If we have `&5i`, then in `&val`, `val`\n would be `5i`.\n \n@@ -4716,7 +4716,7 @@ let x: Option<int> = Some(5i);\n \n In the type declaration, we say `Option<int>`. Note how similar this looks to\n `Option<T>`. So, in this particular `Option`, `T` has the value of `int`. On\n-the right hand side of the binding, we do make a `Some(T)`, where `T` is `5i`.\n+the right-hand side of the binding, we do make a `Some(T)`, where `T` is `5i`.\n Since that's an `int`, the two sides match, and Rust is happy. If they didn't\n match, we'd get an error:\n "}]}