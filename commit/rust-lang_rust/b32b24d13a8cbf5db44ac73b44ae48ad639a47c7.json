{"sha": "b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMmIyNGQxM2E4Y2JmNWRiNDRhYzczYjQ0YWU0OGFkNjM5YTQ3Yzc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-21T01:25:27Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-03T15:41:48Z"}, "message": "Replace `equiv` method calls with `==` operator sugar", "tree": {"sha": "051fdd1c7a72c5267a849fa14d39c41cdbc4d80a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/051fdd1c7a72c5267a849fa14d39c41cdbc4d80a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "html_url": "https://github.com/rust-lang/rust/commit/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/comments", "author": null, "committer": null, "parents": [{"sha": "2840d58dab0144c5589b60322c4f681bd8052aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2840d58dab0144c5589b60322c4f681bd8052aba", "html_url": "https://github.com/rust-lang/rust/commit/2840d58dab0144c5589b60322c4f681bd8052aba"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "9a214d531d157b2e6235a172766e33aeaea8b7dc", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "patch": "@@ -1377,7 +1377,7 @@ impl MissingDoc {\n \n         let has_doc = attrs.iter().any(|a| {\n             match a.node.value.node {\n-                ast::MetaNameValue(ref name, _) if name.equiv(&(\"doc\")) => true,\n+                ast::MetaNameValue(ref name, _) if *name == \"doc\" => true,\n                 _ => false\n             }\n         });"}, {"sha": "5a8d60fbecd6c3c71ac369bdeec91e6e74454a15", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "patch": "@@ -105,7 +105,7 @@ fn warn_if_multiple_versions(diag: &SpanHandler, cstore: &CStore) {\n }\n \n fn visit_crate(e: &Env, c: &ast::Crate) {\n-    for a in c.attrs.iter().filter(|m| m.name().equiv(&(\"link_args\"))) {\n+    for a in c.attrs.iter().filter(|m| m.name() == \"link_args\") {\n         match a.value_str() {\n             Some(ref linkarg) => e.sess.cstore.add_used_link_args(linkarg.get()),\n             None => { /* fallthrough */ }\n@@ -205,7 +205,7 @@ fn visit_item(e: &Env, i: &ast::Item) {\n \n             // First, add all of the custom link_args attributes\n             let link_args = i.attrs.iter()\n-                .filter_map(|at| if at.name().equiv(&(\"link_args\")) {\n+                .filter_map(|at| if at.name() == \"link_args\" {\n                     Some(at)\n                 } else {\n                     None\n@@ -220,7 +220,7 @@ fn visit_item(e: &Env, i: &ast::Item) {\n \n             // Next, process all of the #[link(..)]-style arguments\n             let link_args = i.attrs.iter()\n-                .filter_map(|at| if at.name().equiv(&(\"link\")) {\n+                .filter_map(|at| if at.name() == \"link\" {\n                     Some(at)\n                 } else {\n                     None\n@@ -230,18 +230,18 @@ fn visit_item(e: &Env, i: &ast::Item) {\n                 match m.meta_item_list() {\n                     Some(items) => {\n                         let kind = items.iter().find(|k| {\n-                            k.name().equiv(&(\"kind\"))\n+                            k.name() == \"kind\"\n                         }).and_then(|a| a.value_str());\n                         let kind = match kind {\n                             Some(k) => {\n-                                if k.equiv(&(\"static\")) {\n+                                if k == \"static\" {\n                                     cstore::NativeStatic\n                                 } else if e.sess.target.target.options.is_like_osx\n-                                          && k.equiv(&(\"framework\")) {\n+                                          && k == \"framework\" {\n                                     cstore::NativeFramework\n-                                } else if k.equiv(&(\"framework\")) {\n+                                } else if k == \"framework\" {\n                                     cstore::NativeFramework\n-                                } else if k.equiv(&(\"dylib\")) {\n+                                } else if k == \"dylib\" {\n                                     cstore::NativeUnknown\n                                 } else {\n                                     e.sess.span_err(m.span,\n@@ -253,7 +253,7 @@ fn visit_item(e: &Env, i: &ast::Item) {\n                             None => cstore::NativeUnknown\n                         };\n                         let n = items.iter().find(|n| {\n-                            n.name().equiv(&(\"name\"))\n+                            n.name() == \"name\"\n                         }).and_then(|a| a.value_str());\n                         let n = match n {\n                             Some(n) => n,"}, {"sha": "33de2c9abe928ca0c5bc1ea2a36a402b63bf1582", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "patch": "@@ -944,7 +944,7 @@ mod test {\n         let sessopts = build_session_options(matches);\n         let sess = build_session(sessopts, None, registry);\n         let cfg = build_configuration(&sess);\n-        let mut test_items = cfg.iter().filter(|m| m.name().equiv(&(\"test\")));\n+        let mut test_items = cfg.iter().filter(|m| m.name() == \"test\");\n         assert!(test_items.next().is_some());\n         assert!(test_items.next().is_none());\n     }"}, {"sha": "d3281ae1c19fcb3d6c8a186a2bd3a686b9e81895", "filename": "src/librustc_trans/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs?ref=b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "patch": "@@ -679,19 +679,19 @@ pub fn collect_crate_types(session: &Session,\n     let attr_types: Vec<config::CrateType> = attrs.iter().filter_map(|a| {\n         if a.check_name(\"crate_type\") {\n             match a.value_str() {\n-                Some(ref n) if n.equiv(&(\"rlib\")) => {\n+                Some(ref n) if *n == \"rlib\" => {\n                     Some(config::CrateTypeRlib)\n                 }\n-                Some(ref n) if n.equiv(&(\"dylib\")) => {\n+                Some(ref n) if *n == \"dylib\" => {\n                     Some(config::CrateTypeDylib)\n                 }\n-                Some(ref n) if n.equiv(&(\"lib\")) => {\n+                Some(ref n) if *n == \"lib\" => {\n                     Some(config::default_lib_output())\n                 }\n-                Some(ref n) if n.equiv(&(\"staticlib\")) => {\n+                Some(ref n) if *n == \"staticlib\" => {\n                     Some(config::CrateTypeStaticlib)\n                 }\n-                Some(ref n) if n.equiv(&(\"bin\")) => Some(config::CrateTypeExecutable),\n+                Some(ref n) if *n == \"bin\" => Some(config::CrateTypeExecutable),\n                 Some(_) => {\n                     session.add_lint(lint::builtin::UNKNOWN_CRATE_TYPES,\n                                      ast::CRATE_NODE_ID,"}, {"sha": "a2811681efd37591a25d6a9d4d5861f21042f2ff", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "patch": "@@ -287,11 +287,11 @@ pub fn find_inline_attr(attrs: &[Attribute]) -> InlineAttr {\n     // FIXME (#2809)---validate the usage of #[inline] and #[inline]\n     attrs.iter().fold(InlineNone, |ia,attr| {\n         match attr.node.value.node {\n-            MetaWord(ref n) if n.equiv(&(\"inline\")) => {\n+            MetaWord(ref n) if *n == \"inline\" => {\n                 mark_used(attr);\n                 InlineHint\n             }\n-            MetaList(ref n, ref items) if n.equiv(&(\"inline\")) => {\n+            MetaList(ref n, ref items) if *n == \"inline\" => {\n                 mark_used(attr);\n                 if contains_name(items.as_slice(), \"always\") {\n                     InlineAlways\n@@ -409,7 +409,7 @@ pub fn require_unique_names(diagnostic: &SpanHandler, metas: &[P<MetaItem>]) {\n pub fn find_repr_attrs(diagnostic: &SpanHandler, attr: &Attribute) -> Vec<ReprAttr> {\n     let mut acc = Vec::new();\n     match attr.node.value.node {\n-        ast::MetaList(ref s, ref items) if s.equiv(&(\"repr\")) => {\n+        ast::MetaList(ref s, ref items) if *s == \"repr\" => {\n             mark_used(attr);\n             for item in items.iter() {\n                 match item.node {"}, {"sha": "b138811187ba9ac8fd802ce8341046e0604d4763", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "patch": "@@ -148,7 +148,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n                     let (s, _str_style) = p.parse_str();\n \n-                    if OPTIONS.iter().any(|opt| s.equiv(opt)) {\n+                    if OPTIONS.iter().any(|&opt| s == opt) {\n                         cx.span_warn(p.last_span, \"expected a clobber, found an option\");\n                     }\n                     clobs.push(s);\n@@ -157,13 +157,13 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             Options => {\n                 let (option, _str_style) = p.parse_str();\n \n-                if option.equiv(&(\"volatile\")) {\n+                if option == \"volatile\" {\n                     // Indicates that the inline assembly has side effects\n                     // and must not be optimized out along with its outputs.\n                     volatile = true;\n-                } else if option.equiv(&(\"alignstack\")) {\n+                } else if option == \"alignstack\" {\n                     alignstack = true;\n-                } else if option.equiv(&(\"intel\")) {\n+                } else if option == \"intel\" {\n                     dialect = ast::AsmIntel;\n                 } else {\n                     cx.span_warn(p.last_span, \"unrecognized option\");"}, {"sha": "c7aef0020b2c4705778889e1e4dd8015cfe31c3a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "patch": "@@ -172,12 +172,12 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n \n     fn visit_item(&mut self, i: &ast::Item) {\n         for attr in i.attrs.iter() {\n-            if attr.name().equiv(&(\"thread_local\")) {\n+            if attr.name() == \"thread_local\" {\n                 self.gate_feature(\"thread_local\", i.span,\n                                   \"`#[thread_local]` is an experimental feature, and does not \\\n                                   currently handle destructors. There is no corresponding \\\n                                   `#[task_local]` mapping to the task model\");\n-            } else if attr.name().equiv(&(\"linkage\")) {\n+            } else if attr.name() == \"linkage\" {\n                 self.gate_feature(\"linkage\", i.span,\n                                   \"the `linkage` attribute is experimental \\\n                                    and not portable across platforms\")\n@@ -429,7 +429,7 @@ pub fn check_crate(span_handler: &SpanHandler, krate: &ast::Crate) -> (Features,\n                         }\n                     };\n                     match KNOWN_FEATURES.iter()\n-                                        .find(|& &(n, _)| name.equiv(&n)) {\n+                                        .find(|& &(n, _)| name == n) {\n                         Some(&(name, Active)) => { cx.features.push(name); }\n                         Some(&(_, Removed)) => {\n                             span_handler.span_err(mi.span, \"feature has been removed\");"}, {"sha": "650f8295d01a6df3bd2bd636d7fc1d3dd8664741", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32b24d13a8cbf5db44ac73b44ae48ad639a47c7/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=b32b24d13a8cbf5db44ac73b44ae48ad639a47c7", "patch": "@@ -117,7 +117,7 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n     fn is_obsolete_ident(&mut self, ident: &str) -> bool {\n         match self.token {\n             token::Ident(sid, _) => {\n-                token::get_ident(sid).equiv(&ident)\n+                token::get_ident(sid) == ident\n             }\n             _ => false\n         }"}]}