{"sha": "52b22869db9554728b0d2133a7c1dd9c713b3b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYjIyODY5ZGI5NTU0NzI4YjBkMjEzM2E3YzFkZDljNzEzYjNiMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-16T04:51:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-16T04:51:54Z"}, "message": "Auto merge of #86348 - JohnTitor:rollup-o6a6k67, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #85283 (Avoid possible filename collision in coverage tests)\n - #86200 (Updates `Clone` docs for `Copy` comparison.)\n - #86209 (fix minor wording/typo issues in core::option docs)\n - #86242 (rustdoc- dont ICE on `ConstEvaluatable` predicates)\n - #86280 (Add a regression test for issue-76510)\n - #86293 (Allow to run only a few GUI tests)\n - #86327 (Don't mark \"safe\" intrinsics as unsafe)\n - #86345 (Remove some duplicate `char` assoc items on RELEASES.md)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c7ce5e919ec692174a3183b85e4f4c780534d9e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7ce5e919ec692174a3183b85e4f4c780534d9e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52b22869db9554728b0d2133a7c1dd9c713b3b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52b22869db9554728b0d2133a7c1dd9c713b3b16", "html_url": "https://github.com/rust-lang/rust/commit/52b22869db9554728b0d2133a7c1dd9c713b3b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52b22869db9554728b0d2133a7c1dd9c713b3b16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d192c80d2284ba6b5146bb3da586354c3762c72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d192c80d2284ba6b5146bb3da586354c3762c72b", "html_url": "https://github.com/rust-lang/rust/commit/d192c80d2284ba6b5146bb3da586354c3762c72b"}, {"sha": "59ffa34fa8fa657c9d36535aa00e49aa2f070990", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ffa34fa8fa657c9d36535aa00e49aa2f070990", "html_url": "https://github.com/rust-lang/rust/commit/59ffa34fa8fa657c9d36535aa00e49aa2f070990"}], "stats": {"total": 190, "additions": 160, "deletions": 30}, "files": [{"sha": "a49091373df9f6624e064d31f9756e97b0044a65", "filename": "RELEASES.md", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -81,13 +81,6 @@ Stabilised APIs\n - [`Vec::extend_from_within`]\n - [`array::from_mut`]\n - [`array::from_ref`]\n-- [`char::MAX`]\n-- [`char::REPLACEMENT_CHARACTER`]\n-- [`char::UNICODE_VERSION`]\n-- [`char::decode_utf16`]\n-- [`char::from_digit`]\n-- [`char::from_u32_unchecked`]\n-- [`char::from_u32`]\n - [`cmp::max_by_key`]\n - [`cmp::max_by`]\n - [`cmp::min_by_key`]\n@@ -152,13 +145,6 @@ related tools.\n [cargo/9298]: https://github.com/rust-lang/cargo/pull/9298\n [cargo/9282]: https://github.com/rust-lang/cargo/pull/9282\n [cargo/9392]: https://github.com/rust-lang/cargo/pull/9392\n-[`char::MAX`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.MAX\n-[`char::REPLACEMENT_CHARACTER`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.REPLACEMENT_CHARACTER\n-[`char::UNICODE_VERSION`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.UNICODE_VERSION\n-[`char::decode_utf16`]: https://doc.rust-lang.org/std/primitive.char.html#method.decode_utf16\n-[`char::from_u32`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32\n-[`char::from_u32_unchecked`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32_unchecked\n-[`char::from_digit`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_digit\n [`AtomicBool::fetch_update`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicBool.html#method.fetch_update\n [`AtomicPtr::fetch_update`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicPtr.html#method.fetch_update\n [`BTreeMap::retain`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.retain"}, {"sha": "19faf9cddac6faa392a946742d00807d7441bf29", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -38,7 +38,7 @@\n \n /// A common trait for the ability to explicitly duplicate an object.\n ///\n-/// Differs from [`Copy`] in that [`Copy`] is implicit and extremely inexpensive, while\n+/// Differs from [`Copy`] in that [`Copy`] is implicit and an inexpensive bit-wise copy, while\n /// `Clone` is always explicit and may or may not be expensive. In order to enforce\n /// these characteristics, Rust does not allow you to reimplement [`Copy`], but you\n /// may reimplement `Clone` and run arbitrary code."}, {"sha": "aedfe88f688784210553d9930813ed69b957779c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -50,8 +50,8 @@\n //! the optional owned box, [`Option`]`<`[`Box<T>`]`>`.\n //!\n //! The following example uses [`Option`] to create an optional box of\n-//! [`i32`]. Notice that in order to use the inner [`i32`] value first, the\n-//! `check_optional` function needs to use pattern matching to\n+//! [`i32`]. Notice that in order to use the inner [`i32`] value, the\n+//! `check_optional` function first needs to use pattern matching to\n //! determine whether the box has a value (i.e., it is [`Some(...)`][`Some`]) or\n //! not ([`None`]).\n //!\n@@ -1350,7 +1350,7 @@ impl<'a, T> From<&'a Option<T>> for Option<&'a T> {\n     ///\n     /// Converts an `Option<`[`String`]`>` into an `Option<`[`usize`]`>`, preserving the original.\n     /// The [`map`] method takes the `self` argument by value, consuming the original,\n-    /// so this technique uses `as_ref` to first take an `Option` to a reference\n+    /// so this technique uses `from` to first take an `Option` to a reference\n     /// to the value inside the original.\n     ///\n     /// [`map`]: Option::map"}, {"sha": "0b7a0e25df1ac10c06d87f99f0d637392094d88b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -805,7 +805,7 @@ impl Step for RustdocGUI {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        let run = run.path(\"src/test/rustdoc-gui\");\n+        let run = run.suite_path(\"src/test/rustdoc-gui\");\n         run.default_condition(\n             builder.config.nodejs.is_some()\n                 && builder\n@@ -870,6 +870,13 @@ impl Step for RustdocGUI {\n             .arg(out_dir)\n             .arg(\"--tests-folder\")\n             .arg(builder.build.src.join(\"src/test/rustdoc-gui\"));\n+        for path in &builder.paths {\n+            if let Some(name) = path.file_name().and_then(|f| f.to_str()) {\n+                if name.ends_with(\".goml\") {\n+                    command.arg(\"--file\").arg(name);\n+                }\n+            }\n+        }\n         builder.run(&mut command);\n     }\n }"}, {"sha": "bc04480ab7c51c41300ff0a690f53d7083dcec7c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -26,6 +26,8 @@ use rustc_mir::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExpnKind};\n+use rustc_target::spec::abi::Abi;\n+use rustc_typeck::check::intrinsic::intrinsic_operation_unsafety;\n use rustc_typeck::hir_ty_to_ty;\n \n use std::collections::hash_map::Entry;\n@@ -350,12 +352,12 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n             ty::PredicateKind::RegionOutlives(pred) => pred.clean(cx),\n             ty::PredicateKind::TypeOutlives(pred) => pred.clean(cx),\n             ty::PredicateKind::Projection(pred) => Some(pred.clean(cx)),\n+            ty::PredicateKind::ConstEvaluatable(..) => None,\n \n             ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::WellFormed(..)\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n-            | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => panic!(\"not user writable\"),\n         }\n@@ -2132,7 +2134,11 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n                         decl,\n                         generics,\n                         header: hir::FnHeader {\n-                            unsafety: hir::Unsafety::Unsafe,\n+                            unsafety: if abi == Abi::RustIntrinsic {\n+                                intrinsic_operation_unsafety(item.ident.name)\n+                            } else {\n+                                hir::Unsafety::Unsafe\n+                            },\n                             abi,\n                             constness: hir::Constness::NotConst,\n                             asyncness: hir::IsAsync::NotAsync,"}, {"sha": "78fbf811f12bf5b70aa2ad0842db9bbb5a5ad748", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -87,7 +87,7 @@ endif\n \t# Run it in order to generate some profiling data,\n \t# with `LLVM_PROFILE_FILE=<profdata_file>` environment variable set to\n \t# output the coverage stats for this run.\n-\tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p.profraw \\\n+\tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@.profraw \\\n \t\t\t$(call RUN,$@) || \\\n \t\t\t( \\\n \t\t\t\tstatus=$$?; \\\n@@ -97,16 +97,19 @@ endif\n \t\t\t\t) \\\n \t\t\t)\n \n-\t# Run it through rustdoc as well to cover doctests\n-\tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p.profraw \\\n+\t# Run it through rustdoc as well to cover doctests.\n+\t# `%p` is the pid, and `%m` the binary signature. We suspect that the pid alone\n+\t# might result in overwritten files and failed tests, as rustdoc spawns each\n+\t# doctest as its own process, so make sure the filename is as unique as possible.\n+\tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p-%m.profraw \\\n \t\t\t$(RUSTDOC) --crate-name workaround_for_79771 --test $(SOURCEDIR)/$@.rs \\\n \t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/$@.rs ) \\\n \t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage \\\n \t\t\t-Z unstable-options --persist-doctests=$(TMPDIR)/rustdoc-$@\n \n \t# Postprocess the profiling data so it can be used by the llvm-cov tool\n \t\"$(LLVM_BIN_DIR)\"/llvm-profdata merge --sparse \\\n-\t\t\t\"$(TMPDIR)\"/$@-*.profraw \\\n+\t\t\t\"$(TMPDIR)\"/$@*.profraw \\\n \t\t\t-o \"$(TMPDIR)\"/$@.profdata\n \n \t# Generate a coverage report using `llvm-cov show`.\n@@ -118,8 +121,7 @@ endif\n \t\t\t--instr-profile=\"$(TMPDIR)\"/$@.profdata \\\n \t\t\t$(call BIN,\"$(TMPDIR)\"/$@) \\\n \t\t\t$$( \\\n-\t\t\t\tfor file in $(TMPDIR)/rustdoc-$@/*/rust_out; \\\n-\t\t\t\tdo \\\n+\t\t\t\tfor file in $(TMPDIR)/rustdoc-$@/*/rust_out; do \\\n \t\t\t\t[ -x \"$$file\" ] && printf \"%s %s \" -object $$file; \\\n \t\t\t\tdone \\\n \t\t\t) \\"}, {"sha": "1c074fdb3f882d5915966defca2e7bc499523291", "filename": "src/test/rustdoc/const-generics/const-evaluatable-checked.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-evaluatable-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-evaluatable-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-evaluatable-checked.rs?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -0,0 +1,7 @@\n+#![crate_name = \"foo\"]\n+#![feature(const_evaluatable_checked, const_generics)]\n+#![allow(incomplete_features)]\n+// make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n+// @has foo/struct.Ice.html '//pre[@class=\"rust struct\"]' \\\n+//      'pub struct Ice<const N: usize> where [(); N + 1]: ;'\n+pub struct Ice<const N: usize> where [(); N + 1]:;"}, {"sha": "d3bb8514b7e43ce24c5ad8e56472fb8df003c634", "filename": "src/test/rustdoc/safe-intrinsic.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Frustdoc%2Fsafe-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Frustdoc%2Fsafe-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsafe-intrinsic.rs?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -0,0 +1,20 @@\n+#![feature(intrinsics)]\n+#![feature(no_core)]\n+\n+#![no_core]\n+#![crate_name = \"foo\"]\n+\n+extern \"rust-intrinsic\" {\n+    // @has 'foo/fn.abort.html'\n+    // @has - '//pre[@class=\"rust fn\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n+    pub fn abort() -> !;\n+    // @has 'foo/fn.unreachable.html'\n+    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    pub fn unreachable() -> !;\n+}\n+\n+extern \"C\" {\n+    // @has 'foo/fn.needs_drop.html'\n+    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    pub fn needs_drop() -> !;\n+}"}, {"sha": "965bc67a381ae751c6d0095012e391bc60c1adcf", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.32bit.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -0,0 +1,36 @@\n+error[E0764]: mutable references are not allowed in the final value of constants\n+  --> $DIR/issue-76510.rs:5:29\n+   |\n+LL | const S: &'static mut str = &mut \" hello \";\n+   |                             ^^^^^^^^^^^^^^\n+\n+error[E0658]: mutation through a reference is not allowed in constants\n+  --> $DIR/issue-76510.rs:5:29\n+   |\n+LL | const S: &'static mut str = &mut \" hello \";\n+   |                             ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/issue-76510.rs:5:29\n+   |\n+LL | const S: &'static mut str = &mut \" hello \";\n+   |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/issue-76510.rs:5:1\n+   |\n+LL | const S: &'static mut str = &mut \" hello \";\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered mutable reference in a `const`\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257e\u2500alloc2\u2500\u2500\u257c 07 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+           }\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0080, E0596, E0658, E0764.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "ac7d5993585e8a34deff3764f02eeefbbcc4838d", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.64bit.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -0,0 +1,36 @@\n+error[E0764]: mutable references are not allowed in the final value of constants\n+  --> $DIR/issue-76510.rs:5:29\n+   |\n+LL | const S: &'static mut str = &mut \" hello \";\n+   |                             ^^^^^^^^^^^^^^\n+\n+error[E0658]: mutation through a reference is not allowed in constants\n+  --> $DIR/issue-76510.rs:5:29\n+   |\n+LL | const S: &'static mut str = &mut \" hello \";\n+   |                             ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/issue-76510.rs:5:29\n+   |\n+LL | const S: &'static mut str = &mut \" hello \";\n+   |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/issue-76510.rs:5:1\n+   |\n+LL | const S: &'static mut str = &mut \" hello \";\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered mutable reference in a `const`\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 07 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+           }\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0080, E0596, E0658, E0764.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "892f6c98116c2184953bc3fba45ad2e6f368876f", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -0,0 +1,18 @@\n+// stderr-per-bitwidth\n+\n+use std::mem::{transmute, ManuallyDrop};\n+\n+const S: &'static mut str = &mut \" hello \";\n+//~^ ERROR: mutable references are not allowed in the final value of constants\n+//~| ERROR: mutation through a reference is not allowed in constants\n+//~| ERROR: cannot borrow data in a `&` reference as mutable\n+//~| ERROR: it is undefined behavior to use this value\n+\n+const fn trigger() -> [(); unsafe {\n+        let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n+        0\n+    }] {\n+    [(); 0]\n+}\n+\n+fn main() {}"}, {"sha": "8c8d86d5e3817ee9c225fc891a48f1eacd3a3889", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/52b22869db9554728b0d2133a7c1dd9c713b3b16/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=52b22869db9554728b0d2133a7c1dd9c713b3b16", "patch": "@@ -10,6 +10,7 @@ const {Options, runTest} = require('browser-ui-test');\n function showHelp() {\n     console.log(\"rustdoc-js options:\");\n     console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n+    console.log(\"  --file [PATH]              : file to run (can be repeated)\");\n     console.log(\"  --help                     : show this message then quit\");\n     console.log(\"  --tests-folder [PATH]      : location of the .GOML tests folder\");\n }\n@@ -18,6 +19,7 @@ function parseOptions(args) {\n     var opts = {\n         \"doc_folder\": \"\",\n         \"tests_folder\": \"\",\n+        \"files\": [],\n     };\n     var correspondances = {\n         \"--doc-folder\": \"doc_folder\",\n@@ -26,13 +28,18 @@ function parseOptions(args) {\n \n     for (var i = 0; i < args.length; ++i) {\n         if (args[i] === \"--doc-folder\"\n-            || args[i] === \"--tests-folder\") {\n+            || args[i] === \"--tests-folder\"\n+            || args[i] === \"--file\") {\n             i += 1;\n             if (i >= args.length) {\n                 console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n                 return null;\n             }\n-            opts[correspondances[args[i - 1]]] = args[i];\n+            if (args[i - 1] !== \"--file\") {\n+                opts[correspondances[args[i - 1]]] = args[i];\n+            } else {\n+                opts[\"files\"].push(args[i]);\n+            }\n         } else if (args[i] === \"--help\") {\n             showHelp();\n             process.exit(0);\n@@ -78,7 +85,12 @@ async function main(argv) {\n     }\n \n     let failed = false;\n-    let files = fs.readdirSync(opts[\"tests_folder\"]).filter(file => path.extname(file) == \".goml\");\n+    let files;\n+    if (opts[\"files\"].length === 0) {\n+        files = fs.readdirSync(opts[\"tests_folder\"]).filter(file => path.extname(file) == \".goml\");\n+    } else {\n+        files = opts[\"files\"].filter(file => path.extname(file) == \".goml\");\n+    }\n \n     files.sort();\n     for (var i = 0; i < files.length; ++i) {"}]}