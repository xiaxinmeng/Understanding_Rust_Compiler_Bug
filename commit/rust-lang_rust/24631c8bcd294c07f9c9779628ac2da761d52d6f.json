{"sha": "24631c8bcd294c07f9c9779628ac2da761d52d6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NjMxYzhiY2QyOTRjMDdmOWM5Nzc5NjI4YWMyZGE3NjFkNTJkNmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-17T03:53:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-03T20:04:30Z"}, "message": "extra: Add an intrusive MPSC to be used soon", "tree": {"sha": "585decca966050fe91ad80db6a9e624a1668eecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/585decca966050fe91ad80db6a9e624a1668eecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24631c8bcd294c07f9c9779628ac2da761d52d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24631c8bcd294c07f9c9779628ac2da761d52d6f", "html_url": "https://github.com/rust-lang/rust/commit/24631c8bcd294c07f9c9779628ac2da761d52d6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24631c8bcd294c07f9c9779628ac2da761d52d6f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a417de94a94429e35afeb0a3eb867c2b1837a484", "url": "https://api.github.com/repos/rust-lang/rust/commits/a417de94a94429e35afeb0a3eb867c2b1837a484", "html_url": "https://github.com/rust-lang/rust/commit/a417de94a94429e35afeb0a3eb867c2b1837a484"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "afbf34d07535d06bafcd9d6f5f11c4ae2db7e05c", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24631c8bcd294c07f9c9779628ac2da761d52d6f/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/24631c8bcd294c07f9c9779628ac2da761d52d6f/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=24631c8bcd294c07f9c9779628ac2da761d52d6f", "patch": "@@ -41,6 +41,7 @@\n     \"libstd/sync/mpsc_queue.rs\", # BSD\n     \"libstd/sync/spsc_queue.rs\", # BSD\n     \"libstd/sync/mpmc_bounded_queue.rs\", # BSD\n+    \"libextra/sync/mpsc_intrusive.rs\", # BSD\n ]\n \n def check_license(name, contents):"}, {"sha": "0f13a4980d9191c58029d4144549279828dd4232", "filename": "src/libextra/sync/mpsc_intrusive.rs", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/24631c8bcd294c07f9c9779628ac2da761d52d6f/src%2Flibextra%2Fsync%2Fmpsc_intrusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24631c8bcd294c07f9c9779628ac2da761d52d6f/src%2Flibextra%2Fsync%2Fmpsc_intrusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync%2Fmpsc_intrusive.rs?ref=24631c8bcd294c07f9c9779628ac2da761d52d6f", "patch": "@@ -0,0 +1,139 @@\n+/* Copyright (c) 2010-2011 Dmitry Vyukov. All rights reserved.\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ *    1. Redistributions of source code must retain the above copyright notice,\n+ *       this list of conditions and the following disclaimer.\n+ *\n+ *    2. Redistributions in binary form must reproduce the above copyright\n+ *       notice, this list of conditions and the following disclaimer in the\n+ *       documentation and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY DMITRY VYUKOV \"AS IS\" AND ANY EXPRESS OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n+ * EVENT SHALL DMITRY VYUKOV OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ * The views and conclusions contained in the software and documentation are\n+ * those of the authors and should not be interpreted as representing official\n+ * policies, either expressed or implied, of Dmitry Vyukov.\n+ */\n+\n+//! A mostly lock-free multi-producer, single consumer queue.\n+//!\n+//! This module implements an intrusive MPSC queue. This queue is incredibly\n+//! unsafe (due to use of unsafe pointers for nodes), and hence is not public.\n+\n+// http://www.1024cores.net/home/lock-free-algorithms\n+//                         /queues/intrusive-mpsc-node-based-queue\n+\n+use std::cast;\n+use std::sync::atomics;\n+\n+// NB: all links are done as AtomicUint instead of AtomicPtr to allow for static\n+// initialization.\n+\n+pub struct Node<T> {\n+    next: atomics::AtomicUint,\n+    data: T,\n+}\n+\n+pub struct DummyNode {\n+    next: atomics::AtomicUint,\n+}\n+\n+pub struct Queue<T> {\n+    head: atomics::AtomicUint,\n+    tail: *mut Node<T>,\n+    stub: DummyNode,\n+}\n+\n+impl<T: Send> Queue<T> {\n+    pub fn new() -> Queue<T> {\n+        Queue {\n+            head: atomics::AtomicUint::new(0),\n+            tail: 0 as *mut Node<T>,\n+            stub: DummyNode {\n+                next: atomics::AtomicUint::new(0),\n+            },\n+        }\n+    }\n+\n+    pub unsafe fn push(&mut self, node: *mut Node<T>) {\n+        (*node).next.store(0, atomics::Release);\n+        let prev = self.head.swap(node as uint, atomics::AcqRel);\n+\n+        // Note that this code is slightly modified to allow static\n+        // initialization of these queues with rust's flavor of static\n+        // initialization.\n+        if prev == 0 {\n+            self.stub.next.store(node as uint, atomics::Release);\n+        } else {\n+            let prev = prev as *mut Node<T>;\n+            (*prev).next.store(node as uint, atomics::Release);\n+        }\n+    }\n+\n+    /// You'll note that the other MPSC queue in std::sync is non-intrusive and\n+    /// returns a `PopResult` here to indicate when the queue is inconsistent.\n+    /// An \"inconsistent state\" in the other queue means that a pusher has\n+    /// pushed, but it hasn't finished linking the rest of the chain.\n+    ///\n+    /// This queue also suffers from this problem, but I currently haven't been\n+    /// able to detangle when this actually happens. This code is translated\n+    /// verbatim from the website above, and is more complicated than the\n+    /// non-intrusive version.\n+    ///\n+    /// Right now consumers of this queue must be ready for this fact. Just\n+    /// because `pop` returns `None` does not mean that there is not data\n+    /// on the queue.\n+    pub unsafe fn pop(&mut self) -> Option<*mut Node<T>> {\n+        let tail = self.tail;\n+        let mut tail = if !tail.is_null() {tail} else {\n+            cast::transmute(&self.stub)\n+        };\n+        let mut next = (*tail).next(atomics::Relaxed);\n+        if tail as uint == &self.stub as *DummyNode as uint {\n+            if next.is_null() {\n+                return None;\n+            }\n+            self.tail = next;\n+            tail = next;\n+            next = (*next).next(atomics::Relaxed);\n+        }\n+        if !next.is_null() {\n+            self.tail = next;\n+            return Some(tail);\n+        }\n+        let head = self.head.load(atomics::Acquire) as *mut Node<T>;\n+        if tail != head {\n+            return None;\n+        }\n+        let stub = cast::transmute(&self.stub);\n+        self.push(stub);\n+        next = (*tail).next(atomics::Relaxed);\n+        if !next.is_null() {\n+            self.tail = next;\n+            return Some(tail);\n+        }\n+        return None\n+    }\n+}\n+\n+impl<T: Send> Node<T> {\n+    pub fn new(t: T) -> Node<T> {\n+        Node {\n+            data: t,\n+            next: atomics::AtomicUint::new(0),\n+        }\n+    }\n+    pub unsafe fn next(&mut self, ord: atomics::Ordering) -> *mut Node<T> {\n+        cast::transmute::<uint, *mut Node<T>>(self.next.load(ord))\n+    }\n+}"}]}