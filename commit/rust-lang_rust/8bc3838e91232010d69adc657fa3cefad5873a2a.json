{"sha": "8bc3838e91232010d69adc657fa3cefad5873a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYzM4MzhlOTEyMzIwMTBkNjlhZGM2NTdmYTNjZWZhZDU4NzNhMmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T18:06:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-27T18:06:48Z"}, "message": "Merge 'richo/unquote-crates' into less-quotes\n\nConflicts:\n\tsrc/libsyntax/parse/parser.rs", "tree": {"sha": "cff63614814ab2de2103b6fa2e19f94f61c4effe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cff63614814ab2de2103b6fa2e19f94f61c4effe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc3838e91232010d69adc657fa3cefad5873a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc3838e91232010d69adc657fa3cefad5873a2a", "html_url": "https://github.com/rust-lang/rust/commit/8bc3838e91232010d69adc657fa3cefad5873a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc3838e91232010d69adc657fa3cefad5873a2a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b24a3b82011c3b78573ace4ade3f99d7c4701a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/b24a3b82011c3b78573ace4ade3f99d7c4701a11", "html_url": "https://github.com/rust-lang/rust/commit/b24a3b82011c3b78573ace4ade3f99d7c4701a11"}, {"sha": "13e4270bf9468e9213b6cc16ca217062791599a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e4270bf9468e9213b6cc16ca217062791599a0", "html_url": "https://github.com/rust-lang/rust/commit/13e4270bf9468e9213b6cc16ca217062791599a0"}], "stats": {"total": 161, "additions": 137, "deletions": 24}, "files": [{"sha": "b39a4f7b51678289a09717904bb48b1fc486eb88", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -980,7 +980,7 @@ extern crate pcre;\n \n extern crate std; // equivalent to: extern crate std as std;\n \n-extern crate \"std\" as ruststd; // linking to 'std' under another name\n+extern crate std as ruststd; // linking to 'std' under another name\n ```\n \n ##### Use declarations"}, {"sha": "ce03e26866b7dd1376393290fc2f29ef078ce09a", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -24,77 +24,117 @@ use vec::Vec;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, R: Read + ?Sized> Read for &'a mut R {\n+    #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n+\n+    #[inline]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_to_end(buf)\n     }\n+\n+    #[inline]\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_to_string(buf)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, W: Write + ?Sized> Write for &'a mut W {\n+    #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n+\n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { (**self).flush() }\n+\n+    #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         (**self).write_all(buf)\n     }\n+\n+    #[inline]\n     fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n         (**self).write_fmt(fmt)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, S: Seek + ?Sized> Seek for &'a mut S {\n+    #[inline]\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, B: BufRead + ?Sized> BufRead for &'a mut B {\n+    #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }\n+\n+    #[inline]\n     fn consume(&mut self, amt: usize) { (**self).consume(amt) }\n+\n+    #[inline]\n     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_until(byte, buf)\n     }\n+\n+    #[inline]\n     fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_line(buf)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<R: Read + ?Sized> Read for Box<R> {\n+    #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n+\n+    #[inline]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_to_end(buf)\n     }\n+\n+    #[inline]\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_to_string(buf)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write + ?Sized> Write for Box<W> {\n+    #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n+\n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { (**self).flush() }\n+\n+    #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         (**self).write_all(buf)\n     }\n+\n+    #[inline]\n     fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n         (**self).write_fmt(fmt)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<S: Seek + ?Sized> Seek for Box<S> {\n+    #[inline]\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B: BufRead + ?Sized> BufRead for Box<B> {\n+    #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }\n+\n+    #[inline]\n     fn consume(&mut self, amt: usize) { (**self).consume(amt) }\n+\n+    #[inline]\n     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_until(byte, buf)\n     }\n+\n+    #[inline]\n     fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_line(buf)\n     }\n@@ -105,6 +145,7 @@ impl<B: BufRead + ?Sized> BufRead for Box<B> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Read for &'a [u8] {\n+    #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let amt = cmp::min(buf.len(), self.len());\n         let (a, b) = self.split_at(amt);\n@@ -116,12 +157,16 @@ impl<'a> Read for &'a [u8] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> BufRead for &'a [u8] {\n+    #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(*self) }\n+\n+    #[inline]\n     fn consume(&mut self, amt: usize) { *self = &self[amt..]; }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for &'a mut [u8] {\n+    #[inline]\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let amt = cmp::min(data.len(), self.len());\n         let (a, b) = mem::replace(self, &mut []).split_at_mut(amt);\n@@ -130,6 +175,7 @@ impl<'a> Write for &'a mut [u8] {\n         Ok(amt)\n     }\n \n+    #[inline]\n     fn write_all(&mut self, data: &[u8]) -> io::Result<()> {\n         if try!(self.write(data)) == data.len() {\n             Ok(())\n@@ -138,20 +184,87 @@ impl<'a> Write for &'a mut [u8] {\n         }\n     }\n \n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Vec<u8> {\n+    #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.push_all(buf);\n         Ok(buf.len())\n     }\n \n+    #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.push_all(buf);\n         Ok(())\n     }\n \n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use io::prelude::*;\n+    use vec::Vec;\n+    use test;\n+\n+    #[bench]\n+    fn bench_read_slice(b: &mut test::Bencher) {\n+        let buf = [5; 1024];\n+        let mut dst = [0; 128];\n+\n+        b.iter(|| {\n+            let mut rd = &buf[..];\n+            for _ in (0 .. 8) {\n+                let _ = rd.read(&mut dst);\n+                test::black_box(&dst);\n+            }\n+        })\n+    }\n+\n+    #[bench]\n+    fn bench_write_slice(b: &mut test::Bencher) {\n+        let mut buf = [0; 1024];\n+        let src = [5; 128];\n+\n+        b.iter(|| {\n+            let mut wr = &mut buf[..];\n+            for _ in (0 .. 8) {\n+                let _ = wr.write_all(&src);\n+                test::black_box(&wr);\n+            }\n+        })\n+    }\n+\n+    #[bench]\n+    fn bench_read_vec(b: &mut test::Bencher) {\n+        let buf = vec![5; 1024];\n+        let mut dst = [0; 128];\n+\n+        b.iter(|| {\n+            let mut rd = &buf[..];\n+            for _ in (0 .. 8) {\n+                let _ = rd.read(&mut dst);\n+                test::black_box(&dst);\n+            }\n+        })\n+    }\n+\n+    #[bench]\n+    fn bench_write_vec(b: &mut test::Bencher) {\n+        let mut buf = Vec::with_capacity(1024);\n+        let src = [5; 128];\n+\n+        b.iter(|| {\n+            let mut wr = &mut buf[..];\n+            for _ in (0 .. 8) {\n+                let _ = wr.write_all(&src);\n+                test::black_box(&wr);\n+            }\n+        })\n+    }\n+}"}, {"sha": "021ec4738ed94416797fd687d1178be21eaaad34", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -52,7 +52,7 @@ struct StandardLibraryInjector {\n impl fold::Folder for StandardLibraryInjector {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n \n-        // The name to use in `extern crate \"name\" as std;`\n+        // The name to use in `extern crate name as std;`\n         let actual_crate_name = match self.alt_std_name {\n             Some(ref s) => token::intern(&s),\n             None => token::intern(\"std\"),"}, {"sha": "4980eb8b91386b681911f1d5174ab628179ed76f", "filename": "src/test/auxiliary/syntax_extension_with_dll_deps_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -13,7 +13,7 @@\n #![crate_type = \"dylib\"]\n #![feature(plugin_registrar, quote, rustc_private)]\n \n-extern crate \"syntax_extension_with_dll_deps_1\" as other;\n+extern crate syntax_extension_with_dll_deps_1 as other;\n extern crate syntax;\n extern crate rustc;\n "}, {"sha": "4e99cc26bceefa55ec688fc810930b76e21f5576", "filename": "src/test/auxiliary/trait_default_method_xc_aux_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:trait_default_method_xc_aux.rs\n \n-extern crate \"trait_default_method_xc_aux\" as aux;\n+extern crate trait_default_method_xc_aux as aux;\n use aux::A;\n \n pub struct a_struct { pub x: int }"}, {"sha": "a613aa84d7183fcce82e33139c7cd64bf01a2472", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -15,7 +15,7 @@\n extern crate graphviz;\n // A simple rust project\n \n-extern crate \"flate\" as myflate;\n+extern crate flate as myflate;\n \n use std::collections::{HashMap,HashSet};\n use std::cell::RefCell;"}, {"sha": "fbc6c28fd4a580e6e43e208aa5cdbe385d3cd773", "filename": "src/test/run-pass/derive-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderive-no-std.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -13,7 +13,7 @@\n \n extern crate core;\n extern crate rand;\n-extern crate \"serialize\" as rustc_serialize;\n+extern crate serialize as rustc_serialize;\n extern crate collections;\n \n // Issue #16803"}, {"sha": "1757ff51fed3f64bcff298ba4905a2ae4ab5ce34", "filename": "src/test/run-pass/extern-foreign-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -10,6 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"std\" as mystd;\n+extern crate std as mystd;\n \n pub fn main() {}"}, {"sha": "72d4dd73667e89708649914ad1edb27ea97fe842", "filename": "src/test/run-pass/for-loop-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -13,7 +13,7 @@\n #![feature(lang_items, start, no_std, core, collections)]\n #![no_std]\n \n-extern crate \"std\" as other;\n+extern crate std as other;\n \n #[macro_use] extern crate core;\n #[macro_use] extern crate collections;"}, {"sha": "8ee4becbb81ca16d94d89d9c84189b17d3891cd1", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -13,7 +13,7 @@\n #![feature(lang_items, start, no_std, core, collections)]\n #![no_std]\n \n-extern crate \"std\" as other;\n+extern crate std as other;\n \n #[macro_use] extern crate core;\n #[macro_use] extern crate collections;"}, {"sha": "dd5b7e722fe7bb775d533dc4b12d45d9d0fbb0aa", "filename": "src/test/run-pass/issue-14330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fissue-14330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fissue-14330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14330.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -10,6 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#[macro_use] extern crate \"std\" as std2;\n+#[macro_use] extern crate std as std2;\n \n fn main() {}"}, {"sha": "9cada12685f3cca37fae8b6432b5aa2c7739a991", "filename": "src/test/run-pass/linkage1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage1.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -14,7 +14,7 @@\n \n #![feature(linkage)]\n \n-extern crate \"linkage1\" as other;\n+extern crate linkage1 as other;\n \n extern {\n     #[linkage = \"extern_weak\"]"}, {"sha": "ed7b1cbacadd7f401a516011944c9f6231a62708", "filename": "src/test/run-pass/macro-crate-nonterminal-renamed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fmacro-crate-nonterminal-renamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fmacro-crate-nonterminal-renamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-crate-nonterminal-renamed.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -12,7 +12,7 @@\n // ignore-stage1\n \n #[macro_use]\n-extern crate \"macro_crate_nonterminal\" as new_name;\n+extern crate macro_crate_nonterminal as new_name;\n \n pub fn main() {\n     new_name::check_local();"}, {"sha": "80de65c0e9f656daba5bcce0d6946693def88c35", "filename": "src/test/run-pass/static-fn-inline-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fstatic-fn-inline-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fstatic-fn-inline-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-fn-inline-xc.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -12,7 +12,7 @@\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"static_fn_inline_xc_aux\" as mycore;\n+extern crate static_fn_inline_xc_aux as mycore;\n \n use mycore::num;\n "}, {"sha": "550e03c8b12fbedd17b4fdeb06646a1ff1927e1c", "filename": "src/test/run-pass/static-fn-trait-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fstatic-fn-trait-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fstatic-fn-trait-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-fn-trait-xc.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -12,7 +12,7 @@\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"static_fn_trait_xc_aux\" as mycore;\n+extern crate static_fn_trait_xc_aux as mycore;\n \n use mycore::num;\n "}, {"sha": "d4ed72704001690073c8c7f9312a29c770736f45", "filename": "src/test/run-pass/trait-default-method-xc-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc-2.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -14,8 +14,8 @@\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"trait_default_method_xc_aux\" as aux;\n-extern crate \"trait_default_method_xc_aux_2\" as aux2;\n+extern crate trait_default_method_xc_aux as aux;\n+extern crate trait_default_method_xc_aux_2 as aux2;\n use aux::A;\n use aux2::{a_struct, welp};\n "}, {"sha": "59b44a7a6dc612101c4d3aa13cdc9715f55d7115", "filename": "src/test/run-pass/trait-default-method-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -12,7 +12,7 @@\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"trait_default_method_xc_aux\" as aux;\n+extern crate trait_default_method_xc_aux as aux;\n use aux::{A, TestEquality, Something};\n use aux::B;\n "}, {"sha": "128be2993ec1db26fda867ecfbf8536b94321de7", "filename": "src/test/run-pass/trait-inheritance-auto-xc-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc-2.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -12,7 +12,7 @@\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"trait_inheritance_auto_xc_2_aux\" as aux;\n+extern crate trait_inheritance_auto_xc_2_aux as aux;\n \n // aux defines impls of Foo, Bar and Baz for A\n use aux::{Foo, Bar, Baz, A};"}, {"sha": "cfef5c2b50332aa1e02120dadada363a95afb515", "filename": "src/test/run-pass/trait-inheritance-auto-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -12,7 +12,7 @@\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"trait_inheritance_auto_xc_aux\" as aux;\n+extern crate trait_inheritance_auto_xc_aux as aux;\n \n use aux::{Foo, Bar, Baz, Quux};\n "}, {"sha": "23d612baa1c0ea6fb5f6b40fb6da03e93b2db80b", "filename": "src/test/run-pass/trait-inheritance-cross-trait-call-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cross-trait-call-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cross-trait-call-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cross-trait-call-xc.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -12,7 +12,7 @@\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"trait_inheritance_cross_trait_call_xc_aux\" as aux;\n+extern crate trait_inheritance_cross_trait_call_xc_aux as aux;\n \n use aux::Foo;\n "}, {"sha": "98594183a00d0e95c79df10781901db98f6a5c87", "filename": "src/test/run-pass/use-crate-name-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fuse-crate-name-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fuse-crate-name-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-crate-name-alias.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -11,6 +11,6 @@\n // Issue #1706\n // pretty-expanded FIXME #23616\n \n-extern crate \"std\" as stdlib;\n+extern crate std as stdlib;\n \n pub fn main() {}"}, {"sha": "e4b13b601763c23b3eb12e0d24adb4ff3863f965", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -15,7 +15,7 @@\n #![no_std]\n \n extern crate std;\n-extern crate \"std\" as zed;\n+extern crate std as zed;\n \n use std::str;\n use zed::str as x;"}, {"sha": "f81509025a8a22560bb8f5369efef2aec9d96fa5", "filename": "src/test/run-pass/vec-macro-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -13,7 +13,7 @@\n #![feature(lang_items, start, no_std, core, libc, collections)]\n #![no_std]\n \n-extern crate \"std\" as other;\n+extern crate std as other;\n \n #[macro_use]\n extern crate core;"}, {"sha": "ac8b15d7bf58990e883430fa4e3d2facf7361acc", "filename": "src/test/run-pass/xcrate-address-insignificant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fxcrate-address-insignificant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc3838e91232010d69adc657fa3cefad5873a2a/src%2Ftest%2Frun-pass%2Fxcrate-address-insignificant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-address-insignificant.rs?ref=8bc3838e91232010d69adc657fa3cefad5873a2a", "patch": "@@ -12,7 +12,7 @@\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"xcrate_address_insignificant\" as foo;\n+extern crate xcrate_address_insignificant as foo;\n \n pub fn main() {\n     assert_eq!(foo::foo::<f64>(), foo::bar());"}]}