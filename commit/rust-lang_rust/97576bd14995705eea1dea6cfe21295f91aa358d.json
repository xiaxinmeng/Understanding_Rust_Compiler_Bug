{"sha": "97576bd14995705eea1dea6cfe21295f91aa358d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NTc2YmQxNDk5NTcwNWVlYTFkZWE2Y2ZlMjEyOTVmOTFhYTM1OGQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-10T15:24:20Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-10T15:24:20Z"}, "message": "Move some uses of walk to visit in trans.rs", "tree": {"sha": "4e31c39c2c9c29f5d0cffba9e4ff13962b2744d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e31c39c2c9c29f5d0cffba9e4ff13962b2744d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97576bd14995705eea1dea6cfe21295f91aa358d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97576bd14995705eea1dea6cfe21295f91aa358d", "html_url": "https://github.com/rust-lang/rust/commit/97576bd14995705eea1dea6cfe21295f91aa358d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97576bd14995705eea1dea6cfe21295f91aa358d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e25e05539e3cb436eb6a6a6305ae6e62fc14a375", "url": "https://api.github.com/repos/rust-lang/rust/commits/e25e05539e3cb436eb6a6a6305ae6e62fc14a375", "html_url": "https://github.com/rust-lang/rust/commit/e25e05539e3cb436eb6a6a6305ae6e62fc14a375"}], "stats": {"total": 121, "additions": 46, "deletions": 75}, "files": [{"sha": "43bcc0052ed651ffc22907e4c6181244db1c232b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 46, "deletions": 75, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/97576bd14995705eea1dea6cfe21295f91aa358d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97576bd14995705eea1dea6cfe21295f91aa358d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=97576bd14995705eea1dea6cfe21295f91aa358d", "patch": "@@ -36,6 +36,7 @@ import back::abi;\n import back::upcall;\n \n import middle::ty::pat_ty;\n+import visit::vt;\n \n import util::common;\n import util::common::istr;\n@@ -7960,50 +7961,22 @@ fn decl_native_fn_and_pair(&@crate_ctxt ccx,\n     finish_fn(fcx, lltop);\n }\n \n-type walk_ctxt = rec(mutable vec[str] path);\n-fn new_walk_ctxt() -> @walk_ctxt {\n-    let vec[str] path = [];\n-    ret @rec(mutable path=path);\n-}\n-\n-fn enter_item(@walk_ctxt cx, &@ast::item item) {\n-    alt (item.node) {\n-        case (ast::item_fn(?name, _, _, _, _)) {\n-            vec::push[str](cx.path, name);\n-        }\n-        case (ast::item_obj(?name, _, _, _, _)) {\n-            vec::push[str](cx.path, name);\n-        }\n-        case (ast::item_mod(?name, _, _)) {\n-            vec::push[str](cx.path, name);\n-        }\n-        case (_) { }\n-    }\n-}\n-\n-fn leave_item(@walk_ctxt cx, &@ast::item item) {\n+fn item_path(&@ast::item item) -> vec[str] {\n     alt (item.node) {\n-        case (ast::item_fn(_, _, _, _, _)) {\n-            vec::pop[str](cx.path);\n-        }\n-        case (ast::item_obj(_, _, _, _, _)) {\n-            vec::pop[str](cx.path);\n-        }\n-        case (ast::item_mod(_, _, _)) {\n-            vec::pop[str](cx.path);\n-        }\n-        case (_) { }\n+        case (ast::item_fn(?name, _, _, _, _)) { ret [name]; }\n+        case (ast::item_obj(?name, _, _, _, _)) { ret [name]; }\n+        case (ast::item_mod(?name, _, _)) { ret [name]; }\n+        case (_) { ret []; }\n     }\n }\n \n-fn collect_native_item(&@crate_ctxt ccx, @walk_ctxt wcx,\n-                       &@ast::native_item i) {\n+fn collect_native_item(@crate_ctxt ccx, &@ast::native_item i,\n+                       &vec[str] pt, &vt[vec[str]] v) {\n     alt (i.node) {\n         case (ast::native_item_fn(?name, _, _, _, ?fid, ?ann)) {\n             ccx.native_items.insert(fid, i);\n             if (!ccx.obj_methods.contains_key(fid)) {\n-                decl_native_fn_and_pair(ccx, i.span, wcx.path,\n-                                        name, ann, fid);\n+                decl_native_fn_and_pair(ccx, i.span, pt, name, ann, fid);\n             }\n         }\n         case (ast::native_item_ty(_, ?tid)) {\n@@ -8012,9 +7985,9 @@ fn collect_native_item(&@crate_ctxt ccx, @walk_ctxt wcx,\n     }\n }\n \n-fn collect_item_1(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item i) {\n-    enter_item(wcx, i);\n-\n+fn collect_item_1(@crate_ctxt ccx, &@ast::item i,\n+                  &vec[str] pt, &vt[vec[str]] v) {\n+    visit::visit_item(i, pt + item_path(i), v);\n     alt (i.node) {\n         case (ast::item_const(?name, _, _, ?cid, ?ann)) {\n             auto typ = node_ann_type(ccx, ann);\n@@ -8041,19 +8014,20 @@ fn collect_item_1(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item i) {\n     }\n }\n \n-fn collect_item_2(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item i) {\n-    enter_item(wcx, i);\n-\n+fn collect_item_2(&@crate_ctxt ccx, &@ast::item i,\n+                  &vec[str] pt, &vt[vec[str]] v) {\n+    auto new_pt = pt + item_path(i);\n+    visit::visit_item(i, new_pt, v);\n     alt (i.node) {\n         case (ast::item_fn(?name, ?f, ?tps, ?fid, ?ann)) {\n             ccx.items.insert(fid, i);\n             if (!ccx.obj_methods.contains_key(fid)) {\n-                decl_fn_and_pair(ccx, i.span, wcx.path, \"fn\", tps, ann, fid);\n+                decl_fn_and_pair(ccx, i.span, new_pt, \"fn\", tps, ann, fid);\n             }\n         }\n         case (ast::item_obj(?name, ?ob, ?tps, ?oid, ?ann)) {\n             ccx.items.insert(oid.ctor, i);\n-            decl_fn_and_pair(ccx, i.span, wcx.path,\n+            decl_fn_and_pair(ccx, i.span, new_pt,\n                              \"obj_ctor\", tps, ann, oid.ctor);\n             for (@ast::method m in ob.methods) {\n                 ccx.obj_methods.insert(m.node.id, ());\n@@ -8064,29 +8038,28 @@ fn collect_item_2(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item i) {\n }\n \n fn collect_items(&@crate_ctxt ccx, @ast::crate crate) {\n-    auto wcx = new_walk_ctxt();\n-    auto visitor0 = walk::default_visitor();\n-    auto visitor1 = rec(visit_native_item_pre =\n-                          bind collect_native_item(ccx, wcx, _),\n-                        visit_item_pre = bind collect_item_1(ccx, wcx, _),\n-                        visit_item_post = bind leave_item(wcx, _)\n-                        with visitor0);\n-    auto visitor2 = rec(visit_item_pre = bind collect_item_2(ccx, wcx, _),\n-                        visit_item_post = bind leave_item(wcx, _)\n-                        with visitor0);\n-    walk::walk_crate(visitor1, *crate);\n-    walk::walk_crate(visitor2, *crate);\n-}\n-\n-fn collect_tag_ctor(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item i) {\n-    enter_item(wcx, i);\n+    auto visitor0 = visit::default_visitor();\n+    auto visitor1 = @rec(visit_native_item =\n+                             bind collect_native_item(ccx, _, _, _),\n+                         visit_item = bind collect_item_1(ccx, _, _, _)\n+                         with *visitor0);\n+    auto visitor2 = @rec(visit_item = bind collect_item_2(ccx, _, _, _)\n+                         with *visitor0);\n+    visit::visit_crate(*crate, [], visit::vtor(visitor1));\n+    visit::visit_crate(*crate, [], visit::vtor(visitor2));\n+}\n+\n+fn collect_tag_ctor(@crate_ctxt ccx, &@ast::item i,\n+                    &vec[str] pt, &vt[vec[str]] v) {\n+    auto new_pt = pt + item_path(i);\n+    visit::visit_item(i, new_pt, v);\n \n     alt (i.node) {\n         case (ast::item_tag(_, ?variants, ?tps, _, _)) {\n             for (ast::variant variant in variants) {\n                 if (vec::len[ast::variant_arg](variant.node.args) != 0u) {\n                     decl_fn_and_pair(ccx, i.span,\n-                                     wcx.path + [variant.node.name],\n+                                     new_pt + [variant.node.name],\n                                      \"tag\", tps, variant.node.ann,\n                                      variant.node.id);\n                 }\n@@ -8098,17 +8071,17 @@ fn collect_tag_ctor(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item i) {\n }\n \n fn collect_tag_ctors(&@crate_ctxt ccx, @ast::crate crate) {\n-    auto wcx = new_walk_ctxt();\n-    auto visitor = rec(visit_item_pre = bind collect_tag_ctor(ccx, wcx, _),\n-                       visit_item_post = bind leave_item(wcx, _)\n-                       with walk::default_visitor());\n-    walk::walk_crate(visitor, *crate);\n+    auto visitor = @rec(visit_item = bind collect_tag_ctor(ccx, _, _, _)\n+                        with *visit::default_visitor());\n+    visit::visit_crate(*crate, [], visit::vtor(visitor));\n }\n \n // The constant translation pass.\n \n-fn trans_constant(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item it) {\n-    enter_item(wcx, it);\n+fn trans_constant(@crate_ctxt ccx, &@ast::item it,\n+                  &vec[str] pt, &vt[vec[str]] v) {\n+    auto new_pt = pt + item_path(it);\n+    visit::visit_item(it, new_pt, v);\n \n     alt (it.node) {\n         case (ast::item_tag(?ident, ?variants, _, ?tag_id, _)) {\n@@ -8119,7 +8092,7 @@ fn trans_constant(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item it) {\n \n                 auto discrim_val = C_int(i as int);\n \n-                auto p = wcx.path + [ident, variant.node.name, \"discrim\"];\n+                auto p = new_pt + [ident, variant.node.name, \"discrim\"];\n                 auto s = mangle_exported_name(ccx, p, ty::mk_int(ccx.tcx));\n                 auto discrim_gvar = llvm::LLVMAddGlobal(ccx.llmod, T_int(),\n                                                        str::buf(s));\n@@ -8139,7 +8112,7 @@ fn trans_constant(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item it) {\n             // with consts.\n             auto v = C_int(1);\n             ccx.item_ids.insert(cid, v);\n-            auto s = mangle_exported_name(ccx, wcx.path + [name],\n+            auto s = mangle_exported_name(ccx, new_pt + [name],\n                                           node_ann_type(ccx, ann));\n             ccx.item_symbols.insert(cid, s);\n         }\n@@ -8149,11 +8122,9 @@ fn trans_constant(&@crate_ctxt ccx, @walk_ctxt wcx, &@ast::item it) {\n }\n \n fn trans_constants(&@crate_ctxt ccx, @ast::crate crate) {\n-    auto wcx = new_walk_ctxt();\n-    auto visitor = rec(visit_item_pre = bind trans_constant(ccx, wcx, _),\n-                       visit_item_post = bind leave_item(wcx, _)\n-                       with walk::default_visitor());\n-    walk::walk_crate(visitor, *crate);\n+    auto visitor = @rec(visit_item = bind trans_constant(ccx, _, _, _)\n+                        with *visit::default_visitor());\n+    visit::visit_crate(*crate, [], visit::vtor(visitor));\n }\n \n "}]}