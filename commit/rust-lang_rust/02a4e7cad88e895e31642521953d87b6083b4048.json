{"sha": "02a4e7cad88e895e31642521953d87b6083b4048", "node_id": "C_kwDOAAsO6NoAKDAyYTRlN2NhZDg4ZTg5NWUzMTY0MjUyMTk1M2Q4N2I2MDgzYjQwNDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-16T09:12:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-16T09:12:42Z"}, "message": "Rollup merge of #91901 - SylvanB:remove_in_band_lifetimes_rustc_symbol_mangling, r=jackh726\n\nRemove `in_band_lifetimes` from `rustc_symbol_mangling`\n\nHelping out with  #91867", "tree": {"sha": "4b5f398f3363b8c50f9f5dfc9c401f002b515390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b5f398f3363b8c50f9f5dfc9c401f002b515390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02a4e7cad88e895e31642521953d87b6083b4048", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhuwMKCRBK7hj4Ov3rIwAAffQIAGZ+4DfeTlV1fewNfiAV49ly\nOdoXGydH2Kl8e+pogWALiUapPNElUKnYEYdqIRRRPMba8QYlKmNDV87vb2BeiPUu\n7V0u9ko3aNCmd/lcQSk6ts6B86TAA4DE+4aybuwzvtHZOh+VRLW/3iTZNBzVJMc9\nm+wYgVF5KVTK/udofNMgXCoWDJgwH3ITyDWtbnspC90zVG8zgOL6VU/plLAIZOUY\niqz+gGvePkNYawPMGIGrrO3R/JfFSzZOsiEhnfmS0WNJmg3fIfhMScd+qeChEY37\nGj45f+YwvHwZENaLC/W48JC44N14DigOvdaedIj4Q5OHTT8GCW6rIDOn/Kgdi+E=\n=/Ku5\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b5f398f3363b8c50f9f5dfc9c401f002b515390\nparent 9e1aff82e696c0edb568656ae6b509a9ab4d6c92\nparent 6c4fd615df63d72a6cb67d925405582a857ad044\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639645962 +0100\ncommitter GitHub <noreply@github.com> 1639645962 +0100\n\nRollup merge of #91901 - SylvanB:remove_in_band_lifetimes_rustc_symbol_mangling, r=jackh726\n\nRemove `in_band_lifetimes` from `rustc_symbol_mangling`\n\nHelping out with  #91867\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02a4e7cad88e895e31642521953d87b6083b4048", "html_url": "https://github.com/rust-lang/rust/commit/02a4e7cad88e895e31642521953d87b6083b4048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02a4e7cad88e895e31642521953d87b6083b4048/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e1aff82e696c0edb568656ae6b509a9ab4d6c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1aff82e696c0edb568656ae6b509a9ab4d6c92", "html_url": "https://github.com/rust-lang/rust/commit/9e1aff82e696c0edb568656ae6b509a9ab4d6c92"}, {"sha": "6c4fd615df63d72a6cb67d925405582a857ad044", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4fd615df63d72a6cb67d925405582a857ad044", "html_url": "https://github.com/rust-lang/rust/commit/6c4fd615df63d72a6cb67d925405582a857ad044"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "cdea84a8d60f7ae54a43dae4c24abdbef6972fae", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02a4e7cad88e895e31642521953d87b6083b4048/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a4e7cad88e895e31642521953d87b6083b4048/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=02a4e7cad88e895e31642521953d87b6083b4048", "patch": "@@ -13,7 +13,7 @@ use tracing::debug;\n use std::fmt::{self, Write};\n use std::mem::{self, discriminant};\n \n-pub(super) fn mangle(\n+pub(super) fn mangle<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     instantiating_crate: Option<CrateNum>,\n@@ -199,7 +199,7 @@ struct SymbolPrinter<'tcx> {\n // `PrettyPrinter` aka pretty printing of e.g. types in paths,\n // symbol names should have their own printing machinery.\n \n-impl Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n+impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n     type Error = fmt::Error;\n \n     type Path = Self;\n@@ -345,7 +345,7 @@ impl Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n     }\n }\n \n-impl PrettyPrinter<'tcx> for &mut SymbolPrinter<'tcx> {\n+impl<'tcx> PrettyPrinter<'tcx> for &mut SymbolPrinter<'tcx> {\n     fn region_should_not_be_omitted(&self, _region: ty::Region<'_>) -> bool {\n         false\n     }"}, {"sha": "65b5852bc39839caf06fa128dce5533222d383bd", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02a4e7cad88e895e31642521953d87b6083b4048/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a4e7cad88e895e31642521953d87b6083b4048/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=02a4e7cad88e895e31642521953d87b6083b4048", "patch": "@@ -90,7 +90,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]\n@@ -116,7 +115,7 @@ pub mod test;\n /// This function computes the symbol name for the given `instance` and the\n /// given instantiating crate. That is, if you know that instance X is\n /// instantiated in crate Y, this is the symbol name this instance would have.\n-pub fn symbol_name_for_instance_in_crate(\n+pub fn symbol_name_for_instance_in_crate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     instantiating_crate: CrateNum,\n@@ -131,7 +130,7 @@ pub fn provide(providers: &mut Providers) {\n // The `symbol_name` query provides the symbol name for calling a given\n // instance from the local crate. In particular, it will also look up the\n // correct symbol name of instances from upstream crates.\n-fn symbol_name_provider(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::SymbolName<'tcx> {\n+fn symbol_name_provider<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::SymbolName<'tcx> {\n     let symbol_name = compute_symbol_name(tcx, instance, || {\n         // This closure determines the instantiating crate for instances that\n         // need an instantiating-crate-suffix for their symbol name, in order\n@@ -151,14 +150,14 @@ fn symbol_name_provider(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::Symb\n }\n \n /// This function computes the typeid for the given function ABI.\n-pub fn typeid_for_fnabi(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> String {\n+pub fn typeid_for_fnabi<'tcx>(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> String {\n     v0::mangle_typeid_for_fnabi(tcx, fn_abi)\n }\n \n /// Computes the symbol name for the given instance. This function will call\n /// `compute_instantiating_crate` if it needs to factor the instantiating crate\n /// into the symbol name.\n-fn compute_symbol_name(\n+fn compute_symbol_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     compute_instantiating_crate: impl FnOnce() -> CrateNum,"}, {"sha": "700765a351ce18f17e33b3f8d63de3d1da76d159", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a4e7cad88e895e31642521953d87b6083b4048/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a4e7cad88e895e31642521953d87b6083b4048/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=02a4e7cad88e895e31642521953d87b6083b4048", "patch": "@@ -31,7 +31,7 @@ struct SymbolNamesTest<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl SymbolNamesTest<'tcx> {\n+impl SymbolNamesTest<'_> {\n     fn process_attrs(&mut self, def_id: LocalDefId) {\n         let tcx = self.tcx;\n         for attr in tcx.get_attrs(def_id.to_def_id()).iter() {\n@@ -59,7 +59,7 @@ impl SymbolNamesTest<'tcx> {\n     }\n }\n \n-impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n+impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         self.process_attrs(item.def_id);\n     }"}, {"sha": "167ff758f34801b4429f212e53684976c2bc35f4", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02a4e7cad88e895e31642521953d87b6083b4048/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a4e7cad88e895e31642521953d87b6083b4048/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=02a4e7cad88e895e31642521953d87b6083b4048", "patch": "@@ -17,7 +17,7 @@ use std::fmt::Write;\n use std::iter;\n use std::ops::Range;\n \n-pub(super) fn mangle(\n+pub(super) fn mangle<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     instantiating_crate: Option<CrateNum>,\n@@ -56,7 +56,7 @@ pub(super) fn mangle(\n     std::mem::take(&mut cx.out)\n }\n \n-pub(super) fn mangle_typeid_for_fnabi(\n+pub(super) fn mangle_typeid_for_fnabi<'tcx>(\n     _tcx: TyCtxt<'tcx>,\n     fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n ) -> String {\n@@ -118,7 +118,7 @@ struct SymbolMangler<'tcx> {\n     consts: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n }\n \n-impl SymbolMangler<'tcx> {\n+impl<'tcx> SymbolMangler<'tcx> {\n     fn push(&mut self, s: &str) {\n         self.out.push_str(s);\n     }\n@@ -250,7 +250,7 @@ impl SymbolMangler<'tcx> {\n     }\n }\n \n-impl Printer<'tcx> for &mut SymbolMangler<'tcx> {\n+impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n     type Error = !;\n \n     type Path = Self;"}]}