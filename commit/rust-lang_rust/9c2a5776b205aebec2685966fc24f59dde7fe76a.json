{"sha": "9c2a5776b205aebec2685966fc24f59dde7fe76a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMmE1Nzc2YjIwNWFlYmVjMjY4NTk2NmZjMjRmNTlkZGU3ZmU3NmE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-22T14:30:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-22T14:30:22Z"}, "message": "Rollup merge of #81242 - jyn514:const-cap, r=sfackler\n\nEnforce statically that `MIN_NON_ZERO_CAP` is calculated at compile time\n\nPreviously, it would usually get computed by LLVM, but this enforces it. This removes the need for the comment saying \"LLVM is smart enough\".\n\nI don't expect this to make a performance difference, but I do think it makes the performance properties easier to reason about.", "tree": {"sha": "ba049a3d4573a2eec5e59dc7f972559cb1997775", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba049a3d4573a2eec5e59dc7f972559cb1997775"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c2a5776b205aebec2685966fc24f59dde7fe76a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCuF/CRBK7hj4Ov3rIwAAdHIIAIiWEHchS8VoHI3yfgs7BBLD\nMkkrUrGuaGxbJkvFrc8AlBhCWSlBiSKnjzDH/oVVPPnTyZ5PgwgcZS1B3SiSMhDB\nK7ahEfCms9ZwJ2AQDckhdi9azikVKRDAfrW4TAjL0PFhF+cq/VMeOmjY8SFfj4qp\nU3Oqm689/XGtUiJ4GvKfoM5sQkTKWukX0p3DYwpGwhYN7OkzDItsNtOx5t/ZHy6M\nmCjXwoYNBA2BGhzLfTLpk6cG8wdPDCjZke4hQh29eNwdKV/S5xN6GVju2AzEq45s\nVc+Sr0RsqUvjI72iiTECC0fzt4dqUZTS2Vg5tETlkZMJRfwCFxhnaP9ibaclQdM=\n=Kka2\n-----END PGP SIGNATURE-----\n", "payload": "tree ba049a3d4573a2eec5e59dc7f972559cb1997775\nparent 70597f28f6a97015d3d02ee34a7fa076128f3f32\nparent 758d855bff92cb35e13c5ae078639b862f02001f\nauthor Mara Bos <m-ou.se@m-ou.se> 1611325822 +0000\ncommitter GitHub <noreply@github.com> 1611325822 +0000\n\nRollup merge of #81242 - jyn514:const-cap, r=sfackler\n\nEnforce statically that `MIN_NON_ZERO_CAP` is calculated at compile time\n\nPreviously, it would usually get computed by LLVM, but this enforces it. This removes the need for the comment saying \"LLVM is smart enough\".\n\nI don't expect this to make a performance difference, but I do think it makes the performance properties easier to reason about.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c2a5776b205aebec2685966fc24f59dde7fe76a", "html_url": "https://github.com/rust-lang/rust/commit/9c2a5776b205aebec2685966fc24f59dde7fe76a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c2a5776b205aebec2685966fc24f59dde7fe76a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70597f28f6a97015d3d02ee34a7fa076128f3f32", "url": "https://api.github.com/repos/rust-lang/rust/commits/70597f28f6a97015d3d02ee34a7fa076128f3f32", "html_url": "https://github.com/rust-lang/rust/commit/70597f28f6a97015d3d02ee34a7fa076128f3f32"}, {"sha": "758d855bff92cb35e13c5ae078639b862f02001f", "url": "https://api.github.com/repos/rust-lang/rust/commits/758d855bff92cb35e13c5ae078639b862f02001f", "html_url": "https://github.com/rust-lang/rust/commit/758d855bff92cb35e13c5ae078639b862f02001f"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "36e2d18d3ddfbeb182647a848459baac7a79b55a", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9c2a5776b205aebec2685966fc24f59dde7fe76a/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2a5776b205aebec2685966fc24f59dde7fe76a/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=9c2a5776b205aebec2685966fc24f59dde7fe76a", "patch": "@@ -114,6 +114,19 @@ impl<T> RawVec<T, Global> {\n }\n \n impl<T, A: Allocator> RawVec<T, A> {\n+    // Tiny Vecs are dumb. Skip to:\n+    // - 8 if the element size is 1, because any heap allocators is likely\n+    //   to round up a request of less than 8 bytes to at least 8 bytes.\n+    // - 4 if elements are moderate-sized (<= 1 KiB).\n+    // - 1 otherwise, to avoid wasting too much space for very short Vecs.\n+    const MIN_NON_ZERO_CAP: usize = if mem::size_of::<T>() == 1 {\n+        8\n+    } else if mem::size_of::<T>() <= 1024 {\n+        4\n+    } else {\n+        1\n+    };\n+\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n     #[rustc_allow_const_fn_unstable(const_fn)]\n@@ -399,22 +412,7 @@ impl<T, A: Allocator> RawVec<T, A> {\n         // This guarantees exponential growth. The doubling cannot overflow\n         // because `cap <= isize::MAX` and the type of `cap` is `usize`.\n         let cap = cmp::max(self.cap * 2, required_cap);\n-\n-        // Tiny Vecs are dumb. Skip to:\n-        // - 8 if the element size is 1, because any heap allocators is likely\n-        //   to round up a request of less than 8 bytes to at least 8 bytes.\n-        // - 4 if elements are moderate-sized (<= 1 KiB).\n-        // - 1 otherwise, to avoid wasting too much space for very short Vecs.\n-        // Note that `min_non_zero_cap` is computed statically.\n-        let elem_size = mem::size_of::<T>();\n-        let min_non_zero_cap = if elem_size == 1 {\n-            8\n-        } else if elem_size <= 1024 {\n-            4\n-        } else {\n-            1\n-        };\n-        let cap = cmp::max(min_non_zero_cap, cap);\n+        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);\n \n         let new_layout = Layout::array::<T>(cap);\n "}]}