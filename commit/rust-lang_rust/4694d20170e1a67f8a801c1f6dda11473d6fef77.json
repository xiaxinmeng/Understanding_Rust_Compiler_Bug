{"sha": "4694d20170e1a67f8a801c1f6dda11473d6fef77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OTRkMjAxNzBlMWE2N2Y4YTgwMWMxZjZkZGExMTQ3M2Q2ZmVmNzc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-12T10:39:18Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-21T17:57:54Z"}, "message": "Escape combining characters in escape_debug", "tree": {"sha": "fcb2198b890657cdc7c7a7a26177eb69f07f4ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcb2198b890657cdc7c7a7a26177eb69f07f4ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4694d20170e1a67f8a801c1f6dda11473d6fef77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4694d20170e1a67f8a801c1f6dda11473d6fef77", "html_url": "https://github.com/rust-lang/rust/commit/4694d20170e1a67f8a801c1f6dda11473d6fef77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4694d20170e1a67f8a801c1f6dda11473d6fef77/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b72faf5795681352b5fba83dce91ee24c22e71c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b72faf5795681352b5fba83dce91ee24c22e71c8", "html_url": "https://github.com/rust-lang/rust/commit/b72faf5795681352b5fba83dce91ee24c22e71c8"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "c170e0c1ba1c96ae109898e272c5ad1040cd1835", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4694d20170e1a67f8a801c1f6dda11473d6fef77/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4694d20170e1a67f8a801c1f6dda11473d6fef77/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=4694d20170e1a67f8a801c1f6dda11473d6fef77", "patch": "@@ -229,8 +229,8 @@ impl char {\n             '\\r' => EscapeDefaultState::Backslash('r'),\n             '\\n' => EscapeDefaultState::Backslash('n'),\n             '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            c if is_printable(c) => EscapeDefaultState::Char(c),\n-            c => EscapeDefaultState::Unicode(c.escape_unicode()),\n+            _ if is_printable(self) => EscapeDefaultState::Char(self),\n+            _ => EscapeDefaultState::Unicode(self.escape_unicode()),\n         };\n         EscapeDebug(EscapeDefault { state: init_state })\n     }\n@@ -692,6 +692,28 @@ impl char {\n         general_category::Cc(self)\n     }\n \n+    /// Returns true if this `char` is a nonspacing mark code point, and false otherwise.\n+    ///\n+    /// 'Nonspacing mark code point' is defined in terms of the Unicode General\n+    /// Category `Mn`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// // U+0301, COMBINING ACUTE ACCENT\n+    /// assert!('\\u{301}'.is_nonspacing_mark());\n+    /// assert!(!'e'.is_nonspacing_mark());\n+    /// ```\n+    #[unstable(feature = \"rustc_private\",\n+               reason = \"mainly needed for compiler internals\",\n+               issue = \"27812\")]\n+    #[inline]\n+    pub fn is_nonspacing_mark(self) -> bool {\n+        general_category::Mn(self)\n+    }\n+\n     /// Returns true if this `char` is numeric, and false otherwise.\n     ///\n     /// 'Numeric'-ness is defined in terms of the Unicode General Categories"}, {"sha": "1cfde5131026a0b698ce81240ccd7f44d3676f70", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4694d20170e1a67f8a801c1f6dda11473d6fef77/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4694d20170e1a67f8a801c1f6dda11473d6fef77/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4694d20170e1a67f8a801c1f6dda11473d6fef77", "patch": "@@ -1844,8 +1844,14 @@ impl Display for str {\n impl Debug for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.write_char('\\'')?;\n-        for c in self.escape_debug() {\n-            f.write_char(c)?\n+        if self.is_nonspacing_mark() {\n+            for c in self.escape_unicode() {\n+                f.write_char(c)?\n+            }\n+        } else {\n+            for c in self.escape_debug() {\n+                f.write_char(c)?\n+            }\n         }\n         f.write_char('\\'')\n     }"}, {"sha": "5b3c181ea9bb3f21f55b9a3578a6b2a97ca81c7b", "filename": "src/libcore/unicode/unicode.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4694d20170e1a67f8a801c1f6dda11473d6fef77/src%2Flibcore%2Funicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/4694d20170e1a67f8a801c1f6dda11473d6fef77/src%2Flibcore%2Funicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode.py?ref=4694d20170e1a67f8a801c1f6dda11473d6fef77", "patch": "@@ -496,7 +496,7 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n                      [\"Full_Composition_Exclusion\"])\n \n         # category tables\n-        for (name, cat, pfuns) in (\"general_category\", gencats, [\"N\", \"Cc\"]), \\\n+        for (name, cat, pfuns) in (\"general_category\", gencats, [\"N\", \"Cc\", \"Mn\"]), \\\n                                   (\"derived_property\", derived, want_derived), \\\n                                   (\"property\", props, [\"White_Space\", \"Pattern_White_Space\"]):\n             emit_property_module(rf, name, cat, pfuns)"}]}