{"sha": "3e9a7f7fbbf2898b9f1d60886f92e76370040d83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOWE3ZjdmYmJmMjg5OGI5ZjFkNjA4ODZmOTJlNzYzNzAwNDBkODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-28T02:08:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-28T02:08:52Z"}, "message": "Auto merge of #46102 - kennytm:45861-step-1, r=alexcrichton\n\n[auto-toolstate][1/8] Always ignore build failure of failable tools (rls, rustfmt, clippy)\n\nIf build failed for these tools, they will be automatically skipped from distribution, and will not fail the whole build.\n\nTest failures are *not* ignored, nor build failure of other tools (e.g. cargo). Therefore it should have no observable effect to the current CI system.\n\nThis is step 1/8 of automatic management of broken tools #45861. The purpose is concentrate all failure detection about tools into a single CI job for easy management, while keeping the ability to distribute these tools in the nightlies.\n\nr? @Mark-Simulacrum", "tree": {"sha": "bcba2ba629244cdb69054441a1f47e2f2f1a1990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcba2ba629244cdb69054441a1f47e2f2f1a1990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9a7f7fbbf2898b9f1d60886f92e76370040d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9a7f7fbbf2898b9f1d60886f92e76370040d83", "html_url": "https://github.com/rust-lang/rust/commit/3e9a7f7fbbf2898b9f1d60886f92e76370040d83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9a7f7fbbf2898b9f1d60886f92e76370040d83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b087a991fca51c365ce46ad470d85b99f7c9005a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b087a991fca51c365ce46ad470d85b99f7c9005a", "html_url": "https://github.com/rust-lang/rust/commit/b087a991fca51c365ce46ad470d85b99f7c9005a"}, {"sha": "8cc5cd4faa636e07979a8161dbad009eadf1e667", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc5cd4faa636e07979a8161dbad009eadf1e667", "html_url": "https://github.com/rust-lang/rust/commit/8cc5cd4faa636e07979a8161dbad009eadf1e667"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "bfe2a64f5ba489ad27436936261e6236ac88b8fe", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e9a7f7fbbf2898b9f1d60886f92e76370040d83/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9a7f7fbbf2898b9f1d60886f92e76370040d83/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3e9a7f7fbbf2898b9f1d60886f92e76370040d83", "patch": "@@ -1083,7 +1083,8 @@ impl Step for Rls {\n         let rls = builder.ensure(tool::Rls {\n             compiler: builder.compiler(stage, build.build),\n             target\n-        }).expect(\"Rls to build: toolstate is testing\");\n+        }).or_else(|| { println!(\"Unable to build RLS, skipping dist\"); None })?;\n+\n         install(&rls, &image.join(\"bin\"), 0o755);\n         let doc = image.join(\"share/doc/rls\");\n         install(&src.join(\"README.md\"), &doc, 0o644);\n@@ -1167,11 +1168,12 @@ impl Step for Rustfmt {\n         let rustfmt = builder.ensure(tool::Rustfmt {\n             compiler: builder.compiler(stage, build.build),\n             target\n-        }).expect(\"Rustfmt to build: toolstate is testing\");\n+        }).or_else(|| { println!(\"Unable to build Rustfmt, skipping dist\"); None })?;\n         let cargofmt = builder.ensure(tool::Cargofmt {\n             compiler: builder.compiler(stage, build.build),\n             target\n-        }).expect(\"Cargofmt to build: toolstate is testing\");\n+        }).or_else(|| { println!(\"Unable to build Cargofmt, skipping dist\"); None })?;\n+\n         install(&rustfmt, &image.join(\"bin\"), 0o755);\n         install(&cargofmt, &image.join(\"bin\"), 0o755);\n         let doc = image.join(\"share/doc/rustfmt\");"}, {"sha": "fe1c82923405b6b955551e80263d2a687b2a64e9", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e9a7f7fbbf2898b9f1d60886f92e76370040d83/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9a7f7fbbf2898b9f1d60886f92e76370040d83/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=3e9a7f7fbbf2898b9f1d60886f92e76370040d83", "patch": "@@ -11,7 +11,7 @@\n use std::fs;\n use std::env;\n use std::path::PathBuf;\n-use std::process::Command;\n+use std::process::{Command, exit};\n \n use Mode;\n use Compiler;\n@@ -115,7 +115,14 @@ impl Step for ToolBuild {\n         println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n         let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n-        build.run_expecting(&mut cargo, expectation);\n+        if !build.try_run(&mut cargo, expectation) {\n+            if expectation == BuildExpectation::None {\n+                exit(1);\n+            } else {\n+                return None;\n+            }\n+        }\n+\n         if expectation == BuildExpectation::Succeeding || expectation == BuildExpectation::None {\n             let cargo_out = build.cargo_out(compiler, Mode::Tool, target)\n                 .join(exe(tool, &compiler.host));"}]}