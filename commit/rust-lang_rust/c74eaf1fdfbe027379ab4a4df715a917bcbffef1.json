{"sha": "c74eaf1fdfbe027379ab4a4df715a917bcbffef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NGVhZjFmZGZiZTAyNzM3OWFiNGE0ZGY3MTVhOTE3YmNiZmZlZjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T10:56:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T10:56:51Z"}, "message": "Simplify", "tree": {"sha": "97b11360a184d4271fe904cd29f3ff5a15333917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b11360a184d4271fe904cd29f3ff5a15333917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74eaf1fdfbe027379ab4a4df715a917bcbffef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74eaf1fdfbe027379ab4a4df715a917bcbffef1", "html_url": "https://github.com/rust-lang/rust/commit/c74eaf1fdfbe027379ab4a4df715a917bcbffef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74eaf1fdfbe027379ab4a4df715a917bcbffef1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d94124e3b4a4380ad23c1a317fd3943664b7182a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d94124e3b4a4380ad23c1a317fd3943664b7182a", "html_url": "https://github.com/rust-lang/rust/commit/d94124e3b4a4380ad23c1a317fd3943664b7182a"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "f17ffbf3aa394ee6071497d45df17300f487bb36", "filename": "src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c74eaf1fdfbe027379ab4a4df715a917bcbffef1/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74eaf1fdfbe027379ab4a4df715a917bcbffef1/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=c74eaf1fdfbe027379ab4a4df715a917bcbffef1", "patch": "@@ -10,16 +10,14 @@ use self::event::Event;\n \n /// Parse a sequence of tokens into the representative node tree\n pub fn parse(text: String, tokens: &[Token]) -> File {\n-    let events = parse_into_events(&text, tokens);\n+    let events = {\n+        let mut parser = parser::Parser::new(&text, tokens);\n+        grammar::file(&mut parser);\n+        parser.into_events()\n+    };\n     event::to_file(text, tokens, events)\n }\n \n-pub(crate) fn parse_into_events<'t>(text: &'t str, raw_tokens: &'t [Token]) -> Vec<Event> {\n-    let mut parser = parser::Parser::new(text, raw_tokens);\n-    grammar::file(&mut parser);\n-    parser.into_events()\n-}\n-\n fn is_insignificant(kind: SyntaxKind) -> bool {\n     match kind {\n         WHITESPACE | COMMENT => true,"}]}