{"sha": "0046ce4c85d7db52923578a0d907597aa26b61e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNDZjZTRjODVkN2RiNTI5MjM1NzhhMGQ5MDc1OTdhYTI2YjYxZTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-05-11T10:23:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-05-11T10:23:40Z"}, "message": "Partial support for wasm32-unknown-wasi as host triple\n\nThis needs a rustc compiled for wasi (see rust-lang/miri#722)\nIt also needs CraneStation/target-lexicon#14", "tree": {"sha": "e343580040e9df8b006da96f825b19b00f3dc440", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e343580040e9df8b006da96f825b19b00f3dc440"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0046ce4c85d7db52923578a0d907597aa26b61e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0046ce4c85d7db52923578a0d907597aa26b61e4", "html_url": "https://github.com/rust-lang/rust/commit/0046ce4c85d7db52923578a0d907597aa26b61e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0046ce4c85d7db52923578a0d907597aa26b61e4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e998997f98e936bfa7445272df1aaa43448c736a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e998997f98e936bfa7445272df1aaa43448c736a", "html_url": "https://github.com/rust-lang/rust/commit/e998997f98e936bfa7445272df1aaa43448c736a"}], "stats": {"total": 327, "additions": 171, "deletions": 156}, "files": [{"sha": "d718a6f41d9751ea685f372a50bf9263c9f8496f", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0046ce4c85d7db52923578a0d907597aa26b61e4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0046ce4c85d7db52923578a0d907597aa26b61e4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0046ce4c85d7db52923578a0d907597aa26b61e4", "patch": "@@ -139,7 +139,7 @@ dependencies = [\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.4.0\",\n ]\n \n [[package]]\n@@ -165,7 +165,7 @@ dependencies = [\n  \"faerie 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"goblin 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.4.0\",\n ]\n \n [[package]]\n@@ -175,7 +175,7 @@ source = \"git+https://github.com/CraneStation/cranelift.git#a1d8fbc8dda7984edcf3\n dependencies = [\n  \"cranelift-codegen 0.30.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.4.0\",\n ]\n \n [[package]]\n@@ -196,7 +196,7 @@ source = \"git+https://github.com/CraneStation/cranelift.git#a1d8fbc8dda7984edcf3\n dependencies = [\n  \"cranelift-codegen 0.30.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"raw-cpuid 6.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.4.0\",\n ]\n \n [[package]]\n@@ -210,7 +210,7 @@ dependencies = [\n  \"errno 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"region 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.4.0\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -259,7 +259,7 @@ dependencies = [\n  \"string-interner 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"structopt 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"structopt-derive 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.4.0\",\n ]\n \n [[package]]\n@@ -594,12 +594,11 @@ dependencies = [\n  \"cranelift-faerie 0.30.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-module 0.30.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-simplejit 0.30.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"faerie 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gimli 0.18.0 (git+https://github.com/gimli-rs/gimli.git)\",\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.4.0\",\n  \"tempfile 3.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -725,7 +724,6 @@ dependencies = [\n [[package]]\n name = \"target-lexicon\"\n version = \"0.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -931,7 +929,6 @@ dependencies = [\n \"checksum structopt-derive 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"528aeb7351d042e6ffbc2a6fb76a86f9b622fdf7c25932798e7a82cb03bc94c6\"\n \"checksum syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1393e4a97a19c01e900df2aec855a29f71cf02c402e2f443b8d2747c25c5dbe\"\n \"checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015\"\n-\"checksum target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1b0ab4982b8945c35cc1c46a83a9094c414f6828a099ce5dcaa8ee2b04642dcb\"\n \"checksum tempfile 3.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b86c784c88d98c801132806dadd3819ed29d8600836c4088e855cdf3e178ed8a\"\n \"checksum termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4096add70612622289f2fdcdbd5086dc81c1e2675e6ae58d6c4f62a16c6d7f2f\"\n \"checksum termion 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dde0593aeb8d47accea5392b39350015b5eccb12c0d98044d856983d89548dea\""}, {"sha": "2900dd852b98e870a73df1f1df8ba1bc80564e01", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0046ce4c85d7db52923578a0d907597aa26b61e4/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0046ce4c85d7db52923578a0d907597aa26b61e4/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0046ce4c85d7db52923578a0d907597aa26b61e4", "patch": "@@ -7,13 +7,12 @@ authors = [\"bjorn3 <bjorn3@users.noreply.github.com>\"]\n edition = \"2018\"\n \n [lib]\n-crate-type = [\"dylib\"]\n+crate-type = [\"rlib\", \"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n cranelift = { git = \"https://github.com/CraneStation/cranelift.git\" }\n cranelift-module = { git = \"https://github.com/CraneStation/cranelift.git\" }\n-cranelift-simplejit = { git = \"https://github.com/CraneStation/cranelift.git\" }\n cranelift-faerie = { git = \"https://github.com/CraneStation/cranelift.git\" }\n target-lexicon = \"0.4.0\"\n faerie = \"0.10.0\"\n@@ -24,7 +23,6 @@ bitflags = \"1.0.3\"\n byteorder = \"1.2.7\"\n libc = \"0.2.53\"\n tempfile = \"3.0.7\"\n-env_logger = \"0.6\"\n gimli = { git = \"https://github.com/gimli-rs/gimli.git\" }\n indexmap = \"1.0.2\"\n \n@@ -38,5 +36,8 @@ indexmap = \"1.0.2\"\n #[patch.\"https://github.com/gimli-rs/gimli.git\"]\n #gimli = { path = \"../\" }\n \n+[target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\n+cranelift-simplejit = { git = \"https://github.com/CraneStation/cranelift.git\" }\n+\n [profile.dev.overrides.\"*\"]\n opt-level = 3"}, {"sha": "6c66ee0f82e2a80d6e6ba1cba745fe6d6bf8a864", "filename": "src/driver.rs", "status": "modified", "additions": 160, "deletions": 141, "changes": 301, "blob_url": "https://github.com/rust-lang/rust/blob/0046ce4c85d7db52923578a0d907597aa26b61e4/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0046ce4c85d7db52923578a0d907597aa26b61e4/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0046ce4c85d7db52923578a0d907597aa26b61e4", "patch": "@@ -17,9 +17,8 @@ use crate::prelude::*;\n pub fn codegen_crate<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     metadata: EncodedMetadata,\n-    _need_metadata_module: bool,\n+    need_metadata_module: bool,\n ) -> Box<dyn Any> {\n-    env_logger::init();\n     if !tcx.sess.crate_types.get().contains(&CrateType::Executable)\n         && std::env::var(\"SHOULD_RUN\").is_ok()\n     {\n@@ -36,148 +35,168 @@ pub fn codegen_crate<'a, 'tcx>(\n     };\n \n     if std::env::var(\"SHOULD_RUN\").is_ok() {\n-        let mut jit_module: Module<SimpleJITBackend> =\n-            Module::new(SimpleJITBuilder::new(cranelift_module::default_libcall_names()));\n-        assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n-\n-        let sig = Signature {\n-            params: vec![\n-                AbiParam::new(jit_module.target_config().pointer_type()),\n-                AbiParam::new(jit_module.target_config().pointer_type()),\n-            ],\n-            returns: vec![AbiParam::new(\n-                jit_module.target_config().pointer_type(), /*isize*/\n-            )],\n-            call_conv: CallConv::SystemV,\n-        };\n-        let main_func_id = jit_module\n-            .declare_function(\"main\", Linkage::Import, &sig)\n-            .unwrap();\n-\n-        codegen_cgus(tcx, &mut jit_module, &mut None, &mut log);\n-        crate::allocator::codegen(tcx.sess, &mut jit_module);\n-        jit_module.finalize_definitions();\n-\n-        tcx.sess.abort_if_errors();\n-\n-        let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n-\n-        println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n-\n-        let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n-            unsafe { ::std::mem::transmute(finalized_main) };\n-\n-        let args = ::std::env::var(\"JIT_ARGS\").unwrap_or_else(|_| String::new());\n-        let args = args\n-            .split(\" \")\n-            .chain(Some(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string()))\n-            .map(|arg| CString::new(arg).unwrap())\n-            .collect::<Vec<_>>();\n-        let argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n-        // TODO: Rust doesn't care, but POSIX argv has a NULL sentinel at the end\n-\n-        let ret = f(args.len() as c_int, argv.as_ptr());\n-\n-        jit_module.finish();\n-        std::process::exit(ret);\n+        #[cfg(not(target_arch = \"wasm32\"))]\n+        let _: ! = run_jit(tcx, &mut log);\n+\n+        #[cfg(target_arch = \"wasm32\")]\n+        panic!(\"jit not supported on wasm\");\n+    }\n+\n+    run_aot(tcx, metadata, need_metadata_module, &mut log)\n+}\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+fn run_jit<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, log: &mut Option<File>) -> ! {\n+    use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n+\n+    let mut jit_module: Module<SimpleJITBackend> =\n+        Module::new(SimpleJITBuilder::new(cranelift_module::default_libcall_names()));\n+    assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n+\n+    let sig = Signature {\n+        params: vec![\n+            AbiParam::new(jit_module.target_config().pointer_type()),\n+            AbiParam::new(jit_module.target_config().pointer_type()),\n+        ],\n+        returns: vec![AbiParam::new(\n+            jit_module.target_config().pointer_type(), /*isize*/\n+        )],\n+        call_conv: CallConv::SystemV,\n+    };\n+    let main_func_id = jit_module\n+        .declare_function(\"main\", Linkage::Import, &sig)\n+        .unwrap();\n+\n+    codegen_cgus(tcx, &mut jit_module, &mut None, log);\n+    crate::allocator::codegen(tcx.sess, &mut jit_module);\n+    jit_module.finalize_definitions();\n+\n+    tcx.sess.abort_if_errors();\n+\n+    let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n+\n+    println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n+\n+    let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n+        unsafe { ::std::mem::transmute(finalized_main) };\n+\n+    let args = ::std::env::var(\"JIT_ARGS\").unwrap_or_else(|_| String::new());\n+    let args = args\n+        .split(\" \")\n+        .chain(Some(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string()))\n+        .map(|arg| CString::new(arg).unwrap())\n+        .collect::<Vec<_>>();\n+    let argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n+    // TODO: Rust doesn't care, but POSIX argv has a NULL sentinel at the end\n+\n+    let ret = f(args.len() as c_int, argv.as_ptr());\n+\n+    jit_module.finish();\n+    std::process::exit(ret);\n+}\n+\n+fn run_aot<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    metadata: EncodedMetadata,\n+    _need_metadata_module: bool,\n+    log: &mut Option<File>,\n+) -> Box<CodegenResults> {\n+    let new_module = |name: String| {\n+        let module: Module<FaerieBackend> = Module::new(\n+            FaerieBuilder::new(\n+                crate::build_isa(tcx.sess),\n+                name + \".o\",\n+                FaerieTrapCollection::Disabled,\n+                cranelift_module::default_libcall_names(),\n+            )\n+            .unwrap(),\n+        );\n+        assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n+        module\n+    };\n+\n+    let emit_module = |name: &str,\n+                        kind: ModuleKind,\n+                        mut module: Module<FaerieBackend>,\n+                        debug: Option<DebugContext>| {\n+        module.finalize_definitions();\n+        let mut artifact = module.finish().artifact;\n+\n+        if let Some(mut debug) = debug {\n+            debug.emit(&mut artifact);\n+        }\n+\n+        let tmp_file = tcx\n+            .output_filenames(LOCAL_CRATE)\n+            .temp_path(OutputType::Object, Some(name));\n+        let obj = artifact.emit().unwrap();\n+        std::fs::write(&tmp_file, obj).unwrap();\n+        CompiledModule {\n+            name: name.to_string(),\n+            kind,\n+            object: Some(tmp_file),\n+            bytecode: None,\n+            bytecode_compressed: None,\n+        }\n+    };\n+\n+    let mut faerie_module = new_module(\"some_file\".to_string());\n+\n+    let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None\n+        // macOS debuginfo doesn't work yet (see #303)\n+        && !tcx.sess.target.target.options.is_like_osx\n+    {\n+        let debug = DebugContext::new(\n+            tcx,\n+            faerie_module.target_config().pointer_type().bytes() as u8,\n+        );\n+        Some(debug)\n     } else {\n-        let new_module = |name: String| {\n-            let module: Module<FaerieBackend> = Module::new(\n-                FaerieBuilder::new(\n-                    crate::build_isa(tcx.sess),\n-                    name + \".o\",\n-                    FaerieTrapCollection::Disabled,\n-                    cranelift_module::default_libcall_names(),\n-                )\n-                .unwrap(),\n-            );\n-            assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n-            module\n-        };\n-\n-        let emit_module = |name: &str,\n-                            kind: ModuleKind,\n-                            mut module: Module<FaerieBackend>,\n-                            debug: Option<DebugContext>| {\n-            module.finalize_definitions();\n-            let mut artifact = module.finish().artifact;\n-\n-            if let Some(mut debug) = debug {\n-                debug.emit(&mut artifact);\n-            }\n-\n-            let tmp_file = tcx\n-                .output_filenames(LOCAL_CRATE)\n-                .temp_path(OutputType::Object, Some(name));\n-            let obj = artifact.emit().unwrap();\n-            std::fs::write(&tmp_file, obj).unwrap();\n-            CompiledModule {\n-                name: name.to_string(),\n-                kind,\n-                object: Some(tmp_file),\n-                bytecode: None,\n-                bytecode_compressed: None,\n-            }\n-        };\n-\n-        let mut faerie_module = new_module(\"some_file\".to_string());\n-\n-        let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None\n-            // macOS debuginfo doesn't work yet (see #303)\n-            && !tcx.sess.target.target.options.is_like_osx\n-        {\n-            let debug = DebugContext::new(\n-                tcx,\n-                faerie_module.target_config().pointer_type().bytes() as u8,\n-            );\n-            Some(debug)\n+        None\n+    };\n+\n+    codegen_cgus(tcx, &mut faerie_module, &mut debug, log);\n+\n+    tcx.sess.abort_if_errors();\n+\n+    let mut allocator_module = new_module(\"allocator_shim.o\".to_string());\n+    let created_alloc_shim = crate::allocator::codegen(tcx.sess, &mut allocator_module);\n+\n+    rustc_incremental::assert_dep_graph(tcx);\n+    rustc_incremental::save_dep_graph(tcx);\n+    rustc_incremental::finalize_session_directory(tcx.sess, tcx.crate_hash(LOCAL_CRATE));\n+\n+    Box::new(CodegenResults {\n+        crate_name: tcx.crate_name(LOCAL_CRATE),\n+        modules: vec![emit_module(\n+            \"dummy_name\",\n+            ModuleKind::Regular,\n+            faerie_module,\n+            debug,\n+        )],\n+        allocator_module: if created_alloc_shim {\n+            Some(emit_module(\n+                \"allocator_shim\",\n+                ModuleKind::Allocator,\n+                allocator_module,\n+                None,\n+            ))\n         } else {\n             None\n-        };\n-\n-        codegen_cgus(tcx, &mut faerie_module, &mut debug, &mut log);\n-\n-        tcx.sess.abort_if_errors();\n-\n-        let mut allocator_module = new_module(\"allocator_shim.o\".to_string());\n-        let created_alloc_shim = crate::allocator::codegen(tcx.sess, &mut allocator_module);\n-\n-        rustc_incremental::assert_dep_graph(tcx);\n-        rustc_incremental::save_dep_graph(tcx);\n-        rustc_incremental::finalize_session_directory(tcx.sess, tcx.crate_hash(LOCAL_CRATE));\n-\n-        Box::new(CodegenResults {\n-            crate_name: tcx.crate_name(LOCAL_CRATE),\n-            modules: vec![emit_module(\n-                \"dummy_name\",\n-                ModuleKind::Regular,\n-                faerie_module,\n-                debug,\n-            )],\n-            allocator_module: if created_alloc_shim {\n-                Some(emit_module(\n-                    \"allocator_shim\",\n-                    ModuleKind::Allocator,\n-                    allocator_module,\n-                    None,\n-                ))\n-            } else {\n-                None\n-            },\n-            metadata_module: Some(CompiledModule {\n-                name: \"dummy_metadata\".to_string(),\n-                kind: ModuleKind::Metadata,\n-                object: None,\n-                bytecode: None,\n-                bytecode_compressed: None,\n-            }),\n-            crate_hash: tcx.crate_hash(LOCAL_CRATE),\n-            metadata,\n-            windows_subsystem: None, // Windows is not yet supported\n-            linker_info: LinkerInfo::new(tcx),\n-            crate_info: CrateInfo::new(tcx),\n-        })\n-    }\n+        },\n+        metadata_module: Some(CompiledModule {\n+            name: \"dummy_metadata\".to_string(),\n+            kind: ModuleKind::Metadata,\n+            object: None,\n+            bytecode: None,\n+            bytecode_compressed: None,\n+        }),\n+        crate_hash: tcx.crate_hash(LOCAL_CRATE),\n+        metadata,\n+        windows_subsystem: None, // Windows is not yet supported\n+        linker_info: LinkerInfo::new(tcx),\n+        crate_info: CrateInfo::new(tcx),\n+    })\n }\n \n fn codegen_cgus<'a, 'tcx: 'a>("}, {"sha": "1389a127c244ea0d2dcf438ad73af48d996fa673", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0046ce4c85d7db52923578a0d907597aa26b61e4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0046ce4c85d7db52923578a0d907597aa26b61e4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0046ce4c85d7db52923578a0d907597aa26b61e4", "patch": "@@ -1,7 +1,6 @@\n #![feature(rustc_private, never_type, decl_macro)]\n #![allow(intra_doc_link_resolution_failure)]\n \n-extern crate log;\n extern crate rustc;\n extern crate rustc_allocator;\n extern crate rustc_codegen_ssa;\n@@ -87,7 +86,6 @@ mod prelude {\n     pub use cranelift_module::{\n         self, Backend, DataContext, DataId, FuncId, FuncOrDataId, Linkage, Module,\n     };\n-    pub use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n \n     pub use crate::abi::*;\n     pub use crate::base::{trans_operand, trans_place};"}]}