{"sha": "b11757e0d55a53934b27ecbefa1a89b7b092f7d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMTc1N2UwZDU1YTUzOTM0YjI3ZWNiZWZhMWE4OWI3YjA5MmY3ZDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-06T00:15:04Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-06T10:48:54Z"}, "message": "rustbuild: Cleanup global lint settings", "tree": {"sha": "e81771ea68ec1bf862944a75660b6cc95adb2544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e81771ea68ec1bf862944a75660b6cc95adb2544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b11757e0d55a53934b27ecbefa1a89b7b092f7d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b11757e0d55a53934b27ecbefa1a89b7b092f7d3", "html_url": "https://github.com/rust-lang/rust/commit/b11757e0d55a53934b27ecbefa1a89b7b092f7d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b11757e0d55a53934b27ecbefa1a89b7b092f7d3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "254f2014954bd66da206232490824975c0c662f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/254f2014954bd66da206232490824975c0c662f1", "html_url": "https://github.com/rust-lang/rust/commit/254f2014954bd66da206232490824975c0c662f1"}], "stats": {"total": 66, "additions": 29, "deletions": 37}, "files": [{"sha": "2d403038c215a6a52d90c2bd31d45c7f08aa46e8", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b11757e0d55a53934b27ecbefa1a89b7b092f7d3/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b11757e0d55a53934b27ecbefa1a89b7b092f7d3/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=b11757e0d55a53934b27ecbefa1a89b7b092f7d3", "patch": "@@ -91,17 +91,16 @@ fn main() {\n     cmd.args(&args)\n         .env(bootstrap::util::dylib_path_var(),\n              env::join_paths(&dylib_path).unwrap());\n-    let mut maybe_crate = None;\n \n     // Get the name of the crate we're compiling, if any.\n-    let maybe_crate_name = args.windows(2)\n-        .find(|a| &*a[0] == \"--crate-name\")\n-        .map(|crate_name| &*crate_name[1]);\n+    let crate_name = args.windows(2)\n+        .find(|args| args[0] == \"--crate-name\")\n+        .and_then(|args| args[1].to_str());\n \n-    if let Some(current_crate) = maybe_crate_name {\n+    if let Some(crate_name) = crate_name {\n         if let Some(target) = env::var_os(\"RUSTC_TIME\") {\n             if target == \"all\" ||\n-               target.into_string().unwrap().split(\",\").any(|c| c.trim() == current_crate)\n+               target.into_string().unwrap().split(\",\").any(|c| c.trim() == crate_name)\n             {\n                 cmd.arg(\"-Ztime\");\n             }\n@@ -125,6 +124,17 @@ fn main() {\n         cmd.arg(format!(\"-Cdebuginfo={}\", debuginfo_level));\n     }\n \n+    if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() &&\n+       env::var_os(\"RUSTC_EXTERNAL_TOOL\").is_none() {\n+        cmd.arg(\"-Dwarnings\");\n+        cmd.arg(\"-Drust_2018_idioms\");\n+        if stage != \"0\" && crate_name != Some(\"rustc_version\") && // cfg(not(bootstrap))\n+           use_internal_lints(crate_name) {\n+            cmd.arg(\"-Zunstable-options\");\n+            cmd.arg(\"-Drustc::internal\");\n+        }\n+    }\n+\n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option.\n@@ -167,9 +177,6 @@ fn main() {\n             cmd.arg(format!(\"-Clinker={}\", target_linker));\n         }\n \n-        let crate_name = maybe_crate_name.unwrap();\n-        maybe_crate = Some(crate_name);\n-\n         // If we're compiling specifically the `panic_abort` crate then we pass\n         // the `-C panic=abort` option. Note that we do not do this for any\n         // other crate intentionally as this is the only crate for now that we\n@@ -182,8 +189,8 @@ fn main() {\n         // `compiler_builtins` are unconditionally compiled with panic=abort to\n         // workaround undefined references to `rust_eh_unwind_resume` generated\n         // otherwise, see issue https://github.com/rust-lang/rust/issues/43095.\n-        if crate_name == \"panic_abort\" ||\n-           crate_name == \"compiler_builtins\" && stage != \"0\" {\n+        if crate_name == Some(\"panic_abort\") ||\n+           crate_name == Some(\"compiler_builtins\") && stage != \"0\" {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n \n@@ -196,7 +203,7 @@ fn main() {\n \n         // The compiler builtins are pretty sensitive to symbols referenced in\n         // libcore and such, so we never compile them with debug assertions.\n-        if crate_name == \"compiler_builtins\" {\n+        if crate_name == Some(\"compiler_builtins\") {\n             cmd.arg(\"-C\").arg(\"debug-assertions=no\");\n         } else {\n             cmd.arg(\"-C\").arg(format!(\"debug-assertions={}\", debug_assertions));\n@@ -305,22 +312,6 @@ fn main() {\n         }\n     }\n \n-    // This is required for internal lints.\n-    if let Some(crate_name) = args.windows(2).find(|a| &*a[0] == \"--crate-name\") {\n-        let crate_name = crate_name[1].to_string_lossy();\n-        if crate_name != \"rustc_version\"\n-            && (crate_name.starts_with(\"rustc\")\n-                || crate_name.starts_with(\"syntax\")\n-                || crate_name == \"arena\"\n-                || crate_name == \"fmt_macros\")\n-        {\n-            cmd.arg(\"-Zunstable-options\");\n-            if stage != \"0\" {\n-                cmd.arg(\"-Wrustc::internal\");\n-            }\n-        }\n-    }\n-\n     // Force all crates compiled by this compiler to (a) be unstable and (b)\n     // allow the `rustc_private` feature to link to other unstable crates\n     // also in the sysroot. We also do this for host crates, since those\n@@ -333,13 +324,6 @@ fn main() {\n         cmd.arg(\"--cfg\").arg(\"parallel_compiler\");\n     }\n \n-    if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() && env::var_os(\"RUSTC_EXTERNAL_TOOL\").is_none()\n-    {\n-        cmd.arg(\"-Dwarnings\");\n-        cmd.arg(\"-Dbare_trait_objects\");\n-        cmd.arg(\"-Drust_2018_idioms\");\n-    }\n-\n     if verbose > 1 {\n         eprintln!(\n             \"rustc command: {:?}={:?} {:?}\",\n@@ -362,7 +346,7 @@ fn main() {\n     }\n \n     if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some() {\n-        if let Some(krate) = maybe_crate {\n+        if let Some(crate_name) = crate_name {\n             let start = Instant::now();\n             let status = cmd\n                 .status()\n@@ -371,7 +355,7 @@ fn main() {\n \n             let is_test = args.iter().any(|a| a == \"--test\");\n             eprintln!(\"[RUSTC-TIMING] {} test:{} {}.{:03}\",\n-                      krate.to_string_lossy(),\n+                      crate_name,\n                       is_test,\n                       dur.as_secs(),\n                       dur.subsec_nanos() / 1_000_000);\n@@ -390,6 +374,14 @@ fn main() {\n     std::process::exit(code);\n }\n \n+// Rustc crates for which internal lints are in effect.\n+fn use_internal_lints(crate_name: Option<&str>) -> bool {\n+    crate_name.map_or(false, |crate_name| {\n+        crate_name.starts_with(\"rustc\") || crate_name.starts_with(\"syntax\") ||\n+        [\"arena\", \"fmt_macros\"].contains(&crate_name)\n+    })\n+}\n+\n #[cfg(unix)]\n fn exec_cmd(cmd: &mut Command) -> io::Result<i32> {\n     use std::os::unix::process::CommandExt;"}]}