{"sha": "cd32f9bccaaf021a3327fc28df3401dc32a644e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMzJmOWJjY2FhZjAyMWEzMzI3ZmMyOGRmMzQwMWRjMzJhNjQ0ZTE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-31T02:04:39Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-28T15:29:08Z"}, "message": "Remove LintSession and run incremental and whole crate lints in parallel", "tree": {"sha": "e3a0d91455b194e227c65849ca511003d58f5221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a0d91455b194e227c65849ca511003d58f5221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd32f9bccaaf021a3327fc28df3401dc32a644e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd32f9bccaaf021a3327fc28df3401dc32a644e1", "html_url": "https://github.com/rust-lang/rust/commit/cd32f9bccaaf021a3327fc28df3401dc32a644e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd32f9bccaaf021a3327fc28df3401dc32a644e1/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41316f0449025394fdca6606d3fdb3b8f37a9872", "url": "https://api.github.com/repos/rust-lang/rust/commits/41316f0449025394fdca6606d3fdb3b8f37a9872", "html_url": "https://github.com/rust-lang/rust/commit/41316f0449025394fdca6606d3fdb3b8f37a9872"}], "stats": {"total": 108, "additions": 40, "deletions": 68}, "files": [{"sha": "49e3eee4e52ef9f5d5a1bae04b90686a5f34ecce", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 39, "deletions": 67, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/cd32f9bccaaf021a3327fc28df3401dc32a644e1/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd32f9bccaaf021a3327fc28df3401dc32a644e1/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=cd32f9bccaaf021a3327fc28df3401dc32a644e1", "patch": "@@ -17,7 +17,7 @@\n use self::TargetLint::*;\n \n use std::slice;\n-use rustc_data_structures::sync::ReadGuard;\n+use rustc_data_structures::sync::{ReadGuard, Lock, join};\n use crate::lint::{EarlyLintPass, LateLintPass, EarlyLintPassObject, LateLintPassObject};\n use crate::lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n@@ -55,8 +55,8 @@ pub struct LintStore {\n     /// This is only `None` while performing a lint pass.\n     pre_expansion_passes: Option<Vec<EarlyLintPassObject>>,\n     early_passes: Option<Vec<EarlyLintPassObject>>,\n-    late_passes: Option<Vec<LateLintPassObject>>,\n-    late_module_passes: Option<Vec<LateLintPassObject>>,\n+    late_passes: Lock<Option<Vec<LateLintPassObject>>>,\n+    late_module_passes: Lock<Option<Vec<LateLintPassObject>>>,\n \n     /// Lints indexed by name.\n     by_name: FxHashMap<String, TargetLint>,\n@@ -69,14 +69,6 @@ pub struct LintStore {\n     future_incompatible: FxHashMap<LintId, FutureIncompatibleInfo>,\n }\n \n-pub struct LintSession<'a, PassObject> {\n-    /// Reference to the store of registered lints.\n-    lints: ReadGuard<'a, LintStore>,\n-\n-    /// Trait objects for each lint pass.\n-    passes: Option<Vec<PassObject>>,\n-}\n-\n /// Lints that are buffered up early on in the `Session` before the\n /// `LintLevels` is calculated\n #[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n@@ -151,8 +143,8 @@ impl LintStore {\n             lints: vec![],\n             pre_expansion_passes: Some(vec![]),\n             early_passes: Some(vec![]),\n-            late_passes: Some(vec![]),\n-            late_module_passes: Some(vec![]),\n+            late_passes: Lock::new(Some(vec![])),\n+            late_module_passes: Lock::new(Some(vec![])),\n             by_name: Default::default(),\n             future_incompatible: Default::default(),\n             lint_groups: Default::default(),\n@@ -208,9 +200,9 @@ impl LintStore {\n         self.push_pass(sess, from_plugin, &pass);\n         if !register_only {\n             if per_module {\n-                self.late_module_passes.as_mut().unwrap().push(pass);\n+                self.late_module_passes.lock().as_mut().unwrap().push(pass);\n             } else {\n-                self.late_passes.as_mut().unwrap().push(pass);\n+                self.late_passes.lock().as_mut().unwrap().push(pass);\n             }\n         }\n     }\n@@ -529,7 +521,7 @@ pub struct LateContext<'a, 'tcx: 'a> {\n     pub access_levels: &'a AccessLevels,\n \n     /// The store of registered lints and the lint levels.\n-    lint_sess: LintSession<'tcx, LateLintPassObject>,\n+    lint_store: ReadGuard<'a, LintStore>,\n \n     last_node_with_lint_attrs: hir::HirId,\n \n@@ -557,7 +549,7 @@ pub struct EarlyContext<'a> {\n     builder: LintLevelsBuilder<'a>,\n \n     /// The store of registered lints and the lint levels.\n-    lint_sess: LintSession<'a, EarlyLintPassObject>,\n+    lint_store: ReadGuard<'a, LintStore>,\n \n     buffered: LintBuffer,\n }\n@@ -578,8 +570,6 @@ pub trait LintContext<'tcx>: Sized {\n \n     fn sess(&self) -> &Session;\n     fn lints(&self) -> &LintStore;\n-    fn lint_sess(&self) -> &LintSession<'tcx, Self::PassObject>;\n-    fn lint_sess_mut(&mut self) -> &mut LintSession<'tcx, Self::PassObject>;\n \n     fn lookup_and_emit<S: Into<MultiSpan>>(&self,\n                                            lint: &'static Lint,\n@@ -654,10 +644,7 @@ impl<'a> EarlyContext<'a> {\n         EarlyContext {\n             sess,\n             krate,\n-            lint_sess: LintSession {\n-                lints: sess.lint_store.borrow(),\n-                passes: None,\n-            },\n+            lint_store: sess.lint_store.borrow(),\n             builder: LintLevelSets::builder(sess),\n             buffered,\n         }\n@@ -721,15 +708,7 @@ impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n     }\n \n     fn lints(&self) -> &LintStore {\n-        &*self.lint_sess.lints\n-    }\n-\n-    fn lint_sess(&self) -> &LintSession<'tcx, Self::PassObject> {\n-        &self.lint_sess\n-    }\n-\n-    fn lint_sess_mut(&mut self) -> &mut LintSession<'tcx, Self::PassObject> {\n-        &mut self.lint_sess\n+        &*self.lint_store\n     }\n \n     fn lookup<S: Into<MultiSpan>>(&self,\n@@ -757,15 +736,7 @@ impl<'a> LintContext<'a> for EarlyContext<'a> {\n     }\n \n     fn lints(&self) -> &LintStore {\n-        &*self.lint_sess.lints\n-    }\n-\n-    fn lint_sess(&self) -> &LintSession<'a, Self::PassObject> {\n-        &self.lint_sess\n-    }\n-\n-    fn lint_sess_mut(&mut self) -> &mut LintSession<'a, Self::PassObject> {\n-        &mut self.lint_sess\n+        &*self.lint_store\n     }\n \n     fn lookup<S: Into<MultiSpan>>(&self,\n@@ -1269,17 +1240,12 @@ fn late_lint_mod_pass<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n ) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n-    let store = &tcx.sess.lint_store;\n-\n     let context = LateContext {\n         tcx,\n         tables: &ty::TypeckTables::empty(None),\n         param_env: ty::ParamEnv::empty(),\n         access_levels,\n-        lint_sess: LintSession {\n-            lints: store.borrow(),\n-            passes: None,\n-        },\n+        lint_store: tcx.sess.lint_store.borrow(),\n         last_node_with_lint_attrs: tcx.hir().as_local_hir_id(module_def_id).unwrap(),\n         generics: None,\n         only_module: true,\n@@ -1304,18 +1270,21 @@ pub fn late_lint_mod<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n     module_def_id: DefId,\n     builtin_lints: T,\n ) {\n-    assert!(!tcx.sess.opts.debugging_opts.no_interleave_lints);\n+    if tcx.sess.opts.debugging_opts.no_interleave_lints {\n+        // These passes runs in late_lint_crate with -Z no_interleave_lints\n+        return;\n+    }\n \n     late_lint_mod_pass(tcx, module_def_id, builtin_lints);\n \n-    let mut passes = tcx.sess.lint_store.borrow_mut().late_module_passes.take().unwrap();\n+    let mut passes = tcx.sess.lint_store.borrow().late_module_passes.lock().take().unwrap();\n \n     if !passes.is_empty() {\n         late_lint_mod_pass(tcx, module_def_id, LateLintPassObjects { lints: &mut passes[..] });\n     }\n \n     // Put the passes back in the session.\n-    tcx.sess.lint_store.borrow_mut().late_module_passes = Some(passes);\n+    *tcx.sess.lint_store.borrow().late_module_passes.lock() = Some(passes);\n }\n \n fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n@@ -1331,10 +1300,7 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n         tables: &ty::TypeckTables::empty(None),\n         param_env: ty::ParamEnv::empty(),\n         access_levels,\n-        lint_sess: LintSession {\n-            passes: None,\n-            lints: tcx.sess.lint_store.borrow(),\n-        },\n+        lint_store: tcx.sess.lint_store.borrow(),\n         last_node_with_lint_attrs: hir::CRATE_HIR_ID,\n         generics: None,\n         only_module: false,\n@@ -1361,7 +1327,7 @@ fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     builtin_lints: T\n ) {\n-    let mut passes = tcx.sess.lint_store.borrow_mut().late_passes.take().unwrap();\n+    let mut passes = tcx.sess.lint_store.borrow().late_passes.lock().take().unwrap();\n \n     if !tcx.sess.opts.debugging_opts.no_interleave_lints {\n         if !passes.is_empty() {\n@@ -1376,34 +1342,40 @@ fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n             });\n         }\n \n-        let mut passes = tcx.sess.lint_store.borrow_mut().late_module_passes.take().unwrap();\n-            \n+        let mut passes = tcx.sess.lint_store.borrow().late_module_passes.lock().take().unwrap();\n+\n         for pass in &mut passes {\n             time(tcx.sess, &format!(\"running late module lint: {}\", pass.name()), || {\n                 late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n             });\n         }\n \n         // Put the passes back in the session.\n-        tcx.sess.lint_store.borrow_mut().late_module_passes = Some(passes);\n+        *tcx.sess.lint_store.borrow().late_module_passes.lock() = Some(passes);\n     }\n \n     // Put the passes back in the session.\n-    tcx.sess.lint_store.borrow_mut().late_passes = Some(passes);\n+    *tcx.sess.lint_store.borrow().late_passes.lock() = Some(passes);\n }\n \n /// Performs lint checking on a crate.\n pub fn check_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    builtin_lints: T,\n+    builtin_lints: impl FnOnce() -> T + Send,\n ) {\n-    // Run per-module lints\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().lint_mod(tcx.hir().local_def_id(module));\n-    }\n-\n-    // Run whole crate non-incremental lints\n-    late_lint_crate(tcx, builtin_lints);\n+    join(|| {\n+        time(tcx.sess, \"crate lints\", || {\n+            // Run whole crate non-incremental lints\n+            late_lint_crate(tcx, builtin_lints());\n+        });\n+    }, || {\n+        time(tcx.sess, \"module lints\", || {\n+            // Run per-module lints\n+            for &module in tcx.hir().krate().modules.keys() {\n+                tcx.ensure().lint_mod(tcx.hir().local_def_id(module));\n+            }\n+        });\n+    });\n }\n \n struct EarlyLintPassObjects<'a> {"}, {"sha": "1547e15fd48c579733e8d0ed9828100496a5c312", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd32f9bccaaf021a3327fc28df3401dc32a644e1/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd32f9bccaaf021a3327fc28df3401dc32a644e1/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=cd32f9bccaaf021a3327fc28df3401dc32a644e1", "patch": "@@ -990,7 +990,7 @@ fn analysis<'tcx>(\n                 });\n             }, {\n                 time(sess, \"lint checking\", || {\n-                    lint::check_crate(tcx, rustc_lint::BuiltinCombinedLateLintPass::new());\n+                    lint::check_crate(tcx, || rustc_lint::BuiltinCombinedLateLintPass::new());\n                 });\n             });\n         }, {"}]}