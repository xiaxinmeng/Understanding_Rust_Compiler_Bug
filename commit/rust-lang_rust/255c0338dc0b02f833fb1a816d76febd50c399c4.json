{"sha": "255c0338dc0b02f833fb1a816d76febd50c399c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NWMwMzM4ZGMwYjAyZjgzM2ZiMWE4MTZkNzZmZWJkNTBjMzk5YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-29T00:42:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-29T00:42:59Z"}, "message": "Auto merge of #72716 - Dylan-DPC:rollup-wdj97ab, r=Dylan-DPC\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #72239 (Implement PartialOrd and Ord for SocketAddr*)\n - #72466 (Stabilize str_strip feature)\n - #72605 (Add working example for E0617 explanation)\n - #72636 (Cleanup `Resolver::<clone|into>_outputs` methods)\n - #72645 (Add myself to .mailmap)\n - #72667 (expand unaligned_references test)\n - #72670 (Fix incorrect comment in generator test)\n - #72674 (Clippy should always build)\n - #72682 (Add test for #66930)\n - #72695 (update data layout for illumos x86)\n - #72697 (Remove rustc-ux-guidelines)\n - #72702 (rustc_lint: Remove `unused_crate_dependencies` from the `unused` group)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "de0df9b38d9052cbb8a7bd60c2a421dcd933e76c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0df9b38d9052cbb8a7bd60c2a421dcd933e76c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/255c0338dc0b02f833fb1a816d76febd50c399c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/255c0338dc0b02f833fb1a816d76febd50c399c4", "html_url": "https://github.com/rust-lang/rust/commit/255c0338dc0b02f833fb1a816d76febd50c399c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/255c0338dc0b02f833fb1a816d76febd50c399c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45127211566c53bac386b66909a830649182ab7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/45127211566c53bac386b66909a830649182ab7a", "html_url": "https://github.com/rust-lang/rust/commit/45127211566c53bac386b66909a830649182ab7a"}, {"sha": "049b6dd4e1dfd3f3c42d45e44a6dc2f8ae1a7a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/049b6dd4e1dfd3f3c42d45e44a6dc2f8ae1a7a14", "html_url": "https://github.com/rust-lang/rust/commit/049b6dd4e1dfd3f3c42d45e44a6dc2f8ae1a7a14"}], "stats": {"total": 473, "additions": 248, "deletions": 225}, "files": [{"sha": "da17344c2085e80093c36034b9530d8ef317d041", "filename": ".mailmap", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -70,6 +70,8 @@ David Manescu <david.manescu@gmail.com> <dman2626@uni.sydney.edu.au>\n David Ross <daboross@daboross.net>\n Derek Chiang <derekchiang93@gmail.com> Derek Chiang (Enchi Jiang) <derekchiang93@gmail.com>\n Diggory Hardy <diggory.hardy@gmail.com> Diggory Hardy <github@dhardy.name>\n+Donough Liu <ldm2993593805@163.com> <donoughliu@gmail.com>\n+Donough Liu <ldm2993593805@163.com> DingMing Liu <liudingming@bupt.edu.cn>\n Dustin Bensing <dustin.bensing@googlemail.com>\n Dylan Braithwaite <dylanbraithwaite1@gmail.com> <mail@dylanb.me>\n Dzmitry Malyshau <kvarkus@gmail.com>"}, {"sha": "f1305e2540b4ca9deba0a3bb8aafd6a3ed804d0f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -516,45 +516,37 @@ impl Step for Clippy {\n         let host = self.host;\n         let compiler = builder.compiler(stage, host);\n \n-        let clippy = builder.ensure(tool::Clippy {\n+        let clippy = builder\n+            .ensure(tool::Clippy { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        let mut cargo = tool::prepare_tool_cargo(\n+            builder,\n             compiler,\n-            target: self.host,\n-            extra_features: Vec::new(),\n-        });\n-        if let Some(clippy) = clippy {\n-            let mut cargo = tool::prepare_tool_cargo(\n-                builder,\n-                compiler,\n-                Mode::ToolRustc,\n-                host,\n-                \"test\",\n-                \"src/tools/clippy\",\n-                SourceType::InTree,\n-                &[],\n-            );\n+            Mode::ToolRustc,\n+            host,\n+            \"test\",\n+            \"src/tools/clippy\",\n+            SourceType::InTree,\n+            &[],\n+        );\n \n-            // clippy tests need to know about the stage sysroot\n-            cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n-            cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n-            cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n-            let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n-            let target_libs = builder\n-                .stage_out(compiler, Mode::ToolRustc)\n-                .join(&self.host)\n-                .join(builder.cargo_dir());\n-            cargo.env(\"HOST_LIBS\", host_libs);\n-            cargo.env(\"TARGET_LIBS\", target_libs);\n-            // clippy tests need to find the driver\n-            cargo.env(\"CLIPPY_DRIVER_PATH\", clippy);\n+        // clippy tests need to know about the stage sysroot\n+        cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n+        cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n+        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n+        let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n+        let target_libs =\n+            builder.stage_out(compiler, Mode::ToolRustc).join(&self.host).join(builder.cargo_dir());\n+        cargo.env(\"HOST_LIBS\", host_libs);\n+        cargo.env(\"TARGET_LIBS\", target_libs);\n+        // clippy tests need to find the driver\n+        cargo.env(\"CLIPPY_DRIVER_PATH\", clippy);\n \n-            cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n-            builder.add_rustc_lib_path(compiler, &mut cargo);\n+        builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            try_run(builder, &mut cargo.into());\n-        } else {\n-            eprintln!(\"failed to test clippy: could not build\");\n-        }\n+        try_run(builder, &mut cargo.into());\n     }\n }\n "}, {"sha": "b626923bcb59cfd8ae48872f0bd7cc758a9b8e8a", "filename": "src/doc/rustc-ux-guidelines.md", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/45127211566c53bac386b66909a830649182ab7a/src%2Fdoc%2Frustc-ux-guidelines.md", "raw_url": "https://github.com/rust-lang/rust/raw/45127211566c53bac386b66909a830649182ab7a/src%2Fdoc%2Frustc-ux-guidelines.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-ux-guidelines.md?ref=45127211566c53bac386b66909a830649182ab7a", "patch": "@@ -1,90 +0,0 @@\n-% Rustc UX guidelines\n-\n-Don't forget the user. Whether human or another program, such as an IDE, a\n-good user experience with the compiler goes a long way toward making developers'\n-lives better. We do not want users to be baffled by compiler output or\n-learn arcane patterns to compile their program.\n-\n-## Error, Warning, Help, Note Messages\n-\n-When the compiler detects a problem, it can emit one of the following: an error, a warning,\n-a note, or a help message.\n-\n-An `error` is emitted when the compiler detects a problem that makes it unable\n- to compile the program, either because the program is invalid or the\n- programmer has decided to make a specific `warning` into an error.\n-\n-A `warning` is emitted when the compiler detects something odd about a\n-program. For instance, dead code and unused `Result` values.\n-\n-A `help` message is emitted following an `error` or `warning` to give additional\n-information to the user about how to solve their problem.\n-\n-A `note` is emitted to identify additional circumstances and parts of the code\n-that caused the warning or error. For example, the borrow checker will note any\n-previous conflicting borrows.\n-\n-* Write in plain simple English. If your message, when shown on a \u2013 possibly\n-small \u2013 screen (which hasn't been cleaned for a while), cannot be understood\n-by a normal programmer, who just came out of bed after a night partying, it's\n-too complex.\n-* `Errors` and `Warnings` should not suggest how to fix the problem. A `Help`\n-message should be emitted instead.\n-* `Error`, `Warning`, `Note`, and `Help` messages start with a lowercase\n-letter and do not end with punctuation.\n-* Error messages should be succinct. Users will see these error messages many\n-times, and more verbose descriptions can be viewed with the `--explain` flag.\n-That said, don't make it so terse that it's hard to understand.\n-* The word \"illegal\" is illegal. Prefer \"invalid\" or a more specific word\n-instead.\n-* Errors should document the span of code where they occur \u2013 the `span_..`\n-methods allow to easily do this. Also `note` other spans that have contributed\n-to the error if the span isn't too large.\n-* When emitting a message with span, try to reduce the span to the smallest\n-amount possible that still signifies the issue\n-* Try not to emit multiple error messages for the same error. This may require\n-detecting duplicates.\n-* When the compiler has too little information for a specific error message,\n-lobby for annotations for library code that allow adding more. For example see\n-`#[on_unimplemented]`. Use these annotations when available!\n-* Keep in mind that Rust's learning curve is rather steep, and that the\n-compiler messages are an important learning tool.\n-\n-## Error Explanations\n-\n-Error explanations are long form descriptions of error messages provided with\n-the compiler. They are accessible via the `--explain` flag. Each explanation\n-comes with an example of how to trigger it and advice on how to fix it.\n-\n-Please read [RFC 1567](https://github.com/rust-lang/rfcs/blob/master/text/1567-long-error-codes-explanation-normalization.md)\n-for details on how to format and write long error codes.\n-\n-* All of them are accessible [online](http://doc.rust-lang.org/error-index.html),\n-  which are auto-generated from rustc source code in different places:\n-  [librustc](https://github.com/rust-lang/rust/blob/master/src/librustc/error_codes.rs),\n-  [librustc_ast](https://github.com/rust-lang/rust/blob/master/src/librustc_ast/error_codes.rs),\n-  [librustc_borrowck](https://github.com/rust-lang/rust/blob/master/src/librustc_borrowck/error_codes.rs),\n-  [librustc_metadata](https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/error_codes.rs),\n-  [librustc_mir](https://github.com/rust-lang/rust/blob/master/src/librustc_mir/error_codes.rs),\n-  [librustc_passes](https://github.com/rust-lang/rust/blob/master/src/librustc_passes/error_codes.rs),\n-  [librustc_privacy](https://github.com/rust-lang/rust/blob/master/src/librustc_privacy/error_codes.rs),\n-  [librustc_resolve](https://github.com/rust-lang/rust/blob/master/src/librustc_resolve/error_codes.rs),\n-  [librustc_codegen_llvm](https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/error_codes.rs),\n-  [librustc_plugin_impl](https://github.com/rust-lang/rust/blob/master/src/librustc_plugin/error_codes.rs),\n-  [librustc_typeck](https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/error_codes.rs).\n-* Explanations have full markdown support. Use it, especially to highlight\n-code with backticks.\n-* When talking about the compiler, call it `the compiler`, not `Rust` or\n-`rustc`.\n-\n-## Compiler Flags\n-\n-* Flags should be orthogonal to each other. For example, if we'd have a\n-json-emitting variant of multiple actions `foo` and `bar`, an additional\n---json flag is better than adding `--foo-json` and `--bar-json`.\n-* Always give options a long descriptive name, if only for more\n-understandable compiler scripts.\n-* The `--verbose` flag is for adding verbose information to `rustc` output\n-when not compiling a program. For example, using it with the `--version` flag\n-gives information about the hashes of the code.\n-* Experimental flags and options must be guarded behind the `-Z unstable-options` flag."}, {"sha": "b514e0f6d9cff61cf653435b6f556175d44a602c", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -4052,15 +4052,13 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_strip)]\n-    ///\n     /// assert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\n     /// assert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\n     /// assert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n     /// ```\n     #[must_use = \"this returns the remaining substring as a new slice, \\\n                   without modifying the original\"]\n-    #[unstable(feature = \"str_strip\", reason = \"newly added\", issue = \"67302\")]\n+    #[stable(feature = \"str_strip\", since = \"1.45.0\")]\n     pub fn strip_prefix<'a, P: Pattern<'a>>(&'a self, prefix: P) -> Option<&'a str> {\n         prefix.strip_prefix_of(self)\n     }\n@@ -4082,14 +4080,13 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_strip)]\n     /// assert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\n     /// assert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\n     /// assert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n     /// ```\n     #[must_use = \"this returns the remaining substring as a new slice, \\\n                   without modifying the original\"]\n-    #[unstable(feature = \"str_strip\", reason = \"newly added\", issue = \"67302\")]\n+    #[stable(feature = \"str_strip\", since = \"1.45.0\")]\n     pub fn strip_suffix<'a, P>(&'a self, suffix: P) -> Option<&'a str>\n     where\n         P: Pattern<'a>,"}, {"sha": "61b56766c26e2807b7099daeb73f4211bca7b501", "filename": "src/librustc_error_codes/error_codes/E0617.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_error_codes%2Ferror_codes%2FE0617.md", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_error_codes%2Ferror_codes%2FE0617.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0617.md?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -17,3 +17,14 @@ Certain Rust types must be cast before passing them to a variadic function,\n because of arcane ABI rules dictated by the C standard. To fix the error,\n cast the value to the type specified by the error message (which you may need\n to import from `std::os::raw`).\n+\n+In this case, `c_double` has the same size as `f64` so we can use it directly:\n+\n+```no_run\n+# extern {\n+#     fn printf(c: *const i8, ...);\n+# }\n+unsafe {\n+    printf(::std::ptr::null(), 0f64); // ok!\n+}\n+```"}, {"sha": "35cff668581dde93afe41973e5bbc52f5fef852e", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -10,7 +10,6 @@ pub use rustc_ast::ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::{SourceMap, Spanned};\n@@ -2664,10 +2663,6 @@ impl<ID> TraitCandidate<ID> {\n // Trait method resolution\n pub type TraitMap<ID = HirId> = NodeMap<Vec<TraitCandidate<ID>>>;\n \n-// Map from the NodeId of a glob import to a list of items which are actually\n-// imported.\n-pub type GlobMap = NodeMap<FxHashSet<Symbol>>;\n-\n #[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub enum Node<'hir> {\n     Param(&'hir Param<'hir>),"}, {"sha": "b791d313fc4f438a47e0e850da80401770ab3a6b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -276,7 +276,6 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         UNUSED_ALLOCATION,\n         UNUSED_DOC_COMMENTS,\n         UNUSED_EXTERN_CRATES,\n-        UNUSED_CRATE_DEPENDENCIES,\n         UNUSED_FEATURES,\n         UNUSED_LABELS,\n         UNUSED_PARENS,"}, {"sha": "1e27f1549112a6562fdc86034a023e49987354de", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -169,7 +169,6 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    // FIXME(eddyb) this function can and should return `LocalDefId`.\n     #[inline]\n     pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {\n         self.opt_local_def_id(hir_id).unwrap_or_else(|| {\n@@ -192,11 +191,6 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.opt_local_def_id(node)\n     }\n \n-    #[inline]\n-    pub fn as_local_node_id(&self, def_id: DefId) -> Option<NodeId> {\n-        self.tcx.definitions.as_local_node_id(def_id)\n-    }\n-\n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: LocalDefId) -> HirId {\n         self.tcx.definitions.as_local_hir_id(def_id)"}, {"sha": "85451bf6538e44406d586b64bdcbcbdfd23ec189", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -973,7 +973,9 @@ rustc_queries! {\n             desc { \"fetching what a crate is named\" }\n         }\n         query item_children(_: DefId) -> &'tcx [Export<hir::HirId>] {}\n-        query extern_mod_stmt_cnum(_: DefId) -> Option<CrateNum> {}\n+        query extern_mod_stmt_cnum(_: LocalDefId) -> Option<CrateNum> {\n+            desc { \"fetching extern module statement\" }\n+        }\n \n         query get_lib_features(_: CrateNum) -> LibFeatures {\n             storage(ArenaCacheSelector<'tcx>)\n@@ -1040,7 +1042,7 @@ rustc_queries! {\n             desc { |tcx| \"maybe_unused_trait_import for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n         }\n         query maybe_unused_extern_crates(_: CrateNum)\n-            -> &'tcx [(DefId, Span)] {\n+            -> &'tcx [(LocalDefId, Span)] {\n             eval_always\n             desc { \"looking up all possibly unused extern crates\" }\n         }"}, {"sha": "7a2001448419099e588d44657a5ad7ce7e227d4d", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -925,7 +925,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub consts: CommonConsts<'tcx>,\n \n     /// Resolutions of `extern crate` items produced by resolver.\n-    extern_crate_map: FxHashMap<DefId, CrateNum>,\n+    extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n@@ -944,7 +944,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub queries: query::Queries<'tcx>,\n \n     maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n-    maybe_unused_extern_crates: Vec<(DefId, Span)>,\n+    maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     /// A map of glob use to a set of names it actually imports. Currently only\n     /// used in save-analysis.\n     glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,"}, {"sha": "01517ab25a24ac4fe49dcd700826ca658da3ded7", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -120,10 +120,10 @@ mod sty;\n pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n-    pub extern_crate_map: FxHashMap<DefId, CrateNum>,\n+    pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<hir::HirId>>>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n-    pub maybe_unused_extern_crates: Vec<(DefId, Span)>,\n+    pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     pub export_map: ExportMap<hir::HirId>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced"}, {"sha": "92ea119d9a458c260865b73fc92c3b188a6a77f0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -130,7 +130,7 @@ impl<'a> Resolver<'a> {\n             Some(def_id) => def_id,\n             None => return self.ast_transform_scopes.get(&expn_id).unwrap_or(&self.graph_root),\n         };\n-        if let Some(id) = self.definitions.as_local_node_id(def_id) {\n+        if let Some(id) = def_id.as_local() {\n             self.local_macro_def_scopes[&id]\n         } else {\n             let module_def_id = ty::DefIdTree::parent(&*self, def_id).unwrap();\n@@ -640,9 +640,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 } else if orig_name == Some(kw::SelfLower) {\n                     self.r.graph_root\n                 } else {\n+                    let def_id = self.r.definitions.local_def_id(item.id);\n                     let crate_id =\n                         self.r.crate_loader.process_extern_crate(item, &self.r.definitions);\n-                    self.r.extern_crate_map.insert(item.id, crate_id);\n+                    self.r.extern_crate_map.insert(def_id, crate_id);\n                     self.r.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n                 };\n \n@@ -1173,10 +1174,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             _ => unreachable!(),\n         };\n \n-        let def_id = self.r.definitions.local_def_id(item.id).to_def_id();\n-        let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id);\n-        self.r.macro_map.insert(def_id, ext);\n-        self.r.local_macro_def_scopes.insert(item.id, parent_scope.module);\n+        let def_id = self.r.definitions.local_def_id(item.id);\n+        let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id.to_def_id());\n+        self.r.macro_map.insert(def_id.to_def_id(), ext);\n+        self.r.local_macro_def_scopes.insert(def_id, parent_scope.module);\n \n         if macro_rules {\n             let ident = ident.normalize_to_macros_2_0();"}, {"sha": "cc0e97aeb14300ce1cf8fa8a47cb2ac1ea8d3766", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -64,16 +64,17 @@ impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     fn check_import(&mut self, id: ast::NodeId) {\n         let mut used = false;\n         self.r.per_ns(|this, ns| used |= this.used_imports.contains(&(id, ns)));\n+        let def_id = self.r.definitions.local_def_id(id);\n         if !used {\n-            if self.r.maybe_unused_trait_imports.contains(&id) {\n+            if self.r.maybe_unused_trait_imports.contains(&def_id) {\n                 // Check later.\n                 return;\n             }\n             self.unused_import(self.base_id).add(id);\n         } else {\n             // This trait import is definitely used, in a way other than\n             // method resolution.\n-            self.r.maybe_unused_trait_imports.remove(&id);\n+            self.r.maybe_unused_trait_imports.remove(&def_id);\n             if let Some(i) = self.unused_imports.get_mut(&self.base_id) {\n                 i.unused.remove(&id);\n             }\n@@ -245,7 +246,8 @@ impl Resolver<'_> {\n                     }\n                 }\n                 ImportKind::ExternCrate { .. } => {\n-                    self.maybe_unused_extern_crates.push((import.id, import.span));\n+                    let def_id = self.definitions.local_def_id(import.id);\n+                    self.maybe_unused_extern_crates.push((def_id, import.span));\n                 }\n                 ImportKind::MacroUse => {\n                     let msg = \"unused `#[macro_use]` import\";"}, {"sha": "f04813cf3bc7f02cafc7426198fc936271b9bfc7", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -2209,7 +2209,8 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     ) -> SmallVec<[NodeId; 1]> {\n         let mut import_ids = smallvec![];\n         while let NameBindingKind::Import { import, binding, .. } = kind {\n-            self.r.maybe_unused_trait_imports.insert(import.id);\n+            let id = self.r.definitions.local_def_id(import.id);\n+            self.r.maybe_unused_trait_imports.insert(id);\n             self.r.add_to_glob_map(&import, trait_name);\n             import_ids.push(import.id);\n             kind = &binding.kind;"}, {"sha": "015f1b6315c19cd5781b3d6bac8c832fb92998d5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 47, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -37,7 +37,7 @@ use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::{DefKey, Definitions};\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n-use rustc_hir::{GlobMap, TraitMap};\n+use rustc_hir::TraitMap;\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::hir::exports::ExportMap;\n use rustc_middle::middle::cstore::{CrateStore, MetadataLoaderDyn};\n@@ -866,7 +866,7 @@ pub struct Resolver<'a> {\n     label_res_map: NodeMap<NodeId>,\n \n     /// `CrateNum` resolutions of `extern crate` items.\n-    extern_crate_map: NodeMap<CrateNum>,\n+    extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     export_map: ExportMap<NodeId>,\n     trait_map: TraitMap<NodeId>,\n \n@@ -895,11 +895,11 @@ pub struct Resolver<'a> {\n     underscore_disambiguator: u32,\n \n     /// Maps glob imports to the names of items actually imported.\n-    glob_map: GlobMap,\n+    glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n-    maybe_unused_trait_imports: NodeSet,\n-    maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n+    maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n+    maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n \n     /// Privacy errors are delayed until the end in order to deduplicate them.\n     privacy_errors: Vec<PrivacyError<'a>>,\n@@ -924,7 +924,7 @@ pub struct Resolver<'a> {\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n     non_macro_attrs: [Lrc<SyntaxExtension>; 2],\n-    local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n+    local_macro_def_scopes: FxHashMap<LocalDefId, Module<'a>>,\n     ast_transform_scopes: FxHashMap<ExpnId, Module<'a>>,\n     unused_macros: NodeMap<Span>,\n     proc_macro_stubs: NodeSet,\n@@ -1269,11 +1269,7 @@ impl<'a> Resolver<'a> {\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n         let definitions = self.definitions;\n-        let extern_crate_map = self\n-            .extern_crate_map\n-            .into_iter()\n-            .map(|(k, v)| (definitions.local_def_id(k).to_def_id(), v))\n-            .collect();\n+        let extern_crate_map = self.extern_crate_map;\n         let export_map = self\n             .export_map\n             .into_iter()\n@@ -1298,21 +1294,9 @@ impl<'a> Resolver<'a> {\n                 )\n             })\n             .collect();\n-        let maybe_unused_trait_imports = self\n-            .maybe_unused_trait_imports\n-            .into_iter()\n-            .map(|id| definitions.local_def_id(id))\n-            .collect();\n-        let maybe_unused_extern_crates = self\n-            .maybe_unused_extern_crates\n-            .into_iter()\n-            .map(|(id, sp)| (definitions.local_def_id(id).to_def_id(), sp))\n-            .collect();\n-        let glob_map = self\n-            .glob_map\n-            .into_iter()\n-            .map(|(id, names)| (definitions.local_def_id(id), names))\n-            .collect();\n+        let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n+        let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n+        let glob_map = self.glob_map;\n         ResolverOutputs {\n             definitions: definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n@@ -1334,11 +1318,7 @@ impl<'a> Resolver<'a> {\n         ResolverOutputs {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n-            extern_crate_map: self\n-                .extern_crate_map\n-                .iter()\n-                .map(|(&k, &v)| (self.definitions.local_def_id(k).to_def_id(), v))\n-                .collect(),\n+            extern_crate_map: self.extern_crate_map.clone(),\n             export_map: self\n                 .export_map\n                 .iter()\n@@ -1366,21 +1346,9 @@ impl<'a> Resolver<'a> {\n                     )\n                 })\n                 .collect(),\n-            glob_map: self\n-                .glob_map\n-                .iter()\n-                .map(|(&id, names)| (self.definitions.local_def_id(id), names.clone()))\n-                .collect(),\n-            maybe_unused_trait_imports: self\n-                .maybe_unused_trait_imports\n-                .iter()\n-                .map(|&id| self.definitions.local_def_id(id))\n-                .collect(),\n-            maybe_unused_extern_crates: self\n-                .maybe_unused_extern_crates\n-                .iter()\n-                .map(|&(id, sp)| (self.definitions.local_def_id(id).to_def_id(), sp))\n-                .collect(),\n+            glob_map: self.glob_map.clone(),\n+            maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n+            maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),\n             extern_prelude: self\n                 .extern_prelude\n                 .iter()\n@@ -1522,7 +1490,8 @@ impl<'a> Resolver<'a> {\n     #[inline]\n     fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {\n         if import.is_glob() {\n-            self.glob_map.entry(import.id).or_default().insert(ident.name);\n+            let def_id = self.definitions.local_def_id(import.id);\n+            self.glob_map.entry(def_id).or_default().insert(ident.name);\n         }\n     }\n "}, {"sha": "2567ca47ef967f831bf38d9941766730d5adfa1b", "filename": "src/librustc_target/spec/x86_64_unknown_illumos.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_illumos.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -13,7 +13,8 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"illumos\".to_string(),\n         target_env: String::new(),"}, {"sha": "044239b047a4ef665a0c015a9108301399b69fc9", "filename": "src/librustc_trait_selection/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_trait_selection%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_trait_selection%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Flib.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -16,7 +16,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n #![feature(or_patterns)]\n-#![feature(str_strip)]\n #![feature(option_zip)]\n #![recursion_limit = \"512\"] // For rustdoc\n "}, {"sha": "eaaff70472bfb212e2c59e661ca9946b780587ac", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n@@ -70,7 +70,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     // Collect first the crates that are completely unused.  These we\n     // can always suggest removing (no matter which edition we are\n     // in).\n-    let unused_extern_crates: FxHashMap<DefId, Span> = tcx\n+    let unused_extern_crates: FxHashMap<LocalDefId, Span> = tcx\n         .maybe_unused_extern_crates(LOCAL_CRATE)\n         .iter()\n         .filter(|&&(def_id, _)| {\n@@ -88,7 +88,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n             // Note that if we carry through to the `extern_mod_stmt_cnum` query\n             // below it'll cause a panic because `def_id` is actually bogus at this\n             // point in time otherwise.\n-            if tcx.hir().find(tcx.hir().as_local_hir_id(def_id.expect_local())).is_none() {\n+            if tcx.hir().find(tcx.hir().as_local_hir_id(def_id)).is_none() {\n                 return false;\n             }\n             true\n@@ -112,13 +112,14 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     });\n \n     for extern_crate in &crates_to_lint {\n-        let id = tcx.hir().as_local_hir_id(extern_crate.def_id.expect_local());\n+        let def_id = extern_crate.def_id.expect_local();\n+        let id = tcx.hir().as_local_hir_id(def_id);\n         let item = tcx.hir().expect_item(id);\n \n         // If the crate is fully unused, we suggest removing it altogether.\n         // We do this in any edition.\n         if extern_crate.warn_if_unused {\n-            if let Some(&span) = unused_extern_crates.get(&extern_crate.def_id) {\n+            if let Some(&span) = unused_extern_crates.get(&def_id) {\n                 tcx.struct_span_lint_hir(lint, id, span, |lint| {\n                     // Removal suggestion span needs to include attributes (Issue #54400)\n                     let span_with_attrs = tcx"}, {"sha": "08536de4d55c333c96924dc91089fce36d7cf489", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 106, "deletions": 1, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -1,3 +1,4 @@\n+use crate::cmp::Ordering;\n use crate::convert::TryInto;\n use crate::fmt;\n use crate::hash;\n@@ -36,7 +37,7 @@ use crate::vec;\n /// assert_eq!(socket.port(), 8080);\n /// assert_eq!(socket.is_ipv4(), true);\n /// ```\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum SocketAddr {\n     /// An IPv4 socket address.\n@@ -653,11 +654,75 @@ impl PartialEq for SocketAddrV6 {\n             && self.inner.sin6_scope_id == other.inner.sin6_scope_id\n     }\n }\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddrV4> for SocketAddr {\n+    fn eq(&self, other: &SocketAddrV4) -> bool {\n+        match self {\n+            SocketAddr::V4(v4) => v4 == other,\n+            SocketAddr::V6(_) => false,\n+        }\n+    }\n+}\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddrV6> for SocketAddr {\n+    fn eq(&self, other: &SocketAddrV6) -> bool {\n+        match self {\n+            SocketAddr::V4(_) => false,\n+            SocketAddr::V6(v6) => v6 == other,\n+        }\n+    }\n+}\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddr> for SocketAddrV4 {\n+    fn eq(&self, other: &SocketAddr) -> bool {\n+        match other {\n+            SocketAddr::V4(v4) => self == v4,\n+            SocketAddr::V6(_) => false,\n+        }\n+    }\n+}\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialEq<SocketAddr> for SocketAddrV6 {\n+    fn eq(&self, other: &SocketAddr) -> bool {\n+        match other {\n+            SocketAddr::V4(_) => false,\n+            SocketAddr::V6(v6) => self == v6,\n+        }\n+    }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for SocketAddrV4 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for SocketAddrV6 {}\n \n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd for SocketAddrV4 {\n+    fn partial_cmp(&self, other: &SocketAddrV4) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl PartialOrd for SocketAddrV6 {\n+    fn partial_cmp(&self, other: &SocketAddrV6) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl Ord for SocketAddrV4 {\n+    fn cmp(&self, other: &SocketAddrV4) -> Ordering {\n+        self.ip().cmp(other.ip()).then(self.port().cmp(&other.port()))\n+    }\n+}\n+\n+#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n+impl Ord for SocketAddrV6 {\n+    fn cmp(&self, other: &SocketAddrV6) -> Ordering {\n+        self.ip().cmp(other.ip()).then(self.port().cmp(&other.port()))\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for SocketAddrV4 {\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n@@ -1102,4 +1167,44 @@ mod tests {\n         assert!(!v6.is_ipv4());\n         assert!(v6.is_ipv6());\n     }\n+\n+    #[test]\n+    fn compare() {\n+        let v4_1 = \"224.120.45.1:23456\".parse::<SocketAddrV4>().unwrap();\n+        let v4_2 = \"224.210.103.5:12345\".parse::<SocketAddrV4>().unwrap();\n+        let v4_3 = \"224.210.103.5:23456\".parse::<SocketAddrV4>().unwrap();\n+        let v6_1 = \"[2001:db8:f00::1002]:23456\".parse::<SocketAddrV6>().unwrap();\n+        let v6_2 = \"[2001:db8:f00::2001]:12345\".parse::<SocketAddrV6>().unwrap();\n+        let v6_3 = \"[2001:db8:f00::2001]:23456\".parse::<SocketAddrV6>().unwrap();\n+\n+        // equality\n+        assert_eq!(v4_1, v4_1);\n+        assert_eq!(v6_1, v6_1);\n+        assert_eq!(v4_1, SocketAddr::V4(v4_1));\n+        assert_eq!(v6_1, SocketAddr::V6(v6_1));\n+        assert_eq!(SocketAddr::V4(v4_1), SocketAddr::V4(v4_1));\n+        assert_eq!(SocketAddr::V6(v6_1), SocketAddr::V6(v6_1));\n+        assert!(v4_1 != SocketAddr::V6(v6_1));\n+        assert!(v6_1 != SocketAddr::V4(v4_1));\n+        assert!(v4_1 != v4_2);\n+        assert!(v6_1 != v6_2);\n+\n+        // compare different addresses\n+        assert!(v4_1 < v4_2);\n+        assert!(v6_1 < v6_2);\n+        assert!(v4_2 > v4_1);\n+        assert!(v6_2 > v6_1);\n+\n+        // compare the same address with different ports\n+        assert!(v4_2 < v4_3);\n+        assert!(v6_2 < v6_3);\n+        assert!(v4_3 > v4_2);\n+        assert!(v6_3 > v6_2);\n+\n+        // compare different addresses with the same port\n+        assert!(v4_1 < v4_3);\n+        assert!(v6_1 < v6_3);\n+        assert!(v4_3 > v4_1);\n+        assert!(v6_3 > v6_1);\n+    }\n }"}, {"sha": "b93dc54f7a97df9b0f66c0c1e928bdddac35cdd0", "filename": "src/test/ui/generator/resume-arg-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-size.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -22,7 +22,7 @@ fn main() {\n     };\n \n     // Neither of these generators have the resume arg live across the `yield`, so they should be\n-    // 4 Bytes in size (only storing the discriminant)\n+    // 1 Byte in size (only storing the discriminant)\n     assert_eq!(size_of_val(&gen_copy), 1);\n     assert_eq!(size_of_val(&gen_move), 1);\n }"}, {"sha": "c4e5d065643c82890cd44a5bd8cd71264d339c43", "filename": "src/test/ui/lint/unaligned_references.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -2,20 +2,27 @@\n \n #[repr(packed)]\n pub struct Good {\n-    data: &'static u32,\n-    data2: [&'static u32; 2],\n+    data: u64,\n+    ptr: &'static u64,\n+    data2: [u64; 2],\n     aligned: [u8; 32],\n }\n \n fn main() {\n     unsafe {\n-        let good = Good { data: &0, data2: [&0, &0], aligned: [0; 32] };\n+        let good = Good { data: 0, ptr: &0, data2: [0, 0], aligned: [0; 32] };\n \n+        let _ = &good.ptr; //~ ERROR reference to packed field\n         let _ = &good.data; //~ ERROR reference to packed field\n+        // Error even when turned into raw pointer immediately.\n         let _ = &good.data as *const _; //~ ERROR reference to packed field\n         let _: *const _ = &good.data; //~ ERROR reference to packed field\n+        // Error on method call.\n+        let _ = good.data.clone(); //~ ERROR reference to packed field\n+        // Error for nested fields.\n         let _ = &good.data2[0]; //~ ERROR reference to packed field\n-        let _ = &*good.data; // ok, behind a pointer\n+\n+        let _ = &*good.ptr; // ok, behind a pointer\n         let _ = &good.aligned; // ok, has align 1\n         let _ = &good.aligned[2]; // ok, has align 1\n     }"}, {"sha": "8786b9c05db271e5e16e252d9cc7305fb5394f76", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -1,8 +1,8 @@\n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:14:17\n+  --> $DIR/unaligned_references.rs:15:17\n    |\n-LL |         let _ = &good.data;\n-   |                 ^^^^^^^^^^\n+LL |         let _ = &good.ptr;\n+   |                 ^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unaligned_references.rs:1:9\n@@ -12,28 +12,44 @@ LL | #![deny(unaligned_references)]\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:15:17\n+  --> $DIR/unaligned_references.rs:16:17\n+   |\n+LL |         let _ = &good.data;\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:18:17\n    |\n LL |         let _ = &good.data as *const _;\n    |                 ^^^^^^^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:16:27\n+  --> $DIR/unaligned_references.rs:19:27\n    |\n LL |         let _: *const _ = &good.data;\n    |                           ^^^^^^^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:17:17\n+  --> $DIR/unaligned_references.rs:21:17\n+   |\n+LL |         let _ = good.data.clone();\n+   |                 ^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:23:17\n    |\n LL |         let _ = &good.data2[0];\n    |                 ^^^^^^^^^^^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "5f9eb2bf437fdf2efaae5ca3826127c28b7fd649", "filename": "src/test/ui/mir/issue-66930.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Fmir%2Fissue-66930.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Fmir%2Fissue-66930.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-66930.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+// compile-flags: --emit=mir,link\n+// Regression test for #66930, this ICE requires `--emit=mir` flag.\n+\n+static UTF8_CHAR_WIDTH: [u8; 0] = [];\n+\n+pub fn utf8_char_width(b: u8) -> usize {\n+    UTF8_CHAR_WIDTH[b as usize] as usize\n+}\n+\n+fn main() {}"}, {"sha": "e21ffb5dec2dedde81e3623ebb717ad2cb183ed7", "filename": "src/test/ui/unused-crate-deps/lint-group.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Funused-crate-deps%2Flint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftest%2Fui%2Funused-crate-deps%2Flint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Flint-group.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -0,0 +1,9 @@\n+// `unused_crate_dependencies` is not currently in the `unused` group\n+// due to false positives from Cargo.\n+\n+// check-pass\n+// aux-crate:bar=bar.rs\n+\n+#![deny(unused)]\n+\n+fn main() {}"}, {"sha": "3e1f423865b1d671ab54203f674c819bba9dc399", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255c0338dc0b02f833fb1a816d76febd50c399c4/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=255c0338dc0b02f833fb1a816d76febd50c399c4", "patch": "@@ -1,6 +1,5 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![feature(rustc_private)]\n-#![feature(str_strip)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)"}]}