{"sha": "31e49f02723fe4631740fce4ef387aad31563bef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZTQ5ZjAyNzIzZmU0NjMxNzQwZmNlNGVmMzg3YWFkMzE1NjNiZWY=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-12T15:09:17Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-12T15:26:03Z"}, "message": "Test and fix size_hint for slice's [r]split* iterators\n\nAdds extensive test for all the [r]split* iterators.\nFixes size_hint upper bound for split_inclusive* iterators which was one higher than necessary for non-empty slices.\nFixes size_hint lower bound for [r]splitn* iterators when n==0, which was one too high.", "tree": {"sha": "dbf63b80d0aa94941cfda24ace9ab1b036bf1ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbf63b80d0aa94941cfda24ace9ab1b036bf1ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31e49f02723fe4631740fce4ef387aad31563bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31e49f02723fe4631740fce4ef387aad31563bef", "html_url": "https://github.com/rust-lang/rust/commit/31e49f02723fe4631740fce4ef387aad31563bef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31e49f02723fe4631740fce4ef387aad31563bef/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bed1f0bc3cc50c10aab26d5f94b16a00776b8a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bed1f0bc3cc50c10aab26d5f94b16a00776b8a5", "html_url": "https://github.com/rust-lang/rust/commit/6bed1f0bc3cc50c10aab26d5f94b16a00776b8a5"}], "stats": {"total": 107, "additions": 99, "deletions": 8}, "files": [{"sha": "fe3d7183ee2e80f534758854f0b101ec45a80263", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/31e49f02723fe4631740fce4ef387aad31563bef/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e49f02723fe4631740fce4ef387aad31563bef/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=31e49f02723fe4631740fce4ef387aad31563bef", "patch": "@@ -993,6 +993,80 @@ fn test_rsplitnator() {\n     assert!(xs.rsplitn(0, |x| *x % 2 == 0).next().is_none());\n }\n \n+#[test]\n+fn test_split_iterators_size_hint() {\n+    for len in 0..=2 {\n+        let mut v: Vec<u8> = (0..len).collect();\n+        fn verify_descending(sequence: &[usize], context: &str) {\n+            let len = sequence.len();\n+            let target: Vec<usize> = (0..len).rev().collect();\n+            assert_eq!(sequence, target, \"while testing: {}\", context);\n+        }\n+\n+        macro_rules! test_size_hint {\n+            ($create_iterator:expr) => {{\n+                // with a predicate always returning false, the split*-iterators\n+                // become maximally short, so the size_hint lower bounds are correct\n+\n+                macro_rules! p {\n+                    () => {\n+                        |_| false\n+                    };\n+                }\n+                let mut short_iterator = $create_iterator;\n+                let mut lower_bounds = vec![short_iterator.size_hint().0];\n+                while let Some(_) = short_iterator.next() {\n+                    lower_bounds.push(short_iterator.size_hint().0);\n+                }\n+                verify_descending(&lower_bounds, stringify!($create_iterator));\n+            }\n+            {\n+                // with a predicate always returning true, the split*-iterators\n+                // become maximally long, so the size_hint upper bounds are correct\n+\n+                macro_rules! p {\n+                    () => {\n+                        |_| true\n+                    };\n+                }\n+                let mut long_iterator = $create_iterator;\n+                let mut upper_bounds = vec![\n+                    long_iterator.size_hint().1.expect(\"split*-methods have known upper bound\"),\n+                ];\n+                while let Some(_) = long_iterator.next() {\n+                    upper_bounds.push(\n+                        long_iterator.size_hint().1.expect(\"split*-methods have known upper bound\"),\n+                    );\n+                }\n+                verify_descending(&upper_bounds, stringify!($create_iterator));\n+            }};\n+        }\n+\n+        test_size_hint!(v.split(p!()));\n+        test_size_hint!(v.split_mut(p!()));\n+        test_size_hint!(v.splitn(0, p!()));\n+        test_size_hint!(v.splitn(1, p!()));\n+        test_size_hint!(v.splitn(2, p!()));\n+        test_size_hint!(v.splitn(3, p!()));\n+        test_size_hint!(v.splitn_mut(0, p!()));\n+        test_size_hint!(v.splitn_mut(1, p!()));\n+        test_size_hint!(v.splitn_mut(2, p!()));\n+        test_size_hint!(v.splitn_mut(3, p!()));\n+        test_size_hint!(v.split_inclusive(p!()));\n+        test_size_hint!(v.split_inclusive_mut(p!()));\n+        test_size_hint!(v.rsplit(p!()));\n+        test_size_hint!(v.rsplit_mut(p!()));\n+        test_size_hint!(v.rsplitn(0, p!()));\n+        test_size_hint!(v.rsplitn(1, p!()));\n+        test_size_hint!(v.rsplitn(2, p!()));\n+        test_size_hint!(v.rsplitn(3, p!()));\n+        test_size_hint!(v.rsplitn_mut(0, p!()));\n+        test_size_hint!(v.rsplitn_mut(1, p!()));\n+        test_size_hint!(v.rsplitn_mut(2, p!()));\n+        test_size_hint!(v.rsplitn_mut(3, p!()));\n+    }\n+}\n+\n #[test]\n fn test_windowsator() {\n     let v = &[1, 2, 3, 4];"}, {"sha": "c0dfba490eca7dd7b12f5204ad052b34d206f85d", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/31e49f02723fe4631740fce4ef387aad31563bef/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e49f02723fe4631740fce4ef387aad31563bef/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=31e49f02723fe4631740fce4ef387aad31563bef", "patch": "@@ -400,7 +400,13 @@ where\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        if self.finished { (0, Some(0)) } else { (1, Some(self.v.len() + 1)) }\n+        if self.finished {\n+            (0, Some(0))\n+        } else {\n+            // If the predicate doesn't match anything, we yield one slice.\n+            // If it matches every element, we yield `len() + 1` empty slices.\n+            (1, Some(self.v.len() + 1))\n+        }\n     }\n }\n \n@@ -525,7 +531,14 @@ where\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        if self.finished { (0, Some(0)) } else { (1, Some(self.v.len() + 1)) }\n+        if self.finished {\n+            (0, Some(0))\n+        } else {\n+            // If the predicate doesn't match anything, we yield one slice.\n+            // If it matches every element, we yield `len()` one-element slices,\n+            // or a single empty slice.\n+            (1, Some(cmp::max(1, self.v.len())))\n+        }\n     }\n }\n \n@@ -647,8 +660,8 @@ where\n         if self.finished {\n             (0, Some(0))\n         } else {\n-            // if the predicate doesn't match anything, we yield one slice\n-            // if it matches every element, we yield len+1 empty slices.\n+            // If the predicate doesn't match anything, we yield one slice.\n+            // If it matches every element, we yield `len() + 1` empty slices.\n             (1, Some(self.v.len() + 1))\n         }\n     }\n@@ -763,9 +776,10 @@ where\n         if self.finished {\n             (0, Some(0))\n         } else {\n-            // if the predicate doesn't match anything, we yield one slice\n-            // if it matches every element, we yield len+1 empty slices.\n-            (1, Some(self.v.len() + 1))\n+            // If the predicate doesn't match anything, we yield one slice.\n+            // If it matches every element, we yield `len()` one-element slices,\n+            // or a single empty slice.\n+            (1, Some(cmp::max(1, self.v.len())))\n         }\n     }\n }\n@@ -1008,7 +1022,10 @@ impl<T, I: SplitIter<Item = T>> Iterator for GenericSplitN<I> {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let (lower, upper_opt) = self.iter.size_hint();\n-        (lower, upper_opt.map(|upper| cmp::min(self.count, upper)))\n+        (\n+            cmp::min(self.count, lower),\n+            Some(upper_opt.map_or(self.count, |upper| cmp::min(self.count, upper))),\n+        )\n     }\n }\n "}]}