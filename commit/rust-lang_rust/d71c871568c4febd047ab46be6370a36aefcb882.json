{"sha": "d71c871568c4febd047ab46be6370a36aefcb882", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MWM4NzE1NjhjNGZlYmQwNDdhYjQ2YmU2MzcwYTM2YWVmY2I4ODI=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-27T20:12:13Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-11-27T20:12:13Z"}, "message": "Run rustfmt on src", "tree": {"sha": "61183095d01a1eca0a696f041cf7926f90c7fa74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61183095d01a1eca0a696f041cf7926f90c7fa74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d71c871568c4febd047ab46be6370a36aefcb882", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE46kBTF5vnyuSPg0W6OiXpYcOQcIFAlv9pR0ACgkQ6OiXpYcO\nQcI2QBAAgtS6UDj7M5kLf57qF7gKB6p8TXlK89ALNdaNHHnOlXtxhC6ZHhbTxlaf\ndj6J5mrosDrItMGhplwVKvbBWpFsoAggLmZVXyZJwY9s0vTOFUsO4tpOqgFNfLQO\nP/YVNlfu5IZr00F3LI5qlxjntTcavVgln2NFXqDWk3zsI1WX/jMxYMwCGkD2X/rE\nyxPi5Sw6eaCQIQab6dh3KSi7vkC1CcSsNfml1Rm7DmvREgJ4Yo2tsYcjmOdg5UxE\n56GLhk3QX9Ss7ygCkCzZ2VWTQdcXH771MwaRjNR6E0a7zrQI4IXTWGSMveFZYap9\nR7eAAJ2Ax7Q7o2cKRrawSRgclwKWKTlQBNP1Tg3wJNTHuM3M1yLdhC904Ylexyy0\nDNiVIOgwlcekjV0fx2pM43CFguck+wRNnGdMqNEZAYRzFQmbqBkQg55S3D84vBTC\nGhfevrVlVzaqfLSrOD4yXgcxOdJg1R3fIJIh/S/1PSO/YrL+v4qXCiSFEPq3sfpJ\n4mQQXMb13co8AYOr2GWmW+xK7f2g34CM9C8DAPpyTzNxPmsZV7X26Fwgzle4YTUm\n7E7AlOTH3vlqiowY91ihqpkH5eaquxLFzN84qqOLFLPNygHDJT+kGz9KVyaHNw+v\ncvk6SwtQYvLmLqke/fnmotYljlFwPCS6QmCCbs7ixTHjZ378DxA=\n=QvO8\n-----END PGP SIGNATURE-----", "payload": "tree 61183095d01a1eca0a696f041cf7926f90c7fa74\nparent 2953ae0702c103dc9e0ca6c7509ebc8a5e89e9f0\nauthor flip1995 <hello@philkrones.com> 1543349533 +0100\ncommitter flip1995 <hello@philkrones.com> 1543349533 +0100\n\nRun rustfmt on src\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d71c871568c4febd047ab46be6370a36aefcb882", "html_url": "https://github.com/rust-lang/rust/commit/d71c871568c4febd047ab46be6370a36aefcb882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d71c871568c4febd047ab46be6370a36aefcb882/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2953ae0702c103dc9e0ca6c7509ebc8a5e89e9f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2953ae0702c103dc9e0ca6c7509ebc8a5e89e9f0", "html_url": "https://github.com/rust-lang/rust/commit/2953ae0702c103dc9e0ca6c7509ebc8a5e89e9f0"}], "stats": {"total": 245, "additions": 121, "deletions": 124}, "files": [{"sha": "fd9c8693c95a63bbafdb99e04c968a7c5b976556", "filename": "src/driver.rs", "status": "modified", "additions": 119, "deletions": 119, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/d71c871568c4febd047ab46be6370a36aefcb882/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71c871568c4febd047ab46be6370a36aefcb882/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=d71c871568c4febd047ab46be6370a36aefcb882", "patch": "@@ -7,11 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-\n #![feature(try_from)]\n #![allow(clippy::missing_docs_in_private_items)]\n \n@@ -33,126 +31,128 @@ fn show_version() {\n \n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n-    exit(rustc_driver::run(move || {\n-        use std::env;\n-\n-        if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n-            show_version();\n-            exit(0);\n-        }\n-\n-        let sys_root = option_env!(\"SYSROOT\")\n-            .map(String::from)\n-            .or_else(|| std::env::var(\"SYSROOT\").ok())\n-            .or_else(|| {\n-                let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-                let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-                home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n-            })\n-            .or_else(|| {\n-                Command::new(\"rustc\")\n-                    .arg(\"--print\")\n-                    .arg(\"sysroot\")\n-                    .output()\n-                    .ok()\n-                    .and_then(|out| String::from_utf8(out.stdout).ok())\n-                    .map(|s| s.trim().to_owned())\n-            })\n-            .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n-\n-        // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n-        // We're invoking the compiler programmatically, so we ignore this/\n-        let mut orig_args: Vec<String> = env::args().collect();\n-        if orig_args.len() <= 1 {\n-            std::process::exit(1);\n-        }\n-        if Path::new(&orig_args[1]).file_stem() == Some(\"rustc\".as_ref()) {\n-            // we still want to be able to invoke it normally though\n-            orig_args.remove(1);\n-        }\n-        // this conditional check for the --sysroot flag is there so users can call\n-        // `clippy_driver` directly\n-        // without having to pass --sysroot or anything\n-        let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n-            orig_args.clone()\n-        } else {\n-            orig_args\n-                .clone()\n-                .into_iter()\n-                .chain(Some(\"--sysroot\".to_owned()))\n-                .chain(Some(sys_root))\n-                .collect()\n-        };\n-\n-        // this check ensures that dependencies are built but not linted and the final\n-        // crate is\n-        // linted but not built\n-        let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n-            || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n-\n-        if clippy_enabled {\n-            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n-            if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-                args.extend(\n-                    extra_args\n-                        .split(\"__CLIPPY_HACKERY__\")\n-                        .filter_map(|s| if s.is_empty() {\n+    exit(\n+        rustc_driver::run(move || {\n+            use std::env;\n+\n+            if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+                show_version();\n+                exit(0);\n+            }\n+\n+            let sys_root = option_env!(\"SYSROOT\")\n+                .map(String::from)\n+                .or_else(|| std::env::var(\"SYSROOT\").ok())\n+                .or_else(|| {\n+                    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+                    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+                    home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n+                })\n+                .or_else(|| {\n+                    Command::new(\"rustc\")\n+                        .arg(\"--print\")\n+                        .arg(\"sysroot\")\n+                        .output()\n+                        .ok()\n+                        .and_then(|out| String::from_utf8(out.stdout).ok())\n+                        .map(|s| s.trim().to_owned())\n+                })\n+                .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n+\n+            // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n+            // We're invoking the compiler programmatically, so we ignore this/\n+            let mut orig_args: Vec<String> = env::args().collect();\n+            if orig_args.len() <= 1 {\n+                std::process::exit(1);\n+            }\n+            if Path::new(&orig_args[1]).file_stem() == Some(\"rustc\".as_ref()) {\n+                // we still want to be able to invoke it normally though\n+                orig_args.remove(1);\n+            }\n+            // this conditional check for the --sysroot flag is there so users can call\n+            // `clippy_driver` directly\n+            // without having to pass --sysroot or anything\n+            let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n+                orig_args.clone()\n+            } else {\n+                orig_args\n+                    .clone()\n+                    .into_iter()\n+                    .chain(Some(\"--sysroot\".to_owned()))\n+                    .chain(Some(sys_root))\n+                    .collect()\n+            };\n+\n+            // this check ensures that dependencies are built but not linted and the final\n+            // crate is\n+            // linted but not built\n+            let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n+                || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n+\n+            if clippy_enabled {\n+                args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+                if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n+                    args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter_map(|s| {\n+                        if s.is_empty() {\n                             None\n                         } else {\n                             Some(s.to_string())\n-                        })\n-                );\n-            }\n-        }\n-\n-        let mut controller = CompileController::basic();\n-        if clippy_enabled {\n-            controller.after_parse.callback = Box::new(move |state| {\n-                let mut registry = rustc_plugin::registry::Registry::new(\n-                    state.session,\n-                    state\n-                        .krate\n-                        .as_ref()\n-                        .expect(\n-                            \"at this compilation stage \\\n-                            the crate must be parsed\",\n-                        )\n-                        .span,\n-                );\n-                registry.args_hidden = Some(Vec::new());\n-\n-                let conf = clippy_lints::read_conf(&registry);\n-                clippy_lints::register_plugins(&mut registry, &conf);\n-\n-                let rustc_plugin::registry::Registry {\n-                    early_lint_passes,\n-                    late_lint_passes,\n-                    lint_groups,\n-                    llvm_passes,\n-                    attributes,\n-                    ..\n-                } = registry;\n-                let sess = &state.session;\n-                let mut ls = sess.lint_store.borrow_mut();\n-                for pass in early_lint_passes {\n-                    ls.register_early_pass(Some(sess), true, pass);\n-                }\n-                for pass in late_lint_passes {\n-                    ls.register_late_pass(Some(sess), true, pass);\n-                }\n-\n-                for (name, (to, deprecated_name)) in lint_groups {\n-                    ls.register_group(Some(sess), true, name, deprecated_name, to);\n+                        }\n+                    }));\n                 }\n-                clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n-\n-                sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n-                sess.plugin_attributes.borrow_mut().extend(attributes);\n-            });\n-        }\n-        controller.compilation_done.stop = Compilation::Stop;\n+            }\n \n-        let args = args;\n-        rustc_driver::run_compiler(&args, Box::new(controller), None, None)\n-    }).try_into().expect(\"exit code too large\"))\n+            let mut controller = CompileController::basic();\n+            if clippy_enabled {\n+                controller.after_parse.callback = Box::new(move |state| {\n+                    let mut registry = rustc_plugin::registry::Registry::new(\n+                        state.session,\n+                        state\n+                            .krate\n+                            .as_ref()\n+                            .expect(\n+                                \"at this compilation stage \\\n+                                 the crate must be parsed\",\n+                            )\n+                            .span,\n+                    );\n+                    registry.args_hidden = Some(Vec::new());\n+\n+                    let conf = clippy_lints::read_conf(&registry);\n+                    clippy_lints::register_plugins(&mut registry, &conf);\n+\n+                    let rustc_plugin::registry::Registry {\n+                        early_lint_passes,\n+                        late_lint_passes,\n+                        lint_groups,\n+                        llvm_passes,\n+                        attributes,\n+                        ..\n+                    } = registry;\n+                    let sess = &state.session;\n+                    let mut ls = sess.lint_store.borrow_mut();\n+                    for pass in early_lint_passes {\n+                        ls.register_early_pass(Some(sess), true, pass);\n+                    }\n+                    for pass in late_lint_passes {\n+                        ls.register_late_pass(Some(sess), true, pass);\n+                    }\n+\n+                    for (name, (to, deprecated_name)) in lint_groups {\n+                        ls.register_group(Some(sess), true, name, deprecated_name, to);\n+                    }\n+                    clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n+\n+                    sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n+                    sess.plugin_attributes.borrow_mut().extend(attributes);\n+                });\n+            }\n+            controller.compilation_done.stop = Compilation::Stop;\n+\n+            let args = args;\n+            rustc_driver::run_compiler(&args, Box::new(controller), None, None)\n+        })\n+        .try_into()\n+        .expect(\"exit code too large\"),\n+    )\n }"}, {"sha": "4069472612da068619037205ee84470d8e324523", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d71c871568c4febd047ab46be6370a36aefcb882/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71c871568c4febd047ab46be6370a36aefcb882/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d71c871568c4febd047ab46be6370a36aefcb882", "patch": "@@ -7,11 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // error-pattern:cargo-clippy\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n-\n #![allow(clippy::missing_docs_in_private_items)]\n #![warn(rust_2018_idioms)]\n "}, {"sha": "6c5cfe691669fe801bba154076886060d5819d9a", "filename": "src/main.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d71c871568c4febd047ab46be6370a36aefcb882/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71c871568c4febd047ab46be6370a36aefcb882/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=d71c871568c4febd047ab46be6370a36aefcb882", "patch": "@@ -7,11 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-\n #![allow(clippy::missing_docs_in_private_items)]\n \n use rustc_tools_util::*;\n@@ -106,7 +104,8 @@ where\n                         .into_os_string()\n                 },\n             )\n-        }).map(|p| (\"CARGO_TARGET_DIR\", p));\n+        })\n+        .map(|p| (\"CARGO_TARGET_DIR\", p));\n \n     let exit_status = std::process::Command::new(\"cargo\")\n         .args(&args)"}]}