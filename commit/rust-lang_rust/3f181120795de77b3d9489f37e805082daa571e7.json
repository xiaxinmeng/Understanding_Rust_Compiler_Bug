{"sha": "3f181120795de77b3d9489f37e805082daa571e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMTgxMTIwNzk1ZGU3N2IzZDk0ODlmMzdlODA1MDgyZGFhNTcxZTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T02:18:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T02:18:36Z"}, "message": "Rollup merge of #62849 - davidtwco:prohibit-inheriting-lifetimes, r=nikomatsakis\n\ntypeck: Prohibit RPIT types that inherit lifetimes\n\nPart of #61949.\n\nThis PR prohibits return position `impl Trait` types that \"inherit\nlifetimes\" from the parent scope. The intent is to forbid cases that are\nchallenging until they can be addressed properly.\n\ncc @nikomatsakis", "tree": {"sha": "cc5ec923e0aac2187c1147e3c5b29fe956f4fb2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc5ec923e0aac2187c1147e3c5b29fe956f4fb2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f181120795de77b3d9489f37e805082daa571e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdU298CRBK7hj4Ov3rIwAAdHIIAFgjoDUlQLcZOhLHVZbFcI0g\nWmfkwdbB/jBJQ7HZvO9G2hF3SyKKx5Zi8IHOuToRd8kil7E28xQAFnraGx9ppkNH\nFb8xvjOdEs3G2iTIsnMA+ZuP58PCF1iW/27rHhqJIfMpa8InVkLzfNFXafoEj9tj\nTWUr6+DH4YBFko+4gcZpDCqOhj5CeSNE624uwCYudTbCrKQ2njOju5jQqAdwzwhX\noVzYKhCYHverOB4gX/9TtTkRPFO3RgrQGgoqR/dbv76iOR7PRYyu9p9Bgjxax7IB\nrEpXAWLDGuRj+ZMK3S8DloKf8MWqxMUzgLGfOAm39YqwwB6UXC5jgR/aXWj7dVo=\n=ITd3\n-----END PGP SIGNATURE-----\n", "payload": "tree cc5ec923e0aac2187c1147e3c5b29fe956f4fb2f\nparent dda33cad3841a49e066f8eac56f89db8a0ce4e5c\nparent 861d1bb365419c4a9ae8eb14257323e9877e5d42\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565749116 +0200\ncommitter GitHub <noreply@github.com> 1565749116 +0200\n\nRollup merge of #62849 - davidtwco:prohibit-inheriting-lifetimes, r=nikomatsakis\n\ntypeck: Prohibit RPIT types that inherit lifetimes\n\nPart of #61949.\n\nThis PR prohibits return position `impl Trait` types that \"inherit\nlifetimes\" from the parent scope. The intent is to forbid cases that are\nchallenging until they can be addressed properly.\n\ncc @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f181120795de77b3d9489f37e805082daa571e7", "html_url": "https://github.com/rust-lang/rust/commit/3f181120795de77b3d9489f37e805082daa571e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f181120795de77b3d9489f37e805082daa571e7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda33cad3841a49e066f8eac56f89db8a0ce4e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda33cad3841a49e066f8eac56f89db8a0ce4e5c", "html_url": "https://github.com/rust-lang/rust/commit/dda33cad3841a49e066f8eac56f89db8a0ce4e5c"}, {"sha": "861d1bb365419c4a9ae8eb14257323e9877e5d42", "url": "https://api.github.com/repos/rust-lang/rust/commits/861d1bb365419c4a9ae8eb14257323e9877e5d42", "html_url": "https://github.com/rust-lang/rust/commit/861d1bb365419c4a9ae8eb14257323e9877e5d42"}], "stats": {"total": 138, "additions": 132, "deletions": 6}, "files": [{"sha": "14fc0d6347e4bd8bfbf907ff820c9c8029da870a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3f181120795de77b3d9489f37e805082daa571e7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f181120795de77b3d9489f37e805082daa571e7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3f181120795de77b3d9489f37e805082daa571e7", "patch": "@@ -1325,12 +1325,94 @@ fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     check_packed(tcx, span, def_id);\n }\n \n+/// Checks that an opaque type does not contain cycles and does not use `Self` or `T::Foo`\n+/// projections that would result in \"inheriting lifetimes\".\n fn check_opaque<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     substs: SubstsRef<'tcx>,\n     span: Span,\n-    origin: &hir::OpaqueTyOrigin\n+    origin: &hir::OpaqueTyOrigin,\n+) {\n+    check_opaque_for_inheriting_lifetimes(tcx, def_id, span);\n+    check_opaque_for_cycles(tcx, def_id, substs, span, origin);\n+}\n+\n+/// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n+/// in \"inheriting lifetimes\".\n+fn check_opaque_for_inheriting_lifetimes(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    span: Span,\n+) {\n+    let item = tcx.hir().expect_item(\n+        tcx.hir().as_local_hir_id(def_id).expect(\"opaque type is not local\"));\n+    debug!(\"check_opaque_for_inheriting_lifetimes: def_id={:?} span={:?} item={:?}\",\n+           def_id, span, item);\n+\n+    #[derive(Debug)]\n+    struct ProhibitOpaqueVisitor<'tcx> {\n+        opaque_identity_ty: Ty<'tcx>,\n+        generics: &'tcx ty::Generics,\n+    };\n+\n+    impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+            debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n+            if t == self.opaque_identity_ty { false } else { t.super_visit_with(self) }\n+        }\n+\n+        fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+            debug!(\"check_opaque_for_inheriting_lifetimes: (visit_region) r={:?}\", r);\n+            if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n+                return *index < self.generics.parent_count as u32;\n+            }\n+\n+            r.super_visit_with(self)\n+        }\n+    }\n+\n+    let prohibit_opaque = match item.node {\n+        ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::AsyncFn, .. }) |\n+        ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn, .. }) => {\n+            let mut visitor = ProhibitOpaqueVisitor {\n+                opaque_identity_ty: tcx.mk_opaque(\n+                    def_id, InternalSubsts::identity_for_item(tcx, def_id)),\n+                generics: tcx.generics_of(def_id),\n+            };\n+            debug!(\"check_opaque_for_inheriting_lifetimes: visitor={:?}\", visitor);\n+\n+            tcx.predicates_of(def_id).predicates.iter().any(\n+                |(predicate, _)| predicate.visit_with(&mut visitor))\n+        },\n+        _ => false,\n+    };\n+\n+    debug!(\"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}\", prohibit_opaque);\n+    if prohibit_opaque {\n+        let is_async = match item.node {\n+            ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n+                hir::OpaqueTyOrigin::AsyncFn => true,\n+                _ => false,\n+            },\n+            _ => unreachable!(),\n+        };\n+\n+        tcx.sess.span_err(span, &format!(\n+            \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n+             a parent scope\",\n+            if is_async { \"async fn\" } else { \"impl Trait\" },\n+        ));\n+    }\n+}\n+\n+/// Checks that an opaque type does not contain cycles.\n+fn check_opaque_for_cycles<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    substs: SubstsRef<'tcx>,\n+    span: Span,\n+    origin: &hir::OpaqueTyOrigin,\n ) {\n     if let Err(partially_expanded_type) = tcx.try_expand_impl_trait_type(def_id, substs) {\n         if let hir::OpaqueTyOrigin::AsyncFn = origin {"}, {"sha": "c5a66d5d4a312fe66d917c65a4958147b99458f3", "filename": "src/test/ui/async-await/issue-61949-self-return-type.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3f181120795de77b3d9489f37e805082daa571e7/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f181120795de77b3d9489f37e805082daa571e7/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs?ref=3f181120795de77b3d9489f37e805082daa571e7", "patch": "@@ -0,0 +1,28 @@\n+// ignore-tidy-linelength\n+// edition:2018\n+#![feature(async_await)]\n+\n+// This test checks that `Self` is prohibited as a return type. See #61949 for context.\n+\n+pub struct Foo<'a> {\n+    pub bar: &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    pub async fn new(_bar: &'a i32) -> Self {\n+    //~^ ERROR `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+        Foo {\n+            bar: &22\n+        }\n+    }\n+}\n+\n+async fn foo() {\n+    let x = {\n+        let bar = 22;\n+        Foo::new(&bar).await\n+    };\n+    drop(x);\n+}\n+\n+fn main() { }"}, {"sha": "a9ae544502d087c15c794039db0da4736811dd49", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f181120795de77b3d9489f37e805082daa571e7/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f181120795de77b3d9489f37e805082daa571e7/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=3f181120795de77b3d9489f37e805082daa571e7", "patch": "@@ -0,0 +1,8 @@\n+error: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+  --> $DIR/issue-61949-self-return-type.rs:12:40\n+   |\n+LL |     pub async fn new(_bar: &'a i32) -> Self {\n+   |                                        ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9ba7c91fc7201d6834e86bf139905ebd8aa479cd", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f181120795de77b3d9489f37e805082daa571e7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f181120795de77b3d9489f37e805082daa571e7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=3f181120795de77b3d9489f37e805082daa571e7", "patch": "@@ -1,4 +1,5 @@\n // compile-fail\n+// ignore-tidy-linelength\n // edition:2018\n \n #![feature(async_await)]\n@@ -44,7 +45,8 @@ mod lifetimes {\n \n     /// Missing bound constraining `Assoc`, `T::Assoc` can't be normalized further.\n     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-        //~^ ERROR: type mismatch\n+    //~^ ERROR: type mismatch\n+    //~^^ ERROR `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n         Foo(())\n     }\n }"}, {"sha": "b5c8e078f0f131092ae5a7084f02b3117fa8cccf", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f181120795de77b3d9489f37e805082daa571e7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f181120795de77b3d9489f37e805082daa571e7/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=3f181120795de77b3d9489f37e805082daa571e7", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-fail.rs:5:12\n+  --> $DIR/bound-normalization-fail.rs:6:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:29:32\n+  --> $DIR/bound-normalization-fail.rs:30:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -16,8 +16,14 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n               found type `<T as impl_trait::Trait>::Assoc`\n    = note: the return type of a function must have a statically known size\n \n+error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+  --> $DIR/bound-normalization-fail.rs:47:41\n+   |\n+LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:46:41\n+  --> $DIR/bound-normalization-fail.rs:47:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -26,6 +32,6 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n               found type `<T as lifetimes::Trait<'static>>::Assoc`\n    = note: the return type of a function must have a statically known size\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0271`."}]}