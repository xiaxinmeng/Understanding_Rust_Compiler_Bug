{"sha": "202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMmI1MWJjN2I2OTk5OTAwZTA2ZWMyY2ZiOGQ3MmZlOWFhNGFmMjk=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-21T14:33:18Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-21T15:15:41Z"}, "message": "a lot of clippy::style fixes", "tree": {"sha": "dfb59e08133b7a2ea961661298c51cd18833148e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb59e08133b7a2ea961661298c51cd18833148e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "html_url": "https://github.com/rust-lang/rust/commit/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7e55c1dd801c60092205ec8890179e10a47814", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7e55c1dd801c60092205ec8890179e10a47814", "html_url": "https://github.com/rust-lang/rust/commit/ae7e55c1dd801c60092205ec8890179e10a47814"}], "stats": {"total": 121, "additions": 52, "deletions": 69}, "files": [{"sha": "e9e8dfc2e983580378337b4551cbaaf53feb7a88", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -410,7 +410,7 @@ impl CrateId {\n \n impl CrateData {\n     fn add_dep(&mut self, name: CrateName, crate_id: CrateId) {\n-        self.dependencies.push(Dependency { name, crate_id })\n+        self.dependencies.push(Dependency { crate_id, name })\n     }\n }\n "}, {"sha": "75ded9aa1fd74926be74d8860e30b1edc494cc77", "filename": "crates/cfg/src/dnf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fcfg%2Fsrc%2Fdnf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fcfg%2Fsrc%2Fdnf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fdnf.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -255,9 +255,9 @@ impl Builder {\n fn make_dnf(expr: CfgExpr) -> CfgExpr {\n     match expr {\n         CfgExpr::Invalid | CfgExpr::Atom(_) | CfgExpr::Not(_) => expr,\n-        CfgExpr::Any(e) => CfgExpr::Any(e.into_iter().map(|expr| make_dnf(expr)).collect()),\n+        CfgExpr::Any(e) => CfgExpr::Any(e.into_iter().map(make_dnf).collect()),\n         CfgExpr::All(e) => {\n-            let e = e.into_iter().map(|expr| make_nnf(expr)).collect::<Vec<_>>();\n+            let e = e.into_iter().map(make_nnf).collect::<Vec<_>>();\n \n             CfgExpr::Any(distribute_conj(&e))\n         }\n@@ -300,8 +300,8 @@ fn distribute_conj(conj: &[CfgExpr]) -> Vec<CfgExpr> {\n fn make_nnf(expr: CfgExpr) -> CfgExpr {\n     match expr {\n         CfgExpr::Invalid | CfgExpr::Atom(_) => expr,\n-        CfgExpr::Any(expr) => CfgExpr::Any(expr.into_iter().map(|expr| make_nnf(expr)).collect()),\n-        CfgExpr::All(expr) => CfgExpr::All(expr.into_iter().map(|expr| make_nnf(expr)).collect()),\n+        CfgExpr::Any(expr) => CfgExpr::Any(expr.into_iter().map(make_nnf).collect()),\n+        CfgExpr::All(expr) => CfgExpr::All(expr.into_iter().map(make_nnf).collect()),\n         CfgExpr::Not(operand) => match *operand {\n             CfgExpr::Invalid | CfgExpr::Atom(_) => CfgExpr::Not(operand.clone()), // Original negated expr\n             CfgExpr::Not(expr) => {"}, {"sha": "75d2f2eedf27fbab820fe40dd844dc249ba2898b", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -304,7 +304,7 @@ impl BindingsBuilder {\n         link_nodes: &'a Vec<LinkNode<Rc<BindingKind>>>,\n         nodes: &mut Vec<&'a Rc<BindingKind>>,\n     ) {\n-        link_nodes.into_iter().for_each(|it| match it {\n+        link_nodes.iter().for_each(|it| match it {\n             LinkNode::Node(it) => nodes.push(it),\n             LinkNode::Parent { idx, len } => self.collect_nodes_ref(*idx, *len, nodes),\n         });\n@@ -713,10 +713,9 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                     .map(|ident| Some(tt::Leaf::from(ident.clone()).into()))\n                     .map_err(|()| err!(\"expected ident\")),\n                 \"tt\" => input.expect_tt().map(Some).map_err(|()| err!()),\n-                \"lifetime\" => input\n-                    .expect_lifetime()\n-                    .map(|tt| Some(tt))\n-                    .map_err(|()| err!(\"expected lifetime\")),\n+                \"lifetime\" => {\n+                    input.expect_lifetime().map(Some).map_err(|()| err!(\"expected lifetime\"))\n+                }\n                 \"literal\" => {\n                     let neg = input.eat_char('-');\n                     input"}, {"sha": "e74f8cf3f4e8cc8cc1723ad3f28b08bedaac78bb", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -356,6 +356,6 @@ impl<T> ExpandResult<T> {\n \n impl<T: Default> From<Result<T, ExpandError>> for ExpandResult<T> {\n     fn from(result: Result<T, ExpandError>) -> Self {\n-        result.map_or_else(|e| Self::only_err(e), |it| Self::ok(it))\n+        result.map_or_else(Self::only_err, Self::ok)\n     }\n }"}, {"sha": "61b2a49551f43e383b475a05b95d02ae1838dffe", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -57,7 +57,7 @@ impl<'a> Iterator for OpDelimitedIter<'a> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let len = self.inner.len() + if self.delimited.is_some() { 2 } else { 0 };\n-        let remain = len.checked_sub(self.idx).unwrap_or(0);\n+        let remain = len.saturating_sub(self.idx);\n         (remain, Some(remain))\n     }\n }"}, {"sha": "9d433b3b0bd20775c2776e4d572e912230947b95", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -362,7 +362,7 @@ trait TokenConvertor {\n             if let Some((kind, closed)) = delim {\n                 let mut subtree = tt::Subtree::default();\n                 let (id, idx) = self.id_alloc().open_delim(range);\n-                subtree.delimiter = Some(tt::Delimiter { kind, id });\n+                subtree.delimiter = Some(tt::Delimiter { id, kind });\n \n                 while self.peek().map(|it| it.kind() != closed).unwrap_or(false) {\n                     self.collect_leaf(&mut subtree.token_trees);"}, {"sha": "c63a0eaeaf2aaca1d9888955257594e5ca2080d0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -242,11 +242,8 @@ impl GlobalState {\n                                 }\n                                 BuildDataProgress::End(collector) => {\n                                     self.fetch_build_data_completed();\n-                                    let workspaces = (*self.workspaces)\n-                                        .clone()\n-                                        .into_iter()\n-                                        .map(|it| Ok(it))\n-                                        .collect();\n+                                    let workspaces =\n+                                        (*self.workspaces).clone().into_iter().map(Ok).collect();\n                                     self.switch_workspaces(workspaces, Some(collector));\n                                     (Some(Progress::End), None)\n                                 }"}, {"sha": "76fdbcdddb54fb93981ffded9398020acbd9de22", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -237,7 +237,7 @@ impl GlobalState {\n             None => None,\n         };\n \n-        if &*self.workspaces == &workspaces && self.workspace_build_data == workspace_build_data {\n+        if *self.workspaces == workspaces && self.workspace_build_data == workspace_build_data {\n             return;\n         }\n "}, {"sha": "95bf26f01650425beadbd16f7a8844679c9cfb72", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -54,7 +54,7 @@ impl<'a> Project<'a> {\n     }\n \n     pub(crate) fn server(self) -> Server {\n-        let tmp_dir = self.tmp_dir.unwrap_or_else(|| TestDir::new());\n+        let tmp_dir = self.tmp_dir.unwrap_or_else(TestDir::new);\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n             env_logger::builder().is_test(true).parse_env(\"RA_LOG\").try_init().unwrap();"}, {"sha": "347862b8a4ccafeb3b92c6f05d9747f861d38e55", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -595,7 +595,7 @@ impl IndentLevel {\n     pub fn from_node(node: &SyntaxNode) -> IndentLevel {\n         match node.first_token() {\n             Some(it) => Self::from_token(&it),\n-            None => return IndentLevel(0),\n+            None => IndentLevel(0),\n         }\n     }\n "}, {"sha": "6317d84ba3bb655c47aebdbcb4d579c0033a0e84", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -11,16 +11,16 @@ impl ast::AttrsOwner for ast::Expr {}\n \n impl ast::Expr {\n     pub fn is_block_like(&self) -> bool {\n-        match self {\n+        matches!(\n+            self,\n             ast::Expr::IfExpr(_)\n-            | ast::Expr::LoopExpr(_)\n-            | ast::Expr::ForExpr(_)\n-            | ast::Expr::WhileExpr(_)\n-            | ast::Expr::BlockExpr(_)\n-            | ast::Expr::MatchExpr(_)\n-            | ast::Expr::EffectExpr(_) => true,\n-            _ => false,\n-        }\n+                | ast::Expr::LoopExpr(_)\n+                | ast::Expr::ForExpr(_)\n+                | ast::Expr::WhileExpr(_)\n+                | ast::Expr::BlockExpr(_)\n+                | ast::Expr::MatchExpr(_)\n+                | ast::Expr::EffectExpr(_)\n+        )\n     }\n \n     pub fn name_ref(&self) -> Option<ast::NameRef> {\n@@ -151,20 +151,20 @@ pub enum BinOp {\n \n impl BinOp {\n     pub fn is_assignment(self) -> bool {\n-        match self {\n+        matches!(\n+            self,\n             BinOp::Assignment\n-            | BinOp::AddAssign\n-            | BinOp::DivAssign\n-            | BinOp::MulAssign\n-            | BinOp::RemAssign\n-            | BinOp::ShrAssign\n-            | BinOp::ShlAssign\n-            | BinOp::SubAssign\n-            | BinOp::BitOrAssign\n-            | BinOp::BitAndAssign\n-            | BinOp::BitXorAssign => true,\n-            _ => false,\n-        }\n+                | BinOp::AddAssign\n+                | BinOp::DivAssign\n+                | BinOp::MulAssign\n+                | BinOp::RemAssign\n+                | BinOp::ShrAssign\n+                | BinOp::ShlAssign\n+                | BinOp::SubAssign\n+                | BinOp::BitOrAssign\n+                | BinOp::BitAndAssign\n+                | BinOp::BitXorAssign\n+        )\n     }\n }\n "}, {"sha": "bdf907a21a38ed767c902a3aa05cd07d2a2fb2a7", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -58,10 +58,7 @@ impl From<ast::MacroDef> for Macro {\n \n impl AstNode for Macro {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SyntaxKind::MACRO_RULES | SyntaxKind::MACRO_DEF => true,\n-            _ => false,\n-        }\n+        matches!(kind, SyntaxKind::MACRO_RULES | SyntaxKind::MACRO_DEF)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n@@ -462,10 +459,8 @@ impl ast::FieldExpr {\n     pub fn field_access(&self) -> Option<FieldKind> {\n         if let Some(nr) = self.name_ref() {\n             Some(FieldKind::Name(nr))\n-        } else if let Some(tok) = self.index_token() {\n-            Some(FieldKind::Index(tok))\n         } else {\n-            None\n+            self.index_token().map(FieldKind::Index)\n         }\n     }\n }\n@@ -482,16 +477,10 @@ impl ast::SlicePat {\n         let prefix = args\n             .peeking_take_while(|p| match p {\n                 ast::Pat::RestPat(_) => false,\n-                ast::Pat::IdentPat(bp) => match bp.pat() {\n-                    Some(ast::Pat::RestPat(_)) => false,\n-                    _ => true,\n-                },\n+                ast::Pat::IdentPat(bp) => !matches!(bp.pat(), Some(ast::Pat::RestPat(_))),\n                 ast::Pat::RefPat(rp) => match rp.pat() {\n                     Some(ast::Pat::RestPat(_)) => false,\n-                    Some(ast::Pat::IdentPat(bp)) => match bp.pat() {\n-                        Some(ast::Pat::RestPat(_)) => false,\n-                        _ => true,\n-                    },\n+                    Some(ast::Pat::IdentPat(bp)) => !matches!(bp.pat(), Some(ast::Pat::RestPat(_))),\n                     _ => true,\n                 },\n                 _ => true,"}, {"sha": "090282d2800ca80e258fda4e39cee2149d7c75ca", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -494,9 +494,8 @@ pub trait HasFormatSpecifier: AstToken {\n                 }\n                 _ => {\n                     while let Some((_, Ok(next_char))) = chars.peek() {\n-                        match next_char {\n-                            '{' => break,\n-                            _ => {}\n+                        if next_char == &'{' {\n+                            break;\n                         }\n                         chars.next();\n                     }"}, {"sha": "aa84239d2f07b61f758afa1ec2823238e810e866", "filename": "crates/syntax/src/fuzz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ffuzz.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -43,7 +43,7 @@ impl CheckReparse {\n             TextRange::at(delete_start.try_into().unwrap(), delete_len.try_into().unwrap());\n         let edited_text =\n             format!(\"{}{}{}\", &text[..delete_start], &insert, &text[delete_start + delete_len..]);\n-        let edit = Indel { delete, insert };\n+        let edit = Indel { insert, delete };\n         Some(CheckReparse { text, edit, edited_text })\n     }\n "}, {"sha": "bbe802174a6bb4e74868ac2618d9d72b16761d4f", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -297,7 +297,7 @@ fn validate_path_keywords(segment: ast::PathSegment, errors: &mut Vec<SyntaxErro\n                 }\n             };\n         }\n-        return None;\n+        None\n     }\n \n     fn all_supers(path: &ast::Path) -> bool {\n@@ -314,7 +314,7 @@ fn validate_path_keywords(segment: ast::PathSegment, errors: &mut Vec<SyntaxErro\n             return all_supers(subpath);\n         }\n \n-        return true;\n+        true\n     }\n }\n "}, {"sha": "bed44d60058afeaee6213ff604deb73ead51434e", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -239,9 +239,8 @@ impl Subtree {\n \n         let mut res = String::new();\n         res.push_str(delim.0);\n-        let mut iter = self.token_trees.iter();\n         let mut last = None;\n-        while let Some(child) = iter.next() {\n+        for child in &self.token_trees {\n             let s = match child {\n                 TokenTree::Leaf(it) => {\n                     let s = match it {"}, {"sha": "ba4b2484897f0020627cb8869bd29538a447d2e3", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -707,7 +707,7 @@ fn extract_struct_trait(node: &mut AstNodeSrc, trait_name: &str, methods: &[&str\n     let mut to_remove = Vec::new();\n     for (i, field) in node.fields.iter().enumerate() {\n         let method_name = field.method_name().to_string();\n-        if methods.iter().any(|&it| it == &method_name) {\n+        if methods.iter().any(|&it| it == method_name) {\n             to_remove.push(i);\n         }\n     }"}, {"sha": "960927fc00362c0bdb147c2311fc942b55ed1faf", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -37,7 +37,7 @@ fn main() -> Result<()> {\n     match flags.subcommand {\n         flags::XtaskCmd::Help(_) => {\n             println!(\"{}\", flags::Xtask::HELP);\n-            return Ok(());\n+            Ok(())\n         }\n         flags::XtaskCmd::Install(cmd) => cmd.run(),\n         flags::XtaskCmd::FuzzTests(_) => run_fuzzer(),"}, {"sha": "50d9efccd2dc375102aeb7e54e727583d4761b57", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "patch": "@@ -193,7 +193,7 @@ https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/#redo-after-\n     }\n }\n \n-fn deny_clippy(path: &PathBuf, text: &String) {\n+fn deny_clippy(path: &Path, text: &str) {\n     let ignore = &[\n         // The documentation in string literals may contain anything for its own purposes\n         \"ide_completion/src/generated_lint_completions.rs\","}]}