{"sha": "4d4855c7620696fa4e0e1d8171385b69912e02a8", "node_id": "C_kwDOAAsO6NoAKDRkNDg1NWM3NjIwNjk2ZmE0ZTBlMWQ4MTcxMzg1YjY5OTEyZTAyYTg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-25T13:12:55Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-25T13:12:55Z"}, "message": "Add a command line flag to avoid printing to stdout and stderr", "tree": {"sha": "465ec844811a612ac04aa0eb94e1bf2cda417daa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465ec844811a612ac04aa0eb94e1bf2cda417daa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4855c7620696fa4e0e1d8171385b69912e02a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4855c7620696fa4e0e1d8171385b69912e02a8", "html_url": "https://github.com/rust-lang/rust/commit/4d4855c7620696fa4e0e1d8171385b69912e02a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4855c7620696fa4e0e1d8171385b69912e02a8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ac7ca4c197ccbeb8cf666e298afe76f736dd97e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac7ca4c197ccbeb8cf666e298afe76f736dd97e", "html_url": "https://github.com/rust-lang/rust/commit/3ac7ca4c197ccbeb8cf666e298afe76f736dd97e"}], "stats": {"total": 76, "additions": 68, "deletions": 8}, "files": [{"sha": "b55b6f8d5589d9b2d4ad77cad4bc8c5d324e64b1", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d4855c7620696fa4e0e1d8171385b69912e02a8/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4855c7620696fa4e0e1d8171385b69912e02a8/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=4d4855c7620696fa4e0e1d8171385b69912e02a8", "patch": "@@ -374,6 +374,9 @@ fn main() {\n                     miri_config.tag_raw = true;\n                     miri_config.check_number_validity = true;\n                 }\n+                \"-Zmiri-drop-stdout-stderr\" => {\n+                    miri_config.drop_stdout_stderr = true;\n+                }\n                 \"-Zmiri-track-raw-pointers\" => {\n                     eprintln!(\n                         \"WARNING: -Zmiri-track-raw-pointers has been renamed to -Zmiri-tag-raw-pointers, the old name is deprecated.\""}, {"sha": "f1cbb00942bb547414812e1ffc47be95a720b0bb", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4855c7620696fa4e0e1d8171385b69912e02a8/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4855c7620696fa4e0e1d8171385b69912e02a8/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=4d4855c7620696fa4e0e1d8171385b69912e02a8", "patch": "@@ -116,6 +116,9 @@ pub struct MiriConfig {\n     /// Whether to enforce \"strict provenance\" rules. Enabling this means int2ptr casts return\n     /// pointers with an invalid provenance, i.e., not valid for any memory access.\n     pub strict_provenance: bool,\n+    /// Whether to ignore any output by the program. This is helpful when debugging miri\n+    /// as its messages don't get intermingled with the program messages.\n+    pub drop_stdout_stderr: bool,\n }\n \n impl Default for MiriConfig {\n@@ -142,6 +145,7 @@ impl Default for MiriConfig {\n             panic_on_unsupported: false,\n             backtrace_style: BacktraceStyle::Short,\n             strict_provenance: false,\n+            drop_stdout_stderr: false,\n         }\n     }\n }"}, {"sha": "1fdc398dd9f03421a02718d41b4c670c6e44709b", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4855c7620696fa4e0e1d8171385b69912e02a8/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4855c7620696fa4e0e1d8171385b69912e02a8/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=4d4855c7620696fa4e0e1d8171385b69912e02a8", "patch": "@@ -28,7 +28,7 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n \n-use crate::*;\n+use crate::{*, shims::posix::FileHandler};\n \n // Some global facts about the emulated machine.\n pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture\n@@ -327,7 +327,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             validate: config.validate,\n             enforce_number_validity: config.check_number_validity,\n             enforce_abi: config.check_abi,\n-            file_handler: Default::default(),\n+            file_handler: FileHandler::new(config.drop_stdout_stderr),\n             dir_handler: Default::default(),\n             time_anchor: Instant::now(),\n             layouts,"}, {"sha": "78d0e958e2a025b875314c001bf4e47016b9f194", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4d4855c7620696fa4e0e1d8171385b69912e02a8/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4855c7620696fa4e0e1d8171385b69912e02a8/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=4d4855c7620696fa4e0e1d8171385b69912e02a8", "patch": "@@ -251,22 +251,70 @@ impl FileDescriptor for io::Stderr {\n     }\n }\n \n+#[derive(Debug)]\n+struct DevNull;\n+\n+impl FileDescriptor for DevNull {\n+    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n+        throw_unsup_format!(\"/dev/null cannot be used as FileHandle\");\n+    }\n+\n+    fn read<'tcx>(\n+        &mut self,\n+        _communicate_allowed: bool,\n+        _bytes: &mut [u8],\n+    ) -> InterpResult<'tcx, io::Result<usize>> {\n+        throw_unsup_format!(\"cannot read from /dev/null\");\n+    }\n+\n+    fn write<'tcx>(\n+        &self,\n+        _communicate_allowed: bool,\n+        bytes: &[u8],\n+    ) -> InterpResult<'tcx, io::Result<usize>> {\n+        // We just don't write anything\n+        Ok(Ok(bytes.len()))\n+    }\n+\n+    fn seek<'tcx>(\n+        &mut self,\n+        _communicate_allowed: bool,\n+        _offset: SeekFrom,\n+    ) -> InterpResult<'tcx, io::Result<u64>> {\n+        throw_unsup_format!(\"cannot seek on /dev/null\");\n+    }\n+\n+    fn close<'tcx>(\n+        self: Box<Self>,\n+        _communicate_allowed: bool,\n+    ) -> InterpResult<'tcx, io::Result<i32>> {\n+        throw_unsup_format!(\"/dev/null cannot be closed\");\n+    }\n+\n+    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+        Ok(Box::new(DevNull))\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct FileHandler {\n     handles: BTreeMap<i32, Box<dyn FileDescriptor>>,\n }\n \n-impl<'tcx> Default for FileHandler {\n-    fn default() -> Self {\n+impl<'tcx> FileHandler {\n+    pub(crate) fn new(drop_stdout_stderr: bool) -> FileHandler {\n         let mut handles: BTreeMap<_, Box<dyn FileDescriptor>> = BTreeMap::new();\n-        handles.insert(0i32, Box::new(io::stdin()));\n-        handles.insert(1i32, Box::new(io::stdout()));\n+        if drop_stdout_stderr {\n+            handles.insert(0i32, Box::new(DevNull));\n+            handles.insert(1i32, Box::new(DevNull));\n+        } else {\n+            handles.insert(0i32, Box::new(io::stdin()));\n+            handles.insert(1i32, Box::new(io::stdout()));\n+        }\n         handles.insert(2i32, Box::new(io::stderr()));\n         FileHandler { handles }\n     }\n-}\n \n-impl<'tcx> FileHandler {\n     fn insert_fd(&mut self, file_handle: Box<dyn FileDescriptor>) -> i32 {\n         self.insert_fd_with_min_fd(file_handle, 0)\n     }"}, {"sha": "04a4ef9df174de153ed18cf2f9a3f727e26bb72d", "filename": "tests/run-pass/hide_stdout.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d4855c7620696fa4e0e1d8171385b69912e02a8/tests%2Frun-pass%2Fhide_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4855c7620696fa4e0e1d8171385b69912e02a8/tests%2Frun-pass%2Fhide_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhide_stdout.rs?ref=4d4855c7620696fa4e0e1d8171385b69912e02a8", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags: -Zmiri-drop-stdout-stderr\n+\n+fn main() {\n+    println!(\"cake\");\n+}"}]}