{"sha": "59688e119e1b9c2506fa9173728ae88eb196bf5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Njg4ZTExOWUxYjljMjUwNmZhOTE3MzcyOGFlODhlYjE5NmJmNWU=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-02-01T07:23:04Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-03-14T04:44:51Z"}, "message": "Make coerce_never lint an error\n\nRemove the coerce_never lint and make the behaviour an error.", "tree": {"sha": "e3b984e58b78f96471afb42af9e70f4aad3b5865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3b984e58b78f96471afb42af9e70f4aad3b5865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59688e119e1b9c2506fa9173728ae88eb196bf5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59688e119e1b9c2506fa9173728ae88eb196bf5e", "html_url": "https://github.com/rust-lang/rust/commit/59688e119e1b9c2506fa9173728ae88eb196bf5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59688e119e1b9c2506fa9173728ae88eb196bf5e/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32ddb30715f73498477262c992d1152cf10ca631", "url": "https://api.github.com/repos/rust-lang/rust/commits/32ddb30715f73498477262c992d1152cf10ca631", "html_url": "https://github.com/rust-lang/rust/commit/32ddb30715f73498477262c992d1152cf10ca631"}], "stats": {"total": 123, "additions": 21, "deletions": 102}, "files": [{"sha": "b4ed9c269bd88334535b2b443c68b6206932f8cb", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -230,12 +230,6 @@ declare_lint! {\n     \"detect mut variables which don't need to be mutable\"\n }\n \n-declare_lint! {\n-    pub COERCE_NEVER,\n-    Deny,\n-    \"detect coercion to !\"\n-}\n-\n declare_lint! {\n     pub SINGLE_USE_LIFETIME,\n     Allow,\n@@ -310,7 +304,6 @@ impl LintPass for HardwiredLints {\n             DEPRECATED,\n             UNUSED_UNSAFE,\n             UNUSED_MUT,\n-            COERCE_NEVER,\n             SINGLE_USE_LIFETIME,\n             TYVAR_BEHIND_RAW_POINTER,\n             ELIDED_LIFETIME_IN_PATH,"}, {"sha": "010678ecfb5d6aa53305a9546a9efb91c0991cd6", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -270,11 +270,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #46205 <https://github.com/rust-lang/rust/issues/46205>\",\n             epoch: None,\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(COERCE_NEVER),\n-            reference: \"issue #46325 <https://github.com/rust-lang/rust/issues/46325>\",\n-            epoch: None,\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n             reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\","}, {"sha": "e4bad8349ea2b5e39b5f2b1eeaa9cee8e411548a", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -38,7 +38,7 @@\n //! expression, `e as U2` is not necessarily so (in fact it will only be valid if\n //! `U1` coerces to `U2`).\n \n-use super::{Diverges, FnCtxt};\n+use super::FnCtxt;\n \n use errors::DiagnosticBuilder;\n use hir::def_id::DefId;\n@@ -59,7 +59,6 @@ use util::common::ErrorReported;\n pub struct CastCheck<'tcx> {\n     expr: &'tcx hir::Expr,\n     expr_ty: Ty<'tcx>,\n-    expr_diverges: Diverges,\n     cast_ty: Ty<'tcx>,\n     cast_span: Span,\n     span: Span,\n@@ -183,15 +182,13 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n     pub fn new(fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                expr: &'tcx hir::Expr,\n                expr_ty: Ty<'tcx>,\n-               expr_diverges: Diverges,\n                cast_ty: Ty<'tcx>,\n                cast_span: Span,\n                span: Span)\n                -> Result<CastCheck<'tcx>, ErrorReported> {\n         let check = CastCheck {\n             expr,\n             expr_ty,\n-            expr_diverges,\n             cast_ty,\n             cast_span,\n             span,\n@@ -437,7 +434,6 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     let f = self.expr_ty.fn_sig(fcx.tcx);\n                     let res = fcx.try_coerce(self.expr,\n                                              self.expr_ty,\n-                                             self.expr_diverges,\n                                              fcx.tcx.mk_fn_ptr(f));\n                     if !res.is_ok() {\n                         return Err(CastError::NonScalar);\n@@ -620,7 +616,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n     }\n \n     fn try_coercion_cast(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        fcx.try_coerce(self.expr, self.expr_ty, self.expr_diverges, self.cast_ty).is_ok()\n+        fcx.try_coerce(self.expr, self.expr_ty, self.cast_ty).is_ok()\n     }\n }\n "}, {"sha": "144ca37f2c69166f5a14dd157bb7d40e0c578814", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -66,7 +66,6 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk};\n use rustc::infer::type_variable::TypeVariableOrigin;\n-use rustc::lint;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::{self, TypeAndMut, Ty, ClosureSubsts};\n@@ -752,27 +751,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn try_coerce(&self,\n                       expr: &hir::Expr,\n                       expr_ty: Ty<'tcx>,\n-                      expr_diverges: Diverges,\n                       target: Ty<'tcx>)\n                       -> RelateResult<'tcx, Ty<'tcx>> {\n         let source = self.resolve_type_vars_with_obligations(expr_ty);\n         debug!(\"coercion::try({:?}: {:?} -> {:?})\", expr, source, target);\n \n-        // Special-ish case: we can coerce any type `T` into the `!`\n-        // type, but only if the source expression diverges.\n-        if target.is_never() && expr_diverges.always() {\n-            debug!(\"permit coercion to `!` because expr diverges\");\n-            if self.can_eq(self.param_env, source, target).is_err() {\n-                self.tcx.lint_node(\n-                    lint::builtin::COERCE_NEVER,\n-                    expr.id,\n-                    expr.span,\n-                    &format!(\"cannot coerce `{}` to !\", source)\n-                );\n-                return Ok(target);\n-            }\n-        }\n-\n         let cause = self.cause(expr.span, ObligationCauseCode::ExprAssignable);\n         let coerce = Coerce::new(self, cause);\n         let ok = self.commit_if_ok(|_| coerce.coerce(source, target))?;\n@@ -1123,7 +1106,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n             if self.pushed == 0 {\n                 // Special-case the first expression we are coercing.\n                 // To be honest, I'm not entirely sure why we do this.\n-                fcx.try_coerce(expression, expression_ty, expression_diverges, self.expected_ty)\n+                fcx.try_coerce(expression, expression_ty, self.expected_ty)\n             } else {\n                 match self.expressions {\n                     Expressions::Dynamic(ref exprs) =>"}, {"sha": "634a7ee569917055345d8181840f9dc0585832e6", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx>>) {\n         let expected = self.resolve_type_vars_with_obligations(expected);\n \n-        let e = match self.try_coerce(expr, checked_ty, self.diverges.get(), expected) {\n+        let e = match self.try_coerce(expr, checked_ty, expected) {\n             Ok(ty) => return (ty, None),\n             Err(e) => e\n         };"}, {"sha": "80d95ea86e4b629bf7c05709e131796f5adce528", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -3944,15 +3944,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let t_cast = self.resolve_type_vars_if_possible(&t_cast);\n             let t_expr = self.check_expr_with_expectation(e, ExpectCastableToType(t_cast));\n             let t_cast = self.resolve_type_vars_if_possible(&t_cast);\n-            let diverges = self.diverges.get();\n \n             // Eagerly check for some obvious errors.\n             if t_expr.references_error() || t_cast.references_error() {\n                 tcx.types.err\n             } else {\n                 // Defer other checks until we're done type checking.\n                 let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n-                match cast::CastCheck::new(self, e, t_expr, diverges, t_cast, t.span, expr.span) {\n+                match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n                     Ok(cast_check) => {\n                         deferred_cast_checks.push(cast_check);\n                         t_cast"}, {"sha": "5efb4dadc64bdafdcf02482ad3949f5d3e521483", "filename": "src/test/compile-fail/coerce-to-bang-cast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -10,11 +10,9 @@\n \n fn foo(x: usize, y: !, z: usize) { }\n \n-#[deny(coerce_never)]\n fn cast_a() {\n     let y = {return; 22} as !;\n-    //~^ ERROR cannot coerce `i32` to !\n-    //~| hard error\n+    //~^ ERROR non-primitive cast\n }\n \n fn cast_b() {"}, {"sha": "15049232a4d3f4450a63795a444f5be2a674b583", "filename": "src/test/compile-fail/coerce-to-bang.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -8,17 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(coerce_never)]\n-\n fn foo(x: usize, y: !, z: usize) { }\n \n fn call_foo_a() {\n-    // FIXME(#40800) -- accepted because divergence happens **before**\n-    // the coercion to `!`, but within same expression. Not clear that\n-    // these are the rules we want.\n     foo(return, 22, 44);\n-    //~^ ERROR cannot coerce `{integer}` to !\n-    //~| hard error\n+    //~^ ERROR mismatched types\n }\n \n fn call_foo_b() {\n@@ -38,8 +32,7 @@ fn call_foo_d() {\n     let b = 22;\n     let c = 44;\n     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n-    //~^ ERROR cannot coerce `{integer}` to !\n-    //~| hard error\n+    //~^ ERROR mismatched types\n }\n \n fn call_foo_e() {\n@@ -79,8 +72,7 @@ fn tuple_a() {\n fn tuple_b() {\n     // Divergence happens before coercion: OK\n     let x: (usize, !, usize) = (return, 44, 66);\n-    //~^ ERROR cannot coerce `{integer}` to !\n-    //~| hard error\n+    //~^ ERROR mismatched types\n }\n \n fn tuple_c() {"}, {"sha": "9ef5159cb771c4a7d2b6cc32ea6e47d088ab81cd", "filename": "src/test/compile-fail/diverging-fn-tail-35849.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(coerce_never)]\n fn assert_sizeof() -> ! {\n     unsafe {\n         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n-            //~^ ERROR cannot coerce `[u8; 8]` to !\n-            //~| hard error\n+            //~^ ERROR mismatched types\n     }\n }\n "}, {"sha": "dfd99bcc9fb47978777a0c021b32b9915c099a97", "filename": "src/test/run-pass/diverging-fn-tail-35849.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32ddb30715f73498477262c992d1152cf10ca631/src%2Ftest%2Frun-pass%2Fdiverging-fn-tail-35849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32ddb30715f73498477262c992d1152cf10ca631/src%2Ftest%2Frun-pass%2Fdiverging-fn-tail-35849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fn-tail-35849.rs?ref=32ddb30715f73498477262c992d1152cf10ca631", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[allow(coerce_never)]\n-fn assert_sizeof() -> ! {\n-    unsafe {\n-        ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n-    }\n-}\n-\n-fn main() { }"}, {"sha": "4096865f4c6705fb4f0f06552de80f3b3961bde2", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -12,12 +12,9 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![deny(coerce_never)]\n \n fn foo() {\n-    let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-    //~^ ERROR cannot coerce\n-    //~| hard error\n+    let x: ! = ! { return; }; //~ ERROR unreachable\n     //~| ERROR cannot apply unary operator `!` to type `!`\n }\n "}, {"sha": "e39909eee7f39298ad23d0009cf892721fbd4d46", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59688e119e1b9c2506fa9173728ae88eb196bf5e/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=59688e119e1b9c2506fa9173728ae88eb196bf5e", "patch": "@@ -1,35 +1,21 @@\n+error[E0600]: cannot apply unary operator `!` to type `!`\n+  --> $DIR/expr_unary.rs:17:16\n+   |\n+17 |     let x: ! = ! { return; }; //~ ERROR unreachable\n+   |                ^^^^^^^^^^^^^\n+\n error: unreachable expression\n-  --> $DIR/expr_unary.rs:18:28\n+  --> $DIR/expr_unary.rs:17:16\n    |\n-LL |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-   |                            ^^\n+LL |     let x: ! = ! { return; }; //~ ERROR unreachable\n+   |                ^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/expr_unary.rs:14:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: cannot coerce `{integer}` to !\n-  --> $DIR/expr_unary.rs:18:28\n-   |\n-LL |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-   |                            ^^\n-   |\n-note: lint level defined here\n-  --> $DIR/expr_unary.rs:15:9\n-   |\n-LL | #![deny(coerce_never)]\n-   |         ^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #46325 <https://github.com/rust-lang/rust/issues/46325>\n-\n-error[E0600]: cannot apply unary operator `!` to type `!`\n-  --> $DIR/expr_unary.rs:18:16\n-   |\n-LL |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-   |                ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0600`."}]}