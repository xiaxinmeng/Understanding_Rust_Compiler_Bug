{"sha": "aeb5067967ef58e4a324b19dd0dba2f385d5959f", "node_id": "C_kwDOAAsO6NoAKGFlYjUwNjc5NjdlZjU4ZTRhMzI0YjE5ZGQwZGJhMmYzODVkNTk1OWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-11T10:47:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-11T10:47:48Z"}, "message": "Auto merge of #100315 - compiler-errors:norm-ct-in-proj, r=lcnr\n\nKeep going if normalized projection has unevaluated consts in `QueryNormalizer`\n\n#100312 was the wrong approach, I think this is the right one.\n\nWhen normalizing a type, if we see that it's a projection, we currently defer to `tcx.normalize_projection_ty`, which normalizes the projections away but doesn't touch the unevaluated constants. So now we just continue to fold the type if it has unevaluated constants so we make sure to evaluate those too, if we can.\n\nFixes #100217\nFixes #83972\nFixes #84669\nFixes #86710\nFixes #82268\nFixes #73298", "tree": {"sha": "3169c9fba086a5386eee71fe238953d770da70cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3169c9fba086a5386eee71fe238953d770da70cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeb5067967ef58e4a324b19dd0dba2f385d5959f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb5067967ef58e4a324b19dd0dba2f385d5959f", "html_url": "https://github.com/rust-lang/rust/commit/aeb5067967ef58e4a324b19dd0dba2f385d5959f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeb5067967ef58e4a324b19dd0dba2f385d5959f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187654481fd828e495919295369d33827f10e1c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/187654481fd828e495919295369d33827f10e1c4", "html_url": "https://github.com/rust-lang/rust/commit/187654481fd828e495919295369d33827f10e1c4"}, {"sha": "d2667e4b718e3ded742a095e79eec92beb9bbbd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2667e4b718e3ded742a095e79eec92beb9bbbd6", "html_url": "https://github.com/rust-lang/rust/commit/d2667e4b718e3ded742a095e79eec92beb9bbbd6"}], "stats": {"total": 302, "additions": 299, "deletions": 3}, "files": [{"sha": "61c556b726d6ce40a26317d9175d6e731bc378fa", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aeb5067967ef58e4a324b19dd0dba2f385d5959f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb5067967ef58e4a324b19dd0dba2f385d5959f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=aeb5067967ef58e4a324b19dd0dba2f385d5959f", "patch": "@@ -266,7 +266,15 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 debug!(\"QueryNormalizer: result = {:#?}\", result);\n                 debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n                 self.obligations.extend(obligations);\n-                Ok(result.normalized_ty)\n+\n+                let res = result.normalized_ty;\n+                // `tcx.normalize_projection_ty` may normalize to a type that still has\n+                // unevaluated consts, so keep normalizing here if that's the case.\n+                if res != ty && res.has_type_flags(ty::TypeFlags::HAS_CT_PROJECTION) {\n+                    Ok(res.try_super_fold_with(self)?)\n+                } else {\n+                    Ok(res)\n+                }\n             }\n \n             ty::Projection(data) => {\n@@ -305,18 +313,27 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 debug!(\"QueryNormalizer: result = {:#?}\", result);\n                 debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n                 self.obligations.extend(obligations);\n-                Ok(crate::traits::project::PlaceholderReplacer::replace_placeholders(\n+\n+                let res = crate::traits::project::PlaceholderReplacer::replace_placeholders(\n                     infcx,\n                     mapped_regions,\n                     mapped_types,\n                     mapped_consts,\n                     &self.universes,\n                     result.normalized_ty,\n-                ))\n+                );\n+                // `tcx.normalize_projection_ty` may normalize to a type that still has\n+                // unevaluated consts, so keep normalizing here if that's the case.\n+                if res != ty && res.has_type_flags(ty::TypeFlags::HAS_CT_PROJECTION) {\n+                    Ok(res.try_super_fold_with(self)?)\n+                } else {\n+                    Ok(res)\n+                }\n             }\n \n             _ => ty.try_super_fold_with(self),\n         })()?;\n+\n         self.cache.insert(ty, res);\n         Ok(res)\n     }"}, {"sha": "acdc348a385a310d7ed79bee44f13d0bcd63eb0f", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-100217.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-100217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-100217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-100217.rs?ref=aeb5067967ef58e4a324b19dd0dba2f385d5959f", "patch": "@@ -0,0 +1,42 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+trait TraitOne {\n+    const MY_NUM: usize;\n+    type MyErr: std::fmt::Debug;\n+\n+    fn do_one_stuff(arr: [u8; Self::MY_NUM]) -> Result<(), Self::MyErr>;\n+}\n+\n+trait TraitTwo {\n+    fn do_two_stuff();\n+}\n+\n+impl<O: TraitOne> TraitTwo for O\n+where\n+    [(); Self::MY_NUM]:,\n+{\n+    fn do_two_stuff() {\n+        O::do_one_stuff([5; Self::MY_NUM]).unwrap()\n+    }\n+}\n+\n+struct Blargotron;\n+\n+#[derive(Debug)]\n+struct ErrTy<const N: usize>([(); N]);\n+\n+impl TraitOne for Blargotron {\n+    const MY_NUM: usize = 3;\n+    type MyErr = ErrTy<{ Self::MY_NUM }>;\n+\n+    fn do_one_stuff(_arr: [u8; Self::MY_NUM]) -> Result<(), Self::MyErr> {\n+        Ok(())\n+    }\n+}\n+\n+fn main() {\n+    Blargotron::do_two_stuff();\n+}"}, {"sha": "3c59e1b790a12498457cc68f28d1e48d75b52dbd", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-73298.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-73298.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-73298.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-73298.rs?ref=aeb5067967ef58e4a324b19dd0dba2f385d5959f", "patch": "@@ -0,0 +1,23 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+use std::convert::AsMut;\n+use std::default::Default;\n+\n+trait Foo: Sized {\n+    type Baz: Default + AsMut<[u8]>;\n+    fn bar() {\n+        Self::Baz::default().as_mut();\n+    }\n+}\n+\n+impl Foo for () {\n+    type Baz = [u8; 1 * 1];\n+    //type Baz = [u8; 1];\n+}\n+\n+fn main() {\n+    <() as Foo>::bar();\n+}"}, {"sha": "d08fc5beb75f616fed697e31f2eb6e843e0a37f3", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-82268.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-82268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-82268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-82268.rs?ref=aeb5067967ef58e4a324b19dd0dba2f385d5959f", "patch": "@@ -0,0 +1,73 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+trait Collate<Op> {\n+    type Pass;\n+    type Fail;\n+\n+    fn collate(self) -> (Self::Pass, Self::Fail);\n+}\n+\n+impl<Op> Collate<Op> for () {\n+    type Pass = ();\n+    type Fail = ();\n+\n+    fn collate(self) -> ((), ()) {\n+        ((), ())\n+    }\n+}\n+\n+trait CollateStep<X, Prev> {\n+    type Pass;\n+    type Fail;\n+    fn collate_step(x: X, prev: Prev) -> (Self::Pass, Self::Fail);\n+}\n+\n+impl<X, P, F> CollateStep<X, (P, F)> for () {\n+    type Pass = (X, P);\n+    type Fail = F;\n+\n+    fn collate_step(x: X, (p, f): (P, F)) -> ((X, P), F) {\n+        ((x, p), f)\n+    }\n+}\n+\n+struct CollateOpImpl<const MASK: u32>;\n+trait CollateOpStep {\n+    type NextOp;\n+    type Apply;\n+}\n+\n+impl<const MASK: u32> CollateOpStep for CollateOpImpl<MASK>\n+where\n+    CollateOpImpl<{ MASK >> 1 }>: Sized,\n+{\n+    type NextOp = CollateOpImpl<{ MASK >> 1 }>;\n+    type Apply = ();\n+}\n+\n+impl<H, T, Op: CollateOpStep> Collate<Op> for (H, T)\n+where\n+    T: Collate<Op::NextOp>,\n+    Op::Apply: CollateStep<H, (T::Pass, T::Fail)>,\n+{\n+    type Pass = <Op::Apply as CollateStep<H, (T::Pass, T::Fail)>>::Pass;\n+    type Fail = <Op::Apply as CollateStep<H, (T::Pass, T::Fail)>>::Fail;\n+\n+    fn collate(self) -> (Self::Pass, Self::Fail) {\n+        <Op::Apply as CollateStep<H, (T::Pass, T::Fail)>>::collate_step(self.0, self.1.collate())\n+    }\n+}\n+\n+fn collate<X, const MASK: u32>(x: X) -> (X::Pass, X::Fail)\n+where\n+    X: Collate<CollateOpImpl<MASK>>,\n+{\n+    x.collate()\n+}\n+\n+fn main() {\n+    dbg!(collate::<_, 5>((\"Hello\", (42, ('!', ())))));\n+}"}, {"sha": "0063719b8528cb5325a6d1fcfabcf27839ffb6fd", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-83972.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83972.rs?ref=aeb5067967ef58e4a324b19dd0dba2f385d5959f", "patch": "@@ -0,0 +1,38 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+pub trait Foo {\n+    fn foo(&self);\n+}\n+\n+pub struct FooImpl<const N: usize>;\n+impl<const N: usize> Foo for FooImpl<N> {\n+    fn foo(&self) {}\n+}\n+\n+pub trait Bar: 'static {\n+    type Foo: Foo;\n+    fn get() -> &'static Self::Foo;\n+}\n+\n+struct BarImpl;\n+impl Bar for BarImpl {\n+    type Foo = FooImpl<\n+        {\n+            { 4 }\n+        },\n+    >;\n+    fn get() -> &'static Self::Foo {\n+        &FooImpl\n+    }\n+}\n+\n+pub fn boom<B: Bar>() {\n+    B::get().foo();\n+}\n+\n+fn main() {\n+    boom::<BarImpl>();\n+}"}, {"sha": "3933ff20a49c54362d6eb69a0eeaa7498c9f5d9b", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-84669.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-84669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-84669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-84669.rs?ref=aeb5067967ef58e4a324b19dd0dba2f385d5959f", "patch": "@@ -0,0 +1,30 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    type Output;\n+\n+    fn foo() -> Self::Output;\n+}\n+\n+impl Foo for [u8; 3] {\n+    type Output = [u8; 1 + 2];\n+\n+    fn foo() -> [u8; 3] {\n+        [1u8; 3]\n+    }\n+}\n+\n+fn bug<const N: usize>()\n+where\n+    [u8; N]: Foo,\n+    <[u8; N] as Foo>::Output: AsRef<[u8]>,\n+{\n+    <[u8; N]>::foo().as_ref();\n+}\n+\n+fn main() {\n+    bug::<3>();\n+}"}, {"sha": "bdd8a21b3b9918c3fc7600f8bb1f511264f866dd", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-86710.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-86710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb5067967ef58e4a324b19dd0dba2f385d5959f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-86710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-86710.rs?ref=aeb5067967ef58e4a324b19dd0dba2f385d5959f", "patch": "@@ -0,0 +1,73 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+use std::marker::PhantomData;\n+\n+fn main() {\n+    let x = FooImpl::<BarImpl<1>> { phantom: PhantomData };\n+    let _ = x.foo::<BarImpl<1>>();\n+}\n+\n+trait Foo<T>\n+where\n+    T: Bar,\n+{\n+    fn foo<U>(&self)\n+    where\n+        T: Operation<U>,\n+        <T as Operation<U>>::Output: Bar;\n+}\n+\n+struct FooImpl<T>\n+where\n+    T: Bar,\n+{\n+    phantom: PhantomData<T>,\n+}\n+\n+impl<T> Foo<T> for FooImpl<T>\n+where\n+    T: Bar,\n+{\n+    fn foo<U>(&self)\n+    where\n+        T: Operation<U>,\n+        <T as Operation<U>>::Output: Bar,\n+    {\n+        <<T as Operation<U>>::Output as Bar>::error_occurs_here();\n+    }\n+}\n+\n+trait Bar {\n+    fn error_occurs_here();\n+}\n+\n+struct BarImpl<const N: usize>;\n+\n+impl<const N: usize> Bar for BarImpl<N> {\n+    fn error_occurs_here() {}\n+}\n+\n+trait Operation<Rhs> {\n+    type Output;\n+}\n+\n+//// Part-A: This causes error.\n+impl<const M: usize, const N: usize> Operation<BarImpl<M>> for BarImpl<N>\n+where\n+    BarImpl<{ N + M }>: Sized,\n+{\n+    type Output = BarImpl<{ N + M }>;\n+}\n+\n+//// Part-B: This doesn't cause error.\n+// impl<const M: usize, const N: usize> Operation<BarImpl<M>> for BarImpl<N> {\n+//     type Output = BarImpl<M>;\n+// }\n+\n+//// Part-C: This also doesn't cause error.\n+// impl<const M: usize, const N: usize> Operation<BarImpl<M>> for BarImpl<N> {\n+//     type Output = BarImpl<{ M }>;\n+// }"}]}