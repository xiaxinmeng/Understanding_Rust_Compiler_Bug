{"sha": "2312ff1a850db449b79fd3c4b215395cd2598c25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMTJmZjFhODUwZGI0NDliNzlmZDNjNGIyMTUzOTVjZDI1OThjMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-07T10:42:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-07T10:42:56Z"}, "message": "Auto merge of #85891 - bjorn3:revert_merge_crate_disambiguator, r=Mark-Simulacrum\n\nRevert \"Merge CrateDisambiguator into StableCrateId\"\n\nThis reverts https://github.com/rust-lang/rust/pull/85804", "tree": {"sha": "3c87ffba019c8446b45a07942dd4b00cd69c188d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c87ffba019c8446b45a07942dd4b00cd69c188d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2312ff1a850db449b79fd3c4b215395cd2598c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2312ff1a850db449b79fd3c4b215395cd2598c25", "html_url": "https://github.com/rust-lang/rust/commit/2312ff1a850db449b79fd3c4b215395cd2598c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2312ff1a850db449b79fd3c4b215395cd2598c25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022720bfccd46400e69def42f4647fe4059ad951", "url": "https://api.github.com/repos/rust-lang/rust/commits/022720bfccd46400e69def42f4647fe4059ad951", "html_url": "https://github.com/rust-lang/rust/commit/022720bfccd46400e69def42f4647fe4059ad951"}, {"sha": "8176ab8bc18fdd7d3c2cf7f720c51166364c33a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8176ab8bc18fdd7d3c2cf7f720c51166364c33a3", "html_url": "https://github.com/rust-lang/rust/commit/8176ab8bc18fdd7d3c2cf7f720c51166364c33a3"}], "stats": {"total": 531, "additions": 307, "deletions": 224}, "files": [{"sha": "49f418d51a82d2d27ef44b833c60f2a314bb5362", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -14,6 +14,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_index::vec::IndexVec;\n+use rustc_span::crate_disambiguator::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n@@ -338,7 +339,7 @@ impl Definitions {\n     }\n \n     /// Adds a root definition (no parent) and a few other reserved definitions.\n-    pub fn new(stable_crate_id: StableCrateId) -> Definitions {\n+    pub fn new(crate_name: &str, crate_disambiguator: CrateDisambiguator) -> Definitions {\n         let key = DefKey {\n             parent: None,\n             disambiguated_data: DisambiguatedDefPathData {\n@@ -347,6 +348,7 @@ impl Definitions {\n             },\n         };\n \n+        let stable_crate_id = StableCrateId::new(crate_name, crate_disambiguator);\n         let parent_hash = DefPathHash::new(stable_crate_id, 0);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n "}, {"sha": "2aafc6afa236d8fd5d2b6c7e0361768d1aace5e5", "filename": "compiler/rustc_hir/src/tests.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftests.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,4 +1,6 @@\n use crate::definitions::{DefKey, DefPathData, DisambiguatedDefPathData};\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_span::crate_disambiguator::CrateDisambiguator;\n use rustc_span::def_id::{DefPathHash, StableCrateId};\n \n #[test]\n@@ -11,16 +13,17 @@ fn def_path_hash_depends_on_crate_id() {\n     // the crate by changing the crate disambiguator (e.g. via bumping the\n     // crate's version number).\n \n-    let id0 = StableCrateId::new(\"foo\", false, vec![\"1\".to_string()]);\n-    let id1 = StableCrateId::new(\"foo\", false, vec![\"2\".to_string()]);\n+    let d0 = CrateDisambiguator::from(Fingerprint::new(12, 34));\n+    let d1 = CrateDisambiguator::from(Fingerprint::new(56, 78));\n \n-    let h0 = mk_test_hash(id0);\n-    let h1 = mk_test_hash(id1);\n+    let h0 = mk_test_hash(\"foo\", d0);\n+    let h1 = mk_test_hash(\"foo\", d1);\n \n     assert_ne!(h0.stable_crate_id(), h1.stable_crate_id());\n     assert_ne!(h0.local_hash(), h1.local_hash());\n \n-    fn mk_test_hash(stable_crate_id: StableCrateId) -> DefPathHash {\n+    fn mk_test_hash(crate_name: &str, crate_disambiguator: CrateDisambiguator) -> DefPathHash {\n+        let stable_crate_id = StableCrateId::new(crate_name, crate_disambiguator);\n         let parent_hash = DefPathHash::new(stable_crate_id, 0);\n \n         let key = DefKey {"}, {"sha": "83e80b55daec1b3e2d9eac3bcdc9f7067550ac62", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -108,7 +108,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n use rustc_errors::ErrorReported;\n use rustc_fs_util::{link_or_copy, LinkOrCopy};\n-use rustc_session::{Session, StableCrateId};\n+use rustc_session::{CrateDisambiguator, Session};\n \n use std::fs as std_fs;\n use std::io;\n@@ -189,7 +189,7 @@ pub fn in_incr_comp_dir(incr_comp_session_dir: &Path, file_name: &str) -> PathBu\n pub fn prepare_session_directory(\n     sess: &Session,\n     crate_name: &str,\n-    stable_crate_id: StableCrateId,\n+    crate_disambiguator: CrateDisambiguator,\n ) -> Result<(), ErrorReported> {\n     if sess.opts.incremental.is_none() {\n         return Ok(());\n@@ -200,7 +200,7 @@ pub fn prepare_session_directory(\n     debug!(\"prepare_session_directory\");\n \n     // {incr-comp-dir}/{crate-name-and-disambiguator}\n-    let crate_dir = crate_path(sess, crate_name, stable_crate_id);\n+    let crate_dir = crate_path(sess, crate_name, crate_disambiguator);\n     debug!(\"crate-dir: {}\", crate_dir.display());\n     create_dir(sess, &crate_dir, \"crate\")?;\n \n@@ -648,12 +648,19 @@ fn string_to_timestamp(s: &str) -> Result<SystemTime, ()> {\n     Ok(UNIX_EPOCH + duration)\n }\n \n-fn crate_path(sess: &Session, crate_name: &str, stable_crate_id: StableCrateId) -> PathBuf {\n+fn crate_path(\n+    sess: &Session,\n+    crate_name: &str,\n+    crate_disambiguator: CrateDisambiguator,\n+) -> PathBuf {\n     let incr_dir = sess.opts.incremental.as_ref().unwrap().clone();\n \n-    let stable_crate_id = base_n::encode(stable_crate_id.to_u64() as u128, INT_ENCODE_BASE);\n+    // The full crate disambiguator is really long. 64 bits of it should be\n+    // sufficient.\n+    let crate_disambiguator = crate_disambiguator.to_fingerprint().to_smaller_hash();\n+    let crate_disambiguator = base_n::encode(crate_disambiguator as u128, INT_ENCODE_BASE);\n \n-    let crate_name = format!(\"{}-{}\", crate_name, stable_crate_id);\n+    let crate_name = format!(\"{}-{}\", crate_name, crate_disambiguator);\n     incr_dir.join(crate_name)\n }\n "}, {"sha": "aa7af609fb54f71c7513e2bd1f836b37b426ded5", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_errors::{ErrorReported, PResult};\n use rustc_expand::base::ExtCtxt;\n-use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n use rustc_metadata::creader::CStore;\n@@ -170,13 +170,9 @@ pub fn register_plugins<'a>(\n     let crate_types = util::collect_crate_types(sess, &krate.attrs);\n     sess.init_crate_types(crate_types);\n \n-    let stable_crate_id = StableCrateId::new(\n-        crate_name,\n-        sess.crate_types().contains(&CrateType::Executable),\n-        sess.opts.cg.metadata.clone(),\n-    );\n-    sess.stable_crate_id.set(stable_crate_id).expect(\"not yet initialized\");\n-    rustc_incremental::prepare_session_directory(sess, &crate_name, stable_crate_id)?;\n+    let disambiguator = util::compute_crate_disambiguator(sess);\n+    sess.crate_disambiguator.set(disambiguator).expect(\"not yet initialized\");\n+    rustc_incremental::prepare_session_directory(sess, &crate_name, disambiguator)?;\n \n     if sess.opts.incremental.is_some() {\n         sess.time(\"incr_comp_garbage_collect_session_directories\", || {"}, {"sha": "6485fbebd665fd028ccc35274b6fd65ef89d9648", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -2,9 +2,11 @@ use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode};\n use rustc_codegen_ssa::traits::CodegenBackend;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n #[cfg(parallel_compiler)]\n use rustc_data_structures::jobserver;\n+use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n@@ -16,6 +18,7 @@ use rustc_session::config::{self, CrateType};\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n+use rustc_session::CrateDisambiguator;\n use rustc_session::{early_error, filesearch, output, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -484,6 +487,39 @@ pub fn get_codegen_sysroot(\n     }\n }\n \n+pub(crate) fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguator {\n+    use std::hash::Hasher;\n+\n+    // The crate_disambiguator is a 128 bit hash. The disambiguator is fed\n+    // into various other hashes quite a bit (symbol hashes, incr. comp. hashes,\n+    // debuginfo type IDs, etc), so we don't want it to be too wide. 128 bits\n+    // should still be safe enough to avoid collisions in practice.\n+    let mut hasher = StableHasher::new();\n+\n+    let mut metadata = session.opts.cg.metadata.clone();\n+    // We don't want the crate_disambiguator to dependent on the order\n+    // -C metadata arguments, so sort them:\n+    metadata.sort();\n+    // Every distinct -C metadata value is only incorporated once:\n+    metadata.dedup();\n+\n+    hasher.write(b\"metadata\");\n+    for s in &metadata {\n+        // Also incorporate the length of a metadata string, so that we generate\n+        // different values for `-Cmetadata=ab -Cmetadata=c` and\n+        // `-Cmetadata=a -Cmetadata=bc`\n+        hasher.write_usize(s.len());\n+        hasher.write(s.as_bytes());\n+    }\n+\n+    // Also incorporate crate type, so that we don't get symbol conflicts when\n+    // linking against a library of the same name, if this is an executable.\n+    let is_exe = session.crate_types().contains(&CrateType::Executable);\n+    hasher.write(if is_exe { b\"exe\" } else { b\"lib\" });\n+\n+    CrateDisambiguator::from(hasher.finish::<Fingerprint>())\n+}\n+\n pub(crate) fn check_attr_crate_type(\n     sess: &Session,\n     attrs: &[ast::Attribute],"}, {"sha": "e9ae22f8cedbc47926fd0ed4aa39e9ae0469fa10", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -21,7 +21,7 @@ use rustc_session::config::{self, CrateType, ExternLocation};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, ExternDepSpec};\n use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;\n-use rustc_session::Session;\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -222,8 +222,10 @@ impl<'a> CrateLoader<'a> {\n         metadata_loader: &'a MetadataLoaderDyn,\n         local_crate_name: &str,\n     ) -> Self {\n+        let local_crate_stable_id =\n+            StableCrateId::new(local_crate_name, sess.local_crate_disambiguator());\n         let mut stable_crate_ids = FxHashMap::default();\n-        stable_crate_ids.insert(sess.local_stable_crate_id(), LOCAL_CRATE);\n+        stable_crate_ids.insert(local_crate_stable_id, LOCAL_CRATE);\n \n         CrateLoader {\n             sess,\n@@ -325,14 +327,17 @@ impl<'a> CrateLoader<'a> {\n \n     fn verify_no_symbol_conflicts(&self, root: &CrateRoot<'_>) -> Result<(), CrateError> {\n         // Check for (potential) conflicts with the local crate\n-        if self.sess.local_stable_crate_id() == root.stable_crate_id() {\n+        if self.local_crate_name == root.name()\n+            && self.sess.local_crate_disambiguator() == root.disambiguator()\n+        {\n             return Err(CrateError::SymbolConflictsCurrent(root.name()));\n         }\n \n         // Check for conflicts with any crate loaded so far\n         let mut res = Ok(());\n         self.cstore.iter_crate_data(|_, other| {\n-            if other.stable_crate_id() == root.stable_crate_id() && // same stable crate id\n+            if other.name() == root.name() && // same crate-name\n+               other.disambiguator() == root.disambiguator() && // same crate-disambiguator\n                other.hash() != root.hash()\n             {\n                 // but different SVH\n@@ -406,7 +411,7 @@ impl<'a> CrateLoader<'a> {\n                 None => (&source, &crate_root),\n             };\n             let dlsym_dylib = dlsym_source.dylib.as_ref().expect(\"no dylib for a proc-macro crate\");\n-            Some(self.dlsym_proc_macros(&dlsym_dylib.0, dlsym_root.stable_crate_id())?)\n+            Some(self.dlsym_proc_macros(&dlsym_dylib.0, dlsym_root.disambiguator())?)\n         } else {\n             None\n         };\n@@ -659,7 +664,7 @@ impl<'a> CrateLoader<'a> {\n     fn dlsym_proc_macros(\n         &self,\n         path: &Path,\n-        stable_crate_id: StableCrateId,\n+        disambiguator: CrateDisambiguator,\n     ) -> Result<&'static [ProcMacro], CrateError> {\n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(path);\n@@ -668,7 +673,7 @@ impl<'a> CrateLoader<'a> {\n             Err(s) => return Err(CrateError::DlOpen(s)),\n         };\n \n-        let sym = self.sess.generate_proc_macro_decls_symbol(stable_crate_id);\n+        let sym = self.sess.generate_proc_macro_decls_symbol(disambiguator);\n         let decls = unsafe {\n             let sym = match lib.symbol(&sym) {\n                 Ok(f) => f,"}, {"sha": "6e7360950908e9dbd164ff0c7f7ecfebb93f4b91", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -226,7 +226,7 @@ use rustc_session::config::{self, CrateType};\n use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::CanonicalizedPath;\n-use rustc_session::{Session, StableCrateId};\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};\n@@ -787,7 +787,7 @@ pub fn find_plugin_registrar(\n     metadata_loader: &dyn MetadataLoader,\n     span: Span,\n     name: Symbol,\n-) -> (PathBuf, StableCrateId) {\n+) -> (PathBuf, CrateDisambiguator) {\n     match find_plugin_registrar_impl(sess, metadata_loader, name) {\n         Ok(res) => res,\n         // `core` is always available if we got as far as loading plugins.\n@@ -799,7 +799,7 @@ fn find_plugin_registrar_impl<'a>(\n     sess: &'a Session,\n     metadata_loader: &dyn MetadataLoader,\n     name: Symbol,\n-) -> Result<(PathBuf, StableCrateId), CrateError> {\n+) -> Result<(PathBuf, CrateDisambiguator), CrateError> {\n     info!(\"find plugin registrar `{}`\", name);\n     let mut locator = CrateLocator::new(\n         sess,\n@@ -816,7 +816,7 @@ fn find_plugin_registrar_impl<'a>(\n \n     match locator.maybe_load_library_crate()? {\n         Some(library) => match library.source.dylib {\n-            Some(dylib) => Ok((dylib.0, library.metadata.get_root().stable_crate_id())),\n+            Some(dylib) => Ok((dylib.0, library.metadata.get_root().disambiguator())),\n             None => Err(CrateError::NonDylibPlugin(name)),\n         },\n         None => Err(locator.into_error()),"}, {"sha": "52cb1e1996e382f4cc342ae28a99087d6458d3f5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -620,6 +620,10 @@ impl CrateRoot<'_> {\n         self.name\n     }\n \n+    crate fn disambiguator(&self) -> CrateDisambiguator {\n+        self.disambiguator\n+    }\n+\n     crate fn hash(&self) -> Svh {\n         self.hash\n     }\n@@ -1923,8 +1927,8 @@ impl CrateMetadata {\n         self.root.name\n     }\n \n-    crate fn stable_crate_id(&self) -> StableCrateId {\n-        self.root.stable_crate_id\n+    crate fn disambiguator(&self) -> CrateDisambiguator {\n+        self.root.disambiguator\n     }\n \n     crate fn hash(&self) -> Svh {"}, {"sha": "7cec4ce1d91b2b34cab0127402a0be17402bbf94", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, Visibility};\n use rustc_session::utils::NativeLibKind;\n-use rustc_session::{Session, StableCrateId};\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Symbol;\n \n@@ -186,6 +186,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     native_libraries => { Lrc::new(cdata.get_native_libraries(tcx.sess)) }\n     foreign_modules => { cdata.get_foreign_modules(tcx) }\n+    crate_disambiguator => { cdata.root.disambiguator }\n     crate_hash => { cdata.root.hash }\n     crate_host_hash => { cdata.host_hash }\n     crate_name => { cdata.root.name }\n@@ -488,8 +489,8 @@ impl CrateStore for CStore {\n         self.get_crate_data(cnum).root.name\n     }\n \n-    fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId {\n-        self.get_crate_data(cnum).root.stable_crate_id\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator {\n+        self.get_crate_data(cnum).root.disambiguator\n     }\n \n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh {"}, {"sha": "76007398000415fa8c772be9e21e2d14b49e6579", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -671,6 +671,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             extra_filename: tcx.sess.opts.cg.extra_filename.clone(),\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: tcx.crate_hash(LOCAL_CRATE),\n+            disambiguator: tcx.sess.local_crate_disambiguator(),\n             stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: tcx.sess.edition(),"}, {"sha": "04fe5cf5890a00ad24d46855137195fc01f18efa", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -18,6 +18,7 @@ use rustc_middle::mir;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n+use rustc_session::CrateDisambiguator;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{Ident, Symbol};\n@@ -201,6 +202,7 @@ crate struct CrateRoot<'tcx> {\n     triple: TargetTriple,\n     extra_filename: String,\n     hash: Svh,\n+    disambiguator: CrateDisambiguator,\n     stable_crate_id: StableCrateId,\n     panic_strategy: PanicStrategy,\n     edition: Edition,"}, {"sha": "8476929eaeced2b1d230e5e6f6d964e2e7d2a088", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 17);\n+static_assert_size!(DepNode, 18);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "20bbf9097f4255c80287557d66197b27ff3d085e", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::*;\n use rustc_index::vec::Idx;\n-use rustc_span::def_id::StableCrateId;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident, Symbol};\n@@ -991,24 +990,25 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n     upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);\n     source_file_names.hash_stable(&mut hcx, &mut stable_hasher);\n     tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);\n-    tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);\n+    tcx.sess.local_crate_disambiguator().to_fingerprint().hash_stable(&mut hcx, &mut stable_hasher);\n     tcx.untracked_crate.non_exported_macro_attrs.hash_stable(&mut hcx, &mut stable_hasher);\n \n     let crate_hash: Fingerprint = stable_hasher.finish();\n     Svh::new(crate_hash.to_smaller_hash())\n }\n \n-fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(StableCrateId, Svh)> {\n+fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(Symbol, Fingerprint, Svh)> {\n     let mut upstream_crates: Vec<_> = cstore\n         .crates_untracked()\n         .iter()\n         .map(|&cnum| {\n-            let stable_crate_id = cstore.stable_crate_id_untracked(cnum);\n+            let name = cstore.crate_name_untracked(cnum);\n+            let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n             let hash = cstore.crate_hash_untracked(cnum);\n-            (stable_crate_id, hash)\n+            (name, disambiguator, hash)\n         })\n         .collect();\n-    upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);\n+    upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n     upstream_crates\n }\n "}, {"sha": "f09449ab864b7eadad16e6a1396dd2a6e796e611", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_macros::HashStable;\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::NativeLibKind;\n-use rustc_session::StableCrateId;\n+use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use rustc_target::spec::Target;\n@@ -206,7 +206,7 @@ pub trait CrateStore {\n \n     // \"queries\" used in resolve that aren't tracked for incremental compilation\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n-    fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId;\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n \n     // This is basically a 1-based range of ints, which is a little"}, {"sha": "288dd0394464581691c16201964eaa7b2f085d8e", "filename": "compiler/rustc_middle/src/middle/exported_symbols.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -48,8 +48,8 @@ impl<'tcx> ExportedSymbol<'tcx> {\n \n pub fn metadata_symbol_name(tcx: TyCtxt<'_>) -> String {\n     format!(\n-        \"rust_metadata_{}_{:08x}\",\n+        \"rust_metadata_{}_{}\",\n         tcx.crate_name(LOCAL_CRATE),\n-        tcx.sess.local_stable_crate_id().to_u64(),\n+        tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex()\n     )\n }"}, {"sha": "74650f50a1c8aa6385cc7d82fa6cba005be6ff23", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -490,18 +490,15 @@ impl CodegenUnitNameBuilder<'tcx> {\n             // local crate's ID. Otherwise there can be collisions between CGUs\n             // instantiating stuff for upstream crates.\n             let local_crate_id = if cnum != LOCAL_CRATE {\n-                let local_stable_crate_id = tcx.sess.local_stable_crate_id();\n-                format!(\n-                    \"-in-{}.{:08x}\",\n-                    tcx.crate_name(LOCAL_CRATE),\n-                    local_stable_crate_id.to_u64()\n-                )\n+                let local_crate_disambiguator = format!(\"{}\", tcx.crate_disambiguator(LOCAL_CRATE));\n+                format!(\"-in-{}.{}\", tcx.crate_name(LOCAL_CRATE), &local_crate_disambiguator[0..8])\n             } else {\n                 String::new()\n             };\n \n-            let stable_crate_id = tcx.sess.local_stable_crate_id();\n-            format!(\"{}.{:08x}{}\", tcx.crate_name(cnum), stable_crate_id.to_u64(), local_crate_id)\n+            let crate_disambiguator = tcx.crate_disambiguator(cnum).to_string();\n+            // Using a shortened disambiguator of about 40 bits\n+            format!(\"{}.{}{}\", tcx.crate_name(cnum), &crate_disambiguator[0..8], local_crate_id)\n         });\n \n         write!(cgu_name, \"{}\", crate_prefix).unwrap();"}, {"sha": "0860520ef9dfe8aa1dca8fab66ba9198489a9b95", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1237,6 +1237,10 @@ rustc_queries! {\n     query proc_macro_decls_static(_: ()) -> Option<LocalDefId> {\n         desc { \"looking up the derive registrar for a crate\" }\n     }\n+    query crate_disambiguator(_: CrateNum) -> CrateDisambiguator {\n+        eval_always\n+        desc { \"looking up the disambiguator a crate\" }\n+    }\n     // The macro which defines `rustc_metadata::provide_extern` depends on this query's name.\n     // Changing the name should cause a compiler error, but in case that changes, be aware.\n     query crate_hash(_: CrateNum) -> Svh {"}, {"sha": "047b95f116ec2cec8a79659a4713a4b68459708e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1275,24 +1275,24 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn def_path_debug_str(self, def_id: DefId) -> String {\n         // We are explicitly not going through queries here in order to get\n-        // crate name and stable crate id since this code is called from debug!()\n+        // crate name and disambiguator since this code is called from debug!()\n         // statements within the query system and we'd run into endless\n         // recursion otherwise.\n-        let (crate_name, stable_crate_id) = if def_id.is_local() {\n-            (self.crate_name, self.sess.local_stable_crate_id())\n+        let (crate_name, crate_disambiguator) = if def_id.is_local() {\n+            (self.crate_name, self.sess.local_crate_disambiguator())\n         } else {\n             (\n                 self.cstore.crate_name_untracked(def_id.krate),\n-                self.def_path_hash(def_id.krate.as_def_id()).stable_crate_id(),\n+                self.cstore.crate_disambiguator_untracked(def_id.krate),\n             )\n         };\n \n         format!(\n             \"{}[{}]{}\",\n             crate_name,\n-            // Don't print the whole stable crate id. That's just\n+            // Don't print the whole crate disambiguator. That's just\n             // annoying in debug output.\n-            &(format!(\"{:08x}\", stable_crate_id.to_u64()))[..4],\n+            &(crate_disambiguator.to_fingerprint().to_hex())[..4],\n             self.def_path(def_id).to_string_no_crate_verbose()\n         )\n     }"}, {"sha": "297110ee3ecff36950a33be1bd8babb3b86e57cc", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -47,6 +47,7 @@ use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_serialize::opaque;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use rustc_session::utils::NativeLibKind;\n+use rustc_session::CrateDisambiguator;\n use rustc_target::spec::PanicStrategy;\n \n use rustc_ast as ast;"}, {"sha": "ebb52d8863f37ecc727fc8147714dfdea626e0d9", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -18,7 +18,7 @@ use rustc_serialize::{\n     opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize},\n     Decodable, Decoder, Encodable, Encoder,\n };\n-use rustc_session::{Session, StableCrateId};\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::hygiene::{\n     ExpnDataDecodeMode, ExpnDataEncodeMode, ExpnId, HygieneDecodeContext, HygieneEncodeContext,\n     SyntaxContext, SyntaxContextData,\n@@ -52,7 +52,7 @@ pub struct OnDiskCache<'sess> {\n     // session.\n     current_diagnostics: Lock<FxHashMap<DepNodeIndex, Vec<Diagnostic>>>,\n \n-    prev_cnums: Vec<(u32, StableCrateId)>,\n+    prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n     cnum_map: OnceCell<IndexVec<CrateNum, Option<CrateNum>>>,\n \n     source_map: &'sess SourceMap,\n@@ -120,7 +120,7 @@ pub struct OnDiskCache<'sess> {\n #[derive(Encodable, Decodable)]\n struct Footer {\n     file_index_to_stable_id: FxHashMap<SourceFileIndex, StableSourceFileId>,\n-    prev_cnums: Vec<(u32, StableCrateId)>,\n+    prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n     query_result_index: EncodedQueryResultIndex,\n     diagnostics_index: EncodedQueryResultIndex,\n     // The location of all allocations.\n@@ -349,8 +349,9 @@ impl<'sess> OnDiskCache<'sess> {\n             let prev_cnums: Vec<_> = sorted_cnums\n                 .iter()\n                 .map(|&cnum| {\n-                    let stable_crate_id = tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n-                    (cnum.as_u32(), stable_crate_id)\n+                    let crate_name = tcx.crate_name(cnum).to_string();\n+                    let crate_disambiguator = tcx.crate_disambiguator(cnum);\n+                    (cnum.as_u32(), crate_name, crate_disambiguator)\n                 })\n                 .collect();\n \n@@ -574,23 +575,25 @@ impl<'sess> OnDiskCache<'sess> {\n     // maps to None.\n     fn compute_cnum_map(\n         tcx: TyCtxt<'_>,\n-        prev_cnums: &[(u32, StableCrateId)],\n+        prev_cnums: &[(u32, String, CrateDisambiguator)],\n     ) -> IndexVec<CrateNum, Option<CrateNum>> {\n         tcx.dep_graph.with_ignore(|| {\n             let current_cnums = tcx\n                 .all_crate_nums(())\n                 .iter()\n                 .map(|&cnum| {\n-                    let stable_crate_id = tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n-                    (stable_crate_id, cnum)\n+                    let crate_name = tcx.crate_name(cnum).to_string();\n+                    let crate_disambiguator = tcx.crate_disambiguator(cnum);\n+                    ((crate_name, crate_disambiguator), cnum)\n                 })\n                 .collect::<FxHashMap<_, _>>();\n \n             let map_size = prev_cnums.iter().map(|&(cnum, ..)| cnum).max().unwrap_or(0) + 1;\n             let mut map = IndexVec::from_elem_n(None, map_size as usize);\n \n-            for &(prev_cnum, stable_crate_id) in prev_cnums {\n-                map[CrateNum::from_u32(prev_cnum)] = current_cnums.get(&stable_crate_id).cloned();\n+            for &(prev_cnum, ref crate_name, crate_disambiguator) in prev_cnums {\n+                let key = (crate_name.clone(), crate_disambiguator);\n+                map[CrateNum::from_u32(prev_cnum)] = current_cnums.get(&key).cloned();\n             }\n \n             map[LOCAL_CRATE] = Some(LOCAL_CRATE);"}, {"sha": "fd9b897111a9885a9b031b0697d1aceef3e661e2", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1222,7 +1222,7 @@ impl<'a> Resolver<'a> {\n         let mut module_map = FxHashMap::default();\n         module_map.insert(root_local_def_id, graph_root);\n \n-        let definitions = Definitions::new(session.local_stable_crate_id());\n+        let definitions = Definitions::new(crate_name, session.local_crate_disambiguator());\n         let root = definitions.get_root_def();\n \n         let mut visibilities = FxHashMap::default();"}, {"sha": "54b6a1215858153f3924214e466085eff3817aae", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -142,7 +142,12 @@ impl<'tcx> DumpVisitor<'tcx> {\n         let data = CratePreludeData {\n             crate_id: GlobalCrateId {\n                 name: name.into(),\n-                disambiguator: (self.tcx.sess.local_stable_crate_id().to_u64(), 0),\n+                disambiguator: self\n+                    .tcx\n+                    .sess\n+                    .local_crate_disambiguator()\n+                    .to_fingerprint()\n+                    .as_value(),\n             },\n             crate_root: crate_root.unwrap_or_else(|| \"<no source>\".to_owned()),\n             external_crates: self.save_ctxt.get_external_crates(),"}, {"sha": "297383bfed1faf517f919eb4a5fde32485eda55a", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -127,10 +127,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 num: n.as_u32(),\n                 id: GlobalCrateId {\n                     name: self.tcx.crate_name(n).to_string(),\n-                    disambiguator: (\n-                        self.tcx.def_path_hash(n.as_def_id()).stable_crate_id().to_u64(),\n-                        0,\n-                    ),\n+                    disambiguator: self.tcx.crate_disambiguator(n).to_fingerprint().as_value(),\n                 },\n             });\n         }"}, {"sha": "86b8389a670e624e5b51d3b495ea91d87199ab74", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -22,7 +22,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_lint_defs::FutureBreakage;\n-pub use rustc_span::def_id::StableCrateId;\n+pub use rustc_span::crate_disambiguator::CrateDisambiguator;\n use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::{edition::Edition, RealFileName};\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n@@ -133,12 +133,12 @@ pub struct Session {\n     /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n     pub one_time_diagnostics: Lock<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n     crate_types: OnceCell<Vec<CrateType>>,\n-    /// The `stable_crate_id` is constructed out of the crate name and all the\n-    /// `-C metadata` arguments passed to the compiler. Its value forms a unique\n-    /// global identifier for the crate. It is used to allow multiple crates\n-    /// with the same name to coexist. See the\n+    /// The `crate_disambiguator` is constructed out of all the `-C metadata`\n+    /// arguments passed to the compiler. Its value together with the crate-name\n+    /// forms a unique global identifier for the crate. It is used to allow\n+    /// multiple crates with the same name to coexist. See the\n     /// `rustc_codegen_llvm::back::symbol_names` module for more information.\n-    pub stable_crate_id: OnceCell<StableCrateId>,\n+    pub crate_disambiguator: OnceCell<CrateDisambiguator>,\n \n     features: OnceCell<rustc_feature::Features>,\n \n@@ -335,8 +335,8 @@ impl Session {\n         self.parse_sess.span_diagnostic.emit_future_breakage_report(diags_and_breakage);\n     }\n \n-    pub fn local_stable_crate_id(&self) -> StableCrateId {\n-        self.stable_crate_id.get().copied().unwrap()\n+    pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {\n+        self.crate_disambiguator.get().copied().unwrap()\n     }\n \n     pub fn crate_types(&self) -> &[CrateType] {\n@@ -833,12 +833,12 @@ impl Session {\n \n     /// Returns the symbol name for the registrar function,\n     /// given the crate `Svh` and the function `DefIndex`.\n-    pub fn generate_plugin_registrar_symbol(&self, stable_crate_id: StableCrateId) -> String {\n-        format!(\"__rustc_plugin_registrar_{:08x}__\", stable_crate_id.to_u64())\n+    pub fn generate_plugin_registrar_symbol(&self, disambiguator: CrateDisambiguator) -> String {\n+        format!(\"__rustc_plugin_registrar_{}__\", disambiguator.to_fingerprint().to_hex())\n     }\n \n-    pub fn generate_proc_macro_decls_symbol(&self, stable_crate_id: StableCrateId) -> String {\n-        format!(\"__rustc_proc_macro_decls_{:08x}__\", stable_crate_id.to_u64())\n+    pub fn generate_proc_macro_decls_symbol(&self, disambiguator: CrateDisambiguator) -> String {\n+        format!(\"__rustc_proc_macro_decls_{}__\", disambiguator.to_fingerprint().to_hex())\n     }\n \n     pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n@@ -1397,7 +1397,7 @@ pub fn build_session(\n         working_dir,\n         one_time_diagnostics: Default::default(),\n         crate_types: OnceCell::new(),\n-        stable_crate_id: OnceCell::new(),\n+        crate_disambiguator: OnceCell::new(),\n         features: OnceCell::new(),\n         lint_store: OnceCell::new(),\n         recursion_limit: OnceCell::new(),"}, {"sha": "bd7d85167140dfe4e28a712edf85a4d17dfbf8dc", "filename": "compiler/rustc_span/src/crate_disambiguator.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -0,0 +1,35 @@\n+// This is here because `rustc_session` wants to refer to it,\n+// and so does `rustc_hir`, but `rustc_hir` shouldn't refer to `rustc_session`.\n+\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::{base_n, impl_stable_hash_via_hash};\n+\n+use std::fmt;\n+\n+/// Hash value constructed out of all the `-C metadata` arguments passed to the\n+/// compiler. Together with the crate-name forms a unique global identifier for\n+/// the crate.\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy, Encodable, Decodable)]\n+pub struct CrateDisambiguator(Fingerprint);\n+\n+impl CrateDisambiguator {\n+    pub fn to_fingerprint(self) -> Fingerprint {\n+        self.0\n+    }\n+}\n+\n+impl fmt::Display for CrateDisambiguator {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n+        let (a, b) = self.0.as_value();\n+        let as_u128 = a as u128 | ((b as u128) << 64);\n+        f.write_str(&base_n::encode(as_u128, base_n::CASE_INSENSITIVE))\n+    }\n+}\n+\n+impl From<Fingerprint> for CrateDisambiguator {\n+    fn from(fingerprint: Fingerprint) -> CrateDisambiguator {\n+        CrateDisambiguator(fingerprint)\n+    }\n+}\n+\n+impl_stable_hash_via_hash!(CrateDisambiguator);"}, {"sha": "228d09b30d9b54362d8236b771ca4920be2a6b2f", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,3 +1,4 @@\n+use crate::crate_disambiguator::CrateDisambiguator;\n use crate::HashStableContext;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -126,51 +127,26 @@ impl Borrow<Fingerprint> for DefPathHash {\n     }\n }\n \n-/// A [StableCrateId] is a 64 bit hash of the crate name combined with all\n-/// `-Cmetadata` arguments. It is to [CrateNum] what [DefPathHash] is to\n-/// [DefId]. It is stable across compilation sessions.\n+/// A [StableCrateId] is a 64 bit hash of `(crate-name, crate-disambiguator)`. It\n+/// is to [CrateNum] what [DefPathHash] is to [DefId]. It is stable across\n+/// compilation sessions.\n ///\n /// Since the ID is a hash value there is a (very small) chance that two crates\n /// end up with the same [StableCrateId]. The compiler will check for such\n /// collisions when loading crates and abort compilation in order to avoid\n /// further trouble.\n-#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug)]\n-#[derive(HashStable_Generic, Encodable, Decodable)]\n+#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug, Encodable, Decodable)]\n pub struct StableCrateId(u64);\n \n impl StableCrateId {\n-    pub fn to_u64(self) -> u64 {\n-        self.0\n-    }\n-\n     /// Computes the stable ID for a crate with the given name and\n-    /// `-Cmetadata` arguments.\n-    pub fn new(crate_name: &str, is_exe: bool, mut metadata: Vec<String>) -> StableCrateId {\n+    /// disambiguator.\n+    pub fn new(crate_name: &str, crate_disambiguator: CrateDisambiguator) -> StableCrateId {\n         use std::hash::Hash;\n-        use std::hash::Hasher;\n \n         let mut hasher = StableHasher::new();\n         crate_name.hash(&mut hasher);\n-\n-        // We don't want the stable crate id to dependent on the order\n-        // -C metadata arguments, so sort them:\n-        metadata.sort();\n-        // Every distinct -C metadata value is only incorporated once:\n-        metadata.dedup();\n-\n-        hasher.write(b\"metadata\");\n-        for s in &metadata {\n-            // Also incorporate the length of a metadata string, so that we generate\n-            // different values for `-Cmetadata=ab -Cmetadata=c` and\n-            // `-Cmetadata=a -Cmetadata=bc`\n-            hasher.write_usize(s.len());\n-            hasher.write(s.as_bytes());\n-        }\n-\n-        // Also incorporate crate type, so that we don't get symbol conflicts when\n-        // linking against a library of the same name, if this is an executable.\n-        hasher.write(if is_exe { b\"exe\" } else { b\"lib\" });\n-\n+        crate_disambiguator.hash(&mut hasher);\n         StableCrateId(hasher.finish())\n     }\n }"}, {"sha": "de132616b0d671e4aba660e0fd7d933f3c543ac2", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -45,6 +45,8 @@ pub mod lev_distance;\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n \n+pub mod crate_disambiguator;\n+\n pub mod symbol;\n pub use symbol::{sym, Symbol};\n "}, {"sha": "025eaffcbd3285ca8c012281d2f289efe5d33d1f", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -126,9 +126,8 @@ fn get_symbol_hash<'tcx>(\n         substs.hash_stable(&mut hcx, &mut hasher);\n \n         if let Some(instantiating_crate) = instantiating_crate {\n-            tcx.def_path_hash(instantiating_crate.as_def_id())\n-                .stable_crate_id()\n-                .hash_stable(&mut hcx, &mut hasher);\n+            tcx.crate_name(instantiating_crate).as_str().hash_stable(&mut hcx, &mut hasher);\n+            tcx.crate_disambiguator(instantiating_crate).hash_stable(&mut hcx, &mut hasher);\n         }\n \n         // We want to avoid accidental collision between different types of instances."}, {"sha": "f716ce1efce86f1d952df25a7ee5cfe5fd3d65ad", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -165,12 +165,12 @@ fn compute_symbol_name(\n     // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n     let is_foreign = if let Some(def_id) = def_id.as_local() {\n         if tcx.plugin_registrar_fn(()) == Some(def_id) {\n-            let stable_crate_id = tcx.sess.local_stable_crate_id();\n-            return tcx.sess.generate_plugin_registrar_symbol(stable_crate_id);\n+            let disambiguator = tcx.sess.local_crate_disambiguator();\n+            return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n         }\n         if tcx.proc_macro_decls_static(()) == Some(def_id) {\n-            let stable_crate_id = tcx.sess.local_stable_crate_id();\n-            return tcx.sess.generate_proc_macro_decls_symbol(stable_crate_id);\n+            let disambiguator = tcx.sess.local_crate_disambiguator();\n+            return tcx.sess.generate_proc_macro_decls_symbol(disambiguator);\n         }\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         matches!(tcx.hir().get(hir_id), Node::ForeignItem(_))"}, {"sha": "828f1ac0a7989a7cdbc0e3fbb4a62983b9273c2c", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -592,8 +592,8 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n         self.push(\"C\");\n-        let stable_crate_id = self.tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n-        self.push_disambiguator(stable_crate_id.to_u64());\n+        let fingerprint = self.tcx.crate_disambiguator(cnum).to_fingerprint();\n+        self.push_disambiguator(fingerprint.to_smaller_hash());\n         let name = self.tcx.crate_name(cnum).as_str();\n         self.push_ident(&name);\n         Ok(self)"}, {"sha": "ebc7b0d0d99cfc0eb5a8bc65e386997c2b7fdaba", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,11 +1,12 @@\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n     self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt, WithConstness,\n };\n+use rustc_session::CrateDisambiguator;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n@@ -387,6 +388,11 @@ fn param_env_reveal_all_normalized(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamE\n     tcx.param_env(def_id).with_reveal_all_normalized(tcx)\n }\n \n+fn crate_disambiguator(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateDisambiguator {\n+    assert_eq!(crate_num, LOCAL_CRATE);\n+    tcx.sess.local_crate_disambiguator()\n+}\n+\n fn instance_def_size_estimate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance_def: ty::InstanceDef<'tcx>,\n@@ -532,6 +538,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         param_env,\n         param_env_reveal_all_normalized,\n         trait_of_item,\n+        crate_disambiguator,\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,"}, {"sha": "2566d745ecd060d128de11ea32f6fa3335caf9e0", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -30,7 +30,7 @@\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[55e6]::BAR), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35"}, {"sha": "093e228a0ce44a57fc8d56f5441d2e16b8533edb", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -32,7 +32,7 @@\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[55e6]::FOO), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46"}, {"sha": "0517e7fac40e26eb6a7dd42991b30f8b3c222be6", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -31,7 +31,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[8240]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "0517e7fac40e26eb6a7dd42991b30f8b3c222be6", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -31,7 +31,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[8240]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "28c80b346e76048b60ddf5a83a2dc34047b065a4", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -22,7 +22,7 @@\n                                            // + val: Unevaluated(FOO, [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[2706]::main::FOO), const_param_did: None }, substs: [], promoted: None }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main::FOO), const_param_did: None }, substs: [], promoted: None }) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39"}, {"sha": "ae77443e019d5fff416415cb8e7868133565a514", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -17,7 +17,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[cb9b]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10"}, {"sha": "402a28f3f9f40d5241ea0ca7d9d6b69fb386ea0c", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -20,7 +20,7 @@\n +                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[cb9b]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "b97d7d1be1596f381dbaab32ada65822a81df045", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -17,7 +17,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[e8c3]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "48ede27112c9243df0935409ada9f6e99ce275d4", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -20,7 +20,7 @@\n +                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[e8c3]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "27791852d6dac9fee00a810914597fc43663c732", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -24,7 +24,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[6547]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "27791852d6dac9fee00a810914597fc43663c732", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -24,7 +24,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[6547]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "1aabee83be6842dbb651797a2c773b8cf98870a3", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -38,7 +38,7 @@ fn bar() -> bool {\n                                          // + val: Unevaluated(bar, [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[a78c]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) }) }\n         Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n@@ -52,7 +52,7 @@ fn bar() -> bool {\n                                          // + val: Unevaluated(bar, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[a78c]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14"}, {"sha": "95a8ef997fa49f405698ba7e439644fa2badb30f", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -66,7 +66,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[2d0f]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "95a8ef997fa49f405698ba7e439644fa2badb30f", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -66,7 +66,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[2d0f]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "261eb3b27eafd1982e3db0969577f20173cb0ee9", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -87,7 +87,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[2d0f]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "261eb3b27eafd1982e3db0969577f20173cb0ee9", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -87,7 +87,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[2d0f]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "a37df4da9ae40561396268af1f3c55597ab46f3a", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -50,7 +50,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[2]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:70:42: 70:44\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) }) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n@@ -74,7 +74,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:71:42: 71:45\n-                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) }) }\n+                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) }) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n@@ -98,7 +98,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:72:42: 72:47\n-                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) }) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48"}, {"sha": "5af242376c9304066de78725f9c5cfb9acd0d119", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -57,7 +57,7 @@ fn full_tested_match() -> () {\n                                          // + val: Unevaluated(full_tested_match, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[4011]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27"}, {"sha": "c6ef403c3c130297d3f4835d13512d09c880e5d4", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -127,7 +127,7 @@ fn array_casts() -> () {\n                                          // + val: Unevaluated(array_casts, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[13e7]::array_casts), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[317d]::array_casts), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_35);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _18 = &(*_35);                   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_18);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "4bab5a974881a6b4f05cd6f7490c26092bd19907", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -113,7 +113,7 @@ fn main() -> () {\n         StorageLive(_14);                // scope 1 at $DIR/retag.rs:40:31: 43:6\n         _14 = [closure@main::{closure#0}]; // scope 1 at $DIR/retag.rs:40:31: 43:6\n                                          // closure\n-                                         // + def_id: DefId(0:14 ~ retag[13e7]::main::{closure#0})\n+                                         // + def_id: DefId(0:14 ~ retag[317d]::main::{closure#0})\n                                          // + substs: [\n                                          //     i8,\n                                          //     for<'r> extern \"rust-call\" fn((&'r i32,)) -> &'r i32,\n@@ -153,7 +153,7 @@ fn main() -> () {\n                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[13e7]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n         Retag(_28);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _23 = &(*_28);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "62e2dc71210978a882020eb1c8d8f40543b64d90", "filename": "src/test/ui/consts/miri_unleashed/tls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -2,13 +2,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:12:25\n    |\n LL |     unsafe { let _val = A; }\n-   |                         ^ cannot access thread local static (DefId(0:6 ~ tls[f423]::A))\n+   |                         ^ cannot access thread local static (DefId(0:6 ~ tls[317d]::A))\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:19:26\n    |\n LL |     unsafe { let _val = &A; }\n-   |                          ^ cannot access thread local static (DefId(0:6 ~ tls[f423]::A))\n+   |                          ^ cannot access thread local static (DefId(0:6 ~ tls[317d]::A))\n \n warning: skipping const checks\n    |"}, {"sha": "78100318dc33ad1fdf640f0bd8b04e9d53448fda", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -12,7 +12,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:35:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[70c9]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[317d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -30,10 +30,10 @@ LL |     require_send(send_gen);\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[make_gen2<Arc<RefCell<i32>>>::{closure#0} upvar_tys=(Arc<RefCell<i32>>) {()}]`\n-   = note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[70c9]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n-   = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[70c9]::make_non_send_generator2::{opaque#0}), [])`\n-   = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[70c9]::make_non_send_generator2::{opaque#0}), []), ()}`\n-   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[70c9]::make_non_send_generator2::{opaque#0}), []), ()}]`\n+   = note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[317d]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+   = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), [])`\n+   = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}`\n+   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), []), ()}]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "713b79bae32e625a3cbdbffdedda6795557fc537", "filename": "src/test/ui/lto-duplicate-symbols.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Flto-duplicate-symbols.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Flto-duplicate-symbols.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto-duplicate-symbols.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,6 +1,6 @@\n warning: Linking globals named 'foo': symbol multiply defined!\n \n-error: failed to load bc of \"lto-duplicate-symbols2.lto_duplicate_symbols2.288b404e693a75b4-cgu.0.rcgu.o\": \n+error: failed to load bc of \"lto-duplicate-symbols2.lto_duplicate_symbols2.3a1fbbbh-cgu.0.rcgu.o\": \n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "723c4a7a1fbf0672233b6d440ce2b21d3418fe9c", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,26 +1,26 @@\n-error: lifetime parameter `'a` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:11:10\n+error: lifetime parameter `'b` only used once\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:11:22\n    |\n LL | fn a(x: &'a u32, y: &'b u32) {\n-   |          ^^-\n-   |          |\n-   |          this lifetime is only used here\n-   |          help: elide the single-use lifetime\n+   |                      ^^-\n+   |                      |\n+   |                      this lifetime is only used here\n+   |                      help: elide the single-use lifetime\n    |\n note: the lint level is defined here\n   --> $DIR/one-use-in-fn-argument-in-band.rs:4:9\n    |\n LL | #![deny(single_use_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: lifetime parameter `'b` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:11:22\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:11:10\n    |\n LL | fn a(x: &'a u32, y: &'b u32) {\n-   |                      ^^-\n-   |                      |\n-   |                      this lifetime is only used here\n-   |                      help: elide the single-use lifetime\n+   |          ^^-\n+   |          |\n+   |          this lifetime is only used here\n+   |          help: elide the single-use lifetime\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fa59d7a031397530d9114219be96e3c8097302f9", "filename": "src/test/ui/specialization/min_specialization/repeated_projection_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,4 +1,4 @@\n-error: cannot specialize on `Binder(ProjectionPredicate(ProjectionTy { substs: [V], item_def_id: DefId(0:6 ~ repeated_projection_type[b09c]::Id::This) }, (I,)), [])`\n+error: cannot specialize on `Binder(ProjectionPredicate(ProjectionTy { substs: [V], item_def_id: DefId(0:6 ~ repeated_projection_type[317d]::Id::This) }, (I,)), [])`\n   --> $DIR/repeated_projection_type.rs:19:1\n    |\n LL | / impl<I, V: Id<This = (I,)>> X for V {"}, {"sha": "3dd2b19fbf987f9cc290979b09f0988ac9c06fd5", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17hd75b915511563828E)\n+error: symbol-name(_ZN5basic4main17h6c535bbea2051f85E)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::hd75b915511563828)\n+error: demangling(basic::main::h6c535bbea2051f85)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "bd107c10207078d8b8b39559267a962648f066bd", "filename": "src/test/ui/symbol-names/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -9,8 +9,8 @@\n //[legacy]~^ ERROR symbol-name(_ZN5basic4main\n //[legacy]~| ERROR demangling(basic::main\n //[legacy]~| ERROR demangling-alt(basic::main)\n- //[v0]~^^^^ ERROR symbol-name(_RNvCsj6j3mjPNGKx_5basic4main)\n-    //[v0]~| ERROR demangling(basic[de7d5b6b69c71f37]::main)\n+ //[v0]~^^^^ ERROR symbol-name(_RNvCs21hi0yVfW1J_5basic4main)\n+    //[v0]~| ERROR demangling(basic[17891616a171812d]::main)\n     //[v0]~| ERROR demangling-alt(basic::main)\n #[rustc_def_path]\n //[legacy]~^ ERROR def-path(main)"}, {"sha": "519efc9d7b4b9725a9016ab8461b3465bc841f60", "filename": "src/test/ui/symbol-names/basic.v0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvCsj6j3mjPNGKx_5basic4main)\n+error: symbol-name(_RNvCs21hi0yVfW1J_5basic4main)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic[de7d5b6b69c71f37]::main)\n+error: demangling(basic[17891616a171812d]::main)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "bd7e1c0f336983d4aba2b65a50fb974be5889bf0", "filename": "src/test/ui/symbol-names/const-generics-demangling.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -5,32 +5,32 @@\n pub struct Unsigned<const F: u8>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMCsaP8qXevlYG3_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n-//~| ERROR demangling(<const_generics_demangling[7e153590edc26969]::Unsigned<11: u8>>)\n+//~^ ERROR symbol-name(_RMCs21hi0yVfW1J_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n+//~| ERROR demangling(<const_generics_demangling[17891616a171812d]::Unsigned<11: u8>>)\n //~| ERROR demangling-alt(<const_generics_demangling::Unsigned<11>>)\n impl Unsigned<11> {}\n \n pub struct Signed<const F: i16>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs_CsaP8qXevlYG3_25const_generics_demanglingINtB2_6SignedKsn98_E)\n-//~| ERROR demangling(<const_generics_demangling[7e153590edc26969]::Signed<-152: i16>>)\n+//~^ ERROR symbol-name(_RMs_Cs21hi0yVfW1J_25const_generics_demanglingINtB2_6SignedKsn98_E)\n+//~| ERROR demangling(<const_generics_demangling[17891616a171812d]::Signed<-152: i16>>)\n //~| ERROR demangling-alt(<const_generics_demangling::Signed<-152>>)\n impl Signed<-152> {}\n \n pub struct Bool<const F: bool>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs0_CsaP8qXevlYG3_25const_generics_demanglingINtB3_4BoolKb1_E)\n-//~| ERROR demangling(<const_generics_demangling[7e153590edc26969]::Bool<true: bool>>)\n+//~^ ERROR symbol-name(_RMs0_Cs21hi0yVfW1J_25const_generics_demanglingINtB3_4BoolKb1_E)\n+//~| ERROR demangling(<const_generics_demangling[17891616a171812d]::Bool<true: bool>>)\n //~| ERROR demangling-alt(<const_generics_demangling::Bool<true>>)\n impl Bool<true> {}\n \n pub struct Char<const F: char>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs1_CsaP8qXevlYG3_25const_generics_demanglingINtB3_4CharKc2202_E)\n-//~| ERROR demangling(<const_generics_demangling[7e153590edc26969]::Char<'\u2202': char>>)\n+//~^ ERROR symbol-name(_RMs1_Cs21hi0yVfW1J_25const_generics_demanglingINtB3_4CharKc2202_E)\n+//~| ERROR demangling(<const_generics_demangling[17891616a171812d]::Char<'\u2202': char>>)\n //~| ERROR demangling-alt(<const_generics_demangling::Char<'\u2202'>>)\n impl Char<'\u2202'> {}\n "}, {"sha": "13995403f7791ee4a1d2371a3f75f360e1fc608b", "filename": "src/test/ui/symbol-names/const-generics-demangling.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RMCsaP8qXevlYG3_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n+error: symbol-name(_RMCs21hi0yVfW1J_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n   --> $DIR/const-generics-demangling.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[7e153590edc26969]::Unsigned<11: u8>>)\n+error: demangling(<const_generics_demangling[17891616a171812d]::Unsigned<11: u8>>)\n   --> $DIR/const-generics-demangling.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n@@ -16,13 +16,13 @@ error: demangling-alt(<const_generics_demangling::Unsigned<11>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs_CsaP8qXevlYG3_25const_generics_demanglingINtB2_6SignedKsn98_E)\n+error: symbol-name(_RMs_Cs21hi0yVfW1J_25const_generics_demanglingINtB2_6SignedKsn98_E)\n   --> $DIR/const-generics-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[7e153590edc26969]::Signed<-152: i16>>)\n+error: demangling(<const_generics_demangling[17891616a171812d]::Signed<-152: i16>>)\n   --> $DIR/const-generics-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n@@ -34,13 +34,13 @@ error: demangling-alt(<const_generics_demangling::Signed<-152>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs0_CsaP8qXevlYG3_25const_generics_demanglingINtB3_4BoolKb1_E)\n+error: symbol-name(_RMs0_Cs21hi0yVfW1J_25const_generics_demanglingINtB3_4BoolKb1_E)\n   --> $DIR/const-generics-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[7e153590edc26969]::Bool<true: bool>>)\n+error: demangling(<const_generics_demangling[17891616a171812d]::Bool<true: bool>>)\n   --> $DIR/const-generics-demangling.rs:23:1\n    |\n LL | #[rustc_symbol_name]\n@@ -52,13 +52,13 @@ error: demangling-alt(<const_generics_demangling::Bool<true>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs1_CsaP8qXevlYG3_25const_generics_demanglingINtB3_4CharKc2202_E)\n+error: symbol-name(_RMs1_Cs21hi0yVfW1J_25const_generics_demanglingINtB3_4CharKc2202_E)\n   --> $DIR/const-generics-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<const_generics_demangling[7e153590edc26969]::Char<'\u2202': char>>)\n+error: demangling(<const_generics_demangling[17891616a171812d]::Char<'\u2202': char>>)\n   --> $DIR/const-generics-demangling.rs:31:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "b0b31a57d0692db4359d0019a4fed440466a7519", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -15,8 +15,8 @@ mod foo {\n         //[legacy]~^ ERROR symbol-name(_ZN5impl13foo3Foo3bar\n         //[legacy]~| ERROR demangling(impl1::foo::Foo::bar\n         //[legacy]~| ERROR demangling-alt(impl1::foo::Foo::bar)\n-         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs2qSCrjELJET_5impl13fooNtB2_3Foo3bar)\n-            //[v0]~| ERROR demangling(<impl1[1c5860ab79c9e305]::foo::Foo>::bar)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs21hi0yVfW1J_5impl13fooNtB2_3Foo3bar)\n+            //[v0]~| ERROR demangling(<impl1[17891616a171812d]::foo::Foo>::bar)\n             //[v0]~| ERROR demangling-alt(<impl1::foo::Foo>::bar)\n         #[rustc_def_path]\n         //[legacy]~^ ERROR def-path(foo::Foo::bar)\n@@ -33,8 +33,8 @@ mod bar {\n         //[legacy]~^ ERROR symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz\n         //[legacy]~| ERROR demangling(impl1::bar::<impl impl1::foo::Foo>::baz\n         //[legacy]~| ERROR demangling-alt(impl1::bar::<impl impl1::foo::Foo>::baz)\n-         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs2qSCrjELJET_5impl13barNtNtB4_3foo3Foo3baz)\n-            //[v0]~| ERROR demangling(<impl1[1c5860ab79c9e305]::foo::Foo>::baz)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs21hi0yVfW1J_5impl13barNtNtB4_3foo3Foo3baz)\n+            //[v0]~| ERROR demangling(<impl1[17891616a171812d]::foo::Foo>::baz)\n             //[v0]~| ERROR demangling-alt(<impl1::foo::Foo>::baz)\n         #[rustc_def_path]\n         //[legacy]~^ ERROR def-path(bar::<impl foo::Foo>::baz)\n@@ -63,8 +63,8 @@ fn main() {\n             //[legacy]~^ ERROR symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method\n             //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method\n             //[legacy]~| ERROR demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method)\n-             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs2qSCrjELJET_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n-                //[v0]~| ERROR demangling(<[&dyn impl1[1c5860ab79c9e305]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[1c5860ab79c9e305]::AutoTrait; 3: usize] as impl1[1c5860ab79c9e305]::main::{closure#1}::Bar>::method)\n+             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs21hi0yVfW1J_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n+                //[v0]~| ERROR demangling(<[&dyn impl1[17891616a171812d]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[17891616a171812d]::AutoTrait; 3: usize] as impl1[17891616a171812d]::main::{closure#1}::Bar>::method)\n                 //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n             #[rustc_def_path]\n             //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)"}, {"sha": "e5b0deee36e3c0bb72112610a2cda0348b32a924", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvMNtCs2qSCrjELJET_5impl13fooNtB2_3Foo3bar)\n+error: symbol-name(_RNvMNtCs21hi0yVfW1J_5impl13fooNtB2_3Foo3bar)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[1c5860ab79c9e305]::foo::Foo>::bar)\n+error: demangling(<impl1[17891616a171812d]::foo::Foo>::bar)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -22,13 +22,13 @@ error: def-path(foo::Foo::bar)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvMNtCs2qSCrjELJET_5impl13barNtNtB4_3foo3Foo3baz)\n+error: symbol-name(_RNvMNtCs21hi0yVfW1J_5impl13barNtNtB4_3foo3Foo3baz)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[1c5860ab79c9e305]::foo::Foo>::baz)\n+error: demangling(<impl1[17891616a171812d]::foo::Foo>::baz)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -46,13 +46,13 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvXNCNvCs2qSCrjELJET_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n+error: symbol-name(_RNvXNCNvCs21hi0yVfW1J_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1[1c5860ab79c9e305]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[1c5860ab79c9e305]::AutoTrait; 3: usize] as impl1[1c5860ab79c9e305]::main::{closure#1}::Bar>::method)\n+error: demangling(<[&dyn impl1[17891616a171812d]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[17891616a171812d]::AutoTrait; 3: usize] as impl1[17891616a171812d]::main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "8357678399235c3f303d5ed8b37f436dd227683e", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h18eaa05e22e59176E)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h6244e5288326926aE)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h18eaa05e22e59176)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h6244e5288326926a)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "3238eb1e579f079c736cb18b631421890887d697", "filename": "src/test/ui/symbol-names/issue-60925.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -22,8 +22,8 @@ mod foo {\n         //[legacy]~^ ERROR symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo\n         //[legacy]~| ERROR demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo\n         //[legacy]~| ERROR demangling-alt(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo)\n-         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs8dUWfuENynB_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n-            //[v0]~| ERROR demangling(<issue_60925[5fcbb46c6fac4139]::foo::Foo<issue_60925[5fcbb46c6fac4139]::llvm::Foo>>::foo)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs21hi0yVfW1J_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n+            //[v0]~| ERROR demangling(<issue_60925[17891616a171812d]::foo::Foo<issue_60925[17891616a171812d]::llvm::Foo>>::foo)\n             //[v0]~| ERROR demangling-alt(<issue_60925::foo::Foo<issue_60925::llvm::Foo>>::foo)\n         pub(crate) fn foo() {\n             for _ in 0..0 {"}, {"sha": "6a5885e1ea32b08149fdd6cf06598f5ba986eab8", "filename": "src/test/ui/symbol-names/issue-60925.v0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvMNtCs8dUWfuENynB_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n+error: symbol-name(_RNvMNtCs21hi0yVfW1J_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_60925[5fcbb46c6fac4139]::foo::Foo<issue_60925[5fcbb46c6fac4139]::llvm::Foo>>::foo)\n+error: demangling(<issue_60925[17891616a171812d]::foo::Foo<issue_60925[17891616a171812d]::llvm::Foo>>::foo)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "4d061cafef3b2d99a125b57220c50d18a269dcfc", "filename": "src/test/ui/symbol-names/issue-75326.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -42,8 +42,8 @@ where\n     //[legacy]~^ ERROR symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next\n     //[legacy]~| ERROR demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next\n     //[legacy]~| ERROR demangling-alt(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next)\n-    //[v0]~^^^^  ERROR symbol-name(_RNvXINICsiMBouZZ1iuD_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n-    //[v0]~|     ERROR demangling(<issue_75326[dac9b7624645f95d]::Foo<_, _> as issue_75326[dac9b7624645f95d]::Iterator2>::next)\n+    //[v0]~^^^^  ERROR symbol-name(_RNvXINICs21hi0yVfW1J_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n+    //[v0]~|     ERROR demangling(<issue_75326[17891616a171812d]::Foo<_, _> as issue_75326[17891616a171812d]::Iterator2>::next)\n     //[v0]~|     ERROR demangling-alt(<issue_75326::Foo<_, _> as issue_75326::Iterator2>::next)\n     fn next(&mut self) -> Option<Self::Item> {\n         self.find(|_| true)"}, {"sha": "98844aafb65528ac8f7210198a7c52537282a2bd", "filename": "src/test/ui/symbol-names/issue-75326.v0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvXINICsiMBouZZ1iuD_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n+error: symbol-name(_RNvXINICs21hi0yVfW1J_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_75326[dac9b7624645f95d]::Foo<_, _> as issue_75326[dac9b7624645f95d]::Iterator2>::next)\n+error: demangling(<issue_75326[17891616a171812d]::Foo<_, _> as issue_75326[17891616a171812d]::Iterator2>::next)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "2b09318f06c74806386f6f668cc805dfd1a74c2f", "filename": "src/test/ui/symbol-names/trait-objects.v0.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2312ff1a850db449b79fd3c4b215395cd2598c25/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr?ref=2312ff1a850db449b79fd3c4b215395cd2598c25", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvXCRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[3f8b57f879016e18]::Bar>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[17891616a171812d]::Bar>::method)\n   --> $DIR/trait-objects.rs:16:5\n    |\n LL |     #[rustc_symbol_name]\n@@ -22,7 +22,7 @@ error: symbol-name(_RNvXs_CRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3op\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[3f8b57f879016e18]::Foo>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[17891616a171812d]::Foo>::method)\n   --> $DIR/trait-objects.rs:28:5\n    |\n LL |     #[rustc_symbol_name]\n@@ -40,7 +40,7 @@ error: symbol-name(_RNvXs0_CRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3o\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[3f8b57f879016e18]::Baz>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[17891616a171812d]::Baz>::method)\n   --> $DIR/trait-objects.rs:40:5\n    |\n LL |     #[rustc_symbol_name]"}]}