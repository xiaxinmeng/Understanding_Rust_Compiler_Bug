{"sha": "268cb2a04eb2a7519262632c09c55ee273545352", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OGNiMmEwNGViMmE3NTE5MjYyNjMyYzA5YzU1ZWUyNzM1NDUzNTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-23T10:45:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-23T10:45:03Z"}, "message": "Unresolved questions", "tree": {"sha": "86198e72701b0bf37e9bd34dd80bc16e8185f009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86198e72701b0bf37e9bd34dd80bc16e8185f009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/268cb2a04eb2a7519262632c09c55ee273545352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/268cb2a04eb2a7519262632c09c55ee273545352", "html_url": "https://github.com/rust-lang/rust/commit/268cb2a04eb2a7519262632c09c55ee273545352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/268cb2a04eb2a7519262632c09c55ee273545352/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c74af7ddc84dd4a6b5b41423a108eaddfbc3b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c74af7ddc84dd4a6b5b41423a108eaddfbc3b8e", "html_url": "https://github.com/rust-lang/rust/commit/2c74af7ddc84dd4a6b5b41423a108eaddfbc3b8e"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "c6cb4320fb1730ea81b8d9650ab5d8db9d8c25dd", "filename": "rfc.md", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/268cb2a04eb2a7519262632c09c55ee273545352/rfc.md", "raw_url": "https://github.com/rust-lang/rust/raw/268cb2a04eb2a7519262632c09c55ee273545352/rfc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc.md?ref=268cb2a04eb2a7519262632c09c55ee273545352", "patch": "@@ -393,21 +393,43 @@ plan is suggested:\n - No harm will be done as long as the new libsyntax exists as an\n   experiemt on crates.io. However, actually using it in the compiler\n   and other tools would require massive refactorings.\n+  \n+- Proposed syntax tree requires to keep the original source code\n+  available, which might increase memory usage of the\n+  compiler. However, it should be possible to throw the original tree\n+  and source code away after conversion to HIR.\n \n # Rationale and alternatives\n [alternatives]: #alternatives\n \n-- Incrementally add more information about source code to the current AST.\n-- Move the current libsyntax to crates.io as is.\n+- Incrementally add more information about source code to the current\n+  AST.\n+\n+- Move the current libsyntax to crates.io as is. In the past, there\n+  were several failed attempts to do that.\n+\n - Explore alternative representations for the parse tree.\n-- Use parser generator instead of hand written parser.\n+\n+- Use parser generator instead of hand written parser. Using the\n+  parser from libsyntax directly would be easier, and hand-written\n+  LL-style parsers usually have much better error recovery than\n+  generated LR-style ones.\n \n # Unresolved questions\n [unresolved]: #unresolved-questions\n \n - Is it at all possible to represent Rust parser as a pure function of\n-  the source code?\n+  the source code? It seems like the answer is yes, because the\n+  language and especially macros were cleverly designed with this\n+  use-case in mind.\n+  \n+  \n - Is it possible to implement macro expansion using the proposed\n-  framework?\n+  framework? This is the main question of this RFC. The proposed\n+  solution of synthesizing source code on the fly seems workable: it's\n+  not that different from the current implementation, which\n+  synthesizes token trees.\n+  \n+  \n - How to actually phase out current libsyntax, if libsyntax2.0 turns\n   out to be a success?"}]}