{"sha": "f94899565bf6d9e4484991fd3e49875a4886386d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NDg5OTU2NWJmNmQ5ZTQ0ODQ5OTFmZDNlNDk4NzVhNDg4NjM4NmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-30T09:03:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-01T08:50:04Z"}, "message": "InterpError printing really is more Display than Debug\n\nalso tweak InvalidDiscriminant message", "tree": {"sha": "52d2770b072e42cd145bd78632de2c18515a565b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52d2770b072e42cd145bd78632de2c18515a565b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f94899565bf6d9e4484991fd3e49875a4886386d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f94899565bf6d9e4484991fd3e49875a4886386d", "html_url": "https://github.com/rust-lang/rust/commit/f94899565bf6d9e4484991fd3e49875a4886386d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f94899565bf6d9e4484991fd3e49875a4886386d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "671bc08ea8af5800a76203507a2ad68525b767d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/671bc08ea8af5800a76203507a2ad68525b767d9", "html_url": "https://github.com/rust-lang/rust/commit/671bc08ea8af5800a76203507a2ad68525b767d9"}], "stats": {"total": 61, "additions": 29, "deletions": 32}, "files": [{"sha": "efd30834ca7d3b48be1164b79d9a8c11d55dcdd2", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f94899565bf6d9e4484991fd3e49875a4886386d/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94899565bf6d9e4484991fd3e49875a4886386d/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=f94899565bf6d9e4484991fd3e49875a4886386d", "patch": "@@ -285,7 +285,7 @@ pub enum InvalidProgramInfo<'tcx> {\n     TransmuteSizeDiff(Ty<'tcx>, Ty<'tcx>),\n }\n \n-impl fmt::Debug for InvalidProgramInfo<'_> {\n+impl fmt::Display for InvalidProgramInfo<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use InvalidProgramInfo::*;\n         match self {\n@@ -310,8 +310,6 @@ pub enum UndefinedBehaviorInfo {\n     Ub(String),\n     /// Unreachable code was executed.\n     Unreachable,\n-    /// An enum discriminant was set to a value which was outside the range of valid values.\n-    InvalidDiscriminant(ScalarMaybeUndef),\n     /// A slice/array index projection went out-of-bounds.\n     BoundsCheckFailed {\n         len: u64,\n@@ -356,6 +354,8 @@ pub enum UndefinedBehaviorInfo {\n     InvalidBool(u8),\n     /// Using a non-character `u32` as character.\n     InvalidChar(u32),\n+    /// An enum discriminant was set to a value which was outside the range of valid values.\n+    InvalidDiscriminant(ScalarMaybeUndef),\n     /// Using uninitialized data where it is not allowed.\n     InvalidUndefBytes(Option<Pointer>),\n     /// Working with a local that is not currently live.\n@@ -367,29 +367,26 @@ pub enum UndefinedBehaviorInfo {\n     },\n }\n \n-impl fmt::Debug for UndefinedBehaviorInfo {\n+impl fmt::Display for UndefinedBehaviorInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UndefinedBehaviorInfo::*;\n         match self {\n             Ub(msg) => write!(f, \"{}\", msg),\n             Unreachable => write!(f, \"entering unreachable code\"),\n-            InvalidDiscriminant(val) => write!(f, \"encountering invalid enum discriminant {}\", val),\n-            BoundsCheckFailed { ref len, ref index } => write!(\n-                f,\n-                \"indexing out of bounds: the len is {:?} but the index is {:?}\",\n-                len, index\n-            ),\n+            BoundsCheckFailed { ref len, ref index } => {\n+                write!(f, \"indexing out of bounds: the len is {} but the index is {}\", len, index)\n+            }\n             DivisionByZero => write!(f, \"dividing by zero\"),\n             RemainderByZero => write!(f, \"calculating the remainder with a divisor of zero\"),\n             PointerArithOverflow => write!(f, \"overflowing in-bounds pointer arithmetic\"),\n             InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {}\", msg),\n             UnterminatedCString(p) => write!(\n                 f,\n-                \"reading a null-terminated string starting at {:?} with no null found before end of allocation\",\n+                \"reading a null-terminated string starting at {} with no null found before end of allocation\",\n                 p,\n             ),\n             PointerUseAfterFree(a) => {\n-                write!(f, \"pointer to {:?} was dereferenced after this allocation got freed\", a)\n+                write!(f, \"pointer to {} was dereferenced after this allocation got freed\", a)\n             }\n             PointerOutOfBounds { ptr, msg, allocation_size } => write!(\n                 f,\n@@ -408,17 +405,18 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 has.bytes(),\n                 required.bytes()\n             ),\n-            WriteToReadOnly(a) => write!(f, \"writing to {:?} which is read-only\", a),\n+            WriteToReadOnly(a) => write!(f, \"writing to {} which is read-only\", a),\n             InvalidFunctionPointer(p) => {\n-                write!(f, \"using {:?} as function pointer but it does not point to a function\", p)\n+                write!(f, \"using {} as function pointer but it does not point to a function\", p)\n             }\n-            DerefFunctionPointer(a) => write!(f, \"accessing {:?} which contains a function\", a),\n+            DerefFunctionPointer(a) => write!(f, \"accessing {} which contains a function\", a),\n             ValidationFailure(ref err) => write!(f, \"type validation failed: {}\", err),\n             InvalidBool(b) => write!(f, \"interpreting an invalid 8-bit value as a bool: {}\", b),\n             InvalidChar(c) => write!(f, \"interpreting an invalid 32-bit value as a char: {}\", c),\n+            InvalidDiscriminant(val) => write!(f, \"enum value has invalid discriminant: {}\", val),\n             InvalidUndefBytes(Some(p)) => write!(\n                 f,\n-                \"reading uninitialized memory at {:?}, but this operation requires initialized memory\",\n+                \"reading uninitialized memory at {}, but this operation requires initialized memory\",\n                 p\n             ),\n             InvalidUndefBytes(None) => write!(\n@@ -455,7 +453,7 @@ pub enum UnsupportedOpInfo {\n     ReadBytesAsPointer,\n }\n \n-impl fmt::Debug for UnsupportedOpInfo {\n+impl fmt::Display for UnsupportedOpInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UnsupportedOpInfo::*;\n         match self {\n@@ -481,7 +479,7 @@ pub enum ResourceExhaustionInfo {\n     StepLimitReached,\n }\n \n-impl fmt::Debug for ResourceExhaustionInfo {\n+impl fmt::Display for ResourceExhaustionInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use ResourceExhaustionInfo::*;\n         match self {\n@@ -499,7 +497,6 @@ impl fmt::Debug for ResourceExhaustionInfo {\n pub trait AsAny: Any {\n     fn as_any(&self) -> &dyn Any;\n }\n-\n impl<T: Any> AsAny for T {\n     #[inline(always)]\n     fn as_any(&self) -> &dyn Any {\n@@ -508,7 +505,7 @@ impl<T: Any> AsAny for T {\n }\n \n /// A trait for machine-specific errors (or other \"machine stop\" conditions).\n-pub trait MachineStopType: AsAny + fmt::Debug + Send {}\n+pub trait MachineStopType: AsAny + fmt::Display + Send {}\n impl MachineStopType for String {}\n \n impl dyn MachineStopType {\n@@ -538,21 +535,21 @@ pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n \n impl fmt::Display for InterpError<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // Forward `Display` to `Debug`.\n-        fmt::Debug::fmt(self, f)\n+        use InterpError::*;\n+        match *self {\n+            Unsupported(ref msg) => write!(f, \"{}\", msg),\n+            InvalidProgram(ref msg) => write!(f, \"{}\", msg),\n+            UndefinedBehavior(ref msg) => write!(f, \"{}\", msg),\n+            ResourceExhaustion(ref msg) => write!(f, \"{}\", msg),\n+            MachineStop(ref msg) => write!(f, \"{}\", msg),\n+        }\n     }\n }\n \n+// Forward `Debug` to `Display`, so it does not look awful.\n impl fmt::Debug for InterpError<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use InterpError::*;\n-        match *self {\n-            Unsupported(ref msg) => write!(f, \"{:?}\", msg),\n-            InvalidProgram(ref msg) => write!(f, \"{:?}\", msg),\n-            UndefinedBehavior(ref msg) => write!(f, \"{:?}\", msg),\n-            ResourceExhaustion(ref msg) => write!(f, \"{:?}\", msg),\n-            MachineStop(ref msg) => write!(f, \"{:?}\", msg),\n-        }\n+        fmt::Display::fmt(self, f)\n     }\n }\n "}, {"sha": "2673bab20289919809b0794f305d875a7e4b1c83", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f94899565bf6d9e4484991fd3e49875a4886386d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94899565bf6d9e4484991fd3e49875a4886386d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f94899565bf6d9e4484991fd3e49875a4886386d", "patch": "@@ -43,8 +43,8 @@ macro_rules! throw_machine_stop_str {\n         // We make a new local type for it. The type itself does not carry any information,\n         // but its vtable (for the `MachineStopType` trait) does.\n         struct Zst;\n-        // Debug-printing this type shows the desired string.\n-        impl std::fmt::Debug for Zst {\n+        // Printing this type shows the desired string.\n+        impl std::fmt::Display for Zst {\n             fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n                 write!(f, $($tt)*)\n             }"}]}