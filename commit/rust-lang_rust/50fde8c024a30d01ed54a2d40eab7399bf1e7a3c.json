{"sha": "50fde8c024a30d01ed54a2d40eab7399bf1e7a3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZmRlOGMwMjRhMzBkMDFlZDU0YTJkNDBlYWI3Mzk5YmYxZTdhM2M=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-28T00:09:18Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-10-05T20:59:06Z"}, "message": "std: ToPrimitive's default impls should use `.to_*()`\n\nThis allows the default methods to be properly range checked.", "tree": {"sha": "08314cfcef42bbf843fc4fb0ae2ec08ae4643fe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08314cfcef42bbf843fc4fb0ae2ec08ae4643fe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50fde8c024a30d01ed54a2d40eab7399bf1e7a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50fde8c024a30d01ed54a2d40eab7399bf1e7a3c", "html_url": "https://github.com/rust-lang/rust/commit/50fde8c024a30d01ed54a2d40eab7399bf1e7a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50fde8c024a30d01ed54a2d40eab7399bf1e7a3c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da145b237241345a9b14531d37f290082c4fb5f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/da145b237241345a9b14531d37f290082c4fb5f0", "html_url": "https://github.com/rust-lang/rust/commit/da145b237241345a9b14531d37f290082c4fb5f0"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "bccb20de45856ffdefddc88c235e9c679ff8d79d", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/50fde8c024a30d01ed54a2d40eab7399bf1e7a3c/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fde8c024a30d01ed54a2d40eab7399bf1e7a3c/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=50fde8c024a30d01ed54a2d40eab7399bf1e7a3c", "patch": "@@ -353,29 +353,25 @@ pub trait ToPrimitive {\n     /// Converts the value of `self` to an `int`.\n     #[inline]\n     fn to_int(&self) -> Option<int> {\n-        // XXX: Check for range.\n-        self.to_i64().and_then(|x| Some(x as int))\n+        self.to_i64().and_then(|x| x.to_int())\n     }\n \n     /// Converts the value of `self` to an `i8`.\n     #[inline]\n     fn to_i8(&self) -> Option<i8> {\n-        // XXX: Check for range.\n-        self.to_i64().and_then(|x| Some(x as i8))\n+        self.to_i64().and_then(|x| x.to_i8())\n     }\n \n     /// Converts the value of `self` to an `i16`.\n     #[inline]\n     fn to_i16(&self) -> Option<i16> {\n-        // XXX: Check for range.\n-        self.to_i64().and_then(|x| Some(x as i16))\n+        self.to_i64().and_then(|x| x.to_i16())\n     }\n \n     /// Converts the value of `self` to an `i32`.\n     #[inline]\n     fn to_i32(&self) -> Option<i32> {\n-        // XXX: Check for range.\n-        self.to_i64().and_then(|x| Some(x as i32))\n+        self.to_i64().and_then(|x| x.to_i32())\n     }\n \n     /// Converts the value of `self` to an `i64`.\n@@ -384,50 +380,43 @@ pub trait ToPrimitive {\n     /// Converts the value of `self` to an `uint`.\n     #[inline]\n     fn to_uint(&self) -> Option<uint> {\n-        // XXX: Check for range.\n-        self.to_u64().and_then(|x| Some(x as uint))\n+        self.to_u64().and_then(|x| x.to_uint())\n     }\n \n     /// Converts the value of `self` to an `u8`.\n     #[inline]\n     fn to_u8(&self) -> Option<u8> {\n-        // XXX: Check for range.\n-        self.to_u64().and_then(|x| Some(x as u8))\n+        self.to_u64().and_then(|x| x.to_u8())\n     }\n \n     /// Converts the value of `self` to an `u16`.\n     #[inline]\n     fn to_u16(&self) -> Option<u16> {\n-        // XXX: Check for range.\n-        self.to_u64().and_then(|x| Some(x as u16))\n+        self.to_u64().and_then(|x| x.to_u16())\n     }\n \n     /// Converts the value of `self` to an `u32`.\n     #[inline]\n     fn to_u32(&self) -> Option<u32> {\n-        // XXX: Check for range.\n-        self.to_u64().and_then(|x| Some(x as u32))\n+        self.to_u64().and_then(|x| x.to_u32())\n     }\n \n     /// Converts the value of `self` to an `u64`.\n     #[inline]\n     fn to_u64(&self) -> Option<u64> {\n-        // XXX: Check for range.\n-        self.to_u64().and_then(|x| Some(x as u64))\n+        self.to_u64().and_then(|x| x.to_u64())\n     }\n \n     /// Converts the value of `self` to an `f32`.\n     #[inline]\n     fn to_f32(&self) -> Option<f32> {\n-        // XXX: Check for range.\n-        self.to_float().and_then(|x| Some(x as f32))\n+        self.to_f64().and_then(|x| x.to_f32())\n     }\n \n     /// Converts the value of `self` to an `f64`.\n     #[inline]\n     fn to_f64(&self) -> Option<f64> {\n-        // XXX: Check for range.\n-        self.to_i64().and_then(|x| Some(x as f64))\n+        self.to_i64().and_then(|x| x.to_f64())\n     }\n }\n "}]}