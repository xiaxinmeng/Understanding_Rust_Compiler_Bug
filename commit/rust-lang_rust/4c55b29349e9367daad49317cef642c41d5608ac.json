{"sha": "4c55b29349e9367daad49317cef642c41d5608ac", "node_id": "C_kwDOAAsO6NoAKDRjNTViMjkzNDllOTM2N2RhYWQ0OTMxN2NlZjY0MmM0MWQ1NjA4YWM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-03T11:00:17Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-03T11:00:17Z"}, "message": "put custom flags as last in codegen and asm tests", "tree": {"sha": "bf6c1a2951bae84d27de10c832838c560c91158c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf6c1a2951bae84d27de10c832838c560c91158c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c55b29349e9367daad49317cef642c41d5608ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmNjn2IACgkQzXazX3c0\ndp5h/Q/+LNp60rCbOSaIkstfiQDjd9N0OliHTRwX9Ta/jiwZZPpW2WOBW4+hyGrS\nNquSCt47ZrSPG0V8Y9GPAhdRNYB9CL5SnY/9feUDbyuTXUoxDuYbuwgyE6Fjix4t\n6CxX6QwLHbfc5L/KpENCz/tM1n4JhVWLC5zzUJMXzG/umPqgq6nn33J1rXlcpFEC\nkQf4S5kro7Z3tqYUo2toD+Jzol9yz2LrrHPDIP5LdZlHqKY2T91aJaBeoqMJuWr9\nhXVBpzcBifeCuTN89rI40hyPH7DyF6ZDfyMIK4Y7I785V/jHUg6fXIU7mFcGADuy\nxexTUQ8rnlvLYhO5CWdy566SO/TgDJ5nHvBp/7vwaMaFMHsW2Xmn7PXMDp2uMQ0c\nci0sqD34r+zVwvQ4G3aUy22Ug0ioF/wB9sV5JApk0cK9ob5IQRQSoGdIHJYMot9c\nv7BYSTRxzfKeH6/ZOFjajpqLmWqoHrcdNYD4e8jp4RooI1C9Pku6BGO1aVPdyBrL\n0MDgcxEVKMsvOotOaJZ0ld2Dq2ut1Ru8arV+zmSN25+63D1/J8JmzpzhQBD4kp7O\nfqFfLho3kA7gpf4e5KmO2uqksYSTcorH13YLhhwJvd898o3xG2A2mo+JSLMv+Men\nlkt6xg/B1P8dwd0B95HYY6ba7zyovNA/FQQAC/8LgmtSwX2iov8=\n=bOY9\n-----END PGP SIGNATURE-----", "payload": "tree bf6c1a2951bae84d27de10c832838c560c91158c\nparent 5ed753cb0db4defb4bb94178daf53f9bba707a8c\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1667473217 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1667473217 +0100\n\nput custom flags as last in codegen and asm tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c55b29349e9367daad49317cef642c41d5608ac", "html_url": "https://github.com/rust-lang/rust/commit/4c55b29349e9367daad49317cef642c41d5608ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c55b29349e9367daad49317cef642c41d5608ac/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed753cb0db4defb4bb94178daf53f9bba707a8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed753cb0db4defb4bb94178daf53f9bba707a8c", "html_url": "https://github.com/rust-lang/rust/commit/5ed753cb0db4defb4bb94178daf53f9bba707a8c"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "4a59dca49fe073c63104ffebad47cbe5f40b6cb3", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4c55b29349e9367daad49317cef642c41d5608ac/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c55b29349e9367daad49317cef642c41d5608ac/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4c55b29349e9367daad49317cef642c41d5608ac", "patch": "@@ -220,11 +220,13 @@ enum WillExecute {\n     Disabled,\n }\n \n-/// Should `--emit metadata` be used?\n+/// What value should be passed to `--emit`?\n #[derive(Copy, Clone)]\n-enum EmitMetadata {\n-    Yes,\n-    No,\n+enum Emit {\n+    None,\n+    Metadata,\n+    LlvmIr,\n+    Asm,\n }\n \n impl<'test> TestCx<'test> {\n@@ -424,7 +426,7 @@ impl<'test> TestCx<'test> {\n         }\n \n         let should_run = self.run_if_enabled();\n-        let mut proc_res = self.compile_test(should_run, EmitMetadata::No);\n+        let mut proc_res = self.compile_test(should_run, Emit::None);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -676,7 +678,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, EmitMetadata::No);\n+        let compile_result = self.compile_test(should_run, Emit::None);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -796,7 +798,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compiler_run_result = self.compile_test(should_run, EmitMetadata::No);\n+        let compiler_run_result = self.compile_test(should_run, Emit::None);\n         if !compiler_run_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n         }\n@@ -1028,7 +1030,7 @@ impl<'test> TestCx<'test> {\n     fn run_debuginfo_lldb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, EmitMetadata::No);\n+        let compile_result = self.compile_test(should_run, Emit::None);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -1453,21 +1455,21 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn should_emit_metadata(&self, pm: Option<PassMode>) -> EmitMetadata {\n+    fn should_emit_metadata(&self, pm: Option<PassMode>) -> Emit {\n         match (pm, self.props.fail_mode, self.config.mode) {\n-            (Some(PassMode::Check), ..) | (_, Some(FailMode::Check), Ui) => EmitMetadata::Yes,\n-            _ => EmitMetadata::No,\n+            (Some(PassMode::Check), ..) | (_, Some(FailMode::Check), Ui) => Emit::Metadata,\n+            _ => Emit::None,\n         }\n     }\n \n-    fn compile_test(&self, will_execute: WillExecute, emit_metadata: EmitMetadata) -> ProcRes {\n-        self.compile_test_general(will_execute, emit_metadata, self.props.local_pass_mode())\n+    fn compile_test(&self, will_execute: WillExecute, emit: Emit) -> ProcRes {\n+        self.compile_test_general(will_execute, emit, self.props.local_pass_mode())\n     }\n \n     fn compile_test_general(\n         &self,\n         will_execute: WillExecute,\n-        emit_metadata: EmitMetadata,\n+        emit: Emit,\n         local_pm: Option<PassMode>,\n     ) -> ProcRes {\n         // Only use `make_exe_name` when the test ends up being executed.\n@@ -1502,7 +1504,7 @@ impl<'test> TestCx<'test> {\n         let rustc = self.make_compile_args(\n             &self.testpaths.file,\n             output_file,\n-            emit_metadata,\n+            emit,\n             allow_unused,\n             LinkToAux::Yes,\n         );\n@@ -1735,7 +1737,7 @@ impl<'test> TestCx<'test> {\n         let mut aux_rustc = aux_cx.make_compile_args(\n             input_file,\n             aux_output,\n-            EmitMetadata::No,\n+            Emit::None,\n             AllowUnused::No,\n             LinkToAux::No,\n         );\n@@ -1875,7 +1877,7 @@ impl<'test> TestCx<'test> {\n         &self,\n         input_file: &Path,\n         output_file: TargetLocation,\n-        emit_metadata: EmitMetadata,\n+        emit: Emit,\n         allow_unused: AllowUnused,\n         link_to_aux: LinkToAux,\n     ) -> Command {\n@@ -1992,8 +1994,18 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        if let (false, EmitMetadata::Yes) = (is_rustdoc, emit_metadata) {\n-            rustc.args(&[\"--emit\", \"metadata\"]);\n+        match emit {\n+            Emit::None => {}\n+            Emit::Metadata if is_rustdoc => {}\n+            Emit::Metadata => {\n+                rustc.args(&[\"--emit\", \"metadata\"]);\n+            }\n+            Emit::LlvmIr => {\n+                rustc.args(&[\"--emit\", \"llvm-ir\"]);\n+            }\n+            Emit::Asm => {\n+                rustc.args(&[\"--emit\", \"asm\"]);\n+            }\n         }\n \n         if !is_rustdoc {\n@@ -2262,14 +2274,13 @@ impl<'test> TestCx<'test> {\n     fn compile_test_and_save_ir(&self) -> ProcRes {\n         let output_file = TargetLocation::ThisDirectory(self.output_base_dir());\n         let input_file = &self.testpaths.file;\n-        let mut rustc = self.make_compile_args(\n+        let rustc = self.make_compile_args(\n             input_file,\n             output_file,\n-            EmitMetadata::No,\n+            Emit::LlvmIr,\n             AllowUnused::No,\n             LinkToAux::Yes,\n         );\n-        rustc.arg(\"--emit=llvm-ir\");\n \n         self.compose_and_run_compiler(rustc, None)\n     }\n@@ -2281,17 +2292,11 @@ impl<'test> TestCx<'test> {\n \n         let output_file = TargetLocation::ThisFile(output_path.clone());\n         let input_file = &self.testpaths.file;\n-        let mut rustc = self.make_compile_args(\n-            input_file,\n-            output_file,\n-            EmitMetadata::No,\n-            AllowUnused::No,\n-            LinkToAux::Yes,\n-        );\n \n+        let mut emit = Emit::None;\n         match self.props.assembly_output.as_ref().map(AsRef::as_ref) {\n             Some(\"emit-asm\") => {\n-                rustc.arg(\"--emit=asm\");\n+                emit = Emit::Asm;\n             }\n \n             Some(\"ptx-linker\") => {\n@@ -2302,6 +2307,9 @@ impl<'test> TestCx<'test> {\n             None => self.fatal(\"missing 'assembly-output' header\"),\n         }\n \n+        let rustc =\n+            self.make_compile_args(input_file, output_file, emit, AllowUnused::No, LinkToAux::Yes);\n+\n         (self.compose_and_run_compiler(rustc, None), output_path)\n     }\n \n@@ -2426,7 +2434,7 @@ impl<'test> TestCx<'test> {\n         let mut rustc = new_rustdoc.make_compile_args(\n             &new_rustdoc.testpaths.file,\n             output_file,\n-            EmitMetadata::No,\n+            Emit::None,\n             AllowUnused::Yes,\n             LinkToAux::Yes,\n         );\n@@ -2702,7 +2710,7 @@ impl<'test> TestCx<'test> {\n     fn run_codegen_units_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        let proc_res = self.compile_test(WillExecute::No, EmitMetadata::No);\n+        let proc_res = self.compile_test(WillExecute::No, Emit::None);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -3215,7 +3223,7 @@ impl<'test> TestCx<'test> {\n         if let Some(FailMode::Build) = self.props.fail_mode {\n             // Make sure a build-fail test cannot fail due to failing analysis (e.g. typeck).\n             let pm = Some(PassMode::Check);\n-            let proc_res = self.compile_test_general(WillExecute::No, EmitMetadata::Yes, pm);\n+            let proc_res = self.compile_test_general(WillExecute::No, Emit::Metadata, pm);\n             self.check_if_test_should_compile(&proc_res, pm);\n         }\n "}]}