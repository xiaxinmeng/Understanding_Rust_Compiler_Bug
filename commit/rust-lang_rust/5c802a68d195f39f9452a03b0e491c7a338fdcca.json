{"sha": "5c802a68d195f39f9452a03b0e491c7a338fdcca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODAyYTY4ZDE5NWYzOWY5NDUyYTAzYjBlNDkxYzdhMzM4ZmRjY2E=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-13T12:11:34Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:10:21Z"}, "message": "Port kind.rs from oldvisit to <V:Visitor> trait API.", "tree": {"sha": "306f09aa61123c6e578a7490750abf4b976514cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/306f09aa61123c6e578a7490750abf4b976514cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c802a68d195f39f9452a03b0e491c7a338fdcca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c802a68d195f39f9452a03b0e491c7a338fdcca", "html_url": "https://github.com/rust-lang/rust/commit/5c802a68d195f39f9452a03b0e491c7a338fdcca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c802a68d195f39f9452a03b0e491c7a338fdcca/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b1fc5c8b150b833585c648485b3abf8a76f06e", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b1fc5c8b150b833585c648485b3abf8a76f06e", "html_url": "https://github.com/rust-lang/rust/commit/35b1fc5c8b150b833585c648485b3abf8a76f06e"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "6d7d8112991efd4270363ddae46fe3cef59693d4", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 41, "deletions": 23, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5c802a68d195f39f9452a03b0e491c7a338fdcca/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c802a68d195f39f9452a03b0e491c7a338fdcca/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=5c802a68d195f39f9452a03b0e491c7a338fdcca", "patch": "@@ -21,7 +21,8 @@ use syntax::attr;\n use syntax::codemap::span;\n use syntax::opt_vec;\n use syntax::print::pprust::expr_to_str;\n-use syntax::{oldvisit, ast_util};\n+use syntax::{visit,ast_util};\n+use syntax::visit::Visitor;\n \n // Kind analysis pass.\n //\n@@ -58,6 +59,29 @@ pub struct Context {\n     current_item: NodeId\n }\n \n+struct KindAnalysisVisitor;\n+\n+impl Visitor<Context> for KindAnalysisVisitor {\n+\n+    fn visit_expr(&mut self, ex:@expr, e:Context) {\n+        check_expr(self, ex, e);\n+    }\n+\n+    fn visit_fn(&mut self, fk:&visit::fn_kind, fd:&fn_decl, b:&Block, s:span, n:NodeId, e:Context) {\n+        check_fn(self, fk, fd, b, s, n, e);\n+    }\n+\n+    fn visit_ty(&mut self, t:&Ty, e:Context) {\n+        check_ty(self, t, e);\n+    }\n+    fn visit_item(&mut self, i:@item, e:Context) {\n+        check_item(self, i, e);\n+    }\n+    fn visit_block(&mut self, b:&Block, e:Context) {\n+        check_block(self, b, e);\n+    }\n+}\n+\n pub fn check_crate(tcx: ty::ctxt,\n                    method_map: typeck::method_map,\n                    crate: &Crate) {\n@@ -66,15 +90,8 @@ pub fn check_crate(tcx: ty::ctxt,\n         method_map: method_map,\n         current_item: -1\n     };\n-    let visit = oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_expr: check_expr,\n-        visit_fn: check_fn,\n-        visit_ty: check_ty,\n-        visit_item: check_item,\n-        visit_block: check_block,\n-        .. *oldvisit::default_visitor()\n-    });\n-    oldvisit::visit_crate(crate, (ctx, visit));\n+    let mut visit = KindAnalysisVisitor;\n+    visit::walk_crate(&mut visit, crate, ctx);\n     tcx.sess.abort_if_errors();\n }\n \n@@ -108,12 +125,13 @@ fn check_struct_safe_for_destructor(cx: Context,\n     }\n }\n \n-fn check_block(block: &Block,\n-               (cx, visitor): (Context, oldvisit::vt<Context>)) {\n-    oldvisit::visit_block(block, (cx, visitor));\n+fn check_block(visitor: &mut KindAnalysisVisitor,\n+               block: &Block,\n+               cx: Context) {\n+    visit::walk_block(visitor, block, cx);\n }\n \n-fn check_item(item: @item, (cx, visitor): (Context, oldvisit::vt<Context>)) {\n+fn check_item(visitor: &mut KindAnalysisVisitor, item: @item, cx: Context) {\n     // If this is a destructor, check kinds.\n     if !attr::contains_name(item.attrs, \"unsafe_destructor\") {\n         match item.node {\n@@ -153,7 +171,7 @@ fn check_item(item: @item, (cx, visitor): (Context, oldvisit::vt<Context>)) {\n     }\n \n     let cx = Context { current_item: item.id, ..cx };\n-    oldvisit::visit_item(item, (cx, visitor));\n+    visit::walk_item(visitor, item, cx);\n }\n \n // Yields the appropriate function to check the kind of closed over\n@@ -227,13 +245,13 @@ fn with_appropriate_checker(cx: Context, id: NodeId,\n // Check that the free variables used in a shared/sendable closure conform\n // to the copy/move kind bounds. Then recursively check the function body.\n fn check_fn(\n-    fk: &oldvisit::fn_kind,\n+    v: &mut KindAnalysisVisitor,\n+    fk: &visit::fn_kind,\n     decl: &fn_decl,\n     body: &Block,\n     sp: span,\n     fn_id: NodeId,\n-    (cx, v): (Context,\n-              oldvisit::vt<Context>)) {\n+    cx: Context) {\n \n     // Check kinds on free variables:\n     do with_appropriate_checker(cx, fn_id) |chk| {\n@@ -243,10 +261,10 @@ fn check_fn(\n         }\n     }\n \n-    oldvisit::visit_fn(fk, decl, body, sp, fn_id, (cx, v));\n+    visit::walk_fn(v, fk, decl, body, sp, fn_id, cx);\n }\n \n-pub fn check_expr(e: @expr, (cx, v): (Context, oldvisit::vt<Context>)) {\n+pub fn check_expr(v: &mut KindAnalysisVisitor, e: @expr, cx: Context) {\n     debug!(\"kind::check_expr(%s)\", expr_to_str(e, cx.tcx.sess.intr()));\n \n     // Handle any kind bounds on type parameters\n@@ -311,10 +329,10 @@ pub fn check_expr(e: @expr, (cx, v): (Context, oldvisit::vt<Context>)) {\n         }\n         _ => {}\n     }\n-    oldvisit::visit_expr(e, (cx, v));\n+    visit::walk_expr(v, e, cx);\n }\n \n-fn check_ty(aty: &Ty, (cx, v): (Context, oldvisit::vt<Context>)) {\n+fn check_ty(v: &mut KindAnalysisVisitor, aty: &Ty, cx: Context) {\n     match aty.node {\n       ty_path(_, _, id) => {\n           let r = cx.tcx.node_type_substs.find(&id);\n@@ -329,7 +347,7 @@ fn check_ty(aty: &Ty, (cx, v): (Context, oldvisit::vt<Context>)) {\n       }\n       _ => {}\n     }\n-    oldvisit::visit_ty(aty, (cx, v));\n+    visit::walk_ty(v, aty, cx);\n }\n \n // Calls \"any_missing\" if any bounds were missing."}]}