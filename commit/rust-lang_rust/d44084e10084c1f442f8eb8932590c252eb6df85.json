{"sha": "d44084e10084c1f442f8eb8932590c252eb6df85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDA4NGUxMDA4NGMxZjQ0MmY4ZWI4OTMyNTkwYzI1MmViNmRmODU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-15T15:21:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-18T00:54:11Z"}, "message": "implement set union", "tree": {"sha": "14b79ff69ffc3d0b79bf6f99c0f4ce5bb5c6d0f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b79ff69ffc3d0b79bf6f99c0f4ce5bb5c6d0f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d44084e10084c1f442f8eb8932590c252eb6df85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d44084e10084c1f442f8eb8932590c252eb6df85", "html_url": "https://github.com/rust-lang/rust/commit/d44084e10084c1f442f8eb8932590c252eb6df85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d44084e10084c1f442f8eb8932590c252eb6df85/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8caba2fcef43fa9c84443c9db16c4b6f2131c3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8caba2fcef43fa9c84443c9db16c4b6f2131c3a", "html_url": "https://github.com/rust-lang/rust/commit/b8caba2fcef43fa9c84443c9db16c4b6f2131c3a"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "102949797b11b16c8afdb2e60244367ef708ba29", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d44084e10084c1f442f8eb8932590c252eb6df85/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44084e10084c1f442f8eb8932590c252eb6df85/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=d44084e10084c1f442f8eb8932590c252eb6df85", "patch": "@@ -301,15 +301,38 @@ impl <T: Ord> TreeSet<T> {\n     }\n \n     /// Visit the values (in-order) representing the union\n-    pure fn union(&self, other: &TreeSet<T>, _f: fn(&T) -> bool) {\n+    pure fn union(&self, other: &TreeSet<T>, f: fn(&T) -> bool) {\n         unsafe { // purity workaround\n             let mut x = self.map.iter();\n             let mut y = other.map.iter();\n \n             let mut a = x.next();\n             let mut b = y.next();\n+\n+            while a.is_some() {\n+                if b.is_none() {\n+                    while a.is_some() {\n+                        let (a1, _) = a.unwrap();\n+                        if !f(a1) { return }\n+                        a = x.next();\n+                    }\n+                }\n+\n+                let (a1, _) = a.unwrap();\n+                let (b1, _) = b.unwrap();\n+\n+                if b1 < a1 {\n+                    if !f(b1) { return }\n+                    b = y.next();\n+                } else {\n+                    if !f(a1) { return }\n+                    if !(a1 < b1) {\n+                        b = y.next()\n+                    }\n+                    a = x.next();\n+                }\n+            }\n         }\n-        fail ~\"not yet implemented\"\n     }\n }\n \n@@ -866,7 +889,35 @@ mod test_set {\n         let mut i = 0;\n         let expected = [1, 5, 11];\n         for a.difference(&b) |x| {\n-            io::println(fmt!(\"%?\", x));\n+            assert *x == expected[i];\n+            i += 1\n+        }\n+        assert i == expected.len();\n+    }\n+\n+    #[test]\n+    fn test_union() {\n+        let mut a = TreeSet::new();\n+        let mut b = TreeSet::new();\n+\n+        assert a.insert(1);\n+        assert a.insert(3);\n+        assert a.insert(5);\n+        assert a.insert(9);\n+        assert a.insert(11);\n+        assert a.insert(16);\n+        assert a.insert(19);\n+\n+        assert b.insert(-2);\n+        assert b.insert(1);\n+        assert b.insert(5);\n+        assert b.insert(9);\n+        assert b.insert(13);\n+        assert b.insert(19);\n+\n+        let mut i = 0;\n+        let expected = [-2, 1, 3, 5, 9, 11, 13, 16, 19];\n+        for a.union(&b) |x| {\n             assert *x == expected[i];\n             i += 1\n         }"}]}