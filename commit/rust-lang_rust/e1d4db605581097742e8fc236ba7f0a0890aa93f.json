{"sha": "e1d4db605581097742e8fc236ba7f0a0890aa93f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZDRkYjYwNTU4MTA5Nzc0MmU4ZmMyMzZiYTdmMGEwODkwYWE5M2Y=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-07-05T21:33:27Z"}, "committer": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-07-05T21:33:27Z"}, "message": "Add benchmark for slice is_ascii using align_to", "tree": {"sha": "d6f8528c8a44d3986870a03db27805964a37f660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6f8528c8a44d3986870a03db27805964a37f660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d4db605581097742e8fc236ba7f0a0890aa93f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d4db605581097742e8fc236ba7f0a0890aa93f", "html_url": "https://github.com/rust-lang/rust/commit/e1d4db605581097742e8fc236ba7f0a0890aa93f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d4db605581097742e8fc236ba7f0a0890aa93f/comments", "author": null, "committer": null, "parents": [{"sha": "63e2e2e32674ebe662b927c139931ffd8a352313", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e2e2e32674ebe662b927c139931ffd8a352313", "html_url": "https://github.com/rust-lang/rust/commit/63e2e2e32674ebe662b927c139931ffd8a352313"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "61763dd8268a488b500e66669be29ed3bbfb32c1", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1d4db605581097742e8fc236ba7f0a0890aa93f/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d4db605581097742e8fc236ba7f0a0890aa93f/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=e1d4db605581097742e8fc236ba7f0a0890aa93f", "patch": "@@ -74,8 +74,9 @@ macro_rules! benches {\n                 #[bench]\n                 fn $name(bencher: &mut Bencher) {\n                     bencher.bytes = $input.len() as u64;\n-                    let vec = $input.as_bytes().to_vec();\n+                    let mut vec = $input.as_bytes().to_vec();\n                     bencher.iter(|| {\n+                        black_box(&mut vec);\n                         let $arg = black_box(&vec[..]);\n                         black_box($body)\n                     })\n@@ -278,6 +279,28 @@ benches! {\n     fn is_ascii_slice_iter_all(bytes: &[u8]) {\n         bytes.iter().all(|b| b.is_ascii())\n     }\n+\n+    fn is_ascii_slice_align_to(bytes: &[u8]) {\n+        is_ascii_align_to_impl(bytes)\n+    }\n+}\n+\n+// Separate since it's easier to debug errors if they don't go through macro\n+// expansion first.\n+fn is_ascii_align_to_impl(bytes: &[u8]) -> bool {\n+    if bytes.len() < core::mem::size_of::<usize>() {\n+        return bytes.iter().all(|b| b.is_ascii());\n+    }\n+    let (head, body, tail) = unsafe { bytes.align_to::<usize>() };\n+    head.iter().all(|b| b.is_ascii()) &&\n+    body.iter().all(|w| !contains_nonascii(*w)) &&\n+    tail.iter().all(|b| b.is_ascii())\n+}\n+\n+#[inline]\n+fn contains_nonascii(v: usize) -> bool {\n+    const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n+    (NONASCII_MASK & v) != 0\n }\n \n macro_rules! repeat {"}]}