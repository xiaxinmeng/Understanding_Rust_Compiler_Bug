{"sha": "1594c6c650dfbb9606ead602548b96997d507f64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTRjNmM2NTBkZmJiOTYwNmVhZDYwMjU0OGI5Njk5N2Q1MDdmNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-26T14:30:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-26T14:30:30Z"}, "message": "Auto merge of #51052 - nikomatsakis:obsolete-arrow, r=petrochenkov\n\nrestore emplacement syntax (obsolete)\n\nFix https://github.com/rust-lang/rust/issues/50832\n\nr? @petrochenkov", "tree": {"sha": "f52ab926a396ac7bb5ec505171f27a45f065a443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f52ab926a396ac7bb5ec505171f27a45f065a443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1594c6c650dfbb9606ead602548b96997d507f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1594c6c650dfbb9606ead602548b96997d507f64", "html_url": "https://github.com/rust-lang/rust/commit/1594c6c650dfbb9606ead602548b96997d507f64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1594c6c650dfbb9606ead602548b96997d507f64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0e6a837fd597bfc9b7765c53f1c62a12b57779", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0e6a837fd597bfc9b7765c53f1c62a12b57779", "html_url": "https://github.com/rust-lang/rust/commit/7a0e6a837fd597bfc9b7765c53f1c62a12b57779"}, {"sha": "626818fc42cbcd50305daf79f83c3cfa24d6073f", "url": "https://api.github.com/repos/rust-lang/rust/commits/626818fc42cbcd50305daf79f83c3cfa24d6073f", "html_url": "https://github.com/rust-lang/rust/commit/626818fc42cbcd50305daf79f83c3cfa24d6073f"}], "stats": {"total": 104, "additions": 98, "deletions": 6}, "files": [{"sha": "99857bd26a92fbe3af3fb36443a29ff0b20f77d8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -2906,7 +2906,10 @@ impl<'a> LoweringContext<'a> {\n     fn lower_expr(&mut self, e: &Expr) -> hir::Expr {\n         let kind = match e.node {\n             ExprKind::Box(ref inner) => hir::ExprBox(P(self.lower_expr(inner))),\n-\n+            ExprKind::ObsoleteInPlace(..) => {\n+                self.sess.abort_if_errors();\n+                span_bug!(e.span, \"encountered ObsoleteInPlace expr during lowering\");\n+            }\n             ExprKind::Array(ref exprs) => {\n                 hir::ExprArray(exprs.iter().map(|x| self.lower_expr(x)).collect())\n             }"}, {"sha": "abbd399a944a0c206958269c198f11883413a4eb", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -172,6 +172,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n                 span_err!(self.session, expr.span, E0472, \"asm! is unsupported on this target\");\n             }\n+            ExprKind::ObsoleteInPlace(..) => {\n+                self.err_handler()\n+                    .struct_span_err(expr.span, \"emplacement syntax is obsolete (for now, anyway)\")\n+                    .note(\"for more information, see \\\n+                           <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\")\n+                    .emit();\n+            }\n             _ => {}\n         }\n "}, {"sha": "df7d4807c5cd2887c18b71b9c6455e858c13cfcd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -1010,6 +1010,7 @@ impl Expr {\n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.node {\n             ExprKind::Box(_) => ExprPrecedence::Box,\n+            ExprKind::ObsoleteInPlace(..) => ExprPrecedence::ObsoleteInPlace,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n             ExprKind::MethodCall(..) => ExprPrecedence::MethodCall,\n@@ -1068,6 +1069,8 @@ pub enum RangeLimits {\n pub enum ExprKind {\n     /// A `box x` expression.\n     Box(P<Expr>),\n+    /// First expr is the place; second expr is the value.\n+    ObsoleteInPlace(P<Expr>, P<Expr>),\n     /// An array (`[a, b, c, d]`)\n     Array(Vec<P<Expr>>),\n     /// A function call"}, {"sha": "6d1b415587f30dd66428aa4c12dedf4509824d9b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -1690,6 +1690,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, type_ascription, e.span,\n                                   \"type ascription is experimental\");\n             }\n+            ast::ExprKind::ObsoleteInPlace(..) => {\n+                // these get a hard error in ast-validation\n+            }\n             ast::ExprKind::Yield(..) => {\n                 gate_feature_post!(&self, generators,\n                                   e.span,"}, {"sha": "ecb4332379d3a37b0417ebf9b69dd7cefa2bf9ff", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -1194,6 +1194,9 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n             ExprKind::Box(e) => {\n                 ExprKind::Box(folder.fold_expr(e))\n             }\n+            ExprKind::ObsoleteInPlace(a, b) => {\n+                ExprKind::ObsoleteInPlace(folder.fold_expr(a), folder.fold_expr(b))\n+            }\n             ExprKind::Array(exprs) => {\n                 ExprKind::Array(folder.fold_exprs(exprs))\n             }"}, {"sha": "2c246d75b52aa296db338b2b235d02f78e097f7e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -2839,6 +2839,17 @@ impl<'a> Parser<'a> {\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n                 (lo.to(span), ExprKind::AddrOf(m, e))\n             }\n+            token::Ident(..) if self.token.is_keyword(keywords::In) => {\n+                self.bump();\n+                let place = self.parse_expr_res(\n+                    Restrictions::NO_STRUCT_LITERAL,\n+                    None,\n+                )?;\n+                let blk = self.parse_block()?;\n+                let span = blk.span;\n+                let blk_expr = self.mk_expr(span, ExprKind::Block(blk, None), ThinVec::new());\n+                (lo.to(span), ExprKind::ObsoleteInPlace(place, blk_expr))\n+            }\n             token::Ident(..) if self.token.is_keyword(keywords::Box) => {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n@@ -3042,6 +3053,8 @@ impl<'a> Parser<'a> {\n                 }\n                 AssocOp::Assign =>\n                     self.mk_expr(span, ExprKind::Assign(lhs, rhs), ThinVec::new()),\n+                AssocOp::ObsoleteInPlace =>\n+                    self.mk_expr(span, ExprKind::ObsoleteInPlace(lhs, rhs), ThinVec::new()),\n                 AssocOp::AssignOp(k) => {\n                     let aop = match k {\n                         token::Plus =>    BinOpKind::Add,"}, {"sha": "7ce159488330818eeded52d03c8788ef1c5e5f4e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -2057,6 +2057,13 @@ impl<'a> State<'a> {\n                 self.word_space(\"box\")?;\n                 self.print_expr_maybe_paren(expr, parser::PREC_PREFIX)?;\n             }\n+            ast::ExprKind::ObsoleteInPlace(ref place, ref expr) => {\n+                let prec = AssocOp::ObsoleteInPlace.precedence() as i8;\n+                self.print_expr_maybe_paren(place, prec + 1)?;\n+                self.s.space()?;\n+                self.word_space(\"<-\")?;\n+                self.print_expr_maybe_paren(expr, prec)?;\n+            }\n             ast::ExprKind::Array(ref exprs) => {\n                 self.print_expr_vec(&exprs[..], attrs)?;\n             }"}, {"sha": "51b535275d649e7c73b96af0d66087040e493c66", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -56,6 +56,8 @@ pub enum AssocOp {\n     GreaterEqual,\n     /// `=`\n     Assign,\n+    /// `<-`\n+    ObsoleteInPlace,\n     /// `?=` where ? is one of the BinOpToken\n     AssignOp(BinOpToken),\n     /// `as`\n@@ -84,6 +86,7 @@ impl AssocOp {\n         use self::AssocOp::*;\n         match *t {\n             Token::BinOpEq(k) => Some(AssignOp(k)),\n+            Token::LArrow => Some(ObsoleteInPlace),\n             Token::Eq => Some(Assign),\n             Token::BinOp(BinOpToken::Star) => Some(Multiply),\n             Token::BinOp(BinOpToken::Slash) => Some(Divide),\n@@ -153,6 +156,7 @@ impl AssocOp {\n             LAnd => 6,\n             LOr => 5,\n             DotDot | DotDotEq => 4,\n+            ObsoleteInPlace => 3,\n             Assign | AssignOp(_) => 2,\n         }\n     }\n@@ -162,7 +166,7 @@ impl AssocOp {\n         use self::AssocOp::*;\n         // NOTE: it is a bug to have an operators that has same precedence but different fixities!\n         match *self {\n-            Assign | AssignOp(_) => Fixity::Right,\n+            ObsoleteInPlace | Assign | AssignOp(_) => Fixity::Right,\n             As | Multiply | Divide | Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd |\n             BitXor | BitOr | Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual |\n             LAnd | LOr | Colon => Fixity::Left,\n@@ -174,16 +178,16 @@ impl AssocOp {\n         use self::AssocOp::*;\n         match *self {\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual => true,\n-            Assign | AssignOp(_) | As | Multiply | Divide | Modulus | Add | Subtract |\n-            ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd | LOr |\n+            ObsoleteInPlace | Assign | AssignOp(_) | As | Multiply | Divide | Modulus | Add |\n+            Subtract | ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd | LOr |\n             DotDot | DotDotEq | Colon => false\n         }\n     }\n \n     pub fn is_assign_like(&self) -> bool {\n         use self::AssocOp::*;\n         match *self {\n-            Assign | AssignOp(_) => true,\n+            Assign | AssignOp(_) | ObsoleteInPlace => true,\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual | As | Multiply | Divide |\n             Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd |\n             LOr | DotDot | DotDotEq | Colon => false\n@@ -211,7 +215,7 @@ impl AssocOp {\n             BitOr => Some(BinOpKind::BitOr),\n             LAnd => Some(BinOpKind::And),\n             LOr => Some(BinOpKind::Or),\n-            Assign | AssignOp(_) | As | DotDot | DotDotEq | Colon => None\n+            ObsoleteInPlace | Assign | AssignOp(_) | As | DotDot | DotDotEq | Colon => None\n         }\n     }\n }\n@@ -238,6 +242,7 @@ pub enum ExprPrecedence {\n \n     Binary(BinOpKind),\n \n+    ObsoleteInPlace,\n     Cast,\n     Type,\n \n@@ -304,6 +309,7 @@ impl ExprPrecedence {\n \n             // Binop-like expr kinds, handled by `AssocOp`.\n             ExprPrecedence::Binary(op) => AssocOp::from_ast_binop(op).precedence() as i8,\n+            ExprPrecedence::ObsoleteInPlace => AssocOp::ObsoleteInPlace.precedence() as i8,\n             ExprPrecedence::Cast => AssocOp::As.precedence() as i8,\n             ExprPrecedence::Type => AssocOp::Colon.precedence() as i8,\n "}, {"sha": "fdf8e52bbddd75bd6ee4d515bb24a087ebd90ceb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -660,6 +660,10 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Box(ref subexpression) => {\n             visitor.visit_expr(subexpression)\n         }\n+        ExprKind::ObsoleteInPlace(ref place, ref subexpression) => {\n+            visitor.visit_expr(place);\n+            visitor.visit_expr(subexpression)\n+        }\n         ExprKind::Array(ref subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }"}, {"sha": "f870c09d6e52ce6352ef7d9c1fdc138ed764c40d", "filename": "src/test/ui/obsolete-in-place/bad.bad.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.bad.stderr?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -0,0 +1,18 @@\n+error: emplacement syntax is obsolete (for now, anyway)\n+  --> $DIR/bad.rs:19:5\n+   |\n+LL |     x <- y; //[bad]~ ERROR emplacement syntax is obsolete\n+   |     ^^^^^^\n+   |\n+   = note: for more information, see <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\n+\n+error: emplacement syntax is obsolete (for now, anyway)\n+  --> $DIR/bad.rs:20:5\n+   |\n+LL |     in(foo) { bar }; //[bad]~ ERROR emplacement syntax is obsolete\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "21993e43331a61328ea3653cdaa01a442c786d9b", "filename": "src/test/ui/obsolete-in-place/bad.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1594c6c650dfbb9606ead602548b96997d507f64/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594c6c650dfbb9606ead602548b96997d507f64/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.rs?ref=1594c6c650dfbb9606ead602548b96997d507f64", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that `<-` and `in` syntax gets a hard error.\n+\n+// revisions: good bad\n+//[good] run-pass\n+\n+#[cfg(bad)]\n+fn main() {\n+    let (x, y, foo, bar);\n+    x <- y; //[bad]~ ERROR emplacement syntax is obsolete\n+    in(foo) { bar }; //[bad]~ ERROR emplacement syntax is obsolete\n+}\n+\n+#[cfg(good)]\n+fn main() {\n+}"}]}