{"sha": "6046f4a673abc39cec5405f51a17e614d5839f26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDZmNGE2NzNhYmMzOWNlYzU0MDVmNTFhMTdlNjE0ZDU4MzlmMjY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-03-27T13:43:29Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-03-27T13:43:29Z"}, "message": "Do not lint `dyn` tokens under macros.\n\nThe existing `KeywordIdents` lint blindly scans the token stream for a\nmacro or macro definition. It does not attempt to parse the input,\nwhich means it cannot distinguish between occurrences of `dyn` that\nare truly instances of it as an identifier (e.g. `let dyn = 3;`)\nversus occurrences that follow its usage as a contextual keyword (e.g.\nthe type `Box<dyn Trait>`).\n\nIn an ideal world the lint would parse the token stream in order to\ndistinguish such occurrences; but in general we cannot do this,\nbecause a macro_rules definition does not specify what parsing\ncontexts the macro being defined is allowed to be used within.\n\nSo rather than put a lot of work into attempting to come up with a\nmore precise but still incomplete solution, I am just taking the short\ncut of not linting any instance of `dyn` under a macro. This prevents\n`rustfix` from injecting bugs into legal 2015 edition code.", "tree": {"sha": "3a3c6dd596a0de01ff949388ab625c79586aa1c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a3c6dd596a0de01ff949388ab625c79586aa1c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6046f4a673abc39cec5405f51a17e614d5839f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6046f4a673abc39cec5405f51a17e614d5839f26", "html_url": "https://github.com/rust-lang/rust/commit/6046f4a673abc39cec5405f51a17e614d5839f26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6046f4a673abc39cec5405f51a17e614d5839f26/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "267fb90b55736dc2362e8621a247f54da5fd8d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/267fb90b55736dc2362e8621a247f54da5fd8d40", "html_url": "https://github.com/rust-lang/rust/commit/267fb90b55736dc2362e8621a247f54da5fd8d40"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "dba8981c8a68029069cf8bf8b753d31bfed24611", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6046f4a673abc39cec5405f51a17e614d5839f26/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6046f4a673abc39cec5405f51a17e614d5839f26/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=6046f4a673abc39cec5405f51a17e614d5839f26", "patch": "@@ -1618,14 +1618,16 @@ impl LintPass for KeywordIdents {\n     }\n }\n \n+struct UnderMacro(bool);\n+\n impl KeywordIdents {\n     fn check_tokens(&mut self, cx: &EarlyContext<'_>, tokens: TokenStream) {\n         for tt in tokens.into_trees() {\n             match tt {\n                 TokenTree::Token(span, tok) => match tok.ident() {\n                     // only report non-raw idents\n                     Some((ident, false)) => {\n-                        self.check_ident(cx, ast::Ident {\n+                        self.check_ident_token(cx, UnderMacro(true), ast::Ident {\n                             span: span.substitute_dummy(ident.span),\n                             ..ident\n                         });\n@@ -1638,16 +1640,12 @@ impl KeywordIdents {\n             }\n         }\n     }\n-}\n \n-impl EarlyLintPass for KeywordIdents {\n-    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n-        self.check_tokens(cx, mac_def.stream());\n-    }\n-    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n-        self.check_tokens(cx, mac.node.tts.clone().into());\n-    }\n-    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n+    fn check_ident_token(&mut self,\n+                         cx: &EarlyContext<'_>,\n+                         UnderMacro(under_macro): UnderMacro,\n+                         ident: ast::Ident)\n+    {\n         let ident_str = &ident.as_str()[..];\n         let cur_edition = cx.sess.edition();\n         let is_raw_ident = |ident: ast::Ident| {\n@@ -1656,7 +1654,22 @@ impl EarlyLintPass for KeywordIdents {\n         let next_edition = match cur_edition {\n             Edition::Edition2015 => {\n                 match ident_str {\n-                    \"async\" | \"try\" | \"dyn\" => Edition::Edition2018,\n+                    \"async\" | \"try\" => Edition::Edition2018,\n+\n+                    // rust-lang/rust#56327: Conservatively do not\n+                    // attempt to report occurrences of `dyn` within\n+                    // macro definitions or invocations, because `dyn`\n+                    // can legitimately occur as a contextual keyword\n+                    // in 2015 code denoting its 2018 meaning, and we\n+                    // do not want rustfix to inject bugs into working\n+                    // code by rewriting such occurrences.\n+                    //\n+                    // But if we see `dyn` outside of a macro, we know\n+                    // its precise role in the parsed AST and thus are\n+                    // assured this is truly an attempt to use it as\n+                    // an identifier.\n+                    \"dyn\" if !under_macro => Edition::Edition2018,\n+\n                     // Only issue warnings for `await` if the `async_await`\n                     // feature isn't being used. Otherwise, users need\n                     // to keep using `await` for the macro exposed by std.\n@@ -1714,6 +1727,18 @@ impl EarlyLintPass for KeywordIdents {\n     }\n }\n \n+impl EarlyLintPass for KeywordIdents {\n+    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n+        self.check_tokens(cx, mac_def.stream());\n+    }\n+    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n+        self.check_tokens(cx, mac.node.tts.clone().into());\n+    }\n+    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n+        self.check_ident_token(cx, UnderMacro(false), ident);\n+    }\n+}\n+\n \n pub struct ExplicitOutlivesRequirements;\n "}]}