{"sha": "345d5b82351f4f8309498aa34b9f0348b898300d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NWQ1YjgyMzUxZjRmODMwOTQ5OGFhMzRiOWYwMzQ4Yjg5ODMwMGQ=", "commit": {"author": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-04-24T20:06:26Z"}, "committer": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-04-24T20:06:26Z"}, "message": "Refactor core::run to remove the ProgRepr struct, which was\na legacy from the time when destructors were implemented\nusing resource types.", "tree": {"sha": "fcff2b058d37763601a8addf4c6bae4934fd3ee4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcff2b058d37763601a8addf4c6bae4934fd3ee4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/345d5b82351f4f8309498aa34b9f0348b898300d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/345d5b82351f4f8309498aa34b9f0348b898300d", "html_url": "https://github.com/rust-lang/rust/commit/345d5b82351f4f8309498aa34b9f0348b898300d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/345d5b82351f4f8309498aa34b9f0348b898300d/comments", "author": null, "committer": null, "parents": [{"sha": "e26f992d5e199a1ff8c26733650d254d63be066a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e26f992d5e199a1ff8c26733650d254d63be066a", "html_url": "https://github.com/rust-lang/rust/commit/e26f992d5e199a1ff8c26733650d254d63be066a"}], "stats": {"total": 117, "additions": 50, "deletions": 67}, "files": [{"sha": "37401788ca2d1bf7c46d5a799a7b30981538f699", "filename": "src/libcore/run.rs", "status": "modified", "additions": 50, "deletions": 67, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/345d5b82351f4f8309498aa34b9f0348b898300d/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345d5b82351f4f8309498aa34b9f0348b898300d/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=345d5b82351f4f8309498aa34b9f0348b898300d", "patch": "@@ -47,16 +47,48 @@ pub struct RunProgramResult {\n     handle: *(),\n }\n \n-struct ProgRepr {\n-    pid: pid_t,\n-    handle: *(),\n-    in_fd: c_int,\n-    out_file: *libc::FILE,\n-    err_file: *libc::FILE,\n-    finished: bool,\n+/// A value representing a child process\n+pub struct Program {\n+    priv pid: pid_t,\n+    priv handle: *(),\n+    priv in_fd: c_int,\n+    priv out_file: *libc::FILE,\n+    priv err_file: *libc::FILE,\n+    priv finished: bool,\n+}\n+\n+impl Drop for Program {\n+    fn finalize(&self) {\n+        // FIXME #4943: transmute is bad.\n+        let mut_self: &mut Program = unsafe { cast::transmute(self) };\n+\n+        mut_self.finish();\n+        mut_self.close_outputs();\n+        free_handle(self.handle);\n+    }\n }\n \n-impl ProgRepr {\n+pub impl Program {\n+\n+    /// Returns the process id of the program\n+    fn get_id(&mut self) -> pid_t { self.pid }\n+\n+    /// Returns an io::Writer that can be used to write to stdin\n+    fn input(&mut self) -> @io::Writer {\n+        io::fd_writer(self.in_fd, false)\n+    }\n+\n+    /// Returns an io::Reader that can be used to read from stdout\n+    fn output(&mut self) -> @io::Reader {\n+        io::FILE_reader(self.out_file, false)\n+    }\n+\n+    /// Returns an io::Reader that can be used to read from stderr\n+    fn err(&mut self) -> @io::Reader {\n+        io::FILE_reader(self.err_file, false)\n+    }\n+\n+    /// Closes the handle to the child processes standard input\n     fn close_input(&mut self) {\n         let invalid_fd = -1i32;\n         if self.in_fd != invalid_fd {\n@@ -67,21 +99,25 @@ impl ProgRepr {\n         }\n     }\n \n-    fn close_outputs(&mut self) {\n+    priv fn close_outputs(&mut self) {\n         unsafe {\n             fclose_and_null(&mut self.out_file);\n             fclose_and_null(&mut self.err_file);\n         }\n     }\n \n+    /**\n+     * Waits for the child process to terminate. Closes the handle\n+     * to stdin if necessary.\n+     */\n     fn finish(&mut self) -> int {\n         if self.finished { return 0; }\n         self.finished = true;\n         self.close_input();\n         return waitpid(self.pid);\n     }\n \n-    fn destroy(&mut self, force: bool) {\n+    priv fn destroy_internal(&mut self, force: bool) {\n         killpid(self.pid, force);\n         self.finish();\n         self.close_outputs();\n@@ -107,57 +143,6 @@ impl ProgRepr {\n             }\n         }\n     }\n-}\n-\n-/// A value representing a child process\n-pub struct Program {\n-    priv r: ProgRepr,\n-}\n-\n-impl Drop for Program {\n-    fn finalize(&self) {\n-        // FIXME #4943: transmute is bad.\n-        let selfr: &mut ProgRepr = unsafe { cast::transmute(&self.r) };\n-\n-        selfr.finish();\n-        selfr.close_outputs();\n-        free_handle(self.r.handle);\n-    }\n-}\n-\n-pub impl Program {\n-    priv fn new(r: ProgRepr) -> Program {\n-        Program {\n-            r: r\n-        }\n-    }\n-\n-    /// Returns the process id of the program\n-    fn get_id(&mut self) -> pid_t { self.r.pid }\n-\n-    /// Returns an io::Writer that can be used to write to stdin\n-    fn input(&mut self) -> @io::Writer {\n-        io::fd_writer(self.r.in_fd, false)\n-    }\n-\n-    /// Returns an io::Reader that can be used to read from stdout\n-    fn output(&mut self) -> @io::Reader {\n-        io::FILE_reader(self.r.out_file, false)\n-    }\n-\n-    /// Returns an io::Reader that can be used to read from stderr\n-    fn err(&mut self) -> @io::Reader {\n-        io::FILE_reader(self.r.err_file, false)\n-    }\n-\n-    /// Closes the handle to the child processes standard input\n-    fn close_input(&mut self) { self.r.close_input(); }\n-\n-    /**\n-     * Waits for the child process to terminate. Closes the handle\n-     * to stdin if necessary.\n-     */\n-    fn finish(&mut self) -> int { self.r.finish() }\n \n     /**\n      * Terminate the program, giving it a chance to clean itself up if\n@@ -166,7 +151,7 @@ pub impl Program {\n      * On Posix OSs SIGTERM will be sent to the process. On Win32\n      * TerminateProcess(..) will be called.\n      */\n-    fn destroy(&mut self) { self.r.destroy(false); }\n+    fn destroy(&mut self) { self.destroy_internal(false); }\n \n     /**\n      * Terminate the program as soon as possible without giving it a\n@@ -175,7 +160,7 @@ pub impl Program {\n      * On Posix OSs SIGKILL will be sent to the process. On Win32\n      * TerminateProcess(..) will be called.\n      */\n-    fn force_destroy(&mut self) { self.r.destroy(true); }\n+    fn force_destroy(&mut self) { self.destroy_internal(true); }\n }\n \n \n@@ -366,16 +351,14 @@ pub fn start_program(prog: &str, args: &[~str]) -> Program {\n         libc::close(pipe_err.out);\n     }\n \n-    let repr = ProgRepr {\n+    Program {\n         pid: res.pid,\n         handle: res.handle,\n         in_fd: pipe_input.out,\n         out_file: os::fdopen(pipe_output.in),\n         err_file: os::fdopen(pipe_err.in),\n         finished: false,\n-    };\n-\n-    Program::new(repr)\n+    }\n }\n \n fn read_all(rd: @io::Reader) -> ~str {"}]}