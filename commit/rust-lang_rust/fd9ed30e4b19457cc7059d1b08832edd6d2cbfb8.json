{"sha": "fd9ed30e4b19457cc7059d1b08832edd6d2cbfb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOWVkMzBlNGIxOTQ1N2NjNzA1OWQxYjA4ODMyZWRkNmQyY2JmYjg=", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2020-06-15T20:30:13Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2020-06-15T20:30:13Z"}, "message": "asm: Update chapter in unstable book for multiple template string arguments\n\nUpdate all examples to use the new formatting, and update explanations\nto document it.", "tree": {"sha": "b9bdd02c2b1cfe369bb642e21c1f3495ec14afee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9bdd02c2b1cfe369bb642e21c1f3495ec14afee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd9ed30e4b19457cc7059d1b08832edd6d2cbfb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9ed30e4b19457cc7059d1b08832edd6d2cbfb8", "html_url": "https://github.com/rust-lang/rust/commit/fd9ed30e4b19457cc7059d1b08832edd6d2cbfb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd9ed30e4b19457cc7059d1b08832edd6d2cbfb8/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1078b6f9420c47fe99553d9dd8a58b232ba84b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1078b6f9420c47fe99553d9dd8a58b232ba84b5e", "html_url": "https://github.com/rust-lang/rust/commit/1078b6f9420c47fe99553d9dd8a58b232ba84b5e"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "ed3f8508669d284919bed90a0aa6a6e9f6b0079c", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/fd9ed30e4b19457cc7059d1b08832edd6d2cbfb8/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd9ed30e4b19457cc7059d1b08832edd6d2cbfb8/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=fd9ed30e4b19457cc7059d1b08832edd6d2cbfb8", "patch": "@@ -68,10 +68,13 @@ Let us see another example that also uses an input:\n let i: u64 = 3;\n let o: u64;\n unsafe {\n-    asm!(\"\n-        mov {0}, {1}\n-        add {0}, {number}\n-    \", out(reg) o, in(reg) i, number = const 5);\n+    asm!(\n+        \"mov {0}, {1}\",\n+        \"add {0}, {number}\",\n+        out(reg) o,\n+        in(reg) i,\n+        number = const 5,\n+    );\n }\n assert_eq!(o, 8);\n ```\n@@ -82,13 +85,18 @@ and then adding `5` to it.\n \n The example shows a few things:\n \n-First we can see that inputs are declared by writing `in` instead of `out`.\n+First, we can see that `asm!` allows multiple template string arguments; each\n+one is treated as a separate line of assembly code, as if they were all joined\n+together with newlines between them. This makes it easy to format assembly\n+code.\n+\n+Second, we can see that inputs are declared by writing `in` instead of `out`.\n \n-Second one of our operands has a type we haven't seen yet, `const`.\n+Third, one of our operands has a type we haven't seen yet, `const`.\n This tells the compiler to expand this argument to value directly inside the assembly template.\n This is only possible for constants and literals.\n \n-Third we can see that we can specify an argument number, or name as in any format string.\n+Fourth, we can see that we can specify an argument number, or name as in any format string.\n For inline assembly templates this is particularly useful as arguments are often used more than once.\n For more complex inline assembly using this facility is generally recommended, as it improves\n readability, and allows reordering instructions without changing the argument order.\n@@ -137,10 +145,13 @@ let mut a: u64 = 4;\n let b: u64 = 4;\n let c: u64 = 4;\n unsafe {\n-    asm!(\"\n-        add {0}, {1}\n-        add {0}, {2}\n-    \", inout(reg) a, in(reg) b, in(reg) c);\n+    asm!(\n+        \"add {0}, {1}\",\n+        \"add {0}, {2}\",\n+        inout(reg) a,\n+        in(reg) b,\n+        in(reg) c,\n+    );\n }\n assert_eq!(a, 12);\n ```\n@@ -233,7 +244,7 @@ unsafe {\n         // ECX 0 selects the L0 cache information.\n         inout(\"ecx\") 0 => ecx,\n         lateout(\"ebx\") ebx,\n-        lateout(\"edx\") _\n+        lateout(\"edx\") _,\n     );\n }\n \n@@ -255,12 +266,14 @@ This can also be used with a general register class (e.g. `reg`) to obtain a scr\n // Multiply x by 6 using shifts and adds\n let mut x: u64 = 4;\n unsafe {\n-    asm!(\"\n-        mov {tmp}, {x}\n-        shl {tmp}, 1\n-        shl {x}, 2\n-        add {x}, {tmp}\n-    \", x = inout(reg) x, tmp = out(reg) _);\n+    asm!(\n+        \"mov {tmp}, {x}\",\n+        \"shl {tmp}, 1\",\n+        \"shl {x}, 2\",\n+        \"add {x}, {tmp}\",\n+        x = inout(reg) x,\n+        tmp = out(reg) _,\n+    );\n }\n assert_eq!(x, 4 * 6);\n ```\n@@ -338,7 +351,7 @@ unsafe {\n     asm!(\n         \"add {0}, {1}\",\n         inlateout(reg) a, in(reg) b,\n-        options(pure, nomem, nostack)\n+        options(pure, nomem, nostack),\n     );\n }\n assert_eq!(a, 8);\n@@ -371,17 +384,19 @@ reg_operand := dir_spec \"(\" reg_spec \")\" operand_expr\n operand := reg_operand / \"const\" const_expr / \"sym\" path\n option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"att_syntax\"\n options := \"options(\" option *[\",\" option] [\",\"] \")\"\n-asm := \"asm!(\" format_string *(\",\" [ident \"=\"] operand) [\",\" options] [\",\"] \")\"\n+asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" options] [\",\"] \")\"\n ```\n \n The macro will initially be supported only on ARM, AArch64, x86, x86-64 and RISC-V targets. Support for more targets may be added in the future. The compiler will emit an error if `asm!` is used on an unsupported target.\n \n [format-syntax]: https://doc.rust-lang.org/std/fmt/#syntax\n \n-## Template string\n+## Template string arguments\n \n The assembler template uses the same syntax as [format strings][format-syntax] (i.e. placeholders are specified by curly braces). The corresponding arguments are accessed in order, by index, or by name. However, implicit named arguments (introduced by [RFC #2795][rfc-2795]) are not supported.\n \n+An `asm!` invocation may have one or more template string arguments; an `asm!` with multiple template string arguments is treated as if all the strings were concatenated with a `\\n` between them. The expected usage is for each template string argument to correspond to a line of assembly code. All template string arguments must appear before any other arguments.\n+\n As with format strings, named arguments must appear after positional arguments. Explicit register operands must appear at the end of the operand list, after named arguments if any.\n \n Explicit register operands cannot be used by placeholders in the template string. All other named and positional operands must appear at least once in the template string, otherwise a compiler error is generated."}]}