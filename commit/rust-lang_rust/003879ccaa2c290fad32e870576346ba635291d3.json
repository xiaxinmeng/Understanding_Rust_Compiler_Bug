{"sha": "003879ccaa2c290fad32e870576346ba635291d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMzg3OWNjYWEyYzI5MGZhZDMyZTg3MDU3NjM0NmJhNjM1MjkxZDM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-09T20:30:52Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-12T18:28:42Z"}, "message": "Autoderef in librustc_passes", "tree": {"sha": "b523713e02d56aea3af057811c057f61b88b8abc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b523713e02d56aea3af057811c057f61b88b8abc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003879ccaa2c290fad32e870576346ba635291d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003879ccaa2c290fad32e870576346ba635291d3", "html_url": "https://github.com/rust-lang/rust/commit/003879ccaa2c290fad32e870576346ba635291d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003879ccaa2c290fad32e870576346ba635291d3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d12adae719ad6cd1bfc4cfe3fc5d20b09757290a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d12adae719ad6cd1bfc4cfe3fc5d20b09757290a", "html_url": "https://github.com/rust-lang/rust/commit/d12adae719ad6cd1bfc4cfe3fc5d20b09757290a"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "50dd33ca993cf42454b737ad7e1294faedf51603", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/003879ccaa2c290fad32e870576346ba635291d3/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003879ccaa2c290fad32e870576346ba635291d3/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=003879ccaa2c290fad32e870576346ba635291d3", "patch": "@@ -266,20 +266,20 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n         assert_eq!(self.mode, Mode::Var);\n         match i.node {\n             hir::ItemStatic(_, hir::MutImmutable, ref expr) => {\n-                self.check_static_type(&**expr);\n-                self.global_expr(Mode::Static, &**expr);\n+                self.check_static_type(&expr);\n+                self.global_expr(Mode::Static, &expr);\n             }\n             hir::ItemStatic(_, hir::MutMutable, ref expr) => {\n-                self.check_static_mut_type(&**expr);\n-                self.global_expr(Mode::StaticMut, &**expr);\n+                self.check_static_mut_type(&expr);\n+                self.global_expr(Mode::StaticMut, &expr);\n             }\n             hir::ItemConst(_, ref expr) => {\n-                self.global_expr(Mode::Const, &**expr);\n+                self.global_expr(Mode::Const, &expr);\n             }\n             hir::ItemEnum(ref enum_definition, _) => {\n                 for var in &enum_definition.variants {\n                     if let Some(ref ex) = var.node.disr_expr {\n-                        self.global_expr(Mode::Const, &**ex);\n+                        self.global_expr(Mode::Const, &ex);\n                     }\n                 }\n             }\n@@ -293,7 +293,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n         match t.node {\n             hir::ConstTraitItem(_, ref default) => {\n                 if let Some(ref expr) = *default {\n-                    self.global_expr(Mode::Const, &*expr);\n+                    self.global_expr(Mode::Const, &expr);\n                 } else {\n                     intravisit::walk_trait_item(self, t);\n                 }\n@@ -305,7 +305,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n     fn visit_impl_item(&mut self, i: &'v hir::ImplItem) {\n         match i.node {\n             hir::ImplItemKind::Const(_, ref expr) => {\n-                self.global_expr(Mode::Const, &*expr);\n+                self.global_expr(Mode::Const, &expr);\n             }\n             _ => self.with_mode(Mode::Var, |v| intravisit::walk_impl_item(v, i)),\n         }\n@@ -323,11 +323,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n     fn visit_pat(&mut self, p: &hir::Pat) {\n         match p.node {\n             hir::PatLit(ref lit) => {\n-                self.global_expr(Mode::Const, &**lit);\n+                self.global_expr(Mode::Const, &lit);\n             }\n             hir::PatRange(ref start, ref end) => {\n-                self.global_expr(Mode::Const, &**start);\n-                self.global_expr(Mode::Const, &**end);\n+                self.global_expr(Mode::Const, &start);\n+                self.global_expr(Mode::Const, &end);\n \n                 match const_eval::compare_lit_exprs(self.tcx, start, end) {\n                     Some(Ordering::Less) |\n@@ -379,17 +379,17 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n         match ex.node {\n             hir::ExprCall(ref callee, ref args) => {\n                 for arg in args {\n-                    self.visit_expr(&**arg)\n+                    self.visit_expr(&arg)\n                 }\n \n                 let inner = self.qualif;\n-                self.visit_expr(&**callee);\n+                self.visit_expr(&callee);\n                 // The callee's size doesn't count in the call.\n                 let added = self.qualif - inner;\n                 self.qualif = inner | (added - ConstQualif::NON_ZERO_SIZED);\n             }\n             hir::ExprRepeat(ref element, _) => {\n-                self.visit_expr(&**element);\n+                self.visit_expr(&element);\n                 // The count is checked elsewhere (typeck).\n                 let count = match node_ty.sty {\n                     ty::TyArray(_, n) => n,\n@@ -631,7 +631,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n             loop {\n                 callee = match callee.node {\n                     hir::ExprBlock(ref block) => match block.expr {\n-                        Some(ref tail) => &**tail,\n+                        Some(ref tail) => &tail,\n                         None => break\n                     },\n                     _ => break"}, {"sha": "a89627aea82fbc50a46af29c5f5657f0cb85ed5c", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003879ccaa2c290fad32e870576346ba635291d3/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003879ccaa2c290fad32e870576346ba635291d3/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=003879ccaa2c290fad32e870576346ba635291d3", "patch": "@@ -42,14 +42,14 @@ impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n     fn visit_expr(&mut self, e: &hir::Expr) {\n         match e.node {\n             hir::ExprWhile(ref e, ref b, _) => {\n-                self.visit_expr(&**e);\n-                self.with_context(Loop, |v| v.visit_block(&**b));\n+                self.visit_expr(&e);\n+                self.with_context(Loop, |v| v.visit_block(&b));\n             }\n             hir::ExprLoop(ref b, _) => {\n-                self.with_context(Loop, |v| v.visit_block(&**b));\n+                self.with_context(Loop, |v| v.visit_block(&b));\n             }\n             hir::ExprClosure(_, _, ref b) => {\n-                self.with_context(Closure, |v| v.visit_block(&**b));\n+                self.with_context(Closure, |v| v.visit_block(&b));\n             }\n             hir::ExprBreak(_) => self.require_loop(\"break\", e.span),\n             hir::ExprAgain(_) => self.require_loop(\"continue\", e.span),"}]}