{"sha": "82b032571523a14dbd23710d7fe08cb7382ea895", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYjAzMjU3MTUyM2ExNGRiZDIzNzEwZDdmZTA4Y2I3MzgyZWE4OTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-23T20:10:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-23T20:10:59Z"}, "message": "Auto merge of #4946 - lzutao:take, r=flip1995\n\na few minor cleanups\n\nchangelog: none", "tree": {"sha": "7ba38520adda76e57f2031f7a5793e19e809d941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ba38520adda76e57f2031f7a5793e19e809d941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82b032571523a14dbd23710d7fe08cb7382ea895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82b032571523a14dbd23710d7fe08cb7382ea895", "html_url": "https://github.com/rust-lang/rust/commit/82b032571523a14dbd23710d7fe08cb7382ea895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82b032571523a14dbd23710d7fe08cb7382ea895/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b7970a7ce1b44f1cbd485af8d9e0362cf01bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b7970a7ce1b44f1cbd485af8d9e0362cf01bfe", "html_url": "https://github.com/rust-lang/rust/commit/37b7970a7ce1b44f1cbd485af8d9e0362cf01bfe"}, {"sha": "f5b896451ac44fc45bdc78656176f2846f44891a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b896451ac44fc45bdc78656176f2846f44891a", "html_url": "https://github.com/rust-lang/rust/commit/f5b896451ac44fc45bdc78656176f2846f44891a"}], "stats": {"total": 119, "additions": 45, "deletions": 74}, "files": [{"sha": "3aae3e53317721818cbb32e5fdd501c85116400b", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -50,7 +50,7 @@ impl Lint {\n             name: name.to_lowercase(),\n             group: group.to_string(),\n             desc: NL_ESCAPE_RE.replace(&desc.replace(\"\\\\\\\"\", \"\\\"\"), \"\").to_string(),\n-            deprecation: deprecation.map(std::string::ToString::to_string),\n+            deprecation: deprecation.map(ToString::to_string),\n             module: module.to_string(),\n         }\n     }"}, {"sha": "15457e578608646e49938a3c157cd7880b60368e", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -8,8 +8,6 @@ use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc_session::declare_tool_lint;\n use syntax::{ast::*, source_map::DUMMY_SP};\n \n-use cargo_metadata;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks to see if all common metadata is defined in\n     /// `Cargo.toml`. See: https://rust-lang-nursery.github.io/api-guidelines/documentation.html#cargotoml-includes-all-common-metadata-c-metadata\n@@ -56,7 +54,7 @@ fn is_empty_path(value: &Option<PathBuf>) -> bool {\n \n fn is_empty_vec(value: &[String]) -> bool {\n     // This works because empty iterators return true\n-    value.iter().all(std::string::String::is_empty)\n+    value.iter().all(String::is_empty)\n }\n \n declare_lint_pass!(CargoCommonMetadata => [CARGO_COMMON_METADATA]);"}, {"sha": "f1e488a7e6d657a37d8852ff43816eb087323e2f", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -253,7 +253,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     let res = self.tables.qpath_res(qpath, callee.hir_id);\n                     if let Some(def_id) = res.opt_def_id();\n                     let def_path: Vec<_> = self.lcx.get_def_path(def_id).into_iter().map(Symbol::as_str).collect();\n-                    let def_path: Vec<&str> = def_path.iter().map(|s| &**s).collect();\n+                    let def_path: Vec<&str> = def_path.iter().take(4).map(|s| &**s).collect();\n                     if let [\"core\", \"num\", int_impl, \"max_value\"] = *def_path;\n                     then {\n                        let value = match int_impl {"}, {"sha": "75e6cebb5639370994f363eb75db302e469f8fe6", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -1,6 +1,5 @@\n use crate::utils::{match_type, paths, return_ty, span_lint};\n use itertools::Itertools;\n-use pulldown_cmark;\n use rustc::hir;\n use rustc::impl_lint_pass;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "0abe757e3597fd9822f2c6cc2d47bbb0c9ca0765", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -146,11 +146,7 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n }\n \n /// Tries to determine the type for universal function call to be used instead of the closure\n-fn get_ufcs_type_name(\n-    cx: &LateContext<'_, '_>,\n-    method_def_id: def_id::DefId,\n-    self_arg: &Expr,\n-) -> std::option::Option<String> {\n+fn get_ufcs_type_name(cx: &LateContext<'_, '_>, method_def_id: def_id::DefId, self_arg: &Expr) -> Option<String> {\n     let expected_type_of_self = &cx.tcx.fn_sig(method_def_id).inputs_and_output().skip_binder()[0];\n     let actual_type_of_self = &cx.tables.node_type(self_arg.hir_id);\n "}, {"sha": "c3712e13d3fd4232d55564893b18973a0cd267d7", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -47,7 +47,8 @@ extern crate syntax_pos;\n use rustc::lint::{self, LintId};\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashSet;\n-use toml;\n+\n+use std::path::Path;\n \n /// Macro used to declare a Clippy lint.\n ///\n@@ -349,16 +350,16 @@ pub fn read_conf(args: &[syntax::ast::NestedMetaItem], sess: &Session) -> Conf {\n             let file_name = file_name.map(|file_name| {\n                 if file_name.is_relative() {\n                     sess.local_crate_source_file\n-                        .as_ref()\n-                        .and_then(|file| std::path::Path::new(&file).parent().map(std::path::Path::to_path_buf))\n-                        .unwrap_or_default()\n+                        .as_deref()\n+                        .and_then(Path::parent)\n+                        .unwrap_or_else(|| Path::new(\"\"))\n                         .join(file_name)\n                 } else {\n                     file_name\n                 }\n             });\n \n-            let (conf, errors) = utils::conf::read(file_name.as_ref().map(std::convert::AsRef::as_ref));\n+            let (conf, errors) = utils::conf::read(file_name.as_ref().map(AsRef::as_ref));\n \n             // all conf errors are non-fatal, we just use the default conf in case of error\n             for error in errors {"}, {"sha": "427243d4c625e3dced464b3fd8fa4b39de9d993c", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -8,7 +8,6 @@ use rustc::{declare_lint_pass, impl_lint_pass};\n use rustc_errors::Applicability;\n use rustc_session::declare_tool_lint;\n use syntax::ast::*;\n-use syntax_pos;\n \n declare_clippy_lint! {\n     /// **What it does:** Warns if a long integral or floating-point constant does"}, {"sha": "79caf4f5552b3096fb55fb40c12d72c2c3eef9a7", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -6,7 +6,6 @@ use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc_session::declare_tool_lint;\n use syntax::{ast::*, source_map::DUMMY_SP};\n \n-use cargo_metadata;\n use itertools::Itertools;\n \n declare_clippy_lint! {"}, {"sha": "c60912ddb2cac57b7ec61ce42017b80b0a6d3309", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -1,7 +1,6 @@\n use crate::consts::{constant, Constant};\n use crate::utils::{is_expn_of, match_def_path, match_type, paths, span_help_and_lint, span_lint};\n use if_chain::if_chain;\n-use regex_syntax;\n use rustc::hir::*;\n use rustc::impl_lint_pass;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "52223aa7a4bced8c2b1474c2b1eb6f4209c8b811", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -8,7 +8,6 @@ use std::io::Read;\n use std::sync::Mutex;\n use std::{env, fmt, fs, io, path};\n use syntax::{ast, source_map};\n-use toml;\n \n /// Gets the configuration file from arguments.\n pub fn file_from_args(args: &[ast::NestedMetaItem]) -> Result<Option<path::PathBuf>, (&'static str, source_map::Span)> {\n@@ -77,7 +76,6 @@ macro_rules! define_Conf {\n             }\n             $(\n                 mod $rust_name {\n-                    use serde;\n                     use serde::Deserialize;\n                     crate fn deserialize<'de, D: serde::Deserializer<'de>>(deserializer: D)\n                     -> Result<define_Conf!(TY $($ty)+), D::Error> {"}, {"sha": "7050ea4cb2d5c6e1c574a0af391a7189c32bb8b9", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -5,9 +5,7 @@ use crate::utils::{higher, snippet, snippet_opt, snippet_with_macro_callsite};\n use matches::matches;\n use rustc::hir;\n use rustc::lint::{EarlyContext, LateContext, LintContext};\n-use rustc_errors;\n use rustc_errors::Applicability;\n-use std;\n use std::borrow::Cow;\n use std::convert::TryInto;\n use std::fmt::Display;"}, {"sha": "0a302ce04ca83e56dae158f3947a54eb8ecd4df6", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -4,9 +4,7 @@ use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc_session::declare_tool_lint;\n use syntax::{ast::*, source_map::DUMMY_SP};\n \n-use cargo_metadata;\n use if_chain::if_chain;\n-use semver;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for wildcard dependencies in the `Cargo.toml`."}, {"sha": "4a080c12e44b5a090eb4d2316f257b040673e289", "filename": "src/driver.rs", "status": "modified", "additions": 29, "deletions": 40, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -1,5 +1,6 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![feature(rustc_private)]\n+#![feature(str_strip)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n@@ -18,6 +19,8 @@ use rustc_tools_util::*;\n \n use lazy_static::lazy_static;\n use std::borrow::Cow;\n+use std::env;\n+use std::ops::Deref;\n use std::panic;\n use std::path::{Path, PathBuf};\n use std::process::{exit, Command};\n@@ -26,42 +29,38 @@ mod lintlist;\n \n /// If a command-line option matches `find_arg`, then apply the predicate `pred` on its value. If\n /// true, then return it. The parameter is assumed to be either `--arg=value` or `--arg value`.\n-fn arg_value<'a>(\n-    args: impl IntoIterator<Item = &'a String>,\n+fn arg_value<'a, T: Deref<Target = str>>(\n+    args: &'a [T],\n     find_arg: &str,\n     pred: impl Fn(&str) -> bool,\n ) -> Option<&'a str> {\n-    let mut args = args.into_iter().map(String::as_str);\n-\n+    let mut args = args.iter().map(Deref::deref);\n     while let Some(arg) = args.next() {\n-        let arg: Vec<_> = arg.splitn(2, '=').collect();\n-        if arg.get(0) != Some(&find_arg) {\n+        let mut arg = arg.splitn(2, '=');\n+        if arg.next() != Some(find_arg) {\n             continue;\n         }\n \n-        let value = arg.get(1).cloned().or_else(|| args.next());\n-        if value.as_ref().map_or(false, |p| pred(p)) {\n-            return value;\n+        match arg.next().or_else(|| args.next()) {\n+            Some(v) if pred(v) => return Some(v),\n+            _ => {},\n         }\n     }\n     None\n }\n \n #[test]\n fn test_arg_value() {\n-    let args: Vec<_> = [\"--bar=bar\", \"--foobar\", \"123\", \"--foo\"]\n-        .iter()\n-        .map(std::string::ToString::to_string)\n-        .collect();\n-\n-    assert_eq!(arg_value(None, \"--foobar\", |_| true), None);\n-    assert_eq!(arg_value(&args, \"--bar\", |_| false), None);\n-    assert_eq!(arg_value(&args, \"--bar\", |_| true), Some(\"bar\"));\n-    assert_eq!(arg_value(&args, \"--bar\", |p| p == \"bar\"), Some(\"bar\"));\n-    assert_eq!(arg_value(&args, \"--bar\", |p| p == \"foo\"), None);\n-    assert_eq!(arg_value(&args, \"--foobar\", |p| p == \"foo\"), None);\n-    assert_eq!(arg_value(&args, \"--foobar\", |p| p == \"123\"), Some(\"123\"));\n-    assert_eq!(arg_value(&args, \"--foo\", |_| true), None);\n+    let args = &[\"--bar=bar\", \"--foobar\", \"123\", \"--foo\"];\n+\n+    assert_eq!(arg_value(&[] as &[&str], \"--foobar\", |_| true), None);\n+    assert_eq!(arg_value(args, \"--bar\", |_| false), None);\n+    assert_eq!(arg_value(args, \"--bar\", |_| true), Some(\"bar\"));\n+    assert_eq!(arg_value(args, \"--bar\", |p| p == \"bar\"), Some(\"bar\"));\n+    assert_eq!(arg_value(args, \"--bar\", |p| p == \"foo\"), None);\n+    assert_eq!(arg_value(args, \"--foobar\", |p| p == \"foo\"), None);\n+    assert_eq!(arg_value(args, \"--foobar\", |p| p == \"123\"), Some(\"123\"));\n+    assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n }\n \n #[allow(clippy::too_many_lines)]\n@@ -276,7 +275,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     }\n \n     // If backtraces are enabled, also print the query stack\n-    let backtrace = std::env::var_os(\"RUST_BACKTRACE\").map_or(false, |x| &x != \"0\");\n+    let backtrace = env::var_os(\"RUST_BACKTRACE\").map_or(false, |x| &x != \"0\");\n \n     if backtrace {\n         TyCtxt::try_print_query_stack(&handler);\n@@ -288,16 +287,14 @@ pub fn main() {\n     lazy_static::initialize(&ICE_HOOK);\n     exit(\n         rustc_driver::catch_fatal_errors(move || {\n-            use std::env;\n+            let mut orig_args: Vec<String> = env::args().collect();\n \n-            if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+            if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n                 let version_info = rustc_tools_util::get_version_info!();\n                 println!(\"{}\", version_info);\n                 exit(0);\n             }\n \n-            let mut orig_args: Vec<String> = env::args().collect();\n-\n             // Get the sysroot, looking from most specific to this invocation to the least:\n             // - command line\n             // - runtime environment\n@@ -350,7 +347,7 @@ pub fn main() {\n             }\n \n             let should_describe_lints = || {\n-                let args: Vec<_> = std::env::args().collect();\n+                let args: Vec<_> = env::args().collect();\n                 args.windows(2).any(|args| {\n                     args[1] == \"help\"\n                         && match args[0].as_str() {\n@@ -368,15 +365,9 @@ pub fn main() {\n             // this conditional check for the --sysroot flag is there so users can call\n             // `clippy_driver` directly\n             // without having to pass --sysroot or anything\n-            let mut args: Vec<String> = if have_sys_root_arg {\n-                orig_args.clone()\n-            } else {\n-                orig_args\n-                    .clone()\n-                    .into_iter()\n-                    .chain(Some(\"--sysroot\".to_owned()))\n-                    .chain(Some(sys_root))\n-                    .collect()\n+            let mut args: Vec<String> = orig_args.clone();\n+            if !have_sys_root_arg {\n+                args.extend(vec![\"--sysroot\".into(), sys_root]);\n             };\n \n             // this check ensures that dependencies are built but not linted and the final\n@@ -385,7 +376,7 @@ pub fn main() {\n                 || arg_value(&orig_args, \"--cap-lints\", |val| val == \"allow\").is_none();\n \n             if clippy_enabled {\n-                args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+                args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n                 if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n                     args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter_map(|s| {\n                         if s.is_empty() {\n@@ -396,12 +387,10 @@ pub fn main() {\n                     }));\n                 }\n             }\n-\n             let mut clippy = ClippyCallbacks;\n             let mut default = rustc_driver::DefaultCallbacks;\n             let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n                 if clippy_enabled { &mut clippy } else { &mut default };\n-            let args = args;\n             rustc_driver::run_compiler(&args, callbacks, None, None)\n         })\n         .and_then(|result| result)"}, {"sha": "d14ced8ad4e739feae06da4a39775ea82830dfb4", "filename": "tests/integration.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -1,7 +1,6 @@\n #![cfg(feature = \"integration\")]\n \n use git2::Repository;\n-use tempfile;\n \n use std::env;\n use std::process::Command;"}, {"sha": "c972b9419ef76adaf2aa18168ada844245be25a5", "filename": "tests/ui/inefficient_to_string.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/tests%2Fui%2Finefficient_to_string.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/tests%2Fui%2Finefficient_to_string.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.fixed?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -2,7 +2,6 @@\n #![deny(clippy::inefficient_to_string)]\n \n use std::borrow::Cow;\n-use std::string::ToString;\n \n fn main() {\n     let rstr: &str = \"hello\";"}, {"sha": "acdc55aa0d69d65002753cd11c92fe6300ff60b4", "filename": "tests/ui/inefficient_to_string.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/tests%2Fui%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/tests%2Fui%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.rs?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -2,7 +2,6 @@\n #![deny(clippy::inefficient_to_string)]\n \n use std::borrow::Cow;\n-use std::string::ToString;\n \n fn main() {\n     let rstr: &str = \"hello\";"}, {"sha": "08592e7d588eb2cdefed22c6537100b1be47ae6a", "filename": "tests/ui/inefficient_to_string.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82b032571523a14dbd23710d7fe08cb7382ea895/tests%2Fui%2Finefficient_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82b032571523a14dbd23710d7fe08cb7382ea895/tests%2Fui%2Finefficient_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.stderr?ref=82b032571523a14dbd23710d7fe08cb7382ea895", "patch": "@@ -1,5 +1,5 @@\n error: calling `to_string` on `&&str`\n-  --> $DIR/inefficient_to_string.rs:12:21\n+  --> $DIR/inefficient_to_string.rs:11:21\n    |\n LL |     let _: String = rrstr.to_string();\n    |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrstr).to_string()`\n@@ -12,39 +12,39 @@ LL | #![deny(clippy::inefficient_to_string)]\n    = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&&str`\n-  --> $DIR/inefficient_to_string.rs:13:21\n+  --> $DIR/inefficient_to_string.rs:12:21\n    |\n LL |     let _: String = rrrstr.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrstr).to_string()`\n    |\n    = help: `&&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&std::string::String`\n-  --> $DIR/inefficient_to_string.rs:21:21\n+  --> $DIR/inefficient_to_string.rs:20:21\n    |\n LL |     let _: String = rrstring.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrstring).to_string()`\n    |\n    = help: `&std::string::String` implements `ToString` through a slower blanket impl, but `std::string::String` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&&std::string::String`\n-  --> $DIR/inefficient_to_string.rs:22:21\n+  --> $DIR/inefficient_to_string.rs:21:21\n    |\n LL |     let _: String = rrrstring.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrstring).to_string()`\n    |\n    = help: `&&std::string::String` implements `ToString` through a slower blanket impl, but `std::string::String` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&std::borrow::Cow<'_, str>`\n-  --> $DIR/inefficient_to_string.rs:30:21\n+  --> $DIR/inefficient_to_string.rs:29:21\n    |\n LL |     let _: String = rrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrcow).to_string()`\n    |\n    = help: `&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&&std::borrow::Cow<'_, str>`\n-  --> $DIR/inefficient_to_string.rs:31:21\n+  --> $DIR/inefficient_to_string.rs:30:21\n    |\n LL |     let _: String = rrrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrcow).to_string()`"}]}