{"sha": "7b6ad7a960dd330e8c8401a598bd2f2ec6901100", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNmFkN2E5NjBkZDMzMGU4Yzg0MDFhNTk4YmQyZjJlYzY5MDExMDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-23T10:04:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-23T10:04:16Z"}, "message": "make park/unpark example more realistic", "tree": {"sha": "952298d9d7d6ecacaf7448ed5a58211f0fa48c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/952298d9d7d6ecacaf7448ed5a58211f0fa48c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b6ad7a960dd330e8c8401a598bd2f2ec6901100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6ad7a960dd330e8c8401a598bd2f2ec6901100", "html_url": "https://github.com/rust-lang/rust/commit/7b6ad7a960dd330e8c8401a598bd2f2ec6901100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b6ad7a960dd330e8c8401a598bd2f2ec6901100/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d46ae7c37a779fe993687e753b7c544bb26dc38", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d46ae7c37a779fe993687e753b7c544bb26dc38", "html_url": "https://github.com/rust-lang/rust/commit/2d46ae7c37a779fe993687e753b7c544bb26dc38"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "4a5ba9b800ebe2427b323ab7b4273924949b3976", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7b6ad7a960dd330e8c8401a598bd2f2ec6901100/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6ad7a960dd330e8c8401a598bd2f2ec6901100/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=7b6ad7a960dd330e8c8401a598bd2f2ec6901100", "patch": "@@ -827,22 +827,33 @@ const NOTIFIED: usize = 2;\n ///\n /// ```\n /// use std::thread;\n+/// use std::sync::{Arc, atomic::{Ordering, AtomicBool}};\n /// use std::time::Duration;\n ///\n-/// let parked_thread = thread::Builder::new()\n-///     .spawn(|| {\n+/// let flag = Arc::new(AtomicBool::new(false));\n+/// let flag2 = Arc::clone(&flag);\n+///\n+/// let parked_thread = thread::spawn(move || {\n+///     // We want to wait until the flag is set.  We *could* just spin, but using\n+///     // park/unpark is more efficient.\n+///     while !flag2.load(Ordering::Acquire) {\n ///         println!(\"Parking thread\");\n ///         thread::park();\n ///         // We *could* get here spuriously, i.e., way before the 10ms below are over!\n+///         // But that is no problem, we are in a loop until the flag is set anyway.\n ///         println!(\"Thread unparked\");\n-///     })\n-///     .unwrap();\n+///     }\n+///     println!(\"Flag received\");\n+/// });\n ///\n /// // Let some time pass for the thread to be spawned.\n /// thread::sleep(Duration::from_millis(10));\n ///\n+/// // Set the flag, and let the thread wake up.\n /// // There is no race condition here, if `unpark`\n /// // happens first, `park` will return immediately.\n+/// // Hence there is no risk of a deadlock.\n+/// flag.store(true, Ordering::Release);\n /// println!(\"Unpark the thread\");\n /// parked_thread.thread().unpark();\n ///"}]}