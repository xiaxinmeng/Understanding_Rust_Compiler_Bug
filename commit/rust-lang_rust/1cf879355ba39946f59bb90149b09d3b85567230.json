{"sha": "1cf879355ba39946f59bb90149b09d3b85567230", "node_id": "C_kwDOAAsO6NoAKDFjZjg3OTM1NWJhMzk5NDZmNTliYjkwMTQ5YjA5ZDNiODU1NjcyMzA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-10T22:12:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-10T22:12:59Z"}, "message": "Rollup merge of #94719 - jonhoo:enable-static-lld, r=Mark-Simulacrum\n\nStatically compile libstdc++ everywhere if asked\n\nPR #93918 made it so that `-static-libstdc++` was only set in one place,\nand was only set during linking, but accidentally also made it so that\nit is no longer passed when building LLD, only when building LLVM\nitself. This moves the logic for setting `-static-libstdc++` in the\nlinker flags to `configure_cmake` so that it takes effect for all CMake\ninvocations in `native.rs`.\n\nAs a side-effect, this also causes libstdc++ to be statically compiled\ninto sanitizers, whereas previously the `llvm-static-stdcpp` flag had no\neffect on sanitizers. It also makes it so that LLD will be compiled\nstatically if `llvm-tools-enabled` is set, even though previously it was\nonly linked statically if `llvm-static-stdcpp` was set explicitly. Both\nof these seem like they match expected behavior than what was there\nprior to #93918.", "tree": {"sha": "d1e9d7104df6df9ae41f7c146ca324bb6201aa00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1e9d7104df6df9ae41f7c146ca324bb6201aa00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cf879355ba39946f59bb90149b09d3b85567230", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKnfrCRBK7hj4Ov3rIwAA7AYIAJNs94ZIlyLcstDqJ3lWTdam\nKqdXWkvVQB+pS1Fzypt6nhH/ne4BLImKRSyqizUaEXMwsBg+8JTB+xJkl2LegUV7\nluCKsicoZw/AzuKzbWS5QSbC0jpIe2G+m8V4IkJJC4GdKlDsFnCVEypmpAp7Gt9n\ndkFDq+guumNKOHAuM+AVRAJB8arWgt/I/J4XcSH5tLZDve0e+wbf96rbXjVMzNMm\nlNTpHwgl/UCzQSKUeJ+69Wcrj3qsBmXnWTsNq7bu20mZRwRAYHgnwjcFBKDxokpr\nMAY9Qjb6D0y0B1G7nL3/ULAYq7tLNdbJWpmHcb45cRsSzFmngXlQJxqPr+B10pw=\n=ZcQt\n-----END PGP SIGNATURE-----\n", "payload": "tree d1e9d7104df6df9ae41f7c146ca324bb6201aa00\nparent 634a6b0d251f523f6b61a33ea647c9850de1a704\nparent b328688d23d56a7b95ddcd994c3967a193dd25ea\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646950379 +0100\ncommitter GitHub <noreply@github.com> 1646950379 +0100\n\nRollup merge of #94719 - jonhoo:enable-static-lld, r=Mark-Simulacrum\n\nStatically compile libstdc++ everywhere if asked\n\nPR #93918 made it so that `-static-libstdc++` was only set in one place,\nand was only set during linking, but accidentally also made it so that\nit is no longer passed when building LLD, only when building LLVM\nitself. This moves the logic for setting `-static-libstdc++` in the\nlinker flags to `configure_cmake` so that it takes effect for all CMake\ninvocations in `native.rs`.\n\nAs a side-effect, this also causes libstdc++ to be statically compiled\ninto sanitizers, whereas previously the `llvm-static-stdcpp` flag had no\neffect on sanitizers. It also makes it so that LLD will be compiled\nstatically if `llvm-tools-enabled` is set, even though previously it was\nonly linked statically if `llvm-static-stdcpp` was set explicitly. Both\nof these seem like they match expected behavior than what was there\nprior to #93918.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf879355ba39946f59bb90149b09d3b85567230", "html_url": "https://github.com/rust-lang/rust/commit/1cf879355ba39946f59bb90149b09d3b85567230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cf879355ba39946f59bb90149b09d3b85567230/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634a6b0d251f523f6b61a33ea647c9850de1a704", "url": "https://api.github.com/repos/rust-lang/rust/commits/634a6b0d251f523f6b61a33ea647c9850de1a704", "html_url": "https://github.com/rust-lang/rust/commit/634a6b0d251f523f6b61a33ea647c9850de1a704"}, {"sha": "b328688d23d56a7b95ddcd994c3967a193dd25ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b328688d23d56a7b95ddcd994c3967a193dd25ea", "html_url": "https://github.com/rust-lang/rust/commit/b328688d23d56a7b95ddcd994c3967a193dd25ea"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0fe39defae85dee45bd886b7ef28fc602aa579ba", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1cf879355ba39946f59bb90149b09d3b85567230/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf879355ba39946f59bb90149b09d3b85567230/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=1cf879355ba39946f59bb90149b09d3b85567230", "patch": "@@ -259,18 +259,6 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n-        // For distribution we want the LLVM tools to be *statically* linked to libstdc++.\n-        // We also do this if the user explicitly requested static libstdc++.\n-        if builder.config.llvm_tools_enabled || builder.config.llvm_static_stdcpp {\n-            if !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n-                if target.contains(\"apple\") {\n-                    ldflags.push_all(\"-static-libstdc++\");\n-                } else {\n-                    ldflags.push_all(\"-Wl,-Bsymbolic -static-libstdc++\");\n-                }\n-            }\n-        }\n-\n         if target.starts_with(\"riscv\") && !target.contains(\"freebsd\") {\n             // RISC-V GCC erroneously requires linking against\n             // `libatomic` when using 1-byte and 2-byte C++\n@@ -576,6 +564,18 @@ fn configure_cmake(\n         ldflags.push_all(&flags);\n     }\n \n+    // For distribution we want the LLVM tools to be *statically* linked to libstdc++.\n+    // We also do this if the user explicitly requested static libstdc++.\n+    if builder.config.llvm_tools_enabled || builder.config.llvm_static_stdcpp {\n+        if !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n+            if target.contains(\"apple\") {\n+                ldflags.push_all(\"-static-libstdc++\");\n+            } else {\n+                ldflags.push_all(\"-Wl,-Bsymbolic -static-libstdc++\");\n+            }\n+        }\n+    }\n+\n     cfg.define(\"CMAKE_SHARED_LINKER_FLAGS\", &ldflags.shared);\n     cfg.define(\"CMAKE_MODULE_LINKER_FLAGS\", &ldflags.module);\n     cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", &ldflags.exe);"}]}