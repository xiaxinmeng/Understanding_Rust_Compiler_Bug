{"sha": "85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NzA0YTQxZGJiYTU4MGExMWMyZWQ1OWU4ZTMwNmVjNWE4MmM4ZjA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-06T21:43:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-01T12:29:35Z"}, "message": "Monomorphise load_from_disk_and_cache_in_memory.", "tree": {"sha": "367c1416a97e13d97a98b34d2e3e4ccf6625e88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367c1416a97e13d97a98b34d2e3e4ccf6625e88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "html_url": "https://github.com/rust-lang/rust/commit/85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85704a41dbba580a11c2ed59e8e306ec5a82c8f0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b2deaf57aeec36ede38a81184fbafebb64fd4ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2deaf57aeec36ede38a81184fbafebb64fd4ac", "html_url": "https://github.com/rust-lang/rust/commit/1b2deaf57aeec36ede38a81184fbafebb64fd4ac"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "5f5bae66cfc659b52151e5297f071794079ffb65", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85704a41dbba580a11c2ed59e8e306ec5a82c8f0/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85704a41dbba580a11c2ed59e8e306ec5a82c8f0/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "patch": "@@ -365,7 +365,7 @@ fn add_query_description_impl(\n             #[allow(unused_variables, unused_braces)]\n             fn cache_on_disk(\n                 #tcx: TyCtxt<'tcx>,\n-                #key: Self::Key,\n+                #key: &Self::Key,\n                 #value: Option<&Self::Value>\n             ) -> bool {\n                 #expr\n@@ -441,7 +441,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                                             .unwrap_or(false));\n \n                             let key = <#arg as DepNodeParams<TyCtxt<'_>>>::recover($tcx, $dep_node).unwrap();\n-                            if queries::#name::cache_on_disk($tcx, key, None) {\n+                            if queries::#name::cache_on_disk($tcx, &key, None) {\n                                 let _ = $tcx.#name(key);\n                             }\n                         }"}, {"sha": "760fdbe8522f436d65423cc7a519d38db3a98208", "filename": "src/librustc_middle/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85704a41dbba580a11c2ed59e8e306ec5a82c8f0/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85704a41dbba580a11c2ed59e8e306ec5a82c8f0/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs?ref=85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "patch": "@@ -1009,7 +1009,7 @@ where\n \n     state.iter_results(|results| {\n         for (key, value, dep_node) in results {\n-            if Q::cache_on_disk(tcx, key.clone(), Some(&value)) {\n+            if Q::cache_on_disk(tcx, &key, Some(&value)) {\n                 let dep_node = SerializedDepNodeIndex::new(dep_node.index());\n \n                 // Record position of the cache entry."}, {"sha": "7a13bbf22999d0fd78fc8135636c5f462e4c546c", "filename": "src/librustc_query_system/query/config.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/85704a41dbba580a11c2ed59e8e306ec5a82c8f0/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85704a41dbba580a11c2ed59e8e306ec5a82c8f0/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs?ref=85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "patch": "@@ -31,6 +31,30 @@ pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n     pub compute: fn(CTX, K) -> V,\n \n     pub hash_result: fn(&mut CTX::StableHashingContext, &V) -> Option<Fingerprint>,\n+    pub cache_on_disk: fn(CTX, &K, Option<&V>) -> bool,\n+    pub try_load_from_disk: fn(CTX, SerializedDepNodeIndex) -> Option<V>,\n+}\n+\n+impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n+    pub(crate) fn compute(&self, tcx: CTX, key: K) -> V {\n+        (self.compute)(tcx, key)\n+    }\n+\n+    pub(crate) fn hash_result(\n+        &self,\n+        hcx: &mut CTX::StableHashingContext,\n+        value: &V,\n+    ) -> Option<Fingerprint> {\n+        (self.hash_result)(hcx, value)\n+    }\n+\n+    pub(crate) fn cache_on_disk(&self, tcx: CTX, key: &K, value: Option<&V>) -> bool {\n+        (self.cache_on_disk)(tcx, key, value)\n+    }\n+\n+    pub(crate) fn try_load_from_disk(&self, tcx: CTX, index: SerializedDepNodeIndex) -> Option<V> {\n+        (self.try_load_from_disk)(tcx, index)\n+    }\n }\n \n pub trait QueryAccessors<CTX: QueryContext>: QueryConfig<CTX> {\n@@ -60,7 +84,7 @@ pub trait QueryDescription<CTX: QueryContext>: QueryAccessors<CTX> {\n     fn describe(tcx: CTX, key: Self::Key) -> Cow<'static, str>;\n \n     #[inline]\n-    fn cache_on_disk(_: CTX, _: Self::Key, _: Option<&Self::Value>) -> bool {\n+    fn cache_on_disk(_: CTX, _: &Self::Key, _: Option<&Self::Value>) -> bool {\n         false\n     }\n \n@@ -82,6 +106,8 @@ where\n         eval_always: Q::EVAL_ALWAYS,\n         compute: Q::compute,\n         hash_result: Q::hash_result,\n+        cache_on_disk: Q::cache_on_disk,\n+        try_load_from_disk: Q::try_load_from_disk,\n     };\n }\n \n@@ -98,7 +124,7 @@ where\n         }\n     }\n \n-    default fn cache_on_disk(_: CTX, _: Self::Key, _: Option<&Self::Value>) -> bool {\n+    default fn cache_on_disk(_: CTX, _: &Self::Key, _: Option<&Self::Value>) -> bool {\n         false\n     }\n "}, {"sha": "4a03c172d3cdad808e7ecb73d5140c55bca5bd48", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85704a41dbba580a11c2ed59e8e306ec5a82c8f0/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85704a41dbba580a11c2ed59e8e306ec5a82c8f0/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "patch": "@@ -439,12 +439,13 @@ where\n             let marked = tcx.dep_graph().try_mark_green_and_read(tcx, &dep_node);\n             marked.map(|(prev_dep_node_index, dep_node_index)| {\n                 (\n-                    load_from_disk_and_cache_in_memory::<Q, _>(\n+                    load_from_disk_and_cache_in_memory(\n                         tcx,\n                         key.clone(),\n                         prev_dep_node_index,\n                         dep_node_index,\n                         &dep_node,\n+                        &Q::VTABLE,\n                     ),\n                     dep_node_index,\n                 )\n@@ -460,26 +461,26 @@ where\n     result\n }\n \n-fn load_from_disk_and_cache_in_memory<Q, CTX>(\n+fn load_from_disk_and_cache_in_memory<CTX, K, V>(\n     tcx: CTX,\n-    key: Q::Key,\n+    key: K,\n     prev_dep_node_index: SerializedDepNodeIndex,\n     dep_node_index: DepNodeIndex,\n     dep_node: &DepNode<CTX::DepKind>,\n-) -> Q::Value\n+    query: &QueryVtable<CTX, K, V>,\n+) -> V\n where\n     CTX: QueryContext,\n-    Q: QueryDescription<CTX>,\n {\n     // Note this function can be called concurrently from the same query\n     // We must ensure that this is handled correctly.\n \n     debug_assert!(tcx.dep_graph().is_green(dep_node));\n \n     // First we try to load the result from the on-disk cache.\n-    let result = if Q::cache_on_disk(tcx, key.clone(), None) {\n+    let result = if query.cache_on_disk(tcx, &key, None) {\n         let prof_timer = tcx.profiler().incr_cache_loading();\n-        let result = Q::try_load_from_disk(tcx, prev_dep_node_index);\n+        let result = query.try_load_from_disk(tcx, prev_dep_node_index);\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n         // We always expect to find a cached result for things that\n@@ -503,7 +504,7 @@ where\n         let prof_timer = tcx.profiler().query_provider();\n \n         // The dep-graph for this computation is already in-place.\n-        let result = tcx.dep_graph().with_ignore(|| Q::compute(tcx, key));\n+        let result = tcx.dep_graph().with_ignore(|| query.compute(tcx, key));\n \n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n@@ -513,22 +514,22 @@ where\n     // If `-Zincremental-verify-ich` is specified, re-hash results from\n     // the cache and make sure that they have the expected fingerprint.\n     if unlikely!(tcx.incremental_verify_ich()) {\n-        incremental_verify_ich::<Q, _>(tcx, &result, dep_node, dep_node_index);\n+        incremental_verify_ich(tcx, &result, dep_node, dep_node_index, query);\n     }\n \n     result\n }\n \n #[inline(never)]\n #[cold]\n-fn incremental_verify_ich<Q, CTX>(\n+fn incremental_verify_ich<CTX, K, V>(\n     tcx: CTX,\n-    result: &Q::Value,\n+    result: &V,\n     dep_node: &DepNode<CTX::DepKind>,\n     dep_node_index: DepNodeIndex,\n+    query: &QueryVtable<CTX, K, V>,\n ) where\n     CTX: QueryContext,\n-    Q: QueryDescription<CTX>,\n {\n     assert!(\n         Some(tcx.dep_graph().fingerprint_of(dep_node_index))\n@@ -540,7 +541,7 @@ fn incremental_verify_ich<Q, CTX>(\n     debug!(\"BEGIN verify_ich({:?})\", dep_node);\n     let mut hcx = tcx.create_stable_hashing_context();\n \n-    let new_hash = Q::hash_result(&mut hcx, result).unwrap_or(Fingerprint::ZERO);\n+    let new_hash = query.hash_result(&mut hcx, result).unwrap_or(Fingerprint::ZERO);\n     debug!(\"END verify_ich({:?})\", dep_node);\n \n     let old_hash = tcx.dep_graph().fingerprint_of(dep_node_index);"}]}