{"sha": "c21dcd79144acc2f0fa6ca5b9d423758db2ae94b", "node_id": "C_kwDOAAsO6NoAKGMyMWRjZDc5MTQ0YWNjMmYwZmE2Y2E1YjlkNDIzNzU4ZGIyYWU5NGI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-09-16T11:07:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-16T11:07:19Z"}, "message": "Rollup merge of #101868 - notriddle:notriddle/short-links-jump-to-definition, r=GuillaumeGomez\n\nrustdoc: use more precise URLs for jump-to-definition links\n\nAs an example, this cuts down <https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/mod.rs.html> by about 11%.\n\n    $ du -h new_mod.rs.html old_mod.rs.html\n    296K\tnew_mod.rs.html\n    332K\told_mod.rs.html\n\nLike https://github.com/rust-lang/rust/pull/83237, but separate code since source links have a different URL structure.\n\nRelated to [Zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/RFC.20for.20.22jump.20to.20definition.22.20feature/near/299029786) and [the jump-to-definition pre-RFC](https://github.com/GuillaumeGomez/rfcs/pull/1).", "tree": {"sha": "1b47245a29ced7bdda89abf8549ce23164a66b62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b47245a29ced7bdda89abf8549ce23164a66b62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjJFjnCRBK7hj4Ov3rIwAAWo8IABiYQDXvDrDsY6/fp9E3xDo1\nUJdjlxzZ6eLtZLE0AffwjGoI1PHtIfFCmDzonn15HgZDU1Hcsrpo593TTimH/dXf\n1qfrp2Ake+gxu4OF74T5sAyWt8cC3jusjpCuTDVbdJ2VANhorFFgXWUG40+T+fJi\nWGvbXK1M8mP0un7Q/j6f9xTpRk/2TAe46IQjLbpQRtwIH+q0RClXbsos2MrNxHym\nfE/LwKX6exH7+x/qr1Oz1ICY1yXmGfhv3nlE06pt9Ys6G5IIauaXqOclvVhCmE8C\nkZwkaqwljE6bWHeQMOt1j/qw3mMbfgMVD93BCUJNY9EfuRJ0KdUlsAZvlRa+Jb8=\n=0TGM\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b47245a29ced7bdda89abf8549ce23164a66b62\nparent 9a72ded562b2c8b78478550d4df09d1499a3dae1\nparent 669498ca0a880e2272fee62bf5dc50f3bc07e75b\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1663326439 +0200\ncommitter GitHub <noreply@github.com> 1663326439 +0200\n\nRollup merge of #101868 - notriddle:notriddle/short-links-jump-to-definition, r=GuillaumeGomez\n\nrustdoc: use more precise URLs for jump-to-definition links\n\nAs an example, this cuts down <https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/mod.rs.html> by about 11%.\n\n    $ du -h new_mod.rs.html old_mod.rs.html\n    296K\tnew_mod.rs.html\n    332K\told_mod.rs.html\n\nLike https://github.com/rust-lang/rust/pull/83237, but separate code since source links have a different URL structure.\n\nRelated to [Zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/RFC.20for.20.22jump.20to.20definition.22.20feature/near/299029786) and [the jump-to-definition pre-RFC](https://github.com/GuillaumeGomez/rfcs/pull/1).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b", "html_url": "https://github.com/rust-lang/rust/commit/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a72ded562b2c8b78478550d4df09d1499a3dae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a72ded562b2c8b78478550d4df09d1499a3dae1", "html_url": "https://github.com/rust-lang/rust/commit/9a72ded562b2c8b78478550d4df09d1499a3dae1"}, {"sha": "669498ca0a880e2272fee62bf5dc50f3bc07e75b", "url": "https://api.github.com/repos/rust-lang/rust/commits/669498ca0a880e2272fee62bf5dc50f3bc07e75b", "html_url": "https://github.com/rust-lang/rust/commit/669498ca0a880e2272fee62bf5dc50f3bc07e75b"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "8922bf377858e21981838171b29250bf66acfb5e", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=c21dcd79144acc2f0fa6ca5b9d423758db2ae94b", "patch": "@@ -29,6 +29,8 @@ pub(crate) struct HrefContext<'a, 'b, 'c> {\n     /// This field is used to know \"how far\" from the top of the directory we are to link to either\n     /// documentation pages or other source pages.\n     pub(crate) root_path: &'c str,\n+    /// This field is used to calculate precise local URLs.\n+    pub(crate) current_href: &'c str,\n }\n \n /// Decorations are represented as a map from CSS class to vector of character ranges.\n@@ -977,9 +979,9 @@ fn string_without_closing_tag<T: Display>(\n                 // a link to their definition can be generated using this:\n                 // https://github.com/rust-lang/rust/blob/60f1a2fc4b535ead9c85ce085fdce49b1b097531/src/librustdoc/html/render/context.rs#L315-L338\n                 match href {\n-                    LinkFromSrc::Local(span) => context\n-                        .href_from_span(*span, true)\n-                        .map(|s| format!(\"{}{}\", href_context.root_path, s)),\n+                    LinkFromSrc::Local(span) => {\n+                        context.href_from_span_relative(*span, href_context.current_href)\n+                    }\n                     LinkFromSrc::External(def_id) => {\n                         format::href_with_root_path(*def_id, context, Some(href_context.root_path))\n                             .ok()"}, {"sha": "62def4a94e8dccd6026ef4eb95c8c43896609a4a", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=c21dcd79144acc2f0fa6ca5b9d423758db2ae94b", "patch": "@@ -31,6 +31,7 @@ use crate::formats::FormatRenderer;\n use crate::html::escape::Escape;\n use crate::html::format::{join_with_double_colon, Buffer};\n use crate::html::markdown::{self, plain_text_summary, ErrorCodes, IdMap};\n+use crate::html::url_parts_builder::UrlPartsBuilder;\n use crate::html::{layout, sources};\n use crate::scrape_examples::AllCallLocations;\n use crate::try_err;\n@@ -370,6 +371,35 @@ impl<'tcx> Context<'tcx> {\n             anchor = anchor\n         ))\n     }\n+\n+    pub(crate) fn href_from_span_relative(\n+        &self,\n+        span: clean::Span,\n+        relative_to: &str,\n+    ) -> Option<String> {\n+        self.href_from_span(span, false).map(|s| {\n+            let mut url = UrlPartsBuilder::new();\n+            let mut dest_href_parts = s.split('/');\n+            let mut cur_href_parts = relative_to.split('/');\n+            for (cur_href_part, dest_href_part) in (&mut cur_href_parts).zip(&mut dest_href_parts) {\n+                if cur_href_part != dest_href_part {\n+                    url.push(dest_href_part);\n+                    break;\n+                }\n+            }\n+            for dest_href_part in dest_href_parts {\n+                url.push(dest_href_part);\n+            }\n+            let loline = span.lo(self.sess()).line;\n+            let hiline = span.hi(self.sess()).line;\n+            format!(\n+                \"{}{}#{}\",\n+                \"../\".repeat(cur_href_parts.count()),\n+                url.finish(),\n+                if loline == hiline { loline.to_string() } else { format!(\"{loline}-{hiline}\") }\n+            )\n+        })\n+    }\n }\n \n /// Generates the documentation for `crate` into the directory `dst`"}, {"sha": "2e2bee78b95f9b441b6f3d6a8f2113d1c98ab8a5", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=c21dcd79144acc2f0fa6ca5b9d423758db2ae94b", "patch": "@@ -288,11 +288,14 @@ pub(crate) fn print_src(\n         }\n     }\n     line_numbers.write_str(\"</pre>\");\n+    let current_href = &context\n+        .href_from_span(clean::Span::new(file_span), false)\n+        .expect(\"only local crates should have sources emitted\");\n     highlight::render_source_with_highlighting(\n         s,\n         buf,\n         line_numbers,\n-        highlight::HrefContext { context, file_span, root_path },\n+        highlight::HrefContext { context, file_span, root_path, current_href },\n         decoration_info,\n     );\n }"}, {"sha": "e12d8445f4fa3788e5db0efb9f3650a9d7ef2f90", "filename": "src/test/rustdoc/check-source-code-urls-to-def-std.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def-std.rs?ref=c21dcd79144acc2f0fa6ca5b9d423758db2ae94b", "patch": "@@ -9,7 +9,7 @@ fn babar() {}\n // @has - '//a[@href=\"{{channel}}/std/primitive.u32.html\"]' 'u32'\n // @has - '//a[@href=\"{{channel}}/std/primitive.str.html\"]' 'str'\n // @has - '//a[@href=\"{{channel}}/std/primitive.bool.html\"]' 'bool'\n-// @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def-std.rs.html#7\"]' 'babar'\n+// @has - '//a[@href=\"#7\"]' 'babar'\n pub fn foo(a: u32, b: &str, c: String) {\n     let x = 12;\n     let y: bool = true;\n@@ -31,12 +31,12 @@ macro_rules! data {\n pub fn another_foo() {\n     // This is known limitation: if the macro doesn't generate anything, the visitor\n     // can't find any item or anything that could tell us that it comes from expansion.\n-    // @!has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def-std.rs.html#19\"]' 'yolo!'\n+    // @!has - '//a[@href=\"#19\"]' 'yolo!'\n     yolo!();\n     // @has - '//a[@href=\"{{channel}}/std/macro.eprintln.html\"]' 'eprintln!'\n     eprintln!();\n-    // @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def-std.rs.html#27-29\"]' 'data!'\n+    // @has - '//a[@href=\"#27-29\"]' 'data!'\n     let x = data!(4);\n-    // @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def-std.rs.html#23-25\"]' 'bar!'\n+    // @has - '//a[@href=\"#23-25\"]' 'bar!'\n     bar!(x);\n }"}, {"sha": "d00a3e3551991d63aa14b22f3817ea87a2451851", "filename": "src/test/rustdoc/check-source-code-urls-to-def.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21dcd79144acc2f0fa6ca5b9d423758db2ae94b/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs?ref=c21dcd79144acc2f0fa6ca5b9d423758db2ae94b", "patch": "@@ -10,14 +10,14 @@ extern crate source_code;\n \n // @has 'src/foo/check-source-code-urls-to-def.rs.html'\n \n-// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#1-17\"]' 'bar'\n+// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#1-17\"]' 'bar'\n #[path = \"auxiliary/source-code-bar.rs\"]\n pub mod bar;\n \n-// @count - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#5\"]' 4\n+// @count - '//a[@href=\"auxiliary/source-code-bar.rs.html#5\"]' 4\n use bar::Bar;\n-// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#13\"]' 'self'\n-// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n+// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#13\"]' 'self'\n+// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n use bar::sub::{self, Trait};\n \n pub struct Foo;\n@@ -31,26 +31,26 @@ fn babar() {}\n // @has - '//a/@href' '/struct.String.html'\n // @has - '//a/@href' '/primitive.u32.html'\n // @has - '//a/@href' '/primitive.str.html'\n-// @count - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#23\"]' 5\n+// @count - '//a[@href=\"#23\"]' 5\n // @has - '//a[@href=\"../../source_code/struct.SourceCode.html\"]' 'source_code::SourceCode'\n pub fn foo(a: u32, b: &str, c: String, d: Foo, e: bar::Bar, f: source_code::SourceCode) {\n     let x = 12;\n     let y: Foo = Foo;\n     let z: Bar = bar::Bar { field: Foo };\n     babar();\n-    // @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#26\"]' 'hello'\n+    // @has - '//a[@href=\"#26\"]' 'hello'\n     y.hello();\n }\n \n-// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14\"]' 'bar::sub::Trait'\n-// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n+// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#14\"]' 'bar::sub::Trait'\n+// @has - '//a[@href=\"auxiliary/source-code-bar.rs.html#14\"]' 'Trait'\n pub fn foo2<T: bar::sub::Trait, V: Trait>(t: &T, v: &V, b: bool) {}\n \n pub trait AnotherTrait {}\n pub trait WhyNot {}\n \n-// @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#49\"]' 'AnotherTrait'\n-// @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#50\"]' 'WhyNot'\n+// @has - '//a[@href=\"#49\"]' 'AnotherTrait'\n+// @has - '//a[@href=\"#50\"]' 'WhyNot'\n pub fn foo3<T, V>(t: &T, v: &V)\n where\n     T: AnotherTrait,\n@@ -59,7 +59,7 @@ where\n \n pub trait AnotherTrait2 {}\n \n-// @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#60\"]' 'AnotherTrait2'\n+// @has - '//a[@href=\"#60\"]' 'AnotherTrait2'\n pub fn foo4() {\n     let x: Vec<AnotherTrait2> = Vec::new();\n }"}]}