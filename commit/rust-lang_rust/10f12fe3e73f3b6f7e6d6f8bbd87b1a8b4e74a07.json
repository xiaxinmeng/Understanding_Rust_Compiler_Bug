{"sha": "10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZjEyZmUzZTczZjNiNmY3ZTZkNmY4YmJkODdiMWE4YjRlNzRhMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-21T15:50:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-21T15:50:37Z"}, "message": "Auto merge of #65661 - JohnTitor:rollup-68la1fq, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #65544 (Added doc on keyword break)\n - #65620 (Correctly note code as Ok not error for E0573)\n - #65624 ([mir-opt] Improve SimplifyLocals pass so it can remove unused consts)\n - #65650 (use unwrap_or in lint code)\n - #65652 (Fix `canonicalize_const_var` leaking inference variables)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9260a62704956f17a2d67fb4ab7cc6faf92ca846", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9260a62704956f17a2d67fb4ab7cc6faf92ca846"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "html_url": "https://github.com/rust-lang/rust/commit/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7a9c285a50f3a94c44687ba9ff3ab0648243aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a9c285a50f3a94c44687ba9ff3ab0648243aaa", "html_url": "https://github.com/rust-lang/rust/commit/b7a9c285a50f3a94c44687ba9ff3ab0648243aaa"}, {"sha": "1c94a4475bb3ef7e13eb59dc6fd0920051544b45", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c94a4475bb3ef7e13eb59dc6fd0920051544b45", "html_url": "https://github.com/rust-lang/rust/commit/1c94a4475bb3ef7e13eb59dc6fd0920051544b45"}], "stats": {"total": 355, "additions": 298, "deletions": 57}, "files": [{"sha": "e69719806a81dece289d2388cd151f9b3eae7e24", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -701,7 +701,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.tcx().mk_const(\n                 ty::Const {\n                     val: ConstValue::Infer(InferConst::Canonical(self.binder_index, var.into())),\n-                    ty: const_var.ty,\n+                    ty: self.fold_ty(const_var.ty),\n                 }\n             )\n         }"}, {"sha": "8ed06cbdc7623051a5ac9b348822309427d60001", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -202,11 +202,7 @@ impl<'a> LintLevelsBuilder<'a> {\n             let meta = unwrap_or!(attr.meta(), continue);\n             attr::mark_used(attr);\n \n-            let mut metas = if let Some(metas) = meta.meta_item_list() {\n-                metas\n-            } else {\n-                continue;\n-            };\n+            let mut metas = unwrap_or!(meta.meta_item_list(), continue);\n \n             if metas.is_empty() {\n                 // FIXME (#55112): issue unused-attributes lint for `#[level()]`"}, {"sha": "108c6c9786b2a7e4860394811aec1b40b727ca96", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -431,7 +431,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         place_layout: TyLayout<'tcx>,\n         source_info: SourceInfo,\n         place: &Place<'tcx>,\n-    ) -> Option<Const<'tcx>> {\n+    ) -> Option<()> {\n         let span = source_info.span;\n \n         let overflow_check = self.tcx.sess.overflow_checks();\n@@ -540,20 +540,13 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n             }\n \n-            // Work around: avoid extra unnecessary locals. FIXME(wesleywiser)\n-            // Const eval will turn this into a `const Scalar(<ZST>)` that\n-            // `SimplifyLocals` doesn't know it can remove.\n-            Rvalue::Aggregate(_, operands) if operands.len() == 0 => {\n-                return None;\n-            }\n-\n             _ => { }\n         }\n \n         self.use_ecx(source_info, |this| {\n             trace!(\"calling eval_rvalue_into_place(rvalue = {:?}, place = {:?})\", rvalue, place);\n             this.ecx.eval_rvalue_into_place(rvalue, place)?;\n-            this.ecx.eval_place_to_op(place, Some(place_layout))\n+            Ok(())\n         })\n     }\n \n@@ -717,24 +710,23 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     base: PlaceBase::Local(local),\n                     projection: box [],\n                 } = *place {\n-                    if let Some(value) = self.const_prop(rval,\n-                                                         place_layout,\n-                                                         statement.source_info,\n-                                                         place) {\n-                        trace!(\"checking whether {:?} can be stored to {:?}\", value, local);\n+                    let source = statement.source_info;\n+                    if let Some(()) = self.const_prop(rval, place_layout, source, place) {\n                         if self.can_const_prop[local] {\n-                            trace!(\"stored {:?} to {:?}\", value, local);\n-                            assert_eq!(self.get_const(local), Some(value));\n+                            trace!(\"propagated into {:?}\", local);\n \n                             if self.should_const_prop() {\n+                                let value =\n+                                    self.get_const(local).expect(\"local was dead/uninitialized\");\n+                                trace!(\"replacing {:?} with {:?}\", rval, value);\n                                 self.replace_with_const(\n                                     rval,\n                                     value,\n                                     statement.source_info,\n                                 );\n                             }\n                         } else {\n-                            trace!(\"can't propagate {:?} to {:?}\", value, local);\n+                            trace!(\"can't propagate into {:?}\", local);\n                             self.remove_const(local);\n                         }\n                     }"}, {"sha": "e41b4678dbd0db649469416e6e5f34d62dd181b1", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -31,7 +31,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext};\n+use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext, MutatingUseContext};\n use rustc::session::config::DebugInfo;\n use std::borrow::Cow;\n use crate::transform::{MirPass, MirSource};\n@@ -293,23 +293,31 @@ pub fn remove_dead_blocks(body: &mut Body<'_>) {\n pub struct SimplifyLocals;\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        let mut marker = DeclMarker { locals: BitSet::new_empty(body.local_decls.len()) };\n-        marker.visit_body(body);\n-        // Return pointer and arguments are always live\n-        marker.locals.insert(RETURN_PLACE);\n-        for arg in body.args_iter() {\n-            marker.locals.insert(arg);\n-        }\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        trace!(\"running SimplifyLocals on {:?}\", source);\n+        let locals = {\n+            let mut marker = DeclMarker {\n+                locals: BitSet::new_empty(body.local_decls.len()),\n+                body,\n+            };\n+            marker.visit_body(body);\n+            // Return pointer and arguments are always live\n+            marker.locals.insert(RETURN_PLACE);\n+            for arg in body.args_iter() {\n+                marker.locals.insert(arg);\n+            }\n \n-        // We may need to keep dead user variables live for debuginfo.\n-        if tcx.sess.opts.debuginfo == DebugInfo::Full {\n-            for local in body.vars_iter() {\n-                marker.locals.insert(local);\n+            // We may need to keep dead user variables live for debuginfo.\n+            if tcx.sess.opts.debuginfo == DebugInfo::Full {\n+                for local in body.vars_iter() {\n+                    marker.locals.insert(local);\n+                }\n             }\n-        }\n \n-        let map = make_local_map(&mut body.local_decls, marker.locals);\n+            marker.locals\n+        };\n+\n+        let map = make_local_map(&mut body.local_decls, locals);\n         // Update references to all vars and tmps now\n         LocalUpdater { map }.visit_body(body);\n         body.local_decls.shrink_to_fit();\n@@ -334,18 +342,35 @@ fn make_local_map<V>(\n     map\n }\n \n-struct DeclMarker {\n+struct DeclMarker<'a, 'tcx> {\n     pub locals: BitSet<Local>,\n+    pub body: &'a Body<'tcx>,\n }\n \n-impl<'tcx> Visitor<'tcx> for DeclMarker {\n-    fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _: Location) {\n+impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n+    fn visit_local(&mut self, local: &Local, ctx: PlaceContext, location: Location) {\n         // Ignore storage markers altogether, they get removed along with their otherwise unused\n         // decls.\n         // FIXME: Extend this to all non-uses.\n-        if !ctx.is_storage_marker() {\n-            self.locals.insert(*local);\n+        if ctx.is_storage_marker() {\n+            return;\n         }\n+\n+        // Ignore stores of constants because `ConstProp` and `CopyProp` can remove uses of many\n+        // of these locals. However, if the local is still needed, then it will be referenced in\n+        // another place and we'll mark it as being used there.\n+        if ctx == PlaceContext::MutatingUse(MutatingUseContext::Store) {\n+            let stmt =\n+                &self.body.basic_blocks()[location.block].statements[location.statement_index];\n+            if let StatementKind::Assign(box (p, Rvalue::Use(Operand::Constant(c)))) = &stmt.kind {\n+                if p.as_local().is_some() {\n+                    trace!(\"skipping store of const value {:?} to {:?}\", c, local);\n+                    return;\n+                }\n+            }\n+        }\n+\n+        self.locals.insert(*local);\n     }\n }\n \n@@ -357,9 +382,16 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater {\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         // Remove unnecessary StorageLive and StorageDead annotations.\n         data.statements.retain(|stmt| {\n-            match stmt.kind {\n+            match &stmt.kind {\n                 StatementKind::StorageLive(l) | StatementKind::StorageDead(l) => {\n-                    self.map[l].is_some()\n+                    self.map[*l].is_some()\n+                }\n+                StatementKind::Assign(box (place, _)) => {\n+                    if let Some(local) = place.as_local() {\n+                        self.map[local].is_some()\n+                    } else {\n+                        true\n+                    }\n                 }\n                 _ => true\n             }"}, {"sha": "b82cba8c83dc4d65b182ff415f21eabdfb43ee18", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -1682,7 +1682,7 @@ enum Wizard {\n }\n \n trait Isengard {\n-    fn wizard(w: Wizard) { // error!\n+    fn wizard(w: Wizard) { // ok!\n         match w {\n             Wizard::Saruman => {\n                 // do something"}, {"sha": "ab8a55660cb0c3be93a2dc560b3c11bebea856d5", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -33,9 +33,72 @@ mod as_keyword { }\n //\n /// Exit early from a loop.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// When `break` is encountered, execution of the associated loop body is\n+/// immediately terminated.\n+///\n+/// ```rust\n+/// let mut last = 0;\n+///\n+/// for x in 1..100 {\n+///     if x > 12 {\n+///         break;\n+///     }\n+///     last = x;\n+/// }\n+///\n+/// assert_eq!(last, 12);\n+/// println!(\"{}\", last);\n+/// ```\n+///\n+/// A break expression is normally associated with the innermost loop enclosing the\n+/// `break` but a label can be used to specify which enclosing loop is affected.\n+///\n+///```rust\n+/// 'outer: for i in 1..=5 {\n+///     println!(\"outer iteration (i): {}\", i);\n+///\n+///     'inner: for j in 1..=200 {\n+///         println!(\"    inner iteration (j): {}\", j);\n+///         if j >= 3 {\n+///             // breaks from inner loop, let's outer loop continue.\n+///             break;\n+///         }\n+///         if i >= 2 {\n+///             // breaks from outer loop, and directly to \"Bye\".\n+///             break 'outer;\n+///         }\n+///     }\n+/// }\n+/// println!(\"Bye.\");\n+///```\n+///\n+/// When associated with `loop`, a break expression may be used to return a value from that loop.\n+/// This is only valid with `loop` and not with any other type of loop.\n+/// If no value is specified, `break;` returns `()`.\n+/// Every `break` within a loop must return the same type.\n+///\n+/// ```rust\n+/// let (mut a, mut b) = (1, 1);\n+/// let result = loop {\n+///     if b > 10 {\n+///         break b;\n+///     }\n+///     let c = a + b;\n+///     a = b;\n+///     b = c;\n+/// };\n+/// // first number in Fibonacci sequence over 10:\n+/// assert_eq!(result, 13);\n+/// println!(\"{}\", result);\n+/// ```\n+///\n+/// For more details consult the [Reference on \"break expression\"] and the [Reference on \"break and\n+/// loop values\"].\n+///\n+/// [Reference on \"break expression\"]: ../reference/expressions/loop-expr.html#break-expressions\n+/// [Reference on \"break and loop values\"]:\n+/// ../reference/expressions/loop-expr.html#break-and-loop-values\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod break_keyword { }\n \n #[doc(keyword = \"const\")]"}, {"sha": "00b3b29698bed85cb66f2eb7115eff3c82dcbbd7", "filename": "src/test/incremental/const-generics/issue-61338.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61338.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -0,0 +1,14 @@\n+// revisions:rpass1\n+\n+#![feature(const_generics)]\n+\n+struct Struct<T>(T);\n+\n+impl<T, const N: usize> Struct<[T; N]> {\n+    fn f() {}\n+    fn g() { Self::f(); }\n+}\n+\n+fn main() {\n+    Struct::<[u32; 3]>::g();\n+}"}, {"sha": "a7465b77267a59f2f5a2feebed449cd150ac51f4", "filename": "src/test/incremental/const-generics/issue-61516.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61516.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -0,0 +1,16 @@\n+// revisions:rpass1\n+\n+#![feature(const_generics)]\n+\n+struct FakeArray<T, const N: usize>(T);\n+\n+impl<T, const N: usize> FakeArray<T, { N }> {\n+    fn len(&self) -> usize {\n+        N\n+    }\n+}\n+\n+fn main() {\n+    let fa = FakeArray::<u32, { 32 }>(1);\n+    assert_eq!(fa.len(), 32);\n+}"}, {"sha": "90e279bfc74332682a3cad97976b0319990396a2", "filename": "src/test/incremental/const-generics/issue-62536.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-62536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-62536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-62536.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -0,0 +1,12 @@\n+// revisions:cfail1\n+#![feature(const_generics)]\n+//[cfail1]~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct S<T, const N: usize>([T; N]);\n+\n+fn f<T, const N: usize>(x: T) -> S<T, {N}> { panic!() }\n+\n+fn main() {\n+    f(0u8);\n+    //[cfail1]~^ ERROR type annotations needed\n+}"}, {"sha": "b3c12fbb6e81327e5918ba8a4438f7af60fcfe02", "filename": "src/test/incremental/const-generics/issue-64087.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-64087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-64087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-64087.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -0,0 +1,11 @@\n+// revisions:cfail1\n+#![feature(const_generics)]\n+//[cfail1]~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn combinator<T, const S: usize>() -> [T; S] {}\n+//[cfail1]~^ ERROR mismatched types\n+\n+fn main() {\n+    combinator().into_iter();\n+    //[cfail1]~^ ERROR type annotations needed\n+}"}, {"sha": "353e323e67b448dad05424b299d9c7aa9a456fcd", "filename": "src/test/incremental/const-generics/issue-65623.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-65623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-65623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-65623.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -0,0 +1,14 @@\n+// revisions:rpass1\n+#![feature(const_generics)]\n+\n+pub struct Foo<T, const N: usize>([T; 0]);\n+\n+impl<T, const N: usize> Foo<T, {N}> {\n+    pub fn new() -> Self {\n+        Foo([])\n+    }\n+}\n+\n+fn main() {\n+    let _: Foo<u32, 0> = Foo::new();\n+}"}, {"sha": "8e134ad14fc144e6f11bda977f768d8fb5c7c8c2", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "4e8ba5a209df8d9e80bd4238264b9ef342826519", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -22,7 +22,7 @@ pub fn change_name() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"HirBody,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name() {\n     let _y = 2u64;\n@@ -86,7 +86,7 @@ pub fn change_mutability_of_slot() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"HirBody,typeck_tables_of,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_slot() {\n     let _x: u64 = 0;\n@@ -182,7 +182,7 @@ pub fn add_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"HirBody,typeck_tables_of,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n@@ -198,7 +198,7 @@ pub fn change_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"HirBody,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "ca85ee39e36715146df7724d3bff5470ec29bc99", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "1e628d019196b3b619c18ca5ef972424af31bbe5", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "295c2244879f8cc6f448f851047446c629c127e5", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "6f03438ff723487bbf04ee56297133a0391654df", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -0,0 +1,89 @@\n+// compile-flags: -C overflow-checks=no\n+\n+fn use_zst(_: ((), ())) { }\n+\n+struct Temp {\n+    x: u8\n+}\n+\n+fn use_u8(_: u8) { }\n+\n+fn main() {\n+    let ((), ()) = ((), ());\n+    use_zst(((), ()));\n+\n+    use_u8((Temp { x : 40 }).x + 2);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.main.SimplifyLocals.before.mir\n+// let mut _0: ();\n+// let mut _1: ((), ());\n+// let mut _2: ();\n+// let mut _3: ();\n+// let _4: ();\n+// let mut _5: ((), ());\n+// let mut _6: ();\n+// let mut _7: ();\n+// let _8: ();\n+// let mut _9: u8;\n+// let mut _10: u8;\n+// let mut _11: Temp;\n+// scope 1 {\n+// }\n+// bb0: {\n+//   StorageLive(_1);\n+//   StorageLive(_2);\n+//   _2 = const Scalar(<ZST>) : ();\n+//   StorageLive(_3);\n+//   _3 = const Scalar(<ZST>) : ();\n+//   _1 = const Scalar(<ZST>) : ((), ());\n+//   StorageDead(_3);\n+//   StorageDead(_2);\n+//   StorageDead(_1);\n+//   StorageLive(_4);\n+//   StorageLive(_6);\n+//   _6 = const Scalar(<ZST>) : ();\n+//   StorageLive(_7);\n+//   _7 = const Scalar(<ZST>) : ();\n+//   StorageDead(_7);\n+//   StorageDead(_6);\n+//   _4 = const use_zst(const Scalar(<ZST>) : ((), ())) -> bb1;\n+// }\n+// bb1: {\n+//   StorageDead(_4);\n+//   StorageLive(_8);\n+//   StorageLive(_10);\n+//   StorageLive(_11);\n+//   _11 = const Scalar(0x28) : Temp;\n+//   _10 = const 40u8;\n+//   StorageDead(_10);\n+//   _8 = const use_u8(const 42u8) -> bb2;\n+// }\n+// bb2: {\n+//   StorageDead(_11);\n+//   StorageDead(_8);\n+//   return;\n+// }\n+// END rustc.main.SimplifyLocals.before.mir\n+// START rustc.main.SimplifyLocals.after.mir\n+// let mut _0: ();\n+// let _1: ();\n+// let _2: ();\n+// scope 1 {\n+// }\n+// bb0: {\n+//   StorageLive(_1);\n+//   _1 = const use_zst(const Scalar(<ZST>) : ((), ())) -> bb1;\n+// }\n+// bb1: {\n+//   StorageDead(_1);\n+//   StorageLive(_2);\n+//   _2 = const use_u8(const 42u8) -> bb2;\n+// }\n+// bb2: {\n+//   StorageDead(_2);\n+//   return;\n+// }\n+// END rustc.main.SimplifyLocals.after.mir"}, {"sha": "f270dec5fe232511e1881b3ce0c17e40f4f77106", "filename": "src/test/mir-opt/slice-drop-shim.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs?ref=10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "patch": "@@ -1,5 +1,7 @@\n+// compile-flags: -Zmir-opt-level=0\n+\n fn main() {\n-    std::ptr::drop_in_place::<[String]> as unsafe fn(_);\n+    let _fn = std::ptr::drop_in_place::<[String]> as unsafe fn(_);\n }\n \n // END RUST SOURCE"}]}