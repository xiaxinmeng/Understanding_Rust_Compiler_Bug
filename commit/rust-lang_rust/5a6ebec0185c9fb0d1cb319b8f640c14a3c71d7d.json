{"sha": "5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNmViZWMwMTg1YzlmYjBkMWNiMzE5YjhmNjQwYzE0YTNjNzFkN2Q=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-06T18:38:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-10T18:25:56Z"}, "message": "syntax: Remove `SyntaxExtension::MultiDecorator` and `MultiItemDecorator`", "tree": {"sha": "76ae3932f6d12443cea9004c45f09d61bc253eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76ae3932f6d12443cea9004c45f09d61bc253eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d", "html_url": "https://github.com/rust-lang/rust/commit/5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "url": "https://api.github.com/repos/rust-lang/rust/commits/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "html_url": "https://github.com/rust-lang/rust/commit/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445"}], "stats": {"total": 411, "additions": 1, "deletions": 410}, "files": [{"sha": "9979f5d0a0edf3933cff5f144e02b43fd711d7dd", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d", "patch": "@@ -137,29 +137,6 @@ impl Annotatable {\n     }\n }\n \n-// A more flexible ItemDecorator.\n-pub trait MultiItemDecorator {\n-    fn expand(&self,\n-              ecx: &mut ExtCtxt<'_>,\n-              sp: Span,\n-              meta_item: &ast::MetaItem,\n-              item: &Annotatable,\n-              push: &mut dyn FnMut(Annotatable));\n-}\n-\n-impl<F> MultiItemDecorator for F\n-    where F : Fn(&mut ExtCtxt<'_>, Span, &ast::MetaItem, &Annotatable, &mut dyn FnMut(Annotatable))\n-{\n-    fn expand(&self,\n-              ecx: &mut ExtCtxt<'_>,\n-              sp: Span,\n-              meta_item: &ast::MetaItem,\n-              item: &Annotatable,\n-              push: &mut dyn FnMut(Annotatable)) {\n-        (*self)(ecx, sp, meta_item, item, push)\n-    }\n-}\n-\n // `meta_item` is the annotation, and `item` is the item being modified.\n // FIXME Decorators should follow the same pattern too.\n pub trait MultiItemModifier {\n@@ -581,14 +558,6 @@ pub enum SyntaxExtension {\n     /// A trivial \"extension\" that does nothing, only keeps the attribute and marks it as known.\n     NonMacroAttr { mark_used: bool },\n \n-    /// A syntax extension that is attached to an item and creates new items\n-    /// based upon it.\n-    ///\n-    /// `#[derive(...)]` is a `MultiItemDecorator`.\n-    ///\n-    /// Prefer ProcMacro or MultiModifier since they are more flexible.\n-    MultiDecorator(Box<dyn MultiItemDecorator + sync::Sync + sync::Send>),\n-\n     /// A syntax extension that is attached to an item and modifies it\n     /// in-place. Also allows decoration, i.e., creating new items.\n     MultiModifier(Box<dyn MultiItemModifier + sync::Sync + sync::Send>),\n@@ -658,7 +627,6 @@ impl SyntaxExtension {\n             SyntaxExtension::ProcMacro { .. } =>\n                 MacroKind::Bang,\n             SyntaxExtension::NonMacroAttr { .. } |\n-            SyntaxExtension::MultiDecorator(..) |\n             SyntaxExtension::MultiModifier(..) |\n             SyntaxExtension::AttrProcMacro(..) =>\n                 MacroKind::Attr,\n@@ -688,7 +656,6 @@ impl SyntaxExtension {\n             SyntaxExtension::ProcMacroDerive(.., edition) => edition,\n             // Unstable legacy stuff\n             SyntaxExtension::NonMacroAttr { .. } |\n-            SyntaxExtension::MultiDecorator(..) |\n             SyntaxExtension::MultiModifier(..) |\n             SyntaxExtension::BuiltinDerive(..) => default_edition,\n         }"}, {"sha": "715303db17378c51192b54c658da088cff544c02", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5a6ebec0185c9fb0d1cb319b8f640c14a3c71d7d", "patch": "@@ -575,14 +575,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let item = mac.expand(self.cx, attr.span, &meta, item);\n                 Some(invoc.fragment_kind.expect_from_annotatables(item))\n             }\n-            MultiDecorator(ref mac) => {\n-                let mut items = Vec::new();\n-                let meta = attr.parse_meta(self.cx.parse_sess)\n-                               .expect(\"derive meta should already have been parsed\");\n-                mac.expand(self.cx, attr.span, &meta, &item, &mut |item| items.push(item));\n-                items.push(item);\n-                Some(invoc.fragment_kind.expect_from_annotatables(items))\n-            }\n             AttrProcMacro(ref mac, ..) => {\n                 self.gate_proc_macro_attr_item(attr.span, &item);\n                 let item_tok = TokenTree::token(token::Interpolated(Lrc::new(match item {\n@@ -791,8 +783,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 }\n             }\n \n-            MultiDecorator(..) | MultiModifier(..) |\n-            AttrProcMacro(..) | SyntaxExtension::NonMacroAttr { .. } => {\n+            MultiModifier(..) | AttrProcMacro(..) | SyntaxExtension::NonMacroAttr { .. } => {\n                 self.cx.span_err(path.span,\n                                  &format!(\"`{}` can only be used in attributes\", path));\n                 self.cx.trace_macros_diag();"}, {"sha": "4d6ff47a3ee918666b944fd64676f1043982221d", "filename": "src/test/run-pass-fulldeps/auxiliary/custom-derive-partial-eq.rs", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom-derive-partial-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom-derive-partial-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom-derive-partial-eq.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -1,71 +0,0 @@\n-// force-host\n-\n-#![feature(plugin_registrar, rustc_private)]\n-\n-extern crate syntax;\n-extern crate syntax_ext;\n-extern crate rustc_plugin;\n-\n-use syntax_ext::deriving;\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n-\n-use rustc_plugin::Registry;\n-use syntax::ast::*;\n-use syntax::source_map::Span;\n-use syntax::ext::base::*;\n-use syntax::ext::build::AstBuilder;\n-use syntax::symbol::Symbol;\n-use syntax::ptr::P;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_syntax_extension(Symbol::intern(\"derive_CustomPartialEq\"),\n-                                  MultiDecorator(Box::new(expand_deriving_partial_eq)));\n-}\n-\n-fn expand_deriving_partial_eq(cx: &mut ExtCtxt, span: Span, mitem: &MetaItem, item: &Annotatable,\n-                              push: &mut FnMut(Annotatable)) {\n-    // structures are equal if all fields are equal, and non equal, if\n-    // any fields are not equal or if the enum variants are different\n-    fn cs_eq(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n-        cs_fold(true,\n-                |cx, span, subexpr, self_f, other_fs| {\n-                    let other_f = (other_fs.len(), other_fs.get(0)).1.unwrap();\n-                    let eq = cx.expr_binary(span, BinOpKind::Eq, self_f, other_f.clone());\n-                    cx.expr_binary(span, BinOpKind::And, subexpr, eq)\n-                },\n-                cx.expr_bool(span, true),\n-                Box::new(|cx, span, _, _| cx.expr_bool(span, false)),\n-                cx,\n-                span,\n-                substr)\n-    }\n-\n-    let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n-    let attrs = vec![cx.attribute(span, inline)];\n-    let methods = vec![MethodDef {\n-        name: \"eq\",\n-        generics: LifetimeBounds::empty(),\n-        explicit_self: borrowed_explicit_self(),\n-        args: vec![(borrowed_self(), \"other\")],\n-        ret_ty: Literal(deriving::generic::ty::Path::new_local(\"bool\")),\n-        attributes: attrs,\n-        is_unsafe: false,\n-        unify_fieldless_variants: true,\n-        combine_substructure: combine_substructure(Box::new(cs_eq)),\n-    }];\n-\n-    let trait_def = TraitDef {\n-        span: span,\n-        attributes: Vec::new(),\n-        path: deriving::generic::ty::Path::new(vec![\"cmp\", \"PartialEq\"]),\n-        additional_bounds: Vec::new(),\n-        generics: LifetimeBounds::empty(),\n-        is_unsafe: false,\n-        supports_unions: false,\n-        methods: methods,\n-        associated_types: Vec::new(),\n-    };\n-    trait_def.expand(cx, mitem, item, push)\n-}"}, {"sha": "c6b33fbc75ee23dbd29e30c3a5c2ff325eea6a95", "filename": "src/test/run-pass-fulldeps/auxiliary/custom-derive-plugin-attr.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom-derive-plugin-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom-derive-plugin-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom-derive-plugin-attr.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -1,84 +0,0 @@\n-// force-host\n-\n-#![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n-#![feature(rustc_private)]\n-\n-extern crate syntax;\n-extern crate syntax_ext;\n-extern crate syntax_pos;\n-extern crate rustc;\n-extern crate rustc_plugin;\n-\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::ext::base::{MultiDecorator, ExtCtxt, Annotatable};\n-use syntax::ext::build::AstBuilder;\n-use syntax::symbol::{Symbol, sym};\n-use syntax::ptr::P;\n-use syntax_ext::deriving::generic::{TraitDef, MethodDef, combine_substructure};\n-use syntax_ext::deriving::generic::{Substructure, Struct, EnumMatching};\n-use syntax_ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n-use syntax_pos::Span;\n-use rustc_plugin::Registry;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_syntax_extension(\n-        Symbol::intern(\"rustc_derive_TotalSum\"),\n-        MultiDecorator(box expand));\n-}\n-\n-fn expand(cx: &mut ExtCtxt,\n-          span: Span,\n-          mitem: &ast::MetaItem,\n-          item: &Annotatable,\n-          push: &mut FnMut(Annotatable)) {\n-    let trait_def = TraitDef {\n-        span: span,\n-        attributes: vec![],\n-        path: Path::new_local(\"TotalSum\"),\n-        additional_bounds: vec![],\n-        generics: LifetimeBounds::empty(),\n-        associated_types: vec![],\n-        is_unsafe: false,\n-        supports_unions: false,\n-        methods: vec![\n-            MethodDef {\n-                name: \"total_sum\",\n-                generics: LifetimeBounds::empty(),\n-                explicit_self: borrowed_explicit_self(),\n-                args: vec![],\n-                ret_ty: Literal(Path::new_local(\"isize\")),\n-                attributes: vec![],\n-                is_unsafe: false,\n-                unify_fieldless_variants: true,\n-                combine_substructure: combine_substructure(Box::new(totalsum_substructure)),\n-            },\n-        ],\n-    };\n-\n-    trait_def.expand(cx, mitem, item, push)\n-}\n-\n-// Mostly copied from syntax::ext::deriving::hash\n-/// Defines how the implementation for `trace()` is to be generated\n-fn totalsum_substructure(cx: &mut ExtCtxt, trait_span: Span,\n-                         substr: &Substructure) -> P<ast::Expr> {\n-    let fields = match *substr.fields {\n-        Struct(_, ref fs) | EnumMatching(.., ref fs) => fs,\n-        _ => cx.span_bug(trait_span, \"impossible substructure\")\n-    };\n-\n-    fields.iter().fold(cx.expr_isize(trait_span, 0), |acc, ref item| {\n-        if attr::contains_name(&item.attrs, sym::ignore) {\n-            acc\n-        } else {\n-            cx.expr_binary(item.span, ast::BinOpKind::Add, acc,\n-                           cx.expr_method_call(item.span,\n-                                               item.self_.clone(),\n-                                               substr.method_ident,\n-                                               Vec::new()))\n-        }\n-    })\n-}"}, {"sha": "874a0ec7c13fba640680bc324d34e4521b1fd89e", "filename": "src/test/run-pass-fulldeps/auxiliary/custom-derive-plugin.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom-derive-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom-derive-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom-derive-plugin.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -1,76 +0,0 @@\n-// force-host\n-\n-#![feature(plugin_registrar)]\n-#![feature(box_syntax)]\n-#![feature(rustc_private)]\n-\n-extern crate syntax;\n-extern crate syntax_ext;\n-extern crate syntax_pos;\n-extern crate rustc;\n-extern crate rustc_plugin;\n-\n-use syntax::ast;\n-use syntax::ext::base::{MultiDecorator, ExtCtxt, Annotatable};\n-use syntax::ext::build::AstBuilder;\n-use syntax::symbol::Symbol;\n-use syntax_ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_substructure};\n-use syntax_ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n-use syntax_pos::Span;\n-use rustc_plugin::Registry;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_syntax_extension(\n-        Symbol::intern(\"derive_TotalSum\"),\n-        MultiDecorator(box expand));\n-\n-    reg.register_syntax_extension(\n-        Symbol::intern(\"derive_Nothing\"),\n-        MultiDecorator(box noop));\n-}\n-\n-fn noop(_: &mut ExtCtxt, _: Span, _: &ast::MetaItem, _: &Annotatable, _: &mut FnMut(Annotatable)) {}\n-\n-fn expand(cx: &mut ExtCtxt,\n-          span: Span,\n-          mitem: &ast::MetaItem,\n-          item: &Annotatable,\n-          push: &mut FnMut(Annotatable)) {\n-    let trait_def = TraitDef {\n-        span: span,\n-        attributes: vec![],\n-        path: Path::new_local(\"TotalSum\"),\n-        additional_bounds: vec![],\n-        generics: LifetimeBounds::empty(),\n-        associated_types: vec![],\n-        is_unsafe: false,\n-        supports_unions: false,\n-        methods: vec![\n-            MethodDef {\n-                name: \"total_sum\",\n-                generics: LifetimeBounds::empty(),\n-                explicit_self: borrowed_explicit_self(),\n-                args: vec![],\n-                ret_ty: Literal(Path::new_local(\"isize\")),\n-                attributes: vec![],\n-                is_unsafe: false,\n-                unify_fieldless_variants: true,\n-                combine_substructure: combine_substructure(box |cx, span, substr| {\n-                    let zero = cx.expr_isize(span, 0);\n-                    cs_fold(false,\n-                            |cx, span, subexpr, field, _| {\n-                                cx.expr_binary(span, ast::BinOpKind::Add, subexpr,\n-                                    cx.expr_method_call(span, field,\n-                                        ast::Ident::from_str(\"total_sum\"), vec![]))\n-                            },\n-                            zero,\n-                            box |cx, span, _, _| { cx.span_bug(span, \"wtf??\"); },\n-                            cx, span, substr)\n-                }),\n-            },\n-        ],\n-    };\n-\n-    trait_def.expand(cx, mitem, item, push)\n-}"}, {"sha": "ac8fff4f6bfad0c49b0407dc389117163c79d51b", "filename": "src/test/run-pass-fulldeps/custom-derive-partial-eq.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fcustom-derive-partial-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fcustom-derive-partial-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcustom-derive-partial-eq.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -1,10 +0,0 @@\n-// aux-build:custom-derive-partial-eq.rs\n-// ignore-stage1\n-#![feature(plugin)]\n-#![plugin(custom_derive_partial_eq)]\n-#![allow(unused)]\n-\n-#[derive_CustomPartialEq] // Check that this is not a stability error.\n-enum E { V1, V2 }\n-\n-fn main() {}"}, {"sha": "38eaa71dd6abaa8fd455ac27c7b229b6cdd85864", "filename": "src/test/run-pass-fulldeps/derive-totalsum-attr.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -1,64 +0,0 @@\n-// aux-build:custom-derive-plugin-attr.rs\n-// ignore-stage1\n-\n-#![feature(plugin, rustc_attrs)]\n-#![plugin(custom_derive_plugin_attr)]\n-\n-trait TotalSum {\n-    fn total_sum(&self) -> isize;\n-}\n-\n-impl TotalSum for isize {\n-    fn total_sum(&self) -> isize {\n-        *self\n-    }\n-}\n-\n-struct Seven;\n-\n-impl TotalSum for Seven {\n-    fn total_sum(&self) -> isize {\n-        7\n-    }\n-}\n-\n-#[rustc_derive_TotalSum]\n-struct Foo {\n-    seven: Seven,\n-    bar: Bar,\n-    baz: isize,\n-    #[ignore]\n-    nan: NaN,\n-}\n-\n-#[rustc_derive_TotalSum]\n-struct Bar {\n-    quux: isize,\n-    bleh: isize,\n-    #[ignore]\n-    nan: NaN2\n-}\n-\n-struct NaN;\n-\n-impl TotalSum for NaN {\n-    fn total_sum(&self) -> isize {\n-        panic!();\n-    }\n-}\n-\n-struct NaN2;\n-\n-pub fn main() {\n-    let v = Foo {\n-        seven: Seven,\n-        bar: Bar {\n-            quux: 9,\n-            bleh: 3,\n-            nan: NaN2\n-        },\n-        baz: 80,\n-        nan: NaN\n-    };\n-    assert_eq!(v.total_sum(), 99);\n-}"}, {"sha": "2b0bb51d90aec59a345e384140c3074aaada1613", "filename": "src/test/run-pass-fulldeps/derive-totalsum.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -1,49 +0,0 @@\n-// aux-build:custom-derive-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(custom_derive_plugin)]\n-\n-trait TotalSum {\n-    fn total_sum(&self) -> isize;\n-}\n-\n-impl TotalSum for isize {\n-    fn total_sum(&self) -> isize {\n-        *self\n-    }\n-}\n-\n-struct Seven;\n-\n-impl TotalSum for Seven {\n-    fn total_sum(&self) -> isize {\n-        7\n-    }\n-}\n-\n-#[derive_TotalSum]\n-struct Foo {\n-    seven: Seven,\n-    bar: Bar,\n-    baz: isize,\n-}\n-\n-#[derive_TotalSum]\n-struct Bar {\n-    quux: isize,\n-    bleh: isize,\n-}\n-\n-\n-pub fn main() {\n-    let v = Foo {\n-        seven: Seven,\n-        bar: Bar {\n-            quux: 9,\n-            bleh: 3,\n-        },\n-        baz: 80,\n-    };\n-    assert_eq!(v.total_sum(), 99);\n-}"}, {"sha": "133f6302bde57cf15834f7801b95f6f9e2c526d3", "filename": "src/test/run-pass-fulldeps/issue-40663.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40663.rs?ref=97f4e700c20ccc95f4e9ed3d2c9d368cbc4be445", "patch": "@@ -1,13 +0,0 @@\n-#![allow(dead_code)]\n-// aux-build:custom-derive-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(custom_derive_plugin)]\n-\n-#[derive_Nothing]\n-#[derive_Nothing]\n-#[derive_Nothing]\n-struct S;\n-\n-fn main() {}"}]}