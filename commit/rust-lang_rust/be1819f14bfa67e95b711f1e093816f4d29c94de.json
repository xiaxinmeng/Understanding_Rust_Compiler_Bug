{"sha": "be1819f14bfa67e95b711f1e093816f4d29c94de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMTgxOWYxNGJmYTY3ZTk1YjcxMWYxZTA5MzgxNmY0ZDI5Yzk0ZGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-24T19:50:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-31T23:59:57Z"}, "message": "add a series of tests for changes to structs\n\nThese tests reveal that the edges are in some cases\ntoo strict.", "tree": {"sha": "4d2f47fdf974ac809000ca077588af1b07fee536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d2f47fdf974ac809000ca077588af1b07fee536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be1819f14bfa67e95b711f1e093816f4d29c94de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be1819f14bfa67e95b711f1e093816f4d29c94de", "html_url": "https://github.com/rust-lang/rust/commit/be1819f14bfa67e95b711f1e093816f4d29c94de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be1819f14bfa67e95b711f1e093816f4d29c94de/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298730e7032cd55809423773da397cd5c7d827d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/298730e7032cd55809423773da397cd5c7d827d4", "html_url": "https://github.com/rust-lang/rust/commit/298730e7032cd55809423773da397cd5c7d827d4"}], "stats": {"total": 326, "additions": 326, "deletions": 0}, "files": [{"sha": "425aa3e07a0ec6963deafb8ce70f5c50a4e3ad14", "filename": "src/test/incremental/struct_add_field.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_add_field.rs?ref=be1819f14bfa67e95b711f1e093816f4d29c94de", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test incremental compilation tracking where we change field names\n+// in between revisions (hashing should be stable).\n+\n+// revisions:rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+pub struct X {\n+    pub x: u32,\n+\n+    #[cfg(rpass2)]\n+    pub x2: u32,\n+}\n+\n+pub struct EmbedX {\n+    x: X\n+}\n+\n+pub struct Y {\n+    pub y: char\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_X(x: X) -> u32 {\n+    x.x as u32\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_EmbedX(embed: EmbedX) -> u32 {\n+    embed.x.x as u32\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")] // FIXME(#33850) should be clean\n+pub fn use_Y() {\n+    let x: Y = Y { y: 'c' };\n+}\n+\n+pub fn main() { }"}, {"sha": "cf6f89bd8a4c59db6d5be7bcb3c3adfba79fdc7c", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=be1819f14bfa67e95b711f1e093816f4d29c94de", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test incremental compilation tracking where we change field names\n+// in between revisions (hashing should be stable).\n+\n+// revisions:rpass1 cfail2\n+\n+#![feature(rustc_attrs)]\n+\n+#[cfg(rpass1)]\n+pub struct X {\n+    pub x: u32\n+}\n+\n+#[cfg(cfail2)]\n+pub struct X {\n+    pub y: u32\n+}\n+\n+pub struct EmbedX {\n+    x: X\n+}\n+\n+pub struct Y {\n+    pub y: char\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+pub fn use_X() -> u32 {\n+    let x: X = X { x: 22 };\n+    //[cfail2]~^ ERROR structure `X` has no field named `x`\n+    x.x as u32\n+    //[cfail2]~^ ERROR attempted access of field `x`\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+pub fn use_EmbedX(embed: EmbedX) -> u32 {\n+    embed.x.x as u32\n+    //[cfail2]~^ ERROR attempted access of field `x`\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")] // FIXME(#33850) should be clean\n+pub fn use_Y() {\n+    let x: Y = Y { y: 'c' };\n+}\n+\n+pub fn main() { }"}, {"sha": "2bd61a3f559d45a622c8e6b1d59053f8727eef3a", "filename": "src/test/incremental/struct_change_field_type.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs?ref=be1819f14bfa67e95b711f1e093816f4d29c94de", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test incremental compilation tracking where we change nothing\n+// in between revisions (hashing should be stable).\n+\n+// revisions:rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+#[cfg(rpass1)]\n+pub struct X {\n+    pub x: u32\n+}\n+\n+#[cfg(rpass2)]\n+pub struct X {\n+    pub x: i32\n+}\n+\n+pub struct EmbedX {\n+    x: X\n+}\n+\n+pub struct Y {\n+    pub y: char\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_X() -> u32 {\n+    let x: X = X { x: 22 };\n+    x.x as u32\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_EmbedX(x: EmbedX) -> u32 {\n+    let x: X = X { x: 22 };\n+    x.x as u32\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")] // FIXME(#33850) should be clean\n+pub fn use_Y() {\n+    let x: Y = Y { y: 'c' };\n+}\n+\n+pub fn main() { }"}, {"sha": "2ddcaf157210dfef38201bad5d729743d5527db4", "filename": "src/test/incremental/struct_change_field_type_cross_crate/auxiliary/a.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fauxiliary%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fauxiliary%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fauxiliary%2Fa.rs?ref=be1819f14bfa67e95b711f1e093816f4d29c94de", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"rlib\"]\n+\n+ #[cfg(rpass1)]\n+pub struct X {\n+    pub x: u32\n+}\n+\n+#[cfg(rpass2)]\n+pub struct X {\n+    pub x: i32\n+}\n+\n+pub struct EmbedX {\n+    pub x: X\n+}\n+\n+pub struct Y {\n+    pub y: char\n+}"}, {"sha": "19f146ce176d74f5aa0166b61f61861225342bae", "filename": "src/test/incremental/struct_change_field_type_cross_crate/b.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs?ref=be1819f14bfa67e95b711f1e093816f4d29c94de", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:a.rs\n+// revisions:rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+extern crate a;\n+\n+use a::*;\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_X() -> u32 {\n+    let x: X = X { x: 22 };\n+    x.x as u32\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_EmbedX(embed: EmbedX) -> u32 {\n+    embed.x.x as u32\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")] // FIXME(#33850) should be clean\n+pub fn use_Y() {\n+    let x: Y = Y { y: 'c' };\n+}\n+\n+pub fn main() { }"}, {"sha": "8095e1ecd84a095cc1aca02506ed707981c23530", "filename": "src/test/incremental/struct_change_nothing.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs?ref=be1819f14bfa67e95b711f1e093816f4d29c94de", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test incremental compilation tracking where we change nothing\n+// in between revisions (hashing should be stable).\n+\n+// revisions:rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+#[cfg(rpass1)]\n+pub struct X {\n+    pub x: u32\n+}\n+\n+#[cfg(rpass2)]\n+pub struct X {\n+    pub x: u32\n+}\n+\n+pub struct EmbedX {\n+    x: X\n+}\n+\n+pub struct Y {\n+    pub y: char\n+}\n+\n+#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_X() -> u32 {\n+    let x: X = X { x: 22 };\n+    x.x as u32\n+}\n+\n+#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_EmbedX(x: EmbedX) -> u32 {\n+    let x: X = X { x: 22 };\n+    x.x as u32\n+}\n+\n+#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_Y() {\n+    let x: Y = Y { y: 'c' };\n+}\n+\n+pub fn main() { }"}, {"sha": "db49a7516275d24f3189ae08e5239d2fe97ddc2e", "filename": "src/test/incremental/struct_remove_field.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1819f14bfa67e95b711f1e093816f4d29c94de/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs?ref=be1819f14bfa67e95b711f1e093816f4d29c94de", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test incremental compilation tracking where we change field names\n+// in between revisions (hashing should be stable).\n+\n+// revisions:rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+#[cfg(rpass1)]\n+pub struct X {\n+    pub x: u32,\n+    pub x2: u32,\n+}\n+\n+#[cfg(rpass2)]\n+pub struct X {\n+    pub x: u32,\n+}\n+\n+pub struct EmbedX {\n+    x: X\n+}\n+\n+pub struct Y {\n+    pub y: char\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_X(x: X) -> u32 {\n+    x.x as u32\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+pub fn use_EmbedX(embed: EmbedX) -> u32 {\n+    embed.x.x as u32\n+}\n+\n+#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")] // FIXME(#33850) should be clean\n+pub fn use_Y() {\n+    let x: Y = Y { y: 'c' };\n+}\n+\n+pub fn main() { }"}]}