{"sha": "d010809c8c0062a4c7a3249254a5193dd1ca15c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTA4MDljOGMwMDYyYTRjN2EzMjQ5MjU0YTUxOTNkZDFjYTE1Yzc=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-03T20:01:22Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-04T00:02:25Z"}, "message": "Backport another LLVM commit to rustc_apfloat\n\nBackports LLVM commit:\n\n    [APFloat] convert SNaN to QNaN in convert() and raise Invalid signal\n\nhttps://github.com/llvm/llvm-project/commit/149f5b573c79eac0c519ada4d2f7c50e17796cdf\n\nSNaN to QNaN conversion also matches what my Intel x86_64 hardware does.", "tree": {"sha": "aeb59ff3f9e668b5dd8c7b7ef0680b4c593b6487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeb59ff3f9e668b5dd8c7b7ef0680b4c593b6487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d010809c8c0062a4c7a3249254a5193dd1ca15c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d010809c8c0062a4c7a3249254a5193dd1ca15c7", "html_url": "https://github.com/rust-lang/rust/commit/d010809c8c0062a4c7a3249254a5193dd1ca15c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d010809c8c0062a4c7a3249254a5193dd1ca15c7/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f5008c8293a4d1eb3e4557a36a6bfdef34de284", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5008c8293a4d1eb3e4557a36a6bfdef34de284", "html_url": "https://github.com/rust-lang/rust/commit/7f5008c8293a4d1eb3e4557a36a6bfdef34de284"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "71bcb8f090d07f98a9f50fe31c0e63a83ef9b113", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d010809c8c0062a4c7a3249254a5193dd1ca15c7/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d010809c8c0062a4c7a3249254a5193dd1ca15c7/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=d010809c8c0062a4c7a3249254a5193dd1ca15c7", "patch": "@@ -1511,23 +1511,16 @@ impl<S: Semantics, T: Semantics> FloatConvert<IeeeFloat<T>> for IeeeFloat<S> {\n                 sig::set_bit(&mut r.sig, T::PRECISION - 1);\n             }\n \n-            // If we are truncating NaN, it is possible that we shifted out all of the\n-            // set bits in a signalling NaN payload. But NaN must remain NaN, so some\n-            // bit in the significand must be set (otherwise it is Inf).\n-            // This can only happen with sNaN. Set the 1st bit after the quiet bit,\n-            // so that we still have an sNaN.\n-            if r.sig[0] == 0 {\n-                assert!(shift < 0, \"Should not lose NaN payload on extend\");\n-                assert!(T::PRECISION >= 3, \"Unexpectedly narrow significand\");\n-                assert!(*loses_info, \"Missing payload should have set lost info\");\n-                sig::set_bit(&mut r.sig, T::PRECISION - 3);\n-            }\n-\n-            // gcc forces the Quiet bit on, which means (float)(double)(float_sNan)\n-            // does not give you back the same bits. This is dubious, and we\n-            // don't currently do it. You're really supposed to get\n-            // an invalid operation signal at runtime, but nobody does that.\n-            status = Status::OK;\n+            // Convert of sNaN creates qNaN and raises an exception (invalid op).\n+            // This also guarantees that a sNaN does not become Inf on a truncation\n+            // that loses all payload bits.\n+            if self.is_signaling() {\n+                // Quiet signaling NaN.\n+                sig::set_bit(&mut r.sig, T::QNAN_BIT);\n+                status = Status::INVALID_OP;\n+            } else {\n+                status = Status::OK;\n+            }\n         } else {\n             *loses_info = false;\n             status = Status::OK;"}, {"sha": "63d925cce9ad7f6e22e55388ef772b127c57bba6", "filename": "compiler/rustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d010809c8c0062a4c7a3249254a5193dd1ca15c7/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d010809c8c0062a4c7a3249254a5193dd1ca15c7/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs?ref=d010809c8c0062a4c7a3249254a5193dd1ca15c7", "patch": "@@ -570,9 +570,11 @@ fn fma() {\n fn issue_69532() {\n     let f = Double::from_bits(0x7FF0_0000_0000_0001u64 as u128);\n     let mut loses_info = false;\n-    let r: Single = f.convert(&mut loses_info).value;\n+    let sta = f.convert(&mut loses_info);\n+    let r: Single = sta.value;\n     assert!(loses_info);\n     assert!(r.is_nan());\n+    assert_eq!(sta.status, Status::INVALID_OP);\n }\n \n #[test]\n@@ -1501,27 +1503,32 @@ fn convert() {\n     assert_eq!(4294967295.0, test.to_f64());\n     assert!(!loses_info);\n \n-    let test = Single::snan(None);\n-    let x87_snan = X87DoubleExtended::snan(None);\n-    let test: X87DoubleExtended = test.convert(&mut loses_info).value;\n-    assert!(test.bitwise_eq(x87_snan));\n-    assert!(!loses_info);\n-\n     let test = Single::qnan(None);\n     let x87_qnan = X87DoubleExtended::qnan(None);\n     let test: X87DoubleExtended = test.convert(&mut loses_info).value;\n     assert!(test.bitwise_eq(x87_qnan));\n     assert!(!loses_info);\n \n-    let test = X87DoubleExtended::snan(None);\n-    let test: X87DoubleExtended = test.convert(&mut loses_info).value;\n-    assert!(test.bitwise_eq(x87_snan));\n+    let test = Single::snan(None);\n+    let sta = test.convert(&mut loses_info);\n+    let test: X87DoubleExtended = sta.value;\n+    assert!(test.is_nan());\n+    assert!(!test.is_signaling());\n     assert!(!loses_info);\n+    assert_eq!(sta.status, Status::INVALID_OP);\n \n     let test = X87DoubleExtended::qnan(None);\n     let test: X87DoubleExtended = test.convert(&mut loses_info).value;\n     assert!(test.bitwise_eq(x87_qnan));\n     assert!(!loses_info);\n+\n+    let test = X87DoubleExtended::snan(None);\n+    let sta = test.convert(&mut loses_info);\n+    let test: X87DoubleExtended = sta.value;\n+    assert!(test.is_nan());\n+    assert!(!test.is_signaling());\n+    assert!(!loses_info);\n+    assert_eq!(sta.status, Status::INVALID_OP);\n }\n \n #[test]"}]}