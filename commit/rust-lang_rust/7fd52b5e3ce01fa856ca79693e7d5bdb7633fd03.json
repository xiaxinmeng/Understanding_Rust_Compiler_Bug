{"sha": "7fd52b5e3ce01fa856ca79693e7d5bdb7633fd03", "node_id": "C_kwDOAAsO6NoAKDdmZDUyYjVlM2NlMDFmYTg1NmNhNzk2OTNlN2Q1YmRiNzYzM2ZkMDM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-03-16T02:33:26Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-03-16T02:33:26Z"}, "message": "Small simplification to `transmute_undefined_repr`", "tree": {"sha": "d3c51070faff8a9d069d4084785a030aa852ff4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c51070faff8a9d069d4084785a030aa852ff4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fd52b5e3ce01fa856ca79693e7d5bdb7633fd03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd52b5e3ce01fa856ca79693e7d5bdb7633fd03", "html_url": "https://github.com/rust-lang/rust/commit/7fd52b5e3ce01fa856ca79693e7d5bdb7633fd03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fd52b5e3ce01fa856ca79693e7d5bdb7633fd03/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442d4ce1c36011a8b12fb3ce9a4d70a7031fc4d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/442d4ce1c36011a8b12fb3ce9a4d70a7031fc4d5", "html_url": "https://github.com/rust-lang/rust/commit/442d4ce1c36011a8b12fb3ce9a4d70a7031fc4d5"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "f0aa3a2fa28689c6d4a1e664440a7a3c30d01050", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fd52b5e3ce01fa856ca79693e7d5bdb7633fd03/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fd52b5e3ce01fa856ca79693e7d5bdb7633fd03/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=7fd52b5e3ce01fa856ca79693e7d5bdb7633fd03", "patch": "@@ -23,7 +23,7 @@ pub(super) fn check<'tcx>(\n                 unsized_ty,\n                 to_ty: to_sub_ty,\n             } => match reduce_ty(cx, to_sub_ty) {\n-                ReducedTy::IntArray | ReducedTy::TypeErasure => break,\n+                ReducedTy::TypeErasure => break,\n                 ReducedTy::UnorderedFields(ty) if is_size_pair(ty) => break,\n                 ReducedTy::Ref(to_sub_ty) => {\n                     from_ty = unsized_ty;\n@@ -49,7 +49,7 @@ pub(super) fn check<'tcx>(\n                 unsized_ty,\n                 from_ty: from_sub_ty,\n             } => match reduce_ty(cx, from_sub_ty) {\n-                ReducedTy::IntArray | ReducedTy::TypeErasure => break,\n+                ReducedTy::TypeErasure => break,\n                 ReducedTy::UnorderedFields(ty) if is_size_pair(ty) => break,\n                 ReducedTy::Ref(from_sub_ty) => {\n                     from_ty = from_sub_ty;\n@@ -125,8 +125,7 @@ pub(super) fn check<'tcx>(\n                 from_ty: from_sub_ty,\n                 to_ty: to_sub_ty,\n             } => match (reduce_ty(cx, from_sub_ty), reduce_ty(cx, to_sub_ty)) {\n-                (ReducedTy::IntArray | ReducedTy::TypeErasure, _)\n-                | (_, ReducedTy::IntArray | ReducedTy::TypeErasure) => return false,\n+                (ReducedTy::TypeErasure, _) | (_, ReducedTy::TypeErasure) => return false,\n                 (ReducedTy::UnorderedFields(from_ty), ReducedTy::UnorderedFields(to_ty)) if from_ty != to_ty => {\n                     span_lint_and_then(\n                         cx,\n@@ -265,9 +264,6 @@ enum ReducedTy<'tcx> {\n     UnorderedFields(Ty<'tcx>),\n     /// The type is a reference to the contained type.\n     Ref(Ty<'tcx>),\n-    /// The type is an array of a primitive integer type. These can be used as storage for a value\n-    /// of another type.\n-    IntArray,\n     /// Any other type.\n     Other(Ty<'tcx>),\n }\n@@ -277,7 +273,7 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n     loop {\n         ty = cx.tcx.try_normalize_erasing_regions(cx.param_env, ty).unwrap_or(ty);\n         return match *ty.kind() {\n-            ty::Array(sub_ty, _) if matches!(sub_ty.kind(), ty::Int(_) | ty::Uint(_)) => ReducedTy::IntArray,\n+            ty::Array(sub_ty, _) if matches!(sub_ty.kind(), ty::Int(_) | ty::Uint(_)) => ReducedTy::TypeErasure,\n             ty::Array(sub_ty, _) | ty::Slice(sub_ty) => {\n                 ty = sub_ty;\n                 continue;"}]}