{"sha": "4b8700879c59d1673dc36ea16aff3020af23dcc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiODcwMDg3OWM1OWQxNjczZGMzNmVhMTZhZmYzMDIwYWYyM2RjYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-13T14:21:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-13T14:21:20Z"}, "message": "Auto merge of #5792 - flip1995:rollup-torc1we, r=flip1995\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #5443 (Some accuracy lints for floating point operations)\n - #5752 (Move range_minus_one to pedantic)\n - #5756 (unnecessary_sort_by: avoid linting if key borrows)\n - #5784 (Fix out of bounds access by checking length equality BEFORE accessing by index.)\n - #5786 (fix phrase in new_lint issue template)\n\nFailed merges:\n\nr? @ghost\n\nchangelog: rollup", "tree": {"sha": "e49ddb022fa5dacc464ceb901e0ce9a30f592f07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e49ddb022fa5dacc464ceb901e0ce9a30f592f07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b8700879c59d1673dc36ea16aff3020af23dcc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8700879c59d1673dc36ea16aff3020af23dcc5", "html_url": "https://github.com/rust-lang/rust/commit/4b8700879c59d1673dc36ea16aff3020af23dcc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b8700879c59d1673dc36ea16aff3020af23dcc5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "html_url": "https://github.com/rust-lang/rust/commit/fa4a737fba9b9f32ebe0c54e3734e864af6ea093"}, {"sha": "314b068e2dfda364b7da178c374510fbd58129b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/314b068e2dfda364b7da178c374510fbd58129b8", "html_url": "https://github.com/rust-lang/rust/commit/314b068e2dfda364b7da178c374510fbd58129b8"}], "stats": {"total": 750, "additions": 656, "deletions": 94}, "files": [{"sha": "98fd0df685fdb31711ea1c8234f9afea43e62c0a", "filename": ".github/ISSUE_TEMPLATE/new_lint.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/.github%2FISSUE_TEMPLATE%2Fnew_lint.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/.github%2FISSUE_TEMPLATE%2Fnew_lint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fnew_lint.md?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -12,7 +12,7 @@ labels: L-lint\n \n - Kind: *See <https://github.com/rust-lang/rust-clippy/blob/master/README.md#clippy> for list of lint kinds*\n \n-*What benefit of this lint over old code?*\n+*What is the advantage of the recommended code over the original code*\n \n For example:\n - Remove bounce checking inserted by ..."}, {"sha": "3087d6a940a867268b8aab2c823193400bed58d8", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 224, "deletions": 3, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -1,11 +1,11 @@\n use crate::consts::{\n     constant, constant_simple, Constant,\n-    Constant::{F32, F64},\n+    Constant::{Int, F32, F64},\n };\n-use crate::utils::{higher, numeric_literal, span_lint_and_sugg, sugg, SpanlessEq};\n+use crate::utils::{get_parent_expr, higher, numeric_literal, span_lint_and_sugg, sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -293,6 +293,121 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     }\n }\n \n+fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n+    if let Some((value, _)) = constant(cx, cx.tables(), &args[1]) {\n+        if value == Int(2) {\n+            if let Some(parent) = get_parent_expr(cx, expr) {\n+                if let Some(grandparent) = get_parent_expr(cx, parent) {\n+                    if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = grandparent.kind {\n+                        if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n+                            return;\n+                        }\n+                    }\n+                }\n+\n+                if let ExprKind::Binary(\n+                    Spanned {\n+                        node: BinOpKind::Add, ..\n+                    },\n+                    ref lhs,\n+                    ref rhs,\n+                ) = parent.kind\n+                {\n+                    let other_addend = if lhs.hir_id == expr.hir_id { rhs } else { lhs };\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        SUBOPTIMAL_FLOPS,\n+                        parent.span,\n+                        \"square can be computed more efficiently\",\n+                        \"consider using\",\n+                        format!(\n+                            \"{}.mul_add({}, {})\",\n+                            Sugg::hir(cx, &args[0], \"..\"),\n+                            Sugg::hir(cx, &args[0], \"..\"),\n+                            Sugg::hir(cx, &other_addend, \"..\"),\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    );\n+\n+                    return;\n+                }\n+            }\n+\n+            span_lint_and_sugg(\n+                cx,\n+                SUBOPTIMAL_FLOPS,\n+                expr.span,\n+                \"square can be computed more efficiently\",\n+                \"consider using\",\n+                format!(\"{} * {}\", Sugg::hir(cx, &args[0], \"..\"), Sugg::hir(cx, &args[0], \"..\")),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn detect_hypot(cx: &LateContext<'_>, args: &[Expr<'_>]) -> Option<String> {\n+    if let ExprKind::Binary(\n+        Spanned {\n+            node: BinOpKind::Add, ..\n+        },\n+        ref add_lhs,\n+        ref add_rhs,\n+    ) = args[0].kind\n+    {\n+        // check if expression of the form x * x + y * y\n+        if_chain! {\n+            if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref lmul_lhs, ref lmul_rhs) = add_lhs.kind;\n+            if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref rmul_lhs, ref rmul_rhs) = add_rhs.kind;\n+            if are_exprs_equal(cx, lmul_lhs, lmul_rhs);\n+            if are_exprs_equal(cx, rmul_lhs, rmul_rhs);\n+            then {\n+                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, &lmul_lhs, \"..\"), Sugg::hir(cx, &rmul_lhs, \"..\")));\n+            }\n+        }\n+\n+        // check if expression of the form x.powi(2) + y.powi(2)\n+        if_chain! {\n+            if let ExprKind::MethodCall(\n+                PathSegment { ident: lmethod_name, .. },\n+                ref _lspan,\n+                ref largs,\n+                _\n+            ) = add_lhs.kind;\n+            if let ExprKind::MethodCall(\n+                PathSegment { ident: rmethod_name, .. },\n+                ref _rspan,\n+                ref rargs,\n+                _\n+            ) = add_rhs.kind;\n+            if lmethod_name.as_str() == \"powi\" && rmethod_name.as_str() == \"powi\";\n+            if let Some((lvalue, _)) = constant(cx, cx.tables(), &largs[1]);\n+            if let Some((rvalue, _)) = constant(cx, cx.tables(), &rargs[1]);\n+            if Int(2) == lvalue && Int(2) == rvalue;\n+            then {\n+                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, &largs[0], \"..\"), Sugg::hir(cx, &rargs[0], \"..\")));\n+            }\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn check_hypot(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n+    if let Some(message) = detect_hypot(cx, args) {\n+        span_lint_and_sugg(\n+            cx,\n+            IMPRECISE_FLOPS,\n+            expr.span,\n+            \"hypotenuse can be computed more accurately\",\n+            \"consider using\",\n+            message,\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n+\n // TODO: Lint expressions of the form `x.exp() - y` where y > 1\n // and suggest usage of `x.exp_m1() - (y - 1)` instead\n fn check_expm1(cx: &LateContext<'_>, expr: &Expr<'_>) {\n@@ -344,6 +459,14 @@ fn check_mul_add(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         rhs,\n     ) = &expr.kind\n     {\n+        if let Some(parent) = get_parent_expr(cx, expr) {\n+            if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = parent.kind {\n+                if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n+                    return;\n+                }\n+            }\n+        }\n+\n         let (recv, arg1, arg2) = if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, lhs) {\n             (inner_lhs, inner_rhs, rhs)\n         } else if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, rhs) {\n@@ -479,6 +602,100 @@ fn check_custom_abs(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     }\n }\n \n+fn are_same_base_logs(cx: &LateContext<'_>, expr_a: &Expr<'_>, expr_b: &Expr<'_>) -> bool {\n+    if_chain! {\n+        if let ExprKind::MethodCall(PathSegment { ident: method_name_a, .. }, _, ref args_a, _) = expr_a.kind;\n+        if let ExprKind::MethodCall(PathSegment { ident: method_name_b, .. }, _, ref args_b, _) = expr_b.kind;\n+        then {\n+            return method_name_a.as_str() == method_name_b.as_str() &&\n+                args_a.len() == args_b.len() &&\n+                (\n+                    [\"ln\", \"log2\", \"log10\"].contains(&&*method_name_a.as_str()) ||\n+                    method_name_a.as_str() == \"log\" && args_a.len() == 2 && are_exprs_equal(cx, &args_a[1], &args_b[1])\n+                );\n+        }\n+    }\n+\n+    false\n+}\n+\n+fn check_log_division(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    // check if expression of the form x.logN() / y.logN()\n+    if_chain! {\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Div, ..\n+            },\n+            lhs,\n+            rhs,\n+        ) = &expr.kind;\n+        if are_same_base_logs(cx, lhs, rhs);\n+        if let ExprKind::MethodCall(_, _, ref largs, _) = lhs.kind;\n+        if let ExprKind::MethodCall(_, _, ref rargs, _) = rhs.kind;\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                SUBOPTIMAL_FLOPS,\n+                expr.span,\n+                \"log base can be expressed more clearly\",\n+                \"consider using\",\n+                format!(\"{}.log({})\", Sugg::hir(cx, &largs[0], \"..\"), Sugg::hir(cx, &rargs[0], \"..\"),),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Div, ..\n+            },\n+            div_lhs,\n+            div_rhs,\n+        ) = &expr.kind;\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Mul, ..\n+            },\n+            mul_lhs,\n+            mul_rhs,\n+        ) = &div_lhs.kind;\n+        if let Some((rvalue, _)) = constant(cx, cx.tables(), div_rhs);\n+        if let Some((lvalue, _)) = constant(cx, cx.tables(), mul_rhs);\n+        then {\n+            // TODO: also check for constant values near PI/180 or 180/PI\n+            if (F32(f32_consts::PI) == rvalue || F64(f64_consts::PI) == rvalue) &&\n+               (F32(180_f32) == lvalue || F64(180_f64) == lvalue)\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    SUBOPTIMAL_FLOPS,\n+                    expr.span,\n+                    \"conversion to degrees can be done more accurately\",\n+                    \"consider using\",\n+                    format!(\"{}.to_degrees()\", Sugg::hir(cx, &mul_lhs, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            } else if\n+                (F32(180_f32) == rvalue || F64(180_f64) == rvalue) &&\n+                (F32(f32_consts::PI) == lvalue || F64(f64_consts::PI) == lvalue)\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    SUBOPTIMAL_FLOPS,\n+                    expr.span,\n+                    \"conversion to radians can be done more accurately\",\n+                    \"consider using\",\n+                    format!(\"{}.to_radians()\", Sugg::hir(cx, &mul_lhs, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::MethodCall(ref path, _, args, _) = &expr.kind {\n@@ -489,13 +706,17 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n                     \"ln\" => check_ln1p(cx, expr, args),\n                     \"log\" => check_log_base(cx, expr, args),\n                     \"powf\" => check_powf(cx, expr, args),\n+                    \"powi\" => check_powi(cx, expr, args),\n+                    \"sqrt\" => check_hypot(cx, expr, args),\n                     _ => {},\n                 }\n             }\n         } else {\n             check_expm1(cx, expr);\n             check_mul_add(cx, expr);\n             check_custom_abs(cx, expr);\n+            check_log_division(cx, expr);\n+            check_radians(cx, expr);\n         }\n     }\n }"}, {"sha": "fa560ffb980c82407d748018b6b12717c7572267", "filename": "clippy_lints/src/let_and_return.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_and_return.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -1,6 +1,5 @@\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, PatKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -9,7 +8,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{in_macro, match_qpath, snippet_opt, span_lint_and_then};\n+use crate::utils::{fn_def_id, in_macro, match_qpath, snippet_opt, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let`-bindings, which are subsequently\n@@ -97,22 +96,6 @@ struct BorrowVisitor<'a, 'tcx> {\n     borrows: bool,\n }\n \n-impl BorrowVisitor<'_, '_> {\n-    fn fn_def_id(&self, expr: &Expr<'_>) -> Option<DefId> {\n-        match &expr.kind {\n-            ExprKind::MethodCall(..) => self.cx.tables().type_dependent_def_id(expr.hir_id),\n-            ExprKind::Call(\n-                Expr {\n-                    kind: ExprKind::Path(qpath),\n-                    ..\n-                },\n-                ..,\n-            ) => self.cx.qpath_res(qpath, expr.hir_id).opt_def_id(),\n-            _ => None,\n-        }\n-    }\n-}\n-\n impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n@@ -121,7 +104,7 @@ impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n             return;\n         }\n \n-        if let Some(def_id) = self.fn_def_id(expr) {\n+        if let Some(def_id) = fn_def_id(self.cx, expr) {\n             self.borrows = self\n                 .cx\n                 .tcx"}, {"sha": "aa911cf59ee017c6dc9cc381de98e73f53b50507", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -1161,6 +1161,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n         LintId::of(&non_expressive_names::SIMILAR_NAMES),\n         LintId::of(&option_if_let_else::OPTION_IF_LET_ELSE),\n+        LintId::of(&ranges::RANGE_MINUS_ONE),\n         LintId::of(&ranges::RANGE_PLUS_ONE),\n         LintId::of(&shadow::SHADOW_UNRELATED),\n         LintId::of(&strings::STRING_ADD_ASSIGN),\n@@ -1383,7 +1384,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ptr::PTR_ARG),\n         LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n         LintId::of(&question_mark::QUESTION_MARK),\n-        LintId::of(&ranges::RANGE_MINUS_ONE),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n         LintId::of(&ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n@@ -1599,7 +1599,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n         LintId::of(&precedence::PRECEDENCE),\n         LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n-        LintId::of(&ranges::RANGE_MINUS_ONE),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),"}, {"sha": "dd608de5723e228defc9f1e9be5d91a2c0a445e6", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -52,6 +52,11 @@ declare_clippy_lint! {\n     /// exclusive ranges, because they essentially add an extra branch that\n     /// LLVM may fail to hoist out of the loop.\n     ///\n+    /// This will cause a warning that cannot be fixed if the consumer of the\n+    /// range only accepts a specific range type, instead of the generic\n+    /// `RangeBounds` trait\n+    /// ([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n+    ///\n     /// **Example:**\n     /// ```rust,ignore\n     /// for x..(y+1) { .. }\n@@ -72,7 +77,10 @@ declare_clippy_lint! {\n     /// **Why is this bad?** The code is more readable with an exclusive range\n     /// like `x..y`.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** This will cause a warning that cannot be fixed if\n+    /// the consumer of the range only accepts a specific range type, instead of\n+    /// the generic `RangeBounds` trait\n+    /// ([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n     ///\n     /// **Example:**\n     /// ```rust,ignore\n@@ -83,7 +91,7 @@ declare_clippy_lint! {\n     /// for x..y { .. }\n     /// ```\n     pub RANGE_MINUS_ONE,\n-    complexity,\n+    pedantic,\n     \"`x..=(y-1)` reads better as `x..y`\"\n }\n "}, {"sha": "91c1789a2ffb1b592da5b6c06132962fa074aed1", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -5,24 +5,23 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, subst::GenericArgKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// **What it does:**\n-    /// Detects when people use `Vec::sort_by` and pass in a function\n+    /// Detects uses of `Vec::sort_by` passing in a closure\n     /// which compares the two arguments, either directly or indirectly.\n     ///\n     /// **Why is this bad?**\n     /// It is more clear to use `Vec::sort_by_key` (or `Vec::sort` if\n-    /// possible) than to use `Vec::sort_by` and and a more complicated\n+    /// possible) than to use `Vec::sort_by` and a more complicated\n     /// closure.\n     ///\n     /// **Known problems:**\n-    /// If the suggested `Vec::sort_by_key` uses Reverse and it isn't\n-    /// imported by a use statement in the current frame, then a `use`\n-    /// statement that imports it will need to be added (which this lint\n-    /// can't do).\n+    /// If the suggested `Vec::sort_by_key` uses Reverse and it isn't already\n+    /// imported by a use statement, then it will need to be added manually.\n     ///\n     /// **Example:**\n     ///\n@@ -201,28 +200,41 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n             };\n             let vec_name = Sugg::hir(cx, &args[0], \"..\").to_string();\n             let unstable = name == \"sort_unstable_by\";\n+\n             if_chain! {\n                 if let ExprKind::Path(QPath::Resolved(_, Path {\n                     segments: [PathSegment { ident: left_name, .. }], ..\n                 })) = &left_expr.kind;\n                 if left_name == left_ident;\n                 then {\n-                    Some(LintTrigger::Sort(SortDetection { vec_name, unstable }))\n-                }\n-                else {\n-                    Some(LintTrigger::SortByKey(SortByKeyDetection {\n-                        vec_name,\n-                        unstable,\n-                        closure_arg,\n-                        closure_body,\n-                        reverse\n-                    }))\n+                    return Some(LintTrigger::Sort(SortDetection { vec_name, unstable }))\n+                } else {\n+                    if !key_returns_borrow(cx, left_expr) {\n+                        return Some(LintTrigger::SortByKey(SortByKeyDetection {\n+                            vec_name,\n+                            unstable,\n+                            closure_arg,\n+                            closure_body,\n+                            reverse\n+                        }))\n+                    }\n                 }\n             }\n-        } else {\n-            None\n         }\n     }\n+\n+    None\n+}\n+\n+fn key_returns_borrow(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let Some(def_id) = utils::fn_def_id(cx, expr) {\n+        let output = cx.tcx.fn_sig(def_id).output();\n+        let ty = output.skip_binder();\n+        return matches!(ty.kind, ty::Ref(..))\n+            || ty.walk().any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n+    }\n+\n+    false\n }\n \n impl LateLintPass<'_> for UnnecessarySortBy {"}, {"sha": "502bf0c427954b616a817d91512586ff1f968d68", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -400,8 +400,8 @@ fn extend_with_matching(\n \n /// Are the patterns in `ps1` and `ps2` equal save for `ps1[idx]` compared to `ps2[idx]`?\n fn eq_pre_post(ps1: &[P<Pat>], ps2: &[P<Pat>], idx: usize) -> bool {\n-    ps1[idx].is_rest() == ps2[idx].is_rest() // Avoid `[x, ..] | [x, 0]` => `[x, .. | 0]`.\n-        && ps1.len() == ps2.len()\n+    ps1.len() == ps2.len()\n+        && ps1[idx].is_rest() == ps2[idx].is_rest() // Avoid `[x, ..] | [x, 0]` => `[x, .. | 0]`.\n         && over(&ps1[..idx], &ps2[..idx], |l, r| eq_pat(l, r))\n         && over(&ps1[idx + 1..], &ps2[idx + 1..], |l, r| eq_pat(l, r))\n }"}, {"sha": "4b7a1c2b537f382c5a825eb631221bda07a005fc", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -1356,6 +1356,21 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n     )\n }\n \n+/// Returns the `DefId` of the callee if the given expression is a function or method call.\n+pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n+    match &expr.kind {\n+        ExprKind::MethodCall(..) => cx.tables().type_dependent_def_id(expr.hir_id),\n+        ExprKind::Call(\n+            Expr {\n+                kind: ExprKind::Path(qpath),\n+                ..\n+            },\n+            ..,\n+        ) => cx.tables().qpath_res(qpath, expr.hir_id).opt_def_id(),\n+        _ => None,\n+    }\n+}\n+\n pub fn run_lints(cx: &LateContext<'_>, lints: &[&'static Lint], id: HirId) -> bool {\n     lints.iter().any(|lint| {\n         matches!("}, {"sha": "0c77e07c872ae14169c4d4ef1fb38a6aa61ab50d", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -1790,7 +1790,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"range_minus_one\",\n-        group: \"complexity\",\n+        group: \"pedantic\",\n         desc: \"`x..=(y-1)` reads better as `x..y`\",\n         deprecation: None,\n         module: \"ranges\","}, {"sha": "bbe411b3f48843bc0487d14a326e6e0df0ebb663", "filename": "tests/ui/floating_point_hypot.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_hypot.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_hypot.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_hypot.fixed?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![warn(clippy::imprecise_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 4f32;\n+    let _ = x.hypot(y);\n+    let _ = (x + 1f32).hypot(y);\n+    let _ = x.hypot(y);\n+    // Cases where the lint shouldn't be applied\n+    // TODO: linting this adds some complexity, but could be done\n+    let _ = x.mul_add(x, y * y).sqrt();\n+    let _ = (x * 4f32 + y * y).sqrt();\n+}"}, {"sha": "586fd170ea14565dc41018f640c1c27da3672e3b", "filename": "tests/ui/floating_point_hypot.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_hypot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_hypot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_hypot.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![warn(clippy::imprecise_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 4f32;\n+    let _ = (x * x + y * y).sqrt();\n+    let _ = ((x + 1f32) * (x + 1f32) + y * y).sqrt();\n+    let _ = (x.powi(2) + y.powi(2)).sqrt();\n+    // Cases where the lint shouldn't be applied\n+    // TODO: linting this adds some complexity, but could be done\n+    let _ = x.mul_add(x, y * y).sqrt();\n+    let _ = (x * 4f32 + y * y).sqrt();\n+}"}, {"sha": "42069d9ee9efbad760b05431f0262688149eda5f", "filename": "tests/ui/floating_point_hypot.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_hypot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_hypot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_hypot.stderr?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,22 @@\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_hypot.rs:7:13\n+   |\n+LL |     let _ = (x * x + y * y).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.hypot(y)`\n+   |\n+   = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n+\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_hypot.rs:8:13\n+   |\n+LL |     let _ = ((x + 1f32) * (x + 1f32) + y * y).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 1f32).hypot(y)`\n+\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_hypot.rs:9:13\n+   |\n+LL |     let _ = (x.powi(2) + y.powi(2)).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.hypot(y)`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7dc7ee94affc0d06c7ca21e0ad7df80a8d9903d9", "filename": "tests/ui/floating_point_log.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_log.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_log.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.fixed?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -25,11 +25,11 @@ fn check_ln1p() {\n     let _ = 2.0f32.ln_1p();\n     let _ = x.ln_1p();\n     let _ = (x / 2.0).ln_1p();\n-    let _ = x.powi(2).ln_1p();\n-    let _ = (x.powi(2) / 2.0).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n+    let _ = (x.powi(3) / 2.0).ln_1p();\n     let _ = ((std::f32::consts::E - 1.0)).ln_1p();\n     let _ = x.ln_1p();\n-    let _ = x.powi(2).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n     let _ = (x + 2.0).ln_1p();\n     let _ = (x / 2.0).ln_1p();\n     // Cases where the lint shouldn't be applied\n@@ -43,9 +43,9 @@ fn check_ln1p() {\n     let _ = 2.0f64.ln_1p();\n     let _ = x.ln_1p();\n     let _ = (x / 2.0).ln_1p();\n-    let _ = x.powi(2).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n     let _ = x.ln_1p();\n-    let _ = x.powi(2).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n     let _ = (x + 2.0).ln_1p();\n     let _ = (x / 2.0).ln_1p();\n     // Cases where the lint shouldn't be applied"}, {"sha": "01181484e7dee290c0973d60a38a93bd71062905", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -25,11 +25,11 @@ fn check_ln1p() {\n     let _ = (1f32 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n     let _ = (1.0 + x / 2.0).ln();\n-    let _ = (1.0 + x.powi(2)).ln();\n-    let _ = (1.0 + x.powi(2) / 2.0).ln();\n+    let _ = (1.0 + x.powi(3)).ln();\n+    let _ = (1.0 + x.powi(3) / 2.0).ln();\n     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n     let _ = (x + 1.0).ln();\n-    let _ = (x.powi(2) + 1.0).ln();\n+    let _ = (x.powi(3) + 1.0).ln();\n     let _ = (x + 2.0 + 1.0).ln();\n     let _ = (x / 2.0 + 1.0).ln();\n     // Cases where the lint shouldn't be applied\n@@ -43,9 +43,9 @@ fn check_ln1p() {\n     let _ = (1f64 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n     let _ = (1.0 + x / 2.0).ln();\n-    let _ = (1.0 + x.powi(2)).ln();\n+    let _ = (1.0 + x.powi(3)).ln();\n     let _ = (x + 1.0).ln();\n-    let _ = (x.powi(2) + 1.0).ln();\n+    let _ = (x.powi(3) + 1.0).ln();\n     let _ = (x + 2.0 + 1.0).ln();\n     let _ = (x / 2.0 + 1.0).ln();\n     // Cases where the lint shouldn't be applied"}, {"sha": "900dc2b79336a8bd1e67a642c54a6eb1c74966fa", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -77,14 +77,14 @@ LL |     let _ = (1.0 + x / 2.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:28:13\n    |\n-LL |     let _ = (1.0 + x.powi(2)).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(3)).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:29:13\n    |\n-LL |     let _ = (1.0 + x.powi(2) / 2.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(2) / 2.0).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(3) / 2.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(3) / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:30:13\n@@ -101,8 +101,8 @@ LL |     let _ = (x + 1.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:32:13\n    |\n-LL |     let _ = (x.powi(2) + 1.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (x.powi(3) + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:33:13\n@@ -143,8 +143,8 @@ LL |     let _ = (1.0 + x / 2.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:46:13\n    |\n-LL |     let _ = (1.0 + x.powi(2)).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(3)).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:47:13\n@@ -155,8 +155,8 @@ LL |     let _ = (x + 1.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:48:13\n    |\n-LL |     let _ = (x.powi(2) + 1.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (x.powi(3) + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:49:13"}, {"sha": "13962a272d4552b6ccce46a9ff908890e0add9cf", "filename": "tests/ui/floating_point_logbase.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_logbase.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_logbase.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.fixed?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 5f32;\n+    let _ = x.log(y);\n+    let _ = x.log(y);\n+    let _ = x.log(y);\n+    let _ = x.log(y);\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.ln() / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.ln();\n+    let _ = x.log(5f32) / y.log(7f32);\n+}"}, {"sha": "26bc20d5370b1f0a6f678d1b7d54b6fe447487d8", "filename": "tests/ui/floating_point_logbase.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_logbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_logbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 5f32;\n+    let _ = x.ln() / y.ln();\n+    let _ = x.log2() / y.log2();\n+    let _ = x.log10() / y.log10();\n+    let _ = x.log(5f32) / y.log(5f32);\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.ln() / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.ln();\n+    let _ = x.log(5f32) / y.log(7f32);\n+}"}, {"sha": "78354c2f62d432eaf0e9c7a9cd6670bfc3bbc4cf", "filename": "tests/ui/floating_point_logbase.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_logbase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_logbase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.stderr?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,28 @@\n+error: log base can be expressed more clearly\n+  --> $DIR/floating_point_logbase.rs:7:13\n+   |\n+LL |     let _ = x.ln() / y.ln();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: log base can be expressed more clearly\n+  --> $DIR/floating_point_logbase.rs:8:13\n+   |\n+LL |     let _ = x.log2() / y.log2();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: log base can be expressed more clearly\n+  --> $DIR/floating_point_logbase.rs:9:13\n+   |\n+LL |     let _ = x.log10() / y.log10();\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: log base can be expressed more clearly\n+  --> $DIR/floating_point_logbase.rs:10:13\n+   |\n+LL |     let _ = x.log(5f32) / y.log(5f32);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "911700bab0040e2e4a33439c537b73cbbeb69721", "filename": "tests/ui/floating_point_mul_add.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_mul_add.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_mul_add.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.fixed?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -18,4 +18,9 @@ fn main() {\n \n     let _ = a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c)) + c;\n     let _ = 1234.567_f64.mul_add(45.67834_f64, 0.0004_f64);\n+\n+    let _ = a.mul_add(a, b).sqrt();\n+\n+    // Cases where the lint shouldn't be applied\n+    let _ = (a * a + b * b).sqrt();\n }"}, {"sha": "d202385fc8ae76a0ee0f169852b1d410b3a76f77", "filename": "tests/ui/floating_point_mul_add.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_mul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_mul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -18,4 +18,9 @@ fn main() {\n \n     let _ = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n+\n+    let _ = (a * a + b).sqrt();\n+\n+    // Cases where the lint shouldn't be applied\n+    let _ = (a * a + b * b).sqrt();\n }"}, {"sha": "ac8d0c0cae068cf87162396380ce510e075d3477", "filename": "tests/ui/floating_point_mul_add.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_mul_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_mul_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.stderr?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -54,5 +54,11 @@ error: multiply and add expressions can be calculated more efficiently and accur\n LL |     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1234.567_f64.mul_add(45.67834_f64, 0.0004_f64)`\n \n-error: aborting due to 9 previous errors\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_mul_add.rs:22:13\n+   |\n+LL |     let _ = (a * a + b).sqrt();\n+   |             ^^^^^^^^^^^ help: consider using: `a.mul_add(a, b)`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "b0641a100cdc810b4a3c7d3d045928970dfe1272", "filename": "tests/ui/floating_point_powf.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powf.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powf.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.fixed?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let _ = (-3.1f32).exp();\n     let _ = x.sqrt();\n     let _ = x.cbrt();\n-    let _ = x.powi(2);\n+    let _ = x.powi(3);\n     let _ = x.powi(-2);\n     let _ = x.powi(16_777_215);\n     let _ = x.powi(-16_777_215);\n@@ -30,7 +30,7 @@ fn main() {\n     let _ = (-3.1f64).exp();\n     let _ = x.sqrt();\n     let _ = x.cbrt();\n-    let _ = x.powi(2);\n+    let _ = x.powi(3);\n     let _ = x.powi(-2);\n     let _ = x.powi(-2_147_483_648);\n     let _ = x.powi(2_147_483_647);"}, {"sha": "a0a2c973900f4b7ba943f29a7bb90dcecaf6a8ce", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let _ = std::f32::consts::E.powf(-3.1);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n-    let _ = x.powf(2.0);\n+    let _ = x.powf(3.0);\n     let _ = x.powf(-2.0);\n     let _ = x.powf(16_777_215.0);\n     let _ = x.powf(-16_777_215.0);\n@@ -30,7 +30,7 @@ fn main() {\n     let _ = std::f64::consts::E.powf(-3.1);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n-    let _ = x.powf(2.0);\n+    let _ = x.powf(3.0);\n     let _ = x.powf(-2.0);\n     let _ = x.powf(-2_147_483_648.0);\n     let _ = x.powf(2_147_483_647.0);"}, {"sha": "2422eb911e90a7041dedbecccf2fa2677a12710d", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -53,8 +53,8 @@ LL |     let _ = x.powf(1.0 / 3.0);\n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:14:13\n    |\n-LL |     let _ = x.powf(2.0);\n-   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+LL |     let _ = x.powf(3.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:15:13\n@@ -125,8 +125,8 @@ LL |     let _ = x.powf(1.0 / 3.0);\n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:33:13\n    |\n-LL |     let _ = x.powf(2.0);\n-   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+LL |     let _ = x.powf(3.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:34:13"}, {"sha": "56762400593b54fc3806cd7636594698fdf9962a", "filename": "tests/ui/floating_point_powi.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.fixed?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let one = 1;\n+    let x = 3f32;\n+    let _ = x * x;\n+    let _ = x * x;\n+\n+    let y = 4f32;\n+    let _ = x.mul_add(x, y);\n+    let _ = y.mul_add(y, x);\n+    let _ = x.mul_add(x, y).sqrt();\n+    let _ = y.mul_add(y, x).sqrt();\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.powi(3);\n+    let _ = x.powi(one + 1);\n+    let _ = (x.powi(2) + y.powi(2)).sqrt();\n+}"}, {"sha": "1f800e4628dcae43fa277f5cbabc5897b9b67008", "filename": "tests/ui/floating_point_powi.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let one = 1;\n+    let x = 3f32;\n+    let _ = x.powi(2);\n+    let _ = x.powi(1 + 1);\n+\n+    let y = 4f32;\n+    let _ = x.powi(2) + y;\n+    let _ = x + y.powi(2);\n+    let _ = (x.powi(2) + y).sqrt();\n+    let _ = (x + y.powi(2)).sqrt();\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.powi(3);\n+    let _ = x.powi(one + 1);\n+    let _ = (x.powi(2) + y.powi(2)).sqrt();\n+}"}, {"sha": "d5a5f1bcca1015cb948a125e4c2b09c873b2de0c", "filename": "tests/ui/floating_point_powi.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_powi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.stderr?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,40 @@\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:7:13\n+   |\n+LL |     let _ = x.powi(2);\n+   |             ^^^^^^^^^ help: consider using: `x * x`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:8:13\n+   |\n+LL |     let _ = x.powi(1 + 1);\n+   |             ^^^^^^^^^^^^^ help: consider using: `x * x`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:11:13\n+   |\n+LL |     let _ = x.powi(2) + y;\n+   |             ^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:12:13\n+   |\n+LL |     let _ = x + y.powi(2);\n+   |             ^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:13:13\n+   |\n+LL |     let _ = (x.powi(2) + y).sqrt();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:14:13\n+   |\n+LL |     let _ = (x + y.powi(2)).sqrt();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "92480c5db8be446f807d15087515ecab6482fdc3", "filename": "tests/ui/floating_point_rad.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_rad.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_rad.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.fixed?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let _ = x.to_degrees();\n+    let _ = x.to_radians();\n+    // Cases where the lint shouldn't be applied\n+    let _ = x * 90f32 / std::f32::consts::PI;\n+    let _ = x * std::f32::consts::PI / 90f32;\n+    let _ = x * 180f32 / std::f32::consts::E;\n+    let _ = x * std::f32::consts::E / 180f32;\n+}"}, {"sha": "062e7c3fdc17afe8d7c1aa4d9a53aa00bff0ae3c", "filename": "tests/ui/floating_point_rad.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_rad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_rad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let _ = x * 180f32 / std::f32::consts::PI;\n+    let _ = x * std::f32::consts::PI / 180f32;\n+    // Cases where the lint shouldn't be applied\n+    let _ = x * 90f32 / std::f32::consts::PI;\n+    let _ = x * std::f32::consts::PI / 90f32;\n+    let _ = x * 180f32 / std::f32::consts::E;\n+    let _ = x * std::f32::consts::E / 180f32;\n+}"}, {"sha": "a6ffdca64eefea7b563eec7a75c4002f87083be1", "filename": "tests/ui/floating_point_rad.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_rad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Ffloating_point_rad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.stderr?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -0,0 +1,16 @@\n+error: conversion to degrees can be done more accurately\n+  --> $DIR/floating_point_rad.rs:6:13\n+   |\n+LL |     let _ = x * 180f32 / std::f32::consts::PI;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_degrees()`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: conversion to radians can be done more accurately\n+  --> $DIR/floating_point_rad.rs:7:13\n+   |\n+LL |     let _ = x * std::f32::consts::PI / 180f32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_radians()`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "19b253b0fe2c6b94c1c43c9cfd4e736b438967b5", "filename": "tests/ui/range_plus_minus_one.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Frange_plus_minus_one.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Frange_plus_minus_one.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.fixed?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -7,6 +7,7 @@ fn f() -> usize {\n }\n \n #[warn(clippy::range_plus_one)]\n+#[warn(clippy::range_minus_one)]\n fn main() {\n     for _ in 0..2 {}\n     for _ in 0..=2 {}"}, {"sha": "7d034117547caf87990d1c824b99b872471eefe8", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -7,6 +7,7 @@ fn f() -> usize {\n }\n \n #[warn(clippy::range_plus_one)]\n+#[warn(clippy::range_minus_one)]\n fn main() {\n     for _ in 0..2 {}\n     for _ in 0..=2 {}"}, {"sha": "fb4f1658597a585de8f220e9255e0f5c57388ad5", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -1,57 +1,57 @@\n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:14:14\n+  --> $DIR/range_plus_minus_one.rs:15:14\n    |\n LL |     for _ in 0..3 + 1 {}\n    |              ^^^^^^^^ help: use: `0..=3`\n    |\n    = note: `-D clippy::range-plus-one` implied by `-D warnings`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:17:14\n+  --> $DIR/range_plus_minus_one.rs:18:14\n    |\n LL |     for _ in 0..1 + 5 {}\n    |              ^^^^^^^^ help: use: `0..=5`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:20:14\n+  --> $DIR/range_plus_minus_one.rs:21:14\n    |\n LL |     for _ in 1..1 + 1 {}\n    |              ^^^^^^^^ help: use: `1..=1`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:26:14\n+  --> $DIR/range_plus_minus_one.rs:27:14\n    |\n LL |     for _ in 0..(1 + f()) {}\n    |              ^^^^^^^^^^^^ help: use: `0..=f()`\n \n error: an exclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:30:13\n+  --> $DIR/range_plus_minus_one.rs:31:13\n    |\n LL |     let _ = ..=11 - 1;\n    |             ^^^^^^^^^ help: use: `..11`\n    |\n    = note: `-D clippy::range-minus-one` implied by `-D warnings`\n \n error: an exclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:31:13\n+  --> $DIR/range_plus_minus_one.rs:32:13\n    |\n LL |     let _ = ..=(11 - 1);\n    |             ^^^^^^^^^^^ help: use: `..11`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:32:13\n+  --> $DIR/range_plus_minus_one.rs:33:13\n    |\n LL |     let _ = (1..11 + 1);\n    |             ^^^^^^^^^^^ help: use: `(1..=11)`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:33:13\n+  --> $DIR/range_plus_minus_one.rs:34:13\n    |\n LL |     let _ = (f() + 1)..(f() + 1);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: use: `((f() + 1)..=f())`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:37:14\n+  --> $DIR/range_plus_minus_one.rs:38:14\n    |\n LL |     for _ in 1..ONE + ONE {}\n    |              ^^^^^^^^^^^^ help: use: `1..=ONE`"}, {"sha": "c017d1cf9a468bc03ddc55829e277442dfe87734", "filename": "tests/ui/unnecessary_sort_by.fixed", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Funnecessary_sort_by.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Funnecessary_sort_by.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.fixed?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -2,11 +2,11 @@\n \n use std::cmp::Reverse;\n \n-fn id(x: isize) -> isize {\n-    x\n-}\n+fn unnecessary_sort_by() {\n+    fn id(x: isize) -> isize {\n+        x\n+    }\n \n-fn main() {\n     let mut vec: Vec<isize> = vec![3, 6, 1, 2, 5];\n     // Forward examples\n     vec.sort();\n@@ -24,3 +24,41 @@ fn main() {\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_unstable_by(|a, _| a.cmp(c));\n }\n+\n+// Should not be linted to avoid hitting https://github.com/rust-lang/rust/issues/34162\n+mod issue_5754 {\n+    struct Test(String);\n+\n+    #[derive(PartialOrd, Ord, PartialEq, Eq)]\n+    struct Wrapper<'a>(&'a str);\n+\n+    impl Test {\n+        fn name(&self) -> &str {\n+            &self.0\n+        }\n+\n+        fn wrapped(&self) -> Wrapper<'_> {\n+            Wrapper(&self.0)\n+        }\n+    }\n+\n+    pub fn test() {\n+        let mut args: Vec<Test> = vec![];\n+\n+        // Forward\n+        args.sort_by(|a, b| a.name().cmp(b.name()));\n+        args.sort_by(|a, b| a.wrapped().cmp(&b.wrapped()));\n+        args.sort_unstable_by(|a, b| a.name().cmp(b.name()));\n+        args.sort_unstable_by(|a, b| a.wrapped().cmp(&b.wrapped()));\n+        // Reverse\n+        args.sort_by(|a, b| b.name().cmp(a.name()));\n+        args.sort_by(|a, b| b.wrapped().cmp(&a.wrapped()));\n+        args.sort_unstable_by(|a, b| b.name().cmp(a.name()));\n+        args.sort_unstable_by(|a, b| b.wrapped().cmp(&a.wrapped()));\n+    }\n+}\n+\n+fn main() {\n+    unnecessary_sort_by();\n+    issue_5754::test();\n+}"}, {"sha": "1929c72b2f2cd3737194c2c52eba6aaa309b3380", "filename": "tests/ui/unnecessary_sort_by.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8700879c59d1673dc36ea16aff3020af23dcc5/tests%2Fui%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.rs?ref=4b8700879c59d1673dc36ea16aff3020af23dcc5", "patch": "@@ -2,11 +2,11 @@\n \n use std::cmp::Reverse;\n \n-fn id(x: isize) -> isize {\n-    x\n-}\n+fn unnecessary_sort_by() {\n+    fn id(x: isize) -> isize {\n+        x\n+    }\n \n-fn main() {\n     let mut vec: Vec<isize> = vec![3, 6, 1, 2, 5];\n     // Forward examples\n     vec.sort_by(|a, b| a.cmp(b));\n@@ -24,3 +24,41 @@ fn main() {\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_unstable_by(|a, _| a.cmp(c));\n }\n+\n+// Should not be linted to avoid hitting https://github.com/rust-lang/rust/issues/34162\n+mod issue_5754 {\n+    struct Test(String);\n+\n+    #[derive(PartialOrd, Ord, PartialEq, Eq)]\n+    struct Wrapper<'a>(&'a str);\n+\n+    impl Test {\n+        fn name(&self) -> &str {\n+            &self.0\n+        }\n+\n+        fn wrapped(&self) -> Wrapper<'_> {\n+            Wrapper(&self.0)\n+        }\n+    }\n+\n+    pub fn test() {\n+        let mut args: Vec<Test> = vec![];\n+\n+        // Forward\n+        args.sort_by(|a, b| a.name().cmp(b.name()));\n+        args.sort_by(|a, b| a.wrapped().cmp(&b.wrapped()));\n+        args.sort_unstable_by(|a, b| a.name().cmp(b.name()));\n+        args.sort_unstable_by(|a, b| a.wrapped().cmp(&b.wrapped()));\n+        // Reverse\n+        args.sort_by(|a, b| b.name().cmp(a.name()));\n+        args.sort_by(|a, b| b.wrapped().cmp(&a.wrapped()));\n+        args.sort_unstable_by(|a, b| b.name().cmp(a.name()));\n+        args.sort_unstable_by(|a, b| b.wrapped().cmp(&a.wrapped()));\n+    }\n+}\n+\n+fn main() {\n+    unnecessary_sort_by();\n+    issue_5754::test();\n+}"}]}