{"sha": "ba9391334e8d23261eb09ce7162015993f7c2aa3", "node_id": "C_kwDOAAsO6NoAKGJhOTM5MTMzNGU4ZDIzMjYxZWIwOWNlNzE2MjAxNTk5M2Y3YzJhYTM", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-05-29T22:00:06Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-05-30T15:26:10Z"}, "message": "Add support for _COARSE clocks, spruce up comments", "tree": {"sha": "de0a850cf27606756c2bfd7f9fb62481273cfc76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0a850cf27606756c2bfd7f9fb62481273cfc76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9391334e8d23261eb09ce7162015993f7c2aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9391334e8d23261eb09ce7162015993f7c2aa3", "html_url": "https://github.com/rust-lang/rust/commit/ba9391334e8d23261eb09ce7162015993f7c2aa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9391334e8d23261eb09ce7162015993f7c2aa3/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c3e4b6556431c816d05b262a890905a2a50841a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3e4b6556431c816d05b262a890905a2a50841a", "html_url": "https://github.com/rust-lang/rust/commit/5c3e4b6556431c816d05b262a890905a2a50841a"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "be453a429ec5192616e31f6741b47cba0f865c53", "filename": "src/shims/time.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba9391334e8d23261eb09ce7162015993f7c2aa3/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9391334e8d23261eb09ce7162015993f7c2aa3/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=ba9391334e8d23261eb09ce7162015993f7c2aa3", "patch": "@@ -16,18 +16,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         clk_id_op: &OpTy<'tcx, Tag>,\n         tp_op: &OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n+        // This clock support is deliberately minimal because a lot of clock types have fiddly\n+        // properties (is it possible for Miri to be suspended independently of the host?). If you\n+        // have a use for another clock type, please open an issue.\n+\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"linux\", \"clock_gettime\");\n         this.check_no_isolation(\"`clock_gettime`\")?;\n \n         let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n \n-        let duration = if clk_id == this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n+        // Linux has two main kinds of clocks. REALTIME clocks return the actual time since the\n+        // Unix epoch, including effects which may cause time to move backwards such as NTP.\n+        // Linux further distinguishes regular and \"coarse\" clocks, but the \"coarse\" version\n+        // is just specified to be \"faster and less precise\", so we implement both the same way.\n+        let absolute_clocks =\n+            [this.eval_libc_i32(\"CLOCK_REALTIME\")?, this.eval_libc_i32(\"CLOCK_REALTIME_COARSE\")?];\n+        // The second kind is MONOTONIC clocks for which 0 is an arbitrary time point, but they are\n+        // never allowed to go backwards. We don't need to do any additonal monotonicity\n+        // enforcement because std::time::Instant already guarantees that it is monotonic.\n+        let relative_clocks =\n+            [this.eval_libc_i32(\"CLOCK_MONOTONIC\")?, this.eval_libc_i32(\"CLOCK_MONOTONIC_COARSE\")?];\n+\n+        let duration = if absolute_clocks.contains(&clk_id) {\n             system_time_to_duration(&SystemTime::now())?\n-        } else if clk_id == this.eval_libc_i32(\"CLOCK_MONOTONIC\")? {\n-            // Absolute time does not matter, only relative time does, so we can just\n-            // use our own time anchor here.\n+        } else if relative_clocks.contains(&clk_id) {\n             Instant::now().duration_since(this.machine.time_anchor)\n         } else {\n             let einval = this.eval_libc(\"EINVAL\")?;"}, {"sha": "bf5ae98290118b391ee3d1a2098a78af91511ad9", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ba9391334e8d23261eb09ce7162015993f7c2aa3/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9391334e8d23261eb09ce7162015993f7c2aa3/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=ba9391334e8d23261eb09ce7162015993f7c2aa3", "patch": "@@ -230,6 +230,28 @@ fn test_thread_local_errno() {\n     }\n }\n \n+/// Tests whether clock support exists at all\n+#[cfg(target_os = \"linux\")]\n+fn test_clocks() {\n+    let mut tp = std::mem::MaybeUninit::<libc::timespec>::uninit();\n+    let is_error = unsafe {\n+        libc::clock_gettime(libc::CLOCK_REALTIME, tp.as_mut_ptr())\n+    };\n+    assert_eq!(is_error, 0);\n+    let is_error = unsafe {\n+        libc::clock_gettime(libc::CLOCK_REALTIME_COARSE, tp.as_mut_ptr())\n+    };\n+    assert_eq!(is_error, 0);\n+     let is_error = unsafe {\n+        libc::clock_gettime(libc::CLOCK_MONOTONIC, tp.as_mut_ptr())\n+    };\n+    assert_eq!(is_error, 0);\n+    let is_error = unsafe {\n+        libc::clock_gettime(libc::CLOCK_MONOTONIC_COARSE, tp.as_mut_ptr())\n+    };\n+    assert_eq!(is_error, 0);\n+}\n+\n fn main() {\n     #[cfg(target_os = \"linux\")]\n     test_posix_fadvise();\n@@ -249,4 +271,7 @@ fn main() {\n     test_prctl_thread_name();\n \n     test_thread_local_errno();\n+\n+    #[cfg(target_os = \"linux\")]\n+    test_clocks();\n }"}]}