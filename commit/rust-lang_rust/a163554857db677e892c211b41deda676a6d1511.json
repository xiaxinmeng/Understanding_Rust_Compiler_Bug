{"sha": "a163554857db677e892c211b41deda676a6d1511", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNjM1NTQ4NTdkYjY3N2U4OTJjMjExYjQxZGVkYTY3NmE2ZDE1MTE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T11:58:03Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:23:17Z"}, "message": "Fix `Canonicalized::apply_solution`\n\nNow that we're using Chalk's `substitute` which actually knows about\nlifetimes, the hack doesn't work anymore, but we can put in a proper\nlifetime.", "tree": {"sha": "7b2d2cadebdf4decb5fabe83ea1bd48c28ec56e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b2d2cadebdf4decb5fabe83ea1bd48c28ec56e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a163554857db677e892c211b41deda676a6d1511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a163554857db677e892c211b41deda676a6d1511", "html_url": "https://github.com/rust-lang/rust/commit/a163554857db677e892c211b41deda676a6d1511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a163554857db677e892c211b41deda676a6d1511/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a838a60caaa5351d7543bcbebb1aa976b0b73f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/a838a60caaa5351d7543bcbebb1aa976b0b73f39", "html_url": "https://github.com/rust-lang/rust/commit/a838a60caaa5351d7543bcbebb1aa976b0b73f39"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "3b9c4a495591cc03d802f6725a8449b0b4d4d9ca", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a163554857db677e892c211b41deda676a6d1511/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a163554857db677e892c211b41deda676a6d1511/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=a163554857db677e892c211b41deda676a6d1511", "patch": "@@ -3,15 +3,16 @@\n use std::borrow::Cow;\n \n use chalk_ir::{\n-    fold::Fold, interner::HasInterner, FloatTy, IntTy, TyVariableKind, UniverseIndex, VariableKind,\n+    cast::Cast, fold::Fold, interner::HasInterner, FloatTy, IntTy, TyVariableKind, UniverseIndex,\n+    VariableKind,\n };\n use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n \n use super::{DomainGoal, InferenceContext};\n use crate::{\n-    fold_tys, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer,\n-    FnSubst, InEnvironment, InferenceVar, Interner, Scalar, Substitution, Ty, TyExt, TyKind,\n-    TypeWalk, WhereClause,\n+    fold_tys, static_lifetime, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds,\n+    DebruijnIndex, FnPointer, FnSubst, InEnvironment, InferenceVar, Interner, Scalar, Substitution,\n+    Ty, TyExt, TyKind, TypeWalk, WhereClause,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -139,15 +140,17 @@ impl<T: HasInterner<Interner = Interner>> Canonicalized<T> {\n         let new_vars = Substitution::from_iter(\n             &Interner,\n             solution.binders.iter(&Interner).map(|k| match k.kind {\n-                VariableKind::Ty(TyVariableKind::General) => ctx.table.new_type_var(),\n-                VariableKind::Ty(TyVariableKind::Integer) => ctx.table.new_integer_var(),\n-                VariableKind::Ty(TyVariableKind::Float) => ctx.table.new_float_var(),\n-                // HACK: Chalk can sometimes return new lifetime variables. We\n-                // want to just skip them, but to not mess up the indices of\n-                // other variables, we'll just create a new type variable in\n-                // their place instead. This should not matter (we never see the\n-                // actual *uses* of the lifetime variable).\n-                VariableKind::Lifetime => ctx.table.new_type_var(),\n+                VariableKind::Ty(TyVariableKind::General) => {\n+                    ctx.table.new_type_var().cast(&Interner)\n+                }\n+                VariableKind::Ty(TyVariableKind::Integer) => {\n+                    ctx.table.new_integer_var().cast(&Interner)\n+                }\n+                VariableKind::Ty(TyVariableKind::Float) => {\n+                    ctx.table.new_float_var().cast(&Interner)\n+                }\n+                // Chalk can sometimes return new lifetime variables. We just use the static lifetime everywhere\n+                VariableKind::Lifetime => static_lifetime().cast(&Interner),\n                 _ => panic!(\"const variable in solution\"),\n             }),\n         );"}]}