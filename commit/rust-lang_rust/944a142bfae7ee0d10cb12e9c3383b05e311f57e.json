{"sha": "944a142bfae7ee0d10cb12e9c3383b05e311f57e", "node_id": "C_kwDOAAsO6NoAKDk0NGExNDJiZmFlN2VlMGQxMGNiMTJlOWMzMzgzYjA1ZTMxMWY1N2U", "commit": {"author": {"name": "Michael Benfield", "email": "mbenfield@google.com", "date": "2022-08-25T01:14:23Z"}, "committer": {"name": "Michael Benfield", "email": "mbenfield@google.com", "date": "2022-09-07T20:12:45Z"}, "message": "Change name of \"dataful\" variant to \"untagged\"\n\nThis is in anticipation of a new enum layout, in which the niche\noptimization may be applied even when multiple variants have data.", "tree": {"sha": "28d2618478676a780ccff5f447f5e7cd133c3b9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d2618478676a780ccff5f447f5e7cd133c3b9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/944a142bfae7ee0d10cb12e9c3383b05e311f57e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/944a142bfae7ee0d10cb12e9c3383b05e311f57e", "html_url": "https://github.com/rust-lang/rust/commit/944a142bfae7ee0d10cb12e9c3383b05e311f57e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/944a142bfae7ee0d10cb12e9c3383b05e311f57e/comments", "author": {"login": "mikebenfield", "id": 543755, "node_id": "MDQ6VXNlcjU0Mzc1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikebenfield", "html_url": "https://github.com/mikebenfield", "followers_url": "https://api.github.com/users/mikebenfield/followers", "following_url": "https://api.github.com/users/mikebenfield/following{/other_user}", "gists_url": "https://api.github.com/users/mikebenfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikebenfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikebenfield/subscriptions", "organizations_url": "https://api.github.com/users/mikebenfield/orgs", "repos_url": "https://api.github.com/users/mikebenfield/repos", "events_url": "https://api.github.com/users/mikebenfield/events{/privacy}", "received_events_url": "https://api.github.com/users/mikebenfield/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikebenfield", "id": 543755, "node_id": "MDQ6VXNlcjU0Mzc1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikebenfield", "html_url": "https://github.com/mikebenfield", "followers_url": "https://api.github.com/users/mikebenfield/followers", "following_url": "https://api.github.com/users/mikebenfield/following{/other_user}", "gists_url": "https://api.github.com/users/mikebenfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikebenfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikebenfield/subscriptions", "organizations_url": "https://api.github.com/users/mikebenfield/orgs", "repos_url": "https://api.github.com/users/mikebenfield/repos", "events_url": "https://api.github.com/users/mikebenfield/events{/privacy}", "received_events_url": "https://api.github.com/users/mikebenfield/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "104168a0f8ec9f218af84c315c0006c2d72450fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/104168a0f8ec9f218af84c315c0006c2d72450fe", "html_url": "https://github.com/rust-lang/rust/commit/104168a0f8ec9f218af84c315c0006c2d72450fe"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "97b395bcd05186b199e59026ddec9fda4472dc77", "filename": "src/discriminant.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/944a142bfae7ee0d10cb12e9c3383b05e311f57e/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944a142bfae7ee0d10cb12e9c3383b05e311f57e/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=944a142bfae7ee0d10cb12e9c3383b05e311f57e", "patch": "@@ -42,10 +42,10 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n         Variants::Multiple {\n             tag: _,\n             tag_field,\n-            tag_encoding: TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start },\n+            tag_encoding: TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start },\n             variants: _,\n         } => {\n-            if variant_index != dataful_variant {\n+            if variant_index != untagged_variant {\n                 let niche = place.place_field(fx, mir::Field::new(tag_field));\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n                 let niche_value = ty::ScalarInt::try_from_uint(\n@@ -113,7 +113,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n             let res = CValue::by_val(val, dest_layout);\n             dest.write_cvalue(fx, res);\n         }\n-        TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {\n+        TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start } => {\n             // Rebase from niche values to discriminants, and check\n             // whether the result is in range for the niche variants.\n \n@@ -169,8 +169,9 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n                 fx.bcx.ins().iadd_imm(relative_discr, i64::from(niche_variants.start().as_u32()))\n             };\n \n-            let dataful_variant = fx.bcx.ins().iconst(cast_to, i64::from(dataful_variant.as_u32()));\n-            let discr = fx.bcx.ins().select(is_niche, niche_discr, dataful_variant);\n+            let untagged_variant =\n+                fx.bcx.ins().iconst(cast_to, i64::from(untagged_variant.as_u32()));\n+            let discr = fx.bcx.ins().select(is_niche, niche_discr, untagged_variant);\n             let res = CValue::by_val(discr, dest_layout);\n             dest.write_cvalue(fx, res);\n         }"}]}