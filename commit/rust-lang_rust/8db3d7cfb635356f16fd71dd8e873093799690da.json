{"sha": "8db3d7cfb635356f16fd71dd8e873093799690da", "node_id": "C_kwDOAAsO6NoAKDhkYjNkN2NmYjYzNTM1NmYxNmZkNzFkZDhlODczMDkzNzk5NjkwZGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-01T14:49:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-01T14:49:31Z"}, "message": "Rollup merge of #99911 - cjgillot:no-guess, r=davidtwco\n\nRemove some uses of `guess_head_span`\n\nThat function cuts a span at the first occurrence of `{`.  Using `def_span` is almost always more precise.", "tree": {"sha": "b4f964862f56138a64199918b7e62203f950e079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4f964862f56138a64199918b7e62203f950e079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8db3d7cfb635356f16fd71dd8e873093799690da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5+f7CRBK7hj4Ov3rIwAAEQgIAInQg3SS7+NipyacWeg1VmyS\nwhk3G5wzq4skdd/tWxJ3ezi07Zi99W9HB60tlA4Q+tv/1EO76jEv3Svy5schqKUL\nM3v4HRoQ9pPlhxZQx6GF0BfFiZV2cGcqxoewficOTiizNibaIIDeZYWttDczqvk7\n8omCI1XGuHZ4BqCzHQMoZ5Q1Vw4D/svNPgucaH7O1Q2IMOb8zNHz5R1UE9L0PzOv\ngA/RtVWzbaruAHmhn20cjrJFZuXO6rjcu4JA+TmetHhUqlgWEIdHG8kkWa5tOUTt\nLTzNLCw6n7CtI+whNZ71eruARcmgWjq8+9OKRiv5Tkxbo5wZhJYdpLr6RtijSV4=\n=h+cL\n-----END PGP SIGNATURE-----\n", "payload": "tree b4f964862f56138a64199918b7e62203f950e079\nparent 1530ed8373ea3f8863efceb3b0584b4cf0bdbada\nparent 2134dd3b483970352a85ff99cd237fc2488d9099\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659365371 +0200\ncommitter GitHub <noreply@github.com> 1659365371 +0200\n\nRollup merge of #99911 - cjgillot:no-guess, r=davidtwco\n\nRemove some uses of `guess_head_span`\n\nThat function cuts a span at the first occurrence of `{`.  Using `def_span` is almost always more precise.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8db3d7cfb635356f16fd71dd8e873093799690da", "html_url": "https://github.com/rust-lang/rust/commit/8db3d7cfb635356f16fd71dd8e873093799690da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8db3d7cfb635356f16fd71dd8e873093799690da/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1530ed8373ea3f8863efceb3b0584b4cf0bdbada", "url": "https://api.github.com/repos/rust-lang/rust/commits/1530ed8373ea3f8863efceb3b0584b4cf0bdbada", "html_url": "https://github.com/rust-lang/rust/commit/1530ed8373ea3f8863efceb3b0584b4cf0bdbada"}, {"sha": "2134dd3b483970352a85ff99cd237fc2488d9099", "url": "https://api.github.com/repos/rust-lang/rust/commits/2134dd3b483970352a85ff99cd237fc2488d9099", "html_url": "https://github.com/rust-lang/rust/commit/2134dd3b483970352a85ff99cd237fc2488d9099"}], "stats": {"total": 211, "additions": 97, "deletions": 114}, "files": [{"sha": "bd58021f78fc022381f5c015b474704e7369e98f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -1364,7 +1364,6 @@ impl UnreachablePub {\n         cx: &LateContext<'_>,\n         what: &str,\n         def_id: LocalDefId,\n-        span: Span,\n         vis_span: Span,\n         exportable: bool,\n     ) {\n@@ -1373,7 +1372,7 @@ impl UnreachablePub {\n             if vis_span.from_expansion() {\n                 applicability = Applicability::MaybeIncorrect;\n             }\n-            let def_span = cx.tcx.sess.source_map().guess_head_span(span);\n+            let def_span = cx.tcx.def_span(def_id);\n             cx.struct_span_lint(UNREACHABLE_PUB, def_span, |lint| {\n                 let mut err = lint.build(fluent::lint::builtin_unreachable_pub);\n                 err.set_arg(\"what\", what);\n@@ -1399,36 +1398,22 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n         if let hir::ItemKind::Use(_, hir::UseKind::ListStem) = &item.kind {\n             return;\n         }\n-        self.perform_lint(cx, \"item\", item.def_id, item.span, item.vis_span, true);\n+        self.perform_lint(cx, \"item\", item.def_id, item.vis_span, true);\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext<'_>, foreign_item: &hir::ForeignItem<'tcx>) {\n-        self.perform_lint(\n-            cx,\n-            \"item\",\n-            foreign_item.def_id,\n-            foreign_item.span,\n-            foreign_item.vis_span,\n-            true,\n-        );\n+        self.perform_lint(cx, \"item\", foreign_item.def_id, foreign_item.vis_span, true);\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         let def_id = cx.tcx.hir().local_def_id(field.hir_id);\n-        self.perform_lint(cx, \"field\", def_id, field.span, field.vis_span, false);\n+        self.perform_lint(cx, \"field\", def_id, field.vis_span, false);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {\n         // Only lint inherent impl items.\n         if cx.tcx.associated_item(impl_item.def_id).trait_item_def_id.is_none() {\n-            self.perform_lint(\n-                cx,\n-                \"item\",\n-                impl_item.def_id,\n-                impl_item.span,\n-                impl_item.vis_span,\n-                false,\n-            );\n+            self.perform_lint(cx, \"item\", impl_item.def_id, impl_item.vis_span, false);\n         }\n     }\n }"}, {"sha": "bc6241b38100db4c1bc9d61881da6b7d1b43a814", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::graph::iterate::{\n     NodeStatus, TriColorDepthFirstSearch, TriColorVisitor,\n };\n-use rustc_hir::intravisit::FnKind;\n+use rustc_hir::def::DefKind;\n use rustc_middle::mir::{BasicBlock, BasicBlocks, Body, Operand, TerminatorKind};\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n@@ -12,12 +12,7 @@ use std::ops::ControlFlow;\n pub(crate) fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n     let def_id = body.source.def_id().expect_local();\n \n-    if let Some(fn_kind) = tcx.hir().get_by_def_id(def_id).fn_kind() {\n-        if let FnKind::Closure = fn_kind {\n-            // closures can't recur, so they don't matter.\n-            return;\n-        }\n-\n+    if let DefKind::Fn | DefKind::AssocFn = tcx.def_kind(def_id) {\n         // If this is trait/impl method, extract the trait's substs.\n         let trait_substs = match tcx.opt_associated_item(def_id.to_def_id()) {\n             Some(AssocItem {\n@@ -41,8 +36,8 @@ pub(crate) fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n \n         vis.reachable_recursive_calls.sort();\n \n+        let sp = tcx.def_span(def_id);\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let sp = tcx.sess.source_map().guess_head_span(tcx.hir().span_with_body(hir_id));\n         tcx.struct_span_lint_hir(UNCONDITIONAL_RECURSION, hir_id, sp, |lint| {\n             let mut db = lint.build(\"function cannot return without recursing\");\n             db.span_label(sp, \"cannot return without recursing\");"}, {"sha": "43e4d252676f4ed0a8712200cc112aee28c11aa4", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -1754,8 +1754,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 || self.in_assoc_ty\n                 || self.tcx.resolutions(()).has_pub_restricted\n             {\n-                let vis_span =\n-                    self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id));\n+                let vis_span = self.tcx.def_span(def_id);\n                 if kind == \"trait\" {\n                     self.tcx.sess.emit_err(InPublicInterfaceTraits {\n                         span,"}, {"sha": "6d2aff38172facc9f4a0157dae89a56460442abb", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -1,4 +1,3 @@\n-use crate::dep_graph::DepContext;\n use crate::query::plumbing::CycleError;\n use crate::query::{QueryContext, QueryStackFrame};\n use rustc_hir::def::DefKind;\n@@ -536,17 +535,13 @@ pub(crate) fn report_cycle<'a>(\n ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     assert!(!stack.is_empty());\n \n-    let fix_span = |span: Span, query: &QueryStackFrame| {\n-        sess.source_map().guess_head_span(query.default_span(span))\n-    };\n-\n-    let span = fix_span(stack[1 % stack.len()].span, &stack[0].query);\n+    let span = stack[0].query.default_span(stack[1 % stack.len()].span);\n     let mut err =\n         struct_span_err!(sess, span, E0391, \"cycle detected when {}\", stack[0].query.description);\n \n     for i in 1..stack.len() {\n         let query = &stack[i].query;\n-        let span = fix_span(stack[(i + 1) % stack.len()].span, query);\n+        let span = query.default_span(stack[(i + 1) % stack.len()].span);\n         err.span_note(span, &format!(\"...which requires {}...\", query.description));\n     }\n \n@@ -577,7 +572,7 @@ pub(crate) fn report_cycle<'a>(\n     }\n \n     if let Some((span, query)) = usage {\n-        err.span_note(fix_span(span, &query), &format!(\"cycle used when {}\", query.description));\n+        err.span_note(query.default_span(span), &format!(\"cycle used when {}\", query.description));\n     }\n \n     err\n@@ -606,8 +601,7 @@ pub fn print_query_stack<CTX: QueryContext>(\n             Level::FailureNote,\n             &format!(\"#{} [{}] {}\", i, query_info.query.name, query_info.query.description),\n         );\n-        diag.span =\n-            tcx.dep_context().sess().source_map().guess_head_span(query_info.job.span).into();\n+        diag.span = query_info.job.span.into();\n         handler.force_print_diagnostic(diag);\n \n         current_query = query_info.job.parent;"}, {"sha": "8839fb1a151206068639d4a975a956725e3c5b1c", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -1587,11 +1587,7 @@ impl<'a> Resolver<'a> {\n         };\n         let def_span = suggestion.res.opt_def_id().and_then(|def_id| match def_id.krate {\n             LOCAL_CRATE => self.opt_span(def_id),\n-            _ => Some(\n-                self.session\n-                    .source_map()\n-                    .guess_head_span(self.cstore().get_span_untracked(def_id, self.session)),\n-            ),\n+            _ => Some(self.cstore().get_span_untracked(def_id, self.session)),\n         });\n         if let Some(def_span) = def_span {\n             if span.overlaps(def_span) {"}, {"sha": "2b1f2b88ec445887717dd197483884c4fa663f88", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -136,12 +136,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn def_span(&self, def_id: DefId) -> Option<Span> {\n         match def_id.krate {\n             LOCAL_CRATE => self.r.opt_span(def_id),\n-            _ => Some(\n-                self.r\n-                    .session\n-                    .source_map()\n-                    .guess_head_span(self.r.cstore().get_span_untracked(def_id, self.r.session)),\n-            ),\n+            _ => Some(self.r.cstore().get_span_untracked(def_id, self.r.session)),\n         }\n     }\n "}, {"sha": "c3abb515b037884826e53daa1aafdb366a22d91b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -1946,7 +1946,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ));\n \n             let original_span = err.span.primary_span().unwrap();\n-            let original_span = self.tcx.sess.source_map().guess_head_span(original_span);\n             let mut span = MultiSpan::from_span(original_span);\n \n             let message = outer_generator"}, {"sha": "4f15592e6fbac9192a389fc9b59c0810b51ddff1", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -293,6 +293,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(crate) fn if_cause(\n         &self,\n         span: Span,\n+        cond_span: Span,\n         then_expr: &'tcx hir::Expr<'tcx>,\n         else_expr: &'tcx hir::Expr<'tcx>,\n         then_ty: Ty<'tcx>,\n@@ -355,10 +356,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // 6 | |     };\n             //   | |_____^ expected integer, found `()`\n             // ```\n-            if block.expr.is_none() && block.stmts.is_empty()\n-                && let Some(outer_span) = &mut outer_span\n-            {\n-                *outer_span = self.tcx.sess.source_map().guess_head_span(*outer_span);\n+            if block.expr.is_none() && block.stmts.is_empty() && outer_span.is_some() {\n+                let sp = if let Some(cs) = cond_span.find_ancestor_inside(span) {\n+                    span.with_hi(cs.hi())\n+                } else {\n+                    span\n+                };\n+                outer_span = Some(sp);\n             }\n \n             (self.find_block_span(block), block.hir_id)"}, {"sha": "6e97b0bf2ab7dfba1d5add7d134e1f58a446147d", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -1003,8 +1003,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let else_diverges = self.diverges.get();\n \n             let opt_suggest_box_span = self.opt_suggest_box_span(else_ty, orig_expected);\n-            let if_cause =\n-                self.if_cause(sp, then_expr, else_expr, then_ty, else_ty, opt_suggest_box_span);\n+            let if_cause = self.if_cause(\n+                sp,\n+                cond_expr.span,\n+                then_expr,\n+                else_expr,\n+                then_ty,\n+                else_ty,\n+                opt_suggest_box_span,\n+            );\n \n             coerce.coerce(self, &if_cause, else_expr, else_ty);\n "}, {"sha": "e6f6e9e9f653fcfe659c2795822845a16b2d2aa2", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -35,7 +35,7 @@ note: cycle used when checking item types in top-level module\n   --> $DIR/no-const-async.rs:4:1\n    |\n LL | pub const async fn x() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "57f94f8c6ab52d04dbcad0223d5a98a1b40865d9", "filename": "src/test/ui/consts/issue-44415.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -2,18 +2,18 @@ error[E0391]: cycle detected when evaluating type-level constant\n   --> $DIR/issue-44415.rs:6:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-   |                 ^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`...\n   --> $DIR/issue-44415.rs:6:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-   |                 ^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`...\n   --> $DIR/issue-44415.rs:6:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-   |                 ^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires computing layout of `[u8; _]`...\n    = note: ...which requires normalizing `[u8; _]`..."}, {"sha": "d4976a0f9c9cd1c61bd52b2bc62d4728179b66bb", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -8,8 +8,13 @@ LL | trait Foo<X = Box<dyn Foo>> {\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-default-type-trait.rs:4:1\n    |\n-LL | trait Foo<X = Box<dyn Foo>> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / trait Foo<X = Box<dyn Foo>> {\n+LL | |\n+LL | |\n+LL | | }\n+LL | |\n+LL | | fn main() { }\n+   | |_____________^\n \n error[E0391]: cycle detected when computing type of `Foo::X`\n   --> $DIR/cycle-trait-default-type-trait.rs:4:23\n@@ -21,8 +26,13 @@ LL | trait Foo<X = Box<dyn Foo>> {\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-default-type-trait.rs:4:1\n    |\n-LL | trait Foo<X = Box<dyn Foo>> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / trait Foo<X = Box<dyn Foo>> {\n+LL | |\n+LL | |\n+LL | | }\n+LL | |\n+LL | | fn main() { }\n+   | |_____________^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f6ffcc4b5aadcf8a5458ffe2b94fa13411ecab8f", "filename": "src/test/ui/cycle-trait/cycle-trait-supertrait-direct.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-supertrait-direct.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -13,8 +13,10 @@ LL | trait Chromosome: Chromosome {\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-supertrait-direct.rs:3:1\n    |\n-LL | trait Chromosome: Chromosome {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / trait Chromosome: Chromosome {\n+LL | |\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "1461e7fd2ddd7fbddddb647509cda2b91bfcfe72", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -4,12 +4,10 @@ warning: function cannot return without recursing\n LL | / fn no_hrtb<'b, T>(mut t: T)\n LL | | where\n LL | |     T: Bar<&'b isize>,\n-LL | | {\n-...  |\n-LL | |     no_hrtb(&mut t);\n-   | |     --------------- recursive call site\n-LL | | }\n-   | |_^ cannot return without recursing\n+   | |______________________^ cannot return without recursing\n+...\n+LL |       no_hrtb(&mut t);\n+   |       --------------- recursive call site\n    |\n    = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n@@ -20,12 +18,10 @@ warning: function cannot return without recursing\n LL | / fn bar_hrtb<T>(mut t: T)\n LL | | where\n LL | |     T: for<'b> Bar<&'b isize>,\n-LL | | {\n-...  |\n-LL | |     bar_hrtb(&mut t);\n-   | |     ---------------- recursive call site\n-LL | | }\n-   | |_^ cannot return without recursing\n+   | |______________________________^ cannot return without recursing\n+...\n+LL |       bar_hrtb(&mut t);\n+   |       ---------------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n@@ -35,14 +31,10 @@ warning: function cannot return without recursing\n LL | / fn foo_hrtb_bar_not<'b, T>(mut t: T)\n LL | | where\n LL | |     T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n-LL | | {\n-...  |\n-LL | |     foo_hrtb_bar_not(&mut t);\n-   | |     ------------------------ recursive call site\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^ cannot return without recursing\n+   | |_______________________________________________^ cannot return without recursing\n+...\n+LL |       foo_hrtb_bar_not(&mut t);\n+   |       ------------------------ recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n@@ -70,12 +62,10 @@ warning: function cannot return without recursing\n LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n LL | | where\n LL | |     T: for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>,\n-LL | | {\n-LL | |     // OK -- now we have `T : for<'b> Bar<&'b isize>`.\n-LL | |     foo_hrtb_bar_hrtb(&mut t);\n-   | |     ------------------------- recursive call site\n-LL | | }\n-   | |_^ cannot return without recursing\n+   | |_______________________________________________________^ cannot return without recursing\n+...\n+LL |       foo_hrtb_bar_hrtb(&mut t);\n+   |       ------------------------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n "}, {"sha": "789a1141c04f9e9502ff5664d0516ab64aeb69a3", "filename": "src/test/ui/issues/issue-12511.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fissues%2Fissue-12511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fissues%2Fissue-12511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12511.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -23,8 +23,10 @@ LL | trait T2 : T1 {\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-12511.rs:1:1\n    |\n-LL | trait T1 : T2 {\n-   | ^^^^^^^^^^^^^\n+LL | / trait T1 : T2 {\n+LL | |\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "e021f500c66ae4f308ae2d661f1fc40bb2661145", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -1,8 +1,8 @@\n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:8:5\n+  --> $DIR/unreachable_pub.rs:8:13\n    |\n LL |     pub use std::fmt;\n-   |     ---^^^^^^^^^^^^^^\n+   |     ---     ^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n@@ -93,7 +93,7 @@ warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:33:5\n    |\n LL |     pub const CARBON: usize = 1;\n-   |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ---^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n@@ -103,7 +103,7 @@ warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:34:5\n    |\n LL |     pub static NITROGEN: usize = 2;\n-   |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ---^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n@@ -113,7 +113,7 @@ warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:35:5\n    |\n LL |     pub type Oxygen = bool;\n-   |     ---^^^^^^^^^^^^^^^^^^^^\n+   |     ---^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n@@ -123,7 +123,7 @@ warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:38:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     ---------------------------------------------------\n@@ -138,7 +138,7 @@ warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:44:9\n    |\n LL |         pub fn catalyze() -> bool;\n-   |         ---^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ---^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `pub(crate)`\n    |"}, {"sha": "20aeb7b995a6195b46c2b27429e55a0c8531c1e1", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -8,8 +8,14 @@ LL | impl dyn ToNbt<Self> {}\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-23305.rs:1:1\n    |\n-LL | pub trait ToNbt<T> {\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | / pub trait ToNbt<T> {\n+LL | |     fn new(val: T) -> Self;\n+LL | | }\n+LL | |\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error: aborting due to previous error\n "}, {"sha": "f5d6d72afc2ca1092fc42c632e812c34944a195d", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -4,11 +4,10 @@ warning: function cannot return without recursing\n LL | / fn recurse<T>(elements: T) -> Vec<char>\n LL | | where\n LL | |     T: Iterator<Item = ()>,\n-LL | | {\n-LL | |     recurse(IteratorOfWrapped(elements).map(|t| t.0))\n-   | |     ------------------------------------------------- recursive call site\n-LL | | }\n-   | |_^ cannot return without recursing\n+   | |___________________________^ cannot return without recursing\n+LL |   {\n+LL |       recurse(IteratorOfWrapped(elements).map(|t| t.0))\n+   |       ------------------------------------------------- recursive call site\n    |\n    = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose"}, {"sha": "15faab16abeaf11376c539af85819312e1c38235", "filename": "src/test/ui/traits/trait-upcasting/cyclic-trait-resolution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -14,7 +14,7 @@ note: cycle used when collecting item types in top-level module\n   --> $DIR/cyclic-trait-resolution.rs:1:1\n    |\n LL | trait A: B + A {}\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4775e68820b523daac491f4ae3c7a4fdb9693f91", "filename": "src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8db3d7cfb635356f16fd71dd8e873093799690da/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr?ref=8db3d7cfb635356f16fd71dd8e873093799690da", "patch": "@@ -2,18 +2,18 @@ error[E0391]: cycle detected when simplifying constant for the type system `Alph\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n-   |          ^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires simplifying constant for the type system `Alpha::V3::{constant#0}`...\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n-   |          ^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `Alpha::V3::{constant#0}`...\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n-   |          ^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Alpha`...\n    = note: ...which again requires simplifying constant for the type system `Alpha::V3::{constant#0}`, completing the cycle\n note: cycle used when collecting item types in top-level module"}]}