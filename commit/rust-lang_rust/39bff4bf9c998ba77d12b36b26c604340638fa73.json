{"sha": "39bff4bf9c998ba77d12b36b26c604340638fa73", "node_id": "C_kwDOAAsO6NoAKDM5YmZmNGJmOWM5OThiYTc3ZDEyYjM2YjI2YzYwNDM0MDYzOGZhNzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-07T04:27:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-07T04:27:46Z"}, "message": "don't report int/float ambiguity when we have previous errors", "tree": {"sha": "0067a43f542a10ca59a71182e3b1e0642f874e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0067a43f542a10ca59a71182e3b1e0642f874e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39bff4bf9c998ba77d12b36b26c604340638fa73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39bff4bf9c998ba77d12b36b26c604340638fa73", "html_url": "https://github.com/rust-lang/rust/commit/39bff4bf9c998ba77d12b36b26c604340638fa73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39bff4bf9c998ba77d12b36b26c604340638fa73/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "html_url": "https://github.com/rust-lang/rust/commit/8f36334ca939a67cce3f37f24953ff6f2d3f3d33"}], "stats": {"total": 83, "additions": 48, "deletions": 35}, "files": [{"sha": "ac98dd5801e404d0f48ea9ada7a6a889ccf756b9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39bff4bf9c998ba77d12b36b26c604340638fa73/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bff4bf9c998ba77d12b36b26c604340638fa73/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=39bff4bf9c998ba77d12b36b26c604340638fa73", "patch": "@@ -36,6 +36,7 @@ use rustc_span::symbol::{kw, sym};\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;\n use std::iter;\n+use std::ops::ControlFlow;\n \n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use crate::traits::query::normalize::AtExt as _;\n@@ -2226,9 +2227,10 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         post.dedup();\n \n         if self.is_tainted_by_errors()\n-            && crate_names.len() == 1\n-            && [\"`core`\", \"`alloc`\", \"`std`\"].contains(&crate_names[0].as_str())\n-            && spans.len() == 0\n+            && (crate_names.len() == 1\n+                && spans.len() == 0\n+                && [\"`core`\", \"`alloc`\", \"`std`\"].contains(&crate_names[0].as_str())\n+                || predicate.visit_with(&mut HasNumericInferVisitor).is_break())\n         {\n             // Avoid complaining about other inference issues for expressions like\n             // `42 >> 1`, where the types are still `{integer}`, but we want to\n@@ -2666,3 +2668,17 @@ impl ArgKind {\n         }\n     }\n }\n+\n+struct HasNumericInferVisitor;\n+\n+impl<'tcx> ty::TypeVisitor<'tcx> for HasNumericInferVisitor {\n+    type BreakTy = ();\n+\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if matches!(ty.kind(), ty::Infer(ty::FloatVar(_) | ty::IntVar(_))) {\n+            ControlFlow::Break(())\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+}"}, {"sha": "7ed3796f08b764c755eccd9e61f33058aac5ec55", "filename": "src/test/ui/traits/no-fallback-multiple-impls.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39bff4bf9c998ba77d12b36b26c604340638fa73/src%2Ftest%2Fui%2Ftraits%2Fno-fallback-multiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bff4bf9c998ba77d12b36b26c604340638fa73/src%2Ftest%2Fui%2Ftraits%2Fno-fallback-multiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fno-fallback-multiple-impls.rs?ref=39bff4bf9c998ba77d12b36b26c604340638fa73", "patch": "@@ -0,0 +1,16 @@\n+trait Fallback {\n+    fn foo(&self) {}\n+}\n+\n+impl Fallback for i32 {}\n+\n+impl Fallback for u64 {}\n+\n+impl Fallback for usize {}\n+\n+fn main() {\n+    missing();\n+    //~^ ERROR cannot find function `missing` in this scope\n+    0.foo();\n+    // But then we shouldn't report an inference ambiguity here...\n+}"}, {"sha": "61c9e5aaabdb458a77c90296000d4cffdd9cf30b", "filename": "src/test/ui/traits/no-fallback-multiple-impls.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39bff4bf9c998ba77d12b36b26c604340638fa73/src%2Ftest%2Fui%2Ftraits%2Fno-fallback-multiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39bff4bf9c998ba77d12b36b26c604340638fa73/src%2Ftest%2Fui%2Ftraits%2Fno-fallback-multiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fno-fallback-multiple-impls.stderr?ref=39bff4bf9c998ba77d12b36b26c604340638fa73", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find function `missing` in this scope\n+  --> $DIR/no-fallback-multiple-impls.rs:12:5\n+   |\n+LL |     missing();\n+   |     ^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "342928e882a556e0e9a8958041284e945a14ee6a", "filename": "src/test/ui/traits/test-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39bff4bf9c998ba77d12b36b26c604340638fa73/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bff4bf9c998ba77d12b36b26c604340638fa73/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs?ref=39bff4bf9c998ba77d12b36b26c604340638fa73", "patch": "@@ -6,9 +6,9 @@ impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n \n fn main() {\n-    10.dup::<i32>(); //~ ERROR type annotations needed\n+    10.dup::<i32>();\n     //~^ ERROR this associated function takes 0 generic arguments but 1\n-    10.blah::<i32, i32>(); //~ ERROR type annotations needed\n+    10.blah::<i32, i32>();\n     //~^ ERROR this associated function takes 1 generic argument but 2\n     (Box::new(10) as Box<dyn bar>).dup();\n     //~^ ERROR E0038"}, {"sha": "77ea4e4e974ebf06c36175f8cd48d50821840f0c", "filename": "src/test/ui/traits/test-2.stderr", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39bff4bf9c998ba77d12b36b26c604340638fa73/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39bff4bf9c998ba77d12b36b26c604340638fa73/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr?ref=39bff4bf9c998ba77d12b36b26c604340638fa73", "patch": "@@ -79,35 +79,7 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn bar>>` for `Box<{integer}>`\n    = note: required by cast to type `Box<dyn bar>`\n \n-error[E0283]: type annotations needed\n-  --> $DIR/test-2.rs:9:8\n-   |\n-LL |     10.dup::<i32>();\n-   |        ^^^ cannot infer type for type `{integer}`\n-   |\n-note: multiple `impl`s satisfying `{integer}: bar` found\n-  --> $DIR/test-2.rs:5:1\n-   |\n-LL | impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n-   | ^^^^^^^^^^^^^^^^\n-LL | impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n-   | ^^^^^^^^^^^^^^^^\n-\n-error[E0283]: type annotations needed\n-  --> $DIR/test-2.rs:11:8\n-   |\n-LL |     10.blah::<i32, i32>();\n-   |        ^^^^ cannot infer type for type `{integer}`\n-   |\n-note: multiple `impl`s satisfying `{integer}: bar` found\n-  --> $DIR/test-2.rs:5:1\n-   |\n-LL | impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n-   | ^^^^^^^^^^^^^^^^\n-LL | impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n-   | ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0038, E0107, E0283.\n+Some errors have detailed explanations: E0038, E0107.\n For more information about an error, try `rustc --explain E0038`."}]}