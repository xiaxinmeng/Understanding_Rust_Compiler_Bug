{"sha": "0aaf9d58a24a6efba88842318b4c66d0b7418867", "node_id": "C_kwDOAAsO6NoAKDBhYWY5ZDU4YTI0YTZlZmJhODg4NDIzMThiNGM2NmQwYjc0MTg4Njc", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-08T13:28:57Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-03T07:24:04Z"}, "message": "reduce boilerplate with common enums", "tree": {"sha": "0f4b0d6f237012a65014736f3266304a32f50d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f4b0d6f237012a65014736f3266304a32f50d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aaf9d58a24a6efba88842318b4c66d0b7418867", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQqfxQACgkQzXazX3c0\ndp6JYg/7BXkOLsy1gbvtub6sqPRkZC/Th8xzde3hGPLqupwvWrlFW693k5J5I6JG\n/Ac0US6LvBmwF/ktNk90Tph+sLbR+Qh0vtQulAC19vMUWcpHIu1Zcyb0cCHCinbV\n9ZSjeXvqzdDS1xXf7fUdZmgXOY1UKPv96D+JAsUP6rQ1/KXxd5ALQdV8SZqFzrP+\nEH06LwI4n+K+N5OIqW4NNJgD1nwVc2Y8Y9c4+sejSstP7t/xqrpQH8bVgi5BbIw9\n7E5/vXq1TNdHxWlKlgN/27J4wfzYfxFL37G4/n9Wzyp/dJNBbszZ2WPSUbIK680/\n1eK1wDr5fUgjCPFD9B7IxUEsiMnjp319cQV4/LnCUdqsVUXcRRm6zWMCDS5XrZN0\njmRyyqcQp1DICij8Lu6ORDaZzqk3g3O8i1CxnSO2XogDex/YEoYdx9VwgM3dtVVz\nP+ov5wndK0IE4rNxjH4lJjIP4/VjufLZGkx04/rKnDzcvz7HWFwOcvY7OfFjboA8\nd8u8NvyHyt2bdkyfy4VLSOvGxFCcC5iygaLmp8yc9+VWvuL18dCQ4wrOMsOJjG0Y\no/6vUOFsddSGGXE6zSSW7bT1UztuFNtnkEzhDaPB3x1au+YNUXmAwAWVltqE+rIF\nXavXhw9OozI8EUa2hWYckuQdNOJMJlHQPAToZd464mgh3llRTgE=\n=u062\n-----END PGP SIGNATURE-----", "payload": "tree 0f4b0d6f237012a65014736f3266304a32f50d36\nparent 9bc8bb91de5f5428da0d9f13c79bff68cf6f9b3c\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678282137 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1680506644 +0200\n\nreduce boilerplate with common enums\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aaf9d58a24a6efba88842318b4c66d0b7418867", "html_url": "https://github.com/rust-lang/rust/commit/0aaf9d58a24a6efba88842318b4c66d0b7418867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aaf9d58a24a6efba88842318b4c66d0b7418867/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bc8bb91de5f5428da0d9f13c79bff68cf6f9b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc8bb91de5f5428da0d9f13c79bff68cf6f9b3c", "html_url": "https://github.com/rust-lang/rust/commit/9bc8bb91de5f5428da0d9f13c79bff68cf6f9b3c"}], "stats": {"total": 222, "additions": 76, "deletions": 146}, "files": [{"sha": "86810179ff8bc923a3345020a20b305ac662be3a", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 72, "deletions": 144, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/0aaf9d58a24a6efba88842318b4c66d0b7418867/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aaf9d58a24a6efba88842318b4c66d0b7418867/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=0aaf9d58a24a6efba88842318b4c66d0b7418867", "patch": "@@ -12,104 +12,78 @@ use lazycell::LazyCell;\n use std::collections::HashSet;\n use test::{ColorConfig, OutputFormat};\n \n-#[derive(Clone, Copy, PartialEq, Debug)]\n-pub enum Mode {\n-    RunPassValgrind,\n-    Pretty,\n-    DebugInfo,\n-    Codegen,\n-    Rustdoc,\n-    RustdocJson,\n-    CodegenUnits,\n-    Incremental,\n-    RunMake,\n-    Ui,\n-    JsDocTest,\n-    MirOpt,\n-    Assembly,\n-}\n+macro_rules! string_enum {\n+    ($(#[$meta:meta])* $vis:vis enum $name:ident { $($variant:ident => $repr:expr,)* }) => {\n+        $(#[$meta])*\n+        $vis enum $name {\n+            $($variant,)*\n+        }\n \n-impl Mode {\n-    pub fn disambiguator(self) -> &'static str {\n-        // Pretty-printing tests could run concurrently, and if they do,\n-        // they need to keep their output segregated.\n-        match self {\n-            Pretty => \".pretty\",\n-            _ => \"\",\n+        impl $name {\n+            $vis const VARIANTS: &'static [Self] = &[$(Self::$variant,)*];\n+\n+            $vis fn to_str(&self) -> &'static str {\n+                match self {\n+                    $(Self::$variant => $repr,)*\n+                }\n+            }\n         }\n-    }\n-}\n \n-impl FromStr for Mode {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<Mode, ()> {\n-        match s {\n-            \"run-pass-valgrind\" => Ok(RunPassValgrind),\n-            \"pretty\" => Ok(Pretty),\n-            \"debuginfo\" => Ok(DebugInfo),\n-            \"codegen\" => Ok(Codegen),\n-            \"rustdoc\" => Ok(Rustdoc),\n-            \"rustdoc-json\" => Ok(RustdocJson),\n-            \"codegen-units\" => Ok(CodegenUnits),\n-            \"incremental\" => Ok(Incremental),\n-            \"run-make\" => Ok(RunMake),\n-            \"ui\" => Ok(Ui),\n-            \"js-doc-test\" => Ok(JsDocTest),\n-            \"mir-opt\" => Ok(MirOpt),\n-            \"assembly\" => Ok(Assembly),\n-            _ => Err(()),\n+        impl fmt::Display for $name {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt::Display::fmt(self.to_str(), f)\n+            }\n         }\n-    }\n-}\n \n-impl fmt::Display for Mode {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let s = match *self {\n-            RunPassValgrind => \"run-pass-valgrind\",\n-            Pretty => \"pretty\",\n-            DebugInfo => \"debuginfo\",\n-            Codegen => \"codegen\",\n-            Rustdoc => \"rustdoc\",\n-            RustdocJson => \"rustdoc-json\",\n-            CodegenUnits => \"codegen-units\",\n-            Incremental => \"incremental\",\n-            RunMake => \"run-make\",\n-            Ui => \"ui\",\n-            JsDocTest => \"js-doc-test\",\n-            MirOpt => \"mir-opt\",\n-            Assembly => \"assembly\",\n-        };\n-        fmt::Display::fmt(s, f)\n+        impl FromStr for $name {\n+            type Err = ();\n+\n+            fn from_str(s: &str) -> Result<Self, ()> {\n+                match s {\n+                    $($repr => Ok(Self::$variant),)*\n+                    _ => Err(()),\n+                }\n+            }\n+        }\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Debug, Hash)]\n-pub enum PassMode {\n-    Check,\n-    Build,\n-    Run,\n+string_enum! {\n+    #[derive(Clone, Copy, PartialEq, Debug)]\n+    pub enum Mode {\n+        RunPassValgrind => \"run-pass-valgrind\",\n+        Pretty => \"pretty\",\n+        DebugInfo => \"debuginfo\",\n+        Codegen => \"codegen\",\n+        Rustdoc => \"rustdoc\",\n+        RustdocJson => \"rustdoc-json\",\n+        CodegenUnits => \"codegen-units\",\n+        Incremental => \"incremental\",\n+        RunMake => \"run-make\",\n+        Ui => \"ui\",\n+        JsDocTest => \"js-doc-test\",\n+        MirOpt => \"mir-opt\",\n+        Assembly => \"assembly\",\n+    }\n }\n \n-impl FromStr for PassMode {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<Self, ()> {\n-        match s {\n-            \"check\" => Ok(PassMode::Check),\n-            \"build\" => Ok(PassMode::Build),\n-            \"run\" => Ok(PassMode::Run),\n-            _ => Err(()),\n+impl Mode {\n+    pub fn disambiguator(self) -> &'static str {\n+        // Pretty-printing tests could run concurrently, and if they do,\n+        // they need to keep their output segregated.\n+        match self {\n+            Pretty => \".pretty\",\n+            _ => \"\",\n         }\n     }\n }\n \n-impl fmt::Display for PassMode {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let s = match *self {\n-            PassMode::Check => \"check\",\n-            PassMode::Build => \"build\",\n-            PassMode::Run => \"run\",\n-        };\n-        fmt::Display::fmt(s, f)\n+string_enum! {\n+    #[derive(Clone, Copy, PartialEq, Debug, Hash)]\n+    pub enum PassMode {\n+        Check => \"check\",\n+        Build => \"build\",\n+        Run => \"run\",\n     }\n }\n \n@@ -120,69 +94,23 @@ pub enum FailMode {\n     Run,\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n-pub enum CompareMode {\n-    Polonius,\n-    Chalk,\n-    NextSolver,\n-    SplitDwarf,\n-    SplitDwarfSingle,\n-}\n-\n-impl CompareMode {\n-    pub(crate) const VARIANTS: &'static [CompareMode] = &[\n-        CompareMode::Polonius,\n-        CompareMode::Chalk,\n-        CompareMode::NextSolver,\n-        CompareMode::SplitDwarf,\n-        CompareMode::SplitDwarfSingle,\n-    ];\n-\n-    pub(crate) fn to_str(&self) -> &'static str {\n-        match *self {\n-            CompareMode::Polonius => \"polonius\",\n-            CompareMode::Chalk => \"chalk\",\n-            CompareMode::NextSolver => \"next-solver\",\n-            CompareMode::SplitDwarf => \"split-dwarf\",\n-            CompareMode::SplitDwarfSingle => \"split-dwarf-single\",\n-        }\n-    }\n-\n-    pub fn parse(s: String) -> CompareMode {\n-        match s.as_str() {\n-            \"polonius\" => CompareMode::Polonius,\n-            \"chalk\" => CompareMode::Chalk,\n-            \"next-solver\" => CompareMode::NextSolver,\n-            \"split-dwarf\" => CompareMode::SplitDwarf,\n-            \"split-dwarf-single\" => CompareMode::SplitDwarfSingle,\n-            x => panic!(\"unknown --compare-mode option: {}\", x),\n-        }\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq)]\n-pub enum Debugger {\n-    Cdb,\n-    Gdb,\n-    Lldb,\n-}\n-\n-impl Debugger {\n-    pub(crate) const VARIANTS: &'static [Debugger] =\n-        &[Debugger::Cdb, Debugger::Gdb, Debugger::Lldb];\n-\n-    pub(crate) fn to_str(&self) -> &'static str {\n-        match self {\n-            Debugger::Cdb => \"cdb\",\n-            Debugger::Gdb => \"gdb\",\n-            Debugger::Lldb => \"lldb\",\n-        }\n+string_enum! {\n+    #[derive(Clone, Debug, PartialEq)]\n+    pub enum CompareMode {\n+        Polonius => \"polonius\",\n+        Chalk => \"chalk\",\n+        NextSolver => \"next-solver\",\n+        SplitDwarf => \"split-dwarf\",\n+        SplitDwarfSingle => \"split-dwarf-single\",\n     }\n }\n \n-impl fmt::Display for Debugger {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self.to_str(), f)\n+string_enum! {\n+    #[derive(Clone, Copy, Debug, PartialEq)]\n+    pub enum Debugger {\n+        Cdb => \"cdb\",\n+        Gdb => \"gdb\",\n+        Lldb => \"lldb\",\n     }\n }\n "}, {"sha": "7700db0c74d8681aefcb58503904f62b91d34d7c", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aaf9d58a24a6efba88842318b4c66d0b7418867/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aaf9d58a24a6efba88842318b4c66d0b7418867/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=0aaf9d58a24a6efba88842318b4c66d0b7418867", "patch": "@@ -6,7 +6,7 @@\n extern crate test;\n \n use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n-use crate::common::{CompareMode, Config, Debugger, Mode, PassMode, TestPaths};\n+use crate::common::{Config, Debugger, Mode, PassMode, TestPaths};\n use crate::util::logv;\n use build_helper::git::{get_git_modified_files, get_git_untracked_files};\n use core::panic;\n@@ -293,7 +293,9 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         only_modified: matches.opt_present(\"only-modified\"),\n         color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n-        compare_mode: matches.opt_str(\"compare-mode\").map(CompareMode::parse),\n+        compare_mode: matches\n+            .opt_str(\"compare-mode\")\n+            .map(|s| s.parse().expect(\"invalid --compare-mode provided\")),\n         rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n         has_tidy,\n         channel: matches.opt_str(\"channel\").unwrap(),"}]}