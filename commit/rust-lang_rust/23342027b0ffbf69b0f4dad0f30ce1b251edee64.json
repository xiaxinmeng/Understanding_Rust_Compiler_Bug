{"sha": "23342027b0ffbf69b0f4dad0f30ce1b251edee64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMzQyMDI3YjBmZmJmNjliMGY0ZGFkMGYzMGNlMWIyNTFlZGVlNjQ=", "commit": {"author": {"name": "Yuri Kunde Schlesner", "email": "yuriks@yuriks.net", "date": "2014-04-17T05:08:20Z"}, "committer": {"name": "Yuri Kunde Schlesner", "email": "yuriks@yuriks.net", "date": "2014-04-17T05:08:20Z"}, "message": "Give reduction-type tests in Bitv more natural names", "tree": {"sha": "de23c3e9a1d19fb51c96fbc6b20053c0427e1574", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de23c3e9a1d19fb51c96fbc6b20053c0427e1574"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23342027b0ffbf69b0f4dad0f30ce1b251edee64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23342027b0ffbf69b0f4dad0f30ce1b251edee64", "html_url": "https://github.com/rust-lang/rust/commit/23342027b0ffbf69b0f4dad0f30ce1b251edee64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23342027b0ffbf69b0f4dad0f30ce1b251edee64/comments", "author": {"login": "yuriks", "id": 341401, "node_id": "MDQ6VXNlcjM0MTQwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuriks", "html_url": "https://github.com/yuriks", "followers_url": "https://api.github.com/users/yuriks/followers", "following_url": "https://api.github.com/users/yuriks/following{/other_user}", "gists_url": "https://api.github.com/users/yuriks/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuriks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuriks/subscriptions", "organizations_url": "https://api.github.com/users/yuriks/orgs", "repos_url": "https://api.github.com/users/yuriks/repos", "events_url": "https://api.github.com/users/yuriks/events{/privacy}", "received_events_url": "https://api.github.com/users/yuriks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yuriks", "id": 341401, "node_id": "MDQ6VXNlcjM0MTQwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuriks", "html_url": "https://github.com/yuriks", "followers_url": "https://api.github.com/users/yuriks/followers", "following_url": "https://api.github.com/users/yuriks/following{/other_user}", "gists_url": "https://api.github.com/users/yuriks/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuriks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuriks/subscriptions", "organizations_url": "https://api.github.com/users/yuriks/orgs", "repos_url": "https://api.github.com/users/yuriks/repos", "events_url": "https://api.github.com/users/yuriks/events{/privacy}", "received_events_url": "https://api.github.com/users/yuriks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3fd9337dc57cd98b03fb1ddc827750c7222420", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3fd9337dc57cd98b03fb1ddc827750c7222420", "html_url": "https://github.com/rust-lang/rust/commit/9f3fd9337dc57cd98b03fb1ddc827750c7222420"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "08d3378b54826f5df8dcc2b7470af01625f978b9", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/23342027b0ffbf69b0f4dad0f30ce1b251edee64/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23342027b0ffbf69b0f4dad0f30ce1b251edee64/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=23342027b0ffbf69b0f4dad0f30ce1b251edee64", "patch": "@@ -97,12 +97,12 @@ impl SmallBitv {\n     pub fn set_all(&mut self) { self.bits = !0; }\n \n     #[inline]\n-    pub fn is_true(&self, nbits: uint) -> bool {\n+    pub fn all(&self, nbits: uint) -> bool {\n         small_mask(nbits) & !self.bits == 0\n     }\n \n     #[inline]\n-    pub fn is_false(&self, nbits: uint) -> bool {\n+    pub fn none(&self, nbits: uint) -> bool {\n         small_mask(nbits) & self.bits == 0\n     }\n \n@@ -412,9 +412,9 @@ impl Bitv {\n \n     /// Returns `true` if all bits are 1\n     #[inline]\n-    pub fn is_true(&self) -> bool {\n+    pub fn all(&self) -> bool {\n       match self.rep {\n-        Small(ref b) => b.is_true(self.nbits),\n+        Small(ref b) => b.all(self.nbits),\n         _ => {\n           for i in self.iter() { if !i { return false; } }\n           true\n@@ -433,16 +433,22 @@ impl Bitv {\n     }\n \n     /// Returns `true` if all bits are 0\n-    pub fn is_false(&self) -> bool {\n+    pub fn none(&self) -> bool {\n       match self.rep {\n-        Small(ref b) => b.is_false(self.nbits),\n+        Small(ref b) => b.none(self.nbits),\n         Big(_) => {\n           for i in self.iter() { if i { return false; } }\n           true\n         }\n       }\n     }\n \n+    #[inline]\n+    /// Returns `true` if any bit is 1\n+    pub fn any(&self) -> bool {\n+        !self.none()\n+    }\n+\n     pub fn init_to_vec(&self, i: uint) -> uint {\n       return if self.get(i) { 1 } else { 0 };\n     }\n@@ -1551,6 +1557,51 @@ mod tests {\n         assert!(b.contains(&1000));\n     }\n \n+    #[test]\n+    fn test_small_bitv_tests() {\n+        let v = from_bytes([0]);\n+        assert!(!v.all());\n+        assert!(!v.any());\n+        assert!(v.none());\n+\n+        let v = from_bytes([0b00010100]);\n+        assert!(!v.all());\n+        assert!(v.any());\n+        assert!(!v.none());\n+\n+        let v = from_bytes([0xFF]);\n+        assert!(v.all());\n+        assert!(v.any());\n+        assert!(!v.none());\n+    }\n+\n+    #[test]\n+    fn test_big_bitv_tests() {\n+        let v = from_bytes([ // 88 bits\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            0, 0, 0]);\n+        assert!(!v.all());\n+        assert!(!v.any());\n+        assert!(v.none());\n+\n+        let v = from_bytes([ // 88 bits\n+            0, 0, 0b00010100, 0,\n+            0, 0, 0, 0b00110100,\n+            0, 0, 0]);\n+        assert!(!v.all());\n+        assert!(v.any());\n+        assert!(!v.none());\n+\n+        let v = from_bytes([ // 88 bits\n+            0xFF, 0xFF, 0xFF, 0xFF,\n+            0xFF, 0xFF, 0xFF, 0xFF,\n+            0xFF, 0xFF, 0xFF]);\n+        assert!(v.all());\n+        assert!(v.any());\n+        assert!(!v.none());\n+    }\n+\n     fn rng() -> rand::IsaacRng {\n         let seed = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n         rand::SeedableRng::from_seed(seed)"}]}