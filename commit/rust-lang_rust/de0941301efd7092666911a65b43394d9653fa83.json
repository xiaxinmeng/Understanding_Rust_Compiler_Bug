{"sha": "de0941301efd7092666911a65b43394d9653fa83", "node_id": "C_kwDOAAsO6NoAKGRlMDk0MTMwMWVmZDcwOTI2NjY5MTFhNjViNDMzOTRkOTY1M2ZhODM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-23T15:29:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-23T15:29:33Z"}, "message": "Simplify", "tree": {"sha": "6cc11effab491a57a9254e5c63a3fd492af42686", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc11effab491a57a9254e5c63a3fd492af42686"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0941301efd7092666911a65b43394d9653fa83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0941301efd7092666911a65b43394d9653fa83", "html_url": "https://github.com/rust-lang/rust/commit/de0941301efd7092666911a65b43394d9653fa83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0941301efd7092666911a65b43394d9653fa83/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffeec9dec9a70fc2b7342b20eabe5b5da23f3f00", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffeec9dec9a70fc2b7342b20eabe5b5da23f3f00", "html_url": "https://github.com/rust-lang/rust/commit/ffeec9dec9a70fc2b7342b20eabe5b5da23f3f00"}], "stats": {"total": 110, "additions": 46, "deletions": 64}, "files": [{"sha": "08530f84fb9253dfc6dcd045bfa99c85e0108212", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 46, "deletions": 64, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/de0941301efd7092666911a65b43394d9653fa83/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0941301efd7092666911a65b43394d9653fa83/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=de0941301efd7092666911a65b43394d9653fa83", "patch": "@@ -206,8 +206,23 @@ impl NameClass {\n \n         let parent = name.syntax().parent()?;\n \n-        let def = if let Some(item) = ast::Item::cast(parent.clone()) {\n-            match item {\n+        let definition = match_ast! {\n+            match parent {\n+                ast::Item(it) => classify_item(sema, it)?,\n+                ast::IdentPat(it) => return classify_ident_pat(sema, it),\n+                ast::Rename(it) => classify_rename(sema, it)?,\n+                ast::SelfParam(it) => Definition::Local(sema.to_def(&it)?),\n+                ast::RecordField(it) => Definition::Field(sema.to_def(&it)?),\n+                ast::Variant(it) => Definition::Variant(sema.to_def(&it)?),\n+                ast::TypeParam(it) => Definition::GenericParam(sema.to_def(&it)?.into()),\n+                ast::ConstParam(it) => Definition::GenericParam(sema.to_def(&it)?.into()),\n+                _ => return None,\n+            }\n+        };\n+        return Some(NameClass::Definition(definition));\n+\n+        fn classify_item(sema: &Semantics<RootDatabase>, item: ast::Item) -> Option<Definition> {\n+            let definition = match item {\n                 ast::Item::MacroRules(it) => {\n                     Definition::Macro(sema.to_def(&ast::Macro::MacroRules(it))?)\n                 }\n@@ -229,14 +244,20 @@ impl NameClass {\n                 ast::Item::Struct(it) => Definition::Adt(hir::Adt::Struct(sema.to_def(&it)?)),\n                 ast::Item::Union(it) => Definition::Adt(hir::Adt::Union(sema.to_def(&it)?)),\n                 _ => return None,\n-            }\n-        } else if let Some(it) = ast::IdentPat::cast(parent.clone()) {\n-            if let Some(def) = sema.resolve_bind_pat_to_const(&it) {\n+            };\n+            Some(definition)\n+        }\n+\n+        fn classify_ident_pat(\n+            sema: &Semantics<RootDatabase>,\n+            ident_pat: ast::IdentPat,\n+        ) -> Option<NameClass> {\n+            if let Some(def) = sema.resolve_bind_pat_to_const(&ident_pat) {\n                 return Some(NameClass::ConstReference(Definition::from(def)));\n             }\n \n-            let local = sema.to_def(&it)?;\n-            let pat_parent = it.syntax().parent();\n+            let local = sema.to_def(&ident_pat)?;\n+            let pat_parent = ident_pat.syntax().parent();\n             if let Some(record_pat_field) = pat_parent.and_then(ast::RecordPatField::cast) {\n                 if record_pat_field.name_ref().is_none() {\n                     if let Some(field) = sema.resolve_record_pat_field(&record_pat_field) {\n@@ -247,57 +268,23 @@ impl NameClass {\n                     }\n                 }\n             }\n+            Some(NameClass::Definition(Definition::Local(local)))\n+        }\n \n-            Definition::Local(local)\n-        } else if let Some(it) = ast::Rename::cast(parent.clone()) {\n-            if let Some(use_tree) = it.syntax().parent().and_then(ast::UseTree::cast) {\n+        fn classify_rename(\n+            sema: &Semantics<RootDatabase>,\n+            rename: ast::Rename,\n+        ) -> Option<Definition> {\n+            if let Some(use_tree) = rename.syntax().parent().and_then(ast::UseTree::cast) {\n                 let path = use_tree.path()?;\n-                let path_segment = path.segment()?;\n-                let name_ref = path_segment.name_ref()?;\n-                let name_ref = if name_ref.self_token().is_some() {\n-                    use_tree\n-                        .syntax()\n-                        .parent()\n-                        .as_ref()\n-                        // Skip over UseTreeList\n-                        .and_then(|it| {\n-                            let use_tree = it.parent().and_then(ast::UseTree::cast)?;\n-                            let path = use_tree.path()?;\n-                            let path_segment = path.segment()?;\n-                            path_segment.name_ref()\n-                        })\n-                        .unwrap_or(name_ref)\n-                } else {\n-                    name_ref\n-                };\n-                let name_ref_class = NameRefClass::classify(sema, &name_ref)?;\n-\n-                match name_ref_class {\n-                    NameRefClass::Definition(def) => def,\n-                    NameRefClass::FieldShorthand { local_ref: _, field_ref } => {\n-                        Definition::Field(field_ref)\n-                    }\n-                }\n+                sema.resolve_path(&path).map(Definition::from)\n             } else {\n-                let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n+                let extern_crate = rename.syntax().parent().and_then(ast::ExternCrate::cast)?;\n                 let krate = sema.resolve_extern_crate(&extern_crate)?;\n                 let root_module = krate.root_module(sema.db);\n-                Definition::Module(root_module)\n-            }\n-        } else {\n-            match_ast! {\n-                match parent {\n-                    ast::SelfParam(it) => Definition::Local(sema.to_def(&it)?),\n-                    ast::RecordField(it) => Definition::Field(sema.to_def(&it)?),\n-                    ast::Variant(it) => Definition::Variant(sema.to_def(&it)?),\n-                    ast::TypeParam(it) => Definition::GenericParam(sema.to_def(&it)?.into()),\n-                    ast::ConstParam(it) => Definition::GenericParam(sema.to_def(&it)?.into()),\n-                    _ => return None,\n-                }\n+                Some(Definition::Module(root_module))\n             }\n-        };\n-\n-        Some(NameClass::Definition(def))\n+        }\n     }\n \n     pub fn classify_lifetime(\n@@ -307,19 +294,14 @@ impl NameClass {\n         let _p = profile::span(\"classify_lifetime\").detail(|| lifetime.to_string());\n         let parent = lifetime.syntax().parent()?;\n \n-        match_ast! {\n-            match parent {\n-                ast::LifetimeParam(it) => {\n-                    let def = sema.to_def(&it)?;\n-                    Some(NameClass::Definition(Definition::GenericParam(def.into())))\n-                },\n-                ast::Label(it) => {\n-                    let def = sema.to_def(&it)?;\n-                    Some(NameClass::Definition(Definition::Label(def)))\n-                },\n-                _ => None,\n-            }\n+        if let Some(it) = ast::LifetimeParam::cast(parent.clone()) {\n+            sema.to_def(&it).map(Into::into).map(Definition::GenericParam)\n+        } else if let Some(it) = ast::Label::cast(parent.clone()) {\n+            sema.to_def(&it).map(Definition::Label)\n+        } else {\n+            None\n         }\n+        .map(NameClass::Definition)\n     }\n }\n "}]}