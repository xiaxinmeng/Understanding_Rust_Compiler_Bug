{"sha": "aa4a9b0827f09efa8a06d99df6cae07b21e6729c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNGE5YjA4MjdmMDllZmE4YTA2ZDk5ZGY2Y2FlMDdiMjFlNjcyOWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:58:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T22:06:03Z"}, "message": "make MaybeUninit Copy", "tree": {"sha": "df99f965d3d5837049c8c9871ca551c0bb05b5f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df99f965d3d5837049c8c9871ca551c0bb05b5f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa4a9b0827f09efa8a06d99df6cae07b21e6729c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4a9b0827f09efa8a06d99df6cae07b21e6729c", "html_url": "https://github.com/rust-lang/rust/commit/aa4a9b0827f09efa8a06d99df6cae07b21e6729c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa4a9b0827f09efa8a06d99df6cae07b21e6729c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10366fe27bf1a1e6ab67076bdc268f486abeb88", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10366fe27bf1a1e6ab67076bdc268f486abeb88", "html_url": "https://github.com/rust-lang/rust/commit/d10366fe27bf1a1e6ab67076bdc268f486abeb88"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "296f15d83030201eccf3b657dbbab351acf09256", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa4a9b0827f09efa8a06d99df6cae07b21e6729c/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4a9b0827f09efa8a06d99df6cae07b21e6729c/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=aa4a9b0827f09efa8a06d99df6cae07b21e6729c", "patch": "@@ -1106,12 +1106,22 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n // FIXME before stabilizing, explain how to initialize a struct field-by-field.\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+#[derive(Copy)]\n // NOTE after stabilizing `MaybeUninit` proceed to deprecate `mem::uninitialized`\n pub union MaybeUninit<T> {\n     uninit: (),\n     value: ManuallyDrop<T>,\n }\n \n+#[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+impl<T: Copy> Clone for MaybeUninit<T> {\n+    #[inline(always)]\n+    fn clone(&self) -> Self {\n+        // Not calling T::clone(), we cannot know if we are initialized enough for that.\n+        *self\n+    }\n+}\n+\n impl<T> MaybeUninit<T> {\n     /// Create a new `MaybeUninit` initialized with the given value.\n     ///"}]}