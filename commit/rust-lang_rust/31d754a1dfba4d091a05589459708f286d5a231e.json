{"sha": "31d754a1dfba4d091a05589459708f286d5a231e", "node_id": "C_kwDOAAsO6NoAKDMxZDc1NGExZGZiYTRkMDkxYTA1NTg5NDU5NzA4ZjI4NmQ1YTIzMWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-25T04:57:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-25T04:57:51Z"}, "message": "Auto merge of #102988 - dpaoliello:inlinerawdylib, r=dpaoliello\n\nSupport raw-dylib functions being used inside inlined functions\n\nFixes #102714\n\nIssue Details:\nWhen generating the import library for `raw-dylib` symbols, we currently only use the functions and variables declared within the current crate. This works fine if all crates are static libraries or `rlib`s as the generated import library will be contained in the static library or `rlib` itself, but if a dependency is a dynamic library AND the use of a `raw-dylib` function or variable is inlined or part of a generic instantiation then the current crate won't see its dependency's import library and so linking will fail.\n\nFix Details:\nInstead, when we generate the import library for a `dylib` or `bin` crate, we will now generate it for the symbols both for the current crate and all upstream crates. We do this in two steps so that the import library for the current crate is passed into the linker first, thus it is preferred if there are any ambiguous symbols.", "tree": {"sha": "25ea743dd19ec2f0eb44d53ee688235c2cb614c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ea743dd19ec2f0eb44d53ee688235c2cb614c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d754a1dfba4d091a05589459708f286d5a231e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d754a1dfba4d091a05589459708f286d5a231e", "html_url": "https://github.com/rust-lang/rust/commit/31d754a1dfba4d091a05589459708f286d5a231e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d754a1dfba4d091a05589459708f286d5a231e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2702e922ba31e49d6167f5651d4545646dcf22d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2702e922ba31e49d6167f5651d4545646dcf22d", "html_url": "https://github.com/rust-lang/rust/commit/f2702e922ba31e49d6167f5651d4545646dcf22d"}, {"sha": "3a1ef50b34d3c88ddc423411be4521499cf9def5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1ef50b34d3c88ddc423411be4521499cf9def5", "html_url": "https://github.com/rust-lang/rust/commit/3a1ef50b34d3c88ddc423411be4521499cf9def5"}], "stats": {"total": 153, "additions": 146, "deletions": 7}, "files": [{"sha": "f2e3bf16e61842bae2d73b66ac42c0cec2a01e6e", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -38,6 +38,7 @@ impl ArchiveBuilderBuilder for ArArchiveBuilderBuilder {\n         _lib_name: &str,\n         _dll_imports: &[rustc_session::cstore::DllImport],\n         _tmpdir: &Path,\n+        _is_direct_dependency: bool,\n     ) -> PathBuf {\n         bug!(\"creating dll imports is not supported\");\n     }"}, {"sha": "f18ae7ea5e9b0ff75a07d9567562c9663e5a1f7c", "filename": "compiler/rustc_codegen_gcc/src/archive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -47,6 +47,7 @@ impl ArchiveBuilderBuilder for ArArchiveBuilderBuilder {\n         _lib_name: &str,\n         _dll_imports: &[DllImport],\n         _tmpdir: &Path,\n+        _is_direct_dependency: bool,\n     ) -> PathBuf {\n         unimplemented!();\n     }"}, {"sha": "082665bba3802cc33f56d1ebbc1885964ee2af43", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -165,10 +165,12 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n         lib_name: &str,\n         dll_imports: &[DllImport],\n         tmpdir: &Path,\n+        is_direct_dependency: bool,\n     ) -> PathBuf {\n+        let name_suffix = if is_direct_dependency { \"_imports\" } else { \"_imports_indirect\" };\n         let output_path = {\n             let mut output_path: PathBuf = tmpdir.to_path_buf();\n-            output_path.push(format!(\"{}_imports\", lib_name));\n+            output_path.push(format!(\"{}{}\", lib_name, name_suffix));\n             output_path.with_extension(\"lib\")\n         };\n \n@@ -195,7 +197,8 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n             // that loaded but crashed with an AV upon calling one of the imported\n             // functions.  Therefore, use binutils to create the import library instead,\n             // by writing a .DEF file to the temp dir and calling binutils's dlltool.\n-            let def_file_path = tmpdir.join(format!(\"{}_imports\", lib_name)).with_extension(\"def\");\n+            let def_file_path =\n+                tmpdir.join(format!(\"{}{}\", lib_name, name_suffix)).with_extension(\"def\");\n \n             let def_file_content = format!(\n                 \"EXPORTS\\n{}\","}, {"sha": "bb76ca5d2b941a940fdfef8b10cffeda30fee393", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -25,6 +25,7 @@ pub trait ArchiveBuilderBuilder {\n         lib_name: &str,\n         dll_imports: &[DllImport],\n         tmpdir: &Path,\n+        is_direct_dependency: bool,\n     ) -> PathBuf;\n \n     fn extract_bundled_libs("}, {"sha": "0dc0dee862c7499b2d2b560da48adee126dfcc10", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -391,13 +391,14 @@ fn link_rlib<'a>(\n     }\n \n     for (raw_dylib_name, raw_dylib_imports) in\n-        collate_raw_dylibs(sess, &codegen_results.crate_info.used_libraries)?\n+        collate_raw_dylibs(sess, codegen_results.crate_info.used_libraries.iter())?\n     {\n         let output_path = archive_builder_builder.create_dll_import_lib(\n             sess,\n             &raw_dylib_name,\n             &raw_dylib_imports,\n             tmpdir.as_ref(),\n+            true,\n         );\n \n         ab.add_archive(&output_path, Box::new(|_| false)).unwrap_or_else(|error| {\n@@ -449,9 +450,9 @@ fn link_rlib<'a>(\n /// then the CodegenResults value contains one NativeLib instance for each block.  However, the\n /// linker appears to expect only a single import library for each library used, so we need to\n /// collate the symbols together by library name before generating the import libraries.\n-fn collate_raw_dylibs(\n-    sess: &Session,\n-    used_libraries: &[NativeLib],\n+fn collate_raw_dylibs<'a, 'b>(\n+    sess: &'a Session,\n+    used_libraries: impl IntoIterator<Item = &'b NativeLib>,\n ) -> Result<Vec<(String, Vec<DllImport>)>, ErrorGuaranteed> {\n     // Use index maps to preserve original order of imports and libraries.\n     let mut dylib_table = FxIndexMap::<String, FxIndexMap<Symbol, &DllImport>>::default();\n@@ -2068,13 +2069,43 @@ fn linker_with_args<'a>(\n \n     // Link with the import library generated for any raw-dylib functions.\n     for (raw_dylib_name, raw_dylib_imports) in\n-        collate_raw_dylibs(sess, &codegen_results.crate_info.used_libraries)?\n+        collate_raw_dylibs(sess, codegen_results.crate_info.used_libraries.iter())?\n+    {\n+        cmd.add_object(&archive_builder_builder.create_dll_import_lib(\n+            sess,\n+            &raw_dylib_name,\n+            &raw_dylib_imports,\n+            tmpdir,\n+            true,\n+        ));\n+    }\n+    // As with add_upstream_native_libraries, we need to add the upstream raw-dylib symbols in case\n+    // they are used within inlined functions or instantiated generic functions. We do this *after*\n+    // handling the raw-dylib symbols in the current crate to make sure that those are chosen first\n+    // by the linker.\n+    let (_, dependency_linkage) = codegen_results\n+        .crate_info\n+        .dependency_formats\n+        .iter()\n+        .find(|(ty, _)| *ty == crate_type)\n+        .expect(\"failed to find crate type in dependency format list\");\n+    let native_libraries_from_nonstatics = codegen_results\n+        .crate_info\n+        .native_libraries\n+        .iter()\n+        .filter_map(|(cnum, libraries)| {\n+            (dependency_linkage[cnum.as_usize() - 1] != Linkage::Static).then(|| libraries)\n+        })\n+        .flatten();\n+    for (raw_dylib_name, raw_dylib_imports) in\n+        collate_raw_dylibs(sess, native_libraries_from_nonstatics)?\n     {\n         cmd.add_object(&archive_builder_builder.create_dll_import_lib(\n             sess,\n             &raw_dylib_name,\n             &raw_dylib_imports,\n             tmpdir,\n+            false,\n         ));\n     }\n "}, {"sha": "9e603f95835986a8a9a9641145e2a56b1ce0acf3", "filename": "src/test/run-make/raw-dylib-inline-cross-dylib/Makefile", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2FMakefile?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -0,0 +1,31 @@\n+# Regression test for calling an inline function that uses a raw-dylib function.\n+\n+# only-windows\n+\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) --crate-type dylib --crate-name raw_dylib_test lib.rs -C prefer-dynamic\n+\t$(RUSTC) --crate-type dylib --crate-name raw_dylib_test_wrapper lib_wrapper.rs -C prefer-dynamic\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\" -C prefer-dynamic\n+\t# Make sure we don't find an import to the functions we expect to be inlined.\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -p $(TMPDIR)/driver.exe | $(CGREP) -v -e \"inline_library_function\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -p $(TMPDIR)/driver.exe | $(CGREP) -v -e \"inline_library_function_calls_inline\"\n+\t# Make sure we do find an import to the functions we expect to be imported.\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -p $(TMPDIR)/driver.exe | $(CGREP) -e \"library_function\"\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_1.obj,extern_1.c)\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_2.obj,extern_2.c)\n+ifdef IS_MSVC\n+\t$(CC) \"$(TMPDIR)\"/extern_1.obj -link -dll -out:\"$(TMPDIR)\"/extern_1.dll -noimplib\n+\t$(CC) \"$(TMPDIR)\"/extern_2.obj -link -dll -out:\"$(TMPDIR)\"/extern_2.dll -noimplib\n+else\n+\t$(CC) \"$(TMPDIR)\"/extern_1.obj -shared -o \"$(TMPDIR)\"/extern_1.dll\n+\t$(CC) \"$(TMPDIR)\"/extern_2.obj -shared -o \"$(TMPDIR)\"/extern_2.dll\n+endif\n+\t$(call RUN,driver) > \"$(TMPDIR)\"/output.txt\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/output.txt output.txt\n+else\n+\t$(DIFF) output.txt \"$(TMPDIR)\"/output.txt\n+endif"}, {"sha": "f72ded7d9f638b9b5b00035a9328400b0c0883d8", "filename": "src/test/run-make/raw-dylib-inline-cross-dylib/driver.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fdriver.rs?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -0,0 +1,21 @@\n+#![feature(raw_dylib)]\n+\n+extern crate raw_dylib_test;\n+extern crate raw_dylib_test_wrapper;\n+\n+#[link(name = \"extern_2\", kind = \"raw-dylib\")]\n+extern {\n+    fn extern_fn_2();\n+}\n+\n+fn main() {\n+    // NOTE: The inlined call to `extern_fn_2` links against the function in extern_2.dll instead\n+    // of extern_1.dll since raw-dylib symbols from the current crate are passed to the linker\n+    // first, so any ambiguous names will prefer the current crate's definition.\n+    raw_dylib_test::inline_library_function();\n+    raw_dylib_test::library_function();\n+    raw_dylib_test_wrapper::inline_library_function_calls_inline();\n+    unsafe {\n+        extern_fn_2();\n+    }\n+}"}, {"sha": "e5baaf5f04007018b378239b2f96d8678e0efa66", "filename": "src/test/run-make/raw-dylib-inline-cross-dylib/extern_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fextern_1.c", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fextern_1.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fextern_1.c?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -0,0 +1,11 @@\n+#include <stdio.h>\n+\n+__declspec(dllexport) void extern_fn_1() {\n+    printf(\"extern_fn_1\\n\");\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void extern_fn_2() {\n+    printf(\"extern_fn_2 in extern_1\\n\");\n+    fflush(stdout);\n+}"}, {"sha": "30aa4692238bcc38aad671321b8a92913cb9aa13", "filename": "src/test/run-make/raw-dylib-inline-cross-dylib/extern_2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fextern_2.c", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fextern_2.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fextern_2.c?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -0,0 +1,6 @@\n+#include <stdio.h>\n+\n+__declspec(dllexport) void extern_fn_2() {\n+    printf(\"extern_fn_2 in extern_2\\n\");\n+    fflush(stdout);\n+}"}, {"sha": "00c2c1c42d15fd09ec856f43e4b4944c948246b3", "filename": "src/test/run-make/raw-dylib-inline-cross-dylib/lib.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Flib.rs?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -0,0 +1,21 @@\n+#![feature(raw_dylib)]\n+\n+#[link(name = \"extern_1\", kind = \"raw-dylib\")]\n+extern {\n+    fn extern_fn_1();\n+    fn extern_fn_2();\n+}\n+\n+#[inline]\n+pub fn inline_library_function() {\n+    unsafe {\n+        extern_fn_1();\n+        extern_fn_2();\n+    }\n+}\n+\n+pub fn library_function() {\n+    unsafe {\n+        extern_fn_2();\n+    }\n+}"}, {"sha": "47191b8de219cd72f58bd812a91a23e6f6bda6b5", "filename": "src/test/run-make/raw-dylib-inline-cross-dylib/lib_wrapper.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Flib_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Flib_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Flib_wrapper.rs?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -0,0 +1,6 @@\n+extern crate raw_dylib_test;\n+\n+#[inline]\n+pub fn inline_library_function_calls_inline() {\n+    raw_dylib_test::inline_library_function();\n+}"}, {"sha": "e7009baa0d4c390902dc8bd0ff0de5d69c5b2222", "filename": "src/test/run-make/raw-dylib-inline-cross-dylib/output.txt", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Foutput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/31d754a1dfba4d091a05589459708f286d5a231e/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Foutput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Foutput.txt?ref=31d754a1dfba4d091a05589459708f286d5a231e", "patch": "@@ -0,0 +1,6 @@\n+extern_fn_1\n+extern_fn_2 in extern_2\n+extern_fn_2 in extern_1\n+extern_fn_1\n+extern_fn_2 in extern_2\n+extern_fn_2 in extern_2"}]}