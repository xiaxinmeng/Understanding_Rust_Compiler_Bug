{"sha": "62432fe31b396058767c71ed332b6d2eed3053ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNDMyZmUzMWIzOTYwNTg3NjdjNzFlZDMzMmI2ZDJlZWQzMDUzZmY=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2019-08-19T02:04:40Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-08-19T02:04:40Z"}, "message": "add new flag to list names of misformatted files (#3747)", "tree": {"sha": "bd042b88e0abc287b287db68b267508c674a2d23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd042b88e0abc287b287db68b267508c674a2d23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62432fe31b396058767c71ed332b6d2eed3053ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62432fe31b396058767c71ed332b6d2eed3053ff", "html_url": "https://github.com/rust-lang/rust/commit/62432fe31b396058767c71ed332b6d2eed3053ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62432fe31b396058767c71ed332b6d2eed3053ff/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73847d3986f9bc66dbd46989a8fc3b8c1aa23876", "url": "https://api.github.com/repos/rust-lang/rust/commits/73847d3986f9bc66dbd46989a8fc3b8c1aa23876", "html_url": "https://github.com/rust-lang/rust/commit/73847d3986f9bc66dbd46989a8fc3b8c1aa23876"}], "stats": {"total": 130, "additions": 121, "deletions": 9}, "files": [{"sha": "e1885aba836db8d5f19d1e93d647ed107197d842", "filename": "Configurations.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62432fe31b396058767c71ed332b6d2eed3053ff/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/62432fe31b396058767c71ed332b6d2eed3053ff/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=62432fe31b396058767c71ed332b6d2eed3053ff", "patch": "@@ -2445,3 +2445,7 @@ Internal option\n ## `make_backup`\n \n Internal option, use `--backup`\n+\n+## `print_misformatted_file_names`\n+\n+Internal option, use `-l` or `--files-with-diff`"}, {"sha": "bb12169329a1e079a1ad601ecfca9f9af674639b", "filename": "src/bin/main.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=62432fe31b396058767c71ed332b6d2eed3053ff", "patch": "@@ -126,6 +126,12 @@ fn make_opts() -> Options {\n          `current` writes to stdout current config as if formatting the file at PATH.\",\n         \"[default|minimal|current] PATH\",\n     );\n+    opts.optflag(\n+        \"l\",\n+        \"files-with-diff\",\n+        \"Prints the names of mismatched files that were formatted. Prints the names of \\\n+         files that would be formated when used with `--check` mode. \",\n+    );\n \n     if is_nightly {\n         opts.optflag(\n@@ -480,6 +486,7 @@ struct GetOptsOptions {\n     file_lines: FileLines, // Default is all lines in all files.\n     unstable_features: bool,\n     error_on_unformatted: Option<bool>,\n+    print_misformatted_file_names: bool,\n }\n \n impl GetOptsOptions {\n@@ -547,6 +554,10 @@ impl GetOptsOptions {\n             options.backup = true;\n         }\n \n+        if matches.opt_present(\"files-with-diff\") {\n+            options.print_misformatted_file_names = true;\n+        }\n+\n         if !rust_nightly {\n             if !STABLE_EMIT_MODES.contains(&options.emit_mode) {\n                 return Err(format_err!(\n@@ -610,6 +621,9 @@ impl CliOptions for GetOptsOptions {\n         if let Some(color) = self.color {\n             config.set().color(color);\n         }\n+        if self.print_misformatted_file_names {\n+            config.set().print_misformatted_file_names(true);\n+        }\n     }\n \n     fn config_path(&self) -> Option<&Path> {"}, {"sha": "a4930b7c575151305748b5d41c635bcb2e1f455f", "filename": "src/config/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=62432fe31b396058767c71ed332b6d2eed3053ff", "patch": "@@ -152,6 +152,9 @@ create_config! {\n     emit_mode: EmitMode, EmitMode::Files, false,\n         \"What emit Mode to use when none is supplied\";\n     make_backup: bool, false, false, \"Backup changed files\";\n+    print_misformatted_file_names: bool, false, true,\n+        \"Prints the names of mismatched files that were formatted. Prints the names of \\\n+         files that would be formated when used with `--check` mode. \";\n }\n \n impl PartialConfig {\n@@ -161,6 +164,7 @@ impl PartialConfig {\n         cloned.file_lines = None;\n         cloned.verbose = None;\n         cloned.width_heuristics = None;\n+        cloned.print_misformatted_file_names = None;\n \n         ::toml::to_string(&cloned).map_err(|e| format!(\"Could not output config: {}\", e))\n     }"}, {"sha": "462a80946ee71e0b61d75c2f7b97c53921afa20c", "filename": "src/emitter/diff.rs", "status": "modified", "additions": 81, "deletions": 6, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Femitter%2Fdiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Femitter%2Fdiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fdiff.rs?ref=62432fe31b396058767c71ed332b6d2eed3053ff", "patch": "@@ -15,7 +15,7 @@ impl DiffEmitter {\n impl Emitter for DiffEmitter {\n     fn emit_formatted_file(\n         &mut self,\n-        _output: &mut dyn Write,\n+        output: &mut dyn Write,\n         FormattedFile {\n             filename,\n             original_text,\n@@ -25,11 +25,86 @@ impl Emitter for DiffEmitter {\n         const CONTEXT_SIZE: usize = 3;\n         let mismatch = make_diff(&original_text, formatted_text, CONTEXT_SIZE);\n         let has_diff = !mismatch.is_empty();\n-        print_diff(\n-            mismatch,\n-            |line_num| format!(\"Diff in {} at line {}:\", filename, line_num),\n-            &self.config,\n-        );\n+\n+        if has_diff {\n+            if self.config.print_misformatted_file_names() {\n+                writeln!(output, \"{}\", ensure_real_path(filename).display())?;\n+            } else {\n+                print_diff(\n+                    mismatch,\n+                    |line_num| format!(\"Diff in {} at line {}:\", filename, line_num),\n+                    &self.config,\n+                );\n+            }\n+        }\n+\n         return Ok(EmitterResult { has_diff });\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::config::Config;\n+    use crate::FileName;\n+    use std::path::PathBuf;\n+\n+    #[test]\n+    fn does_not_print_when_no_files_reformatted() {\n+        let mut writer = Vec::new();\n+        let config = Config::default();\n+        let mut emitter = DiffEmitter::new(config);\n+        let result = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(\"src/lib.rs\")),\n+                    original_text: \"fn empty() {}\\n\",\n+                    formatted_text: \"fn empty() {}\\n\",\n+                },\n+            )\n+            .unwrap();\n+        assert_eq!(result.has_diff, false);\n+        assert_eq!(writer.len(), 0);\n+    }\n+\n+    #[test]\n+    fn prints_file_names_when_config_is_enabled() {\n+        let bin_file = \"src/bin.rs\";\n+        let bin_original = \"fn main() {\\nprintln!(\\\"Hello, world!\\\");\\n}\";\n+        let bin_formatted = \"fn main() {\\n    println!(\\\"Hello, world!\\\");\\n}\";\n+        let lib_file = \"src/lib.rs\";\n+        let lib_original = \"fn greet() {\\nprintln!(\\\"Greetings!\\\");\\n}\";\n+        let lib_formatted = \"fn greet() {\\n    println!(\\\"Greetings!\\\");\\n}\";\n+\n+        let mut writer = Vec::new();\n+        let mut config = Config::default();\n+        config.set().print_misformatted_file_names(true);\n+        let mut emitter = DiffEmitter::new(config);\n+        let _ = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(bin_file)),\n+                    original_text: bin_original,\n+                    formatted_text: bin_formatted,\n+                },\n+            )\n+            .unwrap();\n+        let _ = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(lib_file)),\n+                    original_text: lib_original,\n+                    formatted_text: lib_formatted,\n+                },\n+            )\n+            .unwrap();\n+\n+        assert_eq!(\n+            String::from_utf8(writer).unwrap(),\n+            format!(\"{}\\n{}\\n\", bin_file, lib_file),\n+        )\n+    }\n+}"}, {"sha": "6360b73ee615e084b0a3c64ee46a70e0102c6789", "filename": "src/emitter/files.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Femitter%2Ffiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Femitter%2Ffiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Ffiles.rs?ref=62432fe31b396058767c71ed332b6d2eed3053ff", "patch": "@@ -2,12 +2,22 @@ use super::*;\n use std::fs;\n \n #[derive(Debug, Default)]\n-pub(crate) struct FilesEmitter;\n+pub(crate) struct FilesEmitter {\n+    print_misformatted_file_names: bool,\n+}\n+\n+impl FilesEmitter {\n+    pub(crate) fn new(print_misformatted_file_names: bool) -> Self {\n+        Self {\n+            print_misformatted_file_names,\n+        }\n+    }\n+}\n \n impl Emitter for FilesEmitter {\n     fn emit_formatted_file(\n         &mut self,\n-        _output: &mut dyn Write,\n+        output: &mut dyn Write,\n         FormattedFile {\n             filename,\n             original_text,\n@@ -18,6 +28,9 @@ impl Emitter for FilesEmitter {\n         let filename = ensure_real_path(filename);\n         if original_text != formatted_text {\n             fs::write(filename, formatted_text)?;\n+            if self.print_misformatted_file_names {\n+                writeln!(output, \"{}\", filename.display())?;\n+            }\n         }\n         Ok(EmitterResult::default())\n     }"}, {"sha": "31df6b1c72cd433930f840ff883c3ea942f7046f", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62432fe31b396058767c71ed332b6d2eed3053ff/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=62432fe31b396058767c71ed332b6d2eed3053ff", "patch": "@@ -480,7 +480,9 @@ pub(crate) fn create_emitter<'a>(config: &Config) -> Box<dyn Emitter + 'a> {\n         EmitMode::Files if config.make_backup() => {\n             Box::new(emitter::FilesWithBackupEmitter::default())\n         }\n-        EmitMode::Files => Box::new(emitter::FilesEmitter::default()),\n+        EmitMode::Files => Box::new(emitter::FilesEmitter::new(\n+            config.print_misformatted_file_names(),\n+        )),\n         EmitMode::Stdout | EmitMode::Coverage => {\n             Box::new(emitter::StdoutEmitter::new(config.verbose()))\n         }"}]}