{"sha": "c6dec379b0870ea1a56bfbe9126b5f9c751a17ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZGVjMzc5YjA4NzBlYTFhNTZiZmJlOTEyNmI1ZjljNzUxYTE3ZWE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-21T20:01:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-24T19:58:01Z"}, "message": "Implement a bit of type parameter matching to get a simple case working.", "tree": {"sha": "51fb849e6d62584dd759a28c51b7492b7dd3dfd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51fb849e6d62584dd759a28c51b7492b7dd3dfd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea", "html_url": "https://github.com/rust-lang/rust/commit/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "546d1440095771a58ce7c68ebec56cf612266b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/546d1440095771a58ce7c68ebec56cf612266b58", "html_url": "https://github.com/rust-lang/rust/commit/546d1440095771a58ce7c68ebec56cf612266b58"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "4682daa48f24e2514564d7bef21dbaa81cac5897", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=c6dec379b0870ea1a56bfbe9126b5f9c751a17ea", "patch": "@@ -446,6 +446,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         generic-fn-infer.rs \\\n                         generic-drop-glue.rs \\\n                         generic-tup.rs \\\n+                        generic-type.rs \\\n                         hello.rs \\\n                         int.rs \\\n                         i32-sub.rs \\"}, {"sha": "01bb7311e33004c9bd0613f156b3c669a9c89650", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=c6dec379b0870ea1a56bfbe9126b5f9c751a17ea", "patch": "@@ -476,10 +476,6 @@ fn fold_ty_path(&env e, &span sp, ast.path p, &option.t[def] d) -> @ast.ty {\n         e.sess.unimpl(\"resolving path ty with >1 component\");\n     }\n \n-    if (_vec.len[@ast.ty](p.node.types) > 0u) {\n-        e.sess.unimpl(\"resolving path ty with ty params\");\n-    }\n-\n     auto d_ = lookup_name(e, p.node.idents.(0));\n \n     alt (d_) {"}, {"sha": "42322c205563921e4db3d3e1d8393a76ae1663f2", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6dec379b0870ea1a56bfbe9126b5f9c751a17ea/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=c6dec379b0870ea1a56bfbe9126b5f9c751a17ea", "patch": "@@ -81,6 +81,23 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n         ret rec(mode=arg.mode, ty=ast_ty_to_ty(getter, arg.ty));\n     }\n \n+    fn replace_type_params(@ty.t t, ty_table param_map) -> @ty.t {\n+        state obj param_replacer(ty_table param_map) {\n+            fn fold_simple_ty(@ty.t t) -> @ty.t {\n+                alt (t.struct) {\n+                    case (ty.ty_param(?param_def)) {\n+                        ret param_map.get(param_def);\n+                    }\n+                    case (_) {\n+                        ret t;\n+                    }\n+                }\n+            }\n+        }\n+        auto replacer = param_replacer(param_map);\n+        ret ty.fold_ty(replacer, t);\n+    }\n+\n     auto mut = ast.imm;\n     auto sty;\n     auto cname = none[str];\n@@ -122,7 +139,20 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n                 case (ast.def_ty(?id)) {\n                     // TODO: maybe record cname chains so we can do\n                     // \"foo = int\" like OCaml?\n-                    sty = getter(id).ty.struct;\n+                    auto ty_and_params = getter(id);\n+                    auto params = ty_and_params.params;\n+                    auto num_type_params = _vec.len[@ast.ty](path.node.types);\n+                    check(num_type_params == _vec.len[ast.ty_param](params));\n+\n+                    auto param_map = common.new_def_hash[@ty.t]();\n+                    for each (uint i in _uint.range(0u, num_type_params)) {\n+                        auto x = path.node.types.(i);\n+                        auto y = params.(i);\n+                        param_map.insert(y.id, ast_ty_to_ty(getter, x));\n+                    }\n+\n+                    sty = replace_type_params(ty_and_params.ty,\n+                                              param_map).struct;\n                 }\n                 case (ast.def_ty_arg(?id))  { sty = ty.ty_param(id); }\n                 case (_)                    { fail; }"}]}