{"sha": "c2c64145cb0487b20b79d4bf470cda7e39fcb236", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzY0MTQ1Y2IwNDg3YjIwYjc5ZDRiZjQ3MGNkYTdlMzlmY2IyMzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T10:12:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T10:12:49Z"}, "message": "move", "tree": {"sha": "133c220acab90d756ed48cc1951ed3752026e297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/133c220acab90d756ed48cc1951ed3752026e297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c64145cb0487b20b79d4bf470cda7e39fcb236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c64145cb0487b20b79d4bf470cda7e39fcb236", "html_url": "https://github.com/rust-lang/rust/commit/c2c64145cb0487b20b79d4bf470cda7e39fcb236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c64145cb0487b20b79d4bf470cda7e39fcb236/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "html_url": "https://github.com/rust-lang/rust/commit/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921"}], "stats": {"total": 405, "additions": 193, "deletions": 212}, "files": [{"sha": "1f072533cf3d2b290ca663519b50445044ef0df1", "filename": "crates/libanalysis/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2FCargo.toml?ref=c2c64145cb0487b20b79d4bf470cda7e39fcb236", "patch": "@@ -6,7 +6,6 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n [dependencies]\n relative-path = \"0.3.7\"\n log = \"0.4.2\"\n-failure = \"0.1.2\"\n parking_lot = \"0.6.3\"\n once_cell = \"0.1.4\"\n rayon = \"1.0.2\""}, {"sha": "ded88cd15fc7eb7c2bd2cedd1bfc6e587e07d6d1", "filename": "crates/libanalysis/src/api.rs", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Flibanalysis%2Fsrc%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Flibanalysis%2Fsrc%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fapi.rs?ref=1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "patch": "@@ -1,142 +0,0 @@\n-use relative_path::{RelativePath, RelativePathBuf};\n-use libsyntax2::{File, TextRange, TextUnit, AtomEdit};\n-use libeditor;\n-use {imp::{AnalysisImpl, AnalysisHostImpl}, Query};\n-\n-pub use libeditor::{\n-    LocalEdit, StructureNode, LineIndex, FileSymbol,\n-    Runnable, RunnableKind, HighlightedRange, CompletionItem\n-};\n-\n-#[derive(Debug)]\n-pub struct SourceChange {\n-    pub label: String,\n-    pub source_file_edits: Vec<SourceFileEdit>,\n-    pub file_system_edits: Vec<FileSystemEdit>,\n-    pub cursor_position: Option<Position>,\n-}\n-\n-#[derive(Debug)]\n-pub struct Position {\n-    pub file_id: FileId,\n-    pub offset: TextUnit,\n-}\n-\n-#[derive(Debug)]\n-pub struct SourceFileEdit {\n-    pub file_id: FileId,\n-    pub edits: Vec<AtomEdit>,\n-}\n-\n-#[derive(Debug)]\n-pub enum FileSystemEdit {\n-    CreateFile {\n-        anchor: FileId,\n-        path: RelativePathBuf,\n-    },\n-    MoveFile {\n-        file: FileId,\n-        path: RelativePathBuf,\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct Diagnostic {\n-    pub message: String,\n-    pub range: TextRange,\n-    pub fix: Option<SourceChange>,\n-}\n-\n-#[derive(Clone, Debug)]\n-pub struct Analysis {\n-    pub(crate) imp: AnalysisImpl\n-}\n-\n-impl Analysis {\n-    pub fn file_syntax(&self, file_id: FileId) -> File {\n-        self.imp.file_syntax(file_id)\n-    }\n-    pub fn file_line_index(&self, file_id: FileId) -> LineIndex {\n-        self.imp.file_line_index(file_id)\n-    }\n-    pub fn extend_selection(&self, file: &File, range: TextRange) -> TextRange {\n-        libeditor::extend_selection(file, range).unwrap_or(range)\n-    }\n-    pub fn matching_brace(&self, file: &File, offset: TextUnit) -> Option<TextUnit> {\n-        libeditor::matching_brace(file, offset)\n-    }\n-    pub fn syntax_tree(&self, file_id: FileId) -> String {\n-        let file = self.file_syntax(file_id);\n-        libeditor::syntax_tree(&file)\n-    }\n-    pub fn join_lines(&self, file_id: FileId, range: TextRange) -> SourceChange {\n-        let file = self.file_syntax(file_id);\n-        SourceChange::from_local_edit(file_id, \"join lines\", libeditor::join_lines(&file, range))\n-    }\n-    pub fn on_eq_typed(&self, file_id: FileId, offset: TextUnit) -> Option<SourceChange> {\n-        let file = self.file_syntax(file_id);\n-        Some(SourceChange::from_local_edit(file_id, \"add semicolon\", libeditor::on_eq_typed(&file, offset)?))\n-    }\n-    pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n-        let file = self.file_syntax(file_id);\n-        libeditor::file_structure(&file)\n-    }\n-    pub fn symbol_search(&self, query: Query) -> Vec<(FileId, FileSymbol)> {\n-        self.imp.world_symbols(query)\n-    }\n-    pub fn approximately_resolve_symbol(&self, file_id: FileId, offset: TextUnit) -> Vec<(FileId, FileSymbol)> {\n-        self.imp.approximately_resolve_symbol(file_id, offset)\n-    }\n-    pub fn parent_module(&self, file_id: FileId) -> Vec<(FileId, FileSymbol)> {\n-        self.imp.parent_module(file_id)\n-    }\n-    pub fn runnables(&self, file_id: FileId) -> Vec<Runnable> {\n-        let file = self.file_syntax(file_id);\n-        libeditor::runnables(&file)\n-    }\n-    pub fn highlight(&self, file_id: FileId) -> Vec<HighlightedRange> {\n-        let file = self.file_syntax(file_id);\n-        libeditor::highlight(&file)\n-    }\n-    pub fn completions(&self, file_id: FileId, offset: TextUnit) -> Option<Vec<CompletionItem>> {\n-        let file = self.file_syntax(file_id);\n-        libeditor::scope_completion(&file, offset)\n-    }\n-    pub fn assists(&self, file_id: FileId, offset: TextUnit) -> Vec<SourceChange> {\n-        self.imp.assists(file_id, offset)\n-    }\n-    pub fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n-        self.imp.diagnostics(file_id)\n-    }\n-}\n-\n-pub trait FileResolver: Send + Sync + 'static {\n-    fn file_stem(&self, id: FileId) -> String;\n-    fn resolve(&self, id: FileId, path: &RelativePath) -> Option<FileId>;\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct FileId(pub u32);\n-\n-#[derive(Debug)]\n-pub struct AnalysisHost {\n-    pub(crate) imp: AnalysisHostImpl\n-}\n-\n-impl AnalysisHost {\n-    pub fn new() -> AnalysisHost {\n-        AnalysisHost { imp: AnalysisHostImpl::new() }\n-    }\n-\n-    pub fn analysis(&self, file_resolver: impl FileResolver) -> Analysis {\n-        Analysis { imp: self.imp.analysis(file_resolver) }\n-    }\n-\n-    pub fn change_file(&mut self, file_id: FileId, text: Option<String>) {\n-        self.change_files(::std::iter::once((file_id, text)));\n-    }\n-\n-    pub fn change_files(&mut self, changes: impl Iterator<Item=(FileId, Option<String>)>) {\n-        self.imp.change_files(changes)\n-    }\n-}"}, {"sha": "004942e72b457b0ae16a3d5535d451cad81ff7f8", "filename": "crates/libanalysis/src/imp.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fimp.rs?ref=c2c64145cb0487b20b79d4bf470cda7e39fcb236", "patch": "@@ -9,14 +9,14 @@ use std::{\n     panic,\n };\n \n+use rayon::prelude::*;\n+use once_cell::sync::OnceCell;\n+use libeditor::{self, FileSymbol, LineIndex, find_node_at_offset, LocalEdit};\n use libsyntax2::{\n     TextUnit, TextRange, SmolStr, File, AstNode,\n     SyntaxKind::*,\n     ast::{self, NameOwner},\n };\n-use rayon::prelude::*;\n-use once_cell::sync::OnceCell;\n-use libeditor::{self, FileSymbol, LineIndex, find_node_at_offset, LocalEdit};\n \n use {\n     FileId, FileResolver, Query, Diagnostic, SourceChange, SourceFileEdit, Position, FileSystemEdit,\n@@ -44,11 +44,11 @@ impl AnalysisHostImpl {\n         AnalysisImpl {\n             needs_reindex: AtomicBool::new(false),\n             file_resolver: Arc::new(file_resolver),\n-            data: self.data.clone()\n+            data: self.data.clone(),\n         }\n     }\n \n-    pub fn change_files(&mut self, changes: impl Iterator<Item=(FileId, Option<String>)>) {\n+    pub fn change_files(&mut self, changes: &mut dyn Iterator<Item=(FileId, Option<String>)>) {\n         let data = self.data_mut();\n         for (file_id, text) in changes {\n             let change_kind = if data.file_map.remove(&file_id).is_some() {\n@@ -72,20 +72,14 @@ impl AnalysisHostImpl {\n     }\n \n     fn data_mut(&mut self) -> &mut WorldData {\n-        if Arc::get_mut(&mut self.data).is_none() {\n-            self.data = Arc::new(WorldData {\n-                file_map: self.data.file_map.clone(),\n-                module_map: self.data.module_map.clone(),\n-            });\n-        }\n-        Arc::get_mut(&mut self.data).unwrap()\n+        Arc::make_mut(&mut self.data)\n     }\n }\n \n pub(crate) struct AnalysisImpl {\n-    pub(crate) needs_reindex: AtomicBool,\n-    pub(crate) file_resolver: Arc<FileResolver>,\n-    pub(crate) data: Arc<WorldData>,\n+    needs_reindex: AtomicBool,\n+    file_resolver: Arc<FileResolver>,\n+    data: Arc<WorldData>,\n }\n \n impl fmt::Debug for AnalysisImpl {\n@@ -280,7 +274,7 @@ impl AnalysisImpl {\n     }\n \n     fn reindex(&self) {\n-        if self.needs_reindex.compare_and_swap(false, true, SeqCst) {\n+        if self.needs_reindex.compare_and_swap(true, false, SeqCst) {\n             let now = Instant::now();\n             let data = &*self.data;\n             data.file_map\n@@ -298,22 +292,22 @@ impl AnalysisImpl {\n     }\n }\n \n-#[derive(Default, Debug)]\n-pub(crate) struct WorldData {\n-    pub(crate) file_map: HashMap<FileId, Arc<FileData>>,\n-    pub(crate) module_map: ModuleMap,\n+#[derive(Clone, Default, Debug)]\n+struct WorldData {\n+    file_map: HashMap<FileId, Arc<FileData>>,\n+    module_map: ModuleMap,\n }\n \n #[derive(Debug)]\n-pub(crate) struct FileData {\n-    pub(crate) text: String,\n-    pub(crate) symbols: OnceCell<FileSymbols>,\n-    pub(crate) syntax: OnceCell<File>,\n-    pub(crate) lines: OnceCell<LineIndex>,\n+struct FileData {\n+    text: String,\n+    symbols: OnceCell<FileSymbols>,\n+    syntax: OnceCell<File>,\n+    lines: OnceCell<LineIndex>,\n }\n \n impl FileData {\n-    pub(crate) fn new(text: String) -> FileData {\n+    fn new(text: String) -> FileData {\n         FileData {\n             text,\n             symbols: OnceCell::new(),"}, {"sha": "8102286329df9d490a9a7d565bc0a3acbde94c2f", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 167, "deletions": 7, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=c2c64145cb0487b20b79d4bf470cda7e39fcb236", "patch": "@@ -1,4 +1,3 @@\n-extern crate failure;\n extern crate parking_lot;\n #[macro_use]\n extern crate log;\n@@ -11,13 +10,174 @@ extern crate relative_path;\n \n mod symbol_index;\n mod module_map;\n-mod api;\n mod imp;\n \n-pub use self::symbol_index::Query;\n-pub use self::api::{\n-    AnalysisHost, Analysis, SourceChange, SourceFileEdit, FileSystemEdit, Position, Diagnostic, Runnable, RunnableKind,\n-    FileId, FileResolver,\n+use relative_path::{RelativePath, RelativePathBuf};\n+use libsyntax2::{File, TextRange, TextUnit, AtomEdit};\n+use imp::{AnalysisImpl, AnalysisHostImpl};\n+\n+pub use libeditor::{\n+    StructureNode, LineIndex, FileSymbol,\n+    Runnable, RunnableKind, HighlightedRange, CompletionItem,\n };\n \n-pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct FileId(pub u32);\n+\n+pub trait FileResolver: Send + Sync + 'static {\n+    fn file_stem(&self, id: FileId) -> String;\n+    fn resolve(&self, id: FileId, path: &RelativePath) -> Option<FileId>;\n+}\n+\n+#[derive(Debug)]\n+pub struct AnalysisHost {\n+    pub(crate) imp: AnalysisHostImpl\n+}\n+\n+impl AnalysisHost {\n+    pub fn new() -> AnalysisHost {\n+        AnalysisHost { imp: AnalysisHostImpl::new() }\n+    }\n+    pub fn analysis(&self, file_resolver: impl FileResolver) -> Analysis {\n+        Analysis { imp: self.imp.analysis(file_resolver) }\n+    }\n+    pub fn change_file(&mut self, file_id: FileId, text: Option<String>) {\n+        self.change_files(::std::iter::once((file_id, text)));\n+    }\n+    pub fn change_files(&mut self, mut changes: impl Iterator<Item=(FileId, Option<String>)>) {\n+        self.imp.change_files(&mut changes)\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct SourceChange {\n+    pub label: String,\n+    pub source_file_edits: Vec<SourceFileEdit>,\n+    pub file_system_edits: Vec<FileSystemEdit>,\n+    pub cursor_position: Option<Position>,\n+}\n+\n+#[derive(Debug)]\n+pub struct Position {\n+    pub file_id: FileId,\n+    pub offset: TextUnit,\n+}\n+\n+#[derive(Debug)]\n+pub struct SourceFileEdit {\n+    pub file_id: FileId,\n+    pub edits: Vec<AtomEdit>,\n+}\n+\n+#[derive(Debug)]\n+pub enum FileSystemEdit {\n+    CreateFile {\n+        anchor: FileId,\n+        path: RelativePathBuf,\n+    },\n+    MoveFile {\n+        file: FileId,\n+        path: RelativePathBuf,\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct Diagnostic {\n+    pub message: String,\n+    pub range: TextRange,\n+    pub fix: Option<SourceChange>,\n+}\n+\n+#[derive(Debug)]\n+pub struct Query {\n+    query: String,\n+    lowercased: String,\n+    only_types: bool,\n+    exact: bool,\n+    limit: usize,\n+}\n+\n+impl Query {\n+    pub fn new(query: String) -> Query {\n+        let lowercased = query.to_lowercase();\n+        Query {\n+            query,\n+            lowercased,\n+            only_types: false,\n+            exact: false,\n+            limit: usize::max_value()\n+        }\n+    }\n+    pub fn only_types(&mut self) {\n+        self.only_types = true;\n+    }\n+    pub fn exact(&mut self) {\n+        self.exact = true;\n+    }\n+    pub fn limit(&mut self, limit: usize) {\n+        self.limit = limit\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct Analysis {\n+    pub(crate) imp: AnalysisImpl\n+}\n+\n+impl Analysis {\n+    pub fn file_syntax(&self, file_id: FileId) -> File {\n+        self.imp.file_syntax(file_id)\n+    }\n+    pub fn file_line_index(&self, file_id: FileId) -> LineIndex {\n+        self.imp.file_line_index(file_id)\n+    }\n+    pub fn extend_selection(&self, file: &File, range: TextRange) -> TextRange {\n+        libeditor::extend_selection(file, range).unwrap_or(range)\n+    }\n+    pub fn matching_brace(&self, file: &File, offset: TextUnit) -> Option<TextUnit> {\n+        libeditor::matching_brace(file, offset)\n+    }\n+    pub fn syntax_tree(&self, file_id: FileId) -> String {\n+        let file = self.file_syntax(file_id);\n+        libeditor::syntax_tree(&file)\n+    }\n+    pub fn join_lines(&self, file_id: FileId, range: TextRange) -> SourceChange {\n+        let file = self.file_syntax(file_id);\n+        SourceChange::from_local_edit(file_id, \"join lines\", libeditor::join_lines(&file, range))\n+    }\n+    pub fn on_eq_typed(&self, file_id: FileId, offset: TextUnit) -> Option<SourceChange> {\n+        let file = self.file_syntax(file_id);\n+        Some(SourceChange::from_local_edit(file_id, \"add semicolon\", libeditor::on_eq_typed(&file, offset)?))\n+    }\n+    pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n+        let file = self.file_syntax(file_id);\n+        libeditor::file_structure(&file)\n+    }\n+    pub fn symbol_search(&self, query: Query) -> Vec<(FileId, FileSymbol)> {\n+        self.imp.world_symbols(query)\n+    }\n+    pub fn approximately_resolve_symbol(&self, file_id: FileId, offset: TextUnit) -> Vec<(FileId, FileSymbol)> {\n+        self.imp.approximately_resolve_symbol(file_id, offset)\n+    }\n+    pub fn parent_module(&self, file_id: FileId) -> Vec<(FileId, FileSymbol)> {\n+        self.imp.parent_module(file_id)\n+    }\n+    pub fn runnables(&self, file_id: FileId) -> Vec<Runnable> {\n+        let file = self.file_syntax(file_id);\n+        libeditor::runnables(&file)\n+    }\n+    pub fn highlight(&self, file_id: FileId) -> Vec<HighlightedRange> {\n+        let file = self.file_syntax(file_id);\n+        libeditor::highlight(&file)\n+    }\n+    pub fn completions(&self, file_id: FileId, offset: TextUnit) -> Option<Vec<CompletionItem>> {\n+        let file = self.file_syntax(file_id);\n+        libeditor::scope_completion(&file, offset)\n+    }\n+    pub fn assists(&self, file_id: FileId, offset: TextUnit) -> Vec<SourceChange> {\n+        self.imp.assists(file_id, offset)\n+    }\n+    pub fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n+        self.imp.diagnostics(file_id)\n+    }\n+}"}, {"sha": "cb35ab1d18e37f65ebb64c5072dc2f67578877b7", "filename": "crates/libanalysis/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs?ref=c2c64145cb0487b20b79d4bf470cda7e39fcb236", "patch": "@@ -4,6 +4,7 @@ use libsyntax2::{\n     SyntaxKind::{self, *},\n };\n use fst::{self, IntoStreamer, Streamer};\n+use Query;\n \n #[derive(Debug)]\n pub(crate) struct FileSymbols {\n@@ -30,38 +31,7 @@ impl FileSymbols {\n     }\n }\n \n-pub struct Query {\n-    query: String,\n-    lowercased: String,\n-    only_types: bool,\n-    exact: bool,\n-    limit: usize,\n-}\n-\n impl Query {\n-    pub fn new(query: String) -> Query {\n-        let lowercased = query.to_lowercase();\n-        Query {\n-            query,\n-            lowercased,\n-            only_types: false,\n-            exact: false,\n-            limit: usize::max_value()\n-        }\n-    }\n-\n-    pub fn only_types(&mut self) {\n-        self.only_types = true;\n-    }\n-\n-    pub fn exact(&mut self) {\n-        self.exact = true;\n-    }\n-\n-    pub fn limit(&mut self, limit: usize) {\n-        self.limit = limit\n-    }\n-\n     pub(crate) fn process(\n         &mut self,\n         file: &FileSymbols,"}, {"sha": "2f1299463f0e4652f27858137e6f0543830446b9", "filename": "crates/libanalysis/tests/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c64145cb0487b20b79d4bf470cda7e39fcb236/crates%2Flibanalysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Ftests%2Ftests.rs?ref=c2c64145cb0487b20b79d4bf470cda7e39fcb236", "patch": "@@ -5,7 +5,7 @@ extern crate test_utils;\n use std::path::{Path};\n \n use relative_path::RelativePath;\n-use libanalysis::{WorldState, FileId, FileResolver};\n+use libanalysis::{AnalysisHost, FileId, FileResolver};\n use test_utils::assert_eq_dbg;\n \n struct FileMap(&'static [(u32, &'static str)]);\n@@ -37,7 +37,7 @@ impl FileResolver for FileMap {\n \n #[test]\n fn test_resolve_module() {\n-    let mut world = WorldState::new();\n+    let mut world = AnalysisHost::new();\n     world.change_file(FileId(1), Some(\"mod foo;\".to_string()));\n     world.change_file(FileId(2), Some(\"\".to_string()));\n \n@@ -64,7 +64,7 @@ fn test_resolve_module() {\n \n #[test]\n fn test_unresolved_module_diagnostic() {\n-    let mut world = WorldState::new();\n+    let mut world = AnalysisHost::new();\n     world.change_file(FileId(1), Some(\"mod foo;\".to_string()));\n \n     let snap = world.analysis(FileMap(&[(1, \"/lib.rs\")]));\n@@ -84,7 +84,7 @@ fn test_unresolved_module_diagnostic() {\n \n #[test]\n fn test_unresolved_module_diagnostic_no_diag_for_inline_mode() {\n-    let mut world = WorldState::new();\n+    let mut world = AnalysisHost::new();\n     world.change_file(FileId(1), Some(\"mod foo {}\".to_string()));\n \n     let snap = world.analysis(FileMap(&[(1, \"/lib.rs\")]));\n@@ -97,7 +97,7 @@ fn test_unresolved_module_diagnostic_no_diag_for_inline_mode() {\n \n #[test]\n fn test_resolve_parent_module() {\n-    let mut world = WorldState::new();\n+    let mut world = AnalysisHost::new();\n     world.change_file(FileId(1), Some(\"mod foo;\".to_string()));\n     world.change_file(FileId(2), Some(\"\".to_string()));\n "}]}