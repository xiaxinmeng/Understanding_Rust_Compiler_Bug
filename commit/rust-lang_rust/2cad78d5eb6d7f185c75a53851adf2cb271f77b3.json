{"sha": "2cad78d5eb6d7f185c75a53851adf2cb271f77b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYWQ3OGQ1ZWI2ZDdmMTg1Yzc1YTUzODUxYWRmMmNiMjcxZjc3YjM=", "commit": {"author": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-23T16:09:06Z"}, "committer": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-23T16:09:06Z"}, "message": "replace `Div` example with something more evocative of division\n\nAnalogous to PR #35860.\n\nr? @GuillaumeGomez", "tree": {"sha": "2b5125850f89cbaabc0d2699d13e42d12b1848b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b5125850f89cbaabc0d2699d13e42d12b1848b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cad78d5eb6d7f185c75a53851adf2cb271f77b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cad78d5eb6d7f185c75a53851adf2cb271f77b3", "html_url": "https://github.com/rust-lang/rust/commit/2cad78d5eb6d7f185c75a53851adf2cb271f77b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cad78d5eb6d7f185c75a53851adf2cb271f77b3/comments", "author": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43204fff5d0a656f8a94bfff3129e04bc9d30ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/43204fff5d0a656f8a94bfff3129e04bc9d30ad4", "html_url": "https://github.com/rust-lang/rust/commit/43204fff5d0a656f8a94bfff3129e04bc9d30ad4"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "c9124249bf5030d150e1542729ccb0a0c97503a9", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2cad78d5eb6d7f185c75a53851adf2cb271f77b3/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cad78d5eb6d7f185c75a53851adf2cb271f77b3/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=2cad78d5eb6d7f185c75a53851adf2cb271f77b3", "patch": "@@ -421,25 +421,68 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Div`. When `Foo / Foo` happens, it ends up\n-/// calling `div`, and therefore, `main` prints `Dividing!`.\n+/// Implementing a `Div`idable rational number struct:\n ///\n /// ```\n /// use std::ops::Div;\n ///\n-/// struct Foo;\n+/// // The uniqueness of rational numbers in lowest terms is a consequence of\n+/// // the fundamental theorem of arithmetic.\n+/// #[derive(Eq)]\n+/// #[derive(PartialEq, Debug)]\n+/// struct Rational {\n+///     nominator: usize,\n+///     denominator: usize,\n+/// }\n ///\n-/// impl Div for Foo {\n-///     type Output = Foo;\n+/// impl Rational {\n+///     fn new(nominator: usize, denominator: usize) -> Self {\n+///         if denominator == 0 {\n+///             panic!(\"Zero is an invalid denominator!\");\n+///         }\n ///\n-///     fn div(self, _rhs: Foo) -> Foo {\n-///         println!(\"Dividing!\");\n-///         self\n+///         // Reduce to lowest terms by dividing by the greatest common\n+///         // divisor.\n+///         let gcd = gcd(nominator, denominator);\n+///         Rational {\n+///             nominator: nominator / gcd,\n+///             denominator: denominator / gcd,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl Div for Rational {\n+///     // The division of rational numbers is a closed operation.\n+///     type Output = Self;\n+///\n+///     fn div(self, rhs: Self) -> Self {\n+///         if rhs.nominator == 0 {\n+///             panic!(\"Cannot divide by zero-valued `Rational`!\");\n+///         }\n+///\n+///         let nominator = self.nominator * rhs.denominator;\n+///         let denominator = self.denominator * rhs.nominator;\n+///         Rational::new(nominator, denominator)\n+///     }\n+/// }\n+///\n+/// // Euclid's two-thousand-year-old algorithm for finding the greatest common\n+/// // divisor.\n+/// fn gcd(x: usize, y: usize) -> usize {\n+///     let mut x = x;\n+///     let mut y = y;\n+///     while y != 0 {\n+///         let t = y;\n+///         y = x % y;\n+///         x = t;\n ///     }\n+///     x\n /// }\n ///\n /// fn main() {\n-///     Foo / Foo;\n+///     assert_eq!(Rational::new(1, 2), Rational::new(2, 4));\n+///     assert_eq!(Rational::new(1, 2) / Rational::new(3, 4),\n+///                Rational::new(2, 3));\n /// }\n /// ```\n ///"}]}