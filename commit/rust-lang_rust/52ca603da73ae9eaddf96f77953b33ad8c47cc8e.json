{"sha": "52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "node_id": "C_kwDOAAsO6NoAKDUyY2E2MDNkYTczYWU5ZWFkZGY5NmY3Nzk1M2IzM2FkOGM0N2NjOGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-12T18:44:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-12T18:44:05Z"}, "message": "Auto merge of #95987 - m-ou-se:rollup-sdevd9b, r=m-ou-se\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #95783 (rustdoc doctest: include signal number in exit status)\n - #95794 (`parse_tt`: a few more tweaks)\n - #95963 ([bootstrap] Grab the right FileCheck binary for dist when cross-compiling.)\n - #95975 (Don't test -Cdefault-linker-libraries=yes when cross compiling.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dd56eed08e2d7301e59057eafc7f9e885b21e2d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd56eed08e2d7301e59057eafc7f9e885b21e2d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "html_url": "https://github.com/rust-lang/rust/commit/52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de56c295c394349a68f293039481c3aa6402f9c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/de56c295c394349a68f293039481c3aa6402f9c6", "html_url": "https://github.com/rust-lang/rust/commit/de56c295c394349a68f293039481c3aa6402f9c6"}, {"sha": "550a5104319ee5fd0eb0d29daffb2cd88e552e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/550a5104319ee5fd0eb0d29daffb2cd88e552e65", "html_url": "https://github.com/rust-lang/rust/commit/550a5104319ee5fd0eb0d29daffb2cd88e552e65"}], "stats": {"total": 140, "additions": 95, "deletions": 45}, "files": [{"sha": "b5f56d7d6dc84dfca36d278889ce39ee7bec294f", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "patch": "@@ -81,22 +81,12 @@ use rustc_session::parse::ParseSess;\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n \n-use smallvec::{smallvec, SmallVec};\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_span::symbol::Ident;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n-// One element is enough to cover 95-99% of vectors for most benchmarks. Also, vectors longer than\n-// one frequently have many elements, not just two or three.\n-type NamedMatchVec = SmallVec<[NamedMatch; 1]>;\n-\n-// This type is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(NamedMatchVec, 48);\n-\n /// A unit within a matcher that a `MatcherPos` can refer to. Similar to (and derived from)\n /// `mbe::TokenTree`, but designed specifically for fast and easy traversal during matching.\n /// Notable differences to `mbe::TokenTree`:\n@@ -221,7 +211,11 @@ struct MatcherPos {\n     /// with one element per metavar decl in the matcher. Each element records token trees matched\n     /// against the relevant metavar by the black box parser. An element will be a `MatchedSeq` if\n     /// the corresponding metavar decl is within a sequence.\n-    matches: Lrc<NamedMatchVec>,\n+    ///\n+    /// It is critical to performance that this is an `Lrc`, because it gets cloned frequently when\n+    /// processing sequences. Mostly for sequence-ending possibilities that must be tried but end\n+    /// up failing.\n+    matches: Lrc<Vec<NamedMatch>>,\n }\n \n // This type is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -246,18 +240,12 @@ impl MatcherPos {\n                 let mut curr = &mut matches[metavar_idx];\n                 for _ in 0..seq_depth - 1 {\n                     match curr {\n-                        MatchedSeq(seq) => {\n-                            let seq = Lrc::make_mut(seq);\n-                            curr = seq.last_mut().unwrap();\n-                        }\n+                        MatchedSeq(seq) => curr = seq.last_mut().unwrap(),\n                         _ => unreachable!(),\n                     }\n                 }\n                 match curr {\n-                    MatchedSeq(seq) => {\n-                        let seq = Lrc::make_mut(seq);\n-                        seq.push(m);\n-                    }\n+                    MatchedSeq(seq) => seq.push(m),\n                     _ => unreachable!(),\n                 }\n             }\n@@ -350,7 +338,7 @@ pub(super) fn count_metavar_decls(matcher: &[TokenTree]) -> usize {\n /// ```\n #[derive(Debug, Clone)]\n crate enum NamedMatch {\n-    MatchedSeq(Lrc<NamedMatchVec>),\n+    MatchedSeq(Vec<NamedMatch>),\n \n     // A metavar match of type `tt`.\n     MatchedTokenTree(rustc_ast::tokenstream::TokenTree),\n@@ -388,7 +376,7 @@ pub struct TtParser {\n \n     /// Pre-allocate an empty match array, so it can be cloned cheaply for macros with many rules\n     /// that have no metavars.\n-    empty_matches: Lrc<NamedMatchVec>,\n+    empty_matches: Lrc<Vec<NamedMatch>>,\n }\n \n impl TtParser {\n@@ -398,7 +386,7 @@ impl TtParser {\n             cur_mps: vec![],\n             next_mps: vec![],\n             bb_mps: vec![],\n-            empty_matches: Lrc::new(smallvec![]),\n+            empty_matches: Lrc::new(vec![]),\n         }\n     }\n \n@@ -452,11 +440,7 @@ impl TtParser {\n                 } => {\n                     // Install an empty vec for each metavar within the sequence.\n                     for metavar_idx in next_metavar..next_metavar + num_metavar_decls {\n-                        mp.push_match(\n-                            metavar_idx,\n-                            seq_depth,\n-                            MatchedSeq(self.empty_matches.clone()),\n-                        );\n+                        mp.push_match(metavar_idx, seq_depth, MatchedSeq(vec![]));\n                     }\n \n                     if op == KleeneOp::ZeroOrMore || op == KleeneOp::ZeroOrOne {"}, {"sha": "f5c7186bc4b18e3f86ef7d94ffff5bcadfcee442", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "patch": "@@ -439,7 +439,8 @@ pub fn compile_declarative_macro(\n     let argument_gram = mbe::macro_parser::compute_locs(&sess.parse_sess, &argument_gram);\n \n     let parser = Parser::new(&sess.parse_sess, body, true, rustc_parse::MACRO_ARGUMENTS);\n-    let mut tt_parser = TtParser::new(def.ident);\n+    let mut tt_parser =\n+        TtParser::new(Ident::with_dummy_span(if macro_rules { kw::MacroRules } else { kw::Macro }));\n     let argument_map = match tt_parser.parse_tt(&mut Cow::Borrowed(&parser), &argument_gram) {\n         Success(m) => m,\n         Failure(token, msg) => {"}, {"sha": "7b496e6c66933d6c360ff21cba611351da98674f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "patch": "@@ -865,8 +865,8 @@ impl Build {\n                 }\n             }\n         } else {\n-            let base = self.llvm_out(self.config.build).join(\"build\");\n-            let base = if !self.ninja() && self.config.build.contains(\"msvc\") {\n+            let base = self.llvm_out(target).join(\"build\");\n+            let base = if !self.ninja() && target.contains(\"msvc\") {\n                 if self.config.llvm_optimize {\n                     if self.config.llvm_release_debuginfo {\n                         base.join(\"RelWithDebInfo\")"}, {"sha": "eabe0803b4993ca1f19931273e203bf60e1111b4", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "patch": "@@ -1069,13 +1069,7 @@ impl Tester for Collector {\n                             }\n                         }\n                         TestFailure::ExecutionFailure(out) => {\n-                            let reason = if let Some(code) = out.status.code() {\n-                                format!(\"exit code {code}\")\n-                            } else {\n-                                String::from(\"terminated by signal\")\n-                            };\n-\n-                            eprintln!(\"Test executable failed ({reason}).\");\n+                            eprintln!(\"Test executable failed ({reason}).\", reason = out.status);\n \n                             // FIXME(#12309): An unfortunate side-effect of capturing the test\n                             // executable's output is that the relative ordering between the test's"}, {"sha": "4cd9993d8d5b372a698a8ec99e553566f911c258", "filename": "src/test/rustdoc-ui/failed-doctest-output-windows.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output-windows.rs?ref=52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "patch": "@@ -0,0 +1,28 @@\n+// only-windows\n+// There's a parallel generic version of this test for non-windows platforms.\n+\n+// Issue #51162: A failed doctest was not printing its stdout/stderr\n+// FIXME: if/when the output of the test harness can be tested on its own, this test should be\n+// adapted to use that, and that normalize line can go away\n+\n+// compile-flags:--test --test-args --test-threads=1\n+// rustc-env:RUST_BACKTRACE=0\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// failure-status: 101\n+\n+// doctest fails at runtime\n+/// ```\n+/// println!(\"stdout 1\");\n+/// eprintln!(\"stderr 1\");\n+/// println!(\"stdout 2\");\n+/// eprintln!(\"stderr 2\");\n+/// panic!(\"oh no\");\n+/// ```\n+pub struct SomeStruct;\n+\n+// doctest fails at compile time\n+/// ```\n+/// no\n+/// ```\n+pub struct OtherStruct;"}, {"sha": "6c147054da3225cfa13f521f78fe3922d1024ef7", "filename": "src/test/rustdoc-ui/failed-doctest-output-windows.stdout", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output-windows.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output-windows.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output-windows.stdout?ref=52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "patch": "@@ -0,0 +1,39 @@\n+\n+running 2 tests\n+test $DIR/failed-doctest-output-windows.rs - OtherStruct (line 25) ... FAILED\n+test $DIR/failed-doctest-output-windows.rs - SomeStruct (line 15) ... FAILED\n+\n+failures:\n+\n+---- $DIR/failed-doctest-output-windows.rs - OtherStruct (line 25) stdout ----\n+error[E0425]: cannot find value `no` in this scope\n+  --> $DIR/failed-doctest-output-windows.rs:26:1\n+   |\n+LL | no\n+   | ^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`.\n+Couldn't compile the test.\n+---- $DIR/failed-doctest-output-windows.rs - SomeStruct (line 15) stdout ----\n+Test executable failed (exit code: 101).\n+\n+stdout:\n+stdout 1\n+stdout 2\n+\n+stderr:\n+stderr 1\n+stderr 2\n+thread 'main' panicked at 'oh no', $DIR/failed-doctest-output-windows.rs:7:1\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+\n+\n+\n+failures:\n+    $DIR/failed-doctest-output-windows.rs - OtherStruct (line 25)\n+    $DIR/failed-doctest-output-windows.rs - SomeStruct (line 15)\n+\n+test result: FAILED. 0 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}, {"sha": "42de954d052b3fbb2a21ea3b4256aa5f4ecceaab", "filename": "src/test/rustdoc-ui/failed-doctest-output.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs?ref=52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "patch": "@@ -1,3 +1,6 @@\n+// ignore-windows\n+// There's a parallel version of this test for Windows.\n+\n // Issue #51162: A failed doctest was not printing its stdout/stderr\n // FIXME: if/when the output of the test harness can be tested on its own, this test should be\n // adapted to use that, and that normalize line can go away"}, {"sha": "630198a561af00db927e045cd397d35a6673f173", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "patch": "@@ -1,13 +1,13 @@\n \n running 2 tests\n-test $DIR/failed-doctest-output.rs - OtherStruct (line 22) ... FAILED\n-test $DIR/failed-doctest-output.rs - SomeStruct (line 12) ... FAILED\n+test $DIR/failed-doctest-output.rs - OtherStruct (line 25) ... FAILED\n+test $DIR/failed-doctest-output.rs - SomeStruct (line 15) ... FAILED\n \n failures:\n \n----- $DIR/failed-doctest-output.rs - OtherStruct (line 22) stdout ----\n+---- $DIR/failed-doctest-output.rs - OtherStruct (line 25) stdout ----\n error[E0425]: cannot find value `no` in this scope\n-  --> $DIR/failed-doctest-output.rs:23:1\n+  --> $DIR/failed-doctest-output.rs:26:1\n    |\n LL | no\n    | ^^ not found in this scope\n@@ -16,8 +16,8 @@ error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`.\n Couldn't compile the test.\n----- $DIR/failed-doctest-output.rs - SomeStruct (line 12) stdout ----\n-Test executable failed (exit code 101).\n+---- $DIR/failed-doctest-output.rs - SomeStruct (line 15) stdout ----\n+Test executable failed (exit status: 101).\n \n stdout:\n stdout 1\n@@ -32,8 +32,8 @@ note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n \n failures:\n-    $DIR/failed-doctest-output.rs - OtherStruct (line 22)\n-    $DIR/failed-doctest-output.rs - SomeStruct (line 12)\n+    $DIR/failed-doctest-output.rs - OtherStruct (line 25)\n+    $DIR/failed-doctest-output.rs - SomeStruct (line 15)\n \n test result: FAILED. 0 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "86459dc904a6eb0abc8ee4db79205e3a49a1025a", "filename": "src/test/ui/issues/issue-70093.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Fui%2Fissues%2Fissue-70093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ca603da73ae9eaddf96f77953b33ad8c47cc8e/src%2Ftest%2Fui%2Fissues%2Fissue-70093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70093.rs?ref=52ca603da73ae9eaddf96f77953b33ad8c47cc8e", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -Zlink-native-libraries=no -Cdefault-linker-libraries=yes\n // ignore-windows - this will probably only work on unixish systems\n // ignore-fuchsia - missing __libc_start_main for some reason (#84733)\n+// ignore-cross-compile - default-linker-libraries=yes doesn't play well with cross compiling\n \n #[link(name = \"some-random-non-existent-library\", kind = \"static\")]\n extern \"C\" {}"}]}