{"sha": "dae76d21ff4280b336756fb24e160dee7d9d7057", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZTc2ZDIxZmY0MjgwYjMzNjc1NmZiMjRlMTYwZGVlN2Q5ZDcwNTc=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-31T06:07:58Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-31T06:07:58Z"}, "message": "Implement soft wrapping for comments", "tree": {"sha": "f8e9ad5d5eed7329c64614b24de4d6f26e1c209e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e9ad5d5eed7329c64614b24de4d6f26e1c209e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dae76d21ff4280b336756fb24e160dee7d9d7057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dae76d21ff4280b336756fb24e160dee7d9d7057", "html_url": "https://github.com/rust-lang/rust/commit/dae76d21ff4280b336756fb24e160dee7d9d7057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dae76d21ff4280b336756fb24e160dee7d9d7057/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38399875b82cbad35f3405c40b34c469503020b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/38399875b82cbad35f3405c40b34c469503020b5", "html_url": "https://github.com/rust-lang/rust/commit/38399875b82cbad35f3405c40b34c469503020b5"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "0e06545300a4eee87a7333711ab8b2c04ae47a19", "filename": "src/comment.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dae76d21ff4280b336756fb24e160dee7d9d7057/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae76d21ff4280b336756fb24e160dee7d9d7057/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=dae76d21ff4280b336756fb24e160dee7d9d7057", "patch": "@@ -287,12 +287,13 @@ fn rewrite_comment_inner(\n         .checked_sub(closer.len() + opener.len())\n         .unwrap_or(1);\n     let indent_str = shape.indent.to_string(config);\n-    let fmt = StringFormat {\n+    let fmt_indent = shape.indent + (opener.len() - line_start.len());\n+    let mut fmt = StringFormat {\n         opener: \"\",\n         closer: \"\",\n         line_start: line_start,\n         line_end: \"\",\n-        shape: Shape::legacy(max_chars, shape.indent + (opener.len() - line_start.len())),\n+        shape: Shape::legacy(max_chars, fmt_indent),\n         trim_end: true,\n         config: config,\n     };\n@@ -317,26 +318,69 @@ fn rewrite_comment_inner(\n         });\n \n     let mut result = opener.to_owned();\n+    let mut is_prev_line_multi_line = false;\n+    let comment_line_separator = format!(\"\\n{}{}\", indent_str, line_start);\n     for line in lines {\n         if result == opener {\n             if line.is_empty() {\n                 continue;\n             }\n         } else {\n-            result.push('\\n');\n-            result.push_str(&indent_str);\n-            result.push_str(line_start);\n+            if is_prev_line_multi_line && !line.is_empty() {\n+                result.push(' ')\n+            } else {\n+                result.push_str(&comment_line_separator);\n+            }\n         }\n \n-        if config.wrap_comments() && line.len() > max_chars {\n-            let rewrite = rewrite_string(line, &fmt).unwrap_or_else(|| line.to_owned());\n-            result.push_str(&rewrite);\n+        if config.wrap_comments() && line.len() > fmt.shape.width && !has_url(line) {\n+            match rewrite_string(line, &fmt, Some(max_chars)) {\n+                Some(ref s) => {\n+                    is_prev_line_multi_line = s.contains('\\n');\n+                    result.push_str(s);\n+                }\n+                None if is_prev_line_multi_line => {\n+                    // We failed to put the current `line` next to the previous `line`.\n+                    // Remove the trailing space, then start rewrite on the next line.\n+                    result.pop();\n+                    result.push_str(&comment_line_separator);\n+                    fmt.shape = Shape::legacy(max_chars, fmt_indent);\n+                    match rewrite_string(line, &fmt, Some(max_chars)) {\n+                        Some(ref s) => {\n+                            is_prev_line_multi_line = s.contains('\\n');\n+                            result.push_str(s);\n+                        }\n+                        None => {\n+                            is_prev_line_multi_line = false;\n+                            result.push_str(line);\n+                        }\n+                    }\n+                }\n+                None => {\n+                    is_prev_line_multi_line = false;\n+                    result.push_str(line);\n+                }\n+            }\n+\n+            fmt.shape = if is_prev_line_multi_line {\n+                // 1 = \" \"\n+                let offset = 1 + last_line_width(&result) - line_start.len();\n+                Shape {\n+                    width: max_chars.checked_sub(offset).unwrap_or(0),\n+                    indent: fmt_indent,\n+                    offset: fmt.shape.offset + offset,\n+                }\n+            } else {\n+                Shape::legacy(max_chars, fmt_indent)\n+            };\n         } else {\n             if line.is_empty() && result.ends_with(' ') {\n                 // Remove space if this is an empty comment or a doc comment.\n                 result.pop();\n             }\n             result.push_str(line);\n+            fmt.shape = Shape::legacy(max_chars, fmt_indent);\n+            is_prev_line_multi_line = false;\n         }\n     }\n "}]}