{"sha": "68a82e44684a25314ded58349815bf6d1bc3c74a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YTgyZTQ0Njg0YTI1MzE0ZGVkNTgzNDk4MTViZjZkMWJjM2M3NGE=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-02T12:57:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-02T19:58:35Z"}, "message": "const_check: trans: added support for trivial casts\n\nPart of #1215", "tree": {"sha": "436739e5240e7f74e287f1fd589a335176a63703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/436739e5240e7f74e287f1fd589a335176a63703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a82e44684a25314ded58349815bf6d1bc3c74a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a82e44684a25314ded58349815bf6d1bc3c74a", "html_url": "https://github.com/rust-lang/rust/commit/68a82e44684a25314ded58349815bf6d1bc3c74a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a82e44684a25314ded58349815bf6d1bc3c74a/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4", "html_url": "https://github.com/rust-lang/rust/commit/3ee2eb656e36ff9bcf5d5c13fe311e423dba9dd4"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "44f3891c13c69da8626a7c31c64de6a1bea80945", "filename": "src/comp/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68a82e44684a25314ded58349815bf6d1bc3c74a/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a82e44684a25314ded58349815bf6d1bc3c74a/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_const.rs?ref=68a82e44684a25314ded58349815bf6d1bc3c74a", "patch": "@@ -43,6 +43,7 @@ fn check_expr(sess: session, e: @expr, &&is_const: bool, v: visit::vt<bool>) {\n                           \"disallowed operator in constant expression\");\n             ret;\n           }\n+          expr_cast(_, _) { }\n           expr_lit(@{node: lit_str(_), _}) {\n             sess.span_err(e.span,\n                           \"string constants are not supported\");"}, {"sha": "6a70d9e109deb313e360397d1e69a7d661ea8abc", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68a82e44684a25314ded58349815bf6d1bc3c74a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a82e44684a25314ded58349815bf6d1bc3c74a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=68a82e44684a25314ded58349815bf6d1bc3c74a", "patch": "@@ -5184,6 +5184,16 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n // that does so later on?\n fn trans_const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n     alt e.node {\n+      ast::expr_cast(e1, _) {\n+        alt ccx_tcx(cx).cast_map.find(e.id) {\n+          some(ty::triv_cast.) { trans_const_expr(cx, e1) }\n+          _ {\n+              cx.sess.span_err(e.span,\n+                               \"non-trivial cast in constant expression\");\n+              fail;\n+            }\n+        }\n+      }\n       ast::expr_lit(lit) { ret trans_crate_lit(cx, *lit); }\n       ast::expr_binary(b, e1, e2) {\n         let te1 = trans_const_expr(cx, e1);"}, {"sha": "59d7d618d2313a6bd3354c058df0489db5ab0e67", "filename": "src/test/run-pass/triv-cast-const.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68a82e44684a25314ded58349815bf6d1bc3c74a/src%2Ftest%2Frun-pass%2Ftriv-cast-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a82e44684a25314ded58349815bf6d1bc3c74a/src%2Ftest%2Frun-pass%2Ftriv-cast-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftriv-cast-const.rs?ref=68a82e44684a25314ded58349815bf6d1bc3c74a", "patch": "@@ -0,0 +1,15 @@\n+use std;\n+\n+import std::ctypes::*;\n+\n+// This will be more interesting once there is support\n+// for consts that refer to other consts, i.e. math_f64::consts::pi as m_float\n+#[cfg(target_arch=\"x86\")]\n+const foo: m_int = 0i32 as m_int;\n+\n+#[cfg(target_arch=\"x86_64\")]\n+const foo: m_int = 0i64 as m_int;\n+\n+fn main() {\n+    assert foo == 0 as m_int;\n+}\n\\ No newline at end of file"}]}