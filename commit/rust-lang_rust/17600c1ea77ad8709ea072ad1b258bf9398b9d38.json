{"sha": "17600c1ea77ad8709ea072ad1b258bf9398b9d38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NjAwYzFlYTc3YWQ4NzA5ZWEwNzJhZDFiMjU4YmY5Mzk4YjlkMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-21T23:44:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-21T23:44:11Z"}, "message": "Auto merge of #44682 - bluss:iter-rfold, r=dtolnay\n\nAdd iterator method .rfold(init, function); the reverse of fold\n\nrfold is the reverse version of fold.\n\nFold allows iterators to implement a different (non-resumable) internal\niteration when it is more efficient than the external iteration implemented\nthrough the next method. (Common examples are VecDeque and .chain()).\n\nIntroduce rfold() so that the same customization is available for reverse\niteration. This is achieved by both adding the method, and by having the\nRev\\<I> adaptor connect Rev::rfold \u2192 I::fold and Rev::fold \u2192 I::rfold.\n\nOn the surface, rfold(..) is just .rev().fold(..), but the special case\nimplementations allow a data structure specific fold to be used through for\nexample .iter().rev(); we thus have gains even for users never calling exactly\nrfold themselves.", "tree": {"sha": "c422cfcca0b9f5e27f0475979dc3a408822a82b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c422cfcca0b9f5e27f0475979dc3a408822a82b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17600c1ea77ad8709ea072ad1b258bf9398b9d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17600c1ea77ad8709ea072ad1b258bf9398b9d38", "html_url": "https://github.com/rust-lang/rust/commit/17600c1ea77ad8709ea072ad1b258bf9398b9d38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17600c1ea77ad8709ea072ad1b258bf9398b9d38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17f56c549c35bb2cb316e5abff116e65277c7bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f56c549c35bb2cb316e5abff116e65277c7bb1", "html_url": "https://github.com/rust-lang/rust/commit/17f56c549c35bb2cb316e5abff116e65277c7bb1"}, {"sha": "41a42263dffdfed9076029a3db973e1efad5f792", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a42263dffdfed9076029a3db973e1efad5f792", "html_url": "https://github.com/rust-lang/rust/commit/41a42263dffdfed9076029a3db973e1efad5f792"}], "stats": {"total": 128, "additions": 127, "deletions": 1}, "files": [{"sha": "d51aaa23c6a53dccf31e15464b6ef09a36842ef8", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=17600c1ea77ad8709ea072ad1b258bf9398b9d38", "patch": "@@ -98,6 +98,7 @@\n #![feature(generic_param_attrs)]\n #![feature(i128_type)]\n #![feature(inclusive_range)]\n+#![feature(iter_rfold)]\n #![feature(lang_items)]\n #![feature(needs_allocator)]\n #![feature(nonzero)]"}, {"sha": "6836fbb7c4de34f643c7f723caaa71ba91d28034", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=17600c1ea77ad8709ea072ad1b258bf9398b9d38", "patch": "@@ -1973,6 +1973,14 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n         self.head = wrap_index(self.head.wrapping_sub(1), self.ring.len());\n         unsafe { Some(self.ring.get_unchecked(self.head)) }\n     }\n+\n+    fn rfold<Acc, F>(self, mut accum: Acc, mut f: F) -> Acc\n+        where F: FnMut(Acc, Self::Item) -> Acc\n+    {\n+        let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n+        accum = back.iter().rfold(accum, &mut f);\n+        front.iter().rfold(accum, &mut f)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2058,6 +2066,14 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n             Some(&mut *(elem as *mut _))\n         }\n     }\n+\n+    fn rfold<Acc, F>(self, mut accum: Acc, mut f: F) -> Acc\n+        where F: FnMut(Acc, Self::Item) -> Acc\n+    {\n+        let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n+        accum = back.iter_mut().rfold(accum, &mut f);\n+        front.iter_mut().rfold(accum, &mut f)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "36bf9633b4a35497a3a3b230c07594647af8b59f", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=17600c1ea77ad8709ea072ad1b258bf9398b9d38", "patch": "@@ -1337,7 +1337,7 @@ pub trait Iterator {\n         (left, right)\n     }\n \n-    /// An iterator adaptor that applies a function, producing a single, final value.\n+    /// An iterator method that applies a function, producing a single, final value.\n     ///\n     /// `fold()` takes two arguments: an initial value, and a closure with two\n     /// arguments: an 'accumulator', and an element. The closure returns the value that"}, {"sha": "7907f2fd66126c9d87097c3377618b67e932aac0", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=17600c1ea77ad8709ea072ad1b258bf9398b9d38", "patch": "@@ -359,6 +359,12 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n \n+    fn fold<Acc, F>(self, init: Acc, f: F) -> Acc\n+        where F: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        self.iter.rfold(init, f)\n+    }\n+\n     #[inline]\n     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n         where P: FnMut(&Self::Item) -> bool\n@@ -379,6 +385,12 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n \n+    fn rfold<Acc, F>(self, init: Acc, f: F) -> Acc\n+        where F: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        self.iter.fold(init, f)\n+    }\n+\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n         where P: FnMut(&Self::Item) -> bool\n     {\n@@ -449,6 +461,12 @@ impl<'a, I, T: 'a> DoubleEndedIterator for Cloned<I>\n     fn next_back(&mut self) -> Option<T> {\n         self.it.next_back().cloned()\n     }\n+\n+    fn rfold<Acc, F>(self, init: Acc, mut f: F) -> Acc\n+        where F: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        self.it.rfold(init, move |acc, elt| f(acc, elt.clone()))\n+    }\n }\n \n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n@@ -761,6 +779,26 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n             ChainState::Back => self.b.next_back(),\n         }\n     }\n+\n+    fn rfold<Acc, F>(self, init: Acc, mut f: F) -> Acc\n+        where F: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        let mut accum = init;\n+        match self.state {\n+            ChainState::Both | ChainState::Back => {\n+                accum = self.b.rfold(accum, &mut f);\n+            }\n+            _ => { }\n+        }\n+        match self.state {\n+            ChainState::Both | ChainState::Front => {\n+                accum = self.a.rfold(accum, &mut f);\n+            }\n+            _ => { }\n+        }\n+        accum\n+    }\n+\n }\n \n // Note: *both* must be fused to handle double-ended iterators.\n@@ -1094,6 +1132,13 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for Map<I, F> where\n     fn next_back(&mut self) -> Option<B> {\n         self.iter.next_back().map(&mut self.f)\n     }\n+\n+    fn rfold<Acc, G>(self, init: Acc, mut g: G) -> Acc\n+        where G: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        let mut f = self.f;\n+        self.iter.rfold(init, move |acc, elt| g(acc, f(elt)))\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "28236d193c324df5571bc696ff3625656eec2819", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17600c1ea77ad8709ea072ad1b258bf9398b9d38/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=17600c1ea77ad8709ea072ad1b258bf9398b9d38", "patch": "@@ -415,6 +415,70 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n \n+    /// An iterator method that reduces the iterator's elements to a single,\n+    /// final value, starting from the back.\n+    ///\n+    /// This is the reverse version of [`fold()`]: it takes elements starting from\n+    /// the back of the iterator.\n+    ///\n+    /// `rfold()` takes two arguments: an initial value, and a closure with two\n+    /// arguments: an 'accumulator', and an element. The closure returns the value that\n+    /// the accumulator should have for the next iteration.\n+    ///\n+    /// The initial value is the value the accumulator will have on the first\n+    /// call.\n+    ///\n+    /// After applying this closure to every element of the iterator, `rfold()`\n+    /// returns the accumulator.\n+    ///\n+    /// This operation is sometimes called 'reduce' or 'inject'.\n+    ///\n+    /// Folding is useful whenever you have a collection of something, and want\n+    /// to produce a single value from it.\n+    ///\n+    /// [`fold()`]: trait.Iterator.html#method.fold\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_rfold)]\n+    /// let a = [1, 2, 3];\n+    ///\n+    /// // the sum of all of the elements of a\n+    /// let sum = a.iter()\n+    ///            .rfold(0, |acc, &x| acc + x);\n+    ///\n+    /// assert_eq!(sum, 6);\n+    /// ```\n+    ///\n+    /// This example builds a string, starting with an initial value\n+    /// and continuing with each element from the back until the front:\n+    ///\n+    /// ```\n+    /// #![feature(iter_rfold)]\n+    /// let numbers = [1, 2, 3, 4, 5];\n+    ///\n+    /// let zero = \"0\".to_string();\n+    ///\n+    /// let result = numbers.iter().rfold(zero, |acc, &x| {\n+    ///     format!(\"({} + {})\", x, acc)\n+    /// });\n+    ///\n+    /// assert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_rfold\", issue = \"44705\")]\n+    fn rfold<B, F>(mut self, mut accum: B, mut f: F) -> B where\n+        Self: Sized, F: FnMut(B, Self::Item) -> B,\n+    {\n+        while let Some(x) = self.next_back() {\n+            accum = f(accum, x);\n+        }\n+        accum\n+    }\n+\n     /// Searches for an element of an iterator from the right that satisfies a predicate.\n     ///\n     /// `rfind()` takes a closure that returns `true` or `false`. It applies"}]}