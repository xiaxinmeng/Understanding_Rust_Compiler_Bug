{"sha": "b336f2801c1d458990b7122bc4eba126beea37f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMzZmMjgwMWMxZDQ1ODk5MGI3MTIyYmM0ZWJhMTI2YmVlYTM3Zjk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-12T15:29:51Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:29Z"}, "message": "Fix invalid generation of HTML in highlight", "tree": {"sha": "47d38425b0468dbbbdd9f585ef38addc3b410ad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47d38425b0468dbbbdd9f585ef38addc3b410ad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b336f2801c1d458990b7122bc4eba126beea37f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b336f2801c1d458990b7122bc4eba126beea37f9", "html_url": "https://github.com/rust-lang/rust/commit/b336f2801c1d458990b7122bc4eba126beea37f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b336f2801c1d458990b7122bc4eba126beea37f9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0d909f26665c6c9967361c2f5d636d29168976", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0d909f26665c6c9967361c2f5d636d29168976", "html_url": "https://github.com/rust-lang/rust/commit/ef0d909f26665c6c9967361c2f5d636d29168976"}], "stats": {"total": 101, "additions": 60, "deletions": 41}, "files": [{"sha": "9adb95fe90e43787b3091dc2cdbbc5fcdbe4b2a5", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 42, "deletions": 41, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b336f2801c1d458990b7122bc4eba126beea37f9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b336f2801c1d458990b7122bc4eba126beea37f9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=b336f2801c1d458990b7122bc4eba126beea37f9", "patch": "@@ -313,6 +313,7 @@ impl<'a> Classifier<'a> {\n                 .unwrap_or(false)\n             {\n                 let tokens = self.get_full_ident_path();\n+                // We need this variable because `tokens` is consumed in the loop.\n                 let skip = !tokens.is_empty();\n                 for (token, start, end) in tokens {\n                     let text = &self.src[start..end];\n@@ -549,51 +550,51 @@ fn string<T: Display>(\n         None => return write!(out, \"{}\", text),\n         Some(klass) => klass,\n     };\n-    if let Some(def_span) = klass.get_span() {\n-        let mut text = text.to_string();\n-        if text.contains(\"::\") {\n-            text = text.split(\"::\").intersperse(\"::\").fold(String::new(), |mut path, t| {\n-                match t {\n-                    \"self\" | \"Self\" => write!(\n-                        &mut path,\n-                        \"<span class=\\\"{}\\\">{}</span>\",\n-                        Class::Self_(LightSpan::empty()).as_html(),\n-                        t\n-                    ),\n-                    \"crate\" | \"super\" => write!(\n-                        &mut path,\n-                        \"<span class=\\\"{}\\\">{}</span>\",\n-                        Class::KeyWord.as_html(),\n-                        t\n-                    ),\n-                    t => write!(&mut path, \"{}\", t),\n-                }\n-                .expect(\"Failed to build source HTML path\");\n-                path\n-            });\n+    let def_span = match klass.get_span() {\n+        Some(d) => d,\n+        None => {\n+            write!(out, \"<span class=\\\"{}\\\">{}</span>\", klass.as_html(), text);\n+            return;\n         }\n-        if let Some(context_info) = context_info {\n-            if let Some(href) =\n-                context_info.context.shared.span_correspondance_map.get(&def_span).and_then(\n-                    |href| {\n-                        let context = context_info.context;\n-                        match href {\n-                            LinkFromSrc::Local(span) => context\n-                                .href_from_span(*span)\n-                                .map(|s| format!(\"{}{}\", context_info.root_path, s)),\n-                            LinkFromSrc::External(def_id) => {\n-                                format::href(*def_id, context).map(|(url, _, _)| url)\n-                            }\n-                        }\n-                    },\n-                )\n-            {\n-                write!(out, \"<a class=\\\"{}\\\" href=\\\"{}\\\">{}</a>\", klass.as_html(), href, text);\n-                return;\n+    };\n+    let mut text_s = text.to_string();\n+    if text_s.contains(\"::\") {\n+        text_s = text_s.split(\"::\").intersperse(\"::\").fold(String::new(), |mut path, t| {\n+            match t {\n+                \"self\" | \"Self\" => write!(\n+                    &mut path,\n+                    \"<span class=\\\"{}\\\">{}</span>\",\n+                    Class::Self_(LightSpan::empty()).as_html(),\n+                    t\n+                ),\n+                \"crate\" | \"super\" => {\n+                    write!(&mut path, \"<span class=\\\"{}\\\">{}</span>\", Class::KeyWord.as_html(), t)\n+                }\n+                t => write!(&mut path, \"{}\", t),\n             }\n+            .expect(\"Failed to build source HTML path\");\n+            path\n+        });\n+    }\n+    if let Some(context_info) = context_info {\n+        if let Some(href) =\n+            context_info.context.shared.span_correspondance_map.get(&def_span).and_then(|href| {\n+                let context = context_info.context;\n+                match href {\n+                    LinkFromSrc::Local(span) => context\n+                        .href_from_span(*span)\n+                        .map(|s| format!(\"{}{}\", context_info.root_path, s)),\n+                    LinkFromSrc::External(def_id) => {\n+                        format::href(*def_id, context).map(|(url, _, _)| url)\n+                    }\n+                }\n+            })\n+        {\n+            write!(out, \"<a class=\\\"{}\\\" href=\\\"{}\\\">{}</a>\", klass.as_html(), href, text_s);\n+            return;\n         }\n     }\n-    write!(out, \"<span class=\\\"{}\\\">{}</span>\", klass.as_html(), text);\n+    write!(out, \"<span class=\\\"{}\\\">{}</span>\", klass.as_html(), text_s);\n }\n \n #[cfg(test)]"}, {"sha": "abc2db1790c535ff2ec97fd972dc19afce84315d", "filename": "src/librustdoc/html/highlight/fixtures/highlight.html", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b336f2801c1d458990b7122bc4eba126beea37f9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html", "raw_url": "https://github.com/rust-lang/rust/raw/b336f2801c1d458990b7122bc4eba126beea37f9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html?ref=b336f2801c1d458990b7122bc4eba126beea37f9", "patch": "@@ -0,0 +1,4 @@\n+<span class=\"kw\">use</span> <span class=\"ident\"><span class=\"kw\">crate</span>::a::foo</span>;\n+<span class=\"kw\">use</span> <span class=\"ident\"><span class=\"self\">self</span>::whatever</span>;\n+<span class=\"kw\">let</span> <span class=\"ident\">x</span> <span class=\"op\">=</span> <span class=\"ident\"><span class=\"kw\">super</span>::b::foo</span>;\n+<span class=\"kw\">let</span> <span class=\"ident\">y</span> <span class=\"op\">=</span> <span class=\"ident\"><span class=\"self\">Self</span>::whatever</span>;\n\\ No newline at end of file"}, {"sha": "68592ae96c187b273eebb1c5d76c417b0fa86954", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b336f2801c1d458990b7122bc4eba126beea37f9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b336f2801c1d458990b7122bc4eba126beea37f9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=b336f2801c1d458990b7122bc4eba126beea37f9", "patch": "@@ -40,3 +40,17 @@ fn test_dos_backline() {\n         expect_file![\"fixtures/dos_line.html\"].assert_eq(&html.into_inner());\n     });\n }\n+\n+#[test]\n+fn test_keyword_highlight() {\n+    create_default_session_globals_then(|| {\n+        let src = \"use crate::a::foo;\n+use self::whatever;\n+let x = super::b::foo;\n+let y = Self::whatever;\";\n+\n+        let mut html = Buffer::new();\n+        write_code(&mut html, src, Edition::Edition2018, None);\n+        expect_file![\"fixtures/highlight.html\"].assert_eq(&html.into_inner());\n+    });\n+}"}]}