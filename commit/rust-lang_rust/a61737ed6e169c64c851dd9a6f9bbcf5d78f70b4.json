{"sha": "a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4", "node_id": "C_kwDOAAsO6NoAKGE2MTczN2VkNmUxNjljNjRjODUxZGQ5YTZmOWJiY2Y1ZDc4ZjcwYjQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-22T09:18:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-24T09:49:36Z"}, "message": "add support for testing Miri on other targets, and do some cross-testing on CI", "tree": {"sha": "372cb4df599e8c1eba9b0bd6eb79bc3bb69ada09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/372cb4df599e8c1eba9b0bd6eb79bc3bb69ada09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4", "html_url": "https://github.com/rust-lang/rust/commit/a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f56d238cc49aff79f12c31a08d22316f43d532", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f56d238cc49aff79f12c31a08d22316f43d532", "html_url": "https://github.com/rust-lang/rust/commit/64f56d238cc49aff79f12c31a08d22316f43d532"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "7f63226a06126bf34245377657f08a31ba8f2e14", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4", "patch": "@@ -461,24 +461,30 @@ impl Step for RustDemangler {\n pub struct Miri {\n     stage: u32,\n     host: TargetSelection,\n+    target: TargetSelection,\n }\n \n impl Step for Miri {\n     type Output = ();\n-    const ONLY_HOSTS: bool = true;\n+    const ONLY_HOSTS: bool = false;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.path(\"src/tools/miri\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Miri { stage: run.builder.top_stage, host: run.target });\n+        run.builder.ensure(Miri {\n+            stage: run.builder.top_stage,\n+            host: run.build_triple(),\n+            target: run.target,\n+        });\n     }\n \n     /// Runs `cargo test` for miri.\n     fn run(self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let host = self.host;\n+        let target = self.target;\n         let compiler = builder.compiler(stage, host);\n         // We need the stdlib for the *next* stage, as it was built with this compiler that also built Miri.\n         // Except if we are at stage 2, the bootstrap loop is complete and we can stick with our current stage.\n@@ -495,7 +501,7 @@ impl Step for Miri {\n         builder.ensure(compile::Std::new(compiler_std, host));\n         let sysroot = builder.sysroot(compiler_std);\n \n-        // # Run `cargo miri setup`.\n+        // # Run `cargo miri setup` for the given target.\n         let mut cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n@@ -508,6 +514,7 @@ impl Step for Miri {\n         );\n         cargo.add_rustc_lib_path(builder, compiler);\n         cargo.arg(\"--\").arg(\"miri\").arg(\"setup\");\n+        cargo.arg(\"--target\").arg(target.rustc_target_arg());\n \n         // Tell `cargo miri setup` where to find the sources.\n         cargo.env(\"MIRI_LIB_SRC\", builder.src.join(\"library\"));\n@@ -565,6 +572,9 @@ impl Step for Miri {\n             cargo.env(\"MIRI_BLESS\", \"Gesundheit\");\n         }\n \n+        // Set the target.\n+        cargo.env(\"MIRI_TEST_TARGET\", target.rustc_target_arg());\n+        // Forward test filters.\n         cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n         let mut cargo = Command::from(cargo);"}, {"sha": "086d04a178a3a1564b2b644bbaba57908da0516d", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=a61737ed6e169c64c851dd9a6f9bbcf5d78f70b4", "patch": "@@ -25,3 +25,7 @@ python3 \"$X_PY\" test --stage 2 check-tools\n python3 \"$X_PY\" test --stage 2 src/tools/clippy\n python3 \"$X_PY\" test --stage 2 src/tools/rustfmt\n python3 \"$X_PY\" test --stage 2 src/tools/miri\n+# We natively run this script on x86_64-unknown-linux-gnu and x86_64-pc-windows-msvc.\n+# Also cover some other targets (on both of these hosts) via cross-testing.\n+python3 \"$X_PY\" test --stage 2 src/tools/miri --target i686-pc-windows-msvc\n+python3 \"$X_PY\" test --stage 2 src/tools/miri --target aarch64-apple-darwin"}]}