{"sha": "318cf22bd1955ba870a0a3189cb5dfdbce31b53e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOGNmMjJiZDE5NTViYTg3MGEwYTMxODljYjVkZmRiY2UzMWI1M2U=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-13T20:13:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-13T20:35:11Z"}, "message": "Move \"no asm\" check into AST validation", "tree": {"sha": "78d8ecc32c4f981040c66a31830c8869f6a02243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d8ecc32c4f981040c66a31830c8869f6a02243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/318cf22bd1955ba870a0a3189cb5dfdbce31b53e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/318cf22bd1955ba870a0a3189cb5dfdbce31b53e", "html_url": "https://github.com/rust-lang/rust/commit/318cf22bd1955ba870a0a3189cb5dfdbce31b53e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/318cf22bd1955ba870a0a3189cb5dfdbce31b53e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6072a7b3835f1875e81c9fd27799f9b20a0770c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6072a7b3835f1875e81c9fd27799f9b20a0770c", "html_url": "https://github.com/rust-lang/rust/commit/e6072a7b3835f1875e81c9fd27799f9b20a0770c"}], "stats": {"total": 57, "additions": 4, "deletions": 53}, "files": [{"sha": "75a7f99084133718f47e59f210d47a6d7542bb74", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/318cf22bd1955ba870a0a3189cb5dfdbce31b53e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/318cf22bd1955ba870a0a3189cb5dfdbce31b53e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=318cf22bd1955ba870a0a3189cb5dfdbce31b53e", "patch": "@@ -37,7 +37,7 @@ use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n-use rustc_passes::{self, ast_validation, no_asm, loops, consts, static_recursion, hir_stats};\n+use rustc_passes::{self, ast_validation, loops, consts, static_recursion, hir_stats};\n use rustc_const_eval::{self, check_match};\n use super::Compilation;\n use ::DefaultTransCrate;\n@@ -856,10 +856,6 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         println!(\"{}\", json::as_json(&krate));\n     }\n \n-    time(time_passes,\n-         \"checking for inline asm in case the target doesn't support it\",\n-         || no_asm::check_crate(sess, &krate));\n-\n     time(time_passes,\n          \"AST validation\",\n          || ast_validation::check_crate(sess, &krate));"}, {"sha": "dbad82ed97725a944bb29db3b65ba903d4aed9d1", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/318cf22bd1955ba870a0a3189cb5dfdbce31b53e/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/318cf22bd1955ba870a0a3189cb5dfdbce31b53e/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=318cf22bd1955ba870a0a3189cb5dfdbce31b53e", "patch": "@@ -149,6 +149,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ExprKind::Continue(Some(ident)) => {\n                 self.check_label(ident.node, ident.span);\n             }\n+            ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n+                span_err!(self.session, expr.span, E0472, \"asm! is unsupported on this target\");\n+            }\n             _ => {}\n         }\n "}, {"sha": "73c71ec0b2f005a79d02a126c1316e145115de68", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/318cf22bd1955ba870a0a3189cb5dfdbce31b53e/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/318cf22bd1955ba870a0a3189cb5dfdbce31b53e/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=318cf22bd1955ba870a0a3189cb5dfdbce31b53e", "patch": "@@ -42,7 +42,6 @@ pub mod consts;\n pub mod hir_stats;\n pub mod loops;\n mod mir_stats;\n-pub mod no_asm;\n pub mod static_recursion;\n \n #[cfg(not(stage0))] // remove after the next snapshot"}, {"sha": "4dbf57a99bcbe1395e060ecd59eb48bd863b8078", "filename": "src/librustc_passes/no_asm.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Flibrustc_passes%2Fno_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6072a7b3835f1875e81c9fd27799f9b20a0770c/src%2Flibrustc_passes%2Fno_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fno_asm.rs?ref=e6072a7b3835f1875e81c9fd27799f9b20a0770c", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/// Run over the whole crate and check for ExprInlineAsm.\n-/// Inline asm isn't allowed on virtual ISA based targets, so we reject it\n-/// here.\n-\n-use rustc::session::Session;\n-\n-use syntax::ast;\n-use syntax::visit::Visitor;\n-use syntax::visit;\n-\n-pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n-    if sess.target.target.options.allow_asm {\n-        return;\n-    }\n-\n-    visit::walk_crate(&mut CheckNoAsm { sess: sess }, krate);\n-}\n-\n-#[derive(Copy, Clone)]\n-struct CheckNoAsm<'a> {\n-    sess: &'a Session,\n-}\n-\n-impl<'a> Visitor<'a> for CheckNoAsm<'a> {\n-    fn visit_expr(&mut self, e: &'a ast::Expr) {\n-        match e.node {\n-            ast::ExprKind::InlineAsm(_) => {\n-                span_err!(self.sess,\n-                          e.span,\n-                          E0472,\n-                          \"asm! is unsupported on this target\")\n-            }\n-            _ => {}\n-        }\n-        visit::walk_expr(self, e)\n-    }\n-}"}]}