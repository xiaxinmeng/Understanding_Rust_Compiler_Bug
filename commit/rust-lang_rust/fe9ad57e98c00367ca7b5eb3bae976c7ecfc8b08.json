{"sha": "fe9ad57e98c00367ca7b5eb3bae976c7ecfc8b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOWFkNTdlOThjMDAzNjdjYTdiNWViM2JhZTk3NmM3ZWNmYzhiMDg=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-07T02:28:29Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-07T02:28:29Z"}, "message": "copy over *.fixed file", "tree": {"sha": "8851bebd2e66c050a15631522363da8e328d2d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8851bebd2e66c050a15631522363da8e328d2d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe9ad57e98c00367ca7b5eb3bae976c7ecfc8b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9ad57e98c00367ca7b5eb3bae976c7ecfc8b08", "html_url": "https://github.com/rust-lang/rust/commit/fe9ad57e98c00367ca7b5eb3bae976c7ecfc8b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe9ad57e98c00367ca7b5eb3bae976c7ecfc8b08/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c7e39d03e90e8f3a9cbbe8e706207e74868fcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c7e39d03e90e8f3a9cbbe8e706207e74868fcf", "html_url": "https://github.com/rust-lang/rust/commit/49c7e39d03e90e8f3a9cbbe8e706207e74868fcf"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "ab181687e1eb3fc7960cc7be9dc11ce51675b0d7", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/fe9ad57e98c00367ca7b5eb3bae976c7ecfc8b08/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fe9ad57e98c00367ca7b5eb3bae976c7ecfc8b08/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=fe9ad57e98c00367ca7b5eb3bae976c7ecfc8b08", "patch": "@@ -0,0 +1,77 @@\n+// run-rustfix\n+#![warn(clippy::transmutes_expressible_as_ptr_casts)]\n+// These two warnings currrently cover the cases transmutes_expressible_as_ptr_casts\n+// would otherwise be responsible for\n+#![warn(clippy::useless_transmute)]\n+#![warn(clippy::transmute_ptr_to_ptr)]\n+\n+use std::mem::transmute;\n+\n+// rustc_typeck::check::cast contains documentation about when a cast `e as U` is \n+// valid, which we quote from below.\n+\n+fn main() {\n+    // We should see an error message for each transmute, and no error messages for\n+    // the casts, since the casts are the recommended fixes.\n+\n+    // e is an integer and U is *U_0, while U_0: Sized; addr-ptr-cast\n+    let ptr_i32_transmute = unsafe {\n+        -1 as *const i32\n+    };\n+    let ptr_i32 = -1isize as *const i32;\n+\n+    // e has type *T, U is *U_0, and either U_0: Sized ...\n+    let ptr_i8_transmute = unsafe {\n+        ptr_i32 as *const i8\n+    };\n+    let ptr_i8 = ptr_i32 as *const i8;\n+\n+    let slice_ptr = &[0,1,2,3] as *const [i32];\n+\n+    // ... or pointer_kind(T) = pointer_kind(U_0); ptr-ptr-cast\n+    let ptr_to_unsized_transmute = unsafe {\n+        slice_ptr as *const [u16]\n+    };\n+    let ptr_to_unsized = slice_ptr as *const [u16];\n+    // TODO: We could try testing vtable casts here too, but maybe\n+    // we should wait until std::raw::TraitObject is stabilized?\n+\n+    // e has type *T and U is a numeric type, while T: Sized; ptr-addr-cast\n+    let usize_from_int_ptr_transmute = unsafe {\n+        ptr_i32 as usize\n+    };\n+    let usize_from_int_ptr = ptr_i32 as usize;\n+\n+    let array_ref: &[i32; 4] = &[1,2,3,4];\n+\n+    // e has type &[T; n] and U is *const T; array-ptr-cast\n+    let array_ptr_transmute = unsafe {\n+        array_ref as *const [i32; 4]\n+    };\n+    let array_ptr = array_ref as *const [i32; 4];\n+\n+    fn foo(_: usize) -> u8 { 42 }\n+\n+    // e is a function pointer type and U has type *T, while T: Sized; fptr-ptr-cast\n+    let usize_ptr_transmute = unsafe {\n+        foo as *const usize\n+    };\n+    let usize_ptr_transmute = foo as *const usize;\n+\n+    // e is a function pointer type and U is an integer; fptr-addr-cast\n+    let usize_from_fn_ptr_transmute = unsafe {\n+        foo as usize\n+    };\n+    let usize_from_fn_ptr = foo as *const usize;\n+}\n+\n+// If a ref-to-ptr cast of this form where the pointer type points to a type other\n+// than the referenced type, calling `CastCheck::do_check` has been observed to\n+// cause an ICE error message. `do_check` is currently called inside the\n+// `transmutes_expressible_as_ptr_casts` check, but other, more specific lints\n+// currently prevent it from being called in these cases. This test is meant to\n+// fail if the ordering of the checks ever changes enough to cause these cases to\n+// fall through into `do_check`.\n+fn trigger_do_check_to_emit_error(in_param: &[i32; 1]) -> *const u8 {\n+    unsafe { in_param as *const [i32; 1] as *const u8 }\n+}"}]}