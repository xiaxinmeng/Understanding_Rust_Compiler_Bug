{"sha": "d0790c490a2233d04375072123e70ed158eb3848", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNzkwYzQ5MGEyMjMzZDA0Mzc1MDcyMTIzZTcwZWQxNThlYjM4NDg=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-17T17:13:08Z"}, "committer": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-17T17:26:05Z"}, "message": "Whitespace fix again.", "tree": {"sha": "a02ac12a5038ff424213e53e53468da50b72094e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a02ac12a5038ff424213e53e53468da50b72094e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0790c490a2233d04375072123e70ed158eb3848", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQzEHnM5f9ubG8rMBnAlyIdbgPfaAUCW5/jrQAKCRDAlyIdbgPf\naFYcAP0aIBYiGnYOLRR2tS5/s6rQqfMHWtf1zqnKWwh5zcLnrwEApg5d2RDbnFS7\ny+t87r8by0bHsdVdaE/7CiYwjsJUphc=\n=uilK\n-----END PGP SIGNATURE-----", "payload": "tree a02ac12a5038ff424213e53e53468da50b72094e\nparent 15982fe369e87d43332556f87f66f7c0e5841830\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1537204388 +0300\ncommitter Vitaly _Vi Shukela <vi0oss@gmail.com> 1537205165 +0300\n\nWhitespace fix again.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0790c490a2233d04375072123e70ed158eb3848", "html_url": "https://github.com/rust-lang/rust/commit/d0790c490a2233d04375072123e70ed158eb3848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0790c490a2233d04375072123e70ed158eb3848/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15982fe369e87d43332556f87f66f7c0e5841830", "url": "https://api.github.com/repos/rust-lang/rust/commits/15982fe369e87d43332556f87f66f7c0e5841830", "html_url": "https://github.com/rust-lang/rust/commit/15982fe369e87d43332556f87f66f7c0e5841830"}], "stats": {"total": 209, "additions": 109, "deletions": 100}, "files": [{"sha": "dc0c2fdaf3ea4333e390433d9ac59d5e3b1f441b", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -118,8 +118,8 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             new_ty.to_string(),\n             Applicability::Unspecified,\n         )\n-            .span_label(span, format!(\"lifetime `{}` required\", named))\n-            .emit();\n+        .span_label(span, format!(\"lifetime `{}` required\", named))\n+        .emit();\n         return Some(ErrorReported);\n     }\n "}, {"sha": "baeec93eb06200861d3ebf11d37a4917ebf0815d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -433,11 +433,11 @@ impl Session {\n                 DiagnosticBuilderMethod::SpanSuggestion(suggestion) => {\n                     let span = span_maybe.expect(\"span_suggestion_* needs a span\");\n                     diag_builder.span_suggestion_with_applicability(\n-                                                                    span,\n-                                                                    message,\n-                                                                    suggestion,\n-                                                                    Applicability::Unspecified,\n-                                                                    );\n+                        span,\n+                        message,\n+                        suggestion,\n+                        Applicability::Unspecified,\n+                    );\n                 }\n             }\n         }"}, {"sha": "8902c86c77f782a13bec90954786d4b0aff1114e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -868,19 +868,19 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                             db.note(fn_closure_msg);\n                                         } else {\n                                             db.span_suggestion_with_applicability(\n-                                                                      sp,\n-                                                                      msg,\n-                                                                      suggestion,\n-                                                                      Applicability::Unspecified,\n-                                                                      );\n+                                                sp,\n+                                                msg,\n+                                                suggestion,\n+                                                Applicability::Unspecified,\n+                                            );\n                                         }\n                                     } else {\n                                         db.span_suggestion_with_applicability(\n-                                                                      sp,\n-                                                                      msg,\n-                                                                      suggestion,\n-                                                                      Applicability::Unspecified,\n-                                                                      );\n+                                            sp,\n+                                            msg,\n+                                            suggestion,\n+                                            Applicability::Unspecified,\n+                                        );\n                                     }\n                                 }\n                                 _ => {\n@@ -1344,13 +1344,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                   capture_span,\n                                                   Origin::Ast)\n             .span_suggestion_with_applicability(\n-                                         err.span,\n-                                         &format!(\"to force the closure to take ownership of {} \\\n-                                                   (and any other referenced variables), \\\n-                                                   use the `move` keyword\",\n-                                                   cmt_path_or_string),\n-                                         suggestion,\n-                                         Applicability::MachineApplicable,\n+                 err.span,\n+                 &format!(\"to force the closure to take ownership of {} \\\n+                           (and any other referenced variables), \\\n+                           use the `move` keyword\",\n+                           cmt_path_or_string),\n+                 suggestion,\n+                 Applicability::MachineApplicable,\n             )\n             .emit();\n         self.signal_error();"}, {"sha": "2799f2cc81f5ab0648d078f0d19d6fdc387356ce", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -307,9 +307,9 @@ impl Diagnostic {\n         suggestion: Vec<(Span, String)>,\n     ) -> &mut Self {\n         self.multipart_suggestion_with_applicability(\n-                                                 msg,\n-                                                 suggestion,\n-                                                 Applicability::Unspecified,\n+            msg,\n+            suggestion,\n+            Applicability::Unspecified,\n         )\n     }\n "}, {"sha": "a87e86aee0cf0d395c8b87503d1903096c7f0d84", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -142,12 +142,14 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                             \"can only break with a value inside \\\n                                             `loop` or breakable block\")\n                                 .span_suggestion_with_applicability(\n-                                                 e.span,\n-                                                 &format!(\"instead, use `break` on its own \\\n-                                                           without a value inside this `{}` loop\",\n-                                                          kind.name()),\n-                                                 \"break\".to_string(),\n-                                                 Applicability::MaybeIncorrect,\n+                                    e.span,\n+                                    &format!(\n+                                        \"instead, use `break` on its own \\\n+                                        without a value inside this `{}` loop\",\n+                                        kind.name()\n+                                    ),\n+                                    \"break\".to_string(),\n+                                    Applicability::MaybeIncorrect,\n                                 )\n                                 .emit();\n                         }"}, {"sha": "51062eae97a42fcfc5effc3ff439603662893a0a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -3300,11 +3300,11 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                        \"expecting a type here because of type ascription\");\n                         if line_sp != line_base_sp {\n                             err.span_suggestion_short_with_applicability(\n-                                                      sp,\n-                                                      \"did you mean to use `;` here instead?\",\n-                                                      \";\".to_string(),\n-                                                      Applicability::MaybeIncorrect,\n-                                                      );\n+                                sp,\n+                                \"did you mean to use `;` here instead?\",\n+                                \";\".to_string(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                         }\n                         break;\n                     } else if snippet.trim().len() != 0  {\n@@ -4829,8 +4829,12 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n             *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n         }\n \n-        err.span_suggestions_with_applicability(span, &msg, path_strings,\n-                                                Applicability::Unspecified);\n+        err.span_suggestions_with_applicability(\n+            span,\n+            &msg,\n+            path_strings,\n+            Applicability::Unspecified,\n+        );\n     } else {\n         let mut msg = msg;\n         msg.push(':');"}, {"sha": "85641854e6e2d1d7275f9f12aa110c9b9791692c", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -299,11 +299,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                 err.note(\"The type information given here is insufficient to check whether \\\n                           the pointer cast is valid\");\n                 if unknown_cast_to {\n-                    err.span_suggestion_short_with_applicability(self.cast_span,\n-                                              \"consider giving more type information\",\n-                                              String::new(),\n-                                              Applicability::Unspecified,\n-                                              );\n+                    err.span_suggestion_short_with_applicability(\n+                        self.cast_span,\n+                        \"consider giving more type information\",\n+                        String::new(),\n+                        Applicability::Unspecified,\n+                    );\n                 }\n                 err.emit();\n             }\n@@ -329,11 +330,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                 if self.cast_ty.is_trait() {\n                     match fcx.tcx.sess.source_map().span_to_snippet(self.cast_span) {\n                         Ok(s) => {\n-                            err.span_suggestion_with_applicability(self.cast_span,\n-                                                \"try casting to a reference instead\",\n-                                                format!(\"&{}{}\", mtstr, s),\n-                                                Applicability::MachineApplicable,\n-                                                );\n+                            err.span_suggestion_with_applicability(\n+                                self.cast_span,\n+                                \"try casting to a reference instead\",\n+                                format!(\"&{}{}\", mtstr, s),\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n                         Err(_) => {\n                             span_help!(err, self.cast_span, \"did you mean `&{}{}`?\", mtstr, tstr)\n@@ -350,11 +352,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             ty::Adt(def, ..) if def.is_box() => {\n                 match fcx.tcx.sess.source_map().span_to_snippet(self.cast_span) {\n                     Ok(s) => {\n-                        err.span_suggestion_with_applicability(self.cast_span,\n-                                            \"try casting to a `Box` instead\",\n-                                            format!(\"Box<{}>\", s),\n-                                            Applicability::MachineApplicable,\n-                                            );\n+                        err.span_suggestion_with_applicability(\n+                            self.cast_span,\n+                            \"try casting to a `Box` instead\",\n+                            format!(\"Box<{}>\", s),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                     Err(_) => span_help!(err, self.cast_span, \"did you mean `Box<{}>`?\", tstr),\n                 }"}, {"sha": "2f597161c32995e7228bef7a0bb4916f16d09ec1", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -133,10 +133,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let suggestions = compatible_variants.iter()\n                     .map(|v| format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n                 err.span_suggestions_with_applicability(\n-                                                 expr.span,\n-                                                 \"try using a variant of the expected type\",\n-                                                 suggestions,\n-                                                 Applicability::MaybeIncorrect,\n+                     expr.span,\n+                     \"try using a variant of the expected type\",\n+                     suggestions,\n+                     Applicability::MaybeIncorrect,\n                 );\n             }\n         }"}, {"sha": "a5a4eaa8cb3f7adc0222294666fcc770894c71c1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -3349,11 +3349,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let msg = format!(\"`{}` is a native pointer; try dereferencing it\", base);\n                         let suggestion = format!(\"(*{}).{}\", base, field);\n                         err.span_suggestion_with_applicability(\n-                                                               field.span,\n-                                                               &msg,\n-                                                               suggestion,\n-                                                               Applicability::MaybeIncorrect,\n-                                                               );\n+                            field.span,\n+                            &msg,\n+                            suggestion,\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n                     _ => {}\n                 }\n@@ -4722,11 +4722,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     ) {\n         if let Some((sp, msg, suggestion)) = self.check_ref(expr, found, expected) {\n             err.span_suggestion_with_applicability(\n-                                                   sp,\n-                                                   msg,\n-                                                   suggestion,\n-                                                   Applicability::MachineApplicable,\n-                                                   );\n+                sp,\n+                msg,\n+                suggestion,\n+                Applicability::MachineApplicable,\n+            );\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n@@ -4757,11 +4757,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }) .collect::<Vec<_>>();\n                 if !suggestions.is_empty() {\n                     err.span_suggestions_with_applicability(\n-                                                            expr.span,\n-                                                            \"try using a conversion method\",\n-                                                            suggestions,\n-                                                            Applicability::MaybeIncorrect,\n-                                                            );\n+                        expr.span,\n+                        \"try using a conversion method\",\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n             }\n         }"}, {"sha": "5969f288d732070ade1260148782dce99c3897fb", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -445,10 +445,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                    \"`+` can't be used to concatenate two `&str` strings\");\n                     match source_map.span_to_snippet(lhs_expr.span) {\n                         Ok(lstring) => err.span_suggestion_with_applicability(\n-                                                           lhs_expr.span,\n-                                                           msg,\n-                                                           format!(\"{}.to_owned()\", lstring),\n-                                                           Applicability::MachineApplicable,\n+                            lhs_expr.span,\n+                            msg,\n+                            format!(\"{}.to_owned()\", lstring),\n+                            Applicability::MachineApplicable,\n                         ),\n                         _ => err.help(msg),\n                     };\n@@ -466,12 +466,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 ) {\n                     (Ok(l), Ok(r), false) => {\n                         err.multipart_suggestion_with_applicability(\n-                                        msg,\n-                                        vec![\n-                                            (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n-                                            (rhs_expr.span, format!(\"&{}\", r)),\n-                                        ],\n-                                        Applicability::MachineApplicable,\n+                            msg,\n+                            vec![\n+                                (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n+                                (rhs_expr.span, format!(\"&{}\", r)),\n+                            ],\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n                     _ => {"}, {"sha": "5d978b6b9e6623789db80d537d430b5ecda880fd", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -125,10 +125,10 @@ impl<'a> StripUnconfigured<'a> {\n                 let mut err = self.sess.span_diagnostic.struct_span_err(span, msg);\n                 if !suggestion.is_empty() {\n                     err.span_suggestion_with_applicability(\n-                                                           span,\n-                                                           \"expected syntax is\",\n-                                                           suggestion.into(),\n-                                                           Applicability::MaybeIncorrect,\n+                        span,\n+                        \"expected syntax is\",\n+                        suggestion.into(),\n+                        Applicability::MaybeIncorrect,\n                     );\n                 }\n                 err.emit();"}, {"sha": "214bc9cffc4836ece1530718ef2c5730aa9a659e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -189,10 +189,10 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                         err.note(\"you might be missing a comma\");\n                     } else {\n                         err.span_suggestion_short_with_applicability(\n-                                                comma_span,\n-                                                \"missing comma here\",\n-                                                \", \".to_string(),\n-                                                Applicability::MachineApplicable,\n+                            comma_span,\n+                            \"missing comma here\",\n+                            \", \".to_string(),\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n                 }"}, {"sha": "6ec1ad969ee708de179210966587bbf46c6bc006", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -3883,11 +3883,11 @@ impl<'a> Parser<'a> {\n                     // If the struct looks otherwise well formed, recover and continue.\n                     if let Some(sp) = comma_sp {\n                         err.span_suggestion_short_with_applicability(\n-                                                                 sp,\n-                                                                 \"remove this comma\",\n-                                                                 String::new(),\n-                                                                 Applicability::MachineApplicable,\n-                                                                 );\n+                            sp,\n+                            \"remove this comma\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                     err.emit();\n                     break;"}, {"sha": "31e608de1f840d282eb777af314db5b3acfe097f", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0790c490a2233d04375072123e70ed158eb3848/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=d0790c490a2233d04375072123e70ed158eb3848", "patch": "@@ -997,9 +997,9 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                     }\n                     if suggestions.len() > 0 {\n                         diag.multipart_suggestion_with_applicability(\n-                                                    \"format specifiers use curly braces\",\n-                                                    suggestions,\n-                                                    Applicability::MachineApplicable,\n+                            \"format specifiers use curly braces\",\n+                            suggestions,\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n                 }};"}]}