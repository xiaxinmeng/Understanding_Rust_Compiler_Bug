{"sha": "28882c44ef0cfc031a931c0ca0509707a9b4729e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ODgyYzQ0ZWYwY2ZjMDMxYTkzMWMwY2EwNTA5NzA3YTliNDcyOWU=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-08-15T02:45:57Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-08-15T02:45:57Z"}, "message": "librustc: Fix trans for functional record update when discarding the result.", "tree": {"sha": "20b7143ba49015f663c82bdb520871e549ea57dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b7143ba49015f663c82bdb520871e549ea57dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28882c44ef0cfc031a931c0ca0509707a9b4729e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28882c44ef0cfc031a931c0ca0509707a9b4729e", "html_url": "https://github.com/rust-lang/rust/commit/28882c44ef0cfc031a931c0ca0509707a9b4729e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28882c44ef0cfc031a931c0ca0509707a9b4729e/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e30ba8fc94a449e9dec8cc464875111219187ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e30ba8fc94a449e9dec8cc464875111219187ff", "html_url": "https://github.com/rust-lang/rust/commit/7e30ba8fc94a449e9dec8cc464875111219187ff"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "896d37669e6f101a84ba9351a43063d47f6d3570", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28882c44ef0cfc031a931c0ca0509707a9b4729e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28882c44ef0cfc031a931c0ca0509707a9b4729e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=28882c44ef0cfc031a931c0ca0509707a9b4729e", "patch": "@@ -1947,12 +1947,10 @@ pub fn trans_named_tuple_constructor<'a>(mut bcx: &'a Block<'a>,\n     };\n \n     if !type_is_zero_size(ccx, result_ty) {\n-        let repr = adt::represent_type(ccx, result_ty);\n-\n         match args {\n             callee::ArgExprs(exprs) => {\n                 let fields = exprs.iter().map(|x| *x).enumerate().collect::<Vec<_>>();\n-                bcx = expr::trans_adt(bcx, &*repr, disr, fields.as_slice(),\n+                bcx = expr::trans_adt(bcx, result_ty, disr, fields.as_slice(),\n                                       None, expr::SaveIn(llresult));\n             }\n             _ => ccx.sess().bug(\"expected expr as arguments for variant/struct tuple constructor\")"}, {"sha": "748274b1201e58cc82a430bd33b43f58f5ce1ae1", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/28882c44ef0cfc031a931c0ca0509707a9b4729e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28882c44ef0cfc031a931c0ca0509707a9b4729e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=28882c44ef0cfc031a931c0ca0509707a9b4729e", "patch": "@@ -754,10 +754,9 @@ fn trans_rvalue_dps_unadjusted<'a>(bcx: &'a Block<'a>,\n                          dest)\n         }\n         ast::ExprTup(ref args) => {\n-            let repr = adt::represent_type(bcx.ccx(), expr_ty(bcx, expr));\n             let numbered_fields: Vec<(uint, Gc<ast::Expr>)> =\n                 args.iter().enumerate().map(|(i, arg)| (i, *arg)).collect();\n-            trans_adt(bcx, &*repr, 0, numbered_fields.as_slice(), None, dest)\n+            trans_adt(bcx, expr_ty(bcx, expr), 0, numbered_fields.as_slice(), None, dest)\n         }\n         ast::ExprLit(lit) => {\n             match lit.node {\n@@ -1089,8 +1088,7 @@ fn trans_struct<'a>(bcx: &'a Block<'a>,\n             }\n         };\n \n-        let repr = adt::represent_type(bcx.ccx(), ty);\n-        trans_adt(bcx, &*repr, discr, numbered_fields.as_slice(), optbase, dest)\n+        trans_adt(bcx, ty, discr, numbered_fields.as_slice(), optbase, dest)\n     })\n }\n \n@@ -1119,25 +1117,20 @@ pub struct StructBaseInfo {\n  * which remaining fields are copied; see comments on `StructBaseInfo`.\n  */\n pub fn trans_adt<'a>(mut bcx: &'a Block<'a>,\n-                     repr: &adt::Repr,\n+                     ty: ty::t,\n                      discr: ty::Disr,\n                      fields: &[(uint, Gc<ast::Expr>)],\n                      optbase: Option<StructBaseInfo>,\n                      dest: Dest) -> &'a Block<'a> {\n     let _icx = push_ctxt(\"trans_adt\");\n     let fcx = bcx.fcx;\n+    let repr = adt::represent_type(bcx.ccx(), ty);\n+\n+    // If we don't care about the result, just make a\n+    // temporary stack slot\n     let addr = match dest {\n-        Ignore => {\n-            for &(_i, ref e) in fields.iter() {\n-                bcx = trans_into(bcx, &**e, Ignore);\n-            }\n-            for sbi in optbase.iter() {\n-                // FIXME #7261: this moves entire base, not just certain fields\n-                bcx = trans_into(bcx, &*sbi.expr, Ignore);\n-            }\n-            return bcx;\n-        }\n-        SaveIn(pos) => pos\n+        SaveIn(pos) => pos,\n+        Ignore => alloc_ty(bcx, ty, \"temp\"),\n     };\n \n     // This scope holds intermediates that must be cleaned should\n@@ -1153,8 +1146,8 @@ pub fn trans_adt<'a>(mut bcx: &'a Block<'a>,\n                 let base_datum = unpack_datum!(bcx, trans_to_lvalue(bcx, &*base.expr, \"base\"));\n                 for &(i, t) in base.fields.iter() {\n                     let datum = base_datum.get_element(\n-                            t, |srcval| adt::trans_field_ptr(bcx, repr, srcval, discr, i));\n-                    let dest = adt::trans_field_ptr(bcx, repr, addr, discr, i);\n+                            t, |srcval| adt::trans_field_ptr(bcx, &*repr, srcval, discr, i));\n+                    let dest = adt::trans_field_ptr(bcx, &*repr, addr, discr, i);\n                     bcx = datum.store_to(bcx, dest);\n                 }\n             },\n@@ -1167,19 +1160,27 @@ pub fn trans_adt<'a>(mut bcx: &'a Block<'a>,\n \n     // Now, we just overwrite the fields we've explicity specified\n     for &(i, ref e) in fields.iter() {\n-        let dest = adt::trans_field_ptr(bcx, repr, addr, discr, i);\n+        let dest = adt::trans_field_ptr(bcx, &*repr, addr, discr, i);\n         let e_ty = expr_ty_adjusted(bcx, &**e);\n         bcx = trans_into(bcx, &**e, SaveIn(dest));\n         let scope = cleanup::CustomScope(custom_cleanup_scope);\n         fcx.schedule_lifetime_end(scope, dest);\n         fcx.schedule_drop_mem(scope, dest, e_ty);\n     }\n \n-    adt::trans_set_discr(bcx, repr, addr, discr);\n+    adt::trans_set_discr(bcx, &*repr, addr, discr);\n \n     fcx.pop_custom_cleanup_scope(custom_cleanup_scope);\n \n-    return bcx;\n+    // If we don't care about the result drop the temporary we made\n+    match dest {\n+        SaveIn(_) => bcx,\n+        Ignore => {\n+            bcx = glue::drop_ty(bcx, addr, ty);\n+            base::call_lifetime_end(bcx, addr);\n+            bcx\n+        }\n+    }\n }\n \n "}]}