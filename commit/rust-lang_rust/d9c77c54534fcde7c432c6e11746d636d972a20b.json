{"sha": "d9c77c54534fcde7c432c6e11746d636d972a20b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Yzc3YzU0NTM0ZmNkZTdjNDMyYzZlMTE3NDZkNjM2ZDk3MmEyMGI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-08T09:51:40Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-08T09:51:40Z"}, "message": "Handle visibility for path completion (not in all cases yet)", "tree": {"sha": "cdf44c613f55bdd99ab08490b32c185e9915c7bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdf44c613f55bdd99ab08490b32c185e9915c7bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9c77c54534fcde7c432c6e11746d636d972a20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c77c54534fcde7c432c6e11746d636d972a20b", "html_url": "https://github.com/rust-lang/rust/commit/d9c77c54534fcde7c432c6e11746d636d972a20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9c77c54534fcde7c432c6e11746d636d972a20b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734e68da4ceb1b15b3430302f233d4700d694728", "url": "https://api.github.com/repos/rust-lang/rust/commits/734e68da4ceb1b15b3430302f233d4700d694728", "html_url": "https://github.com/rust-lang/rust/commit/734e68da4ceb1b15b3430302f233d4700d694728"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "4d1e8f921eb0841a00b1acfcda50f0d6b4ef7ac0", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9c77c54534fcde7c432c6e11746d636d972a20b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c77c54534fcde7c432c6e11746d636d972a20b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d9c77c54534fcde7c432c6e11746d636d972a20b", "patch": "@@ -204,10 +204,20 @@ impl Module {\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n-    pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef)> {\n+    pub fn scope(self, db: &impl HirDatabase, visible_from: Option<Module>) -> Vec<(Name, ScopeDef)> {\n         db.crate_def_map(self.id.krate)[self.id.local_id]\n             .scope\n             .entries()\n+            .filter_map(|(name, def)| if let Some(m) = visible_from {\n+                let filtered = def.filter_visibility(|vis| vis.is_visible_from(db, m.id));\n+                if filtered.is_none() && !def.is_none() {\n+                    None\n+                } else {\n+                    Some((name, filtered))\n+                }\n+            } else {\n+                Some((name, def))\n+            })\n             .map(|(name, def)| (name.clone(), def.into()))\n             .collect()\n     }"}, {"sha": "f99b1c2c45cc0e7974a37e8a9c8b5fdf3c28c36e", "filename": "crates/ra_ide/src/completion/complete_path.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d9c77c54534fcde7c432c6e11746d636d972a20b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c77c54534fcde7c432c6e11746d636d972a20b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=d9c77c54534fcde7c432c6e11746d636d972a20b", "patch": "@@ -1,6 +1,6 @@\n //! Completion of paths, including when writing a single name.\n \n-use hir::{Adt, PathResolution, ScopeDef};\n+use hir::{Adt, PathResolution, ScopeDef, HasVisibility};\n use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n@@ -15,9 +15,10 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(PathResolution::Def(def)) => def,\n         _ => return,\n     };\n+    let context_module = ctx.scope().module();\n     match def {\n         hir::ModuleDef::Module(module) => {\n-            let module_scope = module.scope(ctx.db);\n+            let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n                 if ctx.use_item_syntax.is_some() {\n                     if let ScopeDef::Unknown = def {\n@@ -53,7 +54,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n                     match item {\n                         hir::AssocItem::Function(func) => {\n-                            if !func.has_self_param(ctx.db) {\n+                            if !func.has_self_param(ctx.db) && context_module.map_or(true, |m| func.is_visible_from(ctx.db, m)) {\n                                 acc.add_function(ctx, func);\n                             }\n                         }\n@@ -169,6 +170,41 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn path_visibility() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                use self::my::<|>;\n+\n+                mod my {\n+                    struct Bar;\n+                    pub struct Foo;\n+                    pub use Bar as PublicBar;\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [31; 31),\n+                delete: [31; 31),\n+                insert: \"Foo\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"PublicBar\",\n+                source_range: [31; 31),\n+                delete: [31; 31),\n+                insert: \"PublicBar\",\n+                kind: Struct,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn completes_use_item_starting_with_self() {\n         assert_debug_snapshot!(\n@@ -177,7 +213,7 @@ mod tests {\n                 use self::m::<|>;\n \n                 mod m {\n-                    struct Bar;\n+                    pub struct Bar;\n                 }\n                 \"\n             ),"}]}