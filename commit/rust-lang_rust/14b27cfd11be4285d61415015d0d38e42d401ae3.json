{"sha": "14b27cfd11be4285d61415015d0d38e42d401ae3", "node_id": "C_kwDOAAsO6NoAKDE0YjI3Y2ZkMTFiZTQyODVkNjE0MTUwMTVkMGQzOGU0MmQ0MDFhZTM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-20T17:12:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-20T17:12:56Z"}, "message": "Rollup merge of #100250 - cjgillot:recover-token-stream, r=Aaron1011\n\nManually cleanup token stream when macro expansion aborts.\n\nIn case of syntax error in macro expansion, the expansion code can decide to stop processing anything. In that case, the token stream is malformed. This makes downstream users, like derive macros, ICE.\n\nIn this case, this PR manually cleans up the token stream by closing all currently open delimiters.\n\nFixes https://github.com/rust-lang/rust/issues/96818.\nFixes https://github.com/rust-lang/rust/issues/80447.\nFixes https://github.com/rust-lang/rust/issues/81920.\nFixes https://github.com/rust-lang/rust/issues/91023.", "tree": {"sha": "2855557d30c69ddce907dc3e88da132831bdd420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2855557d30c69ddce907dc3e88da132831bdd420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b27cfd11be4285d61415015d0d38e42d401ae3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjKfSYCRBK7hj4Ov3rIwAAsgUIAKxRtB982LzzYBoEPgb2p5i7\nSsK+FfWehz0220BYY18jyM+JPzhhc77HUsOg159HZ+zat9B6HbC4zN4VGnjEMPla\nz0SJPaFFf4qnVwyHta1EIKHu003XGm2wjT/BzO4XATc/nsyOYA4g38/NsRqc4exd\nPHb3OMed5Q6dkfZehTG+I/WL4pVgJubZwvgMrcYhLxnvzLWkwXMftzn5XafO171t\nqwyrcIG+CzIB3vlG8KI/yXpe+m9NQiHWAc7ssij+ELoM90rf+8DoYZqHwTKdAA0c\ngKlDjtE0Z5gJ0ZJNjwkVf3hOe6FsZ9NA0pymLYN6GGb+XdOKCPrx9K7+2Z2JZsE=\n=Rp4v\n-----END PGP SIGNATURE-----\n", "payload": "tree 2855557d30c69ddce907dc3e88da132831bdd420\nparent 4136b59b7da8866762761ed29405a5c5f58a5e3d\nparent cb5ea8d0b67e4a46f9f30aa93107035d9a1dadf0\nauthor Michael Howell <michael@notriddle.com> 1663693976 -0700\ncommitter GitHub <noreply@github.com> 1663693976 -0700\n\nRollup merge of #100250 - cjgillot:recover-token-stream, r=Aaron1011\n\nManually cleanup token stream when macro expansion aborts.\n\nIn case of syntax error in macro expansion, the expansion code can decide to stop processing anything. In that case, the token stream is malformed. This makes downstream users, like derive macros, ICE.\n\nIn this case, this PR manually cleans up the token stream by closing all currently open delimiters.\n\nFixes https://github.com/rust-lang/rust/issues/96818.\nFixes https://github.com/rust-lang/rust/issues/80447.\nFixes https://github.com/rust-lang/rust/issues/81920.\nFixes https://github.com/rust-lang/rust/issues/91023.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b27cfd11be4285d61415015d0d38e42d401ae3", "html_url": "https://github.com/rust-lang/rust/commit/14b27cfd11be4285d61415015d0d38e42d401ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b27cfd11be4285d61415015d0d38e42d401ae3/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4136b59b7da8866762761ed29405a5c5f58a5e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4136b59b7da8866762761ed29405a5c5f58a5e3d", "html_url": "https://github.com/rust-lang/rust/commit/4136b59b7da8866762761ed29405a5c5f58a5e3d"}, {"sha": "cb5ea8d0b67e4a46f9f30aa93107035d9a1dadf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5ea8d0b67e4a46f9f30aa93107035d9a1dadf0", "html_url": "https://github.com/rust-lang/rust/commit/cb5ea8d0b67e4a46f9f30aa93107035d9a1dadf0"}], "stats": {"total": 113, "additions": 84, "deletions": 29}, "files": [{"sha": "009f3c783d4c8d946cdd73f1fc011bce86a93611", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/14b27cfd11be4285d61415015d0d38e42d401ae3/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b27cfd11be4285d61415015d0d38e42d401ae3/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=14b27cfd11be4285d61415015d0d38e42d401ae3", "patch": "@@ -7,6 +7,7 @@ use rustc_ast::visit::Visitor;\n use rustc_ast::NodeId;\n use rustc_ast::{mut_visit, visit};\n use rustc_ast::{Attribute, HasAttrs, HasTokens};\n+use rustc_errors::PResult;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_expand::config::StripUnconfigured;\n use rustc_expand::configure;\n@@ -144,33 +145,34 @@ impl CfgEval<'_, '_> {\n         // the location of `#[cfg]` and `#[cfg_attr]` in the token stream. The tokenization\n         // process is lossless, so this process is invisible to proc-macros.\n \n-        let parse_annotatable_with: fn(&mut Parser<'_>) -> _ = match annotatable {\n-            Annotatable::Item(_) => {\n-                |parser| Annotatable::Item(parser.parse_item(ForceCollect::Yes).unwrap().unwrap())\n-            }\n-            Annotatable::TraitItem(_) => |parser| {\n-                Annotatable::TraitItem(\n-                    parser.parse_trait_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n-                )\n-            },\n-            Annotatable::ImplItem(_) => |parser| {\n-                Annotatable::ImplItem(\n-                    parser.parse_impl_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n-                )\n-            },\n-            Annotatable::ForeignItem(_) => |parser| {\n-                Annotatable::ForeignItem(\n-                    parser.parse_foreign_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n-                )\n-            },\n-            Annotatable::Stmt(_) => |parser| {\n-                Annotatable::Stmt(P(parser.parse_stmt(ForceCollect::Yes).unwrap().unwrap()))\n-            },\n-            Annotatable::Expr(_) => {\n-                |parser| Annotatable::Expr(parser.parse_expr_force_collect().unwrap())\n-            }\n-            _ => unreachable!(),\n-        };\n+        let parse_annotatable_with: for<'a> fn(&mut Parser<'a>) -> PResult<'a, _> =\n+            match annotatable {\n+                Annotatable::Item(_) => {\n+                    |parser| Ok(Annotatable::Item(parser.parse_item(ForceCollect::Yes)?.unwrap()))\n+                }\n+                Annotatable::TraitItem(_) => |parser| {\n+                    Ok(Annotatable::TraitItem(\n+                        parser.parse_trait_item(ForceCollect::Yes)?.unwrap().unwrap(),\n+                    ))\n+                },\n+                Annotatable::ImplItem(_) => |parser| {\n+                    Ok(Annotatable::ImplItem(\n+                        parser.parse_impl_item(ForceCollect::Yes)?.unwrap().unwrap(),\n+                    ))\n+                },\n+                Annotatable::ForeignItem(_) => |parser| {\n+                    Ok(Annotatable::ForeignItem(\n+                        parser.parse_foreign_item(ForceCollect::Yes)?.unwrap().unwrap(),\n+                    ))\n+                },\n+                Annotatable::Stmt(_) => |parser| {\n+                    Ok(Annotatable::Stmt(P(parser.parse_stmt(ForceCollect::Yes)?.unwrap())))\n+                },\n+                Annotatable::Expr(_) => {\n+                    |parser| Ok(Annotatable::Expr(parser.parse_expr_force_collect()?))\n+                }\n+                _ => unreachable!(),\n+            };\n \n         // 'Flatten' all nonterminals (i.e. `TokenKind::Interpolated`)\n         // to `None`-delimited groups containing the corresponding tokens. This\n@@ -193,7 +195,13 @@ impl CfgEval<'_, '_> {\n         let mut parser =\n             rustc_parse::stream_to_parser(&self.cfg.sess.parse_sess, orig_tokens, None);\n         parser.capture_cfg = true;\n-        annotatable = parse_annotatable_with(&mut parser);\n+        match parse_annotatable_with(&mut parser) {\n+            Ok(a) => annotatable = a,\n+            Err(mut err) => {\n+                err.emit();\n+                return Some(annotatable);\n+            }\n+        }\n \n         // Now that we have our re-parsed `AttrTokenStream`, recursively configuring\n         // our attribute target will correctly the tokens as well."}, {"sha": "86c386b94c8349a08b2ba100f47e6f1e5bbff92b", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b27cfd11be4285d61415015d0d38e42d401ae3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b27cfd11be4285d61415015d0d38e42d401ae3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=14b27cfd11be4285d61415015d0d38e42d401ae3", "patch": "@@ -459,6 +459,5 @@ fn make_token_stream(\n             panic!(\"Unexpected last token {:?}\", last_token)\n         }\n     }\n-    assert!(stack.is_empty(), \"Stack should be empty: final_buf={:?} stack={:?}\", final_buf, stack);\n     AttrTokenStream::new(final_buf.inner)\n }"}, {"sha": "ae6de3c5046cde67c20f266a3fbfbf52acc1ff2c", "filename": "src/test/ui/macros/syntax-error-recovery.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14b27cfd11be4285d61415015d0d38e42d401ae3/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b27cfd11be4285d61415015d0d38e42d401ae3/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.rs?ref=14b27cfd11be4285d61415015d0d38e42d401ae3", "patch": "@@ -0,0 +1,18 @@\n+macro_rules! values {\n+    ($($token:ident($value:literal) $(as $inner:ty)? => $attr:meta,)*) => {\n+        #[derive(Debug)]\n+        pub enum TokenKind {\n+            $(\n+                #[$attr]\n+                $token $($inner)? = $value,\n+            )*\n+        }\n+    };\n+}\n+//~^^^^^ ERROR expected one of `(`, `,`, `=`, `{`, or `}`, found `(String)`\n+//~| ERROR macro expansion ignores token `(String)` and any following\n+\n+values!(STRING(1) as (String) => cfg(test),);\n+//~^ ERROR expected one of `!` or `::`, found `<eof>`\n+\n+fn main() {}"}, {"sha": "c153b3b910bbe8dd932341003200db2ca141c731", "filename": "src/test/ui/macros/syntax-error-recovery.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14b27cfd11be4285d61415015d0d38e42d401ae3/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b27cfd11be4285d61415015d0d38e42d401ae3/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsyntax-error-recovery.stderr?ref=14b27cfd11be4285d61415015d0d38e42d401ae3", "patch": "@@ -0,0 +1,30 @@\n+error: expected one of `(`, `,`, `=`, `{`, or `}`, found `(String)`\n+  --> $DIR/syntax-error-recovery.rs:7:26\n+   |\n+LL |                 $token $($inner)? = $value,\n+   |                          ^^^^^^ expected one of `(`, `,`, `=`, `{`, or `}`\n+...\n+LL | values!(STRING(1) as (String) => cfg(test),);\n+   | -------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `values` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: macro expansion ignores token `(String)` and any following\n+  --> $DIR/syntax-error-recovery.rs:7:26\n+   |\n+LL |                 $token $($inner)? = $value,\n+   |                          ^^^^^^\n+...\n+LL | values!(STRING(1) as (String) => cfg(test),);\n+   | -------------------------------------------- caused by the macro expansion here\n+   |\n+   = note: the usage of `values!` is likely invalid in item context\n+\n+error: expected one of `!` or `::`, found `<eof>`\n+  --> $DIR/syntax-error-recovery.rs:15:9\n+   |\n+LL | values!(STRING(1) as (String) => cfg(test),);\n+   |         ^^^^^^ expected one of `!` or `::`\n+\n+error: aborting due to 3 previous errors\n+"}]}