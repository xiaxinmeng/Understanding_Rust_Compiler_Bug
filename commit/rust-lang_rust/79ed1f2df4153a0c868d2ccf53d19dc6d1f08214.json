{"sha": "79ed1f2df4153a0c868d2ccf53d19dc6d1f08214", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZWQxZjJkZjQxNTNhMGM4NjhkMmNjZjUzZDE5ZGM2ZDFmMDgyMTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-01T19:58:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-01T19:58:07Z"}, "message": "New lint pass for picking out uses of old-style vecs and str.", "tree": {"sha": "fddeae21313202aab89bf5edbce8e336ddd82bbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fddeae21313202aab89bf5edbce8e336ddd82bbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ed1f2df4153a0c868d2ccf53d19dc6d1f08214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ed1f2df4153a0c868d2ccf53d19dc6d1f08214", "html_url": "https://github.com/rust-lang/rust/commit/79ed1f2df4153a0c868d2ccf53d19dc6d1f08214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ed1f2df4153a0c868d2ccf53d19dc6d1f08214/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cdbb93411e9b3a89b7c2a19c875b5682f52ab41", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdbb93411e9b3a89b7c2a19c875b5682f52ab41", "html_url": "https://github.com/rust-lang/rust/commit/0cdbb93411e9b3a89b7c2a19c875b5682f52ab41"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "6588b9d86b73be7da19a5a93a3423ba0060c3292", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/79ed1f2df4153a0c868d2ccf53d19dc6d1f08214/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ed1f2df4153a0c868d2ccf53d19dc6d1f08214/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=79ed1f2df4153a0c868d2ccf53d19dc6d1f08214", "patch": "@@ -3,7 +3,7 @@ import middle::ty;\n import syntax::{ast, visit};\n import syntax::attr;\n import syntax::codemap::span;\n-import std::map::{map,hashmap,hash_from_strs};\n+import std::map::{map,hashmap,int_hash,hash_from_strs};\n import io::writer_util;\n import syntax::print::pprust::expr_to_str;\n \n@@ -26,6 +26,7 @@ enum lint {\n     unused_imports,\n     while_true,\n     path_statement,\n+    old_vecs,\n }\n \n enum level {\n@@ -62,7 +63,12 @@ fn get_lint_dict() -> lint_dict {\n         (\"path_statement\",\n          @{lint: path_statement,\n            desc: \"path statements with no effect\",\n-           default: warn})\n+           default: warn}),\n+\n+        (\"old_vecs\",\n+         @{lint: old_vecs,\n+           desc: \"old (deprecated) vectors and strings\",\n+           default: ignore})\n \n     ];\n     hash_from_strs(v)\n@@ -185,6 +191,7 @@ fn check_item(cx: ctxt, i: @ast::item) {\n               unused_imports { check_item_unused_imports(cx, level, i); }\n               while_true { check_item_while_true(cx, level, i); }\n               path_statement { check_item_path_statement(cx, level, i); }\n+              old_vecs { check_item_old_vecs(cx, level, i); }\n             }\n         }\n     }\n@@ -279,6 +286,50 @@ fn check_item_path_statement(cx: ctxt, level: level, it: @ast::item) {\n     visit::visit_item(it, (), visit);\n }\n \n+fn check_item_old_vecs(cx: ctxt, level: level, it: @ast::item) {\n+    let uses_vstore = int_hash();\n+\n+    let visit = visit::mk_simple_visitor(@{\n+\n+        visit_expr:fn@(e: @ast::expr) {\n+            alt e.node {\n+              ast::expr_vec(_, _) |\n+              ast::expr_lit(@{node: ast::lit_str(_), span:_})\n+              if ! uses_vstore.contains_key(e.id) {\n+                cx.span_lint(level, e.span, \"deprecated vec/str expr\");\n+              }\n+              ast::expr_vstore(@inner, _) {\n+                uses_vstore.insert(inner.id, true);\n+              }\n+              _ { }\n+            }\n+        },\n+\n+        visit_ty: fn@(t: @ast::ty) {\n+            alt t.node {\n+              ast::ty_vec(_)\n+              if ! uses_vstore.contains_key(t.id) {\n+                cx.span_lint(level, t.span, \"deprecated vec type\");\n+              }\n+\n+              ast::ty_path(@{span: _, global: _, idents: ids,\n+                             rp: none, types: _}, _)\n+              if ids == [\"str\"] && (! uses_vstore.contains_key(t.id)) {\n+                cx.span_lint(level, t.span, \"deprecated str type\");\n+              }\n+\n+              ast::ty_vstore(inner, _) {\n+                uses_vstore.insert(inner.id, true);\n+              }\n+              _ { }\n+            }\n+        }\n+\n+        with *visit::default_simple_visitor()\n+    });\n+    visit::visit_item(it, (), visit);\n+}\n+\n \n fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n                lint_opts: [(lint, level)], time_pass: bool) {"}]}