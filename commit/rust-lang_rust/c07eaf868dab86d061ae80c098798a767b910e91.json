{"sha": "c07eaf868dab86d061ae80c098798a767b910e91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwN2VhZjg2OGRhYjg2ZDA2MWFlODBjMDk4Nzk4YTc2N2I5MTBlOTE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-21T15:52:43Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-21T15:55:17Z"}, "message": "Support `Trait as _` imports", "tree": {"sha": "1793a7f85fd45a0774e019aaa9fe16410ab6eda9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1793a7f85fd45a0774e019aaa9fe16410ab6eda9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c07eaf868dab86d061ae80c098798a767b910e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c07eaf868dab86d061ae80c098798a767b910e91", "html_url": "https://github.com/rust-lang/rust/commit/c07eaf868dab86d061ae80c098798a767b910e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c07eaf868dab86d061ae80c098798a767b910e91/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65b89b5471879a80fb6003c9fa0f8f93e2eb38e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b89b5471879a80fb6003c9fa0f8f93e2eb38e6", "html_url": "https://github.com/rust-lang/rust/commit/65b89b5471879a80fb6003c9fa0f8f93e2eb38e6"}], "stats": {"total": 292, "additions": 266, "deletions": 26}, "files": [{"sha": "8fee4b15e54ef56bf7a0ec16ef24995415594962", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=c07eaf868dab86d061ae80c098798a767b910e91", "patch": "@@ -36,6 +36,8 @@ pub struct ItemScope {\n \n     defs: Vec<ModuleDefId>,\n     impls: Vec<ImplId>,\n+    /// Traits imported via `use Trait as _;`.\n+    unnamed_trait_imports: FxHashMap<TraitId, Visibility>,\n     /// Macros visible in current module in legacy textual scope\n     ///\n     /// For macros invoked by an unqualified identifier like `bar!()`, `legacy_macros` will be searched in first.\n@@ -126,10 +128,13 @@ impl ItemScope {\n     }\n \n     pub(crate) fn traits<'a>(&'a self) -> impl Iterator<Item = TraitId> + 'a {\n-        self.types.values().filter_map(|(def, _)| match def {\n-            ModuleDefId::TraitId(t) => Some(*t),\n-            _ => None,\n-        })\n+        self.types\n+            .values()\n+            .filter_map(|(def, _)| match def {\n+                ModuleDefId::TraitId(t) => Some(*t),\n+                _ => None,\n+            })\n+            .chain(self.unnamed_trait_imports.keys().copied())\n     }\n \n     pub(crate) fn define_def(&mut self, def: ModuleDefId) {\n@@ -148,6 +153,14 @@ impl ItemScope {\n         self.legacy_macros.insert(name, mac);\n     }\n \n+    pub(crate) fn unnamed_trait_vis(&self, tr: TraitId) -> Option<Visibility> {\n+        self.unnamed_trait_imports.get(&tr).copied()\n+    }\n+\n+    pub(crate) fn push_unnamed_trait(&mut self, tr: TraitId, vis: Visibility) {\n+        self.unnamed_trait_imports.insert(tr, vis);\n+    }\n+\n     pub(crate) fn push_res(&mut self, name: Name, def: PerNs) -> bool {\n         let mut changed = false;\n \n@@ -241,8 +254,12 @@ impl ItemScope {\n         changed\n     }\n \n-    pub(crate) fn resolutions<'a>(&'a self) -> impl Iterator<Item = (Name, PerNs)> + 'a {\n-        self.entries().map(|(name, res)| (name.clone(), res))\n+    pub(crate) fn resolutions<'a>(&'a self) -> impl Iterator<Item = (Option<Name>, PerNs)> + 'a {\n+        self.entries().map(|(name, res)| (Some(name.clone()), res)).chain(\n+            self.unnamed_trait_imports\n+                .iter()\n+                .map(|(tr, vis)| (None, PerNs::types(ModuleDefId::TraitId(*tr), *vis))),\n+        )\n     }\n \n     pub(crate) fn collect_legacy_macros(&self) -> FxHashMap<Name, MacroDefId> {"}, {"sha": "3d9b55a73c4dfabf1de8e528bda90596c567c2ab", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=c07eaf868dab86d061ae80c098798a767b910e91", "patch": "@@ -239,7 +239,7 @@ impl CrateDefMap {\n             entries.sort_by_key(|(name, _)| name.clone());\n \n             for (name, def) in entries {\n-                format_to!(buf, \"{}:\", name);\n+                format_to!(buf, \"{}:\", name.map_or(\"_\".to_string(), |name| name.to_string()));\n \n                 if def.types.is_some() {\n                     buf.push_str(\" t\");"}, {"sha": "8913111f1ba46ca8f6d2bc3f671ae95033d96af1", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c07eaf868dab86d061ae80c098798a767b910e91", "patch": "@@ -310,7 +310,7 @@ impl DefCollector<'_> {\n         if export {\n             self.update(\n                 self.def_map.root,\n-                &[(name, PerNs::macros(macro_, Visibility::Public))],\n+                &[(Some(name), PerNs::macros(macro_, Visibility::Public))],\n                 Visibility::Public,\n                 ImportType::Named,\n             );\n@@ -336,7 +336,7 @@ impl DefCollector<'_> {\n     fn define_proc_macro(&mut self, name: Name, macro_: MacroDefId) {\n         self.update(\n             self.def_map.root,\n-            &[(name, PerNs::macros(macro_, Visibility::Public))],\n+            &[(Some(name), PerNs::macros(macro_, Visibility::Public))],\n             Visibility::Public,\n             ImportType::Named,\n         );\n@@ -534,7 +534,7 @@ impl DefCollector<'_> {\n                             let name = variant_data.name.clone();\n                             let variant = EnumVariantId { parent: e, local_id };\n                             let res = PerNs::both(variant.into(), variant.into(), vis);\n-                            (name, res)\n+                            (Some(name), res)\n                         })\n                         .collect::<Vec<_>>();\n                     self.update(module_id, &resolutions, vis, ImportType::Glob);\n@@ -550,15 +550,15 @@ impl DefCollector<'_> {\n             match import.path.segments.last() {\n                 Some(last_segment) => {\n                     let name = match &import.alias {\n-                        Some(ImportAlias::Alias(name)) => name.clone(),\n-                        Some(ImportAlias::Underscore) => last_segment.clone(), // FIXME rust-analyzer#2736\n-                        None => last_segment.clone(),\n+                        Some(ImportAlias::Alias(name)) => Some(name.clone()),\n+                        Some(ImportAlias::Underscore) => None,\n+                        None => Some(last_segment.clone()),\n                     };\n                     log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n \n                     // extern crates in the crate root are special-cased to insert entries into the extern prelude: rust-lang/rust#54658\n                     if import.is_extern_crate && module_id == self.def_map.root {\n-                        if let Some(def) = def.take_types() {\n+                        if let (Some(def), Some(name)) = (def.take_types(), name.as_ref()) {\n                             self.def_map.extern_prelude.insert(name.clone(), def);\n                         }\n                     }\n@@ -573,7 +573,7 @@ impl DefCollector<'_> {\n     fn update(\n         &mut self,\n         module_id: LocalModuleId,\n-        resolutions: &[(Name, PerNs)],\n+        resolutions: &[(Option<Name>, PerNs)],\n         vis: Visibility,\n         import_type: ImportType,\n     ) {\n@@ -584,7 +584,7 @@ impl DefCollector<'_> {\n     fn update_recursive(\n         &mut self,\n         module_id: LocalModuleId,\n-        resolutions: &[(Name, PerNs)],\n+        resolutions: &[(Option<Name>, PerNs)],\n         // All resolutions are imported with this visibility; the visibilies in\n         // the `PerNs` values are ignored and overwritten\n         vis: Visibility,\n@@ -595,15 +595,46 @@ impl DefCollector<'_> {\n             // prevent stack overflows (but this shouldn't be possible)\n             panic!(\"infinite recursion in glob imports!\");\n         }\n-        let scope = &mut self.def_map.modules[module_id].scope;\n         let mut changed = false;\n+\n         for (name, res) in resolutions {\n-            changed |= scope.push_res_with_import(\n-                &mut self.from_glob_import,\n-                (module_id, name.clone()),\n-                res.with_visibility(vis),\n-                import_type,\n-            );\n+            match name {\n+                Some(name) => {\n+                    let scope = &mut self.def_map.modules[module_id].scope;\n+                    changed |= scope.push_res_with_import(\n+                        &mut self.from_glob_import,\n+                        (module_id, name.clone()),\n+                        res.with_visibility(vis),\n+                        import_type,\n+                    );\n+                }\n+                None => {\n+                    let tr = match res.take_types() {\n+                        Some(ModuleDefId::TraitId(tr)) => tr,\n+                        Some(other) => {\n+                            log::debug!(\"non-trait `_` import of {:?}\", other);\n+                            continue;\n+                        }\n+                        None => continue,\n+                    };\n+                    let old_vis = self.def_map.modules[module_id].scope.unnamed_trait_vis(tr);\n+                    let should_update = match old_vis {\n+                        None => true,\n+                        Some(old_vis) => {\n+                            let max_vis = old_vis.max(vis, &self.def_map).unwrap_or_else(|| {\n+                                panic!(\"`Tr as _` imports with unrelated visibilities {:?} and {:?} (trait {:?})\", old_vis, vis, tr);\n+                            });\n+\n+                            max_vis != old_vis\n+                        }\n+                    };\n+\n+                    if should_update {\n+                        changed = true;\n+                        self.def_map.modules[module_id].scope.push_unnamed_trait(tr, vis);\n+                    }\n+                }\n+            }\n         }\n \n         if !changed {\n@@ -950,7 +981,7 @@ impl ModCollector<'_, '_> {\n                         .unwrap_or(Visibility::Public);\n                     self.def_collector.update(\n                         self.module_id,\n-                        &[(name.clone(), PerNs::from_def(id, vis, has_constructor))],\n+                        &[(Some(name.clone()), PerNs::from_def(id, vis, has_constructor))],\n                         vis,\n                         ImportType::Named,\n                     )\n@@ -1057,7 +1088,7 @@ impl ModCollector<'_, '_> {\n         self.def_collector.def_map.modules[self.module_id].scope.define_def(def);\n         self.def_collector.update(\n             self.module_id,\n-            &[(name, PerNs::from_def(def, vis, false))],\n+            &[(Some(name), PerNs::from_def(def, vis, false))],\n             vis,\n             ImportType::Named,\n         );"}, {"sha": "502b1fb6975ec08615f2eb6929d715d61e87d7b4", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=c07eaf868dab86d061ae80c098798a767b910e91", "patch": "@@ -558,3 +558,134 @@ mod b {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn underscore_import() {\n+    check(\n+        r#\"\n+//- /main.rs\n+use tr::Tr as _;\n+use tr::Tr2 as _;\n+\n+mod tr {\n+    pub trait Tr {}\n+    pub trait Tr2 {}\n+}\n+    \"#,\n+        expect![[r#\"\n+            crate\n+            _: t\n+            _: t\n+            tr: t\n+\n+            crate::tr\n+            Tr: t\n+            Tr2: t\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn underscore_reexport() {\n+    check(\n+        r#\"\n+//- /main.rs\n+mod tr {\n+    pub trait PubTr {}\n+    pub trait PrivTr {}\n+}\n+mod reex {\n+    use crate::tr::PrivTr as _;\n+    pub use crate::tr::PubTr as _;\n+}\n+use crate::reex::*;\n+    \"#,\n+        expect![[r#\"\n+            crate\n+            _: t\n+            reex: t\n+            tr: t\n+\n+            crate::tr\n+            PrivTr: t\n+            PubTr: t\n+\n+            crate::reex\n+            _: t\n+            _: t\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn underscore_pub_crate_reexport() {\n+    check(\n+        r#\"\n+//- /main.rs crate:main deps:lib\n+use lib::*;\n+\n+//- /lib.rs crate:lib\n+use tr::Tr as _;\n+pub use tr::Tr as _;\n+\n+mod tr {\n+    pub trait Tr {\n+        fn method(&self) {}\n+    }\n+}\n+    \"#,\n+        expect![[r#\"\n+            crate\n+            _: t\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn underscore_nontrait() {\n+    check(\n+        r#\"\n+//- /main.rs\n+mod m {\n+    pub struct Struct;\n+    pub enum Enum {}\n+    pub const CONST: () = ();\n+}\n+use crate::m::{Struct as _, Enum as _, CONST as _};\n+    \"#,\n+        expect![[r#\"\n+            crate\n+            m: t\n+\n+            crate::m\n+            CONST: v\n+            Enum: t\n+            Struct: t v\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn underscore_name_conflict() {\n+    check(\n+        r#\"\n+//- /main.rs\n+struct Tr;\n+\n+use tr::Tr as _;\n+\n+mod tr {\n+    pub trait Tr {}\n+}\n+    \"#,\n+        expect![[r#\"\n+            crate\n+            _: t\n+            Tr: t v\n+            tr: t\n+\n+            crate::tr\n+            Tr: t\n+        \"#]],\n+    );\n+}"}, {"sha": "1abffb4c3cac1d7517173ac8f1f94caa0d76dc29", "filename": "crates/ra_hir_def/src/visibility.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs?ref=c07eaf868dab86d061ae80c098798a767b910e91", "patch": "@@ -5,6 +5,7 @@ use ra_syntax::ast;\n \n use crate::{\n     db::DefDatabase,\n+    nameres::CrateDefMap,\n     path::{ModPath, PathKind},\n     ModuleId,\n };\n@@ -115,7 +116,7 @@ impl Visibility {\n \n     pub(crate) fn is_visible_from_def_map(\n         self,\n-        def_map: &crate::nameres::CrateDefMap,\n+        def_map: &CrateDefMap,\n         from_module: crate::LocalModuleId,\n     ) -> bool {\n         let to_module = match self {\n@@ -129,4 +130,42 @@ impl Visibility {\n         });\n         ancestors.any(|m| m == to_module.local_id)\n     }\n+\n+    /// Returns the most permissive visibility of `self` and `other`.\n+    ///\n+    /// If there is no subset relation between `self` and `other`, returns `None` (ie. they're only\n+    /// visible in unrelated modules).\n+    pub(crate) fn max(self, other: Visibility, def_map: &CrateDefMap) -> Option<Visibility> {\n+        match (self, other) {\n+            (Visibility::Module(_), Visibility::Public)\n+            | (Visibility::Public, Visibility::Module(_))\n+            | (Visibility::Public, Visibility::Public) => Some(Visibility::Public),\n+            (Visibility::Module(mod_a), Visibility::Module(mod_b)) => {\n+                if mod_a.krate != mod_b.krate {\n+                    return None;\n+                }\n+\n+                let mut a_ancestors = std::iter::successors(Some(mod_a.local_id), |m| {\n+                    let parent_id = def_map[*m].parent?;\n+                    Some(parent_id)\n+                });\n+                let mut b_ancestors = std::iter::successors(Some(mod_b.local_id), |m| {\n+                    let parent_id = def_map[*m].parent?;\n+                    Some(parent_id)\n+                });\n+\n+                if a_ancestors.any(|m| m == mod_b.local_id) {\n+                    // B is above A\n+                    return Some(Visibility::Module(mod_b));\n+                }\n+\n+                if b_ancestors.any(|m| m == mod_a.local_id) {\n+                    // A is above B\n+                    return Some(Visibility::Module(mod_a));\n+                }\n+\n+                None\n+            }\n+        }\n+    }\n }"}, {"sha": "526e61cafb460df57245dfc5566f740cee682bf4", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07eaf868dab86d061ae80c098798a767b910e91/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=c07eaf868dab86d061ae80c098798a767b910e91", "patch": "@@ -3089,3 +3089,25 @@ fn test() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn underscore_import() {\n+    check_types(\n+        r#\"\n+mod tr {\n+    pub trait Tr {\n+        fn method(&self) -> u8 { 0 }\n+    }\n+}\n+\n+struct Tr;\n+impl crate::tr::Tr for Tr {}\n+\n+use crate::tr::Tr as _;\n+fn test() {\n+    Tr.method();\n+  //^^^^^^^^^^^ u8\n+}\n+    \"#,\n+    );\n+}"}]}