{"sha": "8ac88d375e00c91a3db5d78852048322f88be3c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzg4ZDM3NWUwMGM5MWEzZGI1ZDc4ODUyMDQ4MzIyZjg4YmUzYzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-09-20T16:31:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-09-20T16:31:53Z"}, "message": "std: Check for overflow in `str::repeat`\n\nThis commit fixes a buffer overflow issue in the standard library\ndiscovered by Scott McMurray where if a large number was passed to\n`str::repeat` it may cause and out of bounds write to the buffer of a `Vec`.\nThis bug was accidentally introduced in #48657 when optimizing the\n`str::repeat` function. The bug affects stable Rust releases 1.26.0 to\n1.29.0. We plan on backporting this fix to create a 1.29.1 release, and\nthe 1.30.0 release onwards will include this fix.\n\nThe fix in this commit is to introduce a deterministic panic in the case of\ncapacity overflow. When repeating a slice where the resulting length is larger\nthan the address space, there\u2019s no way it can succeed anyway!\n\nThe standard library and surrounding libraries were briefly checked to see if\nthere were othere instances of preallocating a vector with a calculation that\nmay overflow. No instances of this bug (out of bounds write due to a calculation\noverflow) were found at this time.\n\nNote that this commit is the first steps towards fixing this issue,\nwe'll be making a formal post to the Rust security list once these\ncommits have been merged.", "tree": {"sha": "a69b188363aea298bd56d12c51be3a774bce2873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69b188363aea298bd56d12c51be3a774bce2873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac88d375e00c91a3db5d78852048322f88be3c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac88d375e00c91a3db5d78852048322f88be3c1", "html_url": "https://github.com/rust-lang/rust/commit/8ac88d375e00c91a3db5d78852048322f88be3c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac88d375e00c91a3db5d78852048322f88be3c1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f4c500b46603386e940f116b469c7adc043a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f4c500b46603386e940f116b469c7adc043a6d", "html_url": "https://github.com/rust-lang/rust/commit/f7f4c500b46603386e940f116b469c7adc043a6d"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "6c0b1c33a1f7673ee3c4a2ed40a789214a20be4d", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ac88d375e00c91a3db5d78852048322f88be3c1/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac88d375e00c91a3db5d78852048322f88be3c1/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=8ac88d375e00c91a3db5d78852048322f88be3c1", "patch": "@@ -392,6 +392,10 @@ impl<T> [T] {\n \n     /// Creates a vector by repeating a slice `n` times.\n     ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the capacity would overflow.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -403,6 +407,16 @@ impl<T> [T] {\n     ///     assert_eq!([1, 2].repeat(3), vec![1, 2, 1, 2, 1, 2]);\n     /// }\n     /// ```\n+    ///\n+    /// A panic upon overflow:\n+    ///\n+    /// ```should_panic\n+    /// #![feature(repeat_generic_slice)]\n+    /// fn main() {\n+    ///     // this will panic at runtime\n+    ///     b\"0123456789abcdef\".repeat(usize::max_value());\n+    /// }\n+    /// ```\n     #[unstable(feature = \"repeat_generic_slice\",\n                reason = \"it's on str, why not on slice?\",\n                issue = \"48784\")]\n@@ -417,7 +431,7 @@ impl<T> [T] {\n         // and `rem` is the remaining part of `n`.\n \n         // Using `Vec` to access `set_len()`.\n-        let mut buf = Vec::with_capacity(self.len() * n);\n+        let mut buf = Vec::with_capacity(self.len().checked_mul(n).expect(\"capacity overflow\"));\n \n         // `2^expn` repetition is done by doubling `buf` `expn`-times.\n         buf.extend(self);"}, {"sha": "2af89562d69fe1d0a6f37c07350c212117c8b131", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ac88d375e00c91a3db5d78852048322f88be3c1/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac88d375e00c91a3db5d78852048322f88be3c1/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=8ac88d375e00c91a3db5d78852048322f88be3c1", "patch": "@@ -515,6 +515,10 @@ impl str {\n \n     /// Creates a new [`String`] by repeating a string `n` times.\n     ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the capacity would overflow.\n+    ///\n     /// [`String`]: string/struct.String.html\n     ///\n     /// # Examples\n@@ -524,6 +528,15 @@ impl str {\n     /// ```\n     /// assert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n     /// ```\n+    ///\n+    /// A panic upon overflow:\n+    ///\n+    /// ```should_panic\n+    /// fn main() {\n+    ///     // this will panic at runtime\n+    ///     \"0123456789abcdef\".repeat(usize::max_value());\n+    /// }\n+    /// ```\n     #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {\n         unsafe { String::from_utf8_unchecked(self.as_bytes().repeat(n)) }"}]}