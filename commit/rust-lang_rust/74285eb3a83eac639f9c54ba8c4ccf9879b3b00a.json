{"sha": "74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Mjg1ZWIzYTgzZWFjNjM5ZjljNTRiYThjNGNjZjk4NzliM2IwMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T03:40:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T03:40:20Z"}, "message": "Auto merge of #78088 - fusion-engineering-forks:panic-fmt-lint, r=estebank\n\nAdd lint for panic!(\"{}\")\n\nThis adds a lint that warns about `panic!(\"{}\")`.\n\n`panic!(msg)` invocations with a single argument use their argument as panic payload literally, without using it as a format string. The same holds for `assert!(expr, msg)`.\n\nThis lints checks if `msg` is a string literal (after expansion), and warns in case it contained braces. It suggests to insert `\"{}\", ` to use the message literally, or to add arguments to use it as a format string.\n\n![image](https://user-images.githubusercontent.com/783247/96643867-79eb1080-1328-11eb-8d4e-a5586837c70a.png)\n\nThis lint is also a good starting point for adding warnings about `panic!(not_a_string)` later, once [`panic_any()`](https://github.com/rust-lang/rust/pull/74622) becomes a stable alternative.", "tree": {"sha": "6771c2444c7ce708f710b7649875c81754c56fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6771c2444c7ce708f710b7649875c81754c56fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "html_url": "https://github.com/rust-lang/rust/commit/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec27e4b79891b0ebc2ad71a3c4ac94f67d93f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec27e4b79891b0ebc2ad71a3c4ac94f67d93f93", "html_url": "https://github.com/rust-lang/rust/commit/4ec27e4b79891b0ebc2ad71a3c4ac94f67d93f93"}, {"sha": "a125ef2e8ec27e8fedc119ddfdef638d09a69ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a125ef2e8ec27e8fedc119ddfdef638d09a69ba2", "html_url": "https://github.com/rust-lang/rust/commit/a125ef2e8ec27e8fedc119ddfdef638d09a69ba2"}], "stats": {"total": 527, "additions": 362, "deletions": 165}, "files": [{"sha": "3dba4f935e595245a19d9149de42b10ef12e10e9", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -3831,6 +3831,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_middle\",\n+ \"rustc_parse_format\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\","}, {"sha": "bb6d3f6a0076cb54918c608ae35685d5ec571ab1", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -1,8 +1,8 @@\n use rustc_errors::{Applicability, DiagnosticBuilder};\n \n use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, TokenKind};\n-use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n@@ -26,31 +26,39 @@ pub fn expand_assert<'cx>(\n     // `core::panic` and `std::panic` are different macros, so we use call-site\n     // context to pick up whichever is currently in scope.\n     let sp = cx.with_call_site_ctxt(sp);\n-    let tokens = custom_message.unwrap_or_else(|| {\n-        TokenStream::from(TokenTree::token(\n-            TokenKind::lit(\n-                token::Str,\n+\n+    let panic_call = if let Some(tokens) = custom_message {\n+        // Pass the custom message to panic!().\n+        cx.expr(\n+            sp,\n+            ExprKind::MacCall(MacCall {\n+                path: Path::from_ident(Ident::new(sym::panic, sp)),\n+                args: P(MacArgs::Delimited(\n+                    DelimSpan::from_single(sp),\n+                    MacDelimiter::Parenthesis,\n+                    tokens,\n+                )),\n+                prior_type_ascription: None,\n+            }),\n+        )\n+    } else {\n+        // Pass our own message directly to $crate::panicking::panic(),\n+        // because it might contain `{` and `}` that should always be\n+        // passed literally.\n+        cx.expr_call_global(\n+            sp,\n+            cx.std_path(&[sym::panicking, sym::panic]),\n+            vec![cx.expr_str(\n+                DUMMY_SP,\n                 Symbol::intern(&format!(\n                     \"assertion failed: {}\",\n                     pprust::expr_to_string(&cond_expr).escape_debug()\n                 )),\n-                None,\n-            ),\n-            DUMMY_SP,\n-        ))\n-    });\n-    let args = P(MacArgs::Delimited(DelimSpan::from_single(sp), MacDelimiter::Parenthesis, tokens));\n-    let panic_call = MacCall {\n-        path: Path::from_ident(Ident::new(sym::panic, sp)),\n-        args,\n-        prior_type_ascription: None,\n+            )],\n+        )\n     };\n-    let if_expr = cx.expr_if(\n-        sp,\n-        cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)),\n-        cx.expr(sp, ExprKind::MacCall(panic_call)),\n-        None,\n-    );\n+    let if_expr =\n+        cx.expr_if(sp, cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)), panic_call, None);\n     MacEager::expr(if_expr)\n }\n "}, {"sha": "66463eeb907135963b1e1453be108deb2e6349c1", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -1173,7 +1173,8 @@ fn quoted_tt_to_string(tt: &mbe::TokenTree) -> String {\n         mbe::TokenTree::MetaVar(_, name) => format!(\"${}\", name),\n         mbe::TokenTree::MetaVarDecl(_, name, kind) => format!(\"${}:{}\", name, kind),\n         _ => panic!(\n-            \"unexpected mbe::TokenTree::{{Sequence or Delimited}} \\\n+            \"{}\",\n+            \"unexpected mbe::TokenTree::{Sequence or Delimited} \\\n              in follow set checker\"\n         ),\n     }"}, {"sha": "c56eb09b63471ad96408bae68f8f65eda0c084d1", "filename": "compiler/rustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2FCargo.toml?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -20,3 +20,4 @@ rustc_feature = { path = \"../rustc_feature\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_parse_format = { path = \"../rustc_parse_format\" }"}, {"sha": "81549be4b09151ca000bce483b63e3fc02f40d30", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -55,6 +55,7 @@ mod levels;\n mod methods;\n mod non_ascii_idents;\n mod nonstandard_style;\n+mod panic_fmt;\n mod passes;\n mod redundant_semicolon;\n mod traits;\n@@ -80,6 +81,7 @@ use internal::*;\n use methods::*;\n use non_ascii_idents::*;\n use nonstandard_style::*;\n+use panic_fmt::PanicFmt;\n use redundant_semicolon::*;\n use traits::*;\n use types::*;\n@@ -166,6 +168,7 @@ macro_rules! late_lint_passes {\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n                 DropTraitConstraints: DropTraitConstraints,\n                 TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n+                PanicFmt: PanicFmt,\n             ]\n         );\n     };"}, {"sha": "0d2b20989b0c335d9634d71416cd3d31ee418b69", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -0,0 +1,150 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_ast as ast;\n+use rustc_errors::{pluralize, Applicability};\n+use rustc_hir as hir;\n+use rustc_middle::ty;\n+use rustc_parse_format::{ParseMode, Parser, Piece};\n+use rustc_span::{sym, InnerSpan};\n+\n+declare_lint! {\n+    /// The `panic_fmt` lint detects `panic!(\"..\")` with `{` or `}` in the string literal.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,no_run\n+    /// panic!(\"{}\");\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// `panic!(\"{}\")` panics with the message `\"{}\"`, as a `panic!()` invocation\n+    /// with a single argument does not use `format_args!()`.\n+    /// A future edition of Rust will interpret this string as format string,\n+    /// which would break this.\n+    PANIC_FMT,\n+    Warn,\n+    \"detect braces in single-argument panic!() invocations\",\n+    report_in_external_macro\n+}\n+\n+declare_lint_pass!(PanicFmt => [PANIC_FMT]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PanicFmt {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n+        if let hir::ExprKind::Call(f, [arg]) = &expr.kind {\n+            if let &ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(f).kind() {\n+                if Some(def_id) == cx.tcx.lang_items().begin_panic_fn()\n+                    || Some(def_id) == cx.tcx.lang_items().panic_fn()\n+                {\n+                    check_panic(cx, f, arg);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tcx hir::Expr<'tcx>) {\n+    if let hir::ExprKind::Lit(lit) = &arg.kind {\n+        if let ast::LitKind::Str(sym, _) = lit.node {\n+            let mut expn = f.span.ctxt().outer_expn_data();\n+            if let Some(id) = expn.macro_def_id {\n+                if cx.tcx.is_diagnostic_item(sym::std_panic_macro, id)\n+                    || cx.tcx.is_diagnostic_item(sym::core_panic_macro, id)\n+                {\n+                    let fmt = sym.as_str();\n+                    if !fmt.contains(&['{', '}'][..]) {\n+                        return;\n+                    }\n+\n+                    let fmt_span = arg.span.source_callsite();\n+\n+                    let (snippet, style) =\n+                        match cx.sess().parse_sess.source_map().span_to_snippet(fmt_span) {\n+                            Ok(snippet) => {\n+                                // Count the number of `#`s between the `r` and `\"`.\n+                                let style = snippet.strip_prefix('r').and_then(|s| s.find('\"'));\n+                                (Some(snippet), style)\n+                            }\n+                            Err(_) => (None, None),\n+                        };\n+\n+                    let mut fmt_parser =\n+                        Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n+                    let n_arguments =\n+                        (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n+\n+                    // Unwrap another level of macro expansion if this panic!()\n+                    // was expanded from assert!() or debug_assert!().\n+                    for &assert in &[sym::assert_macro, sym::debug_assert_macro] {\n+                        let parent = expn.call_site.ctxt().outer_expn_data();\n+                        if parent\n+                            .macro_def_id\n+                            .map_or(false, |id| cx.tcx.is_diagnostic_item(assert, id))\n+                        {\n+                            expn = parent;\n+                        }\n+                    }\n+\n+                    if n_arguments > 0 && fmt_parser.errors.is_empty() {\n+                        let arg_spans: Vec<_> = match &fmt_parser.arg_places[..] {\n+                            [] => vec![fmt_span],\n+                            v => v.iter().map(|span| fmt_span.from_inner(*span)).collect(),\n+                        };\n+                        cx.struct_span_lint(PANIC_FMT, arg_spans, |lint| {\n+                            let mut l = lint.build(match n_arguments {\n+                                1 => \"panic message contains an unused formatting placeholder\",\n+                                _ => \"panic message contains unused formatting placeholders\",\n+                            });\n+                            l.note(\"this message is not used as a format string when given without arguments, but will be in a future Rust edition\");\n+                            if expn.call_site.contains(arg.span) {\n+                                l.span_suggestion(\n+                                    arg.span.shrink_to_hi(),\n+                                    &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n+                                    \", ...\".into(),\n+                                    Applicability::HasPlaceholders,\n+                                );\n+                                l.span_suggestion(\n+                                    arg.span.shrink_to_lo(),\n+                                    \"or add a \\\"{}\\\" format string to use the message literally\",\n+                                    \"\\\"{}\\\", \".into(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                            l.emit();\n+                        });\n+                    } else {\n+                        let brace_spans: Option<Vec<_>> = snippet\n+                            .filter(|s| s.starts_with('\"') || s.starts_with(\"r#\"))\n+                            .map(|s| {\n+                                s.char_indices()\n+                                    .filter(|&(_, c)| c == '{' || c == '}')\n+                                    .map(|(i, _)| {\n+                                        fmt_span.from_inner(InnerSpan { start: i, end: i + 1 })\n+                                    })\n+                                    .collect()\n+                            });\n+                        let msg = match &brace_spans {\n+                            Some(v) if v.len() == 1 => \"panic message contains a brace\",\n+                            _ => \"panic message contains braces\",\n+                        };\n+                        cx.struct_span_lint(PANIC_FMT, brace_spans.unwrap_or(vec![expn.call_site]), |lint| {\n+                            let mut l = lint.build(msg);\n+                            l.note(\"this message is not used as a format string, but will be in a future Rust edition\");\n+                            if expn.call_site.contains(arg.span) {\n+                                l.span_suggestion(\n+                                    arg.span.shrink_to_lo(),\n+                                    \"add a \\\"{}\\\" format string to use the message literally\",\n+                                    \"\\\"{}\\\", \".into(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                            l.emit();\n+                        });\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "5a087c41f58b9802ae7ab8b8b4d2eb1cc7485bf8", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -113,6 +113,10 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n         }\n     }\n \n+    for m in tcx.hir().krate().exported_macros {\n+        collector.observe_item(m.attrs, m.hir_id);\n+    }\n+\n     collector.items\n }\n "}, {"sha": "338ff005995d5279d8206ec361db218ee6e611cb", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -267,6 +267,7 @@ symbols! {\n         asm,\n         assert,\n         assert_inhabited,\n+        assert_macro,\n         assert_receiver_is_total_eq,\n         assert_uninit_valid,\n         assert_zero_valid,\n@@ -393,6 +394,7 @@ symbols! {\n         copysignf64,\n         core,\n         core_intrinsics,\n+        core_panic_macro,\n         cosf32,\n         cosf64,\n         crate_id,\n@@ -416,6 +418,7 @@ symbols! {\n         dead_code,\n         dealloc,\n         debug,\n+        debug_assert_macro,\n         debug_assertions,\n         debug_struct,\n         debug_trait,\n@@ -789,6 +792,7 @@ symbols! {\n         panic_runtime,\n         panic_str,\n         panic_unwind,\n+        panicking,\n         param_attrs,\n         parent_trait,\n         partial_cmp,\n@@ -1064,6 +1068,7 @@ symbols! {\n         staticlib,\n         std,\n         std_inject,\n+        std_panic_macro,\n         stmt,\n         stmt_expr_attributes,\n         stop_after_dataflow,"}, {"sha": "0416a7614a3f6830ed8395efd19bbe98116d749e", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -2,6 +2,7 @@\n #[macro_export]\n #[allow_internal_unstable(core_panic, const_caller_location)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"core_panic_macro\")]\n macro_rules! panic {\n     () => (\n         $crate::panic!(\"explicit panic\")\n@@ -162,6 +163,7 @@ macro_rules! assert_ne {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"debug_assert_macro\")]\n macro_rules! debug_assert {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert!($($arg)*); })\n }\n@@ -1215,6 +1217,8 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"assert_macro\")]\n+    #[allow_internal_unstable(core_panic)]\n     macro_rules! assert {\n         ($cond:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};"}, {"sha": "b66c482c5e5e37622cc60a17850395e9409aa647", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -85,7 +85,7 @@ fn test_match_option_string() {\n     let five = \"Five\".to_string();\n     match Some(five) {\n         Some(s) => assert_eq!(s, \"Five\"),\n-        None => panic!(\"unexpected None while matching on Some(String { ... })\"),\n+        None => panic!(\"{}\", \"unexpected None while matching on Some(String { ... })\"),\n     }\n }\n "}, {"sha": "de072e83dfc419c1f181b44947ff41b4d83461ee", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -8,6 +8,7 @@\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(libstd_sys_internals)]\n+#[cfg_attr(not(any(bootstrap, test)), rustc_diagnostic_item = \"std_panic_macro\")]\n macro_rules! panic {\n     () => ({ $crate::panic!(\"explicit panic\") });\n     ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });"}, {"sha": "dac9ec3b443d769fbf01856ae5eccfcee05198ac", "filename": "src/test/mir-opt/inst_combine_deref.do_not_miscompile.InstCombine.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fmir-opt%2Finst_combine_deref.do_not_miscompile.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fmir-opt%2Finst_combine_deref.do_not_miscompile.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finst_combine_deref.do_not_miscompile.InstCombine.diff?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -10,7 +10,7 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/inst_combine_deref.rs:60:5: 60:23\n       let mut _9: bool;                    // in scope 0 at $DIR/inst_combine_deref.rs:60:13: 60:21\n       let mut _10: i32;                    // in scope 0 at $DIR/inst_combine_deref.rs:60:13: 60:15\n-      let mut _11: !;                      // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _11: !;                      // in scope 0 at $DIR/inst_combine_deref.rs:60:5: 60:23\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/inst_combine_deref.rs:55:9: 55:10\n           let _2: i32;                     // in scope 1 at $DIR/inst_combine_deref.rs:56:9: 56:10\n@@ -69,11 +69,11 @@\n       }\n   \n       bb2: {\n-          StorageLive(_11);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          begin_panic::<&str>(const \"assertion failed: *y == 99\"); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $DIR/inst_combine_deref.rs:60:5: 60:23\n+          core::panicking::panic(const \"assertion failed: *y == 99\"); // scope 4 at $DIR/inst_combine_deref.rs:60:5: 60:23\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n+                                           // + span: $DIR/inst_combine_deref.rs:60:5: 60:23\n+                                           // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                            // ty::Const\n                                            // + ty: &str\n                                            // + val: Value(Slice { data: Allocation { bytes: [97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 42, 121, 32, 61, 61, 32, 57, 57], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, size: Size { raw: 26 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 })"}, {"sha": "e5a25a171fbe00417469add5e35b271a4723ea1e", "filename": "src/test/ui/auxiliary/fancy-panic.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Fauxiliary%2Ffancy-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Fauxiliary%2Ffancy-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Ffancy-panic.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -0,0 +1,6 @@\n+#[macro_export]\n+macro_rules! fancy_panic {\n+    ($msg:expr) => {\n+        panic!($msg)\n+    };\n+}"}, {"sha": "4e3fa9a3c589ae9f2c053f1cc460ddc4af99dde7", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -31,6 +31,7 @@ fn panic_with_single_argument_does_not_get_formatted() {\n     // RFC #2795 suggests that this may need to change so that captured arguments are formatted.\n     // For stability reasons this will need to part of an edition change.\n \n+    #[allow(panic_fmt)]\n     let msg = std::panic::catch_unwind(|| {\n         panic!(\"{foo}\");\n     }).unwrap_err();"}, {"sha": "e5e656de6fa7f339b968f53acb1cc9d68f49e287", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -57,6 +57,7 @@ fn writeln_1arg() {\n //\n // (Example: Issue #48042)\n #[test]\n+#[allow(panic_fmt)]\n fn to_format_or_not_to_format() {\n     // (\"{}\" is the easiest string to test because if this gets\n     // sent to format_args!, it'll simply fail to compile."}, {"sha": "754dcc287d0f9a639d6f2955ae97a4cf7fa252f8", "filename": "src/test/ui/panic-brace.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Fpanic-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Fpanic-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-brace.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -0,0 +1,31 @@\n+// build-pass (FIXME(62277): should be check-pass)\n+// aux-build:fancy-panic.rs\n+\n+extern crate fancy_panic;\n+\n+const C: &str = \"abc {}\";\n+static S: &str = \"{bla}\";\n+\n+#[allow(unreachable_code)]\n+fn main() {\n+    panic!(\"here's a brace: {\"); //~ WARN panic message contains a brace\n+    std::panic!(\"another one: }\"); //~ WARN panic message contains a brace\n+    core::panic!(\"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n+    assert!(false, \"{:03x} {test} bla\");\n+    //~^ WARN panic message contains unused formatting placeholders\n+    debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains braces\n+    panic!(C); // No warning (yet)\n+    panic!(S); // No warning (yet)\n+    panic!(concat!(\"{\", \"}\")); //~ WARN panic message contains an unused formatting placeholder\n+    panic!(concat!(\"{\", \"{\")); //~ WARN panic message contains braces\n+\n+    fancy_panic::fancy_panic!(\"test {} 123\");\n+    //~^ WARN panic message contains an unused formatting placeholder\n+\n+    // Check that the lint only triggers for std::panic and core::panic,\n+    // not any panic macro:\n+    macro_rules! panic {\n+        ($e:expr) => ();\n+    }\n+    panic!(\"{}\"); // OK\n+}"}, {"sha": "93808891c3c37210e57b035cadde8cc684f0be9a", "filename": "src/test/ui/panic-brace.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Fpanic-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftest%2Fui%2Fpanic-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-brace.stderr?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -0,0 +1,107 @@\n+warning: panic message contains a brace\n+  --> $DIR/panic-brace.rs:11:29\n+   |\n+LL |     panic!(\"here's a brace: {\");\n+   |                             ^\n+   |\n+   = note: `#[warn(panic_fmt)]` on by default\n+   = note: this message is not used as a format string, but will be in a future Rust edition\n+help: add a \"{}\" format string to use the message literally\n+   |\n+LL |     panic!(\"{}\", \"here's a brace: {\");\n+   |            ^^^^^\n+\n+warning: panic message contains a brace\n+  --> $DIR/panic-brace.rs:12:31\n+   |\n+LL |     std::panic!(\"another one: }\");\n+   |                               ^\n+   |\n+   = note: this message is not used as a format string, but will be in a future Rust edition\n+help: add a \"{}\" format string to use the message literally\n+   |\n+LL |     std::panic!(\"{}\", \"another one: }\");\n+   |                 ^^^^^\n+\n+warning: panic message contains an unused formatting placeholder\n+  --> $DIR/panic-brace.rs:13:25\n+   |\n+LL |     core::panic!(\"Hello {}\");\n+   |                         ^^\n+   |\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+help: add the missing argument\n+   |\n+LL |     core::panic!(\"Hello {}\", ...);\n+   |                            ^^^^^\n+help: or add a \"{}\" format string to use the message literally\n+   |\n+LL |     core::panic!(\"{}\", \"Hello {}\");\n+   |                  ^^^^^\n+\n+warning: panic message contains unused formatting placeholders\n+  --> $DIR/panic-brace.rs:14:21\n+   |\n+LL |     assert!(false, \"{:03x} {test} bla\");\n+   |                     ^^^^^^ ^^^^^^\n+   |\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+help: add the missing arguments\n+   |\n+LL |     assert!(false, \"{:03x} {test} bla\", ...);\n+   |                                       ^^^^^\n+help: or add a \"{}\" format string to use the message literally\n+   |\n+LL |     assert!(false, \"{}\", \"{:03x} {test} bla\");\n+   |                    ^^^^^\n+\n+warning: panic message contains braces\n+  --> $DIR/panic-brace.rs:16:27\n+   |\n+LL |     debug_assert!(false, \"{{}} bla\");\n+   |                           ^^^^\n+   |\n+   = note: this message is not used as a format string, but will be in a future Rust edition\n+help: add a \"{}\" format string to use the message literally\n+   |\n+LL |     debug_assert!(false, \"{}\", \"{{}} bla\");\n+   |                          ^^^^^\n+\n+warning: panic message contains an unused formatting placeholder\n+  --> $DIR/panic-brace.rs:19:12\n+   |\n+LL |     panic!(concat!(\"{\", \"}\"));\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+help: add the missing argument\n+   |\n+LL |     panic!(concat!(\"{\", \"}\"), ...);\n+   |                             ^^^^^\n+help: or add a \"{}\" format string to use the message literally\n+   |\n+LL |     panic!(\"{}\", concat!(\"{\", \"}\"));\n+   |            ^^^^^\n+\n+warning: panic message contains braces\n+  --> $DIR/panic-brace.rs:20:5\n+   |\n+LL |     panic!(concat!(\"{\", \"{\"));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this message is not used as a format string, but will be in a future Rust edition\n+help: add a \"{}\" format string to use the message literally\n+   |\n+LL |     panic!(\"{}\", concat!(\"{\", \"{\"));\n+   |            ^^^^^\n+\n+warning: panic message contains an unused formatting placeholder\n+  --> $DIR/panic-brace.rs:22:37\n+   |\n+LL |     fancy_panic::fancy_panic!(\"test {} 123\");\n+   |                                     ^^\n+   |\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+\n+warning: 8 warnings emitted\n+"}, {"sha": "a52f0997d439dbb642946dfe7c40b76895fad0be", "filename": "src/tools/clippy/clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -129,8 +129,11 @@ fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)\n         if let ExprKind::Block(ref block, _) = arms[0].body.kind;\n         if block.stmts.is_empty();\n         if let Some(block_expr) = &block.expr;\n-        if let ExprKind::Block(ref inner_block, _) = block_expr.kind;\n-        if let Some(begin_panic_call) = &inner_block.expr;\n+        // inner block is optional. unwarp it if it exists, or use the expression as is otherwise.\n+        if let Some(begin_panic_call) = match block_expr.kind {\n+            ExprKind::Block(ref inner_block, _) => &inner_block.expr,\n+            _ => &block.expr,\n+        };\n         // function call\n         if let Some(args) = match_panic_call(cx, begin_panic_call);\n         if args.len() == 1;"}, {"sha": "19bf67d80c428911156259cef4cf319f224cb694", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -788,7 +788,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         &panic_in_result_fn::PANIC_IN_RESULT_FN,\n         &panic_unimplemented::PANIC,\n-        &panic_unimplemented::PANIC_PARAMS,\n         &panic_unimplemented::TODO,\n         &panic_unimplemented::UNIMPLEMENTED,\n         &panic_unimplemented::UNREACHABLE,\n@@ -1499,7 +1498,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n-        LintId::of(&panic_unimplemented::PANIC_PARAMS),\n         LintId::of(&partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n         LintId::of(&precedence::PRECEDENCE),\n         LintId::of(&ptr::CMP_NULL),\n@@ -1666,7 +1664,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n-        LintId::of(&panic_unimplemented::PANIC_PARAMS),\n         LintId::of(&ptr::CMP_NULL),\n         LintId::of(&ptr::PTR_ARG),\n         LintId::of(&ptr_eq::PTR_EQ),"}, {"sha": "8b10d0716471270fd523fbe32e37317992478a58", "filename": "src/tools/clippy/clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "patch": "@@ -1,30 +1,10 @@\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_panic_call, span_lint};\n+use crate::utils::{is_expn_of, match_panic_call, span_lint};\n use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for missing parameters in `panic!`.\n-    ///\n-    /// **Why is this bad?** Contrary to the `format!` family of macros, there are\n-    /// two forms of `panic!`: if there are no parameters given, the first argument\n-    /// is not a format string and used literally. So while `format!(\"{}\")` will\n-    /// fail to compile, `panic!(\"{}\")` will not.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```no_run\n-    /// panic!(\"This `panic!` is probably missing a parameter there: {}\");\n-    /// ```\n-    pub PANIC_PARAMS,\n-    style,\n-    \"missing parameters in `panic!` calls\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `panic!`.\n     ///\n@@ -89,11 +69,11 @@ declare_clippy_lint! {\n     \"`unreachable!` should not be present in production code\"\n }\n \n-declare_lint_pass!(PanicUnimplemented => [PANIC_PARAMS, UNIMPLEMENTED, UNREACHABLE, TODO, PANIC]);\n+declare_lint_pass!(PanicUnimplemented => [UNIMPLEMENTED, UNREACHABLE, TODO, PANIC]);\n \n impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let Some(params) = match_panic_call(cx, expr) {\n+        if let Some(_) = match_panic_call(cx, expr) {\n             let span = get_outer_span(expr);\n             if is_expn_of(expr.span, \"unimplemented\").is_some() {\n                 span_lint(\n@@ -113,7 +93,6 @@ impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n                 );\n             } else if is_expn_of(expr.span, \"panic\").is_some() {\n                 span_lint(cx, PANIC, span, \"`panic` should not be present in production code\");\n-                match_panic(params, expr, cx);\n             }\n         }\n     }\n@@ -132,20 +111,3 @@ fn get_outer_span(expr: &Expr<'_>) -> Span {\n         }\n     }\n }\n-\n-fn match_panic(params: &[Expr<'_>], expr: &Expr<'_>, cx: &LateContext<'_>) {\n-    if_chain! {\n-        if let ExprKind::Lit(ref lit) = params[0].kind;\n-        if is_direct_expn_of(expr.span, \"panic\").is_some();\n-        if let LitKind::Str(ref string, _) = lit.node;\n-        let string = string.as_str().replace(\"{{\", \"\").replace(\"}}\", \"\");\n-        if let Some(par) = string.find('{');\n-        if string[par..].contains('}');\n-        if params[0].span.source_callee().is_none();\n-        if params[0].span.lo() != params[0].span.hi();\n-        then {\n-            span_lint(cx, PANIC_PARAMS, params[0].span,\n-                      \"you probably are missing some parameter in your format string\");\n-        }\n-    }\n-}"}, {"sha": "6e004aa9a924ffff0d7160eec504a5140051c4b0", "filename": "src/tools/clippy/tests/ui/panic.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4ec27e4b79891b0ebc2ad71a3c4ac94f67d93f93/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec27e4b79891b0ebc2ad71a3c4ac94f67d93f93/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanic.rs?ref=4ec27e4b79891b0ebc2ad71a3c4ac94f67d93f93", "patch": "@@ -1,61 +0,0 @@\n-#![warn(clippy::panic_params)]\n-#![allow(clippy::assertions_on_constants)]\n-fn missing() {\n-    if true {\n-        panic!(\"{}\");\n-    } else if false {\n-        panic!(\"{:?}\");\n-    } else {\n-        assert!(true, \"here be missing values: {}\");\n-    }\n-\n-    panic!(\"{{{this}}}\");\n-}\n-\n-fn ok_single() {\n-    panic!(\"foo bar\");\n-}\n-\n-fn ok_inner() {\n-    // Test for #768\n-    assert!(\"foo bar\".contains(&format!(\"foo {}\", \"bar\")));\n-}\n-\n-fn ok_multiple() {\n-    panic!(\"{}\", \"This is {ok}\");\n-}\n-\n-fn ok_bracket() {\n-    match 42 {\n-        1337 => panic!(\"{so is this\"),\n-        666 => panic!(\"so is this}\"),\n-        _ => panic!(\"}so is that{\"),\n-    }\n-}\n-\n-const ONE: u32 = 1;\n-\n-fn ok_nomsg() {\n-    assert!({ 1 == ONE });\n-    assert!(if 1 == ONE { ONE == 1 } else { false });\n-}\n-\n-fn ok_escaped() {\n-    panic!(\"{{ why should this not be ok? }}\");\n-    panic!(\" or {{ that ?\");\n-    panic!(\" or }} this ?\");\n-    panic!(\" {or {{ that ?\");\n-    panic!(\" }or }} this ?\");\n-    panic!(\"{{ test }\");\n-    panic!(\"{case }}\");\n-}\n-\n-fn main() {\n-    missing();\n-    ok_single();\n-    ok_multiple();\n-    ok_bracket();\n-    ok_inner();\n-    ok_nomsg();\n-    ok_escaped();\n-}"}, {"sha": "1f8ff8ccf55750577675303eb2bcec693119bdda", "filename": "src/tools/clippy/tests/ui/panic.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4ec27e4b79891b0ebc2ad71a3c4ac94f67d93f93/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ec27e4b79891b0ebc2ad71a3c4ac94f67d93f93/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanic.stderr?ref=4ec27e4b79891b0ebc2ad71a3c4ac94f67d93f93", "patch": "@@ -1,28 +0,0 @@\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:5:16\n-   |\n-LL |         panic!(\"{}\");\n-   |                ^^^^\n-   |\n-   = note: `-D clippy::panic-params` implied by `-D warnings`\n-\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:7:16\n-   |\n-LL |         panic!(\"{:?}\");\n-   |                ^^^^^^\n-\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:9:23\n-   |\n-LL |         assert!(true, \"here be missing values: {}\");\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:12:12\n-   |\n-LL |     panic!(\"{{{this}}}\");\n-   |            ^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-"}]}