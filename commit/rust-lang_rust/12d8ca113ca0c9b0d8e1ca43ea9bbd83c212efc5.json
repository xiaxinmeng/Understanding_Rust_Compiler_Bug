{"sha": "12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5", "node_id": "C_kwDOAAsO6NoAKDEyZDhjYTExM2NhMGM5YjBkOGUxY2E0M2VhOWJiZDgzYzIxMmVmYzU", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-11T01:14:50Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-11T01:14:50Z"}, "message": "Use projections rather than is_autoref\n\nAlso includes a lengthy comment arguing the correctness.\n\nCo-authored-by: Niko Matsakis <niko@alum.mit.edu>", "tree": {"sha": "15221d8adc31e281023776d2545d45f7b188f94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15221d8adc31e281023776d2545d45f7b188f94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5", "html_url": "https://github.com/rust-lang/rust/commit/12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "170b02702277229ccaae3ffed916bf6dc57548fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/170b02702277229ccaae3ffed916bf6dc57548fc", "html_url": "https://github.com/rust-lang/rust/commit/170b02702277229ccaae3ffed916bf6dc57548fc"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "45421a57082d8e1cdfa3bfae101dadeaf444d28e", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=12d8ca113ca0c9b0d8e1ca43ea9bbd83c212efc5", "patch": "@@ -6,7 +6,7 @@ use crate::{\n use hir::{def_id::DefId, Body, HirId, HirIdMap};\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n-use rustc_middle::hir::place::PlaceBase;\n+use rustc_middle::hir::place::{PlaceBase, Projection, ProjectionKind};\n use rustc_middle::ty::{ParamEnv, TyCtxt};\n \n pub(super) fn find_consumed_and_borrowed<'a, 'tcx>(\n@@ -114,12 +114,48 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n             .borrowed\n             .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n \n-        // Keep track of whether this is a borrowed temporary (i.e. a borrow of an RValue)\n-        // so that later in generator_interior we can use the correct scope.\n+        // Ordinarily a value is consumed by it's parent, but in the special case of a\n+        // borrowed RValue, we create a reference that lives as long as the temporary scope\n+        // for that expression (typically, the innermost statement, but sometimes the enclosing\n+        // block). We record this fact here so that later in generator_interior\n+        // we can use the correct scope.\n         //\n-        // We ignore borrows that are the result of an autoref because these will be\n-        // immediately consumed and should not extend the temporary's lifetime.\n-        if let (false, PlaceBase::Rvalue) = (is_autoref, place_with_id.place.base) {\n+        // We special case borrows through a dereference (`&*x`, `&mut *x` where `x` is\n+        // some rvalue expression), since these are essentially a copy of a pointer.\n+        // In other words, this borrow does not refer to the\n+        // temporary (`*x`), but to the referent (whatever `x` is a borrow of).\n+        //\n+        // We were considering that we might encounter problems down the line if somehow,\n+        // some part of the compiler were to look at this result and try to use it to\n+        // drive a borrowck-like analysis (this does not currently happen, as of this writing).\n+        // But even this should be fine, because the lifetime of the dereferenced reference\n+        // found in the rvalue is only significant as an intermediate 'link' to the value we\n+        // are producing, and we separately track whether that value is live over a yield.\n+        // Example:\n+        //\n+        // ```notrust\n+        // fn identity<T>(x: &mut T) -> &mut T { x }\n+        // let a: A = ...;\n+        // let y: &'y mut A = &mut *identity(&'a mut a);\n+        //                    ^^^^^^^^^^^^^^^^^^^^^^^^^ the borrow we are talking about\n+        // ```\n+        //\n+        // The expression `*identity(...)` is a deref of an rvalue,\n+        // where the `identity(...)` (the rvalue) produces a return type\n+        // of `&'rv mut A`, where `'a: 'rv`. We then assign this result to\n+        // `'y`, resulting in (transitively) `'a: 'y` (i.e., while `y` is in use,\n+        // `a` will be considered borrowed).  Other parts of the code will ensure\n+        // that if `y` is live over a yield, `&'y mut A` appears in the generator\n+        // state. If `'y` is live, then any sound region analysis must conclude\n+        // that `'a` is also live. So if this causes a bug, blame some other\n+        // part of the code!\n+        let is_deref = place_with_id\n+            .place\n+            .projections\n+            .iter()\n+            .any(|Projection { kind, .. }| *kind == ProjectionKind::Deref);\n+\n+        if let (false, PlaceBase::Rvalue) = (is_deref, place_with_id.place.base) {\n             self.places.borrowed_temporaries.insert(place_with_id.hir_id);\n         }\n     }"}]}