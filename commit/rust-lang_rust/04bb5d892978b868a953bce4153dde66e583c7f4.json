{"sha": "04bb5d892978b868a953bce4153dde66e583c7f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YmI1ZDg5Mjk3OGI4NjhhOTUzYmNlNDE1M2RkZTY2ZTU4M2M3ZjQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-23T15:07:02Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-23T15:07:02Z"}, "message": "Format source codes", "tree": {"sha": "cfe1a19edcee492dcf014135f7b2603870f90692", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe1a19edcee492dcf014135f7b2603870f90692"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04bb5d892978b868a953bce4153dde66e583c7f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04bb5d892978b868a953bce4153dde66e583c7f4", "html_url": "https://github.com/rust-lang/rust/commit/04bb5d892978b868a953bce4153dde66e583c7f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04bb5d892978b868a953bce4153dde66e583c7f4/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b54d6490fc638a136c07b42921ba7ff67743fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b54d6490fc638a136c07b42921ba7ff67743fa", "html_url": "https://github.com/rust-lang/rust/commit/92b54d6490fc638a136c07b42921ba7ff67743fa"}], "stats": {"total": 77, "additions": 47, "deletions": 30}, "files": [{"sha": "29edb0a3e3fa6e2be9f825ef15f01e03cf5bb1cf", "filename": "src/expr.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=04bb5d892978b868a953bce4153dde66e583c7f4", "patch": "@@ -98,16 +98,20 @@ fn format_expr(expr: &ast::Expr,\n         }\n         ast::ExprKind::Tup(ref items) => rewrite_tuple(context, items, expr.span, shape),\n         ast::ExprKind::While(ref cond, ref block, label) => {\n-            ControlFlow::new_while(None, cond, block, label, expr.span).rewrite(context, shape)\n+            ControlFlow::new_while(None, cond, block, label, expr.span)\n+                .rewrite(context, shape)\n         }\n         ast::ExprKind::WhileLet(ref pat, ref cond, ref block, label) => {\n-            ControlFlow::new_while(Some(pat), cond, block, label, expr.span).rewrite(context, shape)\n+            ControlFlow::new_while(Some(pat), cond, block, label, expr.span)\n+                .rewrite(context, shape)\n         }\n         ast::ExprKind::ForLoop(ref pat, ref cond, ref block, label) => {\n-            ControlFlow::new_for(pat, cond, block, label, expr.span).rewrite(context, shape)\n+            ControlFlow::new_for(pat, cond, block, label, expr.span)\n+                .rewrite(context, shape)\n         }\n         ast::ExprKind::Loop(ref block, label) => {\n-            ControlFlow::new_loop(block, label, expr.span).rewrite(context, shape)\n+            ControlFlow::new_loop(block, label, expr.span)\n+                .rewrite(context, shape)\n         }\n         ast::ExprKind::Block(ref block) => block.rewrite(context, shape),\n         ast::ExprKind::If(ref cond, ref if_block, ref else_block) => {\n@@ -175,11 +179,12 @@ fn format_expr(expr: &ast::Expr,\n         ast::ExprKind::Mac(ref mac) => {\n             // Failure to rewrite a marco should not imply failure to\n             // rewrite the expression.\n-            rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n-                wrap_str(context.snippet(expr.span),\n-                         context.config.max_width(),\n-                         shape)\n-            })\n+            rewrite_macro(mac, None, context, shape, MacroPosition::Expression)\n+                .or_else(|| {\n+                             wrap_str(context.snippet(expr.span),\n+                                      context.config.max_width(),\n+                                      shape)\n+                         })\n         }\n         ast::ExprKind::Ret(None) => {\n             wrap_str(\"return\".to_owned(), context.config.max_width(), shape)\n@@ -319,7 +324,8 @@ pub fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n                                   .checked_sub(shape.used_width() + prefix.len() + infix.len()));\n     let rhs_shape = match context.config.control_style() {\n         Style::Default => {\n-            try_opt!(shape.sub_width(suffix.len() + prefix.len())).visual_indent(prefix.len())\n+            try_opt!(shape.sub_width(suffix.len() + prefix.len()))\n+                .visual_indent(prefix.len())\n         }\n         Style::Rfc => try_opt!(shape.block_left(context.config.tab_spaces())),\n     };\n@@ -510,7 +516,8 @@ fn rewrite_closure(capture: ast::CaptureBy,\n \n     // 1 = space between `|...|` and body.\n     let extra_offset = extra_offset(&prefix, shape) + 1;\n-    let body_shape = try_opt!(shape.sub_width(extra_offset)).add_offset(extra_offset);\n+    let body_shape = try_opt!(shape.sub_width(extra_offset))\n+        .add_offset(extra_offset);\n \n     if let ast::ExprKind::Block(ref block) = body.node {\n         // The body of the closure is an empty block.\n@@ -852,8 +859,8 @@ impl<'a> ControlFlow<'a> {\n \n             let new_width = try_opt!(new_width.checked_sub(if_str.len()));\n             let else_expr = &else_node.stmts[0];\n-            let else_str =\n-                try_opt!(else_expr.rewrite(context, Shape::legacy(new_width, Indent::empty())));\n+            let else_str = try_opt!(else_expr.rewrite(context,\n+                                                      Shape::legacy(new_width, Indent::empty())));\n \n             if if_str.contains('\\n') || else_str.contains('\\n') {\n                 return None;\n@@ -1790,11 +1797,11 @@ fn rewrite_call_args(context: &RewriteContext,\n \n fn can_be_overflowed(context: &RewriteContext, args: &[ptr::P<ast::Expr>]) -> bool {\n     match args.last().map(|x| &x.node) {\n-        Some(&ast::ExprKind::Block(..)) |\n         Some(&ast::ExprKind::Match(..)) => {\n             (context.config.fn_call_style() == IndentStyle::Block && args.len() == 1) ||\n             (context.config.fn_call_style() == IndentStyle::Visual && args.len() > 1)\n         }\n+        Some(&ast::ExprKind::Block(..)) |\n         Some(&ast::ExprKind::Closure(..)) => {\n             context.config.fn_call_style() == IndentStyle::Block ||\n             context.config.fn_call_style() == IndentStyle::Visual && args.len() > 1\n@@ -1821,6 +1828,7 @@ fn is_extendable(args: &[ptr::P<ast::Expr>]) -> bool {\n         }\n     } else if args.len() > 1 {\n         match args[args.len() - 1].node {\n+            ast::ExprKind::Block(..) |\n             ast::ExprKind::Closure(..) |\n             ast::ExprKind::Tup(..) => true,\n             _ => false,"}, {"sha": "9256f853f808bedf2bb6d5e8e2f65d37b6066d72", "filename": "src/file_lines.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=04bb5d892978b868a953bce4153dde66e583c7f4", "patch": "@@ -126,7 +126,8 @@ impl FileLines {\n             Some(ref map) => map,\n         };\n \n-        match canonicalize_path_string(file_name).and_then(|file| map.get_vec(&file).ok_or(())) {\n+        match canonicalize_path_string(file_name)\n+                  .and_then(|file| map.get_vec(&file).ok_or(())) {\n             Ok(ranges) => ranges.iter().any(f),\n             Err(_) => false,\n         }"}, {"sha": "e21abb9117fe89cff34b204e2df7d2585aca9ec4", "filename": "src/items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=04bb5d892978b868a953bce4153dde66e583c7f4", "patch": "@@ -1126,7 +1126,8 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n     let generics_indent = indent + result.len();\n     let generics_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n-    let shape = try_opt!(Shape::indented(generics_indent, context.config).sub_width(\" =\".len()));\n+    let shape = try_opt!(Shape::indented(generics_indent, context.config)\n+                             .sub_width(\" =\".len()));\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n \n     result.push_str(&generics_str);"}, {"sha": "adc18c14581e1053ccce7dd9d1b43196d36b1f24", "filename": "src/lists.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=04bb5d892978b868a953bce4153dde66e583c7f4", "patch": "@@ -430,7 +430,8 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n             let post_snippet_trimmed = if post_snippet.starts_with(',') {\n                 post_snippet[1..].trim_matches(white_space)\n             } else if post_snippet.ends_with(',') {\n-                post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space)\n+                post_snippet[..(post_snippet.len() - 1)]\n+                    .trim_matches(white_space)\n             } else {\n                 post_snippet\n             };\n@@ -528,7 +529,8 @@ pub fn struct_lit_shape(shape: Shape,\n                         -> Option<(Option<Shape>, Shape)> {\n     let v_shape = match context.config.struct_lit_style() {\n         IndentStyle::Visual => {\n-            try_opt!(try_opt!(shape.shrink_left(prefix_width)).sub_width(suffix_width))\n+            try_opt!(try_opt!(shape.shrink_left(prefix_width))\n+                         .sub_width(suffix_width))\n         }\n         IndentStyle::Block => {\n             let shape = shape.block_indent(context.config.tab_spaces());"}, {"sha": "30786de6d59d00a709f50e218bdcf2b286b5c368", "filename": "src/macros.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=04bb5d892978b868a953bce4153dde66e583c7f4", "patch": "@@ -172,12 +172,11 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         MacroStyle::Parens => {\n             // Format macro invocation as function call, forcing no trailing\n             // comma because not all macros support them.\n-            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape).map(|rw| {\n-                match position {\n-                    MacroPosition::Item => format!(\"{};\", rw),\n-                    _ => rw,\n-                }\n-            })\n+            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape)\n+                .map(|rw| match position {\n+                         MacroPosition::Item => format!(\"{};\", rw),\n+                         _ => rw,\n+                     })\n         }\n         MacroStyle::Brackets => {\n             let mac_shape = try_opt!(shape.shrink_left(macro_name.len()));"}, {"sha": "5e09a311dcb6a064419b2368a4352d17012feaa1", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=04bb5d892978b868a953bce4153dde66e583c7f4", "patch": "@@ -68,7 +68,8 @@ fn module_file(id: ast::Ident,\n         return path;\n     }\n \n-    match parser::Parser::default_submod_path(id, dir_path, codemap).result {\n+    match parser::Parser::default_submod_path(id, dir_path, codemap)\n+              .result {\n         Ok(parser::ModulePathSuccess { path, .. }) => path,\n         Err(_) => panic!(\"Couldn't find module {}\", id),\n     }"}, {"sha": "17c6533f7a0ea6fcfcd268a827eb93c326c47da1", "filename": "src/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=04bb5d892978b868a953bce4153dde66e583c7f4", "patch": "@@ -35,7 +35,8 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     let re = Regex::new(r\"([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][[:space:]]*\").unwrap();\n     let stripped_str = re.replace_all(orig, \"$1\");\n \n-    let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();\n+    let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false)\n+        .collect::<Vec<&str>>();\n     let shape = fmt.shape.visual_indent(0);\n     let indent = shape.indent.to_string(fmt.config);\n     let punctuation = \":,;.\";"}, {"sha": "ded35d04196e00abef327654b5a9e9a4eafc37c9", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04bb5d892978b868a953bce4153dde66e583c7f4/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=04bb5d892978b868a953bce4153dde66e583c7f4", "patch": "@@ -334,7 +334,8 @@ pub fn wrap_str<S: AsRef<str>>(s: S, max_width: usize, shape: Shape) -> Option<S\n \n impl Rewrite for String {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        wrap_str(self, context.config.max_width(), shape).map(ToOwned::to_owned)\n+        wrap_str(self, context.config.max_width(), shape)\n+            .map(ToOwned::to_owned)\n     }\n }\n "}, {"sha": "70c8033da6c52986e3845d5364dd313021e102e7", "filename": "tests/system.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04bb5d892978b868a953bce4153dde66e583c7f4/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04bb5d892978b868a953bce4153dde66e583c7f4/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=04bb5d892978b868a953bce4153dde66e583c7f4", "patch": "@@ -55,7 +55,8 @@ fn system_tests() {\n // the only difference is the coverage mode\n #[test]\n fn coverage_tests() {\n-    let files = fs::read_dir(\"tests/coverage/source\").expect(\"Couldn't read source dir\");\n+    let files = fs::read_dir(\"tests/coverage/source\")\n+        .expect(\"Couldn't read source dir\");\n     let files = files.map(get_path_string);\n     let (_reports, count, fails) = check_files(files);\n \n@@ -82,7 +83,8 @@ fn assert_output(source: &str, expected_filename: &str) {\n     let _ = filemap::write_all_files(&file_map, &mut out, &config);\n     let output = String::from_utf8(out).unwrap();\n \n-    let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n+    let mut expected_file = fs::File::open(&expected_filename)\n+        .expect(\"Couldn't open target\");\n     let mut expected_text = String::new();\n     expected_file\n         .read_to_string(&mut expected_text)\n@@ -277,7 +279,8 @@ fn get_config(config_file: Option<&str>) -> Config {\n         }\n     };\n \n-    let mut def_config_file = fs::File::open(config_file_name).expect(\"Couldn't open config\");\n+    let mut def_config_file = fs::File::open(config_file_name)\n+        .expect(\"Couldn't open config\");\n     let mut def_config = String::new();\n     def_config_file\n         .read_to_string(&mut def_config)"}]}