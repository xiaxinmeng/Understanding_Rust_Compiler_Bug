{"sha": "0115969dd376968e535d97cd0f0d24136256d8f1", "node_id": "C_kwDOAAsO6NoAKDAxMTU5NjlkZDM3Njk2OGU1MzVkOTdjZDBmMGQyNDEzNjI1NmQ4ZjE", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-11-22T21:40:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-22T21:40:23Z"}, "message": "Rollup merge of #104722 - mejrs:stress, r=ChrisDenton\n\nSpeed up mpsc_stress test\n\nSee https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/mpsc_stress for context\n\nr? windows", "tree": {"sha": "74cb87cd0e0d5e230da39402662ae9daeeb79b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74cb87cd0e0d5e230da39402662ae9daeeb79b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0115969dd376968e535d97cd0f0d24136256d8f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfUHHCRBK7hj4Ov3rIwAAJpgIAITNI0ECApvSStk9syBKcOSE\nVqOC09aOCTOg57b6JD8yh9+EeL9kYmGaNMgaogoVmCa0k959O4IxHGNsp+rB6ku2\nOqkaWSZq9SR4QOFMvhMCK5B7m09kQnCLzD4HzaqZXknngJaAZqtlfTaWXRn/JjAL\nXfKBugEbzeC2jJUfhiXhYhUirPLr3a7+8mYisn/Ujkhtc6OSMG0LRI0624ZObkPj\nPwZrinpMF0CkjizbE62yJPY7L7Uz9SzEuYEkvnjpX8utIuqW7YSZTotADOaU9Ndp\n8ylQr0bcYqKqQGGhOxM2kEgrH5sl8NsQCVSyeQ4WuAUTUJfQsc5XispqWcFopZs=\n=NzrE\n-----END PGP SIGNATURE-----\n", "payload": "tree 74cb87cd0e0d5e230da39402662ae9daeeb79b98\nparent 708f7c5ae10e339ff3d4ed886259ff26773f24e0\nparent f2830f2c88124641152243692468b7beca46d399\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1669153223 +0900\ncommitter GitHub <noreply@github.com> 1669153223 +0900\n\nRollup merge of #104722 - mejrs:stress, r=ChrisDenton\n\nSpeed up mpsc_stress test\n\nSee https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/mpsc_stress for context\n\nr? windows\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0115969dd376968e535d97cd0f0d24136256d8f1", "html_url": "https://github.com/rust-lang/rust/commit/0115969dd376968e535d97cd0f0d24136256d8f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0115969dd376968e535d97cd0f0d24136256d8f1/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "708f7c5ae10e339ff3d4ed886259ff26773f24e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/708f7c5ae10e339ff3d4ed886259ff26773f24e0", "html_url": "https://github.com/rust-lang/rust/commit/708f7c5ae10e339ff3d4ed886259ff26773f24e0"}, {"sha": "f2830f2c88124641152243692468b7beca46d399", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2830f2c88124641152243692468b7beca46d399", "html_url": "https://github.com/rust-lang/rust/commit/f2830f2c88124641152243692468b7beca46d399"}], "stats": {"total": 67, "additions": 51, "deletions": 16}, "files": [{"sha": "c2e1912deb7aa21828c22b30805e7db532e887e2", "filename": "src/test/ui/threads-sendsync/mpsc_stress.rs", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0115969dd376968e535d97cd0f0d24136256d8f1/src%2Ftest%2Fui%2Fthreads-sendsync%2Fmpsc_stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0115969dd376968e535d97cd0f0d24136256d8f1/src%2Ftest%2Fui%2Fthreads-sendsync%2Fmpsc_stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fmpsc_stress.rs?ref=0115969dd376968e535d97cd0f0d24136256d8f1", "patch": "@@ -64,9 +64,11 @@ fn shared_close_sender_does_not_lose_messages_iter() {\n \n #[test]\n fn shared_close_sender_does_not_lose_messages() {\n-    for _ in 0..10000 {\n-        shared_close_sender_does_not_lose_messages_iter();\n-    }\n+    with_minimum_timer_resolution(|| {\n+        for _ in 0..10000 {\n+            shared_close_sender_does_not_lose_messages_iter();\n+        }\n+    });\n }\n \n \n@@ -96,17 +98,11 @@ fn concurrent_recv_timeout_and_upgrade_iter() {\n \n #[test]\n fn concurrent_recv_timeout_and_upgrade() {\n-    // FIXME: fix and enable\n-    if true { return }\n-\n-    // at the moment of writing this test fails like this:\n-    // thread '<unnamed>' panicked at 'assertion failed: `(left == right)`\n-    //  left: `4561387584`,\n-    // right: `0`', libstd/sync/mpsc/shared.rs:253:13\n-\n-    for _ in 0..10000 {\n-        concurrent_recv_timeout_and_upgrade_iter();\n-    }\n+    with_minimum_timer_resolution(|| {\n+        for _ in 0..10000 {\n+            concurrent_recv_timeout_and_upgrade_iter();\n+        }\n+    });\n }\n \n \n@@ -159,7 +155,46 @@ fn concurrent_writes_iter() {\n \n #[test]\n fn concurrent_writes() {\n-    for _ in 0..100 {\n-        concurrent_writes_iter();\n+    with_minimum_timer_resolution(|| {\n+        for _ in 0..100 {\n+            concurrent_writes_iter();\n+        }\n+    });\n+}\n+\n+#[cfg(windows)]\n+pub mod timeapi {\n+    #![allow(non_snake_case)]\n+    use std::ffi::c_uint;\n+\n+    pub const TIMERR_NOERROR: c_uint = 0;\n+\n+    #[link(name = \"winmm\")]\n+    extern \"system\" {\n+        pub fn timeBeginPeriod(uPeriod: c_uint) -> c_uint;\n+        pub fn timeEndPeriod(uPeriod: c_uint) -> c_uint;\n+    }\n+}\n+\n+/// Window's minimum sleep time can be as much as 16ms.\n+// This function evaluates the closure with this resolution\n+// set as low as possible.\n+///\n+/// This takes the above test's duration from 10000*16/1000/60=2.67 minutes to ~16 seconds.\n+fn with_minimum_timer_resolution(f: impl Fn()) {\n+    #[cfg(windows)]\n+    unsafe {\n+        let ret = timeapi::timeBeginPeriod(1);\n+        assert_eq!(ret, timeapi::TIMERR_NOERROR);\n+\n+        f();\n+\n+        let ret = timeapi::timeEndPeriod(1);\n+        assert_eq!(ret, timeapi::TIMERR_NOERROR);\n+    }\n+\n+    #[cfg(not(windows))]\n+    {\n+        f();\n     }\n }"}]}