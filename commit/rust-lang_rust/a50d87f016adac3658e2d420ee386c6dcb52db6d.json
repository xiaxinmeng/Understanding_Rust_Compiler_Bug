{"sha": "a50d87f016adac3658e2d420ee386c6dcb52db6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MGQ4N2YwMTZhZGFjMzY1OGUyZDQyMGVlMzg2YzZkY2I1MmRiNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-30T08:24:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-30T08:24:40Z"}, "message": "Auto merge of #1280 - RalfJung:rustup, r=RalfJung\n\nrustup; fix for TyLayout rename", "tree": {"sha": "bd3ca40ee40a12eac404614c1cc34ab9953afb25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3ca40ee40a12eac404614c1cc34ab9953afb25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a50d87f016adac3658e2d420ee386c6dcb52db6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a50d87f016adac3658e2d420ee386c6dcb52db6d", "html_url": "https://github.com/rust-lang/rust/commit/a50d87f016adac3658e2d420ee386c6dcb52db6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a50d87f016adac3658e2d420ee386c6dcb52db6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d508739cbd1df5a2470d97908f24ee0f348db7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d508739cbd1df5a2470d97908f24ee0f348db7a", "html_url": "https://github.com/rust-lang/rust/commit/2d508739cbd1df5a2470d97908f24ee0f348db7a"}, {"sha": "846ce3c2616ea2fe1a3d5f040953dc5b50d2b2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/846ce3c2616ea2fe1a3d5f040953dc5b50d2b2a0", "html_url": "https://github.com/rust-lang/rust/commit/846ce3c2616ea2fe1a3d5f040953dc5b50d2b2a0"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "42644dc1214013a273a5a760b9d9c707c8f24b1b", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a50d87f016adac3658e2d420ee386c6dcb52db6d/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/a50d87f016adac3658e2d420ee386c6dcb52db6d/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=a50d87f016adac3658e2d420ee386c6dcb52db6d", "patch": "@@ -1 +1 @@\n-150322f86d441752874a8bed603d71119f190b8b\n+0afdf43dc1d9be4c8b422840166b51dd99e56a16"}, {"sha": "fc9bb19c882a479310bb7c4bc2126dee6f31282e", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a50d87f016adac3658e2d420ee386c6dcb52db6d/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d87f016adac3658e2d420ee386c6dcb52db6d/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=a50d87f016adac3658e2d420ee386c6dcb52db6d", "patch": "@@ -4,7 +4,7 @@ use std::mem;\n use rustc::mir;\n use rustc::ty::{\n     self,\n-    layout::{self, LayoutOf, Size, TyLayout},\n+    layout::{self, LayoutOf, Size, TyAndLayout},\n     List, TyCtxt,\n };\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n@@ -84,8 +84,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         self.eval_libc(name)?.to_i32()\n     }\n \n-    /// Helper function to get the `TyLayout` of a `libc` type\n-    fn libc_ty_layout(&mut self, name: &str) -> InterpResult<'tcx, TyLayout<'tcx>> {\n+    /// Helper function to get the `TyAndLayout` of a `libc` type\n+    fn libc_ty_layout(&mut self, name: &str) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n         let this = self.eval_context_mut();\n         let ty = this.resolve_path(&[\"libc\", name]).monomorphic_ty(*this.tcx);\n         this.layout_of(ty)\n@@ -469,7 +469,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n pub fn immty_from_int_checked<'tcx>(\n     int: impl Into<i128>,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n     Ok(ImmTy::try_from_int(int, layout).ok_or_else(|| {\n@@ -479,7 +479,7 @@ pub fn immty_from_int_checked<'tcx>(\n \n pub fn immty_from_uint_checked<'tcx>(\n     int: impl Into<u128>,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n     Ok(ImmTy::try_from_uint(int, layout).ok_or_else(|| {"}, {"sha": "9589ffa1724c2715c2f6b04ddbf8a550f1edf300", "filename": "tests/run-pass/arrays.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a50d87f016adac3658e2d420ee386c6dcb52db6d/tests%2Frun-pass%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d87f016adac3658e2d420ee386c6dcb52db6d/tests%2Frun-pass%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Farrays.rs?ref=a50d87f016adac3658e2d420ee386c6dcb52db6d", "patch": "@@ -35,14 +35,17 @@ fn slice_index() -> u8 {\n     arr[5]\n }\n \n-fn try_from() {\n+fn from() {\n     const N: usize = 16;\n     type Array = [u8; N];\n     let array: Array = [0; N];\n     let slice: &[u8] = &array[..];\n \n     let result = <&Array>::try_from(slice);\n     assert_eq!(&array, result.unwrap());\n+\n+    let vec = Vec::from(array);\n+    assert_eq!(vec.len(), N);\n }\n \n fn eq() {\n@@ -69,7 +72,7 @@ fn main() {\n     assert_eq!(array_array(), [[5, 4], [3, 2], [1, 0]]);\n     assert_eq!(array_repeat(), [42; 8]);\n     assert_eq!(mini_array(), [42]);\n-    try_from();\n+    from();\n     eq();\n     debug();\n }"}]}