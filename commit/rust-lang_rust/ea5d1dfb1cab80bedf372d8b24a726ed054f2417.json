{"sha": "ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNWQxZGZiMWNhYjgwYmVkZjM3MmQ4YjI0YTcyNmVkMDU0ZjI0MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-21T07:31:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-21T07:31:27Z"}, "message": "auto merge of #10567 : sanxiyn/rust/bytepos, r=alexcrichton", "tree": {"sha": "319e66cad1f5ab71ed2514e41d9b6b9323a6afc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/319e66cad1f5ab71ed2514e41d9b6b9323a6afc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "html_url": "https://github.com/rust-lang/rust/commit/ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f804bd94d5b43723e0f156114ab9fd7eea98fc8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f804bd94d5b43723e0f156114ab9fd7eea98fc8f", "html_url": "https://github.com/rust-lang/rust/commit/f804bd94d5b43723e0f156114ab9fd7eea98fc8f"}, {"sha": "f4c1f49049c1d01a09599aa2b7ea4a6523045d38", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c1f49049c1d01a09599aa2b7ea4a6523045d38", "html_url": "https://github.com/rust-lang/rust/commit/f4c1f49049c1d01a09599aa2b7ea4a6523045d38"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "1d74db959a2942a3e2c88b7debbd643eea18715e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "patch": "@@ -29,7 +29,7 @@ use syntax::parse::token;\n use syntax::parse::token::{ident_interner, interner_get};\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::path_to_str;\n-use syntax::codemap::{Span, dummy_sp, BytePos};\n+use syntax::codemap::{Span, dummy_sp, Pos};\n use syntax::opt_vec::OptVec;\n use syntax::visit;\n use syntax::visit::Visitor;\n@@ -2624,7 +2624,7 @@ impl Resolver {\n                     if \"???\" == module_name {\n                         let span = Span {\n                             lo: span.lo,\n-                            hi: span.lo + BytePos(segment_name.len()),\n+                            hi: span.lo + Pos::from_uint(segment_name.len()),\n                             expn_info: span.expn_info,\n                         };\n                         self.resolve_error(span,"}, {"sha": "f7590e7b4ed55747fb40af5b4172c12fed66ab4b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "patch": "@@ -29,9 +29,11 @@ pub trait Pos {\n     fn to_uint(&self) -> uint;\n }\n \n-/// A byte offset\n+/// A byte offset. Keep this small (currently 32-bits), as AST contains\n+/// a lot of them.\n #[deriving(Clone, Eq, IterBytes, Ord)]\n-pub struct BytePos(uint);\n+pub struct BytePos(u32);\n+\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n@@ -42,8 +44,8 @@ pub struct CharPos(uint);\n // have been unsuccessful\n \n impl Pos for BytePos {\n-    fn from_uint(n: uint) -> BytePos { BytePos(n) }\n-    fn to_uint(&self) -> uint { **self }\n+    fn from_uint(n: uint) -> BytePos { BytePos(n as u32) }\n+    fn to_uint(&self) -> uint { **self as uint }\n }\n \n impl Add<BytePos, BytePos> for BytePos {\n@@ -278,7 +280,7 @@ impl CodeMap {\n \n         let filemap = @FileMap {\n             name: filename, substr: substr, src: src,\n-            start_pos: BytePos(start_pos),\n+            start_pos: Pos::from_uint(start_pos),\n             lines: @mut ~[],\n             multibyte_chars: @mut ~[],\n         };"}, {"sha": "dbf485a50cece6b978bf4550acca0e7d3330b535", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "patch": "@@ -247,7 +247,7 @@ pub fn bump(rdr: &mut StringReader) {\n         let last_char = rdr.curr;\n         let next = rdr.src.char_range_at(current_byte_offset);\n         let byte_offset_diff = next.next - current_byte_offset;\n-        rdr.pos = rdr.pos + BytePos(byte_offset_diff);\n+        rdr.pos = rdr.pos + Pos::from_uint(byte_offset_diff);\n         rdr.curr = next.ch;\n         rdr.col = rdr.col + CharPos(1u);\n         if last_char == '\\n' {\n@@ -257,7 +257,7 @@ pub fn bump(rdr: &mut StringReader) {\n \n         if byte_offset_diff > 1 {\n             rdr.filemap.record_multibyte_char(\n-                BytePos(current_byte_offset), byte_offset_diff);\n+                Pos::from_uint(current_byte_offset), byte_offset_diff);\n         }\n     } else {\n         rdr.curr = unsafe { transmute(-1u32) }; // FIXME: #8971: unsound\n@@ -333,7 +333,7 @@ fn consume_any_line_comment(rdr: @mut StringReader)\n             bump(rdr);\n             // line comments starting with \"///\" or \"//!\" are doc-comments\n             if rdr.curr == '/' || rdr.curr == '!' {\n-                let start_bpos = rdr.pos - BytePos(3u);\n+                let start_bpos = rdr.pos - BytePos(3);\n                 while rdr.curr != '\\n' && !is_eof(rdr) {\n                     bump(rdr);\n                 }\n@@ -387,7 +387,7 @@ fn consume_block_comment(rdr: @mut StringReader)\n                       -> Option<TokenAndSpan> {\n     // block comments starting with \"/**\" or \"/*!\" are doc-comments\n     let is_doc_comment = rdr.curr == '*' || rdr.curr == '!';\n-    let start_bpos = rdr.pos - BytePos(if is_doc_comment {3u} else {2u});\n+    let start_bpos = rdr.pos - BytePos(if is_doc_comment {3} else {2});\n \n     let mut level: int = 1;\n     while level > 0 {\n@@ -815,7 +815,7 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n                                // Byte offsetting here is okay because the\n                                // character before position `start` is an\n                                // ascii single quote.\n-                               start - BytePos(1u),\n+                               start - BytePos(1),\n                                rdr.last_pos,\n                                ~\"unterminated character constant\");\n         }"}, {"sha": "8fbd152543dd9f4919d56d4b71e3bab2073a8faa", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "patch": "@@ -349,7 +349,7 @@ mod test {\n     }\n \n     // produce a codemap::span\n-    fn sp (a: uint, b: uint) -> Span {\n+    fn sp(a: u32, b: u32) -> Span {\n         Span{lo:BytePos(a),hi:BytePos(b),expn_info:None}\n     }\n "}, {"sha": "486a7a800a0d9effff41e78e8bf6e4cbb3a564d8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "patch": "@@ -606,7 +606,7 @@ impl Parser {\n             token::GT => self.bump(),\n             token::BINOP(token::SHR) => self.replace_token(\n                 token::GT,\n-                self.span.lo + BytePos(1u),\n+                self.span.lo + BytePos(1),\n                 self.span.hi\n             ),\n             _ => self.fatal(format!(\"expected `{}`, found `{}`\","}, {"sha": "839a7cd9d57b1b5bc6040aaacfddc79d9b71b9f6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5d1dfb1cab80bedf372d8b24a726ed054f2417/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ea5d1dfb1cab80bedf372d8b24a726ed054f2417", "patch": "@@ -2119,7 +2119,7 @@ pub fn maybe_print_trailing_comment(s: @ps, span: codemap::Span,\n         if (*cmnt).style != comments::trailing { return; }\n         let span_line = cm.lookup_char_pos(span.hi);\n         let comment_line = cm.lookup_char_pos((*cmnt).pos);\n-        let mut next = (*cmnt).pos + BytePos(1u);\n+        let mut next = (*cmnt).pos + BytePos(1);\n         match next_pos { None => (), Some(p) => next = p }\n         if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n                span_line.line == comment_line.line {"}]}