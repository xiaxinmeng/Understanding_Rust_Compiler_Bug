{"sha": "b5d4bd2a07218a6cd61bace73d7910a3f1a117c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZDRiZDJhMDcyMThhNmNkNjFiYWNlNzNkNzkxMGEzZjFhMTE3YzQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-05-16T16:31:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-05-18T10:45:29Z"}, "message": "Fix lints handling in rustdoc", "tree": {"sha": "67d32e298d1c6b37f4fdec0fa0df93a7dd527cf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67d32e298d1c6b37f4fdec0fa0df93a7dd527cf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4", "html_url": "https://github.com/rust-lang/rust/commit/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "html_url": "https://github.com/rust-lang/rust/commit/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4"}], "stats": {"total": 102, "additions": 85, "deletions": 17}, "files": [{"sha": "9c4683e094634eea384d348ff8c2b9785a6c6dfe", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=b5d4bd2a07218a6cd61bace73d7910a3f1a117c4", "patch": "@@ -778,6 +778,9 @@ fn lint_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, cnum: CrateNum)\n \n     let push = builder.levels.push(&krate.attrs);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n+    for macro_def in &krate.exported_macros {\n+       builder.levels.register_id(macro_def.hir_id);\n+    }\n     intravisit::walk_crate(&mut builder, krate);\n     builder.levels.pop(push);\n "}, {"sha": "7fe3aecca10c5cc48f158b03c0f65184ed14ddbf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b5d4bd2a07218a6cd61bace73d7910a3f1a117c4", "patch": "@@ -3405,6 +3405,7 @@ pub struct Span {\n     pub locol: usize,\n     pub hiline: usize,\n     pub hicol: usize,\n+    pub original: syntax_pos::Span,\n }\n \n impl Span {\n@@ -3413,8 +3414,13 @@ impl Span {\n             filename: FileName::Anon(0),\n             loline: 0, locol: 0,\n             hiline: 0, hicol: 0,\n+            original: syntax_pos::DUMMY_SP,\n         }\n     }\n+\n+    pub fn span(&self) -> syntax_pos::Span {\n+        self.original\n+    }\n }\n \n impl Clean<Span> for syntax_pos::Span {\n@@ -3433,6 +3439,7 @@ impl Clean<Span> for syntax_pos::Span {\n             locol: lo.col.to_usize(),\n             hiline: hi.line,\n             hicol: hi.col.to_usize(),\n+            original: *self,\n         }\n     }\n }"}, {"sha": "2c382a1c1759632806bb316f621aa582564b9fe0", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b5d4bd2a07218a6cd61bace73d7910a3f1a117c4", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         if let Ok(res) = self.resolve(path_str, ns, &current_item, parent_node) {\n                             res\n                         } else {\n-                            resolution_failure(cx, &item.attrs, path_str, &dox, link_range);\n+                            resolution_failure(cx, &item, path_str, &dox, link_range);\n                             // This could just be a normal link or a broken link\n                             // we could potentially check if something is\n                             // \"intra-doc-link-like\" and warn in that case.\n@@ -332,7 +332,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         if let Ok(res) = self.resolve(path_str, ns, &current_item, parent_node) {\n                             res\n                         } else {\n-                            resolution_failure(cx, &item.attrs, path_str, &dox, link_range);\n+                            resolution_failure(cx, &item, path_str, &dox, link_range);\n                             // This could just be a normal link.\n                             continue;\n                         }\n@@ -357,7 +357,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         };\n \n                         if candidates.is_empty() {\n-                            resolution_failure(cx, &item.attrs, path_str, &dox, link_range);\n+                            resolution_failure(cx, &item, path_str, &dox, link_range);\n                             // this could just be a normal link\n                             continue;\n                         }\n@@ -368,7 +368,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         } else {\n                             ambiguity_error(\n                                 cx,\n-                                &item.attrs,\n+                                &item,\n                                 path_str,\n                                 &dox,\n                                 link_range,\n@@ -381,7 +381,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         if let Some(res) = macro_resolve(cx, path_str) {\n                             (res, None)\n                         } else {\n-                            resolution_failure(cx, &item.attrs, path_str, &dox, link_range);\n+                            resolution_failure(cx, &item, path_str, &dox, link_range);\n                             continue\n                         }\n                     }\n@@ -452,16 +452,24 @@ fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Res> {\n /// line containing the failure as a note as well.\n fn resolution_failure(\n     cx: &DocContext<'_>,\n-    attrs: &Attributes,\n+    item: &Item,\n     path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n ) {\n+    let hir_id = match cx.as_local_hir_id(item.def_id) {\n+        Some(hir_id) => hir_id,\n+        None => {\n+            // If non-local, no need to check anything.\n+            return;\n+        }\n+    };\n+    let attrs = &item.attrs;\n     let sp = span_of_attrs(attrs);\n \n     let mut diag = cx.tcx.struct_span_lint_hir(\n         lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-        hir::CRATE_HIR_ID,\n+        hir_id,\n         sp,\n         &format!(\"`[{}]` cannot be resolved, ignoring it...\", path_str),\n     );\n@@ -495,12 +503,20 @@ fn resolution_failure(\n \n fn ambiguity_error(\n     cx: &DocContext<'_>,\n-    attrs: &Attributes,\n+    item: &Item,\n     path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n     candidates: PerNS<Option<Res>>,\n ) {\n+    let hir_id = match cx.as_local_hir_id(item.def_id) {\n+        Some(hir_id) => hir_id,\n+        None => {\n+            // If non-local, no need to check anything.\n+            return;\n+        }\n+    };\n+    let attrs = &item.attrs;\n     let sp = span_of_attrs(attrs);\n \n     let mut msg = format!(\"`{}` is \", path_str);\n@@ -532,7 +548,7 @@ fn ambiguity_error(\n \n     let mut diag = cx.tcx.struct_span_lint_hir(\n         lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-        hir::CRATE_HIR_ID,\n+        hir_id,\n         sp,\n         &msg,\n     );"}, {"sha": "d9af33ac5b622a39f288c14b3eca760c02900245", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=b5d4bd2a07218a6cd61bace73d7910a3f1a117c4", "patch": "@@ -1,7 +1,6 @@\n //! Contains information about \"passes\", used to modify crate information during the documentation\n //! process.\n \n-use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::lint as lint;\n use rustc::middle::privacy::AccessLevels;\n@@ -314,10 +313,13 @@ pub fn look_for_tests<'tcx>(\n     item: &Item,\n     check_missing_code: bool,\n ) {\n-    if cx.as_local_hir_id(item.def_id).is_none() {\n-        // If non-local, no need to check anything.\n-        return;\n-    }\n+    let hir_id = match cx.as_local_hir_id(item.def_id) {\n+        Some(hir_id) => hir_id,\n+        None => {\n+            // If non-local, no need to check anything.\n+            return;\n+        }\n+    };\n \n     struct Tests {\n         found_tests: usize,\n@@ -336,18 +338,19 @@ pub fn look_for_tests<'tcx>(\n     find_testable_code(&dox, &mut tests, ErrorCodes::No);\n \n     if check_missing_code == true && tests.found_tests == 0 {\n+        let sp = span_of_attrs(&item.attrs).substitute_dummy(item.source.span());\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n-            hir::CRATE_HIR_ID,\n-            span_of_attrs(&item.attrs),\n+            hir_id,\n+            sp,\n             \"Missing code example in this documentation\");\n         diag.emit();\n     } else if check_missing_code == false &&\n               tests.found_tests > 0 &&\n               !cx.renderinfo.borrow().access_levels.is_doc_reachable(item.def_id) {\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,\n-            hir::CRATE_HIR_ID,\n+            hir_id,\n             span_of_attrs(&item.attrs),\n             \"Documentation test in private item\");\n         diag.emit();"}, {"sha": "3bb1a2b7bef0b3c9cbd6ecb418b48ecba136c9c4", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs?ref=b5d4bd2a07218a6cd61bace73d7910a3f1a117c4", "patch": "@@ -0,0 +1,39 @@\n+#![deny(missing_docs)]\n+#![deny(missing_doc_code_examples)]\n+\n+//! crate level doc\n+//! ```\n+//! println!(\"hello\"):\n+//! ```\n+\n+\n+/// doc\n+///\n+/// ```\n+/// println!(\"hello\");\n+/// ```\n+fn test() {\n+}\n+\n+#[allow(missing_docs)]\n+mod module1 {\n+}\n+\n+#[allow(missing_doc_code_examples)]\n+/// doc\n+mod module2 {\n+\n+  /// doc\n+  pub fn test() {}\n+}\n+\n+/// doc\n+///\n+/// ```\n+/// println!(\"hello\");\n+/// ```\n+pub mod module3 {\n+\n+  /// doc\n+  pub fn test() {}\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5d4bd2a07218a6cd61bace73d7910a3f1a117c4/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr?ref=b5d4bd2a07218a6cd61bace73d7910a3f1a117c4"}]}