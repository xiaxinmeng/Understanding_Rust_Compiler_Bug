{"sha": "ee02cdfb0bdde08acf8821242fd68ba4137a8582", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDJjZGZiMGJkZGUwOGFjZjg4MjEyNDJmZDY4YmE0MTM3YTg1ODI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-03-31T09:42:49Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-04-27T09:55:13Z"}, "message": "Add config_proc_macro", "tree": {"sha": "27dd8c53c485b029cdeb0918e9cda84a538a2cd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27dd8c53c485b029cdeb0918e9cda84a538a2cd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee02cdfb0bdde08acf8821242fd68ba4137a8582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee02cdfb0bdde08acf8821242fd68ba4137a8582", "html_url": "https://github.com/rust-lang/rust/commit/ee02cdfb0bdde08acf8821242fd68ba4137a8582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee02cdfb0bdde08acf8821242fd68ba4137a8582/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa53d2dc423b6affbdf9a553c489c3c4be4934da", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa53d2dc423b6affbdf9a553c489c3c4be4934da", "html_url": "https://github.com/rust-lang/rust/commit/aa53d2dc423b6affbdf9a553c489c3c4be4934da"}], "stats": {"total": 429, "additions": 429, "deletions": 0}, "files": [{"sha": "0ed465c66fe90572204525008d7b971b69f1fef1", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -143,6 +143,15 @@ dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"config_proc_macro\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"constant_time_eq\"\n version = \"0.1.3\"\n@@ -772,6 +781,7 @@ dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytecount 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"config_proc_macro 0.1.0\",\n  \"derive-new 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "ba888db72abcf2f282272fd9e4f71eb46c0cafa1", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -60,6 +60,8 @@ dirs = \"1.0.4\"\n ignore = \"0.4.6\"\n annotate-snippets = { version = \"0.5.0\", features = [\"ansi_term\"] }\n \n+config_proc_macro = { path = \"config_proc_macro\" }\n+\n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n # for more information."}, {"sha": "9f970225adb6a6ada5c22d46d02684b6b0f5525e", "filename": "config_proc_macro/.gitignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2F.gitignore?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1 @@\n+target/\n\\ No newline at end of file"}, {"sha": "6ee8e34b13fc58880eeed1bd67e8ad5e7a1106f8", "filename": "config_proc_macro/Cargo.lock", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2FCargo.lock?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1,68 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+[[package]]\n+name = \"config_proc_macro\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.89 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"0.4.27\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"quote\"\n+version = \"0.6.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde\"\n+version = \"1.0.89\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde_derive 1.0.89 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_derive\"\n+version = \"1.0.89\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"0.15.29\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[metadata]\n+\"checksum proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4d317f9caece796be1980837fd5cb3dfec5613ebdb04ad0956deea83ce168915\"\n+\"checksum quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdd8e04bd9c52e0342b406469d494fcb033be4bdbe5c606016defbb1681411e1\"\n+\"checksum serde 1.0.89 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92514fb95f900c9b5126e32d020f5c6d40564c27a5ea6d1d7d9f157a96623560\"\n+\"checksum serde_derive 1.0.89 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb6eabf4b5914e88e24eea240bb7c9f9a2cbc1bbbe8d961d381975ec3c6b806c\"\n+\"checksum syn 0.15.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1825685f977249735d510a242a6727b46efe914bb67e38d30c071b1b72b1d5c2\"\n+\"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\""}, {"sha": "45f80bf09563514493d1f4dface8b2f315e787c5", "filename": "config_proc_macro/Cargo.toml", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2FCargo.toml?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1,20 @@\n+[package]\n+name = \"config_proc_macro\"\n+version = \"0.1.0\"\n+authors = [\"topecongiro <seuchida@gmail.com>\"]\n+edition = \"2018\"\n+\n+[lib]\n+proc-macro = true\n+\n+[dependencies]\n+proc-macro2 = \"0.4\"\n+quote = \"0.6\"\n+syn = { version = \"0.15\", features = [\"full\", \"visit\"] }\n+\n+[dev-dependencies]\n+serde = { version = \"1.0\", features = [\"derive\"] }\n+\n+[features]\n+default = []\n+debug-with-rustfmt = []"}, {"sha": "cd0a701479b09bcc1d3fc8faf311877f0d491812", "filename": "config_proc_macro/src/attrs.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fattrs.rs?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1,41 @@\n+pub fn find_doc_hint(attrs: &[syn::Attribute]) -> Option<String> {\n+    attrs.iter().filter_map(doc_hint).next()\n+}\n+\n+pub fn is_doc_hint(attr: &syn::Attribute) -> bool {\n+    is_attr_name_value(attr, \"doc_hint\")\n+}\n+\n+pub fn doc_hint(attr: &syn::Attribute) -> Option<String> {\n+    get_name_value_str_lit(attr, \"doc_hint\")\n+}\n+\n+pub fn find_config_value(attrs: &[syn::Attribute]) -> Option<String> {\n+    attrs.iter().filter_map(config_value).next()\n+}\n+\n+pub fn config_value(attr: &syn::Attribute) -> Option<String> {\n+    get_name_value_str_lit(attr, \"value\")\n+}\n+\n+pub fn is_config_value(attr: &syn::Attribute) -> bool {\n+    is_attr_name_value(attr, \"value\")\n+}\n+\n+fn is_attr_name_value(attr: &syn::Attribute, name: &str) -> bool {\n+    attr.interpret_meta().map_or(false, |meta| match meta {\n+        syn::Meta::NameValue(syn::MetaNameValue { ref ident, .. }) if ident == name => true,\n+        _ => false,\n+    })\n+}\n+\n+fn get_name_value_str_lit(attr: &syn::Attribute, name: &str) -> Option<String> {\n+    attr.interpret_meta().and_then(|meta| match meta {\n+        syn::Meta::NameValue(syn::MetaNameValue {\n+            ref ident,\n+            lit: syn::Lit::Str(ref lit_str),\n+            ..\n+        }) if ident == name => Some(lit_str.value()),\n+        _ => None,\n+    })\n+}"}, {"sha": "daff3f5c61cfe3819a30236351bcbc4fcdde6770", "filename": "config_proc_macro/src/config_type.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fconfig_type.rs?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1,13 @@\n+use proc_macro2::TokenStream;\n+\n+use crate::item_enum::define_config_type_on_enum;\n+use crate::item_struct::define_config_type_on_struct;\n+\n+pub fn define_config_type(input: &syn::Item) -> TokenStream {\n+    match input {\n+        syn::Item::Struct(st) => define_config_type_on_struct(st),\n+        syn::Item::Enum(en) => define_config_type_on_enum(en),\n+        _ => panic!(\"Expected enum or struct\"),\n+    }\n+    .unwrap()\n+}"}, {"sha": "acb00a99cb4e513d41dcc0cad8e4a55392553521", "filename": "config_proc_macro/src/item_enum.rs", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Fitem_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Fitem_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fitem_enum.rs?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1,177 @@\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+\n+use crate::attrs::*;\n+use crate::utils::*;\n+\n+type Variants = syn::punctuated::Punctuated<syn::Variant, syn::Token![,]>;\n+\n+pub fn define_config_type_on_enum(em: &syn::ItemEnum) -> syn::Result<TokenStream> {\n+    let syn::ItemEnum {\n+        vis,\n+        enum_token,\n+        ident,\n+        generics,\n+        variants,\n+        ..\n+    } = em;\n+\n+    let mod_name_str = format!(\"__define_config_type_on_enum_{}\", ident);\n+    let mod_name = syn::Ident::new(&mod_name_str, ident.span());\n+    let variants = fold_quote(variants.iter().map(process_variant), |meta| quote!(#meta,));\n+\n+    let impl_doc_hint = impl_doc_hint(&em.ident, &em.variants);\n+    let impl_from_str = impl_from_str(&em.ident, &em.variants);\n+    let impl_serde = impl_serde(&em.ident, &em.variants);\n+    let impl_deserialize = impl_deserialize(&em.ident, &em.variants);\n+\n+    Ok(quote! {\n+        #[allow(non_snake_case)]\n+        mod #mod_name {\n+            #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n+            pub #enum_token #ident #generics { #variants }\n+            #impl_doc_hint\n+            #impl_from_str\n+            #impl_serde\n+            #impl_deserialize\n+        }\n+        #vis use #mod_name::#ident;\n+    })\n+}\n+\n+/// Remove attributes specific to `config_proc_macro` from enum variant fields.\n+fn process_variant(variant: &syn::Variant) -> TokenStream {\n+    let metas = variant\n+        .attrs\n+        .iter()\n+        .filter(|attr| !is_doc_hint(attr) && !is_config_value(attr));\n+    let attrs = fold_quote(metas, |meta| quote!(#meta));\n+    let syn::Variant { ident, fields, .. } = variant;\n+    quote!(#attrs #ident #fields)\n+}\n+\n+fn impl_doc_hint(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n+    let doc_hint = variants\n+        .iter()\n+        .map(doc_hint_of_variant)\n+        .collect::<Vec<_>>()\n+        .join(\"|\");\n+    let doc_hint = format!(\"[{}]\", doc_hint);\n+    quote! {\n+        use crate::config::ConfigType;\n+        impl ConfigType for #ident {\n+            fn doc_hint() -> String {\n+                #doc_hint.to_owned()\n+            }\n+        }\n+    }\n+}\n+\n+fn impl_from_str(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n+    let vs = variants\n+        .iter()\n+        .filter(|v| is_unit(v))\n+        .map(|v| (config_value_of_variant(v), &v.ident));\n+    let if_patterns = fold_quote(vs, |(s, v)| {\n+        quote! {\n+            if #s.eq_ignore_ascii_case(s) {\n+                return Ok(#ident::#v);\n+            }\n+        }\n+    });\n+    quote! {\n+        impl ::std::str::FromStr for #ident {\n+            type Err = &'static str;\n+\n+            fn from_str(s: &str) -> Result<Self, Self::Err> {\n+                #if_patterns\n+                return Err(\"Bad variant\");\n+            }\n+        }\n+    }\n+}\n+\n+fn doc_hint_of_variant(variant: &syn::Variant) -> String {\n+    find_doc_hint(&variant.attrs).unwrap_or(variant.ident.to_string())\n+}\n+\n+fn config_value_of_variant(variant: &syn::Variant) -> String {\n+    find_config_value(&variant.attrs).unwrap_or(variant.ident.to_string())\n+}\n+\n+fn impl_serde(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n+    let arms = fold_quote(variants.iter(), |v| {\n+        let v_ident = &v.ident;\n+        let pattern = match v.fields {\n+            syn::Fields::Named(..) => quote!(#ident::v_ident{..}),\n+            syn::Fields::Unnamed(..) => quote!(#ident::#v_ident(..)),\n+            syn::Fields::Unit => quote!(#ident::#v_ident),\n+        };\n+        let option_value = config_value_of_variant(v);\n+        quote! {\n+            #pattern => serializer.serialize_str(&#option_value),\n+        }\n+    });\n+\n+    quote! {\n+        impl ::serde::ser::Serialize for #ident {\n+            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+            where\n+                S: ::serde::ser::Serializer,\n+            {\n+                use serde::ser::Error;\n+                match self {\n+                    #arms\n+                    _ => Err(S::Error::custom(format!(\"Cannot serialize {:?}\", self))),\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+// Currently only unit variants are supported.\n+fn impl_deserialize(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n+    let supported_vs = variants.iter().filter(|v| is_unit(v));\n+    let if_patterns = fold_quote(supported_vs, |v| {\n+        let config_value = config_value_of_variant(v);\n+        let variant_ident = &v.ident;\n+        quote! {\n+            if #config_value.eq_ignore_ascii_case(s) {\n+                return Ok(#ident::#variant_ident);\n+            }\n+        }\n+    });\n+\n+    let supported_vs = variants.iter().filter(|v| is_unit(v));\n+    let allowed = fold_quote(supported_vs.map(config_value_of_variant), |s| quote!(#s,));\n+\n+    quote! {\n+        impl<'de> serde::de::Deserialize<'de> for #ident {\n+            fn deserialize<D>(d: D) -> Result<Self, D::Error>\n+            where\n+                D: serde::Deserializer<'de>,\n+            {\n+                use serde::de::{Error, Visitor};\n+                use std::marker::PhantomData;\n+                use std::fmt;\n+                struct StringOnly<T>(PhantomData<T>);\n+                impl<'de, T> Visitor<'de> for StringOnly<T>\n+                where T: serde::Deserializer<'de> {\n+                    type Value = String;\n+                    fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                        formatter.write_str(\"string\")\n+                    }\n+                    fn visit_str<E>(self, value: &str) -> Result<String, E> {\n+                        Ok(String::from(value))\n+                    }\n+                }\n+                let s = &d.deserialize_string(StringOnly::<D>(PhantomData))?;\n+\n+                #if_patterns\n+\n+                static ALLOWED: &'static[&str] = &[#allowed];\n+                Err(D::Error::unknown_variant(&s, ALLOWED))\n+            }\n+        }\n+    }\n+}"}, {"sha": "f03ff7e30d82ef67adec6abe43f995f3bb7de9ee", "filename": "config_proc_macro/src/item_struct.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Fitem_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Fitem_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fitem_struct.rs?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1,5 @@\n+use proc_macro2::TokenStream;\n+\n+pub fn define_config_type_on_struct(_st: &syn::ItemStruct) -> syn::Result<TokenStream> {\n+    unimplemented!()\n+}"}, {"sha": "66cfd3c727dda36692979e8c639610cc5b0a9791", "filename": "config_proc_macro/src/lib.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Flib.rs?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1,27 @@\n+//! This crate provides a derive macro for `ConfigType`.\n+\n+#![recursion_limit = \"256\"]\n+\n+extern crate proc_macro;\n+\n+mod attrs;\n+mod config_type;\n+mod item_enum;\n+mod item_struct;\n+mod utils;\n+\n+use proc_macro::TokenStream;\n+use syn::parse_macro_input;\n+\n+#[proc_macro_attribute]\n+pub fn config_type(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    let input = parse_macro_input!(input as syn::Item);\n+    let output = config_type::define_config_type(&input);\n+\n+    #[cfg(feature = \"debug-with-rustfmt\")]\n+    {\n+        utils::debug_with_rustfmt(&output);\n+    }\n+\n+    TokenStream::from(output)\n+}"}, {"sha": "fec6a8e4907a6312bf29e7acae67adc3123e0df3", "filename": "config_proc_macro/src/utils.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Futils.rs?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1,45 @@\n+use proc_macro2::TokenStream;\n+use quote::{quote, ToTokens};\n+\n+pub fn fold_quote<F, I, T>(input: impl Iterator<Item = I>, f: F) -> TokenStream\n+where\n+    F: Fn(I) -> T,\n+    T: ToTokens,\n+{\n+    input.fold(quote! {}, |acc, x| {\n+        let y = f(x);\n+        quote! { #acc #y }\n+    })\n+}\n+\n+pub fn is_unit(v: &syn::Variant) -> bool {\n+    match v.fields {\n+        syn::Fields::Unit => true,\n+        _ => false,\n+    }\n+}\n+\n+#[cfg(feature = \"debug-with-rustfmt\")]\n+/// Pretty-print the output of proc macro using rustfmt.\n+pub fn debug_with_rustfmt(input: &TokenStream) {\n+    use std::io::Write;\n+    use std::process::{Command, Stdio};\n+\n+    let mut child = Command::new(\"rustfmt\")\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .spawn()\n+        .expect(\"Failed to spawn rustfmt in stdio mode\");\n+    {\n+        let stdin = child.stdin.as_mut().expect(\"Failed to get stdin\");\n+        stdin\n+            .write_all(format!(\"{}\", input).as_bytes())\n+            .expect(\"Failed to write to stdin\");\n+    }\n+    let rustfmt_output = child.wait_with_output().expect(\"rustfmt has failed\");\n+\n+    eprintln!(\n+        \"{}\",\n+        String::from_utf8(rustfmt_output.stdout).expect(\"rustfmt returned non-UTF8 string\")\n+    );\n+}"}, {"sha": "a8b8a901ac93c406affb0282132ae9b16c02b1c0", "filename": "config_proc_macro/tests/smoke.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Ftests%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee02cdfb0bdde08acf8821242fd68ba4137a8582/config_proc_macro%2Ftests%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Ftests%2Fsmoke.rs?ref=ee02cdfb0bdde08acf8821242fd68ba4137a8582", "patch": "@@ -0,0 +1,20 @@\n+pub mod config {\n+    pub trait ConfigType: Sized {\n+        fn doc_hint() -> String;\n+    }\n+}\n+\n+#[allow(dead_code)]\n+#[allow(unused_imports)]\n+mod tests {\n+    use config_proc_macro::config_type;\n+\n+    #[config_type]\n+    enum Bar {\n+        Foo,\n+        Bar,\n+        #[doc_hint = \"foo_bar\"]\n+        FooBar,\n+        FooFoo(i32),\n+    }\n+}"}]}