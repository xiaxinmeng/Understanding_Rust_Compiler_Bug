{"sha": "60892e8b1da1f810c050ea25fdd21c0da64fe025", "node_id": "C_kwDOAAsO6NoAKDYwODkyZThiMWRhMWY4MTBjMDUwZWEyNWZkZDIxYzBkYTY0ZmUwMjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-11T10:29:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-11T10:29:27Z"}, "message": "Visit opaque types during type collection too.", "tree": {"sha": "5f0d31e8c7d004348643727e1119c88af368ebe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f0d31e8c7d004348643727e1119c88af368ebe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60892e8b1da1f810c050ea25fdd21c0da64fe025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60892e8b1da1f810c050ea25fdd21c0da64fe025", "html_url": "https://github.com/rust-lang/rust/commit/60892e8b1da1f810c050ea25fdd21c0da64fe025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60892e8b1da1f810c050ea25fdd21c0da64fe025/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3075f0351386d8fc4110b6c5d7ee618f888d824d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3075f0351386d8fc4110b6c5d7ee618f888d824d", "html_url": "https://github.com/rust-lang/rust/commit/3075f0351386d8fc4110b6c5d7ee618f888d824d"}], "stats": {"total": 462, "additions": 120, "deletions": 342}, "files": [{"sha": "0e7a5ebf5ab6245e205951a36c1d8765212f3ec3", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -644,40 +644,39 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n             }\n         }\n \n-        // Desugared from `impl Trait`, so visited by the function's return type.\n-        hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-            origin: hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..),\n-            ..\n-        }) => {}\n-\n         // Don't call `type_of` on opaque types, since that depends on type\n         // checking function bodies. `check_item_type` ensures that it's called\n         // instead.\n         hir::ItemKind::OpaqueTy(..) => {\n             tcx.ensure().generics_of(def_id);\n             tcx.ensure().predicates_of(def_id);\n             tcx.ensure().explicit_item_bounds(def_id);\n+            tcx.ensure().item_bounds(def_id);\n         }\n-        hir::ItemKind::TyAlias(..)\n-        | hir::ItemKind::Static(..)\n-        | hir::ItemKind::Const(..)\n-        | hir::ItemKind::Fn(..) => {\n+\n+        hir::ItemKind::TyAlias(..) => {\n             tcx.ensure().generics_of(def_id);\n             tcx.ensure().type_of(def_id);\n             tcx.ensure().predicates_of(def_id);\n-            match it.kind {\n-                hir::ItemKind::Fn(..) => tcx.ensure().fn_sig(def_id),\n-                hir::ItemKind::OpaqueTy(..) => tcx.ensure().item_bounds(def_id),\n-                hir::ItemKind::Const(ty, ..) | hir::ItemKind::Static(ty, ..) => {\n-                    if !is_suggestable_infer_ty(ty) {\n-                        let mut visitor = HirPlaceholderCollector::default();\n-                        visitor.visit_item(it);\n-                        placeholder_type_error(tcx, None, visitor.0, false, None, it.kind.descr());\n-                    }\n-                }\n-                _ => (),\n+        }\n+\n+        hir::ItemKind::Static(ty, ..) | hir::ItemKind::Const(ty, ..) => {\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().type_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n+            if !is_suggestable_infer_ty(ty) {\n+                let mut visitor = HirPlaceholderCollector::default();\n+                visitor.visit_item(it);\n+                placeholder_type_error(tcx, None, visitor.0, false, None, it.kind.descr());\n             }\n         }\n+\n+        hir::ItemKind::Fn(..) => {\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().type_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n+            tcx.ensure().fn_sig(def_id);\n+        }\n     }\n }\n "}, {"sha": "f67410986e5590c6e3556c9765296f7977032f31", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -132,12 +132,15 @@ where\n }\n \n fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n     iter::empty()\n }\n fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n     iter::empty()\n }\n fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n     iter::empty()\n }\n fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}"}, {"sha": "c3061327f566e2410ca53b4904d24bcc3fc4225a", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 61, "deletions": 37, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -191,293 +191,317 @@ LL |     T: Iterator<Item: 'static, Item: 'static>,\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:40\n+  --> $DIR/duplicate.rs:134:42\n+   |\n+LL | fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> {\n+   |                              ----------  ^^^^^^^^^^ re-bound here\n+   |                              |\n+   |                              `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:138:42\n+   |\n+LL | fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> {\n+   |                              ----------  ^^^^^^^^^^ re-bound here\n+   |                              |\n+   |                              `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:142:45\n+   |\n+LL | fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> {\n+   |                              -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                              |\n+   |                              `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:146:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:40\n+  --> $DIR/duplicate.rs:148:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:147:43\n+  --> $DIR/duplicate.rs:150:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:150:35\n+  --> $DIR/duplicate.rs:153:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:152:35\n+  --> $DIR/duplicate.rs:155:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:154:38\n+  --> $DIR/duplicate.rs:157:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:158:29\n+  --> $DIR/duplicate.rs:161:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Send>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:163:29\n+  --> $DIR/duplicate.rs:166:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Copy>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:168:32\n+  --> $DIR/duplicate.rs:171:32\n    |\n LL |     T: Iterator<Item: 'static, Item: 'static>,\n    |                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:172:36\n+  --> $DIR/duplicate.rs:175:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:174:36\n+  --> $DIR/duplicate.rs:177:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:176:39\n+  --> $DIR/duplicate.rs:179:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:178:40\n+  --> $DIR/duplicate.rs:181:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:180:40\n+  --> $DIR/duplicate.rs:183:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:182:43\n+  --> $DIR/duplicate.rs:185:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:185:36\n+  --> $DIR/duplicate.rs:188:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:187:36\n+  --> $DIR/duplicate.rs:190:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:189:39\n+  --> $DIR/duplicate.rs:192:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:191:34\n+  --> $DIR/duplicate.rs:194:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:193:34\n+  --> $DIR/duplicate.rs:196:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:195:37\n+  --> $DIR/duplicate.rs:198:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:199:29\n+  --> $DIR/duplicate.rs:202:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Send>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:205:29\n+  --> $DIR/duplicate.rs:208:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Copy>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:211:32\n+  --> $DIR/duplicate.rs:214:32\n    |\n LL |     T: Iterator<Item: 'static, Item: 'static>,\n    |                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:217:32\n+  --> $DIR/duplicate.rs:220:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Send>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:217:32\n+  --> $DIR/duplicate.rs:220:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Send>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:224:32\n+  --> $DIR/duplicate.rs:227:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Copy>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:224:32\n+  --> $DIR/duplicate.rs:227:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Copy>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:231:35\n+  --> $DIR/duplicate.rs:234:35\n    |\n LL |     Self: Iterator<Item: 'static, Item: 'static>,\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:231:35\n+  --> $DIR/duplicate.rs:234:35\n    |\n LL |     Self: Iterator<Item: 'static, Item: 'static>,\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:249:40\n+  --> $DIR/duplicate.rs:252:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:251:44\n+  --> $DIR/duplicate.rs:254:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:253:43\n+  --> $DIR/duplicate.rs:256:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:237:34\n+  --> $DIR/duplicate.rs:240:34\n    |\n LL |     type A: Iterator<Item: Copy, Item: Send>;\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:241:34\n+  --> $DIR/duplicate.rs:244:34\n    |\n LL |     type A: Iterator<Item: Copy, Item: Copy>;\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:245:37\n+  --> $DIR/duplicate.rs:248:37\n    |\n LL |     type A: Iterator<Item: 'static, Item: 'static>;\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error: aborting due to 60 previous errors\n+error: aborting due to 63 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "df2ca025705d3955fae6c9b1a0d7333e29f39684", "filename": "src/test/ui/async-await/issues/issue-65159.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -6,7 +6,6 @@ async fn copy() -> Result<()>\n //~^ ERROR this enum takes 2 generic arguments\n {\n     Ok(())\n-    //~^ ERROR type annotations needed\n }\n \n fn main() { }"}, {"sha": "45f5ec40cd758b08f914aabdce72e0d85bd7996f", "filename": "src/test/ui/async-await/issues/issue-65159.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -16,18 +16,6 @@ help: add missing generic argument\n LL | async fn copy() -> Result<(), E>\n    |                             +++\n \n-error[E0282]: type annotations needed\n-  --> $DIR/issue-65159.rs:8:5\n-   |\n-LL |     Ok(())\n-   |     ^^ cannot infer type of the type parameter `E` declared on the enum `Result`\n-   |\n-help: consider specifying the generic arguments\n-   |\n-LL |     Ok::<(), E>(())\n-   |       +++++++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0107, E0282.\n-For more information about an error, try `rustc --explain E0107`.\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "dd0320bc53ba7d79d1151e7b34ea1ba3e85d845a", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -17,7 +17,6 @@ async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n     //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n     //~^^ ERROR this struct takes 1 generic argument but 0 generic arguments were supplied\n     LockedMarket(generator.lock().unwrap().buy())\n-    //~^ ERROR cannot return value referencing temporary\n }\n \n struct LockedMarket<T>(T);"}, {"sha": "d2b927fb664c66b1958dbdfd914b771b95b1d2d1", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.stderr", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -7,7 +7,7 @@ LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_>\n    |                                                           expected 0 lifetime arguments\n    |\n note: struct defined here, with 0 lifetime parameters\n-  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:22:8\n    |\n LL | struct LockedMarket<T>(T);\n    |        ^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_>\n    |                                                           ^^^^^^^^^^^^ expected 1 generic argument\n    |\n note: struct defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:22:8\n    |\n LL | struct LockedMarket<T>(T);\n    |        ^^^^^^^^^^^^ -\n@@ -28,16 +28,6 @@ help: add missing generic argument\n LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_, T> {\n    |                                                                          +++\n \n-error[E0515]: cannot return value referencing temporary value\n-  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:19:5\n-   |\n-LL |     LockedMarket(generator.lock().unwrap().buy())\n-   |     ^^^^^^^^^^^^^-------------------------^^^^^^^\n-   |     |            |\n-   |     |            temporary value created here\n-   |     returns a value referencing data owned by the current function\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0107, E0515.\n-For more information about an error, try `rustc --explain E0107`.\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "7fb69032e6fc48b2e4cd6fc8a3accde632b753ef", "filename": "src/test/ui/const-generics/min_const_generics/macro-fail.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -14,7 +14,6 @@ impl<const N: usize> Marker<N> for Example<N> {}\n fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n   //~^ ERROR: type provided when a constant was expected\n   Example::<gimme_a_const!(marker)>\n-  //~^ ERROR: type provided when a constant was expected\n }\n \n fn from_marker(_: impl Marker<{\n@@ -34,9 +33,7 @@ fn main() {\n   }>;\n \n   let _fail = Example::<external_macro!()>;\n-  //~^ ERROR: type provided when a constant was expected\n \n   let _fail = Example::<gimme_a_const!()>;\n-  //~^ ERROR: type provided when a constant was expected\n-  //~| ERROR unexpected end of macro invocation\n+  //~^ ERROR unexpected end of macro invocation\n }"}, {"sha": "2b75c19774842c410714d6ee14752aa0cf2023de", "filename": "src/test/ui/const-generics/min_const_generics/macro-fail.stderr", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -1,5 +1,5 @@\n error: expected type, found `{`\n-  --> $DIR/macro-fail.rs:29:27\n+  --> $DIR/macro-fail.rs:28:27\n    |\n LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n    |                                 ----------------------\n@@ -13,7 +13,7 @@ LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n    = note: this error originates in the macro `gimme_a_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected type, found `{`\n-  --> $DIR/macro-fail.rs:29:27\n+  --> $DIR/macro-fail.rs:28:27\n    |\n LL |   Example::<gimme_a_const!(marker)>\n    |             ----------------------\n@@ -46,7 +46,7 @@ LL |     let _fail = Example::<external_macro!()>;\n    = note: this error originates in the macro `external_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-fail.rs:39:25\n+  --> $DIR/macro-fail.rs:37:25\n    |\n LL |     macro_rules! gimme_a_const {\n    |     -------------------------- when calling this macro\n@@ -60,24 +60,6 @@ error[E0747]: type provided when a constant was expected\n LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0747]: type provided when a constant was expected\n-  --> $DIR/macro-fail.rs:16:13\n-   |\n-LL |   Example::<gimme_a_const!(marker)>\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0747]: type provided when a constant was expected\n-  --> $DIR/macro-fail.rs:36:25\n-   |\n-LL |   let _fail = Example::<external_macro!()>;\n-   |                         ^^^^^^^^^^^^^^^^^\n-\n-error[E0747]: type provided when a constant was expected\n-  --> $DIR/macro-fail.rs:39:25\n-   |\n-LL |   let _fail = Example::<gimme_a_const!()>;\n-   |                         ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0747`."}, {"sha": "30fbba168689be02fd3588d9646ce5772e6ddaa2", "filename": "src/test/ui/impl-trait/generic-with-implicit-hrtb-without-dyn.edition2021.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2021.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -9,13 +9,6 @@ help: add `dyn` keyword before this trait\n LL | fn ice() -> impl AsRef<dyn Fn(&())> {\n    |                        +++\n \n-error[E0277]: the trait bound `(): AsRef<(dyn for<'a> Fn(&'a ()) + 'static)>` is not satisfied\n-  --> $DIR/generic-with-implicit-hrtb-without-dyn.rs:6:13\n-   |\n-LL | fn ice() -> impl AsRef<Fn(&())> {\n-   |             ^^^^^^^^^^^^^^^^^^^ the trait `AsRef<(dyn for<'a> Fn(&'a ()) + 'static)>` is not implemented for `()`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0277, E0782.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0782`."}, {"sha": "bed81c4bca76e1cea701a48f00320655638d7772", "filename": "src/test/ui/impl-trait/generic-with-implicit-hrtb-without-dyn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -4,8 +4,8 @@\n #![allow(warnings)]\n \n fn ice() -> impl AsRef<Fn(&())> {\n-    //~^ ERROR: the trait bound `(): AsRef<(dyn for<'a> Fn(&'a ()) + 'static)>` is not satisfied [E0277]\n-    //[edition2021]~| ERROR: trait objects must include the `dyn` keyword [E0782]\n+    //[edition2015]~^ ERROR: the trait bound `(): AsRef<(dyn for<'a> Fn(&'a ()) + 'static)>` is not satisfied [E0277]\n+    //[edition2021]~^^ ERROR: trait objects must include the `dyn` keyword [E0782]\n     todo!()\n }\n "}, {"sha": "527a4586fd7e0b7cd8c02e97812418b0c68381b4", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -4,19 +4,16 @@ use std::fmt::Debug;\n fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     |x| x\n-    //~^ ERROR lifetime may not live long enough\n }\n \n fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     |x| x\n-    //~^ ERROR lifetime may not live long enough\n }\n \n fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     |x| x\n-    //~^ ERROR lifetime may not live long enough\n }\n \n fn d() -> impl Fn() -> (impl Debug + '_) {"}, {"sha": "443ffeb55cdee1cad06c715a0f02e7646f043a55", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.stderr", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-fn-hrtb-bounds.rs:22:38\n+  --> $DIR/impl-fn-hrtb-bounds.rs:19:38\n    |\n LL | fn d() -> impl Fn() -> (impl Debug + '_) {\n    |                                      ^^ expected named lifetime parameter\n@@ -22,57 +22,30 @@ note: lifetime declared here\n LL | fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n    |                   ^\n \n-error: lifetime may not live long enough\n-  --> $DIR/impl-fn-hrtb-bounds.rs:6:9\n-   |\n-LL |     |x| x\n-   |      -- ^ returning this value requires that `'1` must outlive `'2`\n-   |      ||\n-   |      |return type of closure is impl Debug + '2\n-   |      has type `&'1 u8`\n-\n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/impl-fn-hrtb-bounds.rs:10:52\n+  --> $DIR/impl-fn-hrtb-bounds.rs:9:52\n    |\n LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n    |                                                    ^^\n    |\n note: lifetime declared here\n-  --> $DIR/impl-fn-hrtb-bounds.rs:10:20\n+  --> $DIR/impl-fn-hrtb-bounds.rs:9:20\n    |\n LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n    |                    ^^\n \n-error: lifetime may not live long enough\n-  --> $DIR/impl-fn-hrtb-bounds.rs:12:9\n-   |\n-LL |     |x| x\n-   |      -- ^ returning this value requires that `'1` must outlive `'2`\n-   |      ||\n-   |      |return type of closure is impl Debug + '2\n-   |      has type `&'1 u8`\n-\n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/impl-fn-hrtb-bounds.rs:16:52\n+  --> $DIR/impl-fn-hrtb-bounds.rs:14:52\n    |\n LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n    |                                                    ^^\n    |\n note: lifetime declared here\n-  --> $DIR/impl-fn-hrtb-bounds.rs:16:20\n+  --> $DIR/impl-fn-hrtb-bounds.rs:14:20\n    |\n LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n    |                    ^^\n \n-error: lifetime may not live long enough\n-  --> $DIR/impl-fn-hrtb-bounds.rs:18:9\n-   |\n-LL |     |x| x\n-   |      -- ^ returning this value requires that `'1` must outlive `'2`\n-   |      ||\n-   |      |return type of closure is impl Debug + '2\n-   |      has type `&'1 u8`\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0106`."}, {"sha": "61303a5b2cb4a80379be44f06477414e50716e26", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -5,7 +5,6 @@ fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n     //~^ ERROR ambiguous `+` in a type\n     //~| ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     |x| x\n-    //~^ ERROR lifetime may not live long enough\n }\n \n fn b() -> impl Fn() -> impl Debug + Send {"}, {"sha": "cf6e5ef7bacebb626699df9b444eb0b4553f00da", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -5,7 +5,7 @@ LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n    |                           ^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + '_)`\n \n error: ambiguous `+` in a type\n-  --> $DIR/impl-fn-parsing-ambiguities.rs:11:24\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:10:24\n    |\n LL | fn b() -> impl Fn() -> impl Debug + Send {\n    |                        ^^^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + Send)`\n@@ -22,14 +22,5 @@ note: lifetime declared here\n LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n    |                   ^\n \n-error: lifetime may not live long enough\n-  --> $DIR/impl-fn-parsing-ambiguities.rs:7:9\n-   |\n-LL |     |x| x\n-   |      -- ^ returning this value requires that `'1` must outlive `'2`\n-   |      ||\n-   |      |return type of closure is impl Debug + '2\n-   |      has type `&'1 u8`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "92f7e005dbf0c26ea7479e9807d62f3310a0dadf", "filename": "src/test/ui/impl-trait/issues/issue-67830.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -21,8 +21,6 @@ struct A;\n fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     Wrap(|a| Some(a).into_iter())\n-    //~^ ERROR implementation of `FnOnce` is not general enough\n-    //~| ERROR implementation of `FnOnce` is not general enough\n }\n \n fn main() {}"}, {"sha": "d3ea8cb0377c7503bec82d7dc7f30acba420658c", "filename": "src/test/ui/impl-trait/issues/issue-67830.stderr", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -10,23 +10,5 @@ note: lifetime declared here\n LL | fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n    |                       ^^\n \n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-67830.rs:23:5\n-   |\n-LL |     Wrap(|a| Some(a).into_iter())\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-67830.rs:23:5\n-   |\n-LL |     Wrap(|a| Some(a).into_iter())\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n "}, {"sha": "fde8a6704cc45708566a58ef8275386c11fe1d29", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -18,16 +18,11 @@ fn make_impl() -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {}\n fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     &()\n-    //~^ ERROR implementation of `Hrtb` is not general enough\n-    //~| ERROR implementation of `Hrtb` is not general enough\n }\n \n fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     x\n-    //~^ ERROR implementation of `Hrtb` is not general enough\n-    //~| ERROR implementation of `Hrtb` is not general enough\n-    //~| ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "8605d07abe9430ac58136cd6f79e2c392c4727ac", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.stderr", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -22,71 +22,17 @@ note: lifetime declared here\n LL | fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n    |                                               ^^\n \n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:20:5\n-   |\n-LL |     &()\n-   |     ^^^ implementation of `Hrtb` is not general enough\n-   |\n-   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n-   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n-\n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:20:5\n-   |\n-LL |     &()\n-   |     ^^^ implementation of `Hrtb` is not general enough\n-   |\n-   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n-   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n-\n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/issue-88236-2.rs:25:78\n+  --> $DIR/issue-88236-2.rs:23:78\n    |\n LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n    |                                                                              ^^\n    |\n note: lifetime declared here\n-  --> $DIR/issue-88236-2.rs:25:45\n+  --> $DIR/issue-88236-2.rs:23:45\n    |\n LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n    |                                             ^^\n \n-error: lifetime may not live long enough\n-  --> $DIR/issue-88236-2.rs:27:5\n-   |\n-LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n-   |                  -- lifetime `'b` defined here\n-LL |\n-LL |     x\n-   |     ^ returning this value requires that `'b` must outlive `'static`\n-   |\n-help: to declare that `impl for<'a> Hrtb<'a, Assoc = impl Send + 'static>` captures data from argument `x`, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> + 'b {\n-   |                                                                                  ++++\n-help: to declare that `impl Send + 'a` captures data from argument `x`, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a + 'b> {\n-   |                                                                                 ++++\n-\n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:27:5\n-   |\n-LL |     x\n-   |     ^ implementation of `Hrtb` is not general enough\n-   |\n-   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n-   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n-\n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:27:5\n-   |\n-LL |     x\n-   |     ^ implementation of `Hrtb` is not general enough\n-   |\n-   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n-   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "4a89238d07e605de576d761c77569cb5b6bbbc45", "filename": "src/test/ui/impl-trait/issues/issue-92305.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -4,11 +4,10 @@ use std::iter;\n \n fn f<T>(data: &[T]) -> impl Iterator<Item = Vec> {\n     //~^ ERROR: missing generics for struct `Vec` [E0107]\n-    iter::empty() //~ ERROR: type annotations needed [E0282]\n+    iter::empty()\n }\n \n fn g<T>(data: &[T], target: T) -> impl Iterator<Item = Vec<T>> {\n-    //~^ ERROR: type annotations needed [E0282]\n     f(data).filter(|x| x == target)\n }\n "}, {"sha": "34d5c2d61dc41148c07043a0c698f8b8352b7550", "filename": "src/test/ui/impl-trait/issues/issue-92305.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -14,24 +14,6 @@ help: add missing generic argument\n LL | fn f<T>(data: &[T]) -> impl Iterator<Item = Vec<T>> {\n    |                                             ~~~~~~\n \n-error[E0282]: type annotations needed\n-  --> $DIR/issue-92305.rs:7:5\n-   |\n-LL |     iter::empty()\n-   |     ^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `empty`\n-   |\n-help: consider specifying the generic argument\n-   |\n-LL |     iter::empty::<T>()\n-   |                +++++\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/issue-92305.rs:10:35\n-   |\n-LL | fn g<T>(data: &[T], target: T) -> impl Iterator<Item = Vec<T>> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0107, E0282.\n-For more information about an error, try `rustc --explain E0107`.\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "a5db10d3a220c663cc2ed93423f238d9dfd39260", "filename": "src/test/ui/impl-trait/nested-rpit-hrtb.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.rs?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -31,11 +31,9 @@ fn one_hrtb_trait_param() -> impl for<'a> Foo<'a, Assoc = impl Qux<'a>> {}\n \n fn one_hrtb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'a> {}\n //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n-//~| ERROR implementation of `Bar` is not general enough\n \n fn one_hrtb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl Qux<'a>> {}\n //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n-//~| ERROR the trait bound `&(): Qux<'static>` is not satisfied\n \n // This should resolve.\n fn one_hrtb_mention_fn_trait_param<'b>() -> impl for<'a> Foo<'a, Assoc = impl Qux<'b>> {}\n@@ -45,11 +43,9 @@ fn one_hrtb_mention_fn_outlives<'b>() -> impl for<'a> Foo<'a, Assoc = impl Sized\n \n // This should resolve.\n fn one_hrtb_mention_fn_trait_param_uses<'b>() -> impl for<'a> Bar<'a, Assoc = impl Qux<'b>> {}\n-//~^ ERROR the trait bound `&(): Qux<'b>` is not satisfied\n \n // This should resolve.\n fn one_hrtb_mention_fn_outlives_uses<'b>() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'b> {}\n-//~^ ERROR implementation of `Bar` is not general enough\n \n // This should resolve.\n fn two_htrb_trait_param() -> impl for<'a> Foo<'a, Assoc = impl for<'b> Qux<'b>> {}\n@@ -60,11 +56,9 @@ fn two_htrb_outlives() -> impl for<'a> Foo<'a, Assoc = impl for<'b> Sized + 'b>\n \n // This should resolve.\n fn two_htrb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Qux<'b>> {}\n-//~^ ERROR the trait bound `for<'b> &(): Qux<'b>` is not satisfied\n \n // `'b` is not in scope for the outlives bound.\n fn two_htrb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Sized + 'b> {}\n //~^ ERROR use of undeclared lifetime name `'b` [E0261]\n-//~| ERROR implementation of `Bar` is not general enough\n \n fn main() {}"}, {"sha": "3dbe6ebadfbfc52242e28baf111ebe27e95537e9", "filename": "src/test/ui/impl-trait/nested-rpit-hrtb.stderr", "status": "modified", "additions": 6, "deletions": 58, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60892e8b1da1f810c050ea25fdd21c0da64fe025/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.stderr?ref=60892e8b1da1f810c050ea25fdd21c0da64fe025", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/nested-rpit-hrtb.rs:58:77\n+  --> $DIR/nested-rpit-hrtb.rs:54:77\n    |\n LL | fn two_htrb_outlives() -> impl for<'a> Foo<'a, Assoc = impl for<'b> Sized + 'b> {}\n    |                                                                             ^^ undeclared lifetime\n@@ -15,7 +15,7 @@ LL | fn two_htrb_outlives<'b>() -> impl for<'a> Foo<'a, Assoc = impl for<'b> Siz\n    |                     ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/nested-rpit-hrtb.rs:66:82\n+  --> $DIR/nested-rpit-hrtb.rs:61:82\n    |\n LL | fn two_htrb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Sized + 'b> {}\n    |                                                                                  ^^ undeclared lifetime\n@@ -65,70 +65,18 @@ note: lifetime declared here\n LL | fn one_hrtb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'a> {}\n    |                                         ^^\n \n-error: implementation of `Bar` is not general enough\n-  --> $DIR/nested-rpit-hrtb.rs:32:78\n-   |\n-LL | fn one_hrtb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'a> {}\n-   |                                                                              ^^ implementation of `Bar` is not general enough\n-   |\n-   = note: `()` must implement `Bar<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Bar<'1>`, for some specific lifetime `'1`\n-\n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/nested-rpit-hrtb.rs:36:73\n+  --> $DIR/nested-rpit-hrtb.rs:35:73\n    |\n LL | fn one_hrtb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl Qux<'a>> {}\n    |                                                                         ^^\n    |\n note: lifetime declared here\n-  --> $DIR/nested-rpit-hrtb.rs:36:44\n+  --> $DIR/nested-rpit-hrtb.rs:35:44\n    |\n LL | fn one_hrtb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl Qux<'a>> {}\n    |                                            ^^\n \n-error[E0277]: the trait bound `&(): Qux<'static>` is not satisfied\n-  --> $DIR/nested-rpit-hrtb.rs:36:64\n-   |\n-LL | fn one_hrtb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl Qux<'a>> {}\n-   |                                                                ^^^^^^^^^^^^ the trait `Qux<'static>` is not implemented for `&()`\n-   |\n-   = help: the trait `Qux<'_>` is implemented for `()`\n-\n-error[E0277]: the trait bound `&(): Qux<'b>` is not satisfied\n-  --> $DIR/nested-rpit-hrtb.rs:47:79\n-   |\n-LL | fn one_hrtb_mention_fn_trait_param_uses<'b>() -> impl for<'a> Bar<'a, Assoc = impl Qux<'b>> {}\n-   |                                                                               ^^^^^^^^^^^^ the trait `Qux<'b>` is not implemented for `&()`\n-   |\n-   = help: the trait `Qux<'_>` is implemented for `()`\n-\n-error: implementation of `Bar` is not general enough\n-  --> $DIR/nested-rpit-hrtb.rs:51:93\n-   |\n-LL | fn one_hrtb_mention_fn_outlives_uses<'b>() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'b> {}\n-   |                                                                                             ^^ implementation of `Bar` is not general enough\n-   |\n-   = note: `()` must implement `Bar<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Bar<'1>`, for some specific lifetime `'1`\n-\n-error[E0277]: the trait bound `for<'b> &(): Qux<'b>` is not satisfied\n-  --> $DIR/nested-rpit-hrtb.rs:62:64\n-   |\n-LL | fn two_htrb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Qux<'b>> {}\n-   |                                                                ^^^^^^^^^^^^^^^^^^^^ the trait `for<'b> Qux<'b>` is not implemented for `&()`\n-   |\n-   = help: the trait `Qux<'_>` is implemented for `()`\n-\n-error: implementation of `Bar` is not general enough\n-  --> $DIR/nested-rpit-hrtb.rs:66:86\n-   |\n-LL | fn two_htrb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Sized + 'b> {}\n-   |                                                                                      ^^ implementation of `Bar` is not general enough\n-   |\n-   = note: `()` must implement `Bar<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Bar<'1>`, for some specific lifetime `'1`\n-\n-error: aborting due to 12 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0261, E0277.\n-For more information about an error, try `rustc --explain E0261`.\n+For more information about this error, try `rustc --explain E0261`."}]}