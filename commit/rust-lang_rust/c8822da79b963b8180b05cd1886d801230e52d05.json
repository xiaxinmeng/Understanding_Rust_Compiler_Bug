{"sha": "c8822da79b963b8180b05cd1886d801230e52d05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODIyZGE3OWI5NjNiODE4MGIwNWNkMTg4NmQ4MDEyMzBlNTJkMDU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-01-18T02:59:26Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-01-19T00:02:12Z"}, "message": "A few improvements to the slice docs.\n\n* Simplify `Option::iter_mut` doc example.\n* Document 'empty' corner-cases for `slice::{starts_with, ends_with}`.\n* Indicate 'true' as code-like.", "tree": {"sha": "a9fb976011e6abc1f05f03e4ca6b90c45036aa6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9fb976011e6abc1f05f03e4ca6b90c45036aa6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8822da79b963b8180b05cd1886d801230e52d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8822da79b963b8180b05cd1886d801230e52d05", "html_url": "https://github.com/rust-lang/rust/commit/c8822da79b963b8180b05cd1886d801230e52d05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8822da79b963b8180b05cd1886d801230e52d05/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8af93f0901c336e873ce18274026d0fd9bc7c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8af93f0901c336e873ce18274026d0fd9bc7c1f", "html_url": "https://github.com/rust-lang/rust/commit/c8af93f0901c336e873ce18274026d0fd9bc7c1f"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "f20ef2727b92fda67c20a1a0f55ff5b23db9952f", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c8822da79b963b8180b05cd1886d801230e52d05/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8822da79b963b8180b05cd1886d801230e52d05/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c8822da79b963b8180b05cd1886d801230e52d05", "patch": "@@ -181,7 +181,7 @@ impl<T> [T] {\n         core_slice::SliceExt::len(self)\n     }\n \n-    /// Returns true if the slice has a length of 0.\n+    /// Returns `true` if the slice has a length of 0.\n     ///\n     /// # Example\n     ///\n@@ -540,12 +540,8 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let x = &mut [1, 2, 4];\n-    /// {\n-    ///     let iterator = x.iter_mut();\n-    ///\n-    ///     for elem in iterator {\n-    ///         *elem += 2;\n-    ///     }\n+    /// for elem in x.iter_mut() {\n+    ///     *elem += 2;\n     /// }\n     /// assert_eq!(x, &[3, 4, 6]);\n     /// ```\n@@ -880,7 +876,7 @@ impl<T> [T] {\n         core_slice::SliceExt::rsplitn_mut(self, n, pred)\n     }\n \n-    /// Returns true if the slice contains an element with the given value.\n+    /// Returns `true` if the slice contains an element with the given value.\n     ///\n     /// # Examples\n     ///\n@@ -896,7 +892,7 @@ impl<T> [T] {\n         core_slice::SliceExt::contains(self, x)\n     }\n \n-    /// Returns true if `needle` is a prefix of the slice.\n+    /// Returns `true` if `needle` is a prefix of the slice.\n     ///\n     /// # Examples\n     ///\n@@ -907,14 +903,23 @@ impl<T> [T] {\n     /// assert!(!v.starts_with(&[50]));\n     /// assert!(!v.starts_with(&[10, 50]));\n     /// ```\n+    ///\n+    /// Always returns `true` if `needle` is an empty slice:\n+    ///\n+    /// ```\n+    /// let v = &[10, 40, 30];\n+    /// assert!(v.starts_with(&[]));\n+    /// let v: &[u8] = &[];\n+    /// assert!(v.starts_with(&[]));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn starts_with(&self, needle: &[T]) -> bool\n         where T: PartialEq\n     {\n         core_slice::SliceExt::starts_with(self, needle)\n     }\n \n-    /// Returns true if `needle` is a suffix of the slice.\n+    /// Returns `true` if `needle` is a suffix of the slice.\n     ///\n     /// # Examples\n     ///\n@@ -925,6 +930,15 @@ impl<T> [T] {\n     /// assert!(!v.ends_with(&[50]));\n     /// assert!(!v.ends_with(&[50, 30]));\n     /// ```\n+    ///\n+    /// Always returns `true` if `needle` is an empty slice:\n+    ///\n+    /// ```\n+    /// let v = &[10, 40, 30];\n+    /// assert!(v.ends_with(&[]));\n+    /// let v: &[u8] = &[];\n+    /// assert!(v.ends_with(&[]));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn ends_with(&self, needle: &[T]) -> bool\n         where T: PartialEq"}]}