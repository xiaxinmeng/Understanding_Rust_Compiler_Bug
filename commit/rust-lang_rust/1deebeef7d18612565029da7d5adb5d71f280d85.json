{"sha": "1deebeef7d18612565029da7d5adb5d71f280d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZWViZWVmN2QxODYxMjU2NTAyOWRhN2Q1YWRiNWQ3MWYyODBkODU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-05-27T10:08:37Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-06-13T21:40:24Z"}, "message": "Fix #3961 : use char range methods instead of byte offsets to detect whitespace.", "tree": {"sha": "a31d4d0fe3f415ce2e970ddf90b8f952ec345f50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a31d4d0fe3f415ce2e970ddf90b8f952ec345f50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1deebeef7d18612565029da7d5adb5d71f280d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1deebeef7d18612565029da7d5adb5d71f280d85", "html_url": "https://github.com/rust-lang/rust/commit/1deebeef7d18612565029da7d5adb5d71f280d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1deebeef7d18612565029da7d5adb5d71f280d85/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "541c657a738006d78171aa261125a6a46f283b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/541c657a738006d78171aa261125a6a46f283b35", "html_url": "https://github.com/rust-lang/rust/commit/541c657a738006d78171aa261125a6a46f283b35"}], "stats": {"total": 146, "additions": 132, "deletions": 14}, "files": [{"sha": "29fac8f951d61f8c8d81a0d36b4d3755201a5260", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1deebeef7d18612565029da7d5adb5d71f280d85/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deebeef7d18612565029da7d5adb5d71f280d85/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=1deebeef7d18612565029da7d5adb5d71f280d85", "patch": "@@ -198,26 +198,35 @@ fn read_line_comments(rdr: @mut StringReader, code_to_the_left: bool,\n     }\n }\n \n-// FIXME #3961: This is not the right way to convert string byte\n-// offsets to characters.\n-fn all_whitespace(s: &str, begin: uint, end: uint) -> bool {\n-    let mut i: uint = begin;\n-    while i != end {\n-        if !is_whitespace(s[i] as char) { return false; } i += 1u;\n+// Returns None if the first col chars of s contain a non-whitespace char.\n+// Otherwise returns Some(k) where k is first char offset after that leading\n+// whitespace.  Note k may be outside bounds of s.\n+fn all_whitespace(s: &str, col: CharPos) -> Option<uint> {\n+    let len = s.len();\n+    let mut col = col.to_uint();\n+    let mut cursor: uint = 0;\n+    while col > 0 && cursor < len {\n+        let r: str::CharRange = str::char_range_at(s, cursor);\n+        if !r.ch.is_whitespace() {\n+            return None;\n+        }\n+        cursor = r.next;\n+        col -= 1;\n     }\n-    return true;\n+    return Some(cursor);\n }\n \n fn trim_whitespace_prefix_and_push_line(lines: &mut ~[~str],\n                                         s: ~str, col: CharPos) {\n     let len = s.len();\n-    // FIXME #3961: Doing bytewise comparison and slicing with CharPos\n-    let col = col.to_uint();\n-    let s1 = if all_whitespace(s, 0, uint::min(len, col)) {\n-        if col < len {\n-            s.slice(col, len).to_owned()\n-        } else {  ~\"\" }\n-    } else { s };\n+    let s1 = match all_whitespace(s, col) {\n+        Some(col) => {\n+            if col < len {\n+                s.slice(col, len).to_owned()\n+            } else {  ~\"\" }\n+        }\n+        None => s,\n+    };\n     debug!(\"pushing line: %s\", s1);\n     lines.push(s1);\n }"}, {"sha": "cd97e4174f305e4bc543e82de9944703b064e042", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/1deebeef7d18612565029da7d5adb5d71f280d85/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deebeef7d18612565029da7d5adb5d71f280d85/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=1deebeef7d18612565029da7d5adb5d71f280d85", "patch": "@@ -0,0 +1,109 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is meant as a test case for Issue 3961.\n+//\n+// Test via: rustc --pretty normal src/test/pretty/block-comment-wchar.rs\n+\n+fn f() {\n+    fn nested() {\n+        /*\n+  Spaced2\n+        */\n+        /*\n+          Spaced10\n+        */\n+        /*\n+\t\t\t\t\t\t\t\t  Tabbed8+2\n+        */\n+        /*\n+\r\r\r\r\r\r\r\r  CR8+2\n+        */\n+    }\n+    /*\n+  Spaced2:                       (prefixed so start of space aligns with comment)\n+    */\n+    /*\n+\t\tTabbed2: (more indented b/c *start* of space will align with comment)\n+    */\n+    /*\n+      Spaced6:                       (Alignment removed and realigning spaces inserted)\n+    */\n+    /*\n+\t\t\t\t  Tabbed4+2:                     (Alignment removed and realigning spaces inserted)\n+    */\n+\n+    /*\n+\u000b\u000b\u000b\u000b  VT4+2:                         (should align)\n+    */\n+    /*\n+\f\f\f\f  FF4+2:                         (should align)\n+    */\n+    /*\n+\r\r\r\r  CR4+2:                         (should align)\n+    */\n+    /*\n+    // (NEL deliberately omitted)\n+    */\n+    /*\n+\u1680\u1680\u1680\u1680  Ogham Space Mark 4+2:          (should align)\n+    */\n+    /*\n+\u180e\u180e\u180e\u180e  Mongolian Vowel Separator 4+2: (should align)\n+    */\n+    /*\n+\u2005\u2005\u2005\u2005  Four-per-em space 4+2:         (should align)\n+    */\n+\n+    /*\n+   \u180e  Mongolian Vowel Sep   count 1: (should align)\n+  \u180e   Mongolian Vowel Sep   count 2: (should align)\n+  \u180e\u180e  Mongolian Vowel Sep   count 3: (should align)\n+ \u180e    Mongolian Vowel Sep   count 4: (should align)\n+ \u180e \u180e  Mongolian Vowel Sep   count 5: (should align)\n+ \u180e\u180e   Mongolian Vowel Sep   count 6: (should align)\n+ \u180e\u180e\u180e  Mongolian Vowel Sep   count 7: (should align)\n+\u180e     Mongolian Vowel Sep   count 8: (should align)\n+\u180e  \u180e  Mongolian Vowel Sep   count 9: (should align)\n+\u180e \u180e   Mongolian Vowel Sep   count A: (should align)\n+\u180e \u180e\u180e  Mongolian Vowel Sep   count B: (should align)\n+\u180e\u180e    Mongolian Vowel Sep   count C: (should align)\n+\u180e\u180e \u180e  Mongolian Vowel Sep   count D: (should align)\n+\u180e\u180e\u180e   Mongolian Vowel Sep   count E: (should align)\n+\u180e\u180e\u180e\u180e  Mongolian Vowel Sep   count F: (should align)\n+    */\n+\n+/* */ /*\n+        Hello from offset 6\n+        Space 6+2:                     compare A\n+\u180e\u180e\u180e\u180e\u180e\u180e  Mongolian Vowel Separator 6+2: compare B\n+      */\n+/*\u180e*/ /*\n+        Hello from another offset 6 with wchars establishing column offset\n+        Space 6+2:                     compare C\n+\u180e\u180e\u180e\u180e\u180e\u180e  Mongolian Vowel Separator 6+2: compare D\n+      */\n+}\n+\n+fn main() {\n+    // Taken from http://en.wikipedia.org/wiki/Whitespace_character\n+    let chars = [ '\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20',\n+                 // '\\x85', // for some reason Rust thinks NEL isn't whitespace\n+                 '\\xA0', '\\u1680', '\\u180E',\n+                 '\\u2000', '\\u2001', '\\u2002', '\\u2003',\n+                 '\\u2004', '\\u2005', '\\u2006', '\\u2007',\n+                 '\\u2008', '\\u2009', '\\u200A',\n+                 '\\u2028', '\\u2029', '\\u202F', '\\u205F',\n+                 '\\u3000'\n+                ];\n+    for vec::each(chars) |c| {\n+        io::println(fmt!(\"%? %?\", c, c.is_whitespace()));\n+    }\n+}"}]}