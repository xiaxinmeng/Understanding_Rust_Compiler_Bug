{"sha": "68706b59c9177db2a6dd276e1ce599d8fe5942c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NzA2YjU5YzkxNzdkYjJhNmRkMjc2ZTFjZTU5OWQ4ZmU1OTQyYzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T17:21:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T17:21:41Z"}, "message": "Don't mess with cursor position when adding hashes", "tree": {"sha": "9cc123ba4b246b2c6f150bee3e39d8d6fd35505c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc123ba4b246b2c6f150bee3e39d8d6fd35505c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68706b59c9177db2a6dd276e1ce599d8fe5942c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68706b59c9177db2a6dd276e1ce599d8fe5942c1", "html_url": "https://github.com/rust-lang/rust/commit/68706b59c9177db2a6dd276e1ce599d8fe5942c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68706b59c9177db2a6dd276e1ce599d8fe5942c1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb92d791e44d3b225f73d9160de173f255ab881", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb92d791e44d3b225f73d9160de173f255ab881", "html_url": "https://github.com/rust-lang/rust/commit/1fb92d791e44d3b225f73d9160de173f255ab881"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "6d77dff132799631cb4e2f1ef03cd5548943594c", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/68706b59c9177db2a6dd276e1ce599d8fe5942c1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68706b59c9177db2a6dd276e1ce599d8fe5942c1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=68706b59c9177db2a6dd276e1ce599d8fe5942c1", "patch": "@@ -1,5 +1,7 @@\n+use std::borrow::Cow;\n+\n use ra_syntax::{\n-    ast::{self, HasStringValue},\n+    ast::{self, HasQuotes, HasStringValue},\n     AstToken,\n     SyntaxKind::{RAW_STRING, STRING},\n     TextSize,\n@@ -32,14 +34,17 @@ pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         target,\n         |edit| {\n             let max_hash_streak = count_hashes(&value);\n-            let mut hashes = String::with_capacity(max_hash_streak + 1);\n-            for _ in 0..hashes.capacity() {\n-                hashes.push('#');\n-            }\n-            edit.replace(\n-                token.syntax().text_range(),\n-                format!(\"r{}\\\"{}\\\"{}\", hashes, value, hashes),\n-            );\n+            let hashes = \"#\".repeat(max_hash_streak + 1);\n+            if matches!(value, Cow::Borrowed(_)) {\n+                // Avoid replacing the whole string to better position the cursor.\n+                edit.insert(token.syntax().text_range().start(), format!(\"r{}\", hashes));\n+                edit.insert(token.syntax().text_range().end(), format!(\"{}\", hashes));\n+            } else {\n+                edit.replace(\n+                    token.syntax().text_range(),\n+                    format!(\"r{}\\\"{}\\\"{}\", hashes, value, hashes),\n+                );\n+            }\n         },\n     )\n }\n@@ -70,6 +75,14 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n         |edit| {\n             // parse inside string to escape `\"`\n             let escaped = value.escape_default().to_string();\n+            if let Some(offsets) = token.quote_offsets() {\n+                if token.text()[offsets.contents - token.syntax().text_range().start()] == escaped {\n+                    edit.replace(offsets.quotes.0, \"\\\"\");\n+                    edit.replace(offsets.quotes.1, \"\\\"\");\n+                    return;\n+                }\n+            }\n+\n             edit.replace(token.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\n         },\n     )"}, {"sha": "9f50569dc41c77585a3e9b75a3b7919d9f81ac32", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68706b59c9177db2a6dd276e1ce599d8fe5942c1/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68706b59c9177db2a6dd276e1ce599d8fe5942c1/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=68706b59c9177db2a6dd276e1ce599d8fe5942c1", "patch": "@@ -272,7 +272,7 @@ fn format_args_expand(\n fn unquote_str(lit: &tt::Literal) -> Option<String> {\n     let lit = ast::make::tokens::literal(&lit.to_string());\n     let token = ast::String::cast(lit)?;\n-    token.value()\n+    token.value().map(|it| it.into_owned())\n }\n \n fn concat_expand("}, {"sha": "8665b480fdbee7d4ba079f83892400d5c4deed79", "filename": "crates/ra_ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68706b59c9177db2a6dd276e1ce599d8fe5942c1/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68706b59c9177db2a6dd276e1ce599d8fe5942c1/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=68706b59c9177db2a6dd276e1ce599d8fe5942c1", "patch": "@@ -25,7 +25,7 @@ pub(super) fn highlight_injection(\n         return None;\n     }\n     let value = literal.value()?;\n-    let (analysis, tmp_file_id) = Analysis::from_single_file(value);\n+    let (analysis, tmp_file_id) = Analysis::from_single_file(value.into_owned());\n \n     if let Some(range) = literal.open_quote_text_range() {\n         acc.add(HighlightedRange {"}, {"sha": "045f691333a5d245d23ae40152dca4157dd8392c", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68706b59c9177db2a6dd276e1ce599d8fe5942c1/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68706b59c9177db2a6dd276e1ce599d8fe5942c1/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=68706b59c9177db2a6dd276e1ce599d8fe5942c1", "patch": "@@ -1,6 +1,9 @@\n //! There are many AstNodes, but only a few tokens, so we hand-write them here.\n \n-use std::convert::{TryFrom, TryInto};\n+use std::{\n+    borrow::Cow,\n+    convert::{TryFrom, TryInto},\n+};\n \n use crate::{\n     ast::{AstToken, Comment, RawString, String, Whitespace},\n@@ -138,11 +141,11 @@ impl HasQuotes for String {}\n impl HasQuotes for RawString {}\n \n pub trait HasStringValue: HasQuotes {\n-    fn value(&self) -> Option<std::string::String>;\n+    fn value(&self) -> Option<Cow<'_, str>>;\n }\n \n impl HasStringValue for String {\n-    fn value(&self) -> Option<std::string::String> {\n+    fn value(&self) -> Option<Cow<'_, str>> {\n         let text = self.text().as_str();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n@@ -156,15 +159,17 @@ impl HasStringValue for String {\n         if has_error {\n             return None;\n         }\n-        Some(buf)\n+        // FIXME: don't actually allocate for borrowed case\n+        let res = if buf == text { Cow::Borrowed(text) } else { Cow::Owned(buf) };\n+        Some(res)\n     }\n }\n \n impl HasStringValue for RawString {\n-    fn value(&self) -> Option<std::string::String> {\n+    fn value(&self) -> Option<Cow<'_, str>> {\n         let text = self.text().as_str();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n-        Some(text.to_string())\n+        Some(Cow::Borrowed(text))\n     }\n }\n "}]}