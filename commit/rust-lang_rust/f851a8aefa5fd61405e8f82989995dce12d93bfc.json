{"sha": "f851a8aefa5fd61405e8f82989995dce12d93bfc", "node_id": "C_kwDOAAsO6NoAKGY4NTFhOGFlZmE1ZmQ2MTQwNWU4ZjgyOTg5OTk1ZGNlMTJkOTNiZmM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-28T06:26:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-28T06:27:56Z"}, "message": "Only look for param in generics if it actually comes from generics", "tree": {"sha": "ea15491702a77dd1ff36cc2ecbf09e5af25ea360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea15491702a77dd1ff36cc2ecbf09e5af25ea360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f851a8aefa5fd61405e8f82989995dce12d93bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f851a8aefa5fd61405e8f82989995dce12d93bfc", "html_url": "https://github.com/rust-lang/rust/commit/f851a8aefa5fd61405e8f82989995dce12d93bfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f851a8aefa5fd61405e8f82989995dce12d93bfc/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b583ede652936887a85c54bb793251479c82d3ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b583ede652936887a85c54bb793251479c82d3ee", "html_url": "https://github.com/rust-lang/rust/commit/b583ede652936887a85c54bb793251479c82d3ee"}], "stats": {"total": 168, "additions": 119, "deletions": 49}, "files": [{"sha": "41295f2b7b661f54e8d0c13d85c624ace4a46de7", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f851a8aefa5fd61405e8f82989995dce12d93bfc/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f851a8aefa5fd61405e8f82989995dce12d93bfc/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=f851a8aefa5fd61405e8f82989995dce12d93bfc", "patch": "@@ -1339,13 +1339,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .map(|predicate| self.lower_where_predicate(predicate)),\n         );\n \n-        let mut params: SmallVec<[hir::GenericParam<'hir>; 4]> =\n-            self.lower_generic_params_mut(&generics.params).collect();\n+        let mut params: SmallVec<[hir::GenericParam<'hir>; 4]> = self\n+            .lower_generic_params_mut(&generics.params, hir::GenericParamSource::Generics)\n+            .collect();\n \n         // Introduce extra lifetimes if late resolution tells us to.\n         let extra_lifetimes = self.resolver.take_extra_lifetime_params(parent_node_id);\n         params.extend(extra_lifetimes.into_iter().filter_map(|(ident, node_id, res)| {\n-            self.lifetime_res_to_generic_param(ident, node_id, res)\n+            self.lifetime_res_to_generic_param(\n+                ident,\n+                node_id,\n+                res,\n+                hir::GenericParamSource::Generics,\n+            )\n         }));\n \n         let has_where_clause_predicates = !generics.where_clause.predicates.is_empty();\n@@ -1449,7 +1455,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n             }) => hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                 hir_id: self.next_id(),\n-                bound_generic_params: self.lower_generic_params(bound_generic_params),\n+                bound_generic_params: self\n+                    .lower_generic_params(bound_generic_params, hir::GenericParamSource::Binder),\n                 bounded_ty: self\n                     .lower_ty(bounded_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Bound)),\n                 bounds: self.arena.alloc_from_iter(bounds.iter().map(|bound| {"}, {"sha": "5352a56b16588d6f554bd74ca89279cb19d7a251", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f851a8aefa5fd61405e8f82989995dce12d93bfc/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f851a8aefa5fd61405e8f82989995dce12d93bfc/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f851a8aefa5fd61405e8f82989995dce12d93bfc", "patch": "@@ -804,6 +804,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         ident: Ident,\n         node_id: NodeId,\n         res: LifetimeRes,\n+        source: hir::GenericParamSource,\n     ) -> Option<hir::GenericParam<'hir>> {\n         let (name, kind) = match res {\n             LifetimeRes::Param { .. } => {\n@@ -837,6 +838,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             pure_wrt_drop: false,\n             kind: hir::GenericParamKind::Lifetime { kind },\n             colon_span: None,\n+            source,\n         })\n     }\n \n@@ -852,11 +854,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         binder: NodeId,\n         generic_params: &[GenericParam],\n     ) -> &'hir [hir::GenericParam<'hir>] {\n-        let mut generic_params: Vec<_> = self.lower_generic_params_mut(generic_params).collect();\n+        let mut generic_params: Vec<_> = self\n+            .lower_generic_params_mut(generic_params, hir::GenericParamSource::Binder)\n+            .collect();\n         let extra_lifetimes = self.resolver.take_extra_lifetime_params(binder);\n         debug!(?extra_lifetimes);\n         generic_params.extend(extra_lifetimes.into_iter().filter_map(|(ident, node_id, res)| {\n-            self.lifetime_res_to_generic_param(ident, node_id, res)\n+            self.lifetime_res_to_generic_param(ident, node_id, res, hir::GenericParamSource::Binder)\n         }));\n         let generic_params = self.arena.alloc_from_iter(generic_params);\n         debug!(?generic_params);\n@@ -1375,8 +1379,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             span,\n                         );\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n-                        let (param, bounds, path) =\n-                            self.lower_generic_and_bounds(*def_node_id, span, ident, bounds);\n+                        let (param, bounds, path) = self.lower_universal_param_and_bounds(\n+                            *def_node_id,\n+                            span,\n+                            ident,\n+                            bounds,\n+                        );\n                         self.impl_trait_defs.push(param);\n                         if let Some(bounds) = bounds {\n                             self.impl_trait_bounds.push(bounds);\n@@ -1530,6 +1538,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             pure_wrt_drop: false,\n                             kind: hir::GenericParamKind::Lifetime { kind },\n                             colon_span: None,\n+                            source: hir::GenericParamSource::Generics,\n                         }\n                     },\n                 ));\n@@ -1987,6 +1996,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             pure_wrt_drop: false,\n                             kind: hir::GenericParamKind::Lifetime { kind },\n                             colon_span: None,\n+                            source: hir::GenericParamSource::Generics,\n                         }\n                     },\n                 ));\n@@ -2152,16 +2162,25 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_generic_params_mut<'s>(\n         &'s mut self,\n         params: &'s [GenericParam],\n+        source: hir::GenericParamSource,\n     ) -> impl Iterator<Item = hir::GenericParam<'hir>> + Captures<'a> + Captures<'s> {\n-        params.iter().map(move |param| self.lower_generic_param(param))\n+        params.iter().map(move |param| self.lower_generic_param(param, source))\n     }\n \n-    fn lower_generic_params(&mut self, params: &[GenericParam]) -> &'hir [hir::GenericParam<'hir>] {\n-        self.arena.alloc_from_iter(self.lower_generic_params_mut(params))\n+    fn lower_generic_params(\n+        &mut self,\n+        params: &[GenericParam],\n+        source: hir::GenericParamSource,\n+    ) -> &'hir [hir::GenericParam<'hir>] {\n+        self.arena.alloc_from_iter(self.lower_generic_params_mut(params, source))\n     }\n \n     #[instrument(level = \"trace\", skip(self))]\n-    fn lower_generic_param(&mut self, param: &GenericParam) -> hir::GenericParam<'hir> {\n+    fn lower_generic_param(\n+        &mut self,\n+        param: &GenericParam,\n+        source: hir::GenericParamSource,\n+    ) -> hir::GenericParam<'hir> {\n         let (name, kind) = self.lower_generic_param_kind(param);\n \n         let hir_id = self.lower_node_id(param.id);\n@@ -2174,6 +2193,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             pure_wrt_drop: self.tcx.sess.contains_name(&param.attrs, sym::may_dangle),\n             kind,\n             colon_span: param.colon_span.map(|s| self.lower_span(s)),\n+            source,\n         }\n     }\n \n@@ -2266,7 +2286,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     #[instrument(level = \"debug\", skip(self), ret)]\n-    fn lower_generic_and_bounds(\n+    fn lower_universal_param_and_bounds(\n         &mut self,\n         node_id: NodeId,\n         span: Span,\n@@ -2286,6 +2306,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             span,\n             kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n             colon_span: None,\n+            source: hir::GenericParamSource::Generics,\n         };\n \n         let preds = self.lower_generic_bound_predicate("}, {"sha": "19d3d41c9841c2a52ad26f798e286bdc25f6f73d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f851a8aefa5fd61405e8f82989995dce12d93bfc/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f851a8aefa5fd61405e8f82989995dce12d93bfc/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f851a8aefa5fd61405e8f82989995dce12d93bfc", "patch": "@@ -498,6 +498,7 @@ pub struct GenericParam<'hir> {\n     pub pure_wrt_drop: bool,\n     pub kind: GenericParamKind<'hir>,\n     pub colon_span: Option<Span>,\n+    pub source: GenericParamSource,\n }\n \n impl<'hir> GenericParam<'hir> {\n@@ -516,6 +517,20 @@ impl<'hir> GenericParam<'hir> {\n     }\n }\n \n+/// Records where the generic parameter originated from.\n+///\n+/// This can either be from an item's generics, in which case it's typically\n+/// early-bound (but can be a late-bound lifetime in functions, for example),\n+/// or from a `for<...>` binder, in which case it's late-bound (and notably,\n+/// does not show up in the parent item's generics).\n+#[derive(Debug, HashStable_Generic, PartialEq, Eq, Copy, Clone)]\n+pub enum GenericParamSource {\n+    // Early or late-bound parameters defined on an item\n+    Generics,\n+    // Late-bound parameters defined via a `for<...>`\n+    Binder,\n+}\n+\n #[derive(Default)]\n pub struct GenericParamCount {\n     pub lifetimes: usize,"}, {"sha": "b14e65183aa3dadb7d45ffe8abd915cb68139bd1", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 45, "deletions": 36, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f851a8aefa5fd61405e8f82989995dce12d93bfc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f851a8aefa5fd61405e8f82989995dce12d93bfc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=f851a8aefa5fd61405e8f82989995dce12d93bfc", "patch": "@@ -1034,45 +1034,53 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n fn object_lifetime_default(tcx: TyCtxt<'_>, param_def_id: DefId) -> ObjectLifetimeDefault {\n     debug_assert_eq!(tcx.def_kind(param_def_id), DefKind::TyParam);\n     let param_def_id = param_def_id.expect_local();\n-    let parent_def_id = tcx.local_parent(param_def_id);\n-    let generics = tcx.hir().get_generics(parent_def_id).unwrap();\n-    let param_hir_id = tcx.local_def_id_to_hir_id(param_def_id);\n-    let param = generics.params.iter().find(|p| p.hir_id == param_hir_id).unwrap();\n-\n-    // Scan the bounds and where-clauses on parameters to extract bounds\n-    // of the form `T:'a` so as to determine the `ObjectLifetimeDefault`\n-    // for each type parameter.\n-    match param.kind {\n-        GenericParamKind::Type { .. } => {\n-            let mut set = Set1::Empty;\n-\n-            // Look for `type: ...` where clauses.\n-            for bound in generics.bounds_for_param(param_def_id) {\n-                // Ignore `for<'a> type: ...` as they can change what\n-                // lifetimes mean (although we could \"just\" handle it).\n-                if !bound.bound_generic_params.is_empty() {\n-                    continue;\n-                }\n+    let hir::Node::GenericParam(param) = tcx.hir().get_by_def_id(param_def_id) else {\n+        bug!(\"expected GenericParam for object_lifetime_default\");\n+    };\n+    match param.source {\n+        hir::GenericParamSource::Generics => {\n+            let parent_def_id = tcx.local_parent(param_def_id);\n+            let generics = tcx.hir().get_generics(parent_def_id).unwrap();\n+            let param_hir_id = tcx.local_def_id_to_hir_id(param_def_id);\n+            let param = generics.params.iter().find(|p| p.hir_id == param_hir_id).unwrap();\n+\n+            // Scan the bounds and where-clauses on parameters to extract bounds\n+            // of the form `T:'a` so as to determine the `ObjectLifetimeDefault`\n+            // for each type parameter.\n+            match param.kind {\n+                GenericParamKind::Type { .. } => {\n+                    let mut set = Set1::Empty;\n+\n+                    // Look for `type: ...` where clauses.\n+                    for bound in generics.bounds_for_param(param_def_id) {\n+                        // Ignore `for<'a> type: ...` as they can change what\n+                        // lifetimes mean (although we could \"just\" handle it).\n+                        if !bound.bound_generic_params.is_empty() {\n+                            continue;\n+                        }\n \n-                for bound in bound.bounds {\n-                    if let hir::GenericBound::Outlives(lifetime) = bound {\n-                        set.insert(lifetime.res);\n+                        for bound in bound.bounds {\n+                            if let hir::GenericBound::Outlives(lifetime) = bound {\n+                                set.insert(lifetime.res);\n+                            }\n+                        }\n                     }\n-                }\n-            }\n \n-            match set {\n-                Set1::Empty => ObjectLifetimeDefault::Empty,\n-                Set1::One(hir::LifetimeName::Static) => ObjectLifetimeDefault::Static,\n-                Set1::One(hir::LifetimeName::Param(param_def_id)) => {\n-                    ObjectLifetimeDefault::Param(param_def_id.to_def_id())\n+                    match set {\n+                        Set1::Empty => ObjectLifetimeDefault::Empty,\n+                        Set1::One(hir::LifetimeName::Static) => ObjectLifetimeDefault::Static,\n+                        Set1::One(hir::LifetimeName::Param(param_def_id)) => {\n+                            ObjectLifetimeDefault::Param(param_def_id.to_def_id())\n+                        }\n+                        _ => ObjectLifetimeDefault::Ambiguous,\n+                    }\n+                }\n+                _ => {\n+                    bug!(\"object_lifetime_default_raw must only be called on a type parameter\")\n                 }\n-                _ => ObjectLifetimeDefault::Ambiguous,\n             }\n         }\n-        _ => {\n-            bug!(\"object_lifetime_default_raw must only be called on a type parameter\")\n-        }\n+        hir::GenericParamSource::Binder => ObjectLifetimeDefault::Empty,\n     }\n }\n \n@@ -1392,9 +1400,10 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             return;\n         }\n \n-        self.tcx\n-            .sess\n-            .delay_span_bug(self.tcx.hir().span(hir_id), \"could not resolve {param_def_id:?}\");\n+        self.tcx.sess.delay_span_bug(\n+            self.tcx.hir().span(hir_id),\n+            format!(\"could not resolve {param_def_id:?}\"),\n+        );\n     }\n \n     #[instrument(level = \"debug\", skip(self))]"}, {"sha": "9830241c3770cc7926acb4e78a477dd94af4bf57", "filename": "tests/ui/traits/non_lifetime_binders/object-lifetime-default-for-late.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f851a8aefa5fd61405e8f82989995dce12d93bfc/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fobject-lifetime-default-for-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f851a8aefa5fd61405e8f82989995dce12d93bfc/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fobject-lifetime-default-for-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fobject-lifetime-default-for-late.rs?ref=f851a8aefa5fd61405e8f82989995dce12d93bfc", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+// compile-flags: --crate-type=lib\n+\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+pub fn f<T>() where for<U> (T, U): Copy {}"}, {"sha": "667575b72d4cb6758133d1076d99be4c84b3621b", "filename": "tests/ui/traits/non_lifetime_binders/object-lifetime-default-for-late.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f851a8aefa5fd61405e8f82989995dce12d93bfc/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fobject-lifetime-default-for-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f851a8aefa5fd61405e8f82989995dce12d93bfc/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fobject-lifetime-default-for-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fobject-lifetime-default-for-late.stderr?ref=f851a8aefa5fd61405e8f82989995dce12d93bfc", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/object-lifetime-default-for-late.rs:4:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}