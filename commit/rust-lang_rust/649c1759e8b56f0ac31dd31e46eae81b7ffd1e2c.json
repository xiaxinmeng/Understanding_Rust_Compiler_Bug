{"sha": "649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OWMxNzU5ZThiNTZmMGFjMzFkZDMxZTQ2ZWFlODFiN2ZmZDFlMmM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-08T15:13:34Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:43Z"}, "message": "std::rand::reader: describe cfg!(endianness).", "tree": {"sha": "bd5b0f0fb2920d4e9f120705cfba5b5ef7af7c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5b0f0fb2920d4e9f120705cfba5b5ef7af7c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c", "html_url": "https://github.com/rust-lang/rust/commit/649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38732c4b5cf778cb1b441bfc4290b3e3524b80c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/38732c4b5cf778cb1b441bfc4290b3e3524b80c2", "html_url": "https://github.com/rust-lang/rust/commit/38732c4b5cf778cb1b441bfc4290b3e3524b80c2"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "961a5b2cd2869cdf49c652d7ff86118fcc772efa", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c", "patch": "@@ -47,13 +47,17 @@ impl<R: Reader> ReaderRng<R> {\n \n impl<R: Reader> Rng for ReaderRng<R> {\n     fn next_u32(&mut self) -> u32 {\n+        // This is designed for speed: reading a LE integer on a LE\n+        // platform just involves blitting the bytes into the memory\n+        // of the u32, similarly for BE on BE; avoiding byteswapping.\n         if cfg!(target_endian=\"little\") {\n             self.reader.read_le_u32_()\n         } else {\n             self.reader.read_be_u32_()\n         }\n     }\n     fn next_u64(&mut self) -> u64 {\n+        // see above for explanation.\n         if cfg!(target_endian=\"little\") {\n             self.reader.read_le_u64_()\n         } else {"}]}