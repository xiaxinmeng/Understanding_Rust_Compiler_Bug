{"sha": "c44f72430c7bf0c254fdb8f8a600c1825984e5a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NGY3MjQzMGM3YmYwYzI1NGZkYjhmOGE2MDBjMTgyNTk4NGU1YTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-16T18:25:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-20T09:22:24Z"}, "message": "resolve: Remove unused parameter from `resolve_ident_in_module`", "tree": {"sha": "a6f6fd517138108e9c7dcd98e2313a18cfde1cf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f6fd517138108e9c7dcd98e2313a18cfde1cf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c44f72430c7bf0c254fdb8f8a600c1825984e5a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c44f72430c7bf0c254fdb8f8a600c1825984e5a3", "html_url": "https://github.com/rust-lang/rust/commit/c44f72430c7bf0c254fdb8f8a600c1825984e5a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c44f72430c7bf0c254fdb8f8a600c1825984e5a3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5097f3d68dace106de4dbe524f7892e779a836e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5097f3d68dace106de4dbe524f7892e779a836e", "html_url": "https://github.com/rust-lang/rust/commit/a5097f3d68dace106de4dbe524f7892e779a836e"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "88641011335fd7730b37ec7f98d52fce3de64535", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c44f72430c7bf0c254fdb8f8a600c1825984e5a3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f72430c7bf0c254fdb8f8a600c1825984e5a3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c44f72430c7bf0c254fdb8f8a600c1825984e5a3", "patch": "@@ -704,8 +704,7 @@ impl<'a> Resolver<'a> {\n         } else {\n             for (name, span) in legacy_imports.imports {\n                 let ident = Ident::with_empty_ctxt(name);\n-                let result = self.resolve_ident_in_module(module, ident, MacroNS,\n-                                                          false, false, span);\n+                let result = self.resolve_ident_in_module(module, ident, MacroNS, false, span);\n                 if let Ok(binding) = result {\n                     let directive = macro_use_directive(span);\n                     self.potentially_unused_imports.push(directive);"}, {"sha": "9cf179b880cb2f4977675ee115fbdcfd7a687699", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c44f72430c7bf0c254fdb8f8a600c1825984e5a3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f72430c7bf0c254fdb8f8a600c1825984e5a3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c44f72430c7bf0c254fdb8f8a600c1825984e5a3", "patch": "@@ -2002,7 +2002,6 @@ impl<'a> Resolver<'a> {\n                                module: Module<'a>,\n                                mut ident: Ident,\n                                ns: Namespace,\n-                               ignore_unresolved_invocations: bool,\n                                record_used: bool,\n                                span: Span)\n                                -> Result<&'a NameBinding<'a>, Determinacy> {\n@@ -2012,7 +2011,7 @@ impl<'a> Resolver<'a> {\n             self.current_module = self.macro_def_scope(def);\n         }\n         let result = self.resolve_ident_in_module_unadjusted(\n-            module, ident, ns, ignore_unresolved_invocations, record_used, span,\n+            module, ident, ns, false, record_used, span,\n         );\n         self.current_module = orig_current_module;\n         result\n@@ -2518,7 +2517,7 @@ impl<'a> Resolver<'a> {\n         // If there is a TraitRef in scope for an impl, then the method must be in the\n         // trait.\n         if let Some((module, _)) = self.current_trait_ref {\n-            if self.resolve_ident_in_module(module, ident, ns, false, false, span).is_err() {\n+            if self.resolve_ident_in_module(module, ident, ns, false, span).is_err() {\n                 let path = &self.current_trait_ref.as_ref().unwrap().1.path;\n                 resolve_error(self, span, err(ident.name, &path_names_to_string(path)));\n             }\n@@ -3468,7 +3467,7 @@ impl<'a> Resolver<'a> {\n             }\n \n             let binding = if let Some(module) = module {\n-                self.resolve_ident_in_module(module, ident, ns, false, record_used, path_span)\n+                self.resolve_ident_in_module(module, ident, ns, record_used, path_span)\n             } else if opt_ns == Some(MacroNS) {\n                 self.resolve_lexical_macro_path_segment(ident, ns, record_used, path_span)\n                     .map(MacroBinding::binding)\n@@ -3762,7 +3761,7 @@ impl<'a> Resolver<'a> {\n         // Look for associated items in the current trait.\n         if let Some((module, _)) = self.current_trait_ref {\n             if let Ok(binding) =\n-                    self.resolve_ident_in_module(module, ident, ns, false, false, module.span) {\n+                    self.resolve_ident_in_module(module, ident, ns, false, module.span) {\n                 let def = binding.def();\n                 if filter_fn(def) {\n                     return Some(if self.has_self.contains(&def.def_id()) {\n@@ -4075,7 +4074,7 @@ impl<'a> Resolver<'a> {\n         let mut found_traits = Vec::new();\n         // Look for the current trait.\n         if let Some((module, _)) = self.current_trait_ref {\n-            if self.resolve_ident_in_module(module, ident, ns, false, false, module.span).is_ok() {\n+            if self.resolve_ident_in_module(module, ident, ns, false, module.span).is_ok() {\n                 let def_id = module.def_id().unwrap();\n                 found_traits.push(TraitCandidate { def_id: def_id, import_id: None });\n             }"}, {"sha": "329926389a8a6b1a757970881faad5082fba80bb", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c44f72430c7bf0c254fdb8f8a600c1825984e5a3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f72430c7bf0c254fdb8f8a600c1825984e5a3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c44f72430c7bf0c254fdb8f8a600c1825984e5a3", "patch": "@@ -244,7 +244,7 @@ impl<'a> Resolver<'a> {\n                 SingleImport { source, .. } => source,\n                 _ => unreachable!(),\n             };\n-            match this.resolve_ident_in_module(module, ident, ns, false, false, path_span) {\n+            match this.resolve_ident_in_module(module, ident, ns, false, path_span) {\n                 Err(Determined) => {}\n                 _ => return false,\n             }\n@@ -630,7 +630,6 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                                                             source,\n                                                             ns,\n                                                             false,\n-                                                            false,\n                                                             directive.span));\n             } else {\n                 return\n@@ -803,7 +802,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         if all_ns_err {\n             let mut all_ns_failed = true;\n             self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n-                match this.resolve_ident_in_module(module, ident, ns, false, true, span) {\n+                match this.resolve_ident_in_module(module, ident, ns, true, span) {\n                     Ok(_) => all_ns_failed = false,\n                     _ => {}\n                 }"}]}