{"sha": "c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OWJjNTRkNGYwMTc0YmQ3Yzg2NjkzZGMzYjA1MDBkMTFkNzU2ZDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-17T08:31:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-17T08:31:30Z"}, "message": "Rollup merge of #59128 - oli-obk:colorful_json, r=mark-i-m,eddyb\n\nEmit ansi color codes in the `rendered` field of json diagnostics\n\ncc @ljedrz\n\nImplemented for https://github.com/rust-lang/rust/pull/56595#issuecomment-447645115 (x.py clippy)", "tree": {"sha": "0130a011c0194dfbcd49b4078e6b6a7be1f138e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0130a011c0194dfbcd49b4078e6b6a7be1f138e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJctuRiCRBK7hj4Ov3rIwAAdHIIABmHp4KthicicATEc8J84FB+\nlK/AdfEOgFzUIhleACC5TeV64z/4GhDWv14UfSAMdnGuZakBf86JiySIaQhMHVHG\nComj/SpOJw5oWAZ0O1BJ/p82Urjj+msNS2jrmqYKXW75D8L7i9qkWhQ7qzofp1bt\nE4OE4Ky1iAewRP+75QsFcd4N7fPJG5irhKdahBL08xbviEz0KyudasxjyVjQ8ZCx\n5asVNxmGEMcEJrrNMdTeGSSIfkxihYV0UfJxG3jMr1s6NmU8L3g3CP4+oCJsvt6U\nlZWuquwoCRwAJNv8eMYvaUfPHeh31cTyleziBuUI3YDVMOMAhEMe5NBc7Q1zGyI=\n=nOfu\n-----END PGP SIGNATURE-----\n", "payload": "tree 0130a011c0194dfbcd49b4078e6b6a7be1f138e7\nparent 258e3b3a75a0da006cd492307fc46ef605e774ad\nparent 5c6a43a58bfb31bcabfd52e2c378cdaa48a68290\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555489890 +0200\ncommitter GitHub <noreply@github.com> 1555489890 +0200\n\nRollup merge of #59128 - oli-obk:colorful_json, r=mark-i-m,eddyb\n\nEmit ansi color codes in the `rendered` field of json diagnostics\n\ncc @ljedrz\n\nImplemented for https://github.com/rust-lang/rust/pull/56595#issuecomment-447645115 (x.py clippy)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "html_url": "https://github.com/rust-lang/rust/commit/c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "258e3b3a75a0da006cd492307fc46ef605e774ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/258e3b3a75a0da006cd492307fc46ef605e774ad", "html_url": "https://github.com/rust-lang/rust/commit/258e3b3a75a0da006cd492307fc46ef605e774ad"}, {"sha": "5c6a43a58bfb31bcabfd52e2c378cdaa48a68290", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6a43a58bfb31bcabfd52e2c378cdaa48a68290", "html_url": "https://github.com/rust-lang/rust/commit/5c6a43a58bfb31bcabfd52e2c378cdaa48a68290"}], "stats": {"total": 517, "additions": 287, "deletions": 230}, "files": [{"sha": "dc1ceaf69f0135cb7da294658b2bb07a55ff968a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 70, "deletions": 36, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -19,6 +19,7 @@ use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n use syntax::feature_gate::UnstableFeatures;\n+use errors::emitter::HumanReadableErrorType;\n \n use errors::{ColorConfig, FatalError, Handler};\n \n@@ -219,14 +220,18 @@ impl OutputType {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum ErrorOutputType {\n-    HumanReadable(ColorConfig),\n-    Json(bool),\n-    Short(ColorConfig),\n+    HumanReadable(HumanReadableErrorType),\n+    Json {\n+        /// Render the json in a human readable way (with indents and newlines)\n+        pretty: bool,\n+        /// The way the `rendered` field is created\n+        json_rendered: HumanReadableErrorType,\n+    },\n }\n \n impl Default for ErrorOutputType {\n     fn default() -> ErrorOutputType {\n-        ErrorOutputType::HumanReadable(ColorConfig::Auto)\n+        ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(ColorConfig::Auto))\n     }\n }\n \n@@ -1372,6 +1377,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"print some statistics about AST and HIR\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n         \"encode MIR of all functions into the crate metadata\"),\n+    json_rendered: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"describes how to render the `rendered` field of json diagnostics\"),\n     unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],\n         \"take the breaks off const evaluation. NOTE: this is unsound\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n@@ -1825,6 +1832,12 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"How errors and other messages are produced\",\n             \"human|json|short\",\n         ),\n+        opt::opt(\n+            \"\",\n+            \"json-rendered\",\n+            \"Choose `rendered` field of json diagnostics render scheme\",\n+            \"plain|termcolor\",\n+        ),\n         opt::opt_s(\n             \"\",\n             \"color\",\n@@ -1965,21 +1978,32 @@ pub fn build_session_options_and_crate_config(\n         )\n     }\n \n+    let json_rendered = matches.opt_str(\"json-rendered\").and_then(|s| match s.as_str() {\n+        \"plain\" => None,\n+        \"termcolor\" => Some(HumanReadableErrorType::Default(ColorConfig::Always)),\n+        _ => early_error(\n+            ErrorOutputType::default(),\n+            &format!(\n+                \"argument for --json-rendered must be `plain` or `termcolor` (instead was `{}`)\",\n+                s,\n+            ),\n+        ),\n+    }).unwrap_or(HumanReadableErrorType::Default(ColorConfig::Never));\n \n     // We need the opts_present check because the driver will send us Matches\n     // with only stable options if no unstable options are used. Since error-format\n     // is unstable, it will not be present. We have to use opts_present not\n     // opt_present because the latter will panic.\n     let error_format = if matches.opts_present(&[\"error-format\".to_owned()]) {\n         match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n-            Some(\"human\") => ErrorOutputType::HumanReadable(color),\n-            Some(\"json\") => ErrorOutputType::Json(false),\n-            Some(\"pretty-json\") => ErrorOutputType::Json(true),\n-            Some(\"short\") => ErrorOutputType::Short(color),\n-            None => ErrorOutputType::HumanReadable(color),\n+            None |\n+            Some(\"human\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n+            Some(\"json\") => ErrorOutputType::Json { pretty: false, json_rendered },\n+            Some(\"pretty-json\") => ErrorOutputType::Json { pretty: true, json_rendered },\n+            Some(\"short\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Short(color)),\n \n             Some(arg) => early_error(\n-                ErrorOutputType::HumanReadable(color),\n+                ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n                 &format!(\n                     \"argument for --error-format must be `human`, `json` or \\\n                      `short` (instead was `{}`)\",\n@@ -1988,7 +2012,7 @@ pub fn build_session_options_and_crate_config(\n             ),\n         }\n     } else {\n-        ErrorOutputType::HumanReadable(color)\n+        ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color))\n     };\n \n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n@@ -2000,11 +2024,16 @@ pub fn build_session_options_and_crate_config(\n \n     let mut debugging_opts = build_debugging_options(matches, error_format);\n \n-    if !debugging_opts.unstable_options && error_format == ErrorOutputType::Json(true) {\n-        early_error(\n-            ErrorOutputType::Json(false),\n-            \"--error-format=pretty-json is unstable\",\n-        );\n+    if !debugging_opts.unstable_options {\n+        if matches.opt_str(\"json-rendered\").is_some() {\n+            early_error(error_format, \"`--json-rendered=x` is unstable\");\n+        }\n+        if let ErrorOutputType::Json { pretty: true, json_rendered } = error_format {\n+            early_error(\n+                ErrorOutputType::Json { pretty: false, json_rendered },\n+                \"--error-format=pretty-json is unstable\",\n+            );\n+        }\n     }\n \n     if debugging_opts.pgo_gen.enabled() && !debugging_opts.pgo_use.is_empty() {\n@@ -2928,50 +2957,55 @@ mod tests {\n         let mut v3 = Options::default();\n         let mut v4 = Options::default();\n \n+        const JSON: super::ErrorOutputType = super::ErrorOutputType::Json {\n+            pretty: false,\n+            json_rendered: super::HumanReadableErrorType::Default(super::ColorConfig::Never),\n+        };\n+\n         // Reference\n         v1.search_paths\n-            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", JSON));\n         v1.search_paths\n-            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", JSON));\n         v1.search_paths\n-            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", JSON));\n         v1.search_paths\n-            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", JSON));\n         v1.search_paths\n-            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", JSON));\n \n         v2.search_paths\n-            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", JSON));\n         v2.search_paths\n-            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", JSON));\n         v2.search_paths\n-            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", JSON));\n         v2.search_paths\n-            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", JSON));\n         v2.search_paths\n-            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", JSON));\n \n         v3.search_paths\n-            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", JSON));\n         v3.search_paths\n-            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", JSON));\n         v3.search_paths\n-            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", JSON));\n         v3.search_paths\n-            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", JSON));\n         v3.search_paths\n-            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", JSON));\n \n         v4.search_paths\n-            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", JSON));\n         v4.search_paths\n-            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", JSON));\n         v4.search_paths\n-            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", JSON));\n         v4.search_paths\n-            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", JSON));\n         v4.search_paths\n-            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", JSON));\n \n         assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() == v3.dep_tracking_hash());"}, {"sha": "eed516a43817504c111f4a2899fe0ba22aa4f456", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -1033,39 +1033,42 @@ fn default_emitter(\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n     match (sopts.error_format, emitter_dest) {\n-        (config::ErrorOutputType::HumanReadable(color_config), None) => Box::new(\n-            EmitterWriter::stderr(\n-                color_config,\n-                Some(source_map.clone()),\n-                false,\n-                sopts.debugging_opts.teach,\n-            ).ui_testing(sopts.debugging_opts.ui_testing),\n-        ),\n-        (config::ErrorOutputType::HumanReadable(_), Some(dst)) => Box::new(\n-            EmitterWriter::new(dst, Some(source_map.clone()), false, false)\n-                .ui_testing(sopts.debugging_opts.ui_testing),\n-        ),\n-        (config::ErrorOutputType::Json(pretty), None) => Box::new(\n+        (config::ErrorOutputType::HumanReadable(kind), dst) => {\n+            let (short, color_config) = kind.unzip();\n+            let emitter = match dst {\n+                None => EmitterWriter::stderr(\n+                    color_config,\n+                    Some(source_map.clone()),\n+                    short,\n+                    sopts.debugging_opts.teach,\n+                ),\n+                Some(dst) => EmitterWriter::new(\n+                    dst,\n+                    Some(source_map.clone()),\n+                    short,\n+                    false, // no teach messages when writing to a buffer\n+                    false, // no colors when writing to a buffer\n+                ),\n+            };\n+            Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n+        },\n+        (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n             JsonEmitter::stderr(\n                 Some(registry),\n                 source_map.clone(),\n                 pretty,\n+                json_rendered,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n-        (config::ErrorOutputType::Json(pretty), Some(dst)) => Box::new(\n+        (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n                 dst,\n                 Some(registry),\n                 source_map.clone(),\n                 pretty,\n+                json_rendered,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n-        (config::ErrorOutputType::Short(color_config), None) => Box::new(\n-            EmitterWriter::stderr(color_config, Some(source_map.clone()), true, false),\n-        ),\n-        (config::ErrorOutputType::Short(_), Some(dst)) => {\n-            Box::new(EmitterWriter::new(dst, Some(source_map.clone()), true, false))\n-        }\n     }\n }\n \n@@ -1322,13 +1325,12 @@ pub enum IncrCompSession {\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n-        config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, false, false))\n-        }\n-        config::ErrorOutputType::Json(pretty) => Box::new(JsonEmitter::basic(pretty)),\n-        config::ErrorOutputType::Short(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, true, false))\n+        config::ErrorOutputType::HumanReadable(kind) => {\n+            let (short, color_config) = kind.unzip();\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false))\n         }\n+        config::ErrorOutputType::Json { pretty, json_rendered } =>\n+            Box::new(JsonEmitter::basic(pretty, json_rendered)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n@@ -1337,13 +1339,12 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n-        config::ErrorOutputType::HumanReadable(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, false, false))\n-        }\n-        config::ErrorOutputType::Json(pretty) => Box::new(JsonEmitter::basic(pretty)),\n-        config::ErrorOutputType::Short(color_config) => {\n-            Box::new(EmitterWriter::stderr(color_config, None, true, false))\n+        config::ErrorOutputType::HumanReadable(kind) => {\n+            let (short, color_config) = kind.unzip();\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false))\n         }\n+        config::ErrorOutputType::Json { pretty, json_rendered } =>\n+            Box::new(JsonEmitter::basic(pretty, json_rendered)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);"}, {"sha": "a1472479afa89f001154453cfb3fa490e3a0ba39", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -16,9 +16,35 @@ use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n use std::cmp::{min, Reverse};\n-use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter};\n+use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter, Ansi};\n use termcolor::{WriteColor, Color, Buffer};\n \n+/// Describes the way the content of the `rendered` field of the json output is generated\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub enum HumanReadableErrorType {\n+    Default(ColorConfig),\n+    Short(ColorConfig),\n+}\n+\n+impl HumanReadableErrorType {\n+    /// Returns a (`short`, `color`) tuple\n+    pub fn unzip(self) -> (bool, ColorConfig) {\n+        match self {\n+            HumanReadableErrorType::Default(cc) => (false, cc),\n+            HumanReadableErrorType::Short(cc) => (true, cc),\n+        }\n+    }\n+    pub fn new_emitter(\n+        self,\n+        dst: Box<dyn Write + Send>,\n+        source_map: Option<Lrc<SourceMapperDyn>>,\n+        teach: bool,\n+    ) -> EmitterWriter {\n+        let (short, color_config) = self.unzip();\n+        EmitterWriter::new(dst, source_map, short, teach, color_config.suggests_using_colors())\n+    }\n+}\n+\n const ANONYMIZED_LINE_NUM: &str = \"LL\";\n \n /// Emitter trait for emitting errors.\n@@ -104,8 +130,8 @@ pub enum ColorConfig {\n }\n \n impl ColorConfig {\n-    fn to_color_choice(&self) -> ColorChoice {\n-        match *self {\n+    fn to_color_choice(self) -> ColorChoice {\n+        match self {\n             ColorConfig::Always => {\n                 if atty::is(atty::Stream::Stderr) {\n                     ColorChoice::Always\n@@ -120,6 +146,14 @@ impl ColorConfig {\n             ColorConfig::Auto => ColorChoice::Never,\n         }\n     }\n+    fn suggests_using_colors(self) -> bool {\n+        match self {\n+            | ColorConfig::Always\n+            | ColorConfig::Auto\n+            => true,\n+            ColorConfig::Never => false,\n+        }\n+    }\n }\n \n pub struct EmitterWriter {\n@@ -152,13 +186,15 @@ impl EmitterWriter {\n         }\n     }\n \n-    pub fn new(dst: Box<dyn Write + Send>,\n-               source_map: Option<Lrc<SourceMapperDyn>>,\n-               short_message: bool,\n-               teach: bool)\n-               -> EmitterWriter {\n+    pub fn new(\n+        dst: Box<dyn Write + Send>,\n+        source_map: Option<Lrc<SourceMapperDyn>>,\n+        short_message: bool,\n+        teach: bool,\n+        colored: bool,\n+    ) -> EmitterWriter {\n         EmitterWriter {\n-            dst: Raw(dst),\n+            dst: Raw(dst, colored),\n             sm: source_map,\n             short_message,\n             teach,\n@@ -1538,13 +1574,15 @@ fn emit_to_destination(rendered_buffer: &[Vec<StyledString>],\n pub enum Destination {\n     Terminal(StandardStream),\n     Buffered(BufferWriter),\n-    Raw(Box<dyn Write + Send>),\n+    // The bool denotes whether we should be emitting ansi color codes or not\n+    Raw(Box<(dyn Write + Send)>, bool),\n }\n \n pub enum WritableDst<'a> {\n     Terminal(&'a mut StandardStream),\n     Buffered(&'a mut BufferWriter, Buffer),\n-    Raw(&'a mut Box<dyn Write + Send>),\n+    Raw(&'a mut (dyn Write + Send)),\n+    ColoredRaw(Ansi<&'a mut (dyn Write + Send)>),\n }\n \n impl Destination {\n@@ -1570,7 +1608,8 @@ impl Destination {\n                 let buf = t.buffer();\n                 WritableDst::Buffered(t, buf)\n             }\n-            Destination::Raw(ref mut t) => WritableDst::Raw(t),\n+            Destination::Raw(ref mut t, false) => WritableDst::Raw(t),\n+            Destination::Raw(ref mut t, true) => WritableDst::ColoredRaw(Ansi::new(t)),\n         }\n     }\n }\n@@ -1628,6 +1667,7 @@ impl<'a> WritableDst<'a> {\n         match *self {\n             WritableDst::Terminal(ref mut t) => t.set_color(color),\n             WritableDst::Buffered(_, ref mut t) => t.set_color(color),\n+            WritableDst::ColoredRaw(ref mut t) => t.set_color(color),\n             WritableDst::Raw(_) => Ok(())\n         }\n     }\n@@ -1636,6 +1676,7 @@ impl<'a> WritableDst<'a> {\n         match *self {\n             WritableDst::Terminal(ref mut t) => t.reset(),\n             WritableDst::Buffered(_, ref mut t) => t.reset(),\n+            WritableDst::ColoredRaw(ref mut t) => t.reset(),\n             WritableDst::Raw(_) => Ok(()),\n         }\n     }\n@@ -1647,6 +1688,7 @@ impl<'a> Write for WritableDst<'a> {\n             WritableDst::Terminal(ref mut t) => t.write(bytes),\n             WritableDst::Buffered(_, ref mut buf) => buf.write(bytes),\n             WritableDst::Raw(ref mut w) => w.write(bytes),\n+            WritableDst::ColoredRaw(ref mut t) => t.write(bytes),\n         }\n     }\n \n@@ -1655,6 +1697,7 @@ impl<'a> Write for WritableDst<'a> {\n             WritableDst::Terminal(ref mut t) => t.flush(),\n             WritableDst::Buffered(_, ref mut buf) => buf.flush(),\n             WritableDst::Raw(ref mut w) => w.flush(),\n+            WritableDst::ColoredRaw(ref mut w) => w.flush(),\n         }\n     }\n }"}, {"sha": "769ea3ff7bc740848b01dc7f8c82d5b6bd7b5802", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n use std::path::PathBuf;\n \n use errors;\n-use errors::emitter::ColorConfig;\n+use errors::emitter::{ColorConfig, HumanReadableErrorType};\n use getopts;\n use rustc::lint::Level;\n use rustc::session::early_error;\n@@ -254,12 +254,19 @@ impl Options {\n                                       (instead was `{}`)\", arg));\n             }\n         };\n+        // FIXME: deduplicate this code from the identical code in librustc/session/config.rs\n         let error_format = match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n-            Some(\"human\") => ErrorOutputType::HumanReadable(color),\n-            Some(\"json\") => ErrorOutputType::Json(false),\n-            Some(\"pretty-json\") => ErrorOutputType::Json(true),\n-            Some(\"short\") => ErrorOutputType::Short(color),\n-            None => ErrorOutputType::HumanReadable(color),\n+            None |\n+            Some(\"human\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n+            Some(\"json\") => ErrorOutputType::Json {\n+                pretty: false,\n+                json_rendered: HumanReadableErrorType::Default(ColorConfig::Never),\n+            },\n+            Some(\"pretty-json\") => ErrorOutputType::Json {\n+                pretty: true,\n+                json_rendered: HumanReadableErrorType::Default(ColorConfig::Never),\n+            },\n+            Some(\"short\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Short(color)),\n             Some(arg) => {\n                 early_error(ErrorOutputType::default(),\n                             &format!(\"argument for --error-format must be `human`, `json` or \\"}, {"sha": "c141b47481531fd446f436194545d1d439ab634d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -299,32 +299,29 @@ pub fn new_handler(error_format: ErrorOutputType,\n     // stick to the defaults\n     let sessopts = Options::default();\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n-        ErrorOutputType::HumanReadable(color_config) => Box::new(\n-            EmitterWriter::stderr(\n-                color_config,\n-                source_map.map(|cm| cm as _),\n-                false,\n-                sessopts.debugging_opts.teach,\n-            ).ui_testing(ui_testing)\n-        ),\n-        ErrorOutputType::Json(pretty) => {\n+        ErrorOutputType::HumanReadable(kind) => {\n+            let (short, color_config) = kind.unzip();\n+            Box::new(\n+                EmitterWriter::stderr(\n+                    color_config,\n+                    source_map.map(|cm| cm as _),\n+                    short,\n+                    sessopts.debugging_opts.teach,\n+                ).ui_testing(ui_testing)\n+            )\n+        },\n+        ErrorOutputType::Json { pretty, json_rendered } => {\n             let source_map = source_map.unwrap_or_else(\n                 || Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping())));\n             Box::new(\n                 JsonEmitter::stderr(\n                     None,\n                     source_map,\n                     pretty,\n+                    json_rendered,\n                 ).ui_testing(ui_testing)\n             )\n         },\n-        ErrorOutputType::Short(color_config) => Box::new(\n-            EmitterWriter::stderr(\n-                color_config,\n-                source_map.map(|cm| cm as _),\n-                true,\n-                false)\n-        ),\n     };\n \n     errors::Handler::with_emitter_and_flags("}, {"sha": "abf74158c938e4b0b8f65f6dd9646ece7e517510", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -381,7 +381,7 @@ pub fn make_test(s: &str,\n         // Any errors in parsing should also appear when the doctest is compiled for real, so just\n         // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let emitter = EmitterWriter::new(box io::sink(), None, false, false);\n+        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false);\n         let handler = Handler::with_emitter(false, None, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);\n "}, {"sha": "c19b408442ad12b16b224dbd3ab4f36201c0d6f9", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -14,7 +14,7 @@ use crate::source_map::{SourceMap, FilePathMapping};\n use errors::registry::Registry;\n use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, SourceMapper};\n use errors::{DiagnosticId, Applicability};\n-use errors::emitter::{Emitter, EmitterWriter};\n+use errors::emitter::{Emitter, HumanReadableErrorType};\n \n use syntax_pos::{MacroBacktrace, Span, SpanLabel, MultiSpan};\n use rustc_data_structures::sync::{self, Lrc};\n@@ -30,37 +30,46 @@ pub struct JsonEmitter {\n     sm: Lrc<dyn SourceMapper + sync::Send + sync::Sync>,\n     pretty: bool,\n     ui_testing: bool,\n+    json_rendered: HumanReadableErrorType,\n }\n \n impl JsonEmitter {\n-    pub fn stderr(registry: Option<Registry>,\n-                  source_map: Lrc<SourceMap>,\n-                  pretty: bool) -> JsonEmitter {\n+    pub fn stderr(\n+        registry: Option<Registry>,\n+        source_map: Lrc<SourceMap>,\n+        pretty: bool,\n+        json_rendered: HumanReadableErrorType,\n+    ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n             registry,\n             sm: source_map,\n             pretty,\n             ui_testing: false,\n+            json_rendered,\n         }\n     }\n \n-    pub fn basic(pretty: bool) -> JsonEmitter {\n+    pub fn basic(pretty: bool, json_rendered: HumanReadableErrorType) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(None, Lrc::new(SourceMap::new(file_path_mapping)),\n-                            pretty)\n+                            pretty, json_rendered)\n     }\n \n-    pub fn new(dst: Box<dyn Write + Send>,\n-               registry: Option<Registry>,\n-               source_map: Lrc<SourceMap>,\n-               pretty: bool) -> JsonEmitter {\n+    pub fn new(\n+        dst: Box<dyn Write + Send>,\n+        registry: Option<Registry>,\n+        source_map: Lrc<SourceMap>,\n+        pretty: bool,\n+        json_rendered: HumanReadableErrorType,\n+    ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n             registry,\n             sm: source_map,\n             pretty,\n             ui_testing: false,\n+            json_rendered,\n         }\n     }\n \n@@ -190,7 +199,7 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        EmitterWriter::new(Box::new(buf), Some(je.sm.clone()), false, false)\n+        je.json_rendered.new_emitter(Box::new(buf), Some(je.sm.clone()), false)\n             .ui_testing(je.ui_testing).emit(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();"}, {"sha": "3b980fafc2f1c4e6c2ed3c6e24964be271cf1e54", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -1920,6 +1920,7 @@ mod tests {\n         let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()),\n                                                           Some(sm.clone()),\n                                                           false,\n+                                                          false,\n                                                           false);\n         ParseSess {\n             span_diagnostic: errors::Handler::with_emitter(true, None, Box::new(emitter)),"}, {"sha": "cba429068fd5b6841dabc60f4aabe95ab2fed175", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -57,6 +57,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n         let emitter = EmitterWriter::new(Box::new(Shared { data: output.clone() }),\n                                         Some(source_map.clone()),\n                                         false,\n+                                        false,\n                                         false);\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");"}, {"sha": "9679ce4a2ae1d1638d8f3b479e70d1d656c138b7", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -1,5 +1,6 @@\n // ignore-cloudabi\n-// compile-flags: --error-format pretty-json -Zunstable-options\n+// ignore-windows\n+// compile-flags: --error-format pretty-json -Zunstable-options --json-rendered=termcolor\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested"}, {"sha": "632666db75b667b01ae691d23ec8a4a53521ac9a", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -73,10 +73,10 @@ mod foo {\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-      \"byte_start\": 440,\n-      \"byte_end\": 444,\n-      \"line_start\": 11,\n-      \"line_end\": 11,\n+      \"byte_start\": 484,\n+      \"byte_end\": 488,\n+      \"line_start\": 12,\n+      \"line_end\": 12,\n       \"column_start\": 12,\n       \"column_end\": 16,\n       \"is_primary\": true,\n@@ -101,10 +101,10 @@ mod foo {\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -124,10 +124,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -147,10 +147,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -170,10 +170,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -193,10 +193,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -216,10 +216,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -239,10 +239,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -262,10 +262,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -285,10 +285,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -308,10 +308,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -331,10 +331,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -354,10 +354,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 417,\n-          \"byte_end\": 417,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 461,\n+          \"byte_end\": 461,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -380,22 +380,22 @@ mod foo {\n       \"rendered\": null\n     }\n   ],\n-  \"rendered\": \"error[E0412]: cannot find type `Iter` in this scope\n-  --> $DIR/use_suggestion_json.rs:11:12\n-   |\n-LL |     let x: Iter;\n-   |            ^^^^ not found in this scope\n-help: possible candidates are found in other modules, you can import them into scope\n-   |\n-LL | use std::collections::binary_heap::Iter;\n-   |\n-LL | use std::collections::btree_map::Iter;\n-   |\n-LL | use std::collections::btree_set::Iter;\n-   |\n-LL | use std::collections::hash_map::Iter;\n-   |\n-and 8 other candidates\n+  \"rendered\": \"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0412]\\u001b[0m\\u001b[0m\\u001b[1m: cannot find type `Iter` in this scope\\u001b[0m\n+\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m$DIR/use_suggestion_json.rs:12:12\\u001b[0m\n+\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n+\\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m    let x: Iter;\\u001b[0m\n+\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m           \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mnot found in this scope\\u001b[0m\n+\\u001b[0m\\u001b[1m\\u001b[38;5;14mhelp\\u001b[0m\\u001b[0m: possible candidates are found in other modules, you can import them into scope\\u001b[0m\n+\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n+\\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0muse std::collections::binary_heap::Iter;\\u001b[0m\n+\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n+\\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0muse std::collections::btree_map::Iter;\\u001b[0m\n+\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n+\\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0muse std::collections::btree_set::Iter;\\u001b[0m\n+\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n+\\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0muse std::collections::hash_map::Iter;\\u001b[0m\n+\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n+\\u001b[0mand 8 other candidates\\u001b[0m\n \n \"\n }\n@@ -405,7 +405,7 @@ and 8 other candidates\n   \"level\": \"error\",\n   \"spans\": [],\n   \"children\": [],\n-  \"rendered\": \"error: aborting due to previous error\n+  \"rendered\": \"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror\\u001b[0m\\u001b[0m\\u001b[1m: aborting due to previous error\\u001b[0m\n \n \"\n }\n@@ -415,6 +415,6 @@ and 8 other candidates\n   \"level\": \"\",\n   \"spans\": [],\n   \"children\": [],\n-  \"rendered\": \"For more information about this error, try `rustc --explain E0412`.\n+  \"rendered\": \"\\u001b[0m\\u001b[1mFor more information about this error, try `rustc --explain E0412`.\\u001b[0m\n \"\n }"}, {"sha": "a7615f5f423a3d913219b29c5179298f77ca6d89", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -62,19 +62,20 @@ struct DiagnosticCode {\n     explanation: Option<String>,\n }\n \n-pub fn extract_rendered(output: &str, proc_res: &ProcRes) -> String {\n+pub fn extract_rendered(output: &str) -> String {\n     output\n         .lines()\n         .filter_map(|line| {\n             if line.starts_with('{') {\n                 match serde_json::from_str::<Diagnostic>(line) {\n                     Ok(diagnostic) => diagnostic.rendered,\n                     Err(error) => {\n-                        proc_res.fatal(Some(&format!(\n+                        print!(\n                             \"failed to decode compiler output as json: \\\n                              `{}`\\nline: {}\\noutput: {}\",\n                             error, line, output\n-                        )));\n+                        );\n+                        panic!()\n                     }\n                 }\n             } else {"}, {"sha": "6df56168973bb844649f8722443bb6f6ad4bccf4", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bc54d4f0174bd7c86693dc3b0500d11d756d2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=c89bc54d4f0174bd7c86693dc3b0500d11d756d2", "patch": "@@ -2090,50 +2090,10 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn fatal_proc_rec(&self, err: &str, proc_res: &ProcRes) -> ! {\n-        self.try_print_open_handles();\n         self.error(err);\n         proc_res.fatal(None);\n     }\n \n-    // This function is a poor man's attempt to debug rust-lang/rust#38620, if\n-    // that's closed then this should be deleted\n-    //\n-    // This is a very \"opportunistic\" debugging attempt, so we ignore all\n-    // errors here.\n-    fn try_print_open_handles(&self) {\n-        if !cfg!(windows) {\n-            return;\n-        }\n-        if self.config.mode != Incremental {\n-            return;\n-        }\n-\n-        let filename = match self.testpaths.file.file_stem() {\n-            Some(path) => path,\n-            None => return,\n-        };\n-\n-        let mut cmd = Command::new(\"handle.exe\");\n-        cmd.arg(\"-a\").arg(\"-u\");\n-        cmd.arg(filename);\n-        cmd.arg(\"-nobanner\");\n-        cmd.stdout(Stdio::piped());\n-        cmd.stderr(Stdio::piped());\n-        let output = match cmd.spawn().and_then(read2_abbreviated) {\n-            Ok(output) => output,\n-            Err(_) => return,\n-        };\n-        println!(\"---------------------------------------------------\");\n-        println!(\"ran extra command to debug rust-lang/rust#38620: \");\n-        println!(\"{:?}\", cmd);\n-        println!(\"result: {}\", output.status);\n-        println!(\"--- stdout ----------------------------------------\");\n-        println!(\"{}\", String::from_utf8_lossy(&output.stdout));\n-        println!(\"--- stderr ----------------------------------------\");\n-        println!(\"{}\", String::from_utf8_lossy(&output.stderr));\n-        println!(\"---------------------------------------------------\");\n-    }\n-\n     // codegen tests (using FileCheck)\n \n     fn compile_test_and_save_ir(&self) -> ProcRes {\n@@ -2844,7 +2804,7 @@ impl<'test> TestCx<'test> {\n         let stderr = if explicit {\n             proc_res.stderr.clone()\n         } else {\n-            json::extract_rendered(&proc_res.stderr, &proc_res)\n+            json::extract_rendered(&proc_res.stderr)\n         };\n \n         let normalized_stderr = self.normalize_output(&stderr, &self.props.normalize_stderr);\n@@ -3464,7 +3424,9 @@ impl ProcRes {\n              {}\\n\\\n              ------------------------------------------\\n\\\n              \\n\",\n-            self.status, self.cmdline, self.stdout, self.stderr\n+            self.status, self.cmdline,\n+            json::extract_rendered(&self.stdout),\n+            json::extract_rendered(&self.stderr),\n         );\n         // Use resume_unwind instead of panic!() to prevent a panic message + backtrace from\n         // compiletest, which is unnecessary noise."}]}