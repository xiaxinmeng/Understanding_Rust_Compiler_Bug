{"sha": "97c7022d08fac94c09f671322c0696d65a75cca0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YzcwMjJkMDhmYWM5NGMwOWY2NzEzMjJjMDY5NmQ2NWE3NWNjYTA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2020-12-07T15:33:43Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2020-12-07T16:19:43Z"}, "message": "rustc_codegen_ssa: use bitcasts instead of type punning for scalar transmutes.", "tree": {"sha": "30477c20542040936bb6ced6f7174171667cb0c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30477c20542040936bb6ced6f7174171667cb0c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c7022d08fac94c09f671322c0696d65a75cca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c7022d08fac94c09f671322c0696d65a75cca0", "html_url": "https://github.com/rust-lang/rust/commit/97c7022d08fac94c09f671322c0696d65a75cca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c7022d08fac94c09f671322c0696d65a75cca0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5721a5283b52afbf074d3bf13c3e37822278601", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5721a5283b52afbf074d3bf13c3e37822278601", "html_url": "https://github.com/rust-lang/rust/commit/e5721a5283b52afbf074d3bf13c3e37822278601"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "ce56f1635495e8082cdcab3be0e68e515d2217e9", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97c7022d08fac94c09f671322c0696d65a75cca0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c7022d08fac94c09f671322c0696d65a75cca0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=97c7022d08fac94c09f671322c0696d65a75cca0", "patch": "@@ -1395,6 +1395,25 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         dst: PlaceRef<'tcx, Bx::Value>,\n     ) {\n         let src = self.codegen_operand(bx, src);\n+\n+        // Special-case transmutes between scalars as simple bitcasts.\n+        match (&src.layout.abi, &dst.layout.abi) {\n+            (abi::Abi::Scalar(src_scalar), abi::Abi::Scalar(dst_scalar)) => {\n+                // HACK(eddyb) LLVM doesn't like `bitcast`s between pointers and non-pointers.\n+                if (src_scalar.value == abi::Pointer) == (dst_scalar.value == abi::Pointer) {\n+                    assert_eq!(src.layout.size, dst.layout.size);\n+\n+                    // NOTE(eddyb) the `from_immediate` and `to_immediate_scalar`\n+                    // conversions allow handling `bool`s the same as `u8`s.\n+                    let src = bx.from_immediate(src.immediate());\n+                    let src_as_dst = bx.bitcast(src, bx.backend_type(dst.layout));\n+                    Immediate(bx.to_immediate_scalar(src_as_dst, dst_scalar)).store(bx, dst);\n+                    return;\n+                }\n+            }\n+            _ => {}\n+        }\n+\n         let llty = bx.backend_type(src.layout);\n         let cast_ptr = bx.pointercast(dst.llval, bx.type_ptr_to(llty));\n         let align = src.layout.align.abi.min(dst.align);"}, {"sha": "48aea4a2f086330978dc3446db66f91269a9f711", "filename": "src/test/codegen/transmute-scalar.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/97c7022d08fac94c09f671322c0696d65a75cca0/src%2Ftest%2Fcodegen%2Ftransmute-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c7022d08fac94c09f671322c0696d65a75cca0/src%2Ftest%2Fcodegen%2Ftransmute-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftransmute-scalar.rs?ref=97c7022d08fac94c09f671322c0696d65a75cca0", "patch": "@@ -0,0 +1,35 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: define i32 @f32_to_bits(float %x)\n+// CHECK: %2 = bitcast float %x to i32\n+// CHECK-NEXT: store i32 %2, i32* %0\n+// CHECK-NEXT: %3 = load i32, i32* %0\n+// CHECK: ret i32 %3\n+#[no_mangle]\n+pub fn f32_to_bits(x: f32) -> u32 {\n+    unsafe { std::mem::transmute(x) }\n+}\n+\n+// CHECK: define i8 @bool_to_byte(i1 zeroext %b)\n+// CHECK: %1 = zext i1 %b to i8\n+// CHECK-NEXT: store i8 %1, i8* %0\n+// CHECK-NEXT: %2 = load i8, i8* %0\n+// CHECK: ret i8 %2\n+#[no_mangle]\n+pub fn bool_to_byte(b: bool) -> u8 {\n+    unsafe { std::mem::transmute(b) }\n+}\n+\n+// CHECK: define zeroext i1 @byte_to_bool(i8 %byte)\n+// CHECK: %1 = trunc i8 %byte to i1\n+// CHECK-NEXT: %2 = zext i1 %1 to i8\n+// CHECK-NEXT: store i8 %2, i8* %0\n+// CHECK-NEXT: %3 = load i8, i8* %0\n+// CHECK-NEXT: %4 = trunc i8 %3 to i1\n+// CHECK: ret i1 %4\n+#[no_mangle]\n+pub unsafe fn byte_to_bool(byte: u8) -> bool {\n+    std::mem::transmute(byte)\n+}"}]}