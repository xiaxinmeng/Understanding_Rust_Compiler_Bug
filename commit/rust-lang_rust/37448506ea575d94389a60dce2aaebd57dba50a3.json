{"sha": "37448506ea575d94389a60dce2aaebd57dba50a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NDQ4NTA2ZWE1NzVkOTQzODlhNjBkY2UyYWFlYmQ1N2RiYTUwYTM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T03:05:29Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:14Z"}, "message": "compiletest: remove boxed closures", "tree": {"sha": "f302fb71c35d3708d23f30d07d0e128d3e36fb84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f302fb71c35d3708d23f30d07d0e128d3e36fb84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37448506ea575d94389a60dce2aaebd57dba50a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37448506ea575d94389a60dce2aaebd57dba50a3", "html_url": "https://github.com/rust-lang/rust/commit/37448506ea575d94389a60dce2aaebd57dba50a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37448506ea575d94389a60dce2aaebd57dba50a3/comments", "author": null, "committer": null, "parents": [{"sha": "b4ccc901660f08c7555ef8b1ce3e94fb12890a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ccc901660f08c7555ef8b1ce3e94fb12890a15", "html_url": "https://github.com/rust-lang/rust/commit/b4ccc901660f08c7555ef8b1ce3e94fb12890a15"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "48610b6b526d22899df5a4061453f673fd761cd5", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37448506ea575d94389a60dce2aaebd57dba50a3/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37448506ea575d94389a60dce2aaebd57dba50a3/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=37448506ea575d94389a60dce2aaebd57dba50a3", "patch": "@@ -339,8 +339,9 @@ pub fn is_test(config: &Config, testfile: &Path) -> bool {\n     return valid;\n }\n \n-pub fn make_test(config: &Config, testfile: &Path, f: || -> test::TestFn)\n-                 -> test::TestDescAndFn {\n+pub fn make_test<F>(config: &Config, testfile: &Path, f: F) -> test::TestDescAndFn where\n+    F: FnOnce() -> test::TestFn,\n+{\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: make_test_name(config, testfile),"}, {"sha": "2413a001ee8053b5bdbf9d90c8c0836f332c8bb7", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37448506ea575d94389a60dce2aaebd57dba50a3/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37448506ea575d94389a60dce2aaebd57dba50a3/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=37448506ea575d94389a60dce2aaebd57dba50a3", "patch": "@@ -220,7 +220,9 @@ pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n     !val\n }\n \n-fn iter_header(testfile: &Path, it: |&str| -> bool) -> bool {\n+fn iter_header<F>(testfile: &Path, mut it: F) -> bool where\n+    F: FnMut(&str) -> bool,\n+{\n     use std::io::{BufferedReader, File};\n \n     let mut rdr = BufferedReader::new(File::open(testfile).unwrap());"}, {"sha": "875061e69b7a28ce49bfc6c8070dbd5bb6f4c619", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37448506ea575d94389a60dce2aaebd57dba50a3/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37448506ea575d94389a60dce2aaebd57dba50a3/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=37448506ea575d94389a60dce2aaebd57dba50a3", "patch": "@@ -1233,12 +1233,14 @@ enum TargetLocation {\n     ThisDirectory(Path),\n }\n \n-fn make_compile_args(config: &Config,\n-                     props: &TestProps,\n-                     extras: Vec<String> ,\n-                     xform: |&Config, &Path| -> TargetLocation,\n-                     testfile: &Path)\n-                     -> ProcArgs {\n+fn make_compile_args<F>(config: &Config,\n+                        props: &TestProps,\n+                        extras: Vec<String> ,\n+                        xform: F,\n+                        testfile: &Path)\n+                        -> ProcArgs where\n+    F: FnOnce(&Config, &Path) -> TargetLocation,\n+{\n     let xform_file = xform(config, testfile);\n     let target = if props.force_host {\n         config.host.as_slice()"}]}