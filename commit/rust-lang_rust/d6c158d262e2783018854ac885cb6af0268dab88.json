{"sha": "d6c158d262e2783018854ac885cb6af0268dab88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzE1OGQyNjJlMjc4MzAxODg1NGFjODg1Y2I2YWYwMjY4ZGFiODg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-11T08:21:21Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-11T12:51:21Z"}, "message": "address nit from niko's review.", "tree": {"sha": "3224d9cea0f766d40a4eef91ce4c3255ac73bedc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3224d9cea0f766d40a4eef91ce4c3255ac73bedc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c158d262e2783018854ac885cb6af0268dab88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c158d262e2783018854ac885cb6af0268dab88", "html_url": "https://github.com/rust-lang/rust/commit/d6c158d262e2783018854ac885cb6af0268dab88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c158d262e2783018854ac885cb6af0268dab88/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51176df0182f37b71a0f6397ecde590efe4a757", "url": "https://api.github.com/repos/rust-lang/rust/commits/f51176df0182f37b71a0f6397ecde590efe4a757", "html_url": "https://github.com/rust-lang/rust/commit/f51176df0182f37b71a0f6397ecde590efe4a757"}], "stats": {"total": 41, "additions": 1, "deletions": 40}, "files": [{"sha": "1be6bf05c9962eceaff15c76ebbc60c74f847195", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d6c158d262e2783018854ac885cb6af0268dab88/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c158d262e2783018854ac885cb6af0268dab88/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=d6c158d262e2783018854ac885cb6af0268dab88", "patch": "@@ -170,43 +170,6 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n                 result\n             });\n \n-            let has_type_param_of_interest = dtor_generics.types.iter().any(|t| {\n-                let &ty::ParamBounds {\n-                    ref region_bounds, builtin_bounds, ref trait_bounds,\n-                    ref projection_bounds,\n-                } = &t.bounds;\n-\n-                // Belt-and-suspenders: The current set of builtin\n-                // bounds {Send, Sized, Copy, Sync} do not introduce\n-                // any new capability to access borrowed data hidden\n-                // behind a type parameter.\n-                //\n-                // In case new builtin bounds get added that do not\n-                // satisfy that property, ensure `builtin_bounds \\\n-                // {Send,Sized,Copy,Sync}` is empty.\n-\n-                let mut builtin_bounds = builtin_bounds;\n-                builtin_bounds.remove(&ty::BoundSend);\n-                builtin_bounds.remove(&ty::BoundSized);\n-                builtin_bounds.remove(&ty::BoundCopy);\n-                builtin_bounds.remove(&ty::BoundSync);\n-\n-                let has_bounds =\n-                    !region_bounds.is_empty() ||\n-                    !builtin_bounds.is_empty() ||\n-                    !trait_bounds.is_empty() ||\n-                    !projection_bounds.is_empty();\n-\n-                if has_bounds {\n-                    debug!(\"typ: {} has interesting dtor due to \\\n-                            bounds on param {}\",\n-                           typ.repr(rcx.tcx()), t.name);\n-                }\n-\n-                has_bounds\n-\n-            });\n-\n             // In `impl<'a> Drop ...`, we automatically assume\n             // `'a` is meaningful and thus represents a bound\n             // through which we could reach borrowed data.\n@@ -220,15 +183,13 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n \n             has_dtor_of_interest =\n                 has_region_param_of_interest ||\n-                has_type_param_of_interest ||\n                 has_pred_of_interest;\n \n             if has_dtor_of_interest {\n                 debug!(\"typ: {} has interesting dtor, due to \\\n-                        region params: {} type params: {} or pred: {}\",\n+                        region params: {} or pred: {}\",\n                        typ.repr(rcx.tcx()),\n                        has_region_param_of_interest,\n-                       has_type_param_of_interest,\n                        has_pred_of_interest);\n             } else {\n                 debug!(\"typ: {} has dtor, but it is uninteresting\","}]}