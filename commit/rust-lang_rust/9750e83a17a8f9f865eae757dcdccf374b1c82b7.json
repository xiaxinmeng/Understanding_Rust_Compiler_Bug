{"sha": "9750e83a17a8f9f865eae757dcdccf374b1c82b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NTBlODNhMTdhOGY5Zjg2NWVhZTc1N2RjZGNjZjM3NGIxYzgyYjc=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-25T07:47:32Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-25T07:47:32Z"}, "message": "Replace uses of str::unsafe_from_byte", "tree": {"sha": "a9047885382a5f8ba6e6606969c520b587d918b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9047885382a5f8ba6e6606969c520b587d918b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9750e83a17a8f9f865eae757dcdccf374b1c82b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9750e83a17a8f9f865eae757dcdccf374b1c82b7", "html_url": "https://github.com/rust-lang/rust/commit/9750e83a17a8f9f865eae757dcdccf374b1c82b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9750e83a17a8f9f865eae757dcdccf374b1c82b7/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2496dccae4622cb5fea9ae8f54adb0b83eadaf07", "url": "https://api.github.com/repos/rust-lang/rust/commits/2496dccae4622cb5fea9ae8f54adb0b83eadaf07", "html_url": "https://github.com/rust-lang/rust/commit/2496dccae4622cb5fea9ae8f54adb0b83eadaf07"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "cbd11c1c1b998917d80a9181c78454905bedca39", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9750e83a17a8f9f865eae757dcdccf374b1c82b7/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750e83a17a8f9f865eae757dcdccf374b1c82b7/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=9750e83a17a8f9f865eae757dcdccf374b1c82b7", "patch": "@@ -39,7 +39,7 @@ fn parse_ident_(st: @pstate, is_last: fn@(char) -> bool) ->\n    ast::ident {\n     let rslt = \"\";\n     while !is_last(peek(st) as char) {\n-        rslt += str::unsafe_from_byte(next(st));\n+        rslt += str::from_byte(next(st));\n     }\n     ret rslt;\n }\n@@ -226,7 +226,7 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         while peek(st) as char != ']' {\n             let name = \"\";\n             while peek(st) as char != '=' {\n-                name += str::unsafe_from_byte(next(st));\n+                name += str::from_byte(next(st));\n             }\n             st.pos = st.pos + 1u;\n             fields += [{ident: name, mt: parse_mt(st, conv)}];"}, {"sha": "36453d78c98fceb26ca5fe453d6d37e9364ca184", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9750e83a17a8f9f865eae757dcdccf374b1c82b7/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750e83a17a8f9f865eae757dcdccf374b1c82b7/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=9750e83a17a8f9f865eae757dcdccf374b1c82b7", "patch": "@@ -146,7 +146,7 @@ Function: unsafe_from_byte\n Converts a byte to a string. Does not verify that the byte is\n valid UTF-8.\n \n-FIXME: rename to 'from_byte'\n+FIXME: REMOVE.\n */\n fn unsafe_from_byte(u: u8) -> str { unsafe_from_bytes([u]) }\n "}, {"sha": "2112399ba8026b29aee9d95dd2b4b0860a6a7c68", "filename": "src/libcore/uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9750e83a17a8f9f865eae757dcdccf374b1c82b7/src%2Flibcore%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750e83a17a8f9f865eae757dcdccf374b1c82b7/src%2Flibcore%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint.rs?ref=9750e83a17a8f9f865eae757dcdccf374b1c82b7", "patch": "@@ -236,12 +236,12 @@ fn to_str(num: uint, radix: uint) -> str {\n     if n == 0u { ret \"0\"; }\n     let s: str = \"\";\n     while n != 0u {\n-        s += str::unsafe_from_byte(digit(n % radix) as u8);\n+        s += str::from_byte(digit(n % radix) as u8);\n         n /= radix;\n     }\n     let s1: str = \"\";\n     let len: uint = str::byte_len(s);\n-    while len != 0u { len -= 1u; s1 += str::unsafe_from_byte(s[len]); }\n+    while len != 0u { len -= 1u; s1 += str::from_byte(s[len]); }\n     ret s1;\n }\n "}]}