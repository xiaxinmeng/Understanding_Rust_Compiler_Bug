{"sha": "9a0ab50ac08a01cea1d4170fa90dc851f42971c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMGFiNTBhYzA4YTAxY2VhMWQ0MTcwZmE5MGRjODUxZjQyOTcxYzc=", "commit": {"author": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2015-12-15T15:15:59Z"}, "committer": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2015-12-15T15:15:59Z"}, "message": "Stop re-exporting RestrictionResult variants.", "tree": {"sha": "dd887d30c08b86cdde0780e92b7c64490b72a150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd887d30c08b86cdde0780e92b7c64490b72a150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a0ab50ac08a01cea1d4170fa90dc851f42971c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0ab50ac08a01cea1d4170fa90dc851f42971c7", "html_url": "https://github.com/rust-lang/rust/commit/9a0ab50ac08a01cea1d4170fa90dc851f42971c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a0ab50ac08a01cea1d4170fa90dc851f42971c7/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e63cecb10a3a22abed9c230c5daf268dc258bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e63cecb10a3a22abed9c230c5daf268dc258bf3", "html_url": "https://github.com/rust-lang/rust/commit/9e63cecb10a3a22abed9c230c5daf268dc258bf3"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "c07a27043c27501694fbe55e7bd96f6c03435cb5", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a0ab50ac08a01cea1d4170fa90dc851f42971c7/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0ab50ac08a01cea1d4170fa90dc851f42971c7/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=9a0ab50ac08a01cea1d4170fa90dc851f42971c7", "patch": "@@ -33,6 +33,8 @@ use rustc_front::hir::{Expr, FnDecl, Block, Pat};\n use rustc_front::intravisit;\n use rustc_front::intravisit::Visitor;\n \n+use self::restrictions::RestrictionResult;\n+\n mod lifetime;\n mod restrictions;\n mod gather_moves;\n@@ -354,12 +356,12 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n \n         // Create the loan record (if needed).\n         let loan = match restr {\n-            restrictions::Safe => {\n+            RestrictionResult::Safe => {\n                 // No restrictions---no loan record necessary\n                 return;\n             }\n \n-            restrictions::SafeIf(loan_path, restricted_paths) => {\n+            RestrictionResult::SafeIf(loan_path, restricted_paths) => {\n                 let loan_scope = match loan_region {\n                     ty::ReScope(scope) => scope,\n "}, {"sha": "2a0d8ef276648a30f34d57973a90595b3cd6c870", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a0ab50ac08a01cea1d4170fa90dc851f42971c7/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0ab50ac08a01cea1d4170fa90dc851f42971c7/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=9a0ab50ac08a01cea1d4170fa90dc851f42971c7", "patch": "@@ -10,8 +10,6 @@\n \n //! Computes the restrictions that result from a borrow.\n \n-pub use self::RestrictionResult::*;\n-\n use borrowck::*;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n@@ -69,19 +67,19 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 // are inherently non-aliasable, they can only be\n                 // accessed later through the borrow itself and hence\n                 // must inherently comply with its terms.\n-                Safe\n+                RestrictionResult::Safe\n             }\n \n             Categorization::Local(local_id) => {\n                 // R-Variable, locally declared\n                 let lp = new_lp(LpVar(local_id));\n-                SafeIf(lp.clone(), vec![lp])\n+                RestrictionResult::SafeIf(lp.clone(), vec![lp])\n             }\n \n             Categorization::Upvar(mc::Upvar { id, .. }) => {\n                 // R-Variable, captured into closure\n                 let lp = new_lp(LpUpvar(id));\n-                SafeIf(lp.clone(), vec![lp])\n+                RestrictionResult::SafeIf(lp.clone(), vec![lp])\n             }\n \n             Categorization::Downcast(cmt_base, _) => {\n@@ -106,7 +104,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n             }\n \n             Categorization::StaticItem => {\n-                Safe\n+                RestrictionResult::Safe\n             }\n \n             Categorization::Deref(cmt_base, _, pk) => {\n@@ -133,11 +131,11 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                                     cmt: cmt_base,\n                                     code: err_borrowed_pointer_too_short(\n                                         self.loan_region, lt)});\n-                            return Safe;\n+                            return RestrictionResult::Safe;\n                         }\n \n                         match bk {\n-                            ty::ImmBorrow => Safe,\n+                            ty::ImmBorrow => RestrictionResult::Safe,\n                             ty::MutBorrow | ty::UniqueImmBorrow => {\n                                 // R-Deref-Mut-Borrowed\n                                 //\n@@ -150,7 +148,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                         }\n                     }\n                     // Borrowck is not relevant for raw pointers\n-                    mc::UnsafePtr(..) => Safe\n+                    mc::UnsafePtr(..) => RestrictionResult::Safe\n                 }\n             }\n         }\n@@ -161,12 +159,12 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n               cmt: &mc::cmt<'tcx>,\n               elem: LoanPathElem) -> RestrictionResult<'tcx> {\n         match result {\n-            Safe => Safe,\n-            SafeIf(base_lp, mut base_vec) => {\n+            RestrictionResult::Safe => RestrictionResult::Safe,\n+            RestrictionResult::SafeIf(base_lp, mut base_vec) => {\n                 let v = LpExtend(base_lp, cmt.mutbl, elem);\n                 let lp = Rc::new(LoanPath::new(v, cmt.ty));\n                 base_vec.push(lp.clone());\n-                SafeIf(lp, base_vec)\n+                RestrictionResult::SafeIf(lp, base_vec)\n             }\n         }\n     }"}]}