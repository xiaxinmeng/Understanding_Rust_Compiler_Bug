{"sha": "9d33001a90319fc242dcf43ec3c7e1fa1c11d847", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMzMwMDFhOTAzMTlmYzI0MmRjZjQzZWMzYzdlMWZhMWMxMWQ4NDc=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-06-25T23:48:03Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:09Z"}, "message": "added test for ptr_eq on fresh_name-generated idents", "tree": {"sha": "626d19086e8a52d22c09e88551ef32f5bf699568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/626d19086e8a52d22c09e88551ef32f5bf699568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d33001a90319fc242dcf43ec3c7e1fa1c11d847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d33001a90319fc242dcf43ec3c7e1fa1c11d847", "html_url": "https://github.com/rust-lang/rust/commit/9d33001a90319fc242dcf43ec3c7e1fa1c11d847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d33001a90319fc242dcf43ec3c7e1fa1c11d847/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd4e637ae4113d4c49a2e5c533b5bf48fbf7cc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4e637ae4113d4c49a2e5c533b5bf48fbf7cc6e", "html_url": "https://github.com/rust-lang/rust/commit/cd4e637ae4113d4c49a2e5c533b5bf48fbf7cc6e"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "29c460c5c3d08ac8cd0fe89ebfdf3d63717108cf", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9d33001a90319fc242dcf43ec3c7e1fa1c11d847/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d33001a90319fc242dcf43ec3c7e1fa1c11d847/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=9d33001a90319fc242dcf43ec3c7e1fa1c11d847", "patch": "@@ -20,6 +20,7 @@ use std::cmp::Equiv;\n use std::local_data;\n use std::rand;\n use std::rand::RngUtil;\n+use std::ptr::to_unsafe_ptr;\n \n #[deriving(Clone, Encodable, Decodable, Eq, IterBytes)]\n pub enum binop {\n@@ -544,15 +545,31 @@ pub fn gensym_ident(str : &str) -> ast::Ident {\n }\n \n // create a fresh name that maps to the same string as the old one.\n+// note that this guarantees that ptr_eq(ident_to_str(src),interner_get(fresh_name(src)));\n+// that is, that the new name and the old one are connected to ptr_eq strings.\n pub fn fresh_name(src : &ast::Ident) -> Name {\n     gensym(ident_to_str(src))\n     // following: debug version. Could work in final except that it's incompatible with\n     // good error messages and uses of struct names in ambiguous could-be-binding\n-    // locations.\n+    // locations. Also definitely destroys the guarantee given above about ptr_eq.\n     /*let num = rand::rng().gen_uint_range(0,0xffff);\n     gensym(fmt!(\"%s_%u\",ident_to_str(src),num))*/\n }\n \n+// it looks like there oughta be a str_ptr_eq fn, but no one bothered to implement it?\n+pub fn str_ptr_eq<T>(a: @str, b: @str) -> bool {\n+    // doesn't compile! ...because of rebase mangling. this should be fixed\n+    // in the commit that follows this.\n+    let (a_ptr, b_ptr): (*uint, *uint) = (to_unsafe_ptr(a), to_unsafe_ptr(b));\n+    a_ptr == b_ptr\n+}\n+\n+\n+\n+// return true when two identifiers refer (through the intern table) to the same ptr_eq\n+// string. This is used to compare identifiers in places where hygienic comparison is\n+// not wanted (i.e. not lexical vars).\n+\n // create a fresh mark.\n pub fn fresh_mark() -> Mrk {\n     gensym(\"mark\")\n@@ -698,5 +715,19 @@ pub fn is_reserved_keyword(tok: &Token) -> bool {\n #[cfg(test)]\n mod test {\n     use super::*;\n+    use std::io;\n+    use std::managed;\n+    use ast;\n+    use ast_util;\n+\n+\n+    #[test] fn t1() {\n+        let ghi = str_to_ident(\"ghi\");\n+        assert_eq!(ident_to_str(&ghi),@\"ghi\");\n+        let fresh = ast::Ident::new(fresh_name(&ghi));\n+        assert_eq!(ident_to_str(&fresh),@\"ghi\");\n+        assert!(str_ptr_eq(ident_to_str(&ghi),ident_to_str(&fresh)));\n+        assert_eq!(3,4);\n+    }\n \n }"}]}