{"sha": "3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjAzM2U1NDgxNDkxOWYyMjE0Y2E0ZTliNzNjZWJjNWJhN2Q4NmQ=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-07T13:24:20Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-08T15:29:56Z"}, "message": "Add support for unions in inference and lowering", "tree": {"sha": "f188f33d437718ca86247805ef58a235c648be45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f188f33d437718ca86247805ef58a235c648be45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "html_url": "https://github.com/rust-lang/rust/commit/3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf033e54814919f2214ca4e9b73cebc5ba7d86d/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39d503ef3ba26ec324639e22e46e1a8173b397e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39d503ef3ba26ec324639e22e46e1a8173b397e", "html_url": "https://github.com/rust-lang/rust/commit/a39d503ef3ba26ec324639e22e46e1a8173b397e"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "3d12039a6d20bdd9db858dbfd3293cb8a98eadbb", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3bf033e54814919f2214ca4e9b73cebc5ba7d86d/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf033e54814919f2214ca4e9b73cebc5ba7d86d/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "patch": "@@ -440,6 +440,12 @@ impl<'a> InferenceContext<'a> {\n                 let ty = self.insert_type_vars(ty.subst(&substs));\n                 forbid_unresolved_segments((ty, Some(strukt.into())), unresolved)\n             }\n+            TypeNs::AdtId(AdtId::UnionId(u)) => {\n+                let substs = Ty::substs_from_path(&ctx, path, u.into(), true);\n+                let ty = self.db.ty(u.into());\n+                let ty = self.insert_type_vars(ty.subst(&substs));\n+                forbid_unresolved_segments((ty, Some(u.into())), unresolved)\n+            }\n             TypeNs::EnumVariantId(var) => {\n                 let substs = Ty::substs_from_path(&ctx, path, var.into(), true);\n                 let ty = self.db.ty(var.parent.into());\n@@ -490,10 +496,7 @@ impl<'a> InferenceContext<'a> {\n                 // FIXME potentially resolve assoc type\n                 (Ty::Unknown, None)\n             }\n-            TypeNs::AdtId(AdtId::EnumId(_))\n-            | TypeNs::AdtId(AdtId::UnionId(_))\n-            | TypeNs::BuiltinType(_)\n-            | TypeNs::TraitId(_) => {\n+            TypeNs::AdtId(AdtId::EnumId(_)) | TypeNs::BuiltinType(_) | TypeNs::TraitId(_) => {\n                 // FIXME diagnostic\n                 (Ty::Unknown, None)\n             }"}, {"sha": "7638f167b5b6d6878c81add1abb49c990d601992", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bf033e54814919f2214ca4e9b73cebc5ba7d86d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf033e54814919f2214ca4e9b73cebc5ba7d86d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "patch": "@@ -518,6 +518,7 @@ impl Ty {\n         let (segment, generic_def) = match resolved {\n             ValueTyDefId::FunctionId(it) => (last, Some(it.into())),\n             ValueTyDefId::StructId(it) => (last, Some(it.into())),\n+            ValueTyDefId::UnionId(it) => (last, Some(it.into())),\n             ValueTyDefId::ConstId(it) => (last, Some(it.into())),\n             ValueTyDefId::StaticId(_) => (last, None),\n             ValueTyDefId::EnumVariantId(var) => {\n@@ -1148,11 +1149,12 @@ impl_from!(BuiltinType, AdtId(StructId, EnumId, UnionId), TypeAliasId for TyDefI\n pub enum ValueTyDefId {\n     FunctionId(FunctionId),\n     StructId(StructId),\n+    UnionId(UnionId),\n     EnumVariantId(EnumVariantId),\n     ConstId(ConstId),\n     StaticId(StaticId),\n }\n-impl_from!(FunctionId, StructId, EnumVariantId, ConstId, StaticId for ValueTyDefId);\n+impl_from!(FunctionId, StructId, UnionId, EnumVariantId, ConstId, StaticId for ValueTyDefId);\n \n /// Build the declared type of an item. This depends on the namespace; e.g. for\n /// `struct Foo(usize)`, we have two types: The type of the struct itself, and\n@@ -1179,6 +1181,7 @@ pub(crate) fn value_ty_query(db: &dyn HirDatabase, def: ValueTyDefId) -> Binders\n     match def {\n         ValueTyDefId::FunctionId(it) => type_for_fn(db, it),\n         ValueTyDefId::StructId(it) => type_for_struct_constructor(db, it),\n+        ValueTyDefId::UnionId(it) => type_for_adt(db, it.into()),\n         ValueTyDefId::EnumVariantId(it) => type_for_enum_variant_constructor(db, it),\n         ValueTyDefId::ConstId(it) => type_for_const(db, it),\n         ValueTyDefId::StaticId(it) => type_for_static(db, it),"}, {"sha": "5a7cf9455b5e739d1033830c5296266e43067d8f", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bf033e54814919f2214ca4e9b73cebc5ba7d86d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf033e54814919f2214ca4e9b73cebc5ba7d86d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "patch": "@@ -350,15 +350,15 @@ fn infer_union() {\n             57..172 '{     ...); } }': ()\n             67..68 'u': MyUnion\n             71..89 'MyUnio...o: 0 }': MyUnion\n-            86..87 '0': i32\n+            86..87 '0': u32\n             95..113 'unsafe...(u); }': ()\n             102..113 '{ baz(u); }': ()\n             104..107 'baz': fn baz(MyUnion)\n             104..110 'baz(u)': ()\n             108..109 'u': MyUnion\n             122..123 'u': MyUnion\n             126..146 'MyUnio... 0.0 }': MyUnion\n-            141..144 '0.0': f64\n+            141..144 '0.0': f32\n             152..170 'unsafe...(u); }': ()\n             159..170 '{ baz(u); }': ()\n             161..164 'baz': fn baz(MyUnion)"}, {"sha": "de70363da27f6d0824b0d994af0e9e84a82bebb6", "filename": "crates/ra_ide/test_data/highlight_unsafe.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bf033e54814919f2214ca4e9b73cebc5ba7d86d/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/3bf033e54814919f2214ca4e9b73cebc5ba7d86d/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html?ref=3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "patch": "@@ -50,13 +50,13 @@\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"unresolved_reference\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n         <span class=\"function unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">b</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"punctuation\">.</span><span class=\"field\">b</span><span class=\"punctuation\">;</span>\n         <span class=\"keyword control\">match</span> <span class=\"variable\">u</span> <span class=\"punctuation\">{</span>\n-            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"unresolved_reference\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n-            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"variable declaration\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n         <span class=\"punctuation\">}</span>\n         <span class=\"struct\">HasUnsafeFn</span><span class=\"punctuation\">.</span><span class=\"function unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>"}]}