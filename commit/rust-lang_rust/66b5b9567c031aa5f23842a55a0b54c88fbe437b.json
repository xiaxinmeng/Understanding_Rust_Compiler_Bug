{"sha": "66b5b9567c031aa5f23842a55a0b54c88fbe437b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjViOTU2N2MwMzFhYTVmMjM4NDJhNTVhMGI1NGM4OGZiZTQzN2I=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-27T02:44:38Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-27T02:44:38Z"}, "message": "Test the hashmap more, exercising hash collision, element removal, and a forced rehashing that actually causes elements to change buckets.  In the process, find a bug in hashmap's remove() and fix it.", "tree": {"sha": "815bac1ed3913d0f2ed427a41f9bcf90ed4cbd61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/815bac1ed3913d0f2ed427a41f9bcf90ed4cbd61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b5b9567c031aa5f23842a55a0b54c88fbe437b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b5b9567c031aa5f23842a55a0b54c88fbe437b", "html_url": "https://github.com/rust-lang/rust/commit/66b5b9567c031aa5f23842a55a0b54c88fbe437b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b5b9567c031aa5f23842a55a0b54c88fbe437b/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3030432862cf7694dc6b37c3fe8f8985741c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3030432862cf7694dc6b37c3fe8f8985741c86", "html_url": "https://github.com/rust-lang/rust/commit/aa3030432862cf7694dc6b37c3fe8f8985741c86"}], "stats": {"total": 153, "additions": 140, "deletions": 13}, "files": [{"sha": "ce4f065f64d27d3509d63d0dae5c9d4ad7e11a78", "filename": "src/lib/map.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/66b5b9567c031aa5f23842a55a0b54c88fbe437b/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b5b9567c031aa5f23842a55a0b54c88fbe437b/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=66b5b9567c031aa5f23842a55a0b54c88fbe437b", "patch": "@@ -13,6 +13,7 @@ type hashfn[K] = fn(&K) -> uint;\n type eqfn[K] = fn(&K, &K) -> bool;\n \n type hashmap[K, V] = obj {\n+  fn size() -> uint;\n   fn insert(&K key, &V val) -> bool;\n   fn contains_key(&K key) -> bool;\n   fn get(&K key) -> V;\n@@ -141,6 +142,8 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n                     mutable uint nelts,\n                     util.rational lf)\n   {\n+    fn size() -> uint { ret nelts; }\n+\n     fn insert(&K key, &V val) -> bool {\n       let util.rational load = rec(num=(nelts + 1u) as int, den=nbkts as int);\n       if (!util.rational_leq(load, lf)) {\n@@ -181,17 +184,19 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n       while (i < nbkts) {\n         let uint j = (hash[K](hasher, nbkts, key, i));\n         alt (bkts.(j)) {\n-          case (some[K, V](_, val)) {\n-            bkts.(j) = deleted[K, V]();\n-            ret util.some[V](val);\n-          }\n-          case (deleted[K, V]()) {\n-            nelts += 1u;\n+          case (some[K, V](k, v)) {\n+            if (eqer(key, k)) {\n+              bkts.(j) = deleted[K, V]();\n+              nelts -= 1u;\n+              ret util.some[V](v);\n+            }\n           }\n+          case (deleted[K, V]()) { }\n           case (nil[K, V]()) {\n             ret util.none[V]();\n           }\n         }\n+        i += 1u;\n       }\n       ret util.none[V]();\n     }"}, {"sha": "a59bdf0002afa9d9f87d246eaeff93d446f1481b", "filename": "src/test/run-pass/lib-map.rs", "status": "modified", "additions": 129, "deletions": 7, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/66b5b9567c031aa5f23842a55a0b54c88fbe437b/src%2Ftest%2Frun-pass%2Flib-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b5b9567c031aa5f23842a55a0b54c88fbe437b/src%2Ftest%2Frun-pass%2Flib-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-map.rs?ref=66b5b9567c031aa5f23842a55a0b54c88fbe437b", "patch": "@@ -2,6 +2,7 @@\n \n use std;\n import std.map;\n+import std.util;\n \n fn test_simple() {\n   log \"*** starting test_simple\";\n@@ -17,18 +18,18 @@ fn test_simple() {\n   let map.eqfn[uint] eqer = eq;\n   let map.hashmap[uint, uint] hm = map.mk_hashmap[uint, uint](hasher, eqer);\n \n-  hm.insert(10u, 12u);\n-  hm.insert(11u, 13u);\n-  hm.insert(12u, 14u);\n+  check (hm.insert(10u, 12u));\n+  check (hm.insert(11u, 13u));\n+  check (hm.insert(12u, 14u));\n \n   check (hm.get(11u) == 13u);\n   check (hm.get(12u) == 14u);\n   check (hm.get(10u) == 12u);\n \n-  hm.insert(12u, 14u);\n+  check (!hm.insert(12u, 14u));\n   check (hm.get(12u) == 14u);\n \n-  hm.insert(12u, 12u);\n+  check (!hm.insert(12u, 12u));\n   check (hm.get(12u) == 12u);\n \n   log \"*** finished test_simple\";\n@@ -55,7 +56,7 @@ fn test_growth() {\n \n   let uint i = 0u;\n   while (i < num_to_insert) {\n-    hm.insert(i, i * i);\n+    check (hm.insert(i, i * i));\n     log \"inserting \" + std._uint.to_str(i, 10u)\n       + \" -> \" + std._uint.to_str(i * i, 10u);\n     i += 1u;\n@@ -71,7 +72,7 @@ fn test_growth() {\n     i += 1u;\n   }\n \n-  hm.insert(num_to_insert, 17u);\n+  check (hm.insert(num_to_insert, 17u));\n   check (hm.get(num_to_insert) == 17u);\n \n   log \"-----\";\n@@ -89,7 +90,128 @@ fn test_growth() {\n   log \"*** finished test_growth\";\n }\n \n+fn test_removal() {\n+  log \"*** starting test_removal\";\n+\n+  let uint num_to_insert = 64u;\n+\n+  fn eq(&uint x, &uint y) -> bool { ret x == y; }\n+  fn hash(&uint u) -> uint {\n+    // This hash function intentionally causes collisions between\n+    // consecutive integer pairs.\n+    ret (u / 2u) * 2u;\n+  }\n+\n+  let map.hashfn[uint] hasher = hash;\n+  let map.eqfn[uint] eqer = eq;\n+  let map.hashmap[uint, uint] hm = map.mk_hashmap[uint, uint](hasher, eqer);\n+\n+  let uint i = 0u;\n+  while (i < num_to_insert) {\n+    check (hm.insert(i, i * i));\n+    log \"inserting \" + std._uint.to_str(i, 10u)\n+      + \" -> \" + std._uint.to_str(i * i, 10u);\n+    i += 1u;\n+  }\n+\n+  check (hm.size() == num_to_insert);\n+\n+  log \"-----\";\n+  log \"removing evens\";\n+\n+  i = 0u;\n+  while (i < num_to_insert) {\n+    /**\n+     * FIXME (issue #150): we want to check the removed value as in the\n+     * following:\n+\n+    let util.option[uint] v = hm.remove(i);\n+    alt (v) {\n+      case (util.some[uint](u)) {\n+        check (u == (i * i));\n+      }\n+      case (util.none[uint]()) { fail; }\n+    }\n+\n+     * but we util.option is a tag type so util.some and util.none are\n+     * off limits until we parse the dwarf for tag types.\n+     */\n+\n+    hm.remove(i);\n+    i += 2u;\n+  }\n+\n+  check (hm.size() == (num_to_insert / 2u));\n+\n+  log \"-----\";\n+\n+  i = 1u;\n+  while (i < num_to_insert) {\n+    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n+      + std._uint.to_str(hm.get(i), 10u);\n+    check (hm.get(i) == i * i);\n+    i += 2u;\n+  }\n+\n+  log \"-----\";\n+  log \"rehashing\";\n+\n+  hm.rehash();\n+\n+  log \"-----\";\n+\n+  i = 1u;\n+  while (i < num_to_insert) {\n+    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n+      + std._uint.to_str(hm.get(i), 10u);\n+    check (hm.get(i) == i * i);\n+    i += 2u;\n+  }\n+\n+  log \"-----\";\n+\n+  i = 0u;\n+  while (i < num_to_insert) {\n+    check (hm.insert(i, i * i));\n+    log \"inserting \" + std._uint.to_str(i, 10u)\n+      + \" -> \" + std._uint.to_str(i * i, 10u);\n+    i += 2u;\n+  }\n+\n+  check (hm.size() == num_to_insert);\n+\n+  log \"-----\";\n+\n+  i = 0u;\n+  while (i < num_to_insert) {\n+    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n+      + std._uint.to_str(hm.get(i), 10u);\n+    check (hm.get(i) == i * i);\n+    i += 1u;\n+  }\n+\n+  log \"-----\";\n+  log \"rehashing\";\n+\n+  hm.rehash();\n+\n+  log \"-----\";\n+\n+  check (hm.size() == num_to_insert);\n+\n+  i = 0u;\n+  while (i < num_to_insert) {\n+    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n+      + std._uint.to_str(hm.get(i), 10u);\n+    check (hm.get(i) == i * i);\n+    i += 1u;\n+  }\n+\n+  log \"*** finished test_removal\";\n+}\n+\n fn main() {\n   test_simple();\n   test_growth();\n+  test_removal();\n }"}]}