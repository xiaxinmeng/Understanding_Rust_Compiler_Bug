{"sha": "01408fc62762838b72dfb6ce090708d3e8303ed9", "node_id": "C_kwDOAAsO6NoAKDAxNDA4ZmM2Mjc2MjgzOGI3MmRmYjZjZTA5MDcwOGQzZTgzMDNlZDk", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-08-10T04:52:04Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-08-13T04:35:03Z"}, "message": "Rename `@{has,matches}-literal` to `...text`\n\nReasons:\n1. It's shorter.\n2. `@matches-literal` seems to contradict itself: a regex is\n   intrinsically not a literal match, while it is still a textual match.", "tree": {"sha": "eab295cb0a14c70a2cf2cbf51ce4de06abc9ca28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eab295cb0a14c70a2cf2cbf51ce4de06abc9ca28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01408fc62762838b72dfb6ce090708d3e8303ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01408fc62762838b72dfb6ce090708d3e8303ed9", "html_url": "https://github.com/rust-lang/rust/commit/01408fc62762838b72dfb6ce090708d3e8303ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01408fc62762838b72dfb6ce090708d3e8303ed9/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2787eb05d5018c6d8d3087a373d3ea758a9db9b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2787eb05d5018c6d8d3087a373d3ea758a9db9b9", "html_url": "https://github.com/rust-lang/rust/commit/2787eb05d5018c6d8d3087a373d3ea758a9db9b9"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "48a83a66957f2a4b54147919bba1db32d395ac7f", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01408fc62762838b72dfb6ce090708d3e8303ed9/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/01408fc62762838b72dfb6ce090708d3e8303ed9/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=01408fc62762838b72dfb6ce090708d3e8303ed9", "patch": "@@ -41,15 +41,15 @@\n   `PATH` is relative to the output directory. It can be given as `-`\n   which repeats the most recently used `PATH`.\n \n-* `@has-literal PATH PATTERN` and `@matches-literal PATH PATTERN` checks\n+* `@hastext PATH PATTERN` and `@matchestext PATH PATTERN` checks\n   for the occurrence of the given pattern `PATTERN` in the specified file.\n   Only one occurrence of the pattern is enough.\n \n-  For `@has-literal`, `PATTERN` is a whitespace-normalized (every consecutive\n+  For `@hastext`, `PATTERN` is a whitespace-normalized (every consecutive\n   whitespace being replaced by one single space character) string.\n   The entire file is also whitespace-normalized including newlines.\n \n-  For `@matches-literal`, `PATTERN` is a Python-supported regular expression.\n+  For `@matchestext`, `PATTERN` is a Python-supported regular expression.\n   The file remains intact but the regexp is matched without the `MULTILINE`\n   and `IGNORECASE` options. You can still use a prefix `(?m)` or `(?i)`\n   to override them, and `\\A` and `\\Z` for definitely matching\n@@ -542,19 +542,19 @@ def get_nb_matching_elements(cache, c, regexp, stop_at_first):\n def check_command(c, cache):\n     try:\n         cerr = \"\"\n-        if c.cmd in ['has', 'has-literal', 'matches', 'matches-literal']:  # string test\n+        if c.cmd in ['has', 'hastext', 'matches', 'matchestext']:  # string test\n             regexp = c.cmd.startswith('matches')\n-            if len(c.args) == 1 and not regexp and 'literal' not in c.cmd:  # @has <path> = file existence\n+            if len(c.args) == 1 and not regexp and 'text' not in c.cmd:  # @has <path> = file existence\n                 try:\n                     cache.get_file(c.args[0])\n                     ret = True\n                 except FailedCheck as err:\n                     cerr = str(err)\n                     ret = False\n-            elif len(c.args) == 2 and 'literal' in c.cmd:  # @has-literal/matches-literal <path> <pat> = string test\n+            elif len(c.args) == 2 and 'text' in c.cmd:  # @hastext/matchestext <path> <pat> = string test\n                 cerr = \"`PATTERN` did not match\"\n                 ret = check_string(cache.get_file(c.args[0]), c.args[1], regexp)\n-            elif len(c.args) == 3 and 'literal' not in c.cmd:  # @has/matches <path> <pat> <match> = XML tree test\n+            elif len(c.args) == 3 and 'text' not in c.cmd:  # @has/matches <path> <pat> <match> = XML tree test\n                 cerr = \"`XPATH PATTERN` did not match\"\n                 ret = get_nb_matching_elements(cache, c, regexp, True) != 0\n             else:"}]}