{"sha": "117aa8cfeebb9973476814ef856ff0176fa835ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExN2FhOGNmZWViYjk5NzM0NzY4MTRlZjg1NmZmMDE3NmZhODM1ZWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T22:39:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T23:14:26Z"}, "message": "core: warn(non_camel_case_types) everywhere, with few exceptions", "tree": {"sha": "1c0bddcca905f4072f4ecbc50e913dd848e8b525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c0bddcca905f4072f4ecbc50e913dd848e8b525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/117aa8cfeebb9973476814ef856ff0176fa835ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/117aa8cfeebb9973476814ef856ff0176fa835ef", "html_url": "https://github.com/rust-lang/rust/commit/117aa8cfeebb9973476814ef856ff0176fa835ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/117aa8cfeebb9973476814ef856ff0176fa835ef/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80b7dc709ff03e569ef22e322925c93d3a415f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80b7dc709ff03e569ef22e322925c93d3a415f5", "html_url": "https://github.com/rust-lang/rust/commit/a80b7dc709ff03e569ef22e322925c93d3a415f5"}], "stats": {"total": 64, "additions": 9, "deletions": 55}, "files": [{"sha": "0ba536da96df5011754f28bc8df34ff662155045", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=117aa8cfeebb9973476814ef856ff0176fa835ef", "patch": "@@ -32,6 +32,8 @@\n #[no_core];\n \n #[deny(vecs_implicitly_copyable)];\n+// XXX: Switch to deny after snapshot\n+#[warn(non_camel_case_types)];\n \n export int, i8, i16, i32, i64;\n export uint, u8, u16, u32, u64;\n@@ -71,7 +73,6 @@ export priv;\n // Built-in-type support modules\n \n /// Operations and constants for `int`\n-#[warn(non_camel_case_types)]\n #[path = \"int-template\"]\n mod int {\n     import inst::{ hash, pow };\n@@ -81,39 +82,34 @@ mod int {\n }\n \n /// Operations and constants for `i8`\n-#[warn(non_camel_case_types)]\n #[path = \"int-template\"]\n mod i8 {\n     #[path = \"i8.rs\"]\n     mod inst;\n }\n \n /// Operations and constants for `i16`\n-#[warn(non_camel_case_types)]\n #[path = \"int-template\"]\n mod i16 {\n     #[path = \"i16.rs\"]\n     mod inst;\n }\n \n /// Operations and constants for `i32`\n-#[warn(non_camel_case_types)]\n #[path = \"int-template\"]\n mod i32 {\n     #[path = \"i32.rs\"]\n     mod inst;\n }\n \n /// Operations and constants for `i64`\n-#[warn(non_camel_case_types)]\n #[path = \"int-template\"]\n mod i64 {\n     #[path = \"i64.rs\"]\n     mod inst;\n }\n \n /// Operations and constants for `uint`\n-#[warn(non_camel_case_types)]\n #[path = \"uint-template\"]\n mod uint {\n     import inst::{\n@@ -128,7 +124,6 @@ mod uint {\n }\n \n /// Operations and constants for `u8`\n-#[warn(non_camel_case_types)]\n #[path = \"uint-template\"]\n mod u8 {\n     import inst::is_ascii;\n@@ -139,72 +134,50 @@ mod u8 {\n }\n \n /// Operations and constants for `u16`\n-#[warn(non_camel_case_types)]\n #[path = \"uint-template\"]\n mod u16 {\n     #[path = \"u16.rs\"]\n     mod inst;\n }\n \n /// Operations and constants for `u32`\n-#[warn(non_camel_case_types)]\n #[path = \"uint-template\"]\n mod u32 {\n     #[path = \"u32.rs\"]\n     mod inst;\n }\n \n /// Operations and constants for `u64`\n-#[warn(non_camel_case_types)]\n #[path = \"uint-template\"]\n mod u64 {\n     #[path = \"u64.rs\"]\n     mod inst;\n }\n \n \n-#[warn(non_camel_case_types)]\n mod box;\n-#[warn(non_camel_case_types)]\n mod char;\n-#[warn(non_camel_case_types)]\n mod float;\n-#[warn(non_camel_case_types)]\n mod f32;\n-#[warn(non_camel_case_types)]\n mod f64;\n-#[warn(non_camel_case_types)]\n mod str;\n-#[warn(non_camel_case_types)]\n mod ptr;\n-#[warn(non_camel_case_types)]\n mod vec;\n-#[warn(non_camel_case_types)]\n mod at_vec;\n-#[warn(non_camel_case_types)]\n mod bool;\n-#[warn(non_camel_case_types)]\n mod tuple;\n-#[warn(non_camel_case_types)]\n mod unit;\n-#[warn(non_camel_case_types)]\n mod uniq;\n \n // Ubiquitous-utility-type modules\n \n #[cfg(notest)]\n mod ops;\n-#[warn(non_camel_case_types)]\n mod cmp;\n-#[warn(non_camel_case_types)]\n mod num;\n-#[warn(non_camel_case_types)]\n mod hash;\n-#[warn(non_camel_case_types)]\n mod either;\n-#[warn(non_camel_case_types)]\n mod iter;\n-#[warn(non_camel_case_types)]\n mod logging;\n mod option;\n #[path=\"iter-trait\"]\n@@ -213,60 +186,41 @@ mod option_iter {\n     mod inst;\n }\n mod result;\n-#[warn(non_camel_case_types)]\n mod to_str;\n-#[warn(non_camel_case_types)]\n mod to_bytes;\n-#[warn(non_camel_case_types)]\n mod util;\n \n // Data structure modules\n \n-#[warn(non_camel_case_types)]\n mod dvec;\n #[path=\"iter-trait\"]\n-#[warn(non_camel_case_types)]\n mod dvec_iter {\n     #[path = \"dvec.rs\"]\n     mod inst;\n }\n-#[warn(non_camel_case_types)]\n mod dlist;\n #[path=\"iter-trait\"]\n-#[warn(non_camel_case_types)]\n mod dlist_iter {\n     #[path =\"dlist.rs\"]\n     mod inst;\n }\n-#[warn(non_camel_case_types)]\n mod send_map;\n \n // Concurrency\n-#[warn(non_camel_case_types)]\n mod comm;\n-#[warn(non_camel_case_types)]\n mod task;\n-//#[warn(non_camel_ase_types)] pipec code continues to trip this warning\n mod future;\n-#[warn(non_camel_case_types)]\n mod pipes;\n \n // Runtime and language-primitive support\n \n-#[warn(non_camel_case_types)]\n mod io;\n mod libc;\n-#[warn(non_camel_case_types)]\n mod os;\n-#[warn(non_camel_case_types)]\n mod path;\n-#[warn(non_camel_case_types)]\n mod rand;\n-#[warn(non_camel_case_types)]\n mod run;\n-#[warn(non_camel_case_types)]\n mod sys;\n-#[warn(non_camel_case_types)]\n mod unsafe;\n \n mod managed;\n@@ -284,13 +238,9 @@ mod rt;\n \n // For internal use, not exported\n \n-#[warn(non_camel_case_types)]\n mod unicode;\n-#[warn(non_camel_case_types)]\n mod priv;\n-#[warn(non_camel_case_types)]\n mod cmath;\n-#[warn(non_camel_case_types)]\n mod stackwalk;\n \n // Local Variables:"}, {"sha": "b8cc74fe7b0aa8a44d5c119e8863b5600313e502", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=117aa8cfeebb9973476814ef856ff0176fa835ef", "patch": "@@ -1,4 +1,5 @@\n #[doc(hidden)];\n+#[allow(non_camel_case_types)];\n \n /*\n Syntax Extension: fmt"}, {"sha": "206efa85064404798de17060d47548fe1eb86f7d", "filename": "src/libcore/iter-trait/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fiter-trait%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fiter-trait%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Foption.rs?ref=117aa8cfeebb9973476814ef856ff0176fa835ef", "patch": "@@ -1,3 +1,4 @@\n+#[allow(non_camel_case_types)]\n type IMPL_T<A> = Option<A>;\n \n pure fn EACH<A>(self: IMPL_T<A>, f: fn(A) -> bool) {"}, {"sha": "a17b0fc5a3773b6805e34c685f809e569325dc20", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=117aa8cfeebb9973476814ef856ff0176fa835ef", "patch": "@@ -9,7 +9,6 @@ mutation when the data structure should be immutable.\n \n */\n \n-#[forbid(non_camel_case_types)];\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n "}, {"sha": "07096968f4c3817a00003dbd6b84dac874ddef0e", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=117aa8cfeebb9973476814ef856ff0176fa835ef", "patch": "@@ -1,5 +1,7 @@\n // Core operators and kinds.\n \n+#[allow(non_camel_case_types)];\n+\n #[cfg(notest)]\n #[lang=\"const\"]\n trait const {"}, {"sha": "c9620e4df84b3b2e4fc933dcf71cd0bd46131aa5", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=117aa8cfeebb9973476814ef856ff0176fa835ef", "patch": "@@ -290,14 +290,14 @@ fn test_unwrap_str() {\n \n #[test]\n fn test_unwrap_resource() {\n-    struct r {\n+    struct R {\n        let i: @mut int;\n        new(i: @mut int) { self.i = i; }\n        drop { *(self.i) += 1; }\n     }\n     let i = @mut 0;\n     {\n-        let x = r(i);\n+        let x = R(i);\n         let opt = Some(x);\n         let _y = unwrap(opt);\n     }"}, {"sha": "097ac8a71fcc736e1e985ed0fa6d9b856f9fc453", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117aa8cfeebb9973476814ef856ff0176fa835ef/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=117aa8cfeebb9973476814ef856ff0176fa835ef", "patch": "@@ -8,6 +8,7 @@ import libc::c_void;\n import libc::size_t;\n import libc::uintptr_t;\n \n+#[allow(non_camel_case_types)]\n type rust_task = c_void;\n \n extern mod rustrt {"}]}