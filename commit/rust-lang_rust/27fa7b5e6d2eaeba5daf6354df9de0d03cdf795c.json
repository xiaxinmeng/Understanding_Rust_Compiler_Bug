{"sha": "27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "node_id": "C_kwDOAAsO6NoAKDI3ZmE3YjVlNmQyZWFlYmE1ZGFmNjM1NGRmOWRlMGQwM2NkZjc5NWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-01T18:10:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-01T18:10:19Z"}, "message": "Rollup merge of #108427 - y21:for-else-diagnostic, r=compiler-errors\n\nRecover from for-else and while-else\n\nThis recovers from attempts at writing for-else or while-else loops, which might help users coming from e.g. Python.\n```rs\nfor _ in 0..0 {\n  // ...\n} else {\n  // ...\n}\n```\nCombined with trying to store it in a let binding, the current diagnostic can be a bit confusing. It mentions let-else and suggests wrapping the loop in parentheses, which the user probably doesn't want. let-else doesn't make sense for `for` and `while` loops, as they are of type `()` (which already is an irrefutable pattern and doesn't need let-else).\n<details>\n<summary>Current diagnostic</summary>\n\n```rs\nerror: right curly brace `}` before `else` in a `let...else` statement not allowed\n --> src/main.rs:4:5\n  |\n4 |     } else {\n  |     ^\n  |\nhelp: wrap the expression in parentheses\n  |\n2 ~     let _x = (for _ in 0..0 {\n3 |\n4 ~     }) else {\n  |\n```\n</details>\n\nSome questions:\n- Can the wording for the error message be improved? Would \"for...else loops are not allowed\" fit better?\n- Should we be more \"conservative\" in case we want to support this in the future (i.e. say \"for...else loops are **currently** not allowed/supported\")?\n- Is there a better way than storing a `&'static str` for the loop type? It is used for substituting the placeholder in the locale file (since it can emit either `for...else` or `while...else`). Maybe there is an enum I could use that I couldn't find", "tree": {"sha": "5ed9ee91dfd808cf79037ba5f994114eda7af339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ed9ee91dfd808cf79037ba5f994114eda7af339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/5ULCRBK7hj4Ov3rIwAAbKQIAAOL1XIrRs7eGHGfHS52WGHp\nIoAYVBjVOjL2o/qd9gO6278gOsdK1H/j5Ta4rB13PbTIayK5VkFAQd6FgeqsTFvG\nyn/huJZ4BC/y5P3vY/+tu7IXqXUGEXD2zW1sbICRpsRmcvtHtXqAIoUwNS5xMjZS\nHi3lkThbCvxCZ7eKsNK5N6B56g8olTZx1bVaR2kYvPn9wuf3oEpbiVaDb6FhxTZ7\ndkreKOuumbqx2AgxZe7wdujJ8+m+Pcv4jiWWuTHwI4zt5sUtEGdjNV7/KQ5GVHKt\ndGAejlvLJxNYRf9EWqJSTGnWXfEubzHwQCajVUZM+UQbN6NEMo7j2+TMsIHPPIg=\n=zdgL\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ed9ee91dfd808cf79037ba5f994114eda7af339\nparent 38461f8b8aa3979f5008005c049cd84c4e216ace\nparent 0758c05c9792700dbc482eda8cd464c39d5ebed5\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1677694219 +0530\ncommitter GitHub <noreply@github.com> 1677694219 +0530\n\nRollup merge of #108427 - y21:for-else-diagnostic, r=compiler-errors\n\nRecover from for-else and while-else\n\nThis recovers from attempts at writing for-else or while-else loops, which might help users coming from e.g. Python.\n```rs\nfor _ in 0..0 {\n  // ...\n} else {\n  // ...\n}\n```\nCombined with trying to store it in a let binding, the current diagnostic can be a bit confusing. It mentions let-else and suggests wrapping the loop in parentheses, which the user probably doesn't want. let-else doesn't make sense for `for` and `while` loops, as they are of type `()` (which already is an irrefutable pattern and doesn't need let-else).\n<details>\n<summary>Current diagnostic</summary>\n\n```rs\nerror: right curly brace `}` before `else` in a `let...else` statement not allowed\n --> src/main.rs:4:5\n  |\n4 |     } else {\n  |     ^\n  |\nhelp: wrap the expression in parentheses\n  |\n2 ~     let _x = (for _ in 0..0 {\n3 |\n4 ~     }) else {\n  |\n```\n</details>\n\nSome questions:\n- Can the wording for the error message be improved? Would \"for...else loops are not allowed\" fit better?\n- Should we be more \"conservative\" in case we want to support this in the future (i.e. say \"for...else loops are **currently** not allowed/supported\")?\n- Is there a better way than storing a `&'static str` for the loop type? It is used for substituting the placeholder in the locale file (since it can emit either `for...else` or `while...else`). Maybe there is an enum I could use that I couldn't find\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "html_url": "https://github.com/rust-lang/rust/commit/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38461f8b8aa3979f5008005c049cd84c4e216ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/38461f8b8aa3979f5008005c049cd84c4e216ace", "html_url": "https://github.com/rust-lang/rust/commit/38461f8b8aa3979f5008005c049cd84c4e216ace"}, {"sha": "0758c05c9792700dbc482eda8cd464c39d5ebed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0758c05c9792700dbc482eda8cd464c39d5ebed5", "html_url": "https://github.com/rust-lang/rust/commit/0758c05c9792700dbc482eda8cd464c39d5ebed5"}], "stats": {"total": 240, "additions": 218, "deletions": 22}, "files": [{"sha": "e76e91fc1b1351eb00cd8aa6c4923a47e2b76e40", "filename": "compiler/rustc_parse/locales/en-US.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -151,6 +151,10 @@ parse_missing_in_in_for_loop = missing `in` in `for` loop\n parse_missing_expression_in_for_loop = missing expression to iterate on in `for` loop\n     .suggestion = try adding an expression to the `for` loop\n \n+parse_loop_else = `{$loop_kind}...else` loops are not supported\n+    .note = consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    .loop_keyword = `else` is attached to this loop\n+\n parse_missing_comma_after_match_arm = expected `,` following `match` arm\n     .suggestion = missing a comma here to end this `match` arm\n "}, {"sha": "1662db36d10f915372baef23964aa54e7ef3b337", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -451,6 +451,17 @@ pub(crate) struct MissingExpressionInForLoop {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_loop_else)]\n+#[note]\n+pub(crate) struct LoopElseNotSupported {\n+    #[primary_span]\n+    pub span: Span,\n+    pub loop_kind: &'static str,\n+    #[label(parse_loop_keyword)]\n+    pub loop_kw: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_missing_comma_after_match_arm)]\n pub(crate) struct MissingCommaAfterMatchArm {"}, {"sha": "b2951e7a1847dfa1ac4314c033a8a551d930226d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -2503,9 +2503,27 @@ impl<'a> Parser<'a> {\n         let (attrs, loop_block) = self.parse_inner_attrs_and_block()?;\n \n         let kind = ExprKind::ForLoop(pat, expr, loop_block, opt_label);\n+\n+        self.recover_loop_else(\"for\", lo)?;\n+\n         Ok(self.mk_expr_with_attrs(lo.to(self.prev_token.span), kind, attrs))\n     }\n \n+    /// Recovers from an `else` clause after a loop (`for...else`, `while...else`)\n+    fn recover_loop_else(&mut self, loop_kind: &'static str, loop_kw: Span) -> PResult<'a, ()> {\n+        if self.token.is_keyword(kw::Else) && self.may_recover() {\n+            let else_span = self.token.span;\n+            self.bump();\n+            let else_clause = self.parse_expr_else()?;\n+            self.sess.emit_err(errors::LoopElseNotSupported {\n+                span: else_span.to(else_clause.span),\n+                loop_kind,\n+                loop_kw,\n+            });\n+        }\n+        Ok(())\n+    }\n+\n     fn error_missing_in_for_loop(&mut self) {\n         let (span, sub): (_, fn(_) -> _) = if self.token.is_ident_named(sym::of) {\n             // Possibly using JS syntax (#75311).\n@@ -2530,6 +2548,9 @@ impl<'a> Parser<'a> {\n             err.span_label(cond.span, \"this `while` condition successfully parsed\");\n             err\n         })?;\n+\n+        self.recover_loop_else(\"while\", lo)?;\n+\n         Ok(self.mk_expr_with_attrs(\n             lo.to(self.prev_token.span),\n             ExprKind::While(cond, body, opt_label),\n@@ -2541,6 +2562,7 @@ impl<'a> Parser<'a> {\n     fn parse_expr_loop(&mut self, opt_label: Option<Label>, lo: Span) -> PResult<'a, P<Expr>> {\n         let loop_span = self.prev_token.span;\n         let (attrs, body) = self.parse_inner_attrs_and_block()?;\n+        self.recover_loop_else(\"loop\", lo)?;\n         Ok(self.mk_expr_with_attrs(\n             lo.to(self.prev_token.span),\n             ExprKind::Loop(body, opt_label, loop_span),"}, {"sha": "16252e980e4fff764df2248c85aadac87a083a38", "filename": "tests/ui/for/for-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Ffor%2Ffor-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Ffor%2Ffor-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Ffor-else-err.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    for _ in 0..1 {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `for...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    }\n+}"}, {"sha": "b330d1076476921c7a7fa7e1aa87dc8b8d13ba7f", "filename": "tests/ui/for/for-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Ffor%2Ffor-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Ffor%2Ffor-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Ffor-else-err.stderr?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,17 @@\n+error: `for...else` loops are not supported\n+  --> $DIR/for-else-err.rs:4:7\n+   |\n+LL |       for _ in 0..1 {\n+   |       --- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "c0b96f9729456c6ae8564699370e1f52370cef40", "filename": "tests/ui/for/for-else-let-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Ffor%2Ffor-else-let-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Ffor%2Ffor-else-let-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Ffor-else-let-else-err.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let _ = for _ in 0..1 {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `for...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    };\n+}"}, {"sha": "a2396a8fbb161af9882c4f51211353e4f1732809", "filename": "tests/ui/for/for-else-let-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Ffor%2Ffor-else-let-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Ffor%2Ffor-else-let-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Ffor-else-let-else-err.stderr?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,17 @@\n+error: `for...else` loops are not supported\n+  --> $DIR/for-else-let-else-err.rs:4:7\n+   |\n+LL |       let _ = for _ in 0..1 {\n+   |               --- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "2d85e3878cc98d65b37aa8a09cbb6ad6fb1352b4", "filename": "tests/ui/let-else/let-else-brace-before-else.fixed", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -7,10 +7,6 @@ fn main() {\n         //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n         return;\n     };\n-    let Some(1) = (loop { break Some(1) }) else {\n-        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n-        return;\n-    };\n     let 2 = 1 + (match 1 { n => n }) else {\n         //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n         return;"}, {"sha": "5c3375b3f28661246801c5b9fea459806f5e3a3e", "filename": "tests/ui/let-else/let-else-brace-before-else.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -7,10 +7,6 @@ fn main() {\n         //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n         return;\n     };\n-    let Some(1) = loop { break Some(1) } else {\n-        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n-        return;\n-    };\n     let 2 = 1 + match 1 { n => n } else {\n         //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n         return;"}, {"sha": "ee53213d8c27e3e32b2f004dbe84e3ae25912367", "filename": "tests/ui/let-else/let-else-brace-before-else.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -10,18 +10,7 @@ LL |     let Some(1) = ({ Some(1) }) else {\n    |                   +           +\n \n error: right curly brace `}` before `else` in a `let...else` statement not allowed\n-  --> $DIR/let-else-brace-before-else.rs:10:40\n-   |\n-LL |     let Some(1) = loop { break Some(1) } else {\n-   |                                        ^\n-   |\n-help: wrap the expression in parentheses\n-   |\n-LL |     let Some(1) = (loop { break Some(1) }) else {\n-   |                   +                      +\n-\n-error: right curly brace `}` before `else` in a `let...else` statement not allowed\n-  --> $DIR/let-else-brace-before-else.rs:14:34\n+  --> $DIR/let-else-brace-before-else.rs:10:34\n    |\n LL |     let 2 = 1 + match 1 { n => n } else {\n    |                                  ^\n@@ -32,7 +21,7 @@ LL |     let 2 = 1 + (match 1 { n => n }) else {\n    |                 +                  +\n \n error: right curly brace `}` before `else` in a `let...else` statement not allowed\n-  --> $DIR/let-else-brace-before-else.rs:18:40\n+  --> $DIR/let-else-brace-before-else.rs:14:40\n    |\n LL |     let Some(1) = unsafe { unsafe_fn() } else {\n    |                                        ^\n@@ -42,5 +31,5 @@ help: wrap the expression in parentheses\n LL |     let Some(1) = (unsafe { unsafe_fn() }) else {\n    |                   +                      +\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "670d8a145c0afb3c71da485e68922f4ea1ea19bc", "filename": "tests/ui/loops/loop-else-break-with-value.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-break-with-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-break-with-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-break-with-value.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let Some(1) = loop {\n+        //~^ NOTE `else` is attached to this loop\n+        break Some(1)\n+    } else {\n+        //~^ ERROR `loop...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+        return;\n+    };\n+}"}, {"sha": "972e2d341ec0d0fe36efe8204078a52bd04bfdb0", "filename": "tests/ui/loops/loop-else-break-with-value.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-break-with-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-break-with-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-break-with-value.stderr?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,18 @@\n+error: `loop...else` loops are not supported\n+  --> $DIR/loop-else-break-with-value.rs:5:7\n+   |\n+LL |       let Some(1) = loop {\n+   |                     ---- `else` is attached to this loop\n+...\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |         return;\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "202a09c255c2e901b40c9ea58c49c3dd83fe7404", "filename": "tests/ui/loops/loop-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-err.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    loop {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `loop...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    }\n+}"}, {"sha": "c2c5c84cded5d3ffade497c0b56ac72f3d2b80f6", "filename": "tests/ui/loops/loop-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-err.stderr?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,17 @@\n+error: `loop...else` loops are not supported\n+  --> $DIR/loop-else-err.rs:4:7\n+   |\n+LL |       loop {\n+   |       ---- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "e828ffef549e8a47b87621dd350420e07e83d9d7", "filename": "tests/ui/loops/loop-else-let-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-let-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-let-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-let-else-err.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let _ = loop {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `loop...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    };\n+}"}, {"sha": "a57c784ff6fca9d08fc5081421a218d06190296c", "filename": "tests/ui/loops/loop-else-let-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-let-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Floops%2Floop-else-let-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-else-let-else-err.stderr?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,17 @@\n+error: `loop...else` loops are not supported\n+  --> $DIR/loop-else-let-else-err.rs:4:7\n+   |\n+LL |       let _ = loop {\n+   |               ---- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "36b60fbd4be2416ca84b0d5d2dda8a3da195b199", "filename": "tests/ui/while/while-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Fwhile%2Fwhile-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Fwhile%2Fwhile-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile%2Fwhile-else-err.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    while false {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `while...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    };\n+}"}, {"sha": "88f715d56660918ee8600f80effbae0d2b81d046", "filename": "tests/ui/while/while-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Fwhile%2Fwhile-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Fwhile%2Fwhile-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile%2Fwhile-else-err.stderr?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,17 @@\n+error: `while...else` loops are not supported\n+  --> $DIR/while-else-err.rs:4:7\n+   |\n+LL |       while false {\n+   |       ----- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}, {"sha": "6d9909347c3b11372139d6e316c36387827fdd30", "filename": "tests/ui/while/while-else-let-else-err.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.rs?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let _ = while false {\n+        //~^ NOTE `else` is attached to this loop\n+    } else {\n+        //~^ ERROR `while...else` loops are not supported\n+        //~| NOTE consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+    };\n+}"}, {"sha": "431d37c007c6d1da78bf44f14e915f7a10cff4f6", "filename": "tests/ui/while/while-else-let-else-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile%2Fwhile-else-let-else-err.stderr?ref=27fa7b5e6d2eaeba5daf6354df9de0d03cdf795c", "patch": "@@ -0,0 +1,17 @@\n+error: `while...else` loops are not supported\n+  --> $DIR/while-else-let-else-err.rs:4:7\n+   |\n+LL |       let _ = while false {\n+   |               ----- `else` is attached to this loop\n+LL |\n+LL |       } else {\n+   |  _______^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: consider moving this `else` clause to a separate `if` statement and use a `bool` variable to control if it should run\n+\n+error: aborting due to previous error\n+"}]}