{"sha": "276090e870a6a1685701bc91425ffb44439385fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NjA5MGU4NzBhNmExNjg1NzAxYmM5MTQyNWZmYjQ0NDM5Mzg1ZmQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-05T16:54:19Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:58Z"}, "message": "Fix tool_cmd", "tree": {"sha": "b78f8341b925f99bbf6ed6192f7358f52e278445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b78f8341b925f99bbf6ed6192f7358f52e278445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276090e870a6a1685701bc91425ffb44439385fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276090e870a6a1685701bc91425ffb44439385fd", "html_url": "https://github.com/rust-lang/rust/commit/276090e870a6a1685701bc91425ffb44439385fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276090e870a6a1685701bc91425ffb44439385fd/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a844ebb8f8f3ec2fed09a23597207d35ae1a28e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e", "html_url": "https://github.com/rust-lang/rust/commit/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "13bb08e1b0c2eac0ee9c83e35803dd270725b148", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/276090e870a6a1685701bc91425ffb44439385fd/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276090e870a6a1685701bc91425ffb44439385fd/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=276090e870a6a1685701bc91425ffb44439385fd", "patch": "@@ -535,12 +535,6 @@ impl Build {\n         }\n     }\n \n-    /// Get the specified tool built by the specified compiler\n-    fn tool(&self, compiler: Compiler, tool: &str) -> PathBuf {\n-        self.cargo_out(compiler, Mode::Tool, compiler.host)\n-            .join(exe(tool, compiler.host))\n-    }\n-\n     /// Get the `rustdoc` executable next to the specified compiler\n     fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n         let mut rustdoc = self.compiler_path(compiler);"}, {"sha": "933080ca5fe184dd9c97f06d9f6986f20214164f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/276090e870a6a1685701bc91425ffb44439385fd/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276090e870a6a1685701bc91425ffb44439385fd/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=276090e870a6a1685701bc91425ffb44439385fd", "patch": "@@ -13,6 +13,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use Mode;\n+use Compiler;\n use builder::{Step, Builder};\n use util::{exe, add_lib_path};\n use compile::{self, libtest_stamp, libstd_stamp, librustc_stamp, Rustc};\n@@ -373,8 +374,9 @@ impl<'a> Step<'a> for Rls<'a> {\n impl<'a> Builder<'a> {\n     /// Get a `Command` which is ready to run `tool` in `stage` built for\n     /// `host`.\n-    fn tool_cmd(&self, compiler: Compiler, tool: &str) -> Command {\n-        let mut cmd = Command::new(self.tool(compiler, tool));\n+    pub fn tool_cmd(&self, tool: Tool) -> Command {\n+        let mut cmd = Command::new(self.tool_exe(tool));\n+        let compiler = self.compiler(0, &self.build.build);\n         self.prepare_tool_cmd(compiler, &mut cmd);\n         cmd\n     }\n@@ -394,7 +396,7 @@ impl<'a> Builder<'a> {\n         // mode) and that C compiler may need some extra PATH modification. Do\n         // so here.\n         if compiler.host.contains(\"msvc\") {\n-            let curpaths = env::var_os(\"PATH\").unwrap_or(OsString::new());\n+            let curpaths = env::var_os(\"PATH\").unwrap_or_default();\n             let curpaths = env::split_paths(&curpaths).collect::<Vec<_>>();\n             for &(ref k, ref v) in self.cc[compiler.host].0.env() {\n                 if k != \"PATH\" {"}]}