{"sha": "0cf606177e79bc580fa27a82eb9c8b56e7253f46", "node_id": "C_kwDOAAsO6NoAKDBjZjYwNjE3N2U3OWJjNTgwZmEyN2E4MmViOWM4YjU2ZTcyNTNmNDY", "commit": {"author": {"name": "J\u00f6rn Horstmann", "email": "git@jhorstmann.net", "date": "2022-03-25T10:39:11Z"}, "committer": {"name": "J\u00f6rn Horstmann", "email": "git@jhorstmann.net", "date": "2022-03-25T10:39:11Z"}, "message": "Fix double drop of allocator in IntoIter impl of Vec", "tree": {"sha": "efb749595e7d47f322a3f86398e17e98f9f7f654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efb749595e7d47f322a3f86398e17e98f9f7f654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf606177e79bc580fa27a82eb9c8b56e7253f46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf606177e79bc580fa27a82eb9c8b56e7253f46", "html_url": "https://github.com/rust-lang/rust/commit/0cf606177e79bc580fa27a82eb9c8b56e7253f46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf606177e79bc580fa27a82eb9c8b56e7253f46/comments", "author": {"login": "jhorstmann", "id": 689138, "node_id": "MDQ6VXNlcjY4OTEzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/689138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhorstmann", "html_url": "https://github.com/jhorstmann", "followers_url": "https://api.github.com/users/jhorstmann/followers", "following_url": "https://api.github.com/users/jhorstmann/following{/other_user}", "gists_url": "https://api.github.com/users/jhorstmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhorstmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhorstmann/subscriptions", "organizations_url": "https://api.github.com/users/jhorstmann/orgs", "repos_url": "https://api.github.com/users/jhorstmann/repos", "events_url": "https://api.github.com/users/jhorstmann/events{/privacy}", "received_events_url": "https://api.github.com/users/jhorstmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhorstmann", "id": 689138, "node_id": "MDQ6VXNlcjY4OTEzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/689138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhorstmann", "html_url": "https://github.com/jhorstmann", "followers_url": "https://api.github.com/users/jhorstmann/followers", "following_url": "https://api.github.com/users/jhorstmann/following{/other_user}", "gists_url": "https://api.github.com/users/jhorstmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhorstmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhorstmann/subscriptions", "organizations_url": "https://api.github.com/users/jhorstmann/orgs", "repos_url": "https://api.github.com/users/jhorstmann/repos", "events_url": "https://api.github.com/users/jhorstmann/events{/privacy}", "received_events_url": "https://api.github.com/users/jhorstmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce257ff198d23bdf14e956fbf2fe0fed297201f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce257ff198d23bdf14e956fbf2fe0fed297201f", "html_url": "https://github.com/rust-lang/rust/commit/4ce257ff198d23bdf14e956fbf2fe0fed297201f"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "471042cd7177e2e7da1d77c7522515df4de112bd", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0cf606177e79bc580fa27a82eb9c8b56e7253f46/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf606177e79bc580fa27a82eb9c8b56e7253f46/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=0cf606177e79bc580fa27a82eb9c8b56e7253f46", "patch": "@@ -8,7 +8,8 @@ use core::iter::{\n     FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccessNoCoerce,\n };\n use core::marker::PhantomData;\n-use core::mem::{self};\n+use core::mem::{self, ManuallyDrop};\n+use core::ops::Deref;\n use core::ptr::{self, NonNull};\n use core::slice::{self};\n \n@@ -32,7 +33,9 @@ pub struct IntoIter<\n     pub(super) buf: NonNull<T>,\n     pub(super) phantom: PhantomData<T>,\n     pub(super) cap: usize,\n-    pub(super) alloc: A,\n+    // the drop impl reconstructs a RawVec from buf, cap and alloc\n+    // to avoid dropping the allocator twice we need to wrap it into ManuallyDrop\n+    pub(super) alloc: ManuallyDrop<A>,\n     pub(super) ptr: *const T,\n     pub(super) end: *const T,\n }\n@@ -295,11 +298,11 @@ where\n impl<T: Clone, A: Allocator + Clone> Clone for IntoIter<T, A> {\n     #[cfg(not(test))]\n     fn clone(&self) -> Self {\n-        self.as_slice().to_vec_in(self.alloc.clone()).into_iter()\n+        self.as_slice().to_vec_in(self.alloc.deref().clone()).into_iter()\n     }\n     #[cfg(test)]\n     fn clone(&self) -> Self {\n-        crate::slice::to_vec(self.as_slice(), self.alloc.clone()).into_iter()\n+        crate::slice::to_vec(self.as_slice(), self.alloc.deref().clone()).into_iter()\n     }\n }\n \n@@ -311,8 +314,8 @@ unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {\n         impl<T, A: Allocator> Drop for DropGuard<'_, T, A> {\n             fn drop(&mut self) {\n                 unsafe {\n-                    // `IntoIter::alloc` is not used anymore after this\n-                    let alloc = ptr::read(&self.0.alloc);\n+                    // `IntoIter::alloc` is not used anymore after this and will be dropped by RawVec\n+                    let alloc = ManuallyDrop::into_inner(ptr::read(&self.0.alloc));\n                     // RawVec handles deallocation\n                     let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);\n                 }"}, {"sha": "96857c4bd6ffd24a9f7ed00c2c571e6f4c28564b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf606177e79bc580fa27a82eb9c8b56e7253f46/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf606177e79bc580fa27a82eb9c8b56e7253f46/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=0cf606177e79bc580fa27a82eb9c8b56e7253f46", "patch": "@@ -2575,7 +2575,7 @@ impl<T, A: Allocator> IntoIterator for Vec<T, A> {\n     fn into_iter(self) -> IntoIter<T, A> {\n         unsafe {\n             let mut me = ManuallyDrop::new(self);\n-            let alloc = ptr::read(me.allocator());\n+            let alloc = ManuallyDrop::new(ptr::read(me.allocator()));\n             let begin = me.as_mut_ptr();\n             let end = if mem::size_of::<T>() == 0 {\n                 arith_offset(begin as *const i8, me.len() as isize) as *const T"}]}