{"sha": "0a5ec69404a2556dd82e5bb00b295aebaa291f04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNWVjNjk0MDRhMjU1NmRkODJlNWJiMDBiMjk1YWViYWEyOTFmMDQ=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-09T04:00:46Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-09T04:00:46Z"}, "message": "Remove map_ranges in RevTokenMap", "tree": {"sha": "1ae5ae1ef0ca23dc917d845312c6753d9b46b1ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ae5ae1ef0ca23dc917d845312c6753d9b46b1ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a5ec69404a2556dd82e5bb00b295aebaa291f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5ec69404a2556dd82e5bb00b295aebaa291f04", "html_url": "https://github.com/rust-lang/rust/commit/0a5ec69404a2556dd82e5bb00b295aebaa291f04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a5ec69404a2556dd82e5bb00b295aebaa291f04/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "url": "https://api.github.com/repos/rust-lang/rust/commits/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "html_url": "https://github.com/rust-lang/rust/commit/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373"}], "stats": {"total": 101, "additions": 35, "deletions": 66}, "files": [{"sha": "b789c6e7b3affd87dbfe60bd4f4bc7929e63b35a", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a5ec69404a2556dd82e5bb00b295aebaa291f04/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5ec69404a2556dd82e5bb00b295aebaa291f04/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=0a5ec69404a2556dd82e5bb00b295aebaa291f04", "patch": "@@ -22,8 +22,8 @@ pub trait AstDatabase: SourceDatabase {\n \n     #[salsa::interned]\n     fn intern_macro(&self, macro_call: MacroCallLoc) -> MacroCallId;\n-    fn macro_arg(&self, id: MacroCallId) -> Option<(Arc<tt::Subtree>, Arc<mbe::TokenMap>)>;\n-    fn macro_def(&self, id: MacroDefId) -> Option<(Arc<mbe::MacroRules>, Arc<mbe::TokenMap>)>;\n+    fn macro_arg(&self, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>>;\n+    fn macro_def(&self, id: MacroDefId) -> Option<Arc<(mbe::MacroRules, mbe::TokenMap)>>;\n     fn parse_macro(\n         &self,\n         macro_file: MacroFile,\n@@ -40,7 +40,7 @@ pub(crate) fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdM\n pub(crate) fn macro_def(\n     db: &dyn AstDatabase,\n     id: MacroDefId,\n-) -> Option<(Arc<mbe::MacroRules>, Arc<mbe::TokenMap>)> {\n+) -> Option<Arc<(mbe::MacroRules, mbe::TokenMap)>> {\n     let macro_call = id.ast_id.to_node(db);\n     let arg = macro_call.token_tree()?;\n     let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n@@ -51,18 +51,18 @@ pub(crate) fn macro_def(\n         log::warn!(\"fail on macro_def parse: {:#?}\", tt);\n         None\n     })?;\n-    Some((Arc::new(rules), Arc::new(tmap)))\n+    Some(Arc::new((rules, tmap)))\n }\n \n pub(crate) fn macro_arg(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n-) -> Option<(Arc<tt::Subtree>, Arc<mbe::TokenMap>)> {\n+) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>> {\n     let loc = db.lookup_intern_macro(id);\n     let macro_call = loc.ast_id.to_node(db);\n     let arg = macro_call.token_tree()?;\n     let (tt, tmap) = mbe::ast_to_token_tree(&arg)?;\n-    Some((Arc::new(tt), Arc::new(tmap)))\n+    Some(Arc::new((tt, tmap)))\n }\n \n pub(crate) fn macro_expand("}, {"sha": "b219b8fbf8fb2caa3c5ca6754683f88a2f05ac5d", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0a5ec69404a2556dd82e5bb00b295aebaa291f04/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5ec69404a2556dd82e5bb00b295aebaa291f04/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=0a5ec69404a2556dd82e5bb00b295aebaa291f04", "patch": "@@ -12,11 +12,12 @@ pub mod hygiene;\n pub mod diagnostics;\n \n use std::hash::{Hash, Hasher};\n+use std::sync::Arc;\n \n use ra_db::{salsa, CrateId, FileId};\n use ra_syntax::{\n     ast::{self, AstNode},\n-    SyntaxNode, TextRange,\n+    SyntaxNode, TextRange, TextUnit,\n };\n \n use crate::ast_id_map::FileAstId;\n@@ -68,29 +69,25 @@ impl HirFileId {\n     }\n \n     /// Return expansion information if it is a macro-expansion file\n-    pub fn parent_expansion(self, db: &dyn db::AstDatabase) -> Option<ExpansionInfo> {\n+    pub fn expansion_info(self, db: &dyn db::AstDatabase) -> Option<ExpansionInfo> {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n \n-                let arg_range = loc.ast_id.to_node(db).token_tree()?.syntax().text_range();\n-                let def_range = loc.def.ast_id.to_node(db).token_tree()?.syntax().text_range();\n+                let arg_start = loc.ast_id.to_node(db).token_tree()?.syntax().text_range().start();\n+                let def_start =\n+                    loc.def.ast_id.to_node(db).token_tree()?.syntax().text_range().start();\n \n                 let macro_def = db.macro_def(loc.def)?;\n                 let shift = macro_def.0.shift();\n-                let rev_map = db.parse_macro(macro_file)?.1;\n+                let exp_map = db.parse_macro(macro_file)?.1;\n+                let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n \n-                let arg_token_map = db.macro_arg(macro_file.macro_call_id)?.1;\n-                let def_token_map = macro_def.1;\n+                let arg_start = (loc.ast_id.file_id, arg_start);\n+                let def_start = (loc.def.ast_id.file_id, def_start);\n \n-                let arg_map = rev_map.map_ranges(&arg_token_map, arg_range, shift);\n-                let def_map = rev_map.map_ranges(&def_token_map, def_range, 0);\n-\n-                let arg_file = loc.ast_id.file_id;\n-                let def_file = loc.def.ast_id.file_id;\n-\n-                Some(ExpansionInfo { arg_file, def_file, arg_map, def_map })\n+                Some(ExpansionInfo { arg_start, def_start, macro_arg, macro_def, exp_map, shift })\n             }\n         }\n     }\n@@ -143,28 +140,30 @@ impl MacroCallId {\n #[derive(Debug, Clone, PartialEq, Eq)]\n /// ExpansionInfo mainly describes how to map text range between src and expanded macro\n pub struct ExpansionInfo {\n-    pub(crate) arg_file: HirFileId,\n-    pub(crate) def_file: HirFileId,\n+    pub(crate) arg_start: (HirFileId, TextUnit),\n+    pub(crate) def_start: (HirFileId, TextUnit),\n+    pub(crate) shift: u32,\n \n-    pub(crate) arg_map: Vec<(TextRange, TextRange)>,\n-    pub(crate) def_map: Vec<(TextRange, TextRange)>,\n+    pub(crate) macro_def: Arc<(mbe::MacroRules, mbe::TokenMap)>,\n+    pub(crate) macro_arg: Arc<(tt::Subtree, mbe::TokenMap)>,\n+    pub(crate) exp_map: Arc<mbe::RevTokenMap>,\n }\n \n impl ExpansionInfo {\n     pub fn find_range(&self, from: TextRange) -> Option<(HirFileId, TextRange)> {\n-        for (src, dest) in &self.arg_map {\n-            if src.is_subrange(&from) {\n-                return Some((self.arg_file, *dest));\n-            }\n+        fn look_in_rev_map(exp_map: &mbe::RevTokenMap, from: TextRange) -> Option<tt::TokenId> {\n+            exp_map.ranges.iter().find(|&it| it.0.is_subrange(&from)).map(|it| it.1)\n         }\n \n-        for (src, dest) in &self.def_map {\n-            if src.is_subrange(&from) {\n-                return Some((self.def_file, *dest));\n-            }\n-        }\n+        let token_id = look_in_rev_map(&self.exp_map, from)?;\n+        let (token_map, file_offset, token_id) = if token_id.0 >= self.shift {\n+            (&self.macro_arg.1, self.arg_start, tt::TokenId(token_id.0 - self.shift).into())\n+        } else {\n+            (&self.macro_def.1, self.def_start, token_id)\n+        };\n \n-        None\n+        let range = token_map.relative_range_of(token_id)?;\n+        Some((file_offset.0, TextRange::offset_len(range.start() + file_offset.1, range.len())))\n     }\n }\n "}, {"sha": "1bf81e7d5195103716a3bd44646e0627fa41ef4e", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a5ec69404a2556dd82e5bb00b295aebaa291f04/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5ec69404a2556dd82e5bb00b295aebaa291f04/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=0a5ec69404a2556dd82e5bb00b295aebaa291f04", "patch": "@@ -36,7 +36,7 @@ fn find_range_from_node(\n ) -> (FileId, TextRange) {\n     let text_range = node.text_range();\n     let (file_id, text_range) = src\n-        .parent_expansion(db)\n+        .expansion_info(db)\n         .and_then(|expansion_info| expansion_info.find_range(text_range))\n         .unwrap_or((src, text_range));\n "}, {"sha": "9653f7fef784bae7b1e9c19b48e9f2cdac479deb", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a5ec69404a2556dd82e5bb00b295aebaa291f04/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5ec69404a2556dd82e5bb00b295aebaa291f04/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=0a5ec69404a2556dd82e5bb00b295aebaa291f04", "patch": "@@ -23,7 +23,7 @@ pub struct TokenMap {\n /// Maps relative range of the expanded syntax node to `tt::TokenId`\n #[derive(Debug, PartialEq, Eq, Default)]\n pub struct RevTokenMap {\n-    ranges: Vec<(TextRange, tt::TokenId)>,\n+    pub ranges: Vec<(TextRange, tt::TokenId)>,\n }\n \n /// Convert the syntax tree (what user has written) to a `TokenTree` (what macro\n@@ -121,36 +121,6 @@ impl RevTokenMap {\n     fn add(&mut self, relative_range: TextRange, token_id: tt::TokenId) {\n         self.ranges.push((relative_range, token_id.clone()))\n     }\n-\n-    /// Map a given token map to (Expanded syntax node, Input tokens) text-ranges pair\n-    ///\n-    /// This function do the following things:\n-    ///\n-    /// 1. Undo the increment of token-id `shift`:\n-    ///     When we output a token from from macro argument, we increased its id\n-    ///     by `shift` (so it's guaranteed to not to collide with anything from the definition)\n-    ///     We undo the increment here to rollback to its original token id.\n-    /// 2. Offset the input tokens (`to`) by `parent` text-range:\n-    ///     We transforms the input tokens text-ranges from relative to original first token\n-    ///     to parent text-range\n-    /// 3. Maps expanded tokens text-ranges to parent text-ranges\n-    ///\n-    pub fn map_ranges(\n-        &self,\n-        to: &TokenMap,\n-        parent: TextRange,\n-        shift: u32,\n-    ) -> Vec<(TextRange, TextRange)> {\n-        self.ranges\n-            .iter()\n-            .filter_map(|(r, tid)| {\n-                let adjusted_id = tt::TokenId(tid.0.checked_sub(shift)?);\n-                let to_range = to.relative_range_of(adjusted_id)?;\n-\n-                Some((*r, TextRange::offset_len(to_range.start() + parent.start(), to_range.len())))\n-            })\n-            .collect()\n-    }\n }\n \n /// Returns the textual content of a doc comment block as a quoted string"}]}