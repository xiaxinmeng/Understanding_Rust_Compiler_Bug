{"sha": "ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYjBjMzc3ZjBhYjk5YTBmNWU2ZDBjNzc2Y2I5YjAyNmI2MmIwZTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T13:49:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T13:49:35Z"}, "message": "remove resolver from CompletonContext", "tree": {"sha": "49a2c265c83ae03182cf593c52ec8a0c155ad151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49a2c265c83ae03182cf593c52ec8a0c155ad151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4", "html_url": "https://github.com/rust-lang/rust/commit/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c9f2d0e372cff6490dcd30411cb6cc1f691fde7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9f2d0e372cff6490dcd30411cb6cc1f691fde7", "html_url": "https://github.com/rust-lang/rust/commit/3c9f2d0e372cff6490dcd30411cb6cc1f691fde7"}], "stats": {"total": 40, "additions": 9, "deletions": 31}, "files": [{"sha": "560b483035ff3ed3c16490fae6d16ad1e62a8e1a", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4", "patch": "@@ -11,7 +11,7 @@ use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n     SyntaxNode, AstPtr,\n     ast::{self, AstNode, NameOwner},\n-    algo::{find_node_at_offset, find_token_at_offset},\n+    algo::find_node_at_offset,\n };\n \n use crate::{\n@@ -196,29 +196,6 @@ pub fn trait_from_module(\n     Trait { id: ctx.to_def(trait_def) }\n }\n \n-pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> Resolver {\n-    let file_id = position.file_id;\n-    let file = db.parse(file_id);\n-    find_token_at_offset(file.syntax(), position.offset)\n-        .find_map(|token| {\n-            token.parent().ancestors().find_map(|node| {\n-                if ast::Expr::cast(node).is_some() || ast::Block::cast(node).is_some() {\n-                    if let Some(func) = function_from_child_node(db, file_id, node) {\n-                        let scopes = func.scopes(db);\n-                        let scope = scopes.scope_for_offset(position.offset);\n-                        Some(expr::resolver_for_scope(func.body(db), db, scope))\n-                    } else {\n-                        // FIXME const/static/array length\n-                        None\n-                    }\n-                } else {\n-                    try_get_resolver_for_node(db, file_id, node)\n-                }\n-            })\n-        })\n-        .unwrap_or_default()\n-}\n-\n fn resolver_for_node(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNode) -> Resolver {\n     node.ancestors()\n         .find_map(|node| {\n@@ -305,6 +282,10 @@ impl SourceAnalyzer {\n         }\n     }\n \n+    pub fn resolver(&self) -> &Resolver {\n+        &self.resolver\n+    }\n+\n     pub fn type_of(&self, _db: &impl HirDatabase, expr: &ast::Expr) -> Option<crate::Ty> {\n         let expr_id = self.body_source_map.as_ref()?.node_expr(expr)?;\n         Some(self.infer.as_ref()?[expr_id].clone())"}, {"sha": "e9bdf5af25f09921bafe9754e01c95ab3db7cc42", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4", "patch": "@@ -9,7 +9,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(path) => path.clone(),\n         _ => return,\n     };\n-    let def = match ctx.resolver.resolve_path(ctx.db, &path).take_types() {\n+    let def = match ctx.analyzer.resolver().resolve_path(ctx.db, &path).take_types() {\n         Some(Resolution::Def(def)) => def,\n         _ => return,\n     };"}, {"sha": "abbb8351886b0ea2787e5ffc366163f88010bd65", "filename": "crates/ra_ide_api/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4", "patch": "@@ -7,7 +7,7 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n     // FIXME: ideally, we should look at the type we are matching against and\n     // suggest variants + auto-imports\n-    let names = ctx.resolver.all_names(ctx.db);\n+    let names = ctx.analyzer.resolver().all_names(ctx.db);\n     for (name, res) in names.into_iter() {\n         let r = res.as_ref();\n         let def = match r.take_types().or(r.take_values()) {"}, {"sha": "4c5d07ce5d3c20c7c99ef54fa99c9a890fee47b4", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4", "patch": "@@ -4,7 +4,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n         return;\n     }\n-    let names = ctx.resolver.all_names(ctx.db);\n+    let names = ctx.analyzer.resolver().all_names(ctx.db);\n \n     names.into_iter().for_each(|(name, res)| acc.add_resolution(ctx, name.to_string(), &res));\n }"}, {"sha": "86b30e7871517750b7c707fb9710dbf1e4d6777e", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=ebb0c377f0ab99a0f5e6d0c776cb9b026b62b0e4", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     algo::{find_token_at_offset, find_covering_element, find_node_at_offset},\n     SyntaxKind::*,\n };\n-use hir::{source_binder, Resolver};\n+use hir::source_binder;\n \n use crate::{db, FilePosition};\n \n@@ -17,7 +17,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) analyzer: hir::SourceAnalyzer,\n     pub(super) offset: TextUnit,\n     pub(super) token: SyntaxToken<'a>,\n-    pub(super) resolver: Resolver,\n     pub(super) module: Option<hir::Module>,\n     pub(super) function_syntax: Option<&'a ast::FnDef>,\n     pub(super) use_item_syntax: Option<&'a ast::UseItem>,\n@@ -47,7 +46,6 @@ impl<'a> CompletionContext<'a> {\n         original_file: &'a SourceFile,\n         position: FilePosition,\n     ) -> Option<CompletionContext<'a>> {\n-        let resolver = source_binder::resolver_for_position(db, position);\n         let module = source_binder::module_from_position(db, position);\n         let token = find_token_at_offset(original_file.syntax(), position.offset).left_biased()?;\n         let analyzer = hir::SourceAnalyzer::new(db, position.file_id, token.parent());\n@@ -56,7 +54,6 @@ impl<'a> CompletionContext<'a> {\n             analyzer,\n             token,\n             offset: position.offset,\n-            resolver,\n             module,\n             function_syntax: None,\n             use_item_syntax: None,"}]}