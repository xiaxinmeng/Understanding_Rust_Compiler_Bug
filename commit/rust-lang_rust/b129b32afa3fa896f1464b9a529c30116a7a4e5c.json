{"sha": "b129b32afa3fa896f1464b9a529c30116a7a4e5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMjliMzJhZmEzZmE4OTZmMTQ2NGI5YTUyOWMzMDExNmE3YTRlNWM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-03-25T00:06:40Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-14T01:48:55Z"}, "message": "Use inner/outer generator naming instead of first/last\n\nI personally find this clearer.", "tree": {"sha": "d22a91aba8d74cd136b4831b9dcef33f17cd28b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22a91aba8d74cd136b4831b9dcef33f17cd28b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b129b32afa3fa896f1464b9a529c30116a7a4e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b129b32afa3fa896f1464b9a529c30116a7a4e5c", "html_url": "https://github.com/rust-lang/rust/commit/b129b32afa3fa896f1464b9a529c30116a7a4e5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b129b32afa3fa896f1464b9a529c30116a7a4e5c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e18e26f12b1e8b3e913b15278bf6185f0f61add", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e18e26f12b1e8b3e913b15278bf6185f0f61add", "html_url": "https://github.com/rust-lang/rust/commit/8e18e26f12b1e8b3e913b15278bf6185f0f61add"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "c923d9e16fe67ea5f11ebf3a4797fadbd3c11b22", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b129b32afa3fa896f1464b9a529c30116a7a4e5c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b129b32afa3fa896f1464b9a529c30116a7a4e5c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b129b32afa3fa896f1464b9a529c30116a7a4e5c", "patch": "@@ -127,8 +127,8 @@ pub trait InferCtxtExt<'tcx> {\n         scope_span: &Option<Span>,\n         expr: Option<hir::HirId>,\n         snippet: String,\n-        first_generator: DefId,\n-        last_generator: Option<DefId>,\n+        inner_generator: DefId,\n+        outer_generator: Option<DefId>,\n         trait_ref: ty::TraitRef<'_>,\n         target_ty: Ty<'tcx>,\n         tables: &ty::TypeckTables<'_>,\n@@ -1118,16 +1118,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // - `BindingObligation` with `impl_send (Send requirement)\n         //\n         // The first obligation in the chain is the most useful and has the generator that captured\n-        // the type. The last generator has information about where the bound was introduced. At\n-        // least one generator should be present for this diagnostic to be modified.\n+        // the type. The last generator (`outer_generator` below) has information about where the\n+        // bound was introduced. At least one generator should be present for this diagnostic to be\n+        // modified.\n         let (mut trait_ref, mut target_ty) = match obligation.predicate {\n             ty::Predicate::Trait(p, _) => {\n                 (Some(p.skip_binder().trait_ref), Some(p.skip_binder().self_ty()))\n             }\n             _ => (None, None),\n         };\n         let mut generator = None;\n-        let mut last_generator = None;\n+        let mut outer_generator = None;\n         let mut next_code = Some(&obligation.cause.code);\n         while let Some(code) = next_code {\n             debug!(\"maybe_note_obligation_cause_for_async_await: code={:?}\", code);\n@@ -1144,7 +1145,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     match ty.kind {\n                         ty::Generator(did, ..) => {\n                             generator = generator.or(Some(did));\n-                            last_generator = Some(did);\n+                            outer_generator = Some(did);\n                         }\n                         ty::GeneratorWitness(..) => {}\n                         _ if generator.is_none() => {\n@@ -1248,7 +1249,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 *expr,\n                 snippet,\n                 generator_did,\n-                last_generator,\n+                outer_generator,\n                 trait_ref,\n                 target_ty,\n                 tables,\n@@ -1270,8 +1271,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         scope_span: &Option<Span>,\n         expr: Option<hir::HirId>,\n         snippet: String,\n-        first_generator: DefId,\n-        last_generator: Option<DefId>,\n+        inner_generator: DefId,\n+        outer_generator: Option<DefId>,\n         trait_ref: ty::TraitRef<'_>,\n         target_ty: Ty<'tcx>,\n         tables: &ty::TypeckTables<'_>,\n@@ -1282,14 +1283,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let is_async_fn = self\n             .tcx\n-            .parent(first_generator)\n+            .parent(inner_generator)\n             .map(|parent_did| self.tcx.asyncness(parent_did))\n             .map(|parent_asyncness| parent_asyncness == hir::IsAsync::Async)\n             .unwrap_or(false);\n         let is_async_move = self\n             .tcx\n             .hir()\n-            .as_local_hir_id(first_generator)\n+            .as_local_hir_id(inner_generator)\n             .and_then(|hir_id| self.tcx.hir().maybe_body_owned_by(hir_id))\n             .map(|body_id| self.tcx.hir().body(body_id))\n             .and_then(|body| body.generator_kind())\n@@ -1318,7 +1319,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let original_span = err.span.primary_span().unwrap();\n             let mut span = MultiSpan::from_span(original_span);\n \n-            let message = if let Some(name) = last_generator\n+            let message = if let Some(name) = outer_generator\n                 .and_then(|generator_did| self.tcx.parent(generator_did))\n                 .and_then(|parent_did| hir.as_local_hir_id(parent_did))\n                 .and_then(|parent_hir_id| hir.opt_name(parent_hir_id))"}]}