{"sha": "8081096a7f9b84fe780f4426d70f4c5bb767eba8", "node_id": "C_kwDOAAsO6NoAKDgwODEwOTZhN2Y5Yjg0ZmU3ODBmNDQyNmQ3MGY0YzViYjc2N2ViYTg", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-27T18:07:16Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-27T18:07:16Z"}, "message": "Add documentation", "tree": {"sha": "66c49a945008a9d899d3f4e37abfce26316876e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c49a945008a9d899d3f4e37abfce26316876e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8081096a7f9b84fe780f4426d70f4c5bb767eba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8081096a7f9b84fe780f4426d70f4c5bb767eba8", "html_url": "https://github.com/rust-lang/rust/commit/8081096a7f9b84fe780f4426d70f4c5bb767eba8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8081096a7f9b84fe780f4426d70f4c5bb767eba8/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5deb396630f2cdaad85f94b558f34a236d284b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/5deb396630f2cdaad85f94b558f34a236d284b94", "html_url": "https://github.com/rust-lang/rust/commit/5deb396630f2cdaad85f94b558f34a236d284b94"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "141d76d59e172652a187040de791bff627f1873a", "filename": "src/librustdoc/html/static/js/externs.js", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8081096a7f9b84fe780f4426d70f4c5bb767eba8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/8081096a7f9b84fe780f4426d70f4c5bb767eba8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=8081096a7f9b84fe780f4426d70f4c5bb767eba8", "patch": "@@ -81,3 +81,56 @@ let ResultsTable;\n  * }}\n  */\n let Results;\n+\n+/**\n+ * A pair of [inputs, outputs], or 0 for null. This is gets stored in the search index.\n+ * The JavaScript deserializes this into FunctionSearchType.\n+ *\n+ * An input or output can be encoded as just a number if there is only one of them, AND\n+ * it has no generics. The no generics rule exists to avoid ambiguity: imagine if you had\n+ * a function with a single output, and that output had a single generic:\n+ *\n+ *     fn something() -> Result<usize, usize>\n+ *\n+ * If output was allowed to be any RawFunctionType, it would look like this\n+ *\n+ *     [[], [50, [3, 3]]]\n+ *\n+ * The problem is that the above output could be interpreted as either a type with ID 50 and two\n+ * generics, or it could be interpreted as a pair of types, the first one with ID 50 and the second\n+ * with ID 3 and a single generic parameter that is also ID 3. We avoid this ambiguity by choosing\n+ * in favor of the pair of types interpretation. This is why the `(number|Array<RawFunctionType>)`\n+ * is used instead of `(RawFunctionType|Array<RawFunctionType>)`.\n+ *\n+ * @typedef {(\n+ *     0 |\n+ *     [(number|Array<RawFunctionType>)] |\n+ *     [(number|Array<RawFunctionType>), (number|Array<RawFunctionType>)]\n+ * )}\n+ */\n+let RawFunctionSearchType;\n+\n+/**\n+ * A single function input or output type. This is either a single path ID, or a pair of\n+ * [path ID, generics].\n+ *\n+ * @typedef {number | [number, Array<RawFunctionType>]}\n+ */\n+let RawFunctionType;\n+\n+/**\n+ * @typedef {{\n+ *     inputs: Array<FunctionType>,\n+ *     outputs: Array<FunctionType>,\n+ * }}\n+ */\n+let FunctionSearchType;\n+\n+/**\n+ * @typedef {{\n+ *     name: (null|string),\n+ *     ty: (null|number),\n+ *     generics: Array<FunctionType>,\n+ * }}\n+ */\n+let FunctionType;"}, {"sha": "a766dd68e107cf45879b758067624d2fd8706657", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8081096a7f9b84fe780f4426d70f4c5bb767eba8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/8081096a7f9b84fe780f4426d70f4c5bb767eba8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=8081096a7f9b84fe780f4426d70f4c5bb767eba8", "patch": "@@ -1825,6 +1825,24 @@ function initSearch(rawSearchIndex) {\n             filterCrates);\n     }\n \n+    /**\n+     * Convert a list of RawFunctionType / ID to object-based FunctionType.\n+     *\n+     * Crates often have lots of functions in them, and it's common to have a large number of\n+     * functions that operate on a small set of data types, so the search index compresses them\n+     * by encoding function parameter and return types as indexes into an array of names.\n+     *\n+     * Even when a general-purpose compression algorithm is used, this is still a win. I checked.\n+     * https://github.com/rust-lang/rust/pull/98475#issue-1284395985\n+     *\n+     * The format for individual function types is encoded in\n+     * librustdoc/html/render/mod.rs: impl Serialize for RenderType\n+     *\n+     * @param {null|Array<RawFunctionType>} types\n+     * @param {Array<{name: string, ty: number}>} lowercasePaths\n+     *\n+     * @return {Array<FunctionSearchType>}\n+     */\n     function buildItemSearchTypeAll(types, lowercasePaths) {\n         const PATH_INDEX_DATA = 0;\n         const GENERICS_DATA = 1;\n@@ -1848,6 +1866,21 @@ function initSearch(rawSearchIndex) {\n         });\n     }\n \n+    /**\n+     * Convert from RawFunctionSearchType to FunctionSearchType.\n+     *\n+     * Crates often have lots of functions in them, and function signatures are sometimes complex,\n+     * so rustdoc uses a pretty tight encoding for them. This function converts it to a simpler,\n+     * object-based encoding so that the actual search code is more readable and easier to debug.\n+     *\n+     * The raw function search type format is generated using serde in\n+     * librustdoc/html/render/mod.rs: impl Serialize for IndexItemFunctionType\n+     *\n+     * @param {RawFunctionSearchType} functionSearchType\n+     * @param {Array<{name: string, ty: number}>} lowercasePaths\n+     *\n+     * @return {null|FunctionSearchType}\n+     */\n     function buildFunctionSearchType(functionSearchType, lowercasePaths) {\n         const INPUTS_DATA = 0;\n         const OUTPUT_DATA = 1;\n@@ -1935,7 +1968,7 @@ function initSearch(rawSearchIndex) {\n              *   d: Array<string>,\n              *   q: Array<string>,\n              *   i: Array<Number>,\n-             *   f: Array<0 | Object>,\n+             *   f: Array<RawFunctionSearchType>,\n              *   p: Array<Object>,\n              * }}\n              */"}]}