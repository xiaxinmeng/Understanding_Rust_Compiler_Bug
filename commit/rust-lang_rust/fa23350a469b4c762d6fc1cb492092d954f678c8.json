{"sha": "fa23350a469b4c762d6fc1cb492092d954f678c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMjMzNTBhNDY5YjRjNzYyZDZmYzFjYjQ5MjA5MmQ5NTRmNjc4Yzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-15T00:37:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-15T00:37:52Z"}, "message": "Auto merge of #52928 - Mark-Simulacrum:borrowck-cleanup, r=cramertj\n\n(old) borrowck cleanup\n\nPrimarily moves dataflow code based on CFG to borrowck; this is mostly so we don't forget to delete it once it becomes unused after we fully move to MIR borrowck.", "tree": {"sha": "ad0d90efe98727a6586ff625abbf3dff336f170d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad0d90efe98727a6586ff625abbf3dff336f170d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa23350a469b4c762d6fc1cb492092d954f678c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa23350a469b4c762d6fc1cb492092d954f678c8", "html_url": "https://github.com/rust-lang/rust/commit/fa23350a469b4c762d6fc1cb492092d954f678c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa23350a469b4c762d6fc1cb492092d954f678c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb2094d8934c420dbcc41875dc64eb9d82cbb6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb2094d8934c420dbcc41875dc64eb9d82cbb6f", "html_url": "https://github.com/rust-lang/rust/commit/5bb2094d8934c420dbcc41875dc64eb9d82cbb6f"}, {"sha": "8592039b8c5ebe4d64533bb5138ddad784567225", "url": "https://api.github.com/repos/rust-lang/rust/commits/8592039b8c5ebe4d64533bb5138ddad784567225", "html_url": "https://github.com/rust-lang/rust/commit/8592039b8c5ebe4d64533bb5138ddad784567225"}], "stats": {"total": 116, "additions": 31, "deletions": 85}, "files": [{"sha": "b6f4bd6dc408c9ffb4dfa10b2b7a935ad741434c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -135,7 +135,6 @@ pub mod middle {\n     pub mod borrowck;\n     pub mod expr_use_visitor;\n     pub mod cstore;\n-    pub mod dataflow;\n     pub mod dead;\n     pub mod dependency_format;\n     pub mod entry;"}, {"sha": "709590f649b92cab52d4e65f73867d7b98b69638", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -91,7 +91,6 @@ struct CheckLoanCtxt<'a, 'tcx: 'a> {\n     dfcx_loans: &'a LoanDataFlow<'a, 'tcx>,\n     move_data: &'a move_data::FlowedMoveData<'a, 'tcx>,\n     all_loans: &'a [Loan<'tcx>],\n-    param_env: ty::ParamEnv<'tcx>,\n     movable_generator: bool,\n }\n \n@@ -215,7 +214,6 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         dfcx_loans,\n         move_data,\n         all_loans,\n-        param_env,\n         movable_generator,\n     };\n     let rvalue_promotable_map = bccx.tcx.rvalue_promotable_map(def_id);\n@@ -801,8 +799,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 use_kind,\n                 &lp,\n                 the_move,\n-                moved_lp,\n-                self.param_env);\n+                moved_lp);\n             false\n         });\n     }"}, {"sha": "b76931c301748c44cc995473755bb1547833c017", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -163,15 +163,11 @@ pub fn gather_assignment<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                    move_data: &MoveData<'tcx>,\n                                    assignment_id: hir::ItemLocalId,\n                                    assignment_span: Span,\n-                                   assignee_loan_path: Rc<LoanPath<'tcx>>,\n-                                   assignee_id: hir::ItemLocalId,\n-                                   mode: euv::MutateMode) {\n+                                   assignee_loan_path: Rc<LoanPath<'tcx>>) {\n     move_data.add_assignment(bccx.tcx,\n                              assignee_loan_path,\n                              assignment_id,\n-                             assignment_span,\n-                             assignee_id,\n-                             mode);\n+                             assignment_span);\n }\n \n // (keep in sync with move_error::report_cannot_move_out_of )"}, {"sha": "c9dcc0d9fa266beb190653e31c7526d7309f267a", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -28,8 +28,7 @@ pub fn guarantee_lifetime<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                     span: Span,\n                                     cause: euv::LoanCause,\n                                     cmt: &'a mc::cmt_<'tcx>,\n-                                    loan_region: ty::Region<'tcx>,\n-                                    _: ty::BorrowKind)\n+                                    loan_region: ty::Region<'tcx>)\n                                     -> Result<(),()> {\n     //! Reports error if `loan_region` is larger than S\n     //! where S is `item_scope` if `cmt` is an upvar,"}, {"sha": "6c83e2dd1c206608915927e42e141bd1dcd743c8", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -145,12 +145,11 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> {\n               assignment_id: ast::NodeId,\n               assignment_span: Span,\n               assignee_cmt: &mc::cmt_<'tcx>,\n-              mode: euv::MutateMode)\n+              _: euv::MutateMode)\n     {\n         self.guarantee_assignment_valid(assignment_id,\n                                         assignment_span,\n-                                        assignee_cmt,\n-                                        mode);\n+                                        assignee_cmt);\n     }\n \n     fn decl_without_init(&mut self, id: ast::NodeId, _span: Span) {\n@@ -246,8 +245,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n     fn guarantee_assignment_valid(&mut self,\n                                   assignment_id: ast::NodeId,\n                                   assignment_span: Span,\n-                                  cmt: &mc::cmt_<'tcx>,\n-                                  mode: euv::MutateMode) {\n+                                  cmt: &mc::cmt_<'tcx>) {\n \n         let opt_lp = opt_loan_path(cmt);\n         debug!(\"guarantee_assignment_valid(assignment_id={}, cmt={:?}) opt_lp={:?}\",\n@@ -282,9 +280,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                                                 self.bccx.tcx.hir.node_to_hir_id(assignment_id)\n                                                     .local_id,\n                                                 assignment_span,\n-                                                lp,\n-                                                cmt.hir_id.local_id,\n-                                                mode);\n+                                                lp);\n             }\n             None => {\n                 // This can occur with e.g. `*foo() = 5`.  In such\n@@ -320,7 +316,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         // Check that the lifetime of the borrow does not exceed\n         // the lifetime of the data being borrowed.\n         if lifetime::guarantee_lifetime(self.bccx, self.item_ub,\n-                                        borrow_span, cause, cmt, loan_region, req_kind).is_err() {\n+                                        borrow_span, cause, cmt, loan_region).is_err() {\n             return; // reported an error, no sense in reporting more.\n         }\n "}, {"sha": "098149c36ce435f74f6d253a14914552650c6fcd", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -24,10 +24,6 @@ use rustc::hir::HirId;\n use rustc::hir::map as hir_map;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::cfg;\n-use rustc::middle::dataflow::DataFlowContext;\n-use rustc::middle::dataflow::BitwiseOperator;\n-use rustc::middle::dataflow::DataFlowOperator;\n-use rustc::middle::dataflow::KillFrom;\n use rustc::middle::borrowck::{BorrowCheckResult, SignalledError};\n use rustc::hir::def_id::{DefId, LocalDefId};\n use rustc::middle::expr_use_visitor as euv;\n@@ -54,6 +50,8 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor};\n \n+use dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n+\n pub mod check_loans;\n \n pub mod gather_loans;\n@@ -640,8 +638,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                      use_kind: MovedValueUseKind,\n                                      lp: &LoanPath<'tcx>,\n                                      the_move: &move_data::Move,\n-                                     moved_lp: &LoanPath<'tcx>,\n-                                     _param_env: ty::ParamEnv<'tcx>) {\n+                                     moved_lp: &LoanPath<'tcx>) {\n         let (verb, verb_participle) = match use_kind {\n             MovedInUse => (\"use\", \"used\"),\n             MovedInCapture => (\"capture\", \"captured\"),\n@@ -806,23 +803,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         self.signal_error();\n     }\n \n-    pub fn struct_span_err_with_code<S: Into<MultiSpan>>(&self,\n-                                                         s: S,\n-                                                         msg: &str,\n-                                                         code: DiagnosticId)\n-                                                         -> DiagnosticBuilder<'a> {\n-        self.tcx.sess.struct_span_err_with_code(s, msg, code)\n-    }\n-\n-    pub fn span_err_with_code<S: Into<MultiSpan>>(\n-        &self,\n-        s: S,\n-        msg: &str,\n-        code: DiagnosticId,\n-    ) {\n-        self.tcx.sess.span_err_with_code(s, msg, code);\n-    }\n-\n     fn report_bckerr(&self, err: &BckError<'a, 'tcx>) {\n         let error_span = err.span.clone();\n "}, {"sha": "979d71a0923c40ea4f468f04e80b07716bf13cb4", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -13,16 +13,12 @@\n \n pub use self::MoveKind::*;\n \n+use dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n+\n use borrowck::*;\n use rustc::cfg;\n-use rustc::middle::dataflow::DataFlowContext;\n-use rustc::middle::dataflow::BitwiseOperator;\n-use rustc::middle::dataflow::DataFlowOperator;\n-use rustc::middle::dataflow::KillFrom;\n-use rustc::middle::expr_use_visitor as euv;\n-use rustc::middle::expr_use_visitor::MutateMode;\n use rustc::ty::{self, TyCtxt};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc::util::nodemap::FxHashMap;\n \n use std::cell::RefCell;\n use std::rc::Rc;\n@@ -51,9 +47,6 @@ pub struct MoveData<'tcx> {\n     /// assigned dataflow bits, but we track them because they still\n     /// kill move bits.\n     pub path_assignments: RefCell<Vec<Assignment>>,\n-\n-    /// Assignments to a variable or path, like `x = foo`, but not `x += foo`.\n-    pub assignee_ids: RefCell<FxHashSet<hir::ItemLocalId>>,\n }\n \n pub struct FlowedMoveData<'a, 'tcx: 'a> {\n@@ -151,9 +144,6 @@ pub struct Assignment {\n \n     /// span of node where assignment occurs\n     pub span: Span,\n-\n-    /// id for place expression on lhs of assignment\n-    pub assignee_id: hir::ItemLocalId,\n }\n \n #[derive(Clone, Copy)]\n@@ -388,9 +378,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n     pub fn add_assignment(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           lp: Rc<LoanPath<'tcx>>,\n                           assign_id: hir::ItemLocalId,\n-                          span: Span,\n-                          assignee_id: hir::ItemLocalId,\n-                          mode: euv::MutateMode) {\n+                          span: Span) {\n         // Assigning to one union field automatically assigns to all its fields.\n         if let LpExtend(ref base_lp, mutbl, LpInterior(opt_variant_id, interior)) = lp.kind {\n             if let ty::TyAdt(adt_def, _) = base_lp.ty.sty {\n@@ -407,39 +395,28 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                                                     LpInterior(opt_variant_id, field));\n                         let sibling_lp = Rc::new(LoanPath::new(sibling_lp_kind, field_ty));\n                         self.add_assignment_helper(tcx, sibling_lp, assign_id,\n-                                                   span, assignee_id, mode);\n+                                                   span);\n                     }\n                     return;\n                 }\n             }\n         }\n \n-        self.add_assignment_helper(tcx, lp.clone(), assign_id, span, assignee_id, mode);\n+        self.add_assignment_helper(tcx, lp.clone(), assign_id, span);\n     }\n \n     fn add_assignment_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              lp: Rc<LoanPath<'tcx>>,\n                              assign_id: hir::ItemLocalId,\n-                             span: Span,\n-                             assignee_id: hir::ItemLocalId,\n-                             mode: euv::MutateMode) {\n-        debug!(\"add_assignment(lp={:?}, assign_id={:?}, assignee_id={:?}\",\n-               lp, assign_id, assignee_id);\n+                             span: Span) {\n+        debug!(\"add_assignment(lp={:?}, assign_id={:?}\", lp, assign_id);\n \n         let path_index = self.move_path(tcx, lp.clone());\n \n-        match mode {\n-            MutateMode::Init | MutateMode::JustWrite => {\n-                self.assignee_ids.borrow_mut().insert(assignee_id);\n-            }\n-            MutateMode::WriteAndRead => { }\n-        }\n-\n         let assignment = Assignment {\n             path: path_index,\n             id: assign_id,\n             span,\n-            assignee_id,\n         };\n \n         if self.is_var_path(path_index) {"}, {"sha": "d5f30c1dcd42da8d4f7ec94a03ebee820765f8e2", "filename": "src/librustc_borrowck/dataflow.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -14,20 +14,20 @@\n //! and thus uses bitvectors. Your job is simply to specify the so-called\n //! GEN and KILL bits for each expression.\n \n-use cfg;\n-use cfg::CFGIndex;\n-use ty::TyCtxt;\n+use rustc::cfg;\n+use rustc::cfg::CFGIndex;\n+use rustc::ty::TyCtxt;\n use std::io;\n use std::mem;\n use std::usize;\n use syntax::print::pprust::PrintState;\n \n use rustc_data_structures::graph::implementation::OUTGOING;\n \n-use util::nodemap::FxHashMap;\n-use hir;\n-use hir::intravisit::{self, IdRange};\n-use hir::print as pprust;\n+use rustc::util::nodemap::FxHashMap;\n+use rustc::hir;\n+use rustc::hir::intravisit::{self, IdRange};\n+use rustc::hir::print as pprust;\n \n \n #[derive(Copy, Clone, Debug)]\n@@ -193,7 +193,7 @@ fn build_local_id_to_index(body: Option<&hir::Body>,\n     fn add_entries_from_fn_body(index: &mut FxHashMap<hir::ItemLocalId, Vec<CFGIndex>>,\n                                 body: &hir::Body,\n                                 entry: CFGIndex) {\n-        use hir::intravisit::Visitor;\n+        use rustc::hir::intravisit::Visitor;\n \n         struct Formals<'a> {\n             entry: CFGIndex,", "previous_filename": "src/librustc/middle/dataflow.rs"}, {"sha": "dddd6a354c115bd6f95c24c62f68a8720cfc8294", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -21,7 +21,7 @@ use borrowck;\n use borrowck::{BorrowckCtxt, LoanPath};\n use dot;\n use rustc::cfg::CFGIndex;\n-use rustc::middle::dataflow::{DataFlowOperator, DataFlowContext, EntryOrExit};\n+use dataflow::{DataFlowOperator, DataFlowContext, EntryOrExit};\n use std::rc::Rc;\n use dot::IntoCow;\n "}, {"sha": "16da8c8a3b8bf6651dc41d8b70ef0f9b7cc8341d", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa23350a469b4c762d6fc1cb492092d954f678c8/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=fa23350a469b4c762d6fc1cb492092d954f678c8", "patch": "@@ -39,4 +39,6 @@ mod borrowck;\n \n pub mod graphviz;\n \n+mod dataflow;\n+\n pub use borrowck::provide;"}]}