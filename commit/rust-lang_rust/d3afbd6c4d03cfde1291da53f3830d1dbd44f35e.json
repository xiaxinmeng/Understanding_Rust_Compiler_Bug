{"sha": "d3afbd6c4d03cfde1291da53f3830d1dbd44f35e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYWZiZDZjNGQwM2NmZGUxMjkxZGE1M2YzODMwZDFkYmQ0NGYzNWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-21T09:42:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-31T23:43:38Z"}, "message": "more debug dumping in traits", "tree": {"sha": "8b767e4286946c469aa4d169bf5b51fa0082a365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b767e4286946c469aa4d169bf5b51fa0082a365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3afbd6c4d03cfde1291da53f3830d1dbd44f35e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3afbd6c4d03cfde1291da53f3830d1dbd44f35e", "html_url": "https://github.com/rust-lang/rust/commit/d3afbd6c4d03cfde1291da53f3830d1dbd44f35e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3afbd6c4d03cfde1291da53f3830d1dbd44f35e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf13b2f01615a725e7414644d4002a3adca3b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf13b2f01615a725e7414644d4002a3adca3b54", "html_url": "https://github.com/rust-lang/rust/commit/eaf13b2f01615a725e7414644d4002a3adca3b54"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "601fd899ff82be0e47f8d6f473615a7461e27c6d", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3afbd6c4d03cfde1291da53f3830d1dbd44f35e/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3afbd6c4d03cfde1291da53f3830d1dbd44f35e/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=d3afbd6c4d03cfde1291da53f3830d1dbd44f35e", "patch": "@@ -171,10 +171,12 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n         // debug output much nicer to read and so on.\n         let obligation = infcx.resolve_type_vars_if_possible(&obligation);\n \n+        debug!(\"register_predicate_obligation(obligation={:?})\", obligation);\n+\n         infcx.obligations_in_snapshot.set(true);\n \n-        if infcx.tcx.fulfilled_predicates.borrow().check_duplicate(&obligation.predicate)\n-        {\n+        if infcx.tcx.fulfilled_predicates.borrow().check_duplicate(&obligation.predicate) {\n+            debug!(\"register_predicate_obligation: duplicate\");\n             return\n         }\n "}, {"sha": "011662fe8c2de5bbbc47e8f5fe27e67b43eb2e4b", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3afbd6c4d03cfde1291da53f3830d1dbd44f35e/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3afbd6c4d03cfde1291da53f3830d1dbd44f35e/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=d3afbd6c4d03cfde1291da53f3830d1dbd44f35e", "patch": "@@ -257,9 +257,13 @@ pub fn normalize_with_depth<'a, 'b, 'gcx, 'tcx, T>(\n \n     where T : TypeFoldable<'tcx>\n {\n+    debug!(\"normalize_with_depth(depth={}, value={:?})\", depth, value);\n     let mut normalizer = AssociatedTypeNormalizer::new(selcx, cause, depth);\n     let result = normalizer.fold(value);\n-\n+    debug!(\"normalize_with_depth: depth={} result={:?} with {} obligations\",\n+           depth, result, normalizer.obligations.len());\n+    debug!(\"normalize_with_depth: depth={} obligations={:?}\",\n+           depth, normalizer.obligations);\n     Normalized {\n         value: result,\n         obligations: normalizer.obligations,\n@@ -331,13 +335,15 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                 // binder). It would be better to normalize in a\n                 // binding-aware fashion.\n \n-                let Normalized { value: ty, obligations } =\n+                let Normalized { value: normalized_ty, obligations } =\n                     normalize_projection_type(self.selcx,\n                                               data.clone(),\n                                               self.cause.clone(),\n                                               self.depth);\n+                debug!(\"AssociatedTypeNormalizer: depth={} normalized {:?} to {:?} with {} add'l obligations\",\n+                       self.depth, ty, normalized_ty, obligations.len());\n                 self.obligations.extend(obligations);\n-                ty\n+                normalized_ty\n             }\n \n             _ => {"}]}