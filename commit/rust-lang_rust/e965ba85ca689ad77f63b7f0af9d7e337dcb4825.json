{"sha": "e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NjViYTg1Y2E2ODlhZDc3ZjYzYjdmMGFmOWQ3ZTMzN2RjYjQ4MjU=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-10T05:26:10Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T16:46:03Z"}, "message": "Remove lots of numeric traits from the preludes\n\nNum, NumCast, Unsigned, Float, Primitive and Int have been removed.", "tree": {"sha": "0ecf2223970c18455595e523ca594fe6d3321129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ecf2223970c18455595e523ca594fe6d3321129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "html_url": "https://github.com/rust-lang/rust/commit/e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "891559e30d045606aa109f4991074f783a5e50f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/891559e30d045606aa109f4991074f783a5e50f8", "html_url": "https://github.com/rust-lang/rust/commit/891559e30d045606aa109f4991074f783a5e50f8"}], "stats": {"total": 166, "additions": 100, "deletions": 66}, "files": [{"sha": "e3c050f0e90160f28ae6744521557805e1e62254", "filename": "src/doc/guide-lifetimes.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Fdoc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Fdoc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-lifetimes.md?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -51,6 +51,7 @@ expensive. So we'd like to define a function that takes the points just as\n a reference.\n \n ~~~\n+# use std::num::Float;\n # struct Point {x: f64, y: f64}\n # fn sqrt(f: f64) -> f64 { 0.0 }\n fn compute_distance(p1: &Point, p2: &Point) -> f64 {"}, {"sha": "c2309ba479ea605dc3373a3456bff698221f1f51", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -225,6 +225,7 @@ Here is another example showing how futures allow you to background\n computations. The workload will be distributed on the available cores.\n \n ```{rust}\n+# use std::num::Float;\n # use std::sync::Future;\n fn partial_sum(start: uint) -> f64 {\n     let mut local_sum = 0f64;\n@@ -262,6 +263,7 @@ several computations on a single large vector of floats. Each task needs the\n full vector to perform its duty.\n \n ```{rust}\n+use std::num::Float;\n use std::rand;\n use std::sync::Arc;\n "}, {"sha": "33d4406b733c1e8ae3629f5d217d78a64fcf2b44", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -38,7 +38,7 @@ use std::cmp;\n use std::intrinsics::{TyDesc, get_tydesc};\n use std::intrinsics;\n use std::mem;\n-use std::num::UnsignedInt;\n+use std::num::{Int, UnsignedInt};\n use std::ptr;\n use std::rc::Rc;\n use std::rt::heap::{allocate, deallocate};"}, {"sha": "bfb5a010ed80dbc36432cec575f1454cda020a6f", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -22,6 +22,7 @@\n //!\n //! ```\n //! use std::collections::{BitvSet, Bitv};\n+//! use std::num::Float;\n //! use std::iter;\n //!\n //! let max_prime = 10000;\n@@ -69,6 +70,7 @@ use core::default::Default;\n use core::fmt;\n use core::iter::{Chain, Enumerate, Repeat, Skip, Take};\n use core::iter;\n+use core::num::Int;\n use core::slice;\n use core::u32;\n use std::hash;"}, {"sha": "ac8e45f9f9417aeca85d67f7e1c6873e11fe4e58", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -15,6 +15,7 @@\n \n use core::prelude::*;\n use core::fmt;\n+use core::num::Int;\n \n // FIXME(contentions): implement union family of methods? (general design may be wrong here)\n "}, {"sha": "6082a0ca0137cc0f0997ab38419b33d591dc9315", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -69,6 +69,7 @@ use alloc::boxed::Box;\n use alloc::rc::Rc;\n use core::intrinsics::TypeId;\n use core::mem;\n+use core::num::Int;\n \n use vec::Vec;\n "}, {"sha": "4fad6081a9348d1fafaa525b1d37a5c59a2023ae", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -21,7 +21,7 @@ use core::default::Default;\n use core::fmt;\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n-use core::num::UnsignedInt;\n+use core::num::{Int, UnsignedInt};\n use core::ops;\n use core::ptr;\n use core::raw::Slice as RawSlice;"}, {"sha": "5913b8d75a74ef19ada9bd088617d8bffc5cf6cd", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -234,6 +234,8 @@ impl Float for f32 {\n     /// The fractional part of the number, satisfying:\n     ///\n     /// ```rust\n+    /// use core::num::Float;\n+    ///\n     /// let x = 1.65f32;\n     /// assert!(x == x.trunc() + x.fract())\n     /// ```"}, {"sha": "8f68578d768b97f887ff8bc1aaf76127d4dd51c2", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -240,6 +240,8 @@ impl Float for f64 {\n     /// The fractional part of the number, satisfying:\n     ///\n     /// ```rust\n+    /// use core::num::Float;\n+    ///\n     /// let x = 1.65f64;\n     /// assert!(x == x.trunc() + x.fract())\n     /// ```"}, {"sha": "dd2ee6e01c622941d6050506687eb74ae049639c", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -204,6 +204,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0b01001100u8;\n     ///\n     /// assert_eq!(n.count_ones(), 3);\n@@ -215,6 +217,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0b01001100u8;\n     ///\n     /// assert_eq!(n.count_zeros(), 5);\n@@ -230,6 +234,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0b0101000u16;\n     ///\n     /// assert_eq!(n.leading_zeros(), 10);\n@@ -242,6 +248,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0b0101000u16;\n     ///\n     /// assert_eq!(n.trailing_zeros(), 3);\n@@ -254,6 +262,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0x0123456789ABCDEFu64;\n     /// let m = 0x3456789ABCDEF012u64;\n     ///\n@@ -267,6 +277,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0x0123456789ABCDEFu64;\n     /// let m = 0xDEF0123456789ABCu64;\n     ///\n@@ -279,6 +291,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0x0123456789ABCDEFu64;\n     /// let m = 0xEFCDAB8967452301u64;\n     ///\n@@ -293,6 +307,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0x0123456789ABCDEFu64;\n     ///\n     /// if cfg!(target_endian = \"big\") {\n@@ -313,6 +329,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0x0123456789ABCDEFu64;\n     ///\n     /// if cfg!(target_endian = \"little\") {\n@@ -333,6 +351,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0x0123456789ABCDEFu64;\n     ///\n     /// if cfg!(target_endian = \"big\") {\n@@ -353,6 +373,8 @@ pub trait Int\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::num::Int;\n+    ///\n     /// let n = 0x0123456789ABCDEFu64;\n     ///\n     /// if cfg!(target_endian = \"little\") {"}, {"sha": "7e35f20f078395a7050b76093a53ce7fec576c48", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -51,9 +51,7 @@ pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n pub use iter::{FromIterator, Extend};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n-pub use num::{Num, NumCast};\n-pub use num::{Signed, Unsigned, Float};\n-pub use num::{Primitive, Int, ToPrimitive, FromPrimitive};\n+pub use num::{Signed, ToPrimitive, FromPrimitive};\n pub use option::{Option, Some, None};\n pub use ptr::RawPtr;\n pub use result::{Result, Ok, Err};"}, {"sha": "3bb8d735d9ca25f36536e38f98ff73b0d846511c", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -12,7 +12,6 @@ use core::iter::*;\n use core::iter::order::*;\n use core::uint;\n use core::cmp;\n-use core::num;\n use core::ops::Slice;\n \n use test::Bencher;\n@@ -689,50 +688,6 @@ fn test_double_ended_range() {\n \n #[test]\n fn test_range() {\n-    /// A mock type to check Range when ToPrimitive returns None\n-    struct Foo;\n-\n-    impl ToPrimitive for Foo {\n-        fn to_i64(&self) -> Option<i64> { None }\n-        fn to_u64(&self) -> Option<u64> { None }\n-    }\n-\n-    impl Add<Foo, Foo> for Foo {\n-        fn add(&self, _: &Foo) -> Foo {\n-            Foo\n-        }\n-    }\n-\n-    impl PartialEq for Foo {\n-        fn eq(&self, _: &Foo) -> bool {\n-            true\n-        }\n-    }\n-\n-    impl PartialOrd for Foo {\n-        fn partial_cmp(&self, _: &Foo) -> Option<Ordering> {\n-            None\n-        }\n-    }\n-\n-    impl Clone for Foo {\n-        fn clone(&self) -> Foo {\n-            Foo\n-        }\n-    }\n-\n-    impl Mul<Foo, Foo> for Foo {\n-        fn mul(&self, _: &Foo) -> Foo {\n-            Foo\n-        }\n-    }\n-\n-    impl num::One for Foo {\n-        fn one() -> Foo {\n-            Foo\n-        }\n-    }\n-\n     assert!(range(0i, 5).collect::<Vec<int>>() == vec![0i, 1, 2, 3, 4]);\n     assert!(range(-10i, -1).collect::<Vec<int>>() ==\n                vec![-10, -9, -8, -7, -6, -5, -4, -3, -2]);\n@@ -746,7 +701,6 @@ fn test_range() {\n     // this test is only meaningful when sizeof uint < sizeof u64\n     assert_eq!(range(uint::MAX - 1, uint::MAX).size_hint(), (1, Some(1)));\n     assert_eq!(range(-10i, -1).size_hint(), (9, Some(9)));\n-    assert_eq!(range(Foo, Foo).size_hint(), (0, None));\n }\n \n #[test]"}, {"sha": "a1b096bf45426551a8cfa9c25456c1f232e403bf", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -15,6 +15,7 @@ macro_rules! int_module (($T:ty, $T_i:ident) => (\n mod tests {\n     use core::$T_i::*;\n     use core::int;\n+    use core::num::Int;\n     use num;\n \n     #[test]"}, {"sha": "38502321c1d217faec7c91946c21fc0738b5e6e6", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::num::cast;\n+use core::cmp::PartialEq;\n+use core::fmt::Show;\n+use core::num::{NumCast, cast};\n+use core::ops::{Add, Sub, Mul, Div, Rem};\n \n mod int_macros;\n mod i8;\n@@ -24,7 +27,12 @@ mod u64;\n mod uint;\n \n /// Helper function for testing numeric operations\n-pub fn test_num<T: Int + ::std::fmt::Show>(ten: T, two: T) {\n+pub fn test_num<T>(ten: T, two: T) where\n+    T: PartialEq + NumCast\n+     + Add<T, T> + Sub<T, T>\n+     + Mul<T, T> + Div<T, T>\n+     + Rem<T, T> + Show\n+{\n     assert_eq!(ten.add(&two),  cast(12i).unwrap());\n     assert_eq!(ten.sub(&two),  cast(8i).unwrap());\n     assert_eq!(ten.mul(&two),  cast(20i).unwrap());"}, {"sha": "01a88119b6470a425e438852a4d2b90d0046e7da", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -14,6 +14,7 @@ macro_rules! uint_module (($T:ty, $T_i:ident) => (\n #[cfg(test)]\n mod tests {\n     use core::$T_i::*;\n+    use core::num::Int;\n     use num;\n \n     #[test]"}, {"sha": "2693f183644309c3454c1ebd503c9b7a569d56fb", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -11,6 +11,7 @@\n //! The ChaCha random number generator.\n \n use core::prelude::*;\n+use core::num::Int;\n \n use {Rng, SeedableRng, Rand};\n "}, {"sha": "73817a52fa78eb88327bc64d622bd8200ab57321", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -23,6 +23,7 @@ that do not need to record state.\n #![experimental]\n \n use core::prelude::*;\n+use core::num::Int;\n \n use {Rng, Rand};\n "}, {"sha": "03270ff3c60137fbecf01e910ee22f9ea4b8ba4e", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -13,6 +13,7 @@\n // this is surprisingly complicated to be both generic & correct\n \n use core::prelude::*;\n+use core::num::Int;\n \n use Rng;\n use distributions::{Sample, IndependentSample};\n@@ -162,6 +163,7 @@ float_impl! { f64 }\n \n #[cfg(test)]\n mod tests {\n+    use std::num::Int;\n     use std::prelude::*;\n     use distributions::{Sample, IndependentSample};\n     use super::Range;"}, {"sha": "90cd7920e688cbdbe0c412d63cc4ae5324d7f1fb", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -114,10 +114,11 @@ pub enum Error {\n pub mod reader {\n     use std::char;\n \n-    use std::mem::transmute;\n     use std::int;\n-    use std::option::{None, Option, Some};\n     use std::io::extensions::u64_from_be_bytes;\n+    use std::mem::transmute;\n+    use std::num::Int;\n+    use std::option::{None, Option, Some};\n \n     use serialize;\n "}, {"sha": "3fbf830485b28866f7319950eb46ba234128ad66", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -23,6 +23,7 @@ use flate;\n \n use std::iter;\n use std::mem;\n+use std::num::Int;\n \n pub fn run(sess: &session::Session, llmod: ModuleRef,\n            tm: TargetMachineRef, reachable: &[String]) {"}, {"sha": "34b696a416d413b107bded9c8f04b21680b9f0ad", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -21,6 +21,7 @@ use middle::ty;\n use std::fmt;\n use std::iter::AdditiveIterator;\n use std::iter::range_inclusive;\n+use std::num::Float;\n use std::slice;\n use syntax::ast::*;\n use syntax::ast_util::walk_pat;"}, {"sha": "a597325015c708cd2aa320d435ba8c6d3d2fbbd6", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -21,6 +21,7 @@ use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n \n+use std::num::Int;\n use syntax::abi;\n use syntax::ast;\n "}, {"sha": "4319cd791b84f493cdc38b016b796021427f492c", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -15,6 +15,7 @@\n #![allow(deprecated)] // to_be32\n \n use std::iter::range_step;\n+use std::num::Int;\n use std::slice::bytes::{MutableByteVector, copy_memory};\n use serialize::hex::ToHex;\n \n@@ -530,6 +531,7 @@ mod tests {\n     use self::rand::isaac::IsaacRng;\n     use self::rand::Rng;\n     use serialize::hex::FromHex;\n+    use std::num::Int;\n \n     // A normal addition - no overflow occurs\n     #[test]"}, {"sha": "626535f989ef6fec5b6c107e9210c4c5f2b9e848", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -199,7 +199,7 @@ use std::collections::{HashMap, TreeMap};\n use std::{char, f64, fmt, io, num, str};\n use std::io::MemWriter;\n use std::mem::{swap, transmute};\n-use std::num::{FPNaN, FPInfinite};\n+use std::num::{Float, FPNaN, FPInfinite, Int};\n use std::str::ScalarValue;\n use std::string;\n use std::vec::Vec;\n@@ -2455,6 +2455,7 @@ mod tests {\n                 TrailingCharacters, TrailingComma};\n     use std::{i64, u64, f32, f64, io};\n     use std::collections::TreeMap;\n+    use std::num::Float;\n     use std::string;\n \n     #[deriving(Decodable, Eq, PartialEq, Show)]"}, {"sha": "eb81935a8c903e99b0b3f0fc3f2b5393d0ed242e", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -190,6 +190,7 @@ like:\n ```rust\n use std::fmt;\n use std::f64;\n+use std::num::Float;\n \n struct Vector2D {\n     x: int,"}, {"sha": "3f46cc8af50b198fa60521e7fac01015d9cfdf72", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -20,6 +20,7 @@ use prelude::*;\n use from_str::FromStr;\n use intrinsics;\n use libc::c_int;\n+use num::{Float, FloatMath};\n use num::strconv;\n use num;\n "}, {"sha": "4d691fc967698bde8a09bc8e17c70dfd4cbd6638", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -19,6 +19,7 @@ use prelude::*;\n use from_str::FromStr;\n use intrinsics;\n use libc::c_int;\n+use num::{Float, FloatMath};\n use num::strconv;\n use num;\n "}, {"sha": "62e70e0c9deaef94506da33271f0ed226f9b97e0", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -18,7 +18,9 @@\n \n use option::Option;\n \n+#[cfg(test)] use cmp::PartialEq;\n #[cfg(test)] use fmt::Show;\n+#[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n \n pub use core::num::{Num, div_rem, Zero, zero, One, one};\n pub use core::num::{Signed, abs, signum};\n@@ -135,7 +137,12 @@ pub fn abs_sub<T: FloatMath>(x: T, y: T) -> T {\n \n /// Helper function for testing numeric operations\n #[cfg(test)]\n-pub fn test_num<T: Int + Show>(ten: T, two: T) {\n+pub fn test_num<T>(ten: T, two: T) where\n+    T: PartialEq + NumCast\n+     + Add<T, T> + Sub<T, T>\n+     + Mul<T, T> + Div<T, T>\n+     + Rem<T, T> + Show\n+{\n     assert_eq!(ten.add(&two),  cast(12i).unwrap());\n     assert_eq!(ten.sub(&two),  cast(8i).unwrap());\n     assert_eq!(ten.mul(&two),  cast(20i).unwrap());"}, {"sha": "0baae850eaa48c14268794425579e4528b811d33", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -67,9 +67,7 @@\n #[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};\n #[doc(no_inline)] pub use iter::{RandomAccessIterator, CloneableIterator};\n #[doc(no_inline)] pub use iter::{OrdIterator, MutableDoubleEndedIterator};\n-#[doc(no_inline)] pub use num::{Num, NumCast};\n-#[doc(no_inline)] pub use num::{Signed, Unsigned, Primitive, Int, Float};\n-#[doc(no_inline)] pub use num::{FloatMath, ToPrimitive, FromPrimitive};\n+#[doc(no_inline)] pub use num::{Signed, ToPrimitive, FromPrimitive};\n #[doc(no_inline)] pub use boxed::Box;\n #[doc(no_inline)] pub use option::{Option, Some, None};\n #[doc(no_inline)] pub use path::{GenericPath, Path, PosixPath, WindowsPath};"}, {"sha": "ab3216e93a09e1e5e6988b4ecb420f796a8c9bca", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -78,6 +78,7 @@ mod test {\n \n     use super::ReaderRng;\n     use io::MemReader;\n+    use num::Int;\n     use rand::Rng;\n \n     #[test]"}, {"sha": "cacb128faa560438f5447a50112be3d3a96f0dea", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -15,6 +15,7 @@ use io::{mod, IoError, IoResult};\n use prelude::*;\n use sys::{last_error, retry, fs};\n use c_str::CString;\n+use num::Int;\n use path::BytesContainer;\n use collections;\n "}, {"sha": "7bb3c6b0ec95a83a162852e8a6a5bd18b2ecdc80", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -11,6 +11,7 @@\n use alloc::arc::Arc;\n use libc::{mod, c_char, c_int};\n use mem;\n+use num::Int;\n use ptr::{mod, null, null_mut};\n use rt::mutex;\n use io::net::ip::{SocketAddr, IpAddr, Ipv4Addr, Ipv6Addr};"}, {"sha": "969570d385c33948ee8d90a8eeaccc7d20abf4aa", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -18,6 +18,7 @@\n extern crate libc;\n \n use num;\n+use num::Int;\n use prelude::*;\n use io::{mod, IoResult, IoError};\n use sys_common::mkerr_libc;"}, {"sha": "bf5f7ff9ad32cdaaf52860f2c72728b2ef315dc7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -20,6 +20,7 @@ use ptr::P;\n \n use std::fmt;\n use std::fmt::Show;\n+use std::num::Int;\n use std::rc::Rc;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n "}, {"sha": "51738ece80f53a220ef1355b173bdaa551e639a2", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -20,6 +20,7 @@ use ptr::P;\n use std::cell::{Cell, RefCell};\n use std::io::File;\n use std::rc::Rc;\n+use std::num::Int;\n use std::str;\n use std::iter;\n "}, {"sha": "aab7c1b2178462b635f454a41267b11a1a53efa1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -87,6 +87,7 @@ use std::collections::HashSet;\n use std::io::fs::PathExtensions;\n use std::mem::replace;\n use std::mem;\n+use std::num::Float;\n use std::rc::Rc;\n use std::iter;\n "}, {"sha": "a25aff3eaffb81e0370413ffdc3a62c938979ced", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -60,6 +60,7 @@ use std::io::fs::PathExtensions;\n use std::io::stdio::StdWriter;\n use std::io::{File, ChanReader, ChanWriter};\n use std::io;\n+use std::num::{Int, FloatMath};\n use std::os;\n use std::string::String;\n use std::task::TaskBuilder;"}, {"sha": "5cec5076e0684495a46bc29b1f8a90734e8a4517", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -16,6 +16,7 @@ use std::fmt::Show;\n use std::hash::Hash;\n use std::io;\n use std::mem;\n+use std::num::{Float, FloatMath};\n \n fn local_cmp<T:Float>(x: T, y: T) -> Ordering {\n     // arbitrarily decide that NaNs are larger than everything.\n@@ -1042,11 +1043,11 @@ mod tests {\n     }\n     #[test]\n     fn test_sum_f64s() {\n-        assert_eq!([0.5f64, 3.2321f64, 1.5678f64].sum(0.0), 5.2999);\n+        assert_eq!([0.5f64, 3.2321f64, 1.5678f64].sum(), 5.2999);\n     }\n     #[test]\n     fn test_sum_f64_between_ints_that_sum_to_0() {\n-        assert_eq!([1e30f64, 1.2f64, -1e30f64].sum(0.0), 1.2);\n+        assert_eq!([1e30f64, 1.2f64, -1e30f64].sum(), 1.2);\n     }\n }\n \n@@ -1058,7 +1059,7 @@ mod bench {\n     #[bench]\n     pub fn sum_three_items(b: &mut Bencher) {\n         b.iter(|| {\n-            [1e20f64, 1.5f64, -1e20f64].sum(0.0);\n+            [1e20f64, 1.5f64, -1e20f64].sum();\n         })\n     }\n     #[bench]\n@@ -1067,7 +1068,7 @@ mod bench {\n         let v = Vec::from_fn(500, |i| nums[i%5]);\n \n         b.iter(|| {\n-            v.as_slice().sum(0.0);\n+            v.as_slice().sum();\n         })\n     }\n }"}, {"sha": "4ad77a695dd5c0790af42c88831cae5467cecb50", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -13,6 +13,7 @@\n // ignore-lexer-test FIXME #15679\n \n use std::f32::consts::PI;\n+use std::num::{Float, FloatMath};\n use std::rand::{Rng, StdRng};\n \n struct Vec2 {"}, {"sha": "f9fafa977acab0e7d41a40c30d169fcf45e90ed1", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -43,6 +43,7 @@\n use std::io;\n use std::io::{BufferedWriter, File};\n use std::cmp::min;\n+use std::num::Float;\n use std::os;\n \n const LINE_LENGTH: uint = 60;"}, {"sha": "e40c477ec66effb5f91dc4cecb977cffe9a6cd64", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -19,6 +19,7 @@ extern crate collections;\n \n use std::collections::HashMap;\n use std::mem::replace;\n+use std::num::Float;\n use std::option;\n use std::os;\n use std::string::String;"}, {"sha": "3bcc0c25df8acd4a47c0f4b9273d810bfae95f7a", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -38,6 +38,8 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n+use std::num::Float;\n+\n const PI: f64 = 3.141592653589793;\n const SOLAR_MASS: f64 = 4.0 * PI * PI;\n const YEAR: f64 = 365.24;"}, {"sha": "75f7a21ce0d77b41597c08b7e43de4276f2df3d5", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -45,6 +45,7 @@\n \n use std::iter::AdditiveIterator;\n use std::mem;\n+use std::num::Float;\n use std::os;\n use std::raw::Repr;\n use std::simd::f64x2;"}, {"sha": "6664eeecd5d85d5b7bc3d3cf06d2fa2e2aa89a50", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -15,6 +15,7 @@\n use std::io;\n use std::io::stdio::StdReader;\n use std::io::BufferedReader;\n+use std::num::Int;\n use std::os;\n \n // Computes a single solution to a given 9x9 sudoku"}, {"sha": "6e3d19b05d4b1d9272fb0c03ad338132849d8f91", "filename": "src/test/run-pass/generic-extern-mangle.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::num::Int;\n+\n extern \"C\" fn foo<T: Int>(a: T, b: T) -> T { a + b }\n \n fn main() {"}, {"sha": "912a62b5b0f6ae46b51c0d1b72005b87dfd5a666", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -11,6 +11,7 @@\n extern crate collections;\n \n use std::collections::Bitv;\n+use std::num::Float;\n \n fn main() {\n     // Generate sieve of Eratosthenes for n up to 1e6"}, {"sha": "1e6e7227a067cc5fc915a973dd9748f69cd33723", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -12,6 +12,7 @@\n // A more complex example of numeric extensions\n \n use std::cmp::{PartialEq, PartialOrd};\n+use std::num::NumCast;\n \n pub trait TypeExt {}\n "}, {"sha": "bd93223093ad24c49619739825928e840663b237", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e965ba85ca689ad77f63b7f0af9d7e337dcb4825/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=e965ba85ca689ad77f63b7f0af9d7e337dcb4825", "patch": "@@ -11,11 +11,11 @@\n use std::cmp::{PartialEq, PartialOrd};\n use std::num::NumCast;\n \n-pub trait NumExt: PartialEq + PartialOrd + Num + NumCast {}\n+pub trait NumExt: PartialEq + PartialOrd + NumCast {}\n \n impl NumExt for f32 {}\n \n-fn num_eq_one<T:NumExt>(n: T) {\n+fn num_eq_one<T: NumExt>(n: T) {\n     println!(\"{}\", n == NumCast::from(1i).unwrap())\n }\n "}]}