{"sha": "5795d773dbcce67577851da02e4d659f0daf1a12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OTVkNzczZGJjY2U2NzU3Nzg1MWRhMDJlNGQ2NTlmMGRhZjFhMTI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-04T13:53:23Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-04T16:18:30Z"}, "message": "Remove ToChalk implementation for ApplicationTy", "tree": {"sha": "29e8d82b1604e64f2eab1288fc4f07f81a207e9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e8d82b1604e64f2eab1288fc4f07f81a207e9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5795d773dbcce67577851da02e4d659f0daf1a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5795d773dbcce67577851da02e4d659f0daf1a12", "html_url": "https://github.com/rust-lang/rust/commit/5795d773dbcce67577851da02e4d659f0daf1a12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5795d773dbcce67577851da02e4d659f0daf1a12/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "621864319f8e3149c08d4d0f99b975407ba00ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/621864319f8e3149c08d4d0f99b975407ba00ffd", "html_url": "https://github.com/rust-lang/rust/commit/621864319f8e3149c08d4d0f99b975407ba00ffd"}], "stats": {"total": 45, "additions": 16, "deletions": 29}, "files": [{"sha": "0c6e5a4f50882a40864f2f4160b9bccb56f50b11", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5795d773dbcce67577851da02e4d659f0daf1a12/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5795d773dbcce67577851da02e4d659f0daf1a12/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=5795d773dbcce67577851da02e4d659f0daf1a12", "patch": "@@ -32,7 +32,12 @@ impl ToChalk for Ty {\n     type Chalk = chalk_ir::Ty;\n     fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Ty {\n         match self {\n-            Ty::Apply(apply_ty) => chalk_ir::Ty::Apply(apply_ty.to_chalk(db)),\n+            Ty::Apply(apply_ty) => {\n+                let struct_id = apply_ty.ctor.to_chalk(db);\n+                let name = TypeName::TypeKindId(struct_id.into());\n+                let parameters = apply_ty.parameters.to_chalk(db);\n+                chalk_ir::ApplicationTy { name, parameters }.cast()\n+            }\n             Ty::Param { idx, .. } => {\n                 PlaceholderIndex { ui: UniverseIndex::ROOT, idx: idx as usize }.to_ty()\n             }\n@@ -47,8 +52,13 @@ impl ToChalk for Ty {\n         match chalk {\n             chalk_ir::Ty::Apply(apply_ty) => {\n                 match apply_ty.name {\n+                    TypeName::TypeKindId(TypeKindId::StructId(struct_id)) => {\n+                        let ctor = from_chalk(db, struct_id);\n+                        let parameters = from_chalk(db, apply_ty.parameters);\n+                        Ty::Apply(ApplicationTy { ctor, parameters })\n+                    }\n                     // FIXME handle TypeKindId::Trait/Type here\n-                    TypeName::TypeKindId(_) => Ty::Apply(from_chalk(db, apply_ty)),\n+                    TypeName::TypeKindId(_) => unimplemented!(),\n                     TypeName::AssociatedType(_) => unimplemented!(),\n                     TypeName::Placeholder(idx) => {\n                         assert_eq!(idx.ui, UniverseIndex::ROOT);\n@@ -65,29 +75,6 @@ impl ToChalk for Ty {\n     }\n }\n \n-// TODO merge this into the ToChalk implementation for Ty\n-impl ToChalk for ApplicationTy {\n-    type Chalk = chalk_ir::ApplicationTy;\n-\n-    fn to_chalk(self: ApplicationTy, db: &impl HirDatabase) -> chalk_ir::ApplicationTy {\n-        let struct_id = self.ctor.to_chalk(db);\n-        let name = TypeName::TypeKindId(struct_id.into());\n-        let parameters = self.parameters.to_chalk(db);\n-        chalk_ir::ApplicationTy { name, parameters }\n-    }\n-\n-    fn from_chalk(db: &impl HirDatabase, apply_ty: chalk_ir::ApplicationTy) -> ApplicationTy {\n-        let ctor = match apply_ty.name {\n-            TypeName::TypeKindId(TypeKindId::StructId(struct_id)) => from_chalk(db, struct_id),\n-            TypeName::TypeKindId(_) => unimplemented!(),\n-            TypeName::Placeholder(_) => unimplemented!(),\n-            TypeName::AssociatedType(_) => unimplemented!(),\n-        };\n-        let parameters = from_chalk(db, apply_ty.parameters);\n-        ApplicationTy { ctor, parameters }\n-    }\n-}\n-\n impl ToChalk for Substs {\n     type Chalk = Vec<chalk_ir::Parameter>;\n \n@@ -221,12 +208,12 @@ where\n             fundamental: false,\n         };\n         let where_clauses = Vec::new(); // FIXME add where clauses\n-        let ty = ApplicationTy {\n-            ctor: type_ctor,\n-            parameters: (0..num_params).map(|i| Ty::Bound(i as u32)).collect::<Vec<_>>().into(),\n+        let self_ty = chalk_ir::ApplicationTy {\n+            name: TypeName::TypeKindId(type_ctor.to_chalk(self.db).into()),\n+            parameters: (0..num_params).map(|i| chalk_ir::Ty::BoundVar(i).cast()).collect(),\n         };\n         let struct_datum_bound = chalk_rust_ir::StructDatumBound {\n-            self_ty: ty.to_chalk(self.db),\n+            self_ty,\n             fields: Vec::new(), // FIXME add fields (only relevant for auto traits)\n             where_clauses,\n             flags,"}]}