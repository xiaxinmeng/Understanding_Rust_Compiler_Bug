{"sha": "7a19fbad67b33bdb8bb0764cbfa7655657c6b197", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTlmYmFkNjdiMzNiZGI4YmIwNzY0Y2JmYTc2NTU2NTdjNmIxOTc=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-07-21T17:12:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-21T17:12:27Z"}, "message": "Rollup merge of #87024 - weihanglo:issue-85494, r=Manishearth\n\nrustdoc: show count of item contents when hidden\n\nResolves #85494", "tree": {"sha": "03412de423a7f3f2949cd032b2429a745f6e0b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03412de423a7f3f2949cd032b2429a745f6e0b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a19fbad67b33bdb8bb0764cbfa7655657c6b197", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+FV7CRBK7hj4Ov3rIwAAEMcIACX2pT7i6gC31ALCbk69KqRu\n1MVyfxVJawui3O1dgYSQUf/sM+Rd6dg2W4AAVMQsQNUxM4+wpJhKKV+dhMO9WMr3\nxyurAf9LpWzDpDXb0GR1fg8duy8hETOWG4r/dy9R9Abkk8u5cczhAy2yUyYoIjvG\nPTQVmX4LzguiJc8VrcEXvo6R1kzDXwYCxQzop8ma4h5i/hwvT7hjIqhYavvRM6dG\nO9jP+9Mxm3aBYMbjZweKeigREA50shRvXIRO+HBGEY50/XVfbb3ogvLO5KyYGPf1\nHRp/uSUbN7Rs+GFgG72x2IzscYRGK9RU8zimnSE8eEwBupGtgmedoGHLz/8MXAs=\n=Twyy\n-----END PGP SIGNATURE-----\n", "payload": "tree 03412de423a7f3f2949cd032b2429a745f6e0b33\nparent a3e1259c4db320af14a24041dc04db5a78073508\nparent 2b518acc6f9da564d3024e46746ac85b47abdaa2\nauthor Eric Huss <eric@huss.org> 1626887547 -0700\ncommitter GitHub <noreply@github.com> 1626887547 -0700\n\nRollup merge of #87024 - weihanglo:issue-85494, r=Manishearth\n\nrustdoc: show count of item contents when hidden\n\nResolves #85494\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a19fbad67b33bdb8bb0764cbfa7655657c6b197", "html_url": "https://github.com/rust-lang/rust/commit/7a19fbad67b33bdb8bb0764cbfa7655657c6b197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a19fbad67b33bdb8bb0764cbfa7655657c6b197/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3e1259c4db320af14a24041dc04db5a78073508", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e1259c4db320af14a24041dc04db5a78073508", "html_url": "https://github.com/rust-lang/rust/commit/a3e1259c4db320af14a24041dc04db5a78073508"}, {"sha": "2b518acc6f9da564d3024e46746ac85b47abdaa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b518acc6f9da564d3024e46746ac85b47abdaa2", "html_url": "https://github.com/rust-lang/rust/commit/2b518acc6f9da564d3024e46746ac85b47abdaa2"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "552958d5e402b8b61c78de2a8cd8ca9035a9a9c1", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7a19fbad67b33bdb8bb0764cbfa7655657c6b197/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a19fbad67b33bdb8bb0764cbfa7655657c6b197/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7a19fbad67b33bdb8bb0764cbfa7655657c6b197", "patch": "@@ -1,6 +1,7 @@\n use clean::AttributesExt;\n \n use std::cmp::Ordering;\n+use std::fmt;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n@@ -155,7 +156,7 @@ fn should_hide_fields(n_fields: usize) -> bool {\n     n_fields > 12\n }\n \n-fn toggle_open(w: &mut Buffer, text: &str) {\n+fn toggle_open(w: &mut Buffer, text: impl fmt::Display) {\n     write!(\n         w,\n         \"<details class=\\\"rustdoc-toggle type-contents-toggle\\\">\\\n@@ -481,6 +482,9 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     let consts = t.items.iter().filter(|m| m.is_associated_const()).collect::<Vec<_>>();\n     let required = t.items.iter().filter(|m| m.is_ty_method()).collect::<Vec<_>>();\n     let provided = t.items.iter().filter(|m| m.is_method()).collect::<Vec<_>>();\n+    let count_types = types.len();\n+    let count_consts = consts.len();\n+    let count_methods = required.len() + provided.len();\n \n     // Output the trait definition\n     wrap_into_docblock(w, |w| {\n@@ -511,9 +515,12 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n             let mut toggle = false;\n \n             // If there are too many associated types, hide _everything_\n-            if should_hide_fields(types.len()) {\n+            if should_hide_fields(count_types) {\n                 toggle = true;\n-                toggle_open(w, \"associated items\");\n+                toggle_open(\n+                    w,\n+                    format_args!(\"{} associated items\", count_types + count_consts + count_methods),\n+                );\n             }\n             for t in &types {\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n@@ -523,9 +530,18 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n             // We also do this if the types + consts is large because otherwise we could\n             // render a bunch of types and _then_ a bunch of consts just because both were\n             // _just_ under the limit\n-            if !toggle && should_hide_fields(types.len() + consts.len()) {\n+            if !toggle && should_hide_fields(count_types + count_consts) {\n                 toggle = true;\n-                toggle_open(w, \"associated constants and methods\");\n+                toggle_open(\n+                    w,\n+                    format_args!(\n+                        \"{} associated constant{} and {} method{}\",\n+                        count_consts,\n+                        pluralize(count_consts),\n+                        count_methods,\n+                        pluralize(count_methods),\n+                    ),\n+                );\n             }\n             if !types.is_empty() && !consts.is_empty() {\n                 w.write_str(\"\\n\");\n@@ -534,9 +550,9 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n                 w.write_str(\";\\n\");\n             }\n-            if !toggle && should_hide_fields(required.len() + provided.len()) {\n+            if !toggle && should_hide_fields(count_methods) {\n                 toggle = true;\n-                toggle_open(w, \"methods\");\n+                toggle_open(w, format_args!(\"{} methods\", count_methods));\n             }\n             if !consts.is_empty() && !required.is_empty() {\n                 w.write_str(\"\\n\");\n@@ -933,9 +949,10 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             w.write_str(\" {}\");\n         } else {\n             w.write_str(\" {\\n\");\n-            let toggle = should_hide_fields(e.variants.len());\n+            let count_variants = e.variants.len();\n+            let toggle = should_hide_fields(count_variants);\n             if toggle {\n-                toggle_open(w, \"variants\");\n+                toggle_open(w, format_args!(\"{} variants\", count_variants));\n             }\n             for v in &e.variants {\n                 w.write_str(\"    \");\n@@ -1012,7 +1029,8 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n \n             use crate::clean::Variant;\n             if let clean::VariantItem(Variant::Struct(ref s)) = *variant.kind {\n-                toggle_open(w, \"fields\");\n+                let count_fields = s.fields.len();\n+                toggle_open(w, format_args!(\"{} field{}\", count_fields, pluralize(count_fields)));\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,\n@@ -1385,7 +1403,7 @@ fn render_union(\n         fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n     let toggle = should_hide_fields(count_fields);\n     if toggle {\n-        toggle_open(w, \"fields\");\n+        toggle_open(w, format_args!(\"{} fields\", count_fields));\n     }\n \n     for field in fields {\n@@ -1441,7 +1459,7 @@ fn render_struct(\n             let has_visible_fields = count_fields > 0;\n             let toggle = should_hide_fields(count_fields);\n             if toggle {\n-                toggle_open(w, \"fields\");\n+                toggle_open(w, format_args!(\"{} fields\", count_fields));\n             }\n             for field in fields {\n                 if let clean::StructFieldItem(ref ty) = *field.kind {\n@@ -1618,3 +1636,7 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n \n     writeln!(w, \"</div>\");\n }\n+\n+fn pluralize(count: usize) -> &'static str {\n+    if count > 1 { \"s\" } else { \"\" }\n+}"}, {"sha": "167858b6065f9b3f2b587016966f26ce2c8c6400", "filename": "src/test/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7a19fbad67b33bdb8bb0764cbfa7655657c6b197/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a19fbad67b33bdb8bb0764cbfa7655657c6b197/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs?ref=7a19fbad67b33bdb8bb0764cbfa7655657c6b197", "patch": "@@ -9,7 +9,7 @@ pub struct PubStruct {\n \n // @has 'toggle_item_contents/struct.BigPubStruct.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show fields'\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 13 fields'\n pub struct BigPubStruct {\n     pub a: usize,\n     pub b: usize,\n@@ -28,7 +28,7 @@ pub struct BigPubStruct {\n \n // @has 'toggle_item_contents/union.BigUnion.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show fields'\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 13 fields'\n pub union BigUnion {\n     pub a: usize,\n     pub b: usize,\n@@ -63,7 +63,7 @@ pub struct PrivStruct {\n \n // @has 'toggle_item_contents/enum.Enum.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show fields'\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 2 fields'\n pub enum Enum {\n     A, B, C,\n     D {\n@@ -72,9 +72,19 @@ pub enum Enum {\n     }\n }\n \n+// @has 'toggle_item_contents/enum.EnumStructVariant.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 1 field'\n+pub enum EnumStructVariant {\n+    A, B, C,\n+    D {\n+        a: u8,\n+    }\n+}\n+\n // @has 'toggle_item_contents/enum.LargeEnum.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show variants'\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 13 variants'\n pub enum LargeEnum {\n     A, B, C, D, E, F(u8), G, H, I, J, K, L, M\n }\n@@ -90,7 +100,7 @@ pub trait Trait {\n \n // @has 'toggle_item_contents/trait.GinormousTrait.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show associated items'\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 16 associated items'\n pub trait GinormousTrait {\n     type A;\n     type B;\n@@ -113,7 +123,7 @@ pub trait GinormousTrait {\n \n // @has 'toggle_item_contents/trait.HugeTrait.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show associated constants and methods'\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 12 associated constants and 2 methods'\n pub trait HugeTrait {\n     type A;\n     const M: usize = 1;\n@@ -133,9 +143,30 @@ pub trait HugeTrait {\n     fn bar();\n }\n \n+// @has 'toggle_item_contents/trait.GiganticTrait.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 1 associated constant and 1 method'\n+pub trait GiganticTrait {\n+    type A;\n+    type B;\n+    type C;\n+    type D;\n+    type E;\n+    type F;\n+    type G;\n+    type H;\n+    type I;\n+    type J;\n+    type K;\n+    type L;\n+    const M: usize = 1;\n+    #[must_use]\n+    fn foo();\n+}\n+\n // @has 'toggle_item_contents/trait.BigTrait.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show methods'\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 14 methods'\n pub trait BigTrait {\n     type A;\n     #[must_use]"}]}