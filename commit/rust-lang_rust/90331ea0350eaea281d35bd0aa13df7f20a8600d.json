{"sha": "90331ea0350eaea281d35bd0aa13df7f20a8600d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMzMxZWEwMzUwZWFlYTI4MWQzNWJkMGFhMTNkZjdmMjBhODYwMGQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-11T14:22:31Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-11T14:23:20Z"}, "message": "Make known paths use `core` instead of `std`", "tree": {"sha": "9a627ef0d77f6fd1dc9d37cbec108d3112f599c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a627ef0d77f6fd1dc9d37cbec108d3112f599c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90331ea0350eaea281d35bd0aa13df7f20a8600d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90331ea0350eaea281d35bd0aa13df7f20a8600d", "html_url": "https://github.com/rust-lang/rust/commit/90331ea0350eaea281d35bd0aa13df7f20a8600d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90331ea0350eaea281d35bd0aa13df7f20a8600d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32157d48f449125febaade6bda0184334b6da4fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/32157d48f449125febaade6bda0184334b6da4fd", "html_url": "https://github.com/rust-lang/rust/commit/32157d48f449125febaade6bda0184334b6da4fd"}], "stats": {"total": 100, "additions": 52, "deletions": 48}, "files": [{"sha": "53599e74a26643d9c4352ec8709216468685d4d3", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=90331ea0350eaea281d35bd0aa13df7f20a8600d", "patch": "@@ -99,7 +99,7 @@ impl FunctionData {\n }\n \n fn desugar_future_path(orig: TypeRef) -> Path {\n-    let path = path![std::future::Future];\n+    let path = path![core::future::Future];\n     let mut generic_args: Vec<_> = std::iter::repeat(None).take(path.segments.len() - 1).collect();\n     let mut last = GenericArgs::empty();\n     last.bindings.push(AssociatedTypeBinding {"}, {"sha": "ba16442bd5177d966ba5289b4b5c2c9b49d9ec3f", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=90331ea0350eaea281d35bd0aa13df7f20a8600d", "patch": "@@ -323,16 +323,16 @@ pub use hir_expand::name as __name;\n \n #[macro_export]\n macro_rules! __known_path {\n-    (std::iter::IntoIterator) => {};\n-    (std::result::Result) => {};\n-    (std::ops::Range) => {};\n-    (std::ops::RangeFrom) => {};\n-    (std::ops::RangeFull) => {};\n-    (std::ops::RangeTo) => {};\n-    (std::ops::RangeToInclusive) => {};\n-    (std::ops::RangeInclusive) => {};\n-    (std::future::Future) => {};\n-    (std::ops::Try) => {};\n+    (core::iter::IntoIterator) => {};\n+    (core::result::Result) => {};\n+    (core::ops::Range) => {};\n+    (core::ops::RangeFrom) => {};\n+    (core::ops::RangeFull) => {};\n+    (core::ops::RangeTo) => {};\n+    (core::ops::RangeToInclusive) => {};\n+    (core::ops::RangeInclusive) => {};\n+    (core::future::Future) => {};\n+    (core::ops::Try) => {};\n     ($path:path) => {\n         compile_error!(\"Please register your known path in the path module\")\n     };"}, {"sha": "7db928dded28396bdd39b0819172299d816eb393", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=90331ea0350eaea281d35bd0aa13df7f20a8600d", "patch": "@@ -226,17 +226,19 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             None => return,\n         };\n \n-        let std_result_path = path![std::result::Result];\n+        let core_result_path = path![core::result::Result];\n \n         let resolver = self.func.resolver(db.upcast());\n-        let std_result_enum = match resolver.resolve_known_enum(db.upcast(), &std_result_path) {\n+        let core_result_enum = match resolver.resolve_known_enum(db.upcast(), &core_result_path) {\n             Some(it) => it,\n             _ => return,\n         };\n \n-        let std_result_ctor = TypeCtor::Adt(AdtId::EnumId(std_result_enum));\n+        let core_result_ctor = TypeCtor::Adt(AdtId::EnumId(core_result_enum));\n         let params = match &mismatch.expected {\n-            Ty::Apply(ApplicationTy { ctor, parameters }) if ctor == &std_result_ctor => parameters,\n+            Ty::Apply(ApplicationTy { ctor, parameters }) if ctor == &core_result_ctor => {\n+                parameters\n+            }\n             _ => return,\n         };\n "}, {"sha": "3719f76a6e21af67df1aadba1450b2259b0ddc21", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=90331ea0350eaea281d35bd0aa13df7f20a8600d", "patch": "@@ -555,13 +555,13 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_into_iter_item(&self) -> Option<TypeAliasId> {\n-        let path = path![std::iter::IntoIterator];\n+        let path = path![core::iter::IntoIterator];\n         let trait_ = self.resolver.resolve_known_trait(self.db.upcast(), &path)?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Item])\n     }\n \n     fn resolve_ops_try_ok(&self) -> Option<TypeAliasId> {\n-        let path = path![std::ops::Try];\n+        let path = path![core::ops::Try];\n         let trait_ = self.resolver.resolve_known_trait(self.db.upcast(), &path)?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Ok])\n     }\n@@ -587,37 +587,37 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_range_full(&self) -> Option<AdtId> {\n-        let path = path![std::ops::RangeFull];\n+        let path = path![core::ops::RangeFull];\n         let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range(&self) -> Option<AdtId> {\n-        let path = path![std::ops::Range];\n+        let path = path![core::ops::Range];\n         let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range_inclusive(&self) -> Option<AdtId> {\n-        let path = path![std::ops::RangeInclusive];\n+        let path = path![core::ops::RangeInclusive];\n         let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range_from(&self) -> Option<AdtId> {\n-        let path = path![std::ops::RangeFrom];\n+        let path = path![core::ops::RangeFrom];\n         let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range_to(&self) -> Option<AdtId> {\n-        let path = path![std::ops::RangeTo];\n+        let path = path![core::ops::RangeTo];\n         let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n         Some(struct_.into())\n     }\n \n     fn resolve_range_to_inclusive(&self) -> Option<AdtId> {\n-        let path = path![std::ops::RangeToInclusive];\n+        let path = path![core::ops::RangeToInclusive];\n         let struct_ = self.resolver.resolve_known_struct(self.db.upcast(), &path)?;\n         Some(struct_.into())\n     }"}, {"sha": "37659cd02c8171281a953addbe3ce2b5dc696a07", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=90331ea0350eaea281d35bd0aa13df7f20a8600d", "patch": "@@ -95,7 +95,7 @@ fn foo() {\n fn infer_ranges() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n fn test() {\n     let a = ..;\n     let b = 1..;\n@@ -108,7 +108,7 @@ fn test() {\n     t<|>;\n }\n \n-//- /std.rs crate:std\n+//- /core.rs crate:core\n #[prelude_import] use prelude::*;\n mod prelude {}\n "}, {"sha": "e81193a3c30af12e6a06cf0821f8f9e49b239d46", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=90331ea0350eaea281d35bd0aa13df7f20a8600d", "patch": "@@ -10,7 +10,7 @@ use super::{infer, infer_with_mismatches, type_at, type_at_pos};\n fn infer_await() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n \n struct IntFuture;\n \n@@ -24,7 +24,7 @@ fn test() {\n     v<|>;\n }\n \n-//- /std.rs crate:std\n+//- /core.rs crate:core\n #[prelude_import] use future::*;\n mod future {\n     #[lang = \"future_trait\"]\n@@ -42,7 +42,7 @@ mod future {\n fn infer_async() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n \n async fn foo() -> u64 {\n     128\n@@ -54,7 +54,7 @@ fn test() {\n     v<|>;\n }\n \n-//- /std.rs crate:std\n+//- /core.rs crate:core\n #[prelude_import] use future::*;\n mod future {\n     #[lang = \"future_trait\"]\n@@ -72,7 +72,7 @@ mod future {\n fn infer_desugar_async() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n \n async fn foo() -> u64 {\n     128\n@@ -83,7 +83,7 @@ fn test() {\n     r<|>;\n }\n \n-//- /std.rs crate:std\n+//- /core.rs crate:core\n #[prelude_import] use future::*;\n mod future {\n     trait Future {\n@@ -100,15 +100,15 @@ mod future {\n fn infer_try() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n \n fn test() {\n     let r: Result<i32, u64> = Result::Ok(1);\n     let v = r?;\n     v<|>;\n }\n \n-//- /std.rs crate:std\n+//- /core.rs crate:core\n \n #[prelude_import] use ops::*;\n mod ops {\n@@ -140,9 +140,9 @@ mod result {\n fn infer_for_loop() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core,alloc\n \n-use std::collections::Vec;\n+use alloc::collections::Vec;\n \n fn test() {\n     let v = Vec::new();\n@@ -152,7 +152,7 @@ fn test() {\n     }\n }\n \n-//- /std.rs crate:std\n+//- /core.rs crate:core\n \n #[prelude_import] use iter::*;\n mod iter {\n@@ -161,14 +161,16 @@ mod iter {\n     }\n }\n \n+//- /alloc.rs crate:alloc deps:core\n+\n mod collections {\n     struct Vec<T> {}\n     impl<T> Vec<T> {\n         fn new() -> Self { Vec {} }\n         fn push(&mut self, t: T) { }\n     }\n \n-    impl<T> crate::iter::IntoIterator for Vec<T> {\n+    impl<T> IntoIterator for Vec<T> {\n         type Item=T;\n     }\n }\n@@ -2846,12 +2848,12 @@ fn test() {\n fn integer_range_iterate() {\n     let t = type_at(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n fn test() {\n     for x in 0..100 { x<|>; }\n }\n \n-//- /std.rs crate:std\n+//- /core.rs crate:core\n pub mod ops {\n     pub struct Range<Idx> {\n         pub start: Idx,"}, {"sha": "0f1cb0bcc4456d0a379b71fd7e6b52bb01637107", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90331ea0350eaea281d35bd0aa13df7f20a8600d/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=90331ea0350eaea281d35bd0aa13df7f20a8600d", "patch": "@@ -321,7 +321,7 @@ mod tests {\n     fn test_wrap_return_type() {\n         let before = r#\"\n             //- /main.rs\n-            use std::{string::String, result::Result::{self, Ok, Err}};\n+            use core::{string::String, result::Result::{self, Ok, Err}};\n \n             fn div(x: i32, y: i32) -> Result<i32, String> {\n                 if y == 0 {\n@@ -330,7 +330,7 @@ mod tests {\n                 x / y<|>\n             }\n \n-            //- /std/lib.rs\n+            //- /core/lib.rs\n             pub mod string {\n                 pub struct String { }\n             }\n@@ -339,7 +339,7 @@ mod tests {\n             }\n         \"#;\n         let after = r#\"\n-            use std::{string::String, result::Result::{self, Ok, Err}};\n+            use core::{string::String, result::Result::{self, Ok, Err}};\n \n             fn div(x: i32, y: i32) -> Result<i32, String> {\n                 if y == 0 {\n@@ -355,7 +355,7 @@ mod tests {\n     fn test_wrap_return_type_handles_generic_functions() {\n         let before = r#\"\n             //- /main.rs\n-            use std::result::Result::{self, Ok, Err};\n+            use core::result::Result::{self, Ok, Err};\n \n             fn div<T>(x: T) -> Result<T, i32> {\n                 if x == 0 {\n@@ -364,13 +364,13 @@ mod tests {\n                 <|>x\n             }\n \n-            //- /std/lib.rs\n+            //- /core/lib.rs\n             pub mod result {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n         let after = r#\"\n-            use std::result::Result::{self, Ok, Err};\n+            use core::result::Result::{self, Ok, Err};\n \n             fn div<T>(x: T) -> Result<T, i32> {\n                 if x == 0 {\n@@ -386,7 +386,7 @@ mod tests {\n     fn test_wrap_return_type_handles_type_aliases() {\n         let before = r#\"\n             //- /main.rs\n-            use std::{string::String, result::Result::{self, Ok, Err}};\n+            use core::{string::String, result::Result::{self, Ok, Err}};\n \n             type MyResult<T> = Result<T, String>;\n \n@@ -397,7 +397,7 @@ mod tests {\n                 x <|>/ y\n             }\n \n-            //- /std/lib.rs\n+            //- /core/lib.rs\n             pub mod string {\n                 pub struct String { }\n             }\n@@ -406,7 +406,7 @@ mod tests {\n             }\n         \"#;\n         let after = r#\"\n-            use std::{string::String, result::Result::{self, Ok, Err}};\n+            use core::{string::String, result::Result::{self, Ok, Err}};\n \n             type MyResult<T> = Result<T, String>;\n             fn div(x: i32, y: i32) -> MyResult<i32> {"}]}