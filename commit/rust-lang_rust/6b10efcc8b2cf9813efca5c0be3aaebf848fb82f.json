{"sha": "6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTBlZmNjOGIyY2Y5ODEzZWZjYTVjMGJlM2FhZWJmODQ4ZmI4MmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-19T07:26:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-19T07:26:24Z"}, "message": "Auto merge of #27121 - apasel422:issue-21332, r=Gankro\n\ncloses #21332", "tree": {"sha": "47699ecb856d3906d2597d549f8eaf8779d4a81b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47699ecb856d3906d2597d549f8eaf8779d4a81b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "html_url": "https://github.com/rust-lang/rust/commit/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86fa65bcc5882be3e1d3826a07bd3a0db88a045a", "url": "https://api.github.com/repos/rust-lang/rust/commits/86fa65bcc5882be3e1d3826a07bd3a0db88a045a", "html_url": "https://github.com/rust-lang/rust/commit/86fa65bcc5882be3e1d3826a07bd3a0db88a045a"}, {"sha": "7d984ef6df64de8d7882912ccae16d39ded59a21", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d984ef6df64de8d7882912ccae16d39ded59a21", "html_url": "https://github.com/rust-lang/rust/commit/7d984ef6df64de8d7882912ccae16d39ded59a21"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "2cdd2ee2f03c781c280c0b6255b9bae5ccdd8104", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "patch": "@@ -301,7 +301,8 @@ fn split_msg_into_multilines(msg: &str) -> Option<String> {\n         !msg.contains(\"if and else have incompatible types\") &&\n         !msg.contains(\"if may be missing an else clause\") &&\n         !msg.contains(\"match arms have incompatible types\") &&\n-        !msg.contains(\"structure constructor specifies a structure of type\") {\n+        !msg.contains(\"structure constructor specifies a structure of type\") &&\n+        !msg.contains(\"has an incompatible type for trait\") {\n             return None\n     }\n     let first = msg.match_indices(\"expected\").filter(|s| {"}, {"sha": "4658d0f057d71c85aeeab2c9040bf4fd2c92bf40", "filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs?ref=6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "patch": "@@ -18,7 +18,9 @@ struct SignedBar;\n \n impl Foo for SignedBar {\n     const BAR: i32 = -1;\n-    //~^ ERROR E0326\n+    //~^ ERROR implemented const `BAR` has an incompatible type for trait\n+    //~| expected u32,\n+    //~| found i32 [E0326]\n }\n \n fn main() {}"}, {"sha": "42e3456b309be35585a6ed39181eaebbb63aa745", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "patch": "@@ -19,7 +19,9 @@ struct Debuger<T> {\n impl<T: fmt::Debug> ops::FnOnce<(),> for Debuger<T> {\n     type Output = ();\n     fn call_once(self, _args: ()) {\n-//~^ ERROR `call_once` has an incompatible type for trait: expected \"rust-call\" fn, found \"Rust\" fn\n+    //~^ ERROR `call_once` has an incompatible type for trait\n+    //~| expected \"rust-call\" fn,\n+    //~| found \"Rust\" fn\n         println!(\"{:?}\", self.x);\n     }\n }"}, {"sha": "b7845f1f1168af8a9353f819903b5fe03ab59e3c", "filename": "src/test/compile-fail/issue-20225.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs?ref=6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "patch": "@@ -14,19 +14,22 @@ struct Foo;\n \n impl<'a, T> Fn<(&'a T,)> for Foo {\n   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n-  //~^ ERROR: has an incompatible type for trait: expected &-ptr\n+  //~^ ERROR: has an incompatible type for trait\n+  //~| expected &-ptr\n }\n \n impl<'a, T> FnMut<(&'a T,)> for Foo {\n   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n-  //~^ ERROR: has an incompatible type for trait: expected &-ptr\n+  //~^ ERROR: has an incompatible type for trait\n+  //~| expected &-ptr\n }\n \n impl<'a, T> FnOnce<(&'a T,)> for Foo {\n   type Output = ();\n \n   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n-  //~^ ERROR: has an incompatible type for trait: expected &-ptr\n+  //~^ ERROR: has an incompatible type for trait\n+  //~| expected &-ptr\n }\n \n fn main() {}"}, {"sha": "f25a9fd2762522277f45188e1c04c420b4249223", "filename": "src/test/compile-fail/issue-21332.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fissue-21332.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fissue-21332.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21332.rs?ref=6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+impl Iterator for S {\n+    type Item = i32;\n+    fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n+    //~^ ERROR method `next` has an incompatible type for trait\n+    //~| expected enum `core::option::Option`\n+    //~|    found enum `core::result::Result` [E0053]\n+}\n+\n+fn main() {}"}, {"sha": "27d46be40fbeb69bbe96b617eff5dce36c28d484", "filename": "src/test/compile-fail/issue-24356.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs?ref=6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "patch": "@@ -30,7 +30,9 @@ fn main() {\n         impl Deref for Thing {\n             //~^ ERROR not all trait items implemented, missing: `Target` [E0046]\n             fn deref(&self) -> i8 { self.0 }\n-            //~^ ERROR method `deref` has an incompatible type for trait: expected &-ptr, found i8 [E0053]\n+            //~^ ERROR method `deref` has an incompatible type for trait\n+            //~| expected &-ptr\n+            //~| found i8 [E0053]\n         }\n \n         let thing = Thing(72);"}, {"sha": "f86d9b7648bbebfd19a2f9740fffdb0ad394c106", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "patch": "@@ -16,7 +16,9 @@ trait Mumbo {\n impl Mumbo for usize {\n     // Cannot have a larger effect than the trait:\n     unsafe fn jumbo(&self, x: &usize) { *self + *x; }\n-    //~^ ERROR expected normal fn, found unsafe fn\n+    //~^ ERROR method `jumbo` has an incompatible type for trait\n+    //~| expected normal fn,\n+    //~| found unsafe fn\n }\n \n fn main() {}"}, {"sha": "51f876661f6510834a4dfd78ea2ea39a770b5440", "filename": "src/test/compile-fail/unsafe-trait-impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Funsafe-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b10efcc8b2cf9813efca5c0be3aaebf848fb82f/src%2Ftest%2Fcompile-fail%2Funsafe-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-trait-impl.rs?ref=6b10efcc8b2cf9813efca5c0be3aaebf848fb82f", "patch": "@@ -16,7 +16,9 @@ trait Foo {\n \n impl Foo for u32 {\n     fn len(&self) -> u32 { *self }\n-    //~^ ERROR incompatible type for trait: expected unsafe fn, found normal fn\n+    //~^ ERROR method `len` has an incompatible type for trait\n+    //~| expected unsafe fn,\n+    //~| found normal fn\n }\n \n fn main() { }"}]}