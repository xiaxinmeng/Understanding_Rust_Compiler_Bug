{"sha": "f673b24ba25a3ead2da990de9d308f5e15b7f710", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NzNiMjRiYTI1YTNlYWQyZGE5OTBkZTlkMzA4ZjVlMTViN2Y3MTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-04T21:39:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:19Z"}, "message": "rename `ConstraintIndex` to `OutlivesConstraintIndex`", "tree": {"sha": "697a581e0e22551be3733fda724b6b6f58d5bb44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697a581e0e22551be3733fda724b6b6f58d5bb44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f673b24ba25a3ead2da990de9d308f5e15b7f710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f673b24ba25a3ead2da990de9d308f5e15b7f710", "html_url": "https://github.com/rust-lang/rust/commit/f673b24ba25a3ead2da990de9d308f5e15b7f710", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f673b24ba25a3ead2da990de9d308f5e15b7f710/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bba9b89d05d3441d8c1acf092e7037e6e11295", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bba9b89d05d3441d8c1acf092e7037e6e11295", "html_url": "https://github.com/rust-lang/rust/commit/09bba9b89d05d3441d8c1acf092e7037e6e11295"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "78d49309d021468b692ab7bccf80f723f52049ff", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f673b24ba25a3ead2da990de9d308f5e15b7f710/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f673b24ba25a3ead2da990de9d308f5e15b7f710/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=f673b24ba25a3ead2da990de9d308f5e15b7f710", "patch": "@@ -1,5 +1,5 @@\n use crate::borrow_check::nll::type_check::Locations;\n-use crate::borrow_check::nll::constraints::ConstraintIndex;\n+use crate::borrow_check::nll::constraints::OutlivesConstraintIndex;\n use crate::borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n@@ -12,8 +12,8 @@ use syntax_pos::DUMMY_SP;\n /// -> R2` or `R2 -> R1` depending on the direction type `D`.\n crate struct ConstraintGraph<D: ConstraintGraphDirecton> {\n     _direction: D,\n-    first_constraints: IndexVec<RegionVid, Option<ConstraintIndex>>,\n-    next_constraints: IndexVec<ConstraintIndex, Option<ConstraintIndex>>,\n+    first_constraints: IndexVec<RegionVid, Option<OutlivesConstraintIndex>>,\n+    next_constraints: IndexVec<OutlivesConstraintIndex, Option<OutlivesConstraintIndex>>,\n }\n \n crate type NormalConstraintGraph = ConstraintGraph<Normal>;\n@@ -81,9 +81,9 @@ impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n         num_region_vars: usize,\n     ) -> Self {\n         let mut first_constraints = IndexVec::from_elem_n(None, num_region_vars);\n-        let mut next_constraints = IndexVec::from_elem(None, &set.constraints);\n+        let mut next_constraints = IndexVec::from_elem(None, &set.outlives);\n \n-        for (idx, constraint) in set.constraints.iter_enumerated().rev() {\n+        for (idx, constraint) in set.outlives.iter_enumerated().rev() {\n             let head = &mut first_constraints[D::start_region(constraint)];\n             let next = &mut next_constraints[idx];\n             debug_assert!(next.is_none());\n@@ -143,7 +143,7 @@ impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n crate struct Edges<'s, D: ConstraintGraphDirecton> {\n     graph: &'s ConstraintGraph<D>,\n     constraints: &'s ConstraintSet,\n-    pointer: Option<ConstraintIndex>,\n+    pointer: Option<OutlivesConstraintIndex>,\n     next_static_idx: Option<usize>,\n     static_region: RegionVid,\n }"}, {"sha": "a4c66d5ef6e0ff540a57f7fdae9bd60a5f8af5c7", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f673b24ba25a3ead2da990de9d308f5e15b7f710/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f673b24ba25a3ead2da990de9d308f5e15b7f710/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=f673b24ba25a3ead2da990de9d308f5e15b7f710", "patch": "@@ -9,9 +9,13 @@ use std::ops::Deref;\n \n crate mod graph;\n \n+/// A set of NLL region constraints. These include \"outlives\"\n+/// constraints of the form `R1: R2`. Each constraint is identified by\n+/// a unique `OutlivesConstraintIndex` and you can index into the set\n+/// (`constraint_set[i]`) to access the constraint details.\n #[derive(Clone, Default)]\n crate struct ConstraintSet {\n-    constraints: IndexVec<ConstraintIndex, OutlivesConstraint>,\n+    outlives: IndexVec<OutlivesConstraintIndex, OutlivesConstraint>,\n }\n \n impl ConstraintSet {\n@@ -24,7 +28,7 @@ impl ConstraintSet {\n             // 'a: 'a is pretty uninteresting\n             return;\n         }\n-        self.constraints.push(constraint);\n+        self.outlives.push(constraint);\n     }\n \n     /// Constructs a \"normal\" graph from the constraint set; the graph makes it\n@@ -57,10 +61,10 @@ impl ConstraintSet {\n }\n \n impl Deref for ConstraintSet {\n-    type Target = IndexVec<ConstraintIndex, OutlivesConstraint>;\n+    type Target = IndexVec<OutlivesConstraintIndex, OutlivesConstraint>;\n \n     fn deref(&self) -> &Self::Target {\n-        &self.constraints\n+        &self.outlives\n     }\n }\n \n@@ -94,8 +98,8 @@ impl fmt::Debug for OutlivesConstraint {\n }\n \n newtype_index! {\n-    pub struct ConstraintIndex {\n-        DEBUG_FORMAT = \"ConstraintIndex({})\"\n+    pub struct OutlivesConstraintIndex {\n+        DEBUG_FORMAT = \"OutlivesConstraintIndex({})\"\n     }\n }\n "}]}