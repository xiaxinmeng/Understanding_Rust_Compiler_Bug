{"sha": "54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "node_id": "C_kwDOAAsO6NoAKDU0ZjZmZWE4MTg0YTNlNDMxYTJhYWRkMjQ5ZDNiY2NhOWEwZTBhODI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T06:25:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T06:25:49Z"}, "message": "Rollup merge of #106360 - estebank:remove-borrow-suggestion, r=compiler-errors\n\nTweak E0277 `&`-removal suggestions\n\nFix #64068, fix #84837.", "tree": {"sha": "3e589022ae89826d49e92447323521dadeac7506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e589022ae89826d49e92447323521dadeac7506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjv6ftCRBK7hj4Ov3rIwAApDgIAE+6ywb4YNwL6ti16Ny7tSye\nXKQWzPLKzWOqEJK5lvC1iXMEJyttfcqNVkmVYvTp6cvwwdL+HkEwh4QQGtz99AA1\nR0Y+cJerNjkxMnQTS9rkC3OlVswqAPlNnrDT9JErB9bym8yrAUqQaP/EZuUn4xm3\n6ysJyPkPLVphUtBgBr3KGc80QgluCdzUXDj+NElnDu2RD67PW/KqA771zTNMl98D\ni9g1ZqHg7iIt5cs6vFuozSPHoevf7IsKFvjKNJsZf1VIQp34h5S0i4a8xf+8L+Xo\nW2j9CmCCCuwY8Gi/k9E/phj6BqJQd9PpZpLfflc7zcSkT9d5aTBWZgjhWcH9AxQ=\n=UMNq\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e589022ae89826d49e92447323521dadeac7506\nparent 244b90edee8962e5ed950f5279725272ab70a046\nparent 8b8cce16bfb74bcb06250ed3b9b3dc8c97e1ee4b\nauthor Michael Goulet <michael@errs.io> 1673504749 -0800\ncommitter GitHub <noreply@github.com> 1673504749 -0800\n\nRollup merge of #106360 - estebank:remove-borrow-suggestion, r=compiler-errors\n\nTweak E0277 `&`-removal suggestions\n\nFix #64068, fix #84837.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "html_url": "https://github.com/rust-lang/rust/commit/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "244b90edee8962e5ed950f5279725272ab70a046", "url": "https://api.github.com/repos/rust-lang/rust/commits/244b90edee8962e5ed950f5279725272ab70a046", "html_url": "https://github.com/rust-lang/rust/commit/244b90edee8962e5ed950f5279725272ab70a046"}, {"sha": "8b8cce16bfb74bcb06250ed3b9b3dc8c97e1ee4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8cce16bfb74bcb06250ed3b9b3dc8c97e1ee4b", "html_url": "https://github.com/rust-lang/rust/commit/8b8cce16bfb74bcb06250ed3b9b3dc8c97e1ee4b"}], "stats": {"total": 321, "additions": 249, "deletions": 72}, "files": [{"sha": "c1a5c63c6e2be4588770cd984e0c6192200edb0f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 94, "deletions": 34, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -1361,57 +1361,117 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n-        let span = obligation.cause.span;\n+        let mut span = obligation.cause.span;\n+        let mut trait_pred = trait_pred;\n+        let mut code = obligation.cause.code();\n+        while let Some((c, Some(parent_trait_pred))) = code.parent() {\n+            // We want the root obligation, in order to detect properly handle\n+            // `for _ in &mut &mut vec![] {}`.\n+            code = c;\n+            trait_pred = parent_trait_pred;\n+        }\n+        while span.desugaring_kind().is_some() {\n+            // Remove all the hir desugaring contexts while maintaining the macro contexts.\n+            span.remove_mark();\n+        }\n+        let mut expr_finder = super::FindExprBySpan::new(span);\n+        let Some(hir::Node::Expr(body)) = self.tcx.hir().find(obligation.cause.body_id) else {\n+            return false;\n+        };\n+        expr_finder.visit_expr(&body);\n+        let mut maybe_suggest = |suggested_ty, count, suggestions| {\n+            // Remapping bound vars here\n+            let trait_pred_and_suggested_ty =\n+                trait_pred.map_bound(|trait_pred| (trait_pred, suggested_ty));\n+\n+            let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n+                obligation.param_env,\n+                trait_pred_and_suggested_ty,\n+            );\n \n-        let mut suggested = false;\n-        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-            let refs_number =\n-                snippet.chars().filter(|c| !c.is_whitespace()).take_while(|c| *c == '&').count();\n-            if let Some('\\'') = snippet.chars().filter(|c| !c.is_whitespace()).nth(refs_number) {\n-                // Do not suggest removal of borrow from type arguments.\n-                return false;\n+            if self.predicate_may_hold(&new_obligation) {\n+                let msg = if count == 1 {\n+                    \"consider removing the leading `&`-reference\".to_string()\n+                } else {\n+                    format!(\"consider removing {count} leading `&`-references\")\n+                };\n+\n+                err.multipart_suggestion_verbose(\n+                    &msg,\n+                    suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n+                true\n+            } else {\n+                false\n             }\n+        };\n \n-            // Skipping binder here, remapping below\n-            let mut suggested_ty = trait_pred.self_ty().skip_binder();\n+        // Maybe suggest removal of borrows from types in type parameters, like in\n+        // `src/test/ui/not-panic/not-panic-safe.rs`.\n+        let mut count = 0;\n+        let mut suggestions = vec![];\n+        // Skipping binder here, remapping below\n+        let mut suggested_ty = trait_pred.self_ty().skip_binder();\n+        if let Some(mut hir_ty) = expr_finder.ty_result {\n+            while let hir::TyKind::Ref(_, mut_ty) = &hir_ty.kind {\n+                count += 1;\n+                let span = hir_ty.span.until(mut_ty.ty.span);\n+                suggestions.push((span, String::new()));\n \n-            for refs_remaining in 0..refs_number {\n                 let ty::Ref(_, inner_ty, _) = suggested_ty.kind() else {\n                     break;\n                 };\n                 suggested_ty = *inner_ty;\n \n-                // Remapping bound vars here\n-                let trait_pred_and_suggested_ty =\n-                    trait_pred.map_bound(|trait_pred| (trait_pred, suggested_ty));\n+                hir_ty = mut_ty.ty;\n \n-                let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n-                    obligation.param_env,\n-                    trait_pred_and_suggested_ty,\n-                );\n+                if maybe_suggest(suggested_ty, count, suggestions.clone()) {\n+                    return true;\n+                }\n+            }\n+        }\n \n-                if self.predicate_may_hold(&new_obligation) {\n-                    let sp = self\n-                        .tcx\n-                        .sess\n-                        .source_map()\n-                        .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n+        // Maybe suggest removal of borrows from expressions, like in `for i in &&&foo {}`.\n+        let Some(mut expr) = expr_finder.result else { return false; };\n+        let mut count = 0;\n+        let mut suggestions = vec![];\n+        // Skipping binder here, remapping below\n+        let mut suggested_ty = trait_pred.self_ty().skip_binder();\n+        'outer: loop {\n+            while let hir::ExprKind::AddrOf(_, _, borrowed) = expr.kind {\n+                count += 1;\n+                let span = if expr.span.eq_ctxt(borrowed.span) {\n+                    expr.span.until(borrowed.span)\n+                } else {\n+                    expr.span.with_hi(expr.span.lo() + BytePos(1))\n+                };\n+                suggestions.push((span, String::new()));\n \n-                    let remove_refs = refs_remaining + 1;\n+                let ty::Ref(_, inner_ty, _) = suggested_ty.kind() else {\n+                    break 'outer;\n+                };\n+                suggested_ty = *inner_ty;\n \n-                    let msg = if remove_refs == 1 {\n-                        \"consider removing the leading `&`-reference\".to_string()\n-                    } else {\n-                        format!(\"consider removing {} leading `&`-references\", remove_refs)\n-                    };\n+                expr = borrowed;\n \n-                    err.span_suggestion_short(sp, &msg, \"\", Applicability::MachineApplicable);\n-                    suggested = true;\n-                    break;\n+                if maybe_suggest(suggested_ty, count, suggestions.clone()) {\n+                    return true;\n                 }\n             }\n+            if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n+                && let hir::def::Res::Local(hir_id) = path.res\n+                && let Some(hir::Node::Pat(binding)) = self.tcx.hir().find(hir_id)\n+                && let Some(hir::Node::Local(local)) = self.tcx.hir().find_parent(binding.hir_id)\n+                && let None = local.ty\n+                && let Some(binding_expr) = local.init\n+            {\n+                expr = binding_expr;\n+            } else {\n+                break 'outer;\n+            }\n         }\n-        suggested\n+        false\n     }\n \n     fn suggest_remove_await(&self, obligation: &PredicateObligation<'tcx>, err: &mut Diagnostic) {"}, {"sha": "bd7aaf6fb6dfcdbca247abc193101635b698f8e0", "filename": "tests/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -4,7 +4,6 @@ error[E0277]: the trait bound `u32: Signed` is not satisfied\n LL |     is_defaulted::<&'static u32>();\n    |                    ^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n    |\n-   = help: the trait `Signed` is implemented for `i32`\n note: required for `&'static u32` to implement `Defaulted`\n   --> $DIR/typeck-default-trait-impl-precedence.rs:10:19\n    |\n@@ -17,6 +16,11 @@ note: required by a bound in `is_defaulted`\n    |\n LL | fn is_defaulted<T:Defaulted>() { }\n    |                   ^^^^^^^^^ required by this bound in `is_defaulted`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     is_defaulted::<&'static u32>();\n+LL +     is_defaulted::<u32>();\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "18bb63745d7a5f12354106e58fba0b624dc47569", "filename": "tests/ui/impl-trait/in-trait/issue-102140.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -2,11 +2,15 @@ error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n   --> $DIR/issue-102140.rs:23:22\n    |\n LL |         MyTrait::foo(&self)\n-   |         ------------ -^^^^\n-   |         |            |\n-   |         |            the trait `MyTrait` is not implemented for `&dyn MyTrait`\n-   |         |            help: consider removing the leading `&`-reference\n+   |         ------------ ^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |         |\n    |         required by a bound introduced by this call\n+   |\n+help: consider removing the leading `&`-reference\n+   |\n+LL -         MyTrait::foo(&self)\n+LL +         MyTrait::foo(self)\n+   |\n \n error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n   --> $DIR/issue-102140.rs:23:9"}, {"sha": "aee2aa98a60c20a5e75257313d5e2e35e67089e1", "filename": "tests/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -4,25 +4,33 @@ error[E0277]: the trait bound `&'static mut isize: Copy` is not satisfied\n LL |     assert_copy::<&'static mut isize>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'static mut isize`\n    |\n-   = help: the trait `Copy` is implemented for `isize`\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |                  ^^^^ required by this bound in `assert_copy`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     assert_copy::<&'static mut isize>();\n+LL +     assert_copy::<isize>();\n+   |\n \n error[E0277]: the trait bound `&'a mut isize: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:28:19\n    |\n LL |     assert_copy::<&'a mut isize>();\n    |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut isize`\n    |\n-   = help: the trait `Copy` is implemented for `isize`\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |                  ^^^^ required by this bound in `assert_copy`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     assert_copy::<&'a mut isize>();\n+LL +     assert_copy::<isize>();\n+   |\n \n error[E0277]: the trait bound `Box<isize>: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:31:19"}, {"sha": "9428c125651ec2f718e315ee34965df117a27707", "filename": "tests/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -12,6 +12,11 @@ note: required by a bound in `assert`\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     assert::<&RefCell<i32>>();\n+LL +     assert::<RefCell<i32>>();\n+   |\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-4.rs:9:14\n@@ -28,6 +33,11 @@ note: required by a bound in `assert`\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     assert::<&RefCell<i32>>();\n+LL +     assert::<RefCell<i32>>();\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1b3c6482ce94fab0607258c3e24d96aa8caf48dc", "filename": "tests/ui/not-panic/not-panic-safe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.rs?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -5,6 +5,6 @@ use std::panic::UnwindSafe;\n fn assert<T: UnwindSafe + ?Sized>() {}\n \n fn main() {\n-    assert::<&mut i32>();\n-    //~^ ERROR the type `&mut i32` may not be safely transferred across an unwind boundary\n+    assert::<&mut &mut &i32>();\n+    //~^ ERROR the type `&mut &mut &i32` may not be safely transferred across an unwind boundary\n }"}, {"sha": "37a6aee390669c70536d0791887bf53921bc4f55", "filename": "tests/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -1,19 +1,21 @@\n-error[E0277]: the type `&mut i32` may not be safely transferred across an unwind boundary\n+error[E0277]: the type `&mut &mut &i32` may not be safely transferred across an unwind boundary\n   --> $DIR/not-panic-safe.rs:8:14\n    |\n-LL |     assert::<&mut i32>();\n-   |              -^^^^^^^\n-   |              |\n-   |              `&mut i32` may not be safely transferred across an unwind boundary\n-   |              help: consider removing the leading `&`-reference\n+LL |     assert::<&mut &mut &i32>();\n+   |              ^^^^^^^^^^^^^^ `&mut &mut &i32` may not be safely transferred across an unwind boundary\n    |\n-   = help: the trait `UnwindSafe` is not implemented for `&mut i32`\n-   = note: `UnwindSafe` is implemented for `&i32`, but not for `&mut i32`\n+   = help: the trait `UnwindSafe` is not implemented for `&mut &mut &i32`\n+   = note: `UnwindSafe` is implemented for `&&mut &i32`, but not for `&mut &mut &i32`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe.rs:5:14\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n+help: consider removing 2 leading `&`-references\n+   |\n+LL -     assert::<&mut &mut &i32>();\n+LL +     assert::<&i32>();\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "387770535f689b8a7f3c7481cf6779f046fcac96", "filename": "tests/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -2,13 +2,15 @@ error[E0277]: `&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n   --> $DIR/suggest-remove-refs-1.rs:6:19\n    |\n LL |     for (i, _) in &v.iter().enumerate() {\n-   |                   -^^^^^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   `&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-   |                   help: consider removing the leading `&`-reference\n+   |                   ^^^^^^^^^^^^^^^^^^^^^ `&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required for `&Enumerate<std::slice::Iter<'_, {integer}>>` to implement `IntoIterator`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     for (i, _) in &v.iter().enumerate() {\n+LL +     for (i, _) in v.iter().enumerate() {\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1632b2abb2f87fb76f8f2c5fa6e63e63304401b4", "filename": "tests/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -2,13 +2,15 @@ error[E0277]: `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterat\n   --> $DIR/suggest-remove-refs-2.rs:6:19\n    |\n LL |     for (i, _) in & & & & &v.iter().enumerate() {\n-   |                   ---------^^^^^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-   |                   help: consider removing 5 leading `&`-references\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` to implement `IntoIterator`\n+help: consider removing 5 leading `&`-references\n+   |\n+LL -     for (i, _) in & & & & &v.iter().enumerate() {\n+LL +     for (i, _) in v.iter().enumerate() {\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "7bf421a7729dfb88253c61ffa0271ad04599a987", "filename": "tests/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -1,18 +1,20 @@\n error[E0277]: `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n   --> $DIR/suggest-remove-refs-3.rs:6:19\n    |\n-LL |        for (i, _) in & & &\n-   |  ____________________^\n-   | | ___________________|\n-   | ||\n-LL | ||         & &v\n-   | ||___________- help: consider removing 5 leading `&`-references\n-LL | |          .iter()\n-LL | |          .enumerate() {\n-   | |_____________________^ `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n+LL |       for (i, _) in & & &\n+   |  ___________________^\n+LL | |         & &v\n+LL | |         .iter()\n+LL | |         .enumerate() {\n+   | |____________________^ `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` to implement `IntoIterator`\n+help: consider removing 5 leading `&`-references\n+   |\n+LL -     for (i, _) in & & &\n+LL +     for (i, _) in v\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "dd63d215972432be8942ee181822d03864902062", "filename": "tests/ui/suggestions/suggest-remove-refs-4.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.fixed?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let foo = [1,2,3].iter();\n+    for _i in foo {} //~ ERROR E0277\n+}"}, {"sha": "3c3d9b1b3f981811151e07af3c111ed85a437229", "filename": "tests/ui/suggestions/suggest-remove-refs-4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.rs?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let foo = &[1,2,3].iter();\n+    for _i in &foo {} //~ ERROR E0277\n+}"}, {"sha": "e4ad17e06716f64dd703377ab0e99f07a7db8da5", "filename": "tests/ui/suggestions/suggest-remove-refs-4.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `&&std::slice::Iter<'_, {integer}>` is not an iterator\n+  --> $DIR/suggest-remove-refs-4.rs:4:15\n+   |\n+LL |     for _i in &foo {}\n+   |               ^^^^ `&&std::slice::Iter<'_, {integer}>` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `&&std::slice::Iter<'_, {integer}>`\n+   = note: required for `&&std::slice::Iter<'_, {integer}>` to implement `IntoIterator`\n+help: consider removing 2 leading `&`-references\n+   |\n+LL ~     let foo = [1,2,3].iter();\n+LL ~     for _i in foo {}\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9f59f9c199a331b8a8a212dcf16fe6669f3d5a7c", "filename": "tests/ui/suggestions/suggest-remove-refs-5.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-5.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-5.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-5.fixed?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn main() {\n+    let v = &mut Vec::<i32>::new();\n+    for _ in v {} //~ ERROR E0277\n+\n+    let v = &mut [1u8];\n+    for _ in v {} //~ ERROR E0277\n+}"}, {"sha": "d56aa0c9ca47965601cdd0e6eb727e98aad02e18", "filename": "tests/ui/suggestions/suggest-remove-refs-5.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-5.rs?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn main() {\n+    let v = &mut &mut Vec::<i32>::new();\n+    for _ in &mut &mut v {} //~ ERROR E0277\n+\n+    let v = &mut &mut [1u8];\n+    for _ in &mut v {} //~ ERROR E0277\n+}"}, {"sha": "7de84d6122b58f094ec2f72e8744ce7d4f6192b3", "filename": "tests/ui/suggestions/suggest-remove-refs-5.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-5.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -0,0 +1,37 @@\n+error[E0277]: `Vec<i32>` is not an iterator\n+  --> $DIR/suggest-remove-refs-5.rs:4:14\n+   |\n+LL |     for _ in &mut &mut v {}\n+   |              ^^^^^^^^^^^ `Vec<i32>` is not an iterator; try calling `.into_iter()` or `.iter()`\n+   |\n+   = help: the trait `Iterator` is not implemented for `Vec<i32>`\n+   = note: required for `&mut Vec<i32>` to implement `Iterator`\n+   = note: 3 redundant requirements hidden\n+   = note: required for `&mut &mut &mut &mut Vec<i32>` to implement `Iterator`\n+   = note: required for `&mut &mut &mut &mut Vec<i32>` to implement `IntoIterator`\n+help: consider removing 3 leading `&`-references\n+   |\n+LL ~     let v = &mut Vec::<i32>::new();\n+LL ~     for _ in v {}\n+   |\n+\n+error[E0277]: `[u8; 1]` is not an iterator\n+  --> $DIR/suggest-remove-refs-5.rs:7:14\n+   |\n+LL |     for _ in &mut v {}\n+   |              ^^^^^^ `[u8; 1]` is not an iterator; try calling `.into_iter()` or `.iter()`\n+   |\n+   = help: the trait `Iterator` is not implemented for `[u8; 1]`\n+   = note: required for `&mut [u8; 1]` to implement `Iterator`\n+   = note: 2 redundant requirements hidden\n+   = note: required for `&mut &mut &mut [u8; 1]` to implement `Iterator`\n+   = note: required for `&mut &mut &mut [u8; 1]` to implement `IntoIterator`\n+help: consider removing 2 leading `&`-references\n+   |\n+LL ~     let v = &mut [1u8];\n+LL ~     for _ in v {}\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a631dbb39fb8fa59ebfb9cf13e120d8f7b463bb0", "filename": "tests/ui/typeck/issue-57404.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Ftypeck%2Fissue-57404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82/tests%2Fui%2Ftypeck%2Fissue-57404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-57404.stderr?ref=54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "patch": "@@ -2,14 +2,17 @@ error[E0277]: `&mut ()` is not a tuple\n   --> $DIR/issue-57404.rs:6:41\n    |\n LL |     handlers.unwrap().as_mut().call_mut(&mut ());\n-   |                                -------- -^^^^^^\n-   |                                |        |\n-   |                                |        the trait `Tuple` is not implemented for `&mut ()`\n-   |                                |        help: consider removing the leading `&`-reference\n+   |                                -------- ^^^^^^^ the trait `Tuple` is not implemented for `&mut ()`\n+   |                                |\n    |                                required by a bound introduced by this call\n    |\n note: required by a bound in `call_mut`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     handlers.unwrap().as_mut().call_mut(&mut ());\n+LL +     handlers.unwrap().as_mut().call_mut(());\n+   |\n \n error: aborting due to previous error\n "}]}