{"sha": "943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0M2ZhNDYzOTU2OWNjMmM5M2QzZmY4ZjdmNWIxYTMwY2MzMzJjYjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T17:03:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T17:03:58Z"}, "message": "Alight details in comkplation list", "tree": {"sha": "90b2c90cbd9a429f18f576c52b6e7c2e0d75e5a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b2c90cbd9a429f18f576c52b6e7c2e0d75e5a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "html_url": "https://github.com/rust-lang/rust/commit/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14a3b4a20583acae6f636005998d64dd6bdec75", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14a3b4a20583acae6f636005998d64dd6bdec75", "html_url": "https://github.com/rust-lang/rust/commit/c14a3b4a20583acae6f636005998d64dd6bdec75"}], "stats": {"total": 113, "additions": 63, "deletions": 50}, "files": [{"sha": "3c6c8c81a7d825e7aee45783727c48c7193fecfd", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "patch": "@@ -83,7 +83,7 @@ fn foo(s: S) { s.<|> }\n \"#,\n             expect![[r#\"\n                 me bar() fn bar(&self)\n-                fd foo u32\n+                fd foo   u32\n             \"#]],\n         );\n     }\n@@ -98,7 +98,7 @@ impl S {\n }\n \"#,\n             expect![[r#\"\n-                me foo() fn foo(self)\n+                me foo()     fn foo(self)\n                 fd the_field (u32,)\n             \"#]],\n         )\n@@ -114,7 +114,7 @@ impl A {\n }\n \"#,\n             expect![[r#\"\n-                me foo() fn foo(&self)\n+                me foo()     fn foo(&self)\n                 fd the_field (u32, i32)\n             \"#]],\n         )\n@@ -148,7 +148,7 @@ fn foo(a: inner::A) { a.<|> }\n \"#,\n             expect![[r#\"\n                 fd crate_field u32\n-                fd pub_field u32\n+                fd pub_field   u32\n                 fd super_field u32\n             \"#]],\n         );"}, {"sha": "2dc401f575d9e9128b68936bdb0e56cd4ebe9273", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "patch": "@@ -216,17 +216,17 @@ mod tests {\n         check(\n             r\"use a::<|>\",\n             expect![[r#\"\n-            kw self\n-            kw super::\n-        \"#]],\n+                kw self\n+                kw super::\n+            \"#]],\n         );\n \n         check(\n             r\"use a::{b, <|>}\",\n             expect![[r#\"\n-            kw self\n-            kw super::\n-        \"#]],\n+                kw self\n+                kw super::\n+            \"#]],\n         );\n     }\n "}, {"sha": "13fa7548d89ff883a8e6fef0f5e8ed26bc9ee9aa", "filename": "crates/ra_ide/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "patch": "@@ -61,7 +61,7 @@ fn foo() {\n             expect![[r#\"\n                 st Bar\n                 en E\n-                ev X ()\n+                ev X   ()\n                 ct Z\n                 md m\n             \"#]],"}, {"sha": "8735b9010370b30a1fa35625d320b081c42f482e", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "patch": "@@ -260,14 +260,14 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn box Box::new(expr)\n-                sn call function(expr)\n-                sn dbg dbg!(expr)\n-                sn if if expr {}\n+                sn box   Box::new(expr)\n+                sn call  function(expr)\n+                sn dbg   dbg!(expr)\n+                sn if    if expr {}\n                 sn match match expr {}\n-                sn not !expr\n-                sn ref &expr\n-                sn refm &mut expr\n+                sn not   !expr\n+                sn ref   &expr\n+                sn refm  &mut expr\n                 sn while while expr {}\n             \"#]],\n         );\n@@ -283,12 +283,12 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                sn box Box::new(expr)\n-                sn call function(expr)\n-                sn dbg dbg!(expr)\n+                sn box   Box::new(expr)\n+                sn call  function(expr)\n+                sn dbg   dbg!(expr)\n                 sn match match expr {}\n-                sn ref &expr\n-                sn refm &mut expr\n+                sn ref   &expr\n+                sn refm  &mut expr\n             \"#]],\n         )\n     }"}, {"sha": "e5553e28f57931523274713fddbe39bd69c0ec5e", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "patch": "@@ -332,7 +332,7 @@ fn foo() { let _ = E::<|> }\n \"#,\n             expect![[r#\"\n                 ev Bar(\u2026) (i32)\n-                ev Foo ()\n+                ev Foo    ()\n             \"#]],\n         );\n     }\n@@ -354,8 +354,8 @@ impl S {\n fn foo() { let _ = S::<|> }\n \"#,\n             expect![[r#\"\n-                ct C const C: i32 = 42;\n-                ta T type T = i32;\n+                ct C   const C: i32 = 42;\n+                ta T   type T = i32;\n                 fn a() fn a()\n                 me b() fn b(&self)\n             \"#]],\n@@ -382,8 +382,8 @@ mod m {\n fn foo() { let _ = S::<|> }\n \"#,\n             expect![[r#\"\n-                ct PUBLIC_CONST pub(super) const PUBLIC_CONST: u32 = 1;\n-                ta PublicType pub(super) type PublicType = u32;\n+                ct PUBLIC_CONST    pub(super) const PUBLIC_CONST: u32 = 1;\n+                ta PublicType      pub(super) type PublicType = u32;\n                 fn public_method() pub(super) fn public_method()\n             \"#]],\n         );\n@@ -504,13 +504,13 @@ trait Sub: Super {\n fn foo<T: Sub>() { T::<|> }\n \"#,\n             expect![[r#\"\n-                ct C2 const C2: ();\n-                ct CONST const CONST: u8;\n-                ta SubTy type SubTy;\n-                ta Ty type Ty;\n-                fn func() fn func()\n-                me method() fn method(&self)\n-                fn subfunc() fn subfunc()\n+                ct C2          const C2: ();\n+                ct CONST       const CONST: u8;\n+                ta SubTy       type SubTy;\n+                ta Ty          type Ty;\n+                fn func()      fn func()\n+                me method()    fn method(&self)\n+                fn subfunc()   fn subfunc()\n                 me submethod() fn submethod(&self)\n             \"#]],\n         );\n@@ -544,13 +544,13 @@ impl<T> Sub for Wrap<T> {\n }\n \"#,\n             expect![[r#\"\n-                ct C2 const C2: () = ();\n-                ct CONST const CONST: u8 = 0;\n-                ta SubTy type SubTy;\n-                ta Ty type Ty;\n-                fn func() fn func()\n-                me method() fn method(&self)\n-                fn subfunc() fn subfunc()\n+                ct C2          const C2: () = ();\n+                ct CONST       const CONST: u8 = 0;\n+                ta SubTy       type SubTy;\n+                ta Ty          type Ty;\n+                fn func()      fn func()\n+                me method()    fn method(&self)\n+                fn subfunc()   fn subfunc()\n                 me submethod() fn submethod(&self)\n             \"#]],\n         );\n@@ -586,7 +586,7 @@ fn main() { let _ = crate::<|> }\n             expect![[r##\"\n                 ma foo!(\u2026) #[macro_export]\n                 macro_rules! foo\n-                fn main() fn main()\n+                fn main()  fn main()\n             \"##]],\n         );\n     }\n@@ -630,7 +630,7 @@ mod p {\n             expect![[r#\"\n                 ct RIGHT_CONST\n                 st RightType\n-                fn right_fn() fn wrong_fn()\n+                fn right_fn()  fn wrong_fn()\n             \"#]],\n         );\n \n@@ -676,7 +676,7 @@ fn main() { m!(self::f<|>); }\n fn foo() {}\n \"#,\n             expect![[r#\"\n-                fn foo() fn foo()\n+                fn foo()  fn foo()\n                 fn main() fn main()\n             \"#]],\n         );"}, {"sha": "28d8f787681314b8f9e831d702a669f70adb62e0", "filename": "crates/ra_ide/src/completion/complete_snippet.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "patch": "@@ -84,9 +84,9 @@ mod tests {\n         check(\n             r#\"fn foo(x: i32) { <|> }\"#,\n             expect![[r#\"\n-            sn pd\n-            sn ppd\n-        \"#]],\n+                sn pd\n+                sn ppd\n+            \"#]],\n         );\n     }\n "}, {"sha": "c2be2369783056a928b20d9e4d999d7b8df138b8", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=943fa4639569cc2c93d3ff8f7f5b1a30cc332cb0", "patch": "@@ -43,19 +43,32 @@ pub(crate) fn completion_list_with_config(\n         .filter(|c| c.completion_kind == kind)\n         .collect();\n     kind_completions.sort_by_key(|c| c.label().to_owned());\n+    let label_width = kind_completions\n+        .iter()\n+        .map(|it| monospace_width(it.label()))\n+        .max()\n+        .unwrap_or_default()\n+        .min(16);\n     kind_completions\n         .into_iter()\n         .map(|it| {\n-            let mut buf = format!(\"{} {}\", it.kind().unwrap().tag(), it.label());\n+            let tag = it.kind().unwrap().tag();\n+            let var_name = format!(\"{} {}\", tag, it.label());\n+            let mut buf = var_name;\n             if let Some(detail) = it.detail() {\n-                format_to!(buf, \" {}\", detail);\n+                let width = label_width.saturating_sub(monospace_width(it.label()));\n+                format_to!(buf, \"{:width$} {}\", \"\", detail, width = width);\n             }\n             format_to!(buf, \"\\n\");\n             buf\n         })\n         .collect()\n }\n \n+fn monospace_width(s: &str) -> usize {\n+    s.chars().count()\n+}\n+\n pub(crate) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n     check_edit_with_config(what, ra_fixture_before, ra_fixture_after, &CompletionConfig::default())\n }"}]}