{"sha": "69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZmEzZWJmZjZjN2JlMmY0MGJhZmM3NzY4MzIxNzlmNzRhZTBkMWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-14T16:06:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-14T16:06:23Z"}, "message": "rustup to rustc 1.15.0-dev (ace092f56 2016-12-13) (always_encode_mir)", "tree": {"sha": "96f3e539f9d4b3dedbdca4d17d8b8d659c2fb5fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96f3e539f9d4b3dedbdca4d17d8b8d659c2fb5fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYUW3/AAoJEFbW7qD8Z6xGaS0QAIPyEXpxI9VwryrdK1fpMkRg\n5hMrEdxSeKHN5Oh7QZN/Yqhtp1wpdy3yL//vahOvPw7iRbWgoIuSRbiqAiY82rfo\nXlADe8syk6ywKR1A97IpgKoejlVDDT2W1c0/R0vkZF1bhvd/vcF0IM/dT4Oq7r1Z\nvb7uGZAzhZnRWZ1ElCcwwNompXZPAXU/LP87eXCgbJysa4mrlxByeHvdlAQHAXn0\nlBjVUOO8ZMV8I4F71V7YgOD/MlkQ85c1ia2N4s6O7n6AqhKTGSX4hBs+VSvCMBw2\ncLY4ic2jU7QJMQ5/9OPBG8uqKs4kviS2oDKt+CEj6e8AEOqcMLqrrlA6wWUCXzIW\n/HbuyyRs6I1pEPd2Eak28BW12LN+cA9PTWZRx/CvF70vtrrIETaM2DY0n5ckX8Dk\ngcWluj3tbMTg/+T5smEfUPtvfrjJ4xgKmDo/3246jzD7x3HmDtuZKngHhHeqtFSl\nEy19CgH+cjvS9O+OvF70hnqC/Po+6OzXJ5vXiR5J4uNb2Z6mbX0NtVtGOst8gVgR\nC/1RU5TfA6ShRuuitaK2+u05kVODm8zlQdA8khlVszBe5baXUTBHkN5cCN2AWUtQ\nWSoFl80PE3AiKXAWVrfi5yagY4f7LZgeND6ci0zpCOBFtk6R6Hz8VjTWhoNm2S4d\nQJlSjws+w3HD7fnil1nx\n=Mo5P\n-----END PGP SIGNATURE-----", "payload": "tree 96f3e539f9d4b3dedbdca4d17d8b8d659c2fb5fc\nparent ee0dc452aa90afe8a15a175e1add1d7b388868aa\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481731583 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481731583 +0100\n\nrustup to rustc 1.15.0-dev (ace092f56 2016-12-13) (always_encode_mir)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "html_url": "https://github.com/rust-lang/rust/commit/69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69fa3ebff6c7be2f40bafc776832179f74ae0d1b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0dc452aa90afe8a15a175e1add1d7b388868aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0dc452aa90afe8a15a175e1add1d7b388868aa", "html_url": "https://github.com/rust-lang/rust/commit/ee0dc452aa90afe8a15a175e1add1d7b388868aa"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "9b532e013759218b26d242bc434facb2d42200e1", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69fa3ebff6c7be2f40bafc776832179f74ae0d1b/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fa3ebff6c7be2f40bafc776832179f74ae0d1b/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "patch": "@@ -11,6 +11,7 @@ use syntax::codemap::Span;\n pub enum EvalError<'tcx> {\n     FunctionPointerTyMismatch(Abi, &'tcx FnSig<'tcx>, &'tcx BareFnTy<'tcx>),\n     NoMirFor(String),\n+    UnterminatedCString(Pointer),\n     DanglingPointerDeref,\n     InvalidMemoryAccess,\n     InvalidFunctionPointer,\n@@ -119,6 +120,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"tried to deallocate frozen memory\",\n             EvalError::Layout(_) =>\n                 \"rustc layout computation failed\",\n+            EvalError::UnterminatedCString(_) =>\n+                \"attempted to get length of a null terminated string, but no null found before end of allocation\",\n         }\n     }\n "}, {"sha": "580372b3da2dfabed0849dde725d3cd162f333f9", "filename": "src/memory.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69fa3ebff6c7be2f40bafc776832179f74ae0d1b/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fa3ebff6c7be2f40bafc776832179f74ae0d1b/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "patch": "@@ -530,6 +530,22 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(())\n     }\n \n+    pub fn read_c_str(&self, ptr: Pointer) -> EvalResult<'tcx, &[u8]> {\n+        let alloc = self.get(ptr.alloc_id)?;\n+        assert_eq!(ptr.offset as usize as u64, ptr.offset);\n+        let offset = ptr.offset as usize;\n+        match alloc.bytes[offset..].iter().position(|&c| c == 0) {\n+            Some(size) => {\n+                if self.relocations(ptr, size as u64)?.count() != 0 {\n+                    return Err(EvalError::ReadPointerAsBytes);\n+                }\n+                self.check_defined(ptr, size as u64)?;\n+                Ok(&alloc.bytes[offset..offset + size])\n+            },\n+            None => Err(EvalError::UnterminatedCString(ptr)),\n+        }\n+    }\n+\n     pub fn read_bytes(&self, ptr: Pointer, size: u64) -> EvalResult<'tcx, &[u8]> {\n         self.get_bytes(ptr, size, 1)\n     }"}, {"sha": "443696edb12286f41695f29f9a7fc419d9bebcd9", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69fa3ebff6c7be2f40bafc776832179f74ae0d1b/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fa3ebff6c7be2f40bafc776832179f74ae0d1b/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "patch": "@@ -57,6 +57,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"atomic_load\" |\n+            \"atomic_load_relaxed\" |\n             \"atomic_load_acq\" |\n             \"volatile_load\" => {\n                 let ty = substs.type_at(0);"}, {"sha": "95649f4a8b3793ec6182cda8fa87c45963b1dcc9", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/69fa3ebff6c7be2f40bafc776832179f74ae0d1b/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fa3ebff6c7be2f40bafc776832179f74ae0d1b/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=69fa3ebff6c7be2f40bafc776832179f74ae0d1b", "patch": "@@ -90,7 +90,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     ty::TyFnPtr(bare_fn_ty) => {\n                         let fn_ptr = self.eval_operand_to_primval(func)?.to_ptr();\n                         let (def_id, substs, abi, sig) = self.memory.get_fn(fn_ptr.alloc_id)?;\n-                        if abi != bare_fn_ty.abi || sig != bare_fn_ty.sig.skip_binder() {\n+                        let bare_sig = self.tcx.erase_late_bound_regions_and_normalize(&bare_fn_ty.sig);\n+                        let bare_sig = self.tcx.erase_regions(&bare_sig);\n+                        // transmuting function pointers in miri is fine as long as the number of\n+                        // arguments and the abi don't change.\n+                        // FIXME: also check the size of the arguments' type and the return type\n+                        // Didn't get it to work, since that triggers an assertion in rustc which\n+                        // checks whether the type has escaping regions\n+                        if abi != bare_fn_ty.abi ||\n+                           sig.variadic != bare_sig.variadic ||\n+                           sig.inputs().len() != bare_sig.inputs().len() {\n                             return Err(EvalError::FunctionPointerTyMismatch(abi, sig, bare_fn_ty));\n                         }\n                         self.eval_fn_call(def_id, substs, bare_fn_ty, destination, args,\n@@ -189,15 +198,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use syntax::abi::Abi;\n         match fn_ty.abi {\n             Abi::RustIntrinsic => {\n-                let ty = fn_ty.sig.0.output;\n+                let ty = fn_ty.sig.0.output();\n                 let layout = self.type_layout(ty)?;\n                 let (ret, target) = destination.unwrap();\n                 self.call_intrinsic(def_id, substs, arg_operands, ret, ty, layout, target)?;\n                 Ok(())\n             }\n \n             Abi::C => {\n-                let ty = fn_ty.sig.0.output;\n+                let ty = fn_ty.sig.0.output();\n                 let (ret, target) = destination.unwrap();\n                 self.call_c_abi(def_id, arg_operands, ret, ty)?;\n                 self.goto_block(target);\n@@ -320,11 +329,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             .collect();\n         let args = args_res?;\n \n-        if link_name.starts_with(\"pthread_\") {\n-            warn!(\"ignoring C ABI call: {}\", link_name);\n-            return Ok(());\n-        }\n-\n         let usize = self.tcx.types.usize;\n \n         match &link_name[..] {\n@@ -371,6 +375,37 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::new(result as u64), dest_ty)?;\n             }\n \n+            \"memchr\" => {\n+                let ptr = args[0].read_ptr(&self.memory)?;\n+                let val = self.value_to_primval(args[1], usize)?.to_u64() as u8;\n+                let num = self.value_to_primval(args[2], usize)?.to_u64();\n+                if let Some(idx) = self.memory.read_bytes(ptr, num)?.iter().position(|&c| c == val) {\n+                    let new_ptr = ptr.offset(idx as u64);\n+                    self.write_value(Value::ByVal(PrimVal::from_ptr(new_ptr)), dest, dest_ty)?;\n+                } else {\n+                    self.write_value(Value::ByVal(PrimVal::new(0)), dest, dest_ty)?;\n+                }\n+            }\n+\n+            \"getenv\" => {\n+                {\n+                    let name = args[0].read_ptr(&self.memory)?;\n+                    let name = self.memory.read_c_str(name)?;\n+                    info!(\"ignored env var request for `{:?}`\", ::std::str::from_utf8(name));\n+                }\n+                self.write_value(Value::ByVal(PrimVal::new(0)), dest, dest_ty)?;\n+            }\n+\n+            // unix panic code inside libstd will read the return value of this function\n+            \"pthread_rwlock_rdlock\" => {\n+                self.write_primval(dest, PrimVal::new(0), dest_ty)?;\n+            }\n+\n+            link_name if link_name.starts_with(\"pthread_\") => {\n+                warn!(\"ignoring C ABI call: {}\", link_name);\n+                return Ok(());\n+            },\n+\n             _ => {\n                 return Err(EvalError::Unimplemented(format!(\"can't call C ABI function: {}\", link_name)));\n             }\n@@ -520,7 +555,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let offset = idx * self.memory.pointer_size();\n                     let fn_ptr = self.memory.read_ptr(vtable.offset(offset))?;\n                     let (def_id, substs, _abi, sig) = self.memory.get_fn(fn_ptr.alloc_id)?;\n-                    *first_ty = sig.inputs[0];\n+                    *first_ty = sig.inputs()[0];\n                     Ok((def_id, substs, Vec::new()))\n                 } else {\n                     Err(EvalError::VtableForArgumentlessMethod)\n@@ -664,7 +699,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // some values don't need to call a drop impl, so the value is null\n                 if drop_fn != Pointer::from_int(0) {\n                     let (def_id, substs, _abi, sig) = self.memory.get_fn(drop_fn.alloc_id)?;\n-                    let real_ty = sig.inputs[0];\n+                    let real_ty = sig.inputs()[0];\n                     self.drop(Lvalue::from_ptr(ptr), real_ty, drop)?;\n                     drop.push((def_id, Value::ByVal(PrimVal::from_ptr(ptr)), substs));\n                 } else {"}]}