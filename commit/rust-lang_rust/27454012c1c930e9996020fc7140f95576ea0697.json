{"sha": "27454012c1c930e9996020fc7140f95576ea0697", "node_id": "C_kwDOAAsO6NoAKDI3NDU0MDEyYzFjOTMwZTk5OTYwMjBmYzcxNDBmOTU1NzZlYTA2OTc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-11T05:45:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-11T05:45:56Z"}, "message": "Rollup merge of #107855 - compiler-errors:new-solver-random-tests, r=lcnr\n\nAdd a couple random projection tests for new solver\n\nSelf-explanatory, they're just some cases that have been on my mind in the past (especially `tests/ui/traits/new-solver/param-candidate-doesnt-shadow-project.rs`).", "tree": {"sha": "ac0a239b7d89cca3cf8f5591b4d933365a6f7083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac0a239b7d89cca3cf8f5591b4d933365a6f7083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27454012c1c930e9996020fc7140f95576ea0697", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5yuUCRBK7hj4Ov3rIwAAZyQIAJJU1IOpfdAT0HZ1u0Ti5A+a\n8zTpjA8n4BeeThG/ibLbp8deZUn12hC3eDc/qcJKBK71GLUt4CBSS5n3LAVFQq7E\nWqjDAJB3x+NPupYdIneBQVXXyCoYv+oqUyMilwfbQwqMHo+bIdug6tNKRfn8GAk/\nR76HWhsZHzbqJhAAvQ+nZEZrjAfj8wxH1KpkJdtCSNfabdY5UepTLSlHkumlqoHv\nfc/1x0MsUOTwWYIk1rkrWrTSHHm3BEhTwbqN7BP+fa4v+3bKFBfgaylUqeebMP4m\nMsARWPH1D+PPIjMWnTqYh8YsVzA9pHUxwH2NvUQ6tRBFPg49vqxpbowdHggZG/g=\n=GNdS\n-----END PGP SIGNATURE-----\n", "payload": "tree ac0a239b7d89cca3cf8f5591b4d933365a6f7083\nparent 9af90ffa3c40e30d9acc9a7b3e0fbf121560c9e9\nparent 9790d6fbdd07d1efbec8088c88dc2b0d1f9ba283\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676094356 +0530\ncommitter GitHub <noreply@github.com> 1676094356 +0530\n\nRollup merge of #107855 - compiler-errors:new-solver-random-tests, r=lcnr\n\nAdd a couple random projection tests for new solver\n\nSelf-explanatory, they're just some cases that have been on my mind in the past (especially `tests/ui/traits/new-solver/param-candidate-doesnt-shadow-project.rs`).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27454012c1c930e9996020fc7140f95576ea0697", "html_url": "https://github.com/rust-lang/rust/commit/27454012c1c930e9996020fc7140f95576ea0697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27454012c1c930e9996020fc7140f95576ea0697/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9af90ffa3c40e30d9acc9a7b3e0fbf121560c9e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af90ffa3c40e30d9acc9a7b3e0fbf121560c9e9", "html_url": "https://github.com/rust-lang/rust/commit/9af90ffa3c40e30d9acc9a7b3e0fbf121560c9e9"}, {"sha": "9790d6fbdd07d1efbec8088c88dc2b0d1f9ba283", "url": "https://api.github.com/repos/rust-lang/rust/commits/9790d6fbdd07d1efbec8088c88dc2b0d1f9ba283", "html_url": "https://github.com/rust-lang/rust/commit/9790d6fbdd07d1efbec8088c88dc2b0d1f9ba283"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "bdf999ec5dd00c17c10330209ec01f599fc49b87", "filename": "tests/ui/traits/new-solver/param-candidate-doesnt-shadow-project.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/27454012c1c930e9996020fc7140f95576ea0697/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-candidate-doesnt-shadow-project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27454012c1c930e9996020fc7140f95576ea0697/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-candidate-doesnt-shadow-project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fparam-candidate-doesnt-shadow-project.rs?ref=27454012c1c930e9996020fc7140f95576ea0697", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+trait Bar {}\n+\n+impl<T> Foo for T {\n+    type Assoc = i32;\n+}\n+\n+impl<T> Bar for T where T: Foo<Assoc = i32> {}\n+\n+fn require_bar<T: Bar>() {}\n+\n+fn foo<T: Foo>() {\n+    // Unlike the classic solver, `<T as Foo>::Assoc = _` will still project\n+    // down to `i32` even though there's a param-env candidate here, since we\n+    // don't assemble any param-env projection candidates for `T: Foo` alone.\n+    require_bar::<T>();\n+}\n+\n+fn main() {}"}, {"sha": "cde2059ca9b912cbf7dc49dfad20fa78293cd635", "filename": "tests/ui/traits/new-solver/two-projection-param-candidates-are-ambiguous.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/27454012c1c930e9996020fc7140f95576ea0697/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27454012c1c930e9996020fc7140f95576ea0697/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.rs?ref=27454012c1c930e9996020fc7140f95576ea0697", "patch": "@@ -0,0 +1,30 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+// When we're solving `<T as Foo>::Assoc = i32`, we actually first solve\n+// `<T as Foo>::Assoc = _#1t`, then unify `_#1t` with `i32`. That goal\n+// with the inference variable is ambiguous when there are >1 param-env\n+// candidates.\n+\n+// We don't unify the RHS of a projection goal eagerly when solving, both\n+// for caching reasons and partly to make sure that we don't make the new\n+// trait solver smarter than it should be.\n+\n+// This is (as far as I can tell) a forwards-compatible decision, but if you\n+// make this test go from fail to pass, be sure you understand the implications!\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+trait Bar {}\n+\n+impl<T> Bar for T where T: Foo<Assoc = i32> {}\n+\n+fn needs_bar<T: Bar>() {}\n+\n+fn foo<T: Foo<Assoc = i32> + Foo<Assoc = u32>>() {\n+    needs_bar::<T>();\n+    //~^ ERROR type annotations needed: cannot satisfy `T: Bar`\n+}\n+\n+fn main() {}"}, {"sha": "fa5e780ee5e8bb59fc6aad7315bd73968adcce9c", "filename": "tests/ui/traits/new-solver/two-projection-param-candidates-are-ambiguous.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27454012c1c930e9996020fc7140f95576ea0697/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27454012c1c930e9996020fc7140f95576ea0697/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.stderr?ref=27454012c1c930e9996020fc7140f95576ea0697", "patch": "@@ -0,0 +1,16 @@\n+error[E0283]: type annotations needed: cannot satisfy `T: Bar`\n+  --> $DIR/two-projection-param-candidates-are-ambiguous.rs:26:5\n+   |\n+LL |     needs_bar::<T>();\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: cannot satisfy `T: Bar`\n+note: required by a bound in `needs_bar`\n+  --> $DIR/two-projection-param-candidates-are-ambiguous.rs:23:17\n+   |\n+LL | fn needs_bar<T: Bar>() {}\n+   |                 ^^^ required by this bound in `needs_bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}]}