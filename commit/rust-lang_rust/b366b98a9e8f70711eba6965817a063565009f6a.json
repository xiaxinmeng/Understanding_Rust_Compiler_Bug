{"sha": "b366b98a9e8f70711eba6965817a063565009f6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNjZiOThhOWU4ZjcwNzExZWJhNjk2NTgxN2EwNjM1NjUwMDlmNmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-08T09:05:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T09:05:09Z"}, "message": "Merge #4787\n\n4787: Fix bug in lexer for format specifier r=matklad a=ltentrup\n\nThe `type` and `width` were not correctly distinguished.\r\nFixes #4696.\n\nCo-authored-by: Leander Tentrup <leander.tentrup@gmail.com>", "tree": {"sha": "1a58db376d2deeea16543fc4bf287837fb7ee68e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a58db376d2deeea16543fc4bf287837fb7ee68e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b366b98a9e8f70711eba6965817a063565009f6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3f9FCRBK7hj4Ov3rIwAAdHIIAKh0My+MgWLXF03Bve1ByzCj\nP2ONvoeS9+JgCujO6af3BExI9IVRy09DVvwAnp2weql5nkgF+uqigRhMQkj35vXT\n932U30DGf8N9QOcwzEXZmzK875E4ZkDyvXmiYGJNMeny9vl6w7940ZcuKjwmJAYn\nJWmV+iIVSyuNhSAJC992lgn7eErCN1I1e+IRfOV/tg/WX63kVx8eKR+MF882nw//\nXGIJklLtVMhXcbm4NyCLJIaQtJRSDvp6tGrNP2T0rI1CRB+jEB82lo+WV/Q1gCxT\nzgrhSyZ9TT5O8zkrRTPMF29A8QRCtTS+QBvobEsO/j5O0f7lwPwpyHiyT7OEgVM=\n=kPIl\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a58db376d2deeea16543fc4bf287837fb7ee68e\nparent d6967762dd1fff3cfb65d481ba5a169143205c0e\nparent 3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591607109 +0000\ncommitter GitHub <noreply@github.com> 1591607109 +0000\n\nMerge #4787\n\n4787: Fix bug in lexer for format specifier r=matklad a=ltentrup\n\nThe `type` and `width` were not correctly distinguished.\r\nFixes #4696.\n\nCo-authored-by: Leander Tentrup <leander.tentrup@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b366b98a9e8f70711eba6965817a063565009f6a", "html_url": "https://github.com/rust-lang/rust/commit/b366b98a9e8f70711eba6965817a063565009f6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b366b98a9e8f70711eba6965817a063565009f6a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6967762dd1fff3cfb65d481ba5a169143205c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6967762dd1fff3cfb65d481ba5a169143205c0e", "html_url": "https://github.com/rust-lang/rust/commit/d6967762dd1fff3cfb65d481ba5a169143205c0e"}, {"sha": "3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d", "html_url": "https://github.com/rust-lang/rust/commit/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "6a5cf0e7449bb8dce24cf83041e62a45c7f1a5a3", "filename": "crates/ra_ide/src/snapshots/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b366b98a9e8f70711eba6965817a063565009f6a/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/b366b98a9e8f70711eba6965817a063565009f6a/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html?ref=b366b98a9e8f70711eba6965817a063565009f6a", "patch": "@@ -63,7 +63,7 @@\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"string_literal\">}!\"</span>, <span class=\"numeric_literal\">27</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">27</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, -<span class=\"numeric_literal\">5</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">27</span>);"}, {"sha": "56378385a1a967bb1581356be14f788db727b615", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b366b98a9e8f70711eba6965817a063565009f6a/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b366b98a9e8f70711eba6965817a063565009f6a/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=b366b98a9e8f70711eba6965817a063565009f6a", "patch": "@@ -335,16 +335,26 @@ pub trait HasFormatSpecifier: AstToken {\n                             }\n                             c if c == '_' || c.is_alphabetic() => {\n                                 read_identifier(&mut chars, &mut callback);\n-                                if chars.peek().and_then(|next| next.1.as_ref().ok()).copied()\n-                                    != Some('$')\n-                                {\n-                                    continue;\n-                                }\n-                                skip_char_and_emit(\n-                                    &mut chars,\n-                                    FormatSpecifier::DollarSign,\n-                                    &mut callback,\n-                                );\n+                                // can be either width (indicated by dollar sign, or type in which case\n+                                // the next sign has to be `}`)\n+                                let next =\n+                                    chars.peek().and_then(|next| next.1.as_ref().ok()).copied();\n+                                match next {\n+                                    Some('$') => skip_char_and_emit(\n+                                        &mut chars,\n+                                        FormatSpecifier::DollarSign,\n+                                        &mut callback,\n+                                    ),\n+                                    Some('}') => {\n+                                        skip_char_and_emit(\n+                                            &mut chars,\n+                                            FormatSpecifier::Close,\n+                                            &mut callback,\n+                                        );\n+                                        continue;\n+                                    }\n+                                    _ => continue,\n+                                };\n                             }\n                             _ => {}\n                         }\n@@ -416,12 +426,11 @@ pub trait HasFormatSpecifier: AstToken {\n                         }\n                     }\n \n-                    let mut cloned = chars.clone().take(2);\n-                    let first = cloned.next().and_then(|next| next.1.as_ref().ok()).copied();\n-                    if first != Some('}') {\n+                    if let Some((_, Ok('}'))) = chars.peek() {\n+                        skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n+                    } else {\n                         continue;\n                     }\n-                    skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n                 }\n                 _ => {\n                     while let Some((_, Ok(next_char))) = chars.peek() {"}]}