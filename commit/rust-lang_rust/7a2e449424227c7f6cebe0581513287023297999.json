{"sha": "7a2e449424227c7f6cebe0581513287023297999", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMmU0NDk0MjQyMjdjN2Y2Y2ViZTA1ODE1MTMyODcwMjMyOTc5OTk=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-27T22:09:56Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-27T23:02:06Z"}, "message": "Prefer imports starting with std", "tree": {"sha": "c76026fa1779741d8680f77e77360c01ce8cc759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c76026fa1779741d8680f77e77360c01ce8cc759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a2e449424227c7f6cebe0581513287023297999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2e449424227c7f6cebe0581513287023297999", "html_url": "https://github.com/rust-lang/rust/commit/7a2e449424227c7f6cebe0581513287023297999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a2e449424227c7f6cebe0581513287023297999/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dd8f8e26f2a62f5e7e4da50dcdfde344f6d31b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd8f8e26f2a62f5e7e4da50dcdfde344f6d31b9", "html_url": "https://github.com/rust-lang/rust/commit/5dd8f8e26f2a62f5e7e4da50dcdfde344f6d31b9"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "d9e67607f66c14d90b743ebce5bf06f2abec6e6d", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a2e449424227c7f6cebe0581513287023297999/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2e449424227c7f6cebe0581513287023297999/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=7a2e449424227c7f6cebe0581513287023297999", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     visibility::Visibility,\n     CrateId, ModuleDefId, ModuleId,\n };\n-use hir_expand::name::Name;\n+use hir_expand::name::{known, Name};\n \n const MAX_PATH_LEN: usize = 15;\n \n@@ -102,7 +102,7 @@ fn find_path_inner(\n     let mut best_path = None;\n     let mut best_path_len = max_len;\n     for (module_id, name) in importable_locations {\n-        let mut path = match find_path_inner(\n+        let mut new_path = match find_path_inner(\n             db,\n             ItemInNs::Types(ModuleDefId::ModuleId(module_id)),\n             from,\n@@ -111,15 +111,40 @@ fn find_path_inner(\n             None => continue,\n             Some(path) => path,\n         };\n-        path.segments.push(name);\n-        if path_len(&path) < best_path_len {\n-            best_path_len = path_len(&path);\n-            best_path = Some(path);\n+        new_path.segments.push(name);\n+\n+        if prefer_new_path(best_path_len, best_path.as_ref(), &new_path) {\n+            best_path_len = path_len(&new_path);\n+            best_path = Some(new_path);\n         }\n     }\n     best_path\n }\n \n+fn prefer_new_path(old_path_len: usize, old_path: Option<&ModPath>, new_path: &ModPath) -> bool {\n+    match (old_path.and_then(|mod_path| mod_path.segments.first()), new_path.segments.first()) {\n+        (Some(old_path_start), Some(new_path_start))\n+            if old_path_start == &known::std && use_std_instead(new_path_start) =>\n+        {\n+            false\n+        }\n+        (Some(old_path_start), Some(new_path_start))\n+            if new_path_start == &known::std && use_std_instead(old_path_start) =>\n+        {\n+            true\n+        }\n+        (None, Some(_)) => true,\n+        (Some(_), None) => false,\n+        _ => path_len(new_path) < old_path_len,\n+    }\n+}\n+\n+// When std library is present, paths starting with `std::`\n+// should be preferred over paths starting with `core::` and `alloc::`\n+fn use_std_instead(name: &Name) -> bool {\n+    name == &known::core || name == &known::alloc\n+}\n+\n fn path_len(path: &ModPath) -> usize {\n     path.segments.len()\n         + match path.kind {"}, {"sha": "b2e10f445f3360d19126e7f61766e96ec2361a92", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2e449424227c7f6cebe0581513287023297999/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2e449424227c7f6cebe0581513287023297999/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=7a2e449424227c7f6cebe0581513287023297999", "patch": "@@ -141,6 +141,8 @@ pub mod known {\n         macro_rules,\n         // Components of known path (value or mod name)\n         std,\n+        core,\n+        alloc,\n         iter,\n         ops,\n         future,"}, {"sha": "96e9ac378eab556e260e665ef01470158b47fd60", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2e449424227c7f6cebe0581513287023297999/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/7a2e449424227c7f6cebe0581513287023297999/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=7a2e449424227c7f6cebe0581513287023297999", "patch": "@@ -782,7 +782,7 @@\n                 \"semver\": {\n                     \"version\": \"5.7.1\",\n                     \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.1.tgz\",\n-                    \"integrity\": \"sha1-qVT5Ma66UI0we78Gnv8MAclhFvc=\",\n+                    \"integrity\": \"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\",\n                     \"dev\": true\n                 }\n             }"}]}