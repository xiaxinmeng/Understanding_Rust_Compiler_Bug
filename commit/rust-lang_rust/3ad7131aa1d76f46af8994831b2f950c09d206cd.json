{"sha": "3ad7131aa1d76f46af8994831b2f950c09d206cd", "node_id": "C_kwDOAAsO6NoAKDNhZDcxMzFhYTFkNzZmNDZhZjg5OTQ4MzFiMmY5NTBjMDlkMjA2Y2Q", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-07T04:13:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-10T22:35:40Z"}, "message": "Introduce `with_forced_trimmed_paths`", "tree": {"sha": "3185b32e3ba2c09d9a990a2eec754d74c0986a3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3185b32e3ba2c09d9a990a2eec754d74c0986a3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ad7131aa1d76f46af8994831b2f950c09d206cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad7131aa1d76f46af8994831b2f950c09d206cd", "html_url": "https://github.com/rust-lang/rust/commit/3ad7131aa1d76f46af8994831b2f950c09d206cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ad7131aa1d76f46af8994831b2f950c09d206cd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32da2305880765a4c76180086959a2d5da131565", "url": "https://api.github.com/repos/rust-lang/rust/commits/32da2305880765a4c76180086959a2d5da131565", "html_url": "https://github.com/rust-lang/rust/commit/32da2305880765a4c76180086959a2d5da131565"}], "stats": {"total": 340, "additions": 223, "deletions": 117}, "files": [{"sha": "4e113d72469c81d34eb10e25e952742ff9876174", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -1,6 +1,6 @@\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::diagnostics::suggest_constraining_type_param;\n-use crate::ty::print::{FmtPrinter, Printer};\n+use crate::ty::print::{with_forced_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n use hir::def::DefKind;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n@@ -162,17 +162,29 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             ),\n             RegionsPlaceholderMismatch => write!(f, \"one type is more general than the other\"),\n             ArgumentSorts(values, _) | Sorts(values) => ty::tls::with(|tcx| {\n-                report_maybe_different(\n-                    f,\n-                    &values.expected.sort_string(tcx),\n-                    &values.found.sort_string(tcx),\n-                )\n+                let (mut expected, mut found) = with_forced_trimmed_paths!((\n+                    values.expected.sort_string(tcx),\n+                    values.found.sort_string(tcx),\n+                ));\n+                if expected == found {\n+                    expected = values.expected.sort_string(tcx);\n+                    found = values.found.sort_string(tcx);\n+                }\n+                report_maybe_different(f, &expected, &found)\n             }),\n             Traits(values) => ty::tls::with(|tcx| {\n+                let (mut expected, mut found) = with_forced_trimmed_paths!((\n+                    tcx.def_path_str(values.expected),\n+                    tcx.def_path_str(values.found),\n+                ));\n+                if expected == found {\n+                    expected = tcx.def_path_str(values.expected);\n+                    found = tcx.def_path_str(values.found);\n+                }\n                 report_maybe_different(\n                     f,\n-                    &format!(\"trait `{}`\", tcx.def_path_str(values.expected)),\n-                    &format!(\"trait `{}`\", tcx.def_path_str(values.found)),\n+                    &format!(\"trait `{expected}`\"),\n+                    &format!(\"trait `{found}`\"),\n                 )\n             }),\n             IntMismatch(ref values) => {\n@@ -999,14 +1011,16 @@ fn foo(&self) -> Self::T { String::new() }\n         let mut short;\n         loop {\n             // Look for the longest properly trimmed path that still fits in lenght_limit.\n-            short = FmtPrinter::new_with_limit(\n-                self,\n-                hir::def::Namespace::TypeNS,\n-                rustc_session::Limit(type_limit),\n-            )\n-            .pretty_print_type(ty)\n-            .expect(\"could not write to `String`\")\n-            .into_buffer();\n+            short = with_forced_trimmed_paths!(\n+                FmtPrinter::new_with_limit(\n+                    self,\n+                    hir::def::Namespace::TypeNS,\n+                    rustc_session::Limit(type_limit),\n+                )\n+                .pretty_print_type(ty)\n+                .expect(\"could not write to `String`\")\n+                .into_buffer()\n+            );\n             if short.len() <= length_limit || type_limit == 0 {\n                 break;\n             }"}, {"sha": "de10b9b187cabb02deae7c7da3d387ca91727196", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n-use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n+use rustc_hir::definitions::{DefKey, DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_hir::LangItem;\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n@@ -63,6 +63,7 @@ thread_local! {\n     static FORCE_IMPL_FILENAME_LINE: Cell<bool> = const { Cell::new(false) };\n     static SHOULD_PREFIX_WITH_CRATE: Cell<bool> = const { Cell::new(false) };\n     static NO_TRIMMED_PATH: Cell<bool> = const { Cell::new(false) };\n+    static FORCE_TRIMMED_PATH: Cell<bool> = const { Cell::new(false) };\n     static NO_QUERIES: Cell<bool> = const { Cell::new(false) };\n     static NO_VISIBLE_PATH: Cell<bool> = const { Cell::new(false) };\n }\n@@ -116,6 +117,7 @@ define_helper!(\n     /// of various rustc types, for example `std::vec::Vec` would be trimmed to `Vec`,\n     /// if no other `Vec` is found.\n     fn with_no_trimmed_paths(NoTrimmedGuard, NO_TRIMMED_PATH);\n+    fn with_forced_trimmed_paths(ForceTrimmedGuard, FORCE_TRIMMED_PATH);\n     /// Prevent selection of visible paths. `Display` impl of DefId will prefer\n     /// visible (public) reexports of types as paths.\n     fn with_no_visible_paths(NoVisibleGuard, NO_VISIBLE_PATH);\n@@ -295,11 +297,89 @@ pub trait PrettyPrinter<'tcx>:\n         self.try_print_visible_def_path_recur(def_id, &mut callers)\n     }\n \n+    // Given a `DefId`, produce a short name. For types and traits, it prints *only* its name,\n+    // For associated items on traits it prints out the trait's name and the associated item's name.\n+    // For enum variants, if they have an unique name, then we only print the name, otherwise we\n+    // print the enum name and the variant name. Otherwise, we do not print anything and let the\n+    // caller use the `print_def_path` fallback.\n+    fn force_print_trimmed_def_path(\n+        mut self,\n+        def_id: DefId,\n+    ) -> Result<(Self::Path, bool), Self::Error> {\n+        let key = self.tcx().def_key(def_id);\n+        let visible_parent_map = self.tcx().visible_parent_map(());\n+        let kind = self.tcx().def_kind(def_id);\n+\n+        let get_local_name = |this: &Self, name, def_id, key: DefKey| {\n+            if let Some(visible_parent) = visible_parent_map.get(&def_id)\n+                && let actual_parent = this.tcx().opt_parent(def_id)\n+                && let DefPathData::TypeNs(_) = key.disambiguated_data.data\n+                && Some(*visible_parent) != actual_parent\n+            {\n+                this\n+                    .tcx()\n+                    .module_children(visible_parent)\n+                    .iter()\n+                    .filter(|child| child.res.opt_def_id() == Some(def_id))\n+                    .find(|child| child.vis.is_public() && child.ident.name != kw::Underscore)\n+                    .map(|child| child.ident.name)\n+                    .unwrap_or(name)\n+            } else {\n+                name\n+            }\n+        };\n+        if let DefKind::Variant = kind\n+            && let Some(symbol) = self.tcx().trimmed_def_paths(()).get(&def_id)\n+        {\n+            // If `Assoc` is unique, we don't want to talk about `Trait::Assoc`.\n+            self.write_str(get_local_name(&self, *symbol, def_id, key).as_str())?;\n+            return Ok((self, true));\n+        }\n+        if let Some(symbol) = key.get_opt_name() {\n+            if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = kind\n+                && let Some(parent) = self.tcx().opt_parent(def_id)\n+                && let parent_key = self.tcx().def_key(parent)\n+                && let Some(symbol) = parent_key.get_opt_name()\n+            {\n+                // Trait\n+                self.write_str(get_local_name(&self, symbol, parent, parent_key).as_str())?;\n+                self.write_str(\"::\")?;\n+            } else if let DefKind::Variant = kind\n+                && let Some(parent) = self.tcx().opt_parent(def_id)\n+                && let parent_key = self.tcx().def_key(parent)\n+                && let Some(symbol) = parent_key.get_opt_name()\n+            {\n+                // Enum\n+\n+                // For associated items and variants, we want the \"full\" path, namely, include\n+                // the parent type in the path. For example, `Iterator::Item`.\n+                self.write_str(get_local_name(&self, symbol, parent, parent_key).as_str())?;\n+                self.write_str(\"::\")?;\n+            } else if let DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Trait\n+                | DefKind::TyAlias | DefKind::Fn | DefKind::Const | DefKind::Static(_) = kind\n+            {\n+            } else {\n+                // If not covered above, like for example items out of `impl` blocks, fallback.\n+                return Ok((self, false));\n+            }\n+            self.write_str(get_local_name(&self, symbol, def_id, key).as_str())?;\n+            return Ok((self, true));\n+        }\n+        Ok((self, false))\n+    }\n+\n     /// Try to see if this path can be trimmed to a unique symbol name.\n     fn try_print_trimmed_def_path(\n         mut self,\n         def_id: DefId,\n     ) -> Result<(Self::Path, bool), Self::Error> {\n+        if FORCE_TRIMMED_PATH.with(|flag| flag.get()) {\n+            let (s, trimmed) = self.force_print_trimmed_def_path(def_id)?;\n+            if trimmed {\n+                return Ok((s, true));\n+            }\n+            self = s;\n+        }\n         if !self.tcx().sess.opts.unstable_opts.trim_diagnostic_paths\n             || matches!(self.tcx().sess.opts.trimmed_def_paths, TrimmedDefPaths::Never)\n             || NO_TRIMMED_PATH.with(|flag| flag.get())"}, {"sha": "9f5814a6bda738c7e275c6f2a7d935c0e87a5d9e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -36,7 +36,7 @@ use std::fmt;\n use super::InferCtxtPrivExt;\n use crate::infer::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::print::{with_forced_trimmed_paths, with_no_trimmed_paths};\n \n #[derive(Debug)]\n pub enum GeneratorInteriorOrUpvar {\n@@ -2412,6 +2412,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ObligationCauseCode::BindingObligation(item_def_id, span)\n             | ObligationCauseCode::ExprBindingObligation(item_def_id, span, ..) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n+                let short_item_name = with_forced_trimmed_paths!(tcx.def_path_str(item_def_id));\n                 let mut multispan = MultiSpan::from(span);\n                 let sm = tcx.sess.source_map();\n                 if let Some(ident) = tcx.opt_item_ident(item_def_id) {\n@@ -2424,9 +2425,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         multispan.push_span_label(ident.span, \"required by a bound in this\");\n                     }\n                 }\n-                let descr = format!(\"required by a bound in `{}`\", item_name);\n+                let descr = format!(\"required by a bound in `{item_name}`\");\n                 if span.is_visible(sm) {\n-                    let msg = format!(\"required by this bound in `{}`\", item_name);\n+                    let msg = format!(\"required by this bound in `{short_item_name}`\");\n                     multispan.push_span_label(span, msg);\n                     err.span_note(multispan, &descr);\n                 } else {"}, {"sha": "d4fc723fa8176c07eabcedbf0a8aaf54d9c4d98f", "filename": "src/test/ui/closures/closure-return-type-must-be-sized.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -19,7 +19,7 @@ note: required by a bound in `a::bar`\n   --> $DIR/closure-return-type-must-be-sized.rs:14:19\n    |\n LL |     pub fn bar<F: FnOnce() -> R, R: ?Sized>() {}\n-   |                   ^^^^^^^^^^^^^ required by this bound in `a::bar`\n+   |                   ^^^^^^^^^^^^^ required by this bound in `bar`\n \n error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n   --> $DIR/closure-return-type-must-be-sized.rs:56:5\n@@ -51,7 +51,7 @@ note: required by a bound in `b::bar`\n   --> $DIR/closure-return-type-must-be-sized.rs:28:19\n    |\n LL |     pub fn bar<F: Fn() -> R, R: ?Sized>() {}\n-   |                   ^^^^^^^^^ required by this bound in `b::bar`\n+   |                   ^^^^^^^^^ required by this bound in `bar`\n \n error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n   --> $DIR/closure-return-type-must-be-sized.rs:63:5\n@@ -83,7 +83,7 @@ note: required by a bound in `c::bar`\n   --> $DIR/closure-return-type-must-be-sized.rs:42:19\n    |\n LL |     pub fn bar<F: FnMut() -> R, R: ?Sized>() {}\n-   |                   ^^^^^^^^^^^^ required by this bound in `c::bar`\n+   |                   ^^^^^^^^^^^^ required by this bound in `bar`\n \n error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n   --> $DIR/closure-return-type-must-be-sized.rs:70:5"}, {"sha": "cdf97bd88fd236cf10c097e75947f08356db71c3", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -14,7 +14,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:17:5\n@@ -28,7 +28,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:20:19\n@@ -46,7 +46,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:20:5\n@@ -60,7 +60,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:23:5\n@@ -74,7 +74,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:25:5\n@@ -88,7 +88,7 @@ note: required by a bound in `use_trait_impl::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:14:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:35:19\n@@ -106,7 +106,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:35:5\n@@ -120,7 +120,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:38:19\n@@ -138,7 +138,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:38:5\n@@ -152,7 +152,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:41:5\n@@ -166,7 +166,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:43:5\n@@ -180,7 +180,7 @@ note: required by a bound in `use_trait_impl_2::assert_impl`\n   --> $DIR/abstract-const-as-cast-3.rs:32:23\n    |\n LL |     fn assert_impl<T: Trait>() {}\n-   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n+   |                       ^^^^^ required by this bound in `assert_impl`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "f021f102933414fb5f4bb2b460246d84c1d52717", "filename": "src/test/ui/diagnostic-width/long-E0308.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -1,9 +1,20 @@\n // compile-flags: --diagnostic-width=60\n // normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n \n-struct Atype<T, K>(T, K);\n-struct Btype<T, K>(T, K);\n-struct Ctype<T, K>(T, K);\n+mod a {\n+    // Force the \"short path for unique types\" machinery to trip up\n+    pub struct Atype;\n+    pub struct Btype;\n+    pub struct Ctype;\n+}\n+\n+mod b {\n+    pub struct Atype<T, K>(T, K);\n+    pub struct Btype<T, K>(T, K);\n+    pub struct Ctype<T, K>(T, K);\n+}\n+\n+use b::*;\n \n fn main() {\n     let x: Atype<"}, {"sha": "1c99898bc8329fc03ec2699ff0cf5937cf9cdfab", "filename": "src/test/ui/diagnostic-width/long-E0308.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/long-E0308.rs:33:9\n+  --> $DIR/long-E0308.rs:44:9\n    |\n LL |        let x: Atype<\n    |  _____________-\n@@ -24,7 +24,7 @@ LL |  |     ))))))))))))))))))))))))))))));\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n \n error[E0308]: mismatched types\n-  --> $DIR/long-E0308.rs:46:26\n+  --> $DIR/long-E0308.rs:57:26\n    |\n LL |       ))))))))))))))))) == Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n    |  __________________________^\n@@ -40,7 +40,7 @@ LL | |     ))))))))))))))))))))))));\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n \n error[E0308]: mismatched types\n-  --> $DIR/long-E0308.rs:77:9\n+  --> $DIR/long-E0308.rs:88:9\n    |\n LL |       let x: Atype<\n    |  ____________-\n@@ -59,7 +59,7 @@ LL | |     > = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/long-E0308.rs:80:17\n+  --> $DIR/long-E0308.rs:91:17\n    |\n LL |       let _: () = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n    |  ____________--___^"}, {"sha": "87560c4c79735a9d83508be7d61b2e77a40c7893", "filename": "src/test/ui/disambiguate-identical-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fdisambiguate-identical-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fdisambiguate-identical-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisambiguate-identical-names.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/disambiguate-identical-names.rs:13:10\n    |\n LL |     test(&v);\n-   |     ---- ^^ expected struct `std::vec::Vec`, found struct `HashMap`\n+   |     ---- ^^ expected struct `Vec`, found struct `HashMap`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "a3f4d21ca94bd882f67d9fd074e2ecbf9fac18bb", "filename": "src/test/ui/dyn-star/no-implicit-dyn-star.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/no-implicit-dyn-star.rs:6:48\n    |\n LL |     dyn_star_foreign::require_dyn_star_display(1usize);\n-   |     ------------------------------------------ ^^^^^^ expected trait object `dyn std::fmt::Display`, found `usize`\n+   |     ------------------------------------------ ^^^^^^ expected trait object `dyn Display`, found `usize`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "83ee04d5a6c600c1b66be81974620cbf4545b219", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `foo_defn::Foo::Bar`\n   --> $DIR/auxiliary/foo_defn.rs:4:15\n    |\n LL |     type Bar: AsRef<()>;\n-   |               ^^^^^^^^^ required by this bound in `foo_defn::Foo::Bar`\n+   |               ^^^^^^^^^ required by this bound in `Foo::Bar`\n \n error: aborting due to previous error\n "}, {"sha": "095a1c6af37bcb5eb5946dbab8120bd91e4bca45", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99.., _] => {},\n-   |             ^^ expected struct `std::ops::Range`, found integer\n+   |             ^^ expected struct `Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "2ea3205dcd4acef72ba300757f41be06c3f0f11b", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99..] => {},\n-   |             ^^ expected struct `std::ops::Range`, found integer\n+   |             ^^ expected struct `Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "bbdf0c83f6203f073c9ba9f9876b239a5be4924a", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n-   |            ^ expected struct `std::ops::Range`, found integer\n+   |            ^ expected struct `Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -17,7 +17,7 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [..9, 99..100, _] => {},\n    |               ^^  --- this is of type `{integer}`\n    |               |\n-   |               expected struct `std::ops::Range`, found integer\n+   |               expected struct `Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -28,7 +28,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n-   |               --  ^^^ expected struct `std::ops::Range`, found integer\n+   |               --  ^^^ expected struct `Range`, found integer\n    |               |\n    |               this is of type `{integer}`\n    |"}, {"sha": "3ee26f74a787be7424d2f48ad65f0be1e8fb4260", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -15,7 +15,7 @@ LL |     type Foo = impl PartialEq<(Foo, i32)>;\n LL |         fn eq(&self, _other: &(Foo, i32)) -> bool {\n    |                              ^^^^^^^^^^^\n    |                              |\n-   |                              expected struct `a::Bar`, found opaque type\n+   |                              expected struct `Bar`, found opaque type\n    |                              help: change the parameter type to match the trait: `&(a::Bar, i32)`\n    |\n    = note: expected fn pointer `fn(&a::Bar, &(a::Bar, i32)) -> _`\n@@ -38,7 +38,7 @@ LL |     type Foo = impl PartialEq<(Foo, i32)>;\n LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n    |                              ^^^^^^^^^^^\n    |                              |\n-   |                              expected opaque type, found struct `b::Bar`\n+   |                              expected opaque type, found struct `Bar`\n    |                              help: change the parameter type to match the trait: `&(b::Foo, i32)`\n    |\n    = note: expected fn pointer `fn(&b::Bar, &(b::Foo, i32)) -> _`"}, {"sha": "22c4055f54be31f93e2049780682bdf5a5bf255b", "filename": "src/test/ui/issues/issue-23966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `fold`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(B, Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `fold`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::fold`\n \n error: aborting due to previous error\n "}, {"sha": "58d9b564427a723fd3583c954a26eae550fbbdd4", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -18,7 +18,7 @@ note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         Self: Sized + Iterator<Item = &'a T>,\n-   |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n+   |                                ^^^^^^^^^^^^ required by this bound in `Iterator::cloned`\n \n error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:13:10"}, {"sha": "c28986a29854b0dfa4a241115a2391e980bfe4ba", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         Self: Sized + Iterator<Item = &'a T>,\n-   |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n+   |                                ^^^^^^^^^^^^ required by this bound in `Iterator::cloned`\n \n error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:14"}, {"sha": "3188cd80cca8325037f4bf9f6a139b993b642021", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -26,7 +26,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ce38c3320bb354ac11ec64c6058de2cc14254788", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n   --> $DIR/issue-66923-show-error-for-correct-call.rs:12:14\n@@ -28,7 +28,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "544b1da178a3d96bfed1d5f654444b110d7d07d2", "filename": "src/test/ui/iterators/collect-into-array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to previous error\n "}, {"sha": "65ef124a46302ec2197356494f86495325f8d16e", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -19,7 +19,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                ^ required by this bound in `collect`\n+   |                ^ required by this bound in `Iterator::collect`\n \n error[E0277]: a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n   --> $DIR/collect-into-slice.rs:6:30\n@@ -34,7 +34,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5a46027dd52ba9c8fd50cb06bc0805267f01987b", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to previous error\n "}, {"sha": "a4b4968b7d24c98011d4184c5ad7af63024ab124", "filename": "src/test/ui/lazy-type-alias-impl-trait/recursion4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error[E0277]: a value of type `impl Debug` cannot be built from an iterator over elements of type `_`\n   --> $DIR/recursion4.rs:19:9\n@@ -26,7 +26,7 @@ note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bf78a079cdfa9fd766e270a488ae65ac63c299a0", "filename": "src/test/ui/let-else/let-else-deref-coercion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n LL |         let Bar(z) = x;\n    |             ^^^^^^   - this expression has type `&mut irrefutable::Foo`\n    |             |\n-   |             expected struct `irrefutable::Foo`, found struct `irrefutable::Bar`\n+   |             expected struct `Foo`, found struct `Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8d7b32e025a0864cfb60454c6eb0e2f3b3737de9", "filename": "src/test/ui/methods/issues/issue-90315.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:28:8\n    |\n LL |     if 1..(end + 1).is_empty() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n@@ -77,7 +77,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:34:8\n    |\n LL |     if 1..(end + 1).is_sorted() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n@@ -97,7 +97,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:40:21\n    |\n LL |     let _res: i32 = 3..6.take(2).sum();\n-   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `Range`\n    |               |\n    |               expected due to this\n    |\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:45:21\n    |\n LL |     let _sum: i32 = 3..6.sum();\n-   |               ---   ^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               ---   ^^^^^^^^^^ expected `i32`, found struct `Range`\n    |               |\n    |               expected due to this\n    |\n@@ -158,7 +158,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:62:8\n    |\n LL |     if 1..end.error_method() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`"}, {"sha": "a2bf2e8d5b7b330661a6ff1e753bcf7127a076eb", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -130,7 +130,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n   --> $DIR/closure-arg-count.rs:27:57\n@@ -146,7 +146,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:29:57\n@@ -163,7 +163,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n   --> $DIR/closure-arg-count.rs:32:45\n@@ -177,7 +177,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:35:10"}, {"sha": "f2e2a4c7fd5fe3671451333ade9f09ed547a89a1", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n@@ -28,7 +28,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n@@ -44,7 +44,7 @@ note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         F: FnMut(Self::Item) -> B,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b3509abbf84eb9a1841125543b1094e404fd48d3", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `filter`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         P: FnMut(&Self::Item) -> bool,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `filter`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::filter`\n \n error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55"}, {"sha": "fdd92cbfc44370ba06c3c492ca72851eb9c5b294", "filename": "src/test/ui/mismatched_types/wrap-suggestion-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n   --> $DIR/wrap-suggestion-privacy.rs:22:17\n    |\n LL |     needs_ready(Some(0));\n-   |     ----------- ^^^^^^^ expected struct `std::future::Ready`, found enum `Option`\n+   |     ----------- ^^^^^^^ expected struct `Ready`, found enum `Option`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "070dc844563c9aabca3407b3442117c824d224a3", "filename": "src/test/ui/range/issue-54505-no-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::Range { start: 0, end: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `std::ops::Range`\n+   |     |          expected reference, found struct `Range`\n    |     |          help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `std::ops::Range`\n+   |     |          expected reference, found struct `Range`\n    |     |          help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "9eec169404cdf2e72373789c1fc88fdb1f222d6e", "filename": "src/test/ui/range/issue-54505.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..1);\n    |     ---------- ^^^^\n    |     |          |\n-   |     |          expected reference, found struct `std::ops::Range`\n+   |     |          expected reference, found struct `Range`\n    |     |          help: consider borrowing here: `&(0..1)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "d08d9b1345d4ad516edfeedd474037174d985e6c", "filename": "src/test/ui/range/issue-73553-misinterp-range-literal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     demo(tell(1)..tell(10));\n    |     ---- ^^^^^^^^^^^^^^^^^\n    |     |    |\n-   |     |    expected reference, found struct `std::ops::Range`\n+   |     |    expected `&Range<usize>`, found struct `Range`\n    |     |    help: consider borrowing here: `&(tell(1)..tell(10))`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     demo(1..10);\n    |     ---- ^^^^^\n    |     |    |\n-   |     |    expected reference, found struct `std::ops::Range`\n+   |     |    expected `&Range<usize>`, found struct `Range`\n    |     |    help: consider borrowing here: `&(1..10)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "3028f8dbdbf771e947270f6fbfa874a561dcaf7f", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -1516,7 +1516,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:157:8\n    |\n LL |     if true..(let 0 = 0) {}\n-   |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1545,7 +1545,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |            |\n-   |            expected `bool`, found struct `std::ops::Range`\n+   |            expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1554,7 +1554,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:171:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1565,7 +1565,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |            |\n-   |            expected `bool`, found struct `std::ops::Range`\n+   |            expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1574,7 +1574,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:175:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1585,7 +1585,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n    |            |\n-   |            expected fn pointer, found struct `std::ops::Range`\n+   |            expected fn pointer, found struct `Range`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`\n@@ -1607,7 +1607,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:182:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1618,7 +1618,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n    |            |\n-   |            expected `bool`, found struct `std::ops::Range`\n+   |            expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1639,7 +1639,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:190:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1710,7 +1710,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:249:11\n    |\n LL |     while true..(let 0 = 0) {}\n-   |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1739,7 +1739,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |               |\n-   |               expected `bool`, found struct `std::ops::Range`\n+   |               expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1748,7 +1748,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:263:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1759,7 +1759,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |               |\n-   |               expected `bool`, found struct `std::ops::Range`\n+   |               expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1768,7 +1768,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:267:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1779,7 +1779,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n    |               |\n-   |               expected fn pointer, found struct `std::ops::Range`\n+   |               expected fn pointer, found struct `Range`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`\n@@ -1801,7 +1801,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:274:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1812,7 +1812,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n    |               |\n-   |               expected `bool`, found struct `std::ops::Range`\n+   |               expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1833,7 +1833,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:282:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1883,7 +1883,7 @@ error[E0308]: mismatched types\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |          |\n-   |          expected `bool`, found struct `std::ops::Range`\n+   |          expected `bool`, found struct `Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`"}, {"sha": "9b751d1b66c54d79547acb96e05a76068f2079e1", "filename": "src/test/ui/structs/struct-record-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n   --> $DIR/struct-record-suggestion.rs:23:20\n    |\n LL |     let q = B { b: 1..Default::default() };\n-   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found struct `std::ops::Range`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found struct `Range`\n    |\n    = note: expected type `u32`\n             found struct `std::ops::Range<{integer}>`"}, {"sha": "4cb595c32c0611ebad6ca6950c6eb56ebac0f969", "filename": "src/test/ui/suggestions/bound-suggestions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -80,7 +80,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Foo<T>: Sized {\n@@ -96,7 +96,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Bar: std::fmt::Display + Sized {\n@@ -112,7 +112,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Baz: Sized where Self: std::fmt::Display {\n@@ -128,7 +128,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Qux<T>: Sized where Self: std::fmt::Display {\n@@ -144,7 +144,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Bat<T>: std::fmt::Display + Sized {"}, {"sha": "34eaa8322c8701e70f451c34a510a4567055d18d", "filename": "src/test/ui/suggestions/unnecessary_dot_for_floating_point_literal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnecessary_dot_for_floating_point_literal.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/unnecessary_dot_for_floating_point_literal.rs:2:18\n    |\n LL |     let _: f64 = 0..10;\n-   |            ---   ^^^^^ expected `f64`, found struct `std::ops::Range`\n+   |            ---   ^^^^^ expected `f64`, found struct `Range`\n    |            |\n    |            expected due to this\n    |\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/unnecessary_dot_for_floating_point_literal.rs:5:18\n    |\n LL |     let _: f64 = std::ops::Range { start: 0, end: 1 };\n-   |            ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found struct `std::ops::Range`\n+   |            ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found struct `Range`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "9765fbd47ff465daf1afaf57991872a4cb6ed83e", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n@@ -36,7 +36,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n@@ -82,7 +82,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n   --> $DIR/suggest-where-clause.rs:31:20\n@@ -95,7 +95,7 @@ note: required by a bound in `std::mem::size_of`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n+   |                      ^ required by this bound in `size_of`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "fc85ec933155621972a0d939cfa0e981f1741dc1", "filename": "src/test/ui/type/type-ascription-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -55,7 +55,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-ascription-precedence.rs:53:5\n    |\n LL |     (S .. S): S;\n-   |     ^^^^^^^^ expected struct `S`, found struct `std::ops::Range`\n+   |     ^^^^^^^^ expected struct `S`, found struct `Range`\n    |\n    = note: expected struct `S`\n               found struct `std::ops::Range<S>`"}, {"sha": "876ac2c67ef3f34cf19718cff61a7a2bb65dc5a7", "filename": "src/test/ui/typeck/issue-13853.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Ftypeck%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad7131aa1d76f46af8994831b2f950c09d206cd/src%2Ftest%2Fui%2Ftypeck%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-13853.stderr?ref=3ad7131aa1d76f46af8994831b2f950c09d206cd", "patch": "@@ -5,7 +5,7 @@ LL |     fn nodes<'a, I: Iterator<Item=&'a N>>(&self) -> I\n    |                  - this type parameter              - expected `I` because of return type\n ...\n LL |         self.iter()\n-   |         ^^^^^^^^^^^ expected type parameter `I`, found struct `std::slice::Iter`\n+   |         ^^^^^^^^^^^ expected type parameter `I`, found struct `Iter`\n    |\n    = note: expected type parameter `I`\n                       found struct `std::slice::Iter<'_, N>`"}]}