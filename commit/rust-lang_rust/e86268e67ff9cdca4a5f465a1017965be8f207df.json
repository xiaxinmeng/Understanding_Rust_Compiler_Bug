{"sha": "e86268e67ff9cdca4a5f465a1017965be8f207df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NjI2OGU2N2ZmOWNkY2E0YTVmNDY1YTEwMTc5NjViZThmMjA3ZGY=", "commit": {"author": {"name": "Andrea Lattuada", "email": "andrea.lattuada@inf.ethz.ch", "date": "2018-05-27T13:45:01Z"}, "committer": {"name": "Andrea Lattuada", "email": "andrea.lattuada@inf.ethz.ch", "date": "2018-05-28T12:48:34Z"}, "message": "Add support for ExprCall in clippy::author", "tree": {"sha": "6483ed632b83fb31ced435d51a8bb89192b46893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6483ed632b83fb31ced435d51a8bb89192b46893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86268e67ff9cdca4a5f465a1017965be8f207df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86268e67ff9cdca4a5f465a1017965be8f207df", "html_url": "https://github.com/rust-lang/rust/commit/e86268e67ff9cdca4a5f465a1017965be8f207df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86268e67ff9cdca4a5f465a1017965be8f207df/comments", "author": {"login": "utaal", "id": 791335, "node_id": "MDQ6VXNlcjc5MTMzNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/791335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/utaal", "html_url": "https://github.com/utaal", "followers_url": "https://api.github.com/users/utaal/followers", "following_url": "https://api.github.com/users/utaal/following{/other_user}", "gists_url": "https://api.github.com/users/utaal/gists{/gist_id}", "starred_url": "https://api.github.com/users/utaal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/utaal/subscriptions", "organizations_url": "https://api.github.com/users/utaal/orgs", "repos_url": "https://api.github.com/users/utaal/repos", "events_url": "https://api.github.com/users/utaal/events{/privacy}", "received_events_url": "https://api.github.com/users/utaal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "utaal", "id": 791335, "node_id": "MDQ6VXNlcjc5MTMzNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/791335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/utaal", "html_url": "https://github.com/utaal", "followers_url": "https://api.github.com/users/utaal/followers", "following_url": "https://api.github.com/users/utaal/following{/other_user}", "gists_url": "https://api.github.com/users/utaal/gists{/gist_id}", "starred_url": "https://api.github.com/users/utaal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/utaal/subscriptions", "organizations_url": "https://api.github.com/users/utaal/orgs", "repos_url": "https://api.github.com/users/utaal/repos", "events_url": "https://api.github.com/users/utaal/events{/privacy}", "received_events_url": "https://api.github.com/users/utaal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1e06d638ccd369eb3fda74cc862de828877b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1e06d638ccd369eb3fda74cc862de828877b4d", "html_url": "https://github.com/rust-lang/rust/commit/0d1e06d638ccd369eb3fda74cc862de828877b4d"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "1f802bb473392ce45896b8c6c85a3267b7647cae", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e86268e67ff9cdca4a5f465a1017965be8f207df/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86268e67ff9cdca4a5f465a1017965be8f207df/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=e86268e67ff9cdca4a5f465a1017965be8f207df", "patch": "@@ -210,9 +210,17 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     self.visit_expr(element);\n                 }\n             },\n-            Expr_::ExprCall(ref _func, ref _args) => {\n-                println!(\"Call(ref func, ref args) = {};\", current);\n-                println!(\"    // unimplemented: `ExprCall` is not further destructured at the moment\");\n+            Expr_::ExprCall(ref func, ref args) => {\n+                let func_pat = self.next(\"func\");\n+                let args_pat = self.next(\"args\");\n+                println!(\"Call(ref {}, ref {}) = {};\", func_pat, args_pat, current);\n+                self.current = func_pat;\n+                self.visit_expr(func);\n+                println!(\"    if {}.len() == {};\", args_pat, args.len());\n+                for (i, arg) in args.iter().enumerate() {\n+                    self.current = format!(\"{}[{}]\", args_pat, i);\n+                    self.visit_expr(arg);\n+                }\n             },\n             Expr_::ExprMethodCall(ref _method_name, ref _generics, ref _args) => {\n                 println!(\"MethodCall(ref method_name, ref generics, ref args) = {};\", current);"}]}