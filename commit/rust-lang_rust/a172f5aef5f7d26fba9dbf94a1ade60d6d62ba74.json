{"sha": "a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzJmNWFlZjVmN2QyNmZiYTlkYmY5NGExYWRlNjBkNmQ2MmJhNzQ=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-02-28T22:33:46Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-02-28T22:33:46Z"}, "message": "Declare wrappers to the native functions and use those to create\nthe fn/closure pairs.\n\nDisable native2.rs for now as we are not yet defining the wrappers and it\nfails to link.", "tree": {"sha": "af9847dd7baea9053bf32a6057f3ae4c0a071cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af9847dd7baea9053bf32a6057f3ae4c0a071cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74", "html_url": "https://github.com/rust-lang/rust/commit/a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74/comments", "author": null, "committer": null, "parents": [{"sha": "4ac4d03f0cac829650f7a297162d070de53c6455", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac4d03f0cac829650f7a297162d070de53c6455", "html_url": "https://github.com/rust-lang/rust/commit/4ac4d03f0cac829650f7a297162d070de53c6455"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "6659297e8dfbf8ad7e44a6dfc146d851b6012a2b", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74", "patch": "@@ -491,6 +491,7 @@ TEST_XFAILS_RUSTC := $(CONST_TAG_XFAILS) \\\n                         mlist-cycle.rs \\\n                         mlist.rs \\\n                         mutable-alias-vec.rs \\\n+                        native2.rs \\\n                         native-opaque-type.rs \\\n                         obj-as.rs \\\n                         obj-dtor.rs \\"}, {"sha": "189c742cee6f9ea5f124e79c0bb36e74b47deabe", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a172f5aef5f7d26fba9dbf94a1ade60d6d62ba74", "patch": "@@ -4395,6 +4395,12 @@ fn decl_fn_and_pair(@crate_ctxt cx,\n \n     // Declare the global constant pair that points to it.\n     let str ps = cx.names.next(\"_rust_\" + kind + \"_pair\") + sep() + name;\n+\n+    register_fn_pair(cx, ps, llpairty, llfn, id);\n+}\n+\n+fn register_fn_pair(@crate_ctxt cx, str ps, TypeRef llpairty, ValueRef llfn,\n+                    ast.def_id id) {\n     let ValueRef gvar = llvm.LLVMAddGlobal(cx.llmod, llpairty,\n                                            _str.buf(ps));\n     auto pair = C_struct(vec(llfn,\n@@ -4410,16 +4416,34 @@ fn decl_fn_and_pair(@crate_ctxt cx,\n     cx.fn_pairs.insert(id, gvar);\n }\n \n+fn native_fn_wrapper_type(@crate_ctxt cx, &ast.ann ann) -> TypeRef {\n+    auto x = node_ann_type(cx, ann);\n+    alt (x.struct) {\n+        case (ty.ty_native_fn(?abi, ?args, ?out)) {\n+            ret type_of_fn(cx, ast.proto_fn, args, out);\n+        }\n+    }\n+    fail;\n+}\n+\n fn decl_native_fn_and_pair(@crate_ctxt cx,\n                            str name,\n                            &ast.ann ann,\n                            ast.def_id id) {\n+    // Declare the wrapper.\n+    auto wrapper_type = native_fn_wrapper_type(cx, ann);\n+    let str s = cx.names.next(\"_rust_wrapper\") + sep() + name;\n+    let ValueRef wrapper_fn = decl_fastcall_fn(cx.llmod, s, wrapper_type);\n \n-    auto llpairty = node_type(cx, ann);\n-    auto llfty = get_pair_fn_ty(llpairty);\n+    // Declare the global constant pair that points to it.\n+    auto wrapper_pair_type = T_fn_pair(cx.tn, wrapper_type);\n+    let str ps = cx.names.next(\"_rust_wrapper_pair\") + sep() + name;\n \n-    let ValueRef llfn = decl_cdecl_fn(cx.llmod, name, llfty);\n-    cx.item_ids.insert(id, llfn);\n+    register_fn_pair(cx, ps, wrapper_pair_type, wrapper_fn, id);\n+\n+    // Declare the function itself.\n+    auto llfty = get_pair_fn_ty(node_type(cx, ann));\n+    decl_cdecl_fn(cx.llmod, name, llfty);\n }\n \n fn collect_native_item(&@crate_ctxt cx, @ast.native_item i) -> @crate_ctxt {"}]}