{"sha": "200fdaac777b8c0a4d5cf2be86f639c61358d518", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMGZkYWFjNzc3YjhjMGE0ZDVjZjJiZTg2ZjYzOWM2MTM1OGQ1MTg=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-18T23:01:37Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-21T16:40:47Z"}, "message": "Specify the kind of the item for E0121", "tree": {"sha": "05844038c8d64b45d411c515819ac94e7b5a41f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05844038c8d64b45d411c515819ac94e7b5a41f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200fdaac777b8c0a4d5cf2be86f639c61358d518", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmDQwQ8ACgkQZSV3NIU3\nbZJJsg//bkYuiDke1bbmdpGt1wxfnn2RZB0gezOsEO9/+WDxQBluHeQEOOkK1xa/\nCHO/9vRd4MMxO7B8Nxz+A60UoLT2O8jZ2QHuNSF43GUojxvydiTTD7fgJLfyShp4\nL3pu0HWhH7z66Z2Y/IYsQP+WKbjw8U7zRt+dS+zp95oKPVD15XrsBejNWMk7PJpj\nT8Xsg4QAJaPjlpANaMfUUnMs4xZYxleDpcjUme7xu0rttrgBJ4VVzOhr7I/tdaDd\nZQDZprJnnySu8PLZr4NVmKP08URlrT3fxB0elQ9j2UYYWosJ91wU7JwOPzbsdkpD\n/WEMVaRle/xDtYHnJt+omTGdflhA1n1wIVWMC229p/5yWYEoGS+4cPJSf9u3MCDG\nB1todZt00RE24yw4/PmEuenZe9/NwVKirgry4y9JV0EaOMlb4G8boKhaHslgm2X+\nXWu9UZR9WRUxFVGzqevL9km9chDHy2JE37AYA5RkrbmEDt/ezhL20TNOXGI3ohps\nMQOL4XDm9LfnVzE1+Htjefo4oub04pD9+uqt1o3hI1N7oj26Hpugc50M84GotK2I\n8CJN5T34nDDSu1BxJ7IeXufS1vbV35rXU/V0HN9gBKMzkNZ64cdHmRqwSuL4owkA\nay4SeObMYaIhmnVBvRENHx3HC9cGPsdO5bJWLqs23qxwSU2nff8=\n=8Lh5\n-----END PGP SIGNATURE-----", "payload": "tree 05844038c8d64b45d411c515819ac94e7b5a41f8\nparent 3824017f8e57ce9dac6d69a1ce07f41c7034f82d\nauthor Deadbeef <ent3rm4n@gmail.com> 1624057297 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1624293647 +0800\n\nSpecify the kind of the item for E0121\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200fdaac777b8c0a4d5cf2be86f639c61358d518", "html_url": "https://github.com/rust-lang/rust/commit/200fdaac777b8c0a4d5cf2be86f639c61358d518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200fdaac777b8c0a4d5cf2be86f639c61358d518/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3824017f8e57ce9dac6d69a1ce07f41c7034f82d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3824017f8e57ce9dac6d69a1ce07f41c7034f82d", "html_url": "https://github.com/rust-lang/rust/commit/3824017f8e57ce9dac6d69a1ce07f41c7034f82d"}], "stats": {"total": 100, "additions": 81, "deletions": 19}, "files": [{"sha": "a7ce92ea57917079852b5bf7660d1e10c85bcda4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/200fdaac777b8c0a4d5cf2be86f639c61358d518/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200fdaac777b8c0a4d5cf2be86f639c61358d518/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=200fdaac777b8c0a4d5cf2be86f639c61358d518", "patch": "@@ -2815,6 +2815,27 @@ impl ItemKind<'_> {\n             _ => return None,\n         })\n     }\n+\n+    pub fn descr(&self) -> &'static str {\n+        match self {\n+            ItemKind::ExternCrate(..) => \"extern crate\",\n+            ItemKind::Use(..) => \"`use` import\",\n+            ItemKind::Static(..) => \"static item\",\n+            ItemKind::Const(..) => \"constant item\",\n+            ItemKind::Fn(..) => \"function\",\n+            ItemKind::Mod(..) => \"module\",\n+            ItemKind::ForeignMod { .. } => \"extern block\",\n+            ItemKind::GlobalAsm(..) => \"global asm item\",\n+            ItemKind::TyAlias(..) => \"type alias\",\n+            ItemKind::OpaqueTy(..) => \"opaque type\",\n+            ItemKind::Enum(..) => \"enum\",\n+            ItemKind::Struct(..) => \"struct\",\n+            ItemKind::Union(..) => \"union\",\n+            ItemKind::Trait(..) => \"trait\",\n+            ItemKind::TraitAlias(..) => \"trait alias\",\n+            ItemKind::Impl(..) => \"implementation\",\n+        }\n+    }\n }\n \n /// A reference from an trait to one of its associated items. This"}, {"sha": "10a7d69d5d3b7bd2133716761ec48c3a90509669", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/200fdaac777b8c0a4d5cf2be86f639c61358d518/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200fdaac777b8c0a4d5cf2be86f639c61358d518/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=200fdaac777b8c0a4d5cf2be86f639c61358d518", "patch": "@@ -2418,6 +2418,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 visitor.0,\n                 true,\n                 hir_ty,\n+                \"function\",\n             );\n         }\n "}, {"sha": "f741606370fbfbb5215476b81b9522b6b4ac4afc", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/200fdaac777b8c0a4d5cf2be86f639c61358d518/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200fdaac777b8c0a4d5cf2be86f639c61358d518/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=200fdaac777b8c0a4d5cf2be86f639c61358d518", "patch": "@@ -145,6 +145,7 @@ crate fn placeholder_type_error(\n     placeholder_types: Vec<Span>,\n     suggest: bool,\n     hir_ty: Option<&hir::Ty<'_>>,\n+    kind: &'static str,\n ) {\n     if placeholder_types.is_empty() {\n         return;\n@@ -174,7 +175,7 @@ crate fn placeholder_type_error(\n         ));\n     }\n \n-    let mut err = bad_placeholder_type(tcx, placeholder_types);\n+    let mut err = bad_placeholder_type(tcx, placeholder_types, kind);\n \n     // Suggest, but only if it is not a function in const or static\n     if suggest {\n@@ -236,7 +237,15 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     let mut visitor = PlaceholderHirTyCollector::default();\n     visitor.visit_item(item);\n \n-    placeholder_type_error(tcx, Some(generics.span), generics.params, visitor.0, suggest, None);\n+    placeholder_type_error(\n+        tcx,\n+        Some(generics.span),\n+        generics.params,\n+        visitor.0,\n+        suggest,\n+        None,\n+        item.kind.descr(),\n+    );\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n@@ -302,13 +311,17 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n fn bad_placeholder_type(\n     tcx: TyCtxt<'tcx>,\n     mut spans: Vec<Span>,\n+    kind: &'static str,\n ) -> rustc_errors::DiagnosticBuilder<'tcx> {\n+    let kind = if kind.ends_with('s') { format!(\"{}es\", kind) } else { format!(\"{}s\", kind) };\n+\n     spans.sort();\n     let mut err = struct_span_err!(\n         tcx.sess,\n         spans.clone(),\n         E0121,\n-        \"the type placeholder `_` is not allowed within types on item signatures\",\n+        \"the type placeholder `_` is not allowed within types on item signatures for {}\",\n+        kind\n     );\n     for span in spans {\n         err.span_label(span, \"not allowed in type signatures\");\n@@ -382,7 +395,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n-        bad_placeholder_type(self.tcx(), vec![span]).emit();\n+        bad_placeholder_type(self.tcx(), vec![span], \"generic\").emit();\n         // Typeck doesn't expect erased regions to be returned from `type_of`.\n         let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n@@ -746,7 +759,15 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n                     hir::ForeignItemKind::Static(..) => {\n                         let mut visitor = PlaceholderHirTyCollector::default();\n                         visitor.visit_foreign_item(item);\n-                        placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+                        placeholder_type_error(\n+                            tcx,\n+                            None,\n+                            &[],\n+                            visitor.0,\n+                            false,\n+                            None,\n+                            \"static variable\",\n+                        );\n                     }\n                     _ => (),\n                 }\n@@ -846,7 +867,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             // Account for `const C: _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"constant\");\n         }\n \n         hir::TraitItemKind::Type(_, Some(_)) => {\n@@ -855,7 +876,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             // Account for `type T = _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"associated type\");\n         }\n \n         hir::TraitItemKind::Type(_, None) => {\n@@ -865,7 +886,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n \n-            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"associated type\");\n         }\n     };\n \n@@ -887,7 +908,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::ImplItemId) {\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_impl_item(impl_item);\n \n-            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"associated type\");\n         }\n         hir::ImplItemKind::Const(..) => {}\n     }\n@@ -1711,7 +1732,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n                     let mut visitor = PlaceholderHirTyCollector::default();\n                     visitor.visit_ty(ty);\n-                    let mut diag = bad_placeholder_type(tcx, visitor.0);\n+                    let mut diag = bad_placeholder_type(tcx, visitor.0, \"return type\");\n                     let ret_ty = fn_sig.output();\n                     if ret_ty != tcx.ty_error() {\n                         if !ret_ty.is_closure() {"}, {"sha": "78fa8074a64cf1d0605507c24990a8b2f335cc3f", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/200fdaac777b8c0a4d5cf2be86f639c61358d518/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200fdaac777b8c0a4d5cf2be86f639c61358d518/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=200fdaac777b8c0a4d5cf2be86f639c61358d518", "patch": "@@ -285,7 +285,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             TraitItemKind::Const(ref ty, body_id) => body_id\n                 .and_then(|body_id| {\n                     if is_suggestable_infer_ty(ty) {\n-                        Some(infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident))\n+                        Some(infer_placeholder_type(\n+                            tcx, def_id, body_id, ty.span, item.ident, \"constant\",\n+                        ))\n                     } else {\n                         None\n                     }\n@@ -304,7 +306,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n             ImplItemKind::Const(ref ty, body_id) => {\n                 if is_suggestable_infer_ty(ty) {\n-                    infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n+                    infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident, \"constant\")\n                 } else {\n                     icx.to_ty(ty)\n                 }\n@@ -320,9 +322,25 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Item(item) => {\n             match item.kind {\n-                ItemKind::Static(ref ty, .., body_id) | ItemKind::Const(ref ty, body_id) => {\n+                ItemKind::Static(ref ty, .., body_id) => {\n                     if is_suggestable_infer_ty(ty) {\n-                        infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n+                        infer_placeholder_type(\n+                            tcx,\n+                            def_id,\n+                            body_id,\n+                            ty.span,\n+                            item.ident,\n+                            \"static variable\",\n+                        )\n+                    } else {\n+                        icx.to_ty(ty)\n+                    }\n+                }\n+                ItemKind::Const(ref ty, body_id) => {\n+                    if is_suggestable_infer_ty(ty) {\n+                        infer_placeholder_type(\n+                            tcx, def_id, body_id, ty.span, item.ident, \"constant\",\n+                        )\n                     } else {\n                         icx.to_ty(ty)\n                     }\n@@ -742,13 +760,14 @@ fn let_position_impl_trait_type(tcx: TyCtxt<'_>, opaque_ty_id: LocalDefId) -> Ty\n     concrete_ty\n }\n \n-fn infer_placeholder_type(\n-    tcx: TyCtxt<'_>,\n+fn infer_placeholder_type<'a>(\n+    tcx: TyCtxt<'a>,\n     def_id: LocalDefId,\n     body_id: hir::BodyId,\n     span: Span,\n     item_ident: Ident,\n-) -> Ty<'_> {\n+    kind: &'static str,\n+) -> Ty<'a> {\n     // Attempts to make the type nameable by turning FnDefs into FnPtrs.\n     struct MakeNameable<'tcx> {\n         success: bool,\n@@ -802,7 +821,7 @@ fn infer_placeholder_type(\n             if let Some(sugg_ty) = sugg_ty {\n                 err.span_suggestion(\n                     span,\n-                    \"provide a type for the item\",\n+                    &format!(\"provide a type for the {item}\", item = kind),\n                     format!(\"{}: {}\", item_ident, sugg_ty),\n                     Applicability::MachineApplicable,\n                 );\n@@ -816,7 +835,7 @@ fn infer_placeholder_type(\n             err.emit_unless(ty.references_error());\n         }\n         None => {\n-            let mut diag = bad_placeholder_type(tcx, vec![span]);\n+            let mut diag = bad_placeholder_type(tcx, vec![span], kind);\n \n             if !ty.references_error() {\n                 let mut mk_nameable = MakeNameable::new(tcx);"}]}