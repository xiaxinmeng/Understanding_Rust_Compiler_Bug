{"sha": "1fab57491dbdb739ec940be4169013dc0e9982e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYWI1NzQ5MWRiZGI3MzllYzk0MGJlNDE2OTAxM2RjMGU5OTgyZTE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-30T11:20:13Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-31T10:38:05Z"}, "message": "bootstrap: change the dist outputs to GeneratedTarball\n\nThe struct will allow to store more context on the generated tarballs.", "tree": {"sha": "ae4c7ba1582bc14374c0c34903a826a4fdcfaed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4c7ba1582bc14374c0c34903a826a4fdcfaed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fab57491dbdb739ec940be4169013dc0e9982e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/tqg0ACgkQPgar6Auq\n8ZxAXA/8CpQdtfywDlv6AIjfWX4xoB7FriD+R3blQks4TJqVvYj4/7bNlUnKy6CB\ncPQkIem21rSCwx2kR8YDjm2v5iv94SeWTgclBJENprpYlOMhHIbjQdNkb2mPSWzK\nudRubNVpZmppct4SjZYr9gWGJ797zoLLmrIfx3vS9iOuSTycjnXzpCr1Tqk85eFF\nrpXUQ2VsxY4cc1FqlRV35pstRAZ6M+2rDw2J/MLKxBut1I5dQwRqECUlT1Er9ZCP\n0uIWdP2swhMha/s0vsrLrVh2rYYgkcrhL98STk7qfZZapWuZA83Pkn9Btfb8aMth\nOpxl4Zy5gzX/oXyCvsSQwxIw5j/FFFl5MzulRca/kemaHS3BEm+kGIb/gl/3lVjS\nLfmSrsUZMEtPeSUqeQ9vDrt5JgcNXvEA450Pwymer8yo3ppGPYh0tHGAaZpGDvG0\nq/HQyVX8t3B5f0ZMaM82dDiIXbdlSB8zPMEaWChB+kD57SI3Yw+P1uAIkNfoHvgV\n7W/+fboqpRIxE2RcfW/uGDdaQmCxHrnbWVq19YpxmVqMzGYLsOKOvk1HNdqjt30W\nJvdl0/GBH0I396Klhlli2vUcmBqeZxrv+AVPhiHE44YzRAW5tfqvMXEEkdechvom\nTXSAxmNuL1vfanUfsiE3BTyloijak0LB/q9fIc4jWwRHt13I1ek=\n=Wau9\n-----END PGP SIGNATURE-----", "payload": "tree ae4c7ba1582bc14374c0c34903a826a4fdcfaed4\nparent aac429ffd312f7d1ee7a8c2a78c68a1839743b26\nauthor Pietro Albini <pietro@pietroalbini.org> 1609327213 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1609411085 +0100\n\nbootstrap: change the dist outputs to GeneratedTarball\n\nThe struct will allow to store more context on the generated tarballs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fab57491dbdb739ec940be4169013dc0e9982e1", "html_url": "https://github.com/rust-lang/rust/commit/1fab57491dbdb739ec940be4169013dc0e9982e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fab57491dbdb739ec940be4169013dc0e9982e1/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aac429ffd312f7d1ee7a8c2a78c68a1839743b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/aac429ffd312f7d1ee7a8c2a78c68a1839743b26", "html_url": "https://github.com/rust-lang/rust/commit/aac429ffd312f7d1ee7a8c2a78c68a1839743b26"}], "stats": {"total": 112, "additions": 64, "deletions": 48}, "files": [{"sha": "a6957e410cd18c0900e4e5e947ec93e5ce9cc90a", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1fab57491dbdb739ec940be4169013dc0e9982e1/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab57491dbdb739ec940be4169013dc0e9982e1/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=1fab57491dbdb739ec940be4169013dc0e9982e1", "patch": "@@ -19,7 +19,7 @@ use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n use crate::config::TargetSelection;\n-use crate::tarball::{OverlayKind, Tarball};\n+use crate::tarball::{GeneratedTarball, OverlayKind, Tarball};\n use crate::tool::{self, Tool};\n use crate::util::{exe, is_dylib, timeit};\n use crate::{Compiler, DependencyType, Mode, LLVM_TOOLS};\n@@ -51,7 +51,7 @@ pub struct Docs {\n }\n \n impl Step for Docs {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -63,7 +63,7 @@ impl Step for Docs {\n     }\n \n     /// Builds the `rust-docs` installer component.\n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n         if !builder.config.docs {\n             return None;\n@@ -86,7 +86,7 @@ pub struct RustcDocs {\n }\n \n impl Step for RustcDocs {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -98,7 +98,7 @@ impl Step for RustcDocs {\n     }\n \n     /// Builds the `rustc-docs` installer component.\n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n         if !builder.config.compiler_docs {\n             return None;\n@@ -267,7 +267,7 @@ pub struct Mingw {\n }\n \n impl Step for Mingw {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -282,7 +282,7 @@ impl Step for Mingw {\n     ///\n     /// This contains all the bits and pieces to run the MinGW Windows targets\n     /// without any extra installed software (e.g., we bundle gcc, libraries, etc).\n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n         if !host.contains(\"pc-windows-gnu\") {\n             return None;\n@@ -307,7 +307,7 @@ pub struct Rustc {\n }\n \n impl Step for Rustc {\n-    type Output = PathBuf;\n+    type Output = GeneratedTarball;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n@@ -321,7 +321,7 @@ impl Step for Rustc {\n     }\n \n     /// Creates the `rustc` installer component.\n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n         let compiler = self.compiler;\n         let host = self.compiler.host;\n \n@@ -555,7 +555,7 @@ pub struct Std {\n }\n \n impl Step for Std {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -573,7 +573,7 @@ impl Step for Std {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n \n@@ -601,7 +601,7 @@ pub struct RustcDev {\n }\n \n impl Step for RustcDev {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n@@ -620,7 +620,7 @@ impl Step for RustcDev {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n         if skip_host_target_lib(builder, compiler) {\n@@ -660,7 +660,7 @@ pub struct Analysis {\n }\n \n impl Step for Analysis {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -683,7 +683,7 @@ impl Step for Analysis {\n     }\n \n     /// Creates a tarball of save-analysis metadata, if available.\n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n@@ -796,7 +796,7 @@ pub struct Src;\n \n impl Step for Src {\n     /// The output path of the src installer tarball\n-    type Output = PathBuf;\n+    type Output = GeneratedTarball;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n@@ -809,7 +809,7 @@ impl Step for Src {\n     }\n \n     /// Creates the `rust-src` installer component\n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n         let tarball = Tarball::new_targetless(builder, \"rust-src\");\n \n         // A lot of tools expect the rust-src component to be entirely in this directory, so if you\n@@ -848,7 +848,7 @@ pub struct PlainSourceTarball;\n \n impl Step for PlainSourceTarball {\n     /// Produces the location of the tarball generated\n-    type Output = PathBuf;\n+    type Output = GeneratedTarball;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n@@ -862,7 +862,7 @@ impl Step for PlainSourceTarball {\n     }\n \n     /// Creates the plain source tarball\n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n         let tarball = Tarball::new(builder, \"rustc\", \"src\");\n         let plain_dst_src = tarball.image_dir();\n \n@@ -941,7 +941,7 @@ pub struct Cargo {\n }\n \n impl Step for Cargo {\n-    type Output = PathBuf;\n+    type Output = GeneratedTarball;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -959,7 +959,7 @@ impl Step for Cargo {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n         let compiler = self.compiler;\n         let target = self.target;\n \n@@ -995,7 +995,7 @@ pub struct Rls {\n }\n \n impl Step for Rls {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -1013,7 +1013,7 @@ impl Step for Rls {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n@@ -1041,7 +1041,7 @@ pub struct RustAnalyzer {\n }\n \n impl Step for RustAnalyzer {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -1059,7 +1059,7 @@ impl Step for RustAnalyzer {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n@@ -1090,7 +1090,7 @@ pub struct Clippy {\n }\n \n impl Step for Clippy {\n-    type Output = PathBuf;\n+    type Output = GeneratedTarball;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -1108,7 +1108,7 @@ impl Step for Clippy {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n@@ -1140,7 +1140,7 @@ pub struct Miri {\n }\n \n impl Step for Miri {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -1158,7 +1158,7 @@ impl Step for Miri {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n@@ -1193,7 +1193,7 @@ pub struct Rustfmt {\n }\n \n impl Step for Rustfmt {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -1211,7 +1211,7 @@ impl Step for Rustfmt {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n \n@@ -1870,7 +1870,7 @@ pub struct LlvmTools {\n }\n \n impl Step for LlvmTools {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -1881,7 +1881,7 @@ impl Step for LlvmTools {\n         run.builder.ensure(LlvmTools { target: run.target });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let target = self.target;\n         assert!(builder.config.extended);\n \n@@ -1924,7 +1924,7 @@ pub struct RustDev {\n }\n \n impl Step for RustDev {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n@@ -1936,7 +1936,7 @@ impl Step for RustDev {\n         run.builder.ensure(RustDev { target: run.target });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let target = self.target;\n \n         /* run only if llvm-config isn't used */\n@@ -1989,7 +1989,7 @@ pub struct BuildManifest {\n }\n \n impl Step for BuildManifest {\n-    type Output = PathBuf;\n+    type Output = GeneratedTarball;\n     const DEFAULT: bool = false;\n     const ONLY_HOSTS: bool = true;\n \n@@ -2001,7 +2001,7 @@ impl Step for BuildManifest {\n         run.builder.ensure(BuildManifest { target: run.target });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n         let build_manifest = builder.tool_exe(Tool::BuildManifest);\n \n         let tarball = Tarball::new(builder, \"build-manifest\", &self.target.triple);\n@@ -2021,7 +2021,7 @@ pub struct ReproducibleArtifacts {\n }\n \n impl Step for ReproducibleArtifacts {\n-    type Output = Option<PathBuf>;\n+    type Output = Option<GeneratedTarball>;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n "}, {"sha": "06a113ed035eff558468f93a86742a8587977ad8", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1fab57491dbdb739ec940be4169013dc0e9982e1/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab57491dbdb739ec940be4169013dc0e9982e1/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=1fab57491dbdb739ec940be4169013dc0e9982e1", "patch": "@@ -200,7 +200,7 @@ impl<'a> Tarball<'a> {\n         self.temp_dir.clone()\n     }\n \n-    pub(crate) fn generate(self) -> PathBuf {\n+    pub(crate) fn generate(self) -> GeneratedTarball {\n         let mut component_name = self.component.clone();\n         if self.is_preview {\n             component_name.push_str(\"-preview\");\n@@ -224,20 +224,20 @@ impl<'a> Tarball<'a> {\n         })\n     }\n \n-    pub(crate) fn combine(self, tarballs: &[PathBuf]) {\n-        let mut input_tarballs = tarballs[0].as_os_str().to_os_string();\n+    pub(crate) fn combine(self, tarballs: &[GeneratedTarball]) -> GeneratedTarball {\n+        let mut input_tarballs = tarballs[0].path.as_os_str().to_os_string();\n         for tarball in &tarballs[1..] {\n             input_tarballs.push(\",\");\n-            input_tarballs.push(tarball);\n+            input_tarballs.push(&tarball.path);\n         }\n \n         self.run(|this, cmd| {\n             cmd.arg(\"combine\").arg(\"--input-tarballs\").arg(input_tarballs);\n             this.non_bare_args(cmd);\n-        });\n+        })\n     }\n \n-    pub(crate) fn bare(self) -> PathBuf {\n+    pub(crate) fn bare(self) -> GeneratedTarball {\n         // Bare tarballs should have the top level directory match the package\n         // name, not \"image\". We rename the image directory just before passing\n         // into rust-installer.\n@@ -273,7 +273,7 @@ impl<'a> Tarball<'a> {\n             .arg(crate::dist::distdir(self.builder));\n     }\n \n-    fn run(self, build_cli: impl FnOnce(&Tarball<'a>, &mut Command)) -> PathBuf {\n+    fn run(self, build_cli: impl FnOnce(&Tarball<'a>, &mut Command)) -> GeneratedTarball {\n         t!(std::fs::create_dir_all(&self.overlay_dir));\n         self.builder.create(&self.overlay_dir.join(\"version\"), &self.overlay.version(self.builder));\n         if let Some(sha) = self.builder.rust_sha() {\n@@ -307,6 +307,19 @@ impl<'a> Tarball<'a> {\n             .map(|s| s.as_str())\n             .unwrap_or(\"gz\");\n \n-        crate::dist::distdir(self.builder).join(format!(\"{}.tar.{}\", package_name, ext))\n+        GeneratedTarball {\n+            path: crate::dist::distdir(self.builder).join(format!(\"{}.tar.{}\", package_name, ext)),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct GeneratedTarball {\n+    path: PathBuf,\n+}\n+\n+impl GeneratedTarball {\n+    pub(crate) fn tarball(&self) -> &Path {\n+        &self.path\n     }\n }"}, {"sha": "33e252a63c9a59728286bdced37d9d1d0515a62a", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fab57491dbdb739ec940be4169013dc0e9982e1/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab57491dbdb739ec940be4169013dc0e9982e1/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1fab57491dbdb739ec940be4169013dc0e9982e1", "patch": "@@ -1963,7 +1963,7 @@ impl Step for Distcheck {\n \n         let mut cmd = Command::new(\"tar\");\n         cmd.arg(\"-xf\")\n-            .arg(builder.ensure(dist::PlainSourceTarball))\n+            .arg(builder.ensure(dist::PlainSourceTarball).tarball())\n             .arg(\"--strip-components=1\")\n             .current_dir(&dir);\n         builder.run(&mut cmd);\n@@ -1986,7 +1986,10 @@ impl Step for Distcheck {\n         t!(fs::create_dir_all(&dir));\n \n         let mut cmd = Command::new(\"tar\");\n-        cmd.arg(\"-xf\").arg(builder.ensure(dist::Src)).arg(\"--strip-components=1\").current_dir(&dir);\n+        cmd.arg(\"-xf\")\n+            .arg(builder.ensure(dist::Src).tarball())\n+            .arg(\"--strip-components=1\")\n+            .current_dir(&dir);\n         builder.run(&mut cmd);\n \n         let toml = dir.join(\"rust-src/lib/rustlib/src/rust/library/std/Cargo.toml\");"}]}