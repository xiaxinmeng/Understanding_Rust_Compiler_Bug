{"sha": "d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzY2VjYmY2ZjZhYWViN2RlZmRmYjJlNWQ5ZTJiODJkMDJmYTc1Mjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-13T14:17:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-13T14:17:07Z"}, "message": "Support UFCS style calls to a method defined in `Trait` where `Self`\nis bound to a trait object. Fixes #20676.", "tree": {"sha": "956775208a0ab58a4378bc5d218e4bd00c6de2a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/956775208a0ab58a4378bc5d218e4bd00c6de2a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528", "html_url": "https://github.com/rust-lang/rust/commit/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6408fa1d80191032bebfa0047bc597b746886a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6408fa1d80191032bebfa0047bc597b746886a5", "html_url": "https://github.com/rust-lang/rust/commit/a6408fa1d80191032bebfa0047bc597b746886a5"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "72c5e9f9d093b12005716f1f69499231bd010adf", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528", "patch": "@@ -288,6 +288,17 @@ pub fn trans_static_method_callee<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      param_substs,\n                                      callee_substs)\n         }\n+        traits::VtableObject(ref data) => {\n+            let trait_item_def_ids =\n+                ty::trait_item_def_ids(ccx.tcx(), trait_id);\n+            let method_offset_in_trait =\n+                trait_item_def_ids.iter()\n+                                  .position(|item| item.def_id() == method_id)\n+                                  .unwrap();\n+            let (llfn, ty) =\n+                trans_object_shim(ccx, data.object_ty, trait_id, method_offset_in_trait);\n+            immediate_rvalue(llfn, ty)\n+        }\n         _ => {\n             tcx.sess.bug(&format!(\"static call to invalid vtable: {}\",\n                                  vtbl.repr(tcx))[]);\n@@ -371,7 +382,7 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             Callee { bcx: bcx, data: Fn(llfn) }\n         }\n         traits::VtableObject(ref data) => {\n-            let llfn = trans_object_shim(bcx.ccx(), data.object_ty, trait_id, n_method);\n+            let (llfn, _) = trans_object_shim(bcx.ccx(), data.object_ty, trait_id, n_method);\n             Callee { bcx: bcx, data: Fn(llfn) }\n         }\n         traits::VtableBuiltin(..) |\n@@ -540,7 +551,7 @@ pub fn trans_object_shim<'a, 'tcx>(\n     object_ty: Ty<'tcx>,\n     trait_id: ast::DefId,\n     method_offset_in_trait: uint)\n-    -> ValueRef\n+    -> (ValueRef, Ty<'tcx>)\n {\n     let _icx = push_ctxt(\"trans_object_shim\");\n     let tcx = ccx.tcx();\n@@ -667,7 +678,7 @@ pub fn trans_object_shim<'a, 'tcx>(\n \n     finish_fn(&fcx, bcx, sig.output);\n \n-    llfn\n+    (llfn, method_bare_fn_ty)\n }\n \n /// Creates a returns a dynamic vtable for the given type and vtable origin."}, {"sha": "fd99fc01a23d12810c88b6824274fa60637bcb1e", "filename": "src/test/run-pass/issue-20676.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528/src%2Ftest%2Frun-pass%2Fissue-20676.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528/src%2Ftest%2Frun-pass%2Fissue-20676.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20676.rs?ref=d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #20676. Error was that we didn't support\n+// UFCS-style calls to a method in `Trait` where `Self` was bound to a\n+// trait object of type `Trait`. See also `ufcs-trait-object.rs`.\n+\n+use std::fmt;\n+\n+fn main() {\n+    let a: &fmt::Show = &1_i32;\n+    format!(\"{:?}\", a);\n+}"}, {"sha": "2ae63040d17850c373b507aeeea377fa03332a41", "filename": "src/test/run-pass/ufcs-trait-object.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528/src%2Ftest%2Frun-pass%2Fufcs-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528/src%2Ftest%2Frun-pass%2Fufcs-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-trait-object.rs?ref=d3cecbf6f6aaeb7defdfb2e5d9e2b82d02fa7528", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that when you use ufcs form to invoke a trait method (on a\n+// trait object) everything works fine.\n+\n+trait Foo {\n+    fn test(&self) -> i32;\n+}\n+\n+impl Foo for i32 {\n+    fn test(&self) -> i32 { *self }\n+}\n+\n+fn main() {\n+    let a: &Foo = &22_i32;\n+    assert_eq!(Foo::test(a), 22);\n+}"}]}