{"sha": "1cb9f70b22dcae385365d7e87ddbf8c0a28b2843", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYjlmNzBiMjJkY2FlMzg1MzY1ZDdlODdkZGJmOGMwYTI4YjI4NDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-10-10T14:12:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-10T14:12:11Z"}, "message": "Upgrade some comments to doc comments", "tree": {"sha": "44006d1173a5b10ecc9ef7f0be29da5e33359c1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44006d1173a5b10ecc9ef7f0be29da5e33359c1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cb9f70b22dcae385365d7e87ddbf8c0a28b2843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb9f70b22dcae385365d7e87ddbf8c0a28b2843", "html_url": "https://github.com/rust-lang/rust/commit/1cb9f70b22dcae385365d7e87ddbf8c0a28b2843", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cb9f70b22dcae385365d7e87ddbf8c0a28b2843/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0217315bf23edee385a7042b5a23b3e7e376820c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0217315bf23edee385a7042b5a23b3e7e376820c", "html_url": "https://github.com/rust-lang/rust/commit/0217315bf23edee385a7042b5a23b3e7e376820c"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "89dca3e020d38b988bc80107a7df2f1802efcfbd", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1cb9f70b22dcae385365d7e87ddbf8c0a28b2843/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb9f70b22dcae385365d7e87ddbf8c0a28b2843/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=1cb9f70b22dcae385365d7e87ddbf8c0a28b2843", "patch": "@@ -54,24 +54,24 @@ pub mod config;\n pub mod filesearch;\n pub mod search_paths;\n \n-// Represents the data associated with a compilation\n-// session for a single crate.\n+/// Represents the data associated with a compilation\n+/// session for a single crate.\n pub struct Session {\n     pub target: config::Config,\n     pub host: Target,\n     pub opts: config::Options,\n     pub parse_sess: ParseSess,\n-    // For a library crate, this is always none\n+    /// For a library crate, this is always none\n     pub entry_fn: RefCell<Option<(NodeId, Span)>>,\n     pub entry_type: Cell<Option<config::EntryFnType>>,\n     pub plugin_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub derive_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub default_sysroot: Option<PathBuf>,\n-    // The name of the root source file of the crate, in the local file system.\n-    // `None` means that there is no source file.\n+    /// The name of the root source file of the crate, in the local file system.\n+    /// `None` means that there is no source file.\n     pub local_crate_source_file: Option<String>,\n-    // The directory the compiler has been executed in plus a flag indicating\n-    // if the value stored here has been affected by path remapping.\n+    /// The directory the compiler has been executed in plus a flag indicating\n+    /// if the value stored here has been affected by path remapping.\n     pub working_dir: (String, bool),\n     pub lint_store: RefCell<lint::LintStore>,\n     pub buffered_lints: RefCell<Option<lint::LintBuffer>>,\n@@ -83,11 +83,11 @@ pub struct Session {\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n-    // The crate_disambiguator is constructed out of all the `-C metadata`\n-    // arguments passed to the compiler. Its value together with the crate-name\n-    // forms a unique global identifier for the crate. It is used to allow\n-    // multiple crates with the same name to coexist. See the\n-    // trans::back::symbol_names module for more information.\n+    /// The crate_disambiguator is constructed out of all the `-C metadata`\n+    /// arguments passed to the compiler. Its value together with the crate-name\n+    /// forms a unique global identifier for the crate. It is used to allow\n+    /// multiple crates with the same name to coexist. See the\n+    /// trans::back::symbol_names module for more information.\n     pub crate_disambiguator: RefCell<Option<Symbol>>,\n     pub features: RefCell<feature_gate::Features>,\n \n@@ -143,17 +143,17 @@ pub struct Session {\n }\n \n pub struct PerfStats {\n-    // The accumulated time needed for computing the SVH of the crate\n+    /// The accumulated time needed for computing the SVH of the crate\n     pub svh_time: Cell<Duration>,\n-    // The accumulated time spent on computing incr. comp. hashes\n+    /// The accumulated time spent on computing incr. comp. hashes\n     pub incr_comp_hashes_time: Cell<Duration>,\n-    // The number of incr. comp. hash computations performed\n+    /// The number of incr. comp. hash computations performed\n     pub incr_comp_hashes_count: Cell<u64>,\n-    // The number of bytes hashed when computing ICH values\n+    /// The number of bytes hashed when computing ICH values\n     pub incr_comp_bytes_hashed: Cell<u64>,\n-    // The accumulated time spent on computing symbol hashes\n+    /// The accumulated time spent on computing symbol hashes\n     pub symbol_hash_time: Cell<Duration>,\n-    // The accumulated time spent decoding def path tables from metadata\n+    /// The accumulated time spent decoding def path tables from metadata\n     pub decode_def_path_tables_time: Cell<Duration>,\n }\n \n@@ -804,24 +804,24 @@ pub fn build_session_(sopts: config::Options,\n /// Holds data on the current incremental compilation session, if there is one.\n #[derive(Debug)]\n pub enum IncrCompSession {\n-    // This is the state the session will be in until the incr. comp. dir is\n-    // needed.\n+    /// This is the state the session will be in until the incr. comp. dir is\n+    /// needed.\n     NotInitialized,\n-    // This is the state during which the session directory is private and can\n-    // be modified.\n+    /// This is the state during which the session directory is private and can\n+    /// be modified.\n     Active {\n         session_directory: PathBuf,\n         lock_file: flock::Lock,\n         load_dep_graph: bool,\n     },\n-    // This is the state after the session directory has been finalized. In this\n-    // state, the contents of the directory must not be modified any more.\n+    /// This is the state after the session directory has been finalized. In this\n+    /// state, the contents of the directory must not be modified any more.\n     Finalized {\n         session_directory: PathBuf,\n     },\n-    // This is an error state that is reached when some compilation error has\n-    // occurred. It indicates that the contents of the session directory must\n-    // not be used, since they might be invalid.\n+    /// This is an error state that is reached when some compilation error has\n+    /// occurred. It indicates that the contents of the session directory must\n+    /// not be used, since they might be invalid.\n     InvalidBecauseOfErrors {\n         session_directory: PathBuf,\n     }"}]}