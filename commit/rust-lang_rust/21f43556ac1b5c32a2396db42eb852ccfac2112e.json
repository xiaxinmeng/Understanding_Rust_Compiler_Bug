{"sha": "21f43556ac1b5c32a2396db42eb852ccfac2112e", "node_id": "C_kwDOAAsO6NoAKDIxZjQzNTU2YWMxYjVjMzJhMjM5NmRiNDJlYjg1MmNjZmFjMjExMmU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-10T16:26:40Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-11T10:56:54Z"}, "message": "Fix for \"Support Option and similar enums as type of static variable with linkage attribute\"\n\ncc rust-lang/rust#104799", "tree": {"sha": "a4c92df4892d48344bc80c98e2837c6830653dd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4c92df4892d48344bc80c98e2837c6830653dd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f43556ac1b5c32a2396db42eb852ccfac2112e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f43556ac1b5c32a2396db42eb852ccfac2112e", "html_url": "https://github.com/rust-lang/rust/commit/21f43556ac1b5c32a2396db42eb852ccfac2112e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f43556ac1b5c32a2396db42eb852ccfac2112e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef1cb95687167308bafe994e7fef05f68287e554", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1cb95687167308bafe994e7fef05f68287e554", "html_url": "https://github.com/rust-lang/rust/commit/ef1cb95687167308bafe994e7fef05f68287e554"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "dee6fb5b5130d1f27abaf1fda1581605a82973b5", "filename": "src/constant.rs", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/21f43556ac1b5c32a2396db42eb852ccfac2112e/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f43556ac1b5c32a2396db42eb852ccfac2112e/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=21f43556ac1b5c32a2396db42eb852ccfac2112e", "patch": "@@ -266,16 +266,7 @@ fn data_id_for_static(\n     def_id: DefId,\n     definition: bool,\n ) -> DataId {\n-    let rlinkage = tcx.codegen_fn_attrs(def_id).linkage;\n-    let linkage = if definition {\n-        crate::linkage::get_static_linkage(tcx, def_id)\n-    } else if rlinkage == Some(rustc_middle::mir::mono::Linkage::ExternalWeak)\n-        || rlinkage == Some(rustc_middle::mir::mono::Linkage::WeakAny)\n-    {\n-        Linkage::Preemptible\n-    } else {\n-        Linkage::Import\n-    };\n+    let attrs = tcx.codegen_fn_attrs(def_id);\n \n     let instance = Instance::mono(tcx, def_id).polymorphize(tcx);\n     let symbol_name = tcx.symbol_name(instance).name;\n@@ -287,22 +278,30 @@ fn data_id_for_static(\n     };\n     let align = tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap().align.pref.bytes();\n \n-    let attrs = tcx.codegen_fn_attrs(def_id);\n+    if let Some(import_linkage) = attrs.import_linkage {\n+        assert!(!definition);\n \n-    let data_id = match module.declare_data(\n-        &*symbol_name,\n-        linkage,\n-        is_mutable,\n-        attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),\n-    ) {\n-        Ok(data_id) => data_id,\n-        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(&format!(\n-            \"attempt to declare `{symbol_name}` as static, but it was already declared as function\"\n-        )),\n-        Err(err) => Err::<_, _>(err).unwrap(),\n-    };\n+        let linkage = if import_linkage == rustc_middle::mir::mono::Linkage::ExternalWeak\n+            || import_linkage == rustc_middle::mir::mono::Linkage::WeakAny\n+        {\n+            Linkage::Preemptible\n+        } else {\n+            Linkage::Import\n+        };\n+\n+        let data_id = match module.declare_data(\n+            &*symbol_name,\n+            linkage,\n+            is_mutable,\n+            attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),\n+        ) {\n+            Ok(data_id) => data_id,\n+            Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(&format!(\n+                \"attempt to declare `{symbol_name}` as static, but it was already declared as function\"\n+            )),\n+            Err(err) => Err::<_, _>(err).unwrap(),\n+        };\n \n-    if rlinkage.is_some() {\n         // Comment copied from https://github.com/rust-lang/rust/blob/45060c2a66dfd667f88bd8b94261b28a58d85bd5/src/librustc_codegen_llvm/consts.rs#L141\n         // Declare an internal global `extern_with_linkage_foo` which\n         // is initialized with the address of `foo`.  If `foo` is\n@@ -324,10 +323,34 @@ fn data_id_for_static(\n             Err(ModuleError::DuplicateDefinition(_)) => {}\n             res => res.unwrap(),\n         }\n-        ref_data_id\n-    } else {\n-        data_id\n+\n+        return ref_data_id;\n     }\n+\n+    let linkage = if definition {\n+        crate::linkage::get_static_linkage(tcx, def_id)\n+    } else if attrs.linkage == Some(rustc_middle::mir::mono::Linkage::ExternalWeak)\n+        || attrs.linkage == Some(rustc_middle::mir::mono::Linkage::WeakAny)\n+    {\n+        Linkage::Preemptible\n+    } else {\n+        Linkage::Import\n+    };\n+\n+    let data_id = match module.declare_data(\n+        &*symbol_name,\n+        linkage,\n+        is_mutable,\n+        attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),\n+    ) {\n+        Ok(data_id) => data_id,\n+        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(&format!(\n+            \"attempt to declare `{symbol_name}` as static, but it was already declared as function\"\n+        )),\n+        Err(err) => Err::<_, _>(err).unwrap(),\n+    };\n+\n+    data_id\n }\n \n fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut ConstantCx) {"}]}