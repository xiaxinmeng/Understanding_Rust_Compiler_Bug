{"sha": "b376f5621b801460b911a75048a70698021bbc69", "node_id": "C_kwDOAAsO6NoAKGIzNzZmNTYyMWI4MDE0NjBiOTExYTc1MDQ4YTcwNjk4MDIxYmJjNjk", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-11-02T12:52:47Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-11-25T06:08:44Z"}, "message": "Set MACOSX_DEPLOYMENT_TARGET env var to default for linking if not set.", "tree": {"sha": "d97b10307bdc1cbadea359dca9f1f445461322f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97b10307bdc1cbadea359dca9f1f445461322f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b376f5621b801460b911a75048a70698021bbc69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b376f5621b801460b911a75048a70698021bbc69", "html_url": "https://github.com/rust-lang/rust/commit/b376f5621b801460b911a75048a70698021bbc69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b376f5621b801460b911a75048a70698021bbc69/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f4d88c4bf94a466c1d30f73532865b6c7a6b6ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4d88c4bf94a466c1d30f73532865b6c7a6b6ef", "html_url": "https://github.com/rust-lang/rust/commit/8f4d88c4bf94a466c1d30f73532865b6c7a6b6ef"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "3ffc852d65080c1cfd16a32fd2b172fa929ef01c", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b376f5621b801460b911a75048a70698021bbc69/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b376f5621b801460b911a75048a70698021bbc69/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=b376f5621b801460b911a75048a70698021bbc69", "patch": "@@ -9,6 +9,7 @@ pub fn target() -> Target {\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n+    base.link_env.extend(super::apple_base::macos_link_env(\"arm64\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "ba8f9a8ce11607fcc04629a97b9ccf45e0aaabda", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b376f5621b801460b911a75048a70698021bbc69/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b376f5621b801460b911a75048a70698021bbc69/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=b376f5621b801460b911a75048a70698021bbc69", "patch": "@@ -79,6 +79,18 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n \n+pub fn macos_link_env(arch: &str) -> Vec<(String, String)> {\n+    // Use the default deployment target for linking just as with the LLVM target if not\n+    // specified via MACOSX_DEPLOYMENT_TARGET, otherwise the system linker would use its\n+    // default which varies with Xcode version.\n+    if env::var(\"MACOSX_DEPLOYMENT_TARGET\").is_err() {\n+        let default = macos_default_deployment_target(arch);\n+        vec![(\"MACOSX_DEPLOYMENT_TARGET\".to_string(), format!(\"{}.{}\", default.0, default.1))]\n+    } else {\n+        vec![]\n+    }\n+}\n+\n pub fn macos_link_env_remove() -> Vec<String> {\n     let mut env_remove = Vec::with_capacity(2);\n     // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which"}, {"sha": "05217c09aedd0dca102e295f2b4472712c86d05b", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b376f5621b801460b911a75048a70698021bbc69/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b376f5621b801460b911a75048a70698021bbc69/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=b376f5621b801460b911a75048a70698021bbc69", "patch": "@@ -5,6 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n+    base.link_env.extend(super::apple_base::macos_link_env(\"i686\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}, {"sha": "3e20cb0b272ce8a682509b5e81a7909cf6f9828a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b376f5621b801460b911a75048a70698021bbc69/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b376f5621b801460b911a75048a70698021bbc69/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=b376f5621b801460b911a75048a70698021bbc69", "patch": "@@ -10,6 +10,7 @@ pub fn target() -> Target {\n         LinkerFlavor::Gcc,\n         vec![\"-m64\".to_string(), \"-arch\".to_string(), \"x86_64\".to_string()],\n     );\n+    base.link_env.extend(super::apple_base::macos_link_env(\"x86_64\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}]}