{"sha": "43cb74b830110693e4e54c5670033cbae5c87e24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzY2I3NGI4MzAxMTA2OTNlNGU1NGM1NjcwMDMzY2JhZTVjODdlMjQ=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-11-10T11:31:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-10T19:40:34Z"}, "message": "Add float support to #fmt. Fix #1014.", "tree": {"sha": "76a893d796791953a34ed75d519f0e1f0362f2ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a893d796791953a34ed75d519f0e1f0362f2ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43cb74b830110693e4e54c5670033cbae5c87e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43cb74b830110693e4e54c5670033cbae5c87e24", "html_url": "https://github.com/rust-lang/rust/commit/43cb74b830110693e4e54c5670033cbae5c87e24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43cb74b830110693e4e54c5670033cbae5c87e24/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "599baf93257c5fef6600d4c10dbf256965e37fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/599baf93257c5fef6600d4c10dbf256965e37fdc", "html_url": "https://github.com/rust-lang/rust/commit/599baf93257c5fef6600d4c10dbf256965e37fdc"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "575d49e15a6d3ff9e717280963b558c33bc4810e", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43cb74b830110693e4e54c5670033cbae5c87e24/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cb74b830110693e4e54c5670033cbae5c87e24/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=43cb74b830110693e4e54c5670033cbae5c87e24", "patch": "@@ -196,6 +196,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n               ty_int(s) {\n                 alt s { signed. { ret true; } unsigned. { ret false; } }\n               }\n+              ty_float. { ret true; }\n               _ { ret false; }\n             }\n         }\n@@ -250,6 +251,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n           ty_hex(_) { ret make_conv_call(cx, arg.span, \"uint\", cnv, arg); }\n           ty_bits. { ret make_conv_call(cx, arg.span, \"uint\", cnv, arg); }\n           ty_octal. { ret make_conv_call(cx, arg.span, \"uint\", cnv, arg); }\n+          ty_float. { ret make_conv_call(cx, arg.span, \"float\", cnv, arg); }\n           _ { cx.span_unimpl(sp, unsupported); }\n         }\n     }\n@@ -301,6 +303,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n             }\n           }\n           ty_octal. { log \"type: octal\"; }\n+          ty_float. { log \"type: float\"; }\n         }\n     }\n     let fmt_sp = args[0].span;"}, {"sha": "460ceee5cff86b71e7e9ee0bd4433522a352e5e2", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/43cb74b830110693e4e54c5670033cbae5c87e24/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cb74b830110693e4e54c5670033cbae5c87e24/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=43cb74b830110693e4e54c5670033cbae5c87e24", "patch": "@@ -49,6 +49,7 @@ mod ct {\n         ty_bits;\n         ty_hex(caseness);\n         ty_octal;\n+        ty_float;\n         // FIXME: More types\n     }\n     tag flag {\n@@ -246,6 +247,8 @@ mod ct {\n                 ty_bits\n             } else if str::eq(tstr, \"o\") {\n                 ty_octal\n+            } else if str::eq(tstr, \"f\") {\n+                ty_float\n             } else { error(\"unknown type in conversion: \" + tstr) };\n         ret {ty: t, next: i + 1u};\n     }\n@@ -328,6 +331,21 @@ mod rt {\n             };\n         ret pad(cv, unpadded, pad_nozero);\n     }\n+    fn conv_float(cv: conv, f: float) -> str {\n+        let (to_str, digits) = alt cv.precision {\n+              count_is(c) { (float::to_str_exact, c as uint) }\n+              count_implied. { (float::to_str, 6u) }\n+        };\n+        let s = to_str(f, digits);\n+        if 0.0 <= f {\n+            if have_flag(cv.flags, flag_sign_always) {\n+                s = \"+\" + s;\n+            } else if have_flag(cv.flags, flag_space_for_sign) {\n+                s = \" \" + s;\n+            }\n+        }\n+        ret pad(cv, s, pad_signed);\n+    }\n \n     // Convert an int to string with minimum number of digits. If precision is\n     // 0 and num is 0 then the result is the empty string."}, {"sha": "faa71b4ed56f317be4195699fcbbecaf4744cc86", "filename": "src/lib/float.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/43cb74b830110693e4e54c5670033cbae5c87e24/src%2Flib%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cb74b830110693e4e54c5670033cbae5c87e24/src%2Flib%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffloat.rs?ref=43cb74b830110693e4e54c5670033cbae5c87e24", "patch": "@@ -7,31 +7,64 @@ Module: float\n  */\n \n /*\n-Function: to_str\n+Function: to_str_common\n \n Converts a float to a string\n \n Parameters:\n \n num - The float value\n-digits: The number of significant digits\n+digits - The number of significant digits\n+exact - Whether to enforce the exact number of significant digits\n */\n-fn to_str(num: float, digits: uint) -> str {\n+fn to_str_common(num: float, digits: uint, exact: bool) -> str {\n     let (num, accum) = num < 0.0 ? (-num, \"-\") : (num, \"\");\n     let trunc = num as uint;\n     let frac = num - (trunc as float);\n     accum += uint::str(trunc);\n     if frac == 0.0 || digits == 0u { ret accum; }\n     accum += \".\";\n     let i = digits;\n-    while i > 0u && frac > 0.0 {\n+    let epsilon = 1. / pow_uint_to_uint_as_float(10u, i);\n+    while i > 0u && (frac >= epsilon || exact) {\n         frac *= 10.0;\n+        epsilon *= 10.0;\n         let digit = frac as uint;\n         accum += uint::str(digit);\n         frac -= digit as float;\n         i -= 1u;\n     }\n     ret accum;\n+\n+}\n+\n+/*\n+Function: to_str\n+\n+Converts a float to a string with exactly the number of provided significant\n+digits\n+\n+Parameters:\n+\n+num - The float value\n+digits - The number of significant digits\n+*/\n+fn to_str_exact(num: float, digits: uint) -> str {\n+    to_str_common(num, digits, true)\n+}\n+\n+/*\n+Function: to_str\n+\n+Converts a float to a string with a maximum number of significant digits\n+\n+Parameters:\n+\n+num - The float value\n+digits - The number of significant digits\n+*/\n+fn to_str(num: float, digits: uint) -> str {\n+    to_str_common(num, digits, false)\n }\n \n /*"}, {"sha": "93e18580c645ec28b55d14445186d19ef924e0e2", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43cb74b830110693e4e54c5670033cbae5c87e24/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cb74b830110693e4e54c5670033cbae5c87e24/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=43cb74b830110693e4e54c5670033cbae5c87e24", "patch": "@@ -38,6 +38,7 @@ fn part1() {\n     test(#fmt[\"%X\", 0x12ab_u], \"12AB\");\n     test(#fmt[\"%o\", 10u], \"12\");\n     test(#fmt[\"%t\", 0b11010101_u], \"11010101\");\n+    test(#fmt[\"%f\", 5.82], \"5.82\");\n     // 32-bit limits\n \n     test(#fmt[\"%i\", -2147483648], \"-2147483648\");\n@@ -61,6 +62,7 @@ fn part2() {\n     test(#fmt[\"%10o\", 10u], \"        12\");\n     test(#fmt[\"%10t\", 0xff_u], \"  11111111\");\n     test(#fmt[\"%10c\", 'A'], \"         A\");\n+    test(#fmt[\"%10f\", 5.82], \"      5.82\");\n     // Left justify\n \n     test(#fmt[\"%-10d\", 500], \"500       \");\n@@ -73,6 +75,7 @@ fn part2() {\n     test(#fmt[\"%-10o\", 10u], \"12        \");\n     test(#fmt[\"%-10t\", 0xff_u], \"11111111  \");\n     test(#fmt[\"%-10c\", 'A'], \"A         \");\n+    test(#fmt[\"%-10f\", 5.82], \"5.82      \");\n }\n \n fn part3() {\n@@ -90,6 +93,7 @@ fn part3() {\n     test(#fmt[\"%.o\", 10u], \"12\");\n     test(#fmt[\"%.t\", 3u], \"11\");\n     test(#fmt[\"%.c\", 'A'], \"A\");\n+    test(#fmt[\"%.f\", 5.82], \"5\");\n     test(#fmt[\"%.0d\", 0], \"\");\n     test(#fmt[\"%.0u\", 0u], \"\");\n     test(#fmt[\"%.0x\", 0u], \"\");\n@@ -102,6 +106,7 @@ fn part3() {\n     test(#fmt[\"%.0o\", 10u], \"12\");\n     test(#fmt[\"%.0t\", 3u], \"11\");\n     test(#fmt[\"%.0c\", 'A'], \"A\");\n+    test(#fmt[\"%.0f\", 5.892], \"5\");\n     test(#fmt[\"%.1d\", 0], \"0\");\n     test(#fmt[\"%.1u\", 0u], \"0\");\n     test(#fmt[\"%.1x\", 0u], \"0\");\n@@ -114,6 +119,7 @@ fn part3() {\n     test(#fmt[\"%.1o\", 10u], \"12\");\n     test(#fmt[\"%.1t\", 3u], \"11\");\n     test(#fmt[\"%.1c\", 'A'], \"A\");\n+    test(#fmt[\"%.1f\", 5.82], \"5.8\");\n }\n fn part4() {\n     test(#fmt[\"%.5d\", 0], \"00000\");\n@@ -128,6 +134,7 @@ fn part4() {\n     test(#fmt[\"%.5o\", 10u], \"00012\");\n     test(#fmt[\"%.5t\", 3u], \"00011\");\n     test(#fmt[\"%.5c\", 'A'], \"A\");\n+    test(#fmt[\"%.5f\", 5.82], \"5.82000\");\n     // Bool precision. I'm not sure if it's good or bad to have bool\n     // conversions support precision - it's not standard printf so we\n     // can do whatever. For now I'm making it behave the same as string\n@@ -144,15 +151,19 @@ fn part5() {\n     test(#fmt[\"%+d\", 0], \"+0\");\n     test(#fmt[\"%+d\", 1], \"+1\");\n     test(#fmt[\"%+d\", -1], \"-1\");\n+    test(#fmt[\"%+f\", 0.0], \"+0\");\n     // Leave space for sign\n \n     test(#fmt[\"% d\", 0], \" 0\");\n     test(#fmt[\"% d\", 1], \" 1\");\n     test(#fmt[\"% d\", -1], \"-1\");\n+    test(#fmt[\"% f\", 0.0], \" 0\");\n     // Plus overrides space\n \n     test(#fmt[\"% +d\", 0], \"+0\");\n     test(#fmt[\"%+ d\", 0], \"+0\");\n+    test(#fmt[\"% +f\", 0.0], \"+0\");\n+    test(#fmt[\"%+ f\", 0.0], \"+0\");\n     // 0-padding\n \n     test(#fmt[\"%05d\", 0], \"00000\");\n@@ -163,6 +174,7 @@ fn part5() {\n     test(#fmt[\"%05X\", 127u], \"0007F\");\n     test(#fmt[\"%05o\", 10u], \"00012\");\n     test(#fmt[\"%05t\", 3u], \"00011\");\n+    test(#fmt[\"%05f\", 5.82], \"05.82\");\n     // 0-padding a string is undefined but glibc does this:\n \n     test(#fmt[\"%05s\", \"test\"], \" test\");\n@@ -181,6 +193,7 @@ fn part5() {\n     test(#fmt[\"%-05s\", \"test\"], \"test \");\n     test(#fmt[\"%-05c\", 'A'], \"A    \");\n     test(#fmt[\"%-05b\", true], \"true \");\n+    test(#fmt[\"%-05f\", 5.82], \"5.82 \");\n }\n fn part6() {\n     // Precision overrides 0-padding\n@@ -196,6 +209,7 @@ fn part6() {\n     test(#fmt[\"%06.5x\", 127u], \" 0007f\");\n     test(#fmt[\"%06.5X\", 127u], \" 0007F\");\n     test(#fmt[\"%06.5o\", 10u], \" 00012\");\n+    test(#fmt[\"%08.5f\", 5.82], \" 5.82000\");\n     // Signed combinations\n \n     test(#fmt[\"% 5d\", 1], \"    1\");"}]}