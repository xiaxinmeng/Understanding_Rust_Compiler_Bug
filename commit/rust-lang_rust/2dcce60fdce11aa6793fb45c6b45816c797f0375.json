{"sha": "2dcce60fdce11aa6793fb45c6b45816c797f0375", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkY2NlNjBmZGNlMTFhYTY3OTNmYjQ1YzZiNDU4MTZjNzk3ZjAzNzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-11T07:30:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-11T07:31:55Z"}, "message": "deprecate invalid_ref lint", "tree": {"sha": "d26e51bff16ce33e235d2980edf09066c8203fe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d26e51bff16ce33e235d2980edf09066c8203fe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dcce60fdce11aa6793fb45c6b45816c797f0375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dcce60fdce11aa6793fb45c6b45816c797f0375", "html_url": "https://github.com/rust-lang/rust/commit/2dcce60fdce11aa6793fb45c6b45816c797f0375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dcce60fdce11aa6793fb45c6b45816c797f0375/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55d38ed7ace06e4a3a5939b3c7c01045017bca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55d38ed7ace06e4a3a5939b3c7c01045017bca4", "html_url": "https://github.com/rust-lang/rust/commit/c55d38ed7ace06e4a3a5939b3c7c01045017bca4"}], "stats": {"total": 171, "additions": 9, "deletions": 162}, "files": [{"sha": "0140cf861ac9fdd67ce21b33872f84743cb87085", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2dcce60fdce11aa6793fb45c6b45816c797f0375/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dcce60fdce11aa6793fb45c6b45816c797f0375/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=2dcce60fdce11aa6793fb45c6b45816c797f0375", "patch": "@@ -113,3 +113,12 @@ declare_deprecated_lint! {\n     pub UNSAFE_VECTOR_INITIALIZATION,\n     \"the replacement suggested by this lint had substantially different behavior\"\n }\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This lint has been superseded by the warn-by-default\n+/// `invalid_value` rustc lint.\n+declare_clippy_lint! {\n+    pub INVALID_REF,\n+    \"superseded by rustc lint `invalid_value`\"\n+}"}, {"sha": "8f9ccaea26d2131cd4e1b94a4936fe4301feff1d", "filename": "clippy_lints/src/invalid_ref.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c55d38ed7ace06e4a3a5939b3c7c01045017bca4/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55d38ed7ace06e4a3a5939b3c7c01045017bca4/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=c55d38ed7ace06e4a3a5939b3c7c01045017bca4", "patch": "@@ -1,55 +0,0 @@\n-use crate::utils::{match_def_path, paths, span_help_and_lint};\n-use if_chain::if_chain;\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::ty;\n-use rustc::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for creation of references to zeroed or uninitialized memory.\n-    ///\n-    /// **Why is this bad?** Creation of null references is undefined behavior.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```no_run\n-    /// let bad_ref: &usize = unsafe { std::mem::zeroed() };\n-    /// ```\n-    pub INVALID_REF,\n-    correctness,\n-    \"creation of invalid reference\"\n-}\n-\n-const ZERO_REF_SUMMARY: &str = \"reference to zeroed memory\";\n-const UNINIT_REF_SUMMARY: &str = \"reference to uninitialized memory\";\n-const HELP: &str = \"Creation of a null reference is undefined behavior; \\\n-                    see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\";\n-\n-declare_lint_pass!(InvalidRef => [INVALID_REF]);\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if_chain! {\n-            if let ExprKind::Call(ref path, ref args) = expr.node;\n-            if let ExprKind::Path(ref qpath) = path.node;\n-            if args.len() == 0;\n-            if let ty::Ref(..) = cx.tables.expr_ty(expr).sty;\n-            if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id();\n-            then {\n-                let msg = if match_def_path(cx, def_id, &paths::MEM_ZEROED) |\n-                             match_def_path(cx, def_id, &paths::INIT)\n-                {\n-                    ZERO_REF_SUMMARY\n-                } else if match_def_path(cx, def_id, &paths::MEM_UNINIT) |\n-                          match_def_path(cx, def_id, &paths::UNINIT)\n-                {\n-                    UNINIT_REF_SUMMARY\n-                } else {\n-                    return;\n-                };\n-                span_help_and_lint(cx, INVALID_REF, expr.span, msg, HELP);\n-            }\n-        }\n-    }\n-}"}, {"sha": "1ab943c5923b6049921060ccec62fb2df8a69391", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dcce60fdce11aa6793fb45c6b45816c797f0375/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dcce60fdce11aa6793fb45c6b45816c797f0375/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2dcce60fdce11aa6793fb45c6b45816c797f0375", "patch": "@@ -200,7 +200,6 @@ pub mod inherent_to_string;\n pub mod inline_fn_without_body;\n pub mod int_plus_one;\n pub mod integer_division;\n-pub mod invalid_ref;\n pub mod items_after_statements;\n pub mod large_enum_variant;\n pub mod len_zero;\n@@ -558,7 +557,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::InfiniteIter);\n     reg.register_late_lint_pass(box inline_fn_without_body::InlineFnWithoutBody);\n-    reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n     reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n     reg.register_early_lint_pass(box redundant_static_lifetimes::RedundantStaticLifetimes);\n@@ -736,7 +734,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n         inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n         int_plus_one::INT_PLUS_ONE,\n-        invalid_ref::INVALID_REF,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n@@ -1094,7 +1091,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         infinite_iter::INFINITE_ITER,\n         inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n         inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n-        invalid_ref::INVALID_REF,\n         literal_representation::MISTYPED_LITERAL_SUFFIXES,\n         loops::FOR_LOOP_OVER_OPTION,\n         loops::FOR_LOOP_OVER_RESULT,"}, {"sha": "62b22afff95be2260f2ef89ea98e9168ff68e5b2", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dcce60fdce11aa6793fb45c6b45816c797f0375/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dcce60fdce11aa6793fb45c6b45816c797f0375/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=2dcce60fdce11aa6793fb45c6b45816c797f0375", "patch": "@@ -37,7 +37,6 @@ pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entr\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n pub const INDEX: [&str; 3] = [\"core\", \"ops\", \"Index\"];\n pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n-pub const INIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"init\"];\n pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n@@ -50,8 +49,6 @@ pub const LINT_PASS: [&str; 3] = [\"rustc\", \"lint\", \"LintPass\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n-pub const MEM_UNINIT: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n-pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];\n pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n@@ -109,7 +106,6 @@ pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_stri\n pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_FROM_ERROR: [&str; 4] = [\"std\", \"ops\", \"Try\", \"from_error\"];\n pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n-pub const UNINIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"uninit\"];\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];"}, {"sha": "d59bd51bb4f4877e3715491498360501dde534d0", "filename": "tests/ui/invalid_ref.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c55d38ed7ace06e4a3a5939b3c7c01045017bca4/tests%2Fui%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55d38ed7ace06e4a3a5939b3c7c01045017bca4/tests%2Fui%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.rs?ref=c55d38ed7ace06e4a3a5939b3c7c01045017bca4", "patch": "@@ -1,56 +0,0 @@\n-#![allow(deprecated, unused)]\n-#![feature(core_intrinsics)]\n-\n-extern crate core;\n-use std::intrinsics::init;\n-\n-fn main() {\n-    let x = 1;\n-    unsafe {\n-        ref_to_zeroed_std(&x);\n-        ref_to_zeroed_core(&x);\n-        ref_to_zeroed_intr(&x);\n-        ref_to_uninit_std(&x);\n-        ref_to_uninit_core(&x);\n-        some_ref();\n-        std_zeroed_no_ref();\n-        core_zeroed_no_ref();\n-        intr_init_no_ref();\n-    }\n-}\n-\n-unsafe fn ref_to_zeroed_std<T: ?Sized>(t: &T) {\n-    let ref_zero: &T = std::mem::zeroed(); // warning\n-}\n-\n-unsafe fn ref_to_zeroed_core<T: ?Sized>(t: &T) {\n-    let ref_zero: &T = core::mem::zeroed(); // warning\n-}\n-\n-unsafe fn ref_to_zeroed_intr<T: ?Sized>(t: &T) {\n-    let ref_zero: &T = std::intrinsics::init(); // warning\n-}\n-\n-unsafe fn ref_to_uninit_std<T: ?Sized>(t: &T) {\n-    let ref_uninit: &T = std::mem::uninitialized(); // warning\n-}\n-\n-unsafe fn ref_to_uninit_core<T: ?Sized>(t: &T) {\n-    let ref_uninit: &T = core::mem::uninitialized(); // warning\n-}\n-\n-fn some_ref() {\n-    let some_ref = &1;\n-}\n-\n-unsafe fn std_zeroed_no_ref() {\n-    let mem_zero: usize = std::mem::zeroed(); // no warning\n-}\n-\n-unsafe fn core_zeroed_no_ref() {\n-    let mem_zero: usize = core::mem::zeroed(); // no warning\n-}\n-\n-unsafe fn intr_init_no_ref() {\n-    let mem_zero: usize = std::intrinsics::init(); // no warning\n-}"}, {"sha": "aeef3892dbe7e2e745b39c37bac65b14b86cdd28", "filename": "tests/ui/invalid_ref.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c55d38ed7ace06e4a3a5939b3c7c01045017bca4/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55d38ed7ace06e4a3a5939b3c7c01045017bca4/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=c55d38ed7ace06e4a3a5939b3c7c01045017bca4", "patch": "@@ -1,43 +0,0 @@\n-error: reference to zeroed memory\n-  --> $DIR/invalid_ref.rs:23:24\n-   |\n-LL |     let ref_zero: &T = std::mem::zeroed(); // warning\n-   |                        ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::invalid_ref)]` on by default\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: reference to zeroed memory\n-  --> $DIR/invalid_ref.rs:27:24\n-   |\n-LL |     let ref_zero: &T = core::mem::zeroed(); // warning\n-   |                        ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: reference to zeroed memory\n-  --> $DIR/invalid_ref.rs:31:24\n-   |\n-LL |     let ref_zero: &T = std::intrinsics::init(); // warning\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: reference to uninitialized memory\n-  --> $DIR/invalid_ref.rs:35:26\n-   |\n-LL |     let ref_uninit: &T = std::mem::uninitialized(); // warning\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: reference to uninitialized memory\n-  --> $DIR/invalid_ref.rs:39:26\n-   |\n-LL |     let ref_uninit: &T = core::mem::uninitialized(); // warning\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: aborting due to 5 previous errors\n-"}]}