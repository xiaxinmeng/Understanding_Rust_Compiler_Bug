{"sha": "f4aba18ae7490385a17adf6ad4d2240856bd895b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YWJhMThhZTc0OTAzODVhMTdhZGY2YWQ0ZDIyNDA4NTZiZDg5NWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T03:36:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T03:37:32Z"}, "message": "rustdoc: Apply generic string ops to ifaces", "tree": {"sha": "ee383e32848f364e69ba5225dcc4cd2f97c2adb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee383e32848f364e69ba5225dcc4cd2f97c2adb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4aba18ae7490385a17adf6ad4d2240856bd895b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4aba18ae7490385a17adf6ad4d2240856bd895b", "html_url": "https://github.com/rust-lang/rust/commit/f4aba18ae7490385a17adf6ad4d2240856bd895b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4aba18ae7490385a17adf6ad4d2240856bd895b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd7bb70d6f8a08cbc1d6f2f37dc7781840e9a881", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7bb70d6f8a08cbc1d6f2f37dc7781840e9a881", "html_url": "https://github.com/rust-lang/rust/commit/fd7bb70d6f8a08cbc1d6f2f37dc7781840e9a881"}], "stats": {"total": 103, "additions": 100, "deletions": 3}, "files": [{"sha": "c2ebde8b1a0487cba2dadb0866e28977a3527287", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 99, "deletions": 2, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f4aba18ae7490385a17adf6ad4d2240856bd895b/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4aba18ae7490385a17adf6ad4d2240856bd895b/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=f4aba18ae7490385a17adf6ad4d2240856bd895b", "patch": "@@ -20,7 +20,8 @@ fn run(\n         fold_const: fold_const,\n         fold_fn: fold_fn,\n         fold_enum: fold_enum,\n-        fold_res: fold_res\n+        fold_res: fold_res,\n+        fold_iface: fold_iface\n         with *fold::default_seq_fold(op)\n     });\n     fold.fold_crate(fold, doc)\n@@ -99,6 +100,32 @@ fn fold_res(fold: fold::fold<op>, doc: doc::resdoc) -> doc::resdoc {\n     }\n }\n \n+fn fold_iface(fold: fold::fold<op>, doc: doc::ifacedoc) -> doc::ifacedoc {\n+    {\n+        brief: maybe_apply_op(fold.ctxt, doc.brief),\n+        desc: maybe_apply_op(fold.ctxt, doc.desc),\n+        methods: vec::map(doc.methods) {|doc|\n+            {\n+                brief: maybe_apply_op(fold.ctxt, doc.brief),\n+                desc: maybe_apply_op(fold.ctxt, doc.desc),\n+                args: vec::map(doc.args) {|doc|\n+                    {\n+                        desc: maybe_apply_op(fold.ctxt, doc.desc)\n+                        with doc\n+                    }\n+                },\n+                return: {\n+                    desc: maybe_apply_op(fold.ctxt, doc.return.desc)\n+                    with doc.return\n+                },\n+                failure: maybe_apply_op(fold.ctxt, doc.failure)\n+                with doc\n+            }\n+        }\n+        with doc\n+    }\n+}\n+\n #[test]\n fn should_execute_op_on_enum_brief() {\n     let source = \"#[doc(brief = \\\" a \\\")] enum a { b }\";\n@@ -157,4 +184,74 @@ fn should_execute_op_on_resource_args() {\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass(str::trim)(srv, doc);\n     assert doc.topmod.resources()[0].args[0].desc == some(\"a\");\n-}\n\\ No newline at end of file\n+}\n+\n+#[test]\n+fn should_execute_op_on_iface_brief() {\n+    let source = \"#[doc(brief = \\\" a \\\")] iface i { fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.ifaces()[0].brief == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_iface_desc() {\n+    let source = \"#[doc(desc = \\\" a \\\")] iface i { fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.ifaces()[0].desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_iface_method_brief() {\n+    let source = \"iface i { #[doc(brief = \\\" a \\\")] fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.ifaces()[0].methods[0].brief == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_iface_method_desc() {\n+    let source = \"iface i { #[doc(desc = \\\" a \\\")] fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.ifaces()[0].methods[0].desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_iface_method_args() {\n+    let source = \"iface i { #[doc(args(a = \\\" a \\\"))] fn a(a: bool); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.ifaces()[0].methods[0].args[0].desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_iface_method_return() {\n+    let source = \"iface i { #[doc(return = \\\" a \\\")] fn a() -> int; }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.ifaces()[0].methods[0].return.desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_iface_method_failure_condition() {\n+    let source = \"iface i { #[doc(failure = \\\" a \\\")] fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.ifaces()[0].methods[0].failure == some(\"a\");\n+}"}, {"sha": "f315be73c59bb4c6c3210fe165d95ab893be451e", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4aba18ae7490385a17adf6ad4d2240856bd895b/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4aba18ae7490385a17adf6ad4d2240856bd895b/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=f4aba18ae7490385a17adf6ad4d2240856bd895b", "patch": "@@ -80,4 +80,4 @@ fn should_trim_failure_conditions() {\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass()(srv, doc);\n     assert doc.topmod.fns()[0].failure == some(\"a\");\n-}\n\\ No newline at end of file\n+}"}]}