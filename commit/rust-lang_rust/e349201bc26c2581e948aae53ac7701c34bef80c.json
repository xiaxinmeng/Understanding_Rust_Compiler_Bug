{"sha": "e349201bc26c2581e948aae53ac7701c34bef80c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNDkyMDFiYzI2YzI1ODFlOTQ4YWFlNTNhYzc3MDFjMzRiZWY4MGM=", "commit": {"author": {"name": "Daniel Patterson", "email": "dbp@riseup.net", "date": "2012-07-25T23:22:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-03T18:28:18Z"}, "message": "std::net::url - comment cleanup, new test", "tree": {"sha": "1a509f8fb619715663ca3215fd6a90eaa61e5129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a509f8fb619715663ca3215fd6a90eaa61e5129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e349201bc26c2581e948aae53ac7701c34bef80c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e349201bc26c2581e948aae53ac7701c34bef80c", "html_url": "https://github.com/rust-lang/rust/commit/e349201bc26c2581e948aae53ac7701c34bef80c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e349201bc26c2581e948aae53ac7701c34bef80c/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef46314d1e6418b57a1d0a4efb5853dcaf8077d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef46314d1e6418b57a1d0a4efb5853dcaf8077d4", "html_url": "https://github.com/rust-lang/rust/commit/ef46314d1e6418b57a1d0a4efb5853dcaf8077d4"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "0d8011f0b0fed0c55a065f490d6d3ecbe2ba6c07", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e349201bc26c2581e948aae53ac7701c34bef80c/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e349201bc26c2581e948aae53ac7701c34bef80c/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=e349201bc26c2581e948aae53ac7701c34bef80c", "patch": "@@ -78,7 +78,8 @@ fn encode_inner(s: ~str, full_url: bool) -> ~str {\n     }\n }\n \n-/** Encodes a URI by replacing reserved characters with percent encoded character\n+/** \n+ * Encodes a URI by replacing reserved characters with percent encoded character\n  * sequences.\n  *\n  * This function is compliant with RFC 3986.\n@@ -87,7 +88,8 @@ fn encode(s: ~str) -> ~str {\n     encode_inner(s, true)\n }\n \n-/** Encodes a URI component by replacing reserved characters with percent encoded\n+/** \n+ * Encodes a URI component by replacing reserved characters with percent encoded\n  * character sequences.\n  *\n  * This function is compliant with RFC 3986.\n@@ -134,15 +136,17 @@ fn decode_inner(s: ~str, full_url: bool) -> ~str {\n     }\n }\n \n-/** Decode a string encoded with percent encoding.\n+/**\n+ * Decode a string encoded with percent encoding.\n  * \n  * This will only decode escape sequences generated by encode_uri.\n  */\n fn decode(s: ~str) -> ~str {\n     decode_inner(s, true)\n }\n \n-/** Decode a string encoded with percent encoding.\n+/** \n+ * Decode a string encoded with percent encoding.\n  */\n fn decode_component(s: ~str) -> ~str {\n     decode_inner(s, false)\n@@ -167,7 +171,8 @@ fn encode_plus(s: ~str) -> ~str {\n     }\n }\n \n-/** Encode a hashmap to the 'application/x-www-form-urlencoded' media type.\n+/** \n+ * Encode a hashmap to the 'application/x-www-form-urlencoded' media type.\n  */\n fn encode_form_urlencoded(m: hashmap<~str, @dvec<@~str>>) -> ~str {\n     let mut out = ~\"\";\n@@ -191,7 +196,8 @@ fn encode_form_urlencoded(m: hashmap<~str, @dvec<@~str>>) -> ~str {\n     out\n }\n \n-/** Decode a string encoded with the 'application/x-www-form-urlencoded' media\n+/** \n+ * Decode a string encoded with the 'application/x-www-form-urlencoded' media\n  * type into a hashmap.\n  */\n fn decode_form_urlencoded(s: ~[u8]) -> hashmap<~str, @dvec<@~str>> {\n@@ -415,6 +421,18 @@ impl of to_str::to_str for url {\n \n #[cfg(test)]\n mod tests {\n+    #[test]\n+    fn test_url_parse() {\n+        let url = ~\"http://user:pass@rust-lang.org/doc?s=v#something\";\n+        let u = result::unwrap(from_str(url));\n+        assert u.scheme == ~\"http\";\n+        assert option::unwrap(u.user).user == ~\"user\";\n+        assert option::unwrap(option::unwrap(u.user).pass) == ~\"pass\";\n+        assert u.host == ~\"rust-lang.org\";\n+        assert u.path == ~\"/doc\";\n+        assert u.query.get(~\"s\") == ~\"v\";\n+        assert option::unwrap(u.fragment) == \"something\";\n+    }\n     #[test]\n     fn test_full_url_parse_and_format() {\n         let url = ~\"http://user:pass@rust-lang.org/doc?s=v#something\";"}]}