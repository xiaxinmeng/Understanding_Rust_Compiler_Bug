{"sha": "87e097a85346c947cea60b000677bae10409b804", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZTA5N2E4NTM0NmM5NDdjZWE2MGIwMDA2NzdiYWUxMDQwOWI4MDQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-26T10:39:20Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-26T10:45:47Z"}, "message": "Disallow ret inside of block functions\n\nAlso adds proper checking for cont/break being inside a loop.\n\nCloses #1854\nIssue #1619", "tree": {"sha": "c3e6554920d38c4f3554cd0354d8d11ebef2b2b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3e6554920d38c4f3554cd0354d8d11ebef2b2b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e097a85346c947cea60b000677bae10409b804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e097a85346c947cea60b000677bae10409b804", "html_url": "https://github.com/rust-lang/rust/commit/87e097a85346c947cea60b000677bae10409b804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e097a85346c947cea60b000677bae10409b804/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c141a331f72f55daabd0e77a74584683350f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c141a331f72f55daabd0e77a74584683350f2b", "html_url": "https://github.com/rust-lang/rust/commit/e4c141a331f72f55daabd0e77a74584683350f2b"}], "stats": {"total": 302, "additions": 152, "deletions": 150}, "files": [{"sha": "2452188db246b8188373ce5db9a6c63d5b03fc14", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -399,7 +399,7 @@ Loop through a rope, char by char, until the end.\n fn iter_chars(rope: rope, it: fn(char)) {\n     loop_chars(rope) {|x|\n         it(x);\n-        ret true\n+        true\n     };\n }\n \n@@ -1043,9 +1043,9 @@ mod node {\n \n     fn loop_chars(node: @node, it: fn(char) -> bool) -> bool {\n         ret loop_leaves(node, {|leaf|\n-            ret str::all_between(*leaf.content,\n-                                 leaf.byte_offset,\n-                                 leaf.byte_len, it)\n+            str::all_between(*leaf.content,\n+                             leaf.byte_offset,\n+                             leaf.byte_len, it)\n         })\n     }\n "}, {"sha": "a71c5dcb0ca96f5f71f17b2ee7e9ea72b55f2d18", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -155,6 +155,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n \n     time(time_passes, \"block-use checking\",\n          bind middle::block_use::check_crate(ty_cx, crate));\n+    time(time_passes, \"loop checking\",\n+         bind middle::check_loop::check_crate(sess, crate));\n     time(time_passes, \"function usage\",\n          bind fn_usage::check_crate_fn_usage(ty_cx, crate));\n     time(time_passes, \"alt checking\","}, {"sha": "ca4f696532f43a82dfba1846f87a88d1907ff0c7", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -654,8 +654,8 @@ impl unify_methods for infer_ctxt {\n                         self.constrs(a, b)\n                     }\n                 } else {\n-                    ret self.uerr(ty::terr_constr_len(a_constrs.len(),\n-                                                b_constrs.len()));\n+                    self.uerr(ty::terr_constr_len(a_constrs.len(),\n+                                                  b_constrs.len()))\n                 }\n             }\n           }"}, {"sha": "d4849abfb27f14a1a88b3a475093f8e292dfc6f5", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -71,21 +71,22 @@ fn find_last_uses(c: @crate, def_map: resolve::def_map,\n     visit::visit_crate(*c, cx, v);\n     let mini_table = std::map::int_hash();\n     cx.last_uses.items {|key, val|\n-        if !val { ret; }\n-        alt key {\n-          path(id) {\n-            mini_table.insert(id, is_last_use);\n-            let def_node = ast_util::def_id_of_def(def_map.get(id)).node;\n-            cx.spill_map.insert(def_node, ());\n-          }\n-          close(fn_id, local_id) {\n-            cx.spill_map.insert(local_id, ());\n-            let known = alt check mini_table.find(fn_id) {\n-              some(closes_over(ids)) { ids }\n-              none { [] }\n-            };\n-            mini_table.insert(fn_id, closes_over(known + [local_id]));\n-          }\n+        if val {\n+            alt key {\n+              path(id) {\n+                mini_table.insert(id, is_last_use);\n+                let def_node = ast_util::def_id_of_def(def_map.get(id)).node;\n+                cx.spill_map.insert(def_node, ());\n+              }\n+              close(fn_id, local_id) {\n+                cx.spill_map.insert(local_id, ());\n+                let known = alt check mini_table.find(fn_id) {\n+                  some(closes_over(ids)) { ids }\n+                  none { [] }\n+                };\n+                mini_table.insert(fn_id, closes_over(known + [local_id]));\n+              }\n+            }\n         }\n     }\n     ret (mini_table, cx.spill_map);\n@@ -211,15 +212,16 @@ fn visit_stmt(s: @stmt, cx: ctx, v: visit::vt<ctx>) {\n     alt s.node {\n       stmt_decl(@{node: decl_local(ls), _}, _) {\n         shadow_in_current(cx, {|id|\n+            let mut rslt = false;\n             for local in ls {\n                 let mut found = false;\n                 pat_util::pat_bindings(cx.tcx.def_map, local.node.pat,\n                                        {|pid, _a, _b|\n                     if pid == id { found = true; }\n                 });\n-                if found { ret true; }\n+                if found { rslt = true; break; }\n             }\n-            false\n+            rslt\n         });\n       }\n       _ {}\n@@ -236,8 +238,7 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n       proto_any | proto_block {\n         visit_block(func, cx, {||\n             shadow_in_current(cx, {|id|\n-                for arg in decl.inputs { if arg.id == id { ret true; } }\n-                false\n+                vec::any(decl.inputs, {|arg| arg.id == id})\n             });\n             visit::visit_fn(fk, decl, body, sp, id, cx, v);\n         });"}, {"sha": "9e9c28daf6aabdf9da2ba684ffd6fccead7f06cb", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -2162,13 +2162,14 @@ fn find_impls_in_view_item(e: env, vi: @ast::view_item,\n             if vec::len(*pt) == 1u {\n                 option::may(sc) {|sc|\n                     list::iter(sc) {|level|\n-                        if vec::len(found) > 0u { ret; }\n-                        for imp in *level {\n-                            if imp.ident == pt[0] {\n-                                found += [@{ident: name with *imp}];\n+                        if vec::len(found) == 0u {\n+                            for imp in *level {\n+                                if imp.ident == pt[0] {\n+                                    found += [@{ident: name with *imp}];\n+                                }\n                             }\n+                            if vec::len(found) > 0u { impls += found; }\n                         }\n-                        if vec::len(found) > 0u { impls += found; }\n                     }\n                 }\n             } else {"}, {"sha": "8f87de76cbdc9f5104d22f5672d52b04304e5bf8", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -2772,11 +2772,12 @@ fn get_landing_pad(bcx: block) -> BasicBlockRef {\n     in_lpad_scope_cx(bcx) {|info|\n         // If there is a valid landing pad still around, use it\n         alt info.landing_pad {\n-          some(target) { cached = some(target); ret; }\n-          none {}\n+          some(target) { cached = some(target); }\n+          none {\n+            pad_bcx = sub_block(bcx, \"unwind\");\n+            info.landing_pad = some(pad_bcx.llbb);\n+          }\n         }\n-        pad_bcx = sub_block(bcx, \"unwind\");\n-        info.landing_pad = some(pad_bcx.llbb);\n     }\n     alt cached { some(b) { ret b; } none {} } // Can't return from block above\n     // The landing pad return type (the type being propagated). Not sure what\n@@ -3374,13 +3375,7 @@ fn trans_break_cont(bcx: block, to_end: bool)\n           }\n           _ {}\n         }\n-        unwind = alt check unwind.parent {\n-          parent_some(cx) { cx }\n-          parent_none {\n-            bcx.sess().bug\n-                (if to_end { \"break\" } else { \"cont\" } + \" outside a loop\");\n-          }\n-        };\n+        unwind = alt check unwind.parent { parent_some(cx) { cx } };\n     }\n     cleanup_and_Br(bcx, unwind, target.llbb);\n     Unreachable(bcx);"}, {"sha": "80c1895ed54d33d8cd711345b3ff06089584b711", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -265,7 +265,7 @@ fn revoke_clean(cx: block, val: ValueRef) {\n                     vec::slice(info.cleanups, 0u, i) +\n                     vec::slice(info.cleanups, i + 1u, info.cleanups.len());\n                 scope_clean_changed(info);\n-                ret;\n+                break;\n               }\n               _ {}\n             }"}, {"sha": "9cb94e4f5900ab586bffc6baef08fe363a46d4bc", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -180,7 +180,7 @@ fn trans_append(bcx: block, vec_ty: ty::t, lhsptr: ValueRef,\n                            load_if_immediate(bcx, addr, unit_ty), unit_ty);\n         Store(bcx, InBoundsGEP(bcx, write_ptr, [C_int(ccx, 1)]),\n               write_ptr_ptr);\n-        ret bcx;\n+        bcx\n     })\n }\n "}, {"sha": "f347d4e33209494f58f974b7f1a54ffec6f34be1", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -96,25 +96,27 @@ fn type_needs(cx: ctx, use: uint, ty: ty::t) {\n \n fn type_needs_inner(cx: ctx, use: uint, ty: ty::t) {\n     ty::maybe_walk_ty(ty) {|ty|\n-        if !ty::type_has_params(ty) { ret false; }\n-        alt ty::get(ty).struct {\n-          ty::ty_fn(_) | ty::ty_ptr(_) | ty::ty_rptr(_, _) |\n-          ty::ty_box(_) | ty::ty_iface(_, _) { ret false; }\n-          ty::ty_enum(did, tps) {\n-            for v in *ty::enum_variants(cx.ccx.tcx, did) {\n-                for aty in v.args {\n-                    let t = ty::substitute_type_params(cx.ccx.tcx, tps, aty);\n-                    type_needs_inner(cx, use, t);\n+        if ty::type_has_params(ty) {\n+            alt ty::get(ty).struct {\n+              ty::ty_fn(_) | ty::ty_ptr(_) | ty::ty_rptr(_, _) |\n+              ty::ty_box(_) | ty::ty_iface(_, _) { false }\n+              ty::ty_enum(did, tps) {\n+                for v in *ty::enum_variants(cx.ccx.tcx, did) {\n+                    for aty in v.args {\n+                        let t = ty::substitute_type_params(cx.ccx.tcx, tps,\n+                                                           aty);\n+                        type_needs_inner(cx, use, t);\n+                    }\n                 }\n+                false\n+              }\n+              ty::ty_param(n, _) {\n+                cx.uses[n] |= use;\n+                false\n+              }\n+              _ { true }\n             }\n-            ret false;\n-          }\n-          ty::ty_param(n, _) {\n-            cx.uses[n] |= use;\n-          }\n-          _ {}\n-        }\n-        ret true;\n+        } else { false }\n     }\n }\n "}, {"sha": "6fc068bba277a44abe53732f191aa49576e3ce87", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -1036,12 +1036,7 @@ fn type_allows_implicit_copy(cx: ctxt, ty: t) -> bool {\n             mt.mutbl != ast::m_imm\n           }\n           ty_rec(fields) {\n-            for field in fields {\n-                if field.mt.mutbl != ast::m_imm {\n-                    ret true;\n-                }\n-            }\n-            false\n+            vec::any(fields, {|f| f.mt.mutbl != ast::m_imm})\n           }\n           _ { false }\n         }\n@@ -1050,12 +1045,12 @@ fn type_allows_implicit_copy(cx: ctxt, ty: t) -> bool {\n \n fn type_structurally_contains_uniques(cx: ctxt, ty: t) -> bool {\n     ret type_structurally_contains(cx, ty, {|sty|\n-        ret alt sty {\n-          ty_uniq(_) { ret true; }\n+        alt sty {\n+          ty_uniq(_) { true }\n           ty_vec(_) { true }\n           ty_str { true }\n-          _ { ret false; }\n-        };\n+          _ { false }\n+        }\n     });\n }\n "}, {"sha": "0c3a7484d4238f4f0bc8bff42c2d9d4433b8b96c", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 69, "deletions": 64, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -2169,43 +2169,45 @@ fn lookup_method_inner(fcx: @fn_ctxt, expr: @ast::expr,\n \n     let mut result = none, complained = false;\n     std::list::iter(fcx.ccx.impl_map.get(expr.id)) {|impls|\n-        if option::is_some(result) { ret; }\n-        for @{did, methods, _} in *impls {\n-            alt vec::find(methods, {|m| m.ident == name}) {\n-              some(m) {\n-                let mut {n_tps, ty: self_ty} = impl_self_ty(tcx, did);\n-                let mut {vars, ty: self_ty} = if n_tps > 0u {\n-                    bind_params(fcx, self_ty, n_tps)\n-                } else {\n-                    {vars: [], ty: self_ty}\n-                };\n+        if option::is_none(result) {\n+            for @{did, methods, _} in *impls {\n+                alt vec::find(methods, {|m| m.ident == name}) {\n+                  some(m) {\n+                    let mut {n_tps, ty: self_ty} = impl_self_ty(tcx, did);\n+                    let mut {vars, ty: self_ty} = if n_tps > 0u {\n+                        bind_params(fcx, self_ty, n_tps)\n+                    } else {\n+                        {vars: [], ty: self_ty}\n+                    };\n \n-                self_ty = universally_quantify_regions(tcx, self_ty);\n-                let ty = universally_quantify_regions(tcx, ty);\n-\n-                alt unify::unify(fcx, self_ty, ty) {\n-                  result::ok(_) {\n-                    if option::is_some(result) {\n-                        // FIXME[impl] score specificity to resolve ambiguity?\n-                        if !complained {\n-                           tcx.sess.span_err(expr.span, \"multiple applicable \\\n-                                                         methods in scope\");\n-                           complained = true;\n+                    self_ty = universally_quantify_regions(tcx, self_ty);\n+                    let ty = universally_quantify_regions(tcx, ty);\n+\n+                    alt unify::unify(fcx, self_ty, ty) {\n+                      result::ok(_) {\n+                        if option::is_some(result) {\n+                            // FIXME[impl] score specificity?\n+                            if !complained {\n+                                tcx.sess.span_err(expr.span,\n+                                                  \"multiple applicable \\\n+                                                   methods in scope\");\n+                                complained = true;\n+                            }\n+                        } else {\n+                            result = some({\n+                                method_ty: ty_from_did(tcx, m.did),\n+                                n_tps: m.n_tps,\n+                                substs: vars,\n+                                origin: method_static(m.did),\n+                                self_sub: none\n+                            });\n                         }\n-                    } else {\n-                        result = some({\n-                            method_ty: ty_from_did(tcx, m.did),\n-                            n_tps: m.n_tps,\n-                            substs: vars,\n-                            origin: method_static(m.did),\n-                            self_sub: none\n-                        });\n+                      }\n+                      result::err(_) {}\n                     }\n                   }\n-                  result::err(_) {}\n+                  _ {}\n                 }\n-              }\n-              _ {}\n             }\n         }\n     }\n@@ -3786,40 +3788,43 @@ mod vtable {\n           _ {\n             let mut found = none;\n             std::list::iter(isc) {|impls|\n-                if option::is_some(found) { ret; }\n-                for im in *impls {\n-                    let match = alt ty::impl_iface(tcx, im.did) {\n-                      some(ity) {\n-                        alt check ty::get(ity).struct {\n-                          ty::ty_iface(id, _) { id == iface_id }\n-                        }\n-                      }\n-                      _ { false }\n-                    };\n-                    if match {\n-                        let {n_tps, ty: self_ty} = impl_self_ty(tcx, im.did);\n-                        let {vars, ty: self_ty} = if n_tps > 0u {\n-                            bind_params(fcx, self_ty, n_tps)\n-                        } else { {vars: [], ty: self_ty} };\n-                        let im_bs = ty::lookup_item_type(tcx, im.did).bounds;\n-                        alt unify::unify(fcx, ty, self_ty) {\n-                          result::ok(_) {\n-                            if option::is_some(found) {\n-                                tcx.sess.span_err(\n-                                    sp, \"multiple applicable implementations \\\n-                                         in scope\");\n-                            } else {\n-                                connect_iface_tps(fcx, sp, vars, iface_tps,\n-                                                  im.did);\n-                                let params = vec::map(vars, {|t|\n-                                    fixup_ty(fcx, sp, t)});\n-                                let subres = lookup_vtables(\n-                                    fcx, isc, sp, im_bs, params, false);\n-                                found = some(vtable_static(im.did, params,\n-                                                           subres));\n+                if option::is_none(found) {\n+                    for im in *impls {\n+                        let match = alt ty::impl_iface(tcx, im.did) {\n+                          some(ity) {\n+                            alt check ty::get(ity).struct {\n+                              ty::ty_iface(id, _) { id == iface_id }\n                             }\n                           }\n-                          result::err(_) {}\n+                          _ { false }\n+                        };\n+                        if match {\n+                            let {n_tps, ty: self_ty} =\n+                                impl_self_ty(tcx, im.did);\n+                            let {vars, ty: self_ty} = if n_tps > 0u {\n+                                bind_params(fcx, self_ty, n_tps)\n+                            } else { {vars: [], ty: self_ty} };\n+                            let im_bs =\n+                                ty::lookup_item_type(tcx, im.did).bounds;\n+                            alt unify::unify(fcx, ty, self_ty) {\n+                              result::ok(_) {\n+                                if option::is_some(found) {\n+                                    tcx.sess.span_err(\n+                                        sp, \"multiple applicable implemen\\\n+                                             tations in scope\");\n+                                } else {\n+                                    connect_iface_tps(fcx, sp, vars,\n+                                                      iface_tps, im.did);\n+                                    let params = vec::map(vars, {|t|\n+                                        fixup_ty(fcx, sp, t)});\n+                                    let subres = lookup_vtables(\n+                                        fcx, isc, sp, im_bs, params, false);\n+                                    found = some(vtable_static(im.did, params,\n+                                                               subres));\n+                                }\n+                              }\n+                              result::err(_) {}\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "0c780f15b8b34a18ddbbb942ad18ddf26f72b753", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -36,6 +36,7 @@ mod middle {\n     mod resolve;\n     mod typeck;\n     mod fn_usage;\n+    mod check_loop;\n     mod check_alt;\n     mod check_const;\n     mod lint;"}, {"sha": "ac535f39bef6ef4fb0f077acc2883ebba512dfe8", "filename": "src/rustc/util/filesearch.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustc%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Ffilesearch.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -134,21 +134,20 @@ fn get_cargo_root_nearest() -> result<path, str> {\n         let mut dirpath = path::split(dirname);\n         let cwd_cargo = path::connect(cwd, \".cargo\");\n         let mut par_cargo = path::connect(dirname, \".cargo\");\n+        let mut rslt = result::ok(cwd_cargo);\n \n-        if os::path_is_dir(cwd_cargo) || cwd_cargo == p {\n-            ret result::ok(cwd_cargo);\n-        }\n-\n-        while vec::is_not_empty(dirpath) && par_cargo != p {\n-            if os::path_is_dir(par_cargo) {\n-                ret result::ok(par_cargo);\n+        if !os::path_is_dir(cwd_cargo) && cwd_cargo != p {\n+            while vec::is_not_empty(dirpath) && par_cargo != p {\n+                if os::path_is_dir(par_cargo) {\n+                    rslt = result::ok(par_cargo);\n+                    break;\n+                }\n+                vec::pop(dirpath);\n+                dirname = path::dirname(dirname);\n+                par_cargo = path::connect(dirname, \".cargo\");\n             }\n-            vec::pop(dirpath);\n-            dirname = path::dirname(dirname);\n-            par_cargo = path::connect(dirname, \".cargo\");\n         }\n-\n-        result::ok(cwd_cargo)\n+        rslt\n     }\n }\n "}, {"sha": "e61ff9dd557a5f6280226c4fd257f28fae9cb539", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -285,9 +285,10 @@ fn future_writer() -> (writer, future::future<str>) {\n         loop {\n             alt comm::recv(port) {\n               write(s) { res += s }\n-              done { ret res; }\n+              done { break; }\n             }\n-        };\n+        }\n+        res\n     };\n     (writer, future)\n }"}, {"sha": "37f8700973a0150cc873c340b9495630b2790abc", "filename": "src/test/compile-fail/break-outside-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:break outside a loop\n+// error-pattern:`break` outside of loop\n fn main() {\n     let pth = break;\n "}, {"sha": "e7b5ea7070f7e7d8876131b07b57c26bda36f180", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e097a85346c947cea60b000677bae10409b804/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e097a85346c947cea60b000677bae10409b804/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=87e097a85346c947cea60b000677bae10409b804", "patch": "@@ -11,7 +11,7 @@ fn call_id_2() { id(true) && id(ret); }\n \n fn call_id_3() { id(ret) && id(ret); }\n \n-fn call_id_4() { while id(break) { } }\n+fn call_id_4() { while id(ret) { } }\n \n fn bind_id_1() { bind id(fail); }\n "}]}