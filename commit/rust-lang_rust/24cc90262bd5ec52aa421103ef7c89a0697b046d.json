{"sha": "24cc90262bd5ec52aa421103ef7c89a0697b046d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0Y2M5MDI2MmJkNWVjNTJhYTQyMTEwM2VmN2M4OWEwNjk3YjA0NmQ=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-01-13T18:12:16Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-02-27T07:01:41Z"}, "message": "note work still to be done\n\nIn particular, uses of inclusive ranges within the standard library are\nstill waiting. Slices and collections can be sliced with `usize` and\n`Range*<usize>`, but not yet `Range*Inclusive<usize>`.\n\nAlso, we need to figure out what to do about `RangeArgument`. Currently\nit has `start()` and `end()` methods which are pretty much identical to\n`Range::start` and `Range::end`. For the same reason as Range itself,\nthese methods can't express a range such as `0...255u8` without\noverflow. The easiest choice, it seems to me, is either changing the\nmeaning of `end()` to be inclusive, or adding a new method, say\n`last()`, that is inclusive and specifying that `end()` returns `None`\nin cases where it would overflow. Changing the semantics would be a\nbreaking change, but `RangeArgument` is unstable so maybe we should do\nit anyway.", "tree": {"sha": "8184668622741faa62a24660cf57433ab81a8337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8184668622741faa62a24660cf57433ab81a8337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24cc90262bd5ec52aa421103ef7c89a0697b046d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24cc90262bd5ec52aa421103ef7c89a0697b046d", "html_url": "https://github.com/rust-lang/rust/commit/24cc90262bd5ec52aa421103ef7c89a0697b046d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24cc90262bd5ec52aa421103ef7c89a0697b046d/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a8a296b724599a1eda807c3057338b11cb94bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a8a296b724599a1eda807c3057338b11cb94bf", "html_url": "https://github.com/rust-lang/rust/commit/15a8a296b724599a1eda807c3057338b11cb94bf"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "4e39191b472ee8f6a85ec7ea67a21fbc0745c6d7", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24cc90262bd5ec52aa421103ef7c89a0697b046d/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cc90262bd5ec52aa421103ef7c89a0697b046d/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=24cc90262bd5ec52aa421103ef7c89a0697b046d", "patch": "@@ -35,6 +35,7 @@ pub trait RangeArgument<T> {\n     }\n }\n \n+// FIXME add inclusive ranges to RangeArgument\n \n impl<T> RangeArgument<T> for RangeFull {}\n "}, {"sha": "305f32e26374769cc4628f1be9a3591058c90a88", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24cc90262bd5ec52aa421103ef7c89a0697b046d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cc90262bd5ec52aa421103ef7c89a0697b046d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=24cc90262bd5ec52aa421103ef7c89a0697b046d", "patch": "@@ -4417,7 +4417,9 @@ macro_rules! range_exact_iter_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl ExactSizeIterator for ops::Range<$t> { }\n \n-        #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+        #[unstable(feature = \"inclusive_range\",\n+                   reason = \"recently added, follows RFC\",\n+                   issue = \"28237\")]\n         impl ExactSizeIterator for ops::RangeInclusive<$t> { }\n     )*)\n }"}, {"sha": "e5a51c98acacba2f31e8fb2600b94eed25d6fb63", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24cc90262bd5ec52aa421103ef7c89a0697b046d/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cc90262bd5ec52aa421103ef7c89a0697b046d/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=24cc90262bd5ec52aa421103ef7c89a0697b046d", "patch": "@@ -1468,7 +1468,7 @@ pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n \n /// An unbounded range.\n #[derive(Copy, Clone, PartialEq, Eq)]\n-#[cfg_attr(stage0, lang = \"range_full\")] // TODO remove attribute after next snapshot\n+#[cfg_attr(stage0, lang = \"range_full\")] // FIXME remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;\n \n@@ -1481,7 +1481,7 @@ impl fmt::Debug for RangeFull {\n \n /// A (half-open) range which is bounded at both ends.\n #[derive(Clone, PartialEq, Eq)]\n-#[cfg_attr(stage0, lang = \"range\")] // TODO remove attribute after next snapshot\n+#[cfg_attr(stage0, lang = \"range\")] // FIXME remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -1501,7 +1501,7 @@ impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n \n /// A range which is only bounded below.\n #[derive(Clone, PartialEq, Eq)]\n-#[cfg_attr(stage0, lang = \"range_from\")] // TODO remove attribute after next snapshot\n+#[cfg_attr(stage0, lang = \"range_from\")] // FIXME remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFrom<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -1518,7 +1518,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n \n /// A range which is only bounded above.\n #[derive(Copy, Clone, PartialEq, Eq)]\n-#[cfg_attr(stage0, lang = \"range_to\")] // TODO remove attribute after next snapshot\n+#[cfg_attr(stage0, lang = \"range_to\")] // FIXME remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeTo<Idx> {\n     /// The upper bound of the range (exclusive).\n@@ -1586,7 +1586,9 @@ impl<Idx: PartialOrd + One + Sub<Output=Idx>> From<Range<Idx>> for RangeInclusiv\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n pub struct RangeToInclusive<Idx> {\n     /// The upper bound of the range (inclusive)\n-    #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+    #[unstable(feature = \"inclusive_range\",\n+               reason = \"recently added, follows RFC\",\n+               issue = \"28237\")]\n     pub end: Idx,\n }\n "}, {"sha": "73466a849dc8c39691a3a156b7e60e3f1157d265", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24cc90262bd5ec52aa421103ef7c89a0697b046d/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cc90262bd5ec52aa421103ef7c89a0697b046d/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=24cc90262bd5ec52aa421103ef7c89a0697b046d", "patch": "@@ -533,6 +533,8 @@ fn slice_index_order_fail(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n+// FIXME implement indexing with inclusive ranges\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Index<ops::Range<usize>> for [T] {\n     type Output = [T];"}]}