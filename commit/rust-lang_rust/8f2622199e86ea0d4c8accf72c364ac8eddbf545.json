{"sha": "8f2622199e86ea0d4c8accf72c364ac8eddbf545", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMjYyMjE5OWU4NmVhMGQ0YzhhY2NmNzJjMzY0YWM4ZWRkYmY1NDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-27T14:39:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-27T14:39:05Z"}, "message": "Merge #6820\n\n6820: Pass the crate environment to proc macros r=jonas-schievink a=jonas-schievink\n\nIn theory, fixes https://github.com/rust-analyzer/rust-analyzer/issues/6696.\r\n\r\nThis seems to result in these obscure crashes for some reason:\r\n\r\n```\r\nthread '<unnamed>' panicked at 'called `Option::unwrap()` on a `None` value', /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:75:51\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/std/src/panicking.rs:483\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking.rs:85\r\n   2: core::panicking::panic\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking.rs:50\r\n   3: core::option::Option<T>::unwrap\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:383\r\n   4: proc_macro::bridge::scoped_cell::ScopedCell<T>::replace\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:75\r\n   5: proc_macro::bridge::client::BridgeState::with::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:291\r\n   6: std::thread::local::LocalKey<T>::try_with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:272\r\n   7: std::thread::local::LocalKey<T>::with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:248\r\n   8: proc_macro::bridge::client::BridgeState::with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:290\r\n   9: proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:329\r\n  10: proc_macro::bridge::client::run_client::{{closure}}::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:375\r\n  11: proc_macro::bridge::scoped_cell::ScopedCell<T>::set::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:80\r\n  12: proc_macro::bridge::scoped_cell::ScopedCell<T>::replace\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:75\r\n  13: proc_macro::bridge::scoped_cell::ScopedCell<T>::set\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:80\r\n  14: proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::enter::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:325\r\n  15: std::thread::local::LocalKey<T>::try_with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:272\r\n  16: std::thread::local::LocalKey<T>::with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:248\r\n  17: proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::enter\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:325\r\n  18: proc_macro::bridge::client::run_client::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:370\r\n  19: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:308\r\n  20: std::panicking::try::do_call\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:381\r\n  21: __rust_try\r\n  22: std::panicking::try\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:345\r\n  23: std::panic::catch_unwind\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:382\r\n  24: proc_macro::bridge::client::run_client\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:369\r\n  25: proc_macro::bridge::client::Client<fn(proc_macro::TokenStream) .> proc_macro::TokenStream>::expand1::run\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:410\r\n  26: proc_macro_srv::proc_macro::bridge::server::run_server\r\n  27: proc_macro_srv::dylib::Expander::expand\r\n  28: proc_macro_srv::ProcMacroSrv::expand\r\n  29: proc_macro_srv::cli::run\r\n  30: rust_analyzer::main\r\n```\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "60202937d17883cd862b1c788e6bde495a16dd2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60202937d17883cd862b1c788e6bde495a16dd2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f2622199e86ea0d4c8accf72c364ac8eddbf545", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6JyJCRBK7hj4Ov3rIwAAdHIIALImxOXrvvKaMiOqRMwAXrpB\nTimArE7qyqCTtaSrBaVDvuRwHFJwWiFZzPDVY4pOT6ArpJ5F1W+Gdg1Sqm/196S/\nk82emh7uPeX6ry7E7DyJt9D54njAPBLZAy60knEGQGHEYkJwuFNsGKGSR9+491L6\nNoKHFatr9sKKCHZDxwxTssB8Km1Nv/YMNa7V2KHgUmGGvrYCyr9kxlQ5DjA0Pz6u\nKy9+9FVLoSFjRGZTh8xzmFLQx2GgXffHvTfmlUU+tawe0UXO2fvfJ6b+LfEeJwpX\nAZDAUv5J1xGL+VB/JX2sNqFeyPwIfCyj7tddNiAxe4CmTkhFf6SDg7gACflio4Y=\n=GpoF\n-----END PGP SIGNATURE-----\n", "payload": "tree 60202937d17883cd862b1c788e6bde495a16dd2a\nparent 0fd75c98ac81c9f6581712ec8802940e547315e3\nparent 70877428a8d9f17834dee72f03ef80ce5c206e68\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609079945 +0000\ncommitter GitHub <noreply@github.com> 1609079945 +0000\n\nMerge #6820\n\n6820: Pass the crate environment to proc macros r=jonas-schievink a=jonas-schievink\n\nIn theory, fixes https://github.com/rust-analyzer/rust-analyzer/issues/6696.\r\n\r\nThis seems to result in these obscure crashes for some reason:\r\n\r\n```\r\nthread '<unnamed>' panicked at 'called `Option::unwrap()` on a `None` value', /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:75:51\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/std/src/panicking.rs:483\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking.rs:85\r\n   2: core::panicking::panic\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking.rs:50\r\n   3: core::option::Option<T>::unwrap\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:383\r\n   4: proc_macro::bridge::scoped_cell::ScopedCell<T>::replace\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:75\r\n   5: proc_macro::bridge::client::BridgeState::with::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:291\r\n   6: std::thread::local::LocalKey<T>::try_with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:272\r\n   7: std::thread::local::LocalKey<T>::with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:248\r\n   8: proc_macro::bridge::client::BridgeState::with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:290\r\n   9: proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:329\r\n  10: proc_macro::bridge::client::run_client::{{closure}}::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:375\r\n  11: proc_macro::bridge::scoped_cell::ScopedCell<T>::set::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:80\r\n  12: proc_macro::bridge::scoped_cell::ScopedCell<T>::replace\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:75\r\n  13: proc_macro::bridge::scoped_cell::ScopedCell<T>::set\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/scoped_cell.rs:80\r\n  14: proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::enter::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:325\r\n  15: std::thread::local::LocalKey<T>::try_with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:272\r\n  16: std::thread::local::LocalKey<T>::with\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:248\r\n  17: proc_macro::bridge::client::<impl proc_macro::bridge::Bridge>::enter\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:325\r\n  18: proc_macro::bridge::client::run_client::{{closure}}\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:370\r\n  19: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:308\r\n  20: std::panicking::try::do_call\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:381\r\n  21: __rust_try\r\n  22: std::panicking::try\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:345\r\n  23: std::panic::catch_unwind\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:382\r\n  24: proc_macro::bridge::client::run_client\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:369\r\n  25: proc_macro::bridge::client::Client<fn(proc_macro::TokenStream) .> proc_macro::TokenStream>::expand1::run\r\n             at /home/jonas/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/proc_macro/src/bridge/client.rs:410\r\n  26: proc_macro_srv::proc_macro::bridge::server::run_server\r\n  27: proc_macro_srv::dylib::Expander::expand\r\n  28: proc_macro_srv::ProcMacroSrv::expand\r\n  29: proc_macro_srv::cli::run\r\n  30: rust_analyzer::main\r\n```\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2622199e86ea0d4c8accf72c364ac8eddbf545", "html_url": "https://github.com/rust-lang/rust/commit/8f2622199e86ea0d4c8accf72c364ac8eddbf545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f2622199e86ea0d4c8accf72c364ac8eddbf545/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fd75c98ac81c9f6581712ec8802940e547315e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd75c98ac81c9f6581712ec8802940e547315e3", "html_url": "https://github.com/rust-lang/rust/commit/0fd75c98ac81c9f6581712ec8802940e547315e3"}, {"sha": "70877428a8d9f17834dee72f03ef80ce5c206e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/70877428a8d9f17834dee72f03ef80ce5c206e68", "html_url": "https://github.com/rust-lang/rust/commit/70877428a8d9f17834dee72f03ef80ce5c206e68"}], "stats": {"total": 71, "additions": 52, "deletions": 19}, "files": [{"sha": "9567bcc424de40d08e1e62f85faa10be7644f73f", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=8f2622199e86ea0d4c8accf72c364ac8eddbf545", "patch": "@@ -6,12 +6,12 @@\n //! actual IO. See `vfs` and `project_model` in the `rust-analyzer` crate for how\n //! actual IO is done and lowered to input.\n \n-use std::{fmt, iter::FromIterator, ops, str::FromStr, sync::Arc};\n+use std::{fmt, iter::FromIterator, ops, panic::RefUnwindSafe, str::FromStr, sync::Arc};\n \n use cfg::CfgOptions;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::SmolStr;\n-use tt::TokenExpander;\n+use tt::{ExpansionError, Subtree};\n use vfs::{file_set::FileSet, FileId, VfsPath};\n \n /// Files are grouped into source roots. A source root is a directory on the\n@@ -150,11 +150,20 @@ pub enum ProcMacroKind {\n     Attr,\n }\n \n+pub trait ProcMacroExpander: fmt::Debug + Send + Sync + RefUnwindSafe {\n+    fn expand(\n+        &self,\n+        subtree: &Subtree,\n+        attrs: Option<&Subtree>,\n+        env: &Env,\n+    ) -> Result<Subtree, ExpansionError>;\n+}\n+\n #[derive(Debug, Clone)]\n pub struct ProcMacro {\n     pub name: SmolStr,\n     pub kind: ProcMacroKind,\n-    pub expander: Arc<dyn TokenExpander>,\n+    pub expander: Arc<dyn ProcMacroExpander>,\n }\n \n impl Eq for ProcMacro {}\n@@ -413,6 +422,10 @@ impl Env {\n     pub fn get(&self, env: &str) -> Option<String> {\n         self.entries.get(env).cloned()\n     }\n+\n+    pub fn iter(&self) -> impl Iterator<Item = (&str, &str)> {\n+        self.entries.iter().map(|(k, v)| (k.as_str(), v.as_str()))\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "5f77a0b1f014d4a121910afe5453db88cae5b14f", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=8f2622199e86ea0d4c8accf72c364ac8eddbf545", "patch": "@@ -14,7 +14,7 @@ pub use crate::{\n     change::Change,\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, Dependency, Edition, Env,\n-        ProcMacro, ProcMacroId, ProcMacroKind, SourceRoot, SourceRootId,\n+        ProcMacro, ProcMacroExpander, ProcMacroId, ProcMacroKind, SourceRoot, SourceRootId,\n     },\n };\n pub use salsa;"}, {"sha": "06f0a3ed9cc423f76b86298523bb0137f78c2489", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=8f2622199e86ea0d4c8accf72c364ac8eddbf545", "patch": "@@ -271,7 +271,7 @@ fn expand_proc_macro(\n         _ => unreachable!(),\n     };\n \n-    expander.expand(db, lazy_id, &macro_arg.0)\n+    expander.expand(db, loc.krate, &macro_arg.0)\n }\n \n fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {"}, {"sha": "7c77f6ce0a36cdefebaefc81dda2496ac4eb31d1", "filename": "crates/hir_expand/src/proc_macro.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs?ref=8f2622199e86ea0d4c8accf72c364ac8eddbf545", "patch": "@@ -1,6 +1,6 @@\n //! Proc Macro Expander stub\n \n-use crate::{db::AstDatabase, LazyMacroId};\n+use crate::db::AstDatabase;\n use base_db::{CrateId, ProcMacroId};\n use tt::buffer::{Cursor, TokenBuffer};\n \n@@ -32,7 +32,7 @@ impl ProcMacroExpander {\n     pub fn expand(\n         self,\n         db: &dyn AstDatabase,\n-        _id: LazyMacroId,\n+        calling_crate: CrateId,\n         tt: &tt::Subtree,\n     ) -> Result<tt::Subtree, mbe::ExpandError> {\n         match self.proc_macro_id {\n@@ -47,7 +47,10 @@ impl ProcMacroExpander {\n                 let tt = remove_derive_attrs(tt)\n                     .ok_or_else(|| err!(\"Fail to remove derive for custom derive\"))?;\n \n-                proc_macro.expander.expand(&tt, None).map_err(mbe::ExpandError::from)\n+                // Proc macros have access to the environment variables of the invoking crate.\n+                let env = &krate_graph[calling_crate].env;\n+\n+                proc_macro.expander.expand(&tt, None, &env).map_err(mbe::ExpandError::from)\n             }\n             None => Err(mbe::ExpandError::UnresolvedProcMacro),\n         }"}, {"sha": "2ea456fb0960b37aadee0d78162950ed73788e46", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=8f2622199e86ea0d4c8accf72c364ac8eddbf545", "patch": "@@ -16,7 +16,7 @@ use std::{\n     sync::Arc,\n };\n \n-use base_db::ProcMacro;\n+use base_db::{Env, ProcMacro};\n use tt::{SmolStr, Subtree};\n \n use crate::process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n@@ -39,17 +39,19 @@ impl PartialEq for ProcMacroProcessExpander {\n     }\n }\n \n-impl tt::TokenExpander for ProcMacroProcessExpander {\n+impl base_db::ProcMacroExpander for ProcMacroProcessExpander {\n     fn expand(\n         &self,\n         subtree: &Subtree,\n         attr: Option<&Subtree>,\n+        env: &Env,\n     ) -> Result<Subtree, tt::ExpansionError> {\n         let task = ExpansionTask {\n             macro_body: subtree.clone(),\n             macro_name: self.name.to_string(),\n             attributes: attr.cloned(),\n             lib: self.dylib_path.to_path_buf(),\n+            env: env.iter().map(|(k, v)| (k.to_string(), v.to_string())).collect(),\n         };\n \n         let result: ExpansionResult = self.process.send_task(msg::Request::ExpansionMacro(task))?;\n@@ -90,7 +92,7 @@ impl ProcMacroClient {\n                     ProcMacroKind::FuncLike => base_db::ProcMacroKind::FuncLike,\n                     ProcMacroKind::Attr => base_db::ProcMacroKind::Attr,\n                 };\n-                let expander: Arc<dyn tt::TokenExpander> = Arc::new(ProcMacroProcessExpander {\n+                let expander = Arc::new(ProcMacroProcessExpander {\n                     process: self.process.clone(),\n                     name: name.clone(),\n                     dylib_path: dylib_path.into(),"}, {"sha": "cf830b59f17834abfaff59d1c179822a79e23071", "filename": "crates/proc_macro_api/src/rpc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs?ref=8f2622199e86ea0d4c8accf72c364ac8eddbf545", "patch": "@@ -51,6 +51,9 @@ pub struct ExpansionTask {\n     pub attributes: Option<Subtree>,\n \n     pub lib: PathBuf,\n+\n+    /// Environment variables to set during macro expansion.\n+    pub env: Vec<(String, String)>,\n }\n \n #[derive(Clone, Eq, PartialEq, Debug, Default, Serialize, Deserialize)]\n@@ -251,6 +254,7 @@ mod tests {\n             macro_name: Default::default(),\n             attributes: None,\n             lib: Default::default(),\n+            env: Default::default(),\n         };\n \n         let json = serde_json::to_string(&task).unwrap();"}, {"sha": "d4f04ee0696780432fc755680fc47fd54f408c50", "filename": "crates/proc_macro_srv/src/lib.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs?ref=8f2622199e86ea0d4c8accf72c364ac8eddbf545", "patch": "@@ -24,7 +24,7 @@ use proc_macro::bridge::client::TokenStream;\n use proc_macro_api::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask};\n use std::{\n     collections::{hash_map::Entry, HashMap},\n-    fs,\n+    env, fs,\n     path::{Path, PathBuf},\n     time::SystemTime,\n };\n@@ -37,7 +37,23 @@ pub(crate) struct ProcMacroSrv {\n impl ProcMacroSrv {\n     pub fn expand(&mut self, task: &ExpansionTask) -> Result<ExpansionResult, String> {\n         let expander = self.expander(&task.lib)?;\n-        match expander.expand(&task.macro_name, &task.macro_body, task.attributes.as_ref()) {\n+\n+        let mut prev_env = HashMap::new();\n+        for (k, v) in &task.env {\n+            prev_env.insert(k.as_str(), env::var_os(k));\n+            env::set_var(k, v);\n+        }\n+\n+        let result = expander.expand(&task.macro_name, &task.macro_body, task.attributes.as_ref());\n+\n+        for (k, _) in &task.env {\n+            match &prev_env[k.as_str()] {\n+                Some(v) => env::set_var(k, v),\n+                None => env::remove_var(k),\n+            }\n+        }\n+\n+        match result {\n             Ok(expansion) => Ok(ExpansionResult { expansion }),\n             Err(msg) => {\n                 let msg = msg.as_str().unwrap_or(\"<unknown error>\");"}, {"sha": "8301dc28a03faeec60ff4c5938e398155f076b20", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2622199e86ea0d4c8accf72c364ac8eddbf545/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=8f2622199e86ea0d4c8accf72c364ac8eddbf545", "patch": "@@ -1,7 +1,7 @@\n //! `tt` crate defines a `TokenTree` data structure: this is the interface (both\n //! input and output) of macros. It closely mirrors `proc_macro` crate's\n //! `TokenTree`.\n-use std::{fmt, panic::RefUnwindSafe};\n+use std::fmt;\n \n use stdx::impl_from;\n \n@@ -247,8 +247,3 @@ impl fmt::Display for ExpansionError {\n         }\n     }\n }\n-\n-pub trait TokenExpander: fmt::Debug + Send + Sync + RefUnwindSafe {\n-    fn expand(&self, subtree: &Subtree, attrs: Option<&Subtree>)\n-        -> Result<Subtree, ExpansionError>;\n-}"}]}