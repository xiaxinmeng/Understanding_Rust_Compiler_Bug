{"sha": "072449c0dc9bd435f002fa7fb531d6819033229e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MjQ0OWMwZGM5YmQ0MzVmMDAyZmE3ZmI1MzFkNjgxOTAzMzIyOWU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-08T03:14:29Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:29Z"}, "message": "Update `trait_impls`", "tree": {"sha": "46ca56316eb008142f8a245ed195f5165022181f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ca56316eb008142f8a245ed195f5165022181f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/072449c0dc9bd435f002fa7fb531d6819033229e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/072449c0dc9bd435f002fa7fb531d6819033229e", "html_url": "https://github.com/rust-lang/rust/commit/072449c0dc9bd435f002fa7fb531d6819033229e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/072449c0dc9bd435f002fa7fb531d6819033229e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "270ee7eca39188ba7adc7af19a26d4aca3cc186b", "url": "https://api.github.com/repos/rust-lang/rust/commits/270ee7eca39188ba7adc7af19a26d4aca3cc186b", "html_url": "https://github.com/rust-lang/rust/commit/270ee7eca39188ba7adc7af19a26d4aca3cc186b"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "1a816e6b2cbed57fa5ff6159d27792dc8a260325", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=072449c0dc9bd435f002fa7fb531d6819033229e", "patch": "@@ -4,7 +4,7 @@ pub use self::definitions::{\n };\n \n use crate::arena::Arena;\n-use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n+use crate::dep_graph::{DepGraph, DepNodeIndex};\n use crate::hir::{HirOwner, HirOwnerItems};\n use crate::middle::cstore::CrateStoreDyn;\n use crate::ty::query::Providers;\n@@ -13,7 +13,7 @@ use rustc_ast::ast::{self, Name, NodeId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, DefIndex, LocalDefId};\n+use rustc_hir::def_id::{DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::Nested;\n@@ -532,11 +532,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn trait_impls(&self, trait_did: DefId) -> &'hir [HirId] {\n-        self.dep_graph.read(DepNode::new_no_params(DepKind::AllLocalTraitImpls));\n-\n-        // N.B., intentionally bypass `self.krate()` so that we\n-        // do not trigger a read of the whole krate here\n-        self.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n+        self.tcx.all_local_trait_impls(LOCAL_CRATE).get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n     /// Gets the attributes on the crate. This is preferable to"}, {"sha": "5dafa462ca89eb8cd268410b2eb655cb6de5b4ba", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=072449c0dc9bd435f002fa7fb531d6819033229e", "patch": "@@ -671,6 +671,9 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n+        query all_local_trait_impls(key: CrateNum) -> &'tcx BTreeMap<DefId, Vec<hir::HirId>> {\n+            desc { \"local trait impls\" }\n+        }\n         query trait_impls_of(key: DefId) -> &'tcx ty::trait_def::TraitImpls {\n             desc { |tcx| \"trait impls of `{}`\", tcx.def_path_str(key) }\n         }"}, {"sha": "d3c4ddf1ed30a834745d70f6197d332818b2fee8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=072449c0dc9bd435f002fa7fb531d6819033229e", "patch": "@@ -3142,8 +3142,11 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n-    *providers =\n-        ty::query::Providers { trait_impls_of: trait_def::trait_impls_of_provider, ..*providers };\n+    *providers = ty::query::Providers {\n+        trait_impls_of: trait_def::trait_impls_of_provider,\n+        all_local_trait_impls: trait_def::all_local_trait_impls,\n+        ..*providers\n+    };\n }\n \n /// A map for the local crate mapping each type to a vector of its"}, {"sha": "3dbcf9228d237b5dc49780c02606e29317a360e5", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=072449c0dc9bd435f002fa7fb531d6819033229e", "patch": "@@ -56,6 +56,7 @@ use rustc_attr as attr;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n+use std::collections::BTreeMap;\n use std::convert::TryFrom;\n use std::ops::Deref;\n use std::sync::Arc;"}, {"sha": "91a99ec43e6a973ae32edea2ea89ff430c23dd6e", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072449c0dc9bd435f002fa7fb531d6819033229e/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=072449c0dc9bd435f002fa7fb531d6819033229e", "patch": "@@ -5,11 +5,13 @@ use crate::ty::fast_reject;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ty, TyCtxt};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::HirId;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable;\n+use std::collections::BTreeMap;\n \n /// A trait's definition with type information.\n #[derive(HashStable)]\n@@ -146,6 +148,14 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n+// Query provider for `all_local_trait_impls`.\n+pub(super) fn all_local_trait_impls<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    krate: CrateNum,\n+) -> &'tcx BTreeMap<DefId, Vec<HirId>> {\n+    &tcx.hir_crate(krate).trait_impls\n+}\n+\n // Query provider for `trait_impls_of`.\n pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> &TraitImpls {\n     let mut impls = TraitImpls::default();"}]}