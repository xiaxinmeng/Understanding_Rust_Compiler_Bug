{"sha": "c318364d485a5673015678b3ad0037eff71d6a8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMTgzNjRkNDg1YTU2NzMwMTU2NzhiM2FkMDAzN2VmZjcxZDZhOGU=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-06-09T18:28:41Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-06-09T18:28:41Z"}, "message": "Add more tests + visit_ty in some places", "tree": {"sha": "fd4463fb04d435b9f73e082b60566769876ae5f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd4463fb04d435b9f73e082b60566769876ae5f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c318364d485a5673015678b3ad0037eff71d6a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c318364d485a5673015678b3ad0037eff71d6a8e", "html_url": "https://github.com/rust-lang/rust/commit/c318364d485a5673015678b3ad0037eff71d6a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c318364d485a5673015678b3ad0037eff71d6a8e/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7299dfcd4628965b58da10ec7393ab8f2c7e14", "html_url": "https://github.com/rust-lang/rust/commit/8e7299dfcd4628965b58da10ec7393ab8f2c7e14"}], "stats": {"total": 83, "additions": 62, "deletions": 21}, "files": [{"sha": "5a79a9cc6ecfd1ffe1e4a1a4ca4a5439392b4f3b", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c318364d485a5673015678b3ad0037eff71d6a8e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c318364d485a5673015678b3ad0037eff71d6a8e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=c318364d485a5673015678b3ad0037eff71d6a8e", "patch": "@@ -156,10 +156,10 @@ where\n                 let leaf = leaf.subst(tcx, ct.substs);\n                 self.visit_const(leaf)\n             }\n-            ACNode::Binop(..)\n-            | ACNode::UnaryOp(..)\n-            | ACNode::FunctionCall(_, _)\n-            | ACNode::Cast(_, _, _) => ControlFlow::CONTINUE,\n+            ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n+            ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n+                ControlFlow::CONTINUE\n+            }\n         })\n     }\n "}, {"sha": "8094b01b3801684dfb3078ffee8dc78471a9ae21", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c318364d485a5673015678b3ad0037eff71d6a8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c318364d485a5673015678b3ad0037eff71d6a8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=c318364d485a5673015678b3ad0037eff71d6a8e", "patch": "@@ -97,10 +97,19 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n                         ControlFlow::CONTINUE\n                     }\n-                    Node::Binop(_, _, _)\n-                    | Node::UnaryOp(_, _)\n-                    | Node::FunctionCall(_, _)\n-                    | Node::Cast(_, _, _) => ControlFlow::CONTINUE,\n+                    Node::Cast(_, _, ty) => {\n+                        let ty = ty.subst(tcx, ct.substs);\n+                        if ty.has_infer_types_or_consts() {\n+                            failure_kind = FailureKind::MentionsInfer;\n+                        } else if ty.has_param_types_or_consts() {\n+                            failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n+                        }\n+\n+                        ControlFlow::CONTINUE\n+                    }\n+                    Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => {\n+                        ControlFlow::CONTINUE\n+                    }\n                 });\n \n                 match failure_kind {"}, {"sha": "7ebef7f8883ae0902eca5df5eea3c5a409771b52", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c318364d485a5673015678b3ad0037eff71d6a8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c318364d485a5673015678b3ad0037eff71d6a8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=c318364d485a5673015678b3ad0037eff71d6a8e", "patch": "@@ -838,10 +838,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                         let leaf = leaf.subst(self.tcx, ct.substs);\n                         self.visit_const(leaf)\n                     }\n-                    Node::Binop(..)\n-                    | Node::UnaryOp(..)\n-                    | Node::FunctionCall(_, _)\n-                    | Node::Cast(_, _, _) => ControlFlow::CONTINUE,\n+                    Node::Cast(_, _, ty) => self.visit_ty(ty),\n+                    Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n+                        ControlFlow::CONTINUE\n+                    }\n                 })\n             } else {\n                 ControlFlow::CONTINUE\n@@ -860,10 +860,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                             let leaf = leaf.subst(self.tcx, ct.substs);\n                             self.visit_const(leaf)\n                         }\n-                        Node::Binop(..)\n-                        | Node::UnaryOp(..)\n-                        | Node::FunctionCall(_, _)\n-                        | Node::Cast(_, _, _) => ControlFlow::CONTINUE,\n+                        Node::Cast(_, _, ty) => self.visit_ty(ty),\n+                        Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n+                            ControlFlow::CONTINUE\n+                        }\n                     })\n                 } else {\n                     ControlFlow::CONTINUE"}, {"sha": "3711a9a87e8ac383a6618bfae2ae9564f253d15e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-2.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c318364d485a5673015678b3ad0037eff71d6a8e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c318364d485a5673015678b3ad0037eff71d6a8e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs?ref=c318364d485a5673015678b3ad0037eff71d6a8e", "patch": "@@ -1,13 +1,20 @@\n #![feature(const_evaluatable_checked, const_generics)]\n #![allow(incomplete_features)]\n \n-trait Evaluatable<const N: u128> {}\n-impl<const N: u128> Evaluatable<N> for () {}\n+struct Evaluatable<const N: u128> {}\n \n struct Foo<const N: u8>([u8; N as usize])\n //~^ Error: unconstrained generic constant\n //~| help: try adding a `where` bound using this expression: `where [(); N as usize]:`\n where\n-    (): Evaluatable<{N as u128}>;\n+    Evaluatable<{N as u128}>:;\n+\n+struct Foo2<const N: u8>(Evaluatable::<{N as u128}>) where Evaluatable<{N as usize as u128 }>:;\n+//~^ Error: unconstrained generic constant\n+//~| help: try adding a `where` bound using this expression: `where [(); {N as u128}]:`\n+\n+struct Bar<const N: u8>([u8; (N + 2) as usize]) where [(); (N + 1) as usize]:;\n+//~^ unconstrained generic constant\n+//~| help: try adding a `where` bound using this expression: `where [(); (N + 2) as usize]:`\n \n fn main() {}"}, {"sha": "5ca04d25e556e3a2f89298ca9da58410691b9ac1", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-2.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c318364d485a5673015678b3ad0037eff71d6a8e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c318364d485a5673015678b3ad0037eff71d6a8e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.stderr?ref=c318364d485a5673015678b3ad0037eff71d6a8e", "patch": "@@ -1,10 +1,26 @@\n error: unconstrained generic constant\n-  --> $DIR/abstract-const-as-cast-2.rs:7:25\n+  --> $DIR/abstract-const-as-cast-2.rs:6:25\n    |\n LL | struct Foo<const N: u8>([u8; N as usize])\n    |                         ^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); N as usize]:`\n \n-error: aborting due to previous error\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-2.rs:12:26\n+   |\n+LL | struct Foo2<const N: u8>(Evaluatable::<{N as u128}>) where Evaluatable<{N as usize as u128 }>:;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); {N as u128}]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-2.rs:16:25\n+   |\n+LL | struct Bar<const N: u8>([u8; (N + 2) as usize]) where [(); (N + 1) as usize]:;\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); (N + 2) as usize]:`\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "e486b91abee0203e3bb8ad51b7187b4dd9ba833b", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c318364d485a5673015678b3ad0037eff71d6a8e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c318364d485a5673015678b3ad0037eff71d6a8e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast.rs?ref=c318364d485a5673015678b3ad0037eff71d6a8e", "patch": "@@ -6,4 +6,13 @@ struct Foo<const N: u8>([u8; N as usize])\n where\n     [(); N as usize]:;\n \n+\n+// unifying with subtrees\n+struct Evaluatable<const N: u16>;\n+fn foo<const N: u8>() where Evaluatable<{N as usize as u16 }>: {\n+    let _ = Foo::<N>([1; N as usize]);\n+}\n+\n+struct Bar<const N: u8>([u8; (N + 2) as usize]) where [(); (N + 2) as usize]:;\n+\n fn main() {}"}]}