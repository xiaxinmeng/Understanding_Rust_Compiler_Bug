{"sha": "98532a30901d7544c49fe82f499db53699645de0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NTMyYTMwOTAxZDc1NDRjNDlmZTgyZjQ5OWRiNTM2OTk2NDVkZTA=", "commit": {"author": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-05-20T20:09:03Z"}, "committer": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-05-21T18:08:26Z"}, "message": "Adjust according to petrochenkov's review comments", "tree": {"sha": "e4607dd767d7ead3a531d4cc772cc7001930c507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4607dd767d7ead3a531d4cc772cc7001930c507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98532a30901d7544c49fe82f499db53699645de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98532a30901d7544c49fe82f499db53699645de0", "html_url": "https://github.com/rust-lang/rust/commit/98532a30901d7544c49fe82f499db53699645de0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98532a30901d7544c49fe82f499db53699645de0/comments", "author": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad24baf06c687517f188e8c6e6ce848924d001c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad24baf06c687517f188e8c6e6ce848924d001c", "html_url": "https://github.com/rust-lang/rust/commit/6ad24baf06c687517f188e8c6e6ce848924d001c"}], "stats": {"total": 118, "additions": 27, "deletions": 91}, "files": [{"sha": "53f32b7c800bdaf74af35dfcba588571e1be4f16", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 22, "deletions": 43, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/98532a30901d7544c49fe82f499db53699645de0/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98532a30901d7544c49fe82f499db53699645de0/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=98532a30901d7544c49fe82f499db53699645de0", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKin\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n use rustc_ast::util::classify;\n-use rustc_errors::{struct_span_err, Applicability, PResult};\n+use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym};\n \n@@ -145,12 +145,12 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_local_mk(&mut self, lo: Span, attrs: AttrVec) -> PResult<'a, Stmt> {\n-        let local = self.parse_local(lo, attrs)?;\n+        let local = self.parse_local(attrs)?;\n         Ok(self.mk_stmt(lo.to(self.prev_token.span), StmtKind::Local(local)))\n     }\n \n     /// Parses a local variable declaration.\n-    fn parse_local(&mut self, let_span: Span, attrs: AttrVec) -> PResult<'a, P<Local>> {\n+    fn parse_local(&mut self, attrs: AttrVec) -> PResult<'a, P<Local>> {\n         let lo = self.prev_token.span;\n         let pat = self.parse_top_pat(GateOr::Yes)?;\n \n@@ -174,10 +174,7 @@ impl<'a> Parser<'a> {\n         } else {\n             (None, None)\n         };\n-        let init = match (\n-            self.parse_initializer(let_span.until(pat.span), ty.is_some(), err.is_some()),\n-            err,\n-        ) {\n+        let init = match (self.parse_initializer(err.is_some()), err) {\n             (Ok(init), None) => {\n                 // init parsed, ty parsed\n                 init\n@@ -219,46 +216,28 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the RHS of a local variable declaration (e.g., '= 14;').\n-    fn parse_initializer(\n-        &mut self,\n-        let_span: Span,\n-        has_ty: bool,\n-        skip_eq: bool,\n-    ) -> PResult<'a, Option<P<Expr>>> {\n-        // In case of code like `let x: i8 += 1`, `i8` is interpreted as a trait consuming the `+`\n-        // from `+=`.\n-        let ate_plus = self.prev_token.is_like_plus() && has_ty;\n-        let parse = if !skip_eq && (ate_plus || matches!(self.token.kind, TokenKind::BinOpEq(_))) {\n-            // Error recovery for `let x += 1`\n-            let mut err = struct_span_err!(\n-                self.sess.span_diagnostic,\n-                self.token.span,\n-                E0067,\n-                \"can't reassign to an uninitialized variable\"\n-            );\n-            err.span_suggestion_short(\n-                self.token.span,\n-                \"initialize the variable\",\n-                \"=\".to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-            // In case of code like `let x += 1` it's possible the user may have meant to write `x += 1`\n-            if !has_ty {\n-                err.span_suggestion_short(\n-                    let_span,\n-                    \"otherwise, reassign to a previously initialized variable\",\n-                    \"\".to_string(),\n+    fn parse_initializer(&mut self, eq_optional: bool) -> PResult<'a, Option<P<Expr>>> {\n+        let eq_consumed = match self.token.kind {\n+            token::BinOpEq(..) => {\n+                // Recover `let x <op>= 1` as `let x = 1`\n+                self.struct_span_err(\n+                    self.token.span,\n+                    \"can't reassign to an uninitialized variable\",\n+                )\n+                .span_suggestion_short(\n+                    self.token.span,\n+                    \"initialize the variable\",\n+                    \"=\".to_string(),\n                     Applicability::MaybeIncorrect,\n-                );\n+                )\n+                .emit();\n+                self.bump();\n+                true\n             }\n-            err.emit();\n-            self.bump();\n-            true\n-        } else {\n-            self.eat(&token::Eq) || skip_eq\n+            _ => self.eat(&token::Eq),\n         };\n \n-        if parse { Ok(Some(self.parse_expr()?)) } else { Ok(None) }\n+        Ok(if eq_consumed || eq_optional { Some(self.parse_expr()?) } else { None })\n     }\n \n     /// Parses a block. No inner attributes are allowed."}, {"sha": "4d6d9b5c8d37f894d2e5c2eae572cad400b9bcb7", "filename": "src/test/ui/parser/let-binop-plus.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ad24baf06c687517f188e8c6e6ce848924d001c/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad24baf06c687517f188e8c6e6ce848924d001c/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.rs?ref=6ad24baf06c687517f188e8c6e6ce848924d001c", "patch": "@@ -1,8 +0,0 @@\n-#![allow(bare_trait_objects)]\n-\n-fn main() {\n-    let a: i8 += 1;\n-    //~^ ERROR expected trait, found builtin type `i8`\n-    //~| ERROR can't reassign to an uninitialized variable\n-    let _ = a;\n-}"}, {"sha": "91a59fe24fedc1f77332a7388fa889cb19ce9a6d", "filename": "src/test/ui/parser/let-binop-plus.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ad24baf06c687517f188e8c6e6ce848924d001c/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ad24baf06c687517f188e8c6e6ce848924d001c/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.stderr?ref=6ad24baf06c687517f188e8c6e6ce848924d001c", "patch": "@@ -1,16 +0,0 @@\n-error[E0067]: can't reassign to an uninitialized variable\n-  --> $DIR/let-binop-plus.rs:4:16\n-   |\n-LL |     let a: i8 += 1;\n-   |                ^ help: initialize the variable\n-\n-error[E0404]: expected trait, found builtin type `i8`\n-  --> $DIR/let-binop-plus.rs:4:12\n-   |\n-LL |     let a: i8 += 1;\n-   |            ^^ not a trait\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0067, E0404.\n-For more information about an error, try `rustc --explain E0067`."}, {"sha": "71431499ac70b8c0ea43c7e8db333fac646da5e4", "filename": "src/test/ui/parser/let-binop.stderr", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/98532a30901d7544c49fe82f499db53699645de0/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98532a30901d7544c49fe82f499db53699645de0/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr?ref=98532a30901d7544c49fe82f499db53699645de0", "patch": "@@ -1,39 +1,20 @@\n-error[E0067]: can't reassign to an uninitialized variable\n+error: can't reassign to an uninitialized variable\n   --> $DIR/let-binop.rs:2:15\n    |\n LL |     let a: i8 *= 1;\n    |               ^^ help: initialize the variable\n \n-error[E0067]: can't reassign to an uninitialized variable\n+error: can't reassign to an uninitialized variable\n   --> $DIR/let-binop.rs:4:11\n    |\n LL |     let b += 1;\n-   |           ^^\n-   |\n-help: initialize the variable\n-   |\n-LL |     let b = 1;\n-   |           ^\n-help: otherwise, reassign to a previously initialized variable\n-   |\n-LL |     b += 1;\n-   |    --\n+   |           ^^ help: initialize the variable\n \n-error[E0067]: can't reassign to an uninitialized variable\n+error: can't reassign to an uninitialized variable\n   --> $DIR/let-binop.rs:6:11\n    |\n LL |     let c *= 1;\n-   |           ^^\n-   |\n-help: initialize the variable\n-   |\n-LL |     let c = 1;\n-   |           ^\n-help: otherwise, reassign to a previously initialized variable\n-   |\n-LL |     c *= 1;\n-   |    --\n+   |           ^^ help: initialize the variable\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0067`."}]}