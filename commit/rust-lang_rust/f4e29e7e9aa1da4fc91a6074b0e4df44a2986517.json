{"sha": "f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZTI5ZTdlOWFhMWRhNGZjOTFhNjA3NGIwZTRkZjQ0YTI5ODY1MTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-20T20:08:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-26T16:42:06Z"}, "message": "Fixup various places that were doing `&T+'a` and do `&(T+'a)`", "tree": {"sha": "0da944aff45bf45cd6e085b92aa78110d62cfb20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0da944aff45bf45cd6e085b92aa78110d62cfb20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "html_url": "https://github.com/rust-lang/rust/commit/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74a1041a4d7ae08d223f5ec623f6a698962d5667", "url": "https://api.github.com/repos/rust-lang/rust/commits/74a1041a4d7ae08d223f5ec623f6a698962d5667", "html_url": "https://github.com/rust-lang/rust/commit/74a1041a4d7ae08d223f5ec623f6a698962d5667"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "d2bf7f1e15ab44d001daa11b188ecc883bc415d5", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -85,7 +85,7 @@ pub struct Formatter<'a> {\n     width: Option<uint>,\n     precision: Option<uint>,\n \n-    buf: &'a mut FormatWriter+'a,\n+    buf: &'a mut (FormatWriter+'a),\n     curarg: slice::Items<'a, Argument<'a>>,\n     args: &'a [Argument<'a>],\n }\n@@ -565,7 +565,7 @@ impl<'a, Sized? T: Show> Show for &'a T {\n impl<'a, Sized? T: Show> Show for &'a mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result { (**self).fmt(f) }\n }\n-impl<'a> Show for &'a Show+'a {\n+impl<'a> Show for &'a (Show+'a) {\n     fn fmt(&self, f: &mut Formatter) -> Result { (*self).fmt(f) }\n }\n \n@@ -724,7 +724,7 @@ macro_rules! tuple (\n \n tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n \n-impl<'a> Show for &'a any::Any+'a {\n+impl<'a> Show for &'a (any::Any+'a) {\n     fn fmt(&self, f: &mut Formatter) -> Result { f.pad(\"&Any\") }\n }\n "}, {"sha": "5ab3978b8a8f7e07e58c15680112f12523b87e68", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -295,7 +295,7 @@ impl OverloadedCallType {\n pub struct ExprUseVisitor<'d,'t,'tcx,TYPER:'t> {\n     typer: &'t TYPER,\n     mc: mc::MemCategorizationContext<'t,TYPER>,\n-    delegate: &'d mut Delegate<'tcx>+'d,\n+    delegate: &'d mut (Delegate<'tcx>+'d),\n }\n \n // If the TYPER results in an error, it's because the type check"}, {"sha": "8658a5248ccc2a622c3d06ebb6a0e5d3b6019f54", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -43,7 +43,7 @@ use util::ppaux::Repr;\n pub struct SelectionContext<'cx, 'tcx:'cx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     param_env: &'cx ty::ParameterEnvironment<'tcx>,\n-    typer: &'cx Typer<'tcx>+'cx,\n+    typer: &'cx (Typer<'tcx>+'cx),\n \n     /// Skolemizer used specifically for skolemizing entries on the\n     /// obligation stack. This ensures that all entries on the stack"}, {"sha": "3bca24f479f704d487eae5cab9944d8dd2bd609e", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -139,11 +139,11 @@ impl RegionScope for BindingRscope {\n /// A scope which simply shifts the Debruijn index of other scopes\n /// to account for binding levels.\n pub struct ShiftedRscope<'r> {\n-    base_scope: &'r RegionScope+'r\n+    base_scope: &'r (RegionScope+'r)\n }\n \n impl<'r> ShiftedRscope<'r> {\n-    pub fn new(base_scope: &'r RegionScope+'r) -> ShiftedRscope<'r> {\n+    pub fn new(base_scope: &'r (RegionScope+'r)) -> ShiftedRscope<'r> {\n         ShiftedRscope { base_scope: base_scope }\n     }\n }"}, {"sha": "697ee95df4c0f0f757820f4287093eecd2bd3a8b", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -86,7 +86,7 @@ struct Exception {\n     cause: Option<Box<Any + Send>>,\n }\n \n-pub type Callback = fn(msg: &Any + Send, file: &'static str, line: uint);\n+pub type Callback = fn(msg: &(Any + Send), file: &'static str, line: uint);\n \n // Variables used for invoking callbacks when a task starts to unwind.\n //"}, {"sha": "19d23265b01adf1e55ba16bbec4409b3a9af7928", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -398,7 +398,7 @@ fn fmt_number_or_null(v: f64) -> string::String {\n \n /// A structure for implementing serialization to JSON.\n pub struct Encoder<'a> {\n-    writer: &'a mut io::Writer+'a,\n+    writer: &'a mut (io::Writer+'a),\n }\n \n impl<'a> Encoder<'a> {\n@@ -602,7 +602,7 @@ impl<'a> ::Encoder<io::IoError> for Encoder<'a> {\n /// Another encoder for JSON, but prints out human-readable JSON instead of\n /// compact data\n pub struct PrettyEncoder<'a> {\n-    writer: &'a mut io::Writer+'a,\n+    writer: &'a mut (io::Writer+'a),\n     curr_indent: uint,\n     indent: uint,\n }"}, {"sha": "3191519815ae46ed6801162eb76260dfb96cfbde", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -84,7 +84,7 @@ pub struct Handle<'rx, T:'rx> {\n     next: *mut Handle<'static, ()>,\n     prev: *mut Handle<'static, ()>,\n     added: bool,\n-    packet: &'rx Packet+'rx,\n+    packet: &'rx (Packet+'rx),\n \n     // due to our fun transmutes, we be sure to place this at the end. (nothing\n     // previous relies on T)"}, {"sha": "d839c1484e56216492131f57df96eb384dfb9876", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -40,7 +40,7 @@ impl Writer for Stdio {\n     }\n }\n \n-pub fn on_fail(obj: &Any + Send, file: &'static str, line: uint) {\n+pub fn on_fail(obj: &(Any+Send), file: &'static str, line: uint) {\n     let msg = match obj.downcast_ref::<&'static str>() {\n         Some(s) => *s,\n         None => match obj.downcast_ref::<String>() {"}, {"sha": "311cbe6ece852060716b72cd242b38478a4af6ad", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -911,7 +911,7 @@ impl<'a> Reader for Box<Reader+'a> {\n     }\n }\n \n-impl<'a> Reader for &'a mut Reader+'a {\n+impl<'a> Reader for &'a mut (Reader+'a) {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { (*self).read(buf) }\n }\n \n@@ -1279,7 +1279,7 @@ impl<'a> Writer for Box<Writer+'a> {\n     }\n }\n \n-impl<'a> Writer for &'a mut Writer+'a {\n+impl<'a> Writer for &'a mut (Writer+'a) {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> { (**self).write(buf) }\n "}, {"sha": "d47256b1d18904a7364bccee8416d016ec08baef", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -288,7 +288,7 @@ mod imp {\n \n         struct Context<'a> {\n             idx: int,\n-            writer: &'a mut Writer+'a,\n+            writer: &'a mut (Writer+'a),\n             last_error: Option<IoError>,\n         }\n "}, {"sha": "954c72edff46b1c43596b3db114694ba1912e3f7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -61,7 +61,7 @@ pub struct State<'a> {\n     literals: Option<Vec<comments::Literal> >,\n     cur_cmnt_and_lit: CurrentCommentAndLiteral,\n     boxes: Vec<pp::Breaks>,\n-    ann: &'a PpAnn+'a,\n+    ann: &'a (PpAnn+'a),\n     encode_idents_with_hygiene: bool,\n }\n "}, {"sha": "f6511d68662eea478baea35e26ee5baf6f036f06", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -25,7 +25,7 @@ impl Index<uint, str> for S {\n struct T;\n \n impl Index<uint, Show + 'static> for T {\n-    fn index<'a>(&'a self, idx: &uint) -> &'a Show + 'static {\n+    fn index<'a>(&'a self, idx: &uint) -> &'a (Show + 'static) {\n         static x: uint = 42;\n         &x\n     }"}, {"sha": "0202d538cf650941785177cee728144c00e99c16", "filename": "src/test/compile-fail/issue-12470.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fissue-12470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fissue-12470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12470.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -24,7 +24,7 @@ impl X for B {\n }\n \n struct A<'a> {\n-    p: &'a X+'a\n+    p: &'a (X+'a)\n }\n \n fn make_a<'a>(p: &'a X) -> A<'a> {"}, {"sha": "cbf4412a81df286d23ef2da9f2bb817e797adc63", "filename": "src/test/compile-fail/issue-14285.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fissue-14285.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fissue-14285.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14285.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -14,7 +14,7 @@ struct A;\n \n impl Foo for A {}\n \n-struct B<'a>(&'a Foo+'a);\n+struct B<'a>(&'a (Foo+'a));\n \n fn foo<'a>(a: &Foo) -> B<'a> {\n     B(a)    //~ ERROR cannot infer an appropriate lifetime"}, {"sha": "202529c30b3e6b3d4691ccdbbae4fac1bcf87b49", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -44,15 +44,15 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n \n     // borrowed object types are generally ok\n     assert_copy::<&'a Dummy>();\n-    assert_copy::<&'a Dummy+Copy>();\n-    assert_copy::<&'static Dummy+Copy>();\n+    assert_copy::<&'a (Dummy+Copy)>();\n+    assert_copy::<&'static (Dummy+Copy)>();\n \n     // owned object types are not ok\n     assert_copy::<Box<Dummy>>(); //~ ERROR `core::kinds::Copy` is not implemented\n     assert_copy::<Box<Dummy+Copy>>(); //~ ERROR `core::kinds::Copy` is not implemented\n \n     // mutable object types are not ok\n-    assert_copy::<&'a mut Dummy+Copy>();  //~ ERROR `core::kinds::Copy` is not implemented\n+    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `core::kinds::Copy` is not implemented\n \n     // closures are like an `&mut` object\n     assert_copy::<||>(); //~ ERROR `core::kinds::Copy` is not implemented"}, {"sha": "4fbb3eab8c416234b10de8ef08ff6c2fc036cf35", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -19,7 +19,7 @@ trait Message : Send { }\n // careful with object types, who knows what they close over...\n \n fn object_ref_with_static_bound_not_ok() {\n-    assert_send::<&'static Dummy+'static>();\n+    assert_send::<&'static (Dummy+'static)>();\n     //~^ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n@@ -36,7 +36,7 @@ fn closure_with_no_bound_not_ok<'a>() {\n }\n \n fn object_with_send_bound_ok() {\n-    assert_send::<&'static Dummy+Send>();\n+    assert_send::<&'static (Dummy+Send)>();\n     assert_send::<Box<Dummy+Send>>();\n     assert_send::<proc():Send>;\n     assert_send::<||:Send>;"}, {"sha": "a551975364329f7f7bbcf453674ff5ece9e7f5fb", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -21,13 +21,13 @@ fn test51<'a>() {\n     //~^ ERROR the trait `core::kinds::Send` is not implemented\n }\n fn test52<'a>() {\n-    assert_send::<&'a Dummy+Send>();\n+    assert_send::<&'a (Dummy+Send)>();\n     //~^ ERROR does not fulfill the required lifetime\n }\n \n // ...unless they are properly bounded\n fn test60() {\n-    assert_send::<&'static Dummy+Send>();\n+    assert_send::<&'static (Dummy+Send)>();\n }\n fn test61() {\n     assert_send::<Box<Dummy+Send>>();"}, {"sha": "ea8c262830633b20e1ff7c8b143dc0707106c6e6", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -23,7 +23,7 @@ fn test53() {\n \n // ...unless they are properly bounded\n fn test60() {\n-    assert_send::<&'static Dummy+Send>();\n+    assert_send::<&'static (Dummy+Send)>();\n }\n fn test61() {\n     assert_send::<Box<Dummy+Send>>();"}, {"sha": "4758ce71ffff5a4c77d94e8c25254a8a952e998a", "filename": "src/test/compile-fail/region-object-lifetime-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-1.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -28,14 +28,14 @@ fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a Foo) -> &'b () {\n \n // Borrowed receiver with two distinct lifetimes, but we know that\n // 'b:'a, hence &'a () is permitted.\n-fn borrowed_receiver_related_lifetimes<'a,'b>(x: &'a Foo+'b) -> &'a () {\n+fn borrowed_receiver_related_lifetimes<'a,'b>(x: &'a (Foo+'b)) -> &'a () {\n     x.borrowed()\n }\n \n // Here we have two distinct lifetimes, but we try to return a pointer\n // with the longer lifetime when (from the signature) we only know\n // that it lives as long as the shorter lifetime. Therefore, error.\n-fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a Foo+'b) -> &'b () {\n+fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (Foo+'b)) -> &'b () {\n     x.borrowed() //~ ERROR cannot infer\n }\n "}, {"sha": "660a9be4f63c5cd2cbfce201bb83ccb6ebebcfe2", "filename": "src/test/compile-fail/regions-bounded-by-send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -57,12 +57,12 @@ fn box_with_region_not_ok<'a>() {\n // objects with insufficient bounds no ok\n \n fn object_with_random_bound_not_ok<'a>() {\n-    assert_send::<&'a Dummy+'a>();\n+    assert_send::<&'a (Dummy+'a)>();\n     //~^ ERROR not implemented\n }\n \n fn object_with_send_bound_not_ok<'a>() {\n-    assert_send::<&'a Dummy+Send>();\n+    assert_send::<&'a (Dummy+Send)>();\n     //~^ ERROR does not fulfill\n }\n "}, {"sha": "48945868bd35539f49f1ba584e888f4852b8df7d", "filename": "src/test/compile-fail/regions-close-object-into-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -10,7 +10,7 @@\n \n \n trait A<T> {}\n-struct B<'a, T>(&'a A<T>+'a);\n+struct B<'a, T>(&'a (A<T>+'a));\n \n trait X {}\n impl<'a, T> X for B<'a, T> {}"}, {"sha": "4e31a41c4e07489687bfbbf59b35f65f2823aa4d", "filename": "src/test/compile-fail/regions-trait-variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -31,7 +31,7 @@ impl Drop for B {\n }\n \n struct A<'r> {\n-    p: &'r X+'r\n+    p: &'r (X+'r)\n }\n \n fn make_a(p:&X) -> A {"}, {"sha": "a034352c4a69457e8f6cf49c31f13ac20819f90a", "filename": "src/test/compile-fail/trait-bounds-not-on-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-impl.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -13,7 +13,7 @@ trait Foo {\n \n struct Bar;\n \n-impl Foo + Owned for Bar { //~ ERROR bounded traits are only valid in type position\n+impl Foo + Owned for Bar { //~ ERROR not a trait\n }\n \n fn main() { }"}, {"sha": "081efa429c3e43c1d233de5f61ebd53fd5209be3", "filename": "src/test/compile-fail/trait-bounds-not-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -11,6 +11,6 @@\n \n struct Foo;\n \n-fn foo(_x: Box<Foo + Send>) { } //~ ERROR kind bounds can only be used on trait types\n+fn foo(_x: Box<Foo + Send>) { } //~ ERROR expected a reference to a trait\n \n fn main() { }"}, {"sha": "4da496621d1c942f2a4da163e051755398517976", "filename": "src/test/compile-fail/trait-bounds-sugar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -16,14 +16,14 @@ trait Foo {}\n fn a(_x: Box<Foo+Send>) {\n }\n \n-fn b(_x: &'static Foo+'static) {\n+fn b(_x: &'static (Foo+'static)) {\n }\n \n fn c(x: Box<Foo+Sync>) {\n     a(x); //~ ERROR mismatched types\n }\n \n-fn d(x: &'static Foo+Sync) {\n+fn d(x: &'static (Foo+Sync)) {\n     b(x); //~ ERROR cannot infer\n     //~^ ERROR mismatched types\n }"}, {"sha": "bbb049eb9603315577e73789545a5954b7bb17da", "filename": "src/test/run-pass/colorful-write-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -18,7 +18,7 @@ use std::fmt;\n use std::fmt::FormatWriter;\n \n struct Foo<'a> {\n-    writer: &'a mut Writer+'a,\n+    writer: &'a mut (Writer+'a),\n     other: &'a str,\n }\n "}, {"sha": "eaf7131e1d878a36261f57ec9c8f354b7c4e5273", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -25,7 +25,7 @@ impl Index<uint, str> for S {\n struct T;\n \n impl Index<uint, Show + 'static> for T {\n-    fn index<'a>(&'a self, idx: &uint) -> &'a Show + 'static {\n+    fn index<'a>(&'a self, idx: &uint) -> &'a (Show + 'static) {\n         static x: uint = 42;\n         &x\n     }"}, {"sha": "324a1701b2febdb4f4bb38d2fa360f06a22f5403", "filename": "src/test/run-pass/issue-10902.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-10902.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-10902.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10902.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -10,15 +10,15 @@\n \n pub mod two_tuple {\n     pub trait T {}\n-    pub struct P<'a>(&'a T + 'a, &'a T + 'a);\n+    pub struct P<'a>(&'a (T + 'a), &'a (T + 'a));\n     pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n         P(car, cdr)\n     }\n }\n \n pub mod two_fields {\n     pub trait T {}\n-    pub struct P<'a> { car: &'a T + 'a, cdr: &'a T + 'a }\n+    pub struct P<'a> { car: &'a (T + 'a), cdr: &'a (T + 'a) }\n     pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n         P{ car: car, cdr: cdr }\n     }"}, {"sha": "ea138311f19b3bb25a4696a8844dc97d51bbfe41", "filename": "src/test/run-pass/issue-11205.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11205.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -49,7 +49,7 @@ fn main() {\n     foog(x, &[box 1i]);\n \n     struct T<'a> {\n-        t: [&'a Foo+'a, ..2]\n+        t: [&'a (Foo+'a), ..2]\n     }\n     let _n = T {\n         t: [&1i, &2i]\n@@ -64,7 +64,7 @@ fn main() {\n     };\n \n     struct F<'b> {\n-        t: &'b [&'b Foo+'b]\n+        t: &'b [&'b (Foo+'b)]\n     }\n     let _n = F {\n         t: &[&1i, &2i]"}, {"sha": "e41754fd1b9983b19a88171b9a6c1ef109818f79", "filename": "src/test/run-pass/issue-14901.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-14901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-14901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14901.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -11,7 +11,7 @@\n use std::io::Reader;\n \n enum Wrapper<'a> {\n-    WrapReader(&'a Reader + 'a)\n+    WrapReader(&'a (Reader + 'a))\n }\n \n trait Wrap<'a> {"}, {"sha": "1ffd349a653853274f98c8809f857218f7cc58a0", "filename": "src/test/run-pass/issue-14958.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14958.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -14,7 +14,7 @@ trait Foo {}\n \n struct Bar;\n \n-impl<'a> std::ops::Fn<(&'a Foo+'a,), ()> for Bar {\n+impl<'a> std::ops::Fn<(&'a (Foo+'a),), ()> for Bar {\n     extern \"rust-call\" fn call(&self, _: (&'a Foo,)) {}\n }\n "}, {"sha": "99472bb3610f80c203da9648e8a061b3e27ee8e6", "filename": "src/test/run-pass/issue-14959.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14959.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -33,8 +33,8 @@ impl Alloy {\n     }\n }\n \n-impl<'a, 'b> Fn<(&'b mut Response+'b,),()> for SendFile<'a> {\n-    extern \"rust-call\" fn call(&self, (_res,): (&'b mut Response+'b,)) {}\n+impl<'a, 'b> Fn<(&'b mut (Response+'b),),()> for SendFile<'a> {\n+    extern \"rust-call\" fn call(&self, (_res,): (&'b mut (Response+'b),)) {}\n }\n \n impl<Rq: Request, Rs: Response> Ingot<Rq, Rs> for HelloWorld {"}, {"sha": "61ae273aef50bdf9cd029c088a1f60c8f0363eee", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -29,7 +29,7 @@ impl Inner for int {\n }\n \n struct Outer<'a> {\n-    inner: &'a Inner+'a\n+    inner: &'a (Inner+'a)\n }\n \n impl<'a> Outer<'a> {\n@@ -51,7 +51,7 @@ pub fn main() {\n pub trait MyTrait<T> { }\n \n pub struct MyContainer<'a, T> {\n-    foos: Vec<&'a MyTrait<T>+'a> ,\n+    foos: Vec<&'a (MyTrait<T>+'a)> ,\n }\n \n impl<'a, T> MyContainer<'a, T> {"}, {"sha": "44f07def531bced6272ef9157c3f544e4f6cdb0d", "filename": "src/test/run-pass/issue-8249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-8249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-8249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8249.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -13,7 +13,7 @@ struct B;\n impl A for B {}\n \n struct C<'a> {\n-    foo: &'a mut A+'a,\n+    foo: &'a mut (A+'a),\n }\n \n fn foo(a: &mut A) {"}, {"sha": "4c6b9a3aaa0e4f98ce112ec2174254b340643e30", "filename": "src/test/run-pass/issue-9719.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-9719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fissue-9719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9719.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -16,15 +16,15 @@ mod a {\n     pub trait X {}\n     impl X for int {}\n \n-    pub struct Z<'a>(Enum<&'a X+'a>);\n+    pub struct Z<'a>(Enum<&'a (X+'a)>);\n     fn foo() { let x = 42i; let z = Z(Enum::A(&x as &X)); let _ = z; }\n }\n \n mod b {\n     trait X {}\n     impl X for int {}\n     struct Y<'a>{\n-        x:Option<&'a X+'a>,\n+        x:Option<&'a (X+'a)>,\n     }\n \n     fn bar() {\n@@ -36,7 +36,7 @@ mod b {\n mod c {\n     pub trait X { fn f(&self); }\n     impl X for int { fn f(&self) {} }\n-    pub struct Z<'a>(Option<&'a X+'a>);\n+    pub struct Z<'a>(Option<&'a (X+'a)>);\n     fn main() { let x = 42i; let z = Z(Some(&x as &X)); let _ = z; }\n }\n "}, {"sha": "840e58848a742f59b31af183bcb70508365a05de", "filename": "src/test/run-pass/parameterized-trait-with-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -19,7 +19,7 @@ mod foo {\n     pub trait D<'a, T> {}\n }\n \n-fn foo1<T>(_: &A<T> + Send) {}\n+fn foo1<T>(_: &(A<T> + Send)) {}\n fn foo2<T>(_: Box<A<T> + Send + Sync>) {}\n fn foo3<T>(_: Box<B<int, uint> + 'static>) {}\n fn foo4<'a, T>(_: Box<C<'a, T> + 'static + Send>) {}"}, {"sha": "907f610ff25dbdcfeb098fa190b3f3ab846d8960", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "patch": "@@ -30,7 +30,7 @@ fn object_invoke1<'d>(x: &'d Trait<'d>) -> (int, int) {\n }\n \n struct Struct1<'e> {\n-    f: &'e Trait<'e>+'e\n+    f: &'e (Trait<'e>+'e)\n }\n \n fn field_invoke1<'f, 'g>(x: &'g Struct1<'f>) -> (int,int) {\n@@ -40,7 +40,7 @@ fn field_invoke1<'f, 'g>(x: &'g Struct1<'f>) -> (int,int) {\n }\n \n struct Struct2<'h, 'i> {\n-    f: &'h Trait<'i>+'h\n+    f: &'h (Trait<'i>+'h)\n }\n \n fn object_invoke2<'j, 'k>(x: &'k Trait<'j>) -> int {"}]}