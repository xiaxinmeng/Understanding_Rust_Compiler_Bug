{"sha": "ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmM2QwNTE2MzAzZjgyZWJmYmNjNGMyNTBlYmZjNzgzYWFhZGFkNzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-09T15:14:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-09T15:14:05Z"}, "message": "Auto merge of #32073 - jseyfried:fix_another_trait_privacy_error, r=nikomatsakis\n\nFix incorrect trait privacy error\n\nThis PR fixes #21670 by using the crate metadata instead of `ExternalExports` to determine if an external item is public.\n\nr? @nikomatsakis", "tree": {"sha": "876c8b3173020b881509d514d2d70ff2fb0ef434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/876c8b3173020b881509d514d2d70ff2fb0ef434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "html_url": "https://github.com/rust-lang/rust/commit/ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbbd3d9b927e4dc73b071e7bce70e1a3fc119946", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbd3d9b927e4dc73b071e7bce70e1a3fc119946", "html_url": "https://github.com/rust-lang/rust/commit/cbbd3d9b927e4dc73b071e7bce70e1a3fc119946"}, {"sha": "b06a1cc760cfb09e4eeae6d40244be9fcf048d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b06a1cc760cfb09e4eeae6d40244be9fcf048d8a", "html_url": "https://github.com/rust-lang/rust/commit/b06a1cc760cfb09e4eeae6d40244be9fcf048d8a"}], "stats": {"total": 55, "additions": 22, "deletions": 33}, "files": [{"sha": "193492ee7e10c2cda18098bcf410c76d41e27bba", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "patch": "@@ -137,6 +137,7 @@ pub trait CrateStore<'tcx> : Any {\n     // item info\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;\n+    fn visibility(&self, def: DefId) -> hir::Visibility;\n     fn closure_kind(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n                     -> ty::ClosureKind;\n     fn closure_ty(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n@@ -302,6 +303,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     // item info\n     fn stability(&self, def: DefId) -> Option<attr::Stability> { unimplemented!() }\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { unimplemented!() }\n+    fn visibility(&self, def: DefId) -> hir::Visibility { unimplemented!() }\n     fn closure_kind(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n                     -> ty::ClosureKind  { unimplemented!() }\n     fn closure_ty(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)"}, {"sha": "55ec9d82a2eb98393e15fb39caa1fe03ad6e5b55", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "patch": "@@ -768,7 +768,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         freevars,\n         export_map,\n         trait_map,\n-        external_exports,\n         glob_map,\n     } = time(time_passes,\n              \"resolution\",\n@@ -829,9 +828,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n         analysis.access_levels =\n             time(time_passes, \"privacy checking\", || {\n-                rustc_privacy::check_crate(tcx,\n-                                           &analysis.export_map,\n-                                           external_exports)\n+                rustc_privacy::check_crate(tcx, &analysis.export_map)\n             });\n \n         // Do not move this check past lint"}, {"sha": "b3f24b8f16b1631273878d5485d9670a250902b5", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "patch": "@@ -49,6 +49,11 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_deprecation(&cdata, def.index)\n     }\n \n+    fn visibility(&self, def: DefId) -> hir::Visibility {\n+        let cdata = self.get_crate_data(def.krate);\n+        decoder::get_visibility(&cdata, def.index)\n+    }\n+\n     fn closure_kind(&self, _tcx: &TyCtxt<'tcx>, def_id: DefId) -> ty::ClosureKind\n     {\n         assert!(!def_id.is_local());"}, {"sha": "96e4f8a72f189b9b2f115de58b928abeb1f00928", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "patch": "@@ -545,6 +545,10 @@ pub fn get_deprecation(cdata: Cmd, id: DefIndex) -> Option<attr::Deprecation> {\n     })\n }\n \n+pub fn get_visibility(cdata: Cmd, id: DefIndex) -> hir::Visibility {\n+    item_visibility(cdata.lookup_item(id))\n+}\n+\n pub fn get_repr_attrs(cdata: Cmd, id: DefIndex) -> Vec<attr::ReprAttr> {\n     let item = cdata.lookup_item(id);\n     match reader::maybe_get_doc(item, tag_items_data_item_repr).map(|doc| {"}, {"sha": "82f4ad1d746512abbfc4381712d7a35672dfa561", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "patch": "@@ -38,10 +38,10 @@ use rustc_front::intravisit::{self, Visitor};\n \n use rustc::dep_graph::DepNode;\n use rustc::lint;\n+use rustc::middle::cstore::CrateStore;\n use rustc::middle::def::{self, Def};\n use rustc::middle::def_id::DefId;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n-use rustc::middle::privacy::ExternalExports;\n use rustc::middle::ty::{self, TyCtxt};\n use rustc::util::nodemap::{NodeMap, NodeSet};\n use rustc::front::map as ast_map;\n@@ -476,7 +476,6 @@ struct PrivacyVisitor<'a, 'tcx: 'a> {\n     curitem: ast::NodeId,\n     in_foreign: bool,\n     parents: NodeMap<ast::NodeId>,\n-    external_exports: ExternalExports,\n }\n \n #[derive(Debug)]\n@@ -498,7 +497,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n         let node_id = if let Some(node_id) = self.tcx.map.as_local_node_id(did) {\n             node_id\n         } else {\n-            if self.external_exports.contains(&did) {\n+            if self.tcx.sess.cstore.visibility(did) == hir::Public {\n                 debug!(\"privacy - {:?} was externally exported\", did);\n                 return Allowable;\n             }\n@@ -1567,10 +1566,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n     }\n }\n \n-pub fn check_crate(tcx: &TyCtxt,\n-                   export_map: &def::ExportMap,\n-                   external_exports: ExternalExports)\n-                   -> AccessLevels {\n+pub fn check_crate(tcx: &TyCtxt, export_map: &def::ExportMap) -> AccessLevels {\n     let _task = tcx.dep_graph.in_task(DepNode::Privacy);\n \n     let krate = tcx.map.krate();\n@@ -1593,7 +1589,6 @@ pub fn check_crate(tcx: &TyCtxt,\n         in_foreign: false,\n         tcx: tcx,\n         parents: visitor.parents,\n-        external_exports: external_exports,\n     };\n     intravisit::walk_crate(&mut visitor, krate);\n "}, {"sha": "884196a97af8f08713ec0bb795a4f6291a977553", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "patch": "@@ -289,7 +289,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         krate: crate_id,\n                         index: CRATE_DEF_INDEX,\n                     };\n-                    self.external_exports.insert(def_id);\n                     let parent_link = ModuleParentLink(parent, name);\n                     let def = Def::Mod(def_id);\n                     let module = self.new_extern_crate_module(parent_link, def, is_public, item.id);\n@@ -495,15 +494,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             modifiers = modifiers | DefModifiers::IMPORTABLE;\n         }\n \n-        let is_exported = is_public &&\n-                          match new_parent.def_id() {\n-            None => true,\n-            Some(did) => self.external_exports.contains(&did),\n-        };\n-        if is_exported {\n-            self.external_exports.insert(def.def_id());\n-        }\n-\n         match def {\n             Def::Mod(_) | Def::ForeignMod(_) | Def::Enum(..) | Def::TyAlias(..) => {\n                 debug!(\"(building reduced graph for external crate) building module {} {}\",\n@@ -552,10 +542,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                            trait_item_name);\n \n                     self.trait_item_map.insert((trait_item_name, def_id), trait_item_def.def_id());\n-\n-                    if is_exported {\n-                        self.external_exports.insert(trait_item_def.def_id());\n-                    }\n                 }\n \n                 let parent_link = ModuleParentLink(new_parent, name);"}, {"sha": "970f54207baf57d4f38794b4f2278de7ea0b0293", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "patch": "@@ -55,10 +55,9 @@ use rustc::middle::cstore::{CrateStore, DefLike, DlDef};\n use rustc::middle::def::*;\n use rustc::middle::def_id::DefId;\n use rustc::middle::pat_util::pat_bindings;\n-use rustc::middle::privacy::ExternalExports;\n use rustc::middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use rustc::middle::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n-use rustc::util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n+use rustc::util::nodemap::{NodeMap, FnvHashMap};\n \n use syntax::ast::{self, FloatTy};\n use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n@@ -1093,7 +1092,6 @@ pub struct Resolver<'a, 'tcx: 'a> {\n     freevars_seen: NodeMap<NodeMap<usize>>,\n     export_map: ExportMap,\n     trait_map: TraitMap,\n-    external_exports: ExternalExports,\n \n     // Whether or not to print error messages. Can be set to true\n     // when getting additional info for error message suggestions,\n@@ -1184,7 +1182,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             trait_map: NodeMap(),\n             used_imports: HashSet::new(),\n             used_crates: HashSet::new(),\n-            external_exports: DefIdSet(),\n \n             emit_errors: true,\n             make_glob_map: make_glob_map == MakeGlobMap::Yes,\n@@ -3716,7 +3713,6 @@ pub struct CrateMap {\n     pub freevars: FreevarMap,\n     pub export_map: ExportMap,\n     pub trait_map: TraitMap,\n-    pub external_exports: ExternalExports,\n     pub glob_map: Option<GlobMap>,\n }\n \n@@ -3754,7 +3750,6 @@ pub fn resolve_crate<'a, 'tcx>(session: &'a Session,\n         freevars: resolver.freevars,\n         export_map: resolver.export_map,\n         trait_map: resolver.trait_map,\n-        external_exports: resolver.external_exports,\n         glob_map: if resolver.make_glob_map {\n             Some(resolver.glob_map)\n         } else {"}, {"sha": "5f9e8ba6c0a4acabe06f2ce599c4f501b8600b11", "filename": "src/test/compile-fail/trait-privacy.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Ftest%2Fcompile-fail%2Ftrait-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3d0516303f82ebfbcc4c250ebfc783aaadad72/src%2Ftest%2Fcompile-fail%2Ftrait-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-privacy.rs?ref=ef3d0516303f82ebfbcc4c250ebfc783aaadad72", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+#![feature(rustc_attrs, get_type_id)]\n #![allow(dead_code)]\n \n mod foo {\n@@ -26,5 +26,10 @@ fn g() {\n     ().f(); // Check that this does not trigger a privacy error\n }\n \n+fn f() {\n+    let error = ::std::thread::spawn(|| {}).join().unwrap_err();\n+    error.get_type_id(); // Regression test for #21670\n+}\n+\n #[rustc_error]\n fn main() {} //~ ERROR compilation successful"}]}