{"sha": "c32171bd5efedd58fd471c21802e23005c2918fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMjE3MWJkNWVmZWRkNThmZDQ3MWMyMTgwMmUyMzAwNWMyOTE4ZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-25T17:26:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-25T17:26:20Z"}, "message": "Auto merge of #60192 - t-rapp:tr-saturating-funcs, r=alexcrichton\n\nImplement saturating_abs() and saturating_neg() functions for signed integer types\n\nSimilar to wrapping_abs() / wrapping_neg() functions but saturating at the numeric bounds instead of wrapping around. Complements the existing set of functions with saturation mechanics.\n\ncc #59983", "tree": {"sha": "c792b35572465de3c7edb85f7faf73a7f9ce1567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c792b35572465de3c7edb85f7faf73a7f9ce1567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c32171bd5efedd58fd471c21802e23005c2918fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c32171bd5efedd58fd471c21802e23005c2918fc", "html_url": "https://github.com/rust-lang/rust/commit/c32171bd5efedd58fd471c21802e23005c2918fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c32171bd5efedd58fd471c21802e23005c2918fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd31c392f286d61caac0babee68c900cdaa8b504", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd31c392f286d61caac0babee68c900cdaa8b504", "html_url": "https://github.com/rust-lang/rust/commit/bd31c392f286d61caac0babee68c900cdaa8b504"}, {"sha": "c7d47c8cf4cd4db4226a38884a2d5fad371d9330", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d47c8cf4cd4db4226a38884a2d5fad371d9330", "html_url": "https://github.com/rust-lang/rust/commit/c7d47c8cf4cd4db4226a38884a2d5fad371d9330"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "718222ee0f477afe210fa10cc5da6989b9df056c", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c32171bd5efedd58fd471c21802e23005c2918fc/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32171bd5efedd58fd471c21802e23005c2918fc/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c32171bd5efedd58fd471c21802e23005c2918fc", "patch": "@@ -958,6 +958,62 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Saturating integer negation. Computes `-self`, returning `MAX` if `self == MIN`\n+instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(saturating_neg)]\n+assert_eq!(100\", stringify!($SelfT), \".saturating_neg(), -100);\n+assert_eq!((-100\", stringify!($SelfT), \").saturating_neg(), 100);\n+assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_neg(), \", stringify!($SelfT),\n+\"::max_value());\n+assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_neg(), \", stringify!($SelfT),\n+\"::min_value() + 1);\",\n+$EndFeature, \"\n+```\"),\n+\n+            #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n+            #[inline]\n+            pub fn saturating_neg(self) -> Self {\n+                intrinsics::saturating_sub(0, self)\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating absolute value. Computes `self.abs()`, returning `MAX` if `self ==\n+MIN` instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(saturating_neg)]\n+assert_eq!(100\", stringify!($SelfT), \".saturating_abs(), 100);\n+assert_eq!((-100\", stringify!($SelfT), \").saturating_abs(), 100);\n+assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_abs(), \", stringify!($SelfT),\n+\"::max_value());\n+assert_eq!((\", stringify!($SelfT), \"::min_value() + 1).saturating_abs(), \", stringify!($SelfT),\n+\"::max_value());\",\n+$EndFeature, \"\n+```\"),\n+\n+            #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n+            #[inline]\n+            pub fn saturating_abs(self) -> Self {\n+                if self.is_negative() {\n+                    self.saturating_neg()\n+                } else {\n+                    self\n+                }\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Saturating integer multiplication. Computes `self * rhs`, saturating at the\n numeric bounds instead of overflowing."}, {"sha": "a3d294e77d3bd6c4b14003e5b9a41f8693d1e97d", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c32171bd5efedd58fd471c21802e23005c2918fc/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32171bd5efedd58fd471c21802e23005c2918fc/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=c32171bd5efedd58fd471c21802e23005c2918fc", "patch": "@@ -16,6 +16,7 @@\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]\n+#![feature(saturating_neg)]\n #![feature(slice_patterns)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]"}, {"sha": "0475aeb96ab53d167fad5a6beb03afa594ccaa46", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c32171bd5efedd58fd471c21802e23005c2918fc/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32171bd5efedd58fd471c21802e23005c2918fc/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=c32171bd5efedd58fd471c21802e23005c2918fc", "patch": "@@ -153,6 +153,32 @@ mod tests {\n         assert_eq!(isize::MIN.checked_div(-1), None);\n     }\n \n+    #[test]\n+    fn test_saturating_abs() {\n+        assert_eq!((0 as $T).saturating_abs(), 0);\n+        assert_eq!((123 as $T).saturating_abs(), 123);\n+        assert_eq!((-123 as $T).saturating_abs(), 123);\n+        assert_eq!((MAX - 2).saturating_abs(), MAX - 2);\n+        assert_eq!((MAX - 1).saturating_abs(), MAX - 1);\n+        assert_eq!(MAX.saturating_abs(), MAX);\n+        assert_eq!((MIN + 2).saturating_abs(), MAX - 1);\n+        assert_eq!((MIN + 1).saturating_abs(), MAX);\n+        assert_eq!(MIN.saturating_abs(), MAX);\n+    }\n+\n+    #[test]\n+    fn test_saturating_neg() {\n+        assert_eq!((0 as $T).saturating_neg(), 0);\n+        assert_eq!((123 as $T).saturating_neg(), -123);\n+        assert_eq!((-123 as $T).saturating_neg(), 123);\n+        assert_eq!((MAX - 2).saturating_neg(), MIN + 3);\n+        assert_eq!((MAX - 1).saturating_neg(), MIN + 2);\n+        assert_eq!(MAX.saturating_neg(), MIN + 1);\n+        assert_eq!((MIN + 2).saturating_neg(), MAX - 1);\n+        assert_eq!((MIN + 1).saturating_neg(), MAX);\n+        assert_eq!(MIN.saturating_neg(), MAX);\n+    }\n+\n     #[test]\n     fn test_from_str() {\n         fn from_str<T: ::std::str::FromStr>(t: &str) -> Option<T> {"}]}