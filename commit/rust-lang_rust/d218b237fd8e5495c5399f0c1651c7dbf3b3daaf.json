{"sha": "d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "node_id": "C_kwDOAAsO6NoAKGQyMThiMjM3ZmQ4ZTU0OTVjNTM5OWYwYzE2NTFjN2RiZjNiM2RhYWY", "commit": {"author": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2023-01-10T20:40:08Z"}, "committer": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2023-01-10T20:40:08Z"}, "message": "collapse some nested blocks", "tree": {"sha": "4b25c4bd92def09420f665fb5ab295768bde2246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b25c4bd92def09420f665fb5ab295768bde2246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "html_url": "https://github.com/rust-lang/rust/commit/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/comments", "author": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95fc3ba41cff006a3ae4c3c730122b0503fdefab", "url": "https://api.github.com/repos/rust-lang/rust/commits/95fc3ba41cff006a3ae4c3c730122b0503fdefab", "html_url": "https://github.com/rust-lang/rust/commit/95fc3ba41cff006a3ae4c3c730122b0503fdefab"}], "stats": {"total": 142, "additions": 63, "deletions": 79}, "files": [{"sha": "ea04a3d17b1338b257c6fef29ea70af9679c51ef", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -1136,18 +1136,16 @@ impl<'a> InferenceContext<'a> {\n             if self.diverges.is_always() {\n                 // we don't even make an attempt at coercion\n                 self.table.new_maybe_never_var()\n-            } else {\n-                if let Some(t) = expected.only_has_type(&mut self.table) {\n-                    if self.coerce(Some(expr), &TyBuilder::unit(), &t).is_err() {\n-                        self.result.type_mismatches.insert(\n-                            expr.into(),\n-                            TypeMismatch { expected: t.clone(), actual: TyBuilder::unit() },\n-                        );\n-                    }\n-                    t\n-                } else {\n-                    TyBuilder::unit()\n+            } else if let Some(t) = expected.only_has_type(&mut self.table) {\n+                if self.coerce(Some(expr), &TyBuilder::unit(), &t).is_err() {\n+                    self.result.type_mismatches.insert(\n+                        expr.into(),\n+                        TypeMismatch { expected: t.clone(), actual: TyBuilder::unit() },\n+                    );\n                 }\n+                t\n+            } else {\n+                TyBuilder::unit()\n             }\n         }\n     }\n@@ -1314,13 +1312,13 @@ impl<'a> InferenceContext<'a> {\n                 } else {\n                     param_ty\n                 };\n-                if !coercion_target.is_unknown() {\n-                    if self.coerce(Some(arg), &ty, &coercion_target).is_err() {\n-                        self.result.type_mismatches.insert(\n-                            arg.into(),\n-                            TypeMismatch { expected: coercion_target, actual: ty.clone() },\n-                        );\n-                    }\n+                if !coercion_target.is_unknown()\n+                    && self.coerce(Some(arg), &ty, &coercion_target).is_err()\n+                {\n+                    self.result.type_mismatches.insert(\n+                        arg.into(),\n+                        TypeMismatch { expected: coercion_target, actual: ty.clone() },\n+                    );\n                 }\n             }\n         }"}, {"sha": "958d3dabe0ed1009255ae3a99800cfd4c98adc93", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -251,17 +251,14 @@ fn layout_of_unit(cx: &LayoutCx<'_>, dl: &TargetDataLayout) -> Result<Layout, La\n \n fn struct_tail_erasing_lifetimes(db: &dyn HirDatabase, pointee: Ty) -> Ty {\n     match pointee.kind(Interner) {\n-        TyKind::Adt(AdtId(adt), subst) => match adt {\n-            &hir_def::AdtId::StructId(i) => {\n-                let data = db.struct_data(i);\n-                let mut it = data.variant_data.fields().iter().rev();\n-                match it.next() {\n-                    Some((f, _)) => field_ty(db, i.into(), f, subst),\n-                    None => pointee,\n-                }\n+        TyKind::Adt(AdtId(hir_def::AdtId::StructId(i)), subst) => {\n+            let data = db.struct_data(*i);\n+            let mut it = data.variant_data.fields().iter().rev();\n+            match it.next() {\n+                Some((f, _)) => field_ty(db, (*i).into(), f, subst),\n+                None => pointee,\n             }\n-            _ => pointee,\n-        },\n+        }\n         _ => pointee,\n     }\n }"}, {"sha": "6c0238f35d0f1de5a362464e0dee083624de02cb", "filename": "crates/ide-assists/src/handlers/extract_type_alias.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -161,19 +161,17 @@ fn collect_used_generics<'gp>(\n                     .and_then(|lt| known_generics.iter().find(find_lifetime(&lt.text()))),\n             ),\n             ast::Type::ArrayType(ar) => {\n-                if let Some(expr) = ar.expr() {\n-                    if let ast::Expr::PathExpr(p) = expr {\n-                        if let Some(path) = p.path() {\n-                            if let Some(name_ref) = path.as_single_name_ref() {\n-                                if let Some(param) = known_generics.iter().find(|gp| {\n-                                    if let ast::GenericParam::ConstParam(cp) = gp {\n-                                        cp.name().map_or(false, |n| n.text() == name_ref.text())\n-                                    } else {\n-                                        false\n-                                    }\n-                                }) {\n-                                    generics.push(param);\n+                if let Some(ast::Expr::PathExpr(p)) = ar.expr() {\n+                    if let Some(path) = p.path() {\n+                        if let Some(name_ref) = path.as_single_name_ref() {\n+                            if let Some(param) = known_generics.iter().find(|gp| {\n+                                if let ast::GenericParam::ConstParam(cp) = gp {\n+                                    cp.name().map_or(false, |n| n.text() == name_ref.text())\n+                                } else {\n+                                    false\n                                 }\n+                            }) {\n+                                generics.push(param);\n                             }\n                         }\n                     }"}, {"sha": "0e5906097c3d4009bf259884ded3e5f44707f3dc", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -389,19 +389,17 @@ fn source_edit_from_name_ref(\n                         edit.delete(TextRange::new(s, e));\n                         return true;\n                     }\n-                } else if init == name_ref {\n-                    if field_name.text() == new_name {\n-                        cov_mark::hit!(test_rename_local_put_init_shorthand);\n-                        // Foo { field: local } -> Foo { field }\n-                        //            ^^^^^^^ delete this\n-\n-                        // same names, we can use a shorthand here instead.\n-                        // we do not want to erase attributes hence this range start\n-                        let s = field_name.syntax().text_range().end();\n-                        let e = init.syntax().text_range().end();\n-                        edit.delete(TextRange::new(s, e));\n-                        return true;\n-                    }\n+                } else if init == name_ref && field_name.text() == new_name {\n+                    cov_mark::hit!(test_rename_local_put_init_shorthand);\n+                    // Foo { field: local } -> Foo { field }\n+                    //            ^^^^^^^ delete this\n+\n+                    // same names, we can use a shorthand here instead.\n+                    // we do not want to erase attributes hence this range start\n+                    let s = field_name.syntax().text_range().end();\n+                    let e = init.syntax().text_range().end();\n+                    edit.delete(TextRange::new(s, e));\n+                    return true;\n                 }\n             }\n             // init shorthand"}, {"sha": "a91ffd1ec4fd17fc9293775f4bc4b253ab6f46a4", "filename": "crates/ide-db/src/symbol_index.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -323,10 +323,10 @@ impl Query {\n                         if symbol.name != self.query {\n                             continue;\n                         }\n-                    } else if self.case_sensitive {\n-                        if self.query.chars().any(|c| !symbol.name.contains(c)) {\n-                            continue;\n-                        }\n+                    } else if self.case_sensitive\n+                        && self.query.chars().any(|c| !symbol.name.contains(c))\n+                    {\n+                        continue;\n                     }\n \n                     res.push(symbol.clone());"}, {"sha": "cb537d7ef79d722948de5edcc95c64ca77c7c82c", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -64,12 +64,10 @@ pub(super) fn type_info(\n             bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n         )\n         .into()\n+    } else if config.markdown() {\n+        Markup::fenced_block(&original.display(sema.db))\n     } else {\n-        if config.markdown() {\n-            Markup::fenced_block(&original.display(sema.db))\n-        } else {\n-            original.display(sema.db).to_string().into()\n-        }\n+        original.display(sema.db).to_string().into()\n     };\n     res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n     Some(res)"}, {"sha": "1cfde2362455868eb4e1f82dc35971b59640778f", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -161,10 +161,8 @@ fn remove_newline(\n         }\n     }\n \n-    if config.join_assignments {\n-        if join_assignments(edit, &prev, &next).is_some() {\n-            return;\n-        }\n+    if config.join_assignments && join_assignments(edit, &prev, &next).is_some() {\n+        return;\n     }\n \n     if config.unwrap_trivial_blocks {"}, {"sha": "454a250f3ded4c046b5ceaf17f65f7133c54052c", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -413,11 +413,10 @@ fn traverse(\n                 let string = ast::String::cast(token);\n                 let string_to_highlight = ast::String::cast(descended_token.clone());\n                 if let Some((string, expanded_string)) = string.zip(string_to_highlight) {\n-                    if string.is_raw() {\n-                        if inject::ra_fixture(hl, sema, config, &string, &expanded_string).is_some()\n-                        {\n-                            continue;\n-                        }\n+                    if string.is_raw()\n+                        && inject::ra_fixture(hl, sema, config, &string, &expanded_string).is_some()\n+                    {\n+                        continue;\n                     }\n                     highlight_format_string(hl, &string, &expanded_string, range);\n                     highlight_escape_string(hl, &string, range.start());"}, {"sha": "c2654875625080dde6ed46818b9487a5fac35533", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -205,10 +205,8 @@ fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n             if expr_stmt.semicolon_token().is_some() {\n                 return None;\n             }\n-        } else {\n-            if !ast::StmtList::can_cast(binop.syntax().parent()?.kind()) {\n-                return None;\n-            }\n+        } else if !ast::StmtList::can_cast(binop.syntax().parent()?.kind()) {\n+            return None;\n         }\n \n         let expr = binop.rhs()?;"}, {"sha": "a270049019f3209dc7fee513c0d82f0ead4bc2f4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d218b237fd8e5495c5399f0c1651c7dbf3b3daaf/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=d218b237fd8e5495c5399f0c1651c7dbf3b3daaf", "patch": "@@ -307,10 +307,10 @@ impl GlobalState {\n                 }\n             }\n \n-            if !was_quiescent || state_changed || memdocs_added_or_removed {\n-                if self.config.publish_diagnostics() {\n-                    self.update_diagnostics()\n-                }\n+            if (!was_quiescent || state_changed || memdocs_added_or_removed)\n+                && self.config.publish_diagnostics()\n+            {\n+                self.update_diagnostics()\n             }\n         }\n "}]}