{"sha": "6c529ded8674b89c46052da92399227c3b764c6a", "node_id": "C_kwDOAAsO6NoAKDZjNTI5ZGVkODY3NGI4OWM0NjA1MmRhOTIzOTkyMjdjM2I3NjRjNmE", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-06-02T14:39:47Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-07-11T21:20:36Z"}, "message": "lower let-else in MIR instead", "tree": {"sha": "0a72b13a3c277a190feb2529e87392587b9840b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a72b13a3c277a190feb2529e87392587b9840b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c529ded8674b89c46052da92399227c3b764c6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmLMlCQACgkQPNdIZH7v\nY1ntdQ//dfE7sty9GlBSwLqkP9Ilo4NaUDzzhDybd7D9m+FoTxSeqqPnoPVJJXee\nxAXQT7hOqkIwZf7C6PpPTMtbGqB82TnUC4I1WtyvQfWgijkokVRyGVhF8YZ/VT+N\nuj0HH3eiyykJgqmGevua156ZsCNVUlNQi98yr6VtTNsMyMPvQDPjAKm3RHz2wKHJ\ne+Zxpea5zCo4k4EnXOkFRQfI9wpm9osfBguu276dlhvLRB1PaQ7nPP0xIx1EJCml\noVahs6lZ6dfJbFCkI90YFr1rKlbp19gFhO22EkE+2QQuaYFZOZCbuoJ0vNR15diO\n0wmc6Kfwu1WWBSmNjWUfqG12EtLAAw8A+98kzZ2XWNzXx8WO5oeywPva4FhvMYpO\nxnOpTzOo/r79e+YF2SzB+QvPSXzSscj5a99ZnaH/ASwenlQbF66/ygZnqGyLPnKL\nk3ZH0NEfcJtNFpJKsmXPUtsi1Wx0dVIfj4AzVe54nh2yDZ4ReH84zDZpBMGj0W5g\nx2pcikASCBb3pBeFlSFyQ1Nz9vgZZua7yhnPlivgRpNWBOMXhAIoWEjYNRrlqOId\nX/jc74YQVy08Xqmk38tGPnF5Wj0VirTsL606yLMuDChp2DcQtLDu83uurwV+z5y8\ny7gzAe5ui6yky07zQDYD8WASl1n/YGzxsKrQpYdZ5a22/zSd5uU=\n=XOrK\n-----END PGP SIGNATURE-----", "payload": "tree 0a72b13a3c277a190feb2529e87392587b9840b1\nparent 38b72154ded23847cd08a796d0c6708b5efac265\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1654180787 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1657574436 +0200\n\nlower let-else in MIR instead\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c529ded8674b89c46052da92399227c3b764c6a", "html_url": "https://github.com/rust-lang/rust/commit/6c529ded8674b89c46052da92399227c3b764c6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c529ded8674b89c46052da92399227c3b764c6a/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38b72154ded23847cd08a796d0c6708b5efac265", "url": "https://api.github.com/repos/rust-lang/rust/commits/38b72154ded23847cd08a796d0c6708b5efac265", "html_url": "https://github.com/rust-lang/rust/commit/38b72154ded23847cd08a796d0c6708b5efac265"}], "stats": {"total": 685, "additions": 421, "deletions": 264}, "files": [{"sha": "0ec596e705374cc23504076e11e7ba3f28d998fe", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 20, "deletions": 71, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1,8 +1,8 @@\n use crate::{ImplTraitContext, ImplTraitPosition, LoweringContext};\n-use rustc_ast::{AttrVec, Block, BlockCheckMode, Expr, Local, LocalKind, Stmt, StmtKind};\n+use rustc_ast::{Block, BlockCheckMode, Local, LocalKind, Stmt, StmtKind};\n use rustc_hir as hir;\n use rustc_session::parse::feature_err;\n-use rustc_span::{sym, DesugaringKind};\n+use rustc_span::sym;\n \n use smallvec::SmallVec;\n \n@@ -36,21 +36,25 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             match s.kind {\n                 StmtKind::Local(ref local) => {\n                     let hir_id = self.lower_node_id(s.id);\n-                    match &local.kind {\n-                        LocalKind::InitElse(init, els) => {\n-                            let e = self.lower_let_else(hir_id, local, init, els, tail);\n-                            expr = Some(e);\n-                            // remaining statements are in let-else expression\n-                            break;\n+                    let els = if let LocalKind::InitElse(_, els) = &local.kind {\n+                        if !self.tcx.features().let_else {\n+                            feature_err(\n+                                &self.tcx.sess.parse_sess,\n+                                sym::let_else,\n+                                s.span,\n+                                \"`let...else` statements are unstable\",\n+                            )\n+                            .emit();\n                         }\n-                        _ => {\n-                            let local = self.lower_local(local);\n-                            self.alias_attrs(hir_id, local.hir_id);\n-                            let kind = hir::StmtKind::Local(local);\n-                            let span = self.lower_span(s.span);\n-                            stmts.push(hir::Stmt { hir_id, kind, span });\n-                        }\n-                    }\n+                        Some(self.lower_block(els, false))\n+                    } else {\n+                        None\n+                    };\n+                    let local = self.lower_local(local);\n+                    self.alias_attrs(hir_id, local.hir_id);\n+                    let kind = hir::StmtKind::Local(local, els);\n+                    let span = self.lower_span(s.span);\n+                    stmts.push(hir::Stmt { hir_id, kind, span });\n                 }\n                 StmtKind::Item(ref it) => {\n                     stmts.extend(self.lower_item_ref(it).into_iter().enumerate().map(\n@@ -115,59 +119,4 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         }\n     }\n-\n-    fn lower_let_else(\n-        &mut self,\n-        stmt_hir_id: hir::HirId,\n-        local: &Local,\n-        init: &Expr,\n-        els: &Block,\n-        tail: &[Stmt],\n-    ) -> &'hir hir::Expr<'hir> {\n-        let ty = local\n-            .ty\n-            .as_ref()\n-            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Variable)));\n-        let span = self.lower_span(local.span);\n-        let span = self.mark_span_with_reason(DesugaringKind::LetElse, span, None);\n-        let init = self.lower_expr(init);\n-        let local_hir_id = self.lower_node_id(local.id);\n-        self.lower_attrs(local_hir_id, &local.attrs);\n-        let let_expr = {\n-            let lex = self.arena.alloc(hir::Let {\n-                hir_id: local_hir_id,\n-                pat: self.lower_pat(&local.pat),\n-                ty,\n-                init,\n-                span,\n-            });\n-            self.arena.alloc(self.expr(span, hir::ExprKind::Let(lex), AttrVec::new()))\n-        };\n-        let then_expr = {\n-            let (stmts, expr) = self.lower_stmts(tail);\n-            let block = self.block_all(span, stmts, expr);\n-            self.arena.alloc(self.expr_block(block, AttrVec::new()))\n-        };\n-        let else_expr = {\n-            let block = self.lower_block(els, false);\n-            self.arena.alloc(self.expr_block(block, AttrVec::new()))\n-        };\n-        self.alias_attrs(let_expr.hir_id, local_hir_id);\n-        self.alias_attrs(else_expr.hir_id, local_hir_id);\n-        let if_expr = self.arena.alloc(hir::Expr {\n-            hir_id: stmt_hir_id,\n-            span,\n-            kind: hir::ExprKind::If(let_expr, then_expr, Some(else_expr)),\n-        });\n-        if !self.tcx.features().let_else {\n-            feature_err(\n-                &self.tcx.sess.parse_sess,\n-                sym::let_else,\n-                local.span,\n-                \"`let...else` statements are unstable\",\n-            )\n-            .emit();\n-        }\n-        if_expr\n-    }\n }"}, {"sha": "05210e9b89eacecf76786d96e614bee0820bfee0", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -284,10 +284,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_local(&mut self, l: &'hir Local<'hir>) {\n+    fn visit_local(&mut self, l: &'hir Local<'hir>, e: Option<&'hir Block<'hir>>) {\n         self.insert(l.span, l.hir_id, Node::Local(l));\n         self.with_parent(l.hir_id, |this| {\n-            intravisit::walk_local(this, l);\n+            intravisit::walk_local(this, l, e);\n         })\n     }\n "}, {"sha": "6b420c42d6152b5ff370b60fc6a77dcdc19f4648", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -2147,7 +2147,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.attrs.insert(hir_id.local_id, a);\n         }\n         let local = hir::Local { hir_id, init, pat, source, span: self.lower_span(span), ty: None };\n-        self.stmt(span, hir::StmtKind::Local(self.arena.alloc(local)))\n+        self.stmt(span, hir::StmtKind::Local(self.arena.alloc(local), None))\n     }\n \n     fn block_expr(&mut self, expr: &'hir hir::Expr<'hir>) -> &'hir hir::Block<'hir> {"}, {"sha": "65cb5f77e06296fdb6a776f3830ff81a6459990f", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1296,7 +1296,8 @@ pub struct Stmt<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub enum StmtKind<'hir> {\n     /// A local (`let`) binding.\n-    Local(&'hir Local<'hir>),\n+    /// FIXME: bundle the last two components into another `struct`\n+    Local(&'hir Local<'hir>, Option<&'hir Block<'hir>>),\n \n     /// An item binding.\n     Item(ItemId),"}, {"sha": "3585aba5f3db0ebea42b6574549a8bebe6ebfd9b", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -310,8 +310,8 @@ pub trait Visitor<'v>: Sized {\n     fn visit_foreign_item(&mut self, i: &'v ForeignItem<'v>) {\n         walk_foreign_item(self, i)\n     }\n-    fn visit_local(&mut self, l: &'v Local<'v>) {\n-        walk_local(self, l)\n+    fn visit_local(&mut self, l: &'v Local<'v>, els: Option<&'v Block<'v>>) {\n+        walk_local(self, l, els)\n     }\n     fn visit_block(&mut self, b: &'v Block<'v>) {\n         walk_block(self, b)\n@@ -466,12 +466,19 @@ pub fn walk_body<'v, V: Visitor<'v>>(visitor: &mut V, body: &'v Body<'v>) {\n     visitor.visit_expr(&body.value);\n }\n \n-pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local<'v>) {\n+pub fn walk_local<'v, V: Visitor<'v>>(\n+    visitor: &mut V,\n+    local: &'v Local<'v>,\n+    els: Option<&'v Block<'v>>,\n+) {\n     // Intentionally visiting the expr first - the initialization expr\n     // dominates the local's definition.\n     walk_list!(visitor, visit_expr, &local.init);\n     visitor.visit_id(local.hir_id);\n     visitor.visit_pat(&local.pat);\n+    if let Some(els) = els {\n+        visitor.visit_block(els);\n+    }\n     walk_list!(visitor, visit_ty, &local.ty);\n }\n \n@@ -1055,9 +1062,9 @@ pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block<'v>) {\n \n pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt<'v>) {\n     visitor.visit_id(statement.hir_id);\n-    match statement.kind {\n-        StmtKind::Local(ref local) => visitor.visit_local(local),\n-        StmtKind::Item(item) => visitor.visit_nested_item(item),\n+    match &statement.kind {\n+        StmtKind::Local(ref local, els) => visitor.visit_local(local, *els),\n+        StmtKind::Item(item) => visitor.visit_nested_item(*item),\n         StmtKind::Expr(ref expression) | StmtKind::Semi(ref expression) => {\n             visitor.visit_expr(expression)\n         }"}, {"sha": "7f8601308734f8f8a706b26dbcee8276ee7588a2", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -883,7 +883,12 @@ impl<'a> State<'a> {\n         self.ann.post(self, AnnNode::SubItem(ii.hir_id()))\n     }\n \n-    pub fn print_local(&mut self, init: Option<&hir::Expr<'_>>, decl: impl Fn(&mut Self)) {\n+    pub fn print_local(\n+        &mut self,\n+        init: Option<&hir::Expr<'_>>,\n+        els: Option<&hir::Block<'_>>,\n+        decl: impl Fn(&mut Self),\n+    ) {\n         self.space_if_not_bol();\n         self.ibox(INDENT_UNIT);\n         self.word_nbsp(\"let\");\n@@ -897,14 +902,21 @@ impl<'a> State<'a> {\n             self.word_space(\"=\");\n             self.print_expr(init);\n         }\n+\n+        if let Some(els) = els {\n+            self.nbsp();\n+            self.word_space(\"else\");\n+            self.print_block(els);\n+        }\n+\n         self.end()\n     }\n \n     pub fn print_stmt(&mut self, st: &hir::Stmt<'_>) {\n         self.maybe_print_comment(st.span.lo());\n         match st.kind {\n-            hir::StmtKind::Local(loc) => {\n-                self.print_local(loc.init, |this| this.print_local_decl(loc));\n+            hir::StmtKind::Local(loc, els) => {\n+                self.print_local(loc.init, els, |this| this.print_local_decl(loc));\n             }\n             hir::StmtKind::Item(item) => self.ann.nested(self, Nested::Item(item)),\n             hir::StmtKind::Expr(expr) => {\n@@ -1404,7 +1416,7 @@ impl<'a> State<'a> {\n \n                 // Print `let _t = $init;`:\n                 let temp = Ident::from_str(\"_t\");\n-                self.print_local(Some(init), |this| this.print_ident(temp));\n+                self.print_local(Some(init), None, |this| this.print_ident(temp));\n                 self.word(\";\");\n \n                 // Print `_t`:\n@@ -2293,7 +2305,7 @@ fn expr_requires_semi_to_be_stmt(e: &hir::Expr<'_>) -> bool {\n /// seen the semicolon, and thus don't need another.\n fn stmt_ends_with_semi(stmt: &hir::StmtKind<'_>) -> bool {\n     match *stmt {\n-        hir::StmtKind::Local(_) => true,\n+        hir::StmtKind::Local(_, _) => true,\n         hir::StmtKind::Item(_) => false,\n         hir::StmtKind::Expr(e) => expr_requires_semi_to_be_stmt(e),\n         hir::StmtKind::Semi(..) => false,"}, {"sha": "ace30e61769f8f9245d25cd2147a219b0722a37b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1,12 +1,13 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n+use hir::{Block, LocalSource};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n+use rustc_hir::{Body, Expr, ExprKind, FnRetTy, HirId, Local};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n@@ -952,8 +953,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n         self.infcx.tcx.hir()\n     }\n \n-    fn visit_local(&mut self, local: &'tcx Local<'tcx>) {\n-        intravisit::walk_local(self, local);\n+    fn visit_local(&mut self, local: &'tcx Local<'tcx>, els: Option<&'tcx Block<'tcx>>) {\n+        intravisit::walk_local(self, local, els);\n \n         if let Some(ty) = self.opt_node_type(local.hir_id) {\n             if self.generic_arg_contains_target(ty.into()) {"}, {"sha": "695d89e7912028bb206c3d1f0399c553d8842d34", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -251,10 +251,10 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         }\n     }\n \n-    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>, e: Option<&'tcx hir::Block<'tcx>>) {\n         self.with_lint_attrs(l.hir_id, |cx| {\n-            lint_callback!(cx, check_local, l);\n-            hir_visit::walk_local(cx, l);\n+            lint_callback!(cx, check_local, l, e);\n+            hir_visit::walk_local(cx, l, e);\n         })\n     }\n "}, {"sha": "43c7ff3c4bb208b651f7a550b9dde3d243958422", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -783,9 +783,9 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n         })\n     }\n \n-    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>, e: Option<&'tcx hir::Block<'tcx>>) {\n         self.with_lint_attrs(l.hir_id, |builder| {\n-            intravisit::walk_local(builder, l);\n+            intravisit::walk_local(builder, l, e);\n         })\n     }\n "}, {"sha": "41d8e5cf859ddc3040cd91227dbf766f28b38cce", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -24,7 +24,7 @@ macro_rules! late_lint_methods {\n             fn check_foreign_item_post(a: &$hir hir::ForeignItem<$hir>);\n             fn check_item(a: &$hir hir::Item<$hir>);\n             fn check_item_post(a: &$hir hir::Item<$hir>);\n-            fn check_local(a: &$hir hir::Local<$hir>);\n+            fn check_local(a: &$hir hir::Local<$hir>, b: Option<&$hir hir::Block<$hir>>);\n             fn check_block(a: &$hir hir::Block<$hir>);\n             fn check_block_post(a: &$hir hir::Block<$hir>);\n             fn check_stmt(a: &$hir hir::Stmt<$hir>);"}, {"sha": "85fc897c7ff03e7caa01f0b6d9810222abf607ea", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -789,7 +789,7 @@ impl<'hir> Map<'hir> {\n                 | Node::ForeignItem(_)\n                 | Node::TraitItem(_)\n                 | Node::ImplItem(_)\n-                | Node::Stmt(Stmt { kind: StmtKind::Local(_), .. }) => break,\n+                | Node::Stmt(Stmt { kind: StmtKind::Local(_, _), .. }) => break,\n                 Node::Expr(expr @ Expr { kind: ExprKind::If(..) | ExprKind::Match(..), .. }) => {\n                     return Some(expr);\n                 }"}, {"sha": "3e5f6bb8f0bcfd1f587d1a23c94f398427711505", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -182,6 +182,9 @@ pub enum StmtKind<'tcx> {\n         /// `let pat: ty = <INIT>`\n         initializer: Option<ExprId>,\n \n+        /// `let pat: ty = <INIT> else { <ELSE> }\n+        else_block: Option<Block>,\n+\n         /// The lint level for this `let` statement.\n         lint_level: LintLevel,\n     },"}, {"sha": "97249fdd175637e11747f19c8bef1f5f02df0341", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -167,11 +167,15 @@ pub fn walk_stmt<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, stmt: &Stm\n             init_scope: _,\n             ref pattern,\n             lint_level: _,\n+            else_block,\n         } => {\n             if let Some(init) = initializer {\n                 visitor.visit_expr(&visitor.thir()[*init]);\n             }\n             visitor.visit_pat(pattern);\n+            if let Some(block) = else_block {\n+                visitor.visit_block(block)\n+            }\n         }\n     }\n }"}, {"sha": "cb8be51a08562e9463f9505464a9b8d609a5f61c", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -99,6 +99,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     ref pattern,\n                     initializer,\n                     lint_level,\n+                    else_block,\n                 } => {\n                     let ignores_expr_result = matches!(*pattern.kind, PatKind::Wild);\n                     this.block_context.push(BlockFrame::Statement { ignores_expr_result });\n@@ -124,18 +125,30 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 |this| {\n                                     let scope = (*init_scope, source_info);\n                                     this.in_scope(scope, *lint_level, |this| {\n-                                        this.declare_bindings(\n-                                            visibility_scope,\n-                                            remainder_span,\n-                                            pattern,\n-                                            ArmHasGuard(false),\n-                                            Some((None, initializer_span)),\n-                                        );\n-                                        this.expr_into_pattern(block, pattern.clone(), init)\n+                                        if let Some(else_block) = else_block {\n+                                            this.ast_let_else(\n+                                                block,\n+                                                init,\n+                                                initializer_span,\n+                                                else_block,\n+                                                visibility_scope,\n+                                                remainder_span,\n+                                                pattern,\n+                                            )\n+                                        } else {\n+                                            this.declare_bindings(\n+                                                visibility_scope,\n+                                                remainder_span,\n+                                                pattern,\n+                                                ArmHasGuard(false),\n+                                                Some((None, initializer_span)),\n+                                            );\n+                                            this.expr_into_pattern(block, pattern.clone(), init) // irrefutable pattern\n+                                        }\n                                     })\n-                                }\n+                                },\n                             )\n-                        );\n+                        )\n                     } else {\n                         let scope = (*init_scope, source_info);\n                         unpack!(this.in_scope(scope, *lint_level, |this| {"}, {"sha": "7067a48b783ec24ad61e1c066db7c6120249c738", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 74, "deletions": 3, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1615,7 +1615,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // those N possible outcomes, create a (initially empty)\n         // vector of candidates. Those are the candidates that still\n         // apply if the test has that particular outcome.\n-        debug!(\"match_candidates: test={:?} match_pair={:?}\", test, match_pair);\n+        debug!(\"test_candidates: test={:?} match_pair={:?}\", test, match_pair);\n         let mut target_candidates: Vec<Vec<&mut Candidate<'pat, 'tcx>>> = vec![];\n         target_candidates.resize_with(test.targets(), Default::default);\n \n@@ -1635,8 +1635,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n         // at least the first candidate ought to be tested\n         assert!(total_candidate_count > candidates.len());\n-        debug!(\"tested_candidates: {}\", total_candidate_count - candidates.len());\n-        debug!(\"untested_candidates: {}\", candidates.len());\n+        debug!(\"test_candidates: tested_candidates: {}\", total_candidate_count - candidates.len());\n+        debug!(\"test_candidates: untested_candidates: {}\", candidates.len());\n \n         // HACK(matthewjasper) This is a closure so that we can let the test\n         // create its blocks before the rest of the match. This currently\n@@ -2274,4 +2274,75 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"declare_binding: vars={:?}\", locals);\n         self.var_indices.insert(var_id, locals);\n     }\n+\n+    pub(crate) fn ast_let_else(\n+        &mut self,\n+        mut block: BasicBlock,\n+        init: &Expr<'tcx>,\n+        initializer_span: Span,\n+        else_block: &Block,\n+        visibility_scope: Option<SourceScope>,\n+        remainder_span: Span,\n+        pattern: &Pat<'tcx>,\n+    ) -> BlockAnd<()> {\n+        let scrutinee = unpack!(block = self.lower_scrutinee(block, init, initializer_span));\n+        let pat = Pat { ty: init.ty, span: else_block.span, kind: Box::new(PatKind::Wild) };\n+        let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n+        self.declare_bindings(\n+            visibility_scope,\n+            remainder_span,\n+            pattern,\n+            ArmHasGuard(false),\n+            Some((None, initializer_span)),\n+        );\n+        let mut candidate = Candidate::new(scrutinee.clone(), pattern, false);\n+        let fake_borrow_temps = self.lower_match_tree(\n+            block,\n+            initializer_span,\n+            pattern.span,\n+            false,\n+            &mut [&mut candidate, &mut wildcard],\n+        );\n+        // This block is for the matching case\n+        let matching = self.bind_pattern(\n+            self.source_info(pattern.span),\n+            candidate,\n+            None,\n+            &fake_borrow_temps,\n+            initializer_span,\n+            None,\n+            None,\n+            None,\n+        );\n+        // This block is for the failure case\n+        let failure = self.bind_pattern(\n+            self.source_info(else_block.span),\n+            wildcard,\n+            None,\n+            &fake_borrow_temps,\n+            initializer_span,\n+            None,\n+            None,\n+            None,\n+        );\n+        // This place is not really used because this destination place\n+        // should never be used to take values at the end of the failure\n+        // block.\n+        let dummy_place = Place { local: RETURN_PLACE, projection: ty::List::empty() };\n+        let failure_block;\n+        unpack!(\n+            failure_block = self.ast_block(\n+                dummy_place,\n+                failure,\n+                else_block,\n+                self.source_info(else_block.span),\n+            )\n+        );\n+        self.cfg.terminate(\n+            failure_block,\n+            self.source_info(else_block.span),\n+            TerminatorKind::Unreachable,\n+        );\n+        matching.unit()\n+    }\n }"}, {"sha": "d77d74e25f6e5a82d48feda0cf4f308d36bb0c4b", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> Cx<'tcx> {\n             .filter_map(|(index, stmt)| {\n                 let hir_id = stmt.hir_id;\n                 let opt_dxn_ext = self.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n-                match stmt.kind {\n+                match &stmt.kind {\n                     hir::StmtKind::Expr(ref expr) | hir::StmtKind::Semi(ref expr) => {\n                         let stmt = Stmt {\n                             kind: StmtKind::Expr {\n@@ -66,14 +66,16 @@ impl<'tcx> Cx<'tcx> {\n                         // ignore for purposes of the MIR\n                         None\n                     }\n-                    hir::StmtKind::Local(ref local) => {\n+                    hir::StmtKind::Local(local, els) => {\n                         let remainder_scope = region::Scope {\n                             id: block_id,\n                             data: region::ScopeData::Remainder(region::FirstStatementIndex::new(\n                                 index,\n                             )),\n                         };\n \n+                        let else_block = els.map(|els| self.mirror_block(els));\n+\n                         let mut pattern = self.pattern_from_hir(local.pat);\n                         debug!(?pattern);\n \n@@ -110,6 +112,7 @@ impl<'tcx> Cx<'tcx> {\n                                 },\n                                 pattern,\n                                 initializer: local.init.map(|init| self.mirror_expr(init)),\n+                                else_block,\n                                 lint_level: LintLevel::Explicit(local.hir_id),\n                             },\n                             opt_destruction_scope: opt_dxn_ext,"}, {"sha": "daaabd855c87eb458517b0d5f7fd46c65dba4cd1", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -21,7 +21,7 @@ use rustc_session::lint::builtin::{\n };\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n-use rustc_span::{BytePos, DesugaringKind, ExpnKind, Span};\n+use rustc_span::{BytePos, Span};\n \n pub(crate) fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match def_id.as_local() {\n@@ -75,16 +75,21 @@ impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, '_, 'tcx> {\n         }\n     }\n \n-    fn visit_local(&mut self, loc: &'tcx hir::Local<'tcx>) {\n-        intravisit::walk_local(self, loc);\n+    fn visit_local(&mut self, loc: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n+        intravisit::walk_local(self, loc, els);\n+        if let Some(init) = &loc.init && els.is_some() {\n+            self.check_let(&loc.pat, &init, loc.span);\n+        }\n \n         let (msg, sp) = match loc.source {\n             hir::LocalSource::Normal => (\"local binding\", Some(loc.span)),\n             hir::LocalSource::AsyncFn => (\"async fn binding\", None),\n             hir::LocalSource::AwaitDesugar => (\"`await` future binding\", None),\n             hir::LocalSource::AssignDesugar(_) => (\"destructuring assignment binding\", None),\n         };\n-        self.check_irrefutable(&loc.pat, msg, sp);\n+        if els.is_none() {\n+            self.check_irrefutable(&loc.pat, msg, sp);\n+        }\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n@@ -1125,17 +1130,16 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n         }) if Some(*hir_id) == pat_id => {\n             return LetSource::IfLetGuard;\n         }\n-        hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Let(..), span, .. }) => {\n-            let expn_data = span.ctxt().outer_expn_data();\n-            if let ExpnKind::Desugaring(DesugaringKind::LetElse) = expn_data.kind {\n-                return LetSource::LetElse(expn_data.call_site);\n-            }\n-        }\n         _ => {}\n     }\n \n     let parent_parent = hir.get_parent_node(parent);\n     let parent_parent_node = hir.get(parent_parent);\n+    if let hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_, Some(_)), span, .. }) =\n+        parent_parent_node\n+    {\n+        return LetSource::LetElse(*span);\n+    }\n \n     let parent_parent_parent = hir.get_parent_node(parent_parent);\n     let parent_parent_parent_parent = hir.get_parent_node(parent_parent_parent);"}, {"sha": "c48aa9a90efbed5bcea47076471e9b0366ced87c", "filename": "compiler/rustc_mir_transform/src/remove_uninit_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -102,7 +102,7 @@ fn is_needs_drop_and_init<'tcx>(\n     let field_needs_drop_and_init = |(f, f_ty, mpi)| {\n         let child = move_path_children_matching(move_data, mpi, |x| x.is_field_to(f));\n         let Some(mpi) = child else {\n-            return f_ty.needs_drop(tcx, param_env);\n+            return Ty::needs_drop(f_ty, tcx, param_env);\n         };\n \n         is_needs_drop_and_init(tcx, param_env, maybe_inits, move_data, f_ty, mpi)"}, {"sha": "f78c0f4f545ff26001e8e3b37b7579de9259a587", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -2311,7 +2311,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n         // When checking statements ignore expressions, they will be checked later.\n-        if let hir::StmtKind::Local(ref l) = stmt.kind {\n+        if let hir::StmtKind::Local(ref l, _) = stmt.kind {\n             self.check_attributes(l.hir_id, stmt.span, Target::Statement, None);\n         }\n         intravisit::walk_stmt(self, stmt)"}, {"sha": "d8e97e5adef2fdf76bdbc216329de8bae73485db", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -131,9 +131,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_foreign_item(self, i)\n     }\n \n-    fn visit_local(&mut self, l: &'v hir::Local<'v>) {\n+    fn visit_local(&mut self, l: &'v hir::Local<'v>, e: Option<&'v hir::Block<'v>>) {\n         self.record(\"Local\", Id::Node(l.hir_id), l);\n-        hir_visit::walk_local(self, l)\n+        hir_visit::walk_local(self, l, e)\n     }\n \n     fn visit_block(&mut self, b: &'v hir::Block<'v>) {"}, {"sha": "f125f107fe2a50ade94ca14a9725752fc8224614", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -278,7 +278,7 @@ impl<'tcx> IrMaps<'tcx> {\n                     pats.extend(inner_pat.iter());\n                 }\n                 Struct(_, fields, _) => {\n-                    let (short, not_short): (Vec<&_>, Vec<&_>) =\n+                    let (short, not_short): (Vec<_>, _) =\n                         fields.iter().partition(|f| f.is_shorthand);\n                     shorthand_field_ids.extend(short.iter().map(|f| f.pat.hir_id));\n                     pats.extend(not_short.iter().map(|f| f.pat));\n@@ -298,7 +298,7 @@ impl<'tcx> IrMaps<'tcx> {\n             }\n         }\n \n-        return shorthand_field_ids;\n+        shorthand_field_ids\n     }\n \n     fn add_from_pat(&mut self, pat: &hir::Pat<'tcx>) {\n@@ -366,9 +366,12 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n         lsets.warn_about_unused_args(body, entry_ln);\n     }\n \n-    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n+    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n         self.add_from_pat(&local.pat);\n-        intravisit::walk_local(self, local);\n+        if els.is_some() {\n+            self.add_live_node_for_node(local.hir_id, ExprNode(local.span, local.hir_id));\n+        }\n+        intravisit::walk_local(self, local, els);\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n@@ -785,7 +788,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn propagate_through_stmt(&mut self, stmt: &hir::Stmt<'_>, succ: LiveNode) -> LiveNode {\n         match stmt.kind {\n-            hir::StmtKind::Local(ref local) => {\n+            hir::StmtKind::Local(ref local, els) => {\n                 // Note: we mark the variable as defined regardless of whether\n                 // there is an initializer.  Initially I had thought to only mark\n                 // the live variable as defined if it was initialized, and then we\n@@ -800,8 +803,40 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 // initialization, which is mildly more complex than checking\n                 // once at the func header but otherwise equivalent.\n \n-                let succ = self.propagate_through_opt_expr(local.init, succ);\n-                self.define_bindings_in_pat(&local.pat, succ)\n+                if let Some(els) = els {\n+                    // Eventually, `let pat: ty = init else { els };` is mostly equivalent to\n+                    // `let (bindings, ...) = match init { pat => (bindings, ...), _ => els };`\n+                    // except that extended lifetime applies at the `init` location.\n+                    //\n+                    //       (e)\n+                    //        |\n+                    //        v\n+                    //      (expr)\n+                    //      /   \\\n+                    //     |     |\n+                    //     v     v\n+                    // bindings  els\n+                    //     |\n+                    //     v\n+                    // ( succ )\n+                    //\n+                    if let Some(init) = local.init {\n+                        let else_ln = self.propagate_through_block(els, succ);\n+                        let ln = self.live_node(local.hir_id, local.span);\n+                        self.init_from_succ(ln, succ);\n+                        self.merge_from_succ(ln, else_ln);\n+                        let succ = self.propagate_through_expr(init, ln);\n+                        self.define_bindings_in_pat(&local.pat, succ)\n+                    } else {\n+                        span_bug!(\n+                            stmt.span,\n+                            \"variable is uninitialized but an unexpected else branch is found\"\n+                        )\n+                    }\n+                } else {\n+                    let succ = self.propagate_through_opt_expr(local.init, succ);\n+                    self.define_bindings_in_pat(&local.pat, succ)\n+                }\n             }\n             hir::StmtKind::Item(..) => succ,\n             hir::StmtKind::Expr(ref expr) | hir::StmtKind::Semi(ref expr) => {\n@@ -1121,7 +1156,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         //     (rvalue)          ||       (rvalue)\n         //         |             ||           |\n         //         v             ||           v\n-        // (write of place)     ||   (place components)\n+        // (write of place)      ||   (place components)\n         //         |             ||           |\n         //         v             ||           v\n         //      (succ)           ||        (succ)\n@@ -1306,14 +1341,14 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n // Checking for error conditions\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n+    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n         self.check_unused_vars_in_pat(&local.pat, None, |spans, hir_id, ln, var| {\n             if local.init.is_some() {\n                 self.warn_about_dead_assign(spans, hir_id, ln, var);\n             }\n         });\n \n-        intravisit::walk_local(self, local);\n+        intravisit::walk_local(self, local, els);\n     }\n \n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {"}, {"sha": "05345f73ef65fbc88450da3275fcdec79a223ce4", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1275,15 +1275,15 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         intravisit::walk_pat(self, pattern);\n     }\n \n-    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n+    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n         if let Some(init) = local.init {\n             if self.check_expr_pat_type(init.hir_id, init.span) {\n                 // Do not report duplicate errors for `let x = y`.\n                 return;\n             }\n         }\n \n-        intravisit::walk_local(self, local);\n+        intravisit::walk_local(self, local, els);\n     }\n \n     // Check types in item interfaces."}, {"sha": "2aaacad4ba4e2f0f7c524471736bc34278f0464f", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -82,14 +82,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n     pub fn new(save_ctxt: SaveContext<'tcx>) -> DumpVisitor<'tcx> {\n         let span_utils = SpanUtils::new(&save_ctxt.tcx.sess);\n         let dumper = Dumper::new(save_ctxt.config.clone());\n-        DumpVisitor {\n-            tcx: save_ctxt.tcx,\n-            save_ctxt,\n-            dumper,\n-            span: span_utils,\n-            // mac_defs: FxHashSet::default(),\n-            // macro_calls: FxHashSet::default(),\n-        }\n+        DumpVisitor { tcx: save_ctxt.tcx, save_ctxt, dumper, span: span_utils }\n     }\n \n     pub fn analysis(&self) -> &rls_data::Analysis {\n@@ -1421,13 +1414,14 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n         intravisit::walk_stmt(self, s)\n     }\n \n-    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>, e: Option<&'tcx hir::Block<'tcx>>) {\n         self.process_macro_use(l.span);\n         self.process_var_decl(&l.pat);\n \n-        // Just walk the initializer and type (don't want to walk the pattern again).\n+        // Just walk the initializer, the else branch and type (don't want to walk the pattern again).\n         walk_list!(self, visit_ty, &l.ty);\n         walk_list!(self, visit_expr, &l.init);\n+        walk_list!(self, visit_block, e);\n     }\n \n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {"}, {"sha": "29879c48b04ae04fab3eb75a4ebc4c00d35963cf", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1141,7 +1141,6 @@ pub enum DesugaringKind {\n     Async,\n     Await,\n     ForLoop,\n-    LetElse,\n     WhileLoop,\n }\n \n@@ -1157,7 +1156,6 @@ impl DesugaringKind {\n             DesugaringKind::YeetExpr => \"`do yeet` expression\",\n             DesugaringKind::OpaqueTy => \"`impl Trait`\",\n             DesugaringKind::ForLoop => \"`for` loop\",\n-            DesugaringKind::LetElse => \"`let...else`\",\n             DesugaringKind::WhileLoop => \"`while` loop\",\n         }\n     }"}, {"sha": "adbe71b83ed92384fc549516a40c19392715e66a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -734,7 +734,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let hir_id = hir.local_def_id_to_hir_id(def_id.as_local()?);\n         let parent_node = hir.get_parent_node(hir_id);\n         match hir.find(parent_node) {\n-            Some(hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(local), .. })) => {\n+            Some(hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(local, _), .. })) => {\n                 get_name(err, &local.pat.kind)\n             }\n             // Different to previous arm because one is `&hir::Local` and the other\n@@ -1311,7 +1311,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         visitor.visit_body(&body);\n \n         let typeck_results = self.in_progress_typeck_results.map(|t| t.borrow()).unwrap();\n-        let Some(liberated_sig) = typeck_results.liberated_fn_sigs().get(fn_hir_id) else { return false; };\n+        let Some(liberated_sig) = typeck_results.liberated_fn_sigs().get(fn_hir_id).copied() else { return false; };\n \n         let ret_types = visitor\n             .returns"}, {"sha": "5ae6ed4f72f3f9c86c12297cf3ab4deb1d470c11", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -997,26 +997,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         coerce.coerce(self, &self.misc(sp), then_expr, then_ty);\n \n         if let Some(else_expr) = opt_else_expr {\n-            let else_ty = if sp.desugaring_kind() == Some(DesugaringKind::LetElse) {\n-                // todo introduce `check_expr_with_expectation(.., Expectation::LetElse)`\n-                //   for errors that point to the offending expression rather than the entire block.\n-                //   We could use `check_expr_eq_type(.., tcx.types.never)`, but then there is no\n-                //   way to detect that the expected type originated from let-else and provide\n-                //   a customized error.\n-                let else_ty = self.check_expr(else_expr);\n-                let cause = self.cause(else_expr.span, ObligationCauseCode::LetElse);\n-\n-                if let Some(mut err) =\n-                    self.demand_eqtype_with_origin(&cause, self.tcx.types.never, else_ty)\n-                {\n-                    err.emit();\n-                    self.tcx.ty_error()\n-                } else {\n-                    else_ty\n-                }\n-            } else {\n-                self.check_expr_with_expectation(else_expr, expected)\n-            };\n+            let else_ty = self.check_expr_with_expectation(else_expr, expected);\n             let else_diverges = self.diverges.get();\n \n             let opt_suggest_box_span = self.opt_suggest_box_span(else_ty, orig_expected);"}, {"sha": "fcd610e677a7584507a33361cb9d3a417dc8d3d6", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1218,8 +1218,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Type check a `let` statement.\n-    pub fn check_decl_local(&self, local: &'tcx hir::Local<'tcx>) {\n+    pub fn check_decl_local(\n+        &self,\n+        local: &'tcx hir::Local<'tcx>,\n+        els: Option<&'tcx hir::Block<'tcx>>,\n+    ) {\n         self.check_decl(local.into());\n+        if let Some(blk) = els {\n+            let previous_diverges = self.diverges.get();\n+            let else_ty = self.check_block_with_expected(blk, NoExpectation);\n+            let cause = self.cause(blk.span, ObligationCauseCode::LetElse);\n+            if let Some(mut err) =\n+                self.demand_eqtype_with_origin(&cause, self.tcx.types.never, else_ty)\n+            {\n+                err.emit();\n+            }\n+            self.diverges.set(previous_diverges);\n+        }\n     }\n \n     pub fn check_stmt(&self, stmt: &'tcx hir::Stmt<'tcx>, is_last: bool) {\n@@ -1236,8 +1251,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let old_has_errors = self.has_errors.replace(false);\n \n         match stmt.kind {\n-            hir::StmtKind::Local(ref l) => {\n-                self.check_decl_local(&l);\n+            hir::StmtKind::Local(l, e) => {\n+                self.check_decl_local(l, e);\n             }\n             // Ignore for now.\n             hir::StmtKind::Item(_) => {}\n@@ -1396,7 +1411,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                             source:\n                                                                 hir::LocalSource::AssignDesugar(_),\n                                                             ..\n-                                                        }),\n+                                                        }, _),\n                                                     ..\n                                                 },\n                                                 hir::Stmt {"}, {"sha": "956f315f6842629bbbc48bb5fc58c49da2b50a8b", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -99,9 +99,9 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n     // Add explicitly-declared locals.\n-    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n+    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n         self.declare(local.into());\n-        intravisit::walk_local(self, local);\n+        intravisit::walk_local(self, local, els)\n     }\n \n     fn visit_let_expr(&mut self, let_expr: &'tcx hir::Let<'tcx>) {"}, {"sha": "54fb17734f4de1021b8ba3d68dcc0b9d560e6d68", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -460,6 +460,7 @@ fn resolve_local<'tcx>(\n     visitor: &mut RegionResolutionVisitor<'tcx>,\n     pat: Option<&'tcx hir::Pat<'tcx>>,\n     init: Option<&'tcx hir::Expr<'tcx>>,\n+    els: Option<&'tcx hir::Block<'tcx>>,\n ) {\n     debug!(\"resolve_local(pat={:?}, init={:?})\", pat, init);\n \n@@ -537,13 +538,18 @@ fn resolve_local<'tcx>(\n         }\n     }\n \n-    // Make sure we visit the initializer first, so expr_and_pat_count remains correct\n+    // Make sure we visit the initializer first, so expr_and_pat_count remains correct.\n+    // The correct order, as shared between generator_interior, drop_ranges and intravisitor,\n+    // is to walk initializer, followed by pattern bindings, finally followed by the `else` block.\n     if let Some(expr) = init {\n         visitor.visit_expr(expr);\n     }\n     if let Some(pat) = pat {\n         visitor.visit_pat(pat);\n     }\n+    if let Some(els) = els {\n+        visitor.visit_block(els);\n+    }\n \n     /// Returns `true` if `pat` match the `P&` non-terminal.\n     ///\n@@ -764,7 +770,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n             // (i.e., `'static`), which means that after `g` returns, it drops,\n             // and all the associated destruction scope rules apply.\n             self.cx.var_parent = None;\n-            resolve_local(self, None, Some(&body.value));\n+            resolve_local(self, None, Some(&body.value), None);\n         }\n \n         if body.generator_kind.is_some() {\n@@ -790,8 +796,8 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n         resolve_expr(self, ex);\n     }\n-    fn visit_local(&mut self, l: &'tcx Local<'tcx>) {\n-        resolve_local(self, Some(&l.pat), l.init);\n+    fn visit_local(&mut self, l: &'tcx Local<'tcx>, e: Option<&'tcx Block<'tcx>>) {\n+        resolve_local(self, Some(&l.pat), l.init, e)\n     }\n }\n "}, {"sha": "b61ec13e388accaeac82aca89a3405a95d3a44d4", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -321,8 +321,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         intravisit::walk_pat(self, p);\n     }\n \n-    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n-        intravisit::walk_local(self, l);\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>, e: Option<&'tcx hir::Block<'tcx>>) {\n+        intravisit::walk_local(self, l, e);\n         let var_ty = self.fcx.local_ty(l.span, l.hir_id).decl_ty;\n         let var_ty = self.resolve(var_ty, &l.span);\n         self.write_ty_to_typeck_results(l.hir_id, var_ty);"}, {"sha": "12581286941f32eab6cbf34c006013372c17f665", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -252,7 +252,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Let(hir::Let { pat, init, .. }) => {\n-                self.walk_local(init, pat, |t| t.borrow_expr(init, ty::ImmBorrow));\n+                self.walk_local(init, pat, None, |t| t.borrow_expr(init, ty::ImmBorrow))\n             }\n \n             hir::ExprKind::Match(ref discr, arms, _) => {\n@@ -453,11 +453,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n     fn walk_stmt(&mut self, stmt: &hir::Stmt<'_>) {\n         match stmt.kind {\n-            hir::StmtKind::Local(hir::Local { pat, init: Some(expr), .. }) => {\n-                self.walk_local(expr, pat, |_| {});\n+            hir::StmtKind::Local(hir::Local { pat, init: Some(expr), .. }, els) => {\n+                self.walk_local(expr, pat, els, |_| {})\n             }\n \n-            hir::StmtKind::Local(_) => {}\n+            hir::StmtKind::Local(_, _) => {}\n \n             hir::StmtKind::Item(_) => {\n                 // We don't visit nested items in this visitor,\n@@ -470,13 +470,23 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn walk_local<F>(&mut self, expr: &hir::Expr<'_>, pat: &hir::Pat<'_>, mut f: F)\n-    where\n+    fn walk_local<F>(\n+        &mut self,\n+        expr: &hir::Expr<'_>,\n+        pat: &hir::Pat<'_>,\n+        els: Option<&hir::Block<'_>>,\n+        mut f: F,\n+    ) where\n         F: FnMut(&mut Self),\n     {\n         self.walk_expr(expr);\n         let expr_place = return_if_err!(self.mc.cat_expr(expr));\n         f(self);\n+        if let Some(els) = els {\n+            // borrowing because we need to test the descriminant\n+            self.borrow_expr(expr, ImmBorrow);\n+            self.walk_block(els)\n+        }\n         self.walk_irrefutable_pat(&expr_place, &pat);\n     }\n \n@@ -667,7 +677,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         let ExprUseVisitor { ref mc, body_owner: _, ref mut delegate } = *self;\n         return_if_err!(mc.cat_pattern(discr_place.clone(), pat, |place, pat| {\n             if let PatKind::Binding(_, canonical_id, ..) = pat.kind {\n-                debug!(\"walk_pat: binding place={:?} pat={:?}\", place, pat,);\n+                debug!(\"walk_pat: binding place={:?} pat={:?}\", place, pat);\n                 if let Some(bm) =\n                     mc.typeck_results.extract_binding_mode(tcx.sess, pat.hir_id, pat.span)\n                 {"}, {"sha": "065787cab08ff65200d12ac52469bb05d39d700f", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-annotated.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.stderr?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-binding-explicit-mut-annotated.rs:9:37\n    |\n LL |     let Some(n): &mut Option<i32> = &&Some(5i32) else { return };\n-   |                                     ^^^^^^^^^^^^ types differ in mutability\n+   |                  ----------------   ^^^^^^^^^^^^ types differ in mutability\n+   |                  |\n+   |                  expected due to this\n    |\n    = note: expected mutable reference `&mut Option<i32>`\n                       found reference `&&Option<i32>`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-binding-explicit-mut-annotated.rs:13:37\n    |\n LL |     let Some(n): &mut Option<i32> = &&mut Some(5i32) else { return };\n-   |                                     ^^^^^^^^^^^^^^^^ types differ in mutability\n+   |                  ----------------   ^^^^^^^^^^^^^^^^ types differ in mutability\n+   |                  |\n+   |                  expected due to this\n    |\n    = note: expected mutable reference `&mut Option<i32>`\n                       found reference `&&mut Option<i32>`"}, {"sha": "3d647a4c05d86524167bc57b84e279597b8924ed", "filename": "src/test/ui/let-else/let-else-check.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1,8 +1,8 @@\n error: unused variable: `x`\n-  --> $DIR/let-else-check.rs:18:9\n+  --> $DIR/let-else-check.rs:14:13\n    |\n-LL |     let x = 1;\n-   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n+LL |         let x = 1;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n note: the lint level is defined here\n   --> $DIR/let-else-check.rs:3:9\n@@ -11,10 +11,10 @@ LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unused variable: `x`\n-  --> $DIR/let-else-check.rs:14:13\n+  --> $DIR/let-else-check.rs:18:9\n    |\n-LL |         let x = 1;\n-   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n+LL |     let x = 1;\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "05e45f689890d00eb9371766348a90b40927ce90", "filename": "src/test/ui/let-else/let-else-non-diverging.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1,8 +1,11 @@\n error[E0308]: `else` clause of `let...else` does not diverge\n-  --> $DIR/let-else-non-diverging.rs:12:32\n+  --> $DIR/let-else-non-diverging.rs:4:32\n    |\n-LL |     let Some(x) = Some(1) else { Some(2) };\n-   |                                ^^^^^^^^^^^ expected `!`, found enum `Option`\n+LL |       let Some(x) = Some(1) else {\n+   |  ________________________________^\n+LL | |         Some(2)\n+LL | |     };\n+   | |_____^ expected `!`, found enum `Option`\n    |\n    = note: expected type `!`\n               found enum `Option<{integer}>`\n@@ -26,13 +29,10 @@ LL | |     };\n    = help: ...or use `match` instead of `let...else`\n \n error[E0308]: `else` clause of `let...else` does not diverge\n-  --> $DIR/let-else-non-diverging.rs:4:32\n+  --> $DIR/let-else-non-diverging.rs:12:32\n    |\n-LL |       let Some(x) = Some(1) else {\n-   |  ________________________________^\n-LL | |         Some(2)\n-LL | |     };\n-   | |_____^ expected `!`, found enum `Option`\n+LL |     let Some(x) = Some(1) else { Some(2) };\n+   |                                ^^^^^^^^^^^ expected `!`, found enum `Option`\n    |\n    = note: expected type `!`\n               found enum `Option<{integer}>`"}, {"sha": "56b9e073330a6237817715f5c4827f70d6f30fad", "filename": "src/test/ui/let-else/let-else-ref-bindings.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -20,7 +20,9 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:24:34\n    |\n LL |     let Some(a): Option<&[u8]> = some else { return };\n-   |                                  ^^^^ expected `&[u8]`, found struct `Vec`\n+   |                  -------------   ^^^^ expected `&[u8]`, found struct `Vec`\n+   |                  |\n+   |                  expected due to this\n    |\n    = note: expected enum `Option<&[u8]>`\n               found enum `Option<Vec<u8>>`\n@@ -29,7 +31,9 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:27:34\n    |\n LL |     let Some(a): Option<&[u8]> = &some else { return };\n-   |                                  ^^^^^ expected enum `Option`, found `&Option<Vec<u8>>`\n+   |                  -------------   ^^^^^ expected enum `Option`, found `&Option<Vec<u8>>`\n+   |                  |\n+   |                  expected due to this\n    |\n    = note:   expected enum `Option<&[u8]>`\n            found reference `&Option<Vec<u8>>`\n@@ -56,7 +60,9 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:52:38\n    |\n LL |     let Some(a): Option<&mut [u8]> = some else { return };\n-   |                                      ^^^^ expected `&mut [u8]`, found struct `Vec`\n+   |                  -----------------   ^^^^ expected `&mut [u8]`, found struct `Vec`\n+   |                  |\n+   |                  expected due to this\n    |\n    = note: expected enum `Option<&mut [u8]>`\n               found enum `Option<Vec<u8>>`\n@@ -65,7 +71,9 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:55:38\n    |\n LL |     let Some(a): Option<&mut [u8]> = &mut some else { return };\n-   |                                      ^^^^^^^^^ expected enum `Option`, found mutable reference\n+   |                  -----------------   ^^^^^^^^^ expected enum `Option`, found mutable reference\n+   |                  |\n+   |                  expected due to this\n    |\n    = note:           expected enum `Option<&mut [u8]>`\n            found mutable reference `&mut Option<Vec<u8>>`"}, {"sha": "624c2ea37a70bc758a8b08880ba5ebdbe7f70af3", "filename": "src/test/ui/let-else/let-else-temporary-lifetime.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -0,0 +1,25 @@\n+// run-pass\n+#![feature(let_else)]\n+\n+use std::sync::atomic::{AtomicU8, Ordering};\n+\n+static TRACKER: AtomicU8 = AtomicU8::new(0);\n+\n+#[derive(Default)]\n+struct Droppy {\n+    inner: u32,\n+}\n+\n+impl Drop for Droppy {\n+    fn drop(&mut self) {\n+        TRACKER.store(1, Ordering::Release);\n+        println!(\"I've been dropped\");\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(TRACKER.load(Ordering::Acquire), 0);\n+    let 0 = Droppy::default().inner else { return };\n+    assert_eq!(TRACKER.load(Ordering::Acquire), 1);\n+    println!(\"Should have dropped \ud83d\udc46\");\n+}"}, {"sha": "93ce3b30fb1d36d3946f6e39571ed328a425a79b", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -505,7 +505,7 @@ fn is_relevant_block(cx: &LateContext<'_>, typeck_results: &ty::TypeckResults<'_\n             .as_ref()\n             .map_or(false, |e| is_relevant_expr(cx, typeck_results, e)),\n         |stmt| match &stmt.kind {\n-            StmtKind::Local(_) => true,\n+            StmtKind::Local(_, _) => true,\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => is_relevant_expr(cx, typeck_results, expr),\n             StmtKind::Item(_) => false,\n         },"}, {"sha": "0b9fdb891b15cc6882eb2151ce316e7371ce9aee", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -324,7 +324,7 @@ impl BlockEq {\n \n /// If the statement is a local, checks if the bound names match the expected list of names.\n fn eq_binding_names(s: &Stmt<'_>, names: &[(HirId, Symbol)]) -> bool {\n-    if let StmtKind::Local(l) = s.kind {\n+    if let StmtKind::Local(l, _) = s.kind {\n         let mut i = 0usize;\n         let mut res = true;\n         l.pat.each_binding_or_first(&mut |_, _, _, name| {\n@@ -349,7 +349,7 @@ fn eq_stmts(\n     eq: &mut HirEqInterExpr<'_, '_, '_>,\n     moved_bindings: &mut Vec<(HirId, Symbol)>,\n ) -> bool {\n-    (if let StmtKind::Local(l) = stmt.kind {\n+    (if let StmtKind::Local(l, _) = stmt.kind {\n         let old_count = moved_bindings.len();\n         l.pat.each_binding_or_first(&mut |_, id, _, name| {\n             moved_bindings.push((id, name.name));\n@@ -435,7 +435,7 @@ fn scan_block_for_eq(cx: &LateContext<'_>, _conds: &[&Expr<'_>], block: &Block<'\n                 // Clear out all locals seen at the end so far. None of them can be moved.\n                 let stmts = &blocks[0].stmts;\n                 for stmt in &stmts[stmts.len() - init..=stmts.len() - offset] {\n-                    if let StmtKind::Local(l) = stmt.kind {\n+                    if let StmtKind::Local(l, _) = stmt.kind {\n                         l.pat.each_binding_or_first(&mut |_, id, _, _| {\n                             eq.locals.remove(&id);\n                         });"}, {"sha": "7fe3443858a01296580931e1b513afcdc92b0d8d", "filename": "src/tools/clippy/clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n             // checked and the name of the bound variable\n             let (local, variant, binding_name, binding_type, span) = if_chain! {\n                 // only take `let ...` statements\n-                if let StmtKind::Local(local) = stmt.kind;\n+                if let StmtKind::Local(local, _) = stmt.kind;\n                 if let Some(expr) = local.init;\n                 if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n                 if !expr.span.from_expansion();"}, {"sha": "0f374d12a84f68b1de54a570244acedde20b8b4b", "filename": "src/tools/clippy/clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n-            StmtKind::Local(local) => {\n+            StmtKind::Local(local, _) => {\n                 if local.ty.is_some() {\n                     self.ty_bounds.push(TyBound::Any);\n                 } else {"}, {"sha": "e0986b710c5086659b40a00f5854533bfd9381ed", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -386,7 +386,7 @@ impl<'tcx> Visitor<'tcx> for InsertSearcher<'_, 'tcx> {\n                 }\n             },\n             StmtKind::Expr(e) => self.visit_expr(e),\n-            StmtKind::Local(l) => {\n+            StmtKind::Local(l, _) => {\n                 self.visit_pat(l.pat);\n                 if let Some(e) = l.init {\n                     self.allow_insert_closure &= !self.in_tail_pos;"}, {"sha": "bd1ac3371b0636e74251a2728d0d8c049f660c35", "filename": "src/tools/clippy/clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -116,7 +116,7 @@ fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>)\n     if_chain! {\n         if let ExprKind::Block(block, _label @ None) = kind;\n         if let Block {\n-            stmts: [Stmt { kind: StmtKind::Local(local), .. }],\n+            stmts: [Stmt { kind: StmtKind::Local(local, _), .. }],\n             expr: Some(expr_end_of_block),\n             rules: BlockCheckMode::DefaultBlock,\n             .."}, {"sha": "5dcb86feb7622a6e3d38283f6b33ce05dd21b67a", "filename": "src/tools/clippy/clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n         while let Some(stmt) = it.next() {\n             if_chain! {\n                 if let Some(expr) = it.peek();\n-                if let hir::StmtKind::Local(local) = stmt.kind;\n+                if let hir::StmtKind::Local(local, _) = stmt.kind;\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(if_) = expr.kind;\n                 if let hir::ExprKind::If(hir::Expr { kind: hir::ExprKind::DropTemps(cond), ..}, then, else_) = if_.kind;"}, {"sha": "a37dfb7b7151d633043b3aa0d54591133d2be76b", "filename": "src/tools/clippy/clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::{is_must_use_ty, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n use if_chain::if_chain;\n-use rustc_hir::{Local, PatKind};\n+use rustc_hir::{Block, Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -109,7 +109,7 @@ const SYNC_GUARD_PATHS: [&[&str]; 6] = [\n ];\n \n impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>) {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>, _: Option<&Block<'_>>) {\n         if in_external_macro(cx.tcx.sess, local.span) {\n             return;\n         }"}, {"sha": "ba0f01d9ed25b6b0dc9f18ea7c96f7804661ec10", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -76,7 +76,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n     if let ExprKind::Block(block, _) = expr.kind {\n         for stmt in block.stmts {\n             if_chain! {\n-                if let StmtKind::Local(local) = stmt.kind;\n+                if let StmtKind::Local(local, _) = stmt.kind;\n                 if let PatKind::Binding(_, id, ..) = local.pat.kind;\n                 if let Some(init_expr) = local.init;\n                 if let ExprKind::MethodCall(method_name, &[ref iter_source], ..) = init_expr.kind;\n@@ -276,7 +276,7 @@ fn get_expr_and_hir_id_from_stmt<'v>(stmt: &'v Stmt<'v>) -> Option<(&'v Expr<'v>\n     match stmt.kind {\n         StmtKind::Expr(expr) | StmtKind::Semi(expr) => Some((expr, None)),\n         StmtKind::Item(..) => None,\n-        StmtKind::Local(Local { init, pat, .. }) => {\n+        StmtKind::Local(Local { init, pat, .. }, _) => {\n             if let PatKind::Binding(_, hir_id, ..) = pat.kind {\n                 init.map(|init_expr| (init_expr, Some(hir_id)))\n             } else {"}, {"sha": "c60d55180606796547b0f9f9019846d19d26a76f", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -104,7 +104,7 @@ fn never_loop_expr_seq<'a, T: Iterator<Item = &'a Expr<'a>>>(es: &mut T, main_lo\n fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     match stmt.kind {\n         StmtKind::Semi(e, ..) | StmtKind::Expr(e, ..) => Some(e),\n-        StmtKind::Local(local) => local.init,\n+        StmtKind::Local(local, _) => local.init,\n         StmtKind::Item(..) => None,\n     }\n }"}, {"sha": "661af8fe642f9e78bd92e9e055abf48f40315fd1", "filename": "src/tools/clippy/clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, Visitor};\n-use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n+use rustc_hir::{BinOpKind, Block, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n@@ -148,7 +148,7 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn visit_local(&mut self, l: &'tcx Local<'_>) {\n+    fn visit_local(&mut self, l: &'tcx Local<'_>, e: Option<&'tcx Block<'_>>) {\n         // Look for declarations of the variable\n         if_chain! {\n             if l.pat.hir_id == self.var_id;\n@@ -166,7 +166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n             }\n         }\n \n-        walk_local(self, l);\n+        walk_local(self, l, e);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {"}, {"sha": "8c3524942520b6b7836ac0a6a70d76b8cf255d26", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -11,7 +11,7 @@ use rustc_lint::LateContext;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n     let (init, has_trailing_exprs) = match (loop_block.stmts, loop_block.expr) {\n         ([stmt, stmts @ ..], expr) => {\n-            if let StmtKind::Local(&Local { init: Some(e), .. }) | StmtKind::Semi(e) | StmtKind::Expr(e) = stmt.kind {\n+            if let StmtKind::Local(&Local { init: Some(e), .. }, None) | StmtKind::Semi(e) | StmtKind::Expr(e) = stmt.kind {\n                 (e, !stmts.is_empty() || expr.is_some())\n             } else {\n                 return;"}, {"sha": "1abdfaac7ec64279e08f140d6458b9ef9e0734c4", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n+use rustc_hir::{def::Res, Block, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::{symbol::sym, Symbol};\n@@ -283,7 +283,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         used_after: bool,\n     }\n     impl<'a, 'b, 'tcx> Visitor<'tcx> for NestedLoopVisitor<'a, 'b, 'tcx> {\n-        fn visit_local(&mut self, l: &'tcx Local<'_>) {\n+        fn visit_local(&mut self, l: &'tcx Local<'_>, _: Option<&'tcx Block<'_>>) {\n             if !self.after_loop {\n                 l.pat.each_binding_or_first(&mut |_, id, _, _| {\n                     if id == self.local_id {"}, {"sha": "3bfe5428133fc2b0fea25573fb53319604b19e63", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -144,7 +144,7 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_>, expr: &'a hir::Expr<'_>) ->\n                     // If block only contains statements,\n                     // reduce `{ X; }` to `X` or `X;`\n                     match inner_stmt.kind {\n-                        hir::StmtKind::Local(local) => Some(local.span),\n+                        hir::StmtKind::Local(local, _) => Some(local.span),\n                         hir::StmtKind::Expr(e) => Some(e.span),\n                         hir::StmtKind::Semi(..) => Some(inner_stmt.span),\n                         hir::StmtKind::Item(..) => None,"}, {"sha": "cc8674a200652e425ee7254df75f26f4d980e3ab", "filename": "src/tools/clippy/clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n use clippy_utils::{higher, in_constant, meets_msrv, msrvs};\n-use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n+use rustc_hir::{Arm, Block, Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -1040,8 +1040,14 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         }\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n-        self.infallible_destructuring_match_linted |= infallible_destructuring_match::check(cx, local);\n+    fn check_local(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        local: &'tcx Local<'_>,\n+        els: Option<&'tcx Block<'_>>,\n+    ) {\n+        self.infallible_destructuring_match_linted |=\n+            els.is_none() && infallible_destructuring_match::check(cx, local);\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {"}, {"sha": "80dbd14b2c56ac8af65abf22b9f1cb9fa77caf58", "filename": "src/tools/clippy/clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -220,7 +220,7 @@ fn indirect_usage<'tcx>(\n         init: Some(init_expr),\n         hir_id: local_hir_id,\n         ..\n-    }) = stmt.kind\n+    }, _) = stmt.kind\n     {\n         let mut path_to_binding = None;\n         expr_visitor(cx, |expr| {"}, {"sha": "2ad7ac60b92500993a53617988edf6a3a4af2593", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -161,7 +161,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if_chain! {\n             if !in_external_macro(cx.tcx.sess, stmt.span);\n-            if let StmtKind::Local(local) = stmt.kind;\n+            if let StmtKind::Local(local, _) = stmt.kind;\n             if let PatKind::Binding(an, .., name, None) = local.pat.kind;\n             if let Some(init) = local.init;\n             if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut;"}, {"sha": "de993c3c0a47a8136140b2a85d21661764bce9ed", "filename": "src/tools/clippy/clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for EvalOrderDependence {\n     }\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n-            StmtKind::Local(local) => {\n+            StmtKind::Local(local, _) => {\n                 if let Local { init: Some(e), .. } = local {\n                     DivergenceVisitor { cx }.visit_expr(e);\n                 }\n@@ -273,7 +273,7 @@ fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt<'_>) -\n         StmtKind::Expr(expr) | StmtKind::Semi(expr) => check_expr(vis, expr),\n         // If the declaration is of a local variable, check its initializer\n         // expression if it has one. Otherwise, keep going.\n-        StmtKind::Local(local) => local\n+        StmtKind::Local(local, _) => local\n             .init\n             .as_ref()\n             .map_or(StopEarly::KeepGoing, |expr| check_expr(vis, expr)),"}, {"sha": "251181165b0224e0d164ef84813a31b0d7b7999c", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -101,7 +101,12 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n         }\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &hir::Local<'_>) {\n+    fn check_local(\n+        &mut self,\n+        cx: &LateContext<'_>,\n+        local: &hir::Local<'_>,\n+        _: Option<&hir::Block<'_>>,\n+    ) {\n         if let hir::PatKind::Wild = local.pat.kind {\n             return;\n         }"}, {"sha": "fa1c09d8f90322615ffe33c624371a1769077745", "filename": "src/tools/clippy/clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -92,7 +92,7 @@ fn contains_let(cond: &Expr<'_>) -> bool {\n }\n \n fn stmt_needs_ordered_drop(cx: &LateContext<'_>, stmt: &Stmt<'_>) -> bool {\n-    let StmtKind::Local(local) = stmt.kind else { return false };\n+    let StmtKind::Local(local, _) = stmt.kind else { return false };\n     !local.pat.walk_short(|pat| {\n         if let PatKind::Binding(.., None) = pat.kind {\n             !needs_ordered_drop(cx, cx.typeck_results().pat_ty(pat))\n@@ -367,7 +367,7 @@ fn check<'tcx>(\n }\n \n impl<'tcx> LateLintPass<'tcx> for NeedlessLateInit {\n-    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>, _: Option<&'tcx Block<'tcx>>) {\n         let mut parents = cx.tcx.hir().parent_iter(local.hir_id);\n         if_chain! {\n             if let Local {"}, {"sha": "105e145ac3069201b548a1783665d4fd2cae4903", "filename": "src/tools/clippy/clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -88,10 +88,11 @@ fn check_no_effect(cx: &LateContext<'_>, stmt: &Stmt<'_>) -> bool {\n             span_lint_hir(cx, NO_EFFECT, expr.hir_id, stmt.span, \"statement with no effect\");\n             return true;\n         }\n-    } else if let StmtKind::Local(local) = stmt.kind {\n+    } else if let StmtKind::Local(local, els) = stmt.kind {\n         if_chain! {\n             if !is_lint_allowed(cx, NO_EFFECT_UNDERSCORE_BINDING, local.hir_id);\n             if let Some(init) = local.init;\n+            if els.is_none();\n             if !local.pat.span.from_expansion();\n             if has_no_effect(cx, init);\n             if let PatKind::Binding(_, _, ident, _) = local.pat.kind;"}, {"sha": "c7f8f2f8d7045a39fca0c76f837295169f677c37", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -261,13 +261,13 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n         match s.kind {\n             StmtKind::Local(Local {\n                 pat, init: Some(init), ..\n-            }) => {\n+            }, _) => {\n                 self.visit_pat_expr(pat, init, false);\n             },\n             StmtKind::Item(_) | StmtKind::Expr(_) | StmtKind::Semi(_) => {\n                 walk_stmt(self, s);\n             },\n-            StmtKind::Local(_) => {},\n+            StmtKind::Local(_, _) => {},\n         }\n         self.ret_vars.clear();\n     }"}, {"sha": "83e18e207117a277f7715c602ea9e862e789129a", "filename": "src/tools/clippy/clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -83,7 +83,7 @@ declare_lint_pass!(PatternTypeMismatch => [PATTERN_TYPE_MISMATCH]);\n \n impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n-        if let StmtKind::Local(local) = stmt.kind {\n+        if let StmtKind::Local(local, _) = stmt.kind {\n             if in_external_macro(cx.sess(), local.pat.span) {\n                 return;\n             }"}, {"sha": "8316efad1ffed51d8bc1bcf068a375a81191d4f7", "filename": "src/tools/clippy/clippy_lints/src/read_zero_byte_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fread_zero_byte_vec.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for ReadZeroByteVec {\n         for (idx, stmt) in block.stmts.iter().enumerate() {\n             if !stmt.span.from_expansion()\n                 // matches `let v = Vec::new();`\n-                && let StmtKind::Local(local) = stmt.kind\n+                && let StmtKind::Local(local, _) = stmt.kind\n                 && let Local { pat, init: Some(init), .. } = local\n                 && let PatKind::Binding(_, _, ident, _) = pat.kind\n                 && let Some(vec_init_kind) = get_vec_init_kind(cx, init)"}, {"sha": "48bf14d511c71d492da5a281a2bbe47f1192004c", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n \n         for w in block.stmts.windows(2) {\n             if_chain! {\n-                if let hir::StmtKind::Local(local) = w[0].kind;\n+                if let hir::StmtKind::Local(local, _) = w[0].kind;\n                 if let Option::Some(t) = local.init;\n                 if let hir::ExprKind::Closure { .. } = t.kind;\n                 if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind;"}, {"sha": "b2ec32abb442a2addfeb9c0ce07eb4eac0c722f3", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -10,7 +10,6 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -83,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         if_chain! {\n             if let Some(retexpr) = block.expr;\n             if let Some(stmt) = block.stmts.iter().last();\n-            if let StmtKind::Local(local) = &stmt.kind;\n+            if let StmtKind::Local(local, _) = &stmt.kind;\n             if local.ty.is_none();\n             if cx.tcx.hir().attrs(local.hir_id).is_empty();\n             if let Some(initexpr) = &local.init;\n@@ -203,9 +202,7 @@ fn check_final_expr<'tcx>(\n                 check_block_return(cx, ifblock);\n             }\n             if let Some(else_clause) = else_clause_opt {\n-                if expr.span.desugaring_kind() != Some(DesugaringKind::LetElse) {\n-                    check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n-                }\n+                check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n             }\n         },\n         // a match expr, check all arms"}, {"sha": "3d7ef747a86c85ad3bfbbdaa3839733d69bd8195", "filename": "src/tools/clippy/clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for SlowVectorInit {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         // Matches statements which initializes vectors. For example: `let mut vec = Vec::with_capacity(10)`\n         if_chain! {\n-            if let StmtKind::Local(local) = stmt.kind;\n+            if let StmtKind::Local(local, _) = stmt.kind;\n             if let PatKind::Binding(BindingAnnotation::Mutable, local_id, _, None) = local.pat.kind;\n             if let Some(init) = local.init;\n             if let Some(len_arg) = Self::is_vec_with_capacity(cx, init);"}, {"sha": "a8c96543c7c6ef807be60a444a5dfb7d6e6cdcb4", "filename": "src/tools/clippy/clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -141,7 +141,7 @@ fn check_manual_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n     for w in block.stmts.windows(3) {\n         if_chain! {\n             // let t = foo();\n-            if let StmtKind::Local(tmp) = w[0].kind;\n+            if let StmtKind::Local(tmp, _) = w[0].kind;\n             if let Some(tmp_init) = tmp.init;\n             if let PatKind::Binding(.., ident, None) = tmp.pat.kind;\n "}, {"sha": "2a7d5f2623e2c58e80eb7a573df752faebcf023b", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -12,7 +12,7 @@ mod vec_box;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    Body, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n+    Block, Body, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n     TraitItemKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -406,7 +406,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         }\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>) {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>, _: Option<&Block<'_>>) {\n         if let Some(ty) = local.ty {\n             self.check_ty(\n                 cx,"}, {"sha": "eab3b9b7b01c2a9c95c020a0aad44367fd33ae79", "filename": "src/tools/clippy/clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funinit_vec.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> VecLocation<'tcx> {\n /// or `self` expression for `Vec::reserve()`.\n fn extract_init_or_reserve_target<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'tcx>) -> Option<TargetVec<'tcx>> {\n     match stmt.kind {\n-        StmtKind::Local(local) => {\n+        StmtKind::Local(local, _) => {\n             if_chain! {\n                 if let Some(init_expr) = local.init;\n                 if let PatKind::Binding(_, hir_id, _, None) = local.pat.kind;"}, {"sha": "80e7b8de392c7ec35037b2436ab460d208c29bca", "filename": "src/tools/clippy/clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::{self, Ty, TypeVisitable, TypeSuperVisitable, TypeVisitor}\n use super::LET_UNIT_VALUE;\n \n pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n-    if let StmtKind::Local(local) = stmt.kind\n+    if let StmtKind::Local(local, _) = stmt.kind\n         && let Some(init) = local.init\n         && !local.pat.span.from_expansion()\n         && !in_external_macro(cx.sess(), stmt.span)"}, {"sha": "99ac84fbaabaee25dbba3413c94d26564ea93bd0", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -685,7 +685,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         }\n \n         match stmt.value.kind {\n-            StmtKind::Local(local) => {\n+            StmtKind::Local(local, _) => {\n                 bind!(self, local);\n                 kind!(\"Local({local})\");\n                 self.option(field!(local.init), \"init\", |init| {"}, {"sha": "c71bacfa29a7089ee33ee2243a317fa0277d92dd", "filename": "src/tools/clippy/clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for VecInitThenPush {\n         self.searcher = None;\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>, _: Option<&'tcx Block<'tcx>>) {\n         if let Some(init_expr) = local.init\n             && let PatKind::Binding(BindingAnnotation::Mutable, id, name, None) = local.pat.kind\n             && !in_external_macro(cx.sess(), local.span)"}, {"sha": "0b5325adfed2079c971136bad06742ebf9dde852", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -102,7 +102,7 @@ pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n impl HirEqInterExpr<'_, '_, '_> {\n     pub fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n-            (&StmtKind::Local(l), &StmtKind::Local(r)) => {\n+            (&StmtKind::Local(l, le), &StmtKind::Local(r, re)) => {\n                 // This additional check ensures that the type of the locals are equivalent even if the init\n                 // expression or type have some inferred parts.\n                 if let Some((typeck_lhs, typeck_rhs)) = self.inner.maybe_typeck_results {\n@@ -117,6 +117,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 // these only get added if the init and type is equal.\n                 both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                     && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n+                    && both(&le, &re, |l, r| self.eq_block(l, r))\n                     && self.eq_pat(l.pat, r.pat)\n             },\n             (&StmtKind::Expr(l), &StmtKind::Expr(r)) | (&StmtKind::Semi(l), &StmtKind::Semi(r)) => self.eq_expr(l, r),\n@@ -921,11 +922,14 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&b.kind).hash(&mut self.s);\n \n         match &b.kind {\n-            StmtKind::Local(local) => {\n+            StmtKind::Local(local, els) => {\n                 self.hash_pat(local.pat);\n                 if let Some(init) = local.init {\n                     self.hash_expr(init);\n                 }\n+                if let Some(els) = els {\n+                    self.hash_block(els);\n+                }\n             },\n             StmtKind::Item(..) => {},\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => {"}, {"sha": "ac6490cfd2c72017ba92b85b27550e585e8344a4", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c529ded8674b89c46052da92399227c3b764c6a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=6c529ded8674b89c46052da92399227c3b764c6a", "patch": "@@ -1826,7 +1826,7 @@ pub fn is_expr_used_or_unified(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n                             ..\n                         },\n                         ..\n-                    }),\n+                    }, _),\n                 ..\n             }),\n             _"}]}