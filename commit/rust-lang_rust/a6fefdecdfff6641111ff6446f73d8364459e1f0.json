{"sha": "a6fefdecdfff6641111ff6446f73d8364459e1f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZmVmZGVjZGZmZjY2NDExMTFmZjY0NDZmNzNkODM2NDQ1OWUxZjA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-31T22:09:00Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-16T21:37:11Z"}, "message": "Add error-format and color-config options to rustdoc", "tree": {"sha": "2d16931f6d7f0cc9d62316d18f615fe6117e5d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d16931f6d7f0cc9d62316d18f615fe6117e5d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6fefdecdfff6641111ff6446f73d8364459e1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6fefdecdfff6641111ff6446f73d8364459e1f0", "html_url": "https://github.com/rust-lang/rust/commit/a6fefdecdfff6641111ff6446f73d8364459e1f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6fefdecdfff6641111ff6446f73d8364459e1f0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "035ec5bbb62c2cef64840389508707da5febeb8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/035ec5bbb62c2cef64840389508707da5febeb8b", "html_url": "https://github.com/rust-lang/rust/commit/035ec5bbb62c2cef64840389508707da5febeb8b"}], "stats": {"total": 101, "additions": 89, "deletions": 12}, "files": [{"sha": "97c4e859327a91d3feefcf65abc87980395292c8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a6fefdecdfff6641111ff6446f73d8364459e1f0/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fefdecdfff6641111ff6446f73d8364459e1f0/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a6fefdecdfff6641111ff6446f73d8364459e1f0", "patch": "@@ -18,6 +18,7 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt, AllArenas};\n use rustc::hir::map as hir_map;\n use rustc::lint;\n+use rustc::session::config::ErrorOutputType;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_resolve as resolve;\n use rustc_metadata::creader::CrateLoader;\n@@ -28,8 +29,9 @@ use syntax::ast::NodeId;\n use syntax::codemap;\n use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n+use syntax::json::JsonEmitter;\n use errors;\n-use errors::emitter::ColorConfig;\n+use errors::emitter::{Emitter, EmitterWriter};\n \n use std::cell::{RefCell, Cell};\n use std::mem;\n@@ -115,7 +117,6 @@ impl DocAccessLevels for AccessLevels<DefId> {\n     }\n }\n \n-\n pub fn run_core(search_paths: SearchPaths,\n                 cfgs: Vec<String>,\n                 externs: config::Externs,\n@@ -126,7 +127,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 crate_name: Option<String>,\n                 force_unstable_if_unmarked: bool,\n                 edition: Edition,\n-                cg: CodegenOptions) -> (clean::Crate, RenderInfo)\n+                cg: CodegenOptions,\n+                error_format: ErrorOutputType) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -138,6 +140,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let warning_lint = lint::builtin::WARNINGS.name_lower();\n \n     let host_triple = TargetTriple::from_triple(config::host_triple());\n+    // plays with error output here!\n     let sessopts = config::Options {\n         maybe_sysroot,\n         search_paths,\n@@ -155,14 +158,42 @@ pub fn run_core(search_paths: SearchPaths,\n             edition,\n             ..config::basic_debugging_options()\n         },\n+        error_format,\n         ..config::basic_options().clone()\n     };\n \n     let codemap = Lrc::new(codemap::CodeMap::new(sessopts.file_path_mapping()));\n-    let diagnostic_handler = errors::Handler::with_tty_emitter(ColorConfig::Auto,\n-                                                               true,\n-                                                               false,\n-                                                               Some(codemap.clone()));\n+    let emitter: Box<dyn Emitter> = match error_format {\n+        ErrorOutputType::HumanReadable(color_config) => Box::new(\n+            EmitterWriter::stderr(\n+                color_config,\n+                Some(codemap.clone()),\n+                false,\n+                sessopts.debugging_opts.teach,\n+            ).ui_testing(sessopts.debugging_opts.ui_testing)\n+        ),\n+        ErrorOutputType::Json(pretty) => Box::new(\n+            JsonEmitter::stderr(\n+                None,\n+                codemap.clone(),\n+                pretty,\n+                sessopts.debugging_opts.approximate_suggestions,\n+            ).ui_testing(sessopts.debugging_opts.ui_testing)\n+        ),\n+        ErrorOutputType::Short(color_config) => Box::new(\n+            EmitterWriter::stderr(color_config, Some(codemap.clone()), true, false)\n+        ),\n+    };\n+\n+    let diagnostic_handler = errors::Handler::with_emitter_and_flags(\n+        emitter,\n+        errors::HandlerFlags {\n+            can_emit_warnings: true,\n+            treat_err_as_bug: false,\n+            external_macro_backtrace: false,\n+            ..Default::default()\n+        },\n+    );\n \n     let mut sess = session::build_session_(\n         sessopts, cpath, diagnostic_handler, codemap,"}, {"sha": "390924c83e1e28699d17b1b57ee36ea14074e549", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a6fefdecdfff6641111ff6446f73d8364459e1f0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6fefdecdfff6641111ff6446f73d8364459e1f0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a6fefdecdfff6641111ff6446f73d8364459e1f0", "patch": "@@ -23,6 +23,7 @@\n #![feature(test)]\n #![feature(vec_remove_item)]\n #![feature(entry_and_modify)]\n+#![feature(dyn_trait)]\n \n extern crate arena;\n extern crate getopts;\n@@ -48,6 +49,8 @@ extern crate tempdir;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n+use errors::ColorConfig;\n+\n use std::collections::{BTreeMap, BTreeSet};\n use std::default::Default;\n use std::env;\n@@ -278,6 +281,21 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                      \"edition to use when compiling rust code (default: 2015)\",\n                      \"EDITION\")\n         }),\n+        unstable(\"color\", |o| {\n+            o.optopt(\"\",\n+                     \"color\",\n+                     \"Configure coloring of output:\n+                                          auto   = colorize, if output goes to a tty (default);\n+                                          always = always colorize output;\n+                                          never  = never colorize output\",\n+                     \"auto|always|never\")\n+        }),\n+        unstable(\"error-format\", |o| {\n+            o.optopt(\"\",\n+                     \"error-format\",\n+                     \"How errors and other messages are produced\",\n+                     \"human|json|short\")\n+        }),\n     ]\n }\n \n@@ -362,9 +380,33 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n     let input = &matches.free[0];\n \n+    let color = match matches.opt_str(\"color\").as_ref().map(|s| &s[..]) {\n+        Some(\"auto\") => ColorConfig::Auto,\n+        Some(\"always\") => ColorConfig::Always,\n+        Some(\"never\") => ColorConfig::Never,\n+        None => ColorConfig::Auto,\n+        Some(arg) => {\n+            print_error(&format!(\"argument for --color must be `auto`, `always` or `never` \\\n+                                  (instead was `{}`)\", arg));\n+            return 1;\n+        }\n+    };\n+    let error_format = match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n+        Some(\"human\") => ErrorOutputType::HumanReadable(color),\n+        Some(\"json\") => ErrorOutputType::Json(false),\n+        Some(\"pretty-json\") => ErrorOutputType::Json(true),\n+        Some(\"short\") => ErrorOutputType::Short(color),\n+        None => ErrorOutputType::HumanReadable(color),\n+        Some(arg) => {\n+            print_error(&format!(\"argument for --error-format must be `human`, `json` or \\\n+                                  `short` (instead was `{}`)\", arg));\n+            return 1;\n+        }\n+    };\n+\n     let mut libs = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        libs.add_path(s, ErrorOutputType::default());\n+        libs.add_path(s, error_format);\n     }\n     let externs = match parse_externs(&matches) {\n         Ok(ex) => ex,\n@@ -464,7 +506,9 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n \n     let output_format = matches.opt_str(\"w\");\n-    let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, move |out| {\n+\n+    let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, error_format,\n+                            move |out| {\n         let Output { krate, passes, renderinfo } = out;\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n@@ -508,13 +552,14 @@ fn acquire_input<R, F>(input: PathBuf,\n                        edition: Edition,\n                        cg: CodegenOptions,\n                        matches: &getopts::Matches,\n+                       error_format: ErrorOutputType,\n                        f: F)\n                        -> Result<R, String>\n where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n-        Some(\"rust\") => Ok(rust_input(input, externs, edition, cg, matches, f)),\n+        Some(\"rust\") => Ok(rust_input(input, externs, edition, cg, matches, error_format, f)),\n         Some(s) => Err(format!(\"unknown input format: {}\", s)),\n-        None => Ok(rust_input(input, externs, edition, cg, matches, f))\n+        None => Ok(rust_input(input, externs, edition, cg, matches, error_format, f))\n     }\n }\n \n@@ -545,6 +590,7 @@ fn rust_input<R, F>(cratefile: PathBuf,\n                     edition: Edition,\n                     cg: CodegenOptions,\n                     matches: &getopts::Matches,\n+                    error_format: ErrorOutputType,\n                     f: F) -> R\n where R: 'static + Send,\n       F: 'static + Send + FnOnce(Output) -> R\n@@ -597,7 +643,7 @@ where R: 'static + Send,\n         let (mut krate, renderinfo) =\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n-                           force_unstable_if_unmarked, edition, cg);\n+                           force_unstable_if_unmarked, edition, cg, error_format);\n \n         info!(\"finished with rustc\");\n "}]}