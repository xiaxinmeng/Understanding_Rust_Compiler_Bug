{"sha": "ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "node_id": "C_kwDOAAsO6NoAKGFiNGZmMmRmZTA5NTVlZGUwNGM0ZGRiNzM3MzMzN2E2MTQxMDgxYjg", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2021-09-27T13:34:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-27T13:34:06Z"}, "message": "Cleanup fix for global initialization (#93)\n\n* Cleanup fix for global initialization\r\n* Remove linker script hack\r\n* Use v0 symbol mangling\r\n* Fix warnings", "tree": {"sha": "542217c58ddc26a5f4d1f8c5387189fa61c2bcab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/542217c58ddc26a5f4d1f8c5387189fa61c2bcab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUchOCRBK7hj4Ov3rIwAATWcIAJRYMBBNWVAEeY5vSW24AwwD\nhDa0Xqgrz3HwnI6VXIj9RJammHXOZDkPhpsGzBX1hzS1nm3imwnMZj1vOmFi1Nxq\nwuEWhZ8LI4HL3Df3fafWKX4lUtOxMsBs9ZiTS9nJUbW/1+Ql7V/l0F5Fij3m9kf0\nxRN/nwlth5ePbVwngsS71hBNxbQgcUqHAIe9CpXmigacPnICoio8Eab8v8EsEgR4\nRfN4Ntcbu0Kt6ni1AUfODnQyn8cU+pl4TJtmndpqwwFtDASmLB9L3EUbakZ0ew5u\nWRKSxceJD1kUEk+SIN2AfCZojZpWDCqi0qf7d//gonnjRj1IniK+TCi2AiUzXrI=\n=mzCk\n-----END PGP SIGNATURE-----\n", "payload": "tree 542217c58ddc26a5f4d1f8c5387189fa61c2bcab\nparent 64c561dc2253463659a8ae93b3d265dda45c6ee9\nauthor antoyo <antoyo@users.noreply.github.com> 1632749646 -0400\ncommitter GitHub <noreply@github.com> 1632749646 -0400\n\nCleanup fix for global initialization (#93)\n\n* Cleanup fix for global initialization\r\n* Remove linker script hack\r\n* Use v0 symbol mangling\r\n* Fix warnings"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "html_url": "https://github.com/rust-lang/rust/commit/ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab4ff2dfe0955ede04c4ddb7373337a6141081b8/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c561dc2253463659a8ae93b3d265dda45c6ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c561dc2253463659a8ae93b3d265dda45c6ee9", "html_url": "https://github.com/rust-lang/rust/commit/64c561dc2253463659a8ae93b3d265dda45c6ee9"}], "stats": {"total": 20, "additions": 5, "deletions": 15}, "files": [{"sha": "87df2f2102bcd42dd3ede437a72a30552ff147e3", "filename": "config.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab4ff2dfe0955ede04c4ddb7373337a6141081b8/config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ab4ff2dfe0955ede04c4ddb7373337a6141081b8/config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.sh?ref=ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "patch": "@@ -38,7 +38,7 @@ if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n    fi\n fi\n \n-export RUSTFLAGS=\"$linker -Cpanic=abort -Cdebuginfo=2 -Clto=off -Zpanic-abort-tests -Zcodegen-backend=$(pwd)/target/${CHANNEL:-debug}/librustc_codegen_gcc.$dylib_ext --sysroot $(pwd)/build_sysroot/sysroot\"\n+export RUSTFLAGS=\"$linker -Cpanic=abort -Zsymbol-mangling-version=v0 -Cdebuginfo=2 -Clto=off -Zpanic-abort-tests -Zcodegen-backend=$(pwd)/target/${CHANNEL:-debug}/librustc_codegen_gcc.$dylib_ext --sysroot $(pwd)/build_sysroot/sysroot\"\n \n # FIXME(antoyo): remove once the atomic shim is gone\n if [[ `uname` == 'Darwin' ]]; then"}, {"sha": "709fa2a297bb889b2f40e2acb56243a7c6dd6603", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab4ff2dfe0955ede04c4ddb7373337a6141081b8/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab4ff2dfe0955ede04c4ddb7373337a6141081b8/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "patch": "@@ -43,10 +43,8 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         // TODO(antoyo): handle non-null-terminated strings.\n         let string = self.context.new_string_literal(&*string);\n         let sym = self.generate_local_symbol_name(\"str\");\n-        // NOTE: TLS is always off for a string litteral.\n-        // NOTE: string litterals do not have a link section.\n         let global = self.declare_private_global(&sym, self.val_ty(string));\n-        global.global_set_initializer_value(string); // TODO: only set if not imported?\n+        global.global_set_initializer_value(string);\n         global\n         // TODO(antoyo): set linkage.\n     }"}, {"sha": "f3c02e2634ff61cca5f02d6df67d79df7eec3b35", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab4ff2dfe0955ede04c4ddb7373337a6141081b8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab4ff2dfe0955ede04c4ddb7373337a6141081b8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "patch": "@@ -63,7 +63,7 @@ use rustc_errors::{ErrorReported, Handler};\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{CrateType, Lto, OptLevel, OutputFilenames};\n+use rustc_session::config::{Lto, OptLevel, OutputFilenames};\n use rustc_session::Session;\n use rustc_span::Symbol;\n use rustc_span::fatal_error::FatalError;\n@@ -106,16 +106,8 @@ impl CodegenBackend for GccCodegenBackend {\n         Ok((codegen_results, work_products))\n     }\n \n-    fn link(&self, sess: &Session, mut codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorReported> {\n+    fn link(&self, sess: &Session, codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorReported> {\n         use rustc_codegen_ssa::back::link::link_binary;\n-        if let Some(symbols) = codegen_results.crate_info.exported_symbols.get_mut(&CrateType::Dylib) {\n-            // TODO:(antoyo): remove when global initializer work without calling a function at runtime.\n-            // HACK: since this codegen add some symbols (e.g. __gccGlobalCrateInit) and the UI\n-            // tests load libstd.so as a dynamic library, and rustc use a version-script to specify\n-            // the symbols visibility, we add * to export all symbols.\n-            // It seems other symbols from libstd/libcore are causing some issues here as well.\n-            symbols.push(\"*\".to_string());\n-        }\n \n         link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n             sess,"}, {"sha": "92cbdbb7c00dbd231ca5616f98acc74e4df3c4d0", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab4ff2dfe0955ede04c4ddb7373337a6141081b8/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ab4ff2dfe0955ede04c4ddb7373337a6141081b8/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=ab4ff2dfe0955ede04c4ddb7373337a6141081b8", "patch": "@@ -171,7 +171,7 @@ git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs\n git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs\n rm src/test/ui/llvm-asm/llvm-asm-in-out-operand.rs || true # TODO(antoyo): Enable back this test if I ever implement the llvm_asm! macro.\n \n-RUSTC_ARGS=\"-Zpanic-abort-tests -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n+RUSTC_ARGS=\"-Zpanic-abort-tests -Zsymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n \n echo \"[TEST] rustc test suite\"\n COMPILETEST_FORCE_STAGE0=1 ./x.py test --run always --stage 0 src/test/ui/ --rustc-args \"$RUSTC_ARGS\""}]}