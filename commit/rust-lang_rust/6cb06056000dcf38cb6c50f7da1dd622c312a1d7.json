{"sha": "6cb06056000dcf38cb6c50f7da1dd622c312a1d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYjA2MDU2MDAwZGNmMzhjYjZjNTBmN2RhMWRkNjIyYzMxMmExZDc=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2019-03-18T11:31:49Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2019-03-18T12:39:11Z"}, "message": "Cargo fmt", "tree": {"sha": "30468b13265981d464570a127e8474e6065f0fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30468b13265981d464570a127e8474e6065f0fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cb06056000dcf38cb6c50f7da1dd622c312a1d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb06056000dcf38cb6c50f7da1dd622c312a1d7", "html_url": "https://github.com/rust-lang/rust/commit/6cb06056000dcf38cb6c50f7da1dd622c312a1d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cb06056000dcf38cb6c50f7da1dd622c312a1d7/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "664391c5f862c905a0753f7fe6de588981f10482", "url": "https://api.github.com/repos/rust-lang/rust/commits/664391c5f862c905a0753f7fe6de588981f10482", "html_url": "https://github.com/rust-lang/rust/commit/664391c5f862c905a0753f7fe6de588981f10482"}], "stats": {"total": 118, "additions": 58, "deletions": 60}, "files": [{"sha": "b4e4d46a33a6f9ab9bed59e6cd8e8a246b9e8ef6", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/6cb06056000dcf38cb6c50f7da1dd622c312a1d7/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb06056000dcf38cb6c50f7da1dd622c312a1d7/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=6cb06056000dcf38cb6c50f7da1dd622c312a1d7", "patch": "@@ -210,27 +210,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n         if let Some(items) = &attr.meta_item_list() {\n             if let Some(ident) = attr.ident_str() {\n                 match ident {\n-                \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                    check_clippy_lint_names(cx, items);\n-                },\n-                _ => {},\n-            }\n+                    \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n+                        check_clippy_lint_names(cx, items);\n+                    },\n+                    _ => {},\n+                }\n                 if items.is_empty() || !attr.check_name(\"deprecated\") {\n-                return;\n-            }\n-            for item in items {\n-                if_chain! {\n+                    return;\n+                }\n+                for item in items {\n+                    if_chain! {\n                         if let NestedMetaItem::MetaItem(mi) = &item;\n-                    if let MetaItemKind::NameValue(lit) = &mi.node;\n+                        if let MetaItemKind::NameValue(lit) = &mi.node;\n                         if mi.check_name(\"since\");\n-                    then {\n+                        then {\n                             check_semver(cx, item.span(), lit);\n+                        }\n                     }\n                 }\n             }\n         }\n     }\n-    }\n \n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if is_relevant_item(cx.tcx, item) {\n@@ -244,54 +244,54 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                     if let Some(lint_list) = &attr.meta_item_list() {\n                         if let Some(ident) = attr.ident_str() {\n                             match ident {\n-                            \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                                // whitelist `unused_imports` and `deprecated` for `use` items\n-                                // and `unused_imports` for `extern crate` items with `macro_use`\n-                                for lint in lint_list {\n-                                    match item.node {\n-                                        ItemKind::Use(..) => {\n-                                            if is_word(lint, \"unused_imports\") || is_word(lint, \"deprecated\") {\n-                                                return;\n-                                            }\n-                                        },\n-                                        ItemKind::ExternCrate(..) => {\n-                                            if is_word(lint, \"unused_imports\") && skip_unused_imports {\n-                                                return;\n-                                            }\n-                                            if is_word(lint, \"unused_extern_crates\") {\n-                                                return;\n-                                            }\n-                                        },\n-                                        _ => {},\n-                                    }\n-                                }\n-                                let line_span = last_line_of_span(cx, attr.span);\n-\n-                                if let Some(mut sugg) = snippet_opt(cx, line_span) {\n-                                    if sugg.contains(\"#[\") {\n-                                        span_lint_and_then(\n-                                            cx,\n-                                            USELESS_ATTRIBUTE,\n-                                            line_span,\n-                                            \"useless lint attribute\",\n-                                            |db| {\n-                                                sugg = sugg.replacen(\"#[\", \"#![\", 1);\n-                                                db.span_suggestion(\n-                                                    line_span,\n-                                                    \"if you just forgot a `!`, use\",\n-                                                    sugg,\n-                                                    Applicability::MachineApplicable,\n-                                                );\n+                                \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n+                                    // whitelist `unused_imports` and `deprecated` for `use` items\n+                                    // and `unused_imports` for `extern crate` items with `macro_use`\n+                                    for lint in lint_list {\n+                                        match item.node {\n+                                            ItemKind::Use(..) => {\n+                                                if is_word(lint, \"unused_imports\") || is_word(lint, \"deprecated\") {\n+                                                    return;\n+                                                }\n                                             },\n-                                        );\n+                                            ItemKind::ExternCrate(..) => {\n+                                                if is_word(lint, \"unused_imports\") && skip_unused_imports {\n+                                                    return;\n+                                                }\n+                                                if is_word(lint, \"unused_extern_crates\") {\n+                                                    return;\n+                                                }\n+                                            },\n+                                            _ => {},\n+                                        }\n                                     }\n-                                }\n-                            },\n-                            _ => {},\n+                                    let line_span = last_line_of_span(cx, attr.span);\n+\n+                                    if let Some(mut sugg) = snippet_opt(cx, line_span) {\n+                                        if sugg.contains(\"#[\") {\n+                                            span_lint_and_then(\n+                                                cx,\n+                                                USELESS_ATTRIBUTE,\n+                                                line_span,\n+                                                \"useless lint attribute\",\n+                                                |db| {\n+                                                    sugg = sugg.replacen(\"#[\", \"#![\", 1);\n+                                                    db.span_suggestion(\n+                                                        line_span,\n+                                                        \"if you just forgot a `!`, use\",\n+                                                        sugg,\n+                                                        Applicability::MachineApplicable,\n+                                                    );\n+                                                },\n+                                            );\n+                                        }\n+                                    }\n+                                },\n+                                _ => {},\n+                            }\n                         }\n                     }\n                 }\n-                }\n             },\n             _ => {},\n         }\n@@ -527,7 +527,7 @@ impl EarlyLintPass for CfgAttrPass {\n             if feature_item.check_name(\"rustfmt\");\n             // check for `rustfmt_skip` and `rustfmt::skip`\n             if let Some(skip_item) = &items[1].meta_item();\n-            if skip_item.check_name(\"rustfmt_skip\") || \n+            if skip_item.check_name(\"rustfmt_skip\") ||\n                 skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == \"skip\";\n             // Only lint outer attributes, because custom inner attributes are unstable\n             // Tracking issue: https://github.com/rust-lang/rust/issues/54726"}, {"sha": "2c96d9a8b5aa58fc9e6986516268e752070bf4e6", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb06056000dcf38cb6c50f7da1dd622c312a1d7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb06056000dcf38cb6c50f7da1dd622c312a1d7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=6cb06056000dcf38cb6c50f7da1dd622c312a1d7", "patch": "@@ -11,9 +11,7 @@ use syntax::{ast, source_map};\n use toml;\n \n /// Gets the configuration file from arguments.\n-pub fn file_from_args(\n-    args: &[ast::NestedMetaItem],\n-) -> Result<Option<path::PathBuf>, (&'static str, source_map::Span)> {\n+pub fn file_from_args(args: &[ast::NestedMetaItem]) -> Result<Option<path::PathBuf>, (&'static str, source_map::Span)> {\n     for arg in args.iter().filter_map(syntax::ast::NestedMetaItem::meta_item) {\n         if arg.check_name(\"conf_file\") {\n             return match arg.node {"}, {"sha": "2cf638b939ccc5bc77cc8a913f15dcc690ff3987", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb06056000dcf38cb6c50f7da1dd622c312a1d7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb06056000dcf38cb6c50f7da1dd622c312a1d7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=6cb06056000dcf38cb6c50f7da1dd622c312a1d7", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n                 return self.print_def_path(def.did, substs);\n             }\n         }\n-        \n+\n         // This shouldn't ever be needed, but just in case:\n         Ok(vec![match trait_ref {\n             Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)).as_str(),"}]}