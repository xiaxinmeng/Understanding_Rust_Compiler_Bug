{"sha": "d75cacc601891eb89318b3c483b3fcfb0535f0f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NWNhY2M2MDE4OTFlYjg5MzE4YjNjNDgzYjNmY2ZiMDUzNWYwZjg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-06T23:26:22Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-07T14:38:04Z"}, "message": "Use stdx::always", "tree": {"sha": "9aecc5905eaf47a04e90819aa24c23766a100920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aecc5905eaf47a04e90819aa24c23766a100920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75cacc601891eb89318b3c483b3fcfb0535f0f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75cacc601891eb89318b3c483b3fcfb0535f0f8", "html_url": "https://github.com/rust-lang/rust/commit/d75cacc601891eb89318b3c483b3fcfb0535f0f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75cacc601891eb89318b3c483b3fcfb0535f0f8/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e292fab1a5c5f3c97ace967268b6197a687ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e292fab1a5c5f3c97ace967268b6197a687ae1", "html_url": "https://github.com/rust-lang/rust/commit/61e292fab1a5c5f3c97ace967268b6197a687ae1"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "c1bdc51b036e08227125cf501b658c5777c6a07d", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d75cacc601891eb89318b3c483b3fcfb0535f0f8/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75cacc601891eb89318b3c483b3fcfb0535f0f8/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=d75cacc601891eb89318b3c483b3fcfb0535f0f8", "patch": "@@ -79,7 +79,7 @@ fn on_char_typed_inner(file: &SourceFile, offset: TextSize, char_typed: char) ->\n /// Inserts a closing `}` when the user types an opening `{`, wrapping an existing expression in a\n /// block.\n fn on_opening_brace_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n-    assert_eq!(file.syntax().text().char_at(offset), Some('{'));\n+    stdx::always!(file.syntax().text().char_at(offset) == Some('{'));\n     let brace_token = file.syntax().token_at_offset(offset).right_biased()?;\n     let block = ast::BlockExpr::cast(brace_token.parent()?)?;\n \n@@ -90,7 +90,7 @@ fn on_opening_brace_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdi\n             Some(ast::Stmt::ExprStmt(it)) => {\n                 // Use the expression span to place `}` before the `;`\n                 it.expr()?.syntax().text_range().end()\n-            },\n+            }\n             None => block.tail_expr()?.syntax().text_range().end(),\n             _ => return None,\n         }\n@@ -103,7 +103,7 @@ fn on_opening_brace_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdi\n /// this works when adding `let =`.\n // FIXME: use a snippet completion instead of this hack here.\n fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n-    assert_eq!(file.syntax().text().char_at(offset), Some('='));\n+    stdx::always!(file.syntax().text().char_at(offset) == Some('='));\n     let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n     if let_stmt.semicolon_token().is_some() {\n         return None;\n@@ -125,7 +125,7 @@ fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n \n /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n fn on_dot_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n-    assert_eq!(file.syntax().text().char_at(offset), Some('.'));\n+    stdx::always!(file.syntax().text().char_at(offset) == Some('.'));\n     let whitespace =\n         file.syntax().token_at_offset(offset).left_biased().and_then(ast::Whitespace::cast)?;\n \n@@ -154,7 +154,7 @@ fn on_dot_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n /// Adds a space after an arrow when `fn foo() { ... }` is turned into `fn foo() -> { ... }`\n fn on_arrow_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     let file_text = file.syntax().text();\n-    assert_eq!(file_text.char_at(offset), Some('>'));\n+    stdx::always!(file_text.char_at(offset) == Some('>'));\n     let after_arrow = offset + TextSize::of('>');\n     if file_text.char_at(after_arrow) != Some('{') {\n         return None;"}]}