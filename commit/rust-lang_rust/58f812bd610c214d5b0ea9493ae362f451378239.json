{"sha": "58f812bd610c214d5b0ea9493ae362f451378239", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZjgxMmJkNjEwYzIxNGQ1YjBlYTk0OTNhZTM2MmY0NTEzNzgyMzk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-18T02:02:57Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-20T18:12:43Z"}, "message": "Use `p.token` instead of `p.look_ahead()`", "tree": {"sha": "f8848885155c5fba96bd92f99848c9ef7aefeb9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8848885155c5fba96bd92f99848c9ef7aefeb9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58f812bd610c214d5b0ea9493ae362f451378239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58f812bd610c214d5b0ea9493ae362f451378239", "html_url": "https://github.com/rust-lang/rust/commit/58f812bd610c214d5b0ea9493ae362f451378239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58f812bd610c214d5b0ea9493ae362f451378239/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db9d3769b4f26b45b390d350ed3319433cd5e42c", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9d3769b4f26b45b390d350ed3319433cd5e42c", "html_url": "https://github.com/rust-lang/rust/commit/db9d3769b4f26b45b390d350ed3319433cd5e42c"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "119536da0502464a5e4a20d5c4f9990e993d2e6c", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f812bd610c214d5b0ea9493ae362f451378239/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f812bd610c214d5b0ea9493ae362f451378239/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=58f812bd610c214d5b0ea9493ae362f451378239", "patch": "@@ -298,7 +298,7 @@ fn err_duplicate_option<'a>(p: &mut Parser<'a>, symbol: Symbol, span: Span) {\n         String::new(),\n         Applicability::MachineApplicable,\n     );\n-    if p.look_ahead(0, |t| t == &token::Comma) {\n+    if p.token.kind == token::Comma {\n         err.tool_only_span_suggestion(\n             p.token.span,\n             \"remove this comma\","}]}