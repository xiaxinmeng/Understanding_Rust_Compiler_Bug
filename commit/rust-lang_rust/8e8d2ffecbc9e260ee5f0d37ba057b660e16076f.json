{"sha": "8e8d2ffecbc9e260ee5f0d37ba057b660e16076f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOGQyZmZlY2JjOWUyNjBlZTVmMGQzN2JhMDU3YjY2MGUxNjA3NmY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-06-26T14:36:59Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-06-29T14:10:20Z"}, "message": "(Partially) fix handling of type params depending on type params\n\nIf the first type parameter gets inferred, that's still not handled correctly;\nit'll require some more refactoring: E.g. if we have `Thing<T, F=fn() -> T>` and\nthen instantiate `Thing<_>`, that gets turned into `Thing<_, fn() -> _>` before\nthe `_` is instantiated into a type variable -- so afterwards, we have two type\nvariables without any connection to each other.", "tree": {"sha": "0a7a4a79b56a0cfce21421537d5dbbf55ec7c28c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a7a4a79b56a0cfce21421537d5dbbf55ec7c28c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f", "html_url": "https://github.com/rust-lang/rust/commit/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117cf0b85bc8022a939fe43054f64aaa35117dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/117cf0b85bc8022a939fe43054f64aaa35117dd9", "html_url": "https://github.com/rust-lang/rust/commit/117cf0b85bc8022a939fe43054f64aaa35117dd9"}], "stats": {"total": 119, "additions": 98, "deletions": 21}, "files": [{"sha": "e86077dd6a28551c5b8b641c0fbfcd69976bbe15", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=8e8d2ffecbc9e260ee5f0d37ba057b660e16076f", "patch": "@@ -543,7 +543,7 @@ impl_froms!(Adt: Struct, Union, Enum);\n impl Adt {\n     pub fn has_non_default_type_params(self, db: &dyn HirDatabase) -> bool {\n         let subst = db.generic_defaults(self.into());\n-        subst.iter().any(|ty| ty == &Ty::Unknown)\n+        subst.iter().any(|ty| &ty.value == &Ty::Unknown)\n     }\n \n     /// Turns this ADT into a type. Any type parameters of the ADT will be\n@@ -775,7 +775,7 @@ pub struct TypeAlias {\n impl TypeAlias {\n     pub fn has_non_default_type_params(self, db: &dyn HirDatabase) -> bool {\n         let subst = db.generic_defaults(self.id.into());\n-        subst.iter().any(|ty| ty == &Ty::Unknown)\n+        subst.iter().any(|ty| &ty.value == &Ty::Unknown)\n     }\n \n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n@@ -1035,7 +1035,10 @@ impl TypeParam {\n         let local_idx = hir_ty::param_idx(db, self.id)?;\n         let resolver = self.id.parent.resolver(db.upcast());\n         let environment = TraitEnvironment::lower(db, &resolver);\n-        params.get(local_idx).cloned().map(|ty| Type {\n+        let ty = params.get(local_idx)?.clone();\n+        let subst = Substs::type_params(db, self.id.parent);\n+        let ty = ty.subst(&subst.prefix(local_idx));\n+        Some(Type {\n             krate: self.id.parent.module(db.upcast()).krate,\n             ty: InEnvironment { value: ty, environment },\n         })"}, {"sha": "cad55327397a8f3a4b70187e3baa68bdbdcadd36", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=8e8d2ffecbc9e260ee5f0d37ba057b660e16076f", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     method_resolution::CrateImplDefs,\n     traits::{chalk, AssocTyValue, Impl},\n     Binders, CallableDef, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n-    ReturnTypeImplTraits, Substs, TraitRef, Ty, TyDefId, TypeCtor, ValueTyDefId,\n+    ReturnTypeImplTraits, TraitRef, Ty, TyDefId, TypeCtor, ValueTyDefId,\n };\n use hir_expand::name::Name;\n \n@@ -65,7 +65,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn generic_predicates(&self, def: GenericDefId) -> Arc<[Binders<GenericPredicate>]>;\n \n     #[salsa::invoke(crate::lower::generic_defaults_query)]\n-    fn generic_defaults(&self, def: GenericDefId) -> Substs;\n+    fn generic_defaults(&self, def: GenericDefId) -> Arc<[Binders<Ty>]>;\n \n     #[salsa::invoke(crate::method_resolution::CrateImplDefs::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: CrateId) -> Arc<CrateImplDefs>;"}, {"sha": "23cea1a2ad7c516ebfc1d1d0cf06780fe01233b0", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=8e8d2ffecbc9e260ee5f0d37ba057b660e16076f", "patch": "@@ -308,7 +308,6 @@ impl HirDisplay for ApplicationTy {\n                 }\n \n                 if self.parameters.len() > 0 {\n-                    let mut non_default_parameters = Vec::with_capacity(self.parameters.len());\n                     let parameters_to_write =\n                         if f.display_target.is_source_code() || f.omit_verbose_types() {\n                             match self\n@@ -319,20 +318,23 @@ impl HirDisplay for ApplicationTy {\n                             {\n                                 None => self.parameters.0.as_ref(),\n                                 Some(default_parameters) => {\n+                                    let mut default_from = 0;\n                                     for (i, parameter) in self.parameters.iter().enumerate() {\n                                         match (parameter, default_parameters.get(i)) {\n                                             (&Ty::Unknown, _) | (_, None) => {\n-                                                non_default_parameters.push(parameter.clone())\n+                                                default_from = i + 1;\n                                             }\n-                                            (_, Some(default_parameter))\n-                                                if parameter != default_parameter =>\n-                                            {\n-                                                non_default_parameters.push(parameter.clone())\n+                                            (_, Some(default_parameter)) => {\n+                                                let actual_default = default_parameter\n+                                                    .clone()\n+                                                    .subst(&self.parameters.prefix(i));\n+                                                if parameter != &actual_default {\n+                                                    default_from = i + 1;\n+                                                }\n                                             }\n-                                            _ => (),\n                                         }\n                                     }\n-                                    &non_default_parameters\n+                                    &self.parameters.0[0..default_from]\n                                 }\n                             }\n                         } else {"}, {"sha": "3dc154e92b1282d21a4b0cfdca00eb99568d0bc7", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=8e8d2ffecbc9e260ee5f0d37ba057b660e16076f", "patch": "@@ -578,11 +578,13 @@ fn substs_from_path_segment(\n     // (i.e. defaults aren't used).\n     if !infer_args || had_explicit_args {\n         if let Some(def_generic) = def_generic {\n-            let default_substs = ctx.db.generic_defaults(def_generic);\n-            assert_eq!(total_len, default_substs.len());\n+            let defaults = ctx.db.generic_defaults(def_generic);\n+            assert_eq!(total_len, defaults.len());\n \n-            for default_ty in default_substs.iter().skip(substs.len()) {\n-                substs.push(default_ty.clone());\n+            for default_ty in defaults.iter().skip(substs.len()) {\n+                // each default can depend on the previous parameters\n+                let substs_so_far = Substs(substs.clone().into());\n+                substs.push(default_ty.clone().subst(&substs_so_far));\n             }\n         }\n     }\n@@ -945,17 +947,42 @@ pub(crate) fn generic_predicates_query(\n }\n \n /// Resolve the default type params from generics\n-pub(crate) fn generic_defaults_query(db: &dyn HirDatabase, def: GenericDefId) -> Substs {\n+pub(crate) fn generic_defaults_query(\n+    db: &dyn HirDatabase,\n+    def: GenericDefId,\n+) -> Arc<[Binders<Ty>]> {\n     let resolver = def.resolver(db.upcast());\n-    let ctx = TyLoweringContext::new(db, &resolver);\n+    let ctx =\n+        TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     let generic_params = generics(db.upcast(), def);\n \n     let defaults = generic_params\n         .iter()\n-        .map(|(_idx, p)| p.default.as_ref().map_or(Ty::Unknown, |t| Ty::from_hir(&ctx, t)))\n+        .enumerate()\n+        .map(|(idx, (_, p))| {\n+            let mut ty = p.default.as_ref().map_or(Ty::Unknown, |t| Ty::from_hir(&ctx, t));\n+\n+            // Each default can only refer to previous parameters.\n+            ty.walk_mut_binders(\n+                &mut |ty, binders| match ty {\n+                    Ty::Bound(BoundVar { debruijn, index }) if *debruijn == binders => {\n+                        if *index >= idx {\n+                            // type variable default referring to parameter coming\n+                            // after it. This is forbidden (FIXME: report\n+                            // diagnostic)\n+                            *ty = Ty::Unknown;\n+                        }\n+                    }\n+                    _ => {}\n+                },\n+                DebruijnIndex::INNERMOST,\n+            );\n+\n+            Binders::new(idx, ty)\n+        })\n         .collect();\n \n-    Substs(defaults)\n+    defaults\n }\n \n fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {"}, {"sha": "5e3f2bd3c8e12b68249586ef6907057681a58482", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8d2ffecbc9e260ee5f0d37ba057b660e16076f/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=8e8d2ffecbc9e260ee5f0d37ba057b660e16076f", "patch": "@@ -2152,3 +2152,48 @@ fn test() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn generic_default_depending_on_other_type_arg() {\n+    assert_snapshot!(\n+        infer(r#\"\n+struct Thing<T = u128, F = fn() -> T> { t: T }\n+\n+fn test(t1: Thing<u32>, t2: Thing) {\n+    t1;\n+    t2;\n+    Thing::<_> { t: 1u32 };\n+}\n+\"#),\n+        // FIXME: the {unknown} is a bug\n+        @r###\"\n+    56..58 't1': Thing<u32, fn() -> u32>\n+    72..74 't2': Thing<u128, fn() -> u128>\n+    83..130 '{     ...2 }; }': ()\n+    89..91 't1': Thing<u32, fn() -> u32>\n+    97..99 't2': Thing<u128, fn() -> u128>\n+    105..127 'Thing:...1u32 }': Thing<u32, fn() -> {unknown}>\n+    121..125 '1u32': u32\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn generic_default_depending_on_other_type_arg_forward() {\n+    assert_snapshot!(\n+        infer(r#\"\n+struct Thing<F = fn() -> T, T = u128> { t: T }\n+\n+fn test(t1: Thing) {\n+    t1;\n+}\n+\"#),\n+        // the {unknown} here is intentional, as defaults are not allowed to\n+        // refer to type parameters coming later\n+        @r###\"\n+    56..58 't1': Thing<fn() -> {unknown}, u128>\n+    67..78 '{     t1; }': ()\n+    73..75 't1': Thing<fn() -> {unknown}, u128>\n+    \"###\n+    );\n+}"}]}