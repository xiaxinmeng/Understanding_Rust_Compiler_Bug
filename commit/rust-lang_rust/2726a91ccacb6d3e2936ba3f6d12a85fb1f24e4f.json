{"sha": "2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MjZhOTFjY2FjYjZkM2UyOTM2YmEzZjZkMTJhODVmYjFmMjRlNGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-25T11:48:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-02T08:21:00Z"}, "message": "cache tag for vtable; fn_alloc's don't have a stack nor tag", "tree": {"sha": "7b2ec6ed03c66a4cd76ff7aa0481677a4f02cfb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b2ec6ed03c66a4cd76ff7aa0481677a4f02cfb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f", "html_url": "https://github.com/rust-lang/rust/commit/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "538e17a3fdb517e0cd63f7c16d3292e7d710f7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/538e17a3fdb517e0cd63f7c16d3292e7d710f7c7", "html_url": "https://github.com/rust-lang/rust/commit/538e17a3fdb517e0cd63f7c16d3292e7d710f7c7"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "f1e23655741fc2ae80394720f59190d5fef29e8e", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                             def_id,\n                             substs,\n                         ).ok_or_else(|| InterpError::TooGeneric.into());\n-                        let fn_ptr = self.memory.create_fn_alloc(instance?).with_default_tag();\n+                        let fn_ptr = self.memory.create_fn_alloc(instance?);\n                         self.write_scalar(Scalar::Ptr(fn_ptr.into()), dest)?;\n                     }\n                     _ => bug!(\"reify fn pointer on {:?}\", src.layout.ty),\n@@ -115,7 +115,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                             substs,\n                             ty::ClosureKind::FnOnce,\n                         );\n-                        let fn_ptr = self.memory.create_fn_alloc(instance).with_default_tag();\n+                        let fn_ptr = self.memory.create_fn_alloc(instance);\n                         let val = Immediate::Scalar(Scalar::Ptr(fn_ptr.into()).into());\n                         self.write_immediate(val, dest)?;\n                     }"}, {"sha": "1ed04c013eee3d476b956aed2e3487b3fedbf61a", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f", "patch": "@@ -15,7 +15,7 @@ use rustc::ty::query::TyCtxtAt;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::mir::interpret::{\n     ErrorHandled,\n-    GlobalId, Scalar, FrameInfo, AllocId,\n+    GlobalId, Scalar, Pointer, FrameInfo, AllocId,\n     EvalResult, InterpError,\n     truncate, sign_extend,\n };\n@@ -43,7 +43,10 @@ pub struct InterpretCx<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>> {\n     pub(crate) stack: Vec<Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>>,\n \n     /// A cache for deduplicating vtables\n-    pub(super) vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), AllocId>,\n+    pub(super) vtables: FxHashMap<\n+            (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>),\n+            Pointer<M::PointerTag>\n+        >,\n }\n \n /// A stack frame."}, {"sha": "3e145975774bc5837e4e19399d0ca6a141283cbb", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f", "patch": "@@ -108,8 +108,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         }\n     }\n \n-    pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> Pointer {\n-        Pointer::from(self.tcx.alloc_map.lock().create_fn_alloc(instance))\n+    pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> Pointer<M::PointerTag> {\n+        // Default tag is okay because anyway you cannot access memory with this.\n+        Pointer::from(self.tcx.alloc_map.lock().create_fn_alloc(instance)).with_default_tag()\n     }\n \n     pub fn allocate_static_bytes(&mut self, bytes: &[u8]) -> Pointer {"}, {"sha": "208bba60bf2f20c89b41fb5f5290761038d1d5dc", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=2726a91ccacb6d3e2936ba3f6d12a85fb1f24e4f", "patch": "@@ -25,7 +25,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n             // always use the same vtable for the same (Type, Trait) combination.\n             // That's not what happens in rustc, but emulating per-crate deduplication\n             // does not sound like it actually makes anything any better.\n-            return Ok(Pointer::from(vtable).with_default_tag());\n+            return Ok(vtable);\n         }\n \n         let methods = if let Some(poly_trait_ref) = poly_trait_ref {\n@@ -56,7 +56,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         let tcx = &*self.tcx;\n \n         let drop = crate::monomorphize::resolve_drop_in_place(*tcx, ty);\n-        let drop = self.memory.create_fn_alloc(drop).with_default_tag();\n+        let drop = self.memory.create_fn_alloc(drop);\n         // no need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by\n         // multiples of `ptr_align`, which means that it will stay aligned to `ptr_align`.\n@@ -83,7 +83,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                     def_id,\n                     substs,\n                 ).ok_or_else(|| InterpError::TooGeneric)?;\n-                let fn_ptr = self.memory.create_fn_alloc(instance).with_default_tag();\n+                let fn_ptr = self.memory.create_fn_alloc(instance);\n                 let method_ptr = vtable.offset(ptr_size * (3 + i as u64), self)?;\n                 self.memory\n                     .get_mut(method_ptr.alloc_id)?\n@@ -92,7 +92,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         }\n \n         self.memory.mark_immutable(vtable.alloc_id)?;\n-        assert!(self.vtables.insert((ty, poly_trait_ref), vtable.alloc_id).is_none());\n+        assert!(self.vtables.insert((ty, poly_trait_ref), vtable).is_none());\n \n         Ok(vtable)\n     }"}]}