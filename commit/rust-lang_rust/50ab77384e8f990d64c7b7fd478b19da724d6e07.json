{"sha": "50ab77384e8f990d64c7b7fd478b19da724d6e07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYWI3NzM4NGU4Zjk5MGQ2NGM3YjdmZDQ3OGIxOWRhNzI0ZDZlMDc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-30T16:13:14Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-30T16:13:14Z"}, "message": "infer arr len from pattern", "tree": {"sha": "f77a343d7684b1f8be2527267edb63291471b01d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f77a343d7684b1f8be2527267edb63291471b01d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ab77384e8f990d64c7b7fd478b19da724d6e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ab77384e8f990d64c7b7fd478b19da724d6e07", "html_url": "https://github.com/rust-lang/rust/commit/50ab77384e8f990d64c7b7fd478b19da724d6e07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ab77384e8f990d64c7b7fd478b19da724d6e07/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8926bb497d9b127eb318aea5aed0e745d8381591", "url": "https://api.github.com/repos/rust-lang/rust/commits/8926bb497d9b127eb318aea5aed0e745d8381591", "html_url": "https://github.com/rust-lang/rust/commit/8926bb497d9b127eb318aea5aed0e745d8381591"}], "stats": {"total": 111, "additions": 90, "deletions": 21}, "files": [{"sha": "b3e8569f372939a6559464cfbd452f3ebff9cb37", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=50ab77384e8f990d64c7b7fd478b19da724d6e07", "patch": "@@ -1355,16 +1355,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let err = self.tcx.types.err;\n         let expected = self.structurally_resolved_type(span, expected);\n-        let (inner_ty, slice_ty, expected) = match expected.kind {\n+        let (element_ty, slice_ty, expected) = match expected.kind {\n             // An array, so we might have something like `let [a, b, c] = [0, 1, 2];`.\n-            ty::Array(inner_ty, len) => {\n+            ty::Array(element_ty, len) => {\n                 let min = before.len() as u64 + after.len() as u64;\n-                let slice_ty = self\n-                    .check_array_pat_len(span, slice, len, min)\n-                    .map_or(err, |len| self.tcx.mk_array(inner_ty, len));\n-                (inner_ty, slice_ty, expected)\n+                let (slice_ty, expected) =\n+                    self.check_array_pat_len(span, element_ty, expected, slice, len, min);\n+                (element_ty, slice_ty, expected)\n             }\n-            ty::Slice(inner_ty) => (inner_ty, expected, expected),\n+            ty::Slice(element_ty) => (element_ty, expected, expected),\n             // The expected type must be an array or slice, but was neither, so error.\n             _ => {\n                 if !expected.references_error() {\n@@ -1376,30 +1375,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Type check all the patterns before `slice`.\n         for elt in before {\n-            self.check_pat(&elt, inner_ty, def_bm, ti);\n+            self.check_pat(&elt, element_ty, def_bm, ti);\n         }\n         // Type check the `slice`, if present, against its expected type.\n         if let Some(slice) = slice {\n             self.check_pat(&slice, slice_ty, def_bm, ti);\n         }\n         // Type check the elements after `slice`, if present.\n         for elt in after {\n-            self.check_pat(&elt, inner_ty, def_bm, ti);\n+            self.check_pat(&elt, element_ty, def_bm, ti);\n         }\n         expected\n     }\n \n     /// Type check the length of an array pattern.\n     ///\n-    /// Return the length of the variable length pattern,\n-    /// if it exists and there are no errors.\n+    /// Returns both the type of the variable length pattern\n+    /// (or `tcx.err` in case there is none),\n+    /// and the potentially inferred array type.\n     fn check_array_pat_len(\n         &self,\n         span: Span,\n+        element_ty: Ty<'tcx>,\n+        arr_ty: Ty<'tcx>,\n         slice: Option<&'tcx Pat<'tcx>>,\n         len: &ty::Const<'tcx>,\n         min_len: u64,\n-    ) -> Option<u64> {\n+    ) -> (Ty<'tcx>, Ty<'tcx>) {\n         if let Some(len) = len.try_eval_usize(self.tcx, self.param_env) {\n             // Now we know the length...\n             if slice.is_none() {\n@@ -1409,21 +1411,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if min_len != len {\n                     self.error_scrutinee_inconsistent_length(span, min_len, len);\n                 }\n-            } else if let r @ Some(_) = len.checked_sub(min_len) {\n+            } else if let Some(pat_len) = len.checked_sub(min_len) {\n                 // The variable-length pattern was there,\n                 // so it has an array type with the remaining elements left as its size...\n-                return r;\n+                return (self.tcx.mk_array(element_ty, pat_len), arr_ty);\n             } else {\n                 // ...however, in this case, there were no remaining elements.\n                 // That is, the slice pattern requires more than the array type offers.\n                 self.error_scrutinee_with_rest_inconsistent_length(span, min_len, len);\n             }\n+        } else if slice.is_none() {\n+            // We have a pattern with a fixed length,\n+            // which we can use to infer the length of the array.\n+            // of the array.\n+            let updated_arr_ty = self.tcx.mk_array(element_ty, min_len);\n+            self.demand_eqtype(span, updated_arr_ty, arr_ty);\n+            return (self.tcx.types.err, updated_arr_ty);\n         } else {\n-            // No idea what the length is, which happens if we have e.g.,\n-            // `let [a, b] = arr` where `arr: [T; N]` where `const N: usize`.\n+            // We have a variable-length pattern and don't know the array length.\n+            // This happens if we have e.g.,\n+            // `let [a, b, ..] = arr` where `arr: [T; N]` where `const N: usize`.\n             self.error_scrutinee_unfixed_length(span);\n         }\n-        None\n+        (self.tcx.types.err, arr_ty)\n     }\n \n     fn error_scrutinee_inconsistent_length(&self, span: Span, min_len: u64, size: u64) {"}, {"sha": "a4e3d3dee4a824c2de8e72349332219e4f2ff9bd", "filename": "src/test/ui/const-generics/infer_arg_from_pat.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs?ref=50ab77384e8f990d64c7b7fd478b19da724d6e07", "patch": "@@ -0,0 +1,27 @@\n+// run-pass\n+//\n+// see issue #70529\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct A<const N: usize> {\n+    arr: [u8; N],\n+}\n+\n+impl<const N: usize> A<N> {\n+    fn new() -> Self {\n+        A {\n+            arr: [0; N],\n+        }\n+    }\n+\n+    fn value(&self) -> usize {\n+        N\n+    }\n+}\n+\n+fn main() {\n+    let a = A::new();\n+    let [_, _] = a.arr;\n+    assert_eq!(a.value(), 2);\n+}"}, {"sha": "ad6bf3e235aebc48fc4605fd14914340fb2bad98", "filename": "src/test/ui/const-generics/infer_arg_from_pat.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr?ref=50ab77384e8f990d64c7b7fd478b19da724d6e07", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/infer_arg_from_pat.rs:4:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "70633bbb141d49aabf25717d9a08f4edb5366614", "filename": "src/test/ui/const-generics/infer_arr_len_from_pat.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs?ref=50ab77384e8f990d64c7b7fd478b19da724d6e07", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+//\n+// see issue #70529\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn as_chunks<const N: usize>() -> [u8; N] {\n+    loop {}\n+}\n+\n+fn main() {\n+    let [_, _] = as_chunks();\n+}"}, {"sha": "6f5b601e14ca113903eab03bafd16e9aba06b2d0", "filename": "src/test/ui/const-generics/infer_arr_len_from_pat.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr?ref=50ab77384e8f990d64c7b7fd478b19da724d6e07", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/infer_arr_len_from_pat.rs:4:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "45fc7e13d17820fbb7256546c82a226824e9654e", "filename": "src/test/ui/error-codes/E0730.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs?ref=50ab77384e8f990d64c7b7fd478b19da724d6e07", "patch": "@@ -3,7 +3,7 @@\n \n fn is_123<const N: usize>(x: [u32; N]) -> bool {\n     match x {\n-        [1, 2, 3] => true, //~ ERROR cannot pattern-match on an array without a fixed length\n+        [1, 2, 3] => true, //~ ERROR mismatched types\n         _ => false\n     }\n }"}, {"sha": "834a3e9687059c57661922094333edbeeebfa329", "filename": "src/test/ui/error-codes/E0730.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab77384e8f990d64c7b7fd478b19da724d6e07/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr?ref=50ab77384e8f990d64c7b7fd478b19da724d6e07", "patch": "@@ -6,12 +6,15 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0730]: cannot pattern-match on an array without a fixed length\n+error[E0308]: mismatched types\n   --> $DIR/E0730.rs:6:9\n    |\n LL |         [1, 2, 3] => true,\n-   |         ^^^^^^^^^\n+   |         ^^^^^^^^^ expected `3usize`, found `N`\n+   |\n+   = note: expected array `[u32; 3]`\n+              found array `[u32; _]`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0730`.\n+For more information about this error, try `rustc --explain E0308`."}]}