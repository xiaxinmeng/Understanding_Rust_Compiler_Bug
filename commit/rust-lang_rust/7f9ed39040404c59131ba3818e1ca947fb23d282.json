{"sha": "7f9ed39040404c59131ba3818e1ca947fb23d282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOWVkMzkwNDA0MDRjNTkxMzFiYTM4MThlMWNhOTQ3ZmIyM2QyODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-26T20:30:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T23:43:18Z"}, "message": "rustc: Only invoke when there are cleanups", "tree": {"sha": "48e4d6518f031faad609d62ff454d82bb3f6b541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e4d6518f031faad609d62ff454d82bb3f6b541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f9ed39040404c59131ba3818e1ca947fb23d282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9ed39040404c59131ba3818e1ca947fb23d282", "html_url": "https://github.com/rust-lang/rust/commit/7f9ed39040404c59131ba3818e1ca947fb23d282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f9ed39040404c59131ba3818e1ca947fb23d282/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8780db2e0bc40aff2c030962c9fc3dd299a678fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8780db2e0bc40aff2c030962c9fc3dd299a678fa", "html_url": "https://github.com/rust-lang/rust/commit/8780db2e0bc40aff2c030962c9fc3dd299a678fa"}], "stats": {"total": 81, "additions": 63, "deletions": 18}, "files": [{"sha": "fbfee499e40a7416935c1ef8a17e58067d8d412e", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f9ed39040404c59131ba3818e1ca947fb23d282/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7f9ed39040404c59131ba3818e1ca947fb23d282/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=7f9ed39040404c59131ba3818e1ca947fb23d282", "patch": "@@ -571,7 +571,6 @@ when unwinding through __morestack).\n  */\n void\n rust_task::reset_stack_limit() {\n-    I(thread, on_rust_stack());\n     uintptr_t sp = get_sp();\n     // Have to do the rest on the C stack because it involves\n     // freeing stack segments, logging, etc."}, {"sha": "187a1a72b2198e6ca2eed734d273e8ef3a4164fc", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 63, "deletions": 17, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7f9ed39040404c59131ba3818e1ca947fb23d282/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9ed39040404c59131ba3818e1ca947fb23d282/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7f9ed39040404c59131ba3818e1ca947fb23d282", "patch": "@@ -2761,30 +2761,76 @@ fn trans_call_inner(in_cx: block, fn_expr_ty: ty::t, ret_ty: ty::t,\n \n fn invoke(bcx: block, llfn: ValueRef, llargs: [ValueRef]) -> block {\n     let _icx = bcx.insn_ctxt(\"invoke_\");\n-    // FIXME: May be worth turning this into a plain call when there are no\n-    // cleanups to run\n     if bcx.unreachable { ret bcx; }\n-    let normal_bcx = sub_block(bcx, \"normal return\");\n-    Invoke(bcx, llfn, llargs, normal_bcx.llbb, get_landing_pad(bcx));\n-    ret normal_bcx;\n+    if need_invoke(bcx) {\n+        log(error, \"invoking\");\n+        let normal_bcx = sub_block(bcx, \"normal return\");\n+        Invoke(bcx, llfn, llargs, normal_bcx.llbb, get_landing_pad(bcx));\n+        ret normal_bcx;\n+    } else {\n+        log(error, \"calling\");\n+        Call(bcx, llfn, llargs);\n+        ret bcx;\n+    }\n }\n \n-fn get_landing_pad(bcx: block) -> BasicBlockRef {\n-    let _icx = bcx.insn_ctxt(\"get_landing_pad\");\n-    fn in_lpad_scope_cx(bcx: block, f: fn(scope_info)) {\n-        let mut bcx = bcx;\n-        loop {\n-            alt bcx.kind {\n-              block_scope(info) {\n-                if info.cleanups.len() > 0u || bcx.parent == parent_none {\n-                    f(info); ret;\n+fn need_invoke(bcx: block) -> bool {\n+    if have_cached_lpad(bcx) {\n+        ret true;\n+    }\n+\n+    // Walk the scopes to look for cleanups\n+    let mut cur = bcx;\n+    loop {\n+        alt cur.kind {\n+          block_scope(info) {\n+            for cleanup in info.cleanups {\n+                alt cleanup {\n+                  clean(_, cleanup_type) | clean_temp(_, _, cleanup_type) {\n+                    if cleanup_type == normal_exit_and_unwind {\n+                        ret true;\n+                    }\n+                  }\n                 }\n-              }\n-              _ {}\n             }\n-            bcx = block_parent(bcx);\n+          }\n+          _ { }\n+        }\n+        cur = alt cur.parent {\n+          parent_some(next) { next }\n+          parent_none { ret false; }\n+        }\n+    }\n+}\n+\n+fn have_cached_lpad(bcx: block) -> bool {\n+    let mut res = false;\n+    in_lpad_scope_cx(bcx) {|info|\n+        alt info.landing_pad {\n+          some(_) { res = true; }\n+          none { res = false; }\n+        }\n+    }\n+    ret res;\n+}\n+\n+fn in_lpad_scope_cx(bcx: block, f: fn(scope_info)) {\n+    let mut bcx = bcx;\n+    loop {\n+        alt bcx.kind {\n+          block_scope(info) {\n+            if info.cleanups.len() > 0u || bcx.parent == parent_none {\n+                f(info); ret;\n+            }\n+          }\n+          _ {}\n         }\n+        bcx = block_parent(bcx);\n     }\n+}\n+\n+fn get_landing_pad(bcx: block) -> BasicBlockRef {\n+    let _icx = bcx.insn_ctxt(\"get_landing_pad\");\n \n     let mut cached = none, pad_bcx = bcx; // Guaranteed to be set below\n     in_lpad_scope_cx(bcx) {|info|"}]}