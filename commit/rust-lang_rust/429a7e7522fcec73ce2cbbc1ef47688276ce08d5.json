{"sha": "429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOWE3ZTc1MjJmY2VjNzNjZTJjYmJjMWVmNDc2ODgyNzZjZTA4ZDU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-08T15:29:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T15:29:12Z"}, "message": "Rollup merge of #67849 - cjkenn:check-sorted-words, r=estebank\n\nAdd a check for swapped words when we can't find an identifier\n\nFixes #66968\n\nCouple things here:\n1. The matches take the precedence of case insensitive match, then levenshtein match, then swapped words match. Doing this allows us to not even check for swapped words unless the other checks return `None`.\n2. I've assumed that the swapped words check is not held to the limits of the max levenshtein distance threshold (ie. we want to try and find a match even if the levenshtein distance is very high). This means that we cannot perform this check in the `fold` that occurs after the `filter_map` call, because the candidate will be filtered out. So, I've split this into two separate `fold` calls, and had to collect the original iterator into a vec so it can be copied (I don't think we want to change the function signature to take a vec or require the `Copy` trait). An alternative implemenation may be to remove the `filter_map`, `fold` over the entire iterator, and do a check against `max_dist` inside the relevant cases there.\n\nr? @estebank", "tree": {"sha": "74b807f9023ccc7b972b8dcf2a5df4265233aba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b807f9023ccc7b972b8dcf2a5df4265233aba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFfVICRBK7hj4Ov3rIwAAdHIIADR7KKVZ3yYVoEY8D/SOqh3G\nI4dbC4JFGryk/4t4sQfs2B5lrTzvS0fxJSGOJDR9Uc6h//GuBN1iMQ9tTY4i/ygT\nLxOONSstrjxJn3BDYz0DKF4jn3Agm4gEoMzLH6hGD24TKIZrdqzhV7wxWFYQJe7S\n75Ln9nSBN9/igefwKMauWsU7KLeWotG8aIMt2qZOHT1cRWbGCXJ+uHC45yHthcAu\nsnfkQ8Q1DoYrhRY6PeXRv/N2Xa3hxdZytG77CCflAlr1BLx7Qw1ouZTJ/QFo1ZCW\nlYSfo++gZoEd/uUlrzHUtiDPQEMn8e64+r5NyBu9/ks+SnfnQ19/h+h7WyWcCFE=\n=SYRo\n-----END PGP SIGNATURE-----\n", "payload": "tree 74b807f9023ccc7b972b8dcf2a5df4265233aba3\nparent 256f401b85da7ae6e3d146a41089897c37c2589a\nparent e01e8b9256587a074968b440aa30d43b31642cb5\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578497352 +0900\ncommitter GitHub <noreply@github.com> 1578497352 +0900\n\nRollup merge of #67849 - cjkenn:check-sorted-words, r=estebank\n\nAdd a check for swapped words when we can't find an identifier\n\nFixes #66968\n\nCouple things here:\n1. The matches take the precedence of case insensitive match, then levenshtein match, then swapped words match. Doing this allows us to not even check for swapped words unless the other checks return `None`.\n2. I've assumed that the swapped words check is not held to the limits of the max levenshtein distance threshold (ie. we want to try and find a match even if the levenshtein distance is very high). This means that we cannot perform this check in the `fold` that occurs after the `filter_map` call, because the candidate will be filtered out. So, I've split this into two separate `fold` calls, and had to collect the original iterator into a vec so it can be copied (I don't think we want to change the function signature to take a vec or require the `Copy` trait). An alternative implemenation may be to remove the `filter_map`, `fold` over the entire iterator, and do a check against `max_dist` inside the relevant cases there.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "html_url": "https://github.com/rust-lang/rust/commit/429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "256f401b85da7ae6e3d146a41089897c37c2589a", "url": "https://api.github.com/repos/rust-lang/rust/commits/256f401b85da7ae6e3d146a41089897c37c2589a", "html_url": "https://github.com/rust-lang/rust/commit/256f401b85da7ae6e3d146a41089897c37c2589a"}, {"sha": "e01e8b9256587a074968b440aa30d43b31642cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01e8b9256587a074968b440aa30d43b31642cb5", "html_url": "https://github.com/rust-lang/rust/commit/e01e8b9256587a074968b440aa30d43b31642cb5"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "cce86fed9891c14fe3b4e5c8e44d556338df3271", "filename": "src/libsyntax/util/lev_distance.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Flibsyntax%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Flibsyntax%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance.rs?ref=429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "patch": "@@ -54,14 +54,16 @@ where\n     T: Iterator<Item = &'a Symbol>,\n {\n     let max_dist = dist.map_or_else(|| cmp::max(lookup.len(), 3) / 3, |d| d);\n+    let name_vec: Vec<&Symbol> = iter_names.collect();\n \n-    let (case_insensitive_match, levenstein_match) = iter_names\n+    let (case_insensitive_match, levenshtein_match) = name_vec\n+        .iter()\n         .filter_map(|&name| {\n             let dist = lev_distance(lookup, &name.as_str());\n             if dist <= max_dist { Some((name, dist)) } else { None }\n         })\n         // Here we are collecting the next structure:\n-        // (case_insensitive_match, (levenstein_match, levenstein_distance))\n+        // (case_insensitive_match, (levenshtein_match, levenshtein_distance))\n         .fold((None, None), |result, (candidate, dist)| {\n             (\n                 if candidate.as_str().to_uppercase() == lookup.to_uppercase() {\n@@ -75,10 +77,31 @@ where\n                 },\n             )\n         });\n-\n+    // Priority of matches:\n+    // 1. Exact case insensitive match\n+    // 2. Levenshtein distance match\n+    // 3. Sorted word match\n     if let Some(candidate) = case_insensitive_match {\n-        Some(candidate) // exact case insensitive match has a higher priority\n+        Some(*candidate)\n+    } else if levenshtein_match.is_some() {\n+        levenshtein_match.map(|(candidate, _)| *candidate)\n     } else {\n-        levenstein_match.map(|(candidate, _)| candidate)\n+        find_match_by_sorted_words(name_vec, lookup)\n     }\n }\n+\n+fn find_match_by_sorted_words<'a>(iter_names: Vec<&'a Symbol>, lookup: &str) -> Option<Symbol> {\n+    iter_names.iter().fold(None, |result, candidate| {\n+        if sort_by_words(&candidate.as_str()) == sort_by_words(lookup) {\n+            Some(**candidate)\n+        } else {\n+            result\n+        }\n+    })\n+}\n+\n+fn sort_by_words(name: &str) -> String {\n+    let mut split_words: Vec<&str> = name.split('_').collect();\n+    split_words.sort();\n+    split_words.join(\"_\")\n+}"}, {"sha": "222661687c1c29d459d3eb7baee0a60b6e019548", "filename": "src/libsyntax/util/lev_distance/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Flibsyntax%2Futil%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Flibsyntax%2Futil%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance%2Ftests.rs?ref=429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "patch": "@@ -46,5 +46,11 @@ fn test_find_best_match_for_name() {\n             find_best_match_for_name(input.iter(), \"aaaa\", Some(4)),\n             Some(Symbol::intern(\"AAAA\"))\n         );\n+\n+        let input = vec![Symbol::intern(\"a_longer_variable_name\")];\n+        assert_eq!(\n+            find_best_match_for_name(input.iter(), \"a_variable_longer_name\", None),\n+            Some(Symbol::intern(\"a_longer_variable_name\"))\n+        );\n     })\n }"}, {"sha": "440bb653a83c3c85f432b3f2549b33caf345679f", "filename": "src/test/ui/suggestions/issue-66968-suggest-sorted-words.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-66968-suggest-sorted-words.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-66968-suggest-sorted-words.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-66968-suggest-sorted-words.rs?ref=429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let a_longer_variable_name = 1;\n+    println!(\"{}\", a_variable_longer_name); //~ ERROR E0425\n+}"}, {"sha": "d7b33ea41f79a06c25098507a58daed2dc39abde", "filename": "src/test/ui/suggestions/issue-66968-suggest-sorted-words.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-66968-suggest-sorted-words.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/429a7e7522fcec73ce2cbbc1ef47688276ce08d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-66968-suggest-sorted-words.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-66968-suggest-sorted-words.stderr?ref=429a7e7522fcec73ce2cbbc1ef47688276ce08d5", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `a_variable_longer_name` in this scope\n+  --> $DIR/issue-66968-suggest-sorted-words.rs:3:20\n+   |\n+LL |     println!(\"{}\", a_variable_longer_name);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `a_longer_variable_name`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}