{"sha": "77e9228b4ad0a10f76921edf46dd8578f3d64630", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZTkyMjhiNGFkMGExMGY3NjkyMWVkZjQ2ZGQ4NTc4ZjNkNjQ2MzA=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-07-26T22:10:43Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-07-28T22:57:24Z"}, "message": "Improve invalid recursive types diagnostic", "tree": {"sha": "93d8132d3753ee95b10f861ac6e123789effb7dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93d8132d3753ee95b10f861ac6e123789effb7dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77e9228b4ad0a10f76921edf46dd8578f3d64630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77e9228b4ad0a10f76921edf46dd8578f3d64630", "html_url": "https://github.com/rust-lang/rust/commit/77e9228b4ad0a10f76921edf46dd8578f3d64630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77e9228b4ad0a10f76921edf46dd8578f3d64630/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ede7ed8e4f3752c371f7d04da4695ba9aa1c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ede7ed8e4f3752c371f7d04da4695ba9aa1c26", "html_url": "https://github.com/rust-lang/rust/commit/55ede7ed8e4f3752c371f7d04da4695ba9aa1c26"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "96f6f5eb566a3ddf5e3210394c4747c21fa8720f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -4273,10 +4273,8 @@ pub fn check_representable(tcx: &ty::ctxt,\n     // caught by case 1.\n     match rty.is_representable(tcx, sp) {\n       ty::SelfRecursive => {\n-        span_err!(tcx.sess, sp, E0072,\n-            \"illegal recursive {} type; \\\n-             wrap the inner value in a box to make it representable\",\n-            designation);\n+        span_err!(tcx.sess, sp, E0072, \"invalid recursive {} type\", designation);\n+        tcx.sess.fileline_help(sp, \"wrap the inner value in a box to make it representable\");\n         return false\n       }\n       ty::Representable | ty::ContainsRecursive => (),"}, {"sha": "07ec9154332c3d81d337817bf06a2b099882f5fe", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -778,7 +778,7 @@ the pointer the size of the type would need to be unbounded.\n Consider the following erroneous definition of a type for a list of bytes:\n \n ```\n-// error, illegal recursive struct type\n+// error, invalid recursive struct type\n struct ListNode {\n     head: u8,\n     tail: Option<ListNode>,\n@@ -2345,7 +2345,7 @@ register_diagnostics! {\n     E0241,\n     E0242, // internal error looking up a definition\n     E0245, // not a trait\n-    E0246, // illegal recursive type\n+    E0246, // invalid recursive type\n     E0247, // found module name used as a type\n     E0248, // found value name used as a type\n     E0319, // trait impls for defaulted traits allowed just for structs/enums"}, {"sha": "7dbf75feda054df0431062e7da43ee49ff609017", "filename": "src/test/compile-fail/infinite-tag-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-// error-pattern: illegal recursive enum type; wrap the inner value in a box\n+// error-pattern: invalid recursive enum type\n \n enum mlist { cons(isize, mlist), nil, }\n "}, {"sha": "bd3f2835058700942b137a968c78ea7d1945cce0", "filename": "src/test/compile-fail/issue-17431-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-1.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo { foo: Option<Option<Foo>> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "4e1c0d6571d168567fddf88b66746bef322ddd63", "filename": "src/test/compile-fail/issue-17431-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n struct Baz { q: Option<Foo> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n struct Foo { q: Option<Baz> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "07c5f106456d121f781b3e7f540966ca286cb281", "filename": "src/test/compile-fail/issue-17431-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-3.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -11,7 +11,7 @@\n use std::sync::Mutex;\n \n struct Foo { foo: Mutex<Option<Foo>> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "74952d9ca2b38f39ab5c4afed213e080fc647106", "filename": "src/test/compile-fail/issue-17431-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -11,7 +11,7 @@\n use std::marker;\n \n struct Foo<T> { foo: Option<Option<Foo<T>>>, marker: marker::PhantomData<T> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl<T> Foo<T> { fn bar(&self) {} }\n "}, {"sha": "157b5ed434e9f23dad91c26f3959228bdbea3bc4", "filename": "src/test/compile-fail/issue-17431-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -12,7 +12,7 @@ use std::marker;\n \n struct Foo { foo: Bar<Foo> }\n struct Bar<T> { x: Bar<Foo> , marker: marker::PhantomData<T> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn foo(&self) {} }\n "}, {"sha": "b2037378d3787532c7065ac5673c021b8e4ee4d4", "filename": "src/test/compile-fail/issue-17431-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-6.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -11,7 +11,7 @@\n use std::sync::Mutex;\n \n enum Foo { X(Mutex<Option<Foo>>) }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n impl Foo { fn bar(self) {} }\n "}, {"sha": "9ad81e030aaf0eab8fe16065481a0fb36cb3f7b7", "filename": "src/test/compile-fail/issue-17431-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-17431-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-7.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum Foo { Voo(Option<Option<Foo>>) }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "37daf76c0b953c8534ab59b784a8971227e1c016", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -16,7 +16,7 @@ mod pingpong {\n     use send_packet;\n     pub type ping = send_packet<pong>;\n     pub struct pong(send_packet<ping>);\n-    //~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+    //~^ ERROR invalid recursive struct type\n }\n \n fn main() {}"}, {"sha": "eb6842083263594a8561127d689079d957419cb6", "filename": "src/test/compile-fail/issue-3008-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-3008-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-3008-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-1.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -10,7 +10,7 @@\n \n enum foo { foo_(bar) }\n enum bar { bar_none, bar_some(bar) }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n fn main() {\n }"}, {"sha": "f934e0771c2ab39c998829b7cc50be27e20a3087", "filename": "src/test/compile-fail/issue-3008-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -12,7 +12,7 @@\n \n enum foo { foo_(bar) }\n struct bar { x: bar }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n fn main() {\n }"}, {"sha": "f8756b83f23a642d52e82394a32a5ec5acac48f3", "filename": "src/test/compile-fail/issue-3008-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -12,7 +12,7 @@ use std::marker;\n \n enum E1 { V1(E2<E1>), }\n enum E2<T> { V2(E2<E1>, marker::PhantomData<T>), }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n impl E1 { fn foo(&self) {} }\n "}, {"sha": "66d8fb40cd120c94adf1eb04944d2ebb58175542", "filename": "src/test/compile-fail/issue-3779.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-3779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Fissue-3779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3779.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct S {\n-    //~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+    //~^ ERROR invalid recursive struct type\n     element: Option<S>\n }\n "}, {"sha": "33dcbdf74d2269fa63740a14d6229ae5fb7fbab6", "filename": "src/test/compile-fail/recursive-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: illegal recursive enum type\n+// error-pattern: invalid recursive enum type\n \n enum list<T> { cons(T, list<T>), nil }\n "}, {"sha": "3b08d900733c5e219ac4e3d038d25bd19b032270", "filename": "src/test/compile-fail/type-recursive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e9228b4ad0a10f76921edf46dd8578f3d64630/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs?ref=77e9228b4ad0a10f76921edf46dd8578f3d64630", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:illegal recursive struct type\n+// error-pattern:invalid recursive struct type\n struct t1 {\n     foo: isize,\n     foolish: t1"}]}