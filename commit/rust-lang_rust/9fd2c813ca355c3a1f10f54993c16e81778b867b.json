{"sha": "9fd2c813ca355c3a1f10f54993c16e81778b867b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZDJjODEzY2EzNTVjM2ExZjEwZjU0OTkzYzE2ZTgxNzc4Yjg2N2I=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-27T10:24:31Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-27T10:25:04Z"}, "message": "visible_from -> is_visible_from", "tree": {"sha": "119623fdc795c0e41a7171abe90d3961f24fac7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/119623fdc795c0e41a7171abe90d3961f24fac7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fd2c813ca355c3a1f10f54993c16e81778b867b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd2c813ca355c3a1f10f54993c16e81778b867b", "html_url": "https://github.com/rust-lang/rust/commit/9fd2c813ca355c3a1f10f54993c16e81778b867b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fd2c813ca355c3a1f10f54993c16e81778b867b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe95d735bf9bb0d49d2ab90438577089207c8a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe95d735bf9bb0d49d2ab90438577089207c8a0", "html_url": "https://github.com/rust-lang/rust/commit/dfe95d735bf9bb0d49d2ab90438577089207c8a0"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "488f74cfb13f3cb39b3cf87ba5fa9c7ff515aaf0", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2c813ca355c3a1f10f54993c16e81778b867b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2c813ca355c3a1f10f54993c16e81778b867b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=9fd2c813ca355c3a1f10f54993c16e81778b867b", "patch": "@@ -1053,8 +1053,8 @@ impl<T: Into<AttrDef> + Copy> Docs for T {\n \n pub trait HasVisibility {\n     fn visibility(&self, db: &impl HirDatabase) -> Visibility;\n-    fn visible_from(&self, db: &impl HirDatabase, module: Module) -> bool {\n+    fn is_visible_from(&self, db: &impl HirDatabase, module: Module) -> bool {\n         let vis = self.visibility(db);\n-        vis.visible_from(db, module.id)\n+        vis.is_visible_from(db, module.id)\n     }\n }"}, {"sha": "8a22b0585910c80ccba35bf6ac4e07364fa63227", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2c813ca355c3a1f10f54993c16e81778b867b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2c813ca355c3a1f10f54993c16e81778b867b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=9fd2c813ca355c3a1f10f54993c16e81778b867b", "patch": "@@ -378,7 +378,7 @@ where\n                             .resolutions()\n                             // only keep visible names...\n                             .map(|(n, res)| {\n-                                (n, res.filter_visibility(|v| v.visible_from_other_crate()))\n+                                (n, res.filter_visibility(|v| v.is_visible_from_other_crate()))\n                             })\n                             .filter(|(_, res)| !res.is_none())\n                             .collect::<Vec<_>>();\n@@ -398,7 +398,7 @@ where\n                                 (\n                                     n,\n                                     res.filter_visibility(|v| {\n-                                        v.visible_from_def_map(&self.def_map, module_id)\n+                                        v.is_visible_from_def_map(&self.def_map, module_id)\n                                     }),\n                                 )\n                             })\n@@ -492,7 +492,7 @@ where\n         for (glob_importing_module, glob_import_vis) in glob_imports {\n             // we know all resolutions have the same visibility (`vis`), so we\n             // just need to check that once\n-            if !vis.visible_from_def_map(&self.def_map, glob_importing_module) {\n+            if !vis.is_visible_from_def_map(&self.def_map, glob_importing_module) {\n                 continue;\n             }\n             self.update_recursive(glob_importing_module, resolutions, glob_import_vis, depth + 1);"}, {"sha": "d8296da4b60b2a8a60d742c465ea8a52144764e2", "filename": "crates/ra_hir_def/src/visibility.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2c813ca355c3a1f10f54993c16e81778b867b/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2c813ca355c3a1f10f54993c16e81778b867b/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs?ref=9fd2c813ca355c3a1f10f54993c16e81778b867b", "patch": "@@ -81,7 +81,7 @@ pub enum Visibility {\n }\n \n impl Visibility {\n-    pub fn visible_from(self, db: &impl DefDatabase, from_module: ModuleId) -> bool {\n+    pub fn is_visible_from(self, db: &impl DefDatabase, from_module: ModuleId) -> bool {\n         let to_module = match self {\n             Visibility::Module(m) => m,\n             Visibility::Public => return true,\n@@ -91,17 +91,17 @@ impl Visibility {\n             return false;\n         }\n         let def_map = db.crate_def_map(from_module.krate);\n-        self.visible_from_def_map(&def_map, from_module.local_id)\n+        self.is_visible_from_def_map(&def_map, from_module.local_id)\n     }\n \n-    pub(crate) fn visible_from_other_crate(self) -> bool {\n+    pub(crate) fn is_visible_from_other_crate(self) -> bool {\n         match self {\n             Visibility::Module(_) => false,\n             Visibility::Public => true,\n         }\n     }\n \n-    pub(crate) fn visible_from_def_map(\n+    pub(crate) fn is_visible_from_def_map(\n         self,\n         def_map: &crate::nameres::CrateDefMap,\n         from_module: crate::LocalModuleId,"}, {"sha": "210a685e408ff4ceac98e8acf4b6c3d6ee72bbfc", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2c813ca355c3a1f10f54993c16e81778b867b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2c813ca355c3a1f10f54993c16e81778b867b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=9fd2c813ca355c3a1f10f54993c16e81778b867b", "patch": "@@ -38,7 +38,7 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n     for receiver in receiver.autoderef(ctx.db) {\n         for (field, ty) in receiver.fields(ctx.db) {\n-            if ctx.module.map_or(false, |m| !field.visible_from(ctx.db, m)) {\n+            if ctx.module.map_or(false, |m| !field.is_visible_from(ctx.db, m)) {\n                 // Skip private field. FIXME: If the definition location of the\n                 // field is editable, we should show the completion\n                 continue;"}]}