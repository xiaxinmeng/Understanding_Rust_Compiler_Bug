{"sha": "20b5aaf11103d65752adafe549be1acecfa9acdd", "node_id": "C_kwDOAAsO6NoAKDIwYjVhYWYxMTEwM2Q2NTc1MmFkYWZlNTQ5YmUxYWNlY2ZhOWFjZGQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-07-15T00:12:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-07-15T18:04:45Z"}, "message": "Provide structured suggestion for dropped temp value", "tree": {"sha": "f383a1de72ad0f06e678701a94ab5d08eb26f97a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f383a1de72ad0f06e678701a94ab5d08eb26f97a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20b5aaf11103d65752adafe549be1acecfa9acdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20b5aaf11103d65752adafe549be1acecfa9acdd", "html_url": "https://github.com/rust-lang/rust/commit/20b5aaf11103d65752adafe549be1acecfa9acdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20b5aaf11103d65752adafe549be1acecfa9acdd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fe5390a885eb47f506bf481cd9ea2b449705d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe5390a885eb47f506bf481cd9ea2b449705d79", "html_url": "https://github.com/rust-lang/rust/commit/0fe5390a885eb47f506bf481cd9ea2b449705d79"}], "stats": {"total": 240, "additions": 205, "deletions": 35}, "files": [{"sha": "6923fc1c1f6a258c78e236c9b0ceb6d0fc436628", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1500,7 +1500,38 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             | BorrowExplanation::UsedLaterInLoop(..)\n             | BorrowExplanation::UsedLaterWhenDropped { .. } => {\n                 // Only give this note and suggestion if it could be relevant.\n-                err.note(\"consider using a `let` binding to create a longer lived value\");\n+                let sm = self.infcx.tcx.sess.source_map();\n+                let mut suggested = false;\n+                let msg = \"consider using a `let` binding to create a longer lived value\";\n+                if let Some(scope) =\n+                    self.body.source_scopes.get(self.body.source_info(location).scope)\n+                    && let ClearCrossCrate::Set(scope_data) = &scope.local_data\n+                    && let Some(node) = self.infcx.tcx.hir().find(scope_data.lint_root)\n+                    && let Some(id) = node.body_id()\n+                    && let hir::ExprKind::Block(block, _) = self.infcx.tcx.hir().body(id).value.kind\n+                {\n+                    for stmt in block.stmts {\n+                        if stmt.span.contains(proper_span)\n+                            && let Some(p) = sm.span_to_margin(stmt.span)\n+                            && let Ok(s) = sm.span_to_snippet(proper_span)\n+                        {\n+                            let addition = format!(\"let binding = {};\\n{}\", s, \" \".repeat(p));\n+                            err.multipart_suggestion_verbose(\n+                                msg,\n+                                vec![\n+                                    (stmt.span.shrink_to_lo(), addition),\n+                                    (proper_span, \"binding\".to_string()),\n+                                ],\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            suggested = true;\n+                            break;\n+                        }\n+                    }\n+                }\n+                if !suggested {\n+                    err.note(msg);\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "8bf6a2f6db3966c2410c637bed09dc3da4319396", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.fixed?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+use std::collections::HashMap;\n+\n+fn main() {\n+    let tmp: Box<_>;\n+    let mut buggy_map: HashMap<usize, &usize> = HashMap::new();\n+    let binding = Box::new(1);\n+    buggy_map.insert(42, &*binding); //~ ERROR temporary value dropped while borrowed\n+\n+    // but it is ok if we use a temporary\n+    tmp = Box::new(2);\n+    buggy_map.insert(43, &*tmp);\n+}"}, {"sha": "85481336a305f5dbadadc7ce9f72fd0ff86dd774", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,8 +1,6 @@\n-use std::collections::HashMap;\n-\n-\n-\n+// run-rustfix\n \n+use std::collections::HashMap;\n \n fn main() {\n     let tmp: Box<_>;"}, {"sha": "dea8ac90bec2ebe5033acfa2657020c6b574aadd", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-borrowed-uniq-rvalue.rs:10:28\n+  --> $DIR/borrowck-borrowed-uniq-rvalue.rs:8:28\n    |\n LL |     buggy_map.insert(42, &*Box::new(1));\n    |                            ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n@@ -9,7 +9,11 @@ LL |     buggy_map.insert(42, &*Box::new(1));\n LL |     buggy_map.insert(43, &*tmp);\n    |     --------------------------- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = Box::new(1);\n+LL ~     buggy_map.insert(42, &*binding);\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "40f14c389842e6e93331b2d162c5490dfe6e2a47", "filename": "src/test/ui/cleanup-rvalue-scopes-cf.stderr", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes-cf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes-cf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes-cf.stderr?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -9,7 +9,11 @@ LL |     let x1 = arg(&AddFlags(1));\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |      -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = AddFlags(1);\n+LL ~     let x1 = arg(&binding);\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:27:14\n@@ -22,7 +26,11 @@ LL |     let x2 = AddFlags(1).get();\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |          -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = AddFlags(1);\n+LL ~     let x2 = binding.get();\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:28:21\n@@ -35,7 +43,11 @@ LL |     let x3 = &*arg(&AddFlags(1));\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |              -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = AddFlags(1);\n+LL ~     let x3 = &*arg(&binding);\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:29:24\n@@ -48,7 +60,11 @@ LL |     let ref x4 = *arg(&AddFlags(1));\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |                  -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = AddFlags(1);\n+LL ~     let ref x4 = *arg(&binding);\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:30:24\n@@ -61,7 +77,11 @@ LL |     let &ref x5 = arg(&AddFlags(1));\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |                      -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = AddFlags(1);\n+LL ~     let &ref x5 = arg(&binding);\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:31:14\n@@ -74,7 +94,11 @@ LL |     let x6 = AddFlags(1).get();\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |                          -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = AddFlags(1);\n+LL ~     let x6 = binding.get();\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:32:44\n@@ -87,7 +111,11 @@ LL |\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |                              -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = AddFlags(1);\n+LL ~     let StackBox { f: x7 } = StackBox { f: binding.get() };\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "139bd9a073973fdcc30117ea11c2be0f202fbb43", "filename": "src/test/ui/issues/issue-11493.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-11493.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-11493.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11493.fixed?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let x = Some(3);\n+    let binding = id(5);\n+    let y = x.as_ref().unwrap_or(&binding);  //~ ERROR\n+    let _ = &y;\n+}"}, {"sha": "cb77f89fb2b1ec5efe544d5f45db1fc7c12b6da8", "filename": "src/test/ui/issues/issue-11493.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-11493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-11493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11493.rs?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,7 +1,8 @@\n+// run-rustfix\n fn id<T>(x: T) -> T { x }\n \n fn main() {\n     let x = Some(3);\n     let y = x.as_ref().unwrap_or(&id(5));  //~ ERROR\n-    &y;\n+    let _ = &y;\n }"}, {"sha": "a5d1f2816f1ca707dbf04b1130d8cf07b82e5c7b", "filename": "src/test/ui/issues/issue-11493.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-11493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-11493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11493.stderr?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,14 +1,18 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-11493.rs:5:35\n+  --> $DIR/issue-11493.rs:6:35\n    |\n LL |     let y = x.as_ref().unwrap_or(&id(5));\n    |                                   ^^^^^ - temporary value is freed at the end of this statement\n    |                                   |\n    |                                   creates a temporary which is freed while still in use\n-LL |     &y;\n-   |     -- borrow later used here\n+LL |     let _ = &y;\n+   |             -- borrow later used here\n+   |\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = id(5);\n+LL ~     let y = x.as_ref().unwrap_or(&binding);\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "8640ca7a509648142c49cde2430c5bc010398588", "filename": "src/test/ui/issues/issue-36082.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-36082.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-36082.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.fixed?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+use std::cell::RefCell;\n+\n+fn main() {\n+    let mut r = 0;\n+    let s = 0;\n+    let x = RefCell::new((&mut r,s));\n+\n+    let binding = x.borrow();\n+    let val: &_ = binding.0;\n+    //~^ ERROR temporary value dropped while borrowed [E0716]\n+    //~| NOTE temporary value is freed at the end of this statement\n+    //~| NOTE creates a temporary which is freed while still in use\n+    //~| HELP consider using a `let` binding to create a longer lived value\n+    println!(\"{}\", val);\n+    //~^ borrow later used here\n+}"}, {"sha": "877d372fb8484985fb880bc6b5bbe165122ad974", "filename": "src/test/ui/issues/issue-36082.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n use std::cell::RefCell;\n \n fn main() {\n@@ -9,7 +10,7 @@ fn main() {\n     //~^ ERROR temporary value dropped while borrowed [E0716]\n     //~| NOTE temporary value is freed at the end of this statement\n     //~| NOTE creates a temporary which is freed while still in use\n-    //~| NOTE consider using a `let` binding to create a longer lived value\n+    //~| HELP consider using a `let` binding to create a longer lived value\n     println!(\"{}\", val);\n     //~^ borrow later used here\n }"}, {"sha": "4bd586db1cdcea283e86407ae370811641a27f99", "filename": "src/test/ui/issues/issue-36082.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-36082.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fissues%2Fissue-36082.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.stderr?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-36082.rs:8:19\n+  --> $DIR/issue-36082.rs:9:19\n    |\n LL |     let val: &_ = x.borrow().0;\n    |                   ^^^^^^^^^^  - temporary value is freed at the end of this statement\n@@ -9,7 +9,11 @@ LL |     let val: &_ = x.borrow().0;\n LL |     println!(\"{}\", val);\n    |                    --- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = x.borrow();\n+LL ~     let val: &_ = binding.0;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "59e6dd61b0f06ba8b89b3833c8616ff059f050c9", "filename": "src/test/ui/nll/borrowed-temporary-error.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -9,7 +9,13 @@ LL |     });\n LL |     println!(\"{:?}\", x);\n    |                      - borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = (v,);\n+LL ~     let x = gimme({\n+LL |         let v = 22;\n+LL ~         &binding\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "70e136e7e61ad50a51833f3a9ecc4cc53a2516b7", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -20,17 +20,16 @@ fn f() {\n     //~^ ERROR temporary value dropped while borrowed\n     //~| NOTE creates a temporary which is freed while still in use\n     //~| NOTE temporary value is freed at the end of this statement\n-    //~| NOTE consider using a `let` binding to create a longer lived value\n+    //~| HELP consider using a `let` binding to create a longer lived value\n \n-    {\n+    { //~ HELP consider using a `let` binding to create a longer lived value\n \n         let mut v4 = Vec::new(); // (sub) statement 0\n \n         v4.push(&id('y'));\n         //~^ ERROR temporary value dropped while borrowed\n         //~| NOTE creates a temporary which is freed while still in use\n         //~| NOTE temporary value is freed at the end of this statement\n-        //~| NOTE consider using a `let` binding to create a longer lived value\n         v4.use_ref();\n         //~^ NOTE borrow later used here\n     }                       // (statement 7)\n@@ -41,7 +40,7 @@ fn f() {\n     //~^ ERROR temporary value dropped while borrowed\n     //~| NOTE creates a temporary which is freed while still in use\n     //~| NOTE temporary value is freed at the end of this statement\n-    //~| NOTE consider using a `let` binding to create a longer lived value\n+    //~| HELP consider using a `let` binding to create a longer lived value\n \n     v1.push(&old[0]);\n "}, {"sha": "ab68d11159723f8460d544bb7c2804cac04a6fc5", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -21,7 +21,11 @@ LL |     v3.push(&id('x'));           // statement 6\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |              -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = id('x');\n+LL ~     v3.push(&binding);           // statement 6\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:29:18\n@@ -34,10 +38,18 @@ LL |         v4.push(&id('y'));\n LL |         v4.use_ref();\n    |         ------------ borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = id('y');\n+LL ~     {\n+LL | \n+LL |         let mut v4 = Vec::new(); // (sub) statement 0\n+LL | \n+LL ~         v4.push(&binding);\n+   |\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:40:14\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:39:14\n    |\n LL |     v5.push(&id('z'));\n    |              ^^^^^^^ - temporary value is freed at the end of this statement\n@@ -47,7 +59,11 @@ LL |     v5.push(&id('z'));\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |                                     -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = id('z');\n+LL ~     v5.push(&binding);\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "51f65e5345d2a0f2ad3b75b0621b4ecf83c55226", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.fixed?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+fn main() {\n+    let msg;\n+    let binding = Some(\"Hello\".to_string());\n+    match binding {\n+        //~^ ERROR temporary value dropped while borrowed\n+        Some(ref m) => {\n+            msg = m;\n+        },\n+        None => { panic!() }\n+    }\n+    println!(\"{}\", *msg);\n+}"}, {"sha": "7b09fad927fdf75040fea2d118cea45a6db1da7f", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.rs?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n fn main() {\n     let msg;\n     match Some(\"Hello\".to_string()) {"}, {"sha": "cb5289d24b4fc4ee5ee9a3c272ba48860c43e791", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-ref-into-rvalue.rs:3:11\n+  --> $DIR/borrowck-ref-into-rvalue.rs:4:11\n    |\n LL |     match Some(\"Hello\".to_string()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -9,7 +9,11 @@ LL |     }\n LL |     println!(\"{}\", *msg);\n    |                    ---- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = Some(\"Hello\".to_string());\n+LL ~     match binding {\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e6d1a4dd32806e4c75ff4dd4a7a5ffeedf2f02d8", "filename": "src/test/ui/span/issue-15480.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fissue-15480.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fissue-15480.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.fixed?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let binding = id(3);\n+    let v = vec![\n+        &binding\n+    ];\n+    //~^^ ERROR temporary value dropped while borrowed\n+\n+    for &&x in &v {\n+        println!(\"{}\", x + 3);\n+    }\n+}"}, {"sha": "916ce4b1edb266330b8972fc2fa127acc321ed6b", "filename": "src/test/ui/span/issue-15480.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n fn id<T>(x: T) -> T { x }\n \n fn main() {"}, {"sha": "460ad9ac7444502da198362c2f3273b317035134", "filename": "src/test/ui/span/issue-15480.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20b5aaf11103d65752adafe549be1acecfa9acdd/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr?ref=20b5aaf11103d65752adafe549be1acecfa9acdd", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-15480.rs:5:10\n+  --> $DIR/issue-15480.rs:6:10\n    |\n LL |         &id(3)\n    |          ^^^^^ creates a temporary which is freed while still in use\n@@ -9,7 +9,12 @@ LL |     ];\n LL |     for &&x in &v {\n    |                -- borrow later used here\n    |\n-   = note: consider using a `let` binding to create a longer lived value\n+help: consider using a `let` binding to create a longer lived value\n+   |\n+LL ~     let binding = id(3);\n+LL ~     let v = vec![\n+LL ~         &binding\n+   |\n \n error: aborting due to previous error\n "}]}