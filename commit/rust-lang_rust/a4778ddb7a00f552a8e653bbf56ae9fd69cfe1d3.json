{"sha": "a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0Nzc4ZGRiN2EwMGY1NTJhOGU2NTNiYmY1NmFlOWZkNjljZmUxZDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-05T18:10:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-05T18:10:39Z"}, "message": "Merge #4325\n\n4325: Fix column conversion for supplementary plane characters r=matklad a=lnicola\n\nFixes https://github.com/rust-analyzer/rust-analyzer/pull/4276#issuecomment-623079855.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "a070b784c88aa4219a7956e0e3036c7bbf04f83c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a070b784c88aa4219a7956e0e3036c7bbf04f83c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesawfCRBK7hj4Ov3rIwAAdHIIAIzgeLFKyI1BxX0A+NfZAN0j\ns4mDMQu+iiBv9wSmKVhsmOaDbLcZo1jtSHU3zW4ZzfNowhPy6kcmKFfnAHAKYerr\nzvL+jpSVp/mZuKmszTfrNAiKl0w3+gKzVXXeQnEEgVm91rcLjuDU92znKPKhqZ8D\nZk/fGcsmBQATPrIk1iFTQotmy+WMqZDqWiw2KgEQJhJqlUAOXWDH+/QnkltOLoAs\n6f0P5CDioMnB4s8JHbgF3HDIQQ+Gf09KnObrknbdX8yhWY1JAelfuxeTiYeKULxK\nXA+RE50N1i0XMtSjiwJLhKIsUq1ADbVlDmej92umhCkt82AB+i9fJZ3QrBNlqHY=\n=X9mS\n-----END PGP SIGNATURE-----\n", "payload": "tree a070b784c88aa4219a7956e0e3036c7bbf04f83c\nparent 8803e748a627f2ff45d441e70b3deda3f038c40e\nparent 1d794e859028a71d182daf2fa5826aeeeab2876b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588702239 +0000\ncommitter GitHub <noreply@github.com> 1588702239 +0000\n\nMerge #4325\n\n4325: Fix column conversion for supplementary plane characters r=matklad a=lnicola\n\nFixes https://github.com/rust-analyzer/rust-analyzer/pull/4276#issuecomment-623079855.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3", "html_url": "https://github.com/rust-lang/rust/commit/a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8803e748a627f2ff45d441e70b3deda3f038c40e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8803e748a627f2ff45d441e70b3deda3f038c40e", "html_url": "https://github.com/rust-lang/rust/commit/8803e748a627f2ff45d441e70b3deda3f038c40e"}, {"sha": "1d794e859028a71d182daf2fa5826aeeeab2876b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d794e859028a71d182daf2fa5826aeeeab2876b", "html_url": "https://github.com/rust-lang/rust/commit/1d794e859028a71d182daf2fa5826aeeeab2876b"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "c7c744fce1ef8db144f1d07ab1bd6cb03b99539d", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=a4778ddb7a00f552a8e653bbf56ae9fd69cfe1d3", "patch": "@@ -31,9 +31,19 @@ pub(crate) struct Utf16Char {\n }\n \n impl Utf16Char {\n+    /// Returns the length in 8-bit UTF-8 code units.\n     fn len(&self) -> TextSize {\n         self.end - self.start\n     }\n+\n+    /// Returns the length in 16-bit UTF-16 code units.\n+    fn len_utf16(&self) -> usize {\n+        if self.len() == TextSize::from(4) {\n+            2\n+        } else {\n+            1\n+        }\n+    }\n }\n \n impl LineIndex {\n@@ -110,7 +120,7 @@ impl LineIndex {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             for c in utf16_chars {\n                 if c.end <= col {\n-                    res -= usize::from(c.len()) - 1;\n+                    res -= usize::from(c.len()) - c.len_utf16();\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n@@ -125,7 +135,7 @@ impl LineIndex {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             for c in utf16_chars {\n                 if col > u32::from(c.start) {\n-                    col += u32::from(c.len()) - 1;\n+                    col += u32::from(c.len()) - c.len_utf16() as u32;\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n@@ -204,6 +214,9 @@ const C: char = '\u30e1';\n \n         // UTF-16 to UTF-8\n         assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(21));\n+\n+        let col_index = LineIndex::new(\"a\ud801\udc0fb\");\n+        assert_eq!(col_index.utf16_to_utf8_col(0, 3), TextSize::from(5));\n     }\n \n     #[test]"}]}