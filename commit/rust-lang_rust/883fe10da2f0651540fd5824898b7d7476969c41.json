{"sha": "883fe10da2f0651540fd5824898b7d7476969c41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4M2ZlMTBkYTJmMDY1MTU0MGZkNTgyNDg5OGI3ZDc0NzY5NjljNDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T07:51:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-07T07:51:55Z"}, "message": "Rollup merge of #65884 - Centril:non-hardcoded-abis, r=petrochenkov\n\nsyntax: ABI-oblivious grammar\n\nThis PR has the following effects:\n\n1. `extern $lit` is now legal where `$lit:literal` and `$lit` is substituted for a string literal.\n\n2. `extern \"abi_that_does_not_exist\"` is now *syntactically* legal whereas before, the set of ABI strings was hard-coded into the grammar of the language. With this PR, the set of ABIs are instead validated and translated during lowering. That seems more appropriate.\n\n3. `ast::FloatTy` is now distinct from `rustc_target::abi::FloatTy`. The former is used substantially more and the translation between them is only necessary in a single place.\n\n4. As a result of 2-3, libsyntax no longer depends on librustc_target, which should improve pipe-lining somewhat.\n\ncc @rust-lang/lang -- the points 1-2 slightly change the definition of the language but in a way which seems consistent with our general principles (in particular wrt. the discussions of turning things into semantic errors). I expect this to be uncontroversial but it's worth letting y'all know. :)\n\nr? @varkor", "tree": {"sha": "c91a306e3e0e4d2f84a8c63245eac622d065eb8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c91a306e3e0e4d2f84a8c63245eac622d065eb8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/883fe10da2f0651540fd5824898b7d7476969c41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdw80bCRBK7hj4Ov3rIwAAdHIIADZPj4GsKD2kUzqDORPvw5B2\nP2YgBVRk2GIwZioFGxHmx92W/8iSsOJVuyq3SOfC4EOjSSEer+e8wfCgqBL1vVF4\nu1gG2dGWz/3Ja5MWwe2DpYBLC5vRw+LIySgyV5gubYVw+79kAyDOTOgvH3L9R6pi\nqxGWClkUdx7kv3tZhLlWtv8FRoOGG4WReBsNmviJ8GVl/kiK2UOPV6f+y0SFhk70\nDJIYonqVlasUlhThd91HOt0Eo86MnRHFuXOZW3tPkxtYP1FjZIlwtr/dYNmbQpD8\nqgsZkkw+PzgmBV9P+FuMeprPNsTWKF5GzyHAT305UTBMlYuvRpTzTX6HVWCiJfc=\n=DQFo\n-----END PGP SIGNATURE-----\n", "payload": "tree c91a306e3e0e4d2f84a8c63245eac622d065eb8f\nparent a3c8572b545124b62dcd16fb4b354f2efe842f35\nparent 55f76cdb2f4d01cf87e47148c706c53a129fa45e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573113115 +0100\ncommitter GitHub <noreply@github.com> 1573113115 +0100\n\nRollup merge of #65884 - Centril:non-hardcoded-abis, r=petrochenkov\n\nsyntax: ABI-oblivious grammar\n\nThis PR has the following effects:\n\n1. `extern $lit` is now legal where `$lit:literal` and `$lit` is substituted for a string literal.\n\n2. `extern \"abi_that_does_not_exist\"` is now *syntactically* legal whereas before, the set of ABI strings was hard-coded into the grammar of the language. With this PR, the set of ABIs are instead validated and translated during lowering. That seems more appropriate.\n\n3. `ast::FloatTy` is now distinct from `rustc_target::abi::FloatTy`. The former is used substantially more and the translation between them is only necessary in a single place.\n\n4. As a result of 2-3, libsyntax no longer depends on librustc_target, which should improve pipe-lining somewhat.\n\ncc @rust-lang/lang -- the points 1-2 slightly change the definition of the language but in a way which seems consistent with our general principles (in particular wrt. the discussions of turning things into semantic errors). I expect this to be uncontroversial but it's worth letting y'all know. :)\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/883fe10da2f0651540fd5824898b7d7476969c41", "html_url": "https://github.com/rust-lang/rust/commit/883fe10da2f0651540fd5824898b7d7476969c41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/883fe10da2f0651540fd5824898b7d7476969c41/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3c8572b545124b62dcd16fb4b354f2efe842f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c8572b545124b62dcd16fb4b354f2efe842f35", "html_url": "https://github.com/rust-lang/rust/commit/a3c8572b545124b62dcd16fb4b354f2efe842f35"}, {"sha": "55f76cdb2f4d01cf87e47148c706c53a129fa45e", "url": "https://api.github.com/repos/rust-lang/rust/commits/55f76cdb2f4d01cf87e47148c706c53a129fa45e", "html_url": "https://github.com/rust-lang/rust/commit/55f76cdb2f4d01cf87e47148c706c53a129fa45e"}], "stats": {"total": 986, "additions": 520, "deletions": 466}, "files": [{"sha": "0f770f3eadbea34a6df31f41aaa9e8e98a84c01c", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -3762,7 +3762,6 @@ dependencies = [\n  \"rustc\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n- \"rustc_target\",\n  \"serde_json\",\n  \"syntax\",\n  \"syntax_pos\",\n@@ -4362,7 +4361,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n- \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.0.0\",\n@@ -4380,7 +4378,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n- \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.0.0\","}, {"sha": "f40b892a06bf24230a9132ede389d318023a8610", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -2336,6 +2336,7 @@ the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n     E0657, // `impl Trait` can only capture lifetimes bound at the fn level\n     E0687, // in-band lifetimes cannot be used in `fn`/`Fn` syntax\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n+    E0703, // invalid ABI\n //  E0707, // multiple elided lifetimes used in arguments of `async fn`\n     E0708, // `async` non-`move` closures with parameters are not currently\n            // supported"}, {"sha": "6344c7a233ca40440eca0fb802c78c60189ba30d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1216,7 +1216,7 @@ impl<'a> LoweringContext<'a> {\n                                     ImplTraitContext::disallowed(),\n                                 ),\n                                 unsafety: this.lower_unsafety(f.unsafety),\n-                                abi: f.abi,\n+                                abi: this.lower_abi(f.abi),\n                                 decl: this.lower_fn_decl(&f.decl, None, false, None),\n                                 param_names: this.lower_fn_params_to_names(&f.decl),\n                             }))"}, {"sha": "5fe463d783f4b53c578bac39d16d7b51a1c443ee", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -12,6 +12,7 @@ use crate::hir::def::{Res, DefKind};\n use crate::util::nodemap::NodeMap;\n \n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_target::spec::abi;\n \n use std::collections::BTreeSet;\n use smallvec::SmallVec;\n@@ -735,7 +736,7 @@ impl LoweringContext<'_> {\n \n     fn lower_foreign_mod(&mut self, fm: &ForeignMod) -> hir::ForeignMod {\n         hir::ForeignMod {\n-            abi: fm.abi,\n+            abi: self.lower_abi(fm.abi),\n             items: fm.items\n                 .iter()\n                 .map(|x| self.lower_foreign_item(x))\n@@ -1291,10 +1292,30 @@ impl LoweringContext<'_> {\n             unsafety: self.lower_unsafety(h.unsafety),\n             asyncness: self.lower_asyncness(h.asyncness.node),\n             constness: self.lower_constness(h.constness),\n-            abi: h.abi,\n+            abi: self.lower_abi(h.abi),\n         }\n     }\n \n+    pub(super) fn lower_abi(&mut self, abi: Abi) -> abi::Abi {\n+        abi::lookup(&abi.symbol.as_str()).unwrap_or_else(|| {\n+            self.error_on_invalid_abi(abi);\n+            abi::Abi::Rust\n+        })\n+    }\n+\n+    fn error_on_invalid_abi(&self, abi: Abi) {\n+        struct_span_err!(\n+            self.sess,\n+            abi.span,\n+            E0703,\n+            \"invalid ABI: found `{}`\",\n+            abi.symbol\n+        )\n+        .span_label(abi.span, \"invalid ABI\")\n+        .help(&format!(\"valid ABIs: {}\", abi::all_names().join(\", \")))\n+        .emit();\n+    }\n+\n     pub(super) fn lower_unsafety(&mut self, u: Unsafety) -> hir::Unsafety {\n         match u {\n             Unsafety::Unsafe => hir::Unsafety::Unsafe,"}, {"sha": "2201c4b0980b3ba07c81f92771f17134ef311832", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -124,7 +124,6 @@ for ::syntax::attr::StabilityLevel {\n \n impl_stable_hash_for!(struct ::syntax::attr::RustcDeprecation { since, reason, suggestion });\n \n-\n impl_stable_hash_for!(enum ::syntax::attr::IntType {\n     SignedInt(int_ty),\n     UnsignedInt(uint_ty)\n@@ -136,6 +135,11 @@ impl_stable_hash_for!(enum ::syntax::ast::LitIntType {\n     Unsuffixed\n });\n \n+impl_stable_hash_for!(enum ::syntax::ast::LitFloatType {\n+    Suffixed(float_ty),\n+    Unsuffixed\n+});\n+\n impl_stable_hash_for!(struct ::syntax::ast::Lit {\n     kind,\n     token,\n@@ -148,8 +152,7 @@ impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n     Byte(value),\n     Char(value),\n     Int(value, lit_int_type),\n-    Float(value, float_ty),\n-    FloatUnsuffixed(value),\n+    Float(value, lit_float_type),\n     Bool(value),\n     Err(value)\n });\n@@ -159,6 +162,7 @@ impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n impl_stable_hash_for!(enum ::syntax::ast::IntTy { Isize, I8, I16, I32, I64, I128 });\n impl_stable_hash_for!(enum ::syntax::ast::UintTy { Usize, U8, U16, U32, U64, U128 });\n impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });\n+impl_stable_hash_for!(enum ::rustc_target::abi::FloatTy { F32, F64 });\n impl_stable_hash_for!(enum ::syntax::ast::Unsafety { Unsafe, Normal });\n impl_stable_hash_for!(enum ::syntax::ast::Constness { Const, NotConst });\n impl_stable_hash_for!(enum ::syntax::ast::Defaultness { Default, Final });"}, {"sha": "60aab6b6aa924b380c687c193368de220cd32960", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -538,7 +538,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             ty::Uint(ity) => {\n                 scalar(Int(Integer::from_attr(dl, attr::UnsignedInt(ity)), false))\n             }\n-            ty::Float(fty) => scalar(Float(fty)),\n+            ty::Float(fty) => scalar(Float(match fty {\n+                ast::FloatTy::F32 => FloatTy::F32,\n+                ast::FloatTy::F64 => FloatTy::F64,\n+            })),\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n                 ptr.valid_range = 1..=*ptr.valid_range.end();"}, {"sha": "ddbba972e51a7e2f22306f12bc2d920d2b903530", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -12,7 +12,6 @@ use rustc::ty::{self, Const, Instance, Ty, TyCtxt};\n use rustc::{bug, hir};\n use std::fmt::Write;\n use std::iter;\n-use syntax::ast;\n \n /// Same as `unique_type_name()` but with the result pushed onto the given\n /// `output` parameter.\n@@ -39,20 +38,9 @@ impl DefPathBasedNames<'tcx> {\n             ty::Char => output.push_str(\"char\"),\n             ty::Str => output.push_str(\"str\"),\n             ty::Never => output.push_str(\"!\"),\n-            ty::Int(ast::IntTy::Isize) => output.push_str(\"isize\"),\n-            ty::Int(ast::IntTy::I8) => output.push_str(\"i8\"),\n-            ty::Int(ast::IntTy::I16) => output.push_str(\"i16\"),\n-            ty::Int(ast::IntTy::I32) => output.push_str(\"i32\"),\n-            ty::Int(ast::IntTy::I64) => output.push_str(\"i64\"),\n-            ty::Int(ast::IntTy::I128) => output.push_str(\"i128\"),\n-            ty::Uint(ast::UintTy::Usize) => output.push_str(\"usize\"),\n-            ty::Uint(ast::UintTy::U8) => output.push_str(\"u8\"),\n-            ty::Uint(ast::UintTy::U16) => output.push_str(\"u16\"),\n-            ty::Uint(ast::UintTy::U32) => output.push_str(\"u32\"),\n-            ty::Uint(ast::UintTy::U64) => output.push_str(\"u64\"),\n-            ty::Uint(ast::UintTy::U128) => output.push_str(\"u128\"),\n-            ty::Float(ast::FloatTy::F32) => output.push_str(\"f32\"),\n-            ty::Float(ast::FloatTy::F64) => output.push_str(\"f64\"),\n+            ty::Int(ty) => output.push_str(ty.name_str()),\n+            ty::Uint(ty) => output.push_str(ty.name_str()),\n+            ty::Float(ty) => output.push_str(ty.name_str()),\n             ty::Adt(adt_def, substs) => {\n                 self.push_def_path(adt_def.did, output);\n                 self.push_generic_params(substs, iter::empty(), output, debug);"}, {"sha": "4c75e474011384ef432c1b421a5220d8f0d90f0d", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -466,9 +466,9 @@ pub trait PrettyPrinter<'tcx>:\n         match ty.kind {\n             ty::Bool => p!(write(\"bool\")),\n             ty::Char => p!(write(\"char\")),\n-            ty::Int(t) => p!(write(\"{}\", t.ty_to_string())),\n-            ty::Uint(t) => p!(write(\"{}\", t.ty_to_string())),\n-            ty::Float(t) => p!(write(\"{}\", t.ty_to_string())),\n+            ty::Int(t) => p!(write(\"{}\", t.name_str())),\n+            ty::Uint(t) => p!(write(\"{}\", t.name_str())),\n+            ty::Float(t) => p!(write(\"{}\", t.name_str())),\n             ty::RawPtr(ref tm) => {\n                 p!(write(\"*{} \", match tm.mutbl {\n                     hir::MutMutable => \"mut\",\n@@ -895,10 +895,11 @@ pub trait PrettyPrinter<'tcx>:\n                 let bit_size = Integer::from_attr(&self.tcx(), UnsignedInt(*ui)).size();\n                 let max = truncate(u128::max_value(), bit_size);\n \n+                let ui_str = ui.name_str();\n                 if data == max {\n-                    p!(write(\"std::{}::MAX\", ui))\n+                    p!(write(\"std::{}::MAX\", ui_str))\n                 } else {\n-                    p!(write(\"{}{}\", data, ui))\n+                    p!(write(\"{}{}\", data, ui_str))\n                 };\n             },\n             (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Int(i)) => {\n@@ -911,10 +912,11 @@ pub trait PrettyPrinter<'tcx>:\n                 let size = self.tcx().layout_of(ty::ParamEnv::empty().and(ty))\n                     .unwrap()\n                     .size;\n+                let i_str = i.name_str();\n                 match data {\n-                    d if d == min => p!(write(\"std::{}::MIN\", i)),\n-                    d if d == max => p!(write(\"std::{}::MAX\", i)),\n-                    _ => p!(write(\"{}{}\", sign_extend(data, size) as i128, i))\n+                    d if d == min => p!(write(\"std::{}::MIN\", i_str)),\n+                    d if d == max => p!(write(\"std::{}::MAX\", i_str)),\n+                    _ => p!(write(\"{}{}\", sign_extend(data, size) as i128, i_str))\n                 }\n             },\n             (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Char) =>"}, {"sha": "5f18bb1700c1445b6809cdbf30dacb4c6b83c61f", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -843,13 +843,13 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n         ty::Bool => (\"bool\", DW_ATE_boolean),\n         ty::Char => (\"char\", DW_ATE_unsigned_char),\n         ty::Int(int_ty) => {\n-            (int_ty.ty_to_string(), DW_ATE_signed)\n+            (int_ty.name_str(), DW_ATE_signed)\n         },\n         ty::Uint(uint_ty) => {\n-            (uint_ty.ty_to_string(), DW_ATE_unsigned)\n+            (uint_ty.name_str(), DW_ATE_unsigned)\n         },\n         ty::Float(float_ty) => {\n-            (float_ty.ty_to_string(), DW_ATE_float)\n+            (float_ty.name_str(), DW_ATE_float)\n         },\n         _ => bug!(\"debuginfo::basic_type_metadata - t is invalid type\")\n     };"}, {"sha": "a4c3b42f51e9e5e2e4b73b862e907e6f9022ab0f", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -18,8 +18,8 @@ use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n use rustc::mir::interpret::GlobalId;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n-use syntax::ast::{self, FloatTy};\n-use rustc_target::abi::HasDataLayout;\n+use rustc_target::abi::{FloatTy, HasDataLayout};\n+use syntax::ast;\n \n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::traits::*;\n@@ -1335,7 +1335,7 @@ fn generic_simd_intrinsic(\n             },\n             ty::Float(f) => {\n                 return_error!(\"unsupported element type `{}` of floating-point vector `{}`\",\n-                              f, in_ty);\n+                              f.name_str(), in_ty);\n             },\n             _ => {\n                 return_error!(\"`{}` is not a floating-point type\", in_ty);"}, {"sha": "f40b942b1e3229282a35ccea6101984df91b0b7e", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -37,9 +37,9 @@ pub fn push_debuginfo_type_name<'tcx>(\n         ty::Char => output.push_str(\"char\"),\n         ty::Str => output.push_str(\"str\"),\n         ty::Never => output.push_str(\"!\"),\n-        ty::Int(int_ty) => output.push_str(int_ty.ty_to_string()),\n-        ty::Uint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n-        ty::Float(float_ty) => output.push_str(float_ty.ty_to_string()),\n+        ty::Int(int_ty) => output.push_str(int_ty.name_str()),\n+        ty::Uint(uint_ty) => output.push_str(uint_ty.name_str()),\n+        ty::Float(float_ty) => output.push_str(float_ty.name_str()),\n         ty::Foreign(def_id) => push_item_name(tcx, def_id, qualified, output),\n         ty::Adt(def, substs) => {\n             push_item_name(tcx, def.did, qualified, output);"}, {"sha": "35b93db1d6590db12d7ffec982d186a77e18277b", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -27,7 +27,6 @@ rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_passes = { path = \"../librustc_passes\" }\n-rustc_target = { path = \"../librustc_target\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_errors = { path = \"../librustc_errors\" }\n@@ -36,3 +35,6 @@ rustc_privacy = { path = \"../librustc_privacy\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n tempfile = \"3.0.5\"\n once_cell = \"1\"\n+\n+[dev-dependencies]\n+rustc_target = { path = \"../librustc_target\" }"}, {"sha": "65e0940920bd741a3babfa0f4e7027c83aca450a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -68,7 +68,7 @@ fn lint_overflowing_range_endpoint<'a, 'tcx>(\n     max: u128,\n     expr: &'tcx hir::Expr,\n     parent_expr: &'tcx hir::Expr,\n-    ty: impl std::fmt::Debug,\n+    ty: &str,\n ) -> bool {\n     // We only want to handle exclusive (`..`) ranges,\n     // which are represented as `ExprKind::Struct`.\n@@ -83,15 +83,15 @@ fn lint_overflowing_range_endpoint<'a, 'tcx>(\n             let mut err = cx.struct_span_lint(\n                 OVERFLOWING_LITERALS,\n                 parent_expr.span,\n-                &format!(\"range endpoint is out of range for `{:?}`\", ty),\n+                &format!(\"range endpoint is out of range for `{}`\", ty),\n             );\n             if let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) {\n                 use ast::{LitKind, LitIntType};\n                 // We need to preserve the literal's suffix,\n                 // as it may determine typing information.\n                 let suffix = match lit.node {\n-                    LitKind::Int(_, LitIntType::Signed(s)) => format!(\"{}\", s),\n-                    LitKind::Int(_, LitIntType::Unsigned(s)) => format!(\"{}\", s),\n+                    LitKind::Int(_, LitIntType::Signed(s)) => format!(\"{}\", s.name_str()),\n+                    LitKind::Int(_, LitIntType::Unsigned(s)) => format!(\"{}\", s.name_str()),\n                     LitKind::Int(_, LitIntType::Unsuffixed) => \"\".to_owned(),\n                     _ => bug!(),\n                 };\n@@ -161,11 +161,11 @@ fn report_bin_hex_error(\n     let (t, actually) = match ty {\n         attr::IntType::SignedInt(t) => {\n             let actually = sign_extend(val, size) as i128;\n-            (format!(\"{:?}\", t), actually.to_string())\n+            (t.name_str(), actually.to_string())\n         }\n         attr::IntType::UnsignedInt(t) => {\n             let actually = truncate(val, size);\n-            (format!(\"{:?}\", t), actually.to_string())\n+            (t.name_str(), actually.to_string())\n         }\n     };\n     let mut err = cx.struct_span_lint(\n@@ -204,7 +204,7 @@ fn report_bin_hex_error(\n //  - `uX` => `uY`\n //\n // No suggestion for: `isize`, `usize`.\n-fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<String> {\n+fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<&'static str> {\n     use syntax::ast::IntTy::*;\n     use syntax::ast::UintTy::*;\n     macro_rules! find_fit {\n@@ -215,10 +215,10 @@ fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<String> {\n                 match $ty {\n                     $($type => {\n                         $(if !negative && val <= uint_ty_range($utypes).1 {\n-                            return Some(format!(\"{:?}\", $utypes))\n+                            return Some($utypes.name_str())\n                         })*\n                         $(if val <= int_ty_range($itypes).1 as u128 + _neg {\n-                            return Some(format!(\"{:?}\", $itypes))\n+                            return Some($itypes.name_str())\n                         })*\n                         None\n                     },)+\n@@ -281,7 +281,7 @@ fn lint_int_literal<'a, 'tcx>(\n         if let Node::Expr(par_e) = cx.tcx.hir().get(par_id) {\n             if let hir::ExprKind::Struct(..) = par_e.kind {\n                 if is_range_literal(cx.sess(), par_e)\n-                    && lint_overflowing_range_endpoint(cx, lit, v, max, e, par_e, t)\n+                    && lint_overflowing_range_endpoint(cx, lit, v, max, e, par_e, t.name_str())\n                 {\n                     // The overflowing literal lint was overridden.\n                     return;\n@@ -292,7 +292,7 @@ fn lint_int_literal<'a, 'tcx>(\n         cx.span_lint(\n             OVERFLOWING_LITERALS,\n             e.span,\n-            &format!(\"literal out of range for `{:?}`\", t),\n+            &format!(\"literal out of range for `{}`\", t.name_str()),\n         );\n     }\n }\n@@ -338,6 +338,7 @@ fn lint_uint_literal<'a, 'tcx>(\n                 }\n                 hir::ExprKind::Struct(..)\n                     if is_range_literal(cx.sess(), par_e) => {\n+                        let t = t.name_str();\n                         if lint_overflowing_range_endpoint(cx, lit, lit_val, max, e, par_e, t) {\n                             // The overflowing literal lint was overridden.\n                             return;\n@@ -353,7 +354,7 @@ fn lint_uint_literal<'a, 'tcx>(\n         cx.span_lint(\n             OVERFLOWING_LITERALS,\n             e.span,\n-            &format!(\"literal out of range for `{:?}`\", t),\n+            &format!(\"literal out of range for `{}`\", t.name_str()),\n         );\n     }\n }\n@@ -379,8 +380,7 @@ fn lint_literal<'a, 'tcx>(\n         }\n         ty::Float(t) => {\n             let is_infinite = match lit.node {\n-                ast::LitKind::Float(v, _) |\n-                ast::LitKind::FloatUnsuffixed(v) => {\n+                ast::LitKind::Float(v, _) => {\n                     match t {\n                         ast::FloatTy::F32 => v.as_str().parse().map(f32::is_infinite),\n                         ast::FloatTy::F64 => v.as_str().parse().map(f64::is_infinite),\n@@ -389,9 +389,11 @@ fn lint_literal<'a, 'tcx>(\n                 _ => bug!(),\n             };\n             if is_infinite == Ok(true) {\n-                cx.span_lint(OVERFLOWING_LITERALS,\n-                             e.span,\n-                             &format!(\"literal out of range for `{:?}`\", t));\n+                cx.span_lint(\n+                    OVERFLOWING_LITERALS,\n+                    e.span,\n+                    &format!(\"literal out of range for `{}`\", t.name_str()),\n+                );\n             }\n         }\n         _ => {}"}, {"sha": "b9e75a576cad877ba5c03b27488e29fb2ad2f75a", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -45,10 +45,7 @@ crate fn lit_to_const<'tcx>(\n             trunc(n as u128)?\n         },\n         LitKind::Int(n, _) => trunc(n)?,\n-        LitKind::Float(n, fty) => {\n-            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n-        }\n-        LitKind::FloatUnsuffixed(n) => {\n+        LitKind::Float(n, _) => {\n             let fty = match ty.kind {\n                 ty::Float(fty) => fty,\n                 _ => bug!()"}, {"sha": "2d93585e50ee471a47a8883a4fc3e7fe82554b17", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -13,7 +13,6 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n-rustc_target = { path = \"../librustc_target\" }\n serde_json = \"1\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "019e92717b5d67e8b91970a4f7e4b353a92b22c1", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -32,7 +32,7 @@ use rls_data::{SigElement, Signature};\n use rustc::hir::def::{Res, DefKind};\n use syntax::ast::{self, NodeId};\n use syntax::print::pprust;\n-\n+use syntax_pos::sym;\n \n pub fn item_signature(item: &ast::Item, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n@@ -157,6 +157,12 @@ fn text_sig(text: String) -> Signature {\n     }\n }\n \n+fn push_abi(text: &mut String, abi: ast::Abi) {\n+    if abi.symbol != sym::Rust {\n+        text.push_str(&format!(\"extern \\\"{}\\\" \", abi.symbol));\n+    }\n+}\n+\n impl Sig for ast::Ty {\n     fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n@@ -231,11 +237,7 @@ impl Sig for ast::Ty {\n                 if f.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if f.abi != rustc_target::spec::abi::Abi::Rust {\n-                    text.push_str(\"extern\");\n-                    text.push_str(&f.abi.to_string());\n-                    text.push(' ');\n-                }\n+                push_abi(&mut text, f.abi);\n                 text.push_str(\"fn(\");\n \n                 let mut defs = vec![];\n@@ -385,11 +387,7 @@ impl Sig for ast::Item {\n                 if header.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if header.abi != rustc_target::spec::abi::Abi::Rust {\n-                    text.push_str(\"extern\");\n-                    text.push_str(&header.abi.to_string());\n-                    text.push(' ');\n-                }\n+                push_abi(&mut text, header.abi);\n                 text.push_str(\"fn \");\n \n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n@@ -948,11 +946,7 @@ fn make_method_signature(\n     if m.header.unsafety == ast::Unsafety::Unsafe {\n         text.push_str(\"unsafe \");\n     }\n-    if m.header.abi != rustc_target::spec::abi::Abi::Rust {\n-        text.push_str(\"extern\");\n-        text.push_str(&m.header.abi.to_string());\n-        text.push(' ');\n-    }\n+    push_abi(&mut text, m.header.abi);\n     text.push_str(\"fn \");\n \n     let mut sig = name_and_generics(text, 0, generics, id, ident, scx)?;"}, {"sha": "e58caed0c99dda623a4ec0f0d0fa1ddb9b1b8067", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -3,11 +3,9 @@ pub use Primitive::*;\n \n use crate::spec::Target;\n \n-use std::fmt;\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n \n use rustc_index::vec::{Idx, IndexVec};\n-use syntax_pos::symbol::{sym, Symbol};\n use syntax_pos::Span;\n \n pub mod call;\n@@ -534,49 +532,13 @@ impl Integer {\n     }\n }\n \n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n-         PartialOrd, Ord)]\n+         PartialOrd, Ord, Debug)]\n pub enum FloatTy {\n     F32,\n     F64,\n }\n \n-impl fmt::Debug for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n-impl FloatTy {\n-    pub fn ty_to_string(self) -> &'static str {\n-        match self {\n-            FloatTy::F32 => \"f32\",\n-            FloatTy::F64 => \"f64\",\n-        }\n-    }\n-\n-    pub fn to_symbol(self) -> Symbol {\n-        match self {\n-            FloatTy::F32 => sym::f32,\n-            FloatTy::F64 => sym::f64,\n-        }\n-    }\n-\n-    pub fn bit_width(self) -> usize {\n-        match self {\n-            FloatTy::F32 => 32,\n-            FloatTy::F64 => 64,\n-        }\n-    }\n-}\n-\n /// Fundamental unit of memory access and layout.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Primitive {"}, {"sha": "fe2c7a200d202a7cb51432b596b1bc636b3d5de6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -3757,8 +3757,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 });\n                 opt_ty.unwrap_or_else(|| self.next_int_var())\n             }\n-            ast::LitKind::Float(_, t) => tcx.mk_mach_float(t),\n-            ast::LitKind::FloatUnsuffixed(_) => {\n+            ast::LitKind::Float(_, ast::LitFloatType::Suffixed(t)) => tcx.mk_mach_float(t),\n+            ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) => {\n                 let opt_ty = expected.to_option(self).and_then(|ty| {\n                     match ty.kind {\n                         ty::Float(_) => Some(ty),"}, {"sha": "3e17e7949ea990b0ab461de0ca64cf2978ebd460", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -20,5 +20,4 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n-rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "67d1acbccfbe5beca1ca9dadde9cdf375899e67e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 73, "deletions": 42, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -22,7 +22,6 @@ pub use GenericArgs::*;\n pub use UnsafeSource::*;\n pub use crate::util::parser::ExprPrecedence;\n \n-pub use rustc_target::abi::FloatTy;\n pub use syntax_pos::symbol::{Ident, Symbol as Name};\n \n use crate::parse::token::{self, DelimToken};\n@@ -38,7 +37,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_index::vec::Idx;\n use rustc_serialize::{self, Decoder, Encoder};\n-use rustc_target::spec::abi::Abi;\n \n #[cfg(target_arch = \"x86_64\")]\n use rustc_data_structures::static_assert_size;\n@@ -1401,7 +1399,7 @@ pub struct Lit {\n \n // Clippy uses Hash and PartialEq\n /// Type of the integer literal based on provided suffix.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n pub enum LitIntType {\n     /// e.g. `42_i32`.\n     Signed(IntTy),\n@@ -1411,6 +1409,15 @@ pub enum LitIntType {\n     Unsuffixed,\n }\n \n+/// Type of the float literal based on provided suffix.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+pub enum LitFloatType {\n+    /// A float literal with a suffix (`1f32` or `1E10f32`).\n+    Suffixed(FloatTy),\n+    /// A float literal without a suffix (`1.0 or 1.0E10`).\n+    Unsuffixed,\n+}\n+\n /// Literal kind.\n ///\n /// E.g., `\"foo\"`, `42`, `12.34`, or `bool`.\n@@ -1428,9 +1435,7 @@ pub enum LitKind {\n     /// An integer literal (`1`).\n     Int(u128, LitIntType),\n     /// A float literal (`1f64` or `1E10f64`).\n-    Float(Symbol, FloatTy),\n-    /// A float literal without a suffix (`1.0 or 1.0E10`).\n-    FloatUnsuffixed(Symbol),\n+    Float(Symbol, LitFloatType),\n     /// A boolean literal.\n     Bool(bool),\n     /// Placeholder for a literal that wasn't well-formed in some way.\n@@ -1457,7 +1462,7 @@ impl LitKind {\n     /// Returns `true` if this is a numeric literal.\n     pub fn is_numeric(&self) -> bool {\n         match *self {\n-            LitKind::Int(..) | LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => true,\n+            LitKind::Int(..) | LitKind::Float(..) => true,\n             _ => false,\n         }\n     }\n@@ -1474,14 +1479,14 @@ impl LitKind {\n             // suffixed variants\n             LitKind::Int(_, LitIntType::Signed(..))\n             | LitKind::Int(_, LitIntType::Unsigned(..))\n-            | LitKind::Float(..) => true,\n+            | LitKind::Float(_, LitFloatType::Suffixed(..)) => true,\n             // unsuffixed variants\n             LitKind::Str(..)\n             | LitKind::ByteStr(..)\n             | LitKind::Byte(..)\n             | LitKind::Char(..)\n             | LitKind::Int(_, LitIntType::Unsuffixed)\n-            | LitKind::FloatUnsuffixed(..)\n+            | LitKind::Float(_, LitFloatType::Unsuffixed)\n             | LitKind::Bool(..)\n             | LitKind::Err(..) => false,\n         }\n@@ -1553,7 +1558,36 @@ pub enum ImplItemKind {\n     Macro(Mac),\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+pub enum FloatTy {\n+    F32,\n+    F64,\n+}\n+\n+impl FloatTy {\n+    pub fn name_str(self) -> &'static str {\n+        match self {\n+            FloatTy::F32 => \"f32\",\n+            FloatTy::F64 => \"f64\",\n+        }\n+    }\n+\n+    pub fn name(self) -> Symbol {\n+        match self {\n+            FloatTy::F32 => sym::f32,\n+            FloatTy::F64 => sym::f64,\n+        }\n+    }\n+\n+    pub fn bit_width(self) -> usize {\n+        match self {\n+            FloatTy::F32 => 32,\n+            FloatTy::F64 => 64,\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum IntTy {\n     Isize,\n     I8,\n@@ -1563,20 +1597,8 @@ pub enum IntTy {\n     I128,\n }\n \n-impl fmt::Debug for IntTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for IntTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n impl IntTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n+    pub fn name_str(&self) -> &'static str {\n         match *self {\n             IntTy::Isize => \"isize\",\n             IntTy::I8 => \"i8\",\n@@ -1587,7 +1609,7 @@ impl IntTy {\n         }\n     }\n \n-    pub fn to_symbol(&self) -> Symbol {\n+    pub fn name(&self) -> Symbol {\n         match *self {\n             IntTy::Isize => sym::isize,\n             IntTy::I8 => sym::i8,\n@@ -1602,7 +1624,7 @@ impl IntTy {\n         // Cast to a `u128` so we can correctly print `INT128_MIN`. All integral types\n         // are parsed as `u128`, so we wouldn't want to print an extra negative\n         // sign.\n-        format!(\"{}{}\", val as u128, self.ty_to_string())\n+        format!(\"{}{}\", val as u128, self.name_str())\n     }\n \n     pub fn bit_width(&self) -> Option<usize> {\n@@ -1617,7 +1639,7 @@ impl IntTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy, Debug)]\n pub enum UintTy {\n     Usize,\n     U8,\n@@ -1628,7 +1650,7 @@ pub enum UintTy {\n }\n \n impl UintTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n+    pub fn name_str(&self) -> &'static str {\n         match *self {\n             UintTy::Usize => \"usize\",\n             UintTy::U8 => \"u8\",\n@@ -1639,7 +1661,7 @@ impl UintTy {\n         }\n     }\n \n-    pub fn to_symbol(&self) -> Symbol {\n+    pub fn name(&self) -> Symbol {\n         match *self {\n             UintTy::Usize => sym::usize,\n             UintTy::U8 => sym::u8,\n@@ -1651,7 +1673,7 @@ impl UintTy {\n     }\n \n     pub fn val_to_string(&self, val: u128) -> String {\n-        format!(\"{}{}\", val, self.ty_to_string())\n+        format!(\"{}{}\", val, self.name_str())\n     }\n \n     pub fn bit_width(&self) -> Option<usize> {\n@@ -1666,18 +1688,6 @@ impl UintTy {\n     }\n }\n \n-impl fmt::Debug for UintTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for UintTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n /// A constraint on an associated type (e.g., `A = Bar` in `Foo<A = Bar>` or\n /// `A: TraitA + TraitB` in `Foo<A: TraitA + TraitB>`).\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -2358,6 +2368,27 @@ impl Item {\n     }\n }\n \n+/// A reference to an ABI.\n+///\n+/// In AST our notion of an ABI is still syntactic unlike in `rustc_target::spec::abi::Abi`.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, PartialEq)]\n+pub struct Abi {\n+    pub symbol: Symbol,\n+    pub span: Span,\n+}\n+\n+impl Abi {\n+    pub fn new(symbol: Symbol, span: Span) -> Self {\n+        Self { symbol, span }\n+    }\n+}\n+\n+impl Default for Abi {\n+    fn default() -> Self {\n+        Self::new(sym::Rust, DUMMY_SP)\n+    }\n+}\n+\n /// A function header.\n ///\n /// All the information between the visibility and the name of the function is\n@@ -2376,7 +2407,7 @@ impl Default for FnHeader {\n             unsafety: Unsafety::Normal,\n             asyncness: dummy_spanned(IsAsync::NotAsync),\n             constness: dummy_spanned(Constness::NotConst),\n-            abi: Abi::Rust,\n+            abi: Abi::default(),\n         }\n     }\n }"}, {"sha": "c23c8d65a7f23c6e36a0617f4e1ab5fa0519eda6", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -540,6 +540,5 @@ equivalent in Rust would be to use macros directly.\n     E0630,\n     E0693, // incorrect `repr(align)` attribute format\n //  E0694, // an unknown tool name found in scoped attributes\n-    E0703, // invalid ABI\n     E0717, // rustc_promotable without stability attribute\n }"}, {"sha": "213e96805246c4d8d6e58af01736a5471f052b62", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -18,7 +18,6 @@ use crate::tokenstream::TokenTree;\n \n use errors::{Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_target::spec::abi::Abi;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::debug;\n \n@@ -192,62 +191,70 @@ macro_rules! gate_feature_post {\n }\n \n impl<'a> PostExpansionVisitor<'a> {\n-    fn check_abi(&self, abi: Abi, span: Span) {\n-        match abi {\n-            Abi::RustIntrinsic => {\n+    fn check_abi(&self, abi: ast::Abi) {\n+        let ast::Abi { symbol, span } = abi;\n+\n+        match &*symbol.as_str() {\n+            // Stable\n+            \"Rust\" |\n+            \"C\" |\n+            \"cdecl\" |\n+            \"stdcall\" |\n+            \"fastcall\" |\n+            \"aapcs\" |\n+            \"win64\" |\n+            \"sysv64\" |\n+            \"system\" => {}\n+            \"rust-intrinsic\" => {\n                 gate_feature_post!(&self, intrinsics, span,\n                                    \"intrinsics are subject to change\");\n             },\n-            Abi::PlatformIntrinsic => {\n+            \"platform-intrinsic\" => {\n                 gate_feature_post!(&self, platform_intrinsics, span,\n                                    \"platform intrinsics are experimental and possibly buggy\");\n             },\n-            Abi::Vectorcall => {\n+            \"vectorcall\" => {\n                 gate_feature_post!(&self, abi_vectorcall, span,\n                                    \"vectorcall is experimental and subject to change\");\n             },\n-            Abi::Thiscall => {\n+            \"thiscall\" => {\n                 gate_feature_post!(&self, abi_thiscall, span,\n                                    \"thiscall is experimental and subject to change\");\n             },\n-            Abi::RustCall => {\n+            \"rust-call\" => {\n                 gate_feature_post!(&self, unboxed_closures, span,\n                                    \"rust-call ABI is subject to change\");\n             },\n-            Abi::PtxKernel => {\n+            \"ptx-kernel\" => {\n                 gate_feature_post!(&self, abi_ptx, span,\n                                    \"PTX ABIs are experimental and subject to change\");\n             },\n-            Abi::Unadjusted => {\n+            \"unadjusted\" => {\n                 gate_feature_post!(&self, abi_unadjusted, span,\n                                    \"unadjusted ABI is an implementation detail and perma-unstable\");\n             },\n-            Abi::Msp430Interrupt => {\n+            \"msp430-interrupt\" => {\n                 gate_feature_post!(&self, abi_msp430_interrupt, span,\n                                    \"msp430-interrupt ABI is experimental and subject to change\");\n             },\n-            Abi::X86Interrupt => {\n+            \"x86-interrupt\" => {\n                 gate_feature_post!(&self, abi_x86_interrupt, span,\n                                    \"x86-interrupt ABI is experimental and subject to change\");\n             },\n-            Abi::AmdGpuKernel => {\n+            \"amdgpu-kernel\" => {\n                 gate_feature_post!(&self, abi_amdgpu_kernel, span,\n                                    \"amdgpu-kernel ABI is experimental and subject to change\");\n             },\n-            Abi::EfiApi => {\n+            \"efiapi\" => {\n                 gate_feature_post!(&self, abi_efiapi, span,\n                                    \"efiapi ABI is experimental and subject to change\");\n             },\n-            // Stable\n-            Abi::Cdecl |\n-            Abi::Stdcall |\n-            Abi::Fastcall |\n-            Abi::Aapcs |\n-            Abi::Win64 |\n-            Abi::SysV64 |\n-            Abi::Rust |\n-            Abi::C |\n-            Abi::System => {}\n+            abi => {\n+                self.parse_sess.span_diagnostic.delay_span_bug(\n+                    span,\n+                    &format!(\"unrecognized ABI not caught in lowering: {}\", abi),\n+                )\n+            }\n         }\n     }\n \n@@ -373,7 +380,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_item(&mut self, i: &'a ast::Item) {\n         match i.kind {\n             ast::ItemKind::ForeignMod(ref foreign_module) => {\n-                self.check_abi(foreign_module.abi, i.span);\n+                self.check_abi(foreign_module.abi);\n             }\n \n             ast::ItemKind::Fn(..) => {\n@@ -503,7 +510,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_ty(&mut self, ty: &'a ast::Ty) {\n         match ty.kind {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n-                self.check_abi(bare_fn_ty.abi, ty.span);\n+                self.check_abi(bare_fn_ty.abi);\n             }\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span,\n@@ -597,7 +604,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             // Stability of const fn methods are covered in\n             // `visit_trait_item` and `visit_impl_item` below; this is\n             // because default methods don't pass through this point.\n-            self.check_abi(header.abi, span);\n+            self.check_abi(header.abi);\n         }\n \n         if fn_decl.c_variadic() {\n@@ -631,7 +638,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match ti.kind {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n                 if block.is_none() {\n-                    self.check_abi(sig.header.abi, ti.span);\n+                    self.check_abi(sig.header.abi);\n                 }\n                 if sig.decl.c_variadic() {\n                     gate_feature_post!(&self, c_variadic, ti.span,"}, {"sha": "a8eeac59954f14efcf6a3880e481561ab325605c", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -157,17 +157,18 @@ impl LitKind {\n             }\n             LitKind::Int(n, ty) => {\n                 let suffix = match ty {\n-                    ast::LitIntType::Unsigned(ty) => Some(ty.to_symbol()),\n-                    ast::LitIntType::Signed(ty) => Some(ty.to_symbol()),\n+                    ast::LitIntType::Unsigned(ty) => Some(ty.name()),\n+                    ast::LitIntType::Signed(ty) => Some(ty.name()),\n                     ast::LitIntType::Unsuffixed => None,\n                 };\n                 (token::Integer, sym::integer(n), suffix)\n             }\n             LitKind::Float(symbol, ty) => {\n-                (token::Float, symbol, Some(ty.to_symbol()))\n-            }\n-            LitKind::FloatUnsuffixed(symbol) => {\n-                (token::Float, symbol, None)\n+                let suffix = match ty {\n+                    ast::LitFloatType::Suffixed(ty) => Some(ty.name()),\n+                    ast::LitFloatType::Unsuffixed => None,\n+                };\n+                (token::Float, symbol, suffix)\n             }\n             LitKind::Bool(value) => {\n                 let symbol = if value { kw::True } else { kw::False };\n@@ -244,12 +245,12 @@ fn filtered_float_lit(symbol: Symbol, suffix: Option<Symbol>, base: u32)\n         return Err(LitError::NonDecimalFloat(base));\n     }\n     Ok(match suffix {\n-        Some(suf) => match suf {\n-            sym::f32 => LitKind::Float(symbol, ast::FloatTy::F32),\n-            sym::f64 => LitKind::Float(symbol, ast::FloatTy::F64),\n+        Some(suf) => LitKind::Float(symbol, ast::LitFloatType::Suffixed(match suf {\n+            sym::f32 => ast::FloatTy::F32,\n+            sym::f64 => ast::FloatTy::F64,\n             _ => return Err(LitError::InvalidFloatSuffix),\n-        }\n-        None => LitKind::FloatUnsuffixed(symbol)\n+        })),\n+        None => LitKind::Float(symbol, ast::LitFloatType::Unsuffixed)\n     })\n }\n "}, {"sha": "0c358b1caaf71d0fb6e9936af8f8a836584c61d8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -12,7 +12,7 @@ mod diagnostics;\n use diagnostics::Error;\n \n use crate::ast::{\n-    self, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Ident,\n+    self, Abi, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Ident,\n     IsAsync, MacDelimiter, Mutability, StrStyle, Visibility, VisibilityKind, Unsafety,\n };\n use crate::parse::{PResult, Directory, DirectoryOwnership};\n@@ -28,7 +28,6 @@ use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::ThinVec;\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n-use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n use log::debug;\n \n@@ -1206,48 +1205,41 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n-    /// Parses `extern` followed by an optional ABI string, or nothing.\n+    /// Parses `extern string_literal?`.\n+    /// If `extern` is not found, the Rust ABI is used.\n+    /// If `extern` is found and a `string_literal` does not follow, the C ABI is used.\n     fn parse_extern_abi(&mut self) -> PResult<'a, Abi> {\n-        if self.eat_keyword(kw::Extern) {\n-            Ok(self.parse_opt_abi()?.unwrap_or(Abi::C))\n+        Ok(if self.eat_keyword(kw::Extern) {\n+            self.parse_opt_abi()?\n         } else {\n-            Ok(Abi::Rust)\n-        }\n+            Abi::default()\n+        })\n     }\n \n-    /// Parses a string as an ABI spec on an extern type or module. Consumes\n-    /// the `extern` keyword, if one is found.\n-    fn parse_opt_abi(&mut self) -> PResult<'a, Option<Abi>> {\n-        match self.token.kind {\n-            token::Literal(token::Lit { kind: token::Str, symbol, suffix }) |\n-            token::Literal(token::Lit { kind: token::StrRaw(..), symbol, suffix }) => {\n-                self.expect_no_suffix(self.token.span, \"an ABI spec\", suffix);\n-                self.bump();\n-                match abi::lookup(&symbol.as_str()) {\n-                    Some(abi) => Ok(Some(abi)),\n-                    None => {\n-                        self.error_on_invalid_abi(symbol);\n-                        Ok(None)\n-                    }\n+    /// Parses a string literal as an ABI spec.\n+    /// If one is not found, the \"C\" ABI is used.\n+    fn parse_opt_abi(&mut self) -> PResult<'a, Abi> {\n+        let span = if self.token.can_begin_literal_or_bool() {\n+            let ast::Lit { span, kind, .. } = self.parse_lit()?;\n+            match kind {\n+                ast::LitKind::Str(symbol, _) => return Ok(Abi::new(symbol, span)),\n+                ast::LitKind::Err(_) => {}\n+                _ => {\n+                    self.struct_span_err(span, \"non-string ABI literal\")\n+                        .span_suggestion(\n+                            span,\n+                            \"specify the ABI with a string literal\",\n+                            \"\\\"C\\\"\".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n                 }\n             }\n-            _ => Ok(None),\n-        }\n-    }\n-\n-    /// Emit an error where `symbol` is an invalid ABI.\n-    fn error_on_invalid_abi(&self, symbol: Symbol) {\n-        let prev_span = self.prev_span;\n-        struct_span_err!(\n-            self.sess.span_diagnostic,\n-            prev_span,\n-            E0703,\n-            \"invalid ABI: found `{}`\",\n-            symbol\n-        )\n-        .span_label(prev_span, \"invalid ABI\")\n-        .help(&format!(\"valid ABIs: {}\", abi::all_names().join(\", \")))\n-        .emit();\n+            span\n+        } else {\n+            self.prev_span\n+        };\n+        Ok(Abi::new(sym::C, span))\n     }\n \n     /// We are parsing `async fn`. If we are on Rust 2015, emit an error."}, {"sha": "80ea8f380fbada7f4beb9d885ac169d808f0c46c", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1116,7 +1116,11 @@ impl<'a> Parser<'a> {\n                 Err(self.span_fatal(token.span, &msg))\n             }\n             Err(err) => {\n-                let (lit, span) = (token.expect_lit(), token.span);\n+                let span = token.span;\n+                let lit = match token.kind {\n+                    token::Literal(lit) => lit,\n+                    _ => unreachable!(),\n+                };\n                 self.bump();\n                 self.error_literal_from_token(err, lit, span);\n                 // Pack possible quotes and prefixes from the original literal into"}, {"sha": "ebb1cf129965e87f0ee4eb0c2ef6b4b72fae73e3", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -3,7 +3,7 @@ use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n use crate::ptr::P;\n-use crate::ast::{self, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n+use crate::ast::{self, Abi, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n use crate::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n use crate::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness};\n use crate::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n@@ -17,7 +17,6 @@ use crate::ThinVec;\n \n use log::debug;\n use std::mem;\n-use rustc_target::spec::abi::Abi;\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId, StashKey};\n use syntax_pos::BytePos;\n \n@@ -111,7 +110,7 @@ impl<'a> Parser<'a> {\n                 return Ok(Some(self.parse_item_extern_crate(lo, vis, attrs)?));\n             }\n \n-            let opt_abi = self.parse_opt_abi()?;\n+            let abi = self.parse_opt_abi()?;\n \n             if self.eat_keyword(kw::Fn) {\n                 // EXTERN FUNCTION ITEM\n@@ -120,12 +119,12 @@ impl<'a> Parser<'a> {\n                     unsafety: Unsafety::Normal,\n                     asyncness: respan(fn_span, IsAsync::NotAsync),\n                     constness: respan(fn_span, Constness::NotConst),\n-                    abi: opt_abi.unwrap_or(Abi::C),\n+                    abi,\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             } else if self.check(&token::OpenDelim(token::Brace)) {\n                 return Ok(Some(\n-                    self.parse_item_foreign_mod(lo, opt_abi, vis, attrs, extern_sp)?,\n+                    self.parse_item_foreign_mod(lo, abi, vis, attrs, extern_sp)?,\n                 ));\n             }\n \n@@ -201,7 +200,7 @@ impl<'a> Parser<'a> {\n                     unsafety,\n                     asyncness,\n                     constness: respan(fn_span, Constness::NotConst),\n-                    abi: Abi::Rust,\n+                    abi: Abi::new(sym::Rust, fn_span),\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             }\n@@ -238,7 +237,7 @@ impl<'a> Parser<'a> {\n                 unsafety: Unsafety::Normal,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n-                abi: Abi::Rust,\n+                abi: Abi::new(sym::Rust, fn_span),\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n@@ -1115,15 +1114,13 @@ impl<'a> Parser<'a> {\n     fn parse_item_foreign_mod(\n         &mut self,\n         lo: Span,\n-        opt_abi: Option<Abi>,\n+        abi: Abi,\n         visibility: Visibility,\n         mut attrs: Vec<Attribute>,\n         extern_sp: Span,\n     ) -> PResult<'a, P<Item>> {\n         self.expect(&token::OpenDelim(token::Brace))?;\n \n-        let abi = opt_abi.unwrap_or(Abi::C);\n-\n         attrs.extend(self.parse_inner_attributes()?);\n \n         let mut foreign_items = vec![];\n@@ -1801,7 +1798,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, Option<P<Item>>> {\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: false,\n-            allow_c_variadic: header.abi == Abi::C && header.unsafety == Unsafety::Unsafe,\n+            allow_c_variadic: header.abi.symbol == sym::C && header.unsafety == Unsafety::Unsafe,\n             is_name_required: |_| true,\n         })?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n@@ -1930,7 +1927,7 @@ impl<'a> Parser<'a> {\n         let asyncness = respan(self.prev_span, asyncness);\n         let unsafety = self.parse_unsafety();\n         let (constness, unsafety, abi) = if is_const_fn {\n-            (respan(const_span, Constness::Const), unsafety, Abi::Rust)\n+            (respan(const_span, Constness::Const), unsafety, Abi::default())\n         } else {\n             let abi = self.parse_extern_abi()?;\n             (respan(self.prev_span, Constness::NotConst), unsafety, abi)"}, {"sha": "6f3da344ccf88e6cc7a5857d809dcef8a3fcda56", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -381,9 +381,7 @@ impl Token {\n         match self.kind {\n             OpenDelim(Brace) => true,\n             Interpolated(ref nt) => match **nt {\n-                NtExpr(..) => true,\n-                NtBlock(..) => true,\n-                NtLiteral(..) => true,\n+                NtExpr(..) | NtBlock(..) | NtLiteral(..) => true,\n                 _ => false,\n             }\n             _ => self.can_begin_literal_or_bool(),\n@@ -404,13 +402,6 @@ impl Token {\n         }\n     }\n \n-    crate fn expect_lit(&self) -> Lit {\n-        match self.kind {\n-            Literal(lit) => lit,\n-            _ => panic!(\"`expect_lit` called on non-literal\"),\n-        }\n-    }\n-\n     /// Returns `true` if the token is any literal, a minus (which can prefix a literal,\n     /// for example a '-42', or one of the boolean idents).\n     pub fn can_begin_literal_or_bool(&self) -> bool {"}, {"sha": "1d59c13a9d0818800aaaea91c1b36504ddcab8c5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -14,7 +14,6 @@ use crate::sess::ParseSess;\n use crate::symbol::{kw, sym};\n use crate::tokenstream::{self, TokenStream, TokenTree};\n \n-use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{self, BytePos};\n use syntax_pos::{FileName, Span};\n \n@@ -1230,7 +1229,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::ForeignMod(ref nmod) => {\n                 self.head(\"extern\");\n-                self.word_nbsp(nmod.abi.to_string());\n+                self.print_abi(nmod.abi);\n                 self.bopen();\n                 self.print_foreign_mod(nmod, &item.attrs);\n                 self.bclose(item.span);\n@@ -2823,7 +2822,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_ty_fn(&mut self,\n-                       abi: abi::Abi,\n+                       abi: ast::Abi,\n                        unsafety: ast::Unsafety,\n                        decl: &ast::FnDecl,\n                        name: Option<ast::Ident>,\n@@ -2884,14 +2883,18 @@ impl<'a> State<'a> {\n         self.print_asyncness(header.asyncness.node);\n         self.print_unsafety(header.unsafety);\n \n-        if header.abi != Abi::Rust {\n+        if header.abi.symbol != sym::Rust {\n             self.word_nbsp(\"extern\");\n-            self.word_nbsp(header.abi.to_string());\n+            self.print_abi(header.abi);\n         }\n \n         self.s.word(\"fn\")\n     }\n \n+    fn print_abi(&mut self, abi: ast::Abi) {\n+        self.word_nbsp(format!(\"\\\"{}\\\"\", abi.symbol));\n+    }\n+\n     crate fn print_unsafety(&mut self, s: ast::Unsafety) {\n         match s {\n             ast::Unsafety::Normal => {},"}, {"sha": "2c6dd0fb1c6dc05154407509a408784c005c760a", "filename": "src/libsyntax/print/pprust/tests.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -34,12 +34,7 @@ fn test_fun_to_string() {\n         assert_eq!(\n             fun_to_string(\n                 &decl,\n-                ast::FnHeader {\n-                    unsafety: ast::Unsafety::Normal,\n-                    constness: source_map::dummy_spanned(ast::Constness::NotConst),\n-                    asyncness: source_map::dummy_spanned(ast::IsAsync::NotAsync),\n-                    abi: Abi::Rust,\n-                },\n+                ast::FnHeader::default(),\n                 abba_ident,\n                 &generics\n             ),"}, {"sha": "02c711bc387e31f95c781a186e0023ebd1207ce7", "filename": "src/libsyntax_expand/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2FCargo.toml?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -21,6 +21,5 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n-rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "4bf13f37711022663d3b6f8a3f7a444f4f2e1521", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -21,8 +21,7 @@ pub fn expand_concat(\n         match e.kind {\n             ast::ExprKind::Lit(ref lit) => match lit.kind {\n                 ast::LitKind::Str(ref s, _)\n-                | ast::LitKind::Float(ref s, _)\n-                | ast::LitKind::FloatUnsuffixed(ref s) => {\n+                | ast::LitKind::Float(ref s, _) => {\n                     accumulator.push_str(&s.as_str());\n                 }\n                 ast::LitKind::Char(c) => {"}, {"sha": "b18fd50ae7605288ba6f959e1e5972bb7a295131", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -182,8 +182,7 @@ use std::iter;\n use std::vec;\n \n use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n+use syntax::ast::{self, Abi, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n use syntax::source_map::respan;\n@@ -738,7 +737,7 @@ impl<'a> TraitDef<'a> {\n                                          self,\n                                          type_ident,\n                                          generics,\n-                                         Abi::Rust,\n+                                         sym::Rust,\n                                          explicit_self,\n                                          tys,\n                                          body)\n@@ -793,7 +792,7 @@ impl<'a> TraitDef<'a> {\n                                          self,\n                                          type_ident,\n                                          generics,\n-                                         Abi::Rust,\n+                                         sym::Rust,\n                                          explicit_self,\n                                          tys,\n                                          body)\n@@ -919,7 +918,7 @@ impl<'a> MethodDef<'a> {\n                      trait_: &TraitDef<'_>,\n                      type_ident: Ident,\n                      generics: &Generics,\n-                     abi: Abi,\n+                     abi: Symbol,\n                      explicit_self: Option<ast::ExplicitSelf>,\n                      arg_types: Vec<(Ident, P<ast::Ty>)>,\n                      body: P<Expr>)\n@@ -949,23 +948,27 @@ impl<'a> MethodDef<'a> {\n             ast::Unsafety::Normal\n         };\n \n+        let trait_lo_sp = trait_.span.shrink_to_lo();\n+\n+        let sig = ast::MethodSig {\n+            header: ast::FnHeader {\n+                unsafety,\n+                abi: Abi::new(abi, trait_lo_sp),\n+                ..ast::FnHeader::default()\n+            },\n+            decl: fn_decl,\n+        };\n+\n         // Create the method.\n         ast::ImplItem {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n             generics: fn_generics,\n             span: trait_.span,\n-            vis: respan(trait_.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+            vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n-            kind: ast::ImplItemKind::Method(ast::MethodSig {\n-                                                header: ast::FnHeader {\n-                                                    unsafety, abi,\n-                                                    ..ast::FnHeader::default()\n-                                                },\n-                                                decl: fn_decl,\n-                                            },\n-                                            body_block),\n+            kind: ast::ImplItemKind::Method(sig, body_block),\n             tokens: None,\n         }\n     }"}, {"sha": "d87b17eee3109dfdd2e2bb124dd871d4c42e7578", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -566,6 +566,7 @@ symbols! {\n         rust_2018_preview,\n         rust_begin_unwind,\n         rustc,\n+        Rust,\n         RustcDecodable,\n         RustcEncodable,\n         rustc_allocator,"}, {"sha": "218e0292776d06d6a51368fe4d2d9beac98ad1c8", "filename": "src/test/ui/feature-gated-feature-in-macro-arg.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gated-feature-in-macro-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gated-feature-in-macro-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gated-feature-in-macro-arg.stderr?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gated-feature-in-macro-arg.rs:8:9\n+  --> $DIR/feature-gated-feature-in-macro-arg.rs:8:16\n    |\n-LL | /         extern \"rust-intrinsic\" {\n-LL | |             fn atomic_fence();\n-LL | |         }\n-   | |_________^\n+LL |         extern \"rust-intrinsic\" {\n+   |                ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n "}, {"sha": "d58a2d91b2b7f8cbcc040692294f98ad260d4b20", "filename": "src/test/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-msp430-interrupt.rs:4:1\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:4:8\n    |\n LL | extern \"msp430-interrupt\" fn foo() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable"}, {"sha": "6db6cb49cef1436aea579eedb2b2c4fc69572c77", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 136, "deletions": 136, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1,591 +1,591 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:13:1\n+  --> $DIR/feature-gate-abi.rs:13:8\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:15:1\n+  --> $DIR/feature-gate-abi.rs:15:8\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:17:1\n+  --> $DIR/feature-gate-abi.rs:17:8\n    |\n LL | extern \"vectorcall\" fn f3() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:18:1\n+  --> $DIR/feature-gate-abi.rs:18:8\n    |\n LL | extern \"rust-call\" fn f4() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:19:1\n+  --> $DIR/feature-gate-abi.rs:19:8\n    |\n LL | extern \"msp430-interrupt\" fn f5() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:20:1\n+  --> $DIR/feature-gate-abi.rs:20:8\n    |\n LL | extern \"ptx-kernel\" fn f6() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:21:1\n+  --> $DIR/feature-gate-abi.rs:21:8\n    |\n LL | extern \"x86-interrupt\" fn f7() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:22:1\n+  --> $DIR/feature-gate-abi.rs:22:8\n    |\n LL | extern \"thiscall\" fn f8() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:23:1\n+  --> $DIR/feature-gate-abi.rs:23:8\n    |\n LL | extern \"amdgpu-kernel\" fn f9() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:24:1\n+  --> $DIR/feature-gate-abi.rs:24:8\n    |\n LL | extern \"efiapi\" fn f10() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:28:5\n+  --> $DIR/feature-gate-abi.rs:28:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:30:5\n+  --> $DIR/feature-gate-abi.rs:30:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:32:5\n+  --> $DIR/feature-gate-abi.rs:32:12\n    |\n LL |     extern \"vectorcall\" fn m3();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:33:5\n+  --> $DIR/feature-gate-abi.rs:33:12\n    |\n LL |     extern \"rust-call\" fn m4();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:34:5\n+  --> $DIR/feature-gate-abi.rs:34:12\n    |\n LL |     extern \"msp430-interrupt\" fn m5();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:35:5\n+  --> $DIR/feature-gate-abi.rs:35:12\n    |\n LL |     extern \"ptx-kernel\" fn m6();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:36:5\n+  --> $DIR/feature-gate-abi.rs:36:12\n    |\n LL |     extern \"x86-interrupt\" fn m7();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:37:5\n+  --> $DIR/feature-gate-abi.rs:37:12\n    |\n LL |     extern \"thiscall\" fn m8();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:38:5\n+  --> $DIR/feature-gate-abi.rs:38:12\n    |\n LL |     extern \"amdgpu-kernel\" fn m9();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:39:5\n+  --> $DIR/feature-gate-abi.rs:39:12\n    |\n LL |     extern \"efiapi\" fn m10();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:41:5\n+  --> $DIR/feature-gate-abi.rs:41:12\n    |\n LL |     extern \"vectorcall\" fn dm3() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:42:5\n+  --> $DIR/feature-gate-abi.rs:42:12\n    |\n LL |     extern \"rust-call\" fn dm4() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:43:5\n+  --> $DIR/feature-gate-abi.rs:43:12\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:44:5\n+  --> $DIR/feature-gate-abi.rs:44:12\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:45:5\n+  --> $DIR/feature-gate-abi.rs:45:12\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:46:5\n+  --> $DIR/feature-gate-abi.rs:46:12\n    |\n LL |     extern \"thiscall\" fn dm8() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:47:5\n+  --> $DIR/feature-gate-abi.rs:47:12\n    |\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:48:5\n+  --> $DIR/feature-gate-abi.rs:48:12\n    |\n LL |     extern \"efiapi\" fn dm10() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:55:5\n+  --> $DIR/feature-gate-abi.rs:55:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:57:5\n+  --> $DIR/feature-gate-abi.rs:57:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:59:5\n+  --> $DIR/feature-gate-abi.rs:59:12\n    |\n LL |     extern \"vectorcall\" fn m3() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:60:5\n+  --> $DIR/feature-gate-abi.rs:60:12\n    |\n LL |     extern \"rust-call\" fn m4() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:61:5\n+  --> $DIR/feature-gate-abi.rs:61:12\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:62:5\n+  --> $DIR/feature-gate-abi.rs:62:12\n    |\n LL |     extern \"ptx-kernel\" fn m6() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:63:5\n+  --> $DIR/feature-gate-abi.rs:63:12\n    |\n LL |     extern \"x86-interrupt\" fn m7() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:64:5\n+  --> $DIR/feature-gate-abi.rs:64:12\n    |\n LL |     extern \"thiscall\" fn m8() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:65:5\n+  --> $DIR/feature-gate-abi.rs:65:12\n    |\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:66:5\n+  --> $DIR/feature-gate-abi.rs:66:12\n    |\n LL |     extern \"efiapi\" fn m10() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:71:5\n+  --> $DIR/feature-gate-abi.rs:71:12\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:73:5\n+  --> $DIR/feature-gate-abi.rs:73:12\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:75:5\n+  --> $DIR/feature-gate-abi.rs:75:12\n    |\n LL |     extern \"vectorcall\" fn im3() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:76:5\n+  --> $DIR/feature-gate-abi.rs:76:12\n    |\n LL |     extern \"rust-call\" fn im4() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:77:5\n+  --> $DIR/feature-gate-abi.rs:77:12\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:78:5\n+  --> $DIR/feature-gate-abi.rs:78:12\n    |\n LL |     extern \"ptx-kernel\" fn im6() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:79:5\n+  --> $DIR/feature-gate-abi.rs:79:12\n    |\n LL |     extern \"x86-interrupt\" fn im7() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:80:5\n+  --> $DIR/feature-gate-abi.rs:80:12\n    |\n LL |     extern \"thiscall\" fn im8() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:81:5\n+  --> $DIR/feature-gate-abi.rs:81:12\n    |\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:82:5\n+  --> $DIR/feature-gate-abi.rs:82:12\n    |\n LL |     extern \"efiapi\" fn im10() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:86:11\n+  --> $DIR/feature-gate-abi.rs:86:18\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:87:11\n+  --> $DIR/feature-gate-abi.rs:87:18\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:88:11\n+  --> $DIR/feature-gate-abi.rs:88:18\n    |\n LL | type A3 = extern \"vectorcall\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:89:11\n+  --> $DIR/feature-gate-abi.rs:89:18\n    |\n LL | type A4 = extern \"rust-call\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:90:11\n+  --> $DIR/feature-gate-abi.rs:90:18\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:91:11\n+  --> $DIR/feature-gate-abi.rs:91:18\n    |\n LL | type A6 = extern \"ptx-kernel\" fn ();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:92:11\n+  --> $DIR/feature-gate-abi.rs:92:18\n    |\n LL | type A7 = extern \"x86-interrupt\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:93:11\n+  --> $DIR/feature-gate-abi.rs:93:18\n    |\n LL | type A8 = extern \"thiscall\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:94:11\n+  --> $DIR/feature-gate-abi.rs:94:18\n    |\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:95:12\n+  --> $DIR/feature-gate-abi.rs:95:19\n    |\n LL | type A10 = extern \"efiapi\" fn();\n-   |            ^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:98:1\n+  --> $DIR/feature-gate-abi.rs:98:8\n    |\n LL | extern \"rust-intrinsic\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:99:1\n+  --> $DIR/feature-gate-abi.rs:99:8\n    |\n LL | extern \"platform-intrinsic\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:100:1\n+  --> $DIR/feature-gate-abi.rs:100:8\n    |\n LL | extern \"vectorcall\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:101:1\n+  --> $DIR/feature-gate-abi.rs:101:8\n    |\n LL | extern \"rust-call\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:102:1\n+  --> $DIR/feature-gate-abi.rs:102:8\n    |\n LL | extern \"msp430-interrupt\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:103:1\n+  --> $DIR/feature-gate-abi.rs:103:8\n    |\n LL | extern \"ptx-kernel\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:104:1\n+  --> $DIR/feature-gate-abi.rs:104:8\n    |\n LL | extern \"x86-interrupt\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:105:1\n+  --> $DIR/feature-gate-abi.rs:105:8\n    |\n LL | extern \"thiscall\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:106:1\n+  --> $DIR/feature-gate-abi.rs:106:8\n    |\n LL | extern \"amdgpu-kernel\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:107:1\n+  --> $DIR/feature-gate-abi.rs:107:8\n    |\n LL | extern \"efiapi\" {}\n-   | ^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable"}, {"sha": "1757befec35c059bffc15f13d0f4491bc855043c", "filename": "src/test/ui/feature-gates/feature-gate-abi_unadjusted.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_unadjusted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_unadjusted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_unadjusted.stderr?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: unadjusted ABI is an implementation detail and perma-unstable\n-  --> $DIR/feature-gate-abi_unadjusted.rs:1:1\n+  --> $DIR/feature-gate-abi_unadjusted.rs:1:8\n    |\n-LL | / extern \"unadjusted\" fn foo() {\n-LL | |\n-LL | | }\n-   | |_^\n+LL | extern \"unadjusted\" fn foo() {\n+   |        ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_unadjusted)]` to the crate attributes to enable\n "}, {"sha": "8f943d357ce02f0685e19aeeaee3398d89cf581f", "filename": "src/test/ui/feature-gates/feature-gate-intrinsics.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1,18 +1,16 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-intrinsics.rs:1:1\n+  --> $DIR/feature-gate-intrinsics.rs:1:8\n    |\n-LL | / extern \"rust-intrinsic\" {\n-LL | |     fn bar();\n-LL | | }\n-   | |_^\n+LL | extern \"rust-intrinsic\" {\n+   |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-intrinsics.rs:5:1\n+  --> $DIR/feature-gate-intrinsics.rs:5:8\n    |\n LL | extern \"rust-intrinsic\" fn baz() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n "}, {"sha": "657bf13c8739ec57a5408a8710584f4a04e3a559", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1,35 +1,35 @@\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:11:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:11:12\n    |\n LL |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:17:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:17:12\n    |\n LL |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:12\n    |\n LL |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:29:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:29:12\n    |\n LL |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable"}, {"sha": "f343a42eb8fa9ce0f8f35ace66b89ce82c43cf89", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures.rs:9:5\n+  --> $DIR/feature-gate-unboxed-closures.rs:9:12\n    |\n-LL | /     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n-LL | |         a + b\n-LL | |     }\n-   | |_____^\n+LL |     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable"}, {"sha": "7db83674efc60620e086413be79f3332263a184d", "filename": "src/test/ui/parser/bad-lit-suffixes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1,9 +1,9 @@\n extern\n-    \"C\"suffix //~ ERROR suffixes on an ABI spec are invalid\n+    \"C\"suffix //~ ERROR suffixes on a string literal are invalid\n     fn foo() {}\n \n extern\n-    \"C\"suffix //~ ERROR suffixes on an ABI spec are invalid\n+    \"C\"suffix //~ ERROR suffixes on a string literal are invalid\n {}\n \n fn main() {"}, {"sha": "6b0049298ffd23e57f8996afc24a5b5ea5d9ee2e", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -1,10 +1,10 @@\n-error: suffixes on an ABI spec are invalid\n+error: suffixes on a string literal are invalid\n   --> $DIR/bad-lit-suffixes.rs:2:5\n    |\n LL |     \"C\"suffix\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n-error: suffixes on an ABI spec are invalid\n+error: suffixes on a string literal are invalid\n   --> $DIR/bad-lit-suffixes.rs:6:5\n    |\n LL |     \"C\"suffix"}, {"sha": "cb23f2c808c3478515e6366ce7d66d565062f2d7", "filename": "src/test/ui/parser/extern-abi-from-mac-literal-frag.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+// In this test we check that the parser accepts an ABI string when it\n+// comes from a macro `literal` fragment as opposed to a hardcoded string.\n+\n+fn main() {}\n+\n+macro_rules! abi_from_lit_frag {\n+    ($abi:literal) => {\n+        extern $abi {\n+            fn _import();\n+        }\n+\n+        extern $abi fn _export() {}\n+\n+        type _PTR = extern $abi fn();\n+    }\n+}\n+\n+mod rust {\n+    abi_from_lit_frag!(\"Rust\");\n+}\n+\n+mod c {\n+    abi_from_lit_frag!(\"C\");\n+}"}, {"sha": "fad855a21f6b1b92a3c1ae9478ae70c6fb9b3461", "filename": "src/test/ui/parser/extern-abi-raw-strings.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fextern-abi-raw-strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fextern-abi-raw-strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-abi-raw-strings.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+// Check that the string literal in `extern lit` will accept raw strings.\n+\n+fn main() {}\n+\n+extern r#\"C\"# fn foo() {}\n+\n+extern r#\"C\"# {\n+    fn bar();\n+}\n+\n+type T = extern r#\"C\"# fn();"}, {"sha": "87bd31aabb67de05a31f9b78219bb7b9774c654c", "filename": "src/test/ui/parser/extern-abi-string-escaping.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fextern-abi-string-escaping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fextern-abi-string-escaping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-abi-string-escaping.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+// Check that the string literal in `extern lit` will escapes.\n+\n+fn main() {}\n+\n+extern \"\\x43\" fn foo() {}\n+\n+extern \"\\x43\" {\n+    fn bar();\n+}\n+\n+type T = extern \"\\x43\" fn();"}, {"sha": "7d2bbfe8a0163cb2a8d75bdcf6b6894a278d9aeb", "filename": "src/test/ui/parser/extern-abi-syntactic.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fextern-abi-syntactic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883fe10da2f0651540fd5824898b7d7476969c41/src%2Ftest%2Fui%2Fparser%2Fextern-abi-syntactic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-abi-syntactic.rs?ref=883fe10da2f0651540fd5824898b7d7476969c41", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+// Check that from the grammar's point of view,\n+// the specific set of ABIs is not part of it.\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+extern \"some_abi_that_we_are_sure_does_not_exist_semantically\" fn foo() {}\n+\n+#[cfg(FALSE)]\n+extern \"some_abi_that_we_are_sure_does_not_exist_semantically\" {\n+    fn foo();\n+}\n+\n+#[cfg(FALSE)]\n+type T = extern \"some_abi_that_we_are_sure_does_not_exist_semantically\" fn();"}]}