{"sha": "66d4faf53f59011a57991ed2b21bc198b414b588", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZDRmYWY1M2Y1OTAxMWE1Nzk5MWVkMmIyMWJjMTk4YjQxNGI1ODg=", "commit": {"author": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-18T04:06:00Z"}, "committer": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-19T03:44:10Z"}, "message": "Start tests for checkstyle.\n\nThey don't yet pass, I've clearly misunderstood the existing tests.", "tree": {"sha": "ea984ef6229e20579a3e011e5eed6fea0aefffbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea984ef6229e20579a3e011e5eed6fea0aefffbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66d4faf53f59011a57991ed2b21bc198b414b588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66d4faf53f59011a57991ed2b21bc198b414b588", "html_url": "https://github.com/rust-lang/rust/commit/66d4faf53f59011a57991ed2b21bc198b414b588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66d4faf53f59011a57991ed2b21bc198b414b588/comments", "author": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5632831bd17ca662a61af090a12f17461ca5fe05", "url": "https://api.github.com/repos/rust-lang/rust/commits/5632831bd17ca662a61af090a12f17461ca5fe05", "html_url": "https://github.com/rust-lang/rust/commit/5632831bd17ca662a61af090a12f17461ca5fe05"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "f7224790fd11556dbae29f791c2e90af1f6f2ce8", "filename": "tests/system.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/66d4faf53f59011a57991ed2b21bc198b414b588/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66d4faf53f59011a57991ed2b21bc198b414b588/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=66d4faf53f59011a57991ed2b21bc198b414b588", "patch": "@@ -63,6 +63,30 @@ fn coverage_tests() {\n     assert!(fails == 0, \"{} tests failed\", fails);\n }\n \n+#[test]\n+fn checkstyle_test() {\n+    let filename = \"tests/target/fn-single-line.rs\".to_string();\n+    let expected = \"tests/writemode/checkstyle.xml\";\n+\n+    let output = run_rustfmt(filename.clone(), WriteMode::Checkstyle);\n+\n+    let mut expected_file = fs::File::open(&expected)\n+                                .ok()\n+                                .expect(\"Couldn't open target.\");\n+    let mut expected_text = String::new();\n+    expected_file.read_to_string(&mut expected_text)\n+                 .ok()\n+                 .expect(\"Failed reading target.\");\n+\n+    let mut failures = HashMap::new();\n+    if expected_text != output {\n+        let diff = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n+        failures.insert(filename, diff);\n+        // print_mismatches(failures);\n+        // assert!(false, \"Text does not match expected output\");\n+    }\n+}\n+\n // Idempotence tests. Files in tests/target are checked to be unaltered by\n // rustfmt.\n #[test]\n@@ -145,6 +169,37 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n     assert!(t.reset().unwrap());\n }\n \n+pub fn run_rustfmt(filename: String, write_mode: WriteMode) -> String {\n+    let sig_comments = read_significant_comments(&filename);\n+    let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n+\n+    for (key, val) in &sig_comments {\n+        if key != \"target\" && key != \"config\" {\n+            config.override_value(key, val);\n+        }\n+    }\n+\n+    // Don't generate warnings for to-do items.\n+    config.report_todo = ReportTactic::Never;\n+\n+    // Simulate run()\n+    let mut file_map = format(Path::new(&filename), &config, write_mode);\n+    // TODO this writes directly to stdout making it impossible to test :(\n+    let write_result = filemap::write_all_files(&file_map, write_mode, &config);\n+    let res = write_result.unwrap();\n+    String::new()\n+\n+    // for (filename, text) in file_map.iter() {\n+    //     let mut v = Vec::new();\n+    //     // Won't panic, as we're not doing any IO.\n+    //     write_system_newlines(&mut v, text, &config).unwrap();\n+    //     // Won't panic, we are writing correct utf8.\n+    //     let one_result = String::from_utf8(v).unwrap();\n+    //     write_result.insert(filename, one_result);\n+    // }\n+    // write_result.remove(&filename).unwrap().to_owned()\n+}\n+\n pub fn idempotent_check(filename: String,\n                         write_mode: WriteMode)\n                         -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {"}, {"sha": "9e536b01a1ddcaaba84f4bc55a18a5c6206f8740", "filename": "tests/writemode/checkstyle.xml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66d4faf53f59011a57991ed2b21bc198b414b588/tests%2Fwritemode%2Fcheckstyle.xml", "raw_url": "https://github.com/rust-lang/rust/raw/66d4faf53f59011a57991ed2b21bc198b414b588/tests%2Fwritemode%2Fcheckstyle.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fcheckstyle.xml?ref=66d4faf53f59011a57991ed2b21bc198b414b588", "patch": "@@ -0,0 +1,2 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<checkstyle version=\"4.3\"><file name=\"tests/target/fn-single-line.rs\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_expr() {`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    1`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_stmt() {`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    foo();`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_local() {`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    let z = 5;`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) {`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    x = 3;`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"22\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String {`\" /><error line=\"22\" severity=\"warning\" message=\"Should be `    &quot;yay&quot;`\" /><error line=\"22\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `fn lots_of_space() {`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `    1`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `}`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `fn mac() -&gt; Vec&lt;i32&gt; {`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `    vec![]`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `}`\" /></file></checkstyle>"}]}