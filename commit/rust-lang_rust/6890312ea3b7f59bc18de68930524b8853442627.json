{"sha": "6890312ea3b7f59bc18de68930524b8853442627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OTAzMTJlYTNiN2Y1OWJjMThkZTY4OTMwNTI0Yjg4NTM0NDI2Mjc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-09-23T15:57:50Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-12-16T10:33:43Z"}, "message": "cg_ssa: introduce `TargetMachineFactoryFn` alias\n\nThis commit removes the `TargetMachineFactory` struct and adds a\n`TargetMachineFactoryFn` type alias which is used everywhere that the\nprevious, long type was used.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "77ef8cbb77a7e141ebb19ee75cdd1fcde1fc8e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ef8cbb77a7e141ebb19ee75cdd1fcde1fc8e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6890312ea3b7f59bc18de68930524b8853442627", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl/Z4ocACgkQJZLnbIc4\nH9lmSw//TPqFYK8lx/6moBUmm7CxDau9k97n0ZPM9ase0Nd7IgQ49X2UeUv2vA6n\n75gPtgTe6LjGtoPmGXWnUSlgyLXQ9Hsqmn16Gc4QflKHStTmoobOy9OTN0JEWB+u\nb9hxnAdJQai0k2/J/jLiIUY9dvPxWr97vfo66b1OT9MhcHd5FIRN2Poa8L26fF8c\nOLzrsvomrVGfo49oD1z7AajAV7Tajt/kGH2DGVu/gdJrH5CTXjx31fP01cJy0eJo\n6iS2bBKilr5lJn3IIVaE+QzosGEQkrcPLGRQurTPIEIfc5rQcLNwBXdqjviqfTRc\nxODWI/IOauevGj49hs7rgp8HqThMc2sERCuAZJOktoL0hvjVTjGo7SrOUnDS7Fpl\nHqJD0ET/ALNv0hRecpsO8oG2f0iI97JTsaZncvAsCzpsFGWqiuY+j4vs71dzvTA+\nZvTNmXTnlr0EXznFbiOBWCusa19CSc2+POQ+0W6nFWFs+LgPus/e0QfHZ6FDu9Vh\nLPn7HUVayGUveMXr5O5Cj+ohViW58stsD3Hky3oT7XYNfOL61kPu1uV3QOIBZnp3\n55nZX8q2lvWiv5Ybzvxrk4TKrqclX4VupKJu3r1s8csn0ejrtiQeD2Oaic0fsUBm\n7m7vs2GlWtB9JuXtVyCE1lCe2dx4lL79Ak7q1NehwMaNO31RuWw=\n=CACf\n-----END PGP SIGNATURE-----", "payload": "tree 77ef8cbb77a7e141ebb19ee75cdd1fcde1fc8e1e\nparent cf49c2a1efe65d8cbe671ef02e5c4d870529da13\nauthor David Wood <david@davidtw.co> 1600876670 +0100\ncommitter David Wood <david@davidtw.co> 1608114823 +0000\n\ncg_ssa: introduce `TargetMachineFactoryFn` alias\n\nThis commit removes the `TargetMachineFactory` struct and adds a\n`TargetMachineFactoryFn` type alias which is used everywhere that the\nprevious, long type was used.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6890312ea3b7f59bc18de68930524b8853442627", "html_url": "https://github.com/rust-lang/rust/commit/6890312ea3b7f59bc18de68930524b8853442627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6890312ea3b7f59bc18de68930524b8853442627/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf49c2a1efe65d8cbe671ef02e5c4d870529da13", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf49c2a1efe65d8cbe671ef02e5c4d870529da13", "html_url": "https://github.com/rust-lang/rust/commit/cf49c2a1efe65d8cbe671ef02e5c4d870529da13"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "64ca7efb486559d4aeddde0281908f2b635318da", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=6890312ea3b7f59bc18de68930524b8853442627", "patch": "@@ -728,7 +728,7 @@ pub unsafe fn optimize_thin_module(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n ) -> Result<ModuleCodegen<ModuleLlvm>, FatalError> {\n     let diag_handler = cgcx.create_diag_handler();\n-    let tm = (cgcx.tm_factory.0)().map_err(|e| write::llvm_err(&diag_handler, &e))?;\n+    let tm = (cgcx.tm_factory)().map_err(|e| write::llvm_err(&diag_handler, &e))?;\n \n     // Right now the implementation we've got only works over serialized\n     // modules, so we create a fresh new LLVM context and parse the module"}, {"sha": "612ed4405bb83c0b20ee642dba606abe90fb5eee", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=6890312ea3b7f59bc18de68930524b8853442627", "patch": "@@ -11,7 +11,9 @@ use crate::llvm_util;\n use crate::type_::Type;\n use crate::LlvmCodegenBackend;\n use crate::ModuleLlvm;\n-use rustc_codegen_ssa::back::write::{BitcodeSection, CodegenContext, EmitObj, ModuleConfig};\n+use rustc_codegen_ssa::back::write::{\n+    BitcodeSection, CodegenContext, EmitObj, ModuleConfig, TargetMachineFactoryFn,\n+};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{CompiledModule, ModuleCodegen};\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -129,7 +131,7 @@ fn to_llvm_code_model(code_model: Option<CodeModel>) -> llvm::CodeModel {\n pub fn target_machine_factory(\n     sess: &Session,\n     optlvl: config::OptLevel,\n-) -> Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync> {\n+) -> TargetMachineFactoryFn<LlvmCodegenBackend> {\n     let reloc_model = to_llvm_relocation_model(sess.relocation_model());\n \n     let (opt_level, _) = to_llvm_opt_settings(optlvl);"}, {"sha": "4fe0384b3696534189e8d7e5b2984273b091abd9", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=6890312ea3b7f59bc18de68930524b8853442627", "patch": "@@ -19,7 +19,9 @@ use back::write::{create_informational_target_machine, create_target_machine};\n pub use llvm_util::target_features;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule};\n-use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n+use rustc_codegen_ssa::back::write::{\n+    CodegenContext, FatLTOInput, ModuleConfig, TargetMachineFactoryFn,\n+};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n@@ -34,7 +36,6 @@ use rustc_span::symbol::Symbol;\n \n use std::any::Any;\n use std::ffi::CStr;\n-use std::sync::Arc;\n \n mod back {\n     pub mod archive;\n@@ -109,7 +110,7 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         &self,\n         sess: &Session,\n         optlvl: OptLevel,\n-    ) -> Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync> {\n+    ) -> TargetMachineFactoryFn<Self> {\n         back::write::target_machine_factory(sess, optlvl)\n     }\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str {\n@@ -352,7 +353,7 @@ impl ModuleLlvm {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(cgcx.fewer_names);\n             let llmod_raw = back::lto::parse_module(llcx, name, buffer, handler)?;\n-            let tm = match (cgcx.tm_factory.0)() {\n+            let tm = match (cgcx.tm_factory)() {\n                 Ok(m) => m,\n                 Err(e) => {\n                     handler.struct_err(&e).emit();"}, {"sha": "615eeecf54ea5594bf342e95e5b068bd8fb08c70", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=6890312ea3b7f59bc18de68930524b8853442627", "patch": "@@ -274,16 +274,8 @@ impl ModuleConfig {\n     }\n }\n \n-// HACK(eddyb) work around `#[derive]` producing wrong bounds for `Clone`.\n-pub struct TargetMachineFactory<B: WriteBackendMethods>(\n-    pub Arc<dyn Fn() -> Result<B::TargetMachine, String> + Send + Sync>,\n-);\n-\n-impl<B: WriteBackendMethods> Clone for TargetMachineFactory<B> {\n-    fn clone(&self) -> Self {\n-        TargetMachineFactory(self.0.clone())\n-    }\n-}\n+pub type TargetMachineFactoryFn<B> =\n+    Arc<dyn Fn() -> Result<<B as WriteBackendMethods>::TargetMachine, String> + Send + Sync>;\n \n pub type ExportedSymbols = FxHashMap<CrateNum, Arc<Vec<(String, SymbolExportLevel)>>>;\n \n@@ -305,7 +297,7 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub regular_module_config: Arc<ModuleConfig>,\n     pub metadata_module_config: Arc<ModuleConfig>,\n     pub allocator_module_config: Arc<ModuleConfig>,\n-    pub tm_factory: TargetMachineFactory<B>,\n+    pub tm_factory: TargetMachineFactoryFn<B>,\n     pub msvc_imps_needed: bool,\n     pub is_pe_coff: bool,\n     pub target_pointer_width: u32,\n@@ -1020,7 +1012,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         regular_module_config: regular_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,\n-        tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, ol)),\n+        tm_factory: backend.target_machine_factory(tcx.sess, ol),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         is_pe_coff: tcx.sess.target.is_like_windows,"}, {"sha": "f28db2fe84b6b00bf0adc35d436c9698b9fd7843", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6890312ea3b7f59bc18de68930524b8853442627/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=6890312ea3b7f59bc18de68930524b8853442627", "patch": "@@ -1,5 +1,6 @@\n use super::write::WriteBackendMethods;\n use super::CodegenObject;\n+use crate::back::write::TargetMachineFactoryFn;\n use crate::{CodegenResults, ModuleCodegen};\n \n use rustc_ast::expand::allocator::AllocatorKind;\n@@ -21,7 +22,6 @@ use rustc_target::spec::Target;\n pub use rustc_data_structures::sync::MetadataRef;\n \n use std::any::Any;\n-use std::sync::Arc;\n \n pub trait BackendTypes {\n     type Value: CodegenObject;\n@@ -123,7 +123,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         &self,\n         sess: &Session,\n         opt_level: config::OptLevel,\n-    ) -> Arc<dyn Fn() -> Result<Self::TargetMachine, String> + Send + Sync>;\n+    ) -> TargetMachineFactoryFn<Self>;\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str;\n     fn tune_cpu<'b>(&self, sess: &'b Session) -> Option<&'b str>;\n }"}]}