{"sha": "7aa9ce55b91726d92770107bfaf5961163cd9388", "node_id": "C_kwDOAAsO6NoAKDdhYTljZTU1YjkxNzI2ZDkyNzcwMTA3YmZhZjU5NjExNjNjZDkzODg", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-05T04:12:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T04:12:35Z"}, "message": "Rollup merge of #89270 - seanyoung:join_fold, r=m-ou-se\n\npath.push() should work as expected on windows verbatim paths\n\nOn Windows, std::fs::canonicalize() returns an so-called UNC path.  UNC paths differ with regular paths because:\n\n- This type of path can much longer than a non-UNC path (32k vs 260 characters).\n- The prefix for a UNC path is ``Component::Prefix(Prefix::DiskVerbatim(..)))``\n- No `/` is allowed\n- No `.` is allowed\n- No `..` is allowed\n\nRust has poor handling of such paths. If you join a UNC path with a path with any of the above, then this will not work.\n\nI've implemented a new method `fn join_fold()` which joins paths and also removes any `.` and `..` from it, and replaces `/` with `\\` on Windows. Using this function it is possible to use UNC paths without issue. In addition, this function is useful on Linux too; paths can be appended without having to call `canonicalize()` to remove the `.` and `..`.\n\nThis PR needs test cases, which can I add. I hope this will a start of a discussion.", "tree": {"sha": "f4a371d61cb2d1ddbc1ce467ef578f99c232313a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a371d61cb2d1ddbc1ce467ef578f99c232313a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aa9ce55b91726d92770107bfaf5961163cd9388", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW9CzCRBK7hj4Ov3rIwAAqVwIAAxqtsj7l/cwxai0ZgvKGP2z\n/EFAnV55H6Wu4lhWSOnOH7rpsI4ZsJg0qCyI+IlQRA/6MHmUAauz/qtVheJVo/6j\n4ew/RWgkNNkyv35sVCXF4iGuS8gd7kafRz8cqRCGZVdfGjluqAkmKrIsFTVIWviC\n+s0YVe/OZGPwrSLgY1X3QH5TW2fRQKF0Qb7Mc7lLtzBwsbLESh/AAD+XV2MVEyTW\nB0DT2DUChHPrpTtO9dIj/5io4U/14YPQoQNsCjfeKK7mveazuBMWEWzdzyMOLACo\n27V7SjYghryaCSrpYgokwmj2//lNjBInKKueN8tEszczKg4ZXN7fqk5yinBVSh8=\n=OGdG\n-----END PGP SIGNATURE-----\n", "payload": "tree f4a371d61cb2d1ddbc1ce467ef578f99c232313a\nparent 234fa908788f098b12c2f54181b6133f355fa07e\nparent fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633407155 -0700\ncommitter GitHub <noreply@github.com> 1633407155 -0700\n\nRollup merge of #89270 - seanyoung:join_fold, r=m-ou-se\n\npath.push() should work as expected on windows verbatim paths\n\nOn Windows, std::fs::canonicalize() returns an so-called UNC path.  UNC paths differ with regular paths because:\n\n- This type of path can much longer than a non-UNC path (32k vs 260 characters).\n- The prefix for a UNC path is ``Component::Prefix(Prefix::DiskVerbatim(..)))``\n- No `/` is allowed\n- No `.` is allowed\n- No `..` is allowed\n\nRust has poor handling of such paths. If you join a UNC path with a path with any of the above, then this will not work.\n\nI've implemented a new method `fn join_fold()` which joins paths and also removes any `.` and `..` from it, and replaces `/` with `\\` on Windows. Using this function it is possible to use UNC paths without issue. In addition, this function is useful on Linux too; paths can be appended without having to call `canonicalize()` to remove the `.` and `..`.\n\nThis PR needs test cases, which can I add. I hope this will a start of a discussion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa9ce55b91726d92770107bfaf5961163cd9388", "html_url": "https://github.com/rust-lang/rust/commit/7aa9ce55b91726d92770107bfaf5961163cd9388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aa9ce55b91726d92770107bfaf5961163cd9388/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234fa908788f098b12c2f54181b6133f355fa07e", "url": "https://api.github.com/repos/rust-lang/rust/commits/234fa908788f098b12c2f54181b6133f355fa07e", "html_url": "https://github.com/rust-lang/rust/commit/234fa908788f098b12c2f54181b6133f355fa07e"}, {"sha": "fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e", "html_url": "https://github.com/rust-lang/rust/commit/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "a45ecf6ea8c63ed05ee1ff29482d6546b5fc98dd", "filename": "library/std/src/path.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7aa9ce55b91726d92770107bfaf5961163cd9388/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa9ce55b91726d92770107bfaf5961163cd9388/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=7aa9ce55b91726d92770107bfaf5961163cd9388", "patch": "@@ -1231,20 +1231,59 @@ impl PathBuf {\n         let mut need_sep = self.as_mut_vec().last().map(|c| !is_sep_byte(*c)).unwrap_or(false);\n \n         // in the special case of `C:` on Windows, do *not* add a separator\n+        let comps = self.components();\n+\n+        if comps.prefix_len() > 0\n+            && comps.prefix_len() == comps.path.len()\n+            && comps.prefix.unwrap().is_drive()\n         {\n-            let comps = self.components();\n-            if comps.prefix_len() > 0\n-                && comps.prefix_len() == comps.path.len()\n-                && comps.prefix.unwrap().is_drive()\n-            {\n-                need_sep = false\n-            }\n+            need_sep = false\n         }\n \n         // absolute `path` replaces `self`\n         if path.is_absolute() || path.prefix().is_some() {\n             self.as_mut_vec().truncate(0);\n \n+        // verbatim paths need . and .. removed\n+        } else if comps.prefix_verbatim() {\n+            let mut buf: Vec<_> = comps.collect();\n+            for c in path.components() {\n+                match c {\n+                    Component::RootDir => {\n+                        buf.truncate(1);\n+                        buf.push(c);\n+                    }\n+                    Component::CurDir => (),\n+                    Component::ParentDir => {\n+                        if let Some(Component::Normal(_)) = buf.last() {\n+                            buf.pop();\n+                        }\n+                    }\n+                    _ => buf.push(c),\n+                }\n+            }\n+\n+            let mut res = OsString::new();\n+            let mut need_sep = false;\n+\n+            for c in buf {\n+                if need_sep && c != Component::RootDir {\n+                    res.push(MAIN_SEP_STR);\n+                }\n+                res.push(c.as_os_str());\n+\n+                need_sep = match c {\n+                    Component::RootDir => false,\n+                    Component::Prefix(prefix) => {\n+                        !prefix.parsed.is_drive() && prefix.parsed.len() > 0\n+                    }\n+                    _ => true,\n+                }\n+            }\n+\n+            self.inner = res;\n+            return;\n+\n         // `path` has a root but no prefix, e.g., `\\windows` (Windows only)\n         } else if path.has_root() {\n             let prefix_len = self.components().prefix_remaining();"}, {"sha": "3973a6829d3d3e42cd9b58f6c37fb7e695d3a168", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7aa9ce55b91726d92770107bfaf5961163cd9388/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa9ce55b91726d92770107bfaf5961163cd9388/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=7aa9ce55b91726d92770107bfaf5961163cd9388", "patch": "@@ -1262,6 +1262,15 @@ pub fn test_push() {\n         tp!(\"\\\\\\\\.\\\\foo\", \"..\\\\bar\", \"\\\\\\\\.\\\\foo\\\\..\\\\bar\");\n \n         tp!(\"\\\\\\\\?\\\\C:\", \"foo\", \"\\\\\\\\?\\\\C:\\\\foo\"); // this is a weird one\n+\n+        tp!(r\"\\\\?\\C:\\bar\", \"../foo\", r\"\\\\?\\C:\\foo\");\n+        tp!(r\"\\\\?\\C:\\bar\", \"../../foo\", r\"\\\\?\\C:\\foo\");\n+        tp!(r\"\\\\?\\C:\\\", \"../foo\", r\"\\\\?\\C:\\foo\");\n+        tp!(r\"\\\\?\\C:\", r\"D:\\foo/./\", r\"D:\\foo/./\");\n+        tp!(r\"\\\\?\\C:\", r\"\\\\?\\D:\\foo\\.\\\", r\"\\\\?\\D:\\foo\\.\\\");\n+        tp!(r\"\\\\?\\A:\\x\\y\", \"/foo\", r\"\\\\?\\A:\\foo\");\n+        tp!(r\"\\\\?\\A:\", r\"..\\foo\\.\", r\"\\\\?\\A:\\foo\");\n+        tp!(r\"\\\\?\\A:\\x\\y\", r\".\\foo\\.\", r\"\\\\?\\A:\\x\\y\\foo\");\n     }\n }\n "}]}