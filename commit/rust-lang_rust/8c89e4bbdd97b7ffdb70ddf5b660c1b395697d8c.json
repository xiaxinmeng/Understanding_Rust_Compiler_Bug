{"sha": "8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjODllNGJiZGQ5N2I3ZmZkYjcwZGRmNWI2NjBjMWIzOTU2OTdkOGM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T22:44:09Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T22:44:09Z"}, "message": "Finish de-exporting path, rand, run, sys. Part of #3583.", "tree": {"sha": "6489656c6095f1b91dabcd311b10c005cd34aeea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6489656c6095f1b91dabcd311b10c005cd34aeea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "html_url": "https://github.com/rust-lang/rust/commit/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3254bee55e38c756818bca6a8d65ff8fad641e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3254bee55e38c756818bca6a8d65ff8fad641e9a", "html_url": "https://github.com/rust-lang/rust/commit/3254bee55e38c756818bca6a8d65ff8fad641e9a"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "7e2b20d547edfe124681045113a90edce9fd53ee", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "patch": "@@ -307,13 +307,9 @@ mod gc;\n mod io;\n mod libc;\n mod os;\n-#[legacy_exports]\n mod path;\n-#[legacy_exports]\n mod rand;\n-#[legacy_exports]\n mod run;\n-#[legacy_exports]\n mod sys;\n #[legacy_exports]\n mod cast;"}, {"sha": "c384745bb5e5248f5626e549bd414bfa391b0e4b", "filename": "src/libcore/path.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "patch": "@@ -10,19 +10,19 @@ Cross-platform file path handling\n \n use cmp::Eq;\n \n-struct WindowsPath {\n+pub struct WindowsPath {\n     host: Option<~str>,\n     device: Option<~str>,\n     is_absolute: bool,\n     components: ~[~str],\n }\n \n-struct PosixPath {\n+pub struct PosixPath {\n     is_absolute: bool,\n     components: ~[~str],\n }\n \n-trait GenericPath {\n+pub trait GenericPath {\n \n     static pure fn from_str((&str)) -> self;\n \n@@ -45,18 +45,18 @@ trait GenericPath {\n }\n \n #[cfg(windows)]\n-type Path = WindowsPath;\n+pub type Path = WindowsPath;\n \n #[cfg(windows)]\n-pure fn Path(s: &str) -> Path {\n+pub pure fn Path(s: &str) -> Path {\n     from_str::<WindowsPath>(s)\n }\n \n #[cfg(unix)]\n-type Path = PosixPath;\n+pub type Path = PosixPath;\n \n #[cfg(unix)]\n-pure fn Path(s: &str) -> Path {\n+pub pure fn Path(s: &str) -> Path {\n     from_str::<PosixPath>(s)\n }\n \n@@ -429,7 +429,7 @@ impl WindowsPath : GenericPath {\n }\n \n \n-pure fn normalize(components: &[~str]) -> ~[~str] {\n+pub pure fn normalize(components: &[~str]) -> ~[~str] {\n     let mut cs = ~[];\n     unsafe {\n         for components.each |c| {\n@@ -462,7 +462,6 @@ fn test_double_slash_collapsing()\n }\n \n mod posix {\n-    #[legacy_exports];\n \n     #[cfg(test)]\n     fn mk(s: &str) -> PosixPath { from_str::<PosixPath>(s) }\n@@ -553,14 +552,13 @@ mod posix {\n \n // Various windows helpers, and tests for the impl.\n mod windows {\n-    #[legacy_exports];\n \n     #[inline(always)]\n-    pure fn is_sep(u: u8) -> bool {\n+    pub pure fn is_sep(u: u8) -> bool {\n         u == '/' as u8 || u == '\\\\' as u8\n     }\n \n-    pure fn extract_unc_prefix(s: &str) -> Option<(~str,~str)> {\n+    pub pure fn extract_unc_prefix(s: &str) -> Option<(~str,~str)> {\n         if (s.len() > 1 &&\n             s[0] == '\\\\' as u8 &&\n             s[1] == '\\\\' as u8) {\n@@ -577,7 +575,7 @@ mod windows {\n         None\n     }\n \n-    pure fn extract_drive_prefix(s: &str) -> Option<(~str,~str)> {\n+    pub pure fn extract_drive_prefix(s: &str) -> Option<(~str,~str)> {\n         unsafe {\n             if (s.len() > 1 &&\n                 libc::isalpha(s[0] as libc::c_int) != 0 &&"}, {"sha": "73d2cc73c1cf690653bb29cf39d12b59525885d3", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "patch": "@@ -9,7 +9,6 @@ enum rctx {}\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    #[legacy_exports];\n     fn rand_seed() -> ~[u8];\n     fn rand_new() -> *rctx;\n     fn rand_new_seeded(seed: ~[u8]) -> *rctx;"}, {"sha": "ae6a0bbb1dd55dbf8e306fa2eb036ec488647395", "filename": "src/libcore/run.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "patch": "@@ -9,7 +9,6 @@ use io::ReaderUtil;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    #[legacy_exports];\n     fn rust_run_program(argv: **libc::c_char, envp: *c_void,\n                         dir: *libc::c_char,\n                         in_fd: c_int, out_fd: c_int, err_fd: c_int)"}, {"sha": "9f13a6c2207cc9d67c46d715e39e185484ea76da", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "patch": "@@ -27,7 +27,6 @@ pub struct Closure {\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    #[legacy_exports];\n     fn get_tydesc<T>() -> *();\n     fn size_of<T>() -> uint;\n     fn pref_align_of<T>() -> uint;"}]}