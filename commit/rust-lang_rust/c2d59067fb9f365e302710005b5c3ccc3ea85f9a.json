{"sha": "c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZDU5MDY3ZmI5ZjM2NWUzMDI3MTAwMDViNWMzY2NjM2VhODVmOWE=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-06-12T19:35:47Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-06-14T02:59:27Z"}, "message": "Autogenerate stubs and the summary of the unstable book", "tree": {"sha": "efc31db9eb34a5c74c4612f75d057f5aeadf2db1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efc31db9eb34a5c74c4612f75d057f5aeadf2db1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "html_url": "https://github.com/rust-lang/rust/commit/c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81089875153046f80057f08eaf3ea5f40676010", "url": "https://api.github.com/repos/rust-lang/rust/commits/d81089875153046f80057f08eaf3ea5f40676010", "html_url": "https://github.com/rust-lang/rust/commit/d81089875153046f80057f08eaf3ea5f40676010"}], "stats": {"total": 353, "additions": 308, "deletions": 45}, "files": [{"sha": "80e01baa58235d69c96252e83fb74467ff8ce4fc", "filename": "src/Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -1892,6 +1892,13 @@ dependencies = [\n  \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"unstable-book-gen\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"tidy 0.1.0\",\n+]\n+\n [[package]]\n name = \"url\"\n version = \"1.4.0\""}, {"sha": "8efa484287a1f3f1abbfb4bb1663aad2692ca662", "filename": "src/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -9,6 +9,7 @@ members = [\n   \"tools/error_index_generator\",\n   \"tools/linkchecker\",\n   \"tools/rustbook\",\n+  \"tools/unstable-book-gen\",\n   \"tools/tidy\",\n   \"tools/build-manifest\",\n   \"tools/remote-test-client\","}, {"sha": "30f631ca2df646d301e3c7fe562937c2817b67ce", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -27,18 +27,26 @@ use {Build, Compiler, Mode};\n use util::{cp_r, symlink_dir};\n use build_helper::up_to_date;\n \n-/// Invoke `rustbook` as compiled in `stage` for `target` for the doc book\n-/// `name` into the `out` path.\n+/// Invoke `rustbook` for `target` for the doc book `name`.\n ///\n /// This will not actually generate any documentation if the documentation has\n /// already been generated.\n pub fn rustbook(build: &Build, target: &str, name: &str) {\n+    let src = build.src.join(\"src/doc\");\n+    rustbook_src(build, target, name, &src);\n+}\n+\n+/// Invoke `rustbook` for `target` for the doc book `name` from the `src` path.\n+///\n+/// This will not actually generate any documentation if the documentation has\n+/// already been generated.\n+pub fn rustbook_src(build: &Build, target: &str, name: &str, src: &Path) {\n     let out = build.doc_out(target);\n     t!(fs::create_dir_all(&out));\n \n     let out = out.join(name);\n     let compiler = Compiler::new(0, &build.config.build);\n-    let src = build.src.join(\"src/doc\").join(name);\n+    let src = src.join(name);\n     let index = out.join(\"index.html\");\n     let rustbook = build.tool(&compiler, \"rustbook\");\n     if up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n@@ -354,6 +362,19 @@ pub fn error_index(build: &Build, target: &str) {\n     build.run(&mut index);\n }\n \n+pub fn unstable_book_gen(build: &Build, target: &str) {\n+    println!(\"Generating unstable book md files ({})\", target);\n+    let out = build.md_doc_out(target).join(\"unstable-book\");\n+    t!(fs::create_dir_all(&out));\n+    t!(fs::remove_dir_all(&out));\n+    let compiler = Compiler::new(0, &build.config.build);\n+    let mut cmd = build.tool_cmd(&compiler, \"unstable-book-gen\");\n+    cmd.arg(build.src.join(\"src\"));\n+    cmd.arg(out);\n+\n+    build.run(&mut cmd);\n+}\n+\n fn symlink_dir_force(src: &Path, dst: &Path) -> io::Result<()> {\n     if let Ok(m) = fs::symlink_metadata(dst) {\n         if m.file_type().is_dir() {"}, {"sha": "1c59debddbb128d156b114f554a046caa0720008", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -677,6 +677,11 @@ impl Build {\n         self.out.join(target).join(\"doc\")\n     }\n \n+    /// Output directory for some generated md crate documentation for a target (temporary)\n+    fn md_doc_out(&self, target: &str) -> PathBuf {\n+        self.out.join(target).join(\"md-doc\")\n+    }\n+\n     /// Output directory for all crate documentation for a target (temporary)\n     ///\n     /// The artifacts here are then copied into `doc_out` above."}, {"sha": "684a00ce7f16885765f52cc89d1f985e330d065f", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -548,6 +548,10 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"maybe-clean-tools\"))\n          .dep(|s| s.name(\"librustc-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"error_index_generator\"));\n+    rules.build(\"tool-unstable-book-gen\", \"src/tools/unstable-book-gen\")\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"unstable-book-gen\"));\n     rules.build(\"tool-tidy\", \"src/tools/tidy\")\n          .dep(|s| s.name(\"maybe-clean-tools\"))\n          .dep(|s| s.name(\"libstd-tool\"))\n@@ -662,8 +666,17 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               .target(&build.config.build)\n               .stage(0)\n          })\n+         .dep(move |s| {\n+             s.name(\"doc-unstable-book-gen\")\n+              .host(&build.config.build)\n+              .target(&build.config.build)\n+              .stage(0)\n+         })\n          .default(build.config.docs)\n-         .run(move |s| doc::rustbook(build, s.target, \"unstable-book\"));\n+         .run(move |s| doc::rustbook_src(build,\n+                                         s.target,\n+                                         \"unstable-book\",\n+                                         &build.md_doc_out(s.target)));\n     rules.doc(\"doc-standalone\", \"src/doc\")\n          .dep(move |s| {\n              s.name(\"rustc\")\n@@ -679,6 +692,12 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .default(build.config.docs)\n          .host(true)\n          .run(move |s| doc::error_index(build, s.target));\n+    rules.doc(\"doc-unstable-book-gen\", \"src/tools/unstable-book-gen\")\n+         .dep(move |s| s.name(\"tool-unstable-book-gen\").target(&build.config.build).stage(0))\n+         .dep(move |s| s.name(\"librustc-link\"))\n+         .default(build.config.docs)\n+         .host(true)\n+         .run(move |s| doc::unstable_book_gen(build, s.target));\n     for (krate, path, default) in krates(\"std\") {\n         rules.doc(&krate.doc_step, path)\n              .dep(|s| s.name(\"libstd-link\"))"}, {"sha": "f22095fe5de2e632bdcaae4142b204b744815748", "filename": "src/doc/unstable-book/src/language-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -190,4 +190,4 @@ constraints, etc.\n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n \n If you need more power and don't mind losing some of the niceties of\n-`asm!`, check out [global_asm](language-features/global_asm.html).\n+`asm!`, check out [global_asm](language-features/global-asm.html)."}, {"sha": "f1ef74a63b513acedd4ff96396812640b451ac9b", "filename": "src/doc/unstable-book/src/language-features/global-asm.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-asm.md?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "previous_filename": "src/doc/unstable-book/src/language-features/global_asm.md"}, {"sha": "570f779417f0980056664c3569c33a8b57c134db", "filename": "src/doc/unstable-book/src/library-features/from-utf8-error-as-bytes.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffrom-utf8-error-as-bytes.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffrom-utf8-error-as-bytes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffrom-utf8-error-as-bytes.md?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "previous_filename": "src/doc/unstable-book/src/library-features/from_utf8_error_as_bytes.md"}, {"sha": "81db23ccceb55c1d8a06554eedf050ac55f0c734", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 52, "deletions": 14, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -24,7 +24,7 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::path::Path;\n \n-#[derive(Debug, PartialEq)]\n+#[derive(Debug, PartialEq, Clone)]\n pub enum Status {\n     Stable,\n     Removed,\n@@ -42,13 +42,16 @@ impl fmt::Display for Status {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct Feature {\n     pub level: Status,\n     pub since: String,\n     pub has_gate_test: bool,\n+    pub tracking_issue: Option<u32>,\n }\n \n+pub type Features = HashMap<String, Feature>;\n+\n pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n     let mut features = collect_lang_features(path);\n     assert!(!features.is_empty());\n@@ -168,8 +171,7 @@ fn find_attr_val<'a>(line: &'a str, attr: &str) -> Option<&'a str> {\n         .map(|(i, j)| &line[i..j])\n }\n \n-fn test_filen_gate(filen_underscore: &str,\n-                   features: &mut HashMap<String, Feature>) -> bool {\n+fn test_filen_gate(filen_underscore: &str, features: &mut Features) -> bool {\n     if filen_underscore.starts_with(\"feature_gate\") {\n         for (n, f) in features.iter_mut() {\n             if filen_underscore == format!(\"feature_gate_{}\", n) {\n@@ -181,7 +183,7 @@ fn test_filen_gate(filen_underscore: &str,\n     return false;\n }\n \n-pub fn collect_lang_features(base_src_path: &Path) -> HashMap<String, Feature> {\n+pub fn collect_lang_features(base_src_path: &Path) -> Features {\n     let mut contents = String::new();\n     let path = base_src_path.join(\"libsyntax/feature_gate.rs\");\n     t!(t!(File::open(path)).read_to_string(&mut contents));\n@@ -197,20 +199,28 @@ pub fn collect_lang_features(base_src_path: &Path) -> HashMap<String, Feature> {\n             };\n             let name = parts.next().unwrap().trim();\n             let since = parts.next().unwrap().trim().trim_matches('\"');\n+            let issue_str = parts.next().unwrap().trim();\n+            let tracking_issue = if issue_str.starts_with(\"None\") {\n+                None\n+            } else {\n+                let s = issue_str.split(\"(\").nth(1).unwrap().split(\")\").nth(0).unwrap();\n+                Some(s.parse().unwrap())\n+            };\n             Some((name.to_owned(),\n                 Feature {\n-                    level: level,\n+                    level,\n                     since: since.to_owned(),\n                     has_gate_test: false,\n+                    tracking_issue,\n                 }))\n         })\n         .collect()\n }\n \n pub fn collect_lib_features(base_src_path: &Path,\n                             bad: &mut bool,\n-                            features: &HashMap<String, Feature>) -> HashMap<String, Feature> {\n-    let mut lib_features = HashMap::<String, Feature>::new();\n+                            features: &Features) -> Features {\n+    let mut lib_features = Features::new();\n     let mut contents = String::new();\n     super::walk(base_src_path,\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n@@ -224,10 +234,32 @@ pub fn collect_lib_features(base_src_path: &Path,\n         contents.truncate(0);\n         t!(t!(File::open(&file), &file).read_to_string(&mut contents));\n \n+        let mut becoming_feature: Option<(String, Feature)> = None;\n         for (i, line) in contents.lines().enumerate() {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n+            if let Some((ref name, ref mut f)) = becoming_feature {\n+                if f.tracking_issue.is_none() {\n+                    f.tracking_issue = find_attr_val(line, \"issue\")\n+                    .map(|s| s.parse().unwrap());\n+                }\n+                if line.ends_with(\"]\") {\n+                    lib_features.insert(name.to_owned(), f.clone());\n+                } else if !line.ends_with(\",\") && !line.ends_with(\"\\\\\") {\n+                    // We need to bail here because we might have missed the\n+                    // end of a stability attribute above because the \"]\"\n+                    // might not have been at the end of the line.\n+                    // We could then get into the very unfortunate situation that\n+                    // we continue parsing the file assuming the current stability\n+                    // attribute has not ended, and ignoring possible feature\n+                    // attributes in the process.\n+                    err(\"malformed stability attribute\");\n+                } else {\n+                    continue;\n+                }\n+            }\n+            becoming_feature = None;\n             let level = if line.contains(\"[unstable(\") {\n                 Status::Unstable\n             } else if line.contains(\"[stable(\") {\n@@ -250,6 +282,7 @@ pub fn collect_lib_features(base_src_path: &Path,\n                 }\n                 None => \"None\",\n             };\n+            let tracking_issue = find_attr_val(line, \"issue\").map(|s| s.parse().unwrap());\n \n             if features.contains_key(feature_name) {\n                 err(\"duplicating a lang feature\");\n@@ -263,12 +296,17 @@ pub fn collect_lib_features(base_src_path: &Path,\n                 }\n                 continue;\n             }\n-            lib_features.insert(feature_name.to_owned(),\n-                                Feature {\n-                                    level: level,\n-                                    since: since.to_owned(),\n-                                    has_gate_test: false,\n-                                });\n+            let feature = Feature {\n+                level,\n+                since: since.to_owned(),\n+                has_gate_test: false,\n+                tracking_issue,\n+            };\n+            if line.contains(\"]\") {\n+                lib_features.insert(feature_name.to_owned(), feature);\n+            } else {\n+                becoming_feature = Some((feature_name.to_owned(), feature));\n+            }\n         }\n     });\n     lib_features"}, {"sha": "e05ab470eedc9aed2046221e63a657c55db778f7", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -11,26 +11,28 @@\n use std::collections::HashSet;\n use std::fs;\n use std::path;\n-use features::{collect_lang_features, collect_lib_features, Status};\n+use features::{collect_lang_features, collect_lib_features, Features, Status};\n \n-const PATH_STR: &'static str = \"doc/unstable-book/src\";\n+pub const PATH_STR: &str = \"doc/unstable-book/src\";\n \n-const LANG_FEATURES_DIR: &'static str = \"language-features\";\n+pub const COMPILER_FLAGS_DIR: &str = \"compiler-flags\";\n \n-const LIB_FEATURES_DIR: &'static str = \"library-features\";\n+pub const LANG_FEATURES_DIR: &str = \"language-features\";\n+\n+pub const LIB_FEATURES_DIR: &str = \"library-features\";\n \n /// Build the path to the Unstable Book source directory from the Rust 'src' directory\n-fn unstable_book_path(base_src_path: &path::Path) -> path::PathBuf {\n+pub fn unstable_book_path(base_src_path: &path::Path) -> path::PathBuf {\n     base_src_path.join(PATH_STR)\n }\n \n /// Directory where the features are documented within the Unstable Book source directory\n-fn unstable_book_lang_features_path(base_src_path: &path::Path) -> path::PathBuf {\n+pub fn unstable_book_lang_features_path(base_src_path: &path::Path) -> path::PathBuf {\n     unstable_book_path(base_src_path).join(LANG_FEATURES_DIR)\n }\n \n /// Directory where the features are documented within the Unstable Book source directory\n-fn unstable_book_lib_features_path(base_src_path: &path::Path) -> path::PathBuf {\n+pub fn unstable_book_lib_features_path(base_src_path: &path::Path) -> path::PathBuf {\n     unstable_book_path(base_src_path).join(LIB_FEATURES_DIR)\n }\n \n@@ -42,27 +44,16 @@ fn dir_entry_is_file(dir_entry: &fs::DirEntry) -> bool {\n         .is_file()\n }\n \n-/// Retrieve names of all lang-related unstable features\n-fn collect_unstable_lang_feature_names(base_src_path: &path::Path) -> HashSet<String> {\n-    collect_lang_features(base_src_path)\n-        .into_iter()\n-        .filter(|&(_, ref f)| f.level == Status::Unstable)\n-        .map(|(ref name, _)| name.to_owned())\n-        .collect()\n-}\n-\n-/// Retrieve names of all lib-related unstable features\n-fn collect_unstable_lib_feature_names(base_src_path: &path::Path) -> HashSet<String> {\n-    let mut bad = true;\n-    let lang_features = collect_lang_features(base_src_path);\n-    collect_lib_features(base_src_path, &mut bad, &lang_features)\n-        .into_iter()\n+/// Retrieve names of all unstable features\n+pub fn collect_unstable_feature_names(features: &Features) -> HashSet<String> {\n+    features\n+        .iter()\n         .filter(|&(_, ref f)| f.level == Status::Unstable)\n-        .map(|(ref name, _)| name.to_owned())\n+        .map(|(name, _)| name.to_owned())\n         .collect()\n }\n \n-fn collect_unstable_book_section_file_names(dir: &path::Path) -> HashSet<String> {\n+pub fn collect_unstable_book_section_file_names(dir: &path::Path) -> HashSet<String> {\n     fs::read_dir(dir)\n         .expect(\"could not read directory\")\n         .into_iter()\n@@ -95,7 +86,10 @@ pub fn check(path: &path::Path, bad: &mut bool) {\n \n     // Library features\n \n-    let unstable_lib_feature_names = collect_unstable_lib_feature_names(path);\n+    let lang_features = collect_lang_features(path);\n+    let lib_features = collect_lib_features(path, bad, &lang_features);\n+\n+    let unstable_lib_feature_names = collect_unstable_feature_names(&lib_features);\n     let unstable_book_lib_features_section_file_names =\n         collect_unstable_book_lib_features_section_file_names(path);\n \n@@ -119,7 +113,7 @@ pub fn check(path: &path::Path, bad: &mut bool) {\n \n     // Language features\n \n-    let unstable_lang_feature_names = collect_unstable_lang_feature_names(path);\n+    let unstable_lang_feature_names = collect_unstable_feature_names(&lang_features);\n     let unstable_book_lang_features_section_file_names =\n         collect_unstable_book_lang_features_section_file_names(path);\n "}, {"sha": "4751a5e41510cc075983b0ca690f3e0bd43b1f2b", "filename": "src/tools/unstable-book-gen/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2FCargo.toml?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+authors = [\"est31 <MTest31@outlook.com>\",\n+           \"The Rust Project Developers\"]\n+name = \"unstable-book-gen\"\n+version = \"0.1.0\"\n+license = \"MIT/Apache-2.0\"\n+\n+[dependencies]\n+tidy = { path = \"../tidy\" }"}, {"sha": "933c928e2f090aa8e9d1d50ab74a8714fb729586", "filename": "src/tools/unstable-book-gen/src/SUMMARY.md", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2FSUMMARY.md?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -0,0 +1,8 @@\n+[The Unstable Book](the-unstable-book.md)\n+\n+- [Compiler flags](compiler-flags.md)\n+{compiler_flags}\n+- [Language features](language-features.md)\n+{language_features}\n+- [Library Features](library-features.md)\n+{library_features}"}, {"sha": "adec73d4a69b7ec79e55a92a6e1c8cbbe0e9e37b", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -0,0 +1,149 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Auto-generate stub docs for the unstable book\n+\n+#![deny(warnings)]\n+\n+extern crate tidy;\n+\n+use tidy::features::{Feature, Features, collect_lib_features, collect_lang_features};\n+use tidy::unstable_book::{collect_unstable_feature_names, collect_unstable_book_section_file_names,\n+                          PATH_STR, LANG_FEATURES_DIR, LIB_FEATURES_DIR};\n+use std::collections::HashSet;\n+use std::io::Write;\n+use std::fs::{self, File};\n+use std::env;\n+use std::path::Path;\n+\n+/// A helper macro to `unwrap` a result except also print out details like:\n+///\n+/// * The file/line of the panic\n+/// * The expression that failed\n+/// * The error itself\n+macro_rules! t {\n+    ($e:expr) => (match $e {\n+        Ok(e) => e,\n+        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n+    })\n+}\n+\n+fn generate_stub_issue(path: &Path, name: &str, issue: u32) {\n+    let mut file = t!(File::create(path));\n+    t!(file.write_fmt(format_args!(include_str!(\"stub-issue.md\"),\n+                                   name = name,\n+                                   issue = issue)));\n+}\n+\n+fn generate_stub_no_issue(path: &Path, name: &str) {\n+    let mut file = t!(File::create(path));\n+    t!(file.write_fmt(format_args!(include_str!(\"stub-no-issue.md\"),\n+                                   name = name)));\n+}\n+\n+fn hset_to_summary_str(hset: HashSet<String>, dir: &str\n+) -> String {\n+    hset\n+        .iter()\n+        .map(|ref n| format!(\"    - [{}]({}/{}.md)\",\n+                                      n,\n+                                      dir,\n+                                      n.replace('_', \"-\")))\n+        .fold(\"\".to_owned(), |s, a| s + &a + \"\\n\")\n+}\n+\n+fn generate_summary(path: &Path, lang_features: &Features, lib_features: &Features) {\n+    let compiler_flags = collect_unstable_book_section_file_names(\n+        &path.join(\"compiler-flags\"));\n+\n+    let compiler_flags_str = hset_to_summary_str(compiler_flags,\n+                                                 \"compiler-flags\");\n+\n+    let unstable_lang_features = collect_unstable_feature_names(&lang_features);\n+    let unstable_lib_features = collect_unstable_feature_names(&lib_features);\n+\n+    let lang_features_str = hset_to_summary_str(unstable_lang_features,\n+                                                LANG_FEATURES_DIR);\n+    let lib_features_str = hset_to_summary_str(unstable_lib_features,\n+                                               LIB_FEATURES_DIR);\n+\n+    let mut file = t!(File::create(&path.join(\"SUMMARY.md\")));\n+    t!(file.write_fmt(format_args!(include_str!(\"SUMMARY.md\"),\n+                                   compiler_flags = compiler_flags_str,\n+                                   language_features = lang_features_str,\n+                                   library_features = lib_features_str)));\n+\n+}\n+\n+fn has_valid_tracking_issue(f: &Feature) -> bool {\n+    if let Some(n) = f.tracking_issue {\n+        if n > 0 {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn generate_unstable_book_files(src :&Path, out: &Path, features :&Features) {\n+    let unstable_features = collect_unstable_feature_names(features);\n+    let unstable_section_file_names = collect_unstable_book_section_file_names(src);\n+    t!(fs::create_dir_all(&out));\n+    for feature_name in &unstable_features - &unstable_section_file_names {\n+        let file_name = format!(\"{}.md\", feature_name.replace('_', \"-\"));\n+        let out_file_path = out.join(&file_name);\n+        let feature = &features[&feature_name];\n+\n+        if has_valid_tracking_issue(&feature) {\n+            generate_stub_issue(&out_file_path, &feature_name, feature.tracking_issue.unwrap());\n+        } else {\n+            generate_stub_no_issue(&out_file_path, &feature_name);\n+        }\n+    }\n+}\n+\n+fn copy_recursive(path: &Path, to: &Path) {\n+    for entry in t!(fs::read_dir(path)) {\n+        let e = t!(entry);\n+        let t = t!(e.metadata());\n+        let dest = &to.join(e.file_name());\n+        if t.is_file() {\n+            t!(fs::copy(&e.path(), dest));\n+        } else if t.is_dir() {\n+            t!(fs::create_dir_all(dest));\n+            copy_recursive(&e.path(), dest);\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let src_path_str = env::args_os().skip(1).next().expect(\"source path required\");\n+    let dest_path_str = env::args_os().skip(2).next().expect(\"destination path required\");\n+    let src_path = Path::new(&src_path_str);\n+    let dest_path = Path::new(&dest_path_str).join(\"src\");\n+\n+    let lang_features = collect_lang_features(src_path);\n+    let mut bad = false;\n+    let lib_features = collect_lib_features(src_path, &mut bad, &lang_features);\n+\n+    let doc_src_path = src_path.join(PATH_STR);\n+\n+    t!(fs::create_dir_all(&dest_path));\n+\n+    generate_unstable_book_files(&doc_src_path.join(LANG_FEATURES_DIR),\n+                                 &dest_path.join(LANG_FEATURES_DIR),\n+                                 &lang_features);\n+    generate_unstable_book_files(&doc_src_path.join(LIB_FEATURES_DIR),\n+                                 &dest_path.join(LIB_FEATURES_DIR),\n+                                 &lib_features);\n+\n+    copy_recursive(&doc_src_path, &dest_path);\n+\n+    generate_summary(&dest_path, &lang_features, &lib_features);\n+}"}, {"sha": "8698fb7278f6a5fe6fd9480dd71a288e9f497f24", "filename": "src/tools/unstable-book-gen/src/stub-issue.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fstub-issue.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fstub-issue.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fstub-issue.md?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -0,0 +1,7 @@\n+# `{name}`\n+\n+The tracking issue for this feature is: [#{issue}]\n+\n+[#{issue}]: https://github.com/rust-lang/rust/issues/{issue}\n+\n+------------------------"}, {"sha": "3da140633d0f75825654399470356f6c49454977", "filename": "src/tools/unstable-book-gen/src/stub-no-issue.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fstub-no-issue.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2d59067fb9f365e302710005b5c3ccc3ea85f9a/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fstub-no-issue.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fstub-no-issue.md?ref=c2d59067fb9f365e302710005b5c3ccc3ea85f9a", "patch": "@@ -0,0 +1,5 @@\n+# `{name}`\n+\n+This feature has no tracking issue, and is therefore likely internal to the compiler, not being intended for general use.\n+\n+------------------------"}]}