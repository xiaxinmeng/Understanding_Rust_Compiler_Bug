{"sha": "9cc5ee359a27b096d4945c672eb1383f4490fbf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYzVlZTM1OWEyN2IwOTZkNDk0NWM2NzJlYjEzODNmNDQ5MGZiZjE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-08T12:17:35Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:53Z"}, "message": "mir: Unsize ConstVal::ByteStr before comparing &[u8] against it.", "tree": {"sha": "c2facf7035a8c3923d2ae8a9bc4971b634cc2248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2facf7035a8c3923d2ae8a9bc4971b634cc2248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cc5ee359a27b096d4945c672eb1383f4490fbf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc5ee359a27b096d4945c672eb1383f4490fbf1", "html_url": "https://github.com/rust-lang/rust/commit/9cc5ee359a27b096d4945c672eb1383f4490fbf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cc5ee359a27b096d4945c672eb1383f4490fbf1/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc5e0732a95861de755cf14bec05d873bfa7481", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc5e0732a95861de755cf14bec05d873bfa7481", "html_url": "https://github.com/rust-lang/rust/commit/ccc5e0732a95861de755cf14bec05d873bfa7481"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "2d4d4e51ba73fe5d4bbe160821f0228eaeb9ab0e", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc5ee359a27b096d4945c672eb1383f4490fbf1/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc5ee359a27b096d4945c672eb1383f4490fbf1/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=9cc5ee359a27b096d4945c672eb1383f4490fbf1", "patch": "@@ -948,7 +948,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    fn is_slice(&self) -> bool {\n+    pub fn is_slice(&self) -> bool {\n         match self.sty {\n             TyRawPtr(mt) | TyRef(_, mt) => match mt.ty.sty {\n                 TySlice(_) | TyStr => true,"}, {"sha": "bdec261ce65afc7a44481c87e141e8ab45745d88", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9cc5ee359a27b096d4945c672eb1383f4490fbf1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc5ee359a27b096d4945c672eb1383f4490fbf1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=9cc5ee359a27b096d4945c672eb1383f4490fbf1", "patch": "@@ -175,9 +175,28 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n \n             TestKind::Eq { ref value, ty } => {\n-                let expect = self.literal_operand(test.span, ty.clone(), Literal::Value {\n-                    value: value.clone()\n-                });\n+                // If we're matching against &[u8] with b\"...\", we need to insert\n+                // an unsizing coercion, as the byte string has type &[u8; N].\n+                let expect = match *value {\n+                    ConstVal::ByteStr(ref bytes) if ty.is_slice() => {\n+                        let tcx = self.hir.tcx();\n+                        let array_ty = tcx.mk_array(tcx.types.u8, bytes.len());\n+                        let ref_ty = tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic), array_ty);\n+                        let array = self.literal_operand(test.span, ref_ty, Literal::Value {\n+                            value: value.clone()\n+                        });\n+\n+                        let sliced = self.temp(ty);\n+                        self.cfg.push_assign(block, test.span, &sliced,\n+                                             Rvalue::Cast(CastKind::Unsize, array, ty));\n+                        Operand::Consume(sliced)\n+                    }\n+                    _ => {\n+                        self.literal_operand(test.span, ty, Literal::Value {\n+                            value: value.clone()\n+                        })\n+                    }\n+                };\n                 let val = Operand::Consume(lvalue.clone());\n                 let fail = self.cfg.start_new_block();\n                 let block = self.compare(block, fail, test.span, BinOp::Eq, expect, val.clone());"}]}