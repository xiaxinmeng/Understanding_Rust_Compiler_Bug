{"sha": "81e02708f1f4760244756548981277d5199baa9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTAyNzA4ZjFmNDc2MDI0NDc1NjU0ODk4MTI3N2Q1MTk5YmFhOWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-20T15:12:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-20T15:12:40Z"}, "message": "Auto merge of #76975 - RalfJung:rollup-s2wiuqr, r=RalfJung\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #76732 (Add docs for `BasicBlock`)\n - #76832 (Let backends define custom targets)\n - #76866 (Remove unused feature gates from library/ crates)\n - #76875 (Move to intra-doc links in library/alloc/src/collections/binary_heap.rs)\n - #76876 (Move to intra-doc links in collections/btree/map.rs and collections/linked_list.rs)\n - #76877 (Move to intra-doc links in collections/vec_deque.rs and collections/vec_deque/drain.rs)\n - #76878 (Move the version number to a plaintext file)\n - #76883 (README.md: Remove prompts from code blocks)\n - #76887 (Add missing examples on HashSet iter types)\n - #76890 (use matches!() macro for simple if let conditions)\n - #76891 (don't take `TyCtxt` by reference)\n - #76910 (transmute: use diagnostic item)\n - #76924 (Add tracking issue for feature(unix_socket_peek))\n - #76926 (BTreeMap: code readability tweaks)\n - #76940 (Don't allow implementing trait directly on type-alias-impl-trait)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "f8f6f7d4f1a2566325892459032750daca6b2599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8f6f7d4f1a2566325892459032750daca6b2599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e02708f1f4760244756548981277d5199baa9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e02708f1f4760244756548981277d5199baa9a", "html_url": "https://github.com/rust-lang/rust/commit/81e02708f1f4760244756548981277d5199baa9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e02708f1f4760244756548981277d5199baa9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b873fa6d42cf305131d2583d03b84686e5e40f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b873fa6d42cf305131d2583d03b84686e5e40f2e", "html_url": "https://github.com/rust-lang/rust/commit/b873fa6d42cf305131d2583d03b84686e5e40f2e"}, {"sha": "fc58224b79627351225ad52cb93a9cb8063c5a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc58224b79627351225ad52cb93a9cb8063c5a71", "html_url": "https://github.com/rust-lang/rust/commit/fc58224b79627351225ad52cb93a9cb8063c5a71"}], "stats": {"total": 572, "additions": 359, "deletions": 213}, "files": [{"sha": "d445bbdf6e8423a7a41df536db568f44ad22a1c1", "filename": "README.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -44,8 +44,8 @@ by running `./x.py --help` or reading the [rustc dev guide][rustcguidebuild].\n 2. Clone the [source] with `git`:\n \n    ```sh\n-   $ git clone https://github.com/rust-lang/rust.git\n-   $ cd rust\n+   git clone https://github.com/rust-lang/rust.git\n+   cd rust\n    ```\n \n [source]: https://github.com/rust-lang/rust\n@@ -57,7 +57,7 @@ by running `./x.py --help` or reading the [rustc dev guide][rustcguidebuild].\n     Copy the default `config.toml.example` to `config.toml` to get started.\n \n     ```sh\n-    $ cp config.toml.example config.toml\n+    cp config.toml.example config.toml\n     ```\n \n     If you plan to use `x.py install` to create an installation, it is recommended\n@@ -68,7 +68,7 @@ by running `./x.py --help` or reading the [rustc dev guide][rustcguidebuild].\n 4. Build and install:\n \n     ```sh\n-    $ ./x.py build && ./x.py install\n+    ./x.py build && ./x.py install\n     ```\n \n     When complete, `./x.py install` will place several programs into\n@@ -106,15 +106,15 @@ build.\n \n    ```sh\n    # Update package mirrors (may be needed if you have a fresh install of MSYS2)\n-   $ pacman -Sy pacman-mirrors\n+   pacman -Sy pacman-mirrors\n \n    # Install build tools needed for Rust. If you're building a 32-bit compiler,\n    # then replace \"x86_64\" below with \"i686\". If you've already got git, python,\n    # or CMake installed and in PATH you can remove them from this list. Note\n    # that it is important that you do **not** use the 'python2', 'cmake' and 'ninja'\n    # packages from the 'msys2' subsystem. The build has historically been known\n    # to fail with these packages.\n-   $ pacman -S git \\\n+   pacman -S git \\\n                make \\\n                diffutils \\\n                tar \\\n@@ -127,7 +127,7 @@ build.\n 4. Navigate to Rust's source code (or clone it), then build it:\n \n    ```sh\n-   $ ./x.py build && ./x.py install\n+   ./x.py build && ./x.py install\n    ```\n \n #### MSVC\n@@ -145,7 +145,7 @@ With these dependencies installed, you can build the compiler in a `cmd.exe`\n shell with:\n \n ```sh\n-> python x.py build\n+python x.py build\n ```\n \n Currently, building Rust only works with some known versions of Visual Studio. If\n@@ -154,8 +154,8 @@ you may need to force rustbuild to use an older version. This can be done\n by manually calling the appropriate vcvars file before running the bootstrap.\n \n ```batch\n-> CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n-> python x.py build\n+CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n+python x.py build\n ```\n \n #### Specifying an ABI\n@@ -181,8 +181,8 @@ While it's not the recommended build system, this project also provides a\n configure script and makefile (the latter of which just invokes `x.py`).\n \n ```sh\n-$ ./configure\n-$ make && sudo make install\n+./configure\n+make && sudo make install\n ```\n \n When using the configure script, the generated `config.mk` file may override the\n@@ -194,7 +194,7 @@ When using the configure script, the generated `config.mk` file may override the\n If you\u2019d like to build the documentation, it\u2019s almost the same:\n \n ```sh\n-$ ./x.py doc\n+./x.py doc\n ```\n \n The generated documentation will appear under `doc` in the `build` directory for"}, {"sha": "95abf552915063abeece8f75ca747e6cd5460a1c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1931,7 +1931,7 @@ pub enum TyKind {\n \n impl TyKind {\n     pub fn is_implicit_self(&self) -> bool {\n-        if let TyKind::ImplicitSelf = *self { true } else { false }\n+        matches!(self, TyKind::ImplicitSelf)\n     }\n \n     pub fn is_unit(&self) -> bool {\n@@ -2227,7 +2227,7 @@ pub enum Async {\n \n impl Async {\n     pub fn is_async(self) -> bool {\n-        if let Async::Yes { .. } = self { true } else { false }\n+        matches!(self, Async::Yes { .. })\n     }\n \n     /// In this case this is an `async` return, the `NodeId` for the generated `impl Trait` item.\n@@ -2508,7 +2508,7 @@ pub enum VisibilityKind {\n \n impl VisibilityKind {\n     pub fn is_pub(&self) -> bool {\n-        if let VisibilityKind::Public = *self { true } else { false }\n+        matches!(self, VisibilityKind::Public)\n     }\n }\n "}, {"sha": "232ee35c4f7df82d9d780346c21ed379ce03d70a", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -868,10 +868,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     .emit();\n                 }\n \n-                if !bounds\n-                    .iter()\n-                    .any(|b| if let GenericBound::Trait(..) = *b { true } else { false })\n-                {\n+                if !bounds.iter().any(|b| matches!(b, GenericBound::Trait(..))) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n                 }\n "}, {"sha": "9951c25200129da648036609adeed89640a1a85a", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -160,10 +160,10 @@ pub enum StabilityLevel {\n \n impl StabilityLevel {\n     pub fn is_unstable(&self) -> bool {\n-        if let StabilityLevel::Unstable { .. } = *self { true } else { false }\n+        matches!(self, StabilityLevel::Unstable { .. })\n     }\n     pub fn is_stable(&self) -> bool {\n-        if let StabilityLevel::Stable { .. } = *self { true } else { false }\n+        matches!(self, StabilityLevel::Stable { .. })\n     }\n }\n "}, {"sha": "f4924997d1af960ababae9bed61987be0d4e89a5", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1529,7 +1529,7 @@ impl<'a> TraitDef<'a> {\n             }\n         }\n \n-        let is_tuple = if let ast::VariantData::Tuple(..) = struct_def { true } else { false };\n+        let is_tuple = matches!(struct_def, ast::VariantData::Tuple(..));\n         match (just_spans.is_empty(), named_idents.is_empty()) {\n             (false, false) => cx.span_bug(\n                 self.span,"}, {"sha": "90520f77e3c04337111a9c01213531431a070d73", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -15,6 +15,7 @@ use rustc_session::{\n };\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::LayoutOf;\n+use rustc_target::spec::Target;\n \n pub use rustc_data_structures::sync::MetadataRef;\n \n@@ -54,6 +55,12 @@ pub trait CodegenBackend {\n     fn print_passes(&self) {}\n     fn print_version(&self) {}\n \n+    /// If this plugin provides additional builtin targets, provide the one enabled by the options here.\n+    /// Be careful: this is called *before* init() is called.\n+    fn target_override(&self, _opts: &config::Options) -> Option<Target> {\n+        None\n+    }\n+\n     fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n     fn provide(&self, _providers: &mut Providers);\n     fn provide_extern(&self, _providers: &mut Providers);"}, {"sha": "fae5b94b3a81edc650fd124051888f4b919e47c7", "filename": "compiler/rustc_errors/src/snippet.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -118,17 +118,15 @@ pub struct Annotation {\n impl Annotation {\n     /// Whether this annotation is a vertical line placeholder.\n     pub fn is_line(&self) -> bool {\n-        if let AnnotationType::MultilineLine(_) = self.annotation_type { true } else { false }\n+        matches!(self.annotation_type, AnnotationType::MultilineLine(_))\n     }\n \n     pub fn is_multiline(&self) -> bool {\n-        match self.annotation_type {\n+        matches!(self.annotation_type,\n             AnnotationType::Multiline(_)\n             | AnnotationType::MultilineStart(_)\n             | AnnotationType::MultilineLine(_)\n-            | AnnotationType::MultilineEnd(_) => true,\n-            _ => false,\n-        }\n+            | AnnotationType::MultilineEnd(_))\n     }\n \n     pub fn len(&self) -> usize {"}, {"sha": "72e10bc4304d050d41b2cb68f5b247a5c0f4843e", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -40,6 +40,7 @@ fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n         DiagnosticOutput::Default,\n         Default::default(),\n         None,\n+        None,\n     );\n     (sess, cfg)\n }"}, {"sha": "0eed6938c316923e106d31f67fb74d059ad4d836", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -65,16 +65,21 @@ pub fn create_session(\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     descriptions: Registry,\n ) -> (Lrc<Session>, Lrc<Box<dyn CodegenBackend>>) {\n+    let codegen_backend = get_codegen_backend(&sopts);\n+    // target_override is documented to be called before init(), so this is okay\n+    let target_override = codegen_backend.target_override(&sopts);\n+\n     let mut sess = session::build_session(\n         sopts,\n         input_path,\n         descriptions,\n         diagnostic_output,\n         lint_caps,\n         file_loader,\n+        target_override,\n     );\n \n-    let codegen_backend = get_codegen_backend(&sess);\n+    codegen_backend.init(&sess);\n \n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));\n     add_configuration(&mut cfg, &mut sess, &*codegen_backend);\n@@ -219,13 +224,13 @@ fn load_backend_from_dylib(path: &Path) -> fn() -> Box<dyn CodegenBackend> {\n     }\n }\n \n-pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n+pub fn get_codegen_backend(sopts: &config::Options) -> Box<dyn CodegenBackend> {\n     static INIT: Once = Once::new();\n \n     static mut LOAD: fn() -> Box<dyn CodegenBackend> = || unreachable!();\n \n     INIT.call_once(|| {\n-        let codegen_name = sess.opts.debugging_opts.codegen_backend.as_deref().unwrap_or(\"llvm\");\n+        let codegen_name = sopts.debugging_opts.codegen_backend.as_deref().unwrap_or(\"llvm\");\n         let backend = match codegen_name {\n             filename if filename.contains('.') => load_backend_from_dylib(filename.as_ref()),\n             codegen_name => get_builtin_codegen_backend(codegen_name),\n@@ -235,9 +240,7 @@ pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n             LOAD = backend;\n         }\n     });\n-    let backend = unsafe { LOAD() };\n-    backend.init(sess);\n-    backend\n+    unsafe { LOAD() }\n }\n \n // This is used for rustdoc, but it uses similar machinery to codegen backend"}, {"sha": "c35b6a9aaf4e95b1603096e51b99ff72f85523c5", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1984,9 +1984,9 @@ impl ExplicitOutlivesRequirements {\n             .filter_map(|(i, bound)| {\n                 if let hir::GenericBound::Outlives(lifetime) = bound {\n                     let is_inferred = match tcx.named_region(lifetime.hir_id) {\n-                        Some(Region::Static) if infer_static => inferred_outlives\n-                            .iter()\n-                            .any(|r| if let ty::ReStatic = r { true } else { false }),\n+                        Some(Region::Static) if infer_static => {\n+                            inferred_outlives.iter().any(|r| matches!(r, ty::ReStatic))\n+                        }\n                         Some(Region::EarlyBound(index, ..)) => inferred_outlives.iter().any(|r| {\n                             if let ty::ReEarlyBound(ebr) = r { ebr.index == index } else { false }\n                         }),\n@@ -2078,9 +2078,10 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n             let mut lint_spans = Vec::new();\n \n             for param in hir_generics.params {\n-                let has_lifetime_bounds = param.bounds.iter().any(|bound| {\n-                    if let hir::GenericBound::Outlives(_) = bound { true } else { false }\n-                });\n+                let has_lifetime_bounds = param\n+                    .bounds\n+                    .iter()\n+                    .any(|bound| matches!(bound, hir::GenericBound::Outlives(_)));\n                 if !has_lifetime_bounds {\n                     continue;\n                 }\n@@ -2349,13 +2350,6 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n \n         /// Determine if this expression is a \"dangerous initialization\".\n         fn is_dangerous_init(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<InitKind> {\n-            // `transmute` is inside an anonymous module (the `extern` block?);\n-            // `Invalid` represents the empty string and matches that.\n-            // FIXME(#66075): use diagnostic items.  Somehow, that does not seem to work\n-            // on intrinsics right now.\n-            const TRANSMUTE_PATH: &[Symbol] =\n-                &[sym::core, sym::intrinsics, kw::Invalid, sym::transmute];\n-\n             if let hir::ExprKind::Call(ref path_expr, ref args) = expr.kind {\n                 // Find calls to `mem::{uninitialized,zeroed}` methods.\n                 if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n@@ -2365,7 +2359,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                         return Some(InitKind::Zeroed);\n                     } else if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, def_id) {\n                         return Some(InitKind::Uninit);\n-                    } else if cx.match_def_path(def_id, TRANSMUTE_PATH) {\n+                    } else if cx.tcx.is_diagnostic_item(sym::transmute, def_id) {\n                         if is_zero(&args[0]) {\n                             return Some(InitKind::Zeroed);\n                         }"}, {"sha": "0265fc323b3b3d23f645507ca1859ab63c1745e3", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -720,6 +720,10 @@ impl<'tcx> LateContext<'tcx> {\n     /// Anonymous scopes such as `extern` imports are matched with `kw::Invalid`;\n     /// inherent `impl` blocks are matched with the name of the type.\n     ///\n+    /// Instead of using this method, it is often preferable to instead use\n+    /// `rustc_diagnostic_item` or a `lang_item`. This is less prone to errors\n+    /// as paths get invalidated if the target definition moves.\n+    ///\n     /// # Examples\n     ///\n     /// ```rust,ignore (no context or def id available)"}, {"sha": "f3d7c8506ab6ff3338ae7cebfb4b6859d4648f3b", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -69,7 +69,7 @@ pub enum LibSource {\n \n impl LibSource {\n     pub fn is_some(&self) -> bool {\n-        if let LibSource::Some(_) = *self { true } else { false }\n+        matches!(self, LibSource::Some(_))\n     }\n \n     pub fn option(&self) -> Option<PathBuf> {"}, {"sha": "cc9706f2d867cbe6db1bd1d222363e3455ced817", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -17,7 +17,7 @@ use rustc_target::spec::PanicStrategy;\n impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the `DefId` for a given `LangItem`.\n     /// If not found, fatally aborts compilation.\n-    pub fn require_lang_item(&self, lang_item: LangItem, span: Option<Span>) -> DefId {\n+    pub fn require_lang_item(self, lang_item: LangItem, span: Option<Span>) -> DefId {\n         self.lang_items().require(lang_item).unwrap_or_else(|msg| {\n             if let Some(span) = span {\n                 self.sess.span_fatal(span, &msg)\n@@ -27,7 +27,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    pub fn fn_trait_kind_from_lang_item(&self, id: DefId) -> Option<ty::ClosureKind> {\n+    pub fn fn_trait_kind_from_lang_item(self, id: DefId) -> Option<ty::ClosureKind> {\n         let items = self.lang_items();\n         match Some(id) {\n             x if x == items.fn_trait() => Some(ty::ClosureKind::Fn),\n@@ -37,7 +37,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn is_weak_lang_item(&self, item_def_id: DefId) -> bool {\n+    pub fn is_weak_lang_item(self, item_def_id: DefId) -> bool {\n         self.lang_items().is_weak_lang_item(item_def_id)\n     }\n }"}, {"sha": "20363625e42b644dc1820b503f2ba406dcf710d7", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -447,14 +447,14 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// Make sure to call `set_alloc_id_memory` or `set_alloc_id_same_memory` before returning such\n     /// an `AllocId` from a query.\n-    pub fn reserve_alloc_id(&self) -> AllocId {\n+    pub fn reserve_alloc_id(self) -> AllocId {\n         self.alloc_map.lock().reserve()\n     }\n \n     /// Reserves a new ID *if* this allocation has not been dedup-reserved before.\n     /// Should only be used for function pointers and statics, we don't want\n     /// to dedup IDs for \"real\" memory!\n-    fn reserve_and_set_dedup(&self, alloc: GlobalAlloc<'tcx>) -> AllocId {\n+    fn reserve_and_set_dedup(self, alloc: GlobalAlloc<'tcx>) -> AllocId {\n         let mut alloc_map = self.alloc_map.lock();\n         match alloc {\n             GlobalAlloc::Function(..) | GlobalAlloc::Static(..) => {}\n@@ -472,13 +472,13 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Generates an `AllocId` for a static or return a cached one in case this function has been\n     /// called on the same static before.\n-    pub fn create_static_alloc(&self, static_id: DefId) -> AllocId {\n+    pub fn create_static_alloc(self, static_id: DefId) -> AllocId {\n         self.reserve_and_set_dedup(GlobalAlloc::Static(static_id))\n     }\n \n     /// Generates an `AllocId` for a function.  Depending on the function type,\n     /// this might get deduplicated or assigned a new ID each time.\n-    pub fn create_fn_alloc(&self, instance: Instance<'tcx>) -> AllocId {\n+    pub fn create_fn_alloc(self, instance: Instance<'tcx>) -> AllocId {\n         // Functions cannot be identified by pointers, as asm-equal functions can get deduplicated\n         // by the linker (we set the \"unnamed_addr\" attribute for LLVM) and functions can be\n         // duplicated across crates.\n@@ -507,7 +507,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Statics with identical content will still point to the same `Allocation`, i.e.,\n     /// their data will be deduplicated through `Allocation` interning -- but they\n     /// are different places in memory and as such need different IDs.\n-    pub fn create_memory_alloc(&self, mem: &'tcx Allocation) -> AllocId {\n+    pub fn create_memory_alloc(self, mem: &'tcx Allocation) -> AllocId {\n         let id = self.reserve_alloc_id();\n         self.set_alloc_id_memory(id, mem);\n         id\n@@ -519,7 +519,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// This function exists to allow const eval to detect the difference between evaluation-\n     /// local dangling pointers and allocations in constants/statics.\n     #[inline]\n-    pub fn get_global_alloc(&self, id: AllocId) -> Option<GlobalAlloc<'tcx>> {\n+    pub fn get_global_alloc(self, id: AllocId) -> Option<GlobalAlloc<'tcx>> {\n         self.alloc_map.lock().alloc_map.get(&id).cloned()\n     }\n \n@@ -529,7 +529,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// constants (as all constants must pass interning and validation that check for dangling\n     /// ids), this function is frequently used throughout rustc, but should not be used within\n     /// the miri engine.\n-    pub fn global_alloc(&self, id: AllocId) -> GlobalAlloc<'tcx> {\n+    pub fn global_alloc(self, id: AllocId) -> GlobalAlloc<'tcx> {\n         match self.get_global_alloc(id) {\n             Some(alloc) => alloc,\n             None => bug!(\"could not find allocation for {}\", id),\n@@ -538,15 +538,15 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Freezes an `AllocId` created with `reserve` by pointing it at an `Allocation`. Trying to\n     /// call this function twice, even with the same `Allocation` will ICE the compiler.\n-    pub fn set_alloc_id_memory(&self, id: AllocId, mem: &'tcx Allocation) {\n+    pub fn set_alloc_id_memory(self, id: AllocId, mem: &'tcx Allocation) {\n         if let Some(old) = self.alloc_map.lock().alloc_map.insert(id, GlobalAlloc::Memory(mem)) {\n             bug!(\"tried to set allocation ID {}, but it was already existing as {:#?}\", id, old);\n         }\n     }\n \n     /// Freezes an `AllocId` created with `reserve` by pointing it at an `Allocation`. May be called\n     /// twice for the same `(AllocId, Allocation)` pair.\n-    fn set_alloc_id_same_memory(&self, id: AllocId, mem: &'tcx Allocation) {\n+    fn set_alloc_id_same_memory(self, id: AllocId, mem: &'tcx Allocation) {\n         self.alloc_map.lock().alloc_map.insert_same(id, GlobalAlloc::Memory(mem));\n     }\n }"}, {"sha": "8ff75bf392e69a8543813214255d13c9b8226005", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1077,6 +1077,25 @@ pub struct VarDebugInfo<'tcx> {\n // BasicBlock\n \n rustc_index::newtype_index! {\n+    /// A node in the MIR [control-flow graph][CFG].\n+    ///\n+    /// There are no branches (e.g., `if`s, function calls, etc.) within a basic block, which makes\n+    /// it easier to do [data-flow analyses] and optimizations. Instead, branches are represented\n+    /// as an edge in a graph between basic blocks.\n+    ///\n+    /// Basic blocks consist of a series of [statements][Statement], ending with a\n+    /// [terminator][Terminator]. Basic blocks can have multiple predecessors and successors,\n+    /// however there is a MIR pass ([`CriticalCallEdges`]) that removes *critical edges*, which\n+    /// are edges that go from a multi-successor node to a multi-predecessor node. This pass is\n+    /// needed because some analyses require that there are no critical edges in the CFG.\n+    ///\n+    /// Read more about basic blocks in the [rustc-dev-guide][guide-mir].\n+    ///\n+    /// [CFG]: https://rustc-dev-guide.rust-lang.org/appendix/background.html#cfg\n+    /// [data-flow analyses]:\n+    ///     https://rustc-dev-guide.rust-lang.org/appendix/background.html#what-is-a-dataflow-analysis\n+    /// [`CriticalCallEdges`]: ../../rustc_mir/transform/add_call_guards/enum.AddCallGuards.html#variant.CriticalCallEdges\n+    /// [guide-mir]: https://rustc-dev-guide.rust-lang.org/mir/\n     pub struct BasicBlock {\n         derive [HashStable]\n         DEBUG_FORMAT = \"bb{}\",\n@@ -1093,6 +1112,7 @@ impl BasicBlock {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlockData and Terminator\n \n+/// See [`BasicBlock`] for documentation on what basic blocks are at a high level.\n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n pub struct BasicBlockData<'tcx> {\n     /// List of statements in this block."}, {"sha": "cd8f12a4f3576f5ce29cc909a2623cba258fce19", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1403,7 +1403,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     // Returns the `DefId` and the `BoundRegion` corresponding to the given region.\n-    pub fn is_suitable_region(&self, region: Region<'tcx>) -> Option<FreeRegionInfo> {\n+    pub fn is_suitable_region(self, region: Region<'tcx>) -> Option<FreeRegionInfo> {\n         let (suitable_region_binding_scope, bound_region) = match *region {\n             ty::ReFree(ref free_region) => {\n                 (free_region.scope.expect_local(), free_region.bound_region)\n@@ -1433,7 +1433,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Given a `DefId` for an `fn`, return all the `dyn` and `impl` traits in its return type.\n     pub fn return_type_impl_or_dyn_traits(\n-        &self,\n+        self,\n         scope_def_id: LocalDefId,\n     ) -> Vec<&'tcx hir::Ty<'tcx>> {\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n@@ -1479,7 +1479,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         v.0\n     }\n \n-    pub fn return_type_impl_trait(&self, scope_def_id: LocalDefId) -> Option<(Ty<'tcx>, Span)> {\n+    pub fn return_type_impl_trait(self, scope_def_id: LocalDefId) -> Option<(Ty<'tcx>, Span)> {\n         // HACK: `type_of_def_id()` will fail on these (#55796), so return `None`.\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n         match self.hir().get(hir_id) {\n@@ -1497,7 +1497,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ret_ty = self.type_of(scope_def_id);\n         match ret_ty.kind() {\n             ty::FnDef(_, _) => {\n-                let sig = ret_ty.fn_sig(*self);\n+                let sig = ret_ty.fn_sig(self);\n                 let output = self.erase_late_bound_regions(&sig.output());\n                 if output.is_impl_trait() {\n                     let fn_decl = self.hir().fn_decl_by_hir_id(hir_id).unwrap();\n@@ -1511,7 +1511,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     // Checks if the bound region is in Impl Item.\n-    pub fn is_bound_region_in_impl_item(&self, suitable_region_binding_scope: LocalDefId) -> bool {\n+    pub fn is_bound_region_in_impl_item(self, suitable_region_binding_scope: LocalDefId) -> bool {\n         let container_id =\n             self.associated_item(suitable_region_binding_scope.to_def_id()).container.id();\n         if self.impl_trait_ref(container_id).is_some() {\n@@ -1528,21 +1528,21 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Determines whether identifiers in the assembly have strict naming rules.\n     /// Currently, only NVPTX* targets need it.\n-    pub fn has_strict_asm_symbol_naming(&self) -> bool {\n+    pub fn has_strict_asm_symbol_naming(self) -> bool {\n         self.sess.target.target.arch.contains(\"nvptx\")\n     }\n \n     /// Returns `&'static core::panic::Location<'static>`.\n-    pub fn caller_location_ty(&self) -> Ty<'tcx> {\n+    pub fn caller_location_ty(self) -> Ty<'tcx> {\n         self.mk_imm_ref(\n             self.lifetimes.re_static,\n             self.type_of(self.require_lang_item(LangItem::PanicLocation, None))\n-                .subst(*self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n+                .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n         )\n     }\n \n     /// Returns a displayable description and article for the given `def_id` (e.g. `(\"a\", \"struct\")`).\n-    pub fn article_and_description(&self, def_id: DefId) -> (&'static str, &'static str) {\n+    pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {\n         match self.def_kind(def_id) {\n             DefKind::Generator => match self.generator_kind(def_id).unwrap() {\n                 rustc_hir::GeneratorKind::Async(..) => (\"an\", \"async closure\"),"}, {"sha": "475c3101c1e98eefbc7697137b90bd94836913c7", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -546,22 +546,22 @@ impl<T> Trait<T> for X {\n     }\n \n     fn suggest_constraint(\n-        &self,\n+        self,\n         db: &mut DiagnosticBuilder<'_>,\n         msg: &str,\n         body_owner_def_id: DefId,\n         proj_ty: &ty::ProjectionTy<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> bool {\n         let assoc = self.associated_item(proj_ty.item_def_id);\n-        let trait_ref = proj_ty.trait_ref(*self);\n+        let trait_ref = proj_ty.trait_ref(self);\n         if let Some(item) = self.hir().get_if_local(body_owner_def_id) {\n             if let Some(hir_generics) = item.generics() {\n                 // Get the `DefId` for the type parameter corresponding to `A` in `<A as T>::Foo`.\n                 // This will also work for `impl Trait`.\n                 let def_id = if let ty::Param(param_ty) = proj_ty.self_ty().kind() {\n                     let generics = self.generics_of(body_owner_def_id);\n-                    generics.type_param(&param_ty, *self).def_id\n+                    generics.type_param(param_ty, self).def_id\n                 } else {\n                     return false;\n                 };\n@@ -629,7 +629,7 @@ impl<T> Trait<T> for X {\n     ///    and the `impl`, we provide a generic `help` to constrain the assoc type or call an assoc\n     ///    fn that returns the type.\n     fn expected_projection(\n-        &self,\n+        self,\n         db: &mut DiagnosticBuilder<'_>,\n         proj_ty: &ty::ProjectionTy<'tcx>,\n         values: &ExpectedFound<Ty<'tcx>>,\n@@ -734,7 +734,7 @@ fn foo(&self) -> Self::T { String::new() }\n     }\n \n     fn point_at_methods_that_satisfy_associated_type(\n-        &self,\n+        self,\n         db: &mut DiagnosticBuilder<'_>,\n         assoc_container_id: DefId,\n         current_method_ident: Option<Symbol>,\n@@ -789,7 +789,7 @@ fn foo(&self) -> Self::T { String::new() }\n     }\n \n     fn point_at_associated_type(\n-        &self,\n+        self,\n         db: &mut DiagnosticBuilder<'_>,\n         body_owner_def_id: DefId,\n         found: Ty<'tcx>,"}, {"sha": "84134bedef0bc218564ac823ae45e97f5a1014ed", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -623,7 +623,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Replaces any late-bound regions bound in `value` with\n     /// free variants attached to `all_outlive_scope`.\n     pub fn liberate_late_bound_regions<T>(\n-        &self,\n+        self,\n         all_outlive_scope: DefId,\n         value: &ty::Binder<T>,\n     ) -> T\n@@ -644,7 +644,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// variables and equate `value` with something else, those\n     /// variables will also be equated.\n     pub fn collect_constrained_late_bound_regions<T>(\n-        &self,\n+        self,\n         value: &Binder<T>,\n     ) -> FxHashSet<ty::BoundRegion>\n     where\n@@ -655,7 +655,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Returns a set of all late-bound regions that appear in `value` anywhere.\n     pub fn collect_referenced_late_bound_regions<T>(\n-        &self,\n+        self,\n         value: &Binder<T>,\n     ) -> FxHashSet<ty::BoundRegion>\n     where\n@@ -665,7 +665,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     fn collect_late_bound_regions<T>(\n-        &self,\n+        self,\n         value: &Binder<T>,\n         just_constraint: bool,\n     ) -> FxHashSet<ty::BoundRegion>"}, {"sha": "4127b6535bca6c5a013d0bf624dd61660367757f", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -170,9 +170,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         });\n         hasher.finish()\n     }\n-}\n \n-impl<'tcx> TyCtxt<'tcx> {\n     pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n         if let ty::Adt(def, substs) = *ty.kind() {\n             for field in def.all_fields() {\n@@ -526,22 +524,22 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Returns `true` if the node pointed to by `def_id` is a `static` item.\n-    pub fn is_static(&self, def_id: DefId) -> bool {\n+    pub fn is_static(self, def_id: DefId) -> bool {\n         self.static_mutability(def_id).is_some()\n     }\n \n     /// Returns `true` if this is a `static` item with the `#[thread_local]` attribute.\n-    pub fn is_thread_local_static(&self, def_id: DefId) -> bool {\n+    pub fn is_thread_local_static(self, def_id: DefId) -> bool {\n         self.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n     }\n \n     /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.\n-    pub fn is_mutable_static(&self, def_id: DefId) -> bool {\n+    pub fn is_mutable_static(self, def_id: DefId) -> bool {\n         self.static_mutability(def_id) == Some(hir::Mutability::Mut)\n     }\n \n     /// Get the type of the pointer to the static that we use in MIR.\n-    pub fn static_ptr_ty(&self, def_id: DefId) -> Ty<'tcx> {\n+    pub fn static_ptr_ty(self, def_id: DefId) -> Ty<'tcx> {\n         // Make sure that any constants in the static's type are evaluated.\n         let static_ty = self.normalize_erasing_regions(ty::ParamEnv::empty(), self.type_of(def_id));\n "}, {"sha": "7505e6e2dd11e224db3f97f0c0b91372335ac407", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -115,9 +115,10 @@ impl OutlivesSuggestionBuilder {\n             //    should just replace 'a with 'static.\n             // 3) Suggest unifying 'a with 'b if we have both 'a: 'b and 'b: 'a\n \n-            if outlived.iter().any(|(_, outlived_name)| {\n-                if let RegionNameSource::Static = outlived_name.source { true } else { false }\n-            }) {\n+            if outlived\n+                .iter()\n+                .any(|(_, outlived_name)| matches!(outlived_name.source, RegionNameSource::Static))\n+            {\n                 suggested.push(SuggestedConstraint::Static(fr_name));\n             } else {\n                 // We want to isolate out all lifetimes that should be unified and print out"}, {"sha": "01d518386fc4ec589534b87aa0427d4d8fff3eac", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -92,7 +92,7 @@ pub enum TempState {\n impl TempState {\n     pub fn is_promotable(&self) -> bool {\n         debug!(\"is_promotable: self={:?}\", self);\n-        if let TempState::Defined { .. } = *self { true } else { false }\n+        matches!(self, TempState::Defined { .. } )\n     }\n }\n "}, {"sha": "3fc8e6d4b04b85e046422e29909ecea88ad60791", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -281,8 +281,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n     fn strip_nops(&mut self) {\n         for blk in self.basic_blocks.iter_mut() {\n-            blk.statements\n-                .retain(|stmt| if let StatementKind::Nop = stmt.kind { false } else { true })\n+            blk.statements.retain(|stmt| !matches!(stmt.kind, StatementKind::Nop))\n         }\n     }\n }"}, {"sha": "beaf12b1db04255bb05e936216c0cb35a9fffd8e", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -96,8 +96,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n                 }\n                 StmtKind::Let { remainder_scope, init_scope, pattern, initializer, lint_level } => {\n-                    let ignores_expr_result =\n-                        if let PatKind::Wild = *pattern.kind { true } else { false };\n+                    let ignores_expr_result = matches!(*pattern.kind, PatKind::Wild);\n                     this.block_context.push(BlockFrame::Statement { ignores_expr_result });\n \n                     // Enter the remainder scope, i.e., the bindings' destruction scope."}, {"sha": "6e9d5eedf051f231c732b2bfd0f8c3686093e90f", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1793,7 +1793,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .flat_map(|(bindings, _)| bindings)\n                     .chain(&candidate.bindings)\n                     .filter(|binding| {\n-                        if let BindingMode::ByValue = binding.binding_mode { true } else { false }\n+                        matches!(binding.binding_mode, BindingMode::ByValue )\n                     });\n             // Read all of the by reference bindings to ensure that the\n             // place they refer to can't be modified by the guard."}, {"sha": "94592935c7f91bfef26e1c19d86c110e95e0bd68", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -12,11 +12,11 @@\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n+use rustc_span::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n struct DiagnosticItemCollector<'tcx> {\n@@ -100,6 +100,18 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n \n     // Collect diagnostic items in this crate.\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n+    // FIXME(visit_all_item_likes): Foreign items are not visited\n+    // here, so we have to manually look at them for now.\n+    for foreign_module in tcx.foreign_modules(LOCAL_CRATE) {\n+        for &foreign_item in foreign_module.foreign_items.iter() {\n+            match tcx.hir().get(tcx.hir().local_def_id_to_hir_id(foreign_item.expect_local())) {\n+                hir::Node::ForeignItem(item) => {\n+                    collector.observe_item(item.attrs, item.hir_id);\n+                }\n+                item => bug!(\"unexpected foreign item {:?}\", item),\n+            }\n+        }\n+    }\n \n     collector.items\n }"}, {"sha": "a48d002b2a35bb772c5e21202a91e743c334bb7d", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -395,7 +395,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // so prefixes are prepended with crate root segment if necessary.\n         // The root is prepended lazily, when the first non-empty prefix or terminating glob\n         // appears, so imports in braced groups can have roots prepended independently.\n-        let is_glob = if let ast::UseTreeKind::Glob = use_tree.kind { true } else { false };\n+        let is_glob = matches!(use_tree.kind, ast::UseTreeKind::Glob);\n         let crate_root = match prefix_iter.peek() {\n             Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.rust_2015() => {\n                 Some(seg.ident.span.ctxt())"}, {"sha": "2c01934b490dcc429f8a2b73c98ee59f01b5ada2", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1034,7 +1034,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             let mut add_bindings_for_ns = |ns| {\n                 let parent_rib = self.ribs[ns]\n                     .iter()\n-                    .rfind(|r| if let ItemRibKind(_) = r.kind { true } else { false })\n+                    .rfind(|r| matches!(r.kind, ItemRibKind(_)))\n                     .expect(\"associated item outside of an item\");\n                 seen_bindings\n                     .extend(parent_rib.bindings.iter().map(|(ident, _)| (*ident, ident.span)));"}, {"sha": "8d004675d7f4dd69aaa4196e4083fb80821e3150", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -818,10 +818,11 @@ pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateCo\n     user_cfg\n }\n \n-pub fn build_target_config(opts: &Options, error_format: ErrorOutputType) -> Config {\n-    let target = Target::search(&opts.target_triple).unwrap_or_else(|e| {\n+pub fn build_target_config(opts: &Options, target_override: Option<Target>) -> Config {\n+    let target_result = target_override.map_or_else(|| Target::search(&opts.target_triple), Ok);\n+    let target = target_result.unwrap_or_else(|e| {\n         early_error(\n-            error_format,\n+            opts.error_format,\n             &format!(\n                 \"Error loading target specification: {}. \\\n             Use `--print target-list` for a list of built-in targets\",\n@@ -835,7 +836,7 @@ pub fn build_target_config(opts: &Options, error_format: ErrorOutputType) -> Con\n         \"32\" => 32,\n         \"64\" => 64,\n         w => early_error(\n-            error_format,\n+            opts.error_format,\n             &format!(\n                 \"target specification was invalid: \\\n              unrecognized target-pointer-width {}\","}, {"sha": "ff67d3cb107d9d7720b9e24a99cfdbfbf03eadbb", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1234,6 +1234,7 @@ pub fn build_session(\n     diagnostics_output: DiagnosticOutput,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n+    target_override: Option<Target>,\n ) -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -1253,7 +1254,7 @@ pub fn build_session(\n         DiagnosticOutput::Raw(write) => Some(write),\n     };\n \n-    let target_cfg = config::build_target_config(&sopts, sopts.error_format);\n+    let target_cfg = config::build_target_config(&sopts, target_override);\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let host = Target::search(&host_triple).unwrap_or_else(|e| {\n         early_error(sopts.error_format, &format!(\"Error loading host specification: {}\", e))"}, {"sha": "af800eab67a5e36386d0ddccc96a4e8a0ac8e03c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -439,9 +439,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // This is maybe too permissive, since it allows\n             // `let u = &raw const Box::new((1,)).0`, which creates an\n             // immediately dangling raw pointer.\n-            self.typeck_results.borrow().adjustments().get(base.hir_id).map_or(false, |x| {\n-                x.iter().any(|adj| if let Adjust::Deref(_) = adj.kind { true } else { false })\n-            })\n+            self.typeck_results\n+                .borrow()\n+                .adjustments()\n+                .get(base.hir_id)\n+                .map_or(false, |x| x.iter().any(|adj| matches!(adj.kind, Adjust::Deref(_))))\n         });\n         if !is_named {\n             self.tcx.sess.emit_err(AddressOfTemporaryTaken { span: oprnd.span })"}, {"sha": "917fc5631c4f5dafc5a9526c3095bfd93d4713b3", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -230,6 +230,14 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n                     return;\n                 }\n             }\n+\n+            if let ty::Opaque(def_id, _) = *trait_ref.self_ty().kind() {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(sp, \"cannot implement trait on type alias impl trait\")\n+                    .span_note(self.tcx.def_span(def_id), \"type alias impl trait defined here\")\n+                    .emit();\n+            }\n         }\n     }\n "}, {"sha": "621c4ff6378c9e2f01dbe2fdc29114d154a08aff", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -15,7 +15,6 @@\n //! [dijkstra]: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n //! [sssp]: https://en.wikipedia.org/wiki/Shortest_path_problem\n //! [dir_graph]: https://en.wikipedia.org/wiki/Directed_graph\n-//! [`BinaryHeap`]: struct.BinaryHeap.html\n //!\n //! ```\n //! use std::cmp::Ordering;\n@@ -240,10 +239,10 @@ use super::SpecExtend;\n /// The value for `push` is an expected cost; the method documentation gives a\n /// more detailed analysis.\n ///\n-/// [push]: #method.push\n-/// [pop]: #method.pop\n-/// [peek]: #method.peek\n-/// [peek\\_mut]: #method.peek_mut\n+/// [push]: BinaryHeap::push\n+/// [pop]: BinaryHeap::pop\n+/// [peek]: BinaryHeap::peek\n+/// [peek\\_mut]: BinaryHeap::peek_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BinaryHeap<T> {\n     data: Vec<T>,\n@@ -255,8 +254,7 @@ pub struct BinaryHeap<T> {\n /// This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See\n /// its documentation for more.\n ///\n-/// [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`peek_mut`]: BinaryHeap::peek_mut\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n pub struct PeekMut<'a, T: 'a + Ord> {\n     heap: &'a mut BinaryHeap<T>,\n@@ -802,7 +800,7 @@ impl<T> BinaryHeap<T> {\n     /// heap.push(4);\n     /// ```\n     ///\n-    /// [`reserve`]: #method.reserve\n+    /// [`reserve`]: BinaryHeap::reserve\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.data.reserve_exact(additional);\n@@ -1057,11 +1055,10 @@ impl<T> Drop for Hole<'_, T> {\n \n /// An iterator over the elements of a `BinaryHeap`.\n ///\n-/// This `struct` is created by the [`iter`] method on [`BinaryHeap`]. See its\n+/// This `struct` is created by [`BinaryHeap::iter()`]. See its\n /// documentation for more.\n ///\n-/// [`iter`]: struct.BinaryHeap.html#method.iter\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`iter`]: BinaryHeap::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n@@ -1122,11 +1119,10 @@ impl<T> FusedIterator for Iter<'_, T> {}\n \n /// An owning iterator over the elements of a `BinaryHeap`.\n ///\n-/// This `struct` is created by the [`into_iter`] method on [`BinaryHeap`]\n+/// This `struct` is created by [`BinaryHeap::into_iter()`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n-/// [`into_iter`]: struct.BinaryHeap.html#method.into_iter\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`into_iter`]: BinaryHeap::into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct IntoIter<T> {\n@@ -1227,11 +1223,10 @@ unsafe impl<T: Ord> TrustedLen for IntoIterSorted<T> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n ///\n-/// This `struct` is created by the [`drain`] method on [`BinaryHeap`]. See its\n+/// This `struct` is created by [`BinaryHeap::drain()`]. See its\n /// documentation for more.\n ///\n-/// [`drain`]: struct.BinaryHeap.html#method.drain\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`drain`]: BinaryHeap::drain\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n #[derive(Debug)]\n pub struct Drain<'a, T: 'a> {\n@@ -1273,11 +1268,10 @@ impl<T> FusedIterator for Drain<'_, T> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n ///\n-/// This `struct` is created by the [`drain_sorted`] method on [`BinaryHeap`]. See its\n+/// This `struct` is created by [`BinaryHeap::drain_sorted()`]. See its\n /// documentation for more.\n ///\n-/// [`drain_sorted`]: struct.BinaryHeap.html#method.drain_sorted\n-/// [`BinaryHeap`]: struct.BinaryHeap.html\n+/// [`drain_sorted`]: BinaryHeap::drain_sorted\n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n #[derive(Debug)]\n pub struct DrainSorted<'a, T: Ord> {"}, {"sha": "b4e9929af5ff2cd693e8430fa31d403635782c1b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -47,7 +47,6 @@ use UnderflowResult::*;\n /// any other key, as determined by the [`Ord`] trait, changes while it is in the map. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n ///\n-/// [`Ord`]: core::cmp::Ord\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell\n ///\n@@ -93,9 +92,10 @@ use UnderflowResult::*;\n /// }\n /// ```\n ///\n-/// `BTreeMap` also implements an [`Entry API`](#method.entry), which allows\n-/// for more complex methods of getting, setting, updating and removing keys and\n-/// their values:\n+/// `BTreeMap` also implements an [`Entry API`], which allows for more complex\n+/// methods of getting, setting, updating and removing keys and their values:\n+///\n+/// [`Entry API`]: BTreeMap::entry\n ///\n /// ```\n /// use std::collections::BTreeMap;\n@@ -453,8 +453,6 @@ impl<K: Debug + Ord, V: Debug> Debug for Entry<'_, K, V> {\n \n /// A view into a vacant entry in a `BTreeMap`.\n /// It is part of the [`Entry`] enum.\n-///\n-/// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VacantEntry<'a, K: 'a, V: 'a> {\n     key: K,\n@@ -474,8 +472,6 @@ impl<K: Debug + Ord, V> Debug for VacantEntry<'_, K, V> {\n \n /// A view into an occupied entry in a `BTreeMap`.\n /// It is part of the [`Entry`] enum.\n-///\n-/// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n     handle: Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV>,\n@@ -815,7 +811,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// types that can be `==` without being identical. See the [module-level\n     /// documentation] for more.\n     ///\n-    /// [module-level documentation]: index.html#insert-and-complex-keys\n+    /// [module-level documentation]: crate::collections#insert-and-complex-keys\n     ///\n     /// # Examples\n     ///\n@@ -1719,7 +1715,7 @@ impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n     /// Allow Debug implementations to predict the next element.\n     pub(super) fn peek(&self) -> Option<(&K, &V)> {\n         let edge = self.cur_leaf_edge.as_ref()?;\n-        edge.reborrow().next_kv().ok().map(|kv| kv.into_kv())\n+        edge.reborrow().next_kv().ok().map(Handle::into_kv)\n     }\n \n     /// Implementation of a typical `DrainFilter::next` method, given the predicate.\n@@ -2554,7 +2550,7 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     /// If you need a reference to the `OccupiedEntry` that may outlive the\n     /// destruction of the `Entry` value, see [`into_mut`].\n     ///\n-    /// [`into_mut`]: #method.into_mut\n+    /// [`into_mut`]: OccupiedEntry::into_mut\n     ///\n     /// # Examples\n     ///\n@@ -2584,7 +2580,7 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     ///\n     /// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n     ///\n-    /// [`get_mut`]: #method.get_mut\n+    /// [`get_mut`]: OccupiedEntry::get_mut\n     ///\n     /// # Examples\n     ///"}, {"sha": "55ce7d275464e571197c674e71b29a135af60999", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -218,7 +218,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n         let mut edge = self.forget_node_type();\n         loop {\n             edge = match edge.right_kv() {\n-                Ok(internal_kv) => return Ok(internal_kv),\n+                Ok(kv) => return Ok(kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n                     Err(root) => return Err(root),\n@@ -239,7 +239,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n         let mut edge = self.forget_node_type();\n         loop {\n             edge = match edge.left_kv() {\n-                Ok(internal_kv) => return Ok(internal_kv),\n+                Ok(kv) => return Ok(kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n                     Err(root) => return Err(root),"}, {"sha": "f52d07c9b8c94bd4e538c87233bcc24190ff0d3c", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -929,14 +929,14 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// The returned pointer points to the inserted value.\n     fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {\n         if self.node.len() < CAPACITY {\n-            let ptr = self.insert_fit(key, val);\n+            let val_ptr = self.insert_fit(key, val);\n             let kv = unsafe { Handle::new_kv(self.node, self.idx) };\n-            (InsertResult::Fit(kv), ptr)\n+            (InsertResult::Fit(kv), val_ptr)\n         } else {\n             let (middle_kv_idx, insertion) = splitpoint(self.idx);\n             let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };\n             let (mut left, k, v, mut right) = middle.split();\n-            let ptr = match insertion {\n+            let val_ptr = match insertion {\n                 InsertionPlace::Left(insert_idx) => unsafe {\n                     Handle::new_edge(left.reborrow_mut(), insert_idx).insert_fit(key, val)\n                 },\n@@ -948,7 +948,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n                     .insert_fit(key, val)\n                 },\n             };\n-            (InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right }), ptr)\n+            (InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right }), val_ptr)\n         }\n     }\n }"}, {"sha": "412c65681e684003ada71c0df9d8ee4f3f7a087a", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -102,7 +102,7 @@ impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n /// This `struct` is created by the [`into_iter`] method on [`LinkedList`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n-/// [`into_iter`]: struct.LinkedList.html#method.into_iter\n+/// [`into_iter`]: LinkedList::into_iter\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {"}, {"sha": "8e9acc42d9aba2775ef085b685041fa0b649a32d", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -48,11 +48,11 @@ const MAXIMUM_ZST_CAPACITY: usize = 1 << (core::mem::size_of::<usize>() * 8 - 1)\n /// so that its elements do not wrap, and returns a mutable slice to the\n /// now-contiguous element sequence.\n ///\n-/// [`push_back`]: #method.push_back\n-/// [`pop_front`]: #method.pop_front\n-/// [`extend`]: #method.extend\n-/// [`append`]: #method.append\n-/// [`make_contiguous`]: #method.make_contiguous\n+/// [`push_back`]: VecDeque::push_back\n+/// [`pop_front`]: VecDeque::pop_front\n+/// [`extend`]: VecDeque::extend\n+/// [`append`]: VecDeque::append\n+/// [`make_contiguous`]: VecDeque::make_contiguous\n #[cfg_attr(not(test), rustc_diagnostic_item = \"vecdeque_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VecDeque<T> {\n@@ -640,7 +640,7 @@ impl<T> VecDeque<T> {\n     /// assert!(buf.capacity() >= 11);\n     /// ```\n     ///\n-    /// [`reserve`]: #method.reserve\n+    /// [`reserve`]: VecDeque::reserve\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.reserve(additional);\n@@ -987,8 +987,10 @@ impl<T> VecDeque<T> {\n     /// Returns a pair of slices which contain, in order, the contents of the\n     /// `VecDeque`.\n     ///\n-    /// If [`make_contiguous`](#method.make_contiguous) was previously called, all elements\n-    /// of the `VecDeque` will be in the first slice and the second slice will be empty.\n+    /// If [`make_contiguous`] was previously called, all elements of the\n+    /// `VecDeque` will be in the first slice and the second slice will be empty.\n+    ///\n+    /// [`make_contiguous`]: VecDeque::make_contiguous\n     ///\n     /// # Examples\n     ///\n@@ -1020,8 +1022,10 @@ impl<T> VecDeque<T> {\n     /// Returns a pair of slices which contain, in order, the contents of the\n     /// `VecDeque`.\n     ///\n-    /// If [`make_contiguous`](#method.make_contiguous) was previously called, all elements\n-    /// of the `VecDeque` will be in the first slice and the second slice will be empty.\n+    /// If [`make_contiguous`] was previously called, all elements of the\n+    /// `VecDeque` will be in the first slice and the second slice will be empty.\n+    ///\n+    /// [`make_contiguous`]: VecDeque::make_contiguous\n     ///\n     /// # Examples\n     ///\n@@ -2160,15 +2164,20 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Rearranges the internal storage of this deque so it is one contiguous slice, which is then returned.\n+    /// Rearranges the internal storage of this deque so it is one contiguous\n+    /// slice, which is then returned.\n     ///\n-    /// This method does not allocate and does not change the order of the inserted elements.\n-    /// As it returns a mutable slice, this can be used to sort or binary search a deque.\n+    /// This method does not allocate and does not change the order of the\n+    /// inserted elements. As it returns a mutable slice, this can be used to\n+    /// sort or binary search a deque.\n     ///\n-    /// Once the internal storage is contiguous, the [`as_slices`](#method.as_slices) and\n-    /// [`as_mut_slices`](#method.as_mut_slices) methods will return the entire contents of the\n+    /// Once the internal storage is contiguous, the [`as_slices`] and\n+    /// [`as_mut_slices`] methods will return the entire contents of the\n     /// `VecDeque` in a single slice.\n     ///\n+    /// [`as_slices`]: VecDeque::as_slices\n+    /// [`as_mut_slices`]: VecDeque::as_mut_slices\n+    ///\n     /// # Examples\n     ///\n     /// Sorting the content of a deque.\n@@ -2495,8 +2504,7 @@ fn count(tail: usize, head: usize, size: usize) -> usize {\n /// This `struct` is created by the [`iter`] method on [`VecDeque`]. See its\n /// documentation for more.\n ///\n-/// [`iter`]: struct.VecDeque.html#method.iter\n-/// [`VecDeque`]: struct.VecDeque.html\n+/// [`iter`]: VecDeque::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     ring: &'a [T],\n@@ -2650,8 +2658,7 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// This `struct` is created by the [`iter_mut`] method on [`VecDeque`]. See its\n /// documentation for more.\n ///\n-/// [`iter_mut`]: struct.VecDeque.html#method.iter_mut\n-/// [`VecDeque`]: struct.VecDeque.html\n+/// [`iter_mut`]: VecDeque::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     ring: &'a mut [T],\n@@ -2756,8 +2763,7 @@ impl<T> FusedIterator for IterMut<'_, T> {}\n /// This `struct` is created by the [`into_iter`] method on [`VecDeque`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n-/// [`into_iter`]: struct.VecDeque.html#method.into_iter\n-/// [`VecDeque`]: struct.VecDeque.html\n+/// [`into_iter`]: VecDeque::into_iter\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {"}, {"sha": "4ffb435d1e36670d3a2778eae55d94630cc454da", "filename": "library/alloc/src/collections/vec_deque/drain.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -9,8 +9,7 @@ use super::{count, Iter, VecDeque};\n /// This `struct` is created by the [`drain`] method on [`VecDeque`]. See its\n /// documentation for more.\n ///\n-/// [`drain`]: struct.VecDeque.html#method.drain\n-/// [`VecDeque`]: struct.VecDeque.html\n+/// [`drain`]: VecDeque::drain\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n     pub(crate) after_tail: usize,"}, {"sha": "5ae4b7cf36adc46bb108a78f8e90315af3b79dda", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -74,25 +74,23 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(test))]\n+#![cfg_attr(test, feature(new_uninit))]\n #![feature(allocator_api)]\n #![feature(array_chunks)]\n #![feature(array_windows)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(btree_drain_filter)]\n #![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![feature(const_btree_new)]\n #![feature(const_generics)]\n #![feature(const_in_array_repeat_expressions)]\n #![feature(cow_is_borrowed)]\n-#![feature(deque_range)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n-#![feature(container_error_extra)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(exclusive_range_pattern)]\n@@ -104,13 +102,9 @@\n #![feature(int_bits_const)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n-#![feature(libc)]\n-#![feature(map_first_last)]\n-#![feature(map_into_keys_values)]\n #![feature(maybe_uninit_ref)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n-#![feature(new_uninit)]\n #![feature(nll)]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(optin_builtin_traits)]\n@@ -125,10 +119,8 @@\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]\n #![feature(staged_api)]\n-#![feature(std_internals)]\n #![feature(str_internals)]\n #![feature(trusted_len)]\n-#![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(unicode_internals)]\n #![feature(unsafe_block_in_unsafe_fn)]"}, {"sha": "abb9bfec127be00caf8770413751b42241e446ed", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1071,6 +1071,7 @@ extern \"rust-intrinsic\" {\n     // NOTE: While this makes the intrinsic const stable, we have some custom code in const fn\n     // checks that prevent its use within `const fn`.\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"transmute\")]\n     pub fn transmute<T, U>(e: T) -> U;\n \n     /// Returns `true` if the actual type given as `T` requires drop"}, {"sha": "bbaf399c7d75aded399d36bdc650a934663cc31f", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -66,9 +66,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(asm)]\n-#![feature(bound_cloned)]\n #![feature(cfg_target_has_atomic)]\n-#![feature(concat_idents)]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n #![feature(const_checked_int_methods)]\n@@ -103,8 +101,6 @@\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intrinsics)]\n-#![feature(try_find)]\n-#![feature(is_sorted)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(llvm_asm)]\n@@ -116,7 +112,6 @@\n #![feature(optin_builtin_traits)]\n #![feature(or_patterns)]\n #![feature(prelude_import)]\n-#![feature(ptr_as_uninit)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n #![feature(simd_ffi)]\n@@ -147,8 +142,6 @@\n #![feature(const_fn_transmute)]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n-#![feature(maybe_uninit_slice)]\n-#![feature(maybe_uninit_extra)]\n #![feature(external_doc)]\n #![feature(associated_type_bounds)]\n #![feature(const_caller_location)]"}, {"sha": "9690996e6021e6c9dd9b0182b6c4d7f66f48d8cc", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -12,7 +12,6 @@\n #![panic_runtime]\n #![allow(unused_features)]\n #![feature(core_intrinsics)]\n-#![feature(libc)]\n #![feature(nll)]\n #![feature(panic_runtime)]\n #![feature(staged_api)]"}, {"sha": "682289384c8e241eff20e35637a1e4a922de4350", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -20,7 +20,6 @@\n #![feature(core_intrinsics)]\n #![feature(int_bits_const)]\n #![feature(lang_items)]\n-#![feature(libc)]\n #![feature(nll)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]"}, {"sha": "a0c39852ad5d8b69180064d9eccea1326db4216f", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -1173,6 +1173,16 @@ where\n /// See its documentation for more.\n ///\n /// [`iter`]: HashSet::iter\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+///\n+/// let mut iter = a.iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a> {\n     base: base::Iter<'a, K>,\n@@ -1184,6 +1194,16 @@ pub struct Iter<'a, K: 'a> {\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+///\n+/// let mut iter = a.into_iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K> {\n     base: base::IntoIter<K>,\n@@ -1195,6 +1215,16 @@ pub struct IntoIter<K> {\n /// See its documentation for more.\n ///\n /// [`drain`]: HashSet::drain\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let mut a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+///\n+/// let mut drain = a.drain();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Drain<'a, K: 'a> {\n     base: base::Drain<'a, K>,\n@@ -1205,6 +1235,18 @@ pub struct Drain<'a, K: 'a> {\n /// This `struct` is created by the [`drain_filter`] method on [`HashSet`].\n ///\n /// [`drain_filter`]: HashSet::drain_filter\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(hash_drain_filter)]\n+///\n+/// use std::collections::HashSet;\n+///\n+/// let mut a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+///\n+/// let mut drain_filtered = a.drain_filter(|v| v % 2 == 0);\n+/// ```\n #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n pub struct DrainFilter<'a, K, F>\n where\n@@ -1219,6 +1261,17 @@ where\n /// See its documentation for more.\n ///\n /// [`intersection`]: HashSet::intersection\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+///\n+/// let mut intersection = a.intersection(&b);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1233,6 +1286,17 @@ pub struct Intersection<'a, T: 'a, S: 'a> {\n /// See its documentation for more.\n ///\n /// [`difference`]: HashSet::difference\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+///\n+/// let mut difference = a.difference(&b);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1247,6 +1311,17 @@ pub struct Difference<'a, T: 'a, S: 'a> {\n /// [`HashSet`]. See its documentation for more.\n ///\n /// [`symmetric_difference`]: HashSet::symmetric_difference\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+///\n+/// let mut intersection = a.symmetric_difference(&b);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n     iter: Chain<Difference<'a, T, S>, Difference<'a, T, S>>,\n@@ -1258,6 +1333,17 @@ pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n /// See its documentation for more.\n ///\n /// [`union`]: HashSet::union\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+///\n+/// let mut union_iter = a.union(&b);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,"}, {"sha": "0b74af53ab19d33e5c5dae2158356f87746286e1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -228,7 +228,6 @@\n #![feature(atomic_mut_ptr)]\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n-#![feature(can_vector)]\n #![feature(cfg_accessible)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n@@ -261,14 +260,12 @@\n #![feature(gen_future)]\n #![feature(generator_trait)]\n #![feature(global_asm)]\n-#![feature(hash_raw_entry)]\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n #![feature(int_error_matching)]\n #![feature(integer_atomics)]\n #![feature(into_future)]\n #![feature(lang_items)]\n-#![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n #![feature(llvm_asm)]"}, {"sha": "3d2366554b5b245e8ea5e7f7f433cd82e867e6d2", "filename": "library/std/src/sys/unix/ext/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -667,7 +667,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_peek\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_peek\", issue = \"76923\")]\n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.peek(buf)\n     }\n@@ -1708,7 +1708,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_peek\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_peek\", issue = \"76923\")]\n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.peek(buf)\n     }\n@@ -1740,7 +1740,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_peek\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_peek\", issue = \"76923\")]\n     pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n         self.recv_from_flags(buf, libc::MSG_PEEK)\n     }"}, {"sha": "2b82f6c30b27364aa4f56ab0d44ffa0aad9d0428", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -12,9 +12,6 @@ use build_helper::output;\n \n use crate::Build;\n \n-// The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.48.0\";\n-\n pub struct GitInfo {\n     inner: Option<Info>,\n }"}, {"sha": "c1ee8fb6b7f8170f31cfee70ab28e0ef6e38437b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -18,7 +18,6 @@ use build_helper::{output, t};\n \n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n-use crate::channel;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::tool::{self, Tool};\n@@ -569,7 +568,7 @@ impl Step for Rustc {\n                     &page_dst,\n                     &[\n                         (\"<INSERT DATE HERE>\", &month_year),\n-                        (\"<INSERT VERSION HERE>\", channel::CFG_RELEASE_NUM),\n+                        (\"<INSERT VERSION HERE>\", &builder.version),\n                     ],\n                 );\n             }\n@@ -2301,9 +2300,9 @@ impl Step for Extended {\n }\n \n fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n-    let mut parts = channel::CFG_RELEASE_NUM.split('.');\n+    let mut parts = builder.version.split('.');\n     cmd.env(\"CFG_RELEASE_INFO\", builder.rust_version())\n-        .env(\"CFG_RELEASE_NUM\", channel::CFG_RELEASE_NUM)\n+        .env(\"CFG_RELEASE_NUM\", &builder.version)\n         .env(\"CFG_RELEASE\", builder.rust_release())\n         .env(\"CFG_VER_MAJOR\", parts.next().unwrap())\n         .env(\"CFG_VER_MINOR\", parts.next().unwrap())"}, {"sha": "97f32b61fb9c9a29277b9a9086caa8cdee42ebda", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -433,7 +433,7 @@ impl Step for Std {\n                 .arg(\"-Z\")\n                 .arg(\"unstable-options\")\n                 .arg(\"--resource-suffix\")\n-                .arg(crate::channel::CFG_RELEASE_NUM)\n+                .arg(&builder.version)\n                 .arg(\"--index-page\")\n                 .arg(&builder.src.join(\"src/doc/index.md\"));\n \n@@ -659,7 +659,7 @@ impl Step for ErrorIndex {\n         let mut index = tool::ErrorIndex::command(builder, self.compiler);\n         index.arg(\"html\");\n         index.arg(out.join(\"error-index.html\"));\n-        index.arg(crate::channel::CFG_RELEASE_NUM);\n+        index.arg(&builder.version);\n \n         builder.run(&mut index);\n     }"}, {"sha": "3f7aeae0ed4951f79c598960341b0ffc65bb4e48", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -218,6 +218,9 @@ pub struct Build {\n     /// User-specified configuration from `config.toml`.\n     config: Config,\n \n+    // Version information\n+    version: String,\n+\n     // Properties derived from the above configuration\n     src: PathBuf,\n     out: PathBuf,\n@@ -380,6 +383,10 @@ impl Build {\n             .unwrap()\n             .to_path_buf();\n \n+        let version = std::fs::read_to_string(src.join(\"src\").join(\"version\"))\n+            .expect(\"failed to read src/version\");\n+        let version = version.trim();\n+\n         let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n@@ -395,6 +402,7 @@ impl Build {\n             targets: config.targets.clone(),\n \n             config,\n+            version: version.to_string(),\n             src,\n             out,\n \n@@ -433,8 +441,7 @@ impl Build {\n             .next()\n             .unwrap()\n             .trim();\n-        let my_version = channel::CFG_RELEASE_NUM;\n-        if local_release.split('.').take(2).eq(my_version.split('.').take(2)) {\n+        if local_release.split('.').take(2).eq(version.split('.').take(2)) {\n             build.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n             build.local_rebuild = true;\n         }\n@@ -785,7 +792,7 @@ impl Build {\n \n         match which {\n             GitRepo::Rustc => {\n-                let sha = self.rust_sha().unwrap_or(channel::CFG_RELEASE_NUM);\n+                let sha = self.rust_sha().unwrap_or(&self.version);\n                 Some(format!(\"/rustc/{}\", sha))\n             }\n             GitRepo::Llvm => Some(String::from(\"/rustc/llvm\")),\n@@ -1016,7 +1023,7 @@ impl Build {\n \n     /// Returns the value of `release` above for Rust itself.\n     fn rust_release(&self) -> String {\n-        self.release(channel::CFG_RELEASE_NUM)\n+        self.release(&self.version)\n     }\n \n     /// Returns the \"package version\" for a component given the `num` release\n@@ -1036,7 +1043,7 @@ impl Build {\n \n     /// Returns the value of `package_vers` above for Rust itself.\n     fn rust_package_vers(&self) -> String {\n-        self.package_vers(channel::CFG_RELEASE_NUM)\n+        self.package_vers(&self.version)\n     }\n \n     /// Returns the value of `package_vers` above for Cargo\n@@ -1070,7 +1077,7 @@ impl Build {\n     }\n \n     fn llvm_tools_package_vers(&self) -> String {\n-        self.package_vers(channel::CFG_RELEASE_NUM)\n+        self.package_vers(&self.version)\n     }\n \n     fn llvm_tools_vers(&self) -> String {\n@@ -1087,7 +1094,7 @@ impl Build {\n     /// Note that this is a descriptive string which includes the commit date,\n     /// sha, version, etc.\n     fn rust_version(&self) -> String {\n-        self.rust_info.version(self, channel::CFG_RELEASE_NUM)\n+        self.rust_info.version(self, &self.version)\n     }\n \n     /// Returns the full commit hash."}, {"sha": "9e4d6d0023dc947e469c6bf442b99aabc4a005b0", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -19,7 +19,6 @@ use std::process::Command;\n use build_helper::{output, t};\n \n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n-use crate::channel;\n use crate::config::TargetSelection;\n use crate::util::{self, exe};\n use crate::GitRepo;\n@@ -296,7 +295,7 @@ impl Step for Llvm {\n             // release number on the dev channel.\n             cfg.define(\"LLVM_VERSION_SUFFIX\", \"-rust-dev\");\n         } else {\n-            let suffix = format!(\"-rust-{}-{}\", channel::CFG_RELEASE_NUM, builder.config.channel);\n+            let suffix = format!(\"-rust-{}-{}\", builder.version, builder.config.channel);\n             cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n         }\n "}, {"sha": "dc28b8ece2452597ab3bb30f6822241cff66b4f4", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -636,7 +636,7 @@ impl Step for RustdocJSStd {\n                 .arg(\"--crate-name\")\n                 .arg(\"std\")\n                 .arg(\"--resource-suffix\")\n-                .arg(crate::channel::CFG_RELEASE_NUM)\n+                .arg(&builder.version)\n                 .arg(\"--doc-folder\")\n                 .arg(builder.doc_out(self.target))\n                 .arg(\"--test-folder\")"}, {"sha": "5d66632d92ceb49e85af55b6e1ddff0bc582f1e4", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -7,7 +7,6 @@ use std::process::{exit, Command};\n use build_helper::t;\n \n use crate::builder::{Builder, Cargo as CargoCommand, RunConfig, ShouldRun, Step};\n-use crate::channel;\n use crate::channel::GitInfo;\n use crate::compile;\n use crate::config::TargetSelection;\n@@ -255,7 +254,7 @@ pub fn prepare_tool_cargo(\n     cargo.env(\"CFG_RELEASE\", builder.rust_release());\n     cargo.env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel);\n     cargo.env(\"CFG_VERSION\", builder.rust_version());\n-    cargo.env(\"CFG_RELEASE_NUM\", channel::CFG_RELEASE_NUM);\n+    cargo.env(\"CFG_RELEASE_NUM\", &builder.version);\n \n     let info = GitInfo::new(builder.config.ignore_git, &dir);\n     if let Some(sha) = info.sha() {"}, {"sha": "9ce19536e7949db0c634b225037a89aff3d0f6f3", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -0,0 +1,23 @@\n+// Regression test for issue #76202\n+// Tests that we don't ICE when we have a trait impl on a TAIT.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Dummy {}\n+impl Dummy for () {}\n+\n+type F = impl Dummy;\n+fn f() -> F {}\n+\n+trait Test {\n+    fn test(self);\n+}\n+\n+impl Test for F { //~ ERROR cannot implement trait\n+    fn test(self) {}\n+}\n+\n+fn main() {\n+    let x: F = f();\n+    x.test();\n+}"}, {"sha": "8689ee53660f6b703a43c315042613d56170c106", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -0,0 +1,14 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:16:1\n+   |\n+LL | impl Test for F {\n+   | ^^^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:9:10\n+   |\n+LL | type F = impl Dummy;\n+   |          ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9db5ea12f52279a37e2d5c8280e97f2c9f83aa8a", "filename": "src/version", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e02708f1f4760244756548981277d5199baa9a/src%2Fversion", "raw_url": "https://github.com/rust-lang/rust/raw/81e02708f1f4760244756548981277d5199baa9a/src%2Fversion", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fversion?ref=81e02708f1f4760244756548981277d5199baa9a", "patch": "@@ -0,0 +1 @@\n+1.48.0"}]}