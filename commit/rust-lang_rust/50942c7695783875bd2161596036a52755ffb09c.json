{"sha": "50942c7695783875bd2161596036a52755ffb09c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOTQyYzc2OTU3ODM4NzViZDIxNjE1OTYwMzZhNTI3NTVmZmIwOWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-05-19T18:32:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-09T04:29:57Z"}, "message": "core: Rename `container` mod to `collections`. Closes #12543\n\nAlso renames the `Container` trait to `Collection`.\n\n[breaking-change]", "tree": {"sha": "0d8ddd4e8d3a58c33de17eeb966684f6796d4547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d8ddd4e8d3a58c33de17eeb966684f6796d4547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50942c7695783875bd2161596036a52755ffb09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50942c7695783875bd2161596036a52755ffb09c", "html_url": "https://github.com/rust-lang/rust/commit/50942c7695783875bd2161596036a52755ffb09c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50942c7695783875bd2161596036a52755ffb09c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "443a1cdf949fad31c5a851be02017d09ce09f318", "url": "https://api.github.com/repos/rust-lang/rust/commits/443a1cdf949fad31c5a851be02017d09ce09f318", "html_url": "https://github.com/rust-lang/rust/commit/443a1cdf949fad31c5a851be02017d09ce09f318"}], "stats": {"total": 129, "additions": 64, "deletions": 65}, "files": [{"sha": "ac31fbbf9e43b59bc3c75e1280a4c3fa6ee5811e", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -857,7 +857,7 @@ impl<S: hash::Writer> hash::Hash<S> for BitvSet {\n     }\n }\n \n-impl Container for BitvSet {\n+impl Collection for BitvSet {\n     #[inline]\n     fn len(&self) -> uint { self.size }\n }"}, {"sha": "f71cc7401c58c0547298a10cb5d7fdd24d978646", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -125,7 +125,7 @@ fn link_with_prev<T>(mut next: Box<Node<T>>, prev: Rawlink<Node<T>>)\n     Some(next)\n }\n \n-impl<T> Container for DList<T> {\n+impl<T> Collection for DList<T> {\n     /// O(1)\n     #[inline]\n     fn is_empty(&self) -> bool {"}, {"sha": "f10c6f230aecb3f1d81e016db5e6ebb4d57ec411", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -26,7 +26,7 @@ pub struct PriorityQueue<T> {\n     data: Vec<T>,\n }\n \n-impl<T: Ord> Container for PriorityQueue<T> {\n+impl<T: Ord> Collection for PriorityQueue<T> {\n     /// Returns the length of the queue\n     fn len(&self) -> uint { self.data.len() }\n }"}, {"sha": "5708dfaf915bc552885606b62ba845f95fdb99c6", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -33,7 +33,7 @@ pub struct RingBuf<T> {\n     elts: Vec<Option<T>>\n }\n \n-impl<T> Container for RingBuf<T> {\n+impl<T> Collection for RingBuf<T> {\n     /// Return the number of elements in the RingBuf\n     fn len(&self) -> uint { self.nelts }\n }"}, {"sha": "c61f518caa40eb74465815a5ed83877b388ae316", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -29,7 +29,7 @@ pub struct SmallIntMap<T> {\n     v: Vec<Option<T>>,\n }\n \n-impl<V> Container for SmallIntMap<V> {\n+impl<V> Collection for SmallIntMap<V> {\n     /// Return the number of elements in the map\n     fn len(&self) -> uint {\n         self.v.iter().filter(|elt| elt.is_some()).count()"}, {"sha": "102d9c3abdee9a69bf90719282fef149204b1c24", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -610,7 +610,7 @@ impl<'a> StrAllocating for MaybeOwned<'a> {\n     }\n }\n \n-impl<'a> Container for MaybeOwned<'a> {\n+impl<'a> Collection for MaybeOwned<'a> {\n     #[inline]\n     fn len(&self) -> uint { self.as_slice().len() }\n }\n@@ -2036,7 +2036,7 @@ mod tests {\n \n     #[test]\n     fn test_str_container() {\n-        fn sum_len<S: Container>(v: &[S]) -> uint {\n+        fn sum_len<S: Collection>(v: &[S]) -> uint {\n             v.iter().map(|x| x.len()).sum()\n         }\n "}, {"sha": "1c1d4b98592b1b7f5914e5586047b3627d6e994d", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -279,7 +279,7 @@ impl String {\n     }\n }\n \n-impl Container for String {\n+impl Collection for String {\n     #[inline]\n     fn len(&self) -> uint {\n         self.vec.len()"}, {"sha": "8d472282a68d7187dacecdec763558c93f57e6a7", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -86,7 +86,7 @@ impl<K: Ord + Show, V: Show> Show for TreeMap<K, V> {\n     }\n }\n \n-impl<K: Ord, V> Container for TreeMap<K, V> {\n+impl<K: Ord, V> Collection for TreeMap<K, V> {\n     fn len(&self) -> uint { self.length }\n }\n \n@@ -579,7 +579,7 @@ impl<T: Ord + Show> Show for TreeSet<T> {\n     }\n }\n \n-impl<T: Ord> Container for TreeSet<T> {\n+impl<T: Ord> Collection for TreeSet<T> {\n     #[inline]\n     fn len(&self) -> uint { self.map.len() }\n }"}, {"sha": "1c6b7ed9333930d214819522f9b5e0e00ae89a9b", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -38,7 +38,7 @@ pub struct TrieMap<T> {\n     length: uint\n }\n \n-impl<T> Container for TrieMap<T> {\n+impl<T> Collection for TrieMap<T> {\n     /// Return the number of elements in the map\n     #[inline]\n     fn len(&self) -> uint { self.length }\n@@ -285,7 +285,7 @@ pub struct TrieSet {\n     map: TrieMap<()>\n }\n \n-impl Container for TrieSet {\n+impl Collection for TrieSet {\n     /// Return the number of elements in the set\n     #[inline]\n     fn len(&self) -> uint { self.map.len() }"}, {"sha": "3d0182acc7ea8768dfff9bb2e2acb0798b2dcfe6", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -393,7 +393,7 @@ impl<T: Ord> Ord for Vec<T> {\n     }\n }\n \n-impl<T> Container for Vec<T> {\n+impl<T> Collection for Vec<T> {\n     #[inline]\n     fn len(&self) -> uint {\n         self.len"}, {"sha": "8ebc7c2f7fe2ac675e613e300d7a2d570e0d51de", "filename": "src/libcore/collections.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcollections.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Traits for generic containers (including `Map` and `Set`)\n+//! Traits for generic collections (including `Map` and `Set`)\n \n use option::Option;\n \n /// A trait to represent the abstract idea of a container. The only concrete\n /// knowledge known is the number of elements contained within.\n-pub trait Container {\n+pub trait Collection {\n     /// Return the number of elements in the container\n     fn len(&self) -> uint;\n \n@@ -26,14 +26,14 @@ pub trait Container {\n }\n \n /// A trait to represent mutable containers\n-pub trait Mutable: Container {\n+pub trait Mutable: Collection {\n     /// Clear the container, removing all values.\n     fn clear(&mut self);\n }\n \n /// A map is a key-value store where values may be looked up by their keys. This\n /// trait provides basic operations to operate on these stores.\n-pub trait Map<K, V>: Container {\n+pub trait Map<K, V>: Collection {\n     /// Return a reference to the value corresponding to the key\n     fn find<'a>(&'a self, key: &K) -> Option<&'a V>;\n \n@@ -76,7 +76,7 @@ pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n /// A set is a group of objects which are each distinct from one another. This\n /// trait represents actions which can be performed on sets to iterate over\n /// them.\n-pub trait Set<T>: Container {\n+pub trait Set<T>: Collection {\n     /// Return true if the set contains a value\n     fn contains(&self, value: &T) -> bool;\n ", "previous_filename": "src/libcore/container.rs"}, {"sha": "f326195be1607f270e6283c4a0830b6c9816b563", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -11,7 +11,7 @@\n #![allow(missing_doc)]\n \n use char;\n-use container::Container;\n+use collections::Collection;\n use fmt;\n use iter::{Iterator, range, DoubleEndedIterator};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive, Primitive};"}, {"sha": "37ef325d937e23d789d968c34fc2f06fdf7872fb", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -15,7 +15,7 @@\n use any;\n use cell::Cell;\n use char::Char;\n-use container::Container;\n+use collections::Collection;\n use iter::{Iterator, range};\n use kinds::Copy;\n use mem;"}, {"sha": "f36acf344e4cfe71adb2bc5c7c59f0a5563345f2", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -14,7 +14,7 @@\n \n #![allow(unsigned_negate)]\n \n-use container::Container;\n+use collections::Collection;\n use fmt;\n use iter::{Iterator, DoubleEndedIterator};\n use num::{Int, cast, zero};"}, {"sha": "5661c6683739b58ffb7b80c7d0a8218265dc7a1e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -108,7 +108,7 @@ pub mod ptr;\n #[cfg(not(test))] pub mod cmp;\n pub mod clone;\n pub mod default;\n-pub mod container;\n+pub mod collections;\n \n /* Core types and methods on primitives */\n "}, {"sha": "df9c0e67b0d6d3ab1176df298b39aacffd3db9d4", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -47,7 +47,7 @@ pub use char::Char;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n-pub use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n+pub use collections::Collection;\n pub use iter::{FromIterator, Extendable};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};"}, {"sha": "ed6b73df38d4d42ebb25feaac70186b6a316d2ca", "filename": "src/libcore/should_not_exist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fshould_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fshould_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fshould_not_exist.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -25,7 +25,7 @@\n // Currently, no progress has been made on this list.\n \n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use finally::try_finally;\n use intrinsics;\n use iter::{range, Iterator};"}, {"sha": "585373ec70ca560cea9de2e4b4d2b953a8ca29b4", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -16,7 +16,7 @@\n \n use mem::transmute;\n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use cmp::{PartialEq, Ord, Ordering, Less, Equal, Greater};\n use cmp;\n use default::Default;\n@@ -253,7 +253,7 @@ pub mod traits {\n \n     use cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering, Equiv};\n     use iter::order;\n-    use container::Container;\n+    use collections::Collection;\n \n     impl<'a,T:PartialEq> PartialEq for &'a [T] {\n         fn eq(&self, other: & &'a [T]) -> bool {\n@@ -347,15 +347,15 @@ impl<T> Vector<T> for ~[T] {\n     fn as_slice<'a>(&'a self) -> &'a [T] { let v: &'a [T] = *self; v }\n }\n \n-impl<'a, T> Container for &'a [T] {\n+impl<'a, T> Collection for &'a [T] {\n     /// Returns the length of a vector\n     #[inline]\n     fn len(&self) -> uint {\n         self.repr().len\n     }\n }\n \n-impl<T> Container for ~[T] {\n+impl<T> Collection for ~[T] {\n     /// Returns the length of a vector\n     #[inline]\n     fn len(&self) -> uint {\n@@ -1205,7 +1205,7 @@ pub mod raw {\n \n /// Operations on `[u8]`.\n pub mod bytes {\n-    use container::Container;\n+    use collections::Collection;\n     use ptr;\n     use slice::MutableVector;\n "}, {"sha": "c01997f1c42c75e48491d658d00baab15ea84c80", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -19,7 +19,7 @@ use char;\n use clone::Clone;\n use cmp;\n use cmp::{PartialEq, Eq};\n-use container::Container;\n+use collections::Collection;\n use default::Default;\n use iter::{Filter, Map, Iterator};\n use iter::{DoubleEndedIterator, ExactSize};\n@@ -866,7 +866,7 @@ static TAG_CONT_U8: u8 = 128u8;\n /// Unsafe operations\n pub mod raw {\n     use mem;\n-    use container::Container;\n+    use collections::Collection;\n     use ptr::RawPtr;\n     use raw::Slice;\n     use slice::{ImmutableVector};\n@@ -930,8 +930,8 @@ Section: Trait implementations\n #[cfg(not(test))]\n #[allow(missing_doc)]\n pub mod traits {\n-    use container::Container;\n     use cmp::{Ord, Ordering, Less, Equal, Greater, PartialEq, PartialOrd, Equiv, Eq};\n+    use collections::Collection;\n     use iter::Iterator;\n     use option::{Some, None};\n     use str::{Str, StrSlice, eq_slice};\n@@ -987,7 +987,7 @@ impl<'a> Str for &'a str {\n     fn as_slice<'a>(&'a self) -> &'a str { *self }\n }\n \n-impl<'a> Container for &'a str {\n+impl<'a> Collection for &'a str {\n     #[inline]\n     fn len(&self) -> uint {\n         self.repr().len"}, {"sha": "a499c1e125dede9e2ec300e2caa962a87b2a3189", "filename": "src/libregex/re.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -775,7 +775,7 @@ impl<'t> Captures<'t> {\n     }\n }\n \n-impl<'t> Container for Captures<'t> {\n+impl<'t> Collection for Captures<'t> {\n     /// Returns the number of captured groups.\n     #[inline]\n     fn len(&self) -> uint {"}, {"sha": "9fe403159f2b7ec3ac23bb86e262b68d194b0102", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -45,7 +45,6 @@\n \n #![allow(unsigned_negate)]\n \n-use std::container::Map;\n use libc::c_ulonglong;\n use std::num::{Bitwise};\n use std::rc::Rc;"}, {"sha": "b4d9ac7efbebcce50deb04af89445f41f9756a37", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -229,7 +229,7 @@ impl Drop for CString {\n     }\n }\n \n-impl Container for CString {\n+impl Collection for CString {\n     /// Return the number of bytes in the CString (not including the NUL terminator).\n     ///\n     /// # Failure"}, {"sha": "b9edc9a811e43486af96ba81ebc99df56c73a4de", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations on ASCII strings and characters\n \n-use container::Container;\n+use collections::Collection;\n use fmt;\n use iter::Iterator;\n use mem;"}, {"sha": "e8a158ad230aa40fac8601942b609f1480fde8ee", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -33,7 +33,7 @@\n //! handled correctly, i.e. that allocated memory is eventually freed\n //! if necessary.\n \n-use container::Container;\n+use collections::Collection;\n use kinds::Send;\n use mem;\n use ops::Drop;\n@@ -149,7 +149,7 @@ impl<T> CVec<T> {\n     }\n }\n \n-impl<T> Container for CVec<T> {\n+impl<T> Collection for CVec<T> {\n     fn len(&self) -> uint { self.len }\n }\n "}, {"sha": "1f3c34600bdd420b399d99adcb717f32c20c2e47", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -1504,7 +1504,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> PartialEq for HashSet<T, H> {\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Eq for HashSet<T, H> {}\n \n-impl<T: Eq + Hash<S>, S, H: Hasher<S>> Container for HashSet<T, H> {\n+impl<T: Eq + Hash<S>, S, H: Hasher<S>> Collection for HashSet<T, H> {\n     fn len(&self) -> uint { self.map.len() }\n }\n \n@@ -2159,8 +2159,8 @@ mod test_set {\n     use prelude::*;\n \n     use super::HashSet;\n-    use container::Container;\n     use slice::ImmutableEqVector;\n+    use std::collections::Collection;\n \n     #[test]\n     fn test_disjoint() {"}, {"sha": "5f32abfe65305eaeb96f8af4386971a08c212518", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -227,7 +227,7 @@ impl<A: fmt::Show + Hash + Eq, B: fmt::Show> fmt::Show for LruCache<A, B> {\n     }\n }\n \n-impl<K: Hash + Eq, V> Container for LruCache<K, V> {\n+impl<K: Hash + Eq, V> Collection for LruCache<K, V> {\n     /// Return the number of key-value pairs in the cache.\n     fn len(&self) -> uint {\n         self.map.len()"}, {"sha": "84ef6d0aa8fcf51ecadb6afdeedd6691a43ed80c", "filename": "src/libstd/comm/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fcomm%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fcomm%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fsync.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -33,7 +33,7 @@\n /// of a synchronous channel. There are a few branches for the unbuffered case,\n /// but they're mostly just relevant to blocking senders.\n \n-use container::Container;\n+use collections::Collection;\n use iter::Iterator;\n use kinds::Send;\n use mem;"}, {"sha": "9450f7798edcf97c3db3c59cde615ffea6eec4b0", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -11,7 +11,7 @@\n //! Buffering wrappers for I/O traits\n \n use cmp;\n-use container::Container;\n+use collections::Collection;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n use iter::ExactSize;\n use ops::Drop;"}, {"sha": "a06d5aa88d66cfb0814eabc9db0f1fb6897a817d", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -10,7 +10,7 @@\n \n use clone::Clone;\n use cmp;\n-use container::Container;\n+use collections::Collection;\n use comm::{Sender, Receiver};\n use io;\n use option::{None, Option, Some};"}, {"sha": "d61518d4ee76f9aa36db766b634eebdf4c3a8402", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -15,7 +15,7 @@\n // FIXME: Not sure how this should be structured\n // FIXME: Iteration should probably be considered separately\n \n-use container::Container;\n+use collections::Collection;\n use iter::Iterator;\n use option::{Option, Some, None};\n use result::{Ok, Err};\n@@ -504,7 +504,7 @@ mod test {\n mod bench {\n     extern crate test;\n \n-    use container::Container;\n+    use collections::Collection;\n     use prelude::*;\n     use self::test::Bencher;\n "}, {"sha": "5259200133ae1974e1af84e02146849f8a2110ed", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -51,7 +51,7 @@ fs::unlink(&path);\n \n use c_str::ToCStr;\n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use io;\n use iter::Iterator;\n use kinds::Send;"}, {"sha": "f0fbe4529b0e959c3b6aeb88155400332cf2fdd8", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -11,7 +11,7 @@\n //! Readers and Writers for in-memory buffers\n \n use cmp::min;\n-use container::Container;\n+use collections::Collection;\n use option::None;\n use result::{Err, Ok};\n use io;"}, {"sha": "6f3eec01e8e34678b8ed133e57422e44021680ba", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -214,7 +214,7 @@ responding to errors that may occur while attempting to read the numbers.\n #![deny(unused_must_use)]\n \n use char::Char;\n-use container::Container;\n+use collections::Collection;\n use fmt;\n use int;\n use iter::Iterator;"}, {"sha": "2c54bd895e952f59a635bf2041f0cd8d7cb324de", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -15,7 +15,7 @@\n \n #![allow(missing_doc)]\n \n-use container::Container;\n+use collections::Collection;\n use fmt;\n use from_str::FromStr;\n use iter::Iterator;"}, {"sha": "d319d6bd03d1ad619032d13b2c15f82000282a32", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -144,7 +144,7 @@ pub use core::cell;\n pub use core::char;\n pub use core::clone;\n #[cfg(not(test))] pub use core::cmp;\n-pub use core::container;\n+pub use core::collections;\n pub use core::default;\n pub use core::finally;\n pub use core::intrinsics;"}, {"sha": "5028987f44fdd239e85d9421e6867e5482d68fb1", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -12,7 +12,7 @@\n \n use char;\n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use num::{NumCast, Zero, One, cast, Int};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;"}, {"sha": "90df18106f0a5b758f8a0ecf18e321ed830b346f", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -30,7 +30,7 @@\n #![allow(non_snake_case_functions)]\n \n use clone::Clone;\n-use container::Container;\n+use collections::Collection;\n use fmt;\n use iter::Iterator;\n use libc::{c_void, c_int};"}, {"sha": "a101f0432126e2ff4de213bd9303071fc42f9514", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -65,7 +65,7 @@ println!(\"path exists: {}\", path.exists());\n \n #![deny(deprecated_owned_vector)]\n \n-use container::Container;\n+use collections::Collection;\n use c_str::CString;\n use clone::Clone;\n use fmt;"}, {"sha": "011dfa6eeacc1e5f629164ff2b1d69b3b89fa86e", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -14,7 +14,7 @@ use ascii::AsciiCast;\n use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::{PartialEq, Eq};\n-use container::Container;\n+use collections::Collection;\n use from_str::FromStr;\n use hash;\n use io::Writer;"}, {"sha": "d52c63abe1b918188b9e3411c29eabed7512c832", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -13,7 +13,7 @@\n #![allow(non_camel_case_types)]\n \n use char::Char;\n-use container::Container;\n+use collections::Collection;\n use from_str::from_str;\n use io::{IoResult, Writer};\n use iter::Iterator;\n@@ -348,7 +348,7 @@ mod imp {\n \n     #[cfg(not(target_os = \"macos\"))]\n     fn print(w: &mut Writer, idx: int, addr: *libc::c_void) -> IoResult<()> {\n-        use container::Container;\n+        use collections::Collection;\n         use iter::Iterator;\n         use os;\n         use path::GenericPath;"}, {"sha": "016dd879dcd838c3ee2f915a29fe269b6117daf6", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -121,7 +121,7 @@ impl<T: PartialEq> PartialEq for OwnedSlice<T> {\n \n impl<T: Eq> Eq for OwnedSlice<T> {}\n \n-impl<T> Container for OwnedSlice<T> {\n+impl<T> Collection for OwnedSlice<T> {\n     fn len(&self) -> uint { self.len }\n }\n "}, {"sha": "a3b2c23dfdf2d9b7219fdb187171a7023c187735", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -23,7 +23,7 @@ enum SmallVectorRepr<T> {\n     Many(Vec<T> ),\n }\n \n-impl<T> Container for SmallVector<T> {\n+impl<T> Collection for SmallVector<T> {\n     fn len(&self) -> uint {\n         match self.repr {\n             Zero => 0,"}, {"sha": "61c26d4d8fd32712a0aa2c31e96a9a42f30847d7", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     let x: Box<HashMap<int, int>> = box HashMap::new();\n     let x: Box<Map<int, int>> = x;\n     let y: Box<Map<uint, int>> = box x;\n-    //~^ ERROR failed to find an implementation of trait core::container::Map<uint,int>\n-    //         for ~core::container::Map<int,int>:Send\n+    //~^ ERROR failed to find an implementation of trait core::collections::Map<uint,int>\n+    //         for ~core::collections::Map<int,int>:Send\n }"}, {"sha": "924625faa1010a87338d6f025674716ae56bcee9", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -48,7 +48,7 @@ impl<T> cat<T> {\n     }\n }\n \n-impl<T> Container for cat<T> {\n+impl<T> Collection for cat<T> {\n     fn len(&self) -> uint { self.meows as uint }\n     fn is_empty(&self) -> bool { self.meows == 0 }\n }"}, {"sha": "8b041ed3a3e768bba07762abe4d789cec5838de3", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use std::container::{Map, MutableMap};\n+use std::collections::{Map, MutableMap};\n use std::str::{SendStr, Owned, Slice};\n use std::collections::HashMap;\n use std::option::Some;"}, {"sha": "68eca8f21a7f5d37c9b4a94e55a96034593bd648", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50942c7695783875bd2161596036a52755ffb09c/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50942c7695783875bd2161596036a52755ffb09c/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=50942c7695783875bd2161596036a52755ffb09c", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use std::container::{ Map, MutableMap};\n+use std::collections::{ Map, MutableMap};\n use std::str::{SendStr, Owned, Slice};\n use std::to_str::ToStr;\n use self::collections::TreeMap;"}]}