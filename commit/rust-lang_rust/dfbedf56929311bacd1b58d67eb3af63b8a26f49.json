{"sha": "dfbedf56929311bacd1b58d67eb3af63b8a26f49", "node_id": "C_kwDOAAsO6NoAKGRmYmVkZjU2OTI5MzExYmFjZDFiNThkNjdlYjNhZjYzYjhhMjZmNDk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-11T05:42:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-11T05:42:16Z"}, "message": "Rollup merge of #97967 - BoxyUwU:at_docs_mention_trace, r=compiler-errors\n\nMention `infer::Trace` methods on `infer::At` methods' docs\n\nI missed that you could do `infcx.at(...).trace(...).eq(a, b)` when `a` and `b` dont implement `ToTrace` but does implement `Relate` these docs would have helped see that :sweat_smile:", "tree": {"sha": "5f337351f6f7762b53c108e8d3fe28d1690fddb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f337351f6f7762b53c108e8d3fe28d1690fddb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfbedf56929311bacd1b58d67eb3af63b8a26f49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJipCs4CRBK7hj4Ov3rIwAABrUIAKFHwpLs4toI/x10aVpHmjjO\nR5twnTNIpbqYuhHIknqrQj5/HciFBH+MxeeaNN7W8wlBbl7IQiICeowdU/9FDJiB\nhNu5p1bH75hyi2kdUY16Z35yaj8AzlFN2yRMydY7NyPU7/g6f8cbo9ZACIe3kJ+A\naq+9myKuBGdDSH7L8BK0qMXI+nQAfUAnAzcRZZHukH7f0LnQ6f4X8nae9+ymAYn8\n70NjXqVqLJdPObmxrKzLXcjX9Wy2J/qhsjlJ+F34rtidUWD0brmf2XqSgqhu2Mkx\nijItyAjvcmWsfuvr4lahb0K8EHouvVI90bQF1dZyuXGt0lN0fpCvbLVkK3ou4cA=\n=1YYK\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f337351f6f7762b53c108e8d3fe28d1690fddb9\nparent 5dc8f1799ea3c66c026b5840ad58feb6067609e7\nparent 9f1d3702a4b994100f6aa01178bfb0530d31cb26\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654926136 +0200\ncommitter GitHub <noreply@github.com> 1654926136 +0200\n\nRollup merge of #97967 - BoxyUwU:at_docs_mention_trace, r=compiler-errors\n\nMention `infer::Trace` methods on `infer::At` methods' docs\n\nI missed that you could do `infcx.at(...).trace(...).eq(a, b)` when `a` and `b` dont implement `ToTrace` but does implement `Relate` these docs would have helped see that :sweat_smile:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbedf56929311bacd1b58d67eb3af63b8a26f49", "html_url": "https://github.com/rust-lang/rust/commit/dfbedf56929311bacd1b58d67eb3af63b8a26f49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfbedf56929311bacd1b58d67eb3af63b8a26f49/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dc8f1799ea3c66c026b5840ad58feb6067609e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc8f1799ea3c66c026b5840ad58feb6067609e7", "html_url": "https://github.com/rust-lang/rust/commit/5dc8f1799ea3c66c026b5840ad58feb6067609e7"}, {"sha": "9f1d3702a4b994100f6aa01178bfb0530d31cb26", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1d3702a4b994100f6aa01178bfb0530d31cb26", "html_url": "https://github.com/rust-lang/rust/commit/9f1d3702a4b994100f6aa01178bfb0530d31cb26"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "ce2698ef44cd49d4e1fdd68fbe5a7e47469b120d", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dfbedf56929311bacd1b58d67eb3af63b8a26f49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbedf56929311bacd1b58d67eb3af63b8a26f49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=dfbedf56929311bacd1b58d67eb3af63b8a26f49", "patch": "@@ -111,6 +111,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `a <: b`, where `a` may or may not be expected.\n+    ///\n+    /// See [`At::trace_exp`] and [`Trace::sub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn sub_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -122,6 +125,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// call like `foo(x)`, where `foo: fn(i32)`, you might have\n     /// `sup(i32, x)`, since the \"expected\" type is the type that\n     /// appears in the signature.\n+    ///\n+    /// See [`At::trace`] and [`Trace::sub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn sup<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -130,6 +136,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n+    ///\n+    /// See [`At::trace`] and [`Trace::sub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn sub<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -138,6 +147,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n+    ///\n+    /// See [`At::trace_exp`] and [`Trace::eq`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn eq_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -146,6 +158,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n+    ///\n+    /// See [`At::trace`] and [`Trace::eq`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn eq<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -176,6 +191,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// this can result in an error (e.g., if asked to compute LUB of\n     /// u32 and i32), it is meaningful to call one of them the\n     /// \"expected type\".\n+    ///\n+    /// See [`At::trace`] and [`Trace::lub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn lub<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>\n     where\n         T: ToTrace<'tcx>,\n@@ -186,6 +204,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// Computes the greatest-lower-bound, or mutual subtype, of two\n     /// values. As with `lub` order doesn't matter, except for error\n     /// cases.\n+    ///\n+    /// See [`At::trace`] and [`Trace::glb`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn glb<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>\n     where\n         T: ToTrace<'tcx>,"}]}