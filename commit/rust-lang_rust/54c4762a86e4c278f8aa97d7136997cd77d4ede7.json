{"sha": "54c4762a86e4c278f8aa97d7136997cd77d4ede7", "node_id": "C_kwDOAAsO6NoAKDU0YzQ3NjJhODZlNGMyNzhmOGFhOTdkNzEzNjk5N2NkNzdkNGVkZTc", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-10T15:11:00Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-03T07:30:35Z"}, "message": "fix remaining tests", "tree": {"sha": "95b5831b4b5e3c332119ecf83000bd3064f32028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95b5831b4b5e3c332119ecf83000bd3064f32028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54c4762a86e4c278f8aa97d7136997cd77d4ede7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQqgJsACgkQzXazX3c0\ndp5yng//Y+NvnukAjOW+D4m7M0zZ1a6bOr5SpglOHQ+QbaBIM7y0A+A4Ngg74u4A\nNJkHJvleyJ/fJCdlh2AJpdLUD2LMKgg7Ee/x1iNbz+jXTaGkfcZbFskWv19ivBtI\nsiLPwRqg6DmEXglLwWKyCGgbHjPiijPIQiFye6ED5vUNWvAPD5tK2nLnYTvXwOZo\nQXzmaBvatrpydok+pfqJg/8uzKEHfvUy8ARIXHCH9M+OllHJaJe4+kINu8nGBhY3\nKbzdylfTWqdIcVGJzCiBD2PV52FINTa1LMYcPOAbfmAuxixVA8vi7w5pfNOOl3rX\nlIZ8FyQn0kTThI/uYJFlDNQDKsx5Zo1S79MgWy8BpPOAK/FpQ5MMmIlPvU8Oafl0\ncxToMLd77PSGArHZzwOBC6TSvWc/dmZ0u5PO4eeDkcgmT2XdvcLimqV2bzToVRUT\nWK+X1v1J8h6cGBTKuj738uzLWEetZ/DDGhPfLYdMclR7fOMAH10u32eDF3BewjaX\nLRzUfgGNDy61TxBIQfcgwHDd0GLg86e8TTFFS/0gkbAP28Ybi216Zb7RXZp+2Qse\nK1YCanKIIGKlBp5H1fQbGy8LndpiUmKZ6k2i6Fwx4dgVY7/R7dTfGPAwP3pV84rc\n9UMYNEPqcivoM0tgahTmcN/iJ6kUQMuEY6B9vTNNNHSfq3EEcvU=\n=KZO9\n-----END PGP SIGNATURE-----", "payload": "tree 95b5831b4b5e3c332119ecf83000bd3064f32028\nparent 91be8cadcbcc94eaf78393fc8254b03c6177bca8\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678461060 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1680507035 +0200\n\nfix remaining tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54c4762a86e4c278f8aa97d7136997cd77d4ede7", "html_url": "https://github.com/rust-lang/rust/commit/54c4762a86e4c278f8aa97d7136997cd77d4ede7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54c4762a86e4c278f8aa97d7136997cd77d4ede7/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91be8cadcbcc94eaf78393fc8254b03c6177bca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/91be8cadcbcc94eaf78393fc8254b03c6177bca8", "html_url": "https://github.com/rust-lang/rust/commit/91be8cadcbcc94eaf78393fc8254b03c6177bca8"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "84afddbf97947126b3c4810a8aa74ceef416dacd", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54c4762a86e4c278f8aa97d7136997cd77d4ede7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c4762a86e4c278f8aa97d7136997cd77d4ede7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=54c4762a86e4c278f8aa97d7136997cd77d4ede7", "patch": "@@ -694,7 +694,7 @@ impl Step for CompiletestTest {\n     /// Runs `cargo test` for compiletest.\n     fn run(self, builder: &Builder<'_>) {\n         let host = self.host;\n-        let compiler = builder.compiler(0, host);\n+        let compiler = builder.compiler(1, host);\n \n         // We need `ToolStd` for the locally-built sysroot because\n         // compiletest uses unstable features of the `test` crate."}, {"sha": "2e3c1ec48eefb4f60195f32a10f906b1a5313c5e", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54c4762a86e4c278f8aa97d7136997cd77d4ede7/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c4762a86e4c278f8aa97d7136997cd77d4ede7/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=54c4762a86e4c278f8aa97d7136997cd77d4ede7", "patch": "@@ -490,7 +490,7 @@ impl TargetCfgs {\n #[serde(rename_all = \"kebab-case\")]\n pub struct TargetCfg {\n     pub(crate) arch: String,\n-    #[serde(default)]\n+    #[serde(default = \"default_os\")]\n     pub(crate) os: String,\n     #[serde(default)]\n     pub(crate) env: String,\n@@ -506,6 +506,10 @@ pub struct TargetCfg {\n     panic: PanicStrategy,\n }\n \n+fn default_os() -> String {\n+    \"none\".into()\n+}\n+\n #[derive(Eq, PartialEq, Clone, Debug, Default, serde::Deserialize)]\n #[serde(rename_all = \"kebab-case\")]\n pub enum Endian {"}, {"sha": "e1931474a5f95cad12d323ec9b4b6d28a6ff788f", "filename": "src/tools/compiletest/src/header/cfg.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/54c4762a86e4c278f8aa97d7136997cd77d4ede7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c4762a86e4c278f8aa97d7136997cd77d4ede7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs?ref=54c4762a86e4c278f8aa97d7136997cd77d4ede7", "patch": "@@ -70,7 +70,12 @@ pub(super) fn parse_cfg_name_directive<'a>(\n         message: \"when the target is {name}\"\n     }\n     condition! {\n-        name: &target_cfg.os,\n+        name: &[\n+            Some(&*target_cfg.os),\n+            // If something is ignored for emscripten, it likely also needs to be\n+            // ignored for wasm32-unknown-unknown.\n+            (config.target == \"wasm32-unknown-unknown\").then_some(\"emscripten\"),\n+        ],\n         allowed_names: &target_cfgs.all_oses,\n         message: \"when the operative system is {name}\"\n     }\n@@ -100,16 +105,9 @@ pub(super) fn parse_cfg_name_directive<'a>(\n         message: \"when the target family is {name}\"\n     }\n \n-    // If something is ignored for emscripten, it likely also needs to be\n-    // ignored for wasm32-unknown-unknown.\n     // `wasm32-bare` is an alias to refer to just wasm32-unknown-unknown\n     // (in contrast to `wasm32` which also matches non-bare targets like\n     // asmjs-unknown-emscripten).\n-    condition! {\n-        name: \"emscripten\",\n-        condition: config.target == \"wasm32-unknown-unknown\",\n-        message: \"when the target is WASM\",\n-    }\n     condition! {\n         name: \"wasm32-bare\",\n         condition: config.target == \"wasm32-unknown-unknown\",\n@@ -144,7 +142,7 @@ pub(super) fn parse_cfg_name_directive<'a>(\n     }\n     condition! {\n         name: config.stage_id.split('-').next().unwrap(),\n-        allowed_names: &[\"stable\", \"beta\", \"nightly\"],\n+        allowed_names: &[\"stage0\", \"stage1\", \"stage2\"],\n         message: \"when the bootstrapping stage is {name}\",\n     }\n     condition! {\n@@ -287,6 +285,12 @@ impl<T: CustomMatches> CustomMatches for &[T] {\n     }\n }\n \n+impl<const N: usize, T: CustomMatches> CustomMatches for [T; N] {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        self.iter().any(|m| m.custom_matches(name))\n+    }\n+}\n+\n impl<T: CustomMatches> CustomMatches for Option<T> {\n     fn custom_matches(&self, name: &str) -> bool {\n         match self {"}, {"sha": "acd588d7fee04d24f1ccbe44057d872a1e66083c", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54c4762a86e4c278f8aa97d7136997cd77d4ede7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c4762a86e4c278f8aa97d7136997cd77d4ede7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=54c4762a86e4c278f8aa97d7136997cd77d4ede7", "patch": "@@ -47,7 +47,7 @@ fn config() -> Config {\n         \"--src-base=\",\n         \"--build-base=\",\n         \"--sysroot-base=\",\n-        \"--stage-id=stage2\",\n+        \"--stage-id=stage2-x86_64-unknown-linux-gnu\",\n         \"--cc=c\",\n         \"--cxx=c++\",\n         \"--cflags=\",\n@@ -174,7 +174,7 @@ fn ignore_target() {\n     assert!(check_ignore(&config, \"// ignore-gnu\"));\n     assert!(check_ignore(&config, \"// ignore-64bit\"));\n \n-    assert!(!check_ignore(&config, \"// ignore-i686\"));\n+    assert!(!check_ignore(&config, \"// ignore-x86\"));\n     assert!(!check_ignore(&config, \"// ignore-windows\"));\n     assert!(!check_ignore(&config, \"// ignore-msvc\"));\n     assert!(!check_ignore(&config, \"// ignore-32bit\"));\n@@ -200,7 +200,7 @@ fn only_target() {\n #[test]\n fn stage() {\n     let mut config = config();\n-    config.stage_id = \"stage1\".to_owned();\n+    config.stage_id = \"stage1-x86_64-unknown-linux-gnu\".to_owned();\n \n     assert!(check_ignore(&config, \"// ignore-stage1\"));\n     assert!(!check_ignore(&config, \"// ignore-stage2\"));"}]}