{"sha": "ac52d9a1f1a94e2c836c8a04a316f6454936a79a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNTJkOWExZjFhOTRlMmM4MzZjOGEwNGEzMTZmNjQ1NDkzNmE3OWE=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-03T10:02:55Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-03T17:49:50Z"}, "message": "Add optional range parameter to SyntaxTreeParams\n\nWhen range is provided, instead of showing the syntax for the whole file, we'll\nshow the syntax tree for the given range.", "tree": {"sha": "bf0e217ed101a32c1597fb6ed0e20fc755954d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0e217ed101a32c1597fb6ed0e20fc755954d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac52d9a1f1a94e2c836c8a04a316f6454936a79a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac52d9a1f1a94e2c836c8a04a316f6454936a79a", "html_url": "https://github.com/rust-lang/rust/commit/ac52d9a1f1a94e2c836c8a04a316f6454936a79a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac52d9a1f1a94e2c836c8a04a316f6454936a79a/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17aaece6b39c2fb525be0eccce4626fc622e8236", "url": "https://api.github.com/repos/rust-lang/rust/commits/17aaece6b39c2fb525be0eccce4626fc622e8236", "html_url": "https://github.com/rust-lang/rust/commit/17aaece6b39c2fb525be0eccce4626fc622e8236"}], "stats": {"total": 153, "additions": 148, "deletions": 5}, "files": [{"sha": "3e7cfbb5428e09764c22414cb4b9a1efcea2ecd4", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac52d9a1f1a94e2c836c8a04a316f6454936a79a/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac52d9a1f1a94e2c836c8a04a316f6454936a79a/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=ac52d9a1f1a94e2c836c8a04a316f6454936a79a", "patch": "@@ -38,7 +38,7 @@ mod marks;\n \n use std::sync::Arc;\n \n-use ra_syntax::{SourceFile, TreeArc, TextRange, TextUnit, AstNode};\n+use ra_syntax::{SourceFile, TreeArc, TextRange, TextUnit, AstNode, algo};\n use ra_text_edit::TextEdit;\n use ra_db::{\n     SourceDatabase, CheckCanceled,\n@@ -245,8 +245,14 @@ impl Analysis {\n \n     /// Returns a syntax tree represented as `String`, for debug purposes.\n     // FIXME: use a better name here.\n-    pub fn syntax_tree(&self, file_id: FileId) -> String {\n-        self.db.parse(file_id).syntax().debug_dump()\n+    pub fn syntax_tree(&self, file_id: FileId, text_range: Option<TextRange>) -> String {\n+        if let Some(text_range) = text_range {\n+            let file = self.db.parse(file_id);\n+            let node = algo::find_covering_node(file.syntax(), text_range);\n+            node.debug_dump()\n+        } else {\n+            self.db.parse(file_id).syntax().debug_dump()\n+        }\n     }\n \n     /// Returns an edit to remove all newlines in the range, cleaning up minor"}, {"sha": "b0c80e255698d7895e480db4bb1d6b7318180ee5", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 135, "deletions": 1, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/ac52d9a1f1a94e2c836c8a04a316f6454936a79a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac52d9a1f1a94e2c836c8a04a316f6454936a79a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=ac52d9a1f1a94e2c836c8a04a316f6454936a79a", "patch": "@@ -1,6 +1,6 @@\n use insta::assert_debug_snapshot_matches;\n use ra_ide_api::{\n-    mock_analysis::{single_file, single_file_with_position, MockAnalysis},\n+    mock_analysis::{single_file, single_file_with_position, single_file_with_range, MockAnalysis},\n     AnalysisChange, CrateGraph, Edition::Edition2018, Query, NavigationTarget,\n     ReferenceSearchResult,\n };\n@@ -138,3 +138,137 @@ mod foo {\n     assert_eq!(s.name(), \"FooInner\");\n     assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n }\n+\n+#[test]\n+fn test_syntax_tree_without_range() {\n+    // Basic syntax\n+    let (analysis, file_id) = single_file(r#\"fn foo() {}\"#);\n+    let syn = analysis.syntax_tree(file_id, None);\n+\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 11)\n+  FN_DEF@[0; 11)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 11)\n+      L_CURLY@[9; 10)\n+      R_CURLY@[10; 11)\n+    \"#\n+        .trim()\n+    );\n+\n+    let (analysis, file_id) = single_file(\n+        r#\"\n+fn test() {\n+    assert!(\"\n+    fn foo() {\n+    }\n+    \", \"\");\n+}\"#\n+        .trim(),\n+    );\n+    let syn = analysis.syntax_tree(file_id, None);\n+\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 60)\n+  FN_DEF@[0; 60)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"test\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+    WHITESPACE@[9; 10)\n+    BLOCK@[10; 60)\n+      L_CURLY@[10; 11)\n+      WHITESPACE@[11; 16)\n+      EXPR_STMT@[16; 58)\n+        MACRO_CALL@[16; 57)\n+          PATH@[16; 22)\n+            PATH_SEGMENT@[16; 22)\n+              NAME_REF@[16; 22)\n+                IDENT@[16; 22) \"assert\"\n+          EXCL@[22; 23)\n+          TOKEN_TREE@[23; 57)\n+            L_PAREN@[23; 24)\n+            STRING@[24; 52)\n+            COMMA@[52; 53)\n+            WHITESPACE@[53; 54)\n+            STRING@[54; 56)\n+            R_PAREN@[56; 57)\n+        SEMI@[57; 58)\n+      WHITESPACE@[58; 59)\n+      R_CURLY@[59; 60)\n+    \"#\n+        .trim()\n+    );\n+}\n+\n+#[test]\n+fn test_syntax_tree_with_range() {\n+    let (analysis, range) = single_file_with_range(r#\"<|>fn foo() {}<|>\"#.trim());\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+FN_DEF@[0; 11)\n+  FN_KW@[0; 2)\n+  WHITESPACE@[2; 3)\n+  NAME@[3; 6)\n+    IDENT@[3; 6) \"foo\"\n+  PARAM_LIST@[6; 8)\n+    L_PAREN@[6; 7)\n+    R_PAREN@[7; 8)\n+  WHITESPACE@[8; 9)\n+  BLOCK@[9; 11)\n+    L_CURLY@[9; 10)\n+    R_CURLY@[10; 11)\n+    \"#\n+        .trim()\n+    );\n+\n+    let (analysis, range) = single_file_with_range(\n+        r#\"fn test() {\n+    <|>assert!(\"\n+    fn foo() {\n+    }\n+    \", \"\");<|>\n+}\"#\n+        .trim(),\n+    );\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+EXPR_STMT@[16; 58)\n+  MACRO_CALL@[16; 57)\n+    PATH@[16; 22)\n+      PATH_SEGMENT@[16; 22)\n+        NAME_REF@[16; 22)\n+          IDENT@[16; 22) \"assert\"\n+    EXCL@[22; 23)\n+    TOKEN_TREE@[23; 57)\n+      L_PAREN@[23; 24)\n+      STRING@[24; 52)\n+      COMMA@[52; 53)\n+      WHITESPACE@[53; 54)\n+      STRING@[54; 56)\n+      R_PAREN@[56; 57)\n+  SEMI@[57; 58)\n+    \"#\n+        .trim()\n+    );\n+}"}, {"sha": "89e96a33af59210660910a9b842a05a9d08b66f9", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac52d9a1f1a94e2c836c8a04a316f6454936a79a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac52d9a1f1a94e2c836c8a04a316f6454936a79a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=ac52d9a1f1a94e2c836c8a04a316f6454936a79a", "patch": "@@ -32,7 +32,9 @@ pub fn handle_analyzer_status(world: ServerWorld, _: ()) -> Result<String> {\n \n pub fn handle_syntax_tree(world: ServerWorld, params: req::SyntaxTreeParams) -> Result<String> {\n     let id = params.text_document.try_conv_with(&world)?;\n-    let res = world.analysis().syntax_tree(id);\n+    let line_index = world.analysis().file_line_index(id);\n+    let text_range = params.range.map(|p| p.conv_with(&line_index));\n+    let res = world.analysis().syntax_tree(id, text_range);\n     Ok(res)\n }\n "}, {"sha": "5c589f9691f6ca317ecd24a1025d6fc7ea26e146", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac52d9a1f1a94e2c836c8a04a316f6454936a79a/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac52d9a1f1a94e2c836c8a04a316f6454936a79a/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=ac52d9a1f1a94e2c836c8a04a316f6454936a79a", "patch": "@@ -39,6 +39,7 @@ impl Request for SyntaxTree {\n #[serde(rename_all = \"camelCase\")]\n pub struct SyntaxTreeParams {\n     pub text_document: TextDocumentIdentifier,\n+    pub range: Option<Range>,\n }\n \n pub enum ExtendSelection {}"}]}