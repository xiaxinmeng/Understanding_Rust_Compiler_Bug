{"sha": "8967085617f13fd11067e632f4f29e7eb013c1fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NjcwODU2MTdmMTNmZDExMDY3ZTYzMmY0ZjI5ZTdlYjAxM2MxZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-04T16:04:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-04T16:04:08Z"}, "message": "Auto merge of #39533 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 3 pull requests\n\n- Successful merges: #39486, #39506, #39517\n- Failed merges:", "tree": {"sha": "e45c42c0320ae5ac94071f6457459a4f923fa36e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e45c42c0320ae5ac94071f6457459a4f923fa36e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8967085617f13fd11067e632f4f29e7eb013c1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8967085617f13fd11067e632f4f29e7eb013c1fd", "html_url": "https://github.com/rust-lang/rust/commit/8967085617f13fd11067e632f4f29e7eb013c1fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8967085617f13fd11067e632f4f29e7eb013c1fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4eea733065ec39ba6031d856ace002c70035c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4eea733065ec39ba6031d856ace002c70035c44", "html_url": "https://github.com/rust-lang/rust/commit/e4eea733065ec39ba6031d856ace002c70035c44"}, {"sha": "e204987bdb6739792a3ef6fc0001c4ab83004d8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e204987bdb6739792a3ef6fc0001c4ab83004d8d", "html_url": "https://github.com/rust-lang/rust/commit/e204987bdb6739792a3ef6fc0001c4ab83004d8d"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "f26c0b6b6116194cd1fbc74fb64fa4d384b08239", "filename": "RELEASES.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8967085617f13fd11067e632f4f29e7eb013c1fd/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/8967085617f13fd11067e632f4f29e7eb013c1fd/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=8967085617f13fd11067e632f4f29e7eb013c1fd", "patch": "@@ -1,3 +1,11 @@\n+Version 1.15.1 (2017-02-07)\n+===========================\n+\n+* [Fix IntoIter::as_mut_slice's signature][39466]\n+\n+[39466]: https://github.com/rust-lang/rust/pull/39466\n+\n+\n Version 1.15.0 (2017-02-02)\n ===========================\n "}, {"sha": "8058972e7509310bc8914ba1fef45d83844afd17", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8967085617f13fd11067e632f4f29e7eb013c1fd/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8967085617f13fd11067e632f4f29e7eb013c1fd/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=8967085617f13fd11067e632f4f29e7eb013c1fd", "patch": "@@ -198,9 +198,9 @@ impl DefaultResizePolicy {\n /// attacks such as HashDoS.\n ///\n /// The hashing algorithm can be replaced on a per-`HashMap` basis using the\n-/// `HashMap::default`, `HashMap::with_hasher`, and\n-/// `HashMap::with_capacity_and_hasher` methods. Many alternative algorithms\n-/// are available on crates.io, such as the `fnv` crate.\n+/// [`HashMap::default`], [`HashMap::with_hasher`], and\n+/// [`HashMap::with_capacity_and_hasher`] methods. Many alternative algorithms\n+/// are available on crates.io, such as the [`fnv`] crate.\n ///\n /// It is required that the keys implement the [`Eq`] and [`Hash`] traits, although\n /// this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\n@@ -302,6 +302,10 @@ impl DefaultResizePolicy {\n /// [`PartialEq`]: ../../std/cmp/trait.PartialEq.html\n /// [`RefCell`]: ../../std/cell/struct.RefCell.html\n /// [`Cell`]: ../../std/cell/struct.Cell.html\n+/// [`HashMap::default`]: #method.default\n+/// [`HashMap::with_hasher`]: #method.with_hasher\n+/// [`HashMap::with_capacity_and_hasher`]: #method.with_capacity_and_hasher\n+/// [`fnv`]: https://crates.io/crates/fnv\n ///\n /// ```\n /// use std::collections::HashMap;\n@@ -680,7 +684,9 @@ impl<K, V, S> HashMap<K, V, S>\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the new allocation size overflows `usize`.\n+    /// Panics if the new allocation size overflows [`usize`].\n+    ///\n+    /// [`usize`]: ../../std/primitive.usize.html\n     ///\n     /// # Examples\n     ///\n@@ -1141,13 +1147,14 @@ impl<K, V, S> HashMap<K, V, S>\n \n     /// Inserts a key-value pair into the map.\n     ///\n-    /// If the map did not have this key present, `None` is returned.\n+    /// If the map did not have this key present, [`None`] is returned.\n     ///\n     /// If the map did have this key present, the value is updated, and the old\n     /// value is returned. The key is not updated, though; this matters for\n     /// types that can be `==` without being identical. See the [module-level\n     /// documentation] for more.\n     ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///\n     /// # Examples"}, {"sha": "5c85c4879a8396770805b4aa4904bb583f21d32b", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8967085617f13fd11067e632f4f29e7eb013c1fd/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8967085617f13fd11067e632f4f29e7eb013c1fd/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=8967085617f13fd11067e632f4f29e7eb013c1fd", "patch": "@@ -36,7 +36,7 @@ impl WaitTimeoutResult {\n /// consumes no CPU time while waiting for an event to occur. Condition\n /// variables are typically associated with a boolean predicate (a condition)\n /// and a mutex. The predicate is always verified inside of the mutex before\n-/// determining that thread must block.\n+/// determining that a thread must block.\n ///\n /// Functions in this module will block the current **thread** of execution and\n /// are bindings to system-provided condition variables where possible. Note"}]}