{"sha": "553004539eaa14b8338f6f3cabce42c9e705fead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MzAwNDUzOWVhYTE0YjgzMzhmNmYzY2FiY2U0MmM5ZTcwNWZlYWQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-28T15:18:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-29T19:26:15Z"}, "message": "Make current_hir_id_owner a simple tuple.", "tree": {"sha": "9fb950b3d87c62faf14dce854fc884153566b7f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb950b3d87c62faf14dce854fc884153566b7f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/553004539eaa14b8338f6f3cabce42c9e705fead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/553004539eaa14b8338f6f3cabce42c9e705fead", "html_url": "https://github.com/rust-lang/rust/commit/553004539eaa14b8338f6f3cabce42c9e705fead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/553004539eaa14b8338f6f3cabce42c9e705fead/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814a560072c305d274affc78219e4a7e0558252f", "url": "https://api.github.com/repos/rust-lang/rust/commits/814a560072c305d274affc78219e4a7e0558252f", "html_url": "https://github.com/rust-lang/rust/commit/814a560072c305d274affc78219e4a7e0558252f"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "bf70a41fd79e093d597b283d36b4682f2cbe3223", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/553004539eaa14b8338f6f3cabce42c9e705fead/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/553004539eaa14b8338f6f3cabce42c9e705fead/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=553004539eaa14b8338f6f3cabce42c9e705fead", "patch": "@@ -338,7 +338,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let mut generic_args = vec![];\n         for (idx, arg) in args.into_iter().enumerate() {\n             if legacy_args_idx.contains(&idx) {\n-                let parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n+                let parent_def_id = self.current_hir_id_owner.0;\n                 let node_id = self.resolver.next_node_id();\n \n                 // Add a definition for the in-band const def."}, {"sha": "e7c566e586cbd53772599a9efc63560c501bfc75", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/553004539eaa14b8338f6f3cabce42c9e705fead/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/553004539eaa14b8338f6f3cabce42c9e705fead/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=553004539eaa14b8338f6f3cabce42c9e705fead", "patch": "@@ -165,7 +165,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     type_def_lifetime_params: DefIdMap<usize>,\n \n-    current_hir_id_owner: Vec<(LocalDefId, u32)>,\n+    current_hir_id_owner: (LocalDefId, u32),\n     item_local_id_counters: NodeMap<u32>,\n     node_id_to_hir_id: IndexVec<NodeId, Option<hir::HirId>>,\n \n@@ -321,7 +321,7 @@ pub fn lower_crate<'a, 'hir>(\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n         type_def_lifetime_params: Default::default(),\n         current_module: CRATE_DEF_ID,\n-        current_hir_id_owner: vec![(CRATE_DEF_ID, 0)],\n+        current_hir_id_owner: (CRATE_DEF_ID, 0),\n         item_local_id_counters: Default::default(),\n         node_id_to_hir_id: IndexVec::new(),\n         generator_kind: None,\n@@ -594,9 +594,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .insert(owner, HIR_ID_COUNTER_LOCKED)\n             .unwrap_or_else(|| panic!(\"no `item_local_id_counters` entry for {:?}\", owner));\n         let def_id = self.resolver.local_def_id(owner);\n-        self.current_hir_id_owner.push((def_id, counter));\n+        let old_owner = std::mem::replace(&mut self.current_hir_id_owner, (def_id, counter));\n         let ret = f(self);\n-        let (new_def_id, new_counter) = self.current_hir_id_owner.pop().unwrap();\n+        let (new_def_id, new_counter) =\n+            std::mem::replace(&mut self.current_hir_id_owner, old_owner);\n \n         debug_assert!(def_id == new_def_id);\n         debug_assert!(new_counter >= counter);\n@@ -614,8 +615,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// properly. Calling the method twice with the same `NodeId` is fine though.\n     fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         self.lower_node_id_generic(ast_node_id, |this| {\n-            let &mut (owner, ref mut local_id_counter) =\n-                this.current_hir_id_owner.last_mut().unwrap();\n+            let &mut (owner, ref mut local_id_counter) = &mut this.current_hir_id_owner;\n             let local_id = *local_id_counter;\n             *local_id_counter += 1;\n             hir::HirId { owner, local_id: hir::ItemLocalId::from_u32(local_id) }\n@@ -868,10 +868,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // wouldn't have been added yet.\n                     let generics = this.lower_generics_mut(\n                         generics,\n-                        ImplTraitContext::Universal(\n-                            &mut params,\n-                            this.current_hir_id_owner.last().unwrap().0,\n-                        ),\n+                        ImplTraitContext::Universal(&mut params, this.current_hir_id_owner.0),\n                     );\n                     let res = f(this, &mut params);\n                     (params, (generics, res))\n@@ -1077,7 +1074,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             AssocTyConstraintKind::Bound { ref bounds } => {\n                 let mut capturable_lifetimes;\n-                let mut parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n+                let mut parent_def_id = self.current_hir_id_owner.0;\n                 // Piggy-back on the `impl Trait` context to figure out the correct behavior.\n                 let (desugar_to_impl_trait, itctx) = match itctx {\n                     // We are in the return position:\n@@ -1198,7 +1195,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                             // Construct a AnonConst where the expr is the \"ty\"'s path.\n \n-                            let parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n+                            let parent_def_id = self.current_hir_id_owner.0;\n                             let node_id = self.resolver.next_node_id();\n \n                             // Add a definition for the in-band const def.\n@@ -1814,10 +1811,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 if let Some((_, ibty)) = &mut in_band_ty_params {\n                     this.lower_ty_direct(\n                         &param.ty,\n-                        ImplTraitContext::Universal(\n-                            ibty,\n-                            this.current_hir_id_owner.last().unwrap().0,\n-                        ),\n+                        ImplTraitContext::Universal(ibty, this.current_hir_id_owner.0),\n                     )\n                 } else {\n                     this.lower_ty_direct(&param.ty, ImplTraitContext::disallowed())"}]}