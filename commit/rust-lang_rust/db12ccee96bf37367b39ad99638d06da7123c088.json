{"sha": "db12ccee96bf37367b39ad99638d06da7123c088", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMTJjY2VlOTZiZjM3MzY3YjM5YWQ5OTYzOGQwNmRhNzEyM2MwODg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T14:15:11Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T14:52:05Z"}, "message": "Better naming and docs", "tree": {"sha": "6ade1ef7533d2ac235ccf507c48bde6c41289917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ade1ef7533d2ac235ccf507c48bde6c41289917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db12ccee96bf37367b39ad99638d06da7123c088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db12ccee96bf37367b39ad99638d06da7123c088", "html_url": "https://github.com/rust-lang/rust/commit/db12ccee96bf37367b39ad99638d06da7123c088", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db12ccee96bf37367b39ad99638d06da7123c088/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "188ec3459e795732ad097758f7bf6b6b95bdbf5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/188ec3459e795732ad097758f7bf6b6b95bdbf5e", "html_url": "https://github.com/rust-lang/rust/commit/188ec3459e795732ad097758f7bf6b6b95bdbf5e"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "e3c417b41be78c91a6fb98fef36ba73e613d3d1a", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=db12ccee96bf37367b39ad99638d06da7123c088", "patch": "@@ -138,8 +138,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.original_range(node)\n     }\n \n-    pub fn diagnostics_presentation_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n-        self.imp.diagnostics_presentation_range(diagnostics)\n+    pub fn diagnostics_display_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n+        self.imp.diagnostics_display_range(diagnostics)\n     }\n \n     pub fn ancestors_with_macros(&self, node: SyntaxNode) -> impl Iterator<Item = SyntaxNode> + '_ {\n@@ -369,8 +369,8 @@ impl<'db> SemanticsImpl<'db> {\n         original_range(self.db, node.as_ref())\n     }\n \n-    fn diagnostics_presentation_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n-        let src = diagnostics.presentation();\n+    fn diagnostics_display_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n+        let src = diagnostics.display_source();\n         let root = self.db.parse_or_expand(src.file_id).unwrap();\n         let node = src.value.to_node(&root);\n         self.cache(root, src.file_id);"}, {"sha": "71d177070dd6c91ebfa71cf941fe7ebf47bb9b1f", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=db12ccee96bf37367b39ad99638d06da7123c088", "patch": "@@ -18,7 +18,7 @@ impl Diagnostic for UnresolvedModule {\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }\n-    fn presentation(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.decl.clone().into())\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {"}, {"sha": "b138500e7342533b6a9d65684760e82fc6ace215", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=db12ccee96bf37367b39ad99638d06da7123c088", "patch": "@@ -22,8 +22,8 @@ use crate::InFile;\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n-    /// A presentation source of the diagnostics, to use in highlighting and similar actions\n-    fn presentation(&self) -> InFile<SyntaxNodePtr>;\n+    /// Used in highlighting and related purposes\n+    fn display_source(&self) -> InFile<SyntaxNodePtr>;\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n     fn is_experimental(&self) -> bool {\n         false"}, {"sha": "7ab7f79db66521019fb39b3ac1fdd48f0bf270f5", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=db12ccee96bf37367b39ad99638d06da7123c088", "patch": "@@ -37,7 +37,7 @@ impl Diagnostic for NoSuchField {\n         \"no such field\".to_string()\n     }\n \n-    fn presentation(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.field.clone().into())\n     }\n \n@@ -63,7 +63,7 @@ impl Diagnostic for MissingFields {\n         buf\n     }\n \n-    fn presentation(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile {\n             file_id: self.file,\n             value: self\n@@ -95,13 +95,15 @@ impl Diagnostic for MissingPatFields {\n         }\n         buf\n     }\n-    fn presentation(&self) -> InFile<SyntaxNodePtr> {\n-        let value = self\n-            .field_list_parent_path\n-            .clone()\n-            .map(SyntaxNodePtr::from)\n-            .unwrap_or_else(|| self.field_list_parent.clone().into());\n-        InFile { file_id: self.file, value }\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile {\n+            file_id: self.file,\n+            value: self\n+                .field_list_parent_path\n+                .clone()\n+                .map(SyntaxNodePtr::from)\n+                .unwrap_or_else(|| self.field_list_parent.clone().into()),\n+        }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -119,7 +121,7 @@ impl Diagnostic for MissingMatchArms {\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n     }\n-    fn presentation(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.match_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -137,7 +139,7 @@ impl Diagnostic for MissingOkInTailExpr {\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n-    fn presentation(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -155,7 +157,7 @@ impl Diagnostic for BreakOutsideOfLoop {\n     fn message(&self) -> String {\n         \"break outside of loop\".to_string()\n     }\n-    fn presentation(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -173,7 +175,7 @@ impl Diagnostic for MissingUnsafe {\n     fn message(&self) -> String {\n         format!(\"This operation is unsafe and requires an unsafe function or block\")\n     }\n-    fn presentation(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -194,7 +196,7 @@ impl Diagnostic for MismatchedArgCount {\n         let s = if self.expected == 1 { \"\" } else { \"s\" };\n         format!(\"Expected {} argument{}, found {}\", self.expected, s, self.found)\n     }\n-    fn presentation(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.call_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -256,12 +258,11 @@ mod tests {\n \n         let mut actual: FxHashMap<FileId, Vec<(TextRange, String)>> = FxHashMap::default();\n         db.diagnostics(|d| {\n+            let src = d.display_source();\n+            let root = db.parse_or_expand(src.file_id).unwrap();\n             // FIXME: macros...\n-            let diagnostics_presentation = d.presentation();\n-            let root = db.parse_or_expand(diagnostics_presentation.file_id).unwrap();\n-\n-            let file_id = diagnostics_presentation.file_id.original_file(&db);\n-            let range = diagnostics_presentation.value.to_node(&root).text_range();\n+            let file_id = src.file_id.original_file(&db);\n+            let range = src.value.to_node(&root).text_range();\n             let message = d.message().to_owned();\n             actual.entry(file_id).or_default().push((range, message));\n         });"}, {"sha": "1046d7ab374502218f9a8dd2f5d6badc41aabc1c", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=db12ccee96bf37367b39ad99638d06da7123c088", "patch": "@@ -183,7 +183,7 @@ mod tests {\n     /// Takes a multi-file input fixture with annotated cursor positions,\n     /// and checks that:\n     ///  * a diagnostic is produced\n-    ///  * this diagnostic fix touches the input cursor position\n+    ///  * this diagnostic fix trigger range touches the input cursor position\n     ///  * that the contents of the file containing the cursor match `after` after the diagnostic fix is applied\n     fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n         let after = trim_indent(ra_fixture_after);"}, {"sha": "f7c73773f3ac9cecdfaf111243df64f3cae09b58", "filename": "crates/ra_ide/src/diagnostics/diagnostics_with_fix.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db12ccee96bf37367b39ad99638d06da7123c088/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs?ref=db12ccee96bf37367b39ad99638d06da7123c088", "patch": "@@ -1,4 +1,5 @@\n-//! Provides a way to attach fix actions to the\n+//! Provides a way to attach fixes to the diagnostics.\n+//! The same module also has all curret custom fixes for the diagnostics implemented.\n use crate::Fix;\n use ast::{edit::IndentLevel, make};\n use hir::{"}]}