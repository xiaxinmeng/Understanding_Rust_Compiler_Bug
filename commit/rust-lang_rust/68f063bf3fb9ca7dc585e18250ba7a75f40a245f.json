{"sha": "68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "node_id": "C_kwDOAAsO6NoAKDY4ZjA2M2JmM2ZiOWNhN2RjNTg1ZTE4MjUwYmE3YTc1ZjQwYTI0NWY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-14T01:46:46Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-14T01:53:59Z"}, "message": "Use Rust ABI for `__rust_start_panic` and `_{rdl,rg}_oom`", "tree": {"sha": "13610e14a6bab430a6786396720d078196421007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13610e14a6bab430a6786396720d078196421007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "html_url": "https://github.com/rust-lang/rust/commit/68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68f063bf3fb9ca7dc585e18250ba7a75f40a245f/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dd68402c5d7da168f87d8551dd9aed1d8a21893", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd68402c5d7da168f87d8551dd9aed1d8a21893", "html_url": "https://github.com/rust-lang/rust/commit/6dd68402c5d7da168f87d8551dd9aed1d8a21893"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "da61ff1e7512a734d53854fa116e0dd143f28642", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f063bf3fb9ca7dc585e18250ba7a75f40a245f/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f063bf3fb9ca7dc585e18250ba7a75f40a245f/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "patch": "@@ -398,13 +398,13 @@ pub mod __alloc_error_handler {\n \n     // if there is no `#[alloc_error_handler]`\n     #[rustc_std_internal_symbol]\n-    pub unsafe extern \"C-unwind\" fn __rdl_oom(size: usize, _align: usize) -> ! {\n+    pub unsafe fn __rdl_oom(size: usize, _align: usize) -> ! {\n         panic!(\"memory allocation of {size} bytes failed\")\n     }\n \n     // if there is an `#[alloc_error_handler]`\n     #[rustc_std_internal_symbol]\n-    pub unsafe extern \"C-unwind\" fn __rg_oom(size: usize, align: usize) -> ! {\n+    pub unsafe fn __rg_oom(size: usize, align: usize) -> ! {\n         let layout = unsafe { Layout::from_size_align_unchecked(size, align) };\n         extern \"Rust\" {\n             #[lang = \"oom\"]"}, {"sha": "0a1aa7bb3c833939e8477d172956bd7724beeb6b", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f063bf3fb9ca7dc585e18250ba7a75f40a245f/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f063bf3fb9ca7dc585e18250ba7a75f40a245f/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "patch": "@@ -30,7 +30,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Sen\n \n // \"Leak\" the payload and shim to the relevant abort on the platform in question.\n #[rustc_std_internal_symbol]\n-pub unsafe extern \"C-unwind\" fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n+pub unsafe fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n     // Android has the ability to attach a message as part of the abort.\n     #[cfg(target_os = \"android\")]\n     android::android_set_abort_message(_payload);"}, {"sha": "4ae5f8ae4468d80e42e40f02ad55efcc4b39d3c2", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f063bf3fb9ca7dc585e18250ba7a75f40a245f/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f063bf3fb9ca7dc585e18250ba7a75f40a245f/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "patch": "@@ -104,7 +104,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any\n // Entry point for raising an exception, just delegates to the platform-specific\n // implementation.\n #[rustc_std_internal_symbol]\n-pub unsafe extern \"C-unwind\" fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32 {\n+pub unsafe fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32 {\n     let payload = Box::from_raw((*payload).take_box());\n \n     imp::panic(payload)"}, {"sha": "9b045980d4543dfc33ebd3265aaace13afd55002", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f063bf3fb9ca7dc585e18250ba7a75f40a245f/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f063bf3fb9ca7dc585e18250ba7a75f40a245f/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "patch": "@@ -47,7 +47,7 @@ extern \"C\" {\n }\n \n #[allow(improper_ctypes)]\n-extern \"C-unwind\" {\n+extern \"Rust\" {\n     /// `payload` is passed through another layer of raw pointers as `&mut dyn Trait` is not\n     /// FFI-safe. `BoxMeUp` lazily performs allocation only when needed (this avoids allocations\n     /// when using the \"abort\" panic runtime)."}]}