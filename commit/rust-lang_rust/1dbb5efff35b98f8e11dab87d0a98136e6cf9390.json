{"sha": "1dbb5efff35b98f8e11dab87d0a98136e6cf9390", "node_id": "C_kwDOAAsO6NoAKDFkYmI1ZWZmZjM1Yjk4ZjhlMTFkYWI4N2QwYTk4MTM2ZTZjZjkzOTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-01T04:54:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-01T04:54:38Z"}, "message": "Rollup merge of #107442 - lukas-code:slice-panics, r=cuviper\n\nimprove panic message for slice windows and chunks\n\nbefore:\n```text\nthread 'main' panicked at 'size is zero', /rustc/1e225413a21fa69570bd3fefea9eb05e33f8b917/library/core/src/slice/mod.rs:809:44\n```\n```text\nthread 'main' panicked at 'assertion failed: `(left != right)`\n  left: `0`,\n right: `0`: chunks cannot have a size of zero', /rustc/1e225413a21fa69570bd3fefea9eb05e33f8b917/library/core/src/slice/mod.rs:843:9\n```\n\nafter:\n```text\nthread 'main' panicked at 'chunk size must be non-zero', src/main.rs:4:22\n```\n\nfixes https://github.com/rust-lang/rust/issues/107437", "tree": {"sha": "14b5183f7a04558ee9e54ecdf703dd13f4069f91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b5183f7a04558ee9e54ecdf703dd13f4069f91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dbb5efff35b98f8e11dab87d0a98136e6cf9390", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj2fCOCRBK7hj4Ov3rIwAAO8wIADU0EfcYbw5UNAVOjU1oZZ7m\n63Woy4s+OidzcgCiaLGMlI86Rt1vJlRL8yKF8D+5Y5v7ZP2M/n3bU2kiDli9oFwZ\nku5zyBdDQ4PkOEz0uOVtXCz8qv66/XCg1HRWog5/ZBCUnvzOA4ynlT8KXZNGxpAG\nUzoXfbEV4zIREfvIC844OGTS8VOi4EeGh7MQBMPQ49UIyGZmpee1LlJgNnORdsM3\nceIQqBHoXIuAEqMMXgJ3067Lf8ySmoIt2xHjjpQXO70g0TBl7GLGuNf2Pd3aT/oc\n80SoHouw4VDwbvxJWwImH3oBlgk7qTgGLPRYRDCtGisKslvtJdi3aw/JaQ9N0OA=\n=bQsJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 14b5183f7a04558ee9e54ecdf703dd13f4069f91\nparent 0d2ab6774243451c8743bad2c9dbdf2e61d10f89\nparent 2fbe9274aae88709cb7aefada157c47e4232e2eb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675227278 +0100\ncommitter GitHub <noreply@github.com> 1675227278 +0100\n\nRollup merge of #107442 - lukas-code:slice-panics, r=cuviper\n\nimprove panic message for slice windows and chunks\n\nbefore:\n```text\nthread 'main' panicked at 'size is zero', /rustc/1e225413a21fa69570bd3fefea9eb05e33f8b917/library/core/src/slice/mod.rs:809:44\n```\n```text\nthread 'main' panicked at 'assertion failed: `(left != right)`\n  left: `0`,\n right: `0`: chunks cannot have a size of zero', /rustc/1e225413a21fa69570bd3fefea9eb05e33f8b917/library/core/src/slice/mod.rs:843:9\n```\n\nafter:\n```text\nthread 'main' panicked at 'chunk size must be non-zero', src/main.rs:4:22\n```\n\nfixes https://github.com/rust-lang/rust/issues/107437\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbb5efff35b98f8e11dab87d0a98136e6cf9390", "html_url": "https://github.com/rust-lang/rust/commit/1dbb5efff35b98f8e11dab87d0a98136e6cf9390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dbb5efff35b98f8e11dab87d0a98136e6cf9390/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d2ab6774243451c8743bad2c9dbdf2e61d10f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2ab6774243451c8743bad2c9dbdf2e61d10f89", "html_url": "https://github.com/rust-lang/rust/commit/0d2ab6774243451c8743bad2c9dbdf2e61d10f89"}, {"sha": "2fbe9274aae88709cb7aefada157c47e4232e2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbe9274aae88709cb7aefada157c47e4232e2eb", "html_url": "https://github.com/rust-lang/rust/commit/2fbe9274aae88709cb7aefada157c47e4232e2eb"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "6ea16bf643071120f523a21f7cf88d3710ceb639", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1dbb5efff35b98f8e11dab87d0a98136e6cf9390/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbb5efff35b98f8e11dab87d0a98136e6cf9390/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=1dbb5efff35b98f8e11dab87d0a98136e6cf9390", "patch": "@@ -805,8 +805,9 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn windows(&self, size: usize) -> Windows<'_, T> {\n-        let size = NonZeroUsize::new(size).expect(\"size is zero\");\n+        let size = NonZeroUsize::new(size).expect(\"window size must be non-zero\");\n         Windows::new(self, size)\n     }\n \n@@ -839,8 +840,9 @@ impl<T> [T] {\n     /// [`rchunks`]: slice::rchunks\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         Chunks::new(self, chunk_size)\n     }\n \n@@ -877,8 +879,9 @@ impl<T> [T] {\n     /// [`rchunks_mut`]: slice::rchunks_mut\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksMut::new(self, chunk_size)\n     }\n \n@@ -914,8 +917,9 @@ impl<T> [T] {\n     /// [`rchunks_exact`]: slice::rchunks_exact\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksExact::new(self, chunk_size)\n     }\n \n@@ -956,8 +960,9 @@ impl<T> [T] {\n     /// [`rchunks_exact_mut`]: slice::rchunks_exact_mut\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n@@ -1037,9 +1042,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1068,9 +1074,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1108,8 +1115,9 @@ impl<T> [T] {\n     /// [`chunks_exact`]: slice::chunks_exact\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_chunks<const N: usize>(&self) -> ArrayChunks<'_, T, N> {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         ArrayChunks::new(self)\n     }\n \n@@ -1186,9 +1194,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1223,9 +1232,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at_mut(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1265,8 +1275,9 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_chunks_mut<const N: usize>(&mut self) -> ArrayChunksMut<'_, T, N> {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         ArrayChunksMut::new(self)\n     }\n \n@@ -1297,8 +1308,9 @@ impl<T> [T] {\n     /// [`windows`]: slice::windows\n     #[unstable(feature = \"array_windows\", issue = \"75027\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_windows<const N: usize>(&self) -> ArrayWindows<'_, T, N> {\n-        assert_ne!(N, 0, \"windows cannot have a size of zero\");\n+        assert!(N != 0, \"window size must be non-zero\");\n         ArrayWindows::new(self)\n     }\n \n@@ -1331,8 +1343,9 @@ impl<T> [T] {\n     /// [`chunks`]: slice::chunks\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks(&self, chunk_size: usize) -> RChunks<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunks::new(self, chunk_size)\n     }\n \n@@ -1369,8 +1382,9 @@ impl<T> [T] {\n     /// [`chunks_mut`]: slice::chunks_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksMut::new(self, chunk_size)\n     }\n \n@@ -1408,8 +1422,9 @@ impl<T> [T] {\n     /// [`chunks_exact`]: slice::chunks_exact\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksExact::new(self, chunk_size)\n     }\n \n@@ -1451,8 +1466,9 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksExactMut::new(self, chunk_size)\n     }\n "}]}