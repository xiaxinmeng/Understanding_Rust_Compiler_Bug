{"sha": "e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZmRjN2RlZTUyMDMzZjEwOTcwMTlkM2FhZmU4MzhkYjlhYjVlM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-20T07:36:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-20T07:36:11Z"}, "message": "auto merge of #9320 : chris-morgan/rust/unreachable-macro-part-two-of-two-containing-the-destruction-of-the-unreachable-function, r=alexcrichton\n\nThis is the second of two parts of #8991, now possible as a new snapshot\r\nhas been made. (The first part implemented the unreachable!() macro; it\r\nwas #8992, 6b7b8f2682.)\r\n\r\n``std::util::unreachable()`` is removed summarily; any code which used\r\nit should now use the ``unreachable!()`` macro.\r\n\r\nCloses #9312.\r\n\r\nCloses #8991.", "tree": {"sha": "e3965282a18b6ed03a811f118bc6be4262082fef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3965282a18b6ed03a811f118bc6be4262082fef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "html_url": "https://github.com/rust-lang/rust/commit/e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7c769d8c2efb05dfa5850ae4aec0d6509d713dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c769d8c2efb05dfa5850ae4aec0d6509d713dc", "html_url": "https://github.com/rust-lang/rust/commit/c7c769d8c2efb05dfa5850ae4aec0d6509d713dc"}, {"sha": "e2807a4565575c6a08a2a65c76ee37bf3f48c841", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2807a4565575c6a08a2a65c76ee37bf3f48c841", "html_url": "https://github.com/rust-lang/rust/commit/e2807a4565575c6a08a2a65c76ee37bf3f48c841"}], "stats": {"total": 91, "additions": 28, "deletions": 63}, "files": [{"sha": "72368aeff230ff3d02b59ccc7ce0145f36401d7a", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -23,7 +23,7 @@\n  * `glob`/`fnmatch` functions.\n  */\n \n-use std::{os, path, util};\n+use std::{os, path};\n \n use sort;\n \n@@ -356,7 +356,7 @@ impl Pattern {\n                             chars_eq(c, c2, options.case_sensitive)\n                         }\n                         AnySequence => {\n-                            util::unreachable()\n+                            unreachable!()\n                         }\n                     };\n                     if !matches {"}, {"sha": "8c1595e7920c401eba5864da6d9f6a8479e0d226", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -261,7 +261,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n                                 flags.width = (cur as uint - '0' as uint);\n                                 fstate = FormatStateWidth;\n                             }\n-                            _ => util::unreachable()\n+                            _ => unreachable!()\n                         }\n                         state = FormatPattern(flags, fstate);\n                     }\n@@ -487,7 +487,7 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<~[u8],~str> {\n                         FormatDigit => 10,\n                         FormatOctal => 8,\n                         FormatHex|FormatHEX => 16,\n-                        FormatString => util::unreachable()\n+                        FormatString => unreachable!()\n                     };\n                     let mut s = ~[];\n                     match op {\n@@ -535,7 +535,7 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<~[u8],~str> {\n                                 s.push_all_move(s_);\n                             }\n                         }\n-                        FormatString => util::unreachable()\n+                        FormatString => unreachable!()\n                     }\n                     s\n                 }"}, {"sha": "fa111a0161577cb604413de3ae5c1bde200b496b", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -14,7 +14,7 @@ use metadata::cstore;\n use metadata::filesearch;\n \n use std::hashmap::HashSet;\n-use std::{os, util, vec};\n+use std::{os, vec};\n \n fn not_win32(os: session::Os) -> bool {\n   os != session::OsWin32\n@@ -116,7 +116,7 @@ pub fn get_rpath_relative_to_output(os: session::Os,\n         session::OsAndroid | session::OsLinux | session::OsFreebsd\n                           => \"$ORIGIN\",\n         session::OsMacos => \"@executable_path\",\n-        session::OsWin32 => util::unreachable()\n+        session::OsWin32 => unreachable!()\n     };\n \n     Path(prefix).push_rel(&os::make_absolute(output).get_relative_to(&os::make_absolute(lib)))"}, {"sha": "2ebb6e6926ef9f75ba99bf19796d65e27601712f", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -18,7 +18,6 @@ use syntax::codemap::Span;\n use syntax::parse::token::special_idents;\n use syntax::visit;\n use syntax::visit::Visitor;\n-use std::util;\n \n struct EntryContext {\n     session: Session,\n@@ -94,7 +93,7 @@ fn find_item(item: @item, ctxt: &mut EntryContext) {\n                             ctxt.non_main_fns.push((item.id, item.span));\n                         }\n                     }\n-                    _ => util::unreachable()\n+                    _ => unreachable!()\n                 }\n             }\n "}, {"sha": "c9a113aeb9633f03c708d173be0113fffbf747b6", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -356,7 +356,7 @@ fn variant_opt(bcx: @mut Block, pat_id: ast::NodeId)\n                                adt::represent_node(bcx, pat_id))\n                 }\n             }\n-            ::std::util::unreachable();\n+            unreachable!();\n         }\n         ast::DefFn(*) |\n         ast::DefStruct(_) => {"}, {"sha": "6a2a0ef502c886d7155d109b602f8fedaf1330a4", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -20,8 +20,6 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use std::util;\n-\n pub fn mk_pass() -> Pass {\n     Pass {\n         name: ~\"prune_private\",\n@@ -148,7 +146,7 @@ fn is_visible(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n                     }\n                 }\n             }\n-            _ => util::unreachable()\n+            _ => unreachable!()\n         }\n     }\n }"}, {"sha": "800eca4291f0e0fca432f58dfae3f32dc408c5cb", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -27,7 +27,7 @@ use option::{None, Option, Some};\n use rand::RngUtil;\n use rand;\n use uint;\n-use util::{replace, unreachable};\n+use util::replace;\n use vec::{ImmutableVector, MutableVector, OwnedVector};\n use vec;\n \n@@ -187,7 +187,7 @@ impl<K:Hash + Eq,V> HashMap<K, V> {\n     fn mut_value_for_bucket<'a>(&'a mut self, idx: uint) -> &'a mut V {\n         match self.buckets[idx] {\n             Some(ref mut bkt) => &mut bkt.value,\n-            None => unreachable()\n+            None => unreachable!()\n         }\n     }\n "}, {"sha": "71664569c878cb7aab9d55aa1283fa28f746904c", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -56,7 +56,6 @@ use str;\n use sys;\n use u32;\n use uint;\n-use util;\n use vec;\n use libc::size_t;\n \n@@ -586,7 +585,7 @@ impl<R: Rng> RngUtil for R {\n                 return Some(item.item.clone());\n             }\n         }\n-        util::unreachable();\n+        unreachable!();\n     }\n \n     /**"}, {"sha": "99634b532b082c6962d27f05cc09cf3dfa237ddd", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -21,7 +21,6 @@ use rt::io::{Reader, Writer, Decorator};\n use rt::io::{read_error, standard_error, EndOfFile, DEFAULT_BUF_SIZE};\n use option::{Option, Some, None};\n use unstable::finally::Finally;\n-use util;\n use cast;\n use io::{u64_to_le_bytes, u64_to_be_bytes};\n \n@@ -293,7 +292,7 @@ impl<T: Reader> ReaderUtil for T {\n                 self.read_byte()\n             }\n             Some(1) => Some(buf[0]),\n-            Some(_) => util::unreachable(),\n+            Some(_) => unreachable!(),\n             None => None\n         }\n     }"}, {"sha": "4acc1f3abfff21f182b990f16de9959eae909e73", "filename": "src/libstd/util.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -104,34 +104,6 @@ impl Void {\n }\n \n \n-/**\n-A utility function for indicating unreachable code. It will fail if\n-executed. This is occasionally useful to put after loops that never\n-terminate normally, but instead directly return from a function.\n-\n-# Example\n-\n-~~~ {.rust}\n-fn choose_weighted_item(v: &[Item]) -> Item {\n-    assert!(!v.is_empty());\n-    let mut so_far = 0u;\n-    for v.each |item| {\n-        so_far += item.weight;\n-        if so_far > 100 {\n-            return item;\n-        }\n-    }\n-    // The above loop always returns, so we must hint to the\n-    // type checker that it isn't possible to get down here\n-    util::unreachable();\n-}\n-~~~\n-\n-*/\n-pub fn unreachable() -> ! {\n-    fail!(\"internal error: entered unreachable code\");\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "ef37f9b1bb2077f035e4354fadaa3df019d53e0a", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -19,14 +19,14 @@ pub fn main() {\n                     //~^^ ERROR cannot move out of dereference of & pointer\n                 }\n                 _ => {\n-                    ::std::util::unreachable();\n+                    unreachable!();\n                 }\n             }\n             let z = tail[0].clone();\n             info!(fmt!(\"%?\", z));\n         }\n         _ => {\n-            ::std::util::unreachable();\n+            unreachable!();\n         }\n     }\n }"}, {"sha": "7246b6688fdb259d2a1c327276a6405370f3729d", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let mut a = [1, 2, 3, 4];\n     let t = match a {\n         [1, 2, ..tail] => tail,\n-        _ => std::util::unreachable()\n+        _ => unreachable!()\n     };\n     a[0] = 0; //~ ERROR cannot assign to `a[]` because it is borrowed\n     t[0];"}, {"sha": "29eaf98dca89bab54d8868ae50fd5e867f6d36ca", "filename": "src/test/debug-info/lexical-scope-in-if.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -78,8 +78,6 @@\n // check:$16 = -1\n // debugger:continue\n \n-use std::util;\n-\n fn main() {\n \n     let x = 999;\n@@ -102,14 +100,14 @@ fn main() {\n         zzz();\n         sentinel();\n     } else {\n-        util::unreachable();\n+        unreachable!();\n     }\n \n     zzz();\n     sentinel();\n \n     if x > 1000 {\n-        util::unreachable();\n+        unreachable!();\n     } else {\n         zzz();\n         sentinel();"}, {"sha": "3b45182fc3aa062e71f9b47bb401d475a3c630cf", "filename": "src/test/run-pass/vec-matching-fixed.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -1,12 +1,12 @@\n fn a() {\n     let x = [1, 2, 3];\n     match x {\n-        [1, 2, 4] => ::std::util::unreachable(),\n-        [0, 2, 3, .._] => ::std::util::unreachable(),\n-        [0, .._, 3] => ::std::util::unreachable(),\n-        [0, .._] => ::std::util::unreachable(),\n+        [1, 2, 4] => unreachable!(),\n+        [0, 2, 3, .._] => unreachable!(),\n+        [0, .._, 3] => unreachable!(),\n+        [0, .._] => unreachable!(),\n         [1, 2, 3] => (),\n-        [_, _, _] => ::std::util::unreachable(),\n+        [_, _, _] => unreachable!(),\n     }\n     match x {\n         [.._] => (),"}, {"sha": "ad2440f1e4fa43e453c2f767ae432b45cf7c0f88", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -3,7 +3,7 @@ pub fn main() {\n     if !x.is_empty() {\n         let el = match x {\n             [1, ..ref tail] => &tail[0],\n-            _ => ::std::util::unreachable()\n+            _ => unreachable!()\n         };\n         printfln!(\"%d\", *el);\n     }"}, {"sha": "dc2b3d23b9ead9f86c7ce7a84382662becc6d131", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fdc7dee52033f1097019d3aafe838db9ab5e3e/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=e5fdc7dee52033f1097019d3aafe838db9ab5e3e", "patch": "@@ -17,19 +17,19 @@ pub fn main() {\n \n             match tail {\n                 [Foo { _ }, _, Foo { _ }, .. _tail] => {\n-                    ::std::util::unreachable();\n+                    unreachable!();\n                 }\n                 [Foo { string: ref a }, Foo { string: ref b }] => {\n                     assert_eq!(\"bar\", a.slice(0, a.len()));\n                     assert_eq!(\"baz\", b.slice(0, b.len()));\n                 }\n                 _ => {\n-                    ::std::util::unreachable();\n+                    unreachable!();\n                 }\n             }\n         }\n         _ => {\n-            ::std::util::unreachable();\n+            unreachable!();\n         }\n     }\n }"}]}