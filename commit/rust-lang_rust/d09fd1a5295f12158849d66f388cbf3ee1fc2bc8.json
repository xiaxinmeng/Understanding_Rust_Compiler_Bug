{"sha": "d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOWZkMWE1Mjk1ZjEyMTU4ODQ5ZDY2ZjM4OGNiZjNlZTFmYzJiYzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-29T20:07:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-02-05T18:19:55Z"}, "message": "Instrument the AST map so that it registers reads when data is\nacccessed.", "tree": {"sha": "3aca2d4596fce02ed661215b7152f75b2c8eaccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aca2d4596fce02ed661215b7152f75b2c8eaccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "html_url": "https://github.com/rust-lang/rust/commit/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247", "url": "https://api.github.com/repos/rust-lang/rust/commits/37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247", "html_url": "https://github.com/rust-lang/rust/commit/37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247"}], "stats": {"total": 136, "additions": 118, "deletions": 18}, "files": [{"sha": "d37a4acbcfb3a81201cca9f1bb2d9f5c3b40f667", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "patch": "@@ -116,6 +116,13 @@ impl DepGraph {\n         }\n     }\n \n+    /// True if we are actually building a dep-graph. If this returns false,\n+    /// then the other methods on this `DepGraph` will have no net effect.\n+    #[inline]\n+    pub fn enabled(&self) -> bool {\n+        self.data.enabled()\n+    }\n+\n     pub fn query(&self) -> DepGraphQuery {\n         self.data.query()\n     }"}, {"sha": "8ffc343c8f4bbb204ce9cee05fe4d32ec46ce365", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "patch": "@@ -79,6 +79,7 @@ impl<'ast> NodeCollector<'ast> {\n \n     fn create_def(&mut self, node_id: NodeId, data: DefPathData) -> DefIndex {\n         let parent_def = self.parent_def();\n+        debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n         self.definitions.create_def_with_parent(parent_def, node_id, data)\n     }\n \n@@ -115,10 +116,13 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n     fn visit_nested_item(&mut self, item: ItemId) {\n+        debug!(\"visit_nested_item: {:?}\", item);\n         self.visit_item(self.krate.item(item.id))\n     }\n \n     fn visit_item(&mut self, i: &'ast Item) {\n+        debug!(\"visit_item: {:?}\", i);\n+\n         // Pick the def data. This need not be unique, but the more\n         // information we encapsulate into\n         let def_data = match i.node {"}, {"sha": "8f3760c175f4b6117896c1b8c6043fffae0b9c2a", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 89, "deletions": 11, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "patch": "@@ -14,6 +14,8 @@ use self::MapEntry::*;\n use self::collector::NodeCollector;\n pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData, DisambiguatedDefPathData};\n \n+use dep_graph::{DepGraph, DepNode};\n+\n use middle::cstore::InlinedItem;\n use middle::cstore::InlinedItem as II;\n use middle::def_id::DefId;\n@@ -228,19 +230,22 @@ impl<'ast> MapEntry<'ast> {\n \n /// Stores a crate and any number of inlined items from other crates.\n pub struct Forest {\n-    pub krate: Crate,\n+    krate: Crate,\n+    pub dep_graph: DepGraph,\n     inlined_items: TypedArena<InlinedParent>\n }\n \n impl Forest {\n-    pub fn new(krate: Crate) -> Forest {\n+    pub fn new(krate: Crate, dep_graph: DepGraph) -> Forest {\n         Forest {\n             krate: krate,\n+            dep_graph: dep_graph,\n             inlined_items: TypedArena::new()\n         }\n     }\n \n     pub fn krate<'ast>(&'ast self) -> &'ast Crate {\n+        self.dep_graph.read(DepNode::Krate);\n         &self.krate\n     }\n }\n@@ -252,6 +257,10 @@ pub struct Map<'ast> {\n     /// The backing storage for all the AST nodes.\n     pub forest: &'ast Forest,\n \n+    /// Same as the dep_graph in forest, just available with one fewer\n+    /// deref. This is a gratuitious micro-optimization.\n+    pub dep_graph: DepGraph,\n+\n     /// NodeIds are sequential integers from 0, so we can be\n     /// super-compact by storing them in a vector. Not everything with\n     /// a NodeId is in the map, but empirically the occupancy is about\n@@ -267,6 +276,60 @@ pub struct Map<'ast> {\n }\n \n impl<'ast> Map<'ast> {\n+    /// Registers a read in the dependency graph of the AST node with\n+    /// the given `id`. This needs to be called each time a public\n+    /// function returns the HIR for a node -- in other words, when it\n+    /// \"reveals\" the content of a node to the caller (who might not\n+    /// otherwise have had access to those contents, and hence needs a\n+    /// read recorded). If the function just returns a DefId or\n+    /// NodeId, no actual content was returned, so no read is needed.\n+    fn read(&self, id: NodeId) {\n+        self.dep_graph.read(self.dep_node(id));\n+    }\n+\n+    fn dep_node(&self, id0: NodeId) -> DepNode {\n+        let map = self.map.borrow();\n+        let mut id = id0;\n+        loop {\n+            match map[id as usize] {\n+                EntryItem(_, item) => {\n+                    let def_id = self.local_def_id(item.id);\n+                    // NB                          ^~~~~~~\n+                    //\n+                    // You would expect that `item.id == id`, but this\n+                    // is not always the case. In particular, for\n+                    // ViewPath like `use self::{mem, foo}`, we record\n+                    // map the ids for `mem` and `foo` to the\n+                    // enclosing view path item. This seems mega super\n+                    // ultra wrong, but then who am I to\n+                    // judge. -nmatsakis\n+                    return DepNode::Hir(def_id);\n+                }\n+\n+                EntryForeignItem(p, _) |\n+                EntryTraitItem(p, _) |\n+                EntryImplItem(p, _) |\n+                EntryVariant(p, _) |\n+                EntryExpr(p, _) |\n+                EntryStmt(p, _) |\n+                EntryLocal(p, _) |\n+                EntryPat(p, _) |\n+                EntryBlock(p, _) |\n+                EntryStructCtor(p, _) |\n+                EntryLifetime(p, _) |\n+                EntryTyParam(p, _) =>\n+                    id = p,\n+\n+                RootCrate |\n+                RootInlinedParent(_) => // FIXME(#2369) clarify story about cross-crate dep tracking\n+                    return DepNode::Krate,\n+\n+                NotPresent =>\n+                    panic!(\"Walking parents from `{}` led to `NotPresent` at `{}`\", id0, id),\n+            }\n+        }\n+    }\n+\n     pub fn num_local_def_ids(&self) -> usize {\n         self.definitions.borrow().len()\n     }\n@@ -309,26 +372,30 @@ impl<'ast> Map<'ast> {\n     }\n \n     pub fn krate(&self) -> &'ast Crate {\n-        &self.forest.krate\n+        self.forest.krate()\n     }\n \n     /// Retrieve the Node corresponding to `id`, panicking if it cannot\n     /// be found.\n     pub fn get(&self, id: NodeId) -> Node<'ast> {\n         match self.find(id) {\n-            Some(node) => node,\n+            Some(node) => node, // read recorded by `find`\n             None => panic!(\"couldn't find node id {} in the AST map\", id)\n         }\n     }\n \n     pub fn get_if_local(&self, id: DefId) -> Option<Node<'ast>> {\n-        self.as_local_node_id(id).map(|id| self.get(id))\n+        self.as_local_node_id(id).map(|id| self.get(id)) // read recorded by `get`\n     }\n \n     /// Retrieve the Node corresponding to `id`, returning None if\n     /// cannot be found.\n     pub fn find(&self, id: NodeId) -> Option<Node<'ast>> {\n-        self.find_entry(id).and_then(|x| x.to_node())\n+        let result = self.find_entry(id).and_then(|x| x.to_node());\n+        if result.is_some() {\n+            self.read(id);\n+        }\n+        result\n     }\n \n     /// Similar to get_parent, returns the parent node id or id if there is no\n@@ -459,22 +526,25 @@ impl<'ast> Map<'ast> {\n             _ => None\n         };\n         match abi {\n-            Some(abi) => abi,\n+            Some(abi) => {\n+                self.read(id); // reveals some of the content of a node\n+                abi\n+            }\n             None => panic!(\"expected foreign mod or inlined parent, found {}\",\n                           self.node_to_string(parent))\n         }\n     }\n \n     pub fn get_foreign_vis(&self, id: NodeId) -> Visibility {\n-        let vis = self.expect_foreign_item(id).vis;\n-        match self.find(self.get_parent(id)) {\n+        let vis = self.expect_foreign_item(id).vis; // read recorded by `expect_foreign_item`\n+        match self.find(self.get_parent(id)) { // read recorded by `find`\n             Some(NodeItem(i)) => vis.inherit_from(i.vis),\n             _ => vis\n         }\n     }\n \n     pub fn expect_item(&self, id: NodeId) -> &'ast Item {\n-        match self.find(id) {\n+        match self.find(id) { // read recorded by `id`\n             Some(NodeItem(item)) => item,\n             _ => panic!(\"expected item, found {}\", self.node_to_string(id))\n         }\n@@ -521,7 +591,7 @@ impl<'ast> Map<'ast> {\n     }\n \n     pub fn expect_expr(&self, id: NodeId) -> &'ast Expr {\n-        match self.find(id) {\n+        match self.find(id) { // read recorded by find\n             Some(NodeExpr(expr)) => expr,\n             _ => panic!(\"expected expr, found {}\", self.node_to_string(id))\n         }\n@@ -571,6 +641,11 @@ impl<'ast> Map<'ast> {\n     fn with_path_next<T, F>(&self, id: NodeId, next: LinkedPath, f: F) -> T where\n         F: FnOnce(PathElems) -> T,\n     {\n+        // This function reveals the name of the item and hence is a\n+        // kind of read. This is inefficient, since it walks ancestors\n+        // and we are walking them anyhow, but whatever.\n+        self.read(id);\n+\n         let parent = self.get_parent(id);\n         let parent = match self.find_entry(id) {\n             Some(EntryForeignItem(..)) => {\n@@ -602,6 +677,7 @@ impl<'ast> Map<'ast> {\n     /// Given a node ID, get a list of attributes associated with the AST\n     /// corresponding to the Node ID\n     pub fn attrs(&self, id: NodeId) -> &'ast [ast::Attribute] {\n+        self.read(id); // reveals attributes on the node\n         let attrs = match self.find(id) {\n             Some(NodeItem(i)) => Some(&i.attrs[..]),\n             Some(NodeForeignItem(fi)) => Some(&fi.attrs[..]),\n@@ -655,6 +731,7 @@ impl<'ast> Map<'ast> {\n     }\n \n     pub fn span(&self, id: NodeId) -> Span {\n+        self.read(id); // reveals span from node\n         self.opt_span(id)\n             .unwrap_or_else(|| panic!(\"AstMap.span: could not find span for id {:?}\", id))\n     }\n@@ -833,6 +910,7 @@ pub fn map_crate<'ast>(forest: &'ast mut Forest) -> Map<'ast> {\n \n     Map {\n         forest: forest,\n+        dep_graph: forest.dep_graph.clone(),\n         map: RefCell::new(map),\n         definitions: RefCell::new(definitions),\n     }"}, {"sha": "071cc0cbe3d637ecdedbb0044211972b77d2f2b9", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "patch": "@@ -509,7 +509,7 @@ impl<'tcx> ctxt<'tcx> {\n     {\n         let interner = RefCell::new(FnvHashMap());\n         let common_types = CommonTypes::new(&arenas.type_, &interner);\n-        let dep_graph = DepGraph::new(s.opts.incremental_compilation);\n+        let dep_graph = map.dep_graph.clone();\n         let fulfilled_predicates = traits::GlobalFulfilledPredicates::new(dep_graph.clone());\n         tls::enter(ctxt {\n             arenas: arenas,"}, {"sha": "68949863bfc0e6436accbfbfdcc77b3c03496b80", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "patch": "@@ -137,8 +137,13 @@ pub struct Options {\n     pub no_trans: bool,\n     pub error_format: ErrorOutputType,\n     pub treat_err_as_bug: bool,\n-    pub incremental_compilation: bool,\n+\n+    /// if true, build up the dep-graph\n+    pub build_dep_graph: bool,\n+\n+    /// if true, -Z dump-dep-graph was passed to dump out the dep-graph\n     pub dump_dep_graph: bool,\n+\n     pub no_analysis: bool,\n     pub debugging_opts: DebuggingOptions,\n     pub prints: Vec<PrintRequest>,\n@@ -246,7 +251,7 @@ pub fn basic_options() -> Options {\n         parse_only: false,\n         no_trans: false,\n         treat_err_as_bug: false,\n-        incremental_compilation: false,\n+        build_dep_graph: false,\n         dump_dep_graph: false,\n         no_analysis: false,\n         debugging_opts: basic_debugging_options(),\n@@ -1145,7 +1150,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         parse_only: parse_only,\n         no_trans: no_trans,\n         treat_err_as_bug: treat_err_as_bug,\n-        incremental_compilation: incremental_compilation || dump_dep_graph,\n+        build_dep_graph: incremental_compilation || dump_dep_graph,\n         dump_dep_graph: dump_dep_graph,\n         no_analysis: no_analysis,\n         debugging_opts: debugging_opts,"}, {"sha": "f0bd4dd83cb0ce227ec67ddcec092d2e30563f47", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "patch": "@@ -11,6 +11,7 @@ pub use self::MaybeTyped::*;\n \n use rustc_lint;\n use rustc_driver::{driver, target_features, abort_on_err};\n+use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::middle::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n@@ -143,7 +144,7 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n     let krate = driver::assign_node_ids(&sess, krate);\n     // Lower ast -> hir.\n     let lcx = LoweringContext::new(&sess, Some(&krate));\n-    let mut hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate));\n+    let mut hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate), DepGraph::new(false));\n     let arenas = ty::CtxtArenas::new();\n     let hir_map = driver::make_map(&sess, &mut hir_forest);\n "}, {"sha": "490e54f4e3df96552fbdfbeae2b847a9fe9accca", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "patch": "@@ -25,6 +25,7 @@ use std::sync::{Arc, Mutex};\n \n use testing;\n use rustc_lint;\n+use rustc::dep_graph::DepGraph;\n use rustc::front::map as hir_map;\n use rustc::session::{self, config};\n use rustc::session::config::{get_unstable_features_setting, OutputType};\n@@ -99,7 +100,9 @@ pub fn run(input: &str,\n \n     let opts = scrape_test_config(&krate);\n \n-    let mut forest = hir_map::Forest::new(krate);\n+    let dep_graph = DepGraph::new(false);\n+    let _ignore = dep_graph.in_ignore();\n+    let mut forest = hir_map::Forest::new(krate, dep_graph.clone());\n     let map = hir_map::map_crate(&mut forest);\n \n     let ctx = core::DocContext {"}, {"sha": "13cbdfe24d6f33f3a04145b80e885f10f1580ab3", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "patch": "@@ -26,6 +26,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::thread::Builder;\n \n+use rustc::dep_graph::DepGraph;\n use rustc::front::map as ast_map;\n use rustc::llvm;\n use rustc::middle::cstore::{CrateStore, LinkagePreference};\n@@ -236,7 +237,8 @@ fn compile_program(input: &str, sysroot: PathBuf)\n \n         let krate = driver::assign_node_ids(&sess, krate);\n         let lcx = LoweringContext::new(&sess, Some(&krate));\n-        let mut hir_forest = ast_map::Forest::new(lower_crate(&lcx, &krate));\n+        let dep_graph = DepGraph::new(sess.opts.build_dep_graph);\n+        let mut hir_forest = ast_map::Forest::new(lower_crate(&lcx, &krate), dep_graph);\n         let arenas = ty::CtxtArenas::new();\n         let ast_map = driver::make_map(&sess, &mut hir_forest);\n "}]}