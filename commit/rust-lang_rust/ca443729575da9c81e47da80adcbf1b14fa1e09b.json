{"sha": "ca443729575da9c81e47da80adcbf1b14fa1e09b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDQzNzI5NTc1ZGE5YzgxZTQ3ZGE4MGFkY2JmMWIxNGZhMWUwOWI=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-07-08T21:04:58Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-07-09T14:00:21Z"}, "message": "Handle multi diagnostics", "tree": {"sha": "1b89533c909349467693df3012eb12f048b7dd7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b89533c909349467693df3012eb12f048b7dd7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca443729575da9c81e47da80adcbf1b14fa1e09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca443729575da9c81e47da80adcbf1b14fa1e09b", "html_url": "https://github.com/rust-lang/rust/commit/ca443729575da9c81e47da80adcbf1b14fa1e09b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca443729575da9c81e47da80adcbf1b14fa1e09b/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f634bc2d9188375ef51944b16e0450c638afdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f634bc2d9188375ef51944b16e0450c638afdb", "html_url": "https://github.com/rust-lang/rust/commit/59f634bc2d9188375ef51944b16e0450c638afdb"}], "stats": {"total": 808, "additions": 624, "deletions": 184}, "files": [{"sha": "2b82b4dff2e5a0606e9ce7a85a1d7ea648988aaa", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 176, "deletions": 176, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/ca443729575da9c81e47da80adcbf1b14fa1e09b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca443729575da9c81e47da80adcbf1b14fa1e09b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=ca443729575da9c81e47da80adcbf1b14fa1e09b", "patch": "@@ -50,6 +50,7 @@ use rustc_span::sym;\n use rustc_span::{MultiSpan, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n+use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_index::vec::Idx;\n use rustc_target::abi::VariantIdx;\n@@ -81,6 +82,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n+/// Intermediate format to store the hir_id pointing to the use that resulted in the\n+/// corresponding place being captured and a String which contains the captured value's\n+/// name (i.e: a.b.c)\n+type CapturesInfo = (Option<hir::HirId>, String);\n+\n+/// Intermediate format to store information needed to generate migration lint. The tuple\n+/// contains the hir_id pointing to the use that resulted in the\n+/// corresponding place being captured, a String which contains the captured value's\n+/// name (i.e: a.b.c) and a String which contains the reason why migration is needed for that\n+/// capture\n+type MigrationNeededForCapture = (Option<hir::HirId>, String, String);\n+\n+/// Intermediate format to store the hir id of the root variable and a HashSet containing\n+/// information on why the root variable should be fully captured\n+type MigrationDiagnosticInfo = (hir::HirId, FxHashSet<MigrationNeededForCapture>);\n+\n struct InferBorrowKindVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n }\n@@ -513,45 +530,41 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .as_str(),\n                     );\n                     for (var_hir_id, diagnostics_info) in need_migrations.iter() {\n-                        let mut captured_names = format!(\"\");\n-                        // Label every Span which are responsible for the captured values\n-                        for (captured_hir_id, captured_name) in diagnostics_info.iter() {\n+                        // Labels all the usage of the captured variable and why they are responsible\n+                        // for migration being needed\n+                        for (captured_hir_id, captured_name, reasons) in diagnostics_info.iter() {\n                             if let Some(captured_hir_id) = captured_hir_id {\n                                 let cause_span = self.tcx.hir().span(*captured_hir_id);\n                                 diagnostics_builder.span_label(cause_span, format!(\"in Rust 2018, closure captures all of `{}`, but in Rust 2021, it only captures `{}`\",\n                                     self.tcx.hir().name(*var_hir_id),\n                                     captured_name,\n                                 ));\n-                                if captured_names == \"\" {\n-                                    captured_names = format!(\"`{}`\", captured_name);\n-                                } else {\n-                                    captured_names = format!(\"{}, `{}`\", captured_names, captured_name);\n-                                }\n                             }\n-                        }\n \n-                        // Add a label pointing to where a closure and it's captured variables affected by drop order are dropped\n-                        if reasons.contains(\"drop order\") {\n-                            let drop_location_span = drop_location_span(self.tcx, &closure_hir_id);\n+                            // Add a label pointing to where a captured variable affected by drop order\n+                            // is dropped\n+                            if reasons.contains(\"drop order\") {\n+                                let drop_location_span = drop_location_span(self.tcx, &closure_hir_id);\n \n-                            diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{}` would be dropped here, but in Rust 2021, only {} would be dropped here alongside the closure\",\n-                                self.tcx.hir().name(*var_hir_id),\n-                                captured_names,\n-                            ));\n-                        }\n+                                diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{}` would be dropped here, but in Rust 2021, only `{}` would be dropped here alongside the closure\",\n+                                    self.tcx.hir().name(*var_hir_id),\n+                                    captured_name,\n+                                ));\n+                            }\n+\n+                            // Add a label explaining why a closure no longer implements a trait\n+                            if reasons.contains(\"trait implementation\") {\n+                                let missing_trait = &reasons[..reasons.find(\"trait implementation\").unwrap() - 1];\n \n-                        // Add a label explaining why a closure no longer implements a trait\n-                        if reasons.contains(\"trait implementation\") {\n-                            let missing_trait = &reasons[..reasons.find(\"trait implementation\").unwrap() - 1];\n-\n-                            diagnostics_builder.span_label(closure_head_span, format!(\"in Rust 2018, this closure would implement {} as `{}` implements {}, but in Rust 2021, this closure would no longer implement {} as {} does not implement {}\",\n-                                missing_trait,\n-                                self.tcx.hir().name(*var_hir_id),\n-                                missing_trait,\n-                                missing_trait,\n-                                captured_names,\n-                                missing_trait,\n-                            ));\n+                                diagnostics_builder.span_label(closure_head_span, format!(\"in Rust 2018, this closure would implement {} as `{}` implements {}, but in Rust 2021, this closure would no longer implement {} as `{}` does not implement {}\",\n+                                    missing_trait,\n+                                    self.tcx.hir().name(*var_hir_id),\n+                                    missing_trait,\n+                                    missing_trait,\n+                                    captured_name,\n+                                    missing_trait,\n+                                ));\n+                            }\n                         }\n                     }\n                     diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n@@ -616,16 +629,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         reasons\n     }\n \n-    /// Returns a tuple that contains the hir_id pointing to the use that resulted in the\n-    /// corresponding place being captured and a String which contains the captured value's name\n-    /// (i.e: a.b.c) if migration is needed for trait for the provided var_hir_id, otherwise returns None\n-    fn need_2229_migrations_for_trait(\n+    /// Figures out the list of root variables (and their types) that aren't completely\n+    /// captured by the closure when `capture_disjoint_fields` is enabled and auto-traits\n+    /// differ between the root variable and the captured paths.\n+    ///\n+    /// Returns a tuple containing a HashMap of CapturesInfo that maps to a HashSet of trait names\n+    /// if migration is needed for traits for the provided var_hir_id, otherwise returns None\n+    fn compute_2229_migrations_for_trait(\n         &self,\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n         var_hir_id: hir::HirId,\n-        check_trait: Option<DefId>,\n         closure_clause: hir::CaptureBy,\n-    ) -> Option<(Option<hir::HirId>, String)> {\n+    ) -> Option<FxHashMap<CapturesInfo, FxHashSet<&str>>> {\n+        let auto_traits_def_id = vec![\n+            self.tcx.lang_items().clone_trait(),\n+            self.tcx.lang_items().sync_trait(),\n+            self.tcx.get_diagnostic_item(sym::send_trait),\n+            self.tcx.lang_items().unpin_trait(),\n+            self.tcx.get_diagnostic_item(sym::unwind_safe_trait),\n+            self.tcx.get_diagnostic_item(sym::ref_unwind_safe_trait),\n+        ];\n+        let auto_traits =\n+            vec![\"`Clone`\", \"`Sync`\", \"`Send`\", \"`Unpin`\", \"`UnwindSafe`\", \"`RefUnwindSafe`\"];\n+\n         let root_var_min_capture_list = if let Some(root_var_min_capture_list) =\n             min_captures.and_then(|m| m.get(&var_hir_id))\n         {\n@@ -650,19 +676,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n-        let obligation_should_hold = check_trait\n-            .map(|check_trait| {\n-                self.infcx\n-                    .type_implements_trait(\n-                        check_trait,\n-                        ty,\n-                        self.tcx.mk_substs_trait(ty, &[]),\n-                        self.param_env,\n-                    )\n-                    .must_apply_modulo_regions()\n-            })\n-            .unwrap_or(false);\n+        let mut obligations_should_hold = Vec::new();\n+        // Checks if a root variable implements any of the auto traits\n+        for check_trait in auto_traits_def_id.iter() {\n+            obligations_should_hold.push(\n+                check_trait\n+                    .map(|check_trait| {\n+                        self.infcx\n+                            .type_implements_trait(\n+                                check_trait,\n+                                ty,\n+                                self.tcx.mk_substs_trait(ty, &[]),\n+                                self.param_env,\n+                            )\n+                            .must_apply_modulo_regions()\n+                    })\n+                    .unwrap_or(false),\n+            );\n+        }\n \n+        let mut problematic_captures = FxHashMap::default();\n         // Check whether captured fields also implement the trait\n         for capture in root_var_min_capture_list.iter() {\n             let ty = apply_capture_kind_on_capture_ty(\n@@ -671,112 +704,46 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 capture.info.capture_kind,\n             );\n \n-            let obligation_holds_for_capture = check_trait\n-                .map(|check_trait| {\n-                    self.infcx\n-                        .type_implements_trait(\n-                            check_trait,\n-                            ty,\n-                            self.tcx.mk_substs_trait(ty, &[]),\n-                            self.param_env,\n-                        )\n-                        .must_apply_modulo_regions()\n-                })\n-                .unwrap_or(false);\n-\n-            if !obligation_holds_for_capture && obligation_should_hold {\n-                return Some((capture.info.path_expr_id, capture.to_string(self.tcx)));\n+            // Checks if a capture implements any of the auto traits\n+            let mut obligations_holds_for_capture = Vec::new();\n+            for check_trait in auto_traits_def_id.iter() {\n+                obligations_holds_for_capture.push(\n+                    check_trait\n+                        .map(|check_trait| {\n+                            self.infcx\n+                                .type_implements_trait(\n+                                    check_trait,\n+                                    ty,\n+                                    self.tcx.mk_substs_trait(ty, &[]),\n+                                    self.param_env,\n+                                )\n+                                .must_apply_modulo_regions()\n+                        })\n+                        .unwrap_or(false),\n+                );\n             }\n-        }\n-        None\n-    }\n-\n-    /// Figures out the list of root variables (and their types) that aren't completely\n-    /// captured by the closure when `capture_disjoint_fields` is enabled and auto-traits\n-    /// differ between the root variable and the captured paths.\n-    ///\n-    /// Returns a tuple containing a HashSet of traits that not implemented by the captured fields\n-    /// of a root variables that has the provided var_hir_id and a HashSet of tuples that contains\n-    /// the hir_id pointing to the use that resulted in the corresponding place being captured and\n-    /// a String which contains the captured value's name (i.e: a.b.c) if migration is needed for\n-    /// trait for the provided var_hir_id, otherwise returns None\n-    fn compute_2229_migrations_for_trait(\n-        &self,\n-        min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n-        var_hir_id: hir::HirId,\n-        closure_clause: hir::CaptureBy,\n-    ) -> Option<(FxHashSet<&str>, FxHashSet<(Option<hir::HirId>, String)>)> {\n-        let tcx = self.infcx.tcx;\n \n-        // Check whether catpured fields also implement the trait\n-        let mut auto_trait_reasons = FxHashSet::default();\n-        let mut diagnostics_info = FxHashSet::default();\n-\n-        if let Some(info) = self.need_2229_migrations_for_trait(\n-            min_captures,\n-            var_hir_id,\n-            tcx.lang_items().clone_trait(),\n-            closure_clause,\n-        ) {\n-            auto_trait_reasons.insert(\"`Clone`\");\n-            diagnostics_info.insert(info);\n-        }\n+            let mut capture_problems = FxHashSet::default();\n \n-        if let Some(info) = self.need_2229_migrations_for_trait(\n-            min_captures,\n-            var_hir_id,\n-            tcx.lang_items().sync_trait(),\n-            closure_clause,\n-        ) {\n-            auto_trait_reasons.insert(\"`Sync`\");\n-            diagnostics_info.insert(info);\n-        }\n-\n-        if let Some(info) = self.need_2229_migrations_for_trait(\n-            min_captures,\n-            var_hir_id,\n-            tcx.get_diagnostic_item(sym::send_trait),\n-            closure_clause,\n-        ) {\n-            auto_trait_reasons.insert(\"`Send`\");\n-            diagnostics_info.insert(info);\n-        }\n-\n-        if let Some(info) = self.need_2229_migrations_for_trait(\n-            min_captures,\n-            var_hir_id,\n-            tcx.lang_items().unpin_trait(),\n-            closure_clause,\n-        ) {\n-            auto_trait_reasons.insert(\"`Unpin`\");\n-            diagnostics_info.insert(info);\n-        }\n-\n-        if let Some(info) = self.need_2229_migrations_for_trait(\n-            min_captures,\n-            var_hir_id,\n-            tcx.get_diagnostic_item(sym::unwind_safe_trait),\n-            closure_clause,\n-        ) {\n-            auto_trait_reasons.insert(\"`UnwindSafe`\");\n-            diagnostics_info.insert(info);\n-        }\n+            // Checks if for any of the auto traits, one or more trait is implemented\n+            // by the root variable but not by the capture\n+            for (idx, _) in obligations_should_hold.iter().enumerate() {\n+                if !obligations_holds_for_capture[idx] && obligations_should_hold[idx] {\n+                    capture_problems.insert(auto_traits[idx]);\n+                }\n+            }\n \n-        if let Some(info) = self.need_2229_migrations_for_trait(\n-            min_captures,\n-            var_hir_id,\n-            tcx.get_diagnostic_item(sym::ref_unwind_safe_trait),\n-            closure_clause,\n-        ) {\n-            auto_trait_reasons.insert(\"`RefUnwindSafe`\");\n-            diagnostics_info.insert(info);\n+            if capture_problems.len() > 0 {\n+                problematic_captures.insert(\n+                    (capture.info.path_expr_id, capture.to_string(self.tcx)),\n+                    capture_problems,\n+                );\n+            }\n         }\n-\n-        if auto_trait_reasons.len() > 0 {\n-            return Some((auto_trait_reasons, diagnostics_info));\n+        if problematic_captures.len() > 0 {\n+            return Some(problematic_captures);\n         }\n-\n-        return None;\n+        None\n     }\n \n     /// Figures out the list of root variables (and their types) that aren't completely\n@@ -789,17 +756,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// - It wasn't completely captured by the closure, **and**\n     /// - One of the paths starting at this root variable, that is not captured needs Drop.\n     ///\n-    /// This function only returns a HashSet of tuples for significant drops. The returned HashSet\n-    /// of tuples contains  the hir_id pointing to the use that resulted in the corresponding place\n-    /// being captured anda String which contains the captured value's name (i.e: a.b.c)\n+    /// This function only returns a HashSet of CapturesInfo for significant drops. If there\n+    /// are no significant drops than None is returned\n     fn compute_2229_migrations_for_drop(\n         &self,\n         closure_def_id: DefId,\n         closure_span: Span,\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n         closure_clause: hir::CaptureBy,\n         var_hir_id: hir::HirId,\n-    ) -> Option<FxHashSet<(Option<hir::HirId>, String)>> {\n+    ) -> Option<FxHashSet<CapturesInfo>> {\n         let ty = self.infcx.resolve_vars_if_possible(self.node_ty(var_hir_id));\n \n         if !ty.has_significant_drop(self.tcx, self.tcx.param_env(closure_def_id.expect_local())) {\n@@ -873,60 +839,94 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// - One of the paths captured does not implement all the auto-traits its root variable\n     ///   implements.\n     ///\n-    /// Returns a tuple containing a vector of tuples of HirIds and a HashSet of tuples that contains\n-    /// the hir_id pointing to the use that resulted in the corresponding place being captured and\n-    /// a String which contains the captured value's name (i.e: a.b.c), as well as a String\n+    /// Returns a tuple containing a vector of MigrationDiagnosticInfo, as well as a String\n     /// containing the reason why root variables whose HirId is contained in the vector should\n+    /// be captured\n     fn compute_2229_migrations(\n         &self,\n         closure_def_id: DefId,\n         closure_span: Span,\n         closure_clause: hir::CaptureBy,\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n-    ) -> (Vec<(hir::HirId, FxHashSet<(Option<hir::HirId>, String)>)>, String) {\n+    ) -> (Vec<MigrationDiagnosticInfo>, String) {\n         let upvars = if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n             upvars\n         } else {\n             return (Vec::new(), format!(\"\"));\n         };\n \n         let mut need_migrations = Vec::new();\n-        let mut auto_trait_reasons = FxHashSet::default();\n-        let mut drop_reorder_reason = false;\n+        let mut auto_trait_migration_reasons = FxHashSet::default();\n+        let mut drop_migration_needed = false;\n \n         // Perform auto-trait analysis\n         for (&var_hir_id, _) in upvars.iter() {\n-            let mut need_migration = false;\n             let mut responsible_captured_hir_ids = FxHashSet::default();\n \n-            if let Some((trait_migration_cause, diagnostics_info)) =\n+            let auto_trait_diagnostic = if let Some(diagnostics_info) =\n                 self.compute_2229_migrations_for_trait(min_captures, var_hir_id, closure_clause)\n             {\n-                need_migration = true;\n-                auto_trait_reasons.extend(trait_migration_cause);\n-                responsible_captured_hir_ids.extend(diagnostics_info);\n+                diagnostics_info\n+            } else {\n+                FxHashMap::default()\n+            };\n+\n+            let drop_reorder_diagnostic = if let Some(diagnostics_info) = self\n+                .compute_2229_migrations_for_drop(\n+                    closure_def_id,\n+                    closure_span,\n+                    min_captures,\n+                    closure_clause,\n+                    var_hir_id,\n+                ) {\n+                drop_migration_needed = true;\n+                diagnostics_info\n+            } else {\n+                FxHashSet::default()\n+            };\n+\n+            // Combine all the captures responsible for needing migrations into one HashSet\n+            let mut capture_disagnostic = drop_reorder_diagnostic.clone();\n+            for key in auto_trait_diagnostic.keys() {\n+                capture_disagnostic.insert(key.clone());\n             }\n \n-            if let Some(diagnostics_info) = self.compute_2229_migrations_for_drop(\n-                closure_def_id,\n-                closure_span,\n-                min_captures,\n-                closure_clause,\n-                var_hir_id,\n-            ) {\n-                need_migration = true;\n-                drop_reorder_reason = true;\n-                responsible_captured_hir_ids.extend(diagnostics_info);\n+            for captured_info in capture_disagnostic.iter() {\n+                // Get the auto trait reasons of why migration is needed because of that capture, if there are any\n+                let capture_trait_reasons =\n+                    if let Some(reasons) = auto_trait_diagnostic.get(captured_info) {\n+                        reasons.clone()\n+                    } else {\n+                        FxHashSet::default()\n+                    };\n+\n+                // Check if migration is needed because of drop reorder as a result of that capture\n+                let capture_drop_reorder_reason = drop_reorder_diagnostic.contains(captured_info);\n+\n+                // Combine all the reasons of why the root variable should be captured as a result of\n+                // auto trait implementation issues\n+                auto_trait_migration_reasons.extend(capture_trait_reasons.clone());\n+\n+                responsible_captured_hir_ids.insert((\n+                    captured_info.0,\n+                    captured_info.1.clone(),\n+                    self.compute_2229_migrations_reasons(\n+                        capture_trait_reasons,\n+                        capture_drop_reorder_reason,\n+                    ),\n+                ));\n             }\n \n-            if need_migration {\n+            if capture_disagnostic.len() > 0 {\n                 need_migrations.push((var_hir_id, responsible_captured_hir_ids));\n             }\n         }\n-\n         (\n             need_migrations,\n-            self.compute_2229_migrations_reasons(auto_trait_reasons, drop_reorder_reason),\n+            self.compute_2229_migrations_reasons(\n+                auto_trait_migration_reasons,\n+                drop_migration_needed,\n+            ),\n         )\n     }\n \n@@ -1964,7 +1964,7 @@ fn should_do_rust_2021_incompatible_closure_captures_analysis(\n /// - s2: Comma separated names of the variables being migrated.\n fn migration_suggestion_for_2229(\n     tcx: TyCtxt<'_>,\n-    need_migrations: &Vec<(hir::HirId, FxHashSet<(Option<hir::HirId>, String)>)>,\n+    need_migrations: &Vec<MigrationDiagnosticInfo>,\n ) -> (String, String) {\n     let need_migrations_variables =\n         need_migrations.iter().map(|(v, _)| var_name(tcx, *v)).collect::<Vec<_>>();"}, {"sha": "e5102fee5887792356f48f5541fa8d8c1e50c810", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.fixed", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed?ref=ca443729575da9c81e47da80adcbf1b14fa1e09b", "patch": "@@ -0,0 +1,138 @@\n+// run-rustfix\n+#![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n+\n+use std::thread;\n+\n+struct S(String);\n+\n+#[derive(Clone)]\n+struct T(i32);\n+\n+struct U(S, T);\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self {\n+        U(S(String::from(\"Hello World\")), T(0))\n+    }\n+}\n+\n+fn test_multi_issues() {\n+    let f1 = U(S(String::from(\"foo\")), T(0));\n+    let f2 = U(S(String::from(\"bar\")), T(0));\n+    let c = || { let _ = (&f1, &f2); \n+        //~^ ERROR: `Clone` trait implementation for closure, and drop order\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `f1`, `f2` to be fully captured\n+        let _f_1 = f1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        let _f_2 = f2.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f2`, but in Rust 2021, it only captures `f2.1`\n+    };\n+\n+    let c_clone = c.clone();\n+\n+    c_clone();\n+}\n+//~^ NOTE: in Rust 2018, `f2` would be dropped here, but in Rust 2021, only `f2.1` would be dropped here alongside the closure\n+\n+fn test_capturing_all_disjoint_fields_individually() {\n+    let f1 = U(S(String::from(\"foo\")), T(0));\n+    let c = || { let _ = &f1; \n+        //~^ ERROR: `Clone` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `f1` to be fully captured\n+        let _f_1 = f1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        let _f_2 = f1.1;\n+    };\n+\n+    let c_clone = c.clone();\n+\n+    c_clone();\n+}\n+\n+struct U1(S, T, S);\n+\n+impl Clone for U1 {\n+    fn clone(&self) -> Self {\n+        U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")))\n+    }\n+}\n+\n+fn test_capturing_several_disjoint_fields_individually_1() {\n+    let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n+    let c = || { let _ = &f1; \n+        //~^ ERROR: `Clone` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.2` does not implement `Clone`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `f1` to be fully captured\n+        let _f_0 = f1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        let _f_2 = f1.2;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.2`\n+    };\n+\n+    let c_clone = c.clone();\n+\n+    c_clone();\n+}\n+\n+fn test_capturing_several_disjoint_fields_individually_2() {\n+    let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n+    let c = || { let _ = &f1; \n+        //~^ ERROR: `Clone` trait implementation for closure, and drop order\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `f1` to be fully captured\n+        let _f_0 = f1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        let _f_1 = f1.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.1`\n+    };\n+\n+    let c_clone = c.clone();\n+\n+    c_clone();\n+}\n+//~^ NOTE: in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.1` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.0` would be dropped here alongside the closure\n+\n+struct SendPointer(*mut i32);\n+unsafe impl Send for SendPointer {}\n+\n+struct CustomInt(*mut i32);\n+struct SyncPointer(CustomInt);\n+unsafe impl Sync for SyncPointer {}\n+unsafe impl Send for CustomInt {}\n+\n+fn test_multi_traits_issues() {\n+    let mut f1 = 10;\n+    let f1 = CustomInt(&mut f1 as *mut i32);\n+    let fptr1 = SyncPointer(f1);\n+\n+    let mut f2 = 10;\n+    let fptr2 = SendPointer(&mut f2 as *mut i32);\n+    thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n+        //~^ ERROR: `Sync`, `Send` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n+        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr2.0` does not implement `Send`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n+        *fptr1.0.0 = 20;\n+        //~^ NOTE: in Rust 2018, closure captures all of `fptr1`, but in Rust 2021, it only captures `fptr1.0.0`\n+        *fptr2.0 = 20;\n+        //~^ NOTE: in Rust 2018, closure captures all of `fptr2`, but in Rust 2021, it only captures `fptr2.0`\n+    } });\n+}\n+\n+fn main() {\n+    test_multi_issues();\n+    test_capturing_all_disjoint_fields_individually();\n+    test_capturing_several_disjoint_fields_individually_1();\n+    test_capturing_several_disjoint_fields_individually_2();\n+    test_multi_traits_issues();\n+}"}, {"sha": "d05c0bc1bbce97800acb716bf4c32beb13e0d265", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs?ref=ca443729575da9c81e47da80adcbf1b14fa1e09b", "patch": "@@ -0,0 +1,138 @@\n+// run-rustfix\n+#![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n+\n+use std::thread;\n+\n+struct S(String);\n+\n+#[derive(Clone)]\n+struct T(i32);\n+\n+struct U(S, T);\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self {\n+        U(S(String::from(\"Hello World\")), T(0))\n+    }\n+}\n+\n+fn test_multi_issues() {\n+    let f1 = U(S(String::from(\"foo\")), T(0));\n+    let f2 = U(S(String::from(\"bar\")), T(0));\n+    let c = || {\n+        //~^ ERROR: `Clone` trait implementation for closure, and drop order\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `f1`, `f2` to be fully captured\n+        let _f_1 = f1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        let _f_2 = f2.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f2`, but in Rust 2021, it only captures `f2.1`\n+    };\n+\n+    let c_clone = c.clone();\n+\n+    c_clone();\n+}\n+//~^ NOTE: in Rust 2018, `f2` would be dropped here, but in Rust 2021, only `f2.1` would be dropped here alongside the closure\n+\n+fn test_capturing_all_disjoint_fields_individually() {\n+    let f1 = U(S(String::from(\"foo\")), T(0));\n+    let c = || {\n+        //~^ ERROR: `Clone` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `f1` to be fully captured\n+        let _f_1 = f1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        let _f_2 = f1.1;\n+    };\n+\n+    let c_clone = c.clone();\n+\n+    c_clone();\n+}\n+\n+struct U1(S, T, S);\n+\n+impl Clone for U1 {\n+    fn clone(&self) -> Self {\n+        U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")))\n+    }\n+}\n+\n+fn test_capturing_several_disjoint_fields_individually_1() {\n+    let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n+    let c = || {\n+        //~^ ERROR: `Clone` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.2` does not implement `Clone`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `f1` to be fully captured\n+        let _f_0 = f1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        let _f_2 = f1.2;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.2`\n+    };\n+\n+    let c_clone = c.clone();\n+\n+    c_clone();\n+}\n+\n+fn test_capturing_several_disjoint_fields_individually_2() {\n+    let f1 = U1(S(String::from(\"foo\")), T(0), S(String::from(\"bar\")));\n+    let c = || {\n+        //~^ ERROR: `Clone` trait implementation for closure, and drop order\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `f1` to be fully captured\n+        let _f_0 = f1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+        let _f_1 = f1.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.1`\n+    };\n+\n+    let c_clone = c.clone();\n+\n+    c_clone();\n+}\n+//~^ NOTE: in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.1` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.0` would be dropped here alongside the closure\n+\n+struct SendPointer(*mut i32);\n+unsafe impl Send for SendPointer {}\n+\n+struct CustomInt(*mut i32);\n+struct SyncPointer(CustomInt);\n+unsafe impl Sync for SyncPointer {}\n+unsafe impl Send for CustomInt {}\n+\n+fn test_multi_traits_issues() {\n+    let mut f1 = 10;\n+    let f1 = CustomInt(&mut f1 as *mut i32);\n+    let fptr1 = SyncPointer(f1);\n+\n+    let mut f2 = 10;\n+    let fptr2 = SendPointer(&mut f2 as *mut i32);\n+    thread::spawn(move || unsafe {\n+        //~^ ERROR: `Sync`, `Send` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n+        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr2.0` does not implement `Send`\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n+        *fptr1.0.0 = 20;\n+        //~^ NOTE: in Rust 2018, closure captures all of `fptr1`, but in Rust 2021, it only captures `fptr1.0.0`\n+        *fptr2.0 = 20;\n+        //~^ NOTE: in Rust 2018, closure captures all of `fptr2`, but in Rust 2021, it only captures `fptr2.0`\n+    });\n+}\n+\n+fn main() {\n+    test_multi_issues();\n+    test_capturing_all_disjoint_fields_individually();\n+    test_capturing_several_disjoint_fields_individually_1();\n+    test_capturing_several_disjoint_fields_individually_2();\n+    test_multi_traits_issues();\n+}"}, {"sha": "5f09230d45ca048f9ef4b3706e3899ea1fe34381", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=ca443729575da9c81e47da80adcbf1b14fa1e09b", "patch": "@@ -0,0 +1,134 @@\n+error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure, and drop order\n+  --> $DIR/multi_diagnostics.rs:23:13\n+   |\n+LL |     let c = || {\n+   |             ^^ in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+...\n+LL |         let _f_1 = f1.0;\n+   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+LL |\n+LL |         let _f_2 = f2.1;\n+   |                    ---- in Rust 2018, closure captures all of `f2`, but in Rust 2021, it only captures `f2.1`\n+...\n+LL | }\n+   | - in Rust 2018, `f2` would be dropped here, but in Rust 2021, only `f2.1` would be dropped here alongside the closure\n+   |\n+note: the lint level is defined here\n+  --> $DIR/multi_diagnostics.rs:2:9\n+   |\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `f1`, `f2` to be fully captured\n+   |\n+LL |     let c = || { let _ = (&f1, &f2); \n+LL |\n+LL |\n+LL |\n+LL |\n+LL |         let _f_1 = f1.0;\n+ ...\n+\n+error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n+  --> $DIR/multi_diagnostics.rs:42:13\n+   |\n+LL |     let c = || {\n+   |             ^^ in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+...\n+LL |         let _f_1 = f1.0;\n+   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+   |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `f1` to be fully captured\n+   |\n+LL |     let c = || { let _ = &f1; \n+LL |\n+LL |\n+LL |\n+LL |\n+LL |         let _f_1 = f1.0;\n+ ...\n+\n+error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n+  --> $DIR/multi_diagnostics.rs:67:13\n+   |\n+LL |     let c = || {\n+   |             ^^\n+   |             |\n+   |             in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+   |             in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.2` does not implement `Clone`\n+...\n+LL |         let _f_0 = f1.0;\n+   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+LL |\n+LL |         let _f_2 = f1.2;\n+   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.2`\n+   |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `f1` to be fully captured\n+   |\n+LL |     let c = || { let _ = &f1; \n+LL |\n+LL |\n+LL |\n+LL |\n+LL |\n+ ...\n+\n+error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure, and drop order\n+  --> $DIR/multi_diagnostics.rs:86:13\n+   |\n+LL |     let c = || {\n+   |             ^^ in Rust 2018, this closure would implement `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f1.0` does not implement `Clone`\n+...\n+LL |         let _f_0 = f1.0;\n+   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.0`\n+LL |\n+LL |         let _f_1 = f1.1;\n+   |                    ---- in Rust 2018, closure captures all of `f1`, but in Rust 2021, it only captures `f1.1`\n+...\n+LL | }\n+   | -\n+   | |\n+   | in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.0` would be dropped here alongside the closure\n+   | in Rust 2018, `f1` would be dropped here, but in Rust 2021, only `f1.1` would be dropped here alongside the closure\n+   |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `f1` to be fully captured\n+   |\n+LL |     let c = || { let _ = &f1; \n+LL |\n+LL |\n+LL |\n+LL |\n+LL |         let _f_0 = f1.0;\n+ ...\n+\n+error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n+  --> $DIR/multi_diagnostics.rs:119:19\n+   |\n+LL |     thread::spawn(move || unsafe {\n+   |                   ^^^^^^^^^^^^^^\n+   |                   |\n+   |                   in Rust 2018, this closure would implement `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n+   |                   in Rust 2018, this closure would implement `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr2.0` does not implement `Send`\n+...\n+LL |         *fptr1.0.0 = 20;\n+   |         ---------- in Rust 2018, closure captures all of `fptr1`, but in Rust 2021, it only captures `fptr1.0.0`\n+LL |\n+LL |         *fptr2.0 = 20;\n+   |         -------- in Rust 2018, closure captures all of `fptr2`, but in Rust 2021, it only captures `fptr2.0`\n+   |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n+   |\n+LL |     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n+LL |\n+LL |\n+LL |\n+LL |\n+LL |\n+ ...\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "226172fb93eb12575d2bdea6e081dafa66f68076", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=ca443729575da9c81e47da80adcbf1b14fa1e09b", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n \n #[derive(Debug)]\n struct Foo(i32);\n@@ -18,13 +19,16 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n \n     let c = || { let _ = &t; \n         //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t = &t.1;\n     };\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n struct S;\n impl Drop for S {\n@@ -40,14 +44,22 @@ fn test_precise_analysis_long_path_missing() {\n \n     let c = || { let _ = &u; \n         //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.0`\n         let _x = u.0.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.1`\n         let _x = u.1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n     };\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.0` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.1.0` would be dropped here alongside the closure\n+\n \n fn main() {\n     test_precise_analysis_drop_paths_not_captured_by_move();"}, {"sha": "7035abe6de0a29ef3d37275431ddf7f318a12d8f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs?ref=ca443729575da9c81e47da80adcbf1b14fa1e09b", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n \n #[derive(Debug)]\n struct Foo(i32);\n@@ -18,13 +19,16 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n \n     let c = || {\n         //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n         let _t = &t.1;\n     };\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n struct S;\n impl Drop for S {\n@@ -40,14 +44,22 @@ fn test_precise_analysis_long_path_missing() {\n \n     let c = || {\n         //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.0`\n         let _x = u.0.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.1`\n         let _x = u.1.0;\n+        //~^ NOTE: in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n     };\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.0` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.1.0` would be dropped here alongside the closure\n+\n \n fn main() {\n     test_precise_analysis_drop_paths_not_captured_by_move();"}, {"sha": "ee2cae0ecb2a1a3a9b620859d68bf25713f4d7f4", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca443729575da9c81e47da80adcbf1b14fa1e09b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=ca443729575da9c81e47da80adcbf1b14fa1e09b", "patch": "@@ -1,5 +1,5 @@\n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/precise.rs:19:13\n+  --> $DIR/precise.rs:20:13\n    |\n LL |     let c = || {\n    |             ^^\n@@ -21,36 +21,42 @@ help: add a dummy let to cause `t` to be fully captured\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n-LL |         let _t = &t.1;\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/precise.rs:41:13\n+  --> $DIR/precise.rs:45:13\n    |\n LL |     let c = || {\n    |             ^^\n ...\n LL |         let _x = u.0.0;\n    |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.0`\n+LL |\n LL |         let _x = u.0.1;\n    |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.1`\n+LL |\n LL |         let _x = u.1.0;\n    |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n ...\n LL | }\n-   | - in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1`, `u.0.0`, `u.1.0` would be dropped here alongside the closure\n+   | -\n+   | |\n+   | in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1` would be dropped here alongside the closure\n+   | in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.0` would be dropped here alongside the closure\n+   | in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.1.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `u` to be fully captured\n    |\n LL |     let c = || { let _ = &u; \n LL |\n LL |\n+LL |\n LL |         let _x = u.0.0;\n-LL |         let _x = u.0.1;\n-LL |         let _x = u.1.0;\n+LL |\n  ...\n \n error: aborting due to 2 previous errors"}]}