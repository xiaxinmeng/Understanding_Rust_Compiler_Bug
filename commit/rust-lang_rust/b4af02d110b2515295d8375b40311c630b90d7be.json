{"sha": "b4af02d110b2515295d8375b40311c630b90d7be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YWYwMmQxMTBiMjUxNTI5NWQ4Mzc1YjQwMzExYzYzMGI5MGQ3YmU=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-01T23:29:54Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-01T23:29:54Z"}, "message": "Add top level keywords completion", "tree": {"sha": "3ba3752ea120bbe3ac57ed7198ac52417c1f88db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba3752ea120bbe3ac57ed7198ac52417c1f88db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4af02d110b2515295d8375b40311c630b90d7be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4af02d110b2515295d8375b40311c630b90d7be", "html_url": "https://github.com/rust-lang/rust/commit/b4af02d110b2515295d8375b40311c630b90d7be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4af02d110b2515295d8375b40311c630b90d7be/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abf7d1747d9910e7b4e11357ae9bcf5c594f0d55", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf7d1747d9910e7b4e11357ae9bcf5c594f0d55", "html_url": "https://github.com/rust-lang/rust/commit/abf7d1747d9910e7b4e11357ae9bcf5c594f0d55"}], "stats": {"total": 187, "additions": 186, "deletions": 1}, "files": [{"sha": "36280b703de593f1508e744bf5b1fc0e8f1eee0e", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 186, "deletions": 1, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/b4af02d110b2515295d8375b40311c630b90d7be/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4af02d110b2515295d8375b40311c630b90d7be/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=b4af02d110b2515295d8375b40311c630b90d7be", "patch": "@@ -1,8 +1,9 @@\n //! FIXME: write short doc here\n \n use ra_syntax::{\n+    algo::non_trivia_sibling,\n     ast::{self, LoopBodyOwner},\n-    match_ast, AstNode,\n+    match_ast, AstNode, Direction, NodeOrToken, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxToken,\n };\n@@ -52,7 +53,28 @@ fn keyword(ctx: &CompletionContext, kw: &str, snippet: &str) -> CompletionItem {\n     .build()\n }\n \n+fn add_top_level_keywords(acc: &mut Completions, ctx: &CompletionContext) {\n+    if let Some(token) = previous_non_triva_element(&ctx.token).and_then(|it| it.into_token()) {\n+        if token.kind() == UNSAFE_KW {\n+            acc.add(keyword(ctx, \"impl\", \"impl $0 {}\"));\n+            acc.add(keyword(ctx, \"trait\", \"trait $0 {}\"));\n+            acc.add(keyword(ctx, \"fn\", \"fn $0() {}\"));\n+            return;\n+        }\n+    }\n+    acc.add(keyword(ctx, \"impl\", \"impl $0 {}\"));\n+    acc.add(keyword(ctx, \"enum\", \"enum $0 {}\"));\n+    acc.add(keyword(ctx, \"struct\", \"struct $0 {}\"));\n+    acc.add(keyword(ctx, \"trait\", \"trait $0 {}\"));\n+    acc.add(keyword(ctx, \"fn\", \"fn $0() {}\"));\n+    acc.add(keyword(ctx, \"unsafe\", \"unsafe \"));\n+}\n+\n pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n+    if ctx.is_new_item {\n+        add_top_level_keywords(acc, ctx);\n+        return;\n+    }\n     if !ctx.is_trivial_path {\n         return;\n     }\n@@ -82,6 +104,36 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     acc.add_all(complete_return(ctx, &fn_def, ctx.can_be_stmt));\n }\n \n+fn previous_non_triva_element(token: &SyntaxToken) -> Option<SyntaxElement> {\n+    // trying to get first non triva sibling if we have one\n+    let token_sibling = non_trivia_sibling(NodeOrToken::Token(token.to_owned()), Direction::Prev);\n+    let mut wrapped = if let Some(sibling) = token_sibling {\n+        sibling\n+    } else {\n+        // if not trying to find first ancestor which has such a sibling\n+        let node = token.parent();\n+        let range = node.text_range();\n+        let top_node = node.ancestors().take_while(|it| it.text_range() == range).last()?;\n+        let prev_sibling_node = top_node.ancestors().find(|it| {\n+            non_trivia_sibling(NodeOrToken::Node(it.to_owned()), Direction::Prev).is_some()\n+        })?;\n+        non_trivia_sibling(NodeOrToken::Node(prev_sibling_node), Direction::Prev)?\n+    };\n+    // traversing the tree down to get the last token or node, i.e. the closest one\n+    loop {\n+        if let Some(token) = wrapped.as_token() {\n+            return Some(NodeOrToken::Token(token.clone()));\n+        } else {\n+            let new = wrapped.as_node().and_then(|n| n.last_child_or_token());\n+            if new.is_some() {\n+                wrapped = new.unwrap().clone();\n+            } else {\n+                return Some(wrapped);\n+            }\n+        }\n+    }\n+}\n+\n fn is_in_loop_body(leaf: &SyntaxToken) -> bool {\n     // FIXME move this to CompletionContext and make it handle macros\n     for node in leaf.parent().ancestors() {\n@@ -268,6 +320,139 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn completes_unsafe_context_in_item_position_with_non_empty_token() {\n+        assert_debug_snapshot!(\n+            do_keyword_completion(\n+                r\"\n+                mod my_mod {\n+                    unsafe i<|>\n+                }\n+                \",\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"fn\",\n+                source_range: 57..58,\n+                delete: 57..58,\n+                insert: \"fn $0() {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"impl\",\n+                source_range: 57..58,\n+                delete: 57..58,\n+                insert: \"impl $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"trait\",\n+                source_range: 57..58,\n+                delete: 57..58,\n+                insert: \"trait $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_unsafe_context_in_item_position_with_empty_token() {\n+        assert_debug_snapshot!(\n+            do_keyword_completion(\n+                r\"\n+                mod my_mod {\n+                    unsafe <|>\n+                }\n+                \",\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"fn\",\n+                source_range: 57..57,\n+                delete: 57..57,\n+                insert: \"fn $0() {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"impl\",\n+                source_range: 57..57,\n+                delete: 57..57,\n+                insert: \"impl $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"trait\",\n+                source_range: 57..57,\n+                delete: 57..57,\n+                insert: \"trait $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_keywords_in_item_position_with_empty_token() {\n+        assert_debug_snapshot!(\n+            do_keyword_completion(\n+                r\"\n+                <|>\n+                \",\n+            ),\n+            @r###\"\n+            [\n+                CompletionItem {\n+                    label: \"enum\",\n+                    source_range: 17..17,\n+                    delete: 17..17,\n+                    insert: \"enum $0 {}\",\n+                    kind: Keyword,\n+                },\n+                CompletionItem {\n+                    label: \"fn\",\n+                    source_range: 17..17,\n+                    delete: 17..17,\n+                    insert: \"fn $0() {}\",\n+                    kind: Keyword,\n+                },\n+                CompletionItem {\n+                    label: \"impl\",\n+                    source_range: 17..17,\n+                    delete: 17..17,\n+                    insert: \"impl $0 {}\",\n+                    kind: Keyword,\n+                },\n+                CompletionItem {\n+                    label: \"struct\",\n+                    source_range: 17..17,\n+                    delete: 17..17,\n+                    insert: \"struct $0 {}\",\n+                    kind: Keyword,\n+                },\n+                CompletionItem {\n+                    label: \"trait\",\n+                    source_range: 17..17,\n+                    delete: 17..17,\n+                    insert: \"trait $0 {}\",\n+                    kind: Keyword,\n+                },\n+                CompletionItem {\n+                    label: \"unsafe\",\n+                    source_range: 17..17,\n+                    delete: 17..17,\n+                    insert: \"unsafe \",\n+                    kind: Keyword,\n+                },\n+            ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn completes_else_after_if() {\n         assert_debug_snapshot!("}]}