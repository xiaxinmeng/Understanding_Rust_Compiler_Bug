{"sha": "0ebd6e489150ce79bee339ff713078bf6eff2eae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYmQ2ZTQ4OTE1MGNlNzliZWUzMzlmZjcxMzA3OGJmNmVmZjJlYWU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-20T15:56:33Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-22T15:22:00Z"}, "message": "Extend HIR WF checking to fields", "tree": {"sha": "b80da0796e1b53d51688b7cdc8db7e9d8b37710a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80da0796e1b53d51688b7cdc8db7e9d8b37710a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ebd6e489150ce79bee339ff713078bf6eff2eae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmD5jRgACgkQtAh+UQ6Y\nsWQskg/6AsN3LSEkIBEUsADWgVifvl4F2POasteIEZHZQ6zlGFoAXzUC5QmEtoRu\nmEdUpsICgCJI03xtyMpBRZy5OAmyErEFRaxX7maukqkNf////ffCO6s5+JWB56ue\nhAOCgPliUv+27fp67fDPOnY0MUwy1eQNoD55P4VMiM1kYcfrZrEPJLCTEU5AaNrQ\n3f+NTH6MYLNVNKyg4AoWiwlWdhPqHi+0HK2zOBRj3aEjLaA/tT504QZzXpG4nWbd\n8GV0CPhuzjJY1irctydo6fjKcqUKwDA2LxbWzEMmNuNikX0CwA6kEGhwnDXKrjD0\ndAJH+y/uYyVIgq8u72c+Gh0LtUWoeO8FLcj7MoAlDSt0vA2KmDBehVeucpsiPq/U\nXHi87rDQ9jqw13wPFUBnxDGv0X39X9RiBspuC8tNirs2ssDLaYRiSYDHI1FT46tK\nS1vkBLqA+xFzyBlvq9eYBBTdR3LAVpZjov8f03uZF8wJchheDwgc71+lAxxfJNdk\n7OS7kFAOZJGp7fCJn4Tigiv9uAulcqbf27R0IF1h/Ze0sT08X7bdUxbR/B2EIWvc\nrt1puI0F8LfCLM+1BBARyk/S17///QepOsm5PqCNbVm+xyvsfBteyvQqEvWj750S\nrCBnEZ+Zs+spUzk0rf2V5v7mmV8gCfWs/m0neUlqUnBgQ43Qdts=\n=2I0y\n-----END PGP SIGNATURE-----", "payload": "tree b80da0796e1b53d51688b7cdc8db7e9d8b37710a\nparent f913a4fe901d6aeb84941fa06c17916d4e6d1dd7\nauthor Aaron Hill <aa1ronham@gmail.com> 1626796593 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1626967320 -0500\n\nExtend HIR WF checking to fields\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ebd6e489150ce79bee339ff713078bf6eff2eae", "html_url": "https://github.com/rust-lang/rust/commit/0ebd6e489150ce79bee339ff713078bf6eff2eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ebd6e489150ce79bee339ff713078bf6eff2eae/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f913a4fe901d6aeb84941fa06c17916d4e6d1dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f913a4fe901d6aeb84941fa06c17916d4e6d1dd7", "html_url": "https://github.com/rust-lang/rust/commit/f913a4fe901d6aeb84941fa06c17916d4e6d1dd7"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "e33cc603b5e543cc95cd8b3699642cb2ec2761e4", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd6e489150ce79bee339ff713078bf6eff2eae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd6e489150ce79bee339ff713078bf6eff2eae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=0ebd6e489150ce79bee339ff713078bf6eff2eae", "patch": "@@ -523,8 +523,7 @@ fn check_type_defn<'tcx, F>(\n                 fcx.register_wf_obligation(\n                     field.ty.into(),\n                     field.span,\n-                    // We don't have an HIR id for the field\n-                    ObligationCauseCode::WellFormed(None),\n+                    ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(field.def_id))),\n                 )\n             }\n \n@@ -1467,6 +1466,7 @@ struct AdtVariant<'tcx> {\n \n struct AdtField<'tcx> {\n     ty: Ty<'tcx>,\n+    def_id: LocalDefId,\n     span: Span,\n }\n \n@@ -1477,11 +1477,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .fields()\n             .iter()\n             .map(|field| {\n-                let field_ty = self.tcx.type_of(self.tcx.hir().local_def_id(field.hir_id));\n+                let def_id = self.tcx.hir().local_def_id(field.hir_id);\n+                let field_ty = self.tcx.type_of(def_id);\n                 let field_ty = self.normalize_associated_types_in(field.ty.span, field_ty);\n                 let field_ty = self.resolve_vars_if_possible(field_ty);\n                 debug!(\"non_enum_variant: type of field {:?} is {:?}\", field, field_ty);\n-                AdtField { ty: field_ty, span: field.ty.span }\n+                AdtField { ty: field_ty, span: field.ty.span, def_id }\n             })\n             .collect();\n         AdtVariant { fields, explicit_discr: None }"}, {"sha": "e7503d3d71ceaec5cb9480f521299b3d87a640fa", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd6e489150ce79bee339ff713078bf6eff2eae/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd6e489150ce79bee339ff713078bf6eff2eae/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=0ebd6e489150ce79bee339ff713078bf6eff2eae", "patch": "@@ -25,7 +25,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n         WellFormedLoc::Ty(def_id) => def_id,\n         WellFormedLoc::Param { function, param_idx: _ } => function,\n     };\n-    let hir_id = HirId::make_owner(def_id);\n+    let hir_id = hir.local_def_id_to_hir_id(def_id);\n \n     // HIR wfcheck should only ever happen as part of improving an existing error\n     tcx.sess\n@@ -140,6 +140,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n                 }\n                 ref item => bug!(\"Unexpected item {:?}\", item),\n             },\n+            hir::Node::Field(field) => Some(field.ty),\n             ref node => bug!(\"Unexpected node {:?}\", node),\n         },\n         WellFormedLoc::Param { function: _, param_idx } => {"}, {"sha": "4400b6179c6f8ad782b870d846de1618226cc6e1", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd6e489150ce79bee339ff713078bf6eff2eae/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd6e489150ce79bee339ff713078bf6eff2eae/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=0ebd6e489150ce79bee339ff713078bf6eff2eae", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n-  --> $DIR/issue-19380.rs:11:9\n+  --> $DIR/issue-19380.rs:11:29\n    |\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Qiz` cannot be made into an object\n+   |                             ^^^^^^^^^^^^^^^^^ `Qiz` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-19380.rs:2:6"}, {"sha": "20aa97707105e2156079225216800fd2bb60229f", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd6e489150ce79bee339ff713078bf6eff2eae/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd6e489150ce79bee339ff713078bf6eff2eae/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=0ebd6e489150ce79bee339ff713078bf6eff2eae", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/wf-in-fn-type-arg.rs:9:8\n+  --> $DIR/wf-in-fn-type-arg.rs:9:11\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn(MustBeCopy<T>)\n-   |        ^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |           ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "48af696c3a7527aac89b520c901bd24bc0c5ff98", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd6e489150ce79bee339ff713078bf6eff2eae/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd6e489150ce79bee339ff713078bf6eff2eae/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=0ebd6e489150ce79bee339ff713078bf6eff2eae", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/wf-in-fn-type-ret.rs:9:8\n+  --> $DIR/wf-in-fn-type-ret.rs:9:16\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn() -> MustBeCopy<T>\n-   |        ^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "b3b919a569ed41fa0b08a79355bab4088a6dbb55", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ebd6e489150ce79bee339ff713078bf6eff2eae/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ebd6e489150ce79bee339ff713078bf6eff2eae/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=0ebd6e489150ce79bee339ff713078bf6eff2eae", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/wf-in-obj-type-trait.rs:11:8\n+  --> $DIR/wf-in-obj-type-trait.rs:11:19\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: dyn Object<MustBeCopy<T>>\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}]}