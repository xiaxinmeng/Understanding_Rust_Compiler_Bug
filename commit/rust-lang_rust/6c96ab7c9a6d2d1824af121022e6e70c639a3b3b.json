{"sha": "6c96ab7c9a6d2d1824af121022e6e70c639a3b3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOTZhYjdjOWE2ZDJkMTgyNGFmMTIxMDIyZTZlNzBjNjM5YTNiM2I=", "commit": {"author": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-12T23:13:07Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-12T23:13:07Z"}, "message": "address review comment in Attribute rewrite fn", "tree": {"sha": "fab487fc26f930b550af805d137d2e3d2961c14a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fab487fc26f930b550af805d137d2e3d2961c14a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c96ab7c9a6d2d1824af121022e6e70c639a3b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c96ab7c9a6d2d1824af121022e6e70c639a3b3b", "html_url": "https://github.com/rust-lang/rust/commit/6c96ab7c9a6d2d1824af121022e6e70c639a3b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c96ab7c9a6d2d1824af121022e6e70c639a3b3b/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "171e656f64daf2384b97e4db1d2bcefd3ebe9950", "url": "https://api.github.com/repos/rust-lang/rust/commits/171e656f64daf2384b97e4db1d2bcefd3ebe9950", "html_url": "https://github.com/rust-lang/rust/commit/171e656f64daf2384b97e4db1d2bcefd3ebe9950"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "f8f6cd1c376043339729e27334c4279b50e6ca68", "filename": "src/attr.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6c96ab7c9a6d2d1824af121022e6e70c639a3b3b/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c96ab7c9a6d2d1824af121022e6e70c639a3b3b/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=6c96ab7c9a6d2d1824af121022e6e70c639a3b3b", "patch": "@@ -351,35 +351,33 @@ impl Rewrite for ast::Attribute {\n                 return Some(snippet.to_owned());\n             }\n \n-            let meta = self.meta();\n-\n-            // This attribute is possibly a doc attribute needing normalization to a doc comment\n-            if context.config.normalize_doc_attributes() {\n-                if let Some(ref meta) = meta {\n-                    if meta.check_name(\"doc\") {\n-                        if let Some(ref literal) = meta.value_str() {\n-                            let comment_style = match self.style {\n-                                ast::AttrStyle::Inner => CommentStyle::Doc,\n-                                ast::AttrStyle::Outer => CommentStyle::TripleSlash,\n-                            };\n-\n-                            let doc_comment = format!(\"{}{}\", comment_style.opener(), literal);\n-                            return rewrite_doc_comment(\n-                                &doc_comment,\n-                                shape.comment(context.config),\n-                                context.config,\n-                            );\n-                        }\n+            if let Some(ref meta) = self.meta() {\n+                // This attribute is possibly a doc attribute needing normalization to a doc comment\n+                if context.config.normalize_doc_attributes() && meta.check_name(\"doc\") {\n+                    if let Some(ref literal) = meta.value_str() {\n+                        let comment_style = match self.style {\n+                            ast::AttrStyle::Inner => CommentStyle::Doc,\n+                            ast::AttrStyle::Outer => CommentStyle::TripleSlash,\n+                        };\n+\n+                        let doc_comment = format!(\"{}{}\", comment_style.opener(), literal);\n+                        return rewrite_doc_comment(\n+                            &doc_comment,\n+                            shape.comment(context.config),\n+                            context.config,\n+                        );\n                     }\n                 }\n-            }\n \n-            // 1 = `[`\n-            let shape = shape.offset_left(prefix.len() + 1)?;\n-            Some(\n-                meta.and_then(|meta| meta.rewrite(context, shape))\n-                    .map_or_else(|| snippet.to_owned(), |rw| format!(\"{}[{}]\", prefix, rw)),\n-            )\n+                // 1 = `[`\n+                let shape = shape.offset_left(prefix.len() + 1)?;\n+                Some(\n+                    meta.rewrite(context, shape)\n+                        .map_or_else(|| snippet.to_owned(), |rw| format!(\"{}[{}]\", prefix, rw)),\n+                )\n+            } else {\n+                Some(snippet.to_owned())\n+            }\n         }\n     }\n }"}]}