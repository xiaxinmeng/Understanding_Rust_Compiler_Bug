{"sha": "17998961d4d08d08be3cee5e09ca62b75b832f1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OTk4OTYxZDRkMDhkMDhiZTNjZWU1ZTA5Y2E2MmI3NWI4MzJmMWE=", "commit": {"author": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-07T18:12:17Z"}, "committer": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-07T18:12:17Z"}, "message": "Refactor const saturating intrinsics emulation and add unstable feature attribute #58030", "tree": {"sha": "196ccb52f86f59c4934e77d5a36b488132a6fbe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/196ccb52f86f59c4934e77d5a36b488132a6fbe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17998961d4d08d08be3cee5e09ca62b75b832f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17998961d4d08d08be3cee5e09ca62b75b832f1a", "html_url": "https://github.com/rust-lang/rust/commit/17998961d4d08d08be3cee5e09ca62b75b832f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17998961d4d08d08be3cee5e09ca62b75b832f1a/comments", "author": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7efc76b7ef8c60aefd603dd4773b2fa039bab80", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7efc76b7ef8c60aefd603dd4773b2fa039bab80", "html_url": "https://github.com/rust-lang/rust/commit/d7efc76b7ef8c60aefd603dd4773b2fa039bab80"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "d4fade7613848b994100520944777746ea78c36c", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17998961d4d08d08be3cee5e09ca62b75b832f1a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17998961d4d08d08be3cee5e09ca62b75b832f1a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=17998961d4d08d08be3cee5e09ca62b75b832f1a", "patch": "@@ -909,6 +909,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n             #[inline]\n             #[cfg(not(stage0))]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n@@ -957,6 +958,7 @@ assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_sub(100), \", stringi\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n             #[inline]\n             #[cfg(not(stage0))]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {"}, {"sha": "e8dc22b8a596ffdaaf506620a0afa58a826ecb9a", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 25, "deletions": 39, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/17998961d4d08d08be3cee5e09ca62b75b832f1a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17998961d4d08d08be3cee5e09ca62b75b832f1a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=17998961d4d08d08be3cee5e09ca62b75b832f1a", "patch": "@@ -122,55 +122,41 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     self.binop_with_overflow(bin_op, lhs, rhs, dest)?;\n                 }\n             }\n-            \"saturating_add\" => {\n+            \"saturating_add\" | \"saturating_sub\" => {\n                 let l = self.read_immediate(args[0])?;\n                 let r = self.read_immediate(args[1])?;\n-                let (val, overflowed) = self.binary_op_imm(BinOp::Add, l, r)?;\n-                if overflowed {\n-                    let first_term: u128 = l.to_scalar()?.to_bits(l.layout.size)?;\n-                    let num_bits = l.layout.size.bits();\n-                    let val = if l.layout.abi.is_signed() {\n-                        // For signed addition the saturated value depends on the\n-                        // sign of either term\n-                        if first_term & (1 << (num_bits-1)) == 0 {  // signed term is positive\n-                            Scalar::from_uint((1u128 << (num_bits - 1)) - 1,\n-                                Size::from_bits(num_bits))\n-                        } else {  // signed term is negative\n-                            Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))\n-                        }\n-                    } else {\n-                        Scalar::from_uint(u128::max_value() >> (128 - num_bits),\n-                            Size::from_bits(num_bits))\n-                    };\n-                    self.write_scalar(val, dest)?;\n+                let is_add = intrinsic_name == \"saturating_add\";\n+                let (val, overflowed) = self.binary_op_imm(if is_add {\n+                    BinOp::Add\n                 } else {\n-                    self.write_scalar(val, dest)?;\n-                }\n-            }\n-            \"saturating_sub\" => {\n-                let l = self.read_immediate(args[0])?;\n-                let r = self.read_immediate(args[1])?;\n-                let (val, overflowed) = self.binary_op_imm(BinOp::Sub, l, r)?;\n-                if overflowed {\n+                    BinOp::Sub\n+                }, l, r)?;\n+                let val = if overflowed {\n+                    // For signed ints the saturated value depends on the\n+                    // sign of the first term\n                     let first_term: u128 = l.to_scalar()?.to_bits(l.layout.size)?;\n                     let num_bits = l.layout.size.bits();\n-                    let val = if l.layout.abi.is_signed() {\n+                    if l.layout.abi.is_signed() {\n                         if first_term & (1 << (num_bits-1)) == 0 {  // first term is positive\n-                            // so overflow is positive\n-                            Scalar::from_uint((1u128 << (num_bits - 1)) - 1,\n+                            Scalar::from_uint((1u128 << (num_bits - 1)) - 1,  // max positive\n                                 Size::from_bits(num_bits))\n-                        } else {\n-                            // if first term negative, overflow must be negative\n+                        } else {  // first term is negative\n+                            // max negative\n                             Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))\n                         }\n-                    } else {\n-                        // unsigned underflow saturates to 0\n-                        Scalar::from_uint(0u128, Size::from_bits(num_bits))\n-                    };\n-                    self.write_scalar(val, dest)?;\n+                    } else {  // unsigned\n+                        if is_add {\n+                            // max unsigned\n+                            Scalar::from_uint(u128::max_value() >> (128 - num_bits),\n+                                Size::from_bits(num_bits))\n+                        } else {  // underflow to 0\n+                            Scalar::from_uint(0u128, Size::from_bits(num_bits))\n+                        }\n+                    }\n                 } else {\n-                    self.write_scalar(val, dest)?;\n-                }\n+                    val\n+                };\n+                self.write_scalar(val, dest)?;\n             }\n             \"unchecked_shl\" | \"unchecked_shr\" => {\n                 let l = self.read_immediate(args[0])?;"}, {"sha": "4f586a276f0d259f3f5d4bae6761ad43da1510cb", "filename": "src/test/run-pass/const-int-saturating-arith.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17998961d4d08d08be3cee5e09ca62b75b832f1a/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17998961d4d08d08be3cee5e09ca62b75b832f1a/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs?ref=17998961d4d08d08be3cee5e09ca62b75b832f1a", "patch": "@@ -1,3 +1,5 @@\n+#![feature(const_saturating_int_methods)]\n+\n const INT_U32_NO: u32 = (42 as u32).saturating_add(2);\n const INT_U32: u32 = u32::max_value().saturating_add(1);\n const INT_U128: u128 = u128::max_value().saturating_add(1);"}]}