{"sha": "356d12eae4b8985dc933c13e9281546d532d0845", "node_id": "C_kwDOAAsO6NoAKDM1NmQxMmVhZTRiODk4NWRjOTMzYzEzZTkyODE1NDZkNTMyZDA4NDU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-03T15:24:03Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-03T15:24:03Z"}, "message": "refactor: leverage `HasAttrs` for code brevity", "tree": {"sha": "6ba6b0b19071f7870167893b2519061e6105d602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ba6b0b19071f7870167893b2519061e6105d602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356d12eae4b8985dc933c13e9281546d532d0845", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQCERMACgkQ4laYqTBY\nYXGlGg//UOY3m/D/LeRoK7h/WvzhDumjT6udhPs2OxP/h4O7jBVnmMY3XHiMR+c6\nQBSjvq2oYZn9Kq91Jv/tB0mDRSE7CCkmk3F5DRjEwrlQ4QuQeHFLBGuCPCbMxEMI\ny8RK8E/akXeVFS8W+39UcKJdSeVj+OLu2mkhz2ryC9+mvHOOKnCIN92dQ02LEpjF\nLbdlEYW+ySxpQwy/3rI/aje/+dVC9CaryBj7PhuUXnlHv2OaY2seNNaEUgStJtyl\nqpgVtoSSM3uaGrD3Bs4LsHzBJirk3ogK0aX5j+/9EoE1XKJzz+Dwbsn9UQVD2fOR\n284EP1kICu+huptiXohv/4hGGGc2Vn+6Hgg9SNb5n3OJKCBnYwMgqG4y1xDto6WE\njuyC13/vWrkPFvnqDNSNr1aS2iLXEcbdS6Y9JJNVSdWfMcEQo553h+Bi4hu+1Dkw\ntdg3Kqlagne5j2Oa81Cd9tl2hbUCKBRvf+76hI23QAdzt5rlYoLFDh24TyHGINy5\nGT6f4Qh5SZ34oKMSIoBix8ct4vKRtj7C9AHdCL1E+cG2yIQ9ptFqp+Hh1SamKhEZ\n7VYXVE/eXXwYxQ9Mvt9KLI+dXg01cA1H7yyRGMxl1W+KRDgpUwc1T2phSgLYUJUB\nCcKV+jrzi9vXT0OpW90xYuec/ZMPuCwCu1G//Xr0ILEcvau6Y5g=\n=J0pA\n-----END PGP SIGNATURE-----", "payload": "tree 6ba6b0b19071f7870167893b2519061e6105d602\nparent 2e7d2c2d045e2a66a4e309cbb71a3264004f8678\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1677857043 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1677857043 +0900\n\nrefactor: leverage `HasAttrs` for code brevity\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356d12eae4b8985dc933c13e9281546d532d0845", "html_url": "https://github.com/rust-lang/rust/commit/356d12eae4b8985dc933c13e9281546d532d0845", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356d12eae4b8985dc933c13e9281546d532d0845/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "html_url": "https://github.com/rust-lang/rust/commit/2e7d2c2d045e2a66a4e309cbb71a3264004f8678"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "79c2c188ff122f30dc8ac0a00c167ff4bf485965", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 10, "deletions": 36, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/356d12eae4b8985dc933c13e9281546d532d0845/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356d12eae4b8985dc933c13e9281546d532d0845/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=356d12eae4b8985dc933c13e9281546d532d0845", "patch": "@@ -315,26 +315,14 @@ impl AttrsWithOwner {\n                     let src = it.parent().child_source(db);\n                     RawAttrs::from_attrs_owner(\n                         db.upcast(),\n-                        src.with_value(src.value[it.local_id()].as_ref().either(\n-                            |it| match it {\n-                                ast::TypeOrConstParam::Type(it) => it as _,\n-                                ast::TypeOrConstParam::Const(it) => it as _,\n-                            },\n-                            |it| it as _,\n-                        )),\n+                        src.with_value(&src.value[it.local_id()]),\n                     )\n                 }\n                 GenericParamId::TypeParamId(it) => {\n                     let src = it.parent().child_source(db);\n                     RawAttrs::from_attrs_owner(\n                         db.upcast(),\n-                        src.with_value(src.value[it.local_id()].as_ref().either(\n-                            |it| match it {\n-                                ast::TypeOrConstParam::Type(it) => it as _,\n-                                ast::TypeOrConstParam::Const(it) => it as _,\n-                            },\n-                            |it| it as _,\n-                        )),\n+                        src.with_value(&src.value[it.local_id()]),\n                     )\n                 }\n                 GenericParamId::LifetimeParamId(it) => {\n@@ -412,28 +400,14 @@ impl AttrsWithOwner {\n             },\n             AttrDefId::ImplId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::GenericParamId(id) => match id {\n-                GenericParamId::ConstParamId(id) => {\n-                    id.parent().child_source(db).map(|source| match &source[id.local_id()] {\n-                        Either::Left(ast::TypeOrConstParam::Type(id)) => {\n-                            ast::AnyHasAttrs::new(id.clone())\n-                        }\n-                        Either::Left(ast::TypeOrConstParam::Const(id)) => {\n-                            ast::AnyHasAttrs::new(id.clone())\n-                        }\n-                        Either::Right(id) => ast::AnyHasAttrs::new(id.clone()),\n-                    })\n-                }\n-                GenericParamId::TypeParamId(id) => {\n-                    id.parent().child_source(db).map(|source| match &source[id.local_id()] {\n-                        Either::Left(ast::TypeOrConstParam::Type(id)) => {\n-                            ast::AnyHasAttrs::new(id.clone())\n-                        }\n-                        Either::Left(ast::TypeOrConstParam::Const(id)) => {\n-                            ast::AnyHasAttrs::new(id.clone())\n-                        }\n-                        Either::Right(id) => ast::AnyHasAttrs::new(id.clone()),\n-                    })\n-                }\n+                GenericParamId::ConstParamId(id) => id\n+                    .parent()\n+                    .child_source(db)\n+                    .map(|source| ast::AnyHasAttrs::new(source[id.local_id()].clone())),\n+                GenericParamId::TypeParamId(id) => id\n+                    .parent()\n+                    .child_source(db)\n+                    .map(|source| ast::AnyHasAttrs::new(source[id.local_id()].clone())),\n                 GenericParamId::LifetimeParamId(id) => id\n                     .parent\n                     .child_source(db)"}, {"sha": "1e691befff62a9cd12a4ba5313671b57078956ef", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/356d12eae4b8985dc933c13e9281546d532d0845/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356d12eae4b8985dc933c13e9281546d532d0845/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=356d12eae4b8985dc933c13e9281546d532d0845", "patch": "@@ -129,6 +129,13 @@ where\n     }\n }\n \n+impl<L, R> HasAttrs for Either<L, R>\n+where\n+    L: HasAttrs,\n+    R: HasAttrs,\n+{\n+}\n+\n mod support {\n     use super::{AstChildren, AstNode, SyntaxKind, SyntaxNode, SyntaxToken};\n "}, {"sha": "15bd5ab3c7299e7921f0f1a27ccf813db436926c", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/356d12eae4b8985dc933c13e9281546d532d0845/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356d12eae4b8985dc933c13e9281546d532d0845/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=356d12eae4b8985dc933c13e9281546d532d0845", "patch": "@@ -680,6 +680,36 @@ impl TypeOrConstParam {\n     }\n }\n \n+impl AstNode for TypeOrConstParam {\n+    fn can_cast(kind: SyntaxKind) -> bool\n+    where\n+        Self: Sized,\n+    {\n+        matches!(kind, SyntaxKind::TYPE_PARAM | SyntaxKind::CONST_PARAM)\n+    }\n+\n+    fn cast(syntax: SyntaxNode) -> Option<Self>\n+    where\n+        Self: Sized,\n+    {\n+        let res = match syntax.kind() {\n+            SyntaxKind::TYPE_PARAM => TypeOrConstParam::Type(ast::TypeParam { syntax }),\n+            SyntaxKind::CONST_PARAM => TypeOrConstParam::Const(ast::ConstParam { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            TypeOrConstParam::Type(it) => it.syntax(),\n+            TypeOrConstParam::Const(it) => it.syntax(),\n+        }\n+    }\n+}\n+\n+impl HasAttrs for TypeOrConstParam {}\n+\n #[derive(Debug, Clone)]\n pub enum TraitOrAlias {\n     Trait(ast::Trait),"}]}