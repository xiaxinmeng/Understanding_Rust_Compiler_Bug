{"sha": "a7a05388023b83fe7b6f39d387b17b3af7f9a653", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YTA1Mzg4MDIzYjgzZmU3YjZmMzlkMzg3YjE3YjNhZjdmOWE2NTM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-29T03:08:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-29T03:08:50Z"}, "message": "Rollup merge of #78460 - varkor:turbofish-string-generic, r=lcnr\n\nAdjust turbofish help message for const generics\n\nTypes are no longer special. (This message arguably only makes sense with `min_const_generics` or more, but we'll be there soon.)\n\nr? @lcnr", "tree": {"sha": "0c115f1778d909d36d47c18dd17152e9f4536447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c115f1778d909d36d47c18dd17152e9f4536447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7a05388023b83fe7b6f39d387b17b3af7f9a653", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmjJDCRBK7hj4Ov3rIwAAdHIIAEQKIv2RirjfXcaQyp3s+0v9\nl+k1Eiw424rlOxAJAwwuyI9KfnOZJNIIwzfD07Hs9LycJCpIMO25OJLmTeBpBSJ7\n7cunpZvAvGC3RJoN04SCXjmGUviqW/J9dK7TRQs+j+t0UCPp/P0f6UQAPi9gK3uu\nNek29qcFs1Uc4FyqZR5K1XGjR6npGBh4s3h0V8I8SzvmqHYfzCxreDrqaCyk6gko\n/ivE4h5kN1Wwcq9f3Z1VxUWqgt7WR4KBYOgKFK4MMjEQ3qRA6tJ9BCL2dNl0Nk9C\nMy8LkCsxzHvmEDH4HqtE7d3IEc2psrGXFTQH1QJp0yBLb6sVkYg5P6PwqSEyPeg=\n=kKqY\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c115f1778d909d36d47c18dd17152e9f4536447\nparent 2555e07be1bd8e25e7d5672dfa13b85ceeda3b80\nparent a6d01da7165d904d83407c385282803b9cb71dbb\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603940930 +0900\ncommitter GitHub <noreply@github.com> 1603940930 +0900\n\nRollup merge of #78460 - varkor:turbofish-string-generic, r=lcnr\n\nAdjust turbofish help message for const generics\n\nTypes are no longer special. (This message arguably only makes sense with `min_const_generics` or more, but we'll be there soon.)\n\nr? @lcnr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a05388023b83fe7b6f39d387b17b3af7f9a653", "html_url": "https://github.com/rust-lang/rust/commit/a7a05388023b83fe7b6f39d387b17b3af7f9a653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7a05388023b83fe7b6f39d387b17b3af7f9a653/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2555e07be1bd8e25e7d5672dfa13b85ceeda3b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/2555e07be1bd8e25e7d5672dfa13b85ceeda3b80", "html_url": "https://github.com/rust-lang/rust/commit/2555e07be1bd8e25e7d5672dfa13b85ceeda3b80"}, {"sha": "a6d01da7165d904d83407c385282803b9cb71dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d01da7165d904d83407c385282803b9cb71dbb", "html_url": "https://github.com/rust-lang/rust/commit/a6d01da7165d904d83407c385282803b9cb71dbb"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "acded5351f80a5dbaa8045adf25292fe83ace8d3", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7a05388023b83fe7b6f39d387b17b3af7f9a653/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a05388023b83fe7b6f39d387b17b3af7f9a653/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a7a05388023b83fe7b6f39d387b17b3af7f9a653", "patch": "@@ -678,8 +678,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {\n         let mut inner = self.inner.borrow_mut();\n-        // FIXME(const_generics): should there be an equivalent function for const variables?\n-\n         let mut vars: Vec<Ty<'_>> = inner\n             .type_variables()\n             .unsolved_variables()"}, {"sha": "f13a4329d3b6f7cc27045afed8c01dfd0bf2cbf1", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7a05388023b83fe7b6f39d387b17b3af7f9a653/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a05388023b83fe7b6f39d387b17b3af7f9a653/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=a7a05388023b83fe7b6f39d387b17b3af7f9a653", "patch": "@@ -20,7 +20,8 @@ use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n \n use tracing::{debug, trace};\n \n-const TURBOFISH: &str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n+const TURBOFISH_SUGGESTION_STR: &str =\n+    \"use `::<...>` instead of `<...>` to specify type or const arguments\";\n \n /// Creates a placeholder argument.\n pub(super) fn dummy_arg(ident: Ident) -> Param {\n@@ -659,7 +660,7 @@ impl<'a> Parser<'a> {\n                                 Ok(_) => {\n                                     e.span_suggestion_verbose(\n                                         binop.span.shrink_to_lo(),\n-                                        \"use `::<...>` instead of `<...>` to specify type arguments\",\n+                                        TURBOFISH_SUGGESTION_STR,\n                                         \"::\".to_string(),\n                                         Applicability::MaybeIncorrect,\n                                     );\n@@ -814,7 +815,7 @@ impl<'a> Parser<'a> {\n                 let suggest = |err: &mut DiagnosticBuilder<'_>| {\n                     err.span_suggestion_verbose(\n                         op.span.shrink_to_lo(),\n-                        TURBOFISH,\n+                        TURBOFISH_SUGGESTION_STR,\n                         \"::\".to_string(),\n                         Applicability::MaybeIncorrect,\n                     );\n@@ -888,7 +889,7 @@ impl<'a> Parser<'a> {\n                         {\n                             // All we know is that this is `foo < bar >` and *nothing* else. Try to\n                             // be helpful, but don't attempt to recover.\n-                            err.help(TURBOFISH);\n+                            err.help(TURBOFISH_SUGGESTION_STR);\n                             err.help(\"or use `(...)` if you meant to specify fn arguments\");\n                         }\n "}, {"sha": "13742238a201aa47a48d000dd9e58c56fc4a8fa9", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces-without-turbofish.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a7a05388023b83fe7b6f39d387b17b3af7f9a653/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7a05388023b83fe7b6f39d387b17b3af7f9a653/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr?ref=a7a05388023b83fe7b6f39d387b17b3af7f9a653", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR + 3>();\n    |        ^       ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR + 3>();\n    |        ^^\n@@ -15,7 +15,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR + BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR + BAR>();\n    |        ^^\n@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     foo<3 + 3>();\n    |        ^     ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<3 + 3>();\n    |        ^^\n@@ -37,7 +37,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - 3>();\n    |        ^       ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - 3>();\n    |        ^^\n@@ -48,7 +48,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - BAR>();\n    |        ^^\n@@ -59,7 +59,7 @@ error: comparison operators cannot be chained\n LL |     foo<100 - BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<100 - BAR>();\n    |        ^^\n@@ -70,7 +70,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar<i32>()>();\n    |        ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar<i32>()>();\n    |        ^^\n@@ -87,7 +87,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>()>();\n    |        ^            ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar::<i32>()>();\n    |        ^^\n@@ -98,7 +98,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>() + BAR>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n    |        ^^\n@@ -109,7 +109,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>() - BAR>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n    |        ^^\n@@ -120,7 +120,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - bar::<i32>()>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |        ^^\n@@ -131,7 +131,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - bar::<i32>()>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |        ^^"}, {"sha": "2c2978d2bff2d8ad27d2240d9816e9372ad952ab", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7a05388023b83fe7b6f39d387b17b3af7f9a653/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7a05388023b83fe7b6f39d387b17b3af7f9a653/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=a7a05388023b83fe7b6f39d387b17b3af7f9a653", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     (0..13).collect<Vec<i32>>();\n    |                    ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>>();\n    |                    ^^\n@@ -15,7 +15,7 @@ error: comparison operators cannot be chained\n LL |     Vec<i32>::new();\n    |        ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     Vec::<i32>::new();\n    |        ^^\n@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     (0..13).collect<Vec<i32>();\n    |                    ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>();\n    |                    ^^\n@@ -37,7 +37,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n LL |     let x = std::collections::HashMap<i128, i128>::new();\n    |                                           ^ expected one of 7 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     let x = std::collections::HashMap::<i128, i128>::new();\n    |                                      ^^\n@@ -48,7 +48,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new()\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new()\n    |                                  ^^\n@@ -59,7 +59,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new();\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new();\n    |                                  ^^\n@@ -70,7 +70,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new(1, 2);\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new(1, 2);\n    |                                  ^^"}, {"sha": "e3ce6cd39bc24f1199612d4daae23d0ca5692f3e", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7a05388023b83fe7b6f39d387b17b3af7f9a653/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a05388023b83fe7b6f39d387b17b3af7f9a653/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=a7a05388023b83fe7b6f39d387b17b3af7f9a653", "patch": "@@ -12,15 +12,15 @@ fn main() {\n \n     f<X>();\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n \n     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n \n     use std::convert::identity;\n     let _ = identity<u8>;\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n     //~| HELP or use `(...)` if you meant to specify fn arguments\n }"}, {"sha": "afb964c17e255053e3403dc5dbe0c96a4faedaab", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7a05388023b83fe7b6f39d387b17b3af7f9a653/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7a05388023b83fe7b6f39d387b17b3af7f9a653/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=a7a05388023b83fe7b6f39d387b17b3af7f9a653", "patch": "@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     f<X>();\n    |      ^ ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     f::<X>();\n    |      ^^\n@@ -37,7 +37,7 @@ error: comparison operators cannot be chained\n LL |     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ^      ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     f::<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ^^\n@@ -48,7 +48,7 @@ error: comparison operators cannot be chained\n LL |     let _ = identity<u8>;\n    |                     ^  ^\n    |\n-   = help: use `::<...>` instead of `<...>` to specify type arguments\n+   = help: use `::<...>` instead of `<...>` to specify type or const arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: aborting due to 5 previous errors"}]}