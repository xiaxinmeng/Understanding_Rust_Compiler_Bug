{"sha": "31116dcdd52b38d5e695155188035a11bc0c4a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMTE2ZGNkZDUyYjM4ZDVlNjk1MTU1MTg4MDM1YTExYmMwYzRhMjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-14T21:39:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T16:46:37Z"}, "message": "rustc: Make room in item_mod for metadata\n\nIssue #487", "tree": {"sha": "a5176649def8e46946f252166b03bac23e981b7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5176649def8e46946f252166b03bac23e981b7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31116dcdd52b38d5e695155188035a11bc0c4a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31116dcdd52b38d5e695155188035a11bc0c4a26", "html_url": "https://github.com/rust-lang/rust/commit/31116dcdd52b38d5e695155188035a11bc0c4a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31116dcdd52b38d5e695155188035a11bc0c4a26/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f42977d9461ed8fb4aa244de99d720235515ceb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42977d9461ed8fb4aa244de99d720235515ceb0", "html_url": "https://github.com/rust-lang/rust/commit/f42977d9461ed8fb4aa244de99d720235515ceb0"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "9506829d1ae12be6afdc15d8850cd210df76b547", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -452,7 +452,7 @@ type item = spanned[item_];\n tag item_ {\n     item_const(ident, @ty, @expr, def_id, ann);\n     item_fn(ident, _fn, vec[ty_param], def_id, ann);\n-    item_mod(ident, _mod, def_id);\n+    item_mod(ident, _mod, vec[meta_item], def_id);\n     item_native_mod(ident, native_mod, def_id);\n     item_ty(ident, @ty, vec[ty_param], def_id, ann);\n     item_tag(ident, vec[variant], vec[ty_param], def_id, ann);\n@@ -463,7 +463,7 @@ fn item_ident(@item it) -> ident {\n     ret alt (it.node) {\n         case (item_const(?ident, _, _, _, _)) { ident }\n         case (item_fn(?ident, _, _, _, _)) { ident }\n-        case (item_mod(?ident, _, _)) { ident }\n+        case (item_mod(?ident, _, _, _)) { ident }\n         case (item_native_mod(?ident, _, _)) { ident }\n         case (item_ty(?ident, _, _, _, _)) { ident }\n         case (item_tag(?ident, _, _, _, _)) { ident }"}, {"sha": "cda38a46b2b4244e8d3bd84035260170c64720eb", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -381,7 +381,7 @@ fn eval_crate_directive(ctx cx,\n             cx.p.set_def(next_id._1);\n             cx.chpos = p0.get_chpos();\n             cx.next_ann = p0.next_ann_num();\n-            auto im = ast::item_mod(id, m0, next_id);\n+            auto im = ast::item_mod(id, m0, [], next_id);\n             auto i = @spanned(cdir.span.lo, cdir.span.hi, im);\n             vec::push[@ast::item](items, i);\n         }\n@@ -398,7 +398,7 @@ fn eval_crate_directive(ctx cx,\n \n             auto full_path = prefix + std::fs::path_sep() + path;\n             auto m0 = eval_crate_directives_to_mod(cx, e, cdirs, full_path);\n-            auto im = ast::item_mod(id, m0, cx.p.next_def_id());\n+            auto im = ast::item_mod(id, m0, [], cx.p.next_def_id());\n             auto i = @spanned(cdir.span.lo, cdir.span.hi, im);\n             vec::push[@ast::item](items, i);\n         }"}, {"sha": "8b06d398fc1f0f80e259e5a4ff2e23626aa3834f", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -1918,7 +1918,7 @@ fn parse_item_mod(&parser p) -> @ast::item {\n     auto m = parse_mod_items(p, token::RBRACE);\n     auto hi = p.get_hi_pos();\n     expect(p, token::RBRACE);\n-    auto item = ast::item_mod(id, m, p.next_def_id());\n+    auto item = ast::item_mod(id, m, [], p.next_def_id());\n     ret @spanned(lo, hi, item);\n }\n "}, {"sha": "dbab7dc3a24a45bbbaa00be5a8069d3c66e75ae2", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -402,7 +402,7 @@ fn encode_module_item_paths(&ebml::writer ebml_w,\n                 encode_def_id(ebml_w, did);\n                 ebml::end_tag(ebml_w);\n             }\n-            case (ast::item_mod(?id, ?_mod, ?did)) {\n+            case (ast::item_mod(?id, ?_mod, _, ?did)) {\n                 add_to_index(ebml_w, path, index, id);\n                 ebml::start_tag(ebml_w, tag_paths_data_mod);\n                 encode_name(ebml_w, id);\n@@ -560,7 +560,7 @@ fn encode_info_for_item(@trans::crate_ctxt cx, &ebml::writer ebml_w,\n             encode_symbol(cx, ebml_w, did);\n             ebml::end_tag(ebml_w);\n         }\n-        case (ast::item_mod(_, _, ?did)) {\n+        case (ast::item_mod(_, _, _, ?did)) {\n             ebml::start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, did);\n             encode_kind(ebml_w, 'm' as u8);"}, {"sha": "dae5c8d174a5b48937f207a4431c7ff8ac317949", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -158,7 +158,7 @@ fn map_crate(&@env e, &@ast::crate c) {\n     fn index_i(@env e, &@ast::item i, &scopes sc, &vt[scopes] v) {\n         visit_item_with_scope(i, sc, v);\n         alt (i.node) {\n-            case (ast::item_mod(_, ?md, ?defid)) {\n+            case (ast::item_mod(_, ?md, _, ?defid)) {\n                 e.mod_map.insert(defid._1, \n                                  @rec(m=some(md), index=index_mod(md),\n                                       mutable glob_imports=vec::empty[def](),\n@@ -207,7 +207,7 @@ fn map_crate(&@env e, &@ast::crate c) {\n             alt (sc) {\n                 case (cons(scope_item(?i), ?tl)) {\n                     alt(i.node) {\n-                        case (ast::item_mod(_, _, ?defid)) {\n+                        case (ast::item_mod(_, _, _, ?defid)) {\n                             ret e.mod_map.get(defid._1);\n                         }\n                         case (ast::item_native_mod(_, _, ?defid)) {\n@@ -520,7 +520,7 @@ fn lookup_in_scope(&env e, scopes sc, &span sp, &ident id, namespace ns)\n                             ret lookup_in_ty_params(id, ty_params);\n                         }\n                     }\n-                    case (ast::item_mod(_, _, ?defid)) {\n+                    case (ast::item_mod(_, _, _, ?defid)) {\n                         ret lookup_in_local_mod(e, defid, sp, id, ns, inside);\n                     }\n                     case (ast::item_native_mod(_, ?m, ?defid)) {\n@@ -711,7 +711,7 @@ fn found_def_item(&@ast::item i, namespace ns) -> option::t[def] {\n         case (ast::item_fn(_, _, _, ?defid, _)) {\n             if (ns == ns_value) { ret some(ast::def_fn(defid)); }\n         }\n-        case (ast::item_mod(_, _, ?defid)) {\n+        case (ast::item_mod(_, _, _, ?defid)) {\n             if (ns == ns_module) { ret some(ast::def_mod(defid)); }\n         }\n         case (ast::item_native_mod(_, _, ?defid)) {\n@@ -976,7 +976,7 @@ fn index_mod(&ast::_mod md) -> mod_index {\n             case (ast::item_fn(?id, _, _, _, _)) {\n                 add_to_index(index, id, mie_item(it));\n             }\n-            case (ast::item_mod(?id, _, _)) {\n+            case (ast::item_mod(?id, _, _, _)) {\n                 add_to_index(index, id, mie_item(it));\n             }\n             case (ast::item_native_mod(?id, _, _)) {\n@@ -1189,7 +1189,7 @@ fn check_block(@env e, &ast::block b, &() x, &vt[()] v) {\n                             case (ast::item_fn(?name, _, _, _, _)) {\n                                 add_name(values, it.span, name);\n                             }\n-                            case (ast::item_mod(?name, _, _)) {\n+                            case (ast::item_mod(?name, _, _, _)) {\n                                 add_name(mods, it.span, name);\n                             }\n                             case (ast::item_native_mod(?name, _, _)) {"}, {"sha": "25b4c869b32fb392b3fc28ff222577a350d79b31", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -8165,7 +8165,7 @@ fn trans_item(@local_ctxt cx, &ast::item item) {\n                                *extend_path(cx, name));\n             trans_obj(sub_cx, item.span, ob, oid.ctor, tps, ann);\n         }\n-        case (ast::item_mod(?name, ?m, _)) {\n+        case (ast::item_mod(?name, ?m, _, _)) {\n             auto sub_cx = @rec(path = cx.path + [name],\n                                module_path = cx.module_path + [name]\n                                with *cx);\n@@ -8488,7 +8488,7 @@ fn item_path(&@ast::item item) -> vec[str] {\n     alt (item.node) {\n         case (ast::item_fn(?name, _, _, _, _)) { ret [name]; }\n         case (ast::item_obj(?name, _, _, _, _)) { ret [name]; }\n-        case (ast::item_mod(?name, _, _)) { ret [name]; }\n+        case (ast::item_mod(?name, _, _, _)) { ret [name]; }\n         case (_) { ret []; }\n     }\n }\n@@ -8521,7 +8521,7 @@ fn collect_item_1(@crate_ctxt ccx, &@ast::item i,\n             ccx.items.insert(cid, i);\n             ccx.consts.insert(cid, g);\n         }\n-        case (ast::item_mod(?name, ?m, ?mid)) {\n+        case (ast::item_mod(?name, ?m, _, ?mid)) {\n             ccx.items.insert(mid, i);\n         }\n         case (ast::item_native_mod(_, _, ?mid)) {"}, {"sha": "b72816840150b7c0cc3ced718e5f6185b9e3a852", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -118,7 +118,7 @@ fn find_pre_post_item(&crate_ctxt ccx, &item i) -> () {\n                            id=di, name=id, ccx=ccx);\n             find_pre_post_fn(fcx, f);\n         }\n-        case (item_mod(?id, ?m, ?di)) {\n+        case (item_mod(?id, ?m, _, ?di)) {\n             find_pre_post_mod(m);\n         }\n         case (item_native_mod(?id, ?nm, ?di)) {"}, {"sha": "d2c306425da40b88621eedc9019ea3664e64bf56", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -1629,7 +1629,7 @@ fn item_ann(&@ast::item it) -> ast::ann {\n     alt (it.node) {\n         case (ast::item_const(_,_,_,_,?a)) { ret a; }\n         case (ast::item_fn(_,_,_,_,?a)) { ret a; }\n-        case (ast::item_mod(_,_,_)) {\n+        case (ast::item_mod(_,_,_, _)) {\n             log_err \"a module was passed to item_ann(), \" +\n                 \"but modules haven't annotations\";\n             fail;"}, {"sha": "210cf3ba0b7c34e24b576e5f96e51a9bfd823b2e", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -647,7 +647,7 @@ mod collect {\n                 ret tpt;\n             }\n \n-            case (ast::item_mod(_, _, _)) { fail; }\n+            case (ast::item_mod(_, _, _, _)) { fail; }\n             case (ast::item_native_mod(_, _, _)) { fail; }\n         }\n     }\n@@ -756,7 +756,7 @@ mod collect {\n     fn convert(@ctxt cx, @mutable option::t[ast::native_abi] abi,\n                &@ast::item it) {\n         alt (it.node) {\n-            case (ast::item_mod(_, _, _)) {\n+            case (ast::item_mod(_, _, _, _)) {\n                 // ignore item_mod, it has no type.\n             }\n             case (ast::item_native_mod(_, ?native_mod, _)) {"}, {"sha": "b8c10fabf91d61da3ed585a442cf53794d1bd9c0", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -111,7 +111,7 @@ fn visit_item[E](&@item i, &E e, &vt[E] v) {\n         case (item_fn(?nm, ?f, ?tp, ?d, ?a)) {\n             vt(v).visit_fn(f, tp, i.span, nm, d, a, e, v);\n         }\n-        case (item_mod(_, ?m, _)) {\n+        case (item_mod(_, ?m, _, _)) {\n             vt(v).visit_mod(m, i.span, e, v);\n         }\n         case (item_native_mod(_, ?nm, _)) {"}, {"sha": "a7cf0ade136f2aa0dc21a29fd658b0b1b79e0463", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -121,7 +121,7 @@ fn walk_item(&ast_visitor v, @ast::item i) {\n         case (ast::item_fn(?nm, ?f, _, ?d, ?a)) {\n             walk_fn(v, f, i.span, nm, d, a);\n         }\n-        case (ast::item_mod(_, ?m, _)) {\n+        case (ast::item_mod(_, ?m, _, _)) {\n             walk_mod(v, m);\n         }\n         case (ast::item_native_mod(_, ?nm, _)) {"}, {"sha": "ee584c81fcb32f9c2a22c95a53cac22894c02c70", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -273,7 +273,7 @@ fn print_item(&ps s, &@ast::item item) {\n             word(s.s, \" \");\n             print_block(s, _fn.body);\n         }\n-        case (ast::item_mod(?id,?_mod,_)) {\n+        case (ast::item_mod(?id,?_mod,_,_)) {\n             head(s, \"mod\");\n             word_nbsp(s, id);\n             bopen(s);"}, {"sha": "263c74f24d7b8ed8732d0e07aecf8096544c51e1", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31116dcdd52b38d5e695155188035a11bc0c4a26/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=31116dcdd52b38d5e695155188035a11bc0c4a26", "patch": "@@ -187,7 +187,7 @@ fn decl_lhs(@ast::decl d) -> ast::def_id {\n                 case (ast::item_fn(_,_,_,?d,_)) {\n                     ret d;\n                 }\n-                case (ast::item_mod(_,_,?d)) {\n+                case (ast::item_mod(_,_,_,?d)) {\n                     ret d;\n                 }\n                 case (ast::item_native_mod(_,_,?d)) {"}]}