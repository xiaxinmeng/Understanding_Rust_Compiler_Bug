{"sha": "262a344d7245f242586d5d5a0cc5c892f45891c4", "node_id": "C_kwDOAAsO6NoAKDI2MmEzNDRkNzI0NWYyNDI1ODZkNWQ1YTBjYzVjODkyZjQ1ODkxYzQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-04T01:59:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-16T03:39:58Z"}, "message": "Add feature gate for non_lifetime_binders", "tree": {"sha": "64056e43c3c970c02c120d8abfa9453860515ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64056e43c3c970c02c120d8abfa9453860515ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/262a344d7245f242586d5d5a0cc5c892f45891c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/262a344d7245f242586d5d5a0cc5c892f45891c4", "html_url": "https://github.com/rust-lang/rust/commit/262a344d7245f242586d5d5a0cc5c892f45891c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/262a344d7245f242586d5d5a0cc5c892f45891c4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5283576ec18937d98889679a54aa8f2dee2b875", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5283576ec18937d98889679a54aa8f2dee2b875", "html_url": "https://github.com/rust-lang/rust/commit/c5283576ec18937d98889679a54aa8f2dee2b875"}], "stats": {"total": 230, "additions": 155, "deletions": 75}, "files": [{"sha": "632c626b27e36404b422129d84e40c34c5ea7f36", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -294,27 +294,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_late_bound_lifetime_defs(&self, params: &[GenericParam]) {\n-        // Check only lifetime parameters are present and that the lifetime\n-        // parameters that are present have no bounds.\n-        let non_lt_param_spans: Vec<_> = params\n-            .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. } => {\n-                    if !param.bounds.is_empty() {\n-                        let spans: Vec<_> = param.bounds.iter().map(|b| b.span()).collect();\n-                        self.session.emit_err(ForbiddenLifetimeBound { spans });\n-                    }\n-                    None\n-                }\n-                _ => Some(param.ident.span),\n-            })\n-            .collect();\n-        if !non_lt_param_spans.is_empty() {\n-            self.session.emit_err(ForbiddenNonLifetimeParam { spans: non_lt_param_spans });\n-        }\n-    }\n-\n     fn check_fn_decl(&self, fn_decl: &FnDecl, self_semantic: SelfSemantic) {\n         self.check_decl_num_args(fn_decl);\n         self.check_decl_cvaradic_pos(fn_decl);\n@@ -745,7 +724,6 @@ impl<'a> AstValidator<'a> {\n                     )\n                     .emit();\n                 });\n-                self.check_late_bound_lifetime_defs(&bfty.generic_params);\n                 if let Extern::Implicit(_) = bfty.ext {\n                     let sig_span = self.session.source_map().next_point(ty.span.shrink_to_lo());\n                     self.maybe_lint_missing_abi(sig_span, ty.id);\n@@ -1318,9 +1296,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         for predicate in &generics.where_clause.predicates {\n             match predicate {\n                 WherePredicate::BoundPredicate(bound_pred) => {\n-                    // A type binding, eg `for<'c> Foo: Send+Clone+'c`\n-                    self.check_late_bound_lifetime_defs(&bound_pred.bound_generic_params);\n-\n                     // This is slightly complicated. Our representation for poly-trait-refs contains a single\n                     // binder and thus we only allow a single level of quantification. However,\n                     // the syntax of Rust permits quantification in two places in where clauses,\n@@ -1396,11 +1371,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_param_bound(self, bound)\n     }\n \n-    fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef) {\n-        self.check_late_bound_lifetime_defs(&t.bound_generic_params);\n-        visit::walk_poly_trait_ref(self, t);\n-    }\n-\n     fn visit_variant_data(&mut self, s: &'a VariantData) {\n         self.with_banned_assoc_ty_bound(|this| visit::walk_struct_def(this, s))\n     }\n@@ -1437,10 +1407,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 .emit();\n         }\n \n-        if let FnKind::Closure(ClosureBinder::For { generic_params, .. }, ..) = fk {\n-            self.check_late_bound_lifetime_defs(generic_params);\n-        }\n-\n         if let FnKind::Fn(\n             _,\n             _,"}, {"sha": "3af2ef4e7271eae2db53c73473882d5f205e8750", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -11,6 +11,8 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi;\n \n+use crate::errors::ForbiddenLifetimeBound;\n+\n macro_rules! gate_feature_fn {\n     ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $help: expr) => {{\n         let (visitor, has_feature, span, name, explain, help) =\n@@ -136,6 +138,34 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n         ImplTraitVisitor { vis: self }.visit_ty(ty);\n     }\n+\n+    fn check_late_bound_lifetime_defs(&self, params: &[ast::GenericParam]) {\n+        // Check only lifetime parameters are present and that the lifetime\n+        // parameters that are present have no bounds.\n+        let non_lt_param_spans: Vec<_> = params\n+            .iter()\n+            .filter_map(|param| match param.kind {\n+                ast::GenericParamKind::Lifetime { .. } => None,\n+                _ => Some(param.ident.span),\n+            })\n+            .collect();\n+        // FIXME: gate_feature_post doesn't really handle multispans...\n+        if !non_lt_param_spans.is_empty() && !self.features.non_lifetime_binders {\n+            feature_err(\n+                &self.sess.parse_sess,\n+                sym::non_lifetime_binders,\n+                non_lt_param_spans,\n+                rustc_errors::fluent::ast_passes_forbidden_non_lifetime_param,\n+            )\n+            .emit();\n+        }\n+        for param in params {\n+            if !param.bounds.is_empty() {\n+                let spans: Vec<_> = param.bounds.iter().map(|b| b.span()).collect();\n+                self.sess.emit_err(ForbiddenLifetimeBound { spans });\n+            }\n+        }\n+    }\n }\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n@@ -147,7 +177,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ..\n         }) = attr_info\n         {\n-            gate_feature_fn!(self, has_feature, attr.span, *name, descr);\n+            gate_feature_fn!(self, has_feature, attr.span, *name, *descr);\n         }\n         // Check unstable flavors of the `#[doc]` attribute.\n         if attr.has_name(sym::doc) {\n@@ -306,6 +336,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(bare_fn_ty) => {\n                 // Function pointers cannot be `const`\n                 self.check_extern(bare_fn_ty.ext, ast::Const::No);\n+                self.check_late_bound_lifetime_defs(&bare_fn_ty.generic_params);\n             }\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span, \"the `!` type is experimental\");\n@@ -318,6 +349,19 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_ty(self, ty)\n     }\n \n+    fn visit_generics(&mut self, g: &'a ast::Generics) {\n+        for predicate in &g.where_clause.predicates {\n+            match predicate {\n+                ast::WherePredicate::BoundPredicate(bound_pred) => {\n+                    // A type binding, eg `for<'c> Foo: Send+Clone+'c`\n+                    self.check_late_bound_lifetime_defs(&bound_pred.bound_generic_params);\n+                }\n+                _ => {}\n+            }\n+        }\n+        visit::walk_generics(self, g);\n+    }\n+\n     fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FnRetTy) {\n         if let ast::FnRetTy::Ty(output_ty) = ret_ty {\n             if let ast::TyKind::Never = output_ty.kind {\n@@ -437,12 +481,21 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_pat(self, pattern)\n     }\n \n+    fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {\n+        self.check_late_bound_lifetime_defs(&t.bound_generic_params);\n+        visit::walk_poly_trait_ref(self, t);\n+    }\n+\n     fn visit_fn(&mut self, fn_kind: FnKind<'a>, span: Span, _: NodeId) {\n         if let Some(header) = fn_kind.header() {\n             // Stability of const fn methods are covered in `visit_assoc_item` below.\n             self.check_extern(header.ext, header.constness);\n         }\n \n+        if let FnKind::Closure(ast::ClosureBinder::For { generic_params, .. }, ..) = fn_kind {\n+            self.check_late_bound_lifetime_defs(generic_params);\n+        }\n+\n         if fn_kind.ctxt() != Some(FnCtxt::Foreign) && fn_kind.decl().c_variadic() {\n             gate_feature_post!(&self, c_variadic, span, \"C-variadic functions are unstable\");\n         }"}, {"sha": "3d240108b4ab103585579176758d4c8e330a2377", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -731,7 +731,7 @@ pub fn eval_condition(\n                             sess,\n                             sym::cfg_target_compact,\n                             cfg.span,\n-                            &\"compact `cfg(target(..))` is experimental and subject to change\"\n+                            \"compact `cfg(target(..))` is experimental and subject to change\"\n                         ).emit();\n                     }\n "}, {"sha": "b96766f4245fd26092b68479b42aca859ff580d5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -473,6 +473,8 @@ declare_features! (\n     (active, no_sanitize, \"1.42.0\", Some(39699), None),\n     /// Allows using the `non_exhaustive_omitted_patterns` lint.\n     (active, non_exhaustive_omitted_patterns_lint, \"1.57.0\", Some(89554), None),\n+    /// Allows `for<T>` binders in where-clauses\n+    (incomplete, non_lifetime_binders, \"CURRENT_RUSTC_VERSION\", Some(1), None),\n     /// Allows making `dyn Trait` well-formed even if `Trait` is not object safe.\n     /// In that case, `dyn Trait: Trait` does not hold. Moreover, coercions and\n     /// casts in safe Rust to `dyn Trait` for such a `Trait` is also forbidden."}, {"sha": "bb1327fc7c7b7d0b03d6c99ce5d21926e3b50a03", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -4,7 +4,7 @@ use crate::cgu_reuse_tracker::CguReuse;\n use crate::parse::ParseSess;\n use rustc_ast::token;\n use rustc_ast::util::literal::LitError;\n-use rustc_errors::MultiSpan;\n+use rustc_errors::{error_code, DiagnosticMessage, EmissionGuarantee, IntoDiagnostic, MultiSpan};\n use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n@@ -27,12 +27,22 @@ pub struct CguNotRecorded<'a> {\n     pub cgu_name: &'a str,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(session_feature_gate_error, code = \"E0658\")]\n-pub struct FeatureGateError<'a> {\n-    #[primary_span]\n+pub struct FeatureGateError {\n     pub span: MultiSpan,\n-    pub explain: &'a str,\n+    pub explain: DiagnosticMessage,\n+}\n+\n+impl<'a, T: EmissionGuarantee> IntoDiagnostic<'a, T> for FeatureGateError {\n+    #[track_caller]\n+    fn into_diagnostic(\n+        self,\n+        handler: &'a rustc_errors::Handler,\n+    ) -> rustc_errors::DiagnosticBuilder<'a, T> {\n+        let mut diag = handler.struct_diagnostic(self.explain);\n+        diag.set_span(self.span);\n+        diag.code(error_code!(E0658));\n+        diag\n+    }\n }\n \n #[derive(Subdiagnostic)]"}, {"sha": "cbdcc5581e5eea3146980c55f926b278c95bf79b", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -88,7 +88,7 @@ pub fn feature_err<'a>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n     span: impl Into<MultiSpan>,\n-    explain: &str,\n+    explain: impl Into<DiagnosticMessage>,\n ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n }\n@@ -103,7 +103,7 @@ pub fn feature_err_issue<'a>(\n     feature: Symbol,\n     span: impl Into<MultiSpan>,\n     issue: GateIssue,\n-    explain: &str,\n+    explain: impl Into<DiagnosticMessage>,\n ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     let span = span.into();\n \n@@ -114,7 +114,7 @@ pub fn feature_err_issue<'a>(\n             .map(|err| err.cancel());\n     }\n \n-    let mut err = sess.create_err(FeatureGateError { span, explain });\n+    let mut err = sess.create_err(FeatureGateError { span, explain: explain.into() });\n     add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n     err\n }"}, {"sha": "37d2aea42ad8f40284609a8d118e61700373bf9c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -1016,6 +1016,7 @@ symbols! {\n         non_ascii_idents,\n         non_exhaustive,\n         non_exhaustive_omitted_patterns_lint,\n+        non_lifetime_binders,\n         non_modrs_mods,\n         nontemporal_store,\n         noop_method_borrow,"}, {"sha": "a3427e21cde2d7e957b3b33a75c93f5290172238", "filename": "tests/ui/bounds-lifetime.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fbounds-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fbounds-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbounds-lifetime.stderr?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -16,17 +16,24 @@ error: lifetime bounds cannot be used in this context\n LL | type C = for<'b, 'a: 'b +> fn();\n    |                      ^^\n \n-error: only lifetime parameters can be used in this context\n+error[E0658]: only lifetime parameters can be used in this context\n   --> $DIR/bounds-lifetime.rs:4:18\n    |\n LL | type D = for<'a, T> fn();\n    |                  ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n-error: only lifetime parameters can be used in this context\n+error[E0658]: only lifetime parameters can be used in this context\n   --> $DIR/bounds-lifetime.rs:5:18\n    |\n LL | type E = dyn for<T> Fn();\n    |                  ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9f4deaa774dd76ba2e18ffa7344624127463fa31", "filename": "tests/ui/closures/binder/disallow-const.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-const.stderr?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -1,8 +1,12 @@\n-error: only lifetime parameters can be used in this context\n+error[E0658]: only lifetime parameters can be used in this context\n   --> $DIR/disallow-const.rs:4:15\n    |\n LL |     for<const N: i32> || -> () {};\n    |               ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "22882ca2ba67ac4af6de0f7919edae809ffb6b4d", "filename": "tests/ui/closures/binder/disallow-ty.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Fdisallow-ty.stderr?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -1,8 +1,12 @@\n-error: only lifetime parameters can be used in this context\n+error[E0658]: only lifetime parameters can be used in this context\n   --> $DIR/disallow-ty.rs:4:9\n    |\n LL |     for<T> || -> () {};\n    |         ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "69b0f74115684fc2de26ee4dad1fd41735a05f7e", "filename": "tests/ui/conditional-compilation/cfg-generic-params.stderr", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -1,21 +1,3 @@\n-error: only lifetime parameters can be used in this context\n-  --> $DIR/cfg-generic-params.rs:7:45\n-   |\n-LL | type FnBad = for<#[cfg(no)] 'a, #[cfg(yes)] T> fn();\n-   |                                             ^\n-\n-error: only lifetime parameters can be used in this context\n-  --> $DIR/cfg-generic-params.rs:11:51\n-   |\n-LL | type PolyBad = dyn for<#[cfg(no)] 'a, #[cfg(yes)] T> Copy;\n-   |                                                   ^\n-\n-error: only lifetime parameters can be used in this context\n-  --> $DIR/cfg-generic-params.rs:15:54\n-   |\n-LL | struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n-   |                                                      ^\n-\n error: cannot find attribute `unknown` in this scope\n   --> $DIR/cfg-generic-params.rs:19:29\n    |\n@@ -46,5 +28,33 @@ error: cannot find attribute `unknown` in this scope\n LL | struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n    |                                           ^^^^^^^\n \n+error[E0658]: only lifetime parameters can be used in this context\n+  --> $DIR/cfg-generic-params.rs:7:45\n+   |\n+LL | type FnBad = for<#[cfg(no)] 'a, #[cfg(yes)] T> fn();\n+   |                                             ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n+\n+error[E0658]: only lifetime parameters can be used in this context\n+  --> $DIR/cfg-generic-params.rs:11:51\n+   |\n+LL | type PolyBad = dyn for<#[cfg(no)] 'a, #[cfg(yes)] T> Copy;\n+   |                                                   ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n+\n+error[E0658]: only lifetime parameters can be used in this context\n+  --> $DIR/cfg-generic-params.rs:15:54\n+   |\n+LL | struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n+   |                                                      ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n+\n error: aborting due to 8 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "221e9133fcc6b67750d064b8b19907c3dd2282b0", "filename": "tests/ui/feature-gates/feature-gate-non_lifetime_binders.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Ffeature-gates%2Ffeature-gate-non_lifetime_binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Ffeature-gates%2Ffeature-gate-non_lifetime_binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-non_lifetime_binders.rs?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -0,0 +1,4 @@\n+fn foo() where for<T> T:, {}\n+//~^ ERROR only lifetime parameters can be used in this context\n+\n+fn main() {}"}, {"sha": "75645e324017d833f833c52d1237662558940c4a", "filename": "tests/ui/feature-gates/feature-gate-non_lifetime_binders.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Ffeature-gates%2Ffeature-gate-non_lifetime_binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Ffeature-gates%2Ffeature-gate-non_lifetime_binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-non_lifetime_binders.stderr?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: only lifetime parameters can be used in this context\n+  --> $DIR/feature-gate-non_lifetime_binders.rs:1:20\n+   |\n+LL | fn foo() where for<T> T:, {}\n+   |                    ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d605c9e0df7e41af48c57f9ebe5e601d0abb6f6a", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-wrong-kind.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.stderr?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -1,14 +1,21 @@\n-error: only lifetime parameters can be used in this context\n+error[E0658]: only lifetime parameters can be used in this context\n   --> $DIR/hrtb-wrong-kind.rs:1:18\n    |\n LL | fn a() where for<T> T: Copy {}\n    |                  ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n-error: only lifetime parameters can be used in this context\n+error[E0658]: only lifetime parameters can be used in this context\n   --> $DIR/hrtb-wrong-kind.rs:4:24\n    |\n LL | fn b() where for<const C: usize> [(); C]: Copy {}\n    |                        ^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(non_lifetime_binders)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "069fcffe9a0dfbed581f0441ce4698b6e4964804", "filename": "tests/ui/parser/recover-fn-ptr-with-generics.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fparser%2Frecover-fn-ptr-with-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/262a344d7245f242586d5d5a0cc5c892f45891c4/tests%2Fui%2Fparser%2Frecover-fn-ptr-with-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-fn-ptr-with-generics.stderr?ref=262a344d7245f242586d5d5a0cc5c892f45891c4", "patch": "@@ -88,12 +88,6 @@ error: expected identifier, found `>`\n LL |     type QuiteBroken = fn<const>();\n    |                                ^ expected identifier\n \n-error: lifetime bounds cannot be used in this context\n-  --> $DIR/recover-fn-ptr-with-generics.rs:22:26\n-   |\n-LL |     let _: extern fn<'a: 'static>();\n-   |                          ^^^^^^^\n-\n error[E0412]: cannot find type `T` in this scope\n   --> $DIR/recover-fn-ptr-with-generics.rs:5:27\n    |\n@@ -106,6 +100,12 @@ error[E0412]: cannot find type `T` in this scope\n LL |     type Identity = fn<T>(T) -> T;\n    |                                 ^ not found in this scope\n \n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/recover-fn-ptr-with-generics.rs:22:26\n+   |\n+LL |     let _: extern fn<'a: 'static>();\n+   |                          ^^^^^^^\n+\n error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0412`."}]}