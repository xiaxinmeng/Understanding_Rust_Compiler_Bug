{"sha": "04f5d54d132d8469acf888e5ad6e39748ab53a1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZjVkNTRkMTMyZDg0NjlhY2Y4ODhlNWFkNmUzOTc0OGFiNTNhMWY=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-02-25T13:31:07Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T09:24:36Z"}, "message": "perf: Limit leak check snapshotting to probe_maybe_skip_leak_check", "tree": {"sha": "54791b1baa24848e1c7a32cf090428955c1ab90b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54791b1baa24848e1c7a32cf090428955c1ab90b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04f5d54d132d8469acf888e5ad6e39748ab53a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04f5d54d132d8469acf888e5ad6e39748ab53a1f", "html_url": "https://github.com/rust-lang/rust/commit/04f5d54d132d8469acf888e5ad6e39748ab53a1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04f5d54d132d8469acf888e5ad6e39748ab53a1f/comments", "author": null, "committer": null, "parents": [{"sha": "eb7ed0c917310592a05c5e2257986c6ba13d18b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7ed0c917310592a05c5e2257986c6ba13d18b6", "html_url": "https://github.com/rust-lang/rust/commit/eb7ed0c917310592a05c5e2257986c6ba13d18b6"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "df8119bfa54e3466137836616d0f7dbf97281f75", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/04f5d54d132d8469acf888e5ad6e39748ab53a1f/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f5d54d132d8469acf888e5ad6e39748ab53a1f/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=04f5d54d132d8469acf888e5ad6e39748ab53a1f", "patch": "@@ -918,7 +918,6 @@ pub struct CombinedSnapshot<'a, 'tcx> {\n     region_obligations_snapshot: usize,\n     universe: ty::UniverseIndex,\n     was_in_snapshot: bool,\n-    was_skip_leak_check: bool,\n     _in_progress_tables: Option<Ref<'a, ty::TypeckTables<'tcx>>>,\n }\n \n@@ -1056,7 +1055,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             region_obligations_snapshot: inner.region_obligations.len(),\n             universe: self.universe(),\n             was_in_snapshot: in_snapshot,\n-            was_skip_leak_check: self.skip_leak_check.get(),\n             // Borrow tables \"in progress\" (i.e., during typeck)\n             // to ban writes from within a snapshot to them.\n             _in_progress_tables: self.in_progress_tables.map(|tables| tables.borrow()),\n@@ -1070,13 +1068,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             region_obligations_snapshot,\n             universe,\n             was_in_snapshot,\n-            was_skip_leak_check,\n             _in_progress_tables,\n         } = snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n         self.universe.set(universe);\n-        self.skip_leak_check.set(was_skip_leak_check);\n \n         let InferCtxtInner {\n             type_variables,\n@@ -1110,12 +1106,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             region_obligations_snapshot: _,\n             universe: _,\n             was_in_snapshot,\n-            was_skip_leak_check,\n             _in_progress_tables,\n         } = snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n-        self.skip_leak_check.set(was_skip_leak_check);\n \n         let mut inner = self.inner.borrow_mut();\n         inner.undo_log.commit(undo_snapshot);\n@@ -1183,10 +1177,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     {\n         debug!(\"probe()\");\n         let snapshot = self.start_snapshot();\n-        let skip_leak_check = should_skip || self.skip_leak_check.get();\n-        self.skip_leak_check.set(skip_leak_check);\n+        let was_skip_leak_check = self.skip_leak_check.get();\n+        if should_skip {\n+            self.skip_leak_check.set(true);\n+        }\n         let r = f(&snapshot);\n         self.rollback_to(\"probe\", snapshot);\n+        self.skip_leak_check.set(was_skip_leak_check);\n         r\n     }\n "}]}