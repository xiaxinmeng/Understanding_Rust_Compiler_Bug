{"sha": "6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "node_id": "C_kwDOAAsO6NoAKDZiYTZkMjJiZGY1MzQ4ZTU2NmRlZGM3N2E3ZGZlZTNmMzgwNGYyZmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T02:09:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T02:09:45Z"}, "message": "Auto merge of #107052 - compiler-errors:rollup-vxr22g5, r=compiler-errors\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #105796 (rustdoc: simplify JS search routine by not messing with lev distance)\n - #106753 (Make sure that RPITITs are not considered suggestable)\n - #106917 (Encode const mir for closures if they're const)\n - #107004 (Implement some candidates for the new solver (redux))\n - #107023 (Stop using `BREAK` & `CONTINUE` in compiler)\n - #107030 (Correct typo)\n - #107042 (rustdoc: fix corner cases with \"?\" JS keyboard command)\n - #107045 (rustdoc: remove redundant CSS rule `#settings .setting-line`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a692060b061247109fb5a7302e39fc0b30c3dd9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a692060b061247109fb5a7302e39fc0b30c3dd9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "html_url": "https://github.com/rust-lang/rust/commit/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b11574ca07f95dd33861d145a43708c20cb4eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b11574ca07f95dd33861d145a43708c20cb4eb5", "html_url": "https://github.com/rust-lang/rust/commit/8b11574ca07f95dd33861d145a43708c20cb4eb5"}, {"sha": "e12c6b277fab3aa401d38b89b0b3ec8fc96c8bde", "url": "https://api.github.com/repos/rust-lang/rust/commits/e12c6b277fab3aa401d38b89b0b3ec8fc96c8bde", "html_url": "https://github.com/rust-lang/rust/commit/e12c6b277fab3aa401d38b89b0b3ec8fc96c8bde"}], "stats": {"total": 975, "additions": 736, "deletions": 239}, "files": [{"sha": "ca6b01d8a8a7a13483b2acf015384be90d7e9bcd", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -225,7 +225,7 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n     /// `align_offset(ptr, target_align)` needs special handling in const eval, because the pointer\n     /// may not have an address.\n     ///\n-    /// If `ptr` does have a known address, then we return `CONTINUE` and the function call should\n+    /// If `ptr` does have a known address, then we return `Continue(())` and the function call should\n     /// proceed as normal.\n     ///\n     /// If `ptr` doesn't have an address, but its underlying allocation's alignment is at most\n@@ -273,18 +273,18 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n                         ret,\n                         StackPopUnwind::NotAllowed,\n                     )?;\n-                    Ok(ControlFlow::BREAK)\n+                    Ok(ControlFlow::Break(()))\n                 } else {\n                     // Not alignable in const, return `usize::MAX`.\n                     let usize_max = Scalar::from_machine_usize(self.machine_usize_max(), self);\n                     self.write_scalar(usize_max, dest)?;\n                     self.return_to_block(ret)?;\n-                    Ok(ControlFlow::BREAK)\n+                    Ok(ControlFlow::Break(()))\n                 }\n             }\n             Err(_addr) => {\n                 // The pointer has an address, continue with function call.\n-                Ok(ControlFlow::CONTINUE)\n+                Ok(ControlFlow::Continue(()))\n             }\n         }\n     }"}, {"sha": "cabc65e2c077e674d356938d939341dbb8bafb54", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -26,7 +26,7 @@ where\n \n         fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if !ty.needs_subst() {\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n \n             match *ty.kind() {\n@@ -48,7 +48,7 @@ where\n                             return subst.visit_with(self);\n                         }\n                     }\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n                 _ => ty.super_visit_with(self),\n             }"}, {"sha": "57b91df2d0708f8f06e35438518c51b6f148df6c", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -6,7 +6,6 @@ Rust MIR: a lowered representation of Rust.\n \n #![feature(assert_matches)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n #![feature(let_chains)]"}, {"sha": "8a9af300c066ef2ba1cfed4e9ef73e8606c77f9a", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -317,12 +317,12 @@ where\n         _node: G::Node,\n         _prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     /// Called after all nodes reachable from this one have been examined.\n     fn node_settled(&mut self, _node: G::Node) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     /// Behave as if no edges exist from `source` to `target`.\n@@ -346,8 +346,8 @@ where\n         prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n         match prior_status {\n-            Some(NodeStatus::Visited) => ControlFlow::BREAK,\n-            _ => ControlFlow::CONTINUE,\n+            Some(NodeStatus::Visited) => ControlFlow::Break(()),\n+            _ => ControlFlow::Continue(()),\n         }\n     }\n }"}, {"sha": "954e84c303b83d031cc4b2be76c56b4e90e1cea1", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -11,7 +11,6 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(cell_leak)]\n-#![feature(control_flow_enum)]\n #![feature(extend_one)]\n #![feature(hash_raw_entry)]\n #![feature(hasher_prefixfree_extras)]"}, {"sha": "d5e4b4cb9e7281b3490a288da82c7128f1869668", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -267,7 +267,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(?t, \"root_visit_ty\");\n             if t == self.opaque_identity_ty {\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             } else {\n                 t.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n                     tcx: self.tcx,\n@@ -282,7 +282,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n                 if self.references_parent_regions {\n                     ControlFlow::Break(t)\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n         }\n@@ -1439,7 +1439,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> E\n                         match *t.kind() {\n                             ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n                                 self.0.push(def);\n-                                ControlFlow::CONTINUE\n+                                ControlFlow::Continue(())\n                             }\n                             _ => t.super_visit_with(self),\n                         }"}, {"sha": "8739228e207b07e0eb1daa71c41e7e85c4dbf948", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -1428,7 +1428,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                 }\n \n                 fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                    ControlFlow::BREAK\n+                    ControlFlow::Break(())\n                 }\n \n                 fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "0d070f3d118e034a0d0ce7e5119808c96444c03a", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -416,13 +416,13 @@ fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty:\n             if t != self.self_ty_root {\n                 for impl_def_id in tcx.non_blanket_impls_for_ty(self.trait_def_id, t) {\n                     match tcx.impl_polarity(impl_def_id) {\n-                        ImplPolarity::Negative => return ControlFlow::BREAK,\n+                        ImplPolarity::Negative => return ControlFlow::Break(()),\n                         ImplPolarity::Reservation => {}\n                         // FIXME(@lcnr): That's probably not good enough, idk\n                         //\n                         // We might just want to take the rustdoc code and somehow avoid\n                         // explicit impls for `Self`.\n-                        ImplPolarity::Positive => return ControlFlow::CONTINUE,\n+                        ImplPolarity::Positive => return ControlFlow::Continue(()),\n                     }\n                 }\n             }\n@@ -440,7 +440,7 @@ fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty:\n                         }\n                     }\n \n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n                 _ => t.super_visit_with(self),\n             }"}, {"sha": "56cc1d8fadc00e7ac6e9611c18dd0f5bcdf3039a", "filename": "compiler/rustc_hir_analysis/src/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n         match *t.kind() {\n             ty::Alias(ty::Projection, ..) if !self.include_nonconstraining => {\n                 // projections are not injective\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n             ty::Param(data) => {\n                 self.parameters.push(Parameter::from(data));\n@@ -76,7 +76,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n         if let ty::ReEarlyBound(data) = *r {\n             self.parameters.push(Parameter::from(data));\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "079070be27983a8c72f5d04120ffff76e660ed81", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -92,7 +92,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n                         a.visit_with(self)?;\n                     }\n                 }\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             } else {\n                 substs.visit_with(self)\n             }"}, {"sha": "12a2abfa76a921d5402860d134f10c68ad8805ce", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -236,7 +236,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         if t == self.expected_ty {\n-                            ControlFlow::BREAK\n+                            ControlFlow::Break(())\n                         } else {\n                             t.super_visit_with(self)\n                         }"}, {"sha": "49ad3ce50b8f560c181efa193756865e77d1f91e", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -543,7 +543,7 @@ impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n                 if let Some(def_id) = preds.principal_def_id() {\n                     self.0.insert(def_id);\n                 }\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             _ => t.super_visit_with(self),\n         }"}, {"sha": "f235cb5ab4503429be84df40c85338cf0f1b4b69", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -849,7 +849,7 @@ impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n         t.super_visit_with(self);\n         self.target_index.shift_out(1);\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -863,7 +863,7 @@ impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n             _ => {}\n         }\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n "}, {"sha": "e22ba9785e1fdc7b2bfe009953bda56f8e521426", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -440,24 +440,24 @@ where\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n         t.super_visit_with(self);\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *r {\n             // ignore bound regions, keep visiting\n-            ty::ReLateBound(_, _) => ControlFlow::CONTINUE,\n+            ty::ReLateBound(_, _) => ControlFlow::Continue(()),\n             _ => {\n                 (self.op)(r);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n         }\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // We're only interested in types involving regions\n         if !ty.flags().intersects(ty::TypeFlags::HAS_FREE_REGIONS) {\n-            return ControlFlow::CONTINUE;\n+            return ControlFlow::Continue(());\n         }\n \n         match ty.kind() {\n@@ -507,7 +507,7 @@ where\n             }\n         }\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n "}, {"sha": "65b90aa3d79d3e285365339e8ec6812c000e09b6", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n         } else if !t.has_non_region_infer() {\n             // All const/type variables in inference types must already be resolved,\n             // no need to visit the contents.\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             // Otherwise, keep visiting.\n             t.super_visit_with(self)\n@@ -178,7 +178,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n         } else if !ct.has_non_region_infer() {\n             // All const/type variables in inference types must already be resolved,\n             // no need to visit the contents.\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             // Otherwise, keep visiting.\n             ct.super_visit_with(self)"}, {"sha": "be47a3e238c1c16ba4fcb46616264e75637718f0", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -1147,7 +1147,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !ty.has_opaque_types() {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 }\n \n                 if let ty::Alias(ty::Opaque, ..) = ty.kind() {"}, {"sha": "1f95661ce9d5f54bb770a764c902a835bec7afe1", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -26,7 +26,7 @@ pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2:\n                 __visitor: &mut __V\n             ) -> ::std::ops::ControlFlow<__V::BreakTy> {\n                 match *self { #body_visit }\n-                ::std::ops::ControlFlow::CONTINUE\n+                ::std::ops::ControlFlow::Continue(())\n             }\n         },\n     )"}, {"sha": "a3d44fa890dd11cde627344d1679715fd5130518", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -888,8 +888,8 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n         | DefKind::AssocConst\n         | DefKind::Static(..)\n         | DefKind::Const => (true, false),\n-        // Full-fledged functions\n-        DefKind::AssocFn | DefKind::Fn => {\n+        // Full-fledged functions + closures\n+        DefKind::AssocFn | DefKind::Fn | DefKind::Closure => {\n             let generics = tcx.generics_of(def_id);\n             let needs_inline = (generics.requires_monomorphization(tcx)\n                 || tcx.codegen_fn_attrs(def_id).requests_inline())\n@@ -900,15 +900,6 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             let always_encode_mir = tcx.sess.opts.unstable_opts.always_encode_mir;\n             (is_const_fn, needs_inline || always_encode_mir)\n         }\n-        // Closures can't be const fn.\n-        DefKind::Closure => {\n-            let generics = tcx.generics_of(def_id);\n-            let needs_inline = (generics.requires_monomorphization(tcx)\n-                || tcx.codegen_fn_attrs(def_id).requests_inline())\n-                && tcx.sess.opts.output_types.should_codegen();\n-            let always_encode_mir = tcx.sess.opts.unstable_opts.always_encode_mir;\n-            (false, needs_inline || always_encode_mir)\n-        }\n         // Generators require optimized MIR to compute layout.\n         DefKind::Generator => (false, true),\n         // The others don't have MIR."}, {"sha": "250f3d0797eb52cdb2c503ab914967d26235a956", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -93,7 +93,7 @@ macro_rules! TrivialTypeTraversalImpls {\n                     _: &mut F)\n                     -> ::std::ops::ControlFlow<F::BreakTy>\n                 {\n-                    ::std::ops::ControlFlow::CONTINUE\n+                    ::std::ops::ControlFlow::Continue(())\n                 }\n             }\n         )+\n@@ -219,7 +219,7 @@ macro_rules! EnumTypeTraversalImpl {\n                         $($crate::ty::visit::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n-                        ::std::ops::ControlFlow::CONTINUE\n+                        ::std::ops::ControlFlow::Continue(())\n                     }\n                     $($output)*\n                 )\n@@ -237,7 +237,7 @@ macro_rules! EnumTypeTraversalImpl {\n                         $($crate::ty::visit::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n-                        ::std::ops::ControlFlow::CONTINUE\n+                        ::std::ops::ControlFlow::Continue(())\n                     }\n                     $($output)*\n                 )\n@@ -251,7 +251,7 @@ macro_rules! EnumTypeTraversalImpl {\n             @VisitVariants($this, $visitor)\n                 input($($input)*)\n                 output(\n-                    $variant => { ::std::ops::ControlFlow::CONTINUE }\n+                    $variant => { ::std::ops::ControlFlow::Continue(()) }\n                     $($output)*\n                 )\n         )"}, {"sha": "d44c6809bd8305da53c92e7b9c0878475781bec4", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -4,6 +4,6 @@ use super::*;\n \n impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }"}, {"sha": "4b4518f61e8d39b444bb4716a0ff13cf1966b54d", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -4,12 +4,13 @@ use std::ops::ControlFlow;\n \n use crate::ty::{\n     visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, InferConst, InferTy, Opaque,\n-    PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n+    PolyTraitPredicate, Projection, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::WherePredicate;\n use rustc_span::Span;\n@@ -443,7 +444,7 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match t.kind() {\n+        match *t.kind() {\n             Infer(InferTy::TyVar(_)) if self.infer_suggestable => {}\n \n             FnDef(..)\n@@ -458,9 +459,9 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n             }\n \n             Alias(Opaque, AliasTy { def_id, .. }) => {\n-                let parent = self.tcx.parent(*def_id);\n-                if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = self.tcx.def_kind(parent)\n-                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = self.tcx.type_of(parent).kind()\n+                let parent = self.tcx.parent(def_id);\n+                if let DefKind::TyAlias | DefKind::AssocTy = self.tcx.def_kind(parent)\n+                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = *self.tcx.type_of(parent).kind()\n                     && parent_opaque_def_id == def_id\n                 {\n                     // Okay\n@@ -469,6 +470,12 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n                 }\n             }\n \n+            Alias(Projection, AliasTy { def_id, .. }) => {\n+                if self.tcx.def_kind(def_id) != DefKind::AssocTy {\n+                    return ControlFlow::Break(());\n+                }\n+            }\n+\n             Param(param) => {\n                 // FIXME: It would be nice to make this not use string manipulation,\n                 // but it's pretty hard to do this, since `ty::ParamTy` is missing"}, {"sha": "d681df14af10a969058f491ea9e4c2cece559105", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -2357,6 +2357,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.trait_def(trait_def_id).has_auto_impl\n     }\n \n+    /// Returns `true` if this is a trait alias.\n+    pub fn trait_is_alias(self, trait_def_id: DefId) -> bool {\n+        self.def_kind(trait_def_id) == DefKind::TraitAlias\n+    }\n+\n     pub fn trait_is_coinductive(self, trait_def_id: DefId) -> bool {\n         self.trait_is_auto(trait_def_id) || self.lang_items().sized_trait() == Some(trait_def_id)\n     }"}, {"sha": "5576e53e6a74d312bb1e854a7623bee376075aed", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -2468,7 +2468,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                 if not_previously_inserted {\n                     ty.super_visit_with(self)\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n         }"}, {"sha": "7d4d35b7fdf940fd23ae8924f2db2e9a9b9a376e", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -367,7 +367,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n \n impl<'tcx> TypeVisitable<'tcx> for ty::AdtDef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -714,7 +714,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n             | ty::Placeholder(..)\n             | ty::Param(..)\n             | ty::Never\n-            | ty::Foreign(..) => ControlFlow::CONTINUE,\n+            | ty::Foreign(..) => ControlFlow::Continue(()),\n         }\n     }\n }\n@@ -742,7 +742,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> TypeSuperVisitable<'tcx> for ty::Region<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -844,7 +844,7 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n \n impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n "}, {"sha": "a128e9025fd690035d5a3deba64d4adb0e4f7641", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -2011,7 +2011,7 @@ impl<'tcx> Ty<'tcx> {\n             type BreakTy = ();\n \n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if self.0 == t { ControlFlow::BREAK } else { t.super_visit_with(self) }\n+                if self.0 == t { ControlFlow::Break(()) } else { t.super_visit_with(self) }\n             }\n         }\n "}, {"sha": "bee3cc4d7cb9bf985a2b3b1583a472a135d51255", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -294,13 +294,13 @@ impl<'tcx> TyCtxt<'tcx> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 match *r {\n                     ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n-                        ControlFlow::CONTINUE\n+                        ControlFlow::Continue(())\n                     }\n                     _ => {\n                         if (self.callback)(r) {\n-                            ControlFlow::BREAK\n+                            ControlFlow::Break(())\n                         } else {\n-                            ControlFlow::CONTINUE\n+                            ControlFlow::Continue(())\n                         }\n                     }\n                 }\n@@ -311,7 +311,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n                     ty.super_visit_with(self)\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n         }\n@@ -394,7 +394,7 @@ impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n         if t.outer_exclusive_binder() < self.binder_index\n             || !self.visited.insert((self.binder_index, t))\n         {\n-            return ControlFlow::BREAK;\n+            return ControlFlow::Break(());\n         }\n         match *t.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n@@ -512,7 +512,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         if t.outer_exclusive_binder() > self.outer_index {\n             ControlFlow::Break(FoundEscapingVars)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -524,7 +524,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         if r.bound_at_or_above_binder(self.outer_index) {\n             ControlFlow::Break(FoundEscapingVars)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -547,7 +547,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         if predicate.outer_exclusive_binder() > self.outer_index {\n             ControlFlow::Break(FoundEscapingVars)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }\n@@ -575,7 +575,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -585,7 +585,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -596,7 +596,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -605,7 +605,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if predicate.flags().intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }\n@@ -653,7 +653,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // in the normalized form\n         if self.just_constrained {\n             if let ty::Alias(..) = t.kind() {\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n         }\n \n@@ -666,7 +666,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // in the normalized form\n         if self.just_constrained {\n             if let ty::ConstKind::Unevaluated(..) = c.kind() {\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n         }\n \n@@ -679,7 +679,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n                 self.regions.insert(br.kind);\n             }\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -726,6 +726,6 @@ impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n             );\n         }\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }"}, {"sha": "a428180a4fa8295bb5bac16f0030fd5de8c31406", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -5,7 +5,6 @@\n #![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(min_specialization)]"}, {"sha": "f67f24b43c4d77f680053a394e8885760a69aaf3", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -118,7 +118,7 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n             // A diverging InlineAsm is treated as non-recursing\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if destination.is_some() {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 } else {\n                     ControlFlow::Break(NonRecursive)\n                 }\n@@ -132,7 +132,7 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Goto { .. }\n-            | TerminatorKind::SwitchInt { .. } => ControlFlow::CONTINUE,\n+            | TerminatorKind::SwitchInt { .. } => ControlFlow::Continue(()),\n         }\n     }\n \n@@ -145,7 +145,7 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n             }\n         }\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn ignore_edge(&mut self, bb: BasicBlock, target: BasicBlock) -> bool {"}, {"sha": "f88155e4fc7928a89b6f7cd8faa9d90cf655d391", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -1,5 +1,4 @@\n #![feature(array_windows)]\n-#![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "cf13d4584a12429d5f05e07bf28119221e8c46b5", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -300,20 +300,20 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.has_non_region_param() {\n-            return ControlFlow::CONTINUE;\n+            return ControlFlow::Continue(());\n         }\n \n         match c.kind() {\n             ty::ConstKind::Param(param) => {\n                 debug!(?param);\n                 self.unused_parameters.mark_used(param.index);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs })\n                 if matches!(self.tcx.def_kind(def.did), DefKind::AnonConst) =>\n             {\n                 self.visit_child_body(def.did, substs);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             _ => c.super_visit_with(self),\n         }\n@@ -322,26 +322,26 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !ty.has_non_region_param() {\n-            return ControlFlow::CONTINUE;\n+            return ControlFlow::Continue(());\n         }\n \n         match *ty.kind() {\n             ty::Closure(def_id, substs) | ty::Generator(def_id, substs, ..) => {\n                 debug!(?def_id);\n                 // Avoid cycle errors with generators.\n                 if def_id == self.def_id {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 }\n \n                 // Consider any generic parameters used by any closures/generators as used in the\n                 // parent.\n                 self.visit_child_body(def_id, substs);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             ty::Param(param) => {\n                 debug!(?param);\n                 self.unused_parameters.mark_used(param.index);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             _ => ty.super_visit_with(self),\n         }"}, {"sha": "9a5d3cceb914e48643012dd998844f8dc9c20234", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -1,6 +1,5 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(associated_type_defaults)]\n-#![feature(control_flow_enum)]\n #![feature(rustc_private)]\n #![feature(try_blocks)]\n #![feature(let_chains)]\n@@ -112,7 +111,11 @@ where\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {\n         let TraitRef { def_id, substs, .. } = trait_ref;\n         self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref.print_only_trait_path())?;\n-        if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }\n+        if self.def_id_visitor.shallow() {\n+            ControlFlow::Continue(())\n+        } else {\n+            substs.visit_with(self)\n+        }\n     }\n \n     fn visit_projection_ty(&mut self, projection: ty::AliasTy<'tcx>) -> ControlFlow<V::BreakTy> {\n@@ -131,7 +134,7 @@ where\n             };\n         self.visit_trait(trait_ref)?;\n         if self.def_id_visitor.shallow() {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))\n         }\n@@ -155,7 +158,7 @@ where\n                 ty,\n                 _region,\n             ))) => ty.visit_with(self),\n-            ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..)) => ControlFlow::CONTINUE,\n+            ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..)) => ControlFlow::Continue(()),\n             ty::PredicateKind::ConstEvaluatable(ct) => ct.visit_with(self),\n             ty::PredicateKind::WellFormed(arg) => arg.visit_with(self),\n             _ => bug!(\"unexpected predicate: {:?}\", predicate),\n@@ -189,7 +192,7 @@ where\n             | ty::Generator(def_id, ..) => {\n                 self.def_id_visitor.visit_def_id(def_id, \"type\", &ty)?;\n                 if self.def_id_visitor.shallow() {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 }\n                 // Default type visitor doesn't visit signatures of fn types.\n                 // Something like `fn() -> Priv {my_func}` is considered a private type even if\n@@ -214,7 +217,7 @@ where\n                     // as visible/reachable even if both `Type` and `Trait` are private.\n                     // Ideally, associated types should be substituted in the same way as\n                     // free type aliases, but this isn't done yet.\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 }\n                 // This will also visit substs if necessary, so we don't need to recurse.\n                 return self.visit_projection_ty(proj);\n@@ -274,7 +277,7 @@ where\n         }\n \n         if self.def_id_visitor.shallow() {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             ty.super_visit_with(self)\n         }\n@@ -319,7 +322,7 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL>\n         if let Some(def_id) = def_id.as_local() {\n             self.min = VL::new_min(self, def_id);\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -881,7 +884,7 @@ impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx>\n                 self.ev.update(def_id, self.level);\n             }\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -1368,9 +1371,9 @@ impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         descr: &dyn fmt::Display,\n     ) -> ControlFlow<Self::BreakTy> {\n         if self.check_def_id(def_id, kind, descr) {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(())\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }\n@@ -1865,9 +1868,9 @@ impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n         descr: &dyn fmt::Display,\n     ) -> ControlFlow<Self::BreakTy> {\n         if self.check_def_id(def_id, kind, descr) {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(())\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }"}, {"sha": "2336fb53aec282a8e902bc408836033dfd42c80d", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 86, "deletions": 17, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -1,9 +1,10 @@\n //! Code shared by trait and projection goals for candidate assembly.\n \n use super::infcx_ext::InferCtxtExt;\n-use super::{CanonicalResponse, Certainty, EvalCtxt, Goal};\n+use super::{CanonicalResponse, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n+use rustc_infer::traits::util::elaborate_predicates;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::fmt::Debug;\n@@ -89,19 +90,35 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n         impl_def_id: DefId,\n-    ) -> Result<Certainty, NoSolution>;\n+    ) -> QueryResult<'tcx>;\n+\n+    fn consider_assumption(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+        assumption: ty::Predicate<'tcx>,\n+    ) -> QueryResult<'tcx>;\n+\n+    fn consider_auto_trait_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n+\n+    fn consider_trait_alias_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n \n     fn consider_builtin_sized_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n-    ) -> Result<Certainty, NoSolution>;\n+    ) -> QueryResult<'tcx>;\n \n-    fn consider_assumption(\n+    fn consider_builtin_copy_clone_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n-        assumption: ty::Predicate<'tcx>,\n-    ) -> Result<Certainty, NoSolution>;\n+    ) -> QueryResult<'tcx>;\n }\n+\n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     pub(super) fn assemble_and_evaluate_candidates<G: GoalKind<'tcx>>(\n         &mut self,\n@@ -119,6 +136,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n \n         self.assemble_alias_bound_candidates(goal, &mut candidates);\n \n+        self.assemble_object_bound_candidates(goal, &mut candidates);\n+\n         candidates\n     }\n \n@@ -180,9 +199,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         tcx.for_each_relevant_impl(\n             goal.predicate.trait_def_id(tcx),\n             goal.predicate.self_ty(),\n-            |impl_def_id| match G::consider_impl_candidate(self, goal, impl_def_id)\n-                .and_then(|certainty| self.make_canonical_response(certainty))\n-            {\n+            |impl_def_id| match G::consider_impl_candidate(self, goal, impl_def_id) {\n                 Ok(result) => candidates\n                     .push(Candidate { source: CandidateSource::Impl(impl_def_id), result }),\n                 Err(NoSolution) => (),\n@@ -197,13 +214,21 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ) {\n         let lang_items = self.tcx().lang_items();\n         let trait_def_id = goal.predicate.trait_def_id(self.tcx());\n-        let result = if lang_items.sized_trait() == Some(trait_def_id) {\n+        let result = if self.tcx().trait_is_auto(trait_def_id) {\n+            G::consider_auto_trait_candidate(self, goal)\n+        } else if self.tcx().trait_is_alias(trait_def_id) {\n+            G::consider_trait_alias_candidate(self, goal)\n+        } else if lang_items.sized_trait() == Some(trait_def_id) {\n             G::consider_builtin_sized_candidate(self, goal)\n+        } else if lang_items.copy_trait() == Some(trait_def_id)\n+            || lang_items.clone_trait() == Some(trait_def_id)\n+        {\n+            G::consider_builtin_copy_clone_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };\n \n-        match result.and_then(|certainty| self.make_canonical_response(certainty)) {\n+        match result {\n             Ok(result) => {\n                 candidates.push(Candidate { source: CandidateSource::BuiltinImpl, result })\n             }\n@@ -217,9 +242,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         candidates: &mut Vec<Candidate<'tcx>>,\n     ) {\n         for (i, assumption) in goal.param_env.caller_bounds().iter().enumerate() {\n-            match G::consider_assumption(self, goal, assumption)\n-                .and_then(|certainty| self.make_canonical_response(certainty))\n-            {\n+            match G::consider_assumption(self, goal, assumption) {\n                 Ok(result) => {\n                     candidates.push(Candidate { source: CandidateSource::ParamEnv(i), result })\n                 }\n@@ -268,14 +291,60 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             .subst_iter_copied(self.tcx(), alias_ty.substs)\n             .enumerate()\n         {\n-            match G::consider_assumption(self, goal, assumption)\n-                .and_then(|certainty| self.make_canonical_response(certainty))\n-            {\n+            match G::consider_assumption(self, goal, assumption) {\n                 Ok(result) => {\n                     candidates.push(Candidate { source: CandidateSource::AliasBound(i), result })\n                 }\n                 Err(NoSolution) => (),\n             }\n         }\n     }\n+\n+    fn assemble_object_bound_candidates<G: GoalKind<'tcx>>(\n+        &mut self,\n+        goal: Goal<'tcx, G>,\n+        candidates: &mut Vec<Candidate<'tcx>>,\n+    ) {\n+        let self_ty = goal.predicate.self_ty();\n+        let bounds = match *self_ty.kind() {\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Adt(_, _)\n+            | ty::Foreign(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Alias(..)\n+            | ty::Closure(..)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(_)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Param(_)\n+            | ty::Placeholder(..)\n+            | ty::Infer(_)\n+            | ty::Error(_) => return,\n+            ty::Bound(..) => bug!(\"unexpected bound type: {goal:?}\"),\n+            ty::Dynamic(bounds, ..) => bounds,\n+        };\n+\n+        let tcx = self.tcx();\n+        for assumption in\n+            elaborate_predicates(tcx, bounds.iter().map(|bound| bound.with_self_ty(tcx, self_ty)))\n+        {\n+            match G::consider_assumption(self, goal, assumption.predicate) {\n+                Ok(result) => {\n+                    candidates.push(Candidate { source: CandidateSource::BuiltinImpl, result })\n+                }\n+                Err(NoSolution) => (),\n+            }\n+        }\n+    }\n }"}, {"sha": "42f597c781d257e0f97506d931d5121b5d5a83fd", "filename": "compiler/rustc_trait_selection/src/solve/infcx_ext.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -1,10 +1,10 @@\n use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::{InferCtxt, InferOk};\n+use rustc_infer::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_span::DUMMY_SP;\n \n use super::Goal;\n@@ -25,6 +25,11 @@ pub(super) trait InferCtxtExt<'tcx> {\n         lhs: T,\n         rhs: T,\n     ) -> Result<Vec<Goal<'tcx, ty::Predicate<'tcx>>>, NoSolution>;\n+\n+    fn instantiate_bound_vars_with_infer<T: TypeFoldable<'tcx> + Copy>(\n+        &self,\n+        value: ty::Binder<'tcx, T>,\n+    ) -> T;\n }\n \n impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n@@ -59,4 +64,15 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                 NoSolution\n             })\n     }\n+\n+    fn instantiate_bound_vars_with_infer<T: TypeFoldable<'tcx> + Copy>(\n+        &self,\n+        value: ty::Binder<'tcx, T>,\n+    ) -> T {\n+        self.replace_bound_vars_with_fresh_vars(\n+            DUMMY_SP,\n+            LateBoundRegionConversionTime::HigherRankedType,\n+            value,\n+        )\n+    }\n }"}, {"sha": "32eb84635b53684c0d122f746192eefd8ee25d22", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -313,6 +313,13 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             }\n         })\n     }\n+\n+    fn evaluate_all_and_make_canonical_response(\n+        &mut self,\n+        goals: Vec<Goal<'tcx, ty::Predicate<'tcx>>>,\n+    ) -> QueryResult<'tcx> {\n+        self.evaluate_all(goals).and_then(|certainty| self.make_canonical_response(certainty))\n+    }\n }\n \n #[instrument(level = \"debug\", skip(infcx), ret)]"}, {"sha": "ffc1c70e0cb81d3f0ec0364f4b46f4e0f27989c7", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 57, "deletions": 14, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -23,7 +23,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         &mut self,\n         goal: Goal<'tcx, ProjectionPredicate<'tcx>>,\n     ) -> QueryResult<'tcx> {\n-        // To only compute normalization ones for each projection we only\n+        // To only compute normalization once for each projection we only\n         // normalize if the expected term is an unconstrained inference variable.\n         //\n         // E.g. for `<T as Trait>::Assoc = u32` we recursively compute the goal\n@@ -191,7 +191,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, ProjectionPredicate<'tcx>>,\n         impl_def_id: DefId,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> QueryResult<'tcx> {\n         let tcx = ecx.tcx();\n \n         let goal_trait_ref = goal.predicate.projection_ty.trait_ref(tcx);\n@@ -229,7 +229,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 impl_def_id\n             )? else {\n                 let certainty = Certainty::Maybe(MaybeCause::Ambiguity);\n-                return Ok(trait_ref_certainty.unify_and(certainty));\n+                return ecx.make_canonical_response(trait_ref_certainty.unify_and(certainty));\n             };\n \n             if !assoc_def.item.defaultness(tcx).has_value() {\n@@ -286,27 +286,70 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             let rhs_certainty =\n                 ecx.evaluate_all(nested_goals).expect(\"failed to unify with unconstrained term\");\n \n-            Ok(trait_ref_certainty.unify_and(rhs_certainty))\n+            ecx.make_canonical_response(trait_ref_certainty.unify_and(rhs_certainty))\n         })\n     }\n \n+    fn consider_assumption(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+        assumption: ty::Predicate<'tcx>,\n+    ) -> QueryResult<'tcx> {\n+        if let Some(poly_projection_pred) = assumption.to_opt_poly_projection_pred() {\n+            ecx.infcx.probe(|_| {\n+                let assumption_projection_pred =\n+                    ecx.infcx.instantiate_bound_vars_with_infer(poly_projection_pred);\n+                let nested_goals = ecx.infcx.eq(\n+                    goal.param_env,\n+                    goal.predicate.projection_ty,\n+                    assumption_projection_pred.projection_ty,\n+                )?;\n+                let subst_certainty = ecx.evaluate_all(nested_goals)?;\n+\n+                // The term of our goal should be fully unconstrained, so this should never fail.\n+                //\n+                // It can however be ambiguous when the resolved type is a projection.\n+                let nested_goals = ecx\n+                    .infcx\n+                    .eq(goal.param_env, goal.predicate.term, assumption_projection_pred.term)\n+                    .expect(\"failed to unify with unconstrained term\");\n+                let rhs_certainty = ecx\n+                    .evaluate_all(nested_goals)\n+                    .expect(\"failed to unify with unconstrained term\");\n+\n+                ecx.make_canonical_response(subst_certainty.unify_and(rhs_certainty))\n+            })\n+        } else {\n+            Err(NoSolution)\n+        }\n+    }\n+\n+    fn consider_auto_trait_candidate(\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"auto traits do not have associated types: {:?}\", goal);\n+    }\n+\n+    fn consider_trait_alias_candidate(\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"trait aliases do not have associated types: {:?}\", goal);\n+    }\n+\n     fn consider_builtin_sized_candidate(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> QueryResult<'tcx> {\n         bug!(\"`Sized` does not have an associated type: {:?}\", goal);\n     }\n \n-    fn consider_assumption(\n+    fn consider_builtin_copy_clone_candidate(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n-        _goal: Goal<'tcx, Self>,\n-        assumption: ty::Predicate<'tcx>,\n-    ) -> Result<Certainty, NoSolution> {\n-        if let Some(_poly_projection_pred) = assumption.to_opt_poly_projection_pred() {\n-            unimplemented!()\n-        } else {\n-            Err(NoSolution)\n-        }\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"`Copy`/`Clone` does not have an associated type: {:?}\", goal);\n     }\n }\n "}, {"sha": "1ebcfd03c14ea1db6b6f790568f3de23466b695c", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 91, "deletions": 15, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -4,14 +4,17 @@ use std::iter;\n \n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n-use super::{Certainty, EvalCtxt, Goal, QueryResult};\n+use super::{EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n+use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::TraitPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::DUMMY_SP;\n \n+mod structural_traits;\n+\n impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n     fn self_ty(self) -> Ty<'tcx> {\n         self.self_ty()\n@@ -29,7 +32,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, TraitPredicate<'tcx>>,\n         impl_def_id: DefId,\n-    ) -> Result<Certainty, NoSolution> {\n+    ) -> QueryResult<'tcx> {\n         let tcx = ecx.tcx();\n \n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n@@ -53,31 +56,104 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                 .into_iter()\n                 .map(|pred| goal.with(tcx, pred));\n             nested_goals.extend(where_clause_bounds);\n-            ecx.evaluate_all(nested_goals)\n+            ecx.evaluate_all_and_make_canonical_response(nested_goals)\n         })\n     }\n \n-    fn consider_builtin_sized_candidate(\n-        _ecx: &mut EvalCtxt<'_, 'tcx>,\n-        _goal: Goal<'tcx, Self>,\n-    ) -> Result<Certainty, NoSolution> {\n-        unimplemented!();\n-    }\n-\n     fn consider_assumption(\n-        _ecx: &mut EvalCtxt<'_, 'tcx>,\n-        _goal: Goal<'tcx, Self>,\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n         assumption: ty::Predicate<'tcx>,\n-    ) -> Result<Certainty, NoSolution> {\n-        if let Some(_poly_trait_pred) = assumption.to_opt_poly_trait_pred() {\n-            unimplemented!()\n+    ) -> QueryResult<'tcx> {\n+        if let Some(poly_trait_pred) = assumption.to_opt_poly_trait_pred() {\n+            // FIXME: Constness and polarity\n+            ecx.infcx.probe(|_| {\n+                let assumption_trait_pred =\n+                    ecx.infcx.instantiate_bound_vars_with_infer(poly_trait_pred);\n+                let nested_goals = ecx.infcx.eq(\n+                    goal.param_env,\n+                    goal.predicate.trait_ref,\n+                    assumption_trait_pred.trait_ref,\n+                )?;\n+                ecx.evaluate_all_and_make_canonical_response(nested_goals)\n+            })\n         } else {\n             Err(NoSolution)\n         }\n     }\n+\n+    fn consider_auto_trait_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        ecx.probe_and_evaluate_goal_for_constituent_tys(\n+            goal,\n+            structural_traits::instantiate_constituent_tys_for_auto_trait,\n+        )\n+    }\n+\n+    fn consider_trait_alias_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        let tcx = ecx.tcx();\n+\n+        ecx.infcx.probe(|_| {\n+            let nested_obligations = tcx\n+                .predicates_of(goal.predicate.def_id())\n+                .instantiate(tcx, goal.predicate.trait_ref.substs);\n+            ecx.evaluate_all_and_make_canonical_response(\n+                nested_obligations.predicates.into_iter().map(|p| goal.with(tcx, p)).collect(),\n+            )\n+        })\n+    }\n+\n+    fn consider_builtin_sized_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        ecx.probe_and_evaluate_goal_for_constituent_tys(\n+            goal,\n+            structural_traits::instantiate_constituent_tys_for_sized_trait,\n+        )\n+    }\n+\n+    fn consider_builtin_copy_clone_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        ecx.probe_and_evaluate_goal_for_constituent_tys(\n+            goal,\n+            structural_traits::instantiate_constituent_tys_for_copy_clone_trait,\n+        )\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n+    /// Convenience function for traits that are structural, i.e. that only\n+    /// have nested subgoals that only change the self type. Unlike other\n+    /// evaluate-like helpers, this does a probe, so it doesn't need to be\n+    /// wrapped in one.\n+    fn probe_and_evaluate_goal_for_constituent_tys(\n+        &mut self,\n+        goal: Goal<'tcx, TraitPredicate<'tcx>>,\n+        constituent_tys: impl Fn(&InferCtxt<'tcx>, Ty<'tcx>) -> Result<Vec<Ty<'tcx>>, NoSolution>,\n+    ) -> QueryResult<'tcx> {\n+        self.infcx.probe(|_| {\n+            self.evaluate_all_and_make_canonical_response(\n+                constituent_tys(self.infcx, goal.predicate.self_ty())?\n+                    .into_iter()\n+                    .map(|ty| {\n+                        goal.with(\n+                            self.tcx(),\n+                            ty::Binder::dummy(goal.predicate.with_self_ty(self.tcx(), ty)),\n+                        )\n+                    })\n+                    .collect(),\n+            )\n+        })\n+    }\n+\n     pub(super) fn compute_trait_goal(\n         &mut self,\n         goal: Goal<'tcx, TraitPredicate<'tcx>>,"}, {"sha": "bbc0c77253278aa208011e3b9a470bc2d89078d2", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -0,0 +1,179 @@\n+use rustc_hir::{Movability, Mutability};\n+use rustc_infer::{infer::InferCtxt, traits::query::NoSolution};\n+use rustc_middle::ty::{self, Ty};\n+\n+// Calculates the constituent types of a type for `auto trait` purposes.\n+//\n+// For types with an \"existential\" binder, i.e. generator witnesses, we also\n+// instantiate the binder with placeholders eagerly.\n+pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n+    let tcx = infcx.tcx;\n+    match *ty.kind() {\n+        ty::Uint(_)\n+        | ty::Int(_)\n+        | ty::Bool\n+        | ty::Float(_)\n+        | ty::FnDef(..)\n+        | ty::FnPtr(_)\n+        | ty::Str\n+        | ty::Error(_)\n+        | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n+        | ty::Never\n+        | ty::Char => Ok(vec![]),\n+\n+        ty::Placeholder(..)\n+        | ty::Dynamic(..)\n+        | ty::Param(..)\n+        | ty::Foreign(..)\n+        | ty::Alias(ty::Projection, ..)\n+        | ty::Bound(..)\n+        | ty::Infer(ty::TyVar(_)) => {\n+            // FIXME: Do we need to mark anything as ambiguous here? Yeah?\n+            Err(NoSolution)\n+        }\n+\n+        ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+\n+        ty::RawPtr(ty::TypeAndMut { ty: element_ty, .. }) | ty::Ref(_, element_ty, _) => {\n+            Ok(vec![element_ty])\n+        }\n+\n+        ty::Array(element_ty, _) | ty::Slice(element_ty) => Ok(vec![element_ty]),\n+\n+        ty::Tuple(ref tys) => {\n+            // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet\n+            Ok(tys.iter().collect())\n+        }\n+\n+        ty::Closure(_, ref substs) => Ok(vec![substs.as_closure().tupled_upvars_ty()]),\n+\n+        ty::Generator(_, ref substs, _) => {\n+            let generator_substs = substs.as_generator();\n+            Ok(vec![generator_substs.tupled_upvars_ty(), generator_substs.witness()])\n+        }\n+\n+        ty::GeneratorWitness(types) => {\n+            Ok(infcx.replace_bound_vars_with_placeholders(types).to_vec())\n+        }\n+\n+        // For `PhantomData<T>`, we pass `T`.\n+        ty::Adt(def, substs) if def.is_phantom_data() => Ok(vec![substs.type_at(0)]),\n+\n+        ty::Adt(def, substs) => Ok(def.all_fields().map(|f| f.ty(tcx, substs)).collect()),\n+\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n+            // We can resolve the `impl Trait` to its concrete type,\n+            // which enforces a DAG between the functions requiring\n+            // the auto trait bounds in question.\n+            Ok(vec![tcx.bound_type_of(def_id).subst(tcx, substs)])\n+        }\n+    }\n+}\n+\n+pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n+    match *ty.kind() {\n+        ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n+        | ty::Uint(_)\n+        | ty::Int(_)\n+        | ty::Bool\n+        | ty::Float(_)\n+        | ty::FnDef(..)\n+        | ty::FnPtr(_)\n+        | ty::RawPtr(..)\n+        | ty::Char\n+        | ty::Ref(..)\n+        | ty::Generator(..)\n+        | ty::GeneratorWitness(..)\n+        | ty::Array(..)\n+        | ty::Closure(..)\n+        | ty::Never\n+        | ty::Dynamic(_, _, ty::DynStar)\n+        | ty::Error(_) => Ok(vec![]),\n+\n+        ty::Str\n+        | ty::Slice(_)\n+        | ty::Dynamic(..)\n+        | ty::Foreign(..)\n+        | ty::Alias(..)\n+        | ty::Param(_) => Err(NoSolution),\n+\n+        ty::Infer(ty::TyVar(_)) => bug!(\"FIXME: ambiguous\"),\n+\n+        ty::Placeholder(..)\n+        | ty::Bound(..)\n+        | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+\n+        ty::Tuple(tys) => Ok(tys.to_vec()),\n+\n+        ty::Adt(def, substs) => {\n+            let sized_crit = def.sized_constraint(infcx.tcx);\n+            Ok(sized_crit\n+                .0\n+                .iter()\n+                .map(|ty| sized_crit.rebind(*ty).subst(infcx.tcx, substs))\n+                .collect())\n+        }\n+    }\n+}\n+\n+pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Result<Vec<Ty<'tcx>>, NoSolution> {\n+    match *ty.kind() {\n+        ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n+        | ty::FnDef(..)\n+        | ty::FnPtr(_)\n+        | ty::Error(_) => Ok(vec![]),\n+\n+        // Implementations are provided in core\n+        ty::Uint(_)\n+        | ty::Int(_)\n+        | ty::Bool\n+        | ty::Float(_)\n+        | ty::Char\n+        | ty::RawPtr(..)\n+        | ty::Never\n+        | ty::Ref(_, _, Mutability::Not)\n+        | ty::Array(..) => Err(NoSolution),\n+\n+        ty::Dynamic(..)\n+        | ty::Str\n+        | ty::Slice(_)\n+        | ty::Generator(_, _, Movability::Static)\n+        | ty::Foreign(..)\n+        | ty::Ref(_, _, Mutability::Mut)\n+        | ty::Adt(_, _)\n+        | ty::Alias(_, _)\n+        | ty::Param(_) => Err(NoSolution),\n+\n+        ty::Infer(ty::TyVar(_)) => bug!(\"FIXME: ambiguous\"),\n+\n+        ty::Placeholder(..)\n+        | ty::Bound(..)\n+        | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+\n+        ty::Tuple(tys) => Ok(tys.to_vec()),\n+\n+        ty::Closure(_, substs) => Ok(vec![substs.as_closure().tupled_upvars_ty()]),\n+\n+        ty::Generator(_, substs, Movability::Movable) => {\n+            if infcx.tcx.features().generator_clone {\n+                let generator = substs.as_generator();\n+                Ok(vec![generator.tupled_upvars_ty(), generator.witness()])\n+            } else {\n+                Err(NoSolution)\n+            }\n+        }\n+\n+        ty::GeneratorWitness(types) => {\n+            Ok(infcx.replace_bound_vars_with_placeholders(types).to_vec())\n+        }\n+    }\n+}"}, {"sha": "5f649852d0bbd8e49e44e1eea14c94df736f6197", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -614,12 +614,12 @@ impl<'tcx> OrphanChecker<'tcx> {\n \n     fn found_non_local_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<OrphanCheckEarlyExit<'tcx>> {\n         self.non_local_tys.push((t, self.in_self_ty));\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn found_param_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<OrphanCheckEarlyExit<'tcx>> {\n         if self.search_first_local_ty {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             ControlFlow::Break(OrphanCheckEarlyExit::ParamTy(t))\n         }\n@@ -641,7 +641,7 @@ enum OrphanCheckEarlyExit<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n     type BreakTy = OrphanCheckEarlyExit<'tcx>;\n     fn visit_region(&mut self, _r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -756,6 +756,6 @@ impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n     /// parameters, allowing uncovered const parameters in impls seems more useful\n     /// than allowing `impl<T> Trait<local_fn_ptr, T> for i32` to compile.\n     fn visit_const(&mut self, _c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }"}, {"sha": "f779d9dd8d93560302988bd9d03d981eda133ae8", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -198,7 +198,7 @@ fn satisfied_from_param_env<'tcx>(\n                 // If we start allowing directly writing `ConstKind::Expr` without an intermediate anon const\n                 // this will be incorrect. It might be worth investigating making `predicates_of` elaborate\n                 // all of the `ConstEvaluatable` bounds rather than having a visitor here.\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n         }\n     }"}, {"sha": "434f75de02bff09c80af42b75f6efefeb0fedd0f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -2932,7 +2932,7 @@ impl<'tcx> ty::TypeVisitor<'tcx> for HasNumericInferVisitor {\n         if matches!(ty.kind(), ty::Infer(ty::FloatVar(_) | ty::IntVar(_))) {\n             ControlFlow::Break(())\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }"}, {"sha": "f036a311d464ccc648a2989e34a0bd2824892ebc", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -493,7 +493,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n                 && let param_def_id = self.generics.type_param(param, self.tcx).def_id\n                 && self.tcx.parent(param_def_id) == self.trait_item_def_id\n             {\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(());\n             }\n             t.super_visit_with(self)\n         }\n@@ -502,7 +502,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n                 && let param_def_id = self.generics.region_param(&param, self.tcx).def_id\n                 && self.tcx.parent(param_def_id) == self.trait_item_def_id\n             {\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(());\n             }\n             r.super_visit_with(self)\n         }\n@@ -511,7 +511,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n                 && let param_def_id = self.generics.const_param(&param, self.tcx).def_id\n                 && self.tcx.parent(param_def_id) == self.trait_item_def_id\n             {\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(());\n             }\n             ct.super_visit_with(self)\n         }"}, {"sha": "c9121212cd8f16b9b115ab1ac703b7895d793790", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -783,16 +783,16 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n             match t.kind() {\n                 ty::Param(_) => {\n                     if t == self.tcx.types.self_param {\n-                        ControlFlow::BREAK\n+                        ControlFlow::Break(())\n                     } else {\n-                        ControlFlow::CONTINUE\n+                        ControlFlow::Continue(())\n                     }\n                 }\n                 ty::Alias(ty::Projection, ref data)\n                     if self.tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder =>\n                 {\n                     // We'll deny these later in their own pass\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n                 ty::Alias(ty::Projection, ref data) => {\n                     // This is a projected type `<Foo as SomeTrait>::X`.\n@@ -820,7 +820,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n                         .contains(&data.trait_ref(self.tcx).def_id);\n \n                     if is_supertrait_of_current_trait {\n-                        ControlFlow::CONTINUE // do not walk contained types, do not report error, do collect $200\n+                        ControlFlow::Continue(()) // do not walk contained types, do not report error, do collect $200\n                     } else {\n                         t.super_visit_with(self) // DO walk contained types, POSSIBLY reporting an error\n                     }"}, {"sha": "1531c50760d5345d6aca5631b6da70f2c9b10d18", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n                 .escaping\n                 .max(t.outer_exclusive_binder().as_usize() - self.outer_index.as_usize());\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     #[inline]\n@@ -145,15 +145,15 @@ impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n             }\n             _ => {}\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match ct.kind() {\n             ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n                 self.escaping =\n                     self.escaping.max(debruijn.as_usize() - self.outer_index.as_usize());\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             _ => ct.super_visit_with(self),\n         }"}, {"sha": "f398fb06c187a0bb52ce0367e20244bc89cebe48", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -107,25 +107,25 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n             ty::FnDef(..) => {\n                 // Types of formals and return in `fn(_) -> _` are also irrelevant;\n                 // so we do not recur into them via `super_visit_with`\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n             ty::Array(_, n)\n                 if { n.try_eval_usize(self.tcx, ty::ParamEnv::reveal_all()) == Some(0) } =>\n             {\n                 // rust-lang/rust#62336: ignore type of contents\n                 // for empty array.\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n             ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Str | ty::Never => {\n                 // These primitive types are always structural match.\n                 //\n                 // `Never` is kind of special here, but as it is not inhabitable, this should be fine.\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n \n             ty::FnPtr(..) => {\n                 if !self.adt_const_param {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 } else {\n                     return ControlFlow::Break(ty);\n                 }\n@@ -147,15 +147,15 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n                     // Even though `NonStructural` does not implement `PartialEq`,\n                     // structural equality on `T` does not recur into the raw\n                     // pointer. Therefore, one can still use `C` in a pattern.\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 } else {\n                     return ControlFlow::Break(ty);\n                 }\n             }\n \n             ty::Float(_) => {\n                 if !self.adt_const_param {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 } else {\n                     return ControlFlow::Break(ty);\n                 }\n@@ -172,13 +172,13 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n                 self.tcx.sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n                 // We still want to check other types after encountering an error,\n                 // as this may still emit relevant errors.\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n         };\n \n         if !self.seen.insert(adt_def.did()) {\n             debug!(\"Search already seen adt_def: {:?}\", adt_def);\n-            return ControlFlow::CONTINUE;\n+            return ControlFlow::Continue(());\n         }\n \n         if !self.type_marked_structural(ty) {"}, {"sha": "b3b9a67b26e3d23fcfa2ab9153847dc787145560", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -1,4 +1,4 @@\n-#![feature(alloc_layout_extra, control_flow_enum, decl_macro, iterator_try_reduce, never_type)]\n+#![feature(alloc_layout_extra, decl_macro, iterator_try_reduce, never_type)]\n #![allow(dead_code, unused_variables)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]"}, {"sha": "0853de601b04072100213a4f2b9d114242abd44f", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -6,7 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(let_chains)]\n-#![feature(control_flow_enum)]\n #![feature(never_type)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "7211ffb779568f938dea81edc096b28fd6ea2cff", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -1,5 +1,5 @@\n .setting-line {\n-\tmargin: 0.6em 0 0.6em 0.3em;\n+\tmargin: 1.2em 0.6em;\n \tposition: relative;\n }\n \n@@ -55,10 +55,6 @@\n \tcursor: pointer;\n }\n \n-#settings .setting-line {\n-\tmargin: 1.2em 0.6em;\n-}\n-\n .setting-line .radio-line input:checked {\n \tbox-shadow: inset 0 0 0 3px var(--main-background-color);\n \tbackground-color: var(--settings-input-color);"}, {"sha": "604ab147f6a16ea5a251d6ed4a71aa59f295f9ac", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -390,7 +390,8 @@ function loadCss(cssUrl) {\n         }\n \n         if (document.activeElement.tagName === \"INPUT\" &&\n-            document.activeElement.type !== \"checkbox\") {\n+            document.activeElement.type !== \"checkbox\" &&\n+            document.activeElement.type !== \"radio\") {\n             switch (getVirtualKey(ev)) {\n             case \"Escape\":\n                 handleEscape(ev);\n@@ -1082,6 +1083,9 @@ function loadCss(cssUrl) {\n      * Show the help popup menu.\n      */\n     function showHelp() {\n+        // Prevent `blur` events from being dispatched as a result of closing\n+        // other modals.\n+        getHelpButton().querySelector(\"a\").focus();\n         const menu = getHelpMenu(true);\n         if (menu.style.display === \"none\") {\n             window.hideAllModals();"}, {"sha": "88592fa0c84c1453fbda216b9f3d92eddb0ab307", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 64, "deletions": 50, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -781,7 +781,29 @@ function initSearch(rawSearchIndex) {\n                     return a - b;\n                 }\n \n-                // Sort by non levenshtein results and then levenshtein results by the distance\n+                // sort by index of keyword in item name (no literal occurrence goes later)\n+                a = (aaa.index < 0);\n+                b = (bbb.index < 0);\n+                if (a !== b) {\n+                    return a - b;\n+                }\n+\n+                // Sort by distance in the path part, if specified\n+                // (less changes required to match means higher rankings)\n+                a = aaa.path_lev;\n+                b = bbb.path_lev;\n+                if (a !== b) {\n+                    return a - b;\n+                }\n+\n+                // (later literal occurrence, if any, goes later)\n+                a = aaa.index;\n+                b = bbb.index;\n+                if (a !== b) {\n+                    return a - b;\n+                }\n+\n+                // Sort by distance in the name part, the last part of the path\n                 // (less changes required to match means higher rankings)\n                 a = (aaa.lev);\n                 b = (bbb.lev);\n@@ -810,19 +832,6 @@ function initSearch(rawSearchIndex) {\n                     return (a > b ? +1 : -1);\n                 }\n \n-                // sort by index of keyword in item name (no literal occurrence goes later)\n-                a = (aaa.index < 0);\n-                b = (bbb.index < 0);\n-                if (a !== b) {\n-                    return a - b;\n-                }\n-                // (later literal occurrence, if any, goes later)\n-                a = aaa.index;\n-                b = bbb.index;\n-                if (a !== b) {\n-                    return a - b;\n-                }\n-\n                 // special precedence for primitive and keyword pages\n                 if ((aaa.item.ty === TY_PRIMITIVE && bbb.item.ty !== TY_KEYWORD) ||\n                     (aaa.item.ty === TY_KEYWORD && bbb.item.ty !== TY_PRIMITIVE)) {\n@@ -1230,15 +1239,19 @@ function initSearch(rawSearchIndex) {\n          * * `id` is the index in both `searchWords` and `searchIndex` arrays for this element.\n          * * `index` is an `integer`` used to sort by the position of the word in the item's name.\n          * * `lev` is the main metric used to sort the search results.\n+         * * `path_lev` is zero if a single-component search query is used, otherwise it's the\n+         *   distance computed for everything other than the last path component.\n          *\n          * @param {Results} results\n          * @param {string} fullId\n          * @param {integer} id\n          * @param {integer} index\n          * @param {integer} lev\n+         * @param {integer} path_lev\n          */\n-        function addIntoResults(results, fullId, id, index, lev) {\n-            if (lev === 0 || (!parsedQuery.literalSearch && lev <= MAX_LEV_DISTANCE)) {\n+        function addIntoResults(results, fullId, id, index, lev, path_lev) {\n+            const inBounds = lev <= MAX_LEV_DISTANCE || index !== -1;\n+            if (lev === 0 || (!parsedQuery.literalSearch && inBounds)) {\n                 if (results[fullId] !== undefined) {\n                     const result = results[fullId];\n                     if (result.dontValidate || result.lev <= lev) {\n@@ -1250,6 +1263,7 @@ function initSearch(rawSearchIndex) {\n                     index: index,\n                     dontValidate: parsedQuery.literalSearch,\n                     lev: lev,\n+                    path_lev: path_lev,\n                 };\n             }\n         }\n@@ -1280,68 +1294,68 @@ function initSearch(rawSearchIndex) {\n             if (!row || (filterCrates !== null && row.crate !== filterCrates)) {\n                 return;\n             }\n-            let lev, lev_add = 0, index = -1;\n+            let lev, index = -1, path_lev = 0;\n             const fullId = row.id;\n+            const searchWord = searchWords[pos];\n \n             const in_args = findArg(row, elem, parsedQuery.typeFilter);\n             const returned = checkReturned(row, elem, parsedQuery.typeFilter);\n \n-            addIntoResults(results_in_args, fullId, pos, index, in_args);\n-            addIntoResults(results_returned, fullId, pos, index, returned);\n+            // path_lev is 0 because no parent path information is currently stored\n+            // in the search index\n+            addIntoResults(results_in_args, fullId, pos, -1, in_args, 0);\n+            addIntoResults(results_returned, fullId, pos, -1, returned, 0);\n \n             if (!typePassesFilter(parsedQuery.typeFilter, row.ty)) {\n                 return;\n             }\n-            const searchWord = searchWords[pos];\n \n-            if (parsedQuery.literalSearch) {\n-                if (searchWord === elem.name) {\n-                    addIntoResults(results_others, fullId, pos, -1, 0);\n-                }\n-                return;\n+            const row_index = row.normalizedName.indexOf(elem.pathLast);\n+            const word_index = searchWord.indexOf(elem.pathLast);\n+\n+            // lower indexes are \"better\" matches\n+            // rank based on the \"best\" match\n+            if (row_index === -1) {\n+                index = word_index;\n+            } else if (word_index === -1) {\n+                index = row_index;\n+            } else if (word_index < row_index) {\n+                index = word_index;\n+            } else {\n+                index = row_index;\n             }\n \n             // No need to check anything else if it's a \"pure\" generics search.\n             if (elem.name.length === 0) {\n                 if (row.type !== null) {\n                     lev = checkGenerics(row.type, elem, MAX_LEV_DISTANCE + 1);\n-                    addIntoResults(results_others, fullId, pos, index, lev);\n+                    // path_lev is 0 because we know it's empty\n+                    addIntoResults(results_others, fullId, pos, index, lev, 0);\n                 }\n                 return;\n             }\n \n             if (elem.fullPath.length > 1) {\n-                lev = checkPath(elem.pathWithoutLast, row);\n-                if (lev > MAX_LEV_DISTANCE || (parsedQuery.literalSearch && lev !== 0)) {\n+                path_lev = checkPath(elem.pathWithoutLast, row);\n+                if (path_lev > MAX_LEV_DISTANCE) {\n                     return;\n-                } else if (lev > 0) {\n-                    lev_add = lev / 10;\n                 }\n             }\n \n-            if (searchWord.indexOf(elem.pathLast) > -1 ||\n-                row.normalizedName.indexOf(elem.pathLast) > -1\n-            ) {\n-                index = row.normalizedName.indexOf(elem.pathLast);\n-            }\n-            lev = levenshtein(searchWord, elem.pathLast);\n-            if (lev > 0 && elem.pathLast.length > 2 && searchWord.indexOf(elem.pathLast) > -1) {\n-                if (elem.pathLast.length < 6) {\n-                    lev = 1;\n-                } else {\n-                    lev = 0;\n+            if (parsedQuery.literalSearch) {\n+                if (searchWord === elem.name) {\n+                    addIntoResults(results_others, fullId, pos, index, 0, path_lev);\n                 }\n-            }\n-            lev += lev_add;\n-            if (lev > MAX_LEV_DISTANCE) {\n                 return;\n-            } else if (index !== -1 && elem.fullPath.length < 2) {\n-                lev -= 1;\n             }\n-            if (lev < 0) {\n-                lev = 0;\n+\n+            lev = levenshtein(searchWord, elem.pathLast);\n+\n+            if (index === -1 && lev + path_lev > MAX_LEV_DISTANCE) {\n+                return;\n             }\n-            addIntoResults(results_others, fullId, pos, index, lev);\n+\n+            addIntoResults(results_others, fullId, pos, index, lev, path_lev);\n         }\n \n         /**\n@@ -1386,7 +1400,7 @@ function initSearch(rawSearchIndex) {\n                 return;\n             }\n             const lev = Math.round(totalLev / nbLev);\n-            addIntoResults(results, row.id, pos, 0, lev);\n+            addIntoResults(results, row.id, pos, 0, lev, 0);\n         }\n \n         function innerRunQuery() {"}, {"sha": "419cc5ebac35de6325566ccb8d8501c998fa31fb", "filename": "tests/rustdoc-gui/settings.goml", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsettings.goml?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -8,6 +8,10 @@ assert-false: \"#settings\"\n click: \"#settings-menu\"\n wait-for: \"#settings\"\n assert-css: (\"#settings\", {\"display\": \"block\"})\n+\n+// Store the line margin to compare with the settings.html later.\n+store-css: (setting_line_margin, \".setting-line\", \"margin\")\n+\n // Let's close it by clicking on the same button.\n click: \"#settings-menu\"\n wait-for-css: (\"#settings\", {\"display\": \"none\"})\n@@ -203,6 +207,25 @@ press-key: \"?\"\n wait-for-css: (\"#help-button .popover\", {\"display\": \"block\"})\n assert-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n \n+// Now switch back to the settings popover, and make sure the keyboard\n+// shortcut works when a check box is selected.\n+click: \"#settings-menu > a\"\n+wait-for-css: (\"#settings-menu .popover\", {\"display\": \"block\"})\n+focus: \"#auto-hide-large-items\"\n+press-key: \"?\"\n+wait-for-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n+wait-for-css: (\"#help-button .popover\", {\"display\": \"block\"})\n+\n+// Now switch back to the settings popover, and make sure the keyboard\n+// shortcut works when a check box is selected.\n+click: \"#settings-menu > a\"\n+wait-for-css: (\"#settings-menu .popover\", {\"display\": \"block\"})\n+wait-for-css: (\"#help-button .popover\", {\"display\": \"none\"})\n+focus: \"#theme-system-preference\"\n+press-key: \"?\"\n+wait-for-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n+wait-for-css: (\"#help-button .popover\", {\"display\": \"block\"})\n+\n // Now we go to the settings page to check that the CSS is loaded as expected.\n goto: \"file://\" + |DOC_PATH| + \"/settings.html\"\n wait-for: \"#settings\"\n@@ -211,6 +234,9 @@ assert-css: (\".setting-line\", {\"position\": \"relative\"})\n assert-attribute-false: (\"#settings\", {\"class\": \"popover\"}, CONTAINS)\n compare-elements-position: (\".sub form\", \"#settings\", (\"x\"))\n \n+// Check that setting-line has the same margin in this mode as in the popover.\n+assert-css: (\".setting-line\", {\"margin\": |setting_line_margin|})\n+\n // We now check the display with JS disabled.\n assert-false: \"noscript section\"\n javascript: false"}, {"sha": "1b4c7b40570203b2b4eecb55488615984a72505d", "filename": "tests/rustdoc-js-std/macro-print.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-js-std%2Fmacro-print.js", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-js-std%2Fmacro-print.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fmacro-print.js?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -3,8 +3,8 @@ const QUERY = 'macro:print';\n const EXPECTED = {\n     'others': [\n         { 'path': 'std', 'name': 'print' },\n-        { 'path': 'std', 'name': 'eprint' },\n         { 'path': 'std', 'name': 'println' },\n+        { 'path': 'std', 'name': 'eprint' },\n         { 'path': 'std', 'name': 'eprintln' },\n     ],\n };"}, {"sha": "fd5c5489d79cfe04a4d844cfdec619ec542719f7", "filename": "tests/rustdoc-js-std/typed-query.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-js-std%2Ftyped-query.js", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-js-std%2Ftyped-query.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Ftyped-query.js?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -6,8 +6,8 @@ const FILTER_CRATE = 'std';\n const EXPECTED = {\n     'others': [\n         { 'path': 'std', 'name': 'print' },\n-        { 'path': 'std', 'name': 'eprint' },\n         { 'path': 'std', 'name': 'println' },\n+        { 'path': 'std', 'name': 'eprint' },\n         { 'path': 'std', 'name': 'eprintln' },\n         { 'path': 'std::pin', 'name': 'pin' },\n         { 'path': 'std::future', 'name': 'join' },"}, {"sha": "fc44a566af21f8ab1f2d9554370366c60975ab09", "filename": "tests/rustdoc-js-std/vec-new.js", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-js-std%2Fvec-new.js", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-js-std%2Fvec-new.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fvec-new.js?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -3,7 +3,8 @@ const QUERY = 'Vec::new';\n const EXPECTED = {\n     'others': [\n         { 'path': 'std::vec::Vec', 'name': 'new' },\n-        { 'path': 'std::vec::Vec', 'name': 'ne' },\n-        { 'path': 'alloc::vec::Vec', 'name': 'ne' },\n+        { 'path': 'alloc::vec::Vec', 'name': 'new' },\n+        { 'path': 'std::vec::Vec', 'name': 'new_in' },\n+        { 'path': 'alloc::vec::Vec', 'name': 'new_in' },\n     ],\n };"}, {"sha": "3b2f15a40bf87448fb9f441266e1934d1a6c6301", "filename": "tests/rustdoc-js/search-short-types.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-js%2Fsearch-short-types.js", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Frustdoc-js%2Fsearch-short-types.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fsearch-short-types.js?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -4,7 +4,6 @@ const EXPECTED = {\n     'others': [\n         { 'path': 'search_short_types', 'name': 'P' },\n         { 'path': 'search_short_types::VeryLongTypeName', 'name': 'p' },\n-        { 'path': 'search_short_types', 'name': 'Ap' },\n-        { 'path': 'search_short_types::VeryLongTypeName', 'name': 'ap' },\n+        { 'path': 'search_short_types', 'name': 'Pa' },\n     ],\n };"}, {"sha": "78922b59b27b7cc8d91b34412c539b806384c87d", "filename": "tests/ui/async-await/in-trait/missing-send-bound.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait Foo {\n+    async fn bar();\n+}\n+\n+async fn test<T: Foo>() {\n+    T::bar().await;\n+}\n+\n+fn test2<T: Foo>() {\n+    assert_is_send(test::<T>());\n+    //~^ ERROR future cannot be sent between threads safely\n+}\n+\n+fn assert_is_send(_: impl Send) {}\n+\n+fn main() {}"}, {"sha": "5cedf3ddb0f681804c8ec333b7808ed1908fddcb", "filename": "tests/ui/async-await/in-trait/missing-send-bound.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.stderr?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -0,0 +1,29 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing-send-bound.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/missing-send-bound.rs:15:20\n+   |\n+LL |     assert_is_send(test::<T>());\n+   |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/missing-send-bound.rs:11:5\n+   |\n+LL |     T::bar().await;\n+   |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\n+note: required by a bound in `assert_is_send`\n+  --> $DIR/missing-send-bound.rs:19:27\n+   |\n+LL | fn assert_is_send(_: impl Send) {}\n+   |                           ^^^^ required by this bound in `assert_is_send`\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "edc7fa81abb4fc97269a88a857308b97548fd895", "filename": "tests/ui/consts/auxiliary/closure-in-foreign-crate.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Fui%2Fconsts%2Fauxiliary%2Fclosure-in-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Fui%2Fconsts%2Fauxiliary%2Fclosure-in-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fauxiliary%2Fclosure-in-foreign-crate.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"lib\"]\n+#![feature(const_closures, const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+pub const fn test() {\n+    let cl = const || {};\n+    cl();\n+}"}, {"sha": "fc8f480e706bcd695f0e74057061991266fa672c", "filename": "tests/ui/consts/closure-in-foreign-crate.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Fui%2Fconsts%2Fclosure-in-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb/tests%2Fui%2Fconsts%2Fclosure-in-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fclosure-in-foreign-crate.rs?ref=6ba6d22bdf5348e566dedc77a7dfee3f3804f2fb", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:closure-in-foreign-crate.rs\n+// build-pass\n+\n+extern crate closure_in_foreign_crate;\n+\n+const _: () = closure_in_foreign_crate::test();\n+\n+fn main() {}"}]}