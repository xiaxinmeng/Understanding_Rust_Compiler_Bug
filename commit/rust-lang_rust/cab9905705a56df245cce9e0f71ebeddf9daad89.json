{"sha": "cab9905705a56df245cce9e0f71ebeddf9daad89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYjk5MDU3MDVhNTZkZjI0NWNjZTllMGY3MWViZWRkZjlkYWFkODk=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T17:26:33Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T17:26:51Z"}, "message": "better help text for \"match -> if let\" lint\n\nImplements the suggestion from #87.\n\nChanges span_help_and_lint(), which is only used for this lint,\nto use fileline_help() instead of span_help() to avoid printing\nthe span twice.\n\nAlso adds complete suggested new code. I had to distinguish\nbetween blocks, which need no additionals braces, and other exprs.", "tree": {"sha": "b27f626c88021b99f44b73b5ddc98e4d38b1915c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b27f626c88021b99f44b73b5ddc98e4d38b1915c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cab9905705a56df245cce9e0f71ebeddf9daad89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cab9905705a56df245cce9e0f71ebeddf9daad89", "html_url": "https://github.com/rust-lang/rust/commit/cab9905705a56df245cce9e0f71ebeddf9daad89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cab9905705a56df245cce9e0f71ebeddf9daad89/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ebdaa79d944514a6260b28526142908047053a", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ebdaa79d944514a6260b28526142908047053a", "html_url": "https://github.com/rust-lang/rust/commit/50ebdaa79d944514a6260b28526142908047053a"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "24f0d8afeb6526abe0bd7e54dac028e4ebdae254", "filename": "src/misc.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cab9905705a56df245cce9e0f71ebeddf9daad89/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab9905705a56df245cce9e0f71ebeddf9daad89/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=cab9905705a56df245cce9e0f71ebeddf9daad89", "patch": "@@ -43,13 +43,20 @@ impl LintPass for MiscPass {\n                     // an enum is extended. So we only consider cases where a `_` wildcard is used\n                     if arms[1].pats[0].node == PatWild(PatWildSingle) && \n                             arms[0].pats.len() == 1 {\n+                        let body_code = snippet(cx, arms[0].body.span, \"..\");\n+                        let suggestion = if let ExprBlock(_) = arms[0].body.node {\n+                            body_code.into_owned()\n+                        } else {\n+                            format!(\"{{ {} }}\", body_code)\n+                        };\n                         span_help_and_lint(cx, SINGLE_MATCH, expr.span,\n                               \"You seem to be trying to use match for \\\n-                              destructuring a single type. Did you mean to \\\n+                              destructuring a single pattern. Did you mean to \\\n                               use `if let`?\",\n-                              &*format!(\"Try if let {} = {} {{ ... }}\",\n-                                      snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                      snippet(cx, ex.span, \"..\"))\n+                              &*format!(\"Try\\nif let {} = {} {}\",\n+                                        snippet(cx, arms[0].pats[0].span, \"..\"),\n+                                        snippet(cx, ex.span, \"..\"),\n+                                        suggestion)\n                         );\n                     }\n                 }"}, {"sha": "5ec1033b8ea2bc0e3aa3267a500631839274102c", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cab9905705a56df245cce9e0f71ebeddf9daad89/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab9905705a56df245cce9e0f71ebeddf9daad89/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=cab9905705a56df245cce9e0f71ebeddf9daad89", "patch": "@@ -77,10 +77,10 @@ pub fn span_lint(cx: &Context, lint: &'static Lint, sp: Span, msg: &str) {\n     cx.span_lint(lint, sp, msg);\n }\n \n-pub fn span_help_and_lint(cx: &Context, lint: &'static Lint, span: Span, \n+pub fn span_help_and_lint(cx: &Context, lint: &'static Lint, span: Span,\n         msg: &str, help: &str) {\n     span_lint(cx, lint, span, msg);\n     if cx.current_level(lint) != Level::Allow {\n-        cx.sess().span_help(span, help);\n+        cx.sess().fileline_help(span, help);\n     }\n }"}, {"sha": "47b8b18a5ecc03341212cc3d3a330457d38297dd", "filename": "tests/compile-fail/match_if_let.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cab9905705a56df245cce9e0f71ebeddf9daad89/tests%2Fcompile-fail%2Fmatch_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab9905705a56df245cce9e0f71ebeddf9daad89/tests%2Fcompile-fail%2Fmatch_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_if_let.rs?ref=cab9905705a56df245cce9e0f71ebeddf9daad89", "patch": "@@ -6,8 +6,10 @@\n fn main(){\n     let x = Some(1u8);\n     match x {  //~ ERROR You seem to be trying to use match\n-               //~^ HELP Try if let Some(y) = x { ... }\n-        Some(y) => println!(\"{:?}\", y),\n+               //~^ HELP Try\n+        Some(y) => {\n+            println!(\"{:?}\", y);\n+        }\n         _ => ()\n     }\n     // Not linted\n@@ -17,7 +19,7 @@ fn main(){\n     }\n     let z = (1u8,1u8);\n     match z { //~ ERROR You seem to be trying to use match\n-              //~^ HELP Try if let (2...3, 7...9) = z { ... }\n+              //~^ HELP Try\n         (2...3, 7...9) => println!(\"{:?}\", z),\n         _ => {}\n     }"}]}