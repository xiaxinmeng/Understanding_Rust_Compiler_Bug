{"sha": "c6bfb1e9fdce7b94b4258d20d7402d551b30096c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YmZiMWU5ZmRjZTdiOTRiNDI1OGQyMGQ3NDAyZDU1MWIzMDA5NmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T03:56:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T23:39:24Z"}, "message": "Tests: No longer emitting 0008, E0301, E0302.", "tree": {"sha": "09335cae92e38510625e3aa84ff810e7f8f23eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09335cae92e38510625e3aa84ff810e7f8f23eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6bfb1e9fdce7b94b4258d20d7402d551b30096c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bfb1e9fdce7b94b4258d20d7402d551b30096c", "html_url": "https://github.com/rust-lang/rust/commit/c6bfb1e9fdce7b94b4258d20d7402d551b30096c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6bfb1e9fdce7b94b4258d20d7402d551b30096c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "url": "https://api.github.com/repos/rust-lang/rust/commits/642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "html_url": "https://github.com/rust-lang/rust/commit/642993e6dca427ce3cc5ca97bccaf6f6c872eb16"}], "stats": {"total": 119, "additions": 6, "deletions": 113}, "files": [{"sha": "a10af7e2aceab740282d996a2dbcfe9a424ddb42", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 6, "deletions": 77, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c6bfb1e9fdce7b94b4258d20d7402d551b30096c/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bfb1e9fdce7b94b4258d20d7402d551b30096c/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=c6bfb1e9fdce7b94b4258d20d7402d551b30096c", "patch": "@@ -157,81 +157,6 @@ match x {\n See also the error E0303.\n \"##,\n \n-E0008: r##\"\n-Names bound in match arms retain their type in pattern guards. As such, if a\n-name is bound by move in a pattern, it should also be moved to wherever it is\n-referenced in the pattern guard code. Doing so however would prevent the name\n-from being available in the body of the match arm. Consider the following:\n-\n-```compile_fail,E0008\n-match Some(\"hi\".to_string()) {\n-    Some(s) if s.len() == 0 => {}, // use s.\n-    _ => {},\n-}\n-```\n-\n-The variable `s` has type `String`, and its use in the guard is as a variable of\n-type `String`. The guard code effectively executes in a separate scope to the\n-body of the arm, so the value would be moved into this anonymous scope and\n-therefore becomes unavailable in the body of the arm.\n-\n-The problem above can be solved by using the `ref` keyword.\n-\n-```\n-match Some(\"hi\".to_string()) {\n-    Some(ref s) if s.len() == 0 => {},\n-    _ => {},\n-}\n-```\n-\n-Though this example seems innocuous and easy to solve, the problem becomes clear\n-when it encounters functions which consume the value:\n-\n-```compile_fail,E0008\n-struct A{}\n-\n-impl A {\n-    fn consume(self) -> usize {\n-        0\n-    }\n-}\n-\n-fn main() {\n-    let a = Some(A{});\n-    match a {\n-        Some(y) if y.consume() > 0 => {}\n-        _ => {}\n-    }\n-}\n-```\n-\n-In this situation, even the `ref` keyword cannot solve it, since borrowed\n-content cannot be moved. This problem cannot be solved generally. If the value\n-can be cloned, here is a not-so-specific solution:\n-\n-```\n-#[derive(Clone)]\n-struct A{}\n-\n-impl A {\n-    fn consume(self) -> usize {\n-        0\n-    }\n-}\n-\n-fn main() {\n-    let a = Some(A{});\n-    match a{\n-        Some(ref y) if y.clone().consume() > 0 => {}\n-        _ => {}\n-    }\n-}\n-```\n-\n-If the value will be consumed in the pattern guard, using its clone will not\n-move its ownership, so the code works.\n-\"##,\n-\n E0009: r##\"\n In a pattern, all values that don't implement the `Copy` trait have to be bound\n the same way. The goal here is to avoid binding simultaneously by-move and\n@@ -475,13 +400,15 @@ for item in xs {\n \"##,\n \n E0301: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Mutable borrows are not allowed in pattern guards, because matching cannot have\n side effects. Side effects could alter the matched object or the environment\n on which the match depends in such a way, that the match would not be\n exhaustive. For instance, the following would not match any arm if mutable\n borrows were allowed:\n \n-```compile_fail,E0301\n+```compile_fail,E0596\n match Some(()) {\n     None => { },\n     option if option.take().is_none() => {\n@@ -493,13 +420,15 @@ match Some(()) {\n \"##,\n \n E0302: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Assignments are not allowed in pattern guards, because matching cannot have\n side effects. Side effects could alter the matched object or the environment\n on which the match depends in such a way, that the match would not be\n exhaustive. For instance, the following would not match any arm if assignments\n were allowed:\n \n-```compile_fail,E0302\n+```compile_fail,E0594\n match Some(()) {\n     None => { },\n     option if { option = None; false } => { },"}, {"sha": "0df04036bb7677526f8bdf79d0c6a94f8ddd0d8c", "filename": "src/test/ui/error-codes/E0301.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    match Some(()) {\n-        None => { },\n-        option if option.take().is_none() => {},\n-        Some(_) => { } //~^ ERROR E0596\n-    }\n-}"}, {"sha": "661b86e3894850a64c13617efa4f079bf79ddef8", "filename": "src/test/ui/error-codes/E0301.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,11 +0,0 @@\n-error[E0596]: cannot borrow `option` as mutable, as it is immutable for the pattern guard\n-  --> $DIR/E0301.rs:4:19\n-   |\n-LL |         option if option.take().is_none() => {},\n-   |                   ^^^^^^ cannot borrow as mutable\n-   |\n-   = note: variables bound in patterns are immutable until the end of the pattern guard\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "28a1bc31bea7b72b307c96fbc1741bc0235ce94a", "filename": "src/test/ui/error-codes/E0302.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,8 +0,0 @@\n-fn main() {\n-    match Some(()) {\n-        None => { },\n-        option if { option = None; false } => { },\n-        //~^ ERROR cannot assign to `option`, as it is immutable for the pattern guard\n-        Some(_) => { }\n-    }\n-}"}, {"sha": "5854772f1d34af7d46d21175af520ca5ac4169e4", "filename": "src/test/ui/error-codes/E0302.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,10 +0,0 @@\n-error[E0594]: cannot assign to `option`, as it is immutable for the pattern guard\n-  --> $DIR/E0302.rs:4:21\n-   |\n-LL |         option if { option = None; false } => { },\n-   |                     ^^^^^^^^^^^^^ cannot assign\n-   |\n-   = note: variables bound in patterns are immutable until the end of the pattern guard\n-\n-error: aborting due to previous error\n-"}]}