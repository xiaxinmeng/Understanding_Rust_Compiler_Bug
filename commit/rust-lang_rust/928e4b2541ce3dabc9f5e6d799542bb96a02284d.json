{"sha": "928e4b2541ce3dabc9f5e6d799542bb96a02284d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyOGU0YjI1NDFjZTNkYWJjOWY1ZTZkNzk5NTQyYmI5NmEwMjI4NGQ=", "commit": {"author": {"name": "Joseph Caudle", "email": "joseph@josephcaudle.com", "date": "2015-10-10T04:01:57Z"}, "committer": {"name": "Joseph Caudle", "email": "joseph@josephcaudle.com", "date": "2015-10-10T04:01:57Z"}, "message": "Run rustfmt on librand/distributions/normal.rs", "tree": {"sha": "dcdcd9998334c4f0d5e33f9f07296ea866c865fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcdcd9998334c4f0d5e33f9f07296ea866c865fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/928e4b2541ce3dabc9f5e6d799542bb96a02284d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/928e4b2541ce3dabc9f5e6d799542bb96a02284d", "html_url": "https://github.com/rust-lang/rust/commit/928e4b2541ce3dabc9f5e6d799542bb96a02284d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/928e4b2541ce3dabc9f5e6d799542bb96a02284d/comments", "author": {"login": "jcaudle", "id": 301553, "node_id": "MDQ6VXNlcjMwMTU1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/301553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcaudle", "html_url": "https://github.com/jcaudle", "followers_url": "https://api.github.com/users/jcaudle/followers", "following_url": "https://api.github.com/users/jcaudle/following{/other_user}", "gists_url": "https://api.github.com/users/jcaudle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcaudle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcaudle/subscriptions", "organizations_url": "https://api.github.com/users/jcaudle/orgs", "repos_url": "https://api.github.com/users/jcaudle/repos", "events_url": "https://api.github.com/users/jcaudle/events{/privacy}", "received_events_url": "https://api.github.com/users/jcaudle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcaudle", "id": 301553, "node_id": "MDQ6VXNlcjMwMTU1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/301553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcaudle", "html_url": "https://github.com/jcaudle", "followers_url": "https://api.github.com/users/jcaudle/followers", "following_url": "https://api.github.com/users/jcaudle/following{/other_user}", "gists_url": "https://api.github.com/users/jcaudle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcaudle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcaudle/subscriptions", "organizations_url": "https://api.github.com/users/jcaudle/orgs", "repos_url": "https://api.github.com/users/jcaudle/repos", "events_url": "https://api.github.com/users/jcaudle/events{/privacy}", "received_events_url": "https://api.github.com/users/jcaudle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87cd2c08273dec5c8db8e59f4231b8e69aa9b85b", "url": "https://api.github.com/repos/rust-lang/rust/commits/87cd2c08273dec5c8db8e59f4231b8e69aa9b85b", "html_url": "https://github.com/rust-lang/rust/commit/87cd2c08273dec5c8db8e59f4231b8e69aa9b85b"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "7fe8b6e8806e9950073c52d65b2b9187ebf8466e", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/928e4b2541ce3dabc9f5e6d799542bb96a02284d/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e4b2541ce3dabc9f5e6d799542bb96a02284d/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=928e4b2541ce3dabc9f5e6d799542bb96a02284d", "patch": "@@ -32,13 +32,13 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n pub struct StandardNormal(pub f64);\n \n impl Rand for StandardNormal {\n-    fn rand<R:Rng>(rng: &mut R) -> StandardNormal {\n+    fn rand<R: Rng>(rng: &mut R) -> StandardNormal {\n         #[inline]\n         fn pdf(x: f64) -> f64 {\n-            (-x*x/2.0).exp()\n+            (-x * x / 2.0).exp()\n         }\n         #[inline]\n-        fn zero_case<R:Rng>(rng: &mut R, u: f64) -> f64 {\n+        fn zero_case<R: Rng>(rng: &mut R, u: f64) -> f64 {\n             // compute a random number in the tail by hand\n \n             // strange initial conditions, because the loop is not\n@@ -56,15 +56,19 @@ impl Rand for StandardNormal {\n                 y = y_.ln();\n             }\n \n-            if u < 0.0 { x - ziggurat_tables::ZIG_NORM_R } else { ziggurat_tables::ZIG_NORM_R - x }\n+            if u < 0.0 {\n+                x - ziggurat_tables::ZIG_NORM_R\n+            } else {\n+                ziggurat_tables::ZIG_NORM_R - x\n+            }\n         }\n \n-        StandardNormal(ziggurat(\n-            rng,\n-            true, // this is symmetric\n-            &ziggurat_tables::ZIG_NORM_X,\n-            &ziggurat_tables::ZIG_NORM_F,\n-            pdf, zero_case))\n+        StandardNormal(ziggurat(rng,\n+                                true, // this is symmetric\n+                                &ziggurat_tables::ZIG_NORM_X,\n+                                &ziggurat_tables::ZIG_NORM_F,\n+                                pdf,\n+                                zero_case))\n     }\n }\n \n@@ -89,12 +93,14 @@ impl Normal {\n         assert!(std_dev >= 0.0, \"Normal::new called with `std_dev` < 0\");\n         Normal {\n             mean: mean,\n-            std_dev: std_dev\n+            std_dev: std_dev,\n         }\n     }\n }\n impl Sample<f64> for Normal {\n-    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }\n+    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 {\n+        self.ind_sample(rng)\n+    }\n }\n impl IndependentSample<f64> for Normal {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n@@ -110,7 +116,7 @@ impl IndependentSample<f64> for Normal {\n /// std_dev**2)` distributed.\n #[derive(Copy, Clone)]\n pub struct LogNormal {\n-    norm: Normal\n+    norm: Normal,\n }\n \n impl LogNormal {\n@@ -126,7 +132,9 @@ impl LogNormal {\n     }\n }\n impl Sample<f64> for LogNormal {\n-    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }\n+    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 {\n+        self.ind_sample(rng)\n+    }\n }\n impl IndependentSample<f64> for LogNormal {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n@@ -179,7 +187,7 @@ mod bench {\n     use std::prelude::v1::*;\n     use self::test::Bencher;\n     use std::mem::size_of;\n-    use distributions::{Sample};\n+    use distributions::Sample;\n     use super::Normal;\n \n     #[bench]"}]}