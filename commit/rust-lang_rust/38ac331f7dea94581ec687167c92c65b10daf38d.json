{"sha": "38ac331f7dea94581ec687167c92c65b10daf38d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YWMzMzFmN2RlYTk0NTgxZWM2ODcxNjdjOTJjNjViMTBkYWYzOGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-08T16:20:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T16:20:45Z"}, "message": "Merge #4784\n\n4784: Change management of test cfg to better support json projects r=Nashenas88 a=Nashenas88\n\nThis helps support json projects where they can decide whether to add the `test` cfg or not. One alternative is to add support for marking json project crates as a sysroot crate, and adding logic to remove the `test` cfg in those cases. In my opinion, that option gives less flexibility to json projects and leads to more functionality that needs to be maintained.\r\n\r\nFixes #4508 \r\ncc @woody77 \n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>\nCo-authored-by: Paul Daniel Faria <nashenas88@users.noreply.github.com>", "tree": {"sha": "7f9cc7d2d7b6dfa363f5a0d310108bad22621291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f9cc7d2d7b6dfa363f5a0d310108bad22621291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ac331f7dea94581ec687167c92c65b10daf38d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3mVdCRBK7hj4Ov3rIwAAdHIIAFk7olAN12DxN0O1mvEaa5vp\nSN21lOFXlH3qZdoHhINa+BzTs+sAumvzrq53rzI0sMEZgFqqdnFwNoSMlt7M/sup\nHq2PJB2GHhMtqt9UV0CWOwhSxNr3qj5PyiTHY4Zbz6sxb/uEJjMTD02CtRePX92i\nzPT8JL/QkdaE5Mo73BuaFJdU5qLErWPhI9UUhrBQiaoqf1aoBWPHTWb9AFS3McXD\nRCnHyC6/hiQxp2/v9a7rs3f9ApBCipjTP8YLoUgF5s38TLJHRF4Qpc1Cok1o4djR\nCw888URFxv6iyZ6KDtVi2yVZjh1aaGmHNTo5gSPfYKUa31SA2Z5dlIhCpMDPVJE=\n=rBxV\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f9cc7d2d7b6dfa363f5a0d310108bad22621291\nparent 5ed9818a7c855bf914e91324e305f24e4e743057\nparent dbceaf522b717bd0dda89f6af1684ebd8e033aee\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591633245 +0000\ncommitter GitHub <noreply@github.com> 1591633245 +0000\n\nMerge #4784\n\n4784: Change management of test cfg to better support json projects r=Nashenas88 a=Nashenas88\n\nThis helps support json projects where they can decide whether to add the `test` cfg or not. One alternative is to add support for marking json project crates as a sysroot crate, and adding logic to remove the `test` cfg in those cases. In my opinion, that option gives less flexibility to json projects and leads to more functionality that needs to be maintained.\r\n\r\nFixes #4508 \r\ncc @woody77 \n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>\nCo-authored-by: Paul Daniel Faria <nashenas88@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ac331f7dea94581ec687167c92c65b10daf38d", "html_url": "https://github.com/rust-lang/rust/commit/38ac331f7dea94581ec687167c92c65b10daf38d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ac331f7dea94581ec687167c92c65b10daf38d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed9818a7c855bf914e91324e305f24e4e743057", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed9818a7c855bf914e91324e305f24e4e743057", "html_url": "https://github.com/rust-lang/rust/commit/5ed9818a7c855bf914e91324e305f24e4e743057"}, {"sha": "dbceaf522b717bd0dda89f6af1684ebd8e033aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbceaf522b717bd0dda89f6af1684ebd8e033aee", "html_url": "https://github.com/rust-lang/rust/commit/dbceaf522b717bd0dda89f6af1684ebd8e033aee"}], "stats": {"total": 60, "additions": 20, "deletions": 40}, "files": [{"sha": "fe03b509e4ff2f7d66fdfd67fffa91d8bf170b21", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38ac331f7dea94581ec687167c92c65b10daf38d/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ac331f7dea94581ec687167c92c65b10daf38d/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=38ac331f7dea94581ec687167c92c65b10daf38d", "patch": "@@ -250,7 +250,7 @@ impl ProjectWorkspace {\n \n     pub fn to_crate_graph(\n         &self,\n-        default_cfg_options: &CfgOptions,\n+        target: Option<&str>,\n         extern_source_roots: &FxHashMap<PathBuf, ExternSourceId>,\n         proc_macro_client: &ProcMacroClient,\n         load: &mut dyn FnMut(&Path) -> Option<FileId>,\n@@ -269,7 +269,7 @@ impl ProjectWorkspace {\n                             json_project::Edition::Edition2018 => Edition::Edition2018,\n                         };\n                         let cfg_options = {\n-                            let mut opts = default_cfg_options.clone();\n+                            let mut opts = CfgOptions::default();\n                             for cfg in &krate.cfg {\n                                 match cfg.find('=') {\n                                     None => opts.insert_atom(cfg.into()),\n@@ -343,18 +343,13 @@ impl ProjectWorkspace {\n                 }\n             }\n             ProjectWorkspace::Cargo { cargo, sysroot } => {\n+                let mut cfg_options = get_rustc_cfg_options(target);\n+\n                 let sysroot_crates: FxHashMap<_, _> = sysroot\n                     .crates()\n                     .filter_map(|krate| {\n                         let file_id = load(&sysroot[krate].root)?;\n \n-                        // Crates from sysroot have `cfg(test)` disabled\n-                        let cfg_options = {\n-                            let mut opts = default_cfg_options.clone();\n-                            opts.remove_atom(\"test\");\n-                            opts\n-                        };\n-\n                         let env = Env::default();\n                         let extern_source = ExternSource::default();\n                         let proc_macro = vec![];\n@@ -365,7 +360,7 @@ impl ProjectWorkspace {\n                             file_id,\n                             Edition::Edition2018,\n                             Some(crate_name),\n-                            cfg_options,\n+                            cfg_options.clone(),\n                             env,\n                             extern_source,\n                             proc_macro,\n@@ -396,6 +391,10 @@ impl ProjectWorkspace {\n \n                 let mut pkg_to_lib_crate = FxHashMap::default();\n                 let mut pkg_crates = FxHashMap::default();\n+\n+                // Add test cfg for non-sysroot crates\n+                cfg_options.insert_atom(\"test\".into());\n+\n                 // Next, create crates for each package, target pair\n                 for pkg in cargo.packages() {\n                     let mut lib_tgt = None;\n@@ -404,7 +403,7 @@ impl ProjectWorkspace {\n                         if let Some(file_id) = load(root) {\n                             let edition = cargo[pkg].edition;\n                             let cfg_options = {\n-                                let mut opts = default_cfg_options.clone();\n+                                let mut opts = cfg_options.clone();\n                                 for feature in cargo[pkg].features.iter() {\n                                     opts.insert_key_value(\"feature\".into(), feature.into());\n                                 }\n@@ -561,7 +560,7 @@ impl ProjectWorkspace {\n     }\n }\n \n-pub fn get_rustc_cfg_options(target: Option<&String>) -> CfgOptions {\n+fn get_rustc_cfg_options(target: Option<&str>) -> CfgOptions {\n     let mut cfg_options = CfgOptions::default();\n \n     // Some nightly-only cfgs, which are required for stdlib\n@@ -579,7 +578,7 @@ pub fn get_rustc_cfg_options(target: Option<&String>) -> CfgOptions {\n         let mut cmd = Command::new(ra_toolchain::rustc());\n         cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n         if let Some(target) = target {\n-            cmd.args(&[\"--target\", target.as_str()]);\n+            cmd.args(&[\"--target\", target]);\n         }\n         let output = output(cmd)?;\n         Ok(String::from_utf8(output.stdout)?)\n@@ -601,6 +600,8 @@ pub fn get_rustc_cfg_options(target: Option<&String>) -> CfgOptions {\n         Err(e) => log::error!(\"failed to get rustc cfgs: {:#}\", e),\n     }\n \n+    cfg_options.insert_atom(\"debug_assertion\".into());\n+\n     cfg_options\n }\n "}, {"sha": "8f2aeac7714ebf8ae28ce5bf3b9e11c63649eebe", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38ac331f7dea94581ec687167c92c65b10daf38d/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ac331f7dea94581ec687167c92c65b10daf38d/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=38ac331f7dea94581ec687167c92c65b10daf38d", "patch": "@@ -8,8 +8,7 @@ use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{ExternSourceId, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost};\n use ra_project_model::{\n-    get_rustc_cfg_options, CargoConfig, PackageRoot, ProcMacroClient, ProjectManifest,\n-    ProjectWorkspace,\n+    CargoConfig, PackageRoot, ProcMacroClient, ProjectManifest, ProjectWorkspace,\n };\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -148,26 +147,14 @@ pub(crate) fn load(\n         }\n     }\n \n-    // FIXME: cfg options?\n-    let default_cfg_options = {\n-        let mut opts = get_rustc_cfg_options(None);\n-        opts.insert_atom(\"test\".into());\n-        opts.insert_atom(\"debug_assertion\".into());\n-        opts\n-    };\n-\n-    let crate_graph = ws.to_crate_graph(\n-        &default_cfg_options,\n-        &extern_source_roots,\n-        proc_macro_client,\n-        &mut |path: &Path| {\n+    let crate_graph =\n+        ws.to_crate_graph(None, &extern_source_roots, proc_macro_client, &mut |path: &Path| {\n             // Some path from metadata will be non canonicalized, e.g. /foo/../bar/lib.rs\n             let path = path.canonicalize().ok()?;\n             let vfs_file = vfs.load(&path);\n             log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n             vfs_file.map(vfs_file_to_id)\n-        },\n-    );\n+        });\n     log::debug!(\"crate graph: {:?}\", crate_graph);\n     analysis_change.set_crate_graph(crate_graph);\n "}, {"sha": "73b0f881d36976f668e949d444fd8b3246f406bf", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38ac331f7dea94581ec687167c92c65b10daf38d/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ac331f7dea94581ec687167c92c65b10daf38d/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=38ac331f7dea94581ec687167c92c65b10daf38d", "patch": "@@ -15,7 +15,7 @@ use ra_flycheck::{Flycheck, FlycheckConfig};\n use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n-use ra_project_model::{get_rustc_cfg_options, ProcMacroClient, ProjectWorkspace};\n+use ra_project_model::{ProcMacroClient, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n use stdx::format_to;\n@@ -135,14 +135,6 @@ impl GlobalState {\n             }\n         }\n \n-        // FIXME: Read default cfgs from config\n-        let default_cfg_options = {\n-            let mut opts = get_rustc_cfg_options(config.cargo.target.as_ref());\n-            opts.insert_atom(\"test\".into());\n-            opts.insert_atom(\"debug_assertion\".into());\n-            opts\n-        };\n-\n         let proc_macro_client = match &config.proc_macro_srv {\n             None => ProcMacroClient::dummy(),\n             Some((path, args)) => match ProcMacroClient::extern_process(path.into(), args) {\n@@ -168,7 +160,7 @@ impl GlobalState {\n         };\n         for ws in workspaces.iter() {\n             crate_graph.extend(ws.to_crate_graph(\n-                &default_cfg_options,\n+                config.cargo.target.as_deref(),\n                 &extern_source_roots,\n                 &proc_macro_client,\n                 &mut load,"}]}