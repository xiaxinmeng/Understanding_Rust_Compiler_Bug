{"sha": "b02a6193b370ff7c3cb46d713afd990f134e547e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMmE2MTkzYjM3MGZmN2MzY2I0NmQ3MTNhZmQ5OTBmMTM0ZTU0N2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-23T00:30:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-23T00:30:37Z"}, "message": "Auto merge of #81937 - ssomers:btree_drainy_refactor_9b, r=Mark-Simulacrum\n\nBTree: move more shared iterator code into navigate.rs\n\nThe functions in navigate.rs only exist to support iterators, and these look easier on my eyes if there is a shared `struct` with the recurring pair of handles.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "c6cd86b39a9bddc3c59fc884af0fe7853a771937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6cd86b39a9bddc3c59fc884af0fe7853a771937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b02a6193b370ff7c3cb46d713afd990f134e547e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b02a6193b370ff7c3cb46d713afd990f134e547e", "html_url": "https://github.com/rust-lang/rust/commit/b02a6193b370ff7c3cb46d713afd990f134e547e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b02a6193b370ff7c3cb46d713afd990f134e547e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f838d64ae764c6016c2c00f958bec61e9a2691", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f838d64ae764c6016c2c00f958bec61e9a2691", "html_url": "https://github.com/rust-lang/rust/commit/11f838d64ae764c6016c2c00f958bec61e9a2691"}, {"sha": "342aa694f92f437364d9cfe9c59fc858b38f3604", "url": "https://api.github.com/repos/rust-lang/rust/commits/342aa694f92f437364d9cfe9c59fc858b38f3604", "html_url": "https://github.com/rust-lang/rust/commit/342aa694f92f437364d9cfe9c59fc858b38f3604"}], "stats": {"total": 165, "additions": 67, "deletions": 98}, "files": [{"sha": "3ba95d9f47a1ed2c10712e3ccf91760da8aae64e", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 35, "deletions": 56, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/b02a6193b370ff7c3cb46d713afd990f134e547e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02a6193b370ff7c3cb46d713afd990f134e547e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=b02a6193b370ff7c3cb46d713afd990f134e547e", "patch": "@@ -9,6 +9,7 @@ use core::ops::{Index, RangeBounds};\n use core::ptr;\n \n use super::borrow::DormantMutRef;\n+use super::navigate::LeafRange;\n use super::node::{self, marker, ForceResult::*, Handle, NodeRef, Root};\n use super::search::SearchResult::*;\n \n@@ -307,20 +308,15 @@ pub struct IterMut<'a, K: 'a, V: 'a> {\n /// [`into_iter`]: IntoIterator::into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n-    front: Option<Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge>>,\n-    back: Option<Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge>>,\n+    range: LeafRange<marker::Dying, K, V>,\n     length: usize,\n }\n \n impl<K, V> IntoIter<K, V> {\n     /// Returns an iterator of references over the remaining items.\n     #[inline]\n     pub(super) fn iter(&self) -> Iter<'_, K, V> {\n-        let range = Range {\n-            front: self.front.as_ref().map(|f| f.reborrow()),\n-            back: self.back.as_ref().map(|b| b.reborrow()),\n-        };\n-\n+        let range = Range { inner: self.range.reborrow() };\n         Iter { range: range, length: self.length }\n     }\n }\n@@ -438,8 +434,7 @@ impl<K, V: fmt::Debug> fmt::Debug for IntoValues<K, V> {\n /// [`range`]: BTreeMap::range\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, K: 'a, V: 'a> {\n-    front: Option<Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n-    back: Option<Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n+    inner: LeafRange<marker::Immut<'a>, K, V>,\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n@@ -457,8 +452,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Range<'_, K, V> {\n /// [`range_mut`]: BTreeMap::range_mut\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n-    front: Option<Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n-    back: Option<Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n+    inner: LeafRange<marker::ValMut<'a>, K, V>,\n \n     // Be invariant in `K` and `V`\n     _marker: PhantomData<&'a mut (K, V)>,\n@@ -467,10 +461,7 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for RangeMut<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let range = Range {\n-            front: self.front.as_ref().map(|f| f.reborrow()),\n-            back: self.back.as_ref().map(|b| b.reborrow()),\n-        };\n+        let range = Range { inner: self.inner.reborrow() };\n         f.debug_list().entries(range).finish()\n     }\n }\n@@ -1018,11 +1009,9 @@ impl<K, V> BTreeMap<K, V> {\n         R: RangeBounds<T>,\n     {\n         if let Some(root) = &self.root {\n-            let (f, b) = root.reborrow().range_search(range);\n-\n-            Range { front: Some(f), back: Some(b) }\n+            Range { inner: root.reborrow().range_search(range) }\n         } else {\n-            Range { front: None, back: None }\n+            Range { inner: LeafRange::none() }\n         }\n     }\n \n@@ -1064,11 +1053,9 @@ impl<K, V> BTreeMap<K, V> {\n         R: RangeBounds<T>,\n     {\n         if let Some(root) = &mut self.root {\n-            let (f, b) = root.borrow_valmut().range_search(range);\n-\n-            RangeMut { front: Some(f), back: Some(b), _marker: PhantomData }\n+            RangeMut { inner: root.borrow_valmut().range_search(range), _marker: PhantomData }\n         } else {\n-            RangeMut { front: None, back: None, _marker: PhantomData }\n+            RangeMut { inner: LeafRange::none(), _marker: PhantomData }\n         }\n     }\n \n@@ -1407,11 +1394,11 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n     fn into_iter(self) -> IntoIter<K, V> {\n         let mut me = ManuallyDrop::new(self);\n         if let Some(root) = me.root.take() {\n-            let (f, b) = root.into_dying().full_range();\n+            let full_range = root.into_dying().full_range();\n \n-            IntoIter { front: Some(f), back: Some(b), length: me.length }\n+            IntoIter { range: full_range, length: me.length }\n         } else {\n-            IntoIter { front: None, back: None, length: 0 }\n+            IntoIter { range: LeafRange::none(), length: 0 }\n         }\n     }\n }\n@@ -1450,7 +1437,7 @@ impl<K, V> Drop for Dropper<K, V> {\n #[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n impl<K, V> Drop for IntoIter<K, V> {\n     fn drop(&mut self) {\n-        if let Some(front) = self.front.take() {\n+        if let Some(front) = self.range.front.take() {\n             Dropper { front, remaining_length: self.length };\n         }\n     }\n@@ -1465,7 +1452,7 @@ impl<K, V> Iterator for IntoIter<K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.front.as_mut().unwrap().deallocating_next_unchecked() })\n+            Some(unsafe { self.range.front.as_mut().unwrap().deallocating_next_unchecked() })\n         }\n     }\n \n@@ -1481,7 +1468,7 @@ impl<K, V> DoubleEndedIterator for IntoIter<K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.back.as_mut().unwrap().deallocating_next_back_unchecked() })\n+            Some(unsafe { self.range.back.as_mut().unwrap().deallocating_next_back_unchecked() })\n         }\n     }\n }\n@@ -1698,7 +1685,7 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     type Item = (&'a K, &'a V);\n \n     fn next(&mut self) -> Option<(&'a K, &'a V)> {\n-        if self.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n+        if self.inner.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n     }\n \n     fn last(mut self) -> Option<(&'a K, &'a V)> {\n@@ -1749,12 +1736,8 @@ impl<K, V> ExactSizeIterator for ValuesMut<'_, K, V> {\n impl<K, V> FusedIterator for ValuesMut<'_, K, V> {}\n \n impl<'a, K, V> Range<'a, K, V> {\n-    fn is_empty(&self) -> bool {\n-        self.front == self.back\n-    }\n-\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n-        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n+        unsafe { self.inner.front.as_mut().unwrap_unchecked().next_unchecked() }\n     }\n }\n \n@@ -1837,13 +1820,13 @@ impl<K, V> FusedIterator for IntoValues<K, V> {}\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> {\n-        if self.is_empty() { None } else { Some(unsafe { self.next_back_unchecked() }) }\n+        if self.inner.is_empty() { None } else { Some(unsafe { self.next_back_unchecked() }) }\n     }\n }\n \n impl<'a, K, V> Range<'a, K, V> {\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n-        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n+        unsafe { self.inner.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n     }\n }\n \n@@ -1853,7 +1836,7 @@ impl<K, V> FusedIterator for Range<'_, K, V> {}\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<K, V> Clone for Range<'_, K, V> {\n     fn clone(&self) -> Self {\n-        Range { front: self.front, back: self.back }\n+        Range { inner: LeafRange { front: self.inner.front, back: self.inner.back } }\n     }\n }\n \n@@ -1862,7 +1845,7 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n \n     fn next(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n+        if self.inner.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n     }\n \n     fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n@@ -1879,28 +1862,21 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {\n-    fn is_empty(&self) -> bool {\n-        self.front == self.back\n-    }\n-\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n+        unsafe { self.inner.front.as_mut().unwrap_unchecked().next_unchecked() }\n     }\n \n     /// Returns an iterator of references over the remaining items.\n     #[inline]\n     pub(super) fn iter(&self) -> Range<'_, K, V> {\n-        Range {\n-            front: self.front.as_ref().map(|f| f.reborrow()),\n-            back: self.back.as_ref().map(|b| b.reborrow()),\n-        }\n+        Range { inner: self.inner.reborrow() }\n     }\n }\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.is_empty() { None } else { Some(unsafe { self.next_back_unchecked() }) }\n+        if self.inner.is_empty() { None } else { Some(unsafe { self.next_back_unchecked() }) }\n     }\n }\n \n@@ -1909,7 +1885,7 @@ impl<K, V> FusedIterator for RangeMut<'_, K, V> {}\n \n impl<'a, K, V> RangeMut<'a, K, V> {\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n+        unsafe { self.inner.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n     }\n }\n \n@@ -2043,11 +2019,11 @@ impl<K, V> BTreeMap<K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, K, V> {\n         if let Some(root) = &self.root {\n-            let (f, b) = root.reborrow().full_range();\n+            let full_range = root.reborrow().full_range();\n \n-            Iter { range: Range { front: Some(f), back: Some(b) }, length: self.length }\n+            Iter { range: Range { inner: full_range }, length: self.length }\n         } else {\n-            Iter { range: Range { front: None, back: None }, length: 0 }\n+            Iter { range: Range { inner: LeafRange::none() }, length: 0 }\n         }\n     }\n \n@@ -2075,14 +2051,17 @@ impl<K, V> BTreeMap<K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n         if let Some(root) = &mut self.root {\n-            let (f, b) = root.borrow_valmut().full_range();\n+            let full_range = root.borrow_valmut().full_range();\n \n             IterMut {\n-                range: RangeMut { front: Some(f), back: Some(b), _marker: PhantomData },\n+                range: RangeMut { inner: full_range, _marker: PhantomData },\n                 length: self.length,\n             }\n         } else {\n-            IterMut { range: RangeMut { front: None, back: None, _marker: PhantomData }, length: 0 }\n+            IterMut {\n+                range: RangeMut { inner: LeafRange::none(), _marker: PhantomData },\n+                length: 0,\n+            }\n         }\n     }\n "}, {"sha": "e0b9a01d11056462a38e10c8ad16ce48da2a9076", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 32, "deletions": 42, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b02a6193b370ff7c3cb46d713afd990f134e547e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02a6193b370ff7c3cb46d713afd990f134e547e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=b02a6193b370ff7c3cb46d713afd990f134e547e", "patch": "@@ -7,6 +7,29 @@ use core::ptr;\n use super::node::{marker, ForceResult::*, Handle, NodeRef};\n use super::search::SearchResult;\n \n+pub struct LeafRange<BorrowType, K, V> {\n+    pub front: Option<Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>>,\n+    pub back: Option<Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>>,\n+}\n+\n+impl<BorrowType, K, V> LeafRange<BorrowType, K, V> {\n+    pub fn none() -> Self {\n+        LeafRange { front: None, back: None }\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.front == self.back\n+    }\n+\n+    /// Temporarily takes out another, immutable equivalent of the same range.\n+    pub fn reborrow(&self) -> LeafRange<marker::Immut<'_>, K, V> {\n+        LeafRange {\n+            front: self.front.as_ref().map(|f| f.reborrow()),\n+            back: self.back.as_ref().map(|b| b.reborrow()),\n+        }\n+    }\n+}\n+\n /// Finds the leaf edges delimiting a specified range in or underneath a node.\n ///\n /// The result is meaningful only if the tree is ordered by key, like the tree\n@@ -15,10 +38,7 @@ fn range_search<BorrowType: marker::BorrowType, K, V, Q, R>(\n     root1: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n     root2: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n     range: R,\n-) -> (\n-    Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>,\n-    Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>,\n-)\n+) -> LeafRange<BorrowType, K, V>\n where\n     Q: ?Sized + Ord,\n     K: Borrow<Q>,\n@@ -92,7 +112,7 @@ where\n         }\n         match (front.force(), back.force()) {\n             (Leaf(f), Leaf(b)) => {\n-                return (f, b);\n+                return LeafRange { front: Some(f), back: Some(b) };\n             }\n             (Internal(min_int), Internal(max_int)) => {\n                 min_node = min_int.descend();\n@@ -108,18 +128,15 @@ where\n fn full_range<BorrowType: marker::BorrowType, K, V>(\n     root1: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n     root2: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n-) -> (\n-    Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>,\n-    Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>,\n-) {\n+) -> LeafRange<BorrowType, K, V> {\n     let mut min_node = root1;\n     let mut max_node = root2;\n     loop {\n         let front = min_node.first_edge();\n         let back = max_node.last_edge();\n         match (front.force(), back.force()) {\n             (Leaf(f), Leaf(b)) => {\n-                return (f, b);\n+                return LeafRange { front: Some(f), back: Some(b) };\n             }\n             (Internal(min_int), Internal(max_int)) => {\n                 min_node = min_int.descend();\n@@ -135,13 +152,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n     ///\n     /// The result is meaningful only if the tree is ordered by key, like the tree\n     /// in a `BTreeMap` is.\n-    pub fn range_search<Q, R>(\n-        self,\n-        range: R,\n-    ) -> (\n-        Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-        Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-    )\n+    pub fn range_search<Q, R>(self, range: R) -> LeafRange<marker::Immut<'a>, K, V>\n     where\n         Q: ?Sized + Ord,\n         K: Borrow<Q>,\n@@ -151,12 +162,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n     }\n \n     /// Finds the pair of leaf edges delimiting an entire tree.\n-    pub fn full_range(\n-        self,\n-    ) -> (\n-        Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-        Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-    ) {\n+    pub fn full_range(self) -> LeafRange<marker::Immut<'a>, K, V> {\n         full_range(self, self)\n     }\n }\n@@ -168,13 +174,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::ValMut<'a>, K, V, marker::LeafOrInternal>\n     ///\n     /// The result is meaningful only if the tree is ordered by key, like the tree\n     /// in a `BTreeMap` is.\n-    pub fn range_search<Q, R>(\n-        self,\n-        range: R,\n-    ) -> (\n-        Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-        Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-    )\n+    pub fn range_search<Q, R>(self, range: R) -> LeafRange<marker::ValMut<'a>, K, V>\n     where\n         Q: ?Sized + Ord,\n         K: Borrow<Q>,\n@@ -189,12 +189,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::ValMut<'a>, K, V, marker::LeafOrInternal>\n     /// Splits a unique reference into a pair of leaf edges delimiting the full range of the tree.\n     /// The results are non-unique references allowing mutation (of values only), so must be used\n     /// with care.\n-    pub fn full_range(\n-        self,\n-    ) -> (\n-        Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-        Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-    ) {\n+    pub fn full_range(self) -> LeafRange<marker::ValMut<'a>, K, V> {\n         // We duplicate the root NodeRef here -- we will never visit the same KV\n         // twice, and never end up with overlapping value references.\n         let self2 = unsafe { ptr::read(&self) };\n@@ -206,12 +201,7 @@ impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {\n     /// Splits a unique reference into a pair of leaf edges delimiting the full range of the tree.\n     /// The results are non-unique references allowing massively destructive mutation, so must be\n     /// used with the utmost care.\n-    pub fn full_range(\n-        self,\n-    ) -> (\n-        Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge>,\n-        Handle<NodeRef<marker::Dying, K, V, marker::Leaf>, marker::Edge>,\n-    ) {\n+    pub fn full_range(self) -> LeafRange<marker::Dying, K, V> {\n         // We duplicate the root NodeRef here -- we will never access it in a way\n         // that overlaps references obtained from the root.\n         let self2 = unsafe { ptr::read(&self) };"}]}