{"sha": "01364c44a4ac7de44079dfb7dc06d1e0f0af4edb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMzY0YzQ0YTRhYzdkZTQ0MDc5ZGZiN2RjMDZkMWUwZjBhZjRlZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-01T19:41:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-01T19:41:02Z"}, "message": "auto merge of #16867 : wickerwaka/rust/ice-16750, r=alexcrichton\n\nNot sure if this is addressing the root cause or just patching up a symptom. Also not sure if I should be adding a diagnostic code for this.\r\n\r\nFixes #16750\r\nFixes #15812", "tree": {"sha": "fb3d0e60278a3f35d83141e6a4438b4a4b86b609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb3d0e60278a3f35d83141e6a4438b4a4b86b609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb", "html_url": "https://github.com/rust-lang/rust/commit/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3768ef477e2013fb565ce3c4b74c9af2a9841b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/3768ef477e2013fb565ce3c4b74c9af2a9841b21", "html_url": "https://github.com/rust-lang/rust/commit/3768ef477e2013fb565ce3c4b74c9af2a9841b21"}, {"sha": "d3d14d6a41141c4780b9d0ddcdfa3748036de570", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d14d6a41141c4780b9d0ddcdfa3748036de570", "html_url": "https://github.com/rust-lang/rust/commit/d3d14d6a41141c4780b9d0ddcdfa3748036de570"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "dce5dbbb239d68e1d9586bc8d0269affde63cf17", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=01364c44a4ac7de44079dfb7dc06d1e0f0af4edb", "patch": "@@ -169,5 +169,6 @@ register_diagnostics!(\n     E0155,\n     E0156,\n     E0157,\n-    E0158\n+    E0158,\n+    E0159\n )"}, {"sha": "93a14428f8f70dbdb29dc072aa79c9349167db14", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=01364c44a4ac7de44079dfb7dc06d1e0f0af4edb", "patch": "@@ -3463,6 +3463,22 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         fcx.write_ty(id, enum_type);\n     }\n \n+    fn check_struct_fields_on_error(fcx: &FnCtxt,\n+                                    id: ast::NodeId,\n+                                    fields: &[ast::Field],\n+                                    base_expr: Option<Gc<ast::Expr>>) {\n+        // Make sure to still write the types\n+        // otherwise we might ICE\n+        fcx.write_error(id);\n+        for field in fields.iter() {\n+            check_expr(fcx, &*field.expr);\n+        }\n+        match base_expr {\n+            Some(ref base) => check_expr(fcx, &**base),\n+            None => {}\n+        }\n+    }\n+\n     type ExprCheckerWithTy = fn(&FnCtxt, &ast::Expr, ty::t);\n \n     let tcx = fcx.ccx.tcx;\n@@ -3982,6 +3998,16 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                                           variant_id, fields.as_slice());\n                 enum_id\n             }\n+            Some(def::DefTrait(def_id)) => {\n+                span_err!(tcx.sess, path.span, E0159,\n+                    \"use of trait `{}` as a struct constructor\",\n+                    pprust::path_to_string(path));\n+                check_struct_fields_on_error(fcx,\n+                                             id,\n+                                             fields.as_slice(),\n+                                             base_expr);\n+                def_id\n+            },\n             Some(def) => {\n                 // Verify that this was actually a struct.\n                 let typ = ty::lookup_item_type(fcx.ccx.tcx, def.def_id());\n@@ -3998,17 +4024,10 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                         span_err!(tcx.sess, path.span, E0071,\n                             \"`{}` does not name a structure\",\n                             pprust::path_to_string(path));\n-\n-                        // Make sure to still write the types\n-                        // otherwise we might ICE\n-                        fcx.write_error(id);\n-                        for field in fields.iter() {\n-                            check_expr(fcx, &*field.expr);\n-                        }\n-                        match base_expr {\n-                            Some(ref base) => check_expr(fcx, &**base),\n-                            None => {}\n-                        }\n+                        check_struct_fields_on_error(fcx,\n+                                                     id,\n+                                                     fields.as_slice(),\n+                                                     base_expr);\n                     }\n                 }\n "}, {"sha": "a1fcab002e138ccca33f3e6da65fb06cc35a08f2", "filename": "src/test/compile-fail/trait-as-struct-constructor.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb/src%2Ftest%2Fcompile-fail%2Ftrait-as-struct-constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01364c44a4ac7de44079dfb7dc06d1e0f0af4edb/src%2Ftest%2Fcompile-fail%2Ftrait-as-struct-constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-as-struct-constructor.rs?ref=01364c44a4ac7de44079dfb7dc06d1e0f0af4edb", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait TraitNotAStruct { }\n+\n+fn main() {\n+    TraitNotAStruct{ value: 0 };\n+    //~^ ERROR: use of trait `TraitNotAStruct` as a struct constructor [E0159]\n+}\n+"}]}