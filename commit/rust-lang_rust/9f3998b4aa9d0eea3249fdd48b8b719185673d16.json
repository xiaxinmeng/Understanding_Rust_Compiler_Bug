{"sha": "9f3998b4aa9d0eea3249fdd48b8b719185673d16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMzk5OGI0YWE5ZDBlZWEzMjQ5ZmRkNDhiOGI3MTkxODU2NzNkMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-13T07:38:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-13T07:38:58Z"}, "message": "Auto merge of #77858 - ijackson:split-inclusive, r=KodrAus\n\nStabilize split_inclusive\n\n### Contents of this MR\n\nThis stabilises:\n\n * `slice::split_inclusive`\n * `slice::split_inclusive_mut`\n * `str::split_inclusive`\n\nCloses #72360.\n\n### A possible concern\n\nThe proliferation of `split_*` methods is not particularly pretty.  The existence of `split_inclusive` seems to invite the addition of `rsplit_inclusive`, `splitn_inclusive`, etc.  We could instead have a more general API, along these kinds of lines maybe:\n```\n   pub fn split_generic('a,P,H>(&'a self, pat: P, how: H) -> ...\n       where P: Pattern\n       where H: SplitHow;\n\n   pub fn split_generic_mut('a,P,H>(&'a mut self, pat: P, how: H) -> ...\n       where P: Pattern\n       where H: SplitHow;\n\n   trait SplitHow {\n       fn reverse(&self) -> bool;\n       fn inclusive -> bool;\n       fn limit(&self) -> Option<usize>;\n   }\n\n   pub struct SplitFwd;\n   ...\n   pub struct SplitRevInclN(pub usize);\n```\nBut maybe that is worse.\n\n### Let us defer that? ###\n\nThis seems like a can of worms.  I think we can defer opening it now; if and when we have something more general, these two methods can become convenience aliases.  But I thought I would mention it so the lang API team can consider it and have an opinion.", "tree": {"sha": "7fdf7bbe364fcb1e4d4be807401cf7365f1b28aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fdf7bbe364fcb1e4d4be807401cf7365f1b28aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f3998b4aa9d0eea3249fdd48b8b719185673d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3998b4aa9d0eea3249fdd48b8b719185673d16", "html_url": "https://github.com/rust-lang/rust/commit/9f3998b4aa9d0eea3249fdd48b8b719185673d16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f3998b4aa9d0eea3249fdd48b8b719185673d16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc93e4719c2ced744d75f0c281bb7ba29844bedd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc93e4719c2ced744d75f0c281bb7ba29844bedd", "html_url": "https://github.com/rust-lang/rust/commit/fc93e4719c2ced744d75f0c281bb7ba29844bedd"}, {"sha": "5584224fdacc0af6d72e023e247b1e3076fa44d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5584224fdacc0af6d72e023e247b1e3076fa44d8", "html_url": "https://github.com/rust-lang/rust/commit/5584224fdacc0af6d72e023e247b1e3076fa44d8"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "0b7eeab4e9679ec9ffe2012e34fcf6bd6d2d0a15", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=9f3998b4aa9d0eea3249fdd48b8b719185673d16", "patch": "@@ -14,7 +14,6 @@\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(binary_heap_drain_sorted)]\n #![feature(slice_ptr_get)]\n-#![feature(split_inclusive)]\n #![feature(binary_heap_retain)]\n #![feature(inplace_iteration)]\n #![feature(iter_map_while)]"}, {"sha": "50664267a6755174aa345872d3dbe6d03f2d704c", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=9f3998b4aa9d0eea3249fdd48b8b719185673d16", "patch": "@@ -446,15 +446,13 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n /// # Example\n ///\n /// ```\n-/// #![feature(split_inclusive)]\n-///\n /// let slice = [10, 40, 33, 20];\n /// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n /// ```\n ///\n /// [`split_inclusive`]: ../../std/primitive.slice.html#method.split_inclusive\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n pub struct SplitInclusive<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -471,7 +469,7 @@ impl<'a, T: 'a, P: FnMut(&T) -> bool> SplitInclusive<'a, T, P> {\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitInclusive<'_, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -485,7 +483,7 @@ where\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<T, P> Clone for SplitInclusive<'_, T, P>\n where\n     P: Clone + FnMut(&T) -> bool,\n@@ -495,7 +493,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, T, P> Iterator for SplitInclusive<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -524,7 +522,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, T, P> DoubleEndedIterator for SplitInclusive<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -549,7 +547,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the mutable subslices of the vector which are separated\n@@ -689,15 +687,13 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n /// # Example\n ///\n /// ```\n-/// #![feature(split_inclusive)]\n-///\n /// let mut v = [10, 40, 30, 20, 60, 50];\n /// let iter = v.split_inclusive_mut(|num| *num % 3 == 0);\n /// ```\n ///\n /// [`split_inclusive_mut`]: ../../std/primitive.slice.html#method.split_inclusive_mut\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n pub struct SplitInclusiveMut<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -714,7 +710,7 @@ impl<'a, T: 'a, P: FnMut(&T) -> bool> SplitInclusiveMut<'a, T, P> {\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitInclusiveMut<'_, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -727,7 +723,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, T, P> Iterator for SplitInclusiveMut<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -767,7 +763,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, T, P> DoubleEndedIterator for SplitInclusiveMut<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -801,7 +797,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over subslices separated by elements that match a predicate"}, {"sha": "081d80f4876052300a91ad31dde681c9563cb16e", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=9f3998b4aa9d0eea3249fdd48b8b719185673d16", "patch": "@@ -60,7 +60,7 @@ pub use iter::ArrayWindows;\n #[unstable(feature = \"slice_group_by\", issue = \"80552\")]\n pub use iter::{GroupBy, GroupByMut};\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n pub use iter::{SplitInclusive, SplitInclusiveMut};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1546,7 +1546,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let slice = [10, 40, 33, 20];\n     /// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n     ///\n@@ -1560,15 +1559,14 @@ impl<T> [T] {\n     /// That slice will be the last item returned by the iterator.\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let slice = [3, 10, 40, 33];\n     /// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n     ///\n     /// assert_eq!(iter.next().unwrap(), &[3]);\n     /// assert_eq!(iter.next().unwrap(), &[10, 40, 33]);\n     /// assert!(iter.next().is_none());\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+    #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n     #[inline]\n     pub fn split_inclusive<F>(&self, pred: F) -> SplitInclusive<'_, T, F>\n     where\n@@ -1584,7 +1582,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let mut v = [10, 40, 30, 20, 60, 50];\n     ///\n     /// for group in v.split_inclusive_mut(|num| *num % 3 == 0) {\n@@ -1593,7 +1590,7 @@ impl<T> [T] {\n     /// }\n     /// assert_eq!(v, [10, 40, 1, 20, 1, 1]);\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+    #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n     #[inline]\n     pub fn split_inclusive_mut<F>(&mut self, pred: F) -> SplitInclusiveMut<'_, T, F>\n     where"}, {"sha": "8b952eab2946dd6865baf946bbc546ffd25554ff", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=9f3998b4aa9d0eea3249fdd48b8b719185673d16", "patch": "@@ -1174,7 +1174,7 @@ pub struct SplitAsciiWhitespace<'a> {\n /// See its documentation for more.\n ///\n /// [`split_inclusive`]: str::split_inclusive\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n pub struct SplitInclusive<'a, P: Pattern<'a>>(pub(super) SplitInternal<'a, P>);\n \n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n@@ -1239,7 +1239,7 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     type Item = &'a str;\n \n@@ -1249,22 +1249,22 @@ impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, P: Pattern<'a, Searcher: fmt::Debug>> fmt::Debug for SplitInclusive<'a, P> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitInclusive\").field(\"0\", &self.0).finish()\n     }\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, P: Pattern<'a, Searcher: Clone>> Clone for SplitInclusive<'a, P> {\n     fn clone(&self) -> Self {\n         SplitInclusive(self.0.clone())\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n     for SplitInclusive<'a, P>\n {\n@@ -1274,7 +1274,7 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {\n@@ -1284,7 +1284,6 @@ impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {\n     ///\n     /// ```\n     /// #![feature(str_split_inclusive_as_str)]\n-    /// #![feature(split_inclusive)]\n     /// let mut split = \"Mary had a little lamb\".split_inclusive(' ');\n     /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n     /// split.next();"}, {"sha": "6a35378ca7b50909ded7b6d0dc05ca7063e52662", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=9f3998b4aa9d0eea3249fdd48b8b719185673d16", "patch": "@@ -65,7 +65,7 @@ pub use iter::{EscapeDebug, EscapeDefault, EscapeUnicode};\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n pub use iter::SplitAsciiWhitespace;\n \n-#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n use iter::SplitInclusive;\n \n #[unstable(feature = \"str_internals\", issue = \"none\")]\n@@ -1227,7 +1227,6 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n     ///     .split_inclusive('\\n').collect();\n     /// assert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n@@ -1238,12 +1237,11 @@ impl str {\n     /// That substring will be the last item returned by the iterator.\n     ///\n     /// ```\n-    /// #![feature(split_inclusive)]\n     /// let v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n     ///     .split_inclusive('\\n').collect();\n     /// assert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n+    #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n     #[inline]\n     pub fn split_inclusive<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitInclusive<'a, P> {\n         SplitInclusive(SplitInternal {"}, {"sha": "719aca612f50d61338c16b1e5eec565fbb743494", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3998b4aa9d0eea3249fdd48b8b719185673d16/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3998b4aa9d0eea3249fdd48b8b719185673d16/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9f3998b4aa9d0eea3249fdd48b8b719185673d16", "patch": "@@ -15,7 +15,6 @@\n #![feature(never_type)]\n #![feature(once_cell)]\n #![feature(type_ascription)]\n-#![feature(split_inclusive)]\n #![feature(str_split_once)]\n #![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]"}]}