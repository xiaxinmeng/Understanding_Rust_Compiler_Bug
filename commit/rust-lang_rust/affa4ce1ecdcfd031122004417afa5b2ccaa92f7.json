{"sha": "affa4ce1ecdcfd031122004417afa5b2ccaa92f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZmE0Y2UxZWNkY2ZkMDMxMTIyMDA0NDE3YWZhNWIyY2NhYTkyZjc=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-25T22:34:17Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-25T22:34:17Z"}, "message": "Factor out default_tactic and fix indentation\n\nrustfmt fails to handle binary expressions with comments in-between.", "tree": {"sha": "08835be0e58cefea851461bd62c241dcc27d166d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08835be0e58cefea851461bd62c241dcc27d166d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/affa4ce1ecdcfd031122004417afa5b2ccaa92f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/affa4ce1ecdcfd031122004417afa5b2ccaa92f7", "html_url": "https://github.com/rust-lang/rust/commit/affa4ce1ecdcfd031122004417afa5b2ccaa92f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/affa4ce1ecdcfd031122004417afa5b2ccaa92f7/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf6c67e1a6645dca9bb053b5bd7541f7b4885e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6c67e1a6645dca9bb053b5bd7541f7b4885e54", "html_url": "https://github.com/rust-lang/rust/commit/cf6c67e1a6645dca9bb053b5bd7541f7b4885e54"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "9d586c0ffa4a442ffc218e0e0973fcaf7cbd5afa", "filename": "src/overflow.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/affa4ce1ecdcfd031122004417afa5b2ccaa92f7/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affa4ce1ecdcfd031122004417afa5b2ccaa92f7/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=affa4ce1ecdcfd031122004417afa5b2ccaa92f7", "patch": "@@ -183,6 +183,15 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n         }\n     }\n \n+    fn default_tactic(&self, list_items: &[ListItem]) -> DefinitiveListTactic {\n+        definitive_tactic(\n+            list_items,\n+            ListTactic::LimitedHorizontalVertical(self.item_max_width),\n+            Separator::Comma,\n+            self.one_line_width,\n+        )\n+    }\n+\n     fn try_overflow_last_item(&self, list_items: &mut Vec<ListItem>) -> DefinitiveListTactic {\n         // 1 = \"(\"\n         let combine_arg_with_callee = self.items.len() == 1 && self.items[0].to_expr().is_some()\n@@ -258,26 +267,16 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n                     .last()\n                     .and_then(|last_item| last_item.rewrite(self.context, self.nested_shape));\n \n-                let default_tactic = || {\n-                    definitive_tactic(\n-                        &*list_items,\n-                        ListTactic::LimitedHorizontalVertical(self.item_max_width),\n-                        Separator::Comma,\n-                        self.one_line_width,\n-                    )\n-                };\n-\n                 // Use horizontal layout for a function with a single argument as long as\n                 // everything fits in a single line.\n-                if self.items.len() == 1\n-                && self.one_line_width != 0 // Vertical layout is forced.\n-                && !list_items[0].has_comment()\n+                // `self.one_line_width == 0` means vertical layout is forced.\n+                if self.items.len() == 1 && self.one_line_width != 0 && !list_items[0].has_comment()\n                     && !list_items[0].inner_as_ref().contains('\\n')\n                     && ::lists::total_item_width(&list_items[0]) <= self.one_line_width\n                 {\n                     tactic = DefinitiveListTactic::Horizontal;\n                 } else {\n-                    tactic = default_tactic();\n+                    tactic = self.default_tactic(list_items);\n \n                     if tactic == DefinitiveListTactic::Vertical {\n                         if let Some((all_simple, num_args_before)) ="}]}