{"sha": "967a228208a88791c66a4ee3ee72cc75fa2b7fbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2N2EyMjgyMDhhODg3OTFjNjZhNGVlM2VlNzJjYzc1ZmEyYjdmYmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-14T11:27:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-21T18:07:38Z"}, "message": "Replace ZExt and SExt flags with ArgExtension enum\n\nBoth flags are mutually exclusive", "tree": {"sha": "59de6dee0e3b7c6130fd9101defb59dc1856a8ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59de6dee0e3b7c6130fd9101defb59dc1856a8ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/967a228208a88791c66a4ee3ee72cc75fa2b7fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/967a228208a88791c66a4ee3ee72cc75fa2b7fbc", "html_url": "https://github.com/rust-lang/rust/commit/967a228208a88791c66a4ee3ee72cc75fa2b7fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "539402cb0b0f1639a4be14e40eaf8db61a62ae41", "url": "https://api.github.com/repos/rust-lang/rust/commits/539402cb0b0f1639a4be14e40eaf8db61a62ae41", "html_url": "https://github.com/rust-lang/rust/commit/539402cb0b0f1639a4be14e40eaf8db61a62ae41"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "3ca0a9ce8d983156fee762a06e4af3b65e96f546", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=967a228208a88791c66a4ee3ee72cc75fa2b7fbc", "patch": "@@ -36,7 +36,7 @@ impl ArgAttributeExt for ArgAttribute {\n     where\n         F: FnMut(llvm::Attribute),\n     {\n-        for_each_kind!(self, f, NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n+        for_each_kind!(self, f, NoAlias, NoCapture, NonNull, ReadOnly, StructRet, InReg)\n     }\n }\n \n@@ -65,6 +65,15 @@ impl ArgAttributesExt for ArgAttributes {\n                 llvm::LLVMRustAddByValAttr(llfn, idx.as_uint(), ty.unwrap());\n             }\n             regular.for_each_kind(|attr| attr.apply_llfn(idx, llfn));\n+            match self.arg_ext {\n+                ArgExtension::None => {}\n+                ArgExtension::Zext => {\n+                    llvm::Attribute::ZExt.apply_llfn(idx, llfn);\n+                }\n+                ArgExtension::Sext => {\n+                    llvm::Attribute::SExt.apply_llfn(idx, llfn);\n+                }\n+            }\n         }\n     }\n \n@@ -95,6 +104,15 @@ impl ArgAttributesExt for ArgAttributes {\n                 llvm::LLVMRustAddByValCallSiteAttr(callsite, idx.as_uint(), ty.unwrap());\n             }\n             regular.for_each_kind(|attr| attr.apply_callsite(idx, callsite));\n+            match self.arg_ext {\n+                ArgExtension::None => {}\n+                ArgExtension::Zext => {\n+                    llvm::Attribute::ZExt.apply_callsite(idx, callsite);\n+                }\n+                ArgExtension::Sext => {\n+                    llvm::Attribute::SExt.apply_callsite(idx, callsite);\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "32bd9651ece990cd0af37a2134ebf6ec86506182", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=967a228208a88791c66a4ee3ee72cc75fa2b7fbc", "patch": "@@ -2619,7 +2619,7 @@ where\n                                       is_return: bool| {\n             // Booleans are always an i1 that needs to be zero-extended.\n             if scalar.is_bool() {\n-                attrs.set(ArgAttribute::ZExt);\n+                attrs.zext();\n                 return;\n             }\n "}, {"sha": "739ec6112ad3b6d76df6980717e6d0017aff1596", "filename": "compiler/rustc_target/src/abi/call/mips64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs?ref=967a228208a88791c66a4ee3ee72cc75fa2b7fbc", "patch": "@@ -1,4 +1,4 @@\n-use crate::abi::call::{ArgAbi, ArgAttribute, CastTarget, FnAbi, PassMode, Reg, RegKind, Uniform};\n+use crate::abi::call::{ArgAbi, CastTarget, FnAbi, PassMode, Reg, RegKind, Uniform};\n use crate::abi::{self, HasDataLayout, LayoutOf, Size, TyAndLayout, TyAndLayoutMethods};\n \n fn extend_integer_width_mips<Ty>(arg: &mut ArgAbi<'_, Ty>, bits: u64) {\n@@ -7,7 +7,7 @@ fn extend_integer_width_mips<Ty>(arg: &mut ArgAbi<'_, Ty>, bits: u64) {\n         if let abi::Int(i, signed) = scalar.value {\n             if !signed && i.size().bits() == 32 {\n                 if let PassMode::Direct(ref mut attrs) = arg.mode {\n-                    attrs.set(ArgAttribute::SExt);\n+                    attrs.sext();\n                     return;\n                 }\n             }"}, {"sha": "9d657250c7c79065c32697e34277836906ccc318", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=967a228208a88791c66a4ee3ee72cc75fa2b7fbc", "patch": "@@ -57,19 +57,28 @@ mod attr_impl {\n             const NoCapture = 1 << 2;\n             const NonNull   = 1 << 3;\n             const ReadOnly  = 1 << 4;\n-            const SExt      = 1 << 5;\n             const StructRet = 1 << 6;\n-            const ZExt      = 1 << 7;\n             const InReg     = 1 << 8;\n         }\n     }\n }\n \n+/// Sometimes an ABI requires small integers to be extended to a full or partial register. This enum\n+/// defines if this extension should be zero-extension or sign-extension when necssary. When it is\n+/// not necesary to extend the argument, this enum is ignored.\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum ArgExtension {\n+    None,\n+    Zext,\n+    Sext,\n+}\n+\n /// A compact representation of LLVM attributes (at least those relevant for this module)\n /// that can be manipulated without interacting with LLVM's Attribute machinery.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct ArgAttributes {\n     pub regular: ArgAttribute,\n+    pub arg_ext: ArgExtension,\n     /// The minimum size of the pointee, guaranteed to be valid for the duration of the whole call\n     /// (corresponding to LLVM's dereferenceable and dereferenceable_or_null attributes).\n     pub pointee_size: Size,\n@@ -80,11 +89,24 @@ impl ArgAttributes {\n     pub fn new() -> Self {\n         ArgAttributes {\n             regular: ArgAttribute::default(),\n+            arg_ext: ArgExtension::None,\n             pointee_size: Size::ZERO,\n             pointee_align: None,\n         }\n     }\n \n+    pub fn zext(&mut self) -> &mut Self {\n+        assert_ne!(self.arg_ext, ArgExtension::Sext);\n+        self.arg_ext = ArgExtension::Zext;\n+        self\n+    }\n+\n+    pub fn sext(&mut self) -> &mut Self {\n+        assert_ne!(self.arg_ext, ArgExtension::Zext);\n+        self.arg_ext = ArgExtension::Sext;\n+        self\n+    }\n+\n     pub fn set(&mut self, attr: ArgAttribute) -> &mut Self {\n         self.regular |= attr;\n         self\n@@ -457,7 +479,11 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n             if let abi::Int(i, signed) = scalar.value {\n                 if i.size().bits() < bits {\n                     if let PassMode::Direct(ref mut attrs) = self.mode {\n-                        attrs.set(if signed { ArgAttribute::SExt } else { ArgAttribute::ZExt });\n+                        if signed {\n+                            attrs.sext()\n+                        } else {\n+                            attrs.zext()\n+                        };\n                     }\n                 }\n             }"}, {"sha": "9c4ac85ce6135b8cde87e007e0ea6420e47a3ebc", "filename": "compiler/rustc_target/src/abi/call/riscv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967a228208a88791c66a4ee3ee72cc75fa2b7fbc/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs?ref=967a228208a88791c66a4ee3ee72cc75fa2b7fbc", "patch": "@@ -4,7 +4,7 @@\n // Reference: Clang RISC-V ELF psABI lowering code\n // https://github.com/llvm/llvm-project/blob/8e780252a7284be45cf1ba224cabd884847e8e92/clang/lib/CodeGen/TargetInfo.cpp#L9311-L9773\n \n-use crate::abi::call::{ArgAbi, ArgAttribute, CastTarget, FnAbi, PassMode, Reg, RegKind, Uniform};\n+use crate::abi::call::{ArgAbi, CastTarget, FnAbi, PassMode, Reg, RegKind, Uniform};\n use crate::abi::{\n     self, Abi, FieldsShape, HasDataLayout, LayoutOf, Size, TyAndLayout, TyAndLayoutMethods,\n };\n@@ -308,7 +308,7 @@ fn extend_integer_width<'a, Ty>(arg: &mut ArgAbi<'a, Ty>, xlen: u64) {\n             // 32-bit integers are always sign-extended\n             if i.size().bits() == 32 && xlen > 32 {\n                 if let PassMode::Direct(ref mut attrs) = arg.mode {\n-                    attrs.set(ArgAttribute::SExt);\n+                    attrs.sext();\n                     return;\n                 }\n             }"}]}