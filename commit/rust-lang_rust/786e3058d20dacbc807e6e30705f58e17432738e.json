{"sha": "786e3058d20dacbc807e6e30705f58e17432738e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NmUzMDU4ZDIwZGFjYmM4MDdlNmUzMDcwNWY1OGUxNzQzMjczOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T19:26:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T19:26:25Z"}, "message": "Auto merge of #49904 - michaelwoerister:no-debug-attr, r=alexcrichton\n\nWork around LLVM debuginfo problem in librustc_driver.\n\nWorks around a problem (https://github.com/rust-lang/rust/issues/48910) with global variable debuginfo generation for `rustc_driver::get_trans::LOAD` by applying `#[no_debug]` to it (which just disables debuginfo generation for that variable). This way we can build the compiler with debuginfo again.\n\nSince the problem is also present in beta, this workaround might have to be backported.\n\nr? @alexcrichton", "tree": {"sha": "9b39c2d333161dc48713bcc27f6af5ae878eede7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b39c2d333161dc48713bcc27f6af5ae878eede7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/786e3058d20dacbc807e6e30705f58e17432738e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/786e3058d20dacbc807e6e30705f58e17432738e", "html_url": "https://github.com/rust-lang/rust/commit/786e3058d20dacbc807e6e30705f58e17432738e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/786e3058d20dacbc807e6e30705f58e17432738e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9379bcdd0b4ef06303e8c4e3e7c3fd79882372cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9379bcdd0b4ef06303e8c4e3e7c3fd79882372cc", "html_url": "https://github.com/rust-lang/rust/commit/9379bcdd0b4ef06303e8c4e3e7c3fd79882372cc"}, {"sha": "281492898be7fd6b9705a818d2c880e9d7fd2da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/281492898be7fd6b9705a818d2c880e9d7fd2da0", "html_url": "https://github.com/rust-lang/rust/commit/281492898be7fd6b9705a818d2c880e9d7fd2da0"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "f471ffb072d6700ebc937d0c25d5e9c6b8d24161", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=786e3058d20dacbc807e6e30705f58e17432738e", "patch": "@@ -2277,6 +2277,7 @@ bitflags! {\n         const NAKED                     = 0b0001_0000;\n         const NO_MANGLE                 = 0b0010_0000;\n         const RUSTC_STD_INTERNAL_SYMBOL = 0b0100_0000;\n+        const NO_DEBUG                  = 0b1000_0000;\n     }\n }\n "}, {"sha": "fb333ec38fb60ada847ed1afba1723a1b4a60e1e", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=786e3058d20dacbc807e6e30705f58e17432738e", "patch": "@@ -25,6 +25,7 @@\n #![feature(slice_sort_by_cached_key)]\n #![feature(set_stdio)]\n #![feature(rustc_stack_internals)]\n+#![feature(no_debug)]\n \n extern crate arena;\n extern crate getopts;\n@@ -230,6 +231,9 @@ fn load_backend_from_dylib(path: &Path) -> fn() -> Box<TransCrate> {\n \n pub fn get_trans(sess: &Session) -> Box<TransCrate> {\n     static INIT: Once = ONCE_INIT;\n+\n+    #[allow(deprecated)]\n+    #[no_debug]\n     static mut LOAD: fn() -> Box<TransCrate> = || unreachable!();\n \n     INIT.call_once(|| {"}, {"sha": "eb550d7a605c5c0b774819868e092f8ef76fbd2f", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=786e3058d20dacbc807e6e30705f58e17432738e", "patch": "@@ -23,6 +23,7 @@ use llvm::{self, ValueRef};\n use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor,\n                       DICompositeType, DILexicalBlock, DIFlags};\n \n+use rustc::hir::TransFnAttrFlags;\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ty::fold::TypeVisitor;\n@@ -41,7 +42,7 @@ use std::ffi::CString;\n use std::fmt::Write;\n use std::ptr;\n use std::path::{Path, PathBuf};\n-use syntax::{ast, attr};\n+use syntax::ast;\n use syntax::symbol::{Interner, InternedString, Symbol};\n use syntax_pos::{self, Span, FileName};\n \n@@ -1644,11 +1645,17 @@ pub fn create_global_var_metadata(cx: &CodegenCx,\n     }\n \n     let tcx = cx.tcx;\n-    let no_mangle = attr::contains_name(&tcx.get_attrs(def_id), \"no_mangle\");\n+    let attrs = tcx.trans_fn_attrs(def_id);\n+\n+    if attrs.flags.contains(TransFnAttrFlags::NO_DEBUG) {\n+        return;\n+    }\n+\n+    let no_mangle = attrs.flags.contains(TransFnAttrFlags::NO_MANGLE);\n     // We may want to remove the namespace scope if we're in an extern block, see:\n     // https://github.com/rust-lang/rust/pull/46457#issuecomment-351750952\n     let var_scope = get_namespace_for_item(cx, def_id);\n-    let span = cx.tcx.def_span(def_id);\n+    let span = tcx.def_span(def_id);\n \n     let (file_metadata, line_number) = if span != syntax_pos::DUMMY_SP {\n         let loc = span_start(cx, span);"}, {"sha": "706dc3dca8a6143c2b10dc6faeb26d4dcd031f35", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=786e3058d20dacbc807e6e30705f58e17432738e", "patch": "@@ -23,14 +23,15 @@ use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n use llvm;\n use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray, DIFlags};\n+use rustc::hir::TransFnAttrFlags;\n use rustc::hir::def_id::{DefId, CrateNum};\n use rustc::ty::subst::Substs;\n \n use abi::Abi;\n use common::CodegenCx;\n use builder::Builder;\n use monomorphize::Instance;\n-use rustc::ty::{self, ParamEnv, Ty};\n+use rustc::ty::{self, ParamEnv, Ty, InstanceDef};\n use rustc::mir;\n use rustc::session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n@@ -210,13 +211,12 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         return FunctionDebugContext::DebugInfoDisabled;\n     }\n \n-    for attr in instance.def.attrs(cx.tcx).iter() {\n-        if attr.check_name(\"no_debug\") {\n+    if let InstanceDef::Item(def_id) = instance.def {\n+        if cx.tcx.trans_fn_attrs(def_id).flags.contains(TransFnAttrFlags::NO_DEBUG) {\n             return FunctionDebugContext::FunctionWithoutDebugInfo;\n         }\n     }\n \n-    let containing_scope = get_containing_scope(cx, instance);\n     let span = mir.span;\n \n     // This can be the case for functions inlined from another crate\n@@ -226,6 +226,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     }\n \n     let def_id = instance.def_id();\n+    let containing_scope = get_containing_scope(cx, instance);\n     let loc = span_start(cx, span);\n     let file_metadata = file_metadata(cx, &loc.file.name, def_id.krate);\n "}, {"sha": "6bd38244e8caf9956f02233c0b518552e2a69fad", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786e3058d20dacbc807e6e30705f58e17432738e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=786e3058d20dacbc807e6e30705f58e17432738e", "patch": "@@ -1825,6 +1825,8 @@ fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAt\n             trans_fn_attrs.flags |= TransFnAttrFlags::NO_MANGLE;\n         } else if attr.check_name(\"rustc_std_internal_symbol\") {\n             trans_fn_attrs.flags |= TransFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n+        } else if attr.check_name(\"no_debug\") {\n+            trans_fn_attrs.flags |= TransFnAttrFlags::NO_DEBUG;\n         } else if attr.check_name(\"inline\") {\n             trans_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n                 if attr.path != \"inline\" {"}]}