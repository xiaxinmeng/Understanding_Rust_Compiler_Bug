{"sha": "23dd53eb35ff50508d0c0fc5878a55754b12d381", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZGQ1M2ViMzVmZjUwNTA4ZDBjMGZjNTg3OGE1NTc1NGIxMmQzODE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-30T14:52:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-30T14:52:40Z"}, "message": "kill ra.el: it is superseeded by the lsp integraion", "tree": {"sha": "82e970db19ec9e4c3a993e4fe3cd1d4a82798279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e970db19ec9e4c3a993e4fe3cd1d4a82798279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23dd53eb35ff50508d0c0fc5878a55754b12d381", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcn4K4CRBK7hj4Ov3rIwAAdHIIAKgxKkV8hfNNAZZH0dILnQTC\nNMr/TVUOnA77CtZrnum7IkZChIwkro5JuoxSvmrpMey1q0/a7VXiFF9LlmPEMyMn\nyXiOeBwdwJYLEQBzoS+P1ZjtX/tGzpX1djoT5UwGuYJ8XZ2gZyMxGgL3fQy60N+Y\n6G+r7QhpEK3iQlK7ts8RV18YjpAa+Edoo7HsDlyIBNsyuGEHHuFun9jle2lhAww7\n+0UeWIpI1pS0frfY05LxwWFkUaZw2Zn67H2ljvbpFx69wiD9/jHBnzyHcD9WmvA6\n5buPaJQz4htwdk5tWBMd0Z19GIA0N8oev5WbSi9HP+a0CbeUBfER5BXSKdQ/C8A=\n=+iTW\n-----END PGP SIGNATURE-----\n", "payload": "tree 82e970db19ec9e4c3a993e4fe3cd1d4a82798279\nparent 9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1553957560 +0300\ncommitter GitHub <noreply@github.com> 1553957560 +0300\n\nkill ra.el: it is superseeded by the lsp integraion"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23dd53eb35ff50508d0c0fc5878a55754b12d381", "html_url": "https://github.com/rust-lang/rust/commit/23dd53eb35ff50508d0c0fc5878a55754b12d381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23dd53eb35ff50508d0c0fc5878a55754b12d381/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e", "html_url": "https://github.com/rust-lang/rust/commit/9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e"}], "stats": {"total": 128, "additions": 0, "deletions": 128}, "files": [{"sha": "fb73451c1b316c23be368a85986a5dc635df73ee", "filename": "editors/emacs/ra.el", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e/editors%2Femacs%2Fra.el", "raw_url": "https://github.com/rust-lang/rust/raw/9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e/editors%2Femacs%2Fra.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Femacs%2Fra.el?ref=9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e", "patch": "@@ -1,128 +0,0 @@\n-;;; ra.el --- Rust analyzer emacs bindings -*- lexical-binding: t; -*-\n-;;; Commentary:\n-;;; Small utilities for interacting with Rust analyzer.\n-;;; Run\n-;;;   cargo install --git https://github.com/matklad/rust-analyzer/ ra_cli\n-;;; to install the analyzer binary. Then copy-paste the bellow code to\n-;;; your `.init.el` and use `ra-extend-selection` and\n-;;; `ra-shrink-selection` functions.\n-;;; Code:\n-\n-\n-(defvar ra--selections-cache '(0 0 ()))\n-(defun ra--cache-tick ()\n-  \"Get buffer modification count for cache.\"\n-  (nth 0 ra--selections-cache))\n-(defun ra--cache-sel ()\n-  \"Get current selection for cache.\"\n-  (nth 1 ra--selections-cache))\n-(defun ra--cache-nth-sel (n)\n-  \"Get Nth selection.\"\n-  (nth n (nth 2 ra--selections-cache)))\n-(defun ra--cache-set-nth-sel (n)\n-  \"Get Nth selection.\"\n-  (setf (nth 1 ra--selections-cache) n)\n-  (nth n (nth 2 ra--selections-cache)))\n-\n-\n-(defun ra-extend-selection ()\n-  \"Extend START END region to contain the encompassing syntactic construct.\"\n-  (interactive)\n-  (let* ((p (point))\n-         (m (or (and mark-active (mark)) p))\n-         (start (min p m))\n-         (end (max p m)))\n-    (ra--extend-selection start end)))\n-\n-\n-(defun ra-shrink-selection (start end)\n-  \"Shrink START END region to contain previous selection.\"\n-  (interactive \"r\")\n-  (ra--freshen-cache start end)\n-  (let ((sel-id (ra--cache-sel)))\n-    (if (not (= 0 sel-id))\n-        (let* ((r (ra--cache-set-nth-sel (- sel-id 1))))\n-          (push-mark (nth 0 r) t t)\n-          (goto-char (nth 1 r))\n-          (setq deactivate-mark nil)))))\n-\n-; Add this to setup keybinding\n-; (require 'rust-mode)\n-; (define-key rust-mode-map (kbd \"C-w\") 'ra-extend-selection)\n-; (define-key rust-mode-map (kbd \"C-S-w\") 'ra-shrink-selection)\n-\n-\n-\n-(defun ra--extend-selection (start end)\n-  \"Extend START END region to contain the encompassing syntactic construct.\"\n-  (ra--freshen-cache start end)\n-  (let* ((next-sel-idx (+ 1 (ra--cache-sel)))\n-         (r (ra--cache-set-nth-sel next-sel-idx)))\n-    (push-mark (nth 0 r) t t)\n-    (goto-char (nth 1 r))\n-    (setq deactivate-mark nil)))\n-\n-(defun ra--selections (start end)\n-  \"Get list of selections for START END from Rust analyzer.\"\n-  (read (with-output-to-string\n-          (call-process-region\n-           (point-min) (point-max)\n-           \"ra_cli\" nil standard-output nil\n-           \"extend-selection\"\n-           (number-to-string start)\n-           (number-to-string end)))))\n-\n-(defun ra--freshen-cache (start end)\n-  \"Make selection cache up-to-date for current buffer state and START END.\"\n-  (if (not (and\n-            (= (buffer-modified-tick) (ra--cache-tick))\n-            (equal `(,start ,end) (ra--cache-nth-sel (ra--cache-sel)))))\n-      (ra--set-cache start end)))\n-\n-(defun ra--set-cache (start end)\n-  \"Set selections cache for current buffer state and START END.\"\n-  (setq ra--selections-cache `(,(buffer-modified-tick) 0 ,(ra--selections start end))))\n-\n-\n-(require 'eglot)\n-(require 'ivy)\n-(require 'counsel)\n-\n-\n-(defun workspace-symbols ()\n-  (interactive)\n-  (let ((buf (current-buffer)))\n-    (ivy-read \"Symbol name: \"\n-              (lambda (str)\n-                (with-current-buffer buf\n-                  (let ((backend (eglot-xref-backend)))\n-                    (mapcar \n-                     (lambda (xref)\n-                       (let ((loc (xref-item-location xref)))\n-                         (propertize\n-                          (concat\n-                           (when (xref-file-location-p loc)\n-                             (with-slots (file line column) loc\n-                               (format \"%s:%s:%s:\" \n-                                       (propertize (file-relative-name file)\n-                                                   'face 'compilation-info)\n-                                       (propertize (format \"%s\" line)\n-                                                   'face 'compilation-line\n-                                                   )\n-                                       column)))\n-                           (xref-item-summary xref))\n-                          'xref xref)))\n-                     (xref-backend-apropos backend str))\n-                    )))\n-              :dynamic-collection t\n-              :action (lambda (item)\n-                        (xref--pop-to-location (get-text-property 0 'xref item))))))\n-\n-(add-to-list 'eglot-server-programs '(rust-mode . (\"ra_lsp_server\")))\n-\n-; (require 'rust-mode)\n-; (define-key rust-mode-map (kbd \"C-n\") 'workspace-symbols)\n-\n-(define-key)\n-(provide 'ra)\n-;;; ra.el ends here"}]}