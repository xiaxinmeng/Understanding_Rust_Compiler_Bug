{"sha": "ccb9cc1200e26a5f0cdaac321bd10185d91e87e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYjljYzEyMDBlMjZhNWYwY2RhYWMzMjFiZDEwMTg1ZDkxZTg3ZTQ=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-26T23:36:59Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-28T02:58:54Z"}, "message": "Remove doctree::Macro", "tree": {"sha": "01948c1294c4e5cb555aade5ed0edce8f38f5538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01948c1294c4e5cb555aade5ed0edce8f38f5538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAl/BvQcACgkQfsyTL4ss\ncx63FQ/9Ebjg9oFU0fRYK0yNSCUXMrkdWlypVBmV4/y+wRPhYJyG1cOA2oruRMLt\nA7GqOWaJkZlC65PpS09A/kKtPB4URhpgGNEcqyaWGuXa5QnPlpMK2wyh6fTrBkY5\ndX85N4/8C64P/I7pcxMCxFBo4JqdLOaMN3tCixKzCjI+eqhTZ4awKGz4Fgmp5ug/\n3XBPIkDh/vA4n0yDdr/i7979BrrGSkxKf61gVwXbJlHtNi5Vgny8NVaVcKGDIfBR\npsIQ07OEe9bg91otXIleuaJzOvb4LyeYNN1PtEnCZbdoEkFYQBXjNV9E6h+R3Aa3\nUZKC3EzyV4LAClySnLECt0xwK7MEbDKvfRjHZDXqdID+vdIi6moqI6eJA60WuQnn\nPpZno9Q7IgQUCwSAYYNGr2DzBxxzY5jipZzTttwStEAr7TNSKZ0giRjRp8d3X8iF\nB/CQ91i76aiQzTN/EBUnDpqsJ4A+2OgbVlXnbywOV5nskTYM4nGHnTX0+pU9BDqn\nptJ0yLc8+xqIOUW7qvGXNQif5zAOhqmMf1pXujmFcgS2PyU9en3SO6e4oiZHA3sQ\nETnf8SPLREnoDh5huifLzNPvwOZme3aFsjuhxvcfoaqT4tk/q8aXzd1YooN51dWW\ntKr0+ZKB85J3jRm9BQIo/hKODDI4gIVaiYBRQxDUPY5KpRiuPUI=\n=JDtp\n-----END PGP SIGNATURE-----", "payload": "tree 01948c1294c4e5cb555aade5ed0edce8f38f5538\nparent fd6b5376b723e22e3d98542e2e693d2717700900\nauthor Rune Tynan <runetynan@gmail.com> 1606433819 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1606532334 -0500\n\nRemove doctree::Macro\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4", "html_url": "https://github.com/rust-lang/rust/commit/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd6b5376b723e22e3d98542e2e693d2717700900", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6b5376b723e22e3d98542e2e693d2717700900", "html_url": "https://github.com/rust-lang/rust/commit/fd6b5376b723e22e3d98542e2e693d2717700900"}], "stats": {"total": 53, "additions": 17, "deletions": 36}, "files": [{"sha": "f417eb6740cdf937fc48ed990557d0cad9c5a3ee", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ccb9cc1200e26a5f0cdaac321bd10185d91e87e4", "patch": "@@ -2313,21 +2313,28 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Ident>) {\n     }\n }\n \n-impl Clean<Item> for doctree::Macro {\n+impl Clean<Item> for (&hir::MacroDef<'_>, Option<Ident>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n+        let (item, renamed) = self;\n+        let name = renamed.unwrap_or(item.ident).name;\n+        let tts = item.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n+        // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n+        let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect::<Vec<_>>();\n+\n         Item::from_def_id_and_parts(\n-            self.def_id,\n-            Some(self.name.clean(cx)),\n+            cx.tcx.hir().local_def_id(item.hir_id).to_def_id(),\n+            Some(name.clean(cx)),\n             MacroItem(Macro {\n+                // FIXME(#76761): Make this respect `macro_rules!` vs `pub macro`\n                 source: format!(\n                     \"macro_rules! {} {{\\n{}}}\",\n-                    self.name,\n-                    self.matchers\n+                    name,\n+                    matchers\n                         .iter()\n                         .map(|span| { format!(\"    {} => {{ ... }};\\n\", span.to_src(cx)) })\n-                        .collect::<String>()\n+                        .collect::<String>(),\n                 ),\n-                imported_from: self.imported_from.clean(cx),\n+                imported_from: None,\n             }),\n             cx,\n         )"}, {"sha": "3961870a1bfadfcff8544bddd92ddb5d17bb0a67", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=ccb9cc1200e26a5f0cdaac321bd10185d91e87e4", "patch": "@@ -18,7 +18,7 @@ crate struct Module<'hir> {\n     // (item, renamed)\n     crate items: Vec<(&'hir hir::Item<'hir>, Option<Ident>)>,\n     crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Ident>)>,\n-    crate macros: Vec<Macro>,\n+    crate macros: Vec<(&'hir hir::MacroDef<'hir>, Option<Ident>)>,\n     crate is_crate: bool,\n }\n \n@@ -56,15 +56,6 @@ crate struct Variant<'hir> {\n     crate def: &'hir hir::VariantData<'hir>,\n }\n \n-// For Macro we store the DefId instead of the NodeId, since we also create\n-// these imported macro_rules (which only have a DUMMY_NODE_ID).\n-crate struct Macro {\n-    crate name: Symbol,\n-    crate def_id: hir::def_id::DefId,\n-    crate matchers: Vec<Span>,\n-    crate imported_from: Option<Symbol>,\n-}\n-\n #[derive(Debug)]\n crate struct Import<'hir> {\n     crate name: Symbol,"}, {"sha": "4028293076df9328f9dc07b359bcb2f7265aa26c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9cc1200e26a5f0cdaac321bd10185d91e87e4/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ccb9cc1200e26a5f0cdaac321bd10185d91e87e4", "patch": "@@ -71,9 +71,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             None,\n         );\n         // Attach the crate's exported macros to the top-level module:\n-        module\n-            .macros\n-            .extend(krate.exported_macros.iter().map(|def| self.visit_local_macro(def, None)));\n+        module.macros.extend(krate.exported_macros.iter().map(|def| (def, None)));\n         module.is_crate = true;\n \n         self.cx.renderinfo.get_mut().exact_paths = self.exact_paths;\n@@ -216,7 +214,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 true\n             }\n             Node::MacroDef(def) if !glob => {\n-                om.macros.push(self.visit_local_macro(def, renamed.map(|i| i.name)));\n+                om.macros.push((def, renamed));\n                 true\n             }\n             _ => false,\n@@ -339,19 +337,4 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             om.foreigns.push((item, renamed));\n         }\n     }\n-\n-    // Convert each `exported_macro` into a doc item.\n-    fn visit_local_macro(&self, def: &'tcx hir::MacroDef<'_>, renamed: Option<Symbol>) -> Macro {\n-        debug!(\"visit_local_macro: {}\", def.ident);\n-        let tts = def.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n-        // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n-        let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect();\n-\n-        Macro {\n-            def_id: self.cx.tcx.hir().local_def_id(def.hir_id).to_def_id(),\n-            name: renamed.unwrap_or(def.ident.name),\n-            matchers,\n-            imported_from: None,\n-        }\n-    }\n }"}]}