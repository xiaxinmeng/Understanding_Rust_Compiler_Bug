{"sha": "2b70da1661995dc3817e07f5230d192b658db0d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNzBkYTE2NjE5OTVkYzM4MTdlMDdmNTIzMGQxOTJiNjU4ZGIwZDU=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-31T09:07:57Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-31T09:41:15Z"}, "message": "Remove unnecessary scope\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>", "tree": {"sha": "c6c4c06a42621d12c7c5d5482cdc6b5642c7c15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6c4c06a42621d12c7c5d5482cdc6b5642c7c15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b70da1661995dc3817e07f5230d192b658db0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b70da1661995dc3817e07f5230d192b658db0d5", "html_url": "https://github.com/rust-lang/rust/commit/2b70da1661995dc3817e07f5230d192b658db0d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b70da1661995dc3817e07f5230d192b658db0d5/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08f7b0a422587dbf192a85ce04fcbec07f8023de", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f7b0a422587dbf192a85ce04fcbec07f8023de", "html_url": "https://github.com/rust-lang/rust/commit/08f7b0a422587dbf192a85ce04fcbec07f8023de"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "cabe4b49e9854048ff6b1f17dfed720cc42ea324", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2b70da1661995dc3817e07f5230d192b658db0d5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70da1661995dc3817e07f5230d192b658db0d5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=2b70da1661995dc3817e07f5230d192b658db0d5", "patch": "@@ -1135,43 +1135,40 @@ crate fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n     let mut links = vec![];\n     let mut shortcut_links = vec![];\n \n-    {\n-        let locate = |s: &str| unsafe {\n-            let s_start = s.as_ptr();\n-            let s_end = s_start.add(s.len());\n-            let md_start = md.as_ptr();\n-            let md_end = md_start.add(md.len());\n-            if md_start <= s_start && s_end <= md_end {\n-                let start = s_start.offset_from(md_start) as usize;\n-                let end = s_end.offset_from(md_start) as usize;\n-                Some(start..end)\n-            } else {\n-                None\n-            }\n-        };\n-\n-        let mut push = |link: BrokenLink<'_>| {\n-            // FIXME: use `link.span` instead of `locate`\n-            // (doing it now includes the `[]` as well as the text)\n-            shortcut_links.push((link.reference.to_owned(), locate(link.reference)));\n+    let locate = |s: &str| unsafe {\n+        let s_start = s.as_ptr();\n+        let s_end = s_start.add(s.len());\n+        let md_start = md.as_ptr();\n+        let md_end = md_start.add(md.len());\n+        if md_start <= s_start && s_end <= md_end {\n+            let start = s_start.offset_from(md_start) as usize;\n+            let end = s_end.offset_from(md_start) as usize;\n+            Some(start..end)\n+        } else {\n             None\n-        };\n-        let p =\n-            Parser::new_with_broken_link_callback(md, opts(), Some(&mut push)).into_offset_iter();\n-\n-        // There's no need to thread an IdMap through to here because\n-        // the IDs generated aren't going to be emitted anywhere.\n-        let mut ids = IdMap::new();\n-        let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids));\n-\n-        for ev in iter {\n-            if let Event::Start(Tag::Link(_, dest, _)) = ev.0 {\n-                debug!(\"found link: {}\", dest);\n-                links.push(match dest {\n-                    CowStr::Borrowed(s) => (s.to_owned(), locate(s)),\n-                    s @ (CowStr::Boxed(..) | CowStr::Inlined(..)) => (s.into_string(), None),\n-                });\n-            }\n+        }\n+    };\n+\n+    let mut push = |link: BrokenLink<'_>| {\n+        // FIXME: use `link.span` instead of `locate`\n+        // (doing it now includes the `[]` as well as the text)\n+        shortcut_links.push((link.reference.to_owned(), locate(link.reference)));\n+        None\n+    };\n+    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut push)).into_offset_iter();\n+\n+    // There's no need to thread an IdMap through to here because\n+    // the IDs generated aren't going to be emitted anywhere.\n+    let mut ids = IdMap::new();\n+    let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids));\n+\n+    for ev in iter {\n+        if let Event::Start(Tag::Link(_, dest, _)) = ev.0 {\n+            debug!(\"found link: {}\", dest);\n+            links.push(match dest {\n+                CowStr::Borrowed(s) => (s.to_owned(), locate(s)),\n+                s @ (CowStr::Boxed(..) | CowStr::Inlined(..)) => (s.into_string(), None),\n+            });\n         }\n     }\n "}]}