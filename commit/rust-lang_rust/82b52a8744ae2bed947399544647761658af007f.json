{"sha": "82b52a8744ae2bed947399544647761658af007f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYjUyYTg3NDRhZTJiZWQ5NDczOTk1NDQ2NDc3NjE2NThhZjAwN2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-23T12:25:22Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-23T12:25:22Z"}, "message": "Rustup to rustc 1.42.0-nightly (9b98af84c 2019-12-22)", "tree": {"sha": "546bc71e3d6e91b5d8d9689ea14e3f0a98351a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/546bc71e3d6e91b5d8d9689ea14e3f0a98351a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82b52a8744ae2bed947399544647761658af007f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82b52a8744ae2bed947399544647761658af007f", "html_url": "https://github.com/rust-lang/rust/commit/82b52a8744ae2bed947399544647761658af007f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82b52a8744ae2bed947399544647761658af007f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a310345d955f06dcb989a510d6613be2443a6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a310345d955f06dcb989a510d6613be2443a6e", "html_url": "https://github.com/rust-lang/rust/commit/15a310345d955f06dcb989a510d6613be2443a6e"}], "stats": {"total": 36, "additions": 7, "deletions": 29}, "files": [{"sha": "f63a5021d1e56f4f8b6491801e04d2b11c22e7c7", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/82b52a8744ae2bed947399544647761658af007f/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b52a8744ae2bed947399544647761658af007f/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=82b52a8744ae2bed947399544647761658af007f", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n \n use rustc::mir::interpret::{\n-    read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, GlobalId, InterpResult, Scalar,\n+    read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, InterpResult, Scalar,\n };\n use rustc::ty::{layout::Align, Const, ConstKind};\n use rustc_mir::interpret::{\n@@ -54,10 +54,7 @@ pub fn trans_promoted<'tcx>(\n     promoted: Promoted,\n     dest_ty: Ty<'tcx>,\n ) -> CPlace<'tcx> {\n-    match fx.tcx.const_eval(ParamEnv::reveal_all().and(GlobalId {\n-        instance,\n-        promoted: Some(promoted),\n-    })) {\n+    match fx.tcx.const_eval_promoted(instance, promoted) {\n         Ok(const_) => {\n             let cplace = trans_const_place(fx, const_);\n             debug_assert_eq!(cplace.layout(), fx.layout_of(dest_ty));\n@@ -85,14 +82,8 @@ pub fn force_eval_const<'tcx>(\n ) -> &'tcx Const<'tcx> {\n     match const_.val {\n         ConstKind::Unevaluated(def_id, ref substs) => {\n-            let param_env = ParamEnv::reveal_all();\n             let substs = fx.monomorphize(substs);\n-            let instance = Instance::resolve(fx.tcx, param_env, def_id, substs).unwrap();\n-            let cid = GlobalId {\n-                instance,\n-                promoted: None,\n-            };\n-            fx.tcx.const_eval(param_env.and(cid)).unwrap()\n+            fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def_id, substs, None).unwrap()\n         }\n         _ => fx.monomorphize(&const_),\n     }\n@@ -284,12 +275,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                     continue;\n                 }\n \n-                let instance = ty::Instance::mono(tcx, def_id);\n-                let cid = GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                let const_ = tcx.const_eval(ParamEnv::reveal_all().and(cid)).unwrap();\n+                let const_ = tcx.const_eval_poly(def_id).unwrap();\n \n                 let alloc = match const_.val {\n                     ConstKind::Value(ConstValue::ByRef { alloc, offset }) if offset.bytes() == 0 => alloc,\n@@ -507,12 +493,7 @@ pub fn mir_operand_get_const_val<'tcx>(\n         StaticKind::Static => unimplemented!(),\n         StaticKind::Promoted(promoted, substs) => {\n             let instance = Instance::new(static_.def_id, fx.monomorphize(substs));\n-            fx.tcx\n-                .const_eval(ParamEnv::reveal_all().and(GlobalId {\n-                    instance,\n-                    promoted: Some(*promoted),\n-                }))\n-                .unwrap()\n+            fx.tcx.const_eval_promoted(instance, *promoted).unwrap()\n         }\n     })\n }"}, {"sha": "2f689af22cab66366e521c029506b59cb0d4a349", "filename": "src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82b52a8744ae2bed947399544647761658af007f/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b52a8744ae2bed947399544647761658af007f/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=82b52a8744ae2bed947399544647761658af007f", "patch": "@@ -825,11 +825,8 @@ pub fn codegen_intrinsic_call<'tcx>(\n         };\n \n         size_of | pref_align_of | min_align_of | needs_drop | type_id | type_name, () {\n-            let gid = rustc::mir::interpret::GlobalId {\n-                instance,\n-                promoted: None,\n-            };\n-            let const_val = fx.tcx.const_eval(ParamEnv::reveal_all().and(gid)).unwrap();\n+            let const_val =\n+                fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n             let val = crate::constant::trans_const_value(fx, const_val);\n             ret.write_cvalue(fx, val);\n         };"}]}