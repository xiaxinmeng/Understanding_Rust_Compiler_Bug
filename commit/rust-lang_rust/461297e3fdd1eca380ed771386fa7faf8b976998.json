{"sha": "461297e3fdd1eca380ed771386fa7faf8b976998", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MTI5N2UzZmRkMWVjYTM4MGVkNzcxMzg2ZmE3ZmFmOGI5NzY5OTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-08T18:29:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-08T18:29:57Z"}, "message": "Rollup merge of #81938 - lukaslueg:stab_peek_mut, r=Amanieu\n\nStabilize `peekable_peek_mut`\n\nResolves #78302. Also adds some documentation on `std::iter::Iterator::peekable()` regarding the new method.\n\nThe feature was added in #77491 in Nov' 20, which is recently, but the feature seems reasonably small. Never did a stabilization-pr, excuse my ignorance if there is a protocol I'm not aware of.", "tree": {"sha": "79f58409c5a18f0423ea601b3c3cf0b7b677dbca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79f58409c5a18f0423ea601b3c3cf0b7b677dbca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/461297e3fdd1eca380ed771386fa7faf8b976998", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgb0ulCRBK7hj4Ov3rIwAAdHIIAAhWptR38Es9nyxaWbuVaJ7O\nN3pap2VkwCU68FowLe+tDAL/OeWoznwQwZJL9D7l8Db5uc6xTjUryUTIsg+JFZgv\n9gXzZ3WJYOnGQO9Q+oMdPuPVu/OULoHY6hVK4tpLQELWFu11zDjnS292rqoONOKO\n2ZEqhQncwwnqThGMoSHKHCuAeldOT9fGt9YwDLXuiIPXXuJzHLYPbz0K7EmxTVXN\nR/FdKkd7shqCgMJ/P7q/O3j3sicQrf2IXfIKRuKEYPmHcy2Sm61yPYvtZLmh00rf\njWrOefk9LCNoi8+ypksiKmWQEdH6i0impHIz9MPYC4ffEDSEm5yonDqZVGQ4G7k=\n=TJ7u\n-----END PGP SIGNATURE-----\n", "payload": "tree 79f58409c5a18f0423ea601b3c3cf0b7b677dbca\nparent 9aed9c13537522bb9478421c516be380161e53ff\nparent cfe43f9733233a62026965338d8ee1f8e44fc8b0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617906597 +0200\ncommitter GitHub <noreply@github.com> 1617906597 +0200\n\nRollup merge of #81938 - lukaslueg:stab_peek_mut, r=Amanieu\n\nStabilize `peekable_peek_mut`\n\nResolves #78302. Also adds some documentation on `std::iter::Iterator::peekable()` regarding the new method.\n\nThe feature was added in #77491 in Nov' 20, which is recently, but the feature seems reasonably small. Never did a stabilization-pr, excuse my ignorance if there is a protocol I'm not aware of.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/461297e3fdd1eca380ed771386fa7faf8b976998", "html_url": "https://github.com/rust-lang/rust/commit/461297e3fdd1eca380ed771386fa7faf8b976998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/461297e3fdd1eca380ed771386fa7faf8b976998/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aed9c13537522bb9478421c516be380161e53ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aed9c13537522bb9478421c516be380161e53ff", "html_url": "https://github.com/rust-lang/rust/commit/9aed9c13537522bb9478421c516be380161e53ff"}, {"sha": "cfe43f9733233a62026965338d8ee1f8e44fc8b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe43f9733233a62026965338d8ee1f8e44fc8b0", "html_url": "https://github.com/rust-lang/rust/commit/cfe43f9733233a62026965338d8ee1f8e44fc8b0"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "21386e28a96431f83db64f899e89b9dd3e460485", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/461297e3fdd1eca380ed771386fa7faf8b976998/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461297e3fdd1eca380ed771386fa7faf8b976998/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=461297e3fdd1eca380ed771386fa7faf8b976998", "patch": "@@ -233,7 +233,6 @@ impl<I: Iterator> Peekable<I> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(peekable_peek_mut)]\n     /// let mut iter = [1, 2, 3].iter().peekable();\n     ///\n     /// // Like with `peek()`, we can see into the future without advancing the iterator.\n@@ -251,7 +250,7 @@ impl<I: Iterator> Peekable<I> {\n     /// assert_eq!(iter.collect::<Vec<_>>(), vec![&5, &3]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"peekable_peek_mut\", issue = \"78302\")]\n+    #[stable(feature = \"peekable_peek_mut\", since = \"1.53.0\")]\n     pub fn peek_mut(&mut self) -> Option<&mut I::Item> {\n         let iter = &mut self.iter;\n         self.peeked.get_or_insert_with(|| iter.next()).as_mut()"}, {"sha": "abd44b47f98865ee3e7b70c623357cbaef361c4e", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/461297e3fdd1eca380ed771386fa7faf8b976998/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461297e3fdd1eca380ed771386fa7faf8b976998/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=461297e3fdd1eca380ed771386fa7faf8b976998", "patch": "@@ -937,20 +937,16 @@ pub trait Iterator {\n         Enumerate::new(self)\n     }\n \n-    /// Creates an iterator which can use [`peek`] to look at the next element of\n-    /// the iterator without consuming it.\n+    /// Creates an iterator which can use the [`peek`] and [`peek_mut`] methods\n+    /// to look at the next element of the iterator without consuming it. See\n+    /// their documentation for more information.\n     ///\n-    /// Adds a [`peek`] method to an iterator. See its documentation for\n-    /// more information.\n+    /// Note that the underlying iterator is still advanced when [`peek`] or\n+    /// [`peek_mut`] are called for the first time: In order to retrieve the\n+    /// next element, [`next`] is called on the underlying iterator, hence any\n+    /// side effects (i.e. anything other than fetching the next value) of\n+    /// the [`next`] method will occur.\n     ///\n-    /// Note that the underlying iterator is still advanced when [`peek`] is\n-    /// called for the first time: In order to retrieve the next element,\n-    /// [`next`] is called on the underlying iterator, hence any side effects (i.e.\n-    /// anything other than fetching the next value) of the [`next`] method\n-    /// will occur.\n-    ///\n-    /// [`peek`]: Peekable::peek\n-    /// [`next`]: Iterator::next\n     ///\n     /// # Examples\n     ///\n@@ -977,6 +973,32 @@ pub trait Iterator {\n     /// assert_eq!(iter.peek(), None);\n     /// assert_eq!(iter.next(), None);\n     /// ```\n+    ///\n+    /// Using [`peek_mut`] to mutate the next item without advancing the\n+    /// iterator:\n+    ///\n+    /// ```\n+    /// let xs = [1, 2, 3];\n+    ///\n+    /// let mut iter = xs.iter().peekable();\n+    ///\n+    /// // `peek_mut()` lets us see into the future\n+    /// assert_eq!(iter.peek_mut(), Some(&mut &1));\n+    /// assert_eq!(iter.peek_mut(), Some(&mut &1));\n+    /// assert_eq!(iter.next(), Some(&1));\n+    ///\n+    /// if let Some(mut p) = iter.peek_mut() {\n+    ///     assert_eq!(*p, &2);\n+    ///     // put a value into the iterator\n+    ///     *p = &1000;\n+    /// }\n+    ///\n+    /// // The value reappears as the iterator continues\n+    /// assert_eq!(iter.collect::<Vec<_>>(), vec![&1000, &3]);\n+    /// ```\n+    /// [`peek`]: Peekable::peek\n+    /// [`peek_mut`]: Peekable::peek_mut\n+    /// [`next`]: Iterator::next\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn peekable(self) -> Peekable<Self>"}, {"sha": "7dc6e220c08bcb5c4402bdb3ebf4af62cf8903c4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/461297e3fdd1eca380ed771386fa7faf8b976998/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461297e3fdd1eca380ed771386fa7faf8b976998/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=461297e3fdd1eca380ed771386fa7faf8b976998", "patch": "@@ -66,7 +66,6 @@\n #![feature(unwrap_infallible)]\n #![feature(option_result_unwrap_unchecked)]\n #![feature(result_into_ok_or_err)]\n-#![feature(peekable_peek_mut)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]\n #![feature(unsized_tuple_coercion)]"}]}