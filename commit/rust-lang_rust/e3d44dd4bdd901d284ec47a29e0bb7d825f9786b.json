{"sha": "e3d44dd4bdd901d284ec47a29e0bb7d825f9786b", "node_id": "C_kwDOAAsO6NoAKGUzZDQ0ZGQ0YmRkOTAxZDI4NGVjNDdhMjllMGJiN2Q4MjVmOTc4NmI", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-10-16T13:56:03Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-10-16T14:10:40Z"}, "message": "Use IsTerminal in librustdoc", "tree": {"sha": "dee282bc4cb0eb5d27a448182944b80d9a559802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dee282bc4cb0eb5d27a448182944b80d9a559802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b", "html_url": "https://github.com/rust-lang/rust/commit/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60ba29b10e2c4741bbd8701c74b85c09b70e03d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60ba29b10e2c4741bbd8701c74b85c09b70e03d", "html_url": "https://github.com/rust-lang/rust/commit/d60ba29b10e2c4741bbd8701c74b85c09b70e03d"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "6630b6479dc4877ca52798857cec6644a5c49c3a", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e3d44dd4bdd901d284ec47a29e0bb7d825f9786b", "patch": "@@ -4272,7 +4272,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"arrayvec\",\n  \"askama\",\n- \"atty\",\n  \"expect-test\",\n  \"itertools\",\n  \"minifier\","}, {"sha": "63ccee14caa9d0f94e1ea7b69aced95e235f8b2c", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=e3d44dd4bdd901d284ec47a29e0bb7d825f9786b", "patch": "@@ -9,7 +9,6 @@ path = \"lib.rs\"\n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n askama = { version = \"0.11\", default-features = false, features = [\"config\"] }\n-atty = \"0.2\"\n itertools = \"0.10.1\"\n minifier = \"0.2.2\"\n once_cell = \"1.10.0\""}, {"sha": "7276b9ce0ee7d1fe21369f090403617ea9f2fdc9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d44dd4bdd901d284ec47a29e0bb7d825f9786b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e3d44dd4bdd901d284ec47a29e0bb7d825f9786b", "patch": "@@ -8,6 +8,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n+#![feature(is_terminal)]\n #![feature(let_chains)]\n #![feature(test)]\n #![feature(never_type)]\n@@ -69,7 +70,7 @@ extern crate jemalloc_sys;\n \n use std::default::Default;\n use std::env::{self, VarError};\n-use std::io;\n+use std::io::{self, IsTerminal};\n use std::process;\n \n use rustc_driver::abort_on_err;\n@@ -180,7 +181,7 @@ fn init_logging() {\n     let color_logs = match std::env::var(\"RUSTDOC_LOG_COLOR\").as_deref() {\n         Ok(\"always\") => true,\n         Ok(\"never\") => false,\n-        Ok(\"auto\") | Err(VarError::NotPresent) => atty::is(atty::Stream::Stdout),\n+        Ok(\"auto\") | Err(VarError::NotPresent) => io::stdout().is_terminal(),\n         Ok(value) => early_error(\n             ErrorOutputType::default(),\n             &format!(\"invalid log color value '{}': expected one of always, never, or auto\", value),"}]}