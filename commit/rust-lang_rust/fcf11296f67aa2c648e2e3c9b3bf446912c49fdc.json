{"sha": "fcf11296f67aa2c648e2e3c9b3bf446912c49fdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjExMjk2ZjY3YWEyYzY0OGUyZTNjOWIzYmY0NDY5MTJjNDlmZGM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-23T19:16:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-23T19:16:07Z"}, "message": "Rollup merge of #81249 - cjgillot:issue-79537, r=oli-obk\n\nLower closure prototype after its body.\n\nFixes #79537.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "8e53334030434a69b75641bda2abb1c074d4606e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e53334030434a69b75641bda2abb1c074d4606e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgDHX3CRBK7hj4Ov3rIwAAdHIIAKcGt8ZAUvxwOmJjui8AMJ0V\nIDBSb0mFH1LmyAEJilu7uq6ah9NxO2pFiaO/dNzHV11r8f0IZLQKVcat7XvLrzs5\nOv6n264OiqhBQq2RfK/a8mrdF+Ro/DjqQTqVe9+ybLbWmji8Qmw/92qf6zl9PI6t\nMCO4z1n+tIcohYSXNlILdqypIMnfSkMk57NL7x5L9ofuGOZNkB4Brmqpnkd7csUt\ni2AgA2B+mXPAxTrTIU8xzjF2E0FOyFYBiFpjGmiLHmswD3WFAhgh3m/p96hfg4V8\nqfkzWd23Wf5e0cPPZNm8FpvRP2rdLFzjMA4ybSnWvAhw5Rvk8FdrpL/40NoSE1I=\n=kfM6\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e53334030434a69b75641bda2abb1c074d4606e\nparent c4830daf1f5c527eaf6ebae0342cad62b4b7480d\nparent 3f42abec58ab05d37689f33efdfa6382eb4b1e1a\nauthor Jonas Schievink <jonasschievink@gmail.com> 1611429367 +0100\ncommitter GitHub <noreply@github.com> 1611429367 +0100\n\nRollup merge of #81249 - cjgillot:issue-79537, r=oli-obk\n\nLower closure prototype after its body.\n\nFixes #79537.\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc", "html_url": "https://github.com/rust-lang/rust/commit/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4830daf1f5c527eaf6ebae0342cad62b4b7480d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4830daf1f5c527eaf6ebae0342cad62b4b7480d", "html_url": "https://github.com/rust-lang/rust/commit/c4830daf1f5c527eaf6ebae0342cad62b4b7480d"}, {"sha": "3f42abec58ab05d37689f33efdfa6382eb4b1e1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f42abec58ab05d37689f33efdfa6382eb4b1e1a", "html_url": "https://github.com/rust-lang/rust/commit/3f42abec58ab05d37689f33efdfa6382eb4b1e1a"}], "stats": {"total": 99, "additions": 86, "deletions": 13}, "files": [{"sha": "4d6afd2fe0d089ffcf3f375857352d0a23a26e03", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=fcf11296f67aa2c648e2e3c9b3bf446912c49fdc", "patch": "@@ -776,10 +776,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: &Expr,\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n-        // Lower outside new scope to preserve `is_in_loop_condition`.\n-        let fn_decl = self.lower_fn_decl(decl, None, false, None);\n-\n-        self.with_new_scopes(move |this| {\n+        let (body_id, generator_option) = self.with_new_scopes(move |this| {\n             let prev = this.current_item;\n             this.current_item = Some(fn_decl_span);\n             let mut generator_kind = None;\n@@ -791,8 +788,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let generator_option =\n                 this.generator_movability_for_fn(&decl, fn_decl_span, generator_kind, movability);\n             this.current_item = prev;\n-            hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, generator_option)\n-        })\n+            (body_id, generator_option)\n+        });\n+\n+        // Lower outside new scope to preserve `is_in_loop_condition`.\n+        let fn_decl = self.lower_fn_decl(decl, None, false, None);\n+\n+        hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, generator_option)\n     }\n \n     fn generator_movability_for_fn(\n@@ -838,12 +840,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> hir::ExprKind<'hir> {\n         let outer_decl =\n             FnDecl { inputs: decl.inputs.clone(), output: FnRetTy::Default(fn_decl_span) };\n-        // We need to lower the declaration outside the new scope, because we\n-        // have to conserve the state of being inside a loop condition for the\n-        // closure argument types.\n-        let fn_decl = self.lower_fn_decl(&outer_decl, None, false, None);\n \n-        self.with_new_scopes(move |this| {\n+        let body_id = self.with_new_scopes(|this| {\n             // FIXME(cramertj): allow `async` non-`move` closures with arguments.\n             if capture_clause == CaptureBy::Ref && !decl.inputs.is_empty() {\n                 struct_span_err!(\n@@ -874,8 +872,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 );\n                 this.expr(fn_decl_span, async_body, ThinVec::new())\n             });\n-            hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, None)\n-        })\n+            body_id\n+        });\n+\n+        // We need to lower the declaration outside the new scope, because we\n+        // have to conserve the state of being inside a loop condition for the\n+        // closure argument types.\n+        let fn_decl = self.lower_fn_decl(&outer_decl, None, false, None);\n+\n+        hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, None)\n     }\n \n     /// Destructure the LHS of complex assignments."}, {"sha": "006e6f490f06b14bb3b5c1a271754fcc8bb77595", "filename": "src/test/ui/closures/local-type-mix.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.rs?ref=fcf11296f67aa2c648e2e3c9b3bf446912c49fdc", "patch": "@@ -0,0 +1,17 @@\n+// Check that using the parameter name in its type does not ICE.\n+// edition:2018\n+\n+#![feature(async_closure)]\n+\n+fn main() {\n+    let _ = |x: x| x; //~ ERROR expected type\n+    let _ = |x: bool| -> x { x }; //~ ERROR expected type\n+    let _ = async move |x: x| x; //~ ERROR expected type\n+    let _ = async move |x: bool| -> x { x }; //~ ERROR expected type\n+}\n+\n+fn foo(x: x) {} //~ ERROR expected type\n+fn foo_ret(x: bool) -> x {} //~ ERROR expected type\n+\n+async fn async_foo(x: x) {} //~ ERROR expected type\n+async fn async_foo_ret(x: bool) -> x {} //~ ERROR expected type"}, {"sha": "68c320a065d57919c10c1bb5a8c434ea8c9cfb64", "filename": "src/test/ui/closures/local-type-mix.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcf11296f67aa2c648e2e3c9b3bf446912c49fdc/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.stderr?ref=fcf11296f67aa2c648e2e3c9b3bf446912c49fdc", "patch": "@@ -0,0 +1,51 @@\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:7:17\n+   |\n+LL |     let _ = |x: x| x;\n+   |                 ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:8:26\n+   |\n+LL |     let _ = |x: bool| -> x { x };\n+   |                          ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:9:28\n+   |\n+LL |     let _ = async move |x: x| x;\n+   |                            ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:10:37\n+   |\n+LL |     let _ = async move |x: bool| -> x { x };\n+   |                                     ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:13:11\n+   |\n+LL | fn foo(x: x) {}\n+   |           ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:14:24\n+   |\n+LL | fn foo_ret(x: bool) -> x {}\n+   |                        ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:16:23\n+   |\n+LL | async fn async_foo(x: x) {}\n+   |                       ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:17:36\n+   |\n+LL | async fn async_foo_ret(x: bool) -> x {}\n+   |                                    ^ not a type\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0573`."}]}