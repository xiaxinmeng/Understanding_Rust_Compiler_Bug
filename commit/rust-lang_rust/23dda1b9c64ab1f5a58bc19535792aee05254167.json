{"sha": "23dda1b9c64ab1f5a58bc19535792aee05254167", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZGRhMWI5YzY0YWIxZjVhNThiYzE5NTM1NzkyYWVlMDUyNTQxNjc=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-08-10T18:27:41Z"}, "committer": {"name": "Simon Vandel Sillesen", "email": "simon@localhost.localdomain", "date": "2020-08-29T11:42:19Z"}, "message": "New pass to optimize `if`conditions on integrals to switches on the integer\nFixes #75144", "tree": {"sha": "de09e5ff99f906d4793af36559d771cd4aee6cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de09e5ff99f906d4793af36559d771cd4aee6cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23dda1b9c64ab1f5a58bc19535792aee05254167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23dda1b9c64ab1f5a58bc19535792aee05254167", "html_url": "https://github.com/rust-lang/rust/commit/23dda1b9c64ab1f5a58bc19535792aee05254167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23dda1b9c64ab1f5a58bc19535792aee05254167/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abb98ca10de10e0a80e2bdbb8f704649ceed556f", "url": "https://api.github.com/repos/rust-lang/rust/commits/abb98ca10de10e0a80e2bdbb8f704649ceed556f", "html_url": "https://github.com/rust-lang/rust/commit/abb98ca10de10e0a80e2bdbb8f704649ceed556f"}], "stats": {"total": 662, "additions": 662, "deletions": 0}, "files": [{"sha": "7d6ff3eb5c1ccb25c7732403b2e7b7bfffe6025a", "filename": "src/librustc_middle/mir/interpret/value.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -503,6 +503,11 @@ impl<'tcx, Tag> Scalar<Tag> {\n         self.to_unsigned_with_bit_width(64).map(|v| u64::try_from(v).unwrap())\n     }\n \n+    /// Converts the scalar to produce an `u128`. Fails if the scalar is a pointer.\n+    pub fn to_u128(self) -> InterpResult<'static, u128> {\n+        self.to_unsigned_with_bit_width(128)\n+    }\n+\n     pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n         let b = self.to_bits(cx.data_layout().pointer_size)?;\n         Ok(u64::try_from(b).unwrap())\n@@ -535,6 +540,11 @@ impl<'tcx, Tag> Scalar<Tag> {\n         self.to_signed_with_bit_width(64).map(|v| i64::try_from(v).unwrap())\n     }\n \n+    /// Converts the scalar to produce an `i128`. Fails if the scalar is a pointer.\n+    pub fn to_i128(self) -> InterpResult<'static, i128> {\n+        self.to_signed_with_bit_width(128)\n+    }\n+\n     pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {\n         let sz = cx.data_layout().pointer_size;\n         let b = self.to_bits(sz)?;"}, {"sha": "785a7f0c51a0bb538452f94376a3be218283cf5e", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -1430,6 +1430,15 @@ pub enum StatementKind<'tcx> {\n     Nop,\n }\n \n+impl<'tcx> StatementKind<'tcx> {\n+    pub fn as_assign_mut(&mut self) -> Option<&mut Box<(Place<'tcx>, Rvalue<'tcx>)>> {\n+        match self {\n+            StatementKind::Assign(x) => Some(x),\n+            _ => None,\n+        }\n+    }\n+}\n+\n /// Describes what kind of retag is to be performed.\n #[derive(Copy, Clone, TyEncodable, TyDecodable, Debug, PartialEq, Eq, HashStable)]\n pub enum RetagKind {\n@@ -1843,6 +1852,10 @@ impl<'tcx> Operand<'tcx> {\n         })\n     }\n \n+    pub fn is_move(&self) -> bool {\n+        matches!(self, Operand::Move(..))\n+    }\n+\n     /// Convenience helper to make a literal-like constant from a given scalar value.\n     /// Since this is used to synthesize MIR, assumes `user_ty` is None.\n     pub fn const_from_scalar("}, {"sha": "c3a34756122a176ea8ea872e207429be99b88147", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -39,6 +39,7 @@ pub mod required_consts;\n pub mod rustc_peek;\n pub mod simplify;\n pub mod simplify_branches;\n+pub mod simplify_comparison_integral;\n pub mod simplify_try;\n pub mod uninhabited_enum_branching;\n pub mod unreachable_prop;\n@@ -456,6 +457,7 @@ fn run_optimization_passes<'tcx>(\n         &match_branches::MatchBranchSimplification,\n         &const_prop::ConstProp,\n         &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n+        &simplify_comparison_integral::SimplifyComparisonIntegral,\n         &simplify_try::SimplifyArmIdentity,\n         &simplify_try::SimplifyBranchSame,\n         &copy_prop::CopyPropagation,"}, {"sha": "a450a75d091eff1a9bd9dc756fdd98b72ff82d34", "filename": "src/librustc_mir/transform/simplify_comparison_integral.rs", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Flibrustc_mir%2Ftransform%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Flibrustc_mir%2Ftransform%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_comparison_integral.rs?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,226 @@\n+use super::{MirPass, MirSource};\n+use rustc_middle::{\n+    mir::{\n+        interpret::Scalar, BasicBlock, BinOp, Body, Operand, Place, Rvalue, Statement,\n+        StatementKind, TerminatorKind,\n+    },\n+    ty::{Ty, TyCtxt},\n+};\n+\n+/// Pass to convert `if` conditions on integrals into switches on the integral.\n+/// For an example, it turns something like\n+///\n+/// ```\n+/// _3 = Eq(move _4, const 43i32);\n+/// StorageDead(_4);\n+/// switchInt(_3) -> [false: bb2, otherwise: bb3];\n+/// ```\n+///\n+/// into:\n+///\n+/// ```\n+/// switchInt(_4) -> [43i32: bb3, otherwise: bb2];\n+/// ```\n+pub struct SimplifyComparisonIntegral;\n+\n+impl<'tcx> MirPass<'tcx> for SimplifyComparisonIntegral {\n+    fn run_pass(&self, _: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        trace!(\"Running SimplifyComparisonIntegral on {:?}\", source);\n+\n+        let helper = OptimizationFinder { body };\n+        let opts = helper.find_optimizations();\n+        let mut storage_deads_to_insert = vec![];\n+        let mut storage_deads_to_remove: Vec<(usize, BasicBlock)> = vec![];\n+        for opt in opts {\n+            trace!(\"SUCCESS: Applying {:?}\", opt);\n+            // replace terminator with a switchInt that switches on the integer directly\n+            let bbs = &mut body.basic_blocks_mut();\n+            let bb = &mut bbs[opt.bb_idx];\n+            // We only use the bits for the untyped, not length checked `values` field. Thus we are\n+            // not using any of the convenience wrappers here and directly access the bits.\n+            let new_value = match opt.branch_value_scalar {\n+                Scalar::Raw { data, .. } => data,\n+                Scalar::Ptr(_) => continue,\n+            };\n+            const FALSE: u128 = 0;\n+            let mut new_targets = opt.targets.clone();\n+            let first_is_false_target = opt.values[0] == FALSE;\n+            match opt.op {\n+                BinOp::Eq => {\n+                    // if the assignment was Eq we want the true case to be first\n+                    if first_is_false_target {\n+                        new_targets.swap(0, 1);\n+                    }\n+                }\n+                BinOp::Ne => {\n+                    // if the assignment was Ne we want the false case to be first\n+                    if !first_is_false_target {\n+                        new_targets.swap(0, 1);\n+                    }\n+                }\n+                _ => unreachable!(),\n+            }\n+\n+            let terminator = bb.terminator_mut();\n+\n+            // add StorageDead for the place switched on at the top of each target\n+            for bb_idx in new_targets.iter() {\n+                storage_deads_to_insert.push((\n+                    *bb_idx,\n+                    Statement {\n+                        source_info: terminator.source_info,\n+                        kind: StatementKind::StorageDead(opt.to_switch_on.local),\n+                    },\n+                ));\n+            }\n+\n+            terminator.kind = TerminatorKind::SwitchInt {\n+                discr: Operand::Move(opt.to_switch_on),\n+                switch_ty: opt.branch_value_ty,\n+                values: vec![new_value].into(),\n+                targets: new_targets,\n+            };\n+\n+            // delete comparison statement if it the value being switched on was moved, which means it can not be user later on\n+            if opt.can_remove_bin_op_stmt {\n+                bb.statements[opt.bin_op_stmt_idx].make_nop();\n+            } else {\n+                // if the integer being compared to a const integral is being moved into the comparison,\n+                // e.g `_2 = Eq(move _3, const 'x');`\n+                // we want to avoid making a double move later on in the switchInt on _3.\n+                // So to avoid `switchInt(move _3) -> ['x': bb2, otherwise: bb1];`,\n+                // we convert the move in the comparison statement to a copy.\n+\n+                // unwrap is safe as we know this statement is an assign\n+                let box (_, rhs) = bb.statements[opt.bin_op_stmt_idx].kind.as_assign_mut().unwrap();\n+\n+                use Operand::*;\n+                match rhs {\n+                    Rvalue::BinaryOp(_, ref mut left @ Move(_), Constant(_)) => {\n+                        *left = Copy(opt.to_switch_on);\n+                    }\n+                    Rvalue::BinaryOp(_, Constant(_), ref mut right @ Move(_)) => {\n+                        *right = Copy(opt.to_switch_on);\n+                    }\n+                    _ => (),\n+                }\n+            }\n+\n+            // remove StorageDead (if it exists) being used in the assign of the comparison\n+            for (stmt_idx, stmt) in bb.statements.iter().enumerate() {\n+                if !matches!(stmt.kind, StatementKind::StorageDead(local) if local == opt.to_switch_on.local)\n+                {\n+                    continue;\n+                }\n+                storage_deads_to_remove.push((stmt_idx, opt.bb_idx))\n+            }\n+        }\n+\n+        for (idx, bb_idx) in storage_deads_to_remove {\n+            body.basic_blocks_mut()[bb_idx].statements[idx].make_nop();\n+        }\n+\n+        for (idx, stmt) in storage_deads_to_insert {\n+            body.basic_blocks_mut()[idx].statements.insert(0, stmt);\n+        }\n+    }\n+}\n+\n+struct OptimizationFinder<'a, 'tcx> {\n+    body: &'a Body<'tcx>,\n+}\n+\n+impl<'a, 'tcx> OptimizationFinder<'a, 'tcx> {\n+    fn find_optimizations(&self) -> Vec<OptimizationInfo<'tcx>> {\n+        self.body\n+            .basic_blocks()\n+            .iter_enumerated()\n+            .filter_map(|(bb_idx, bb)| {\n+                // find switch\n+                let (place_switched_on, values, targets, place_switched_on_moved) = match &bb\n+                    .terminator()\n+                    .kind\n+                {\n+                    rustc_middle::mir::TerminatorKind::SwitchInt {\n+                        discr, values, targets, ..\n+                    } => Some((discr.place()?, values, targets, discr.is_move())),\n+                    _ => None,\n+                }?;\n+\n+                // find the statement that assigns the place being switched on\n+                bb.statements.iter().enumerate().rev().find_map(|(stmt_idx, stmt)| {\n+                    match &stmt.kind {\n+                        rustc_middle::mir::StatementKind::Assign(box (lhs, rhs))\n+                            if *lhs == place_switched_on =>\n+                        {\n+                            match rhs {\n+                                Rvalue::BinaryOp(op @ (BinOp::Eq | BinOp::Ne), left, right) => {\n+                                    let (branch_value_scalar, branch_value_ty, to_switch_on) =\n+                                        find_branch_value_info(left, right)?;\n+\n+                                    Some(OptimizationInfo {\n+                                        bin_op_stmt_idx: stmt_idx,\n+                                        bb_idx,\n+                                        can_remove_bin_op_stmt: place_switched_on_moved,\n+                                        to_switch_on,\n+                                        branch_value_scalar,\n+                                        branch_value_ty,\n+                                        op: *op,\n+                                        values: values.clone().into_owned(),\n+                                        targets: targets.clone(),\n+                                    })\n+                                }\n+                                _ => None,\n+                            }\n+                        }\n+                        _ => None,\n+                    }\n+                })\n+            })\n+            .collect()\n+    }\n+}\n+\n+fn find_branch_value_info<'tcx>(\n+    left: &Operand<'tcx>,\n+    right: &Operand<'tcx>,\n+) -> Option<(Scalar, Ty<'tcx>, Place<'tcx>)> {\n+    // check that either left or right is a constant.\n+    // if any are, we can use the other to switch on, and the constant as a value in a switch\n+    use Operand::*;\n+    match (left, right) {\n+        (Constant(branch_value), Copy(to_switch_on) | Move(to_switch_on))\n+        | (Copy(to_switch_on) | Move(to_switch_on), Constant(branch_value)) => {\n+            let branch_value_ty = branch_value.literal.ty;\n+            // we only want to apply this optimization if we are matching on integrals (and chars), as it is not possible to switch on floats\n+            if !branch_value_ty.is_integral() && !branch_value_ty.is_char() {\n+                return None;\n+            };\n+            let branch_value_scalar = branch_value.literal.val.try_to_scalar()?;\n+            Some((branch_value_scalar, branch_value_ty, *to_switch_on))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct OptimizationInfo<'tcx> {\n+    /// Basic block to apply the optimization\n+    bb_idx: BasicBlock,\n+    /// Statement index of Eq/Ne assignment that can be removed. None if the assignment can not be removed - i.e the statement is used later on\n+    bin_op_stmt_idx: usize,\n+    /// Can remove Eq/Ne assignment\n+    can_remove_bin_op_stmt: bool,\n+    /// Place that needs to be switched on. This place is of type integral\n+    to_switch_on: Place<'tcx>,\n+    /// Constant to use in switch target value\n+    branch_value_scalar: Scalar,\n+    /// Type of the constant value\n+    branch_value_ty: Ty<'tcx>,\n+    /// Either Eq or Ne\n+    op: BinOp,\n+    /// Current values used in the switch target. This needs to be replaced with the branch_value\n+    values: Vec<u128>,\n+    /// Current targets used in the switch\n+    targets: Vec<BasicBlock>,\n+}"}, {"sha": "b34389a0ab5271b5347a9c045808964499256289", "filename": "src/test/mir-opt/if-condition-int.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif-condition-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif-condition-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif-condition-int.rs?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,65 @@\n+// compile-flags: -O\n+// EMIT_MIR if_condition_int.opt_u32.SimplifyComparisonIntegral.diff\n+// EMIT_MIR if_condition_int.opt_negative.SimplifyComparisonIntegral.diff\n+// EMIT_MIR if_condition_int.opt_char.SimplifyComparisonIntegral.diff\n+// EMIT_MIR if_condition_int.opt_i8.SimplifyComparisonIntegral.diff\n+// EMIT_MIR if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff\n+// EMIT_MIR if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff\n+// EMIT_MIR if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff\n+// EMIT_MIR if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff\n+\n+fn opt_u32(x: u32) -> u32 {\n+    if x == 42 { 0 } else { 1 }\n+}\n+\n+// don't opt: it is already optimal to switch on the bool\n+fn dont_opt_bool(x: bool) -> u32 {\n+    if x { 0 } else { 1 }\n+}\n+\n+fn opt_char(x: char) -> u32 {\n+    if x == 'x' { 0 } else { 1 }\n+}\n+\n+fn opt_i8(x: i8) -> u32 {\n+    if x == 42 { 0 } else { 1 }\n+}\n+\n+fn opt_negative(x: i32) -> u32 {\n+    if x == -42 { 0 } else { 1 }\n+}\n+\n+fn opt_multiple_ifs(x: u32) -> u32 {\n+    if x == 42 {\n+        0\n+    } else if x != 21 {\n+        1\n+    } else {\n+        2\n+    }\n+}\n+\n+// test that we optimize, but do not remove the b statement, as that is used later on\n+fn dont_remove_comparison(a: i8) -> i32 {\n+    let b = a == 17;\n+    match b {\n+        false => 10 + b as i32,\n+        true => 100 + b as i32,\n+    }\n+}\n+\n+// test that we do not optimize on floats\n+fn dont_opt_floats(a: f32) -> i32 {\n+    if a == -42.0 { 0 } else { 1 }\n+}\n+\n+fn main() {\n+    opt_u32(0);\n+    opt_char('0');\n+    opt_i8(22);\n+    dont_opt_bool(false);\n+    opt_negative(0);\n+    opt_multiple_ifs(0);\n+    dont_remove_comparison(11);\n+    dont_opt_floats(1.0);\n+}"}, {"sha": "993ff660caaac8501f792bed19104af22fd836ad", "filename": "src/test/mir-opt/if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `dont_opt_bool` before SimplifyComparisonIntegral\n++ // MIR for `dont_opt_bool` after SimplifyComparisonIntegral\n+  \n+  fn dont_opt_bool(_1: bool) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:16:18: 16:19\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:16:30: 16:33\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n+          _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n+          switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n+      }\n+  \n+      bb1: {\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:17:23: 17:24\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:17:12: 17:13\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:18:1: 18:2\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:18:2: 18:2\n+      }\n+  }\n+  "}, {"sha": "8ae9168c950988ff85f150dee265a9d24a9bc79b", "filename": "src/test/mir-opt/if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `dont_opt_floats` before SimplifyComparisonIntegral\n++ // MIR for `dont_opt_floats` after SimplifyComparisonIntegral\n+  \n+  fn dont_opt_floats(_1: f32) -> i32 {\n+      debug a => _1;                       // in scope 0 at $DIR/if-condition-int.rs:52:20: 52:21\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/if-condition-int.rs:52:31: 52:34\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n+      let mut _3: f32;                     // in scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n+          _2 = Eq(move _3, const -42f32);  // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/if-condition-int.rs:53:13: 53:18\n+                                           // + literal: Const { ty: f32, val: Value(Scalar(0xc2280000)) }\n+          StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:53:17: 53:18\n+          switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n+      }\n+  \n+      bb1: {\n+          _0 = const 1_i32;                // scope 0 at $DIR/if-condition-int.rs:53:32: 53:33\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_i32;                // scope 0 at $DIR/if-condition-int.rs:53:21: 53:22\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:54:1: 54:2\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:54:2: 54:2\n+      }\n+  }\n+  "}, {"sha": "b590be5370f1d41050f9fa2d0e0689832aaf094d", "filename": "src/test/mir-opt/if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,58 @@\n+- // MIR for `dont_remove_comparison` before SimplifyComparisonIntegral\n++ // MIR for `dont_remove_comparison` after SimplifyComparisonIntegral\n+  \n+  fn dont_remove_comparison(_1: i8) -> i32 {\n+      debug a => _1;                       // in scope 0 at $DIR/if-condition-int.rs:43:27: 43:28\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/if-condition-int.rs:43:37: 43:40\n+      let _2: bool;                        // in scope 0 at $DIR/if-condition-int.rs:44:9: 44:10\n+      let mut _3: i8;                      // in scope 0 at $DIR/if-condition-int.rs:44:13: 44:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/if-condition-int.rs:46:23: 46:31\n+      let mut _5: bool;                    // in scope 0 at $DIR/if-condition-int.rs:46:23: 46:24\n+      let mut _6: i32;                     // in scope 0 at $DIR/if-condition-int.rs:47:23: 47:31\n+      let mut _7: bool;                    // in scope 0 at $DIR/if-condition-int.rs:47:23: 47:24\n+      scope 1 {\n+          debug b => _2;                   // in scope 1 at $DIR/if-condition-int.rs:44:9: 44:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:44:9: 44:10\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:44:13: 44:14\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:44:13: 44:14\n+-         _2 = Eq(move _3, const 17_i8);   // scope 0 at $DIR/if-condition-int.rs:44:13: 44:20\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:44:19: 44:20\n+-         switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:46:9: 46:14\n++         _2 = Eq(_3, const 17_i8);        // scope 0 at $DIR/if-condition-int.rs:44:13: 44:20\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:44:19: 44:20\n++         switchInt(move _3) -> [17_i8: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:46:9: 46:14\n+      }\n+  \n+      bb1: {\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:46:9: 46:14\n+          StorageLive(_6);                 // scope 1 at $DIR/if-condition-int.rs:47:23: 47:31\n+          StorageLive(_7);                 // scope 1 at $DIR/if-condition-int.rs:47:23: 47:24\n+          _7 = _2;                         // scope 1 at $DIR/if-condition-int.rs:47:23: 47:24\n+          _6 = move _7 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:47:23: 47:31\n+          StorageDead(_7);                 // scope 1 at $DIR/if-condition-int.rs:47:30: 47:31\n+          _0 = Add(const 100_i32, move _6); // scope 1 at $DIR/if-condition-int.rs:47:17: 47:31\n+          StorageDead(_6);                 // scope 1 at $DIR/if-condition-int.rs:47:30: 47:31\n+          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:45:5: 48:6\n+      }\n+  \n+      bb2: {\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:46:9: 46:14\n+          StorageLive(_4);                 // scope 1 at $DIR/if-condition-int.rs:46:23: 46:31\n+          StorageLive(_5);                 // scope 1 at $DIR/if-condition-int.rs:46:23: 46:24\n+          _5 = _2;                         // scope 1 at $DIR/if-condition-int.rs:46:23: 46:24\n+          _4 = move _5 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:46:23: 46:31\n+          StorageDead(_5);                 // scope 1 at $DIR/if-condition-int.rs:46:30: 46:31\n+          _0 = Add(const 10_i32, move _4); // scope 1 at $DIR/if-condition-int.rs:46:18: 46:31\n+          StorageDead(_4);                 // scope 1 at $DIR/if-condition-int.rs:46:30: 46:31\n+          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:45:5: 48:6\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:49:1: 49:2\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:49:2: 49:2\n+      }\n+  }\n+  "}, {"sha": "ae0960028a8b4ef1c81d71dea63df3e501a1b16c", "filename": "src/test/mir-opt/if_condition_int.opt_char.SimplifyComparisonIntegral.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `opt_char` before SimplifyComparisonIntegral\n++ // MIR for `opt_char` after SimplifyComparisonIntegral\n+  \n+  fn opt_char(_1: char) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:20:13: 20:14\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:20:25: 20:28\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n+      let mut _3: char;                    // in scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n+-         _2 = Eq(move _3, const 'x');     // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n+-         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n++         _2 = Eq(_3, const 'x');          // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n++         switchInt(move _3) -> ['x': bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n+      }\n+  \n+      bb1: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:21:30: 21:31\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n+      }\n+  \n+      bb2: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:21:19: 21:20\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:22:1: 22:2\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:22:2: 22:2\n+      }\n+  }\n+  "}, {"sha": "8d59e51ac2b1163abd841de35e1391b77ebd1951", "filename": "src/test/mir-opt/if_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `opt_i8` before SimplifyComparisonIntegral\n++ // MIR for `opt_i8` after SimplifyComparisonIntegral\n+  \n+  fn opt_i8(_1: i8) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:24:11: 24:12\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:24:21: 24:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n+      let mut _3: i8;                      // in scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n+-         _2 = Eq(move _3, const 42_i8);   // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n+-         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n++         _2 = Eq(_3, const 42_i8);        // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n++         switchInt(move _3) -> [42_i8: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n+      }\n+  \n+      bb1: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:25:29: 25:30\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n+      }\n+  \n+      bb2: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:25:18: 25:19\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:26:2: 26:2\n+      }\n+  }\n+  "}, {"sha": "c4975661efe5097bab071dffbe518f93b765be6e", "filename": "src/test/mir-opt/if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,65 @@\n+- // MIR for `opt_multiple_ifs` before SimplifyComparisonIntegral\n++ // MIR for `opt_multiple_ifs` after SimplifyComparisonIntegral\n+  \n+  fn opt_multiple_ifs(_1: u32) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:32:21: 32:22\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:32:32: 32:35\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n+      let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n+      let mut _4: bool;                    // in scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n+      let mut _5: u32;                     // in scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n+-         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n+-         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n++         _2 = Eq(_3, const 42_u32);       // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n++         switchInt(move _3) -> [42_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n+      }\n+  \n+      bb1: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n+          StorageLive(_4);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n+          StorageLive(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n+          _5 = _1;                         // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n+-         _4 = Ne(move _5, const 21_u32);  // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n+-         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n+-         switchInt(_4) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n++         _4 = Ne(_5, const 21_u32);       // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n++         switchInt(move _5) -> [21_u32: bb3, otherwise: bb4]; // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n+      }\n+  \n+      bb2: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:34:9: 34:10\n+          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n+      }\n+  \n+      bb3: {\n++         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n+          _0 = const 2_u32;                // scope 0 at $DIR/if-condition-int.rs:38:9: 38:10\n+          goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n+      }\n+  \n+      bb4: {\n++         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:36:9: 36:10\n+          goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n+      }\n+  \n+      bb5: {\n+          StorageDead(_4);                 // scope 0 at $DIR/if-condition-int.rs:39:5: 39:6\n+          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n+      }\n+  \n+      bb6: {\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:40:1: 40:2\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:40:2: 40:2\n+      }\n+  }\n+  "}, {"sha": "d7f544e44c0fecf24c1ca428695bcb27a868d262", "filename": "src/test/mir-opt/if_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `opt_negative` before SimplifyComparisonIntegral\n++ // MIR for `opt_negative` after SimplifyComparisonIntegral\n+  \n+  fn opt_negative(_1: i32) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:28:17: 28:18\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:28:28: 28:31\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n+      let mut _3: i32;                     // in scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n+-         _2 = Eq(move _3, const -42_i32); // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n+-         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n++         _2 = Eq(_3, const -42_i32);      // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n++         switchInt(move _3) -> [-42_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n+      }\n+  \n+      bb1: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:29:30: 29:31\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n+      }\n+  \n+      bb2: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:29:19: 29:20\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:30:1: 30:2\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:30:2: 30:2\n+      }\n+  }\n+  "}, {"sha": "51e00e680c28672ab1fe4922c2daf2947c36d05f", "filename": "src/test/mir-opt/if_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/23dda1b9c64ab1f5a58bc19535792aee05254167/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff?ref=23dda1b9c64ab1f5a58bc19535792aee05254167", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `opt_u32` before SimplifyComparisonIntegral\n++ // MIR for `opt_u32` after SimplifyComparisonIntegral\n+  \n+  fn opt_u32(_1: u32) -> u32 {\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:11:12: 11:13\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:11:23: 11:26\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n+      let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n+-         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n+-         switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n++         _2 = Eq(_3, const 42_u32);       // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n++         switchInt(move _3) -> [42_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n+      }\n+  \n+      bb1: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:12:29: 12:30\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n+      }\n+  \n+      bb2: {\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:12:18: 12:19\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:13:1: 13:2\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:13:2: 13:2\n+      }\n+  }\n+  "}]}