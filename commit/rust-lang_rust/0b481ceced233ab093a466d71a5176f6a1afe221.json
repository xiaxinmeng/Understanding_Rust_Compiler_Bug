{"sha": "0b481ceced233ab093a466d71a5176f6a1afe221", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNDgxY2VjZWQyMzNhYjA5M2E0NjZkNzFhNTE3NmY2YTFhZmUyMjE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-05T19:21:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-05T19:21:56Z"}, "message": "Merge pull request #2113 from topecongiro/issue-2110\n\nUse correct span for tuple struct's body", "tree": {"sha": "7b73e0aa6a46c5d1062ee204ae6208148667b720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b73e0aa6a46c5d1062ee204ae6208148667b720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b481ceced233ab093a466d71a5176f6a1afe221", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJZ/2TUCRBK7hj4Ov3rIwAAdHIIAEjXUEYDVDqtMWTwS7ZJ5yxt\nUTcvH4DsmJdR5U/6DCANGVuhcaidoYT4SkSq6/Qz+vDLQ/yosYbnoF+LHHj8HHu9\nS1WHYRGXSXNJ1mtwWdtkp5vmruyEpTf6sIIV8g/pnMTa6Y+Ni3J5DgRJzjJWuhHG\nm7MbTzhHqcU8Wd+tQ/h44MKnCT/zFeHjDudYgMRCgAZePdqExbaaHqRr0jw01fZ1\nHneLOXVz7SSVivD6hUqihk09Y18sx2ksoJoagj6V5sH0ah0pK00MZgnSyOhU0BE+\nEt8+pYFLpntA0OGwTCFPqE7ONKaapRdBqLDiHKXQK5nRRrtC0DiVVsfoTjA6RBQ=\n=hTnO\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b73e0aa6a46c5d1062ee204ae6208148667b720\nparent 51b03c3aaf5e69afbb7508e566c5da2bf0bc3662\nparent 16302d3578f4faa68051c90b153b581169bc240c\nauthor Nick Cameron <nrc@ncameron.org> 1509909716 +1300\ncommitter GitHub <noreply@github.com> 1509909716 +1300\n\nMerge pull request #2113 from topecongiro/issue-2110\n\nUse correct span for tuple struct's body "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b481ceced233ab093a466d71a5176f6a1afe221", "html_url": "https://github.com/rust-lang/rust/commit/0b481ceced233ab093a466d71a5176f6a1afe221", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b481ceced233ab093a466d71a5176f6a1afe221/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51b03c3aaf5e69afbb7508e566c5da2bf0bc3662", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b03c3aaf5e69afbb7508e566c5da2bf0bc3662", "html_url": "https://github.com/rust-lang/rust/commit/51b03c3aaf5e69afbb7508e566c5da2bf0bc3662"}, {"sha": "16302d3578f4faa68051c90b153b581169bc240c", "url": "https://api.github.com/repos/rust-lang/rust/commits/16302d3578f4faa68051c90b153b581169bc240c", "html_url": "https://github.com/rust-lang/rust/commit/16302d3578f4faa68051c90b153b581169bc240c"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "8dfc4ec7883c97f5f8af3d956db88107f6517bb6", "filename": "src/items.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0b481ceced233ab093a466d71a5176f6a1afe221/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b481ceced233ab093a466d71a5176f6a1afe221/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0b481ceced233ab093a466d71a5176f6a1afe221", "patch": "@@ -1155,6 +1155,25 @@ pub fn format_struct_struct(\n     }\n }\n \n+/// Returns a bytepos that is after that of `(` in `pub(..)`. If the given visibility does not\n+/// contain `pub(..)`, then return the `lo` of the `defualt_span`. Yeah, but for what? Well, we need\n+/// to bypass the `(` in the visibility when creating a span of tuple's body or fn's args.\n+fn get_bytepos_after_visibility(\n+    context: &RewriteContext,\n+    vis: &ast::Visibility,\n+    default_span: Span,\n+    terminator: &str,\n+) -> BytePos {\n+    match *vis {\n+        ast::Visibility::Crate(s, CrateSugar::PubCrate) => context\n+            .codemap\n+            .span_after(mk_sp(s.hi(), default_span.hi()), terminator),\n+        ast::Visibility::Crate(s, CrateSugar::JustCrate) => s.hi(),\n+        ast::Visibility::Restricted { ref path, .. } => path.span.hi(),\n+        _ => default_span.lo(),\n+    }\n+}\n+\n fn format_tuple_struct(\n     context: &RewriteContext,\n     item_name: &str,\n@@ -1171,12 +1190,13 @@ fn format_tuple_struct(\n     result.push_str(&header_str);\n \n     let body_lo = if fields.is_empty() {\n-        context.codemap.span_after(span, \"(\")\n+        let lo = get_bytepos_after_visibility(context, vis, span, \")\");\n+        context.codemap.span_after(mk_sp(lo, span.hi()), \"(\")\n     } else {\n         fields[0].span.lo()\n     };\n     let body_hi = if fields.is_empty() {\n-        context.codemap.span_after(span, \")\")\n+        context.codemap.span_after(mk_sp(body_lo, span.hi()), \")\")\n     } else {\n         // This is a dirty hack to work around a missing `)` from the span of the last field.\n         let last_arg_span = fields[fields.len() - 1].span;\n@@ -1224,7 +1244,10 @@ fn format_tuple_struct(\n                 .to_string(context.config))\n         }\n         result.push('(');\n-        let snippet = context.snippet(mk_sp(body_lo, context.codemap.span_before(span, \")\")));\n+        let snippet = context.snippet(mk_sp(\n+            body_lo,\n+            context.codemap.span_before(mk_sp(body_lo, span.hi()), \")\"),\n+        ));\n         if snippet.is_empty() {\n             // `struct S ()`\n         } else if snippet.trim_right_matches(&[' ', '\\t'][..]).ends_with('\\n') {\n@@ -1766,13 +1789,7 @@ fn rewrite_fn_base(\n     }\n \n     // Skip `pub(crate)`.\n-    let lo_after_visibility = match fn_sig.visibility {\n-        ast::Visibility::Crate(s, CrateSugar::PubCrate) => {\n-            context.codemap.span_after(mk_sp(s.hi(), span.hi()), \")\")\n-        }\n-        ast::Visibility::Crate(s, CrateSugar::JustCrate) => s.hi(),\n-        _ => span.lo(),\n-    };\n+    let lo_after_visibility = get_bytepos_after_visibility(context, &fn_sig.visibility, span, \")\");\n     // A conservative estimation, to goal is to be over all parens in generics\n     let args_start = fn_sig\n         .generics"}, {"sha": "acae17befdd40e21566354379a6888df908dddc6", "filename": "tests/source/structs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b481ceced233ab093a466d71a5176f6a1afe221/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b481ceced233ab093a466d71a5176f6a1afe221/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=0b481ceced233ab093a466d71a5176f6a1afe221", "patch": "@@ -258,3 +258,11 @@ struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n struct Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong { x: i32 }\n+\n+// structs with visibility, do not duplicate visibility (#2110).\n+pub(in self) struct Foo{}\n+pub(super) struct Foo{}\n+pub(crate) struct Foo{}\n+pub(in self) struct Foo();\n+pub(super) struct Foo();\n+pub(crate) struct Foo();"}, {"sha": "e29647c71fbbf72827c42951d37c14ff12d086ed", "filename": "tests/target/structs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b481ceced233ab093a466d71a5176f6a1afe221/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b481ceced233ab093a466d71a5176f6a1afe221/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=0b481ceced233ab093a466d71a5176f6a1afe221", "patch": "@@ -300,3 +300,11 @@ struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n {\n     x: i32,\n }\n+\n+// structs with visibility, do not duplicate visibility (#2110).\n+pub(self) struct Foo {}\n+pub(super) struct Foo {}\n+pub(crate) struct Foo {}\n+pub(self) struct Foo();\n+pub(super) struct Foo();\n+pub(crate) struct Foo();"}]}