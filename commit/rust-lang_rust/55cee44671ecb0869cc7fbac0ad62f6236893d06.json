{"sha": "55cee44671ecb0869cc7fbac0ad62f6236893d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1Y2VlNDQ2NzFlY2IwODY5Y2M3ZmJhYzBhZDYyZjYyMzY4OTNkMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-12T16:30:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-12T16:30:05Z"}, "message": "Auto merge of #61612 - nnethercote:improve-parse_bottom_expr, r=petrochenkov\n\nSpecial-case literals in `parse_bottom_expr`.\n\nThis makes parsing faster, particularly for code with large constants,\nfor two reasons:\n- it skips all the keyword comparisons for literals;\n- it skips the allocation done by the `mk_expr` call in\n  `parse_literal_maybe_minus`.\n\nr? @petrochenkov", "tree": {"sha": "f8a3b98b4307ad8b6941b1120277ec10e796e625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a3b98b4307ad8b6941b1120277ec10e796e625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55cee44671ecb0869cc7fbac0ad62f6236893d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55cee44671ecb0869cc7fbac0ad62f6236893d06", "html_url": "https://github.com/rust-lang/rust/commit/55cee44671ecb0869cc7fbac0ad62f6236893d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55cee44671ecb0869cc7fbac0ad62f6236893d06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ddd1615419be89828fb5628e3c14af86c08b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ddd1615419be89828fb5628e3c14af86c08b01", "html_url": "https://github.com/rust-lang/rust/commit/24ddd1615419be89828fb5628e3c14af86c08b01"}, {"sha": "35b5f4377028e34dc4df1ce67c225d2926c6c7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b5f4377028e34dc4df1ce67c225d2926c6c7a7", "html_url": "https://github.com/rust-lang/rust/commit/35b5f4377028e34dc4df1ce67c225d2926c6c7a7"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "78eeb51220662f1ff2d677cfd03d6b6727ab2013", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/55cee44671ecb0869cc7fbac0ad62f6236893d06/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55cee44671ecb0869cc7fbac0ad62f6236893d06/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=55cee44671ecb0869cc7fbac0ad62f6236893d06", "patch": "@@ -1994,8 +1994,29 @@ impl<'a> Parser<'a> {\n \n         let ex: ExprKind;\n \n+        macro_rules! parse_lit {\n+            () => {\n+                match self.parse_lit() {\n+                    Ok(literal) => {\n+                        hi = self.prev_span;\n+                        ex = ExprKind::Lit(literal);\n+                    }\n+                    Err(mut err) => {\n+                        self.cancel(&mut err);\n+                        return Err(self.expected_expression_found());\n+                    }\n+                }\n+            }\n+        }\n+\n         // Note: when adding new syntax here, don't forget to adjust TokenKind::can_begin_expr().\n         match self.token.kind {\n+            // This match arm is a special-case of the `_` match arm below and\n+            // could be removed without changing functionality, but it's faster\n+            // to have it here, especially for programs with large constants.\n+            token::Literal(_) => {\n+                parse_lit!()\n+            }\n             token::OpenDelim(token::Paren) => {\n                 self.bump();\n \n@@ -2241,16 +2262,7 @@ impl<'a> Parser<'a> {\n                         self.bump();\n                         return Ok(self.mk_expr(self.token.span, ExprKind::Err, ThinVec::new()));\n                     }\n-                    match self.parse_literal_maybe_minus() {\n-                        Ok(expr) => {\n-                            hi = expr.span;\n-                            ex = expr.node.clone();\n-                        }\n-                        Err(mut err) => {\n-                            self.cancel(&mut err);\n-                            return Err(self.expected_expression_found());\n-                        }\n-                    }\n+                    parse_lit!()\n                 }\n             }\n         }"}]}