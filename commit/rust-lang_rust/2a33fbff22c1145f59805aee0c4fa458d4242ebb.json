{"sha": "2a33fbff22c1145f59805aee0c4fa458d4242ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzNmYmZmMjJjMTE0NWY1OTgwNWFlZTBjNGZhNDU4ZDQyNDJlYmI=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-30T07:48:36Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-30T07:48:36Z"}, "message": "addding an interp_error module", "tree": {"sha": "72dd0a1c725eacaefa77ee2d3af01d7e2afa1331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72dd0a1c725eacaefa77ee2d3af01d7e2afa1331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a33fbff22c1145f59805aee0c4fa458d4242ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a33fbff22c1145f59805aee0c4fa458d4242ebb", "html_url": "https://github.com/rust-lang/rust/commit/2a33fbff22c1145f59805aee0c4fa458d4242ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a33fbff22c1145f59805aee0c4fa458d4242ebb/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96205212e5294fe5a6f4cfd901d39c5446fa8e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/96205212e5294fe5a6f4cfd901d39c5446fa8e60", "html_url": "https://github.com/rust-lang/rust/commit/96205212e5294fe5a6f4cfd901d39c5446fa8e60"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "c5a7adf1b6710999240b05af39d140840c71d094", "filename": "src/librustc/mir/interpret/interp_error.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc%2Fmir%2Finterpret%2Finterp_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc%2Fmir%2Finterpret%2Finterp_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Finterp_error.rs?ref=2a33fbff22c1145f59805aee0c4fa458d4242ebb", "patch": "@@ -0,0 +1,20 @@\n+//! macros to do something like `.ok_or_else(|| inval!(TooGeneric).into())` rather than\n+//! `.ok_or_else(|| InterpError::InvalidProgram(TooGeneric).into())`\n+\n+#[macro_export]\n+macro_rules! inval {\n+    ($($tt:tt)*) => {\n+        $crate::mir::interpret::InterpError::InvalidProgram(\n+            $crate::mir::interpret::InvalidProgramInfo::$($tt)*\n+        )\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! unsup {\n+    ($($tt:tt)*) => {\n+        $crate::mir::interpret::InterpError::Unsupported(\n+            $crate::mir::interpret::UnsupportedOpInfo::$($tt)*\n+        )\n+    };\n+}"}, {"sha": "064ff831e4ee80b0ff1c6dc5b9a7b8aee9ab5667", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=2a33fbff22c1145f59805aee0c4fa458d4242ebb", "patch": "@@ -49,6 +49,7 @@ mod error;\n mod value;\n mod allocation;\n mod pointer;\n+mod interp_error;\n \n pub use self::error::{\n     InterpErrorInfo, InterpResult, InterpError, AssertMessage, ConstEvalErr, struct_error,"}, {"sha": "4cb8351947b3c3a9cae03f71930c746aadb7bf87", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=2a33fbff22c1145f59805aee0c4fa458d4242ebb", "patch": "@@ -7,7 +7,7 @@ use syntax::symbol::sym;\n use rustc_apfloat::ieee::{Single, Double};\n use rustc_apfloat::{Float, FloatConvert};\n use rustc::mir::interpret::{\n-    Scalar, InterpResult, Pointer, PointerArithmetic, InterpError,\n+    Scalar, InterpResult, Pointer, PointerArithmetic,\n };\n use rustc::mir::CastKind;\n \n@@ -74,7 +74,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Pointer(PointerCast::ReifyFnPointer) => {\n-                use rustc::mir::interpret::InvalidProgramInfo::TooGeneric;\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::FnDef(def_id, substs) => {\n@@ -86,7 +85,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             self.param_env,\n                             def_id,\n                             substs,\n-                        ).ok_or_else(|| InterpError::InvalidProgram(TooGeneric).into());\n+                        ).ok_or_else(|| inval!(TooGeneric).into());\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance?));\n                         self.write_scalar(Scalar::Ptr(fn_ptr.into()), dest)?;\n                     }"}, {"sha": "c0e61184780bab70d97704240461470b31260eb7", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=2a33fbff22c1145f59805aee0c4fa458d4242ebb", "patch": "@@ -326,7 +326,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.param_env,\n             def_id,\n             substs,\n-        ).ok_or_else(|| InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric).into())\n+        ).ok_or_else(|| inval!(TooGeneric).into())\n     }\n \n     pub fn load_mir("}, {"sha": "cdc89e7055cd2caf1f39f8b94f7ed684b8373db6", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=2a33fbff22c1145f59805aee0c4fa458d4242ebb", "patch": "@@ -637,7 +637,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         .find(|(_, var)| var.val == real_discr),\n                     _ => bug!(\"tagged layout for non-adt non-generator\"),\n                 }.ok_or_else(\n-                    || InterpError::Unsupported(InvalidDiscriminant(raw_discr.erase_tag()))\n+                    || unsup!(InvalidDiscriminant(raw_discr.erase_tag()))\n                 )?;\n                 (real_discr, index.0)\n             },"}, {"sha": "51ed156f6cfcfb111f4bd70fa9ae5687ffe347cc", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=2a33fbff22c1145f59805aee0c4fa458d4242ebb", "patch": "@@ -7,9 +7,8 @@ use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n-    InterpResult, PointerArithmetic, InterpError, Scalar,\n+    InterpResult, PointerArithmetic, Scalar,\n     InterpCx, Machine, Immediate, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n-    UnsupportedOpInfo,\n };\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n@@ -221,7 +220,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             return Ok(());\n         }\n         let caller_arg = caller_arg.next()\n-            .ok_or_else(|| InterpError::Unsupported(UnsupportedOpInfo::FunctionArgCountMismatch))?;\n+            .ok_or_else(|| unsup!(FunctionArgCountMismatch)) ?;\n         if rust_abi {\n             debug_assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n         }"}, {"sha": "71f2cfceaf225a7aa4a517786e44e327e6a4acf2", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a33fbff22c1145f59805aee0c4fa458d4242ebb/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=2a33fbff22c1145f59805aee0c4fa458d4242ebb", "patch": "@@ -1,8 +1,8 @@\n use rustc::ty::{self, Ty, Instance};\n use rustc::ty::layout::{Size, Align, LayoutOf};\n-use rustc::mir::interpret::{Scalar, Pointer, InterpResult, PointerArithmetic, InvalidProgramInfo};\n+use rustc::mir::interpret::{Scalar, Pointer, InterpResult, PointerArithmetic,};\n \n-use super::{InterpCx, InterpError, Machine, MemoryKind, FnVal};\n+use super::{InterpCx, Machine, MemoryKind, FnVal};\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Creates a dynamic vtable for the given type and vtable origin. This is used only for\n@@ -83,7 +83,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     self.param_env,\n                     def_id,\n                     substs,\n-                ).ok_or_else(|| InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric))?;\n+                ).ok_or_else(|| inval!(TooGeneric))?;\n                 let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n                 let method_ptr = vtable.offset(ptr_size * (3 + i as u64), self)?;\n                 self.memory"}]}