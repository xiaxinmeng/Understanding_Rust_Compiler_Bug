{"sha": "aa894ace1fc4600dbc94bccb05532154ee2288d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhODk0YWNlMWZjNDYwMGRiYzk0YmNjYjA1NTMyMTU0ZWUyMjg4ZDg=", "commit": {"author": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-10T15:17:11Z"}, "committer": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-10T15:17:11Z"}, "message": "refactor(args): Apply comments", "tree": {"sha": "f40d8456b8af4a7315da5fb8f07aaeaca7c371a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f40d8456b8af4a7315da5fb8f07aaeaca7c371a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa894ace1fc4600dbc94bccb05532154ee2288d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa894ace1fc4600dbc94bccb05532154ee2288d8", "html_url": "https://github.com/rust-lang/rust/commit/aa894ace1fc4600dbc94bccb05532154ee2288d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa894ace1fc4600dbc94bccb05532154ee2288d8/comments", "author": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e94c467131a7685b0a0a52b372aa0dd76abba36", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e94c467131a7685b0a0a52b372aa0dd76abba36", "html_url": "https://github.com/rust-lang/rust/commit/4e94c467131a7685b0a0a52b372aa0dd76abba36"}], "stats": {"total": 277, "additions": 116, "deletions": 161}, "files": [{"sha": "5171578f0011e1736f28074e14aa5a56a9fe234b", "filename": "crates/ra_cli/src/help.rs", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/aa894ace1fc4600dbc94bccb05532154ee2288d8/crates%2Fra_cli%2Fsrc%2Fhelp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa894ace1fc4600dbc94bccb05532154ee2288d8/crates%2Fra_cli%2Fsrc%2Fhelp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fhelp.rs?ref=aa894ace1fc4600dbc94bccb05532154ee2288d8", "patch": "@@ -1,6 +1,4 @@\n-pub fn print_global_help() {\r\n-    println!(\r\n-        \"ra-cli\r\n+pub const GLOBAL_HELP: &str = \"ra-cli\r\n \r\n USAGE:\r\n     ra_cli <SUBCOMMAND>\r\n@@ -13,13 +11,9 @@ SUBCOMMANDS:\n     analysis-stats\r\n     highlight\r\n     parse\r\n-    symbols\"\r\n-    )\r\n-}\r\n+    symbols\";\r\n \r\n-pub fn print_analysis_bench_help() {\r\n-    println!(\r\n-        \"ra_cli-analysis-bench\r\n+pub const ANALYSIS_BENCH_HELP: &str = \"ra_cli-analysis-bench\r\n \r\n USAGE:\r\n     ra_cli analysis-bench [FLAGS] [OPTIONS] [PATH]\r\n@@ -33,13 +27,9 @@ OPTIONS:\n     --highlight <PATH>               Hightlight this file\r\n     \r\n ARGS:\r\n-    <PATH>    Project to analyse\"\r\n-    )\r\n-}\r\n+    <PATH>    Project to analyse\";\r\n \r\n-pub fn print_analysis_stats_help() {\r\n-    println!(\r\n-        \"ra-cli-analysis-stats\r\n+pub const ANALYSIS_STATS_HELP: &str = \"ra-cli-analysis-stats\r\n \r\n USAGE:\r\n     ra_cli analysis-stats [FLAGS] [OPTIONS] [PATH]\r\n@@ -53,44 +43,30 @@ OPTIONS:\n     -o <ONLY>\r\n     \r\n ARGS:\r\n-    <PATH>\"\r\n-    )\r\n-}\r\n+    <PATH>\";\r\n \r\n-pub fn print_highlight_help() {\r\n-    println!(\r\n-        \"ra-cli-highlight\r\n+pub const HIGHLIGHT_HELP: &str = \"ra-cli-highlight\r\n     \r\n USAGE:\r\n     ra_cli highlight [FLAGS]\r\n     \r\n FLAGS:\r\n     -h, --help       Prints help information\r\n-    -r, --rainbow\"\r\n-    )\r\n-}\r\n+    -r, --rainbow\";\r\n \r\n-pub fn print_symbols_help() {\r\n-    println!(\r\n-        \"ra-cli-symbols\r\n+pub const SYMBOLS_HELP: &str = \"ra-cli-symbols\r\n     \r\n USAGE:\r\n     ra_cli highlight [FLAGS]\r\n     \r\n FLAGS:\r\n-    -h, --help    Prints help inforamtion\"\r\n-    )\r\n-}\r\n+    -h, --help    Prints help inforamtion\";\r\n \r\n-pub fn print_parse_help() {\r\n-    println!(\r\n-        \"ra-cli-parse\r\n+pub const PARSE_HELP: &str = \"ra-cli-parse\r\n     \r\n USAGE:\r\n     ra_cli parse [FLAGS]\r\n     \r\n FLAGS:\r\n     -h, --help       Prints help inforamtion\r\n-        --no-dump\"\r\n-    )\r\n-}\r\n+        --no-dump\";\r"}, {"sha": "e6334cf569b7dc579c031e10894fcc5459abccaf", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 67, "deletions": 71, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/aa894ace1fc4600dbc94bccb05532154ee2288d8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa894ace1fc4600dbc94bccb05532154ee2288d8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=aa894ace1fc4600dbc94bccb05532154ee2288d8", "patch": "@@ -15,105 +15,101 @@ type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n fn main() -> Result<()> {\n     Logger::with_env().start()?;\n \n-    let subcommand = std::env::args_os().nth(1);\n-    if subcommand.is_none() {\n-        help::print_global_help();\n-        return Ok(());\n-    }\n-    let subcommand = subcommand.unwrap();\n+    let subcommand = match std::env::args_os().nth(1) {\n+        None => {\n+            eprintln!(\"{}\", help::GLOBAL_HELP);\n+            return Ok(());\n+        }\n+        Some(s) => s,\n+    };\n     let mut matches = Arguments::from_vec(std::env::args_os().skip(2).collect());\n \n     match &*subcommand.to_string_lossy() {\n         \"parse\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n-                help::print_parse_help();\n+                eprintln!(\"{}\", help::PARSE_HELP);\n                 return Ok(());\n-            } else {\n-                let no_dump = matches.contains(\"--no-dump\");\n-                matches.finish().or_else(handle_extra_flags)?;\n+            }\n+            let no_dump = matches.contains(\"--no-dump\");\n+            matches.finish().or_else(handle_extra_flags)?;\n \n-                let _p = profile(\"parsing\");\n-                let file = file()?;\n-                if !no_dump {\n-                    println!(\"{:#?}\", file.syntax());\n-                }\n-                std::mem::forget(file);\n+            let _p = profile(\"parsing\");\n+            let file = file()?;\n+            if !no_dump {\n+                println!(\"{:#?}\", file.syntax());\n             }\n+            std::mem::forget(file);\n         }\n         \"symbols\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n-                help::print_symbols_help();\n+                eprintln!(\"{}\", help::SYMBOLS_HELP);\n                 return Ok(());\n-            } else {\n-                matches.finish().or_else(handle_extra_flags)?;\n-                let file = file()?;\n-                for s in file_structure(&file) {\n-                    println!(\"{:?}\", s);\n-                }\n+            }\n+            matches.finish().or_else(handle_extra_flags)?;\n+            let file = file()?;\n+            for s in file_structure(&file) {\n+                println!(\"{:?}\", s);\n             }\n         }\n         \"highlight\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n-                help::print_highlight_help();\n+                eprintln!(\"{}\", help::HIGHLIGHT_HELP);\n                 return Ok(());\n-            } else {\n-                let rainbow_opt = matches.contains([\"-r\", \"--rainbow\"]);\n-                matches.finish().or_else(handle_extra_flags)?;\n-                let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n-                let html = analysis.highlight_as_html(file_id, rainbow_opt).unwrap();\n-                println!(\"{}\", html);\n             }\n+            let rainbow_opt = matches.contains([\"-r\", \"--rainbow\"]);\n+            matches.finish().or_else(handle_extra_flags)?;\n+            let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n+            let html = analysis.highlight_as_html(file_id, rainbow_opt).unwrap();\n+            println!(\"{}\", html);\n         }\n         \"analysis-stats\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n-                help::print_analysis_stats_help();\n+                eprintln!(\"{}\", help::ANALYSIS_STATS_HELP);\n                 return Ok(());\n-            } else {\n-                let verbose = matches.contains([\"-v\", \"--verbose\"]);\n-                let memory_usage = matches.contains(\"--memory-usage\");\n-                let path = matches.value_from_str(\"--path\")?.unwrap_or(\"\".to_string());\n-                let only = matches.value_from_str([\"-o\", \"--only\"])?.map(|v: String| v.to_owned());\n-                matches.finish().or_else(handle_extra_flags)?;\n-                analysis_stats::run(\n-                    verbose,\n-                    memory_usage,\n-                    path.as_ref(),\n-                    only.as_ref().map(String::as_ref),\n-                )?;\n             }\n+            let verbose = matches.contains([\"-v\", \"--verbose\"]);\n+            let memory_usage = matches.contains(\"--memory-usage\");\n+            let path: String = matches.value_from_str(\"--path\")?.unwrap_or_default();\n+            let only = matches.value_from_str([\"-o\", \"--only\"])?.map(|v: String| v.to_owned());\n+            matches.finish().or_else(handle_extra_flags)?;\n+            analysis_stats::run(\n+                verbose,\n+                memory_usage,\n+                path.as_ref(),\n+                only.as_ref().map(String::as_ref),\n+            )?;\n         }\n         \"analysis-bench\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n-                help::print_analysis_bench_help();\n+                eprintln!(\"{}\", help::ANALYSIS_BENCH_HELP);\n                 return Ok(());\n-            } else {\n-                let verbose = matches.contains([\"-v\", \"--verbose\"]);\n-                let path = matches.value_from_str(\"--path\")?.unwrap_or(\"\".to_string());\n-                let highlight_path = matches.value_from_str(\"--highlight\")?;\n-                let complete_path = matches.value_from_str(\"--complete\")?;\n-                if highlight_path.is_some() && complete_path.is_some() {\n-                    panic!(\"either --highlight or --complete must be set, not both\")\n-                }\n-                let op = if let Some(path) = highlight_path {\n-                    let path: String = path;\n-                    analysis_bench::Op::Highlight { path: path.into() }\n-                } else if let Some(path_line_col) = complete_path {\n-                    let path_line_col: String = path_line_col;\n-                    let (path_line, column) = rsplit_at_char(path_line_col.as_str(), ':')?;\n-                    let (path, line) = rsplit_at_char(path_line, ':')?;\n-                    analysis_bench::Op::Complete {\n-                        path: path.into(),\n-                        line: line.parse()?,\n-                        column: column.parse()?,\n-                    }\n-                } else {\n-                    panic!(\"either --highlight or --complete must be set\")\n-                };\n-                matches.finish().or_else(handle_extra_flags)?;\n-                analysis_bench::run(verbose, path.as_ref(), op)?;\n             }\n+            let verbose = matches.contains([\"-v\", \"--verbose\"]);\n+            let path: String = matches.value_from_str(\"--path\")?.unwrap_or_default();\n+            let highlight_path = matches.value_from_str(\"--highlight\")?;\n+            let complete_path = matches.value_from_str(\"--complete\")?;\n+            if highlight_path.is_some() && complete_path.is_some() {\n+                panic!(\"either --highlight or --complete must be set, not both\")\n+            }\n+            let op = if let Some(path) = highlight_path {\n+                let path: String = path;\n+                analysis_bench::Op::Highlight { path: path.into() }\n+            } else if let Some(path_line_col) = complete_path {\n+                let path_line_col: String = path_line_col;\n+                let (path_line, column) = rsplit_at_char(path_line_col.as_str(), ':')?;\n+                let (path, line) = rsplit_at_char(path_line, ':')?;\n+                analysis_bench::Op::Complete {\n+                    path: path.into(),\n+                    line: line.parse()?,\n+                    column: column.parse()?,\n+                }\n+            } else {\n+                panic!(\"either --highlight or --complete must be set\")\n+            };\n+            matches.finish().or_else(handle_extra_flags)?;\n+            analysis_bench::run(verbose, path.as_ref(), op)?;\n         }\n-        _ => help::print_global_help(),\n+        _ => eprintln!(\"{}\", help::GLOBAL_HELP),\n     }\n     Ok(())\n }\n@@ -122,7 +118,7 @@ fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n     if let pico_args::Error::UnusedArgsLeft(flags) = e {\n         let mut invalid_flags = String::new();\n         for flag in flags {\n-            write!(&mut invalid_flags, \"{}, \", flag).expect(\"Error on write\");\n+            write!(&mut invalid_flags, \"{}, \", flag)?;\n         }\n         let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n         Err(format!(\"Invalid flags: {}\", invalid_flags).into())"}, {"sha": "6dde6c2d22fb621dd404f0e7bacf4045eb4b8739", "filename": "crates/ra_tools/src/help.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aa894ace1fc4600dbc94bccb05532154ee2288d8/crates%2Fra_tools%2Fsrc%2Fhelp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa894ace1fc4600dbc94bccb05532154ee2288d8/crates%2Fra_tools%2Fsrc%2Fhelp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fhelp.rs?ref=aa894ace1fc4600dbc94bccb05532154ee2288d8", "patch": "@@ -1,6 +1,4 @@\n-pub fn print_global_help() {\r\n-    println!(\r\n-        \"tasks\r\n+pub const GLOBAL_HELP: &str = \"tasks\r\n \r\n USAGE:\r\n     ra_tools <SUBCOMMAND>\r\n@@ -15,13 +13,9 @@ SUBCOMMANDS:\n     gen-syntax\r\n     gen-tests\r\n     install-ra\r\n-    lint\"\r\n-    )\r\n-}\r\n+    lint\";\r\n \r\n-pub fn print_install_ra_help() {\r\n-    println!(\r\n-        \"ra_tools-install-ra\r\n+pub const INSTALL_RA_HELP: &str = \"ra_tools-install-ra\r\n \r\n USAGE:\r\n     ra_tools.exe install-ra [FLAGS]\r\n@@ -30,12 +24,10 @@ FLAGS:\n         --client-code\r\n     -h, --help           Prints help information\r\n         --jemalloc\r\n-        --server\"\r\n-    )\r\n-}\r\n+        --server\";\r\n \r\n pub fn print_no_param_subcommand_help(subcommand: &str) {\r\n-    println!(\r\n+    eprintln!(\r\n         \"ra_tools-{}\r\n \r\n USAGE:\r\n@@ -47,10 +39,7 @@ FLAGS:\n     );\r\n }\r\n \r\n-pub fn print_install_ra_conflict() {\r\n-    println!(\r\n-        \"error: The argument `--server` cannot be used with `--client-code`\r\n+pub const INSTALL_RA_CONFLICT: &str =\r\n+    \"error: The argument `--server` cannot be used with `--client-code`\r\n                     \r\n-For more information try --help\"\r\n-    )\r\n-}\r\n+For more information try --help\";\r"}, {"sha": "f96f1875fa7ffddbad9b93eed9f08aaa0322d92c", "filename": "crates/ra_tools/src/main.rs", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/aa894ace1fc4600dbc94bccb05532154ee2288d8/crates%2Fra_tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa894ace1fc4600dbc94bccb05532154ee2288d8/crates%2Fra_tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fmain.rs?ref=aa894ace1fc4600dbc94bccb05532154ee2288d8", "patch": "@@ -23,84 +23,78 @@ struct ServerOpt {\n }\n \n fn main() -> Result<()> {\n-    let subcommand = std::env::args_os().nth(1);\n-    if subcommand.is_none() {\n-        help::print_global_help();\n-        return Ok(());\n-    }\n-    let subcommand = subcommand.unwrap();\n+    let subcommand = match std::env::args_os().nth(1) {\n+        None => {\n+            eprintln!(\"{}\", help::GLOBAL_HELP);\n+            return Ok(());\n+        }\n+        Some(s) => s,\n+    };\n     let mut matches = Arguments::from_vec(std::env::args_os().skip(2).collect());\n     let subcommand = &*subcommand.to_string_lossy();\n     match subcommand {\n         \"install-ra\" | \"install-code\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n-                help::print_install_ra_help();\n+                eprintln!(\"{}\", help::INSTALL_RA_HELP);\n+                return Ok(());\n+            }\n+            let server = matches.contains(\"--server\");\n+            let client_code = matches.contains(\"--client-code\");\n+            if server && client_code {\n+                eprintln!(\"{}\", help::INSTALL_RA_CONFLICT);\n                 return Ok(());\n-            } else {\n-                let server = matches.contains(\"--server\");\n-                let client_code = matches.contains(\"--client-code\");\n-                if server && client_code {\n-                    help::print_install_ra_conflict();\n-                    return Ok(());\n-                }\n-                let jemalloc = matches.contains(\"--jemalloc\");\n-                matches.finish().or_else(handle_extra_flags)?;\n-                let opts = InstallOpt {\n-                    client: if server { None } else { Some(ClientOpt::VsCode) },\n-                    server: if client_code { None } else { Some(ServerOpt { jemalloc: jemalloc }) },\n-                };\n-                install(opts)?\n             }\n+            let jemalloc = matches.contains(\"--jemalloc\");\n+            matches.finish().or_else(handle_extra_flags)?;\n+            let opts = InstallOpt {\n+                client: if server { None } else { Some(ClientOpt::VsCode) },\n+                server: if client_code { None } else { Some(ServerOpt { jemalloc: jemalloc }) },\n+            };\n+            install(opts)?\n         }\n         \"gen-tests\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n                 help::print_no_param_subcommand_help(&subcommand);\n                 return Ok(());\n-            } else {\n-                gen_tests(Overwrite)?\n             }\n+            gen_tests(Overwrite)?\n         }\n         \"gen-syntax\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n                 help::print_no_param_subcommand_help(&subcommand);\n                 return Ok(());\n-            } else {\n-                generate_boilerplate(Overwrite)?\n             }\n+            generate_boilerplate(Overwrite)?\n         }\n         \"format\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n                 help::print_no_param_subcommand_help(&subcommand);\n                 return Ok(());\n-            } else {\n-                run_rustfmt(Overwrite)?\n             }\n+            run_rustfmt(Overwrite)?\n         }\n         \"format-hook\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n                 help::print_no_param_subcommand_help(&subcommand);\n                 return Ok(());\n-            } else {\n-                install_format_hook()?\n             }\n+            install_format_hook()?\n         }\n         \"lint\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n                 help::print_no_param_subcommand_help(&subcommand);\n                 return Ok(());\n-            } else {\n-                run_clippy()?\n             }\n+            run_clippy()?\n         }\n         \"fuzz-tests\" => {\n             if matches.contains([\"-h\", \"--help\"]) {\n                 help::print_no_param_subcommand_help(&subcommand);\n                 return Ok(());\n-            } else {\n-                run_fuzzer()?\n             }\n+            run_fuzzer()?\n         }\n-        _ => help::print_global_help(),\n+        _ => eprintln!(\"{}\", help::GLOBAL_HELP),\n     }\n     Ok(())\n }\n@@ -109,7 +103,7 @@ fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n     if let pico_args::Error::UnusedArgsLeft(flags) = e {\n         let mut invalid_flags = String::new();\n         for flag in flags {\n-            write!(&mut invalid_flags, \"{}, \", flag).expect(\"Error on write\");\n+            write!(&mut invalid_flags, \"{}, \", flag)?;\n         }\n         let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n         Err(format!(\"Invalid flags: {}\", invalid_flags).into())"}]}