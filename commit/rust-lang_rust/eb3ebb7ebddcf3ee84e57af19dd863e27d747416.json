{"sha": "eb3ebb7ebddcf3ee84e57af19dd863e27d747416", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViM2ViYjdlYmRkY2YzZWU4NGU1N2FmMTlkZDg2M2UyN2Q3NDc0MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T05:11:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T05:11:14Z"}, "message": "auto merge of #9525 : klutzy/rust/obsolete-span-fix, r=alexcrichton", "tree": {"sha": "b33119e35d6c9d698223d1fc768b6796e1ea5798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b33119e35d6c9d698223d1fc768b6796e1ea5798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb3ebb7ebddcf3ee84e57af19dd863e27d747416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3ebb7ebddcf3ee84e57af19dd863e27d747416", "html_url": "https://github.com/rust-lang/rust/commit/eb3ebb7ebddcf3ee84e57af19dd863e27d747416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb3ebb7ebddcf3ee84e57af19dd863e27d747416/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcd3776e829920a6b55baed15a41adbf94116264", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd3776e829920a6b55baed15a41adbf94116264", "html_url": "https://github.com/rust-lang/rust/commit/fcd3776e829920a6b55baed15a41adbf94116264"}, {"sha": "fc44a9c7dd7203315a47b307c774d22f89d864be", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc44a9c7dd7203315a47b307c774d22f89d864be", "html_url": "https://github.com/rust-lang/rust/commit/fc44a9c7dd7203315a47b307c774d22f89d864be"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "cc5143977cf2f8f9486719368ae1a5688699adbe", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb3ebb7ebddcf3ee84e57af19dd863e27d747416/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3ebb7ebddcf3ee84e57af19dd863e27d747416/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eb3ebb7ebddcf3ee84e57af19dd863e27d747416", "patch": "@@ -922,6 +922,7 @@ impl Parser {\n             let attrs = p.parse_outer_attributes();\n             let lo = p.span.lo;\n \n+            let vis_span = *self.span;\n             let vis = p.parse_visibility();\n             let pur = p.parse_fn_purity();\n             // NB: at the moment, trait methods are public by default; this\n@@ -947,7 +948,7 @@ impl Parser {\n                 // NB: at the moment, visibility annotations on required\n                 // methods are ignored; this could change.\n                 if vis != ast::inherited {\n-                    self.obsolete(*self.last_span,\n+                    self.obsolete(vis_span,\n                                   ObsoleteTraitFuncVisibility);\n                 }\n                 required(TypeMethod {\n@@ -1213,14 +1214,16 @@ impl Parser {\n     // parse an optional, obsolete argument mode.\n     pub fn parse_arg_mode(&self) {\n         if self.eat(&token::BINOP(token::MINUS)) {\n-            self.obsolete(*self.span, ObsoleteMode);\n+            self.obsolete(*self.last_span, ObsoleteMode);\n         } else if self.eat(&token::ANDAND) {\n-            self.obsolete(*self.span, ObsoleteMode);\n+            self.obsolete(*self.last_span, ObsoleteMode);\n         } else if self.eat(&token::BINOP(token::PLUS)) {\n+            let lo = self.last_span.lo;\n             if self.eat(&token::BINOP(token::PLUS)) {\n-                self.obsolete(*self.span, ObsoleteMode);\n+                let hi = self.last_span.hi;\n+                self.obsolete(mk_sp(lo, hi), ObsoleteMode);\n             } else {\n-                self.obsolete(*self.span, ObsoleteMode);\n+                self.obsolete(*self.last_span, ObsoleteMode);\n             }\n         } else {\n             // Ignore.\n@@ -3865,7 +3868,7 @@ impl Parser {\n \n         let mut meths = ~[];\n         if self.eat(&token::SEMI) {\n-            self.obsolete(*self.span, ObsoleteEmptyImpl);\n+            self.obsolete(*self.last_span, ObsoleteEmptyImpl);\n         } else {\n             self.expect(&token::LBRACE);\n             while !self.eat(&token::RBRACE) {"}]}