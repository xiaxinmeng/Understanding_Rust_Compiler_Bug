{"sha": "314ff050156cc8f5cb60a13e5d26966257245a22", "node_id": "C_kwDOAAsO6NoAKDMxNGZmMDUwMTU2Y2M4ZjVjYjYwYTEzZTVkMjY5NjYyNTcyNDVhMjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T06:53:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T06:53:31Z"}, "message": "Auto merge of #2322 - saethlin:stack-inspection-tools, r=oli-obk\n\nIdeas on getting information about borrow stacks during execution\n\nFrom time to time people ask what some borrow stack looks like in some code. I just know that I am terrible at doing Stacked Borrows by hand, so I always toss together something like this.\n\nI know that Miri has logging, but I've never found it particularly useful because there's just too much output. Also I personally don't think about exactly what the state of a borrow stack is, but this seems to be something that newcomers to Stacked Borrows always want.\n\nUpdate: This has been sitting as S-waiting-on-author for a long time. I bring it out from time to time to explain Stacked Borrows to people, and just now `@JakobDegen` said\n>  Can we please merge that btw? It's such a valuable teaching tool\n>  Interfaces can be fixed later\n\nI'm inclined to trust Jake's judgement here.", "tree": {"sha": "7ae86746fdfa2abcde456352bd6d946eca4996eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ae86746fdfa2abcde456352bd6d946eca4996eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/314ff050156cc8f5cb60a13e5d26966257245a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/314ff050156cc8f5cb60a13e5d26966257245a22", "html_url": "https://github.com/rust-lang/rust/commit/314ff050156cc8f5cb60a13e5d26966257245a22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/314ff050156cc8f5cb60a13e5d26966257245a22/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c294d1de2ce2d884191451064bda46952cfb87b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c294d1de2ce2d884191451064bda46952cfb87b", "html_url": "https://github.com/rust-lang/rust/commit/1c294d1de2ce2d884191451064bda46952cfb87b"}, {"sha": "2420d533f2cba3d940fe4ed9f04bfeb1a51bc689", "url": "https://api.github.com/repos/rust-lang/rust/commits/2420d533f2cba3d940fe4ed9f04bfeb1a51bc689", "html_url": "https://github.com/rust-lang/rust/commit/2420d533f2cba3d940fe4ed9f04bfeb1a51bc689"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "32e616cb074ace3bc9fd016901bc7d317c99f0aa", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=314ff050156cc8f5cb60a13e5d26966257245a22", "patch": "@@ -531,6 +531,17 @@ extern \"Rust\" {\n     /// This is internal and unstable and should not be used; we give it here\n     /// just to be complete.\n     fn miri_start_panic(payload: *mut u8) -> !;\n+\n+    /// Miri-provided extern function to get the internal unique identifier for the allocation that a pointer\n+    /// points to. This is only useful as an input to `miri_print_stacks`, and it is a separate call because\n+    /// getting a pointer to an allocation at runtime can change the borrow stacks in the allocation.\n+    fn miri_get_alloc_id(ptr: *const ()) -> u64;\n+\n+    /// Miri-provided extern function to print (from the interpreter, not the program) the contents of all\n+    /// borrow stacks in an allocation. The format of what this emits is unstable and may change at any time.\n+    /// In particular, users should be aware that Miri will periodically attempt to garbage collect the\n+    /// contents of all stacks. Callers of this function may wish to pass `-Zmiri-tag-gc=0` to disable the GC.\n+    fn miri_print_stacks(alloc_id: u64);\n }\n ```\n "}, {"sha": "4742a365ec38bc3dd205411ef1c957a9735381ad", "filename": "src/tools/miri/src/range_map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs?ref=314ff050156cc8f5cb60a13e5d26966257245a22", "patch": "@@ -91,6 +91,10 @@ impl<T> RangeMap<T> {\n         self.v.iter_mut().map(|elem| &mut elem.data)\n     }\n \n+    pub fn iter_all(&self) -> impl Iterator<Item = (ops::Range<u64>, &T)> {\n+        self.v.iter().map(|elem| (elem.range.clone(), &elem.data))\n+    }\n+\n     // Splits the element situated at the given `index`, such that the 2nd one starts at offset\n     // `split_offset`. Do nothing if the element already starts there.\n     // Returns whether a split was necessary."}, {"sha": "7e6a9595161f7de4c234b6f70e085e6f547e60a6", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=314ff050156cc8f5cb60a13e5d26966257245a22", "patch": "@@ -417,6 +417,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // shim, add it to the corresponding submodule.\n         match link_name.as_str() {\n             // Miri-specific extern functions\n+            \"miri_get_alloc_id\" => {\n+                let [ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let ptr = this.read_pointer(ptr)?;\n+                let (alloc_id, _, _) = this.ptr_get_alloc_id(ptr)?;\n+                this.write_scalar(Scalar::from_u64(alloc_id.0.get()), dest)?;\n+            }\n+            \"miri_print_stacks\" => {\n+                let [id] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let id = this.read_scalar(id)?.to_u64()?;\n+                if let Some(id) = std::num::NonZeroU64::new(id) {\n+                    this.print_stacks(AllocId(id))?;\n+                }\n+            }\n             \"miri_static_root\" => {\n                 let [ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;"}, {"sha": "f1dd38e5fc1e339c6869251c0343d3b10fd455b8", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=314ff050156cc8f5cb60a13e5d26966257245a22", "patch": "@@ -1123,4 +1123,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n         Ok(())\n     }\n+\n+    fn print_stacks(&mut self, alloc_id: AllocId) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let alloc_extra = this.get_alloc_extra(alloc_id)?;\n+        let stacks = alloc_extra.stacked_borrows.as_ref().unwrap().borrow();\n+        for (range, stack) in stacks.stacks.iter_all() {\n+            print!(\"{:?}: [\", range);\n+            for i in 0..stack.len() {\n+                let item = stack.get(i).unwrap();\n+                print!(\" {:?}{:?}\", item.perm(), item.tag());\n+            }\n+            println!(\" ]\");\n+        }\n+        Ok(())\n+    }\n }"}, {"sha": "65fd7c2eccb53a8ade87ed7e54a63e080dd1c75d", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=314ff050156cc8f5cb60a13e5d26966257245a22", "patch": "@@ -139,6 +139,8 @@ regexes! {\n     STDOUT:\n     // Windows file paths\n     r\"\\\\\"                           => \"/\",\n+    // erase Stacked Borrows tags\n+    \"<[0-9]+>\"                      => \"<TAG>\",\n }\n \n regexes! {"}, {"sha": "8d96a2e1ca9918720dc1cf8b935464e55febf19d", "filename": "src/tools/miri/tests/pass/stacked-borrows/stack-printing.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.rs?ref=314ff050156cc8f5cb60a13e5d26966257245a22", "patch": "@@ -0,0 +1,29 @@\n+use std::{\n+    alloc::{self, Layout},\n+    mem::ManuallyDrop,\n+};\n+\n+extern \"Rust\" {\n+    fn miri_get_alloc_id(ptr: *const u8) -> u64;\n+    fn miri_print_stacks(alloc_id: u64);\n+}\n+\n+fn main() {\n+    let ptr = unsafe { alloc::alloc(Layout::new::<u8>()) };\n+    let alloc_id = unsafe { miri_get_alloc_id(ptr) };\n+    unsafe { miri_print_stacks(alloc_id) };\n+\n+    assert!(!ptr.is_null());\n+    unsafe { miri_print_stacks(alloc_id) };\n+\n+    unsafe { *ptr = 42 };\n+    unsafe { miri_print_stacks(alloc_id) };\n+\n+    let _b = unsafe { ManuallyDrop::new(Box::from_raw(ptr)) };\n+    unsafe { miri_print_stacks(alloc_id) };\n+\n+    let _ptr = unsafe { &*ptr };\n+    unsafe { miri_print_stacks(alloc_id) };\n+\n+    unsafe { alloc::dealloc(ptr, Layout::new::<u8>()) };\n+}"}, {"sha": "660ee71e6f58bcf48bc60d322cd675bf8996d68b", "filename": "src/tools/miri/tests/pass/stacked-borrows/stack-printing.stdout", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/314ff050156cc8f5cb60a13e5d26966257245a22/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.stdout?ref=314ff050156cc8f5cb60a13e5d26966257245a22", "patch": "@@ -0,0 +1,5 @@\n+0..1: [ SharedReadWrite<TAG> ]\n+0..1: [ SharedReadWrite<TAG> ]\n+0..1: [ SharedReadWrite<TAG> ]\n+0..1: [ SharedReadWrite<TAG> Unique<TAG> Unique<TAG> Unique<TAG> Unique<TAG> Unique<TAG> ]\n+0..1: [ SharedReadWrite<TAG> Disabled<TAG> Disabled<TAG> Disabled<TAG> Disabled<TAG> Disabled<TAG> SharedReadOnly<TAG> ]"}]}