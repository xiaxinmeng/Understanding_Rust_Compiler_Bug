{"sha": "f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "node_id": "C_kwDOAAsO6NoAKGY1YzYwMTQ5MmVlNTIwZDJlZTRmNmMxMzNmN2Y0ZGZhN2IwYzEzZTI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-06T18:56:28Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-16T08:03:06Z"}, "message": "Remove redundant `input_path` field from `Config`", "tree": {"sha": "fd9f62b7b1b684f0ed4f85c209c51c22da8db833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd9f62b7b1b684f0ed4f85c209c51c22da8db833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "html_url": "https://github.com/rust-lang/rust/commit/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b1a789fb69f832d2b3df53b9e42c08c919c7487", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1a789fb69f832d2b3df53b9e42c08c919c7487", "html_url": "https://github.com/rust-lang/rust/commit/6b1a789fb69f832d2b3df53b9e42c08c919c7487"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "ec46fc8999a17ef0b4ef715844aad21113d8bbe6", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "patch": "@@ -219,7 +219,6 @@ fn run_compiler(\n         crate_cfg: cfg,\n         crate_check_cfg: check_cfg,\n         input: Input::File(PathBuf::new()),\n-        input_path: None,\n         output_file: ofile,\n         output_dir: odir,\n         file_loader,\n@@ -237,9 +236,8 @@ fn run_compiler(\n \n     match make_input(config.opts.error_format, &matches.free) {\n         Err(reported) => return Err(reported),\n-        Ok(Some((input, input_file_path))) => {\n+        Ok(Some(input)) => {\n             config.input = input;\n-            config.input_path = input_file_path;\n \n             callbacks.config(&mut config);\n         }\n@@ -437,7 +435,7 @@ fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>)\n fn make_input(\n     error_format: ErrorOutputType,\n     free_matches: &[String],\n-) -> Result<Option<(Input, Option<PathBuf>)>, ErrorGuaranteed> {\n+) -> Result<Option<Input>, ErrorGuaranteed> {\n     if free_matches.len() == 1 {\n         let ifile = &free_matches[0];\n         if ifile == \"-\" {\n@@ -459,12 +457,12 @@ fn make_input(\n                 let line = isize::from_str_radix(&line, 10)\n                     .expect(\"UNSTABLE_RUSTDOC_TEST_LINE needs to be an number\");\n                 let file_name = FileName::doc_test_source_code(PathBuf::from(path), line);\n-                Ok(Some((Input::Str { name: file_name, input: src }, None)))\n+                Ok(Some(Input::Str { name: file_name, input: src }))\n             } else {\n-                Ok(Some((Input::Str { name: FileName::anon_source_code(&src), input: src }, None)))\n+                Ok(Some(Input::Str { name: FileName::anon_source_code(&src), input: src }))\n             }\n         } else {\n-            Ok(Some((Input::File(PathBuf::from(ifile)), Some(PathBuf::from(ifile)))))\n+            Ok(Some(Input::File(PathBuf::from(ifile))))\n         }\n     } else {\n         Ok(None)"}, {"sha": "22a01db5e7573e436435c6f1c119e2591cf056f6", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "patch": "@@ -36,7 +36,6 @@ pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n     pub(crate) input: Input,\n-    pub(crate) input_path: Option<PathBuf>,\n     pub(crate) output_dir: Option<PathBuf>,\n     pub(crate) output_file: Option<PathBuf>,\n     pub(crate) temps_dir: Option<PathBuf>,\n@@ -244,7 +243,6 @@ pub struct Config {\n     pub crate_check_cfg: CheckCfg,\n \n     pub input: Input,\n-    pub input_path: Option<PathBuf>,\n     pub output_dir: Option<PathBuf>,\n     pub output_file: Option<PathBuf>,\n     pub file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n@@ -292,7 +290,7 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 config.crate_cfg,\n                 config.crate_check_cfg,\n                 config.file_loader,\n-                config.input_path.clone(),\n+                config.input.opt_path(),\n                 config.lint_caps,\n                 config.make_codegen_backend,\n                 registry.clone(),\n@@ -308,7 +306,6 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 sess: Lrc::new(sess),\n                 codegen_backend: Lrc::new(codegen_backend),\n                 input: config.input,\n-                input_path: config.input_path,\n                 output_dir: config.output_dir,\n                 output_file: config.output_file,\n                 temps_dir,"}, {"sha": "bba0a50a93fae2cedbd56a2dce8c48b3d484e5d4", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "patch": "@@ -686,7 +686,7 @@ pub fn prepare_outputs(\n         generated_output_paths(sess, &outputs, compiler.output_file.is_some(), crate_name);\n \n     // Ensure the source file isn't accidentally overwritten during compilation.\n-    if let Some(ref input_path) = compiler.input_path {\n+    if let Some(ref input_path) = compiler.input.opt_path() {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n                 let reported = sess.emit_err(InputFileWouldBeOverWritten { path: input_path });"}, {"sha": "2679164b927e54bd7c681623353fc4d9108a826e", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "patch": "@@ -591,6 +591,24 @@ impl Input {\n             Input::Str { ref name, .. } => name.clone(),\n         }\n     }\n+\n+    pub fn opt_path(&self) -> Option<PathBuf> {\n+        match self {\n+            Input::File(file) => Some(file.clone()),\n+            Input::Str { name, .. } => match name {\n+                FileName::Real(real) => real.local_path().map(|p| p.to_owned()),\n+                FileName::QuoteExpansion(_) => None,\n+                FileName::Anon(_) => None,\n+                FileName::MacroExpansion(_) => None,\n+                FileName::ProcMacroSourceCode(_) => None,\n+                FileName::CfgSpec(_) => None,\n+                FileName::CliCrateAttr(_) => None,\n+                FileName::Custom(_) => None,\n+                FileName::DocTest(path, _) => Some(path.to_owned()),\n+                FileName::InlineAsm(_) => None,\n+            },\n+        }\n+    }\n }\n \n #[derive(Clone, Hash, Debug, HashStable_Generic)]"}, {"sha": "2153e7d8c9ad9623193aed1fc98994b270e8f788", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "patch": "@@ -225,7 +225,6 @@ pub(crate) fn create_config(\n     // Add the doc cfg into the doc build.\n     cfgs.push(\"doc\".to_string());\n \n-    let cpath = Some(input.clone());\n     let input = Input::File(input);\n \n     // By default, rustdoc ignores all lints.\n@@ -277,7 +276,6 @@ pub(crate) fn create_config(\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n         crate_check_cfg: interface::parse_check_cfg(check_cfgs),\n         input,\n-        input_path: cpath,\n         output_file: None,\n         output_dir: None,\n         file_loader: None,"}, {"sha": "c1a652c75f4a16a0999fface3e8d8f8db60752af", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "patch": "@@ -95,7 +95,6 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n         crate_check_cfg: interface::parse_check_cfg(options.check_cfgs.clone()),\n         input,\n-        input_path: None,\n         output_file: None,\n         output_dir: None,\n         file_loader: None,"}]}