{"sha": "2a75607baba3e42814e4cc7fa35358f1be7f75ed", "node_id": "C_kwDOAAsO6NoAKDJhNzU2MDdiYWJhM2U0MjgxNGU0Y2M3ZmEzNTM1OGYxYmU3Zjc1ZWQ", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-20T03:35:53Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-29T16:51:57Z"}, "message": "Combine several `Step`s into a single step with multiple paths", "tree": {"sha": "10bc368a857d6379fe8e2215d4d397ece1f13a30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10bc368a857d6379fe8e2215d4d397ece1f13a30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a75607baba3e42814e4cc7fa35358f1be7f75ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a75607baba3e42814e4cc7fa35358f1be7f75ed", "html_url": "https://github.com/rust-lang/rust/commit/2a75607baba3e42814e4cc7fa35358f1be7f75ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a75607baba3e42814e4cc7fa35358f1be7f75ed/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff674c1664330fc838a295f115972f8068959f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff674c1664330fc838a295f115972f8068959f3b", "html_url": "https://github.com/rust-lang/rust/commit/ff674c1664330fc838a295f115972f8068959f3b"}], "stats": {"total": 137, "additions": 22, "deletions": 115}, "files": [{"sha": "d9d4685dfc790e718677664bd7b66fb48b2a2c6f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a75607baba3e42814e4cc7fa35358f1be7f75ed/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a75607baba3e42814e4cc7fa35358f1be7f75ed/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2a75607baba3e42814e4cc7fa35358f1be7f75ed", "patch": "@@ -703,7 +703,6 @@ impl<'a> Builder<'a> {\n                 crate::toolstate::ToolStateCheck,\n                 test::ExpandYamlAnchors,\n                 test::Tidy,\n-                test::TidySelfTest,\n                 test::Ui,\n                 test::RunPassValgrind,\n                 test::MirOpt,\n@@ -719,11 +718,9 @@ impl<'a> Builder<'a> {\n                 test::CrateLibrustc,\n                 test::CrateRustdoc,\n                 test::CrateRustdocJsonTypes,\n-                test::CrateJsonDocLint,\n-                test::SuggestTestsCrate,\n+                test::CrateBootstrap,\n                 test::Linkcheck,\n                 test::TierCheck,\n-                test::ReplacePlaceholderTest,\n                 test::Cargotest,\n                 test::Cargo,\n                 test::RustAnalyzer,"}, {"sha": "5b70494b30b8c6c17cedeafdc209b2c84de17ec2", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 20, "deletions": 110, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/2a75607baba3e42814e4cc7fa35358f1be7f75ed/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a75607baba3e42814e4cc7fa35358f1be7f75ed/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=2a75607baba3e42814e4cc7fa35358f1be7f75ed", "patch": "@@ -55,73 +55,54 @@ fn try_run_quiet(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct CrateJsonDocLint {\n+pub struct CrateBootstrap {\n+    path: Interned<PathBuf>,\n     host: TargetSelection,\n }\n \n-impl Step for CrateJsonDocLint {\n+impl Step for CrateBootstrap {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.path(\"src/tools/jsondoclint\")\n+            .path(\"src/tools/suggest-tests\")\n+            .path(\"src/tools/replace-version-placeholder\")\n+            .alias(\"tidyselftest\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(CrateJsonDocLint { host: run.target });\n+        for path in run.paths {\n+            let path = INTERNER.intern_path(path.assert_single_path().path.clone());\n+            run.builder.ensure(CrateBootstrap { host: run.target, path });\n+        }\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n         let bootstrap_host = builder.config.build;\n         let compiler = builder.compiler(0, bootstrap_host);\n+        let mut path = self.path.to_str().unwrap();\n+        if path == \"tidyselftest\" {\n+            path = \"src/tools/tidy\";\n+        }\n \n         let cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolBootstrap,\n             bootstrap_host,\n             \"test\",\n-            \"src/tools/jsondoclint\",\n+            path,\n             SourceType::InTree,\n             &[],\n         );\n-        run_cargo_test(cargo, &[], &[], compiler, bootstrap_host, builder);\n-    }\n-}\n-\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct SuggestTestsCrate {\n-    host: TargetSelection,\n-}\n-\n-impl Step for SuggestTestsCrate {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/tools/suggest-tests\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(SuggestTestsCrate { host: run.target });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let bootstrap_host = builder.config.build;\n-        let compiler = builder.compiler(0, bootstrap_host);\n-\n-        let cargo = tool::prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            Mode::ToolBootstrap,\n+        builder.info(&format!(\n+            \"{} {} stage0 ({})\",\n+            builder.kind.test_description(),\n+            path,\n             bootstrap_host,\n-            \"test\",\n-            \"src/tools/suggest-tests\",\n-            SourceType::InTree,\n-            &[],\n-        );\n+        ));\n         run_cargo_test(cargo, &[], &[], compiler, bootstrap_host, builder);\n     }\n }\n@@ -1151,40 +1132,6 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n     }\n }\n \n-/// Runs tidy's own tests.\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct TidySelfTest;\n-\n-impl Step for TidySelfTest {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.alias(\"tidyselftest\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(TidySelfTest);\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let bootstrap_host = builder.config.build;\n-        let compiler = builder.compiler(0, bootstrap_host);\n-        let cargo = tool::prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            Mode::ToolBootstrap,\n-            bootstrap_host,\n-            \"test\",\n-            \"src/tools/tidy\",\n-            SourceType::InTree,\n-            &[],\n-        );\n-        run_cargo_test(cargo, &[], &[], compiler, bootstrap_host, builder);\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ExpandYamlAnchors;\n \n@@ -2613,43 +2560,6 @@ impl Step for TierCheck {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct ReplacePlaceholderTest;\n-\n-impl Step for ReplacePlaceholderTest {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n-\n-    /// Ensure the version placeholder replacement tool builds\n-    fn run(self, builder: &Builder<'_>) {\n-        builder.info(\"build check for version replacement placeholder\");\n-\n-        // Test the version placeholder replacement tool itself.\n-        let bootstrap_host = builder.config.build;\n-        let compiler = builder.compiler(0, bootstrap_host);\n-        let cargo = tool::prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            Mode::ToolBootstrap,\n-            bootstrap_host,\n-            \"test\",\n-            \"src/tools/replace-version-placeholder\",\n-            SourceType::InTree,\n-            &[],\n-        );\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n-    }\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/tools/replace-version-placeholder\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Self);\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct LintDocs {\n     pub compiler: Compiler,"}, {"sha": "39f6369b4d3f5fe747aa85adc313730f1958f2de", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a75607baba3e42814e4cc7fa35358f1be7f75ed/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a75607baba3e42814e4cc7fa35358f1be7f75ed/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=2a75607baba3e42814e4cc7fa35358f1be7f75ed", "patch": "@@ -141,7 +141,7 @@ pub fn prepare_tool_cargo(\n     mode: Mode,\n     target: TargetSelection,\n     command: &'static str,\n-    path: &'static str,\n+    path: &str,\n     source_type: SourceType,\n     extra_features: &[String],\n ) -> CargoCommand {"}]}