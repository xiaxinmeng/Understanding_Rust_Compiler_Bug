{"sha": "7996182bc1b48495014fa13799f503be01d3e5bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OTYxODJiYzFiNDg0OTUwMTRmYTEzNzk5ZjUwM2JlMDFkM2U1YmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-14T12:00:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-14T12:00:59Z"}, "message": "Auto merge of #74777 - ssomers:btree_cleanup_7, r=Mark-Simulacrum\n\nStop BTreeMap casts from reborrowing\n\nDown in btree/node.rs, the interface and use of `cast_unchecked` look a bit shady. It's really just there for inverting `forget_type` which does not borrow. By borrowing we can't write the same `cast_unchecked` in the same way at the Handle level.\n\nNo change in undefined behaviour or performance.", "tree": {"sha": "6861c7f3ce0cb33da6ad83a3be7db9faa1d8303b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6861c7f3ce0cb33da6ad83a3be7db9faa1d8303b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7996182bc1b48495014fa13799f503be01d3e5bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7996182bc1b48495014fa13799f503be01d3e5bc", "html_url": "https://github.com/rust-lang/rust/commit/7996182bc1b48495014fa13799f503be01d3e5bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7996182bc1b48495014fa13799f503be01d3e5bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b2ca8457a0f6450896c669caf880090a18d1541", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2ca8457a0f6450896c669caf880090a18d1541", "html_url": "https://github.com/rust-lang/rust/commit/6b2ca8457a0f6450896c669caf880090a18d1541"}, {"sha": "052204023348d6befed705dbab7817afa4f7d7cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/052204023348d6befed705dbab7817afa4f7d7cf", "html_url": "https://github.com/rust-lang/rust/commit/052204023348d6befed705dbab7817afa4f7d7cf"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "c0b75fd5eacec7ad5ced9d795083a762d9e351e9", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7996182bc1b48495014fa13799f503be01d3e5bc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7996182bc1b48495014fa13799f503be01d3e5bc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=7996182bc1b48495014fa13799f503be01d3e5bc", "patch": "@@ -413,7 +413,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     /// Unsafely asserts to the compiler some static information about whether this\n     /// node is a `Leaf` or an `Internal`.\n-    unsafe fn cast_unchecked<NewType>(&mut self) -> NodeRef<marker::Mut<'_>, K, V, NewType> {\n+    unsafe fn cast_unchecked<NewType>(self) -> NodeRef<marker::Mut<'a>, K, V, NewType> {\n         NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n     }\n \n@@ -721,7 +721,7 @@ impl<Node: Copy, Type> Clone for Handle<Node, Type> {\n }\n \n impl<Node, Type> Handle<Node, Type> {\n-    /// Retrieves the node that contains the edge of key/value pair this handle points to.\n+    /// Retrieves the node that contains the edge or key/value pair this handle points to.\n     pub fn into_node(self) -> Node {\n         self.node\n     }\n@@ -1131,7 +1131,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV>\n     }\n \n     /// Removes the key/value pair pointed to by this handle and returns it, along with the edge\n-    /// between the now adjacent key/value pairs (if any) to the left and right of this handle.\n+    /// that the key/value pair collapsed into.\n     pub fn remove(\n         mut self,\n     ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {\n@@ -1189,18 +1189,17 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n     /// to by this handle, and the node immediately to the right of this handle into one new\n     /// child of the underlying node, returning an edge referencing that new child.\n     ///\n-    /// Assumes that this edge `.can_merge()`.\n+    /// Panics unless this edge `.can_merge()`.\n     pub fn merge(\n         mut self,\n     ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n         let self1 = unsafe { ptr::read(&self) };\n         let self2 = unsafe { ptr::read(&self) };\n         let mut left_node = self1.left_edge().descend();\n         let left_len = left_node.len();\n-        let mut right_node = self2.right_edge().descend();\n+        let right_node = self2.right_edge().descend();\n         let right_len = right_node.len();\n \n-        // necessary for correctness, but in a private module\n         assert!(left_len + right_len < CAPACITY);\n \n         unsafe {\n@@ -1231,28 +1230,25 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n \n             (*left_node.as_leaf_mut()).len += right_len as u16 + 1;\n \n-            let layout = if self.node.height > 1 {\n+            if self.node.height > 1 {\n+                // SAFETY: the height of the nodes being merged is one below the height\n+                // of the node of this edge, thus above zero, so they are internal.\n+                let mut left_node = left_node.cast_unchecked();\n+                let right_node = right_node.cast_unchecked();\n                 ptr::copy_nonoverlapping(\n-                    right_node.cast_unchecked().as_internal().edges.as_ptr(),\n-                    left_node\n-                        .cast_unchecked()\n-                        .as_internal_mut()\n-                        .edges\n-                        .as_mut_ptr()\n-                        .add(left_len + 1),\n+                    right_node.reborrow().as_internal().edges.as_ptr(),\n+                    left_node.reborrow_mut().as_internal_mut().edges.as_mut_ptr().add(left_len + 1),\n                     right_len + 1,\n                 );\n \n                 for i in left_len + 1..left_len + right_len + 2 {\n-                    Handle::new_edge(left_node.cast_unchecked().reborrow_mut(), i)\n-                        .correct_parent_link();\n+                    Handle::new_edge(left_node.reborrow_mut(), i).correct_parent_link();\n                 }\n \n-                Layout::new::<InternalNode<K, V>>()\n+                Global.dealloc(right_node.node.cast(), Layout::new::<InternalNode<K, V>>());\n             } else {\n-                Layout::new::<LeafNode<K, V>>()\n-            };\n-            Global.dealloc(right_node.node.cast(), layout);\n+                Global.dealloc(right_node.node.cast(), Layout::new::<LeafNode<K, V>>());\n+            }\n \n             Handle::new_edge(self.node, self.idx)\n         }"}]}