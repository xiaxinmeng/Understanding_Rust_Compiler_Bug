{"sha": "5f625620b5e4e29919400a0ee863942e5bf3d970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNjI1NjIwYjVlNGUyOTkxOTQwMGEwZWU4NjM5NDJlNWJmM2Q5NzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-13T17:12:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-16T01:09:17Z"}, "message": "std: Add issues to all unstable features", "tree": {"sha": "7f233a8ea679378cfd42109d923a6ddcf4aef7cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f233a8ea679378cfd42109d923a6ddcf4aef7cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f625620b5e4e29919400a0ee863942e5bf3d970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f625620b5e4e29919400a0ee863942e5bf3d970", "html_url": "https://github.com/rust-lang/rust/commit/5f625620b5e4e29919400a0ee863942e5bf3d970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f625620b5e4e29919400a0ee863942e5bf3d970/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "377c11aa83c1d2f6cc07fe178eb18a31e1813304", "url": "https://api.github.com/repos/rust-lang/rust/commits/377c11aa83c1d2f6cc07fe178eb18a31e1813304", "html_url": "https://github.com/rust-lang/rust/commit/377c11aa83c1d2f6cc07fe178eb18a31e1813304"}], "stats": {"total": 495, "additions": 272, "deletions": 223}, "files": [{"sha": "7c3c384ea93b7f5285fd8380b3a7e076454ece43", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -92,7 +92,8 @@\n \n #![doc(hidden)]\n #![unstable(feature = \"dec2flt\",\n-            reason = \"internal routines only exposed for testing\")]\n+            reason = \"internal routines only exposed for testing\",\n+            issue = \"0\")]\n \n use prelude::v1::*;\n use num::ParseFloatError as PFE;"}, {"sha": "b6123264ea8db6914f44c9f9c8a394080ce508a8", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -117,7 +117,7 @@ pub trait AsciiExt {\n     ///\n     /// assert_eq!('A', ascii);\n     /// ```\n-    #[unstable(feature = \"ascii\")]\n+    #[unstable(feature = \"ascii\", issue = \"27809\")]\n     fn make_ascii_uppercase(&mut self);\n \n     /// Converts this type to its ASCII lower case equivalent in-place.\n@@ -137,7 +137,7 @@ pub trait AsciiExt {\n     ///\n     /// assert_eq!('a', ascii);\n     /// ```\n-    #[unstable(feature = \"ascii\")]\n+    #[unstable(feature = \"ascii\", issue = \"27809\")]\n     fn make_ascii_lowercase(&mut self);\n }\n "}, {"sha": "d5638bdac69120531f8130c30928cfffbe9f9858", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -553,7 +553,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// map.insert(1, 2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+               issue = \"27713\")]\n     pub fn with_hash_state(hash_state: S) -> HashMap<K, V, S> {\n         HashMap {\n             hash_state:    hash_state,\n@@ -583,7 +584,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// map.insert(1, 2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+               issue = \"27713\")]\n     pub fn with_capacity_and_hash_state(capacity: usize, hash_state: S)\n                                         -> HashMap<K, V, S> {\n         let resize_policy = DefaultResizePolicy::new();\n@@ -998,7 +1000,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// ```\n     #[inline]\n     #[unstable(feature = \"drain\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27711\")]\n     pub fn drain(&mut self) -> Drain<K, V> {\n         fn last_two<A, B, C>((_, b, c): (A, B, C)) -> (B, C) { (b, c) }\n         let last_two: fn((SafeHash, K, V)) -> (K, V) = last_two; // coerce to fn pointer\n@@ -1311,7 +1314,8 @@ impl<'a, K, V> Clone for Values<'a, K, V> {\n \n /// HashMap drain iterator.\n #[unstable(feature = \"drain\",\n-           reason = \"matches collection reform specification, waiting for dust to settle\")]\n+           reason = \"matches collection reform specification, waiting for dust to settle\",\n+           issue = \"27711\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     inner: iter::Map<table::Drain<'a, K, V>, fn((SafeHash, K, V)) -> (K, V)>\n }\n@@ -1587,14 +1591,16 @@ impl<K, V, S> Extend<(K, V)> for HashMap<K, V, S>\n /// instances are unlikely to produce the same result for the same values.\n #[derive(Clone)]\n #[unstable(feature = \"hashmap_hasher\",\n-           reason = \"hashing an hash maps may be altered\")]\n+           reason = \"hashing an hash maps may be altered\",\n+           issue = \"27713\")]\n pub struct RandomState {\n     k0: u64,\n     k1: u64,\n }\n \n #[unstable(feature = \"hashmap_hasher\",\n-           reason = \"hashing an hash maps may be altered\")]\n+           reason = \"hashing an hash maps may be altered\",\n+           issue = \"27713\")]\n impl RandomState {\n     /// Constructs a new `RandomState` that is initialized with random keys.\n     #[inline]\n@@ -1606,7 +1612,8 @@ impl RandomState {\n }\n \n #[unstable(feature = \"hashmap_hasher\",\n-           reason = \"hashing an hash maps may be altered\")]\n+           reason = \"hashing an hash maps may be altered\",\n+           issue = \"27713\")]\n impl HashState for RandomState {\n     type Hasher = SipHasher;\n     #[inline]"}, {"sha": "ccad088a2982f959b4eb37693e7be897eeeaff52", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -164,7 +164,8 @@ impl<T, S> HashSet<T, S>\n     /// set.insert(2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+               issue = \"27713\")]\n     pub fn with_hash_state(hash_state: S) -> HashSet<T, S> {\n         HashSet::with_capacity_and_hash_state(INITIAL_CAPACITY, hash_state)\n     }\n@@ -190,7 +191,8 @@ impl<T, S> HashSet<T, S>\n     /// set.insert(1);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+               issue = \"27713\")]\n     pub fn with_capacity_and_hash_state(capacity: usize, hash_state: S)\n                                         -> HashSet<T, S> {\n         HashSet {\n@@ -411,7 +413,8 @@ impl<T, S> HashSet<T, S>\n     /// Clears the set, returning all elements in an iterator.\n     #[inline]\n     #[unstable(feature = \"drain\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\")]\n+               reason = \"matches collection reform specification, waiting for dust to settle\",\n+               issue = \"27711\")]\n     pub fn drain(&mut self) -> Drain<T> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }\n         let first: fn((T, ())) -> T = first; // coerce to fn pointer"}, {"sha": "1790eeb00b701d397d4258490d51d566d119137d", "filename": "src/libstd/collections/hash/state.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+#![unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\",\n+            issue = \"27713\")]\n \n use clone::Clone;\n use default::Default;"}, {"sha": "4367dda84663e5d586f3470a8242c5f71400086a", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -410,7 +410,8 @@ pub mod hash_set {\n \n /// Experimental support for providing custom hash algorithms to a HashMap and\n /// HashSet.\n-#[unstable(feature = \"hashmap_hasher\", reason = \"module was recently added\")]\n+#[unstable(feature = \"hashmap_hasher\", reason = \"module was recently added\",\n+           issue = \"27713\")]\n pub mod hash_state {\n     pub use super::hash::state::*;\n }"}, {"sha": "43bfce9b9e9e476ef85f2283f54225457dfbed25", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -14,7 +14,8 @@\n \n #![unstable(feature = \"dynamic_lib\",\n             reason = \"API has not been scrutinized and is highly likely to \\\n-                      either disappear or change\")]\n+                      either disappear or change\",\n+            issue = \"27810\")]\n #![allow(missing_docs)]\n \n use prelude::v1::*;"}, {"sha": "46d03169b2da36b4312705811a67a6f3ec644c76", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -78,7 +78,8 @@ pub trait Error: Debug + Display + Reflect {\n     /// Get the `TypeId` of `self`\n     #[doc(hidden)]\n     #[unstable(feature = \"error_type_id\",\n-               reason = \"unclear whether to commit to this public implementation detail\")]\n+               reason = \"unclear whether to commit to this public implementation detail\",\n+               issue = \"27745\")]\n     fn type_id(&self) -> TypeId where Self: 'static {\n         TypeId::of::<Self>()\n     }"}, {"sha": "b973dcef6512ad7fb1585707f6dc8b233878ea72", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -205,7 +205,8 @@ impl CString {\n     /// The only appropriate argument is a pointer obtained by calling\n     /// `into_ptr`. The length of the string will be recalculated\n     /// using the pointer.\n-    #[unstable(feature = \"cstr_memory\", reason = \"recently added\")]\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+               issue = \"27769\")]\n     // NB: may want to be called from_raw, needs to consider CStr::from_ptr,\n     //     Box::from_raw (or whatever it's currently called), and\n     //     slice::from_raw_parts\n@@ -223,7 +224,8 @@ impl CString {\n     /// this string.\n     ///\n     /// Failure to call `from_ptr` will lead to a memory leak.\n-    #[unstable(feature = \"cstr_memory\", reason = \"recently added\")]\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+               issue = \"27769\")]\n     // NB: may want to be called into_raw, see comments on from_ptr\n     pub fn into_ptr(self) -> *const libc::c_char {\n         // It is important that the bytes be sized to fit - we need\n@@ -407,11 +409,13 @@ impl CStr {\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n     /// > future to perform the length calculation in addition to the UTF-8\n     /// > check whenever this method is called.\n-    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\")]\n+    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\",\n+               issue = \"27764\")]\n     pub fn to_str(&self) -> Result<&str, str::Utf8Error> {\n-        // NB: When CStr is changed to perform the length check in .to_bytes() instead of in\n-        // from_ptr(), it may be worth considering if this should be rewritten to do the UTF-8\n-        // check inline with the length calculation instead of doing it afterwards.\n+        // NB: When CStr is changed to perform the length check in .to_bytes()\n+        // instead of in from_ptr(), it may be worth considering if this should\n+        // be rewritten to do the UTF-8 check inline with the length calculation\n+        // instead of doing it afterwards.\n         str::from_utf8(self.to_bytes())\n     }\n \n@@ -426,7 +430,8 @@ impl CStr {\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n     /// > future to perform the length calculation in addition to the UTF-8\n     /// > check whenever this method is called.\n-    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\")]\n+    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\",\n+               issue = \"27764\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         String::from_utf8_lossy(self.to_bytes())\n     }"}, {"sha": "751c76b996024576df2d64981fd244928df9440e", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -29,9 +29,6 @@\n //! for conversion to/from various other string types. Eventually these types\n //! will offer a full-fledged string API.\n \n-#![unstable(feature = \"os_str\",\n-            reason = \"recently added as part of path/io reform\")]\n-\n use borrow::{Borrow, Cow, ToOwned};\n use ffi::CString;\n use fmt::{self, Debug};\n@@ -74,7 +71,7 @@ impl OsString {\n     ///\n     /// On Windows system, only UTF-8 byte sequences will successfully\n     /// convert; non UTF-8 data will produce `None`.\n-    #[unstable(feature = \"convert\", reason = \"recently added\")]\n+    #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n     pub fn from_bytes<B>(bytes: B) -> Option<OsString> where B: Into<Vec<u8>> {\n         #[cfg(unix)]\n         fn from_bytes_inner(vec: Vec<u8>) -> Option<OsString> {\n@@ -258,7 +255,7 @@ impl OsStr {\n     /// On Windows systems, this returns `None` unless the `OsStr` is\n     /// valid unicode, in which case it produces UTF-8-encoded\n     /// data. This may entail checking validity.\n-    #[unstable(feature = \"convert\", reason = \"recently added\")]\n+    #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n     pub fn to_bytes(&self) -> Option<&[u8]> {\n         if cfg!(windows) {\n             self.to_str().map(|s| s.as_bytes())\n@@ -274,7 +271,7 @@ impl OsStr {\n     /// This is a convenience for creating a `CString` from\n     /// `self.to_bytes()`, and inherits the platform behavior of the\n     /// `to_bytes` method.\n-    #[unstable(feature = \"convert\", reason = \"recently added\")]\n+    #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n     pub fn to_cstring(&self) -> Option<CString> {\n         self.to_bytes().and_then(|b| CString::new(b).ok())\n     }"}, {"sha": "0014391670aa3eb4cd13918a88b41f2064dea8a0", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -88,7 +88,8 @@ pub struct DirEntry(fs_imp::DirEntry);\n #[unstable(feature = \"fs_walk\",\n            reason = \"the precise semantics and defaults for a recursive walk \\\n                      may change and this may end up accounting for files such \\\n-                     as symlinks differently\")]\n+                     as symlinks differently\",\n+           issue = \"27707\")]\n pub struct WalkDir {\n     cur: Option<ReadDir>,\n     stack: Vec<io::Result<ReadDir>>,\n@@ -154,7 +155,8 @@ pub struct FileType(fs_imp::FileType);\n /// A builder used to create directories in various manners.\n ///\n /// This builder also supports platform-specific options.\n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\")]\n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n+           issue = \"27710\")]\n pub struct DirBuilder {\n     inner: fs_imp::DirBuilder,\n     recursive: bool,\n@@ -949,7 +951,8 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n \n /// Returns the canonical form of a path with all intermediate components\n /// normalized and symbolic links resolved.\n-#[unstable(feature = \"fs_canonicalize\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_canonicalize\", reason = \"recently added API\",\n+           issue = \"27706\")]\n pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n     fs_imp::canonicalize(path.as_ref())\n }\n@@ -1107,13 +1110,14 @@ pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n #[unstable(feature = \"fs_walk\",\n            reason = \"the precise semantics and defaults for a recursive walk \\\n                      may change and this may end up accounting for files such \\\n-                     as symlinks differently\")]\n+                     as symlinks differently\",\n+           issue = \"27707\")]\n pub fn walk_dir<P: AsRef<Path>>(path: P) -> io::Result<WalkDir> {\n     let start = try!(read_dir(path));\n     Ok(WalkDir { cur: Some(start), stack: Vec::new() })\n }\n \n-#[unstable(feature = \"fs_walk\")]\n+#[unstable(feature = \"fs_walk\", issue = \"27707\")]\n impl Iterator for WalkDir {\n     type Item = io::Result<DirEntry>;\n \n@@ -1146,7 +1150,8 @@ impl Iterator for WalkDir {\n #[unstable(feature = \"path_ext\",\n            reason = \"The precise set of methods exposed on this trait may \\\n                      change and some methods may be removed.  For stable code, \\\n-                     see the std::fs::metadata function.\")]\n+                     see the std::fs::metadata function.\",\n+           issue = \"27725\")]\n pub trait PathExt {\n     /// Gets information on the file, directory, etc at this path.\n     ///\n@@ -1242,7 +1247,8 @@ pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions)\n     fs_imp::set_perm(path.as_ref(), perm.0)\n }\n \n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\")]\n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n+           issue = \"27710\")]\n impl DirBuilder {\n     /// Creates a new set of options with default mode/security settings for all\n     /// platforms and also non-recursive."}, {"sha": "17a72e0f1b5e5b7d00321cf88c6a8856e74d3718", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -150,7 +150,8 @@ pub enum ErrorKind {\n     /// Any I/O error not part of this list.\n     #[unstable(feature = \"io_error_internals\",\n                reason = \"better expressed through extensible enums that this \\\n-                         enum cannot be exhaustively matched against\")]\n+                         enum cannot be exhaustively matched against\",\n+               issue = \"0\")]\n     #[doc(hidden)]\n     __Nonexhaustive,\n }"}, {"sha": "5ad5d0fa4d592e313c88bedef06170c8c5fe9f1a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -647,7 +647,8 @@ pub trait Read {\n     /// ```\n     #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n                                          of where errors happen is currently \\\n-                                         unclear and may change\")]\n+                                         unclear and may change\",\n+               issue = \"27802\")]\n     fn chars(self) -> Chars<Self> where Self: Sized {\n         Chars { inner: self }\n     }\n@@ -754,7 +755,8 @@ pub trait Read {\n     /// ```\n     #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n                                          of where errors happen is currently \\\n-                                         unclear and may change\")]\n+                                         unclear and may change\",\n+               issue = \"27802\")]\n     fn tee<W: Write>(self, out: W) -> Tee<Self, W> where Self: Sized {\n         Tee { reader: self, writer: out }\n     }\n@@ -1016,7 +1018,8 @@ pub trait Write {\n     /// ```\n     #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n                                          of where errors happen is currently \\\n-                                         unclear and may change\")]\n+                                         unclear and may change\",\n+               issue = \"27802\")]\n     fn broadcast<W: Write>(self, other: W) -> Broadcast<Self, W>\n         where Self: Sized\n     {\n@@ -1401,13 +1404,15 @@ pub trait BufRead: Read {\n /// writer. Please see the documentation of `broadcast()` for more details.\n ///\n /// [broadcast]: trait.Write.html#method.broadcast\n-#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\",\n+           issue = \"27802\")]\n pub struct Broadcast<T, U> {\n     first: T,\n     second: U,\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\",\n+           issue = \"27802\")]\n impl<T: Write, U: Write> Write for Broadcast<T, U> {\n     fn write(&mut self, data: &[u8]) -> Result<usize> {\n         let n = try!(self.first.write(data));\n@@ -1509,13 +1514,15 @@ impl<T: BufRead> BufRead for Take<T> {\n /// Please see the documentation of `tee()` for more details.\n ///\n /// [tee]: trait.Read.html#method.tee\n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\",\n+           issue = \"27802\")]\n pub struct Tee<R, W> {\n     reader: R,\n     writer: W,\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\",\n+           issue = \"27802\")]\n impl<R: Read, W: Write> Read for Tee<R, W> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n         let n = try!(self.reader.read(buf));\n@@ -1556,15 +1563,17 @@ impl<R: Read> Iterator for Bytes<R> {\n /// Please see the documentation of `chars()` for more details.\n ///\n /// [chars]: trait.Read.html#method.chars\n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n pub struct Chars<R> {\n     inner: R,\n }\n \n /// An enumeration of possible errors that can be generated from the `Chars`\n /// adapter.\n #[derive(Debug)]\n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n pub enum CharsError {\n     /// Variant representing that the underlying stream was read successfully\n     /// but it did not contain valid utf8 data.\n@@ -1574,7 +1583,8 @@ pub enum CharsError {\n     Other(Error),\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n impl<R: Read> Iterator for Chars<R> {\n     type Item = result::Result<char, CharsError>;\n \n@@ -1606,7 +1616,8 @@ impl<R: Read> Iterator for Chars<R> {\n     }\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n impl std_error::Error for CharsError {\n     fn description(&self) -> &str {\n         match *self {\n@@ -1622,7 +1633,8 @@ impl std_error::Error for CharsError {\n     }\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n+           issue = \"27802\")]\n impl fmt::Display for CharsError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "e60bdcf0ec64a528ee2cf452c5f333944c80db25", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -531,7 +531,8 @@ impl<'a> Write for StderrLock<'a> {\n /// output handle is to the process's stderr stream.\n #[unstable(feature = \"set_stdio\",\n            reason = \"this function may disappear completely or be replaced \\\n-                     with a more general mechanism\")]\n+                     with a more general mechanism\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn set_panic(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n     use panicking::LOCAL_STDERR;\n@@ -554,7 +555,8 @@ pub fn set_panic(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n /// output handle is to the process's stdout stream.\n #[unstable(feature = \"set_stdio\",\n            reason = \"this function may disappear completely or be replaced \\\n-                     with a more general mechanism\")]\n+                     with a more general mechanism\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn set_print(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n     use mem;\n@@ -567,7 +569,8 @@ pub fn set_print(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n }\n \n #[unstable(feature = \"print\",\n-           reason = \"implementation detail which may disappear or be replaced at any time\")]\n+           reason = \"implementation detail which may disappear or be replaced at any time\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn _print(args: fmt::Arguments) {\n     let result = LOCAL_STDOUT.with(|s| {"}, {"sha": "655fa04c2644ee51022ed00f0f8ca08e7d5abd96", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -398,7 +398,7 @@ mod rand;\n // but it may be stabilized long-term. As a result we're exposing a hidden,\n // unstable module so we can get our build working.\n #[doc(hidden)]\n-#[unstable(feature = \"rand\")]\n+#[unstable(feature = \"rand\", issue = \"0\")]\n pub mod __rand {\n     pub use rand::{thread_rng, ThreadRng, Rng};\n }"}, {"sha": "cf0ede30dcc7c8e86aba1fabc837e71e7834aa1b", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -48,7 +48,7 @@ pub struct SocketAddrV6 { inner: libc::sockaddr_in6 }\n \n impl SocketAddr {\n     /// Creates a new socket address from the (ip, port) pair.\n-    #[unstable(feature = \"ip_addr\", reason = \"recent addition\")]\n+    #[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n     pub fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -57,7 +57,7 @@ impl SocketAddr {\n     }\n \n     /// Returns the IP address associated with this socket address.\n-    #[unstable(feature = \"ip_addr\", reason = \"recent addition\")]\n+    #[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n     pub fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),"}, {"sha": "09aea50cfbe9e00e896ced9161a1b2af0a54826f", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -10,7 +10,8 @@\n \n #![unstable(feature = \"ip\", reason = \"extra functionality has not been \\\n                                       scrutinized to the level that it should \\\n-                                      be stable\")]\n+                                      be stable\",\n+            issue = \"27709\")]\n \n use prelude::v1::*;\n \n@@ -22,7 +23,7 @@ use sys_common::{AsInner, FromInner};\n use net::{hton, ntoh};\n \n /// An IP address, either a IPv4 or IPv6 address.\n-#[unstable(feature = \"ip_addr\", reason = \"recent addition\")]\n+#[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]\n pub enum IpAddr {\n     /// Representation of an IPv4 address."}, {"sha": "8a02d37c89be86abf655ea3581eeeefc4651f46b", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -84,12 +84,14 @@ fn each_addr<A: ToSocketAddrs, F, T>(addr: A, mut f: F) -> io::Result<T>\n /// An iterator over `SocketAddr` values returned from a host lookup operation.\n #[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n                                               iterator and returning socket \\\n-                                              addresses\")]\n+                                              addresses\",\n+           issue = \"27705\")]\n pub struct LookupHost(net_imp::LookupHost);\n \n #[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n                                               iterator and returning socket \\\n-                                              addresses\")]\n+                                              addresses\",\n+           issue = \"27705\")]\n impl Iterator for LookupHost {\n     type Item = io::Result<SocketAddr>;\n     fn next(&mut self) -> Option<io::Result<SocketAddr>> { self.0.next() }\n@@ -116,7 +118,8 @@ impl Iterator for LookupHost {\n /// ```\n #[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n                                               iterator and returning socket \\\n-                                              addresses\")]\n+                                              addresses\",\n+           issue = \"27705\")]\n pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n     net_imp::lookup_host(host).map(LookupHost)\n }\n@@ -126,7 +129,8 @@ pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n /// This function may perform a DNS query to resolve `addr` and may also inspect\n /// system configuration to resolve the specified address. If the address\n /// cannot be resolved, it is returned in string format.\n-#[unstable(feature = \"lookup_addr\", reason = \"recent addition\")]\n+#[unstable(feature = \"lookup_addr\", reason = \"recent addition\",\n+           issue = \"27705\")]\n pub fn lookup_addr(addr: &IpAddr) -> io::Result<String> {\n     net_imp::lookup_addr(addr)\n }"}, {"sha": "5467a8575ffff69253a9ac2d493e49fd58f04b95", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"tcp\", reason = \"remaining functions have not been \\\n-                                       scrutinized enough to be stabilized\")]\n-\n use prelude::v1::*;\n use io::prelude::*;\n \n@@ -133,7 +130,8 @@ impl TcpStream {\n     /// If the value specified is `None`, then `read` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_read_timeout(dur)\n     }\n@@ -143,7 +141,8 @@ impl TcpStream {\n     /// If the value specified is `None`, then `write` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_write_timeout(dur)\n     }\n@@ -155,7 +154,8 @@ impl TcpStream {\n     /// # Note\n     ///\n     /// Some platforms do not provide access to the current timeout.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.read_timeout()\n     }\n@@ -167,7 +167,8 @@ impl TcpStream {\n     /// # Note\n     ///\n     /// Some platforms do not provide access to the current timeout.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.write_timeout()\n     }"}, {"sha": "dcb76161d1fb41b361035212e719dd3ec11d5420", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"udp\", reason = \"remaining functions have not been \\\n-                                       scrutinized enough to be stabilized\")]\n-\n use fmt;\n use io::{self, Error, ErrorKind};\n use net::{ToSocketAddrs, SocketAddr};\n@@ -100,7 +97,8 @@ impl UdpSocket {\n     /// If the value specified is `None`, then `read` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_read_timeout(dur)\n     }\n@@ -110,23 +108,26 @@ impl UdpSocket {\n     /// If the value specified is `None`, then `write` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_write_timeout(dur)\n     }\n \n     /// Returns the read timeout of this socket.\n     ///\n     /// If the timeout is `None`, then `read` calls will block indefinitely.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.read_timeout()\n     }\n \n     /// Returns the write timeout of this socket.\n     ///\n     /// If the timeout is `None`, then `write` calls will block indefinitely.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\")]\n+    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n+               issue = \"27773\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.write_timeout()\n     }"}, {"sha": "bcbd1a80e8b70bc1d091e7bfa8d401679b99f5f7", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -124,7 +124,8 @@ mod cmath {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl f32 {\n     /// Parses a float as with a given radix\n-    #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\")]\n+    #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\",\n+               issue = \"27736\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f32, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)\n     }\n@@ -251,7 +252,8 @@ impl f32 {\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n     /// [floating-point]: ../../../../../reference.html#machine-types\n-    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\")]\n+    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn integer_decode(self) -> (u64, i16, i8) {\n         num::Float::integer_decode(self)\n@@ -607,7 +609,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\")]\n+    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn to_degrees(self) -> f32 { num::Float::to_degrees(self) }\n \n@@ -624,7 +627,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\")]\n+    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn to_radians(self) -> f32 { num::Float::to_radians(self) }\n \n@@ -640,7 +644,8 @@ impl f32 {\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"pending integer conventions\")]\n+               reason = \"pending integer conventions\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn ldexp(x: f32, exp: isize) -> f32 {\n         unsafe { cmath::ldexpf(x, exp as c_int) }\n@@ -668,7 +673,8 @@ impl f32 {\n     /// assert!(abs_difference_1 <= f32::EPSILON);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"pending integer conventions\")]\n+               reason = \"pending integer conventions\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn frexp(self) -> (f32, isize) {\n         unsafe {\n@@ -693,7 +699,8 @@ impl f32 {\n     /// assert!(abs_diff <= f32::EPSILON);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"unsure about its place in the world\")]\n+               reason = \"unsure about its place in the world\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn next_after(self, other: f32) -> f32 {\n         unsafe { cmath::nextafterf(self, other) }"}, {"sha": "ea48c46b611cda418b2cf53f4e5f0f0471f4a44b", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -80,7 +80,8 @@ mod cmath {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl f64 {\n     /// Parses a float as with a given radix\n-    #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\")]\n+    #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\",\n+               issue = \"27736\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f64, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)\n     }\n@@ -205,7 +206,8 @@ impl f64 {\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n     /// [floating-point]: ../../../../../reference.html#machine-types\n-    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\")]\n+    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn integer_decode(self) -> (u64, i16, i8) { num::Float::integer_decode(self) }\n \n@@ -575,7 +577,8 @@ impl f64 {\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"pending integer conventions\")]\n+               reason = \"pending integer conventions\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn ldexp(x: f64, exp: isize) -> f64 {\n         unsafe { cmath::ldexp(x, exp as c_int) }\n@@ -601,7 +604,8 @@ impl f64 {\n     /// assert!(abs_difference_1 < 1e-10);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"pending integer conventions\")]\n+               reason = \"pending integer conventions\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn frexp(self) -> (f64, isize) {\n         unsafe {\n@@ -624,7 +628,8 @@ impl f64 {\n     /// assert!(abs_diff < 1e-10);\n     /// ```\n     #[unstable(feature = \"float_extras\",\n-               reason = \"unsure about its place in the world\")]\n+               reason = \"unsure about its place in the world\",\n+               issue = \"27752\")]\n     #[inline]\n     pub fn next_after(self, other: f64) -> f64 {\n         unsafe { cmath::nextafter(self, other) }"}, {"sha": "db487d041b7c19ebef0d88595d014070b3acbb6e", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -49,9 +49,11 @@\n #[repr(u8)]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n pub enum c_void {\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\")]\n+    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+               issue = \"0\")]\n     #[doc(hidden)] __variant1,\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\")]\n+    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+               issue = \"0\")]\n     #[doc(hidden)] __variant2,\n }\n "}, {"sha": "71aed0408711e92b854c7e0ecb555170065f70fc", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -725,7 +725,7 @@ impl<'a> Components<'a> {\n     }\n \n     /// Examine the next component without consuming it.\n-    #[unstable(feature = \"path_components_peek\")]\n+    #[unstable(feature = \"path_components_peek\", issue = \"27727\")]\n     pub fn peek(&self) -> Option<Component<'a>> {\n         self.clone().next()\n     }\n@@ -1358,7 +1358,9 @@ impl Path {\n     /// Prefixes are relevant only for Windows paths, and consist of volumes\n     /// like `C:`, UNC prefixes like `\\\\server`, and others described in more\n     /// detail in `std::os::windows::PathExt`.\n-    #[unstable(feature = \"path_prefix\", reason = \"uncertain whether to expose this convenience\")]\n+    #[unstable(feature = \"path_prefix\",\n+               reason = \"uncertain whether to expose this convenience\",\n+               issue = \"27722\")]\n     pub fn prefix(&self) -> Option<Prefix> {\n         self.components().prefix\n     }\n@@ -1441,7 +1443,8 @@ impl Path {\n     ///\n     /// If `base` is not a prefix of `self` (i.e. `starts_with`\n     /// returns false), then `relative_from` returns `None`.\n-    #[unstable(feature = \"path_relative_from\", reason = \"see #23284\")]\n+    #[unstable(feature = \"path_relative_from\", reason = \"see #23284\",\n+               issue = \"23284\")]\n     pub fn relative_from<'a, P: ?Sized + AsRef<Path>>(&'a self, base: &'a P) -> Option<&Path>\n     {\n         iter_after(self.components(), base.as_ref().components()).map(|c| c.as_path())"}, {"sha": "7a4a0f96b3090caba206ab827eede372d3a830c9", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -55,7 +55,7 @@\n //!     between the two sources. (Also note that, on some systems e.g. FreeBSD, both `/dev/random`\n //!     and `/dev/urandom` may block once if the CSPRNG has not seeded yet.)\n \n-#![unstable(feature = \"rand\")]\n+#![unstable(feature = \"rand\", issue = \"0\")]\n \n use cell::RefCell;\n use io;"}, {"sha": "5464e7f9d8936c71148678c19ba7682ef6ae3d34", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -18,7 +18,8 @@\n \n #![unstable(feature = \"rt\",\n             reason = \"this public module should not exist and is highly likely \\\n-                      to disappear\")]\n+                      to disappear\",\n+            issue = \"0\")]\n #![allow(missing_docs)]\n \n use prelude::v1::*;"}, {"sha": "fc0e08139f4a3a4aa7d5d353b3512c8c847ea39d", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -76,15 +76,17 @@ pub struct Condvar { inner: Box<StaticCondvar> }\n /// static CVAR: StaticCondvar = CONDVAR_INIT;\n /// ```\n #[unstable(feature = \"static_condvar\",\n-           reason = \"may be merged with Condvar in the future\")]\n+           reason = \"may be merged with Condvar in the future\",\n+           issue = \"27717\")]\n pub struct StaticCondvar {\n     inner: sys::Condvar,\n     mutex: AtomicUsize,\n }\n \n /// Constant initializer for a statically allocated condition variable.\n #[unstable(feature = \"static_condvar\",\n-           reason = \"may be merged with Condvar in the future\")]\n+           reason = \"may be merged with Condvar in the future\",\n+           issue = \"27717\")]\n pub const CONDVAR_INIT: StaticCondvar = StaticCondvar::new();\n \n impl Condvar {\n@@ -173,7 +175,8 @@ impl Condvar {\n     ///\n     /// Like `wait`, the lock specified will be re-acquired when this function\n     /// returns, regardless of whether the timeout elapsed or not.\n-    #[unstable(feature = \"wait_timeout\", reason = \"waiting for Duration\")]\n+    #[unstable(feature = \"wait_timeout\", reason = \"waiting for Duration\",\n+               issue = \"27772\")]\n     pub fn wait_timeout<'a, T>(&self, guard: MutexGuard<'a, T>,\n                                dur: Duration)\n                                -> LockResult<(MutexGuard<'a, T>, bool)> {\n@@ -190,7 +193,8 @@ impl Condvar {\n     /// that the implementation will repeatedly wait while the duration has not\n     /// passed and the provided function returns `false`.\n     #[unstable(feature = \"wait_timeout_with\",\n-               reason = \"unsure if this API is broadly needed or what form it should take\")]\n+               reason = \"unsure if this API is broadly needed or what form it should take\",\n+               issue = \"27748\")]\n     pub fn wait_timeout_with<'a, T, F>(&self,\n                                        guard: MutexGuard<'a, T>,\n                                        dur: Duration,\n@@ -234,7 +238,8 @@ impl Drop for Condvar {\n impl StaticCondvar {\n     /// Creates a new condition variable\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub const fn new() -> StaticCondvar {\n         StaticCondvar {\n             inner: sys::Condvar::new(),\n@@ -247,7 +252,8 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::wait`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn wait<'a, T>(&'static self, guard: MutexGuard<'a, T>)\n                        -> LockResult<MutexGuard<'a, T>> {\n         let poisoned = unsafe {\n@@ -268,7 +274,8 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::wait_timeout`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn wait_timeout_ms<'a, T>(&'static self, guard: MutexGuard<'a, T>, ms: u32)\n                                   -> LockResult<(MutexGuard<'a, T>, bool)> {\n         self.wait_timeout(guard, Duration::from_millis(ms as u64))\n@@ -279,7 +286,8 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::wait_timeout`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn wait_timeout<'a, T>(&'static self,\n                                guard: MutexGuard<'a, T>,\n                                timeout: Duration)\n@@ -305,7 +313,8 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::wait_timeout_with`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn wait_timeout_with<'a, T, F>(&'static self,\n                                        guard: MutexGuard<'a, T>,\n                                        dur: Duration,\n@@ -351,14 +360,16 @@ impl StaticCondvar {\n     ///\n     /// See `Condvar::notify_one`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn notify_one(&'static self) { unsafe { self.inner.notify_one() } }\n \n     /// Wakes up all blocked threads on this condvar.\n     ///\n     /// See `Condvar::notify_all`.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub fn notify_all(&'static self) { unsafe { self.inner.notify_all() } }\n \n     /// Deallocates all resources associated with this static condvar.\n@@ -368,7 +379,8 @@ impl StaticCondvar {\n     /// users of the condvar. This method is required to be called to not leak\n     /// memory on all platforms.\n     #[unstable(feature = \"static_condvar\",\n-               reason = \"may be merged with Condvar in the future\")]\n+               reason = \"may be merged with Condvar in the future\",\n+               issue = \"27717\")]\n     pub unsafe fn destroy(&'static self) {\n         self.inner.destroy()\n     }"}, {"sha": "cc068fd1dea55bfbdc67287cd5cee22f9e3bb22d", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -54,7 +54,8 @@\n                       module will likely be replaced, and it is currently \\\n                       unknown how much API breakage that will cause. The ability \\\n                       to select over a number of channels will remain forever, \\\n-                      but no guarantees beyond this are being made\")]\n+                      but no guarantees beyond this are being made\",\n+            issue = \"27800\")]\n \n \n use core::cell::{Cell, UnsafeCell};"}, {"sha": "e56e5a72c13b98edbc9d5bb50cd53b05d937f7d8", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -151,7 +151,8 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// // lock is unlocked here.\n /// ```\n #[unstable(feature = \"static_mutex\",\n-           reason = \"may be merged with Mutex in the future\")]\n+           reason = \"may be merged with Mutex in the future\",\n+           issue = \"27717\")]\n pub struct StaticMutex {\n     lock: sys::Mutex,\n     poison: poison::Flag,\n@@ -177,7 +178,8 @@ impl<'a, T: ?Sized> !marker::Send for MutexGuard<'a, T> {}\n /// Static initialization of a mutex. This constant can be used to initialize\n /// other mutex constants.\n #[unstable(feature = \"static_mutex\",\n-           reason = \"may be merged with Mutex in the future\")]\n+           reason = \"may be merged with Mutex in the future\",\n+           issue = \"27717\")]\n pub const MUTEX_INIT: StaticMutex = StaticMutex::new();\n \n impl<T> Mutex<T> {\n@@ -271,7 +273,8 @@ unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell::new(()));\n \n #[unstable(feature = \"static_mutex\",\n-           reason = \"may be merged with Mutex in the future\")]\n+           reason = \"may be merged with Mutex in the future\",\n+           issue = \"27717\")]\n impl StaticMutex {\n     /// Creates a new mutex in an unlocked state ready for use.\n     pub const fn new() -> StaticMutex {"}, {"sha": "7210328fad805b31fceddd2303d3f0baa1eded80", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -98,15 +98,17 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// unsafe { LOCK.destroy() } // free all resources\n /// ```\n #[unstable(feature = \"static_rwlock\",\n-           reason = \"may be merged with RwLock in the future\")]\n+           reason = \"may be merged with RwLock in the future\",\n+           issue = \"27717\")]\n pub struct StaticRwLock {\n     lock: sys::RWLock,\n     poison: poison::Flag,\n }\n \n /// Constant initialization for a statically-initialized rwlock.\n #[unstable(feature = \"static_rwlock\",\n-           reason = \"may be merged with RwLock in the future\")]\n+           reason = \"may be merged with RwLock in the future\",\n+           issue = \"27717\")]\n pub const RW_LOCK_INIT: StaticRwLock = StaticRwLock::new();\n \n /// RAII structure used to release the shared read access of a lock when\n@@ -285,7 +287,8 @@ unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell::new(()));\n \n #[unstable(feature = \"static_rwlock\",\n-           reason = \"may be merged with RwLock in the future\")]\n+           reason = \"may be merged with RwLock in the future\",\n+           issue = \"27717\")]\n impl StaticRwLock {\n     /// Creates a new rwlock.\n     pub const fn new() -> StaticRwLock {"}, {"sha": "891f8775ff236d2eebfea67ee7b46ad2ad7d2583", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -10,7 +10,8 @@\n \n #![unstable(feature = \"semaphore\",\n             reason = \"the interaction between semaphores and the acquisition/release \\\n-                      of resources is currently unclear\")]\n+                      of resources is currently unclear\",\n+            issue = \"27798\")]\n \n use ops::Drop;\n use sync::{Mutex, Condvar};"}, {"sha": "4df3441f87b2134ed11241c5ebeefda9f8011893", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -7,7 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![unstable(feature = \"reentrant_mutex\", reason = \"new API\")]\n+\n+#![unstable(feature = \"reentrant_mutex\", reason = \"new API\",\n+            issue = \"27738\")]\n \n use prelude::v1::*;\n "}, {"sha": "56885cdd56d99a348a75228e287e64ee3038079b", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -55,7 +55,7 @@\n //! ```\n \n #![allow(non_camel_case_types)]\n-#![unstable(feature = \"thread_local_internals\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n use sync::atomic::{self, AtomicUsize, Ordering};"}, {"sha": "46ab83199f0f72264f33e1fa23db4bb38fd1162f", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -22,43 +22,43 @@ use sys::fs::MetadataExt as UnixMetadataExt;\n use sys;\n use sys_common::{FromInner, AsInner, AsInnerMut};\n \n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const USER_READ: raw::mode_t = 0o400;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const USER_WRITE: raw::mode_t = 0o200;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const USER_EXECUTE: raw::mode_t = 0o100;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const USER_RWX: raw::mode_t = 0o700;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const GROUP_READ: raw::mode_t = 0o040;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const GROUP_WRITE: raw::mode_t = 0o020;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const GROUP_EXECUTE: raw::mode_t = 0o010;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const GROUP_RWX: raw::mode_t = 0o070;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const OTHER_READ: raw::mode_t = 0o004;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const OTHER_WRITE: raw::mode_t = 0o002;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const OTHER_EXECUTE: raw::mode_t = 0o001;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const OTHER_RWX: raw::mode_t = 0o007;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const ALL_READ: raw::mode_t = 0o444;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const ALL_WRITE: raw::mode_t = 0o222;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const ALL_EXECUTE: raw::mode_t = 0o111;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const ALL_RWX: raw::mode_t = 0o777;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const SETUID: raw::mode_t = 0o4000;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const SETGID: raw::mode_t = 0o2000;\n-#[unstable(feature = \"fs_mode\", reason = \"recently added API\")]\n+#[unstable(feature = \"fs_mode\", reason = \"recently added API\", issue = \"27712\")]\n pub const STICKY_BIT: raw::mode_t = 0o1000;\n \n /// Unix-specific extensions to `Permissions`\n@@ -178,7 +178,8 @@ impl MetadataExt for fs::Metadata {\n }\n \n /// Add special unix types (block/char device, fifo and socket)\n-#[unstable(feature = \"file_type_ext\", reason = \"recently added API\")]\n+#[unstable(feature = \"file_type_ext\", reason = \"recently added API\",\n+           issue = \"27796\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n     fn is_block_device(&self) -> bool;\n@@ -190,7 +191,8 @@ pub trait FileTypeExt {\n     fn is_socket(&self) -> bool;\n }\n \n-#[unstable(feature = \"file_type_ext\", reason = \"recently added API\")]\n+#[unstable(feature = \"file_type_ext\", reason = \"recently added API\",\n+           issue = \"27796\")]\n impl FileTypeExt for fs::FileType {\n     fn is_block_device(&self) -> bool { self.as_inner().is(libc::S_IFBLK) }\n     fn is_char_device(&self) -> bool { self.as_inner().is(libc::S_IFCHR) }\n@@ -240,7 +242,8 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n     sys::fs::symlink(src.as_ref(), dst.as_ref())\n }\n \n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\")]\n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n+           issue = \"27710\")]\n /// An extension trait for `fs::DirBuilder` for unix-specific options.\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to"}, {"sha": "f4184f6a5d58152eabf594ae5a5f3d721a484644", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -61,7 +61,8 @@ pub trait FromRawFd {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw file descriptor.\n-#[unstable(feature = \"into_raw_os\", reason = \"recently added API\")]\n+#[unstable(feature = \"into_raw_os\", reason = \"recently added API\",\n+           issue = \"27797\")]\n pub trait IntoRawFd {\n     /// Consumes this object, returning the raw underlying file descriptor.\n     ///"}, {"sha": "81980ea25fb56c75e9c021b0623a963b91dc6a33", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -32,15 +32,17 @@ pub trait CommandExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn gid(&mut self, id: gid_t) -> &mut process::Command;\n \n-    /// Create a new session (cf. `setsid(2)`) for the child process. This means that the child is\n-    /// the leader of a new process group. The parent process remains the child reaper of the new\n-    /// process.\n+    /// Create a new session (cf. `setsid(2)`) for the child process. This means\n+    /// that the child is the leader of a new process group. The parent process\n+    /// remains the child reaper of the new process.\n     ///\n-    /// This is not enough to create a daemon process. The *init* process should be the child\n-    /// reaper of a daemon. This can be achieved if the parent process exit. Moreover, a daemon\n-    /// should not have a controlling terminal. To acheive this, a session leader (the child) must\n-    /// spawn another process (the daemon) in the same session.\n-    #[unstable(feature = \"process_session_leader\", reason = \"recently added\")]\n+    /// This is not enough to create a daemon process. The *init* process should\n+    /// be the child reaper of a daemon. This can be achieved if the parent\n+    /// process exit. Moreover, a daemon should not have a controlling terminal.\n+    /// To acheive this, a session leader (the child) must spawn another process\n+    /// (the daemon) in the same session.\n+    #[unstable(feature = \"process_session_leader\", reason = \"recently added\",\n+               issue = \"27811\")]\n     fn session_leader(&mut self, on: bool) -> &mut process::Command;\n }\n "}, {"sha": "a203a23068e54ab808e50772adef2c37aa545ecb", "filename": "src/libstd/sys/windows/ext/io.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -52,7 +52,8 @@ pub trait FromRawHandle {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw `HANDLE`.\n-#[unstable(feature = \"into_raw_os\", reason = \"recently added API\")]\n+#[unstable(feature = \"into_raw_os\", reason = \"recently added API\",\n+           issue = \"27797\")]\n pub trait IntoRawHandle {\n     /// Consumes this object, returning the raw underlying handle.\n     ///\n@@ -110,7 +111,8 @@ pub trait FromRawSocket {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw `SOCKET`.\n-#[unstable(feature = \"into_raw_os\", reason = \"recently added API\")]\n+#[unstable(feature = \"into_raw_os\", reason = \"recently added API\",\n+           issue = \"27797\")]\n pub trait IntoRawSocket {\n     /// Consumes this object, returning the raw underlying socket.\n     ///"}, {"sha": "c204f79614ad8f99212f3ab2b07d97a881581cd2", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -10,7 +10,7 @@\n \n //! Thread local storage\n \n-#![unstable(feature = \"thread_local_internals\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n use cell::UnsafeCell;\n \n@@ -137,7 +137,8 @@ macro_rules! thread_local {\n \n #[doc(hidden)]\n #[unstable(feature = \"thread_local_internals\",\n-           reason = \"should not be necessary\")]\n+           reason = \"should not be necessary\",\n+           issue = \"0\")]\n #[macro_export]\n #[allow_internal_unstable]\n macro_rules! __thread_local_inner {\n@@ -153,7 +154,8 @@ macro_rules! __thread_local_inner {\n \n /// Indicator of the state of a thread local storage key.\n #[unstable(feature = \"thread_local_state\",\n-           reason = \"state querying was recently added\")]\n+           reason = \"state querying was recently added\",\n+           issue = \"27716\")]\n #[derive(Eq, PartialEq, Copy, Clone)]\n pub enum LocalKeyState {\n     /// All keys are in this state whenever a thread starts. Keys will\n@@ -185,7 +187,8 @@ pub enum LocalKeyState {\n impl<T: 'static> LocalKey<T> {\n     #[doc(hidden)]\n     #[unstable(feature = \"thread_local_internals\",\n-               reason = \"recently added to create a key\")]\n+               reason = \"recently added to create a key\",\n+               issue = \"0\")]\n     pub const fn new(inner: fn() -> &'static __KeyInner<T>,\n                      init: fn() -> T) -> LocalKey<T> {\n         LocalKey {\n@@ -248,7 +251,8 @@ impl<T: 'static> LocalKey<T> {\n     /// to be able to be accessed. Keys in the `Destroyed` state will panic on\n     /// any call to `with`.\n     #[unstable(feature = \"thread_local_state\",\n-               reason = \"state querying was recently added\")]\n+               reason = \"state querying was recently added\",\n+               issue = \"27716\")]\n     pub fn state(&'static self) -> LocalKeyState {\n         unsafe {\n             match (self.inner)().get() {"}, {"sha": "3a4c3e7eef1ddc86a0be72d13c51156d9124c370", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 12, "deletions": 64, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -167,7 +167,6 @@ use any::Any;\n use cell::UnsafeCell;\n use fmt;\n use io;\n-use marker::PhantomData;\n use rt::{self, unwind};\n use sync::{Mutex, Condvar, Arc};\n use sys::thread as imp;\n@@ -185,8 +184,9 @@ use time::Duration;\n pub use self::local::{LocalKey, LocalKeyState};\n \n #[unstable(feature = \"scoped_tls\",\n-            reason = \"scoped TLS has yet to have wide enough use to fully \\\n-                      consider stabilizing its interface\")]\n+           reason = \"scoped TLS has yet to have wide enough use to fully \\\n+                     consider stabilizing its interface\",\n+           issue = \"27715\")]\n pub use self::scoped_tls::ScopedKey;\n \n #[doc(hidden)] pub use self::local::__KeyInner as __LocalKeyInner;\n@@ -375,7 +375,8 @@ pub fn panicking() -> bool {\n /// });\n /// assert!(result.is_err());\n /// ```\n-#[unstable(feature = \"catch_panic\", reason = \"recent API addition\")]\n+#[unstable(feature = \"catch_panic\", reason = \"recent API addition\",\n+           issue = \"27719\")]\n pub fn catch_panic<F, R>(f: F) -> Result<R>\n     where F: FnOnce() -> R + Send + 'static\n {\n@@ -409,7 +410,8 @@ pub fn sleep_ms(ms: u32) {\n /// signal being received or a spurious wakeup. Platforms which do not support\n /// nanosecond precision for sleeping will have `dur` rounded up to the nearest\n /// granularity of time they can sleep for.\n-#[unstable(feature = \"thread_sleep\", reason = \"waiting on Duration\")]\n+#[unstable(feature = \"thread_sleep\", reason = \"waiting on Duration\",\n+           issue = \"27771\")]\n pub fn sleep(dur: Duration) {\n     imp::Thread::sleep(dur)\n }\n@@ -479,7 +481,8 @@ pub fn park_timeout_ms(ms: u32) {\n ///\n /// Platforms which do not support nanosecond precision for sleeping will have\n /// `dur` rounded up to the nearest granularity of time they can sleep for.\n-#[unstable(feature = \"park_timeout\", reason = \"waiting on Duration\")]\n+#[unstable(feature = \"park_timeout\", reason = \"waiting on Duration\",\n+           issue = \"27771\")]\n pub fn park_timeout(dur: Duration) {\n     let thread = current();\n     let mut guard = thread.inner.lock.lock().unwrap();\n@@ -552,7 +555,7 @@ impl thread_info::NewThread for Thread {\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n-// JoinHandle and JoinGuard\n+// JoinHandle\n ////////////////////////////////////////////////////////////////////////////////\n \n /// Indicates the manner in which a thread exited.\n@@ -578,7 +581,7 @@ struct Packet<T>(Arc<UnsafeCell<Option<Result<T>>>>);\n unsafe impl<T: Send> Send for Packet<T> {}\n unsafe impl<T: Sync> Sync for Packet<T> {}\n \n-/// Inner representation for JoinHandle and JoinGuard\n+/// Inner representation for JoinHandle\n struct JoinInner<T> {\n     native: Option<imp::Thread>,\n     thread: Thread,\n@@ -596,8 +599,7 @@ impl<T> JoinInner<T> {\n \n /// An owned permission to join on a thread (block on its termination).\n ///\n-/// Unlike a `JoinGuard`, a `JoinHandle` *detaches* the child thread\n-/// when it is dropped, rather than automatically joining on drop.\n+/// A `JoinHandle` *detaches* the child thread when it is dropped.\n ///\n /// Due to platform restrictions, it is not possible to `Clone` this\n /// handle: the ability to join a child thread is a uniquely-owned\n@@ -622,63 +624,9 @@ impl<T> JoinHandle<T> {\n     }\n }\n \n-/// An RAII-style guard that will block until thread termination when dropped.\n-///\n-/// The type `T` is the return type for the thread's main function.\n-///\n-/// Joining on drop is necessary to ensure memory safety when stack\n-/// data is shared between a parent and child thread.\n-///\n-/// Due to platform restrictions, it is not possible to `Clone` this\n-/// handle: the ability to join a child thread is a uniquely-owned\n-/// permission.\n-#[must_use = \"thread will be immediately joined if `JoinGuard` is not used\"]\n-#[unstable(feature = \"scoped\",\n-           reason = \"memory unsafe if destructor is avoided, see #24292\")]\n-pub struct JoinGuard<'a, T: Send + 'a> {\n-    inner: JoinInner<T>,\n-    _marker: PhantomData<&'a T>,\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Send + 'a> Sync for JoinGuard<'a, T> {}\n-\n-impl<'a, T: Send + 'a> JoinGuard<'a, T> {\n-    /// Extracts a handle to the thread this guard will join on.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn thread(&self) -> &Thread {\n-        &self.inner.thread\n-    }\n-\n-    /// Waits for the associated thread to finish, returning the result of the\n-    /// thread's calculation.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics on the child thread are propagated by panicking the parent.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn join(mut self) -> T {\n-        match self.inner.join() {\n-            Ok(res) => res,\n-            Err(_) => panic!(\"child thread {:?} panicked\", self.thread()),\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"scoped\",\n-           reason = \"memory unsafe if destructor is avoided, see #24292\")]\n-impl<'a, T: Send + 'a> Drop for JoinGuard<'a, T> {\n-    fn drop(&mut self) {\n-        if self.inner.native.is_some() && self.inner.join().is_err() {\n-            panic!(\"child thread {:?} panicked\", self.thread());\n-        }\n-    }\n-}\n-\n fn _assert_sync_and_send() {\n     fn _assert_both<T: Send + Sync>() {}\n     _assert_both::<JoinHandle<()>>();\n-    _assert_both::<JoinGuard<()>>();\n     _assert_both::<Thread>();\n }\n "}, {"sha": "bfcaabdbc17b8df170b7de15007a14bbbf25772c", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -40,7 +40,7 @@\n //! });\n //! ```\n \n-#![unstable(feature = \"thread_local_internals\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n #[doc(hidden)]\n pub use self::imp::KeyInner as __KeyInner;\n@@ -54,7 +54,8 @@ pub use self::imp::KeyInner as __KeyInner;\n /// their contents.\n #[unstable(feature = \"scoped_tls\",\n            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n-                     stabilizing its interface\")]\n+                     stabilizing its interface\",\n+           issue = \"27715\")]\n pub struct ScopedKey<T:'static> { inner: fn() -> &'static imp::KeyInner<T> }\n \n /// Declare a new scoped thread local storage key.\n@@ -116,7 +117,8 @@ macro_rules! __scoped_thread_local_inner {\n \n #[unstable(feature = \"scoped_tls\",\n            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n-                     stabilizing its interface\")]\n+                     stabilizing its interface\",\n+           issue = \"27715\")]\n impl<T> ScopedKey<T> {\n     #[doc(hidden)]\n     pub const fn new(inner: fn() -> &'static imp::KeyInner<T>) -> ScopedKey<T> {"}, {"sha": "2135b85103294480e61df0a95f82209189195976", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f625620b5e4e29919400a0ee863942e5bf3d970/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=5f625620b5e4e29919400a0ee863942e5bf3d970", "patch": "@@ -64,7 +64,8 @@ impl Duration {\n     #[unstable(feature = \"duration_span\",\n                reason = \"unsure if this is the right API or whether it should \\\n                          wait for a more general \\\"moment in time\\\" \\\n-                         abstraction\")]\n+                         abstraction\",\n+               issue = \"27799\")]\n     pub fn span<F>(f: F) -> Duration where F: FnOnce() {\n         let start = SteadyTime::now();\n         f();"}]}