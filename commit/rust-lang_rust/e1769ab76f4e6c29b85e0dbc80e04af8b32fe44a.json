{"sha": "e1769ab76f4e6c29b85e0dbc80e04af8b32fe44a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNzY5YWI3NmY0ZTZjMjliODVlMGRiYzgwZTA0YWY4YjMyZmU0NGE=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-23T06:56:02Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-26T22:53:00Z"}, "message": "Clean up long strings and indentation.", "tree": {"sha": "95c1cbe26f2cc047bb80883d25cde822bf464dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95c1cbe26f2cc047bb80883d25cde822bf464dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1769ab76f4e6c29b85e0dbc80e04af8b32fe44a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1769ab76f4e6c29b85e0dbc80e04af8b32fe44a", "html_url": "https://github.com/rust-lang/rust/commit/e1769ab76f4e6c29b85e0dbc80e04af8b32fe44a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1769ab76f4e6c29b85e0dbc80e04af8b32fe44a/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "821c1e7a44fab09b61f27e1e5e1ad13723f76f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/821c1e7a44fab09b61f27e1e5e1ad13723f76f02", "html_url": "https://github.com/rust-lang/rust/commit/821c1e7a44fab09b61f27e1e5e1ad13723f76f02"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "c78b412bee0c8f7a09f2bc5302a703cfd3ed5a05", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e1769ab76f4e6c29b85e0dbc80e04af8b32fe44a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1769ab76f4e6c29b85e0dbc80e04af8b32fe44a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e1769ab76f4e6c29b85e0dbc80e04af8b32fe44a", "patch": "@@ -539,8 +539,8 @@ fn simplify_type(&@crate_ctxt ccx, &ty::t typ) -> ty::t {\n fn static_size_of_tag(&@crate_ctxt cx, &span sp, &ty::t t) -> uint {\n     if (ty::type_has_dynamic_size(cx.tcx, t)) {\n         cx.tcx.sess.span_fatal(sp,\n-                             \"dynamically sized type passed to \" +\n-                                 \"static_size_of_tag()\");\n+                               \"dynamically sized type passed to \\\n+                               static_size_of_tag()\");\n     }\n     if (cx.tag_sizes.contains_key(t)) { ret cx.tag_sizes.get(t); }\n     alt (ty::struct(cx.tcx, t)) {\n@@ -565,8 +565,7 @@ fn static_size_of_tag(&@crate_ctxt cx, &span sp, &ty::t t) -> uint {\n         }\n         case (_) {\n             cx.tcx.sess.span_fatal(sp,\n-                                 \"non-tag passed to \" +\n-                                     \"static_size_of_tag()\");\n+                                   \"non-tag passed to static_size_of_tag()\");\n         }\n     }\n }\n@@ -1683,7 +1682,7 @@ fn make_cmp_glue(&@block_ctxt cx, ValueRef lhs0, ValueRef rhs0, &ty::t t,\n \n         trans_fail(cx, none[span],\n                    \"attempt to compare values of type \" +\n-                       ty_to_str(bcx_tcx(cx), t));\n+                   ty_to_str(bcx_tcx(cx), t));\n     }\n }\n \n@@ -1740,8 +1739,8 @@ fn compare_scalar_types(@block_ctxt cx, ValueRef lhs, ValueRef rhs, &ty::t t,\n         }\n         case (_) {\n             // Should never get here, because t is scalar.\n-            bcx_ccx(cx).sess.bug(\"non-scalar type passed to \" +\n-                                    \"compare_scalar_types\");\n+            bcx_ccx(cx).sess.bug(\"non-scalar type passed to \\\n+                                 compare_scalar_types\");\n         }\n     }\n }\n@@ -2188,9 +2187,9 @@ fn iter_sequence(@block_ctxt cx, ValueRef v, &ty::t t, &val_and_ty_fn f) ->\n             ret iter_sequence_body(cx, v, et, f, true, true);\n         }\n         case (_) {\n-            bcx_ccx(cx).sess.bug(\"unexpected type in \" +\n-                                        \"trans::iter_sequence: \" +\n-                                        ty_to_str(bcx_tcx(cx), t));\n+            bcx_ccx(cx).sess.bug(\"unexpected type in \\\n+                                 trans::iter_sequence: \" +\n+                                 ty_to_str(cx.fcx.lcx.ccx.tcx, t));\n         }\n     }\n }\n@@ -2772,9 +2771,9 @@ fn trans_unary(&@block_ctxt cx, ast::unop op, &@ast::expr e,\n             ret rslt(sub.bcx, box);\n         }\n         case (ast::deref) {\n-            bcx_ccx(cx).sess.bug(\"deref expressions should have been \" +\n-                                        \"translated using trans_lval(), not \"\n-                                        + \"trans_unary()\");\n+            bcx_ccx(cx).sess.bug(\"deref expressions should have been \\\n+                                 translated using trans_lval(), not \\\n+                                 trans_unary()\");\n         }\n     }\n }\n@@ -4326,10 +4325,9 @@ fn trans_lval_gen(&@block_ctxt cx, &@ast::expr e) -> lval_result {\n                 }\n                 case (_) {\n                     // Shouldn't happen.\n-\n-                    bcx_ccx(cx).sess.bug(\"trans_lval called on \" +\n-                                                \"expr_self_method in \" +\n-                                                \"a context without llself\");\n+                    bcx_ccx(cx).sess.bug(\"trans_lval called on \\\n+                                         expr_self_method in \\\n+                                         a context without llself\");\n                 }\n             }\n         }\n@@ -5624,7 +5622,7 @@ fn trans_fail_expr(&@block_ctxt cx, &option::t[span] sp_opt,\n             } else {\n                 bcx_ccx(cx).sess.span_bug(expr.span,\n                                              \"fail called with unsupported \\\n-                                              type \" + ty_to_str(tcx, e_ty));\n+                                             type \" + ty_to_str(tcx, e_ty));\n             }\n         }\n         case (_) {\n@@ -7422,7 +7420,7 @@ fn trans_tag_variant(@local_ctxt cx, ast::node_id tag_id,\n             }\n             case (none) {\n                 bcx_ccx(bcx).sess.bug(\"unbound argptr in \\\n-                   trans_tag_variant\");\n+                                      trans_tag_variant\");\n             }\n         }\n         auto arg_ty = arg_tys.(i).ty;\n@@ -7639,8 +7637,8 @@ fn native_fn_ty_param_count(&@crate_ctxt cx, ast::node_id id) -> uint {\n     };\n     alt (native_item.node) {\n         case (ast::native_item_ty) {\n-            cx.sess.bug(\"decl_native_fn_and_pair(): native fn isn't \" +\n-                            \"actually a fn\");\n+            cx.sess.bug(\"decl_native_fn_and_pair(): native fn isn't \\\n+                        actually a fn\");\n         }\n         case (ast::native_item_fn(_, _, ?tps)) {\n             count = std::ivec::len[ast::ty_param](tps);"}]}