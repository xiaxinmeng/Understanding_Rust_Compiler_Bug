{"sha": "a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MDZkNGNiZmU4ZjIwYTI3MjVjN2VmZDlkNDMzNTlhMGJiZDBlOWU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-01-18T00:15:52Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-01-21T16:11:07Z"}, "message": "Fallout from stabilization.", "tree": {"sha": "d3cc252236786a58efbdd2b3c4bf3f12af88039e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3cc252236786a58efbdd2b3c4bf3f12af88039e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "html_url": "https://github.com/rust-lang/rust/commit/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092ba6a8563b5c95f5aa53a705eaba6cc94e2da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/092ba6a8563b5c95f5aa53a705eaba6cc94e2da7", "html_url": "https://github.com/rust-lang/rust/commit/092ba6a8563b5c95f5aa53a705eaba6cc94e2da7"}], "stats": {"total": 251, "additions": 126, "deletions": 125}, "files": [{"sha": "d7af767688e81e7ecc92dc001ed6bf14d4f6e6c9", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -332,8 +332,7 @@ pub fn parse_name_value_directive(line: &str, directive: &str)\n     let keycolon = format!(\"{}:\", directive);\n     match line.find_str(keycolon.as_slice()) {\n         Some(colon) => {\n-            let value = line.slice(colon + keycolon.len(),\n-                                   line.len()).to_string();\n+            let value = line[(colon + keycolon.len()) .. line.len()].to_string();\n             debug!(\"{}: {}\", directive, value);\n             Some(value)\n         }"}, {"sha": "8936c20cefdfd321935745cd08218ee8083518e4", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -862,7 +862,7 @@ fn check_debugger_output(debugger_run_result: &ProcRes, check_lines: &[String])\n                         break;\n                     }\n                     Some(i) => {\n-                        rest = rest.slice_from(i + frag.len());\n+                        rest = &rest[(i + frag.len())..];\n                     }\n                 }\n                 first = false;\n@@ -1045,7 +1045,7 @@ fn scan_until_char(haystack: &str, needle: char, idx: &mut uint) -> bool {\n     if *idx >= haystack.len() {\n         return false;\n     }\n-    let opt = haystack.slice_from(*idx).find(needle);\n+    let opt = haystack[(*idx)..].find(needle);\n     if opt.is_none() {\n         return false;\n     }"}, {"sha": "a7c37ba8e07edccb28b204a5cbd0a6db577b0d73", "filename": "src/doc/intro.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -485,9 +485,9 @@ fn main() {\n         Thread::spawn(move || {\n             let mut array = number.lock().unwrap();\n \n-            (*array)[i] += 1;\n+            array[i as usize] += 1;\n \n-            println!(\"numbers[{}] is {}\", i, (*array)[i]);\n+            println!(\"numbers[{}] is {}\", i, array[i as usize]);\n         });\n     }\n }"}, {"sha": "50857c78469cf1a24cf5e24c556b7b0d679209a4", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -21,7 +21,7 @@ use core::prelude::*;\n use core::borrow::BorrowFrom;\n use core::cmp::Ordering::{Greater, Less, Equal};\n use core::iter::Zip;\n-use core::ops::{Deref, DerefMut};\n+use core::ops::{Deref, DerefMut, Index, IndexMut};\n use core::ptr::Unique;\n use core::{slice, mem, ptr, cmp, num, raw};\n use alloc::heap;\n@@ -1487,7 +1487,7 @@ impl<K, V, E, Impl> AbsTraversal<Impl>\n \n macro_rules! node_slice_impl {\n     ($NodeSlice:ident, $Traversal:ident,\n-     $as_slices_internal:ident, $slice_from:ident, $slice_to:ident, $iter:ident) => {\n+     $as_slices_internal:ident, $index:ident, $iter:ident) => {\n         impl<'a, K: Ord + 'a, V: 'a> $NodeSlice<'a, K, V> {\n             /// Performs linear search in a slice. Returns a tuple of (index, is_exact_match).\n             fn search_linear<Q: ?Sized>(&self, key: &Q) -> (uint, bool)\n@@ -1521,10 +1521,10 @@ macro_rules! node_slice_impl {\n                     edges: if !self.has_edges {\n                         self.edges\n                     } else {\n-                        self.edges.$slice_from(pos)\n+                        self.edges.$index(&(pos ..))\n                     },\n-                    keys: self.keys.slice_from(pos),\n-                    vals: self.vals.$slice_from(pos),\n+                    keys: &self.keys[pos ..],\n+                    vals: self.vals.$index(&(pos ..)),\n                     head_is_edge: !pos_is_kv,\n                     tail_is_edge: self.tail_is_edge,\n                 }\n@@ -1550,10 +1550,10 @@ macro_rules! node_slice_impl {\n                     edges: if !self.has_edges {\n                         self.edges\n                     } else {\n-                        self.edges.$slice_to(pos + 1)\n+                        self.edges.$index(&(.. (pos + 1)))\n                     },\n-                    keys: self.keys.slice_to(pos),\n-                    vals: self.vals.$slice_to(pos),\n+                    keys: &self.keys[..pos],\n+                    vals: self.vals.$index(&(.. pos)),\n                     head_is_edge: self.head_is_edge,\n                     tail_is_edge: !pos_is_kv,\n                 }\n@@ -1583,6 +1583,5 @@ macro_rules! node_slice_impl {\n     }\n }\n \n-node_slice_impl!(NodeSlice, Traversal, as_slices_internal, slice_from, slice_to, iter);\n-node_slice_impl!(MutNodeSlice, MutTraversal, as_slices_internal_mut, slice_from_mut,\n-                                                                     slice_to_mut, iter_mut);\n+node_slice_impl!(NodeSlice, Traversal, as_slices_internal, index, iter);\n+node_slice_impl!(MutNodeSlice, MutTraversal, as_slices_internal_mut, index_mut, iter_mut);"}, {"sha": "69d64bcdf6d5cb7ab6843325bb78df7256494834", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -578,7 +578,7 @@ impl<T> RingBuf<T> {\n \n             if contiguous {\n                 let (empty, buf) = buf.split_at_mut(0);\n-                (buf.slice_mut(tail, head), empty)\n+                (&mut buf[tail .. head], empty)\n             } else {\n                 let (mid, right) = buf.split_at_mut(tail);\n                 let (left, _) = mid.split_at_mut(head);"}, {"sha": "16e5a89f343b54c972645b7203cb02c8d102697d", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -686,7 +686,7 @@ impl<T> SliceExt for [T] {\n \n     #[inline]\n     fn move_from(&mut self, mut src: Vec<T>, start: uint, end: uint) -> uint {\n-        for (a, b) in self.iter_mut().zip(src.slice_mut(start, end).iter_mut()) {\n+        for (a, b) in self.iter_mut().zip(src[start .. end].iter_mut()) {\n             mem::swap(a, b);\n         }\n         cmp::min(self.len(), end-start)"}, {"sha": "6608d0ee9a7ec92ddab020fbbb3a17e6f2988dc7", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -752,21 +752,15 @@ pub trait StrExt: Index<FullRange, Output = str> {\n \n     /// Deprecated: use `s[a .. b]` instead.\n     #[deprecated = \"use slice notation [a..b] instead\"]\n-    fn slice(&self, begin: uint, end: uint) -> &str {\n-        core_str::StrExt::slice(&self[], begin, end)\n-    }\n+    fn slice(&self, begin: uint, end: uint) -> &str;\n \n     /// Deprecated: use `s[a..]` instead.\n     #[deprecated = \"use slice notation [a..] instead\"]\n-    fn slice_from(&self, begin: uint) -> &str {\n-        core_str::StrExt::slice_from(&self[], begin)\n-    }\n+    fn slice_from(&self, begin: uint) -> &str;\n \n     /// Deprecated: use `s[..a]` instead.\n     #[deprecated = \"use slice notation [..a] instead\"]\n-    fn slice_to(&self, end: uint) -> &str {\n-        core_str::StrExt::slice_to(&self[], end)\n-    }\n+    fn slice_to(&self, end: uint) -> &str;\n \n     /// Returns a slice of the string from the character range\n     /// [`begin`..`end`).\n@@ -1304,7 +1298,19 @@ pub trait StrExt: Index<FullRange, Output = str> {\n }\n \n #[stable]\n-impl StrExt for str {}\n+impl StrExt for str {\n+    fn slice(&self, begin: uint, end: uint) -> &str {\n+        &self[begin..end]\n+    }\n+\n+    fn slice_from(&self, begin: uint) -> &str {\n+        &self[begin..]\n+    }\n+\n+    fn slice_to(&self, end: uint) -> &str {\n+        &self[..end]\n+    }\n+}\n \n #[cfg(test)]\n mod tests {"}, {"sha": "245dc00d838244cf7746107a3e7773eef1aa2cfc", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -179,7 +179,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n         _ => ()\n     }\n \n-    buf.slice_to_mut(end).reverse();\n+    buf[..end].reverse();\n \n     // Remember start of the fractional digits.\n     // Points one beyond end of buf if none get generated,\n@@ -316,7 +316,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n \n             impl<'a> fmt::Writer for Filler<'a> {\n                 fn write_str(&mut self, s: &str) -> fmt::Result {\n-                    slice::bytes::copy_memory(self.buf.slice_from_mut(*self.end),\n+                    slice::bytes::copy_memory(&mut self.buf[(*self.end)..],\n                                               s.as_bytes());\n                     *self.end += s.len();\n                     Ok(())"}, {"sha": "3332e06e19e74e25220a5087537ed5100f92085b", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -174,7 +174,7 @@ impl<'a> SeedableRng<&'a [u32]> for ChaChaRng {\n         // reset state\n         self.init(&[0u32; KEY_WORDS]);\n         // set key in place\n-        let key = self.state.slice_mut(4, 4+KEY_WORDS);\n+        let key = &mut self.state[4 .. 4+KEY_WORDS];\n         for (k, s) in key.iter_mut().zip(seed.iter()) {\n             *k = *s;\n         }\n@@ -292,4 +292,3 @@ mod test {\n         }\n     }\n }\n-"}, {"sha": "9c746c69baafcf1f72eafc6df0b5eca5c3a24636", "filename": "src/librbml/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrbml%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrbml%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Fio.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -103,7 +103,7 @@ impl Writer for SeekableMemWriter {\n \n             // Do the necessary writes\n             if left.len() > 0 {\n-                slice::bytes::copy_memory(self.buf.slice_from_mut(self.pos), left);\n+                slice::bytes::copy_memory(&mut self.buf[self.pos..], left);\n             }\n             if right.len() > 0 {\n                 self.buf.push_all(right);"}, {"sha": "3cdc0be45a6089820fbac478c5310187853b50bd", "filename": "src/libregex/re.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -459,7 +459,7 @@ impl<'t> Captures<'t> {\n     pub fn at(&self, i: uint) -> Option<&'t str> {\n         match self.pos(i) {\n             None => None,\n-            Some((s, e)) => Some(self.text.slice(s, e))\n+            Some((s, e)) => Some(&self.text[s.. e])\n         }\n     }\n "}, {"sha": "7b7159da4385df37d9536543846695990caaf599", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -242,7 +242,7 @@ impl MetadataBlob {\n                        ((slice[2] as u32) << 8) |\n                        ((slice[3] as u32) << 0)) as uint;\n             if len + 4 <= slice.len() {\n-                slice.slice(4, len + 4)\n+                &slice[4.. len + 4]\n             } else {\n                 &[] // corrupt or old metadata\n             }"}, {"sha": "b1043a4152cfc74d1867f49a9313756f49a32483", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -392,11 +392,11 @@ impl<'a> Context<'a> {\n             };\n             let (hash, rlib) = if file.starts_with(&rlib_prefix[]) &&\n                     file.ends_with(\".rlib\") {\n-                (file.slice(rlib_prefix.len(), file.len() - \".rlib\".len()),\n+                (&file[(rlib_prefix.len()) .. (file.len() - \".rlib\".len())],\n                  true)\n             } else if file.starts_with(dylib_prefix.as_slice()) &&\n                       file.ends_with(dypair.1.as_slice()) {\n-                (file.slice(dylib_prefix.len(), file.len() - dypair.1.len()),\n+                (&file[(dylib_prefix.len()) .. (file.len() - dypair.1.len())],\n                  false)\n             } else {\n                 return FileDoesntMatch"}, {"sha": "1a2162b3076ece7a2a85affafe7f025635796369", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -424,7 +424,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             }\n \n             ast::ExprMethodCall(_, _, ref args) => {\n-                self.call(expr, pred, &*args[0], args.slice_from(1).iter().map(|e| &**e))\n+                self.call(expr, pred, &*args[0], args[1..].iter().map(|e| &**e))\n             }\n \n             ast::ExprIndex(ref l, ref r) |"}, {"sha": "a17278698103167229069e82b10248c4ff08b49f", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -118,17 +118,17 @@ impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O\n             assert!(self.bits_per_id > 0);\n             let cfgidx = to_cfgidx_or_die(id, &self.nodeid_to_index);\n             let (start, end) = self.compute_id_range(cfgidx);\n-            let on_entry = self.on_entry.slice(start, end);\n+            let on_entry = &self.on_entry[start.. end];\n             let entry_str = bits_to_string(on_entry);\n \n-            let gens = self.gens.slice(start, end);\n+            let gens = &self.gens[start.. end];\n             let gens_str = if gens.iter().any(|&u| u != 0) {\n                 format!(\" gen: {}\", bits_to_string(gens))\n             } else {\n                 \"\".to_string()\n             };\n \n-            let kills = self.kills.slice(start, end);\n+            let kills = &self.kills[start .. end];\n             let kills_str = if kills.iter().any(|&u| u != 0) {\n                 format!(\" kill: {}\", bits_to_string(kills))\n             } else {\n@@ -232,7 +232,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n         let cfgidx = to_cfgidx_or_die(id, &self.nodeid_to_index);\n         let (start, end) = self.compute_id_range(cfgidx);\n-        let gens = self.gens.slice_mut(start, end);\n+        let gens = &mut self.gens[start.. end];\n         set_bit(gens, bit);\n     }\n \n@@ -245,7 +245,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n         let cfgidx = to_cfgidx_or_die(id, &self.nodeid_to_index);\n         let (start, end) = self.compute_id_range(cfgidx);\n-        let kills = self.kills.slice_mut(start, end);\n+        let kills = &mut self.kills[start.. end];\n         set_bit(kills, bit);\n     }\n \n@@ -256,9 +256,9 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         assert!(self.bits_per_id > 0);\n \n         let (start, end) = self.compute_id_range(cfgidx);\n-        let gens = self.gens.slice(start, end);\n+        let gens = &self.gens[start.. end];\n         bitwise(bits, gens, &Union);\n-        let kills = self.kills.slice(start, end);\n+        let kills = &self.kills[start.. end];\n         bitwise(bits, kills, &Subtract);\n \n         debug!(\"{} apply_gen_kill(cfgidx={:?}, bits={}) [after]\",\n@@ -304,7 +304,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         }\n \n         let (start, end) = self.compute_id_range(cfgidx);\n-        let on_entry = self.on_entry.slice(start, end);\n+        let on_entry = &self.on_entry[start.. end];\n         let temp_bits;\n         let slice = match e {\n             Entry => on_entry,\n@@ -336,7 +336,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n         let cfgidx = to_cfgidx_or_die(id, &self.nodeid_to_index);\n         let (start, end) = self.compute_id_range(cfgidx);\n-        let gens = self.gens.slice(start, end);\n+        let gens = &self.gens[start.. end];\n         debug!(\"{} each_gen_bit(id={}, gens={})\",\n                self.analysis_name, id, bits_to_string(gens));\n         self.each_bit(gens, f)\n@@ -396,15 +396,15 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         cfg.graph.each_edge(|_edge_index, edge| {\n             let flow_exit = edge.source();\n             let (start, end) = self.compute_id_range(flow_exit);\n-            let mut orig_kills = self.kills.slice(start, end).to_vec();\n+            let mut orig_kills = self.kills[start.. end].to_vec();\n \n             let mut changed = false;\n             for &node_id in edge.data.exiting_scopes.iter() {\n                 let opt_cfg_idx = self.nodeid_to_index.get(&node_id).map(|&i|i);\n                 match opt_cfg_idx {\n                     Some(cfg_idx) => {\n                         let (start, end) = self.compute_id_range(cfg_idx);\n-                        let kills = self.kills.slice(start, end);\n+                        let kills = &self.kills[start.. end];\n                         if bitwise(orig_kills.as_mut_slice(), kills, &Union) {\n                             changed = true;\n                         }\n@@ -418,7 +418,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n             }\n \n             if changed {\n-                let bits = self.kills.slice_mut(start, end);\n+                let bits = &mut self.kills[start.. end];\n                 debug!(\"{} add_kills_from_flow_exits flow_exit={:?} bits={} [before]\",\n                        self.analysis_name, flow_exit, mut_bits_to_string(bits));\n                 bits.clone_from_slice(&orig_kills[]);\n@@ -487,7 +487,7 @@ impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> {\n             let (start, end) = self.dfcx.compute_id_range(node_index);\n \n             // Initialize local bitvector with state on-entry.\n-            in_out.clone_from_slice(self.dfcx.on_entry.slice(start, end));\n+            in_out.clone_from_slice(&self.dfcx.on_entry[start.. end]);\n \n             // Compute state on-exit by applying transfer function to\n             // state on-entry.\n@@ -528,13 +528,13 @@ impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> {\n         let (start, end) = self.dfcx.compute_id_range(cfgidx);\n         let changed = {\n             // (scoping mutable borrow of self.dfcx.on_entry)\n-            let on_entry = self.dfcx.on_entry.slice_mut(start, end);\n+            let on_entry = &mut self.dfcx.on_entry[start.. end];\n             bitwise(on_entry, pred_bits, &self.dfcx.oper)\n         };\n         if changed {\n             debug!(\"{} changed entry set for {:?} to {}\",\n                    self.dfcx.analysis_name, cfgidx,\n-                   bits_to_string(self.dfcx.on_entry.slice(start, end)));\n+                   bits_to_string(&self.dfcx.on_entry[start.. end]));\n             self.changed = true;\n         }\n     }"}, {"sha": "9339f435d8fa01853080f199079612fb11b3ca14", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -609,8 +609,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n     pub fn vars_created_since_snapshot(&self, mark: &RegionSnapshot)\n                                        -> Vec<RegionVid>\n     {\n-        self.undo_log.borrow()\n-            .slice_from(mark.length)\n+        self.undo_log.borrow()[mark.length..]\n             .iter()\n             .filter_map(|&elt| match elt {\n                 AddVar(vid) => Some(vid),\n@@ -637,7 +636,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             debug!(\"result_index={}, r={:?}\", result_index, r);\n \n             for undo_entry in\n-                self.undo_log.borrow().slice_from(mark.length).iter()\n+                self.undo_log.borrow()[mark.length..].iter()\n             {\n                 match undo_entry {\n                     &AddConstraint(ConstrainVarSubVar(a, b)) => {"}, {"sha": "031eb26300f26119a0c3278824a90fd029ee6d76", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -373,12 +373,12 @@ impl<T> VecPerParamSpace<T> {\n \n     pub fn get_slice<'a>(&'a self, space: ParamSpace) -> &'a [T] {\n         let (start, limit) = self.limits(space);\n-        self.content.slice(start, limit)\n+        &self.content[start.. limit]\n     }\n \n     pub fn get_mut_slice<'a>(&'a mut self, space: ParamSpace) -> &'a mut [T] {\n         let (start, limit) = self.limits(space);\n-        self.content.slice_mut(start, limit)\n+        &mut self.content[start.. limit]\n     }\n \n     pub fn opt_get<'a>(&'a self,"}, {"sha": "dfc27d3ae684d1370611c95d43d75de579724619", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -36,13 +36,13 @@ impl SearchPaths {\n \n     pub fn add_path(&mut self, path: &str) {\n         let (kind, path) = if path.starts_with(\"native=\") {\n-            (PathKind::Native, path.slice_from(\"native=\".len()))\n+            (PathKind::Native, &path[\"native=\".len()..])\n         } else if path.starts_with(\"crate=\") {\n-            (PathKind::Crate, path.slice_from(\"crate=\".len()))\n+            (PathKind::Crate, &path[\"crate=\".len()..])\n         } else if path.starts_with(\"dependency=\") {\n-            (PathKind::Dependency, path.slice_from(\"dependency=\".len()))\n+            (PathKind::Dependency, &path[\"dependency=\".len()..])\n         } else if path.starts_with(\"all=\") {\n-            (PathKind::All, path.slice_from(\"all=\".len()))\n+            (PathKind::All, &path[\"all=\".len()..])\n         } else {\n             (PathKind::All, path)\n         };"}, {"sha": "0ade916f6390a34c0b6350e850ab9372a4eeafa7", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -370,7 +370,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n \n         for (i, &x) in new_loan_indices.iter().enumerate() {\n             let old_loan = &self.all_loans[x];\n-            for &y in new_loan_indices.slice_from(i+1).iter() {\n+            for &y in new_loan_indices[(i+1) ..].iter() {\n                 let new_loan = &self.all_loans[y];\n                 self.report_error_if_loans_conflict(old_loan, new_loan);\n             }"}, {"sha": "efa948f094261dadd4681c08fb4d255107688237", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -178,7 +178,7 @@ pub fn build_link_meta(sess: &Session, krate: &ast::Crate,\n fn truncated_hash_result(symbol_hasher: &mut Sha256) -> String {\n     let output = symbol_hasher.result_bytes();\n     // 64 bits should be enough to avoid collisions.\n-    output.slice_to(8).to_hex().to_string()\n+    output[.. 8].to_hex().to_string()\n }\n \n "}, {"sha": "c765698fc0cdbbe2a795a745dc2e4d3905979e9c", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -157,7 +157,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             return;\n         }\n \n-        let sub_paths = sub_paths.slice(0, len-1);\n+        let sub_paths = &sub_paths[.. (len-1)];\n         for &(ref span, ref qualname) in sub_paths.iter() {\n             self.fmt.sub_mod_ref_str(path.span,\n                                      *span,\n@@ -174,7 +174,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         if len <= 1 {\n             return;\n         }\n-        let sub_paths = sub_paths.slice_to(len-1);\n+        let sub_paths = &sub_paths[.. (len-1)];\n \n         // write the trait part of the sub-path\n         let (ref span, ref qualname) = sub_paths[len-2];"}, {"sha": "7d0ff5f2adc2b0abeff417e94b645f37d76b2bb8", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -1615,8 +1615,8 @@ fn compile_unit_metadata(cx: &CrateContext) -> DIDescriptor {\n                         let prefix: &[u8] = &[dotdot[0], ::std::path::SEP_BYTE];\n                         let mut path_bytes = p.as_vec().to_vec();\n \n-                        if path_bytes.slice_to(2) != prefix &&\n-                           path_bytes.slice_to(2) != dotdot {\n+                        if &path_bytes[..2] != prefix &&\n+                           &path_bytes[..2] != dotdot {\n                             path_bytes.insert(0, prefix[0]);\n                             path_bytes.insert(1, prefix[1]);\n                         }\n@@ -4122,4 +4122,3 @@ fn needs_gdb_debug_scripts_section(ccx: &CrateContext) -> bool {\n     !ccx.sess().target.target.options.is_like_windows &&\n     ccx.sess().opts.debuginfo != NoDebugInfo\n }\n-"}, {"sha": "2a893a6cfdfe5fcfcd990407b0a050984c57c1d5", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -494,7 +494,7 @@ pub fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ty::ty_bare_fn(_, ref f) if f.abi == Rust || f.abi == RustCall => {\n             let fake_sig =\n                 ty::Binder(ty::FnSig {\n-                    inputs: f.sig.0.inputs.slice_from(1).to_vec(),\n+                    inputs: f.sig.0.inputs[1..].to_vec(),\n                     output: f.sig.0.output,\n                     variadic: f.sig.0.variadic,\n                 });\n@@ -634,7 +634,7 @@ pub fn trans_object_shim<'a, 'tcx>(\n             }\n             _ => {\n                 // skip the self parameter:\n-                sig.inputs.slice_from(1)\n+                &sig.inputs[1..]\n             }\n         };\n "}, {"sha": "428c5680a48f2a7afb81f674cfee2c14b088bb9f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -1321,7 +1321,7 @@ fn ty_of_method_or_bare_fn<'a, 'tcx>(this: &AstConv<'tcx>,\n \n     // HACK(eddyb) replace the fake self type in the AST with the actual type.\n     let input_params = if self_ty.is_some() {\n-        decl.inputs.slice_from(1)\n+        &decl.inputs[1..]\n     } else {\n         &decl.inputs[]\n     };\n@@ -1339,9 +1339,9 @@ fn ty_of_method_or_bare_fn<'a, 'tcx>(this: &AstConv<'tcx>,\n     let lifetimes_for_params = if implied_output_region.is_none() {\n         let input_tys = if self_ty.is_some() {\n             // Skip the first argument if `self` is present.\n-            self_and_input_tys.slice_from(1)\n+            &self_and_input_tys[1..]\n         } else {\n-            self_and_input_tys.slice_from(0)\n+            &self_and_input_tys[]\n         };\n \n         let (ior, lfp) = find_implied_output_region(input_tys, input_pats);\n@@ -1665,7 +1665,7 @@ fn compute_opt_region_bound<'tcx>(tcx: &ty::ctxt<'tcx>,\n     // of derived region bounds. If so, use that. Otherwise, report an\n     // error.\n     let r = derived_region_bounds[0];\n-    if derived_region_bounds.slice_from(1).iter().any(|r1| r != *r1) {\n+    if derived_region_bounds[1..].iter().any(|r1| r != *r1) {\n         tcx.sess.span_err(\n             span,\n             &format!(\"ambiguous lifetime bound, \\"}, {"sha": "e4b28bf5648c0bc9741e123c05fdb1a3e8da4d2c", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -531,7 +531,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n \n         ast::ExprMethodCall(_, _, ref args) => {\n             constrain_call(rcx, expr, Some(&*args[0]),\n-                           args.slice_from(1).iter().map(|e| &**e), false);\n+                           args[1..].iter().map(|e| &**e), false);\n \n             visit::walk_expr(rcx, expr);\n         }"}, {"sha": "a7bad3dc789aaadcf981e58d42add7d394d6ffca", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -65,7 +65,7 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n                 continue;\n             }\n \n-            for &impl2_def_id in trait_impls.slice_from(i+1).iter() {\n+            for &impl2_def_id in trait_impls[(i+1)..].iter() {\n                 self.check_if_impls_overlap(trait_def_id,\n                                             impl1_def_id,\n                                             impl2_def_id);"}, {"sha": "db7253c9ef3dd6bae519674f0f6898f4942ef79a", "filename": "src/librustdoc/html/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fescape.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -29,7 +29,7 @@ impl<'a> fmt::String for Escape<'a> {\n         for (i, ch) in s.bytes().enumerate() {\n             match ch as char {\n                 '<' | '>' | '&' | '\\'' | '\"' => {\n-                    try!(fmt.write_str(pile_o_bits.slice(last, i)));\n+                    try!(fmt.write_str(&pile_o_bits[last.. i]));\n                     let s = match ch as char {\n                         '>' => \"&gt;\",\n                         '<' => \"&lt;\",\n@@ -46,7 +46,7 @@ impl<'a> fmt::String for Escape<'a> {\n         }\n \n         if last < s.len() {\n-            try!(fmt.write_str(pile_o_bits.slice_from(last)));\n+            try!(fmt.write_str(&pile_o_bits[last..]));\n         }\n         Ok(())\n     }"}, {"sha": "1c800771c70ba48011ee73775a33faab6e0accce", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -146,7 +146,7 @@ extern {\n fn stripped_filtered_line<'a>(s: &'a str) -> Option<&'a str> {\n     let trimmed = s.trim();\n     if trimmed.starts_with(\"# \") {\n-        Some(trimmed.slice_from(2))\n+        Some(&trimmed[2..])\n     } else {\n         None\n     }"}, {"sha": "ea535a1490b06a1108931ed931193a279771c2e0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -749,7 +749,7 @@ impl<'a> SourceCollector<'a> {\n \n         // Remove the utf-8 BOM if any\n         let contents = if contents.starts_with(\"\\u{feff}\") {\n-            contents.slice_from(3)\n+            &contents[3..]\n         } else {\n             contents\n         };\n@@ -1469,7 +1469,7 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n fn shorter<'a>(s: Option<&'a str>) -> &'a str {\n     match s {\n         Some(s) => match s.find_str(\"\\n\\n\") {\n-            Some(pos) => s.slice_to(pos),\n+            Some(pos) => &s[..pos],\n             None => s,\n         },\n         None => \"\""}, {"sha": "594cf3dcd43992d0a6dfeefd17a46fe9f0d11b80", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -28,10 +28,10 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n     for line in s.lines() {\n         if line.starts_with(\"%\") {\n             // remove %<whitespace>\n-            metadata.push(line.slice_from(1).trim_left())\n+            metadata.push(line[1..].trim_left())\n         } else {\n             let line_start_byte = s.subslice_offset(line);\n-            return (metadata, s.slice_from(line_start_byte));\n+            return (metadata, &s[line_start_byte..]);\n         }\n     }\n     // if we're here, then all lines were metadata % lines."}, {"sha": "34a23774e5b1bd7fd62cda494dee97fdc6c67e3d", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -357,7 +357,7 @@ pub fn unindent(s: &str) -> String {\n                 line.to_string()\n             } else {\n                 assert!(line.len() >= min_indent);\n-                line.slice_from(min_indent).to_string()\n+                line[min_indent..].to_string()\n             }\n         }).collect::<Vec<_>>().as_slice());\n         unindented.connect(\"\\n\")"}, {"sha": "6d6aaac22a24cb0e258cbfcde6ad0d2dca8b0ecd", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -115,7 +115,7 @@ impl Deref for CString {\n     type Target = [libc::c_char];\n \n     fn deref(&self) -> &[libc::c_char] {\n-        self.inner.slice_to(self.inner.len() - 1)\n+        &self.inner[..(self.inner.len() - 1)]\n     }\n }\n "}, {"sha": "2b293d6eef285b5b5e0da6a3b8b42267ae75f0cb", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -219,7 +219,7 @@ impl<W: Writer> Writer for BufferedWriter<W> {\n         if buf.len() > self.buf.len() {\n             self.inner.as_mut().unwrap().write(buf)\n         } else {\n-            let dst = self.buf.slice_from_mut(self.pos);\n+            let dst = &mut self.buf[self.pos..];\n             slice::bytes::copy_memory(dst, buf);\n             self.pos += buf.len();\n             Ok(())"}, {"sha": "4649012d454b0b99e5f1cbe43b8f4f92c2a5f38a", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -72,7 +72,7 @@ impl Buffer for ChanReader {\n         if self.closed {\n             Err(io::standard_error(io::EndOfFile))\n         } else {\n-            Ok(self.buf.slice_from(self.pos))\n+            Ok(&self.buf[self.pos..])\n         }\n     }\n \n@@ -88,7 +88,7 @@ impl Reader for ChanReader {\n         loop {\n             let count = match self.fill_buf().ok() {\n                 Some(src) => {\n-                    let dst = buf.slice_from_mut(num_read);\n+                    let dst = &mut buf[num_read..];\n                     let count = cmp::min(src.len(), dst.len());\n                     bytes::copy_memory(dst, &src[..count]);\n                     count"}, {"sha": "884582cbaa8ef17687163744662a7547beb44a04", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -160,7 +160,7 @@ impl Reader for MemReader {\n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {\n             let input = &self.buf[self.pos.. (self.pos + write_len)];\n-            let output = buf.slice_to_mut(write_len);\n+            let output = &mut buf[.. write_len];\n             assert_eq!(input.len(), output.len());\n             slice::bytes::copy_memory(output, input);\n         }\n@@ -205,11 +205,11 @@ impl<'a> Reader for &'a [u8] {\n         let write_len = min(buf.len(), self.len());\n         {\n             let input = &self[..write_len];\n-            let output = buf.slice_to_mut(write_len);\n+            let output = &mut buf[.. write_len];\n             slice::bytes::copy_memory(output, input);\n         }\n \n-        *self = self.slice_from(write_len);\n+        *self = &self[write_len..];\n \n         Ok(write_len)\n     }\n@@ -270,7 +270,7 @@ impl<'a> BufWriter<'a> {\n impl<'a> Writer for BufWriter<'a> {\n     #[inline]\n     fn write(&mut self, src: &[u8]) -> IoResult<()> {\n-        let dst = self.buf.slice_from_mut(self.pos);\n+        let dst = &mut self.buf[self.pos..];\n         let dst_len = dst.len();\n \n         if dst_len == 0 {\n@@ -350,7 +350,7 @@ impl<'a> Reader for BufReader<'a> {\n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {\n             let input = &self.buf[self.pos.. (self.pos + write_len)];\n-            let output = buf.slice_to_mut(write_len);\n+            let output = &mut buf[.. write_len];\n             assert_eq!(input.len(), output.len());\n             slice::bytes::copy_memory(output, input);\n         }"}, {"sha": "ba7c81bf3fbf9ecca281583047c810d9a8a2ee6c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -516,7 +516,7 @@ pub trait Reader {\n         while read < min {\n             let mut zeroes = 0;\n             loop {\n-                match self.read(buf.slice_from_mut(read)) {\n+                match self.read(&mut buf[read..]) {\n                     Ok(0) => {\n                         zeroes += 1;\n                         if zeroes >= NO_PROGRESS_LIMIT {\n@@ -1481,7 +1481,7 @@ pub trait Buffer: Reader {\n         {\n             let mut start = 1;\n             while start < width {\n-                match try!(self.read(buf.slice_mut(start, width))) {\n+                match try!(self.read(&mut buf[start .. width])) {\n                     n if n == width - start => break,\n                     n if n < width - start => { start += n; }\n                     _ => return Err(standard_error(InvalidInput)),"}, {"sha": "2c79d7a373def361b0ce7c599f7dcc521cfa2519", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -251,7 +251,7 @@ impl<'a> Parser<'a> {\n             assert!(head.len() + tail.len() <= 8);\n             let mut gs = [0u16; 8];\n             gs.clone_from_slice(head);\n-            gs.slice_mut(8 - tail.len(), 8).clone_from_slice(tail);\n+            gs[(8 - tail.len()) .. 8].clone_from_slice(tail);\n             Ipv6Addr(gs[0], gs[1], gs[2], gs[3], gs[4], gs[5], gs[6], gs[7])\n         }\n "}, {"sha": "e4bf38a9ef5d8e0d7de059153cc00c366aaa5934", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -48,7 +48,7 @@ impl<R: Reader> Reader for LimitReader<R> {\n         }\n \n         let len = cmp::min(self.limit, buf.len());\n-        let res = self.inner.read(buf.slice_to_mut(len));\n+        let res = self.inner.read(&mut buf[..len]);\n         match res {\n             Ok(len) => self.limit -= len,\n             _ => {}"}, {"sha": "1d3bf484edb9ab458150dbd6213b2884fb423da3", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -379,14 +379,14 @@ pub fn float_to_str_bytes_common<T: Float>(\n \n             // only resize buf if we actually remove digits\n             if i < buf_max_i {\n-                buf = buf.slice(0, i + 1).to_vec();\n+                buf = buf[.. (i + 1)].to_vec();\n             }\n         }\n     } // If exact and trailing '.', just cut that\n     else {\n         let max_i = buf.len() - 1;\n         if buf[max_i] == b'.' {\n-            buf = buf.slice(0, max_i).to_vec();\n+            buf = buf[.. max_i].to_vec();\n         }\n     }\n "}, {"sha": "bafbde2511dec6096816b5fc92e987b0f3cdba4a", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -65,7 +65,7 @@ mod imp {\n         let mut read = 0;\n         let len = v.len();\n         while read < len {\n-            let result = getrandom(v.slice_from_mut(read));\n+            let result = getrandom(&mut v[read..]);\n             if result == -1 {\n                 let err = errno() as libc::c_int;\n                 if err == libc::EINTR {"}, {"sha": "4023a0a4c100b3b86f5ee319bf857920048f248f", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -130,7 +130,7 @@ pub fn abort(args: fmt::Arguments) -> ! {\n     }\n     impl<'a> fmt::Writer for BufWriter<'a> {\n         fn write_str(&mut self, bytes: &str) -> fmt::Result {\n-            let left = self.buf.slice_from_mut(self.pos);\n+            let left = &mut self.buf[self.pos..];\n             let to_write = &bytes.as_bytes()[..cmp::min(bytes.len(), left.len())];\n             slice::bytes::copy_memory(left, to_write);\n             self.pos += to_write.len();"}, {"sha": "d069d9ee3b8b89889b378c4841db7ae5a8bfc7e7", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -42,10 +42,10 @@ pub fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n     let mut valid = true;\n     let mut inner = s;\n     if s.len() > 4 && s.starts_with(\"_ZN\") && s.ends_with(\"E\") {\n-        inner = s.slice(3, s.len() - 1);\n+        inner = &s[3 .. s.len() - 1];\n     // On Windows, dbghelp strips leading underscores, so we accept \"ZN...E\" form too.\n     } else if s.len() > 3 && s.starts_with(\"ZN\") && s.ends_with(\"E\") {\n-        inner = s.slice(2, s.len() - 1);\n+        inner = &s[2 .. s.len() - 1];\n     } else {\n         valid = false;\n     }\n@@ -83,11 +83,11 @@ pub fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n             }\n             let mut rest = inner;\n             while rest.char_at(0).is_numeric() {\n-                rest = rest.slice_from(1);\n+                rest = &rest[1..];\n             }\n-            let i: uint = inner.slice_to(inner.len() - rest.len()).parse().unwrap();\n-            inner = rest.slice_from(i);\n-            rest = rest.slice_to(i);\n+            let i: uint = inner[.. (inner.len() - rest.len())].parse().unwrap();\n+            inner = &rest[i..];\n+            rest = &rest[..i];\n             while rest.len() > 0 {\n                 if rest.starts_with(\"$\") {\n                     macro_rules! demangle {\n@@ -128,8 +128,8 @@ pub fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n                         None => rest.len(),\n                         Some(i) => i,\n                     };\n-                    try!(writer.write_str(rest.slice_to(idx)));\n-                    rest = rest.slice_from(idx);\n+                    try!(writer.write_str(&rest[..idx]));\n+                    rest = &rest[idx..];\n                 }\n             }\n         }"}, {"sha": "46639d7d8f0cdf599b17b42ed84f674d37017a48", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -125,9 +125,9 @@ impl Process {\n                     let mut bytes = [0; 8];\n                     return match input.read(&mut bytes) {\n                         Ok(8) => {\n-                            assert!(combine(CLOEXEC_MSG_FOOTER) == combine(bytes.slice(4, 8)),\n+                            assert!(combine(CLOEXEC_MSG_FOOTER) == combine(&bytes[4.. 8]),\n                                 \"Validation on the CLOEXEC pipe failed: {:?}\", bytes);\n-                            let errno = combine(bytes.slice(0, 4));\n+                            let errno = combine(&bytes[0.. 4]);\n                             assert!(p.wait(0).is_ok(), \"wait(0) should either return Ok or panic\");\n                             Err(super::decode_error(errno))\n                         }"}, {"sha": "cb8ef7eb66bc414d30658135feef4d382a213930", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -376,7 +376,7 @@ pub fn readlink(p: &Path) -> IoResult<Path> {\n     });\n     let ret = match ret {\n         Some(ref s) if s.starts_with(r\"\\\\?\\\") => { // \"\n-            Ok(Path::new(s.slice_from(4)))\n+            Ok(Path::new(&s[4..]))\n         }\n         Some(s) => Ok(Path::new(s)),\n         None => Err(super::last_error()),"}, {"sha": "36dc9b2afe49feb673cfd58081e7634ca22a08c2", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -146,7 +146,7 @@ pub fn fill_utf16_buf_and_decode<F>(mut f: F) -> Option<String> where\n                 done = true;\n             }\n             if k != 0 && done {\n-                let sub = buf.slice(0, k as uint);\n+                let sub = &buf[.. (k as uint)];\n                 // We want to explicitly catch the case when the\n                 // closure returned invalid UTF-16, rather than\n                 // set `res` to None and continue."}, {"sha": "7852b077b536066963de2bd53e91142f23bb4487", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -271,9 +271,9 @@ impl<'a> StringReader<'a> {\n     fn with_str_from_to<T, F>(&self, start: BytePos, end: BytePos, f: F) -> T where\n         F: FnOnce(&str) -> T,\n     {\n-        f(self.filemap.src.slice(\n-                self.byte_offset(start).to_uint(),\n-                self.byte_offset(end).to_uint()))\n+        f(&self.filemap.src[\n+                self.byte_offset(start).to_uint()..\n+                self.byte_offset(end).to_uint()])\n     }\n \n     /// Converts CRLF to LF in the given string, raising an error on bare CR."}, {"sha": "932c5ce23ea54e185dad3054618d8b42ad73c39c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -5223,7 +5223,7 @@ impl<'a> Parser<'a> {\n             Some(i) => {\n                 let mut err = String::from_str(\"circular modules: \");\n                 let len = included_mod_stack.len();\n-                for p in included_mod_stack.slice(i, len).iter() {\n+                for p in included_mod_stack[i.. len].iter() {\n                     err.push_str(&p.display().as_cow()[]);\n                     err.push_str(\" -> \");\n                 }"}, {"sha": "cf5066ae474576b704528f91089d507d0561ae6c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -1590,7 +1590,7 @@ impl<'a> State<'a> {\n                               ident: ast::SpannedIdent,\n                               tys: &[P<ast::Ty>],\n                               args: &[P<ast::Expr>]) -> IoResult<()> {\n-        let base_args = args.slice_from(1);\n+        let base_args = &args[1..];\n         try!(self.print_expr(&*args[0]));\n         try!(word(&mut self.s, \".\"));\n         try!(self.print_ident(ident.node));\n@@ -2312,7 +2312,7 @@ impl<'a> State<'a> {\n         let args = if first {\n             &decl.inputs[]\n         } else {\n-            decl.inputs.slice_from(1)\n+            &decl.inputs[1..]\n         };\n \n         for arg in args.iter() {"}, {"sha": "66cdf03a51ea6656b6c68d68b47da578028e1b57", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=a506d4cbfe8f20a2725c7efd9d43359a0bbd0e9e", "patch": "@@ -249,8 +249,8 @@ impl<'a> Iterator for Graphemes<'a> {\n             Some(cat)\n         };\n \n-        let retstr = self.string.slice_to(idx);\n-        self.string = self.string.slice_from(idx);\n+        let retstr = &self.string[..idx];\n+        self.string = &self.string[idx..];\n         Some(retstr)\n     }\n }\n@@ -350,8 +350,8 @@ impl<'a> DoubleEndedIterator for Graphemes<'a> {\n             Some(cat)\n         };\n \n-        let retstr = self.string.slice_from(idx);\n-        self.string = self.string.slice_to(idx);\n+        let retstr = &self.string[idx..];\n+        self.string = &self.string[..idx];\n         Some(retstr)\n     }\n }"}]}