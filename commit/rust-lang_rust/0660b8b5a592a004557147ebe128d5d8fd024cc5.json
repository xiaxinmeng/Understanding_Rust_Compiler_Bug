{"sha": "0660b8b5a592a004557147ebe128d5d8fd024cc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NjBiOGI1YTU5MmEwMDQ1NTcxNDdlYmUxMjhkNWQ4ZmQwMjRjYzU=", "commit": {"author": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2020-10-27T23:15:36Z"}, "committer": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2021-01-15T12:47:00Z"}, "message": "Introduce {Ref, RefMut}::try_map for optional projections", "tree": {"sha": "e9f03f24aea70fe0be1063cbb68367fe4807347f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9f03f24aea70fe0be1063cbb68367fe4807347f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0660b8b5a592a004557147ebe128d5d8fd024cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0660b8b5a592a004557147ebe128d5d8fd024cc5", "html_url": "https://github.com/rust-lang/rust/commit/0660b8b5a592a004557147ebe128d5d8fd024cc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0660b8b5a592a004557147ebe128d5d8fd024cc5/comments", "author": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "html_url": "https://github.com/rust-lang/rust/commit/4e208f6a3afb42528878b0f3464e337c4bf3bbc8"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "af421cb00f02c754b67ae8ee4ff982dffdce6de5", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0660b8b5a592a004557147ebe128d5d8fd024cc5/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0660b8b5a592a004557147ebe128d5d8fd024cc5/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=0660b8b5a592a004557147ebe128d5d8fd024cc5", "patch": "@@ -1261,6 +1261,36 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n         Ref { value: f(orig.value), borrow: orig.borrow }\n     }\n \n+    /// Makes a new `Ref` for an optional component of the borrowed data.\n+    ///\n+    /// The `RefCell` is already immutably borrowed, so this cannot fail.\n+    ///\n+    /// This is an associated function that needs to be used as\n+    /// `Ref::try_map(...)`. A method would interfere with methods of the same\n+    /// name on the contents of a `RefCell` used through `Deref`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_try_map)]\n+    ///\n+    /// use std::cell::{RefCell, Ref};\n+    ///\n+    /// let c = RefCell::new(vec![1, 2, 3]);\n+    /// let b1: Ref<Vec<u32>> = c.borrow();\n+    /// let b2: Option<Ref<u32>> = Ref::try_map(b1, |v| v.get(1));\n+    /// assert_eq!(b2.as_deref(), Some(&2))\n+    /// ```\n+    #[unstable(feature = \"cell_try_map\", reason = \"recently added\", issue = \"none\")]\n+    #[inline]\n+    pub fn try_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Option<Ref<'b, U>>\n+    where\n+        F: FnOnce(&T) -> Option<&U>,\n+    {\n+        let value = f(orig.value)?;\n+        Some(Ref { value, borrow: orig.borrow })\n+    }\n+\n     /// Splits a `Ref` into multiple `Ref`s for different components of the\n     /// borrowed data.\n     ///\n@@ -1372,6 +1402,46 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n         RefMut { value: f(value), borrow }\n     }\n \n+    /// Makes a new `RefMut` for an optional component of the borrowed data.\n+    ///\n+    /// The `RefCell` is already mutably borrowed, so this cannot fail.\n+    ///\n+    /// This is an associated function that needs to be used as\n+    /// `RefMut::try_map(...)`. A method would interfere with methods of the\n+    /// same name on the contents of a `RefCell` used through `Deref`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_try_map)]\n+    ///\n+    /// use std::cell::{RefCell, RefMut};\n+    ///\n+    /// let c = RefCell::new(vec![1, 2, 3]);\n+    ///\n+    /// {\n+    ///     let b1: RefMut<Vec<u32>> = c.borrow_mut();\n+    ///     let mut b2: Option<RefMut<u32>> = RefMut::try_map(b1, |v| v.get_mut(1));\n+    ///\n+    ///     if let Some(mut b2) = b2 {\n+    ///         *b2 += 2;\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(*c.borrow(), vec![1, 4, 3]);\n+    /// ```\n+    #[unstable(feature = \"cell_try_map\", reason = \"recently added\", issue = \"none\")]\n+    #[inline]\n+    pub fn try_map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> Option<RefMut<'b, U>>\n+    where\n+        F: FnOnce(&mut T) -> Option<&mut U>,\n+    {\n+        // FIXME(nll-rfc#40): fix borrow-check\n+        let RefMut { value, borrow } = orig;\n+        let value = f(value)?;\n+        Some(RefMut { value, borrow })\n+    }\n+\n     /// Splits a `RefMut` into multiple `RefMut`s for different components of the\n     /// borrowed data.\n     ///"}]}