{"sha": "7ae4ee80d16b51e617af89aa9a7ca4cce9ae5441", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZTRlZTgwZDE2YjUxZTYxN2FmODlhYTlhN2NhNGNjZTlhZTU0NDE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-02-18T20:01:11Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-02-18T20:18:36Z"}, "message": "Implement read_volatile and write_volatile", "tree": {"sha": "d6166a0b909c88222f370071a1eaa5c49f7bfc43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6166a0b909c88222f370071a1eaa5c49f7bfc43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ae4ee80d16b51e617af89aa9a7ca4cce9ae5441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae4ee80d16b51e617af89aa9a7ca4cce9ae5441", "html_url": "https://github.com/rust-lang/rust/commit/7ae4ee80d16b51e617af89aa9a7ca4cce9ae5441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ae4ee80d16b51e617af89aa9a7ca4cce9ae5441/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2a577804b32b6d203abe61e0cdf3a88837d228", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2a577804b32b6d203abe61e0cdf3a88837d228", "html_url": "https://github.com/rust-lang/rust/commit/8e2a577804b32b6d203abe61e0cdf3a88837d228"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "f871857dab632e5fadcdb4f0fe5bfd779dfde81a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7ae4ee80d16b51e617af89aa9a7ca4cce9ae5441/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae4ee80d16b51e617af89aa9a7ca4cce9ae5441/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=7ae4ee80d16b51e617af89aa9a7ca4cce9ae5441", "patch": "@@ -161,6 +161,54 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n     intrinsics::move_val_init(&mut *dst, src)\n }\n \n+/// Performs a volatile read of the value from `src` without moving it. This\n+/// leaves the memory in `src` unchanged.\n+///\n+/// Volatile operations are intended to act on I/O memory, and are guaranteed\n+/// to not be elided or reordered by the compiler across other volatile\n+/// operations. See the LLVM documentation on [[volatile]].\n+///\n+/// [volatile]: http://llvm.org/docs/LangRef.html#volatile-memory-accesses\n+///\n+/// # Safety\n+///\n+/// Beyond accepting a raw pointer, this is unsafe because it semantically\n+/// moves the value out of `src` without preventing further usage of `src`.\n+/// If `T` is not `Copy`, then care must be taken to ensure that the value at\n+/// `src` is not used before the data is overwritten again (e.g. with `write`,\n+/// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n+/// because it will attempt to drop the value previously at `*src`.\n+#[inline]\n+#[unstable(feature = \"volatile\", reason = \"recently added\", issue = \"31756\")]\n+pub unsafe fn read_volatile<T>(src: *const T) -> T {\n+    intrinsics::volatile_load(src)\n+}\n+\n+/// Performs a volatile write of a memory location with the given value without\n+/// reading or dropping the old value.\n+///\n+/// Volatile operations are intended to act on I/O memory, and are guaranteed\n+/// to not be elided or reordered by the compiler across other volatile\n+/// operations. See the LLVM documentation on [[volatile]].\n+///\n+/// [volatile]: http://llvm.org/docs/LangRef.html#volatile-memory-accesses\n+///\n+/// # Safety\n+///\n+/// This operation is marked unsafe because it accepts a raw pointer.\n+///\n+/// It does not drop the contents of `dst`. This is safe, but it could leak\n+/// allocations or resources, so care must be taken not to overwrite an object\n+/// that should be dropped.\n+///\n+/// This is appropriate for initializing uninitialized memory, or overwriting\n+/// memory that has previously been `read` from.\n+#[inline]\n+#[unstable(feature = \"volatile\", reason = \"recently added\", issue = \"31756\")]\n+pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n+    intrinsics::volatile_store(dst, src);\n+}\n+\n #[lang = \"const_ptr\"]\n impl<T: ?Sized> *const T {\n     /// Returns true if the pointer is null."}]}