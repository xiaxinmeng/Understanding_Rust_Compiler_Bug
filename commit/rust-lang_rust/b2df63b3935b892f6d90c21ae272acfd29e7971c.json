{"sha": "b2df63b3935b892f6d90c21ae272acfd29e7971c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZGY2M2IzOTM1Yjg5MmY2ZDkwYzIxYWUyNzJhY2ZkMjllNzk3MWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-10-28T21:19:07Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-10-28T21:28:14Z"}, "message": "Add generics field to LateContext", "tree": {"sha": "7e4d08693ae55a91065b6cb404f8ec0187b3e046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e4d08693ae55a91065b6cb404f8ec0187b3e046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2df63b3935b892f6d90c21ae272acfd29e7971c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2df63b3935b892f6d90c21ae272acfd29e7971c", "html_url": "https://github.com/rust-lang/rust/commit/b2df63b3935b892f6d90c21ae272acfd29e7971c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2df63b3935b892f6d90c21ae272acfd29e7971c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "html_url": "https://github.com/rust-lang/rust/commit/2e6a1a9fb49f30e41316fb374b12301a3445ae8d"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "58f1b1f9a41e73a05f5e110b000d92b343546f7c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2df63b3935b892f6d90c21ae272acfd29e7971c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2df63b3935b892f6d90c21ae272acfd29e7971c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b2df63b3935b892f6d90c21ae272acfd29e7971c", "patch": "@@ -1854,6 +1854,19 @@ impl Item_ {\n             _ => None,\n         }\n     }\n+\n+    pub fn generics(&self) -> Option<&Generics> {\n+        Some(match *self {\n+            ItemFn(_, _, _, _, ref generics, _) |\n+            ItemTy(_, ref generics) |\n+            ItemEnum(_, ref generics) |\n+            ItemStruct(_, ref generics) |\n+            ItemUnion(_, ref generics) |\n+            ItemTrait(_, ref generics, _, _) |\n+            ItemImpl(_, _, _, ref generics, _, _, _)=> generics,\n+            _ => return None\n+        })\n+    }\n }\n \n /// A reference from an trait to one of its associated items. This"}, {"sha": "601e0316d4af92cfe00a0dca46551e81d74dbd08", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2df63b3935b892f6d90c21ae272acfd29e7971c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2df63b3935b892f6d90c21ae272acfd29e7971c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=b2df63b3935b892f6d90c21ae272acfd29e7971c", "patch": "@@ -352,6 +352,9 @@ pub struct LateContext<'a, 'tcx: 'a> {\n     lint_sess: LintSession<'tcx, LateLintPassObject>,\n \n     last_ast_node_with_lint_attrs: ast::NodeId,\n+\n+    /// Generic type parameters in scope for the item we are in.\n+    pub generics: Option<&'tcx hir::Generics>,\n }\n \n /// Context for lint checking of the AST, after expansion, before lowering to\n@@ -646,13 +649,16 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     }\n \n     fn visit_item(&mut self, it: &'tcx hir::Item) {\n+        let generics = self.generics.take();\n+        self.generics = it.node.generics();\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n             cx.with_param_env(it.id, |cx| {\n                 run_lints!(cx, check_item, late_passes, it);\n                 hir_visit::walk_item(cx, it);\n                 run_lints!(cx, check_item_post, late_passes, it);\n             });\n-        })\n+        });\n+        self.generics = generics;\n     }\n \n     fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem) {\n@@ -774,23 +780,29 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+        let generics = self.generics.take();\n+        self.generics = Some(&trait_item.generics);\n         self.with_lint_attrs(trait_item.id, &trait_item.attrs, |cx| {\n             cx.with_param_env(trait_item.id, |cx| {\n                 run_lints!(cx, check_trait_item, late_passes, trait_item);\n                 hir_visit::walk_trait_item(cx, trait_item);\n                 run_lints!(cx, check_trait_item_post, late_passes, trait_item);\n             });\n         });\n+        self.generics = generics;\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+        let generics = self.generics.take();\n+        self.generics = Some(&impl_item.generics);\n         self.with_lint_attrs(impl_item.id, &impl_item.attrs, |cx| {\n             cx.with_param_env(impl_item.id, |cx| {\n                 run_lints!(cx, check_impl_item, late_passes, impl_item);\n                 hir_visit::walk_impl_item(cx, impl_item);\n                 run_lints!(cx, check_impl_item_post, late_passes, impl_item);\n             });\n         });\n+        self.generics = generics;\n     }\n \n     fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n@@ -991,6 +1003,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         access_levels,\n         lint_sess: LintSession::new(&tcx.sess.lint_store),\n         last_ast_node_with_lint_attrs: ast::CRATE_NODE_ID,\n+        generics: None,\n     };\n \n     // Visit the whole crate."}]}