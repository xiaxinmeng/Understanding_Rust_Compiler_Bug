{"sha": "5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176", "node_id": "C_kwDOAAsO6NoAKDViNWEyZTYwMGViZjE1YWEwNmRhZTFjMzViN2VlOWY2YzhmNzQxNzY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-22T13:56:32Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-22T13:56:32Z"}, "message": "Move const filter to filter_impls", "tree": {"sha": "b98be8e01f9c5f7fb3d4de0b46d2c1f7ec645eac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b98be8e01f9c5f7fb3d4de0b46d2c1f7ec645eac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFywxAACgkQgTGiTgx5\n768ulxAApUq0b9D+eHynL9ACYYXWQ3LkmMMhOtAl3RvAudjt6cgLOmryqsTY7iqP\nSr8lSPbZD4f4HtZGpoXn/8gHpNh0JFUE+DN1VFXHyyi+0rFYoZP4HndvQ2s3h4KT\niAa49IXuqmTvmNAAumg0sljkvMVnLiNgTut8gNKfY9d30vzATdJCc1YR901htOP8\nfYkJ+bEcPdu0GFciqHWSLzDIs3Ja53hcngthriuTHwvNiDvyjS8aDXMAgVj0k2+X\nUMj3344jka/UA7FzT3tgBCKMajm9lNjoCXaj+K43gOqnyA3YSCNDtvcXMdGF1zt7\nFR/lI/v4FMd6/Uu7rDQr+WNEF1TpUHvcFrAWzF8hkXuk6gf/ON8doFFD5u3Rh99U\nYiSt0pVlukLMAusFWPljU7Fjx9PaW3L+0ZpERqvhKwfqsBwIpaLPg3BH8pNKl5F+\np1O4IfxRSW48eeceAddjARHyu42n11cXYqMZVMpa3C5Ypaw+iSpbK32bLltjheUc\njPmk3s8fSp2lrwXzx3iV1al2bx0mJ8Ah6oMVRd3Mx9HL6ShQw7giZ9r3aikn7vye\nloARUwq43Czi1ZjxzPc4efhkz1h78LZq9Yqxli/bi98uMBhf+zgkuF5bEjKt3D+g\nphJkNJOJ1sI9wsTfVPcGv9gY4a//E4h/uXheUEV0WK99lmuGNmc=\n=W7gr\n-----END PGP SIGNATURE-----", "payload": "tree b98be8e01f9c5f7fb3d4de0b46d2c1f7ec645eac\nparent c4c76a4fbd046066eb5490d7e5aec4c263e12fde\nauthor Santiago Pastorino <spastorino@gmail.com> 1634910992 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634910992 -0300\n\nMove const filter to filter_impls\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176", "html_url": "https://github.com/rust-lang/rust/commit/5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c76a4fbd046066eb5490d7e5aec4c263e12fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c76a4fbd046066eb5490d7e5aec4c263e12fde", "html_url": "https://github.com/rust-lang/rust/commit/c4c76a4fbd046066eb5490d7e5aec4c263e12fde"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "77b1c279efad317a341d7a81232994ce91a1c23d", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176", "patch": "@@ -121,7 +121,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Ok(None);\n         }\n \n-        let mut candidates = candidate_set.vec;\n+        let candidates = candidate_set.vec;\n \n         debug!(?stack, ?candidates, \"assembled {} candidates\", candidates.len());\n \n@@ -134,7 +134,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // candidate which assumes $0 == int, one that assumes `$0 ==\n         // usize`, etc. This spells an ambiguity.\n \n-        self.filter_impls(&mut candidates, stack);\n+        let mut candidates = self.filter_impls(candidates, stack.obligation);\n \n         // If there is more than one candidate, first winnow them down\n         // by considering extra conditions (nested obligations and so"}, {"sha": "dfadf6938727655031e24a40c83d7a71cd35bfd1", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 42, "deletions": 33, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=5b5a2e600ebf15aa06dae1c35b7ee9f6c8f74176", "patch": "@@ -20,7 +20,7 @@ use super::ObligationCauseCode;\n use super::Selection;\n use super::SelectionResult;\n use super::TraitQueryMode;\n-use super::{ErrorReporting, Overflow, SelectionError, Unimplemented};\n+use super::{ErrorReporting, Overflow, SelectionError};\n use super::{ObligationCause, PredicateObligation, TraitObligation};\n \n use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n@@ -1122,19 +1122,52 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn filter_impls(\n         &mut self,\n-        candidates: &mut Vec<SelectionCandidate<'tcx>>,\n-        stack: &TraitObligationStack<'o, 'tcx>,\n-    ) {\n+        candidates: Vec<SelectionCandidate<'tcx>>,\n+        obligation: &TraitObligation<'tcx>,\n+    ) -> Vec<SelectionCandidate<'tcx>> {\n         let tcx = self.tcx();\n-        candidates.retain(|candidate| {\n+        let mut result = Vec::with_capacity(candidates.len());\n+\n+        for candidate in candidates {\n+            // Respect const trait obligations\n+            if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n+                match candidate {\n+                    // const impl\n+                    ImplCandidate(def_id)\n+                        if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                    // const param\n+                    ParamCandidate((\n+                        ty::ConstnessAnd { constness: ty::BoundConstness::ConstIfConst, .. },\n+                        _,\n+                    )) => {}\n+                    // auto trait impl\n+                    AutoImplCandidate(..) => {}\n+                    // generator, this will raise error in other places\n+                    // or ignore error with const_async_blocks feature\n+                    GeneratorCandidate => {}\n+                    // FnDef where the function is const\n+                    FnPointerCandidate { is_const: true } => {}\n+                    ConstDropCandidate => {}\n+                    _ => {\n+                        // reject all other types of candidates\n+                        continue;\n+                    }\n+                }\n+            }\n+\n             if let ImplCandidate(def_id) = candidate {\n-                ty::ImplPolarity::Reservation == tcx.impl_polarity(*def_id)\n-                    || stack.obligation.polarity() == tcx.impl_polarity(*def_id)\n+                if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)\n+                    || obligation.polarity() == tcx.impl_polarity(def_id)\n                     || self.allow_negative_impls\n+                {\n+                    result.push(candidate);\n+                }\n             } else {\n-                true\n+                result.push(candidate);\n             }\n-        });\n+        }\n+\n+        result\n     }\n \n     /// filter_reservation_impls filter reservation impl for any goal as ambiguous\n@@ -1145,30 +1178,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n         let tcx = self.tcx();\n-        // Respect const trait obligations\n-        if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n-            match candidate {\n-                // const impl\n-                ImplCandidate(def_id) if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n-                // const param\n-                ParamCandidate((\n-                    ty::ConstnessAnd { constness: ty::BoundConstness::ConstIfConst, .. },\n-                    _,\n-                )) => {}\n-                // auto trait impl\n-                AutoImplCandidate(..) => {}\n-                // generator, this will raise error in other places\n-                // or ignore error with const_async_blocks feature\n-                GeneratorCandidate => {}\n-                // FnDef where the function is const\n-                FnPointerCandidate { is_const: true } => {}\n-                ConstDropCandidate => {}\n-                _ => {\n-                    // reject all other types of candidates\n-                    return Err(Unimplemented);\n-                }\n-            }\n-        }\n         // Treat reservation impls as ambiguity.\n         if let ImplCandidate(def_id) = candidate {\n             if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {"}]}