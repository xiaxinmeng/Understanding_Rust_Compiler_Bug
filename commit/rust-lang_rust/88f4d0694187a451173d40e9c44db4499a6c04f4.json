{"sha": "88f4d0694187a451173d40e9c44db4499a6c04f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZjRkMDY5NDE4N2E0NTExNzNkNDBlOWM0NGRiNDQ5OWE2YzA0ZjQ=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-15T00:43:31Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-18T17:05:24Z"}, "message": "New syntax extensions: #line[], #col[], #file[], #stringify[], #include[]", "tree": {"sha": "107432014221fcad80e309635668f649d599e2fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/107432014221fcad80e309635668f649d599e2fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f4d0694187a451173d40e9c44db4499a6c04f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f4d0694187a451173d40e9c44db4499a6c04f4", "html_url": "https://github.com/rust-lang/rust/commit/88f4d0694187a451173d40e9c44db4499a6c04f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f4d0694187a451173d40e9c44db4499a6c04f4/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe547d3a795f59217c0093c82aa5a5b86c65f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe547d3a795f59217c0093c82aa5a5b86c65f72", "html_url": "https://github.com/rust-lang/rust/commit/9fe547d3a795f59217c0093c82aa5a5b86c65f72"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "8cc388c7b1bf798fe3071adebfc2a63d74ae3e0c", "filename": "src/librustsyntax/ext/base.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Flibrustsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Flibrustsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fbase.rs?ref=88f4d0694187a451173d40e9c44db4499a6c04f4", "patch": "@@ -43,6 +43,16 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n                             builtin(ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(\"ast\",\n                             builtin(ext::qquote::expand_ast));\n+    syntax_expanders.insert(\"line\",\n+                            builtin(ext::source_util::expand_line));\n+    syntax_expanders.insert(\"col\",\n+                            builtin(ext::source_util::expand_col));\n+    syntax_expanders.insert(\"file\",\n+                            builtin(ext::source_util::expand_file));\n+    syntax_expanders.insert(\"stringify\",\n+                            builtin(ext::source_util::expand_stringify));\n+    syntax_expanders.insert(\"include\",\n+                            builtin(ext::source_util::expand_include));\n     ret syntax_expanders;\n }\n "}, {"sha": "7b3471d03b45d385666ca14cac5ebd4c7674c1da", "filename": "src/librustsyntax/ext/source_util.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Flibrustsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Flibrustsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fsource_util.rs?ref=88f4d0694187a451173d40e9c44db4499a6c04f4", "patch": "@@ -0,0 +1,48 @@\n+import base::*;\n+import ast;\n+import codemap::span;\n+import print::pprust;\n+\n+\n+/* #line(): expands to the current line number */\n+fn expand_line(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n+               _body: ast::mac_body) -> @ast::expr {\n+    get_mac_args(cx, sp, arg, 0u, option::some(0u), \"line\");\n+    let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n+    ret make_new_lit(cx, sp, ast::lit_uint(loc.line as u64, ast::ty_u));\n+}\n+\n+/* #col(): expands to the current column number */\n+fn expand_col(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n+              _body: ast::mac_body) -> @ast::expr {\n+    get_mac_args(cx, sp, arg, 0u, option::some(0u), \"col\");\n+    let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n+    ret make_new_lit(cx, sp, ast::lit_uint(loc.col as u64, ast::ty_u));\n+}\n+\n+/* #file(): expands to the current filename */\n+/* The filemap (`loc.file`) contains a bunch more information we could spit\n+ * out if we wanted. */\n+fn expand_file(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n+               _body: ast::mac_body) -> @ast::expr {\n+    get_mac_args(cx, sp, arg, 0u, option::some(0u), \"file\");\n+    let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n+    ret make_new_lit(cx, sp, ast::lit_str(loc.file.name));\n+}\n+\n+fn expand_stringify(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n+                    _body: ast::mac_body) -> @ast::expr {\n+    let args = get_mac_args(cx, sp, arg, 1u, option::some(1u), \"stringify\");\n+    ret make_new_lit(cx, sp, ast::lit_str(pprust::expr_to_str(args[0])));\n+}\n+\n+fn expand_include(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n+                  _body: ast::mac_body) -> @ast::expr {\n+    let args = get_mac_args(cx, sp, arg, 1u, option::some(1u), \"include\");\n+    let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n+    let path = path::connect(path::dirname(loc.file.name),\n+        expr_to_str(cx, args[0], \"#include requires a string literal\"));\n+    let p = parse::new_parser_from_file(cx.parse_sess(), cx.cfg(), path,\n+                                        parse::parser::SOURCE_FILE);\n+    ret parse::parser::parse_expr(p)\n+}"}, {"sha": "91f1463fc1928087c6734ed3d441a9ffe5dfdf4f", "filename": "src/librustsyntax/rustsyntax.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Flibrustsyntax%2Frustsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Flibrustsyntax%2Frustsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Frustsyntax.rc?ref=88f4d0694187a451173d40e9c44db4499a6c04f4", "patch": "@@ -66,4 +66,5 @@ mod ext {\n     mod include;\n     mod log_syntax;\n     mod auto_serialize;\n+    mod source_util;\n }"}, {"sha": "5db5b0f6ff5c5f1ff25695de6f2258934af22cc5", "filename": "src/test/run-pass/syntax-extension-source-utils-files/includeme.fragment", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "raw_url": "https://github.com/rust-lang/rust/raw/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment?ref=88f4d0694187a451173d40e9c44db4499a6c04f4", "patch": "@@ -0,0 +1,7 @@\n+/* this is for run-pass/syntax-extension-source-utils.rs */\n+\n+{\n+    assert(#file[].ends_with(\"utils-files/includeme.fragment\"));\n+    assert(#line[] == 5u);\n+    #fmt[\"victory robot %u\", #line[]]\n+}\n\\ No newline at end of file"}, {"sha": "926228534cca37e954f8af6dd844a034843dd6d0", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f4d0694187a451173d40e9c44db4499a6c04f4/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=88f4d0694187a451173d40e9c44db4499a6c04f4", "patch": "@@ -0,0 +1,11 @@\n+// This test is brittle! \n+// xfail-pretty - the pretty tests lose path information, breaking #include\n+\n+fn main() {\n+    assert(#line[] == 5u);\n+    assert(#col[] == 12u);\n+    assert(#file[].ends_with(\"syntax-extension-source-utils.rs\"));\n+    assert(#stringify[(2*3) + 5] == \"2 * 3 + 5\");\n+    assert(#include[\"syntax-extension-source-utils-files/includeme.fragment\"]\n+           == \"victory robot 6\")\n+}"}]}