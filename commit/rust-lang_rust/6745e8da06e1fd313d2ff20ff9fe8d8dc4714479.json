{"sha": "6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "node_id": "C_kwDOAAsO6NoAKDY3NDVlOGRhMDZlMWZkMzEzZDJmZjIwZmY5ZmU4ZDhkYzQ3MTQ0Nzk", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-11T20:15:50Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-30T23:25:12Z"}, "message": "Add #[must_use] to len and is_empty", "tree": {"sha": "3e95126f0f29319c6c2ce80aef7fc275c1c33897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e95126f0f29319c6c2ce80aef7fc275c1c33897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "html_url": "https://github.com/rust-lang/rust/commit/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d6d2b7389fe1b339402c1798edae8b695fc9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d6d2b7389fe1b339402c1798edae8b695fc9ef", "html_url": "https://github.com/rust-lang/rust/commit/86d6d2b7389fe1b339402c1798edae8b695fc9ef"}], "stats": {"total": 104, "additions": 62, "deletions": 42}, "files": [{"sha": "5881f6227a0f6cd99fc34f386a74b212092290b0", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -1047,6 +1047,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert_eq!(heap.len(), 2);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.data.len()\n@@ -1070,6 +1071,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert!(!heap.is_empty());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0"}, {"sha": "a6ec5a83f146e4bd2003872846d31319f79bdf96", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -2204,6 +2204,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// a.insert(1, \"a\");\n     /// assert_eq!(a.len(), 1);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n@@ -2224,6 +2225,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// a.insert(1, \"a\");\n     /// assert!(!a.is_empty());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {"}, {"sha": "2ddebd416cbe4be4ad202a775e5d97b77bf9f768", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -1033,6 +1033,7 @@ impl<T> BTreeSet<T> {\n     /// v.insert(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n@@ -1051,6 +1052,7 @@ impl<T> BTreeSet<T> {\n     /// v.insert(1);\n     /// assert!(!v.is_empty());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {"}, {"sha": "2fc17a7c8603fc0b32afab1a79058d9043554d95", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -610,11 +610,11 @@ fn test_send() {\n #[test]\n fn test_ord_absence() {\n     fn set<K>(mut set: BTreeSet<K>) {\n-        set.is_empty();\n-        set.len();\n+        let _ = set.is_empty();\n+        let _ = set.len();\n         set.clear();\n-        set.iter();\n-        set.into_iter();\n+        let _ = set.iter();\n+        let _ = set.into_iter();\n     }\n \n     fn set_debug<K: Debug>(set: BTreeSet<K>) {"}, {"sha": "bd00a56ac6eab1ec5541e2d126b6eae614a823d2", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -576,6 +576,7 @@ impl<T> LinkedList<T> {\n     /// assert!(!dl.is_empty());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.head.is_none()\n@@ -602,6 +603,7 @@ impl<T> LinkedList<T> {\n     /// assert_eq!(dl.len(), 3);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.len"}, {"sha": "651e55cc0944ffc6bf89947a26fdaf6043db08b7", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -1537,6 +1537,7 @@ impl String {\n     /// assert_eq!(fancy_f.chars().count(), 3);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.vec.len()\n@@ -1556,6 +1557,7 @@ impl String {\n     /// assert!(!v.is_empty());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0"}, {"sha": "1821954edd5cc1623cc66c8b754f78de4b1db44b", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -438,6 +438,7 @@ impl<T> NonNull<[T]> {\n     /// ```\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    #[must_use]\n     #[inline]\n     pub const fn len(self) -> usize {\n         self.as_ptr().len()"}, {"sha": "a6ba019f368aaa739fd459680dbf763e9def0dd0", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -140,6 +140,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n@@ -158,9 +159,10 @@ impl str {\n     /// let s = \"not empty\";\n     /// assert!(!s.is_empty());\n     /// ```\n-    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]\n+    #[must_use]\n+    #[inline]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "ca0f27b285f9bc665222591271f77ccef101dba1", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -660,6 +660,7 @@ impl OsStr {\n     /// assert!(!os_str.is_empty());\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_empty(&self) -> bool {\n         self.inner.inner.is_empty()\n@@ -691,6 +692,7 @@ impl OsStr {\n     /// assert_eq!(os_str.len(), 3);\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn len(&self) -> usize {\n         self.inner.inner.len()"}, {"sha": "54b998d12ac1eeedc469aa7ef1226fe38577b727", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -1077,6 +1077,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> u64 {\n         self.0.size()"}, {"sha": "0ed3018c8023fbe46062a5b91b6e7cfad9d934dc", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -430,12 +430,14 @@ impl<'a> SocketAncillary<'a> {\n     }\n \n     /// Returns `true` if the ancillary data is empty.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn is_empty(&self) -> bool {\n         self.length == 0\n     }\n \n     /// Returns the number of used bytes.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn len(&self) -> usize {\n         self.length"}, {"sha": "90a6eef75261f505c6fd517b1280c548581f2d8e", "filename": "src/tools/clippy/tests/ui/iter_count.fixed", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.fixed?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -33,6 +33,7 @@ impl HasIter {\n     }\n }\n \n+#[allow(unused_must_use)]\n fn main() {\n     let mut vec = vec![0, 1, 2, 3];\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n@@ -50,7 +51,7 @@ fn main() {\n     linked_list.push_back(1);\n     binary_heap.push(1);\n \n-    let _ = &vec[..].len();\n+    &vec[..].len();\n     vec.len();\n     boxed_slice.len();\n     vec_deque.len();\n@@ -62,13 +63,13 @@ fn main() {\n     binary_heap.len();\n \n     vec.len();\n-    let _ = &vec[..].len();\n+    &vec[..].len();\n     vec_deque.len();\n     hash_map.len();\n     b_tree_map.len();\n     linked_list.len();\n \n-    let _ = &vec[..].len();\n+    &vec[..].len();\n     vec.len();\n     vec_deque.len();\n     hash_set.len();"}, {"sha": "6681a480a28c817472eb5bdb1976bb5a948cd61b", "filename": "src/tools/clippy/tests/ui/iter_count.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.rs?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -33,6 +33,7 @@ impl HasIter {\n     }\n }\n \n+#[allow(unused_must_use)]\n fn main() {\n     let mut vec = vec![0, 1, 2, 3];\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n@@ -50,7 +51,7 @@ fn main() {\n     linked_list.push_back(1);\n     binary_heap.push(1);\n \n-    let _ = &vec[..].iter().count();\n+    &vec[..].iter().count();\n     vec.iter().count();\n     boxed_slice.iter().count();\n     vec_deque.iter().count();\n@@ -62,13 +63,13 @@ fn main() {\n     binary_heap.iter().count();\n \n     vec.iter_mut().count();\n-    let _ = &vec[..].iter_mut().count();\n+    &vec[..].iter_mut().count();\n     vec_deque.iter_mut().count();\n     hash_map.iter_mut().count();\n     b_tree_map.iter_mut().count();\n     linked_list.iter_mut().count();\n \n-    let _ = &vec[..].into_iter().count();\n+    &vec[..].into_iter().count();\n     vec.into_iter().count();\n     vec_deque.into_iter().count();\n     hash_set.into_iter().count();"}, {"sha": "2e3d7fc35de9c0de17d3f712bbc87a892c90dbad", "filename": "src/tools/clippy/tests/ui/iter_count.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.stderr?ref=6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "patch": "@@ -1,151 +1,151 @@\n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:53:14\n+  --> $DIR/iter_count.rs:54:6\n    |\n-LL |     let _ = &vec[..].iter().count();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     &vec[..].iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n    |\n    = note: `-D clippy::iter-count` implied by `-D warnings`\n \n error: called `.iter().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:54:5\n+  --> $DIR/iter_count.rs:55:5\n    |\n LL |     vec.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:55:5\n+  --> $DIR/iter_count.rs:56:5\n    |\n LL |     boxed_slice.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice.len()`\n \n error: called `.iter().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:56:5\n+  --> $DIR/iter_count.rs:57:5\n    |\n LL |     vec_deque.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.iter().count()` on a `HashSet`\n-  --> $DIR/iter_count.rs:57:5\n+  --> $DIR/iter_count.rs:58:5\n    |\n LL |     hash_set.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n \n error: called `.iter().count()` on a `HashMap`\n-  --> $DIR/iter_count.rs:58:5\n+  --> $DIR/iter_count.rs:59:5\n    |\n LL |     hash_map.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n \n error: called `.iter().count()` on a `BTreeMap`\n-  --> $DIR/iter_count.rs:59:5\n+  --> $DIR/iter_count.rs:60:5\n    |\n LL |     b_tree_map.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n \n error: called `.iter().count()` on a `BTreeSet`\n-  --> $DIR/iter_count.rs:60:5\n+  --> $DIR/iter_count.rs:61:5\n    |\n LL |     b_tree_set.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n \n error: called `.iter().count()` on a `LinkedList`\n-  --> $DIR/iter_count.rs:61:5\n+  --> $DIR/iter_count.rs:62:5\n    |\n LL |     linked_list.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.iter().count()` on a `BinaryHeap`\n-  --> $DIR/iter_count.rs:62:5\n+  --> $DIR/iter_count.rs:63:5\n    |\n LL |     binary_heap.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`\n \n error: called `.iter_mut().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:64:5\n+  --> $DIR/iter_count.rs:65:5\n    |\n LL |     vec.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter_mut().count()` on a `slice`\n-  --> $DIR/iter_count.rs:65:14\n+  --> $DIR/iter_count.rs:66:6\n    |\n-LL |     let _ = &vec[..].iter_mut().count();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     &vec[..].iter_mut().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.iter_mut().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:66:5\n+  --> $DIR/iter_count.rs:67:5\n    |\n LL |     vec_deque.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.iter_mut().count()` on a `HashMap`\n-  --> $DIR/iter_count.rs:67:5\n+  --> $DIR/iter_count.rs:68:5\n    |\n LL |     hash_map.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n \n error: called `.iter_mut().count()` on a `BTreeMap`\n-  --> $DIR/iter_count.rs:68:5\n+  --> $DIR/iter_count.rs:69:5\n    |\n LL |     b_tree_map.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n \n error: called `.iter_mut().count()` on a `LinkedList`\n-  --> $DIR/iter_count.rs:69:5\n+  --> $DIR/iter_count.rs:70:5\n    |\n LL |     linked_list.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.into_iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:71:14\n+  --> $DIR/iter_count.rs:72:6\n    |\n-LL |     let _ = &vec[..].into_iter().count();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     &vec[..].into_iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.into_iter().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:72:5\n+  --> $DIR/iter_count.rs:73:5\n    |\n LL |     vec.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.into_iter().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:73:5\n+  --> $DIR/iter_count.rs:74:5\n    |\n LL |     vec_deque.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.into_iter().count()` on a `HashSet`\n-  --> $DIR/iter_count.rs:74:5\n+  --> $DIR/iter_count.rs:75:5\n    |\n LL |     hash_set.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n \n error: called `.into_iter().count()` on a `HashMap`\n-  --> $DIR/iter_count.rs:75:5\n+  --> $DIR/iter_count.rs:76:5\n    |\n LL |     hash_map.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n \n error: called `.into_iter().count()` on a `BTreeMap`\n-  --> $DIR/iter_count.rs:76:5\n+  --> $DIR/iter_count.rs:77:5\n    |\n LL |     b_tree_map.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n \n error: called `.into_iter().count()` on a `BTreeSet`\n-  --> $DIR/iter_count.rs:77:5\n+  --> $DIR/iter_count.rs:78:5\n    |\n LL |     b_tree_set.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n \n error: called `.into_iter().count()` on a `LinkedList`\n-  --> $DIR/iter_count.rs:78:5\n+  --> $DIR/iter_count.rs:79:5\n    |\n LL |     linked_list.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.into_iter().count()` on a `BinaryHeap`\n-  --> $DIR/iter_count.rs:79:5\n+  --> $DIR/iter_count.rs:80:5\n    |\n LL |     binary_heap.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`"}]}