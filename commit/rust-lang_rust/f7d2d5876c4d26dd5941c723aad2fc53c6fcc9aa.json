{"sha": "f7d2d5876c4d26dd5941c723aad2fc53c6fcc9aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZDJkNTg3NmM0ZDI2ZGQ1OTQxYzcyM2FhZDJmYzUzYzZmY2M5YWE=", "commit": {"author": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-04-20T00:21:01Z"}, "committer": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-04-22T18:11:46Z"}, "message": "Some more closure changes", "tree": {"sha": "659eba062eb81b96a51ad6d7e84cd9cf5282cc48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/659eba062eb81b96a51ad6d7e84cd9cf5282cc48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7d2d5876c4d26dd5941c723aad2fc53c6fcc9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d2d5876c4d26dd5941c723aad2fc53c6fcc9aa", "html_url": "https://github.com/rust-lang/rust/commit/f7d2d5876c4d26dd5941c723aad2fc53c6fcc9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7d2d5876c4d26dd5941c723aad2fc53c6fcc9aa/comments", "author": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb", "html_url": "https://github.com/rust-lang/rust/commit/36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb"}], "stats": {"total": 79, "additions": 46, "deletions": 33}, "files": [{"sha": "eca765f9b9fa54ce47513dd94203241b7f099895", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 46, "deletions": 33, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f7d2d5876c4d26dd5941c723aad2fc53c6fcc9aa/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/f7d2d5876c4d26dd5941c723aad2fc53c6fcc9aa/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=f7d2d5876c4d26dd5941c723aad2fc53c6fcc9aa", "patch": "@@ -1723,59 +1723,72 @@ let x = 3;\n fn fun() -> () { println!(\"{}\", x); }\n ~~~~\n \n-Rust also supports _closures_, functions that can access variables in\n-the enclosing scope.  Compare `x` in these:\n+A _closure_ does support accessing the enclosing scope; below we will create\n+2 _closures_ (nameless functions). Compare how `||` replaces `()` and how\n+they try to access `x`:\n \n-~~~~\n+~~~~ {.ignore}\n let x = 3;\n \n // `fun` is an invalid definition\n-fn  fun       () -> () { println!(\"{}\", x) }; // cannot reach enclosing scope\n-let closure = || -> () { println!(\"{}\", x) }; // can reach enclosing scope\n+fn  fun       () -> () { println!(\"{}\", x) }; // cannot capture enclosing scope\n+let closure = || -> () { println!(\"{}\", x) }; // can capture enclosing scope\n \n-fun();      // Still won't work\n-closure();  // Prints: 3\n-~~~~\n+// `fun_arg` is an invalid definition\n+fn  fun_arg       (arg: int) -> () { println!(\"{}\", arg + x) }; // cannot capture enclosing scope\n+let closure_arg = |arg: int| -> () { println!(\"{}\", arg + x) }; // Can capture enclosing scope\n+//                       ^\n+// Requires a type because the implementation needs to know which `+` to use.\n+// In the future, the implementation may not need the help.\n \n-Closures can be utilized in this fashion:\n+fun();          // Still won't work\n+closure();      // Prints: 3\n \n+fun_arg(7);     // Still won't work\n+closure_arg(7); // Prints: 10\n ~~~~\n-// Create a nameless function and assign it to `closure`. It's sole\n-// argument is a yet unknown `x` to be supplied by the caller.\n-let closure = |x| -> () { println!(\"{}\", x) };\n \n-// Define `call_closure_with_ten` to take one argument and return null `()`.\n-// `fun` is a function which takes one `int` argument `|int|` and also returns\n-// null `()`.  `|int|` defines the `fun` to be of type _closure_\n-fn call_closure_with_ten(fun: |int| -> ()) -> () { fun(10); }\n+Closures begin with the argument list between vertical bars and are followed by\n+a single expression. Remember that a block, `{ <expr1>; <expr2>; ... }`, is\n+considered a single expression: it evaluates to the result of the last\n+expression it contains if that expression is not followed by a semicolon,\n+otherwise the block evaluates to `()`.\n \n-// The caller supplies `10` to the closure\n-// which prints out the value\n-call_closure_with_ten(closure);\n-~~~~\n+Since a closure is an expression, the compiler can usually infer the argument and\n+return types; so they are often omitted. This is in contrast to a function which\n+is a declaration and _not_ an expression. Declarations require the types to be\n+specified and carry no inference. Compare:\n \n-This can be simplified by removing null arguments:\n+~~~~ {.ignore}\n+// `fun` cannot infer the type of `x` so it must be provided because it is a function.\n+fn  fun       (x: int) -> () { println!(\"{}\", x) };\n+let closure = |x     | -> () { println!(\"{}\", x) };\n \n+fun(10);     // Prints 10\n+closure(20); // Prints 20\n+\n+fun(\"String\"); // Error: wrong type\n+// Error: This type is different from when `x` was originally evaluated\n+closure(\"String\");\n ~~~~\n-let closure = |x| println!(\"{}\", x);\n-fn call_closure_with_ten(fun: |int|) { fun(10); }\n \n-call_closure_with_ten(closure);\n+The null arguments `()` are typically dropped so the end result\n+is more compact.\n+\n ~~~~\n+let closure = |x| { println!(\"{}\", x) };\n \n-Closures begin with the argument list between vertical bars and are followed by\n-a single expression. Remember that a block, `{ <expr1>; <expr2>; ... }`, is\n-considered a single expression: it evaluates to the result of the last\n-expression it contains if that expression is not followed by a semicolon,\n-otherwise the block evaluates to `()`.\n+closure(20); // Prints 20\n+~~~~\n \n-The types of the arguments are generally omitted, as is the return type,\n-because the compiler can almost always infer them. In the rare case where the\n-compiler needs assistance, though, the arguments and return types may be\n-annotated.\n+Here, in the rare case where the compiler needs assistance,\n+the arguments and return types may be annotated.\n \n ~~~~\n let square = |x: int| -> uint { (x * x) as uint };\n+\n+println!(\"{}\", square(20));  // 400\n+println!(\"{}\", square(-20)); // 400\n ~~~~\n \n There are several forms of closure, each with its own role. The most"}]}