{"sha": "fb279aa02a7ff2ed069791f60a5159d73c8ed993", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjc5YWEwMmE3ZmYyZWQwNjk3OTFmNjBhNTE1OWQ3M2M4ZWQ5OTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-22T21:51:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-22T21:51:34Z"}, "message": "auto merge of #10605 : huonw/rust/ascii-ident-gate, r=pcwalton\n\ncf. https://mail.mozilla.org/pipermail/rust-dev/2013-November/006920.html", "tree": {"sha": "632a9116f4757aac57343a958ecfd56ce9ee047a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632a9116f4757aac57343a958ecfd56ce9ee047a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb279aa02a7ff2ed069791f60a5159d73c8ed993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb279aa02a7ff2ed069791f60a5159d73c8ed993", "html_url": "https://github.com/rust-lang/rust/commit/fb279aa02a7ff2ed069791f60a5159d73c8ed993", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb279aa02a7ff2ed069791f60a5159d73c8ed993/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ed7913e43cf0234a1bbe3f29dcd52c6a166961", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ed7913e43cf0234a1bbe3f29dcd52c6a166961", "html_url": "https://github.com/rust-lang/rust/commit/09ed7913e43cf0234a1bbe3f29dcd52c6a166961"}, {"sha": "ab2a99f69918f3e0bb6eb22f4523be07ac0222da", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab2a99f69918f3e0bb6eb22f4523be07ac0222da", "html_url": "https://github.com/rust-lang/rust/commit/ab2a99f69918f3e0bb6eb22f4523be07ac0222da"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "6103312bc786d48ad224d41513a9fe8c01834dd2", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=fb279aa02a7ff2ed069791f60a5159d73c8ed993", "patch": "@@ -23,6 +23,7 @@ use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n+use syntax::parse::token;\n \n use driver::session::Session;\n \n@@ -36,6 +37,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"once_fns\", Active),\n     (\"asm\", Active),\n     (\"managed_boxes\", Active),\n+    (\"non_ascii_idents\", Active),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n@@ -76,6 +78,15 @@ impl Context {\n }\n \n impl Visitor<()> for Context {\n+    fn visit_ident(&mut self, sp: Span, id: ast::Ident, _: ()) {\n+        let s = token::ident_to_str(&id);\n+\n+        if !s.is_ascii() {\n+            self.gate_feature(\"non_ascii_idents\", sp,\n+                              \"non-ascii idents are not fully supported.\");\n+        }\n+    }\n+\n     fn visit_view_item(&mut self, i: &ast::view_item, _: ()) {\n         match i.node {\n             ast::view_item_use(ref paths) => {"}, {"sha": "342f706ec82b193ba170b39264d1f3017a99bd68", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=fb279aa02a7ff2ed069791f60a5159d73c8ed993", "patch": "@@ -67,6 +67,9 @@ pub fn generics_of_fn(fk: &fn_kind) -> Generics {\n }\n \n pub trait Visitor<E:Clone> {\n+    fn visit_ident(&mut self, _sp: Span, _ident: Ident, _e: E) {\n+        /*! Visit the idents */\n+    }\n     fn visit_mod(&mut self, m:&_mod, _s:Span, _n:NodeId, e:E) { walk_mod(self, m, e) }\n     fn visit_view_item(&mut self, i:&view_item, e:E) { walk_view_item(self, i, e) }\n     fn visit_foreign_item(&mut self, i:@foreign_item, e:E) { walk_foreign_item(self, i, e) }\n@@ -132,8 +135,31 @@ pub fn walk_mod<E:Clone, V:Visitor<E>>(visitor: &mut V, module: &_mod, env: E) {\n     }\n }\n \n-pub fn walk_view_item<E:Clone, V:Visitor<E>>(_: &mut V, _: &view_item, _: E) {\n-    // Empty!\n+pub fn walk_view_item<E:Clone, V:Visitor<E>>(visitor: &mut V, vi: &view_item, env: E) {\n+    match vi.node {\n+        view_item_extern_mod(name, _, _, _) => {\n+            visitor.visit_ident(vi.span, name, env)\n+        }\n+        view_item_use(ref paths) => {\n+            for vp in paths.iter() {\n+                let path = match vp.node {\n+                    view_path_simple(ident, ref path, _) => {\n+                        visitor.visit_ident(vp.span, ident, env.clone());\n+                        path\n+                    }\n+                    view_path_glob(ref path, _) => path,\n+                    view_path_list(ref path, ref list, _) => {\n+                        for id in list.iter() {\n+                            visitor.visit_ident(id.span, id.node.name, env.clone())\n+                        }\n+                        path\n+                    }\n+                };\n+\n+                walk_path(visitor, path, env.clone());\n+            }\n+        }\n+    }\n }\n \n pub fn walk_local<E:Clone, V:Visitor<E>>(visitor: &mut V, local: &Local, env: E) {\n@@ -164,6 +190,7 @@ fn walk_trait_ref<E:Clone, V:Visitor<E>>(visitor: &mut V,\n }\n \n pub fn walk_item<E:Clone, V:Visitor<E>>(visitor: &mut V, item: &item, env: E) {\n+    visitor.visit_ident(item.span, item.ident, env.clone());\n     match item.node {\n         item_static(ref typ, _, expr) => {\n             visitor.visit_ty(typ, env.clone());\n@@ -243,6 +270,8 @@ pub fn walk_variant<E:Clone, V:Visitor<E>>(visitor:&mut V,\n                                            variant: &variant,\n                                            generics: &Generics,\n                                            env: E) {\n+    visitor.visit_ident(variant.span, variant.node.name, env.clone());\n+\n     match variant.node.kind {\n         tuple_variant_kind(ref variant_arguments) => {\n             for variant_argument in variant_arguments.iter() {\n@@ -328,6 +357,8 @@ fn walk_lifetime_decls<E:Clone, V:Visitor<E>>(visitor: &mut V,\n \n pub fn walk_path<E:Clone, V:Visitor<E>>(visitor: &mut V, path: &Path, env: E) {\n     for segment in path.segments.iter() {\n+        visitor.visit_ident(path.span, segment.identifier, env.clone());\n+\n         for typ in segment.types.iter() {\n             visitor.visit_ty(typ, env.clone());\n         }\n@@ -393,6 +424,8 @@ pub fn walk_pat<E:Clone, V:Visitor<E>>(visitor: &mut V, pattern: &Pat, env: E) {\n pub fn walk_foreign_item<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                    foreign_item: &foreign_item,\n                                    env: E) {\n+    visitor.visit_ident(foreign_item.span, foreign_item.ident, env.clone());\n+\n     match foreign_item.node {\n         foreign_item_fn(ref function_declaration, ref generics) => {\n             walk_fn_decl(visitor, function_declaration, env.clone());\n@@ -441,6 +474,7 @@ pub fn walk_fn_decl<E:Clone, V:Visitor<E>>(visitor: &mut V,\n pub fn walk_method_helper<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                     method: &method,\n                                     env: E) {\n+    visitor.visit_ident(method.span, method.ident, env.clone());\n     visitor.visit_fn(&fk_method(method.ident, &method.generics, method),\n                      &method.decl,\n                      &method.body,\n@@ -477,12 +511,13 @@ pub fn walk_fn<E:Clone, V:Visitor<E>>(visitor: &mut V,\n pub fn walk_ty_method<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                              method_type: &TypeMethod,\n                                              env: E) {\n+    visitor.visit_ident(method_type.span, method_type.ident, env.clone());\n     visitor.visit_explicit_self(&method_type.explicit_self, env.clone());\n     for argument_type in method_type.decl.inputs.iter() {\n         visitor.visit_ty(&argument_type.ty, env.clone())\n     }\n     visitor.visit_generics(&method_type.generics, env.clone());\n-    visitor.visit_ty(&method_type.decl.output, env.clone())\n+    visitor.visit_ty(&method_type.decl.output, env);\n }\n \n pub fn walk_trait_method<E:Clone, V:Visitor<E>>(visitor: &mut V,\n@@ -510,6 +545,13 @@ pub fn walk_struct_def<E:Clone, V:Visitor<E>>(visitor: &mut V,\n pub fn walk_struct_field<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                    struct_field: &struct_field,\n                                    env: E) {\n+    match struct_field.node.kind {\n+        named_field(name, _) => {\n+            visitor.visit_ident(struct_field.span, name, env.clone())\n+        }\n+        _ => {}\n+    }\n+\n     visitor.visit_ty(&struct_field.node.ty, env)\n }\n "}, {"sha": "9522a523eb30a7f311f97a2a7f293198dc874cca", "filename": "src/test/compile-fail/gated-non-ascii-idents.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs?ref=fb279aa02a7ff2ed069791f60a5159d73c8ed993", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast feature doesn't work.\n+\n+#[feature(struct_variant)];\n+\n+extern mod b\u00e4z; //~ ERROR non-ascii idents\n+\n+use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents\n+\n+mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n+    pub fn bar() {}\n+}\n+\n+fn b\u00e4r( //~ ERROR non-ascii idents\n+    b\u00e4z: int //~ ERROR non-ascii idents\n+    ) {\n+    let _\u00f6: int; //~ ERROR non-ascii idents\n+\n+    match (1, 2) {\n+        (_\u00e4, _) => {} //~ ERROR non-ascii idents\n+    }\n+}\n+\n+struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n+    f\u00f6\u00f6: int //~ ERROR non-ascii idents\n+}\n+\n+enum B\u00e4r { //~ ERROR non-ascii idents\n+    B\u00e4z { //~ ERROR non-ascii idents\n+        q\u00fcx: int //~ ERROR non-ascii idents\n+    }\n+}\n+\n+extern {\n+    fn q\u00fcx();  //~ ERROR non-ascii idents\n+}\n+\n+fn main() {}"}, {"sha": "527a1303b8253f8c0294b04550d3a8ff2b8ef714", "filename": "src/test/run-pass/lint-non-camel-case-types-non-uppercase-statics-unicode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs?ref=fb279aa02a7ff2ed069791f60a5159d73c8ed993", "patch": "@@ -8,8 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast feature doesn't work.\n+\n #[forbid(non_camel_case_types)];\n #[forbid(non_uppercase_statics)];\n+#[feature(non_ascii_idents)];\n \n // Some scripts (e.g. hiragana) don't have a concept of\n // upper/lowercase"}, {"sha": "91b9c1c4e1e7f7d35b1da877205a45bb29cc6031", "filename": "src/test/run-pass/utf8_idents.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb279aa02a7ff2ed069791f60a5159d73c8ed993/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_idents.rs?ref=fb279aa02a7ff2ed069791f60a5159d73c8ed993", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast feature doesn't work.\n+\n+#[feature(non_ascii_idents)];\n+\n use std::num;\n \n pub fn main() {"}]}