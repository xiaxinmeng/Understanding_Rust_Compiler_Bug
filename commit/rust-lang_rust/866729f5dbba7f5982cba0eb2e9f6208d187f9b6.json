{"sha": "866729f5dbba7f5982cba0eb2e9f6208d187f9b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjcyOWY1ZGJiYTdmNTk4MmNiYTBlYjJlOWY2MjA4ZDE4N2Y5YjY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-09-30T07:16:09Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-02T23:10:29Z"}, "message": "Add comments", "tree": {"sha": "c247b76f19c315b76d7e318ee2ca70541ef4db78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c247b76f19c315b76d7e318ee2ca70541ef4db78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/866729f5dbba7f5982cba0eb2e9f6208d187f9b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/866729f5dbba7f5982cba0eb2e9f6208d187f9b6", "html_url": "https://github.com/rust-lang/rust/commit/866729f5dbba7f5982cba0eb2e9f6208d187f9b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/866729f5dbba7f5982cba0eb2e9f6208d187f9b6/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cee3fe00e08ee1f34583df9a20e1e8c0068a139", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cee3fe00e08ee1f34583df9a20e1e8c0068a139", "html_url": "https://github.com/rust-lang/rust/commit/1cee3fe00e08ee1f34583df9a20e1e8c0068a139"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "c0f6f3ae76dbdac8b60ae237cc1ecdf4db6f8189", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/866729f5dbba7f5982cba0eb2e9f6208d187f9b6/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866729f5dbba7f5982cba0eb2e9f6208d187f9b6/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=866729f5dbba7f5982cba0eb2e9f6208d187f9b6", "patch": "@@ -127,28 +127,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 continue;\n             }\n \n-            // _1 in MIR `{ _2 = &_1; clone(move _2); }` or `{ _2 = _1; to_path_buf(_2); } (from_deref)\n-            // In case of `from_deref`, `arg` is already a reference since it is `deref`ed in the previous\n-            // block.\n+            // `{ cloned = &arg; clone(move cloned); }` or `{ cloned = &arg; to_path_buf(cloned); }`\n             let (cloned, cannot_move_out) = unwrap_or_continue!(find_stmt_assigns_to(cx, mir, arg, from_borrow, bb));\n \n             let loc = mir::Location {\n                 block: bb,\n                 statement_index: bbdata.statements.len(),\n             };\n \n-            if from_borrow && (cannot_move_out || !possible_borrower.only_borrowers(&[arg], cloned, loc)) {\n-                continue;\n-            }\n+            // Cloned local\n+            let local = if from_borrow {\n+                // `res = clone(arg)` can be turned into `res = move arg;`\n+                // if `arg` is the only borrow of `cloned` at this point.\n+\n+                if cannot_move_out || !possible_borrower.only_borrowers(&[arg], cloned, loc) {\n+                    continue;\n+                }\n+\n+                cloned\n+            } else {\n+                // `arg` is a reference as it is `.deref()`ed in the previous block.\n+                // Look into the predecessor block and find out the source of deref.\n \n-            // _1 in MIR `{ _2 = &_1; _3 = deref(move _2); } -> { _4 = _3; to_path_buf(move _4); }`\n-            let referent = if from_deref {\n                 let ps = mir.predecessors_for(bb);\n                 if ps.len() != 1 {\n                     continue;\n                 }\n                 let pred_terminator = mir[ps[0]].terminator();\n \n+                // receiver of the `deref()` call\n                 let pred_arg = if_chain! {\n                     if let Some((pred_fn_def_id, pred_arg, pred_arg_ty, Some(res))) =\n                         is_call_with_ref_arg(cx, mir, &pred_terminator.kind);\n@@ -169,22 +176,33 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                     block: bb,\n                     statement_index: mir.basic_blocks()[bb].statements.len(),\n                 };\n+\n+                // This can be turned into `res = move local` if `arg` and `cloned` are not borrowed\n+                // at the last statement:\n+                //\n+                // ```\n+                // pred_arg = &local;\n+                // cloned = deref(pred_arg);\n+                // arg = &cloned;\n+                // StorageDead(pred_arg);\n+                // res = to_path_buf(cloned);\n+                // ```\n                 if cannot_move_out || !possible_borrower.only_borrowers(&[arg, cloned], local, loc) {\n                     continue;\n                 }\n+\n                 local\n-            } else {\n-                cloned\n             };\n \n+            // `local` cannot be moved out if it is used later\n             let used_later = traversal::ReversePostorder::new(&mir, bb).skip(1).any(|(tbb, tdata)| {\n                 // Give up on loops\n                 if tdata.terminator().successors().any(|s| *s == bb) {\n                     return true;\n                 }\n \n                 let mut vis = LocalUseVisitor {\n-                    local: referent,\n+                    local,\n                     used_other_than_drop: false,\n                 };\n                 vis.visit_basic_block_data(tbb, tdata);\n@@ -207,7 +225,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                             span.lo() + BytePos(u32::try_from(dot).unwrap())\n                         );\n                         let mut app = Applicability::MaybeIncorrect;\n+\n                         let mut call_snip = &snip[dot + 1..];\n+                        // Machine applicable when `call_snip` looks like `foobar()`\n                         if call_snip.ends_with(\"()\") {\n                             call_snip = call_snip[..call_snip.len()-2].trim();\n                             if call_snip.as_bytes().iter().all(|b| b.is_ascii_alphabetic() || *b == b'_') {\n@@ -366,6 +386,7 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n     }\n }\n \n+/// Determines liveness of each local purely based on `StorageLive`/`Dead`.\n #[derive(Copy, Clone)]\n struct MaybeStorageLive<'a, 'tcx> {\n     body: &'a mir::Body<'tcx>,\n@@ -420,6 +441,9 @@ impl<'a, 'tcx> BottomValue for MaybeStorageLive<'a, 'tcx> {\n     const BOTTOM_VALUE: bool = false;\n }\n \n+/// Collects the possible borrowers of each local.\n+/// For example, `b = &a; c = &a;` will make `b` and (transitively) `c`\n+/// possible borrowers of `a`.\n struct PossibleBorrowerVisitor<'a, 'tcx> {\n     possible_borrower: TransitiveRelation<mir::Local>,\n     body: &'a mir::Body<'tcx>,\n@@ -507,10 +531,10 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n             ..\n         } = &terminator.kind\n         {\n-            // If the call returns something with some lifetime,\n+            // If the call returns something with lifetimes,\n             // let's conservatively assume the returned value contains lifetime of all the arguments.\n-            let mut cr = ContainsRegion;\n-            if !cr.visit_ty(&self.body.local_decls[*dest].ty) {\n+            // For example, given `let y: Foo<'a> = foo(x)`, `y` is considered to be a possible borrower of `x`.\n+            if !ContainsRegion.visit_ty(&self.body.local_decls[*dest].ty) {\n                 return;\n             }\n \n@@ -559,14 +583,17 @@ fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n     }\n }\n \n+/// Result of `PossibleBorrowerVisitor`.\n struct PossibleBorrower<'a, 'tcx> {\n+    /// Mapping `Local -> its possible borrowers`\n     map: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n     maybe_live: DataflowResultsCursor<'a, 'tcx, MaybeStorageLive<'a, 'tcx>>,\n     // Caches to avoid allocation of `BitSet` on every query\n     bitset: (BitSet<mir::Local>, BitSet<mir::Local>),\n }\n \n impl PossibleBorrower<'_, '_> {\n+    /// Returns true if the set of borrowers of `borrowed` living at `at` matches with `borrowers`.\n     fn only_borrowers(&mut self, borrowers: &[mir::Local], borrowed: mir::Local, at: mir::Location) -> bool {\n         self.maybe_live.seek(at);\n "}]}