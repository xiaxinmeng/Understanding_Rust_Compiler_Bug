{"sha": "7210a31e2aadb8f7995326126d3411ebc19a7408", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMTBhMzFlMmFhZGI4Zjc5OTUzMjYxMjZkMzQxMWViYzE5YTc0MDg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-18T02:20:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-18T02:20:51Z"}, "message": "rustc: Make all drop and take glue have the same signature, so we can put them in tydescs", "tree": {"sha": "a67db0f87ce8ef8dcbf1ce30a769503fc534469f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a67db0f87ce8ef8dcbf1ce30a769503fc534469f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7210a31e2aadb8f7995326126d3411ebc19a7408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7210a31e2aadb8f7995326126d3411ebc19a7408", "html_url": "https://github.com/rust-lang/rust/commit/7210a31e2aadb8f7995326126d3411ebc19a7408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7210a31e2aadb8f7995326126d3411ebc19a7408/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b00abd04e26ee26a4f37d9f94dc1e28424a970d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b00abd04e26ee26a4f37d9f94dc1e28424a970d0", "html_url": "https://github.com/rust-lang/rust/commit/b00abd04e26ee26a4f37d9f94dc1e28424a970d0"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "7f3b0a05c1014738b54992007f246302e480cbb4", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7210a31e2aadb8f7995326126d3411ebc19a7408/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a31e2aadb8f7995326126d3411ebc19a7408/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7210a31e2aadb8f7995326126d3411ebc19a7408", "patch": "@@ -594,13 +594,7 @@ fn make_ty_info(@crate_ctxt cx, @typeck.ty ty) {\n \n fn make_generic_glue(@crate_ctxt cx, @typeck.ty t, str name,\n                      val_and_ty_fn helper) -> ValueRef {\n-    auto arg_t;\n-    if (typeck.type_is_structural(t)) {\n-        arg_t = T_ptr(type_of(cx, t));\n-    } else {\n-        arg_t = type_of(cx, t);\n-    }\n-    auto llfnty = T_fn(vec(T_taskptr(), arg_t), T_void());\n+    auto llfnty = T_fn(vec(T_taskptr(), T_ptr(T_i8())), T_void());\n \n     auto fn_name = cx.names.next(\"_rust_\" + name) + \".\" + typeck.ty_to_str(t);\n     fn_name = sanitize(fn_name);\n@@ -609,11 +603,24 @@ fn make_generic_glue(@crate_ctxt cx, @typeck.ty t, str name,\n     auto fcx = new_fn_ctxt(cx, fn_name, llfn);\n     auto bcx = new_top_block_ctxt(fcx);\n \n-    auto llval = llvm.LLVMGetParam(llfn, 1u);\n+    auto re;\n+    if (!typeck.type_is_scalar(t)) {\n+        auto llty;\n+        if (typeck.type_is_structural(t)) {\n+            llty = T_ptr(type_of(cx, t));\n+        } else {\n+            llty = type_of(cx, t);\n+        }\n \n-    auto res = helper(bcx, llval, t);\n+        auto llrawptr = llvm.LLVMGetParam(llfn, 1u);\n+        auto llval = bcx.build.BitCast(llrawptr, llty);\n+        \n+        re = helper(bcx, llval, t);\n+    } else {\n+        re = res(bcx, C_nil());\n+    }\n \n-    res.bcx.build.RetVoid();\n+    re.bcx.build.RetVoid();\n     ret llfn;\n }\n \n@@ -960,8 +967,11 @@ fn iter_sequence(@block_ctxt cx,\n fn incr_all_refcnts(@block_ctxt cx,\n                     ValueRef v,\n                     @typeck.ty t) -> result {\n-    cx.build.FastCall(get_ty_info(cx.fcx.ccx, t).take_glue,\n-                      vec(cx.fcx.lltaskptr, v));\n+    if (!typeck.type_is_scalar(t)) {\n+        auto llrawptr = cx.build.BitCast(v, T_ptr(T_i8()));\n+        cx.build.FastCall(get_ty_info(cx.fcx.ccx, t).take_glue,\n+                          vec(cx.fcx.lltaskptr, llrawptr));\n+    }\n     ret res(cx, C_nil());\n }\n \n@@ -980,8 +990,11 @@ fn drop_slot(@block_ctxt cx,\n fn drop_ty(@block_ctxt cx,\n            ValueRef v,\n            @typeck.ty t) -> result {\n-    cx.build.FastCall(get_ty_info(cx.fcx.ccx, t).drop_glue,\n-                      vec(cx.fcx.lltaskptr, v));\n+    if (!typeck.type_is_scalar(t)) {\n+        auto llrawptr = cx.build.BitCast(v, T_ptr(T_i8()));\n+        cx.build.FastCall(get_ty_info(cx.fcx.ccx, t).drop_glue,\n+                          vec(cx.fcx.lltaskptr, llrawptr));\n+    }\n     ret res(cx, C_nil());\n }\n "}, {"sha": "41c3bbb612003be8732ccbc8709017cd90417191", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7210a31e2aadb8f7995326126d3411ebc19a7408/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a31e2aadb8f7995326126d3411ebc19a7408/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7210a31e2aadb8f7995326126d3411ebc19a7408", "patch": "@@ -887,6 +887,7 @@ fn type_is_boxed(@ty t) -> bool {\n \n fn type_is_scalar(@ty t) -> bool {\n     alt (t.struct) {\n+        case (ty_nil) { ret true; }\n         case (ty_bool) { ret true; }\n         case (ty_int) { ret true; }\n         case (ty_uint) { ret true; }"}]}