{"sha": "d2e52ea127fea8d3c8eef3815cb52935f85605a3", "node_id": "C_kwDOAAsO6NoAKGQyZTUyZWExMjdmZWE4ZDNjOGVlZjM4MTVjYjUyOTM1Zjg1NjA1YTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-16T18:12:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-16T18:12:18Z"}, "message": "Rollup merge of #111610 - bvanjoi:fix-99597, r=compiler-errors\n\nfix(diagnostic): wrap parens for ref impl trait param\n\nFixes https://github.com/rust-lang/rust/issues/99597\n\nWhen parameters are an `impl_trait` which it needed to add trait, and it is a reference, add parentheses to the type of the parameter in the suggestion", "tree": {"sha": "b3acd36492dba773e18651e4813f99732da61361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3acd36492dba773e18651e4813f99732da61361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2e52ea127fea8d3c8eef3815cb52935f85605a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkY8eCCRBK7hj4Ov3rIwAADfsIADtpdFMfxosgVCboM0gePN2/\n8TqNLrySvdV+3JBiWWzxoKUCcsYGqnBxL3Zl2IatqlT6fJY5WoS2P5kRxaAsFtSK\nxoWA9s5h7Vj4OXCKqF4aO318deaH5mp/Cu6uLK6Vf3UC8qsqhpV7YrN0SQxPNduX\nHGu56c8ZI4hWLLCaJbpbKHT8aCiv/XXCdM+ET6EY7KgTQ+AMvm+dIvs10M2KKxlT\n50exm0wu+mjJVCJOtnS1+cH9iorD9NBEbGtbdVbNcXmHNSG6OQEG9lZObjzVAWFu\nBB+0HGUV5I4wvA2RNCJF8sQqMsqORFJkjkCyr7uysu8HodDH6uiCMjF5jynLgPg=\n=zUGg\n-----END PGP SIGNATURE-----\n", "payload": "tree b3acd36492dba773e18651e4813f99732da61361\nparent 20f6aa1365d556edf4804fc502f1f29c1ef9fdcb\nparent b2b2be1cad5a3009f53f490ae09abf33958e40df\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684260738 +0200\ncommitter GitHub <noreply@github.com> 1684260738 +0200\n\nRollup merge of #111610 - bvanjoi:fix-99597, r=compiler-errors\n\nfix(diagnostic): wrap parens for ref impl trait param\n\nFixes https://github.com/rust-lang/rust/issues/99597\n\nWhen parameters are an `impl_trait` which it needed to add trait, and it is a reference, add parentheses to the type of the parameter in the suggestion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e52ea127fea8d3c8eef3815cb52935f85605a3", "html_url": "https://github.com/rust-lang/rust/commit/d2e52ea127fea8d3c8eef3815cb52935f85605a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2e52ea127fea8d3c8eef3815cb52935f85605a3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20f6aa1365d556edf4804fc502f1f29c1ef9fdcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/20f6aa1365d556edf4804fc502f1f29c1ef9fdcb", "html_url": "https://github.com/rust-lang/rust/commit/20f6aa1365d556edf4804fc502f1f29c1ef9fdcb"}, {"sha": "b2b2be1cad5a3009f53f490ae09abf33958e40df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b2be1cad5a3009f53f490ae09abf33958e40df", "html_url": "https://github.com/rust-lang/rust/commit/b2b2be1cad5a3009f53f490ae09abf33958e40df"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "550a87e6102bfffce5dbf3555347f7d6c6f32fc8", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d2e52ea127fea8d3c8eef3815cb52935f85605a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e52ea127fea8d3c8eef3815cb52935f85605a3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=d2e52ea127fea8d3c8eef3815cb52935f85605a3", "patch": "@@ -2633,47 +2633,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 Nothing,\n                             }\n                             let ast_generics = hir.get_generics(id.owner.def_id).unwrap();\n-                            let (sp, mut introducer) = if let Some(span) =\n-                                ast_generics.bounds_span_for_suggestions(def_id)\n-                            {\n-                                (span, Introducer::Plus)\n-                            } else if let Some(colon_span) = param.colon_span {\n-                                (colon_span.shrink_to_hi(), Introducer::Nothing)\n-                            } else {\n-                                (param.span.shrink_to_hi(), Introducer::Colon)\n-                            };\n-                            if matches!(\n-                                param.kind,\n-                                hir::GenericParamKind::Type { synthetic: true, .. },\n-                            ) {\n-                                introducer = Introducer::Plus\n-                            }\n                             let trait_def_ids: FxHashSet<DefId> = ast_generics\n                                 .bounds_for_param(def_id)\n                                 .flat_map(|bp| bp.bounds.iter())\n                                 .filter_map(|bound| bound.trait_ref()?.trait_def_id())\n                                 .collect();\n-                            if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n-                                err.span_suggestions(\n-                                    sp,\n-                                    message(format!(\n-                                        \"restrict type parameter `{}` with\",\n-                                        param.name.ident(),\n-                                    )),\n+                            if candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n+                                return;\n+                            }\n+                            let msg = message(format!(\n+                                \"restrict type parameter `{}` with\",\n+                                param.name.ident(),\n+                            ));\n+                            let bounds_span = ast_generics.bounds_span_for_suggestions(def_id);\n+                            if rcvr_ty.is_ref() && param.is_impl_trait() && bounds_span.is_some() {\n+                                err.multipart_suggestions(\n+                                    msg,\n                                     candidates.iter().map(|t| {\n-                                        format!(\n-                                            \"{} {}\",\n-                                            match introducer {\n-                                                Introducer::Plus => \" +\",\n-                                                Introducer::Colon => \":\",\n-                                                Introducer::Nothing => \"\",\n-                                            },\n-                                            self.tcx.def_path_str(t.def_id),\n-                                        )\n+                                        vec![\n+                                            (param.span.shrink_to_lo(), \"(\".to_string()),\n+                                            (\n+                                                bounds_span.unwrap(),\n+                                                format!(\" + {})\", self.tcx.def_path_str(t.def_id)),\n+                                            ),\n+                                        ]\n                                     }),\n                                     Applicability::MaybeIncorrect,\n                                 );\n+                                return;\n                             }\n+\n+                            let (sp, introducer) = if let Some(span) = bounds_span {\n+                                (span, Introducer::Plus)\n+                            } else if let Some(colon_span) = param.colon_span {\n+                                (colon_span.shrink_to_hi(), Introducer::Nothing)\n+                            } else if param.is_impl_trait() {\n+                                (param.span.shrink_to_hi(), Introducer::Plus)\n+                            } else {\n+                                (param.span.shrink_to_hi(), Introducer::Colon)\n+                            };\n+\n+                            err.span_suggestions(\n+                                sp,\n+                                msg,\n+                                candidates.iter().map(|t| {\n+                                    format!(\n+                                        \"{} {}\",\n+                                        match introducer {\n+                                            Introducer::Plus => \" +\",\n+                                            Introducer::Colon => \":\",\n+                                            Introducer::Nothing => \"\",\n+                                        },\n+                                        self.tcx.def_path_str(t.def_id)\n+                                    )\n+                                }),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                             return;\n                         }\n                         Node::Item(hir::Item {"}, {"sha": "8ba9e1fdd62213fc09c20324ca4d85d56323bbdf", "filename": "tests/ui/suggestions/issue-99597.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d2e52ea127fea8d3c8eef3815cb52935f85605a3/tests%2Fui%2Fsuggestions%2Fissue-99597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e52ea127fea8d3c8eef3815cb52935f85605a3/tests%2Fui%2Fsuggestions%2Fissue-99597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-99597.rs?ref=d2e52ea127fea8d3c8eef3815cb52935f85605a3", "patch": "@@ -0,0 +1,15 @@\n+#![allow(dead_code)]\n+\n+trait T1 { }\n+\n+trait T2 {\n+    fn test(&self) { }\n+}\n+\n+fn go(s: &impl T1) {\n+    //~^ SUGGESTION (\n+    s.test();\n+    //~^ ERROR no method named `test`\n+}\n+\n+fn main() { }"}, {"sha": "bdf2a07c143b4db9fab2a8fde39284028253b55f", "filename": "tests/ui/suggestions/issue-99597.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d2e52ea127fea8d3c8eef3815cb52935f85605a3/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e52ea127fea8d3c8eef3815cb52935f85605a3/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr?ref=d2e52ea127fea8d3c8eef3815cb52935f85605a3", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no method named `test` found for reference `&impl T1` in the current scope\n+  --> $DIR/issue-99597.rs:11:7\n+   |\n+LL |     s.test();\n+   |       ^^^^ method not found in `&impl T1`\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `test`, perhaps you need to restrict type parameter `impl T1` with it:\n+   |\n+LL | fn go(s: &(impl T1 + T2)) {\n+   |           +        +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}