{"sha": "7a935670055d87e17c381542f4eaab481e8bf17b", "node_id": "C_kwDOAAsO6NoAKDdhOTM1NjcwMDU1ZDg3ZTE3YzM4MTU0MmY0ZWFhYjQ4MWU4YmYxN2I", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-07T19:12:49Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-07T19:12:49Z"}, "message": "docs: show Clone and Copy on () doc pages", "tree": {"sha": "179b9eb8918763f6c860e0b852f93e83be60a208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/179b9eb8918763f6c860e0b852f93e83be60a208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a935670055d87e17c381542f4eaab481e8bf17b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a935670055d87e17c381542f4eaab481e8bf17b", "html_url": "https://github.com/rust-lang/rust/commit/7a935670055d87e17c381542f4eaab481e8bf17b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a935670055d87e17c381542f4eaab481e8bf17b/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6a85789e866c725015e0e2a5defeccbcc2cc3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6a85789e866c725015e0e2a5defeccbcc2cc3b", "html_url": "https://github.com/rust-lang/rust/commit/1e6a85789e866c725015e0e2a5defeccbcc2cc3b"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "fd5624812f554823a3f6fbe69cc1b990dee6aa5a", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a935670055d87e17c381542f4eaab481e8bf17b/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a935670055d87e17c381542f4eaab481e8bf17b/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=7a935670055d87e17c381542f4eaab481e8bf17b", "patch": "@@ -95,7 +95,6 @@ use crate::marker::Destruct;\n ///\n /// * Function item types (i.e., the distinct types defined for each function)\n /// * Function pointer types (e.g., `fn() -> i32`)\n-/// * Tuple types, if each component also implements `Clone` (e.g., `()`, `(i32, bool)`)\n /// * Closure types, if they capture no value from the environment\n ///   or if all such captured values implement `Clone` themselves.\n ///   Note that variables captured by shared reference always implement `Clone`"}, {"sha": "2c57897956fcd44cb2f9f2cefc16f8e4f80201ee", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a935670055d87e17c381542f4eaab481e8bf17b/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a935670055d87e17c381542f4eaab481e8bf17b/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=7a935670055d87e17c381542f4eaab481e8bf17b", "patch": "@@ -359,7 +359,6 @@ pub trait StructuralEq {\n ///\n /// * Function item types (i.e., the distinct types defined for each function)\n /// * Function pointer types (e.g., `fn() -> i32`)\n-/// * Tuple types, if each component also implements `Copy` (e.g., `()`, `(i32, bool)`)\n /// * Closure types, if they capture no value from the environment\n ///   or if all such captured values implement `Copy` themselves.\n ///   Note that variables captured by shared reference always implement `Copy`"}, {"sha": "db2f7ec0e0e353982d709c33d970e41107739460", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7a935670055d87e17c381542f4eaab481e8bf17b/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a935670055d87e17c381542f4eaab481e8bf17b/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=7a935670055d87e17c381542f4eaab481e8bf17b", "patch": "@@ -444,6 +444,22 @@ mod prim_unit {}\n #[doc(hidden)]\n impl () {}\n \n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Clone for () {\n+    fn clone(&self) -> Self {\n+        loop {}\n+    }\n+}\n+\n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Copy for () {\n+    // empty\n+}\n+\n #[doc(primitive = \"pointer\")]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n@@ -959,6 +975,24 @@ mod prim_tuple {}\n #[doc(hidden)]\n impl<T, U> (T, U) {}\n \n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+/// This trait is implemented on arbitrary-length tuples.\n+impl<T: Clone> Clone for (T,) {\n+    fn clone(&self) -> Self {\n+        loop {}\n+    }\n+}\n+\n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+/// This trait is implemented on arbitrary-length tuples.\n+impl<T: Copy> Copy for (T,) {\n+    // empty\n+}\n+\n #[doc(primitive = \"f32\")]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///"}, {"sha": "db2f7ec0e0e353982d709c33d970e41107739460", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7a935670055d87e17c381542f4eaab481e8bf17b/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a935670055d87e17c381542f4eaab481e8bf17b/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=7a935670055d87e17c381542f4eaab481e8bf17b", "patch": "@@ -444,6 +444,22 @@ mod prim_unit {}\n #[doc(hidden)]\n impl () {}\n \n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Clone for () {\n+    fn clone(&self) -> Self {\n+        loop {}\n+    }\n+}\n+\n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Copy for () {\n+    // empty\n+}\n+\n #[doc(primitive = \"pointer\")]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n@@ -959,6 +975,24 @@ mod prim_tuple {}\n #[doc(hidden)]\n impl<T, U> (T, U) {}\n \n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+/// This trait is implemented on arbitrary-length tuples.\n+impl<T: Clone> Clone for (T,) {\n+    fn clone(&self) -> Self {\n+        loop {}\n+    }\n+}\n+\n+// Fake impl that's only really used for docs.\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+/// This trait is implemented on arbitrary-length tuples.\n+impl<T: Copy> Copy for (T,) {\n+    // empty\n+}\n+\n #[doc(primitive = \"f32\")]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///"}]}