{"sha": "1dc055c522451abd5582664968381071c51e3077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzA1NWM1MjI0NTFhYmQ1NTgyNjY0OTY4MzgxMDcxYzUxZTMwNzc=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-09-21T18:05:27Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-09-21T18:05:27Z"}, "message": "Merge pull request #331 from marcusklaas/extern\n\nFormat foreign functions and statics", "tree": {"sha": "dd4935cafb90267d1e80c159d3d5c8df2c44cd70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4935cafb90267d1e80c159d3d5c8df2c44cd70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc055c522451abd5582664968381071c51e3077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc055c522451abd5582664968381071c51e3077", "html_url": "https://github.com/rust-lang/rust/commit/1dc055c522451abd5582664968381071c51e3077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc055c522451abd5582664968381071c51e3077/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa67e0359a9876847eeb7ad072b825d8891a3f29", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa67e0359a9876847eeb7ad072b825d8891a3f29", "html_url": "https://github.com/rust-lang/rust/commit/fa67e0359a9876847eeb7ad072b825d8891a3f29"}, {"sha": "71faa8984d9b82b0e0a4d0e145fd541512697c7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/71faa8984d9b82b0e0a4d0e145fd541512697c7d", "html_url": "https://github.com/rust-lang/rust/commit/71faa8984d9b82b0e0a4d0e145fd541512697c7d"}], "stats": {"total": 197, "additions": 172, "deletions": 25}, "files": [{"sha": "33e0a2a11b4f7b8fbea5b62f1ecf0ed693219782", "filename": "src/items.rs", "status": "modified", "additions": 114, "deletions": 16, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/1dc055c522451abd5582664968381071c51e3077/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc055c522451abd5582664968381071c51e3077/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1dc055c522451abd5582664968381071c51e3077", "patch": "@@ -33,8 +33,18 @@ impl<'a> FmtVisitor<'a> {\n             let mut infix = String::new();\n \n             if let Some(ref ty) = local.ty {\n-                infix.push_str(\": \");\n-                infix.push_str(&ty.rewrite(&self.get_context(), 1000, Indent::empty()).unwrap());\n+                // 2 = \": \".len()\n+                let offset = self.block_indent + 2;\n+                let width = self.config.max_width - offset.width();\n+                let rewrite = ty.rewrite(&self.get_context(), width, offset);\n+\n+                match rewrite {\n+                    Some(result) => {\n+                        infix.push_str(\": \");\n+                        infix.push_str(&result);\n+                    }\n+                    None => return,\n+                }\n             }\n \n             if local.init.is_some() {\n@@ -88,15 +98,103 @@ impl<'a> FmtVisitor<'a> {\n         self.last_pos = span.hi;\n     }\n \n+    pub fn format_foreign_mod(&mut self, fm: &ast::ForeignMod, span: Span) {\n+        self.buffer.push_str(\"extern \");\n+\n+        if fm.abi != abi::Abi::C {\n+            self.buffer.push_str(&format!(\"{} \", fm.abi));\n+        }\n+\n+        let snippet = self.snippet(span);\n+        let brace_pos = snippet.find_uncommented(\"{\").unwrap() as u32;\n+\n+        // FIXME: this skips comments between the extern keyword and the opening\n+        // brace.\n+        self.last_pos = span.lo + BytePos(brace_pos);\n+        self.block_indent = self.block_indent.block_indent(self.config);\n+\n+        for item in &fm.items {\n+            self.format_foreign_item(&*item);\n+        }\n+\n+        self.block_indent = self.block_indent.block_unindent(self.config);\n+        self.format_missing_with_indent(span.hi - BytePos(1));\n+        self.buffer.push_str(\"}\");\n+        self.last_pos = span.hi;\n+    }\n+\n+    fn format_foreign_item(&mut self, item: &ast::ForeignItem) {\n+        self.format_missing_with_indent(item.span.lo);\n+        // Drop semicolon or it will be interpreted as comment.\n+        // FIXME: this may be a faulty span from libsyntax.\n+        let span = codemap::mk_sp(item.span.lo, item.span.hi - BytePos(1));\n+\n+        match item.node {\n+            ast::ForeignItem_::ForeignItemFn(ref fn_decl, ref generics) => {\n+                let indent = self.block_indent;\n+                let rewrite = self.rewrite_fn_base(indent,\n+                                                   item.ident,\n+                                                   fn_decl,\n+                                                   None,\n+                                                   generics,\n+                                                   ast::Unsafety::Normal,\n+                                                   ast::Constness::NotConst,\n+                                                   // These are not actually rust functions,\n+                                                   // but we format them as such.\n+                                                   abi::Abi::Rust,\n+                                                   ast::Visibility::Inherited,\n+                                                   span,\n+                                                   false);\n+\n+                match rewrite {\n+                    Some(new_fn) => {\n+                        self.buffer.push_str(format_visibility(item.vis));\n+                        self.buffer.push_str(&new_fn);\n+                        self.buffer.push_str(\";\");\n+                    }\n+                    None => self.format_missing(item.span.hi),\n+                }\n+            }\n+            ast::ForeignItem_::ForeignItemStatic(ref ty, is_mutable) => {\n+                // FIXME(#21): we're dropping potential comments in between the\n+                // function keywords here.\n+                let mut_str = if is_mutable {\n+                    \"mut \"\n+                } else {\n+                    \"\"\n+                };\n+                let prefix = format!(\"{}static {}{}: \",\n+                                     format_visibility(item.vis),\n+                                     mut_str,\n+                                     item.ident);\n+                let offset = self.block_indent + prefix.len();\n+                // 1 = ;\n+                let width = self.config.max_width - offset.width() - 1;\n+                let rewrite = ty.rewrite(&self.get_context(), width, offset);\n+\n+                match rewrite {\n+                    Some(result) => {\n+                        self.buffer.push_str(&prefix);\n+                        self.buffer.push_str(&result);\n+                        self.buffer.push_str(\";\");\n+                    }\n+                    None => self.format_missing(item.span.hi),\n+                }\n+            }\n+        }\n+\n+        self.last_pos = item.span.hi;\n+    }\n+\n     pub fn rewrite_fn(&mut self,\n                       indent: Indent,\n                       ident: ast::Ident,\n                       fd: &ast::FnDecl,\n                       explicit_self: Option<&ast::ExplicitSelf>,\n                       generics: &ast::Generics,\n-                      unsafety: &ast::Unsafety,\n-                      constness: &ast::Constness,\n-                      abi: &abi::Abi,\n+                      unsafety: ast::Unsafety,\n+                      constness: ast::Constness,\n+                      abi: abi::Abi,\n                       vis: ast::Visibility,\n                       span: Span)\n                       -> Option<String> {\n@@ -147,9 +245,9 @@ impl<'a> FmtVisitor<'a> {\n                                                        &sig.decl,\n                                                        Some(&sig.explicit_self),\n                                                        &sig.generics,\n-                                                       &sig.unsafety,\n-                                                       &sig.constness,\n-                                                       &sig.abi,\n+                                                       sig.unsafety,\n+                                                       sig.constness,\n+                                                       sig.abi,\n                                                        ast::Visibility::Inherited,\n                                                        span,\n                                                        false));\n@@ -166,9 +264,9 @@ impl<'a> FmtVisitor<'a> {\n                        fd: &ast::FnDecl,\n                        explicit_self: Option<&ast::ExplicitSelf>,\n                        generics: &ast::Generics,\n-                       unsafety: &ast::Unsafety,\n-                       constness: &ast::Constness,\n-                       abi: &abi::Abi,\n+                       unsafety: ast::Unsafety,\n+                       constness: ast::Constness,\n+                       abi: abi::Abi,\n                        vis: ast::Visibility,\n                        span: Span,\n                        newline_brace: bool)\n@@ -182,13 +280,13 @@ impl<'a> FmtVisitor<'a> {\n         // Vis unsafety abi.\n         result.push_str(format_visibility(vis));\n \n-        if let &ast::Unsafety::Unsafe = unsafety {\n+        if let ast::Unsafety::Unsafe = unsafety {\n             result.push_str(\"unsafe \");\n         }\n-        if let &ast::Constness::Const = constness {\n+        if let ast::Constness::Const = constness {\n             result.push_str(\"const \");\n         }\n-        if *abi != abi::Rust {\n+        if abi != abi::Rust {\n             result.push_str(\"extern \");\n             result.push_str(&abi.to_string());\n             result.push(' ');\n@@ -497,11 +595,11 @@ impl<'a> FmtVisitor<'a> {\n         }\n         self.block_indent = self.block_indent.block_unindent(self.config);\n \n-        self.format_missing_with_indent(span.lo + BytePos(enum_snippet.rfind('}').unwrap() as u32));\n+        self.format_missing_with_indent(span.hi - BytePos(1));\n         self.buffer.push_str(\"}\");\n     }\n \n-    // Variant of an enum\n+    // Variant of an enum.\n     fn visit_variant(&mut self, field: &ast::Variant, last_field: bool, next_span_start: BytePos) {\n         if self.visit_attrs(&field.node.attrs) {\n             return;"}, {"sha": "8c46d69ebfca72a1cb701f3fff6218331bf58ff0", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1dc055c522451abd5582664968381071c51e3077/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc055c522451abd5582664968381071c51e3077/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=1dc055c522451abd5582664968381071c51e3077", "patch": "@@ -132,12 +132,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n         let indent = self.block_indent;\n         let rewrite = match fk {\n-            visit::FnKind::ItemFn(ident,\n-                                  ref generics,\n-                                  ref unsafety,\n-                                  ref constness,\n-                                  ref abi,\n-                                  vis) => {\n+            visit::FnKind::ItemFn(ident, ref generics, unsafety, constness, abi, vis) => {\n                 self.rewrite_fn(indent,\n                                 ident,\n                                 fd,\n@@ -155,9 +150,9 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                                 fd,\n                                 Some(&sig.explicit_self),\n                                 &sig.generics,\n-                                &sig.unsafety,\n-                                &sig.constness,\n-                                &sig.abi,\n+                                sig.unsafety,\n+                                sig.constness,\n+                                sig.abi,\n                                 vis.unwrap_or(ast::Visibility::Inherited),\n                                 codemap::mk_sp(s.lo, b.span.lo))\n             }\n@@ -224,6 +219,10 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 // See rust lang issue #28424.\n                 // visit::walk_item(self, item);\n             }\n+            ast::Item_::ItemForeignMod(ref foreign_mod) => {\n+                self.format_missing_with_indent(item.span.lo);\n+                self.format_foreign_mod(foreign_mod, item.span);\n+            }\n             _ => {\n                 visit::walk_item(self, item);\n             }"}, {"sha": "2e7b6c1464617be358b9a5e1b283b8a6e6773f1b", "filename": "tests/source/extern.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dc055c522451abd5582664968381071c51e3077/tests%2Fsource%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc055c522451abd5582664968381071c51e3077/tests%2Fsource%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fextern.rs?ref=1dc055c522451abd5582664968381071c51e3077", "patch": "@@ -0,0 +1,21 @@\n+\n+ extern  \"C\" {\n+  fn c_func(x: *mut *mut libc::c_void);\n+\n+  fn c_func(x: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, y: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY);\n+\n+    #[test123]\n+    fn foo() -> uint64_t;\n+\n+pub fn bar() ;\n+   }\n+\n+extern {\n+        fn DMR_GetDevice(pHDev: *mut HDEV, searchMode: DeviceSearchMode, pSearchString: *const c_char, devNr: c_uint, wildcard: c_char) -> TDMR_ERROR;\n+        \n+    fn quux() -> (); // Post comment\n+}\n+\n+extern \"Rust\" { static ext:  u32;\n+    // Some comment.\n+     pub static  mut var : SomeType ; }"}, {"sha": "2c6f4936bff3efa0ed44a0391368e83748e03e9a", "filename": "tests/target/extern.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1dc055c522451abd5582664968381071c51e3077/tests%2Ftarget%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc055c522451abd5582664968381071c51e3077/tests%2Ftarget%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fextern.rs?ref=1dc055c522451abd5582664968381071c51e3077", "patch": "@@ -0,0 +1,29 @@\n+\n+extern {\n+    fn c_func(x: *mut *mut libc::c_void);\n+\n+    fn c_func(x: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,\n+              y: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY);\n+\n+    #[test123]\n+    fn foo() -> uint64_t;\n+\n+    pub fn bar();\n+}\n+\n+extern {\n+    fn DMR_GetDevice(pHDev: *mut HDEV,\n+                     searchMode: DeviceSearchMode,\n+                     pSearchString: *const c_char,\n+                     devNr: c_uint,\n+                     wildcard: c_char)\n+                     -> TDMR_ERROR;\n+\n+    fn quux() -> (); // Post comment\n+}\n+\n+extern \"Rust\" {\n+    static ext: u32;\n+    // Some comment.\n+    pub static mut var: SomeType;\n+}"}]}