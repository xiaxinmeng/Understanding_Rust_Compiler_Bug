{"sha": "86babab2fe92223511042e9cb4b233841cffa054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YmFiYWIyZmU5MjIyMzUxMTA0MmU5Y2I0YjIzMzg0MWNmZmEwNTQ=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-06T01:43:33Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-08T15:57:52Z"}, "message": "Added an unsafe way to pass libchans over spawn and chans, and converted task-comm-0 to use libcomm.", "tree": {"sha": "d8722af215c0cf204b5016c6be4f9f2abb366eee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8722af215c0cf204b5016c6be4f9f2abb366eee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86babab2fe92223511042e9cb4b233841cffa054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86babab2fe92223511042e9cb4b233841cffa054", "html_url": "https://github.com/rust-lang/rust/commit/86babab2fe92223511042e9cb4b233841cffa054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86babab2fe92223511042e9cb4b233841cffa054/comments", "author": null, "committer": null, "parents": [{"sha": "0aeddb3673459969fdbb32018f9c59f603607cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aeddb3673459969fdbb32018f9c59f603607cf5", "html_url": "https://github.com/rust-lang/rust/commit/0aeddb3673459969fdbb32018f9c59f603607cf5"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "8d416b7d60f8dd9919549d1befb090c290dd2c4d", "filename": "src/lib/comm.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/86babab2fe92223511042e9cb4b233841cffa054/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86babab2fe92223511042e9cb4b233841cffa054/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=86babab2fe92223511042e9cb4b233841cffa054", "patch": "@@ -6,14 +6,15 @@ export _chan;\n export _port;\n \n export mk_port;\n+export chan_from_unsafe_ptr;\n \n native \"rust\" mod rustrt {\n     type void;\n     type rust_chan;\n     type rust_port;\n \n     fn new_chan(po : *rust_port) -> *rust_chan;\n-    fn del_chan(ch : *rust_chan);\n+    fn take_chan(ch : *rust_chan);\n     fn drop_chan(ch : *rust_chan);\n     fn chan_send(ch: *rust_chan, v : *void);\n \n@@ -42,6 +43,16 @@ obj _chan[T](raw_chan : @chan_ptr) {\n         rustrt::chan_send(**raw_chan,\n                           unsafe::reinterpret_cast(ptr::addr_of(v)));\n     }\n+\n+    // Use this to get something we can send over a channel.\n+    fn unsafe_ptr() -> *u8 {\n+        rustrt::take_chan(**raw_chan);\n+        ret unsafe::reinterpret_cast(**raw_chan);\n+    }\n+}\n+\n+fn chan_from_unsafe_ptr[T](ch : *u8) -> _chan[T] {\n+    _chan(@chan_ptr(unsafe::reinterpret_cast(ch)))\n }\n \n obj _port[T](raw_port : @port_ptr) {"}, {"sha": "205f24c2699078ec1c4497b3fded3c3639561019", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/86babab2fe92223511042e9cb4b233841cffa054/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86babab2fe92223511042e9cb4b233841cffa054/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=86babab2fe92223511042e9cb4b233841cffa054", "patch": "@@ -1,14 +1,23 @@\n+use std;\n+\n+import std::comm;\n+\n fn main() { test05(); }\n \n-fn test05_start(ch: chan[int]) { ch <| 10; ch <| 20; ch <| 30; }\n+fn test05_start(pch: *u8) {\n+    let ch = comm::chan_from_unsafe_ptr(pch);\n+\n+    ch.send(10);\n+    ch.send(20);\n+    ch.send(30);\n+}\n \n fn test05() {\n-    let po: port[int] = port();\n-    let ch: chan[int] = chan(po);\n-    spawn test05_start(chan(po));\n-    let value: int;\n-    po |> value;\n-    po |> value;\n-    po |> value;\n+    let po = comm::mk_port[int]();\n+    let ch = po.mk_chan();\n+    spawn test05_start(ch.unsafe_ptr());\n+    let value = po.recv();\n+    value = po.recv();\n+    value = po.recv();\n     assert (value == 30);\n }\n\\ No newline at end of file"}]}