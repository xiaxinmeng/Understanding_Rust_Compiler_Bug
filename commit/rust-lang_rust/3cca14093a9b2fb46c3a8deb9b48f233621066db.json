{"sha": "3cca14093a9b2fb46c3a8deb9b48f233621066db", "node_id": "C_kwDOAAsO6NoAKDNjY2ExNDA5M2E5YjJmYjQ2YzNhOGRlYjliNDhmMjMzNjIxMDY2ZGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-20T05:08:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-20T05:08:57Z"}, "message": "Rollup merge of #100186 - compiler-errors:or-as_mut, r=fee1-dead\n\nMention `as_mut` alongside `as_ref` in borrowck error message\n\nKinda fixes #99426 but I guess that really might be better staying open to see if we could make it suggest `as_mut` in a structured way. Not sure how to change borrowck to know that info tho.", "tree": {"sha": "06a756b951e4a8a642fee128c42bbc0ded4fd034", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06a756b951e4a8a642fee128c42bbc0ded4fd034"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cca14093a9b2fb46c3a8deb9b48f233621066db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAGxpCRBK7hj4Ov3rIwAAP/kIAJAqpWPKsxjq678welKeEscD\nyjCqfBp8g2dh4i+9mGrFoyJrvFXbYmjvfv2wqyR2uBNMsPsvpBijbuKbO+BjWy+3\nTSxwv+Irdlj7uHtyeuNjxRoINyctDJhSrSvGh25y5ocI3g8nvseT2ITtBP6ZWaq7\nsCDHv9IR7naFeqFUEWtzxU51xpSz/uyDLf9IIxIuG++A6VATGvxSQ8abDiqKREJj\nFkgYatMwX/09Pscckyewu2MbVL05vwz+YSnv710g2egzl9+AxlJV/hmbmEh7W9H7\njQBgUU4Ksh6VJUwhNu1dSN/uS8rq/QH9cTyEkl7CcAr5hpOrkG6ozLE0qAyBC90=\n=8mpz\n-----END PGP SIGNATURE-----\n", "payload": "tree 06a756b951e4a8a642fee128c42bbc0ded4fd034\nparent e1b28cd2f16bd5b832183d7968cae3bb9213e78d\nparent e37565d2db8d7cf92a6d1df535343d4b2881fc35\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660972137 +0200\ncommitter GitHub <noreply@github.com> 1660972137 +0200\n\nRollup merge of #100186 - compiler-errors:or-as_mut, r=fee1-dead\n\nMention `as_mut` alongside `as_ref` in borrowck error message\n\nKinda fixes #99426 but I guess that really might be better staying open to see if we could make it suggest `as_mut` in a structured way. Not sure how to change borrowck to know that info tho.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cca14093a9b2fb46c3a8deb9b48f233621066db", "html_url": "https://github.com/rust-lang/rust/commit/3cca14093a9b2fb46c3a8deb9b48f233621066db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cca14093a9b2fb46c3a8deb9b48f233621066db/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "html_url": "https://github.com/rust-lang/rust/commit/e1b28cd2f16bd5b832183d7968cae3bb9213e78d"}, {"sha": "e37565d2db8d7cf92a6d1df535343d4b2881fc35", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37565d2db8d7cf92a6d1df535343d4b2881fc35", "html_url": "https://github.com/rust-lang/rust/commit/e37565d2db8d7cf92a6d1df535343d4b2881fc35"}], "stats": {"total": 99, "additions": 15, "deletions": 84}, "files": [{"sha": "683084cf09d443d3a8be50472b77b8892871da60", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3cca14093a9b2fb46c3a8deb9b48f233621066db/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cca14093a9b2fb46c3a8deb9b48f233621066db/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=3cca14093a9b2fb46c3a8deb9b48f233621066db", "patch": "@@ -1086,14 +1086,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             ),\n                         );\n                     }\n-                    if is_option_or_result && maybe_reinitialized_locations_is_empty {\n-                        err.span_suggestion_verbose(\n-                            fn_call_span.shrink_to_lo(),\n-                            \"consider calling `.as_ref()` to borrow the type's contents\",\n-                            \"as_ref().\",\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n                     // Avoid pointing to the same function in multiple different\n                     // error messages.\n                     if span != DUMMY_SP && self.fn_self_span_reported.insert(self_arg.span) {\n@@ -1102,6 +1094,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             &format!(\"this function takes ownership of the receiver `self`, which moves {}\", place_name)\n                         );\n                     }\n+                    if is_option_or_result && maybe_reinitialized_locations_is_empty {\n+                        err.span_label(\n+                            var_span,\n+                            \"help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\",\n+                        );\n+                    }\n                 }\n                 // Other desugarings takes &self, which cannot cause a move\n                 _ => {}"}, {"sha": "b1af090aec2b03346a79cca26359c72d1dbece38", "filename": "src/test/ui/borrowck/suggest-as-ref-on-mut-closure.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr?ref=3cca14093a9b2fb46c3a8deb9b48f233621066db", "patch": "@@ -5,17 +5,14 @@ LL |     cb.map(|cb| cb());\n    |     ^^^--------------\n    |     |  |\n    |     |  `*cb` moved due to this method call\n+   |     help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |     move occurs because `*cb` has type `Option<&mut dyn FnMut()>`, which does not implement the `Copy` trait\n    |\n note: this function takes ownership of the receiver `self`, which moves `*cb`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n    |                            ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n-   |\n-LL |     cb.as_ref().map(|cb| cb());\n-   |        +++++++++\n \n error[E0596]: cannot borrow `*cb` as mutable, as it is behind a `&` reference\n   --> $DIR/suggest-as-ref-on-mut-closure.rs:12:26"}, {"sha": "13bbb233f39862ac5bd81da29f1f47b4632e8cba", "filename": "src/test/ui/suggestions/as-ref-2.fixed", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.fixed?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1,13 +0,0 @@\n-// run-rustfix\n-\n-struct Struct;\n-\n-fn bar(_: &Struct) -> Struct {\n-    Struct\n-}\n-\n-fn main() {\n-    let foo = Some(Struct);\n-    let _x: Option<Struct> = foo.as_ref().map(|s| bar(&s));\n-    let _y = foo; //~ERROR use of moved value: `foo`\n-}"}, {"sha": "b22f409b44a93365b9fcd3db6ccd1eca53984178", "filename": "src/test/ui/suggestions/as-ref-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.rs?ref=3cca14093a9b2fb46c3a8deb9b48f233621066db", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n struct Struct;\n \n fn bar(_: &Struct) -> Struct {"}, {"sha": "e15e45d86b992c64fe39afe87742e96a62a18b9e", "filename": "src/test/ui/suggestions/as-ref-2.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr?ref=3cca14093a9b2fb46c3a8deb9b48f233621066db", "patch": "@@ -1,10 +1,12 @@\n error[E0382]: use of moved value: `foo`\n-  --> $DIR/as-ref-2.rs:12:14\n+  --> $DIR/as-ref-2.rs:10:14\n    |\n LL |     let foo = Some(Struct);\n    |         --- move occurs because `foo` has type `Option<Struct>`, which does not implement the `Copy` trait\n LL |     let _x: Option<Struct> = foo.map(|s| bar(&s));\n-   |                                  ---------------- `foo` moved due to this method call\n+   |                              --- ---------------- `foo` moved due to this method call\n+   |                              |\n+   |                              help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n LL |     let _y = foo;\n    |              ^^^ value used here after move\n    |\n@@ -13,10 +15,6 @@ note: this function takes ownership of the receiver `self`, which moves `foo`\n    |\n LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n    |                            ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n-   |\n-LL |     let _x: Option<Struct> = foo.as_ref().map(|s| bar(&s));\n-   |                                  +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ba16bcc8a336d845ba9800be3b9c7e862491f0d6", "filename": "src/test/ui/suggestions/option-content-move.fixed", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.fixed?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1,39 +0,0 @@\n-//run-rustfix\n-\n-pub struct LipogramCorpora {\n-    selections: Vec<(char, Option<String>)>,\n-}\n-\n-impl LipogramCorpora {\n-    pub fn validate_all(&mut self) -> Result<(), char> {\n-        for selection in &self.selections {\n-            if selection.1.is_some() {\n-                if selection.1.as_ref().unwrap().contains(selection.0) {\n-                //~^ ERROR cannot move out of `selection.1`\n-                    return Err(selection.0);\n-                }\n-            }\n-        }\n-        Ok(())\n-    }\n-}\n-\n-pub struct LipogramCorpora2 {\n-    selections: Vec<(char, Result<String, String>)>,\n-}\n-\n-impl LipogramCorpora2 {\n-    pub fn validate_all(&mut self) -> Result<(), char> {\n-        for selection in &self.selections {\n-            if selection.1.is_ok() {\n-                if selection.1.as_ref().unwrap().contains(selection.0) {\n-                //~^ ERROR cannot move out of `selection.1`\n-                    return Err(selection.0);\n-                }\n-            }\n-        }\n-        Ok(())\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "46c895b95f53671de48b7c9ce597ea3146c1858a", "filename": "src/test/ui/suggestions/option-content-move.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.rs?ref=3cca14093a9b2fb46c3a8deb9b48f233621066db", "patch": "@@ -1,5 +1,3 @@\n-//run-rustfix\n-\n pub struct LipogramCorpora {\n     selections: Vec<(char, Option<String>)>,\n }"}, {"sha": "a6f1ebc975fd5bc450fcfadc41d43a568cb420c5", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cca14093a9b2fb46c3a8deb9b48f233621066db/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=3cca14093a9b2fb46c3a8deb9b48f233621066db", "patch": "@@ -1,38 +1,32 @@\n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n-  --> $DIR/option-content-move.rs:11:20\n+  --> $DIR/option-content-move.rs:9:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    ^^^^^^^^^^^ -------- `selection.1` moved due to this method call\n    |                    |\n+   |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |                    move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n    |\n note: this function takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     pub const fn unwrap(self) -> T {\n    |                         ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n-   |\n-LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-   |                                +++++++++\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n-  --> $DIR/option-content-move.rs:29:20\n+  --> $DIR/option-content-move.rs:27:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    ^^^^^^^^^^^ -------- `selection.1` moved due to this method call\n    |                    |\n+   |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |                    move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n    |\n note: this function takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     pub fn unwrap(self) -> T\n    |                   ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n-   |\n-LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-   |                                +++++++++\n \n error: aborting due to 2 previous errors\n "}]}