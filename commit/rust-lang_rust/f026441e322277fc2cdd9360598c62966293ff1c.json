{"sha": "f026441e322277fc2cdd9360598c62966293ff1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMjY0NDFlMzIyMjc3ZmMyY2RkOTM2MDU5OGM2Mjk2NjI5M2ZmMWM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-30T20:55:22Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-31T17:42:21Z"}, "message": "Use Place directly on propagate_closure_used_mut_place, it's Copy", "tree": {"sha": "ab1866db0e8fc8b7d470b3772ebf3329c1ed4391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab1866db0e8fc8b7d470b3772ebf3329c1ed4391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f026441e322277fc2cdd9360598c62966293ff1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6DgP0ACgkQgTGiTgx5\n769dFA/9HkrVO88xZShOI81jHVYWi98uz/3wCvD/djCl/BT2Ncr6YyVRmicEzWcv\nHDUDK4yFvRP9aQgVCTp62WCMmS5rW8l6FXr7KggqfmilN3gS8P81Zmg5JzpcmBGa\nRcMzavbkZCmhs8RXD8pFEstgHgfe/HebAVgHCNUuyymFa3WSm1IkDjxuS48AbSI4\nrKLBts2ib/tNzx0pg51ghyDylcd3esoTjzhqX53QPHfA+i9Ds0LM+YRMxDtS/txf\nznWnx8tJF6ro0ydVUV+pOU24N7mlph+S74Qv5KnnZpPWQq4TVN+YTkREeCdbMt0c\ntEjOxfcN62yxXknjI2XCPstf194uJEjrhwKK0k2sZlX/DUf7s9BQsIFMzyqynx7j\nhhrVJ8ksAWSr/om20+wCZShXyP7yDOneLtOvhyV4dMzknCQFZQf8X3FkFMv9VBTg\nqJJJ0pDwBQ6gOtn8RJAGDLaENC5afVH2WASQCMWYIwl4l6ys6glCMI3uvIl813eS\nv704xvpjZt4cvKz0kz/6TxxTJOjKhjHj4WgA+Rkm12aSz7TE8gyPDwWur1BtQft0\n1BOvufnLWLk1wc+0EFcu4fWOYsrA/KhO6OEbPFUT1YK/X5etSLsehT2DhLxy5LVq\ncCXsM6DAVCBl8uiBL4Pt5lp9LDrqQZjavp27vgum7blsfKwC/AU=\n=+m/V\n-----END PGP SIGNATURE-----", "payload": "tree ab1866db0e8fc8b7d470b3772ebf3329c1ed4391\nparent d45dca390ce3b1c099276fbd34d426a9b7e86481\nauthor Santiago Pastorino <spastorino@gmail.com> 1585601722 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1585676541 -0300\n\nUse Place directly on propagate_closure_used_mut_place, it's Copy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f026441e322277fc2cdd9360598c62966293ff1c", "html_url": "https://github.com/rust-lang/rust/commit/f026441e322277fc2cdd9360598c62966293ff1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f026441e322277fc2cdd9360598c62966293ff1c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45dca390ce3b1c099276fbd34d426a9b7e86481", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45dca390ce3b1c099276fbd34d426a9b7e86481", "html_url": "https://github.com/rust-lang/rust/commit/d45dca390ce3b1c099276fbd34d426a9b7e86481"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "89663661a8f69d8b51fb69ae13475dd4cd9f38a2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f026441e322277fc2cdd9360598c62966293ff1c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f026441e322277fc2cdd9360598c62966293ff1c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f026441e322277fc2cdd9360598c62966293ff1c", "patch": "@@ -1282,7 +1282,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     fn propagate_closure_used_mut_upvar(&mut self, operand: &Operand<'tcx>) {\n-        let propagate_closure_used_mut_place = |this: &mut Self, place: &Place<'tcx>| {\n+        let propagate_closure_used_mut_place = |this: &mut Self, place: Place<'tcx>| {\n             if !place.projection.is_empty() {\n                 if let Some(field) = this.is_upvar_field_projection(place.as_ref()) {\n                     this.used_mut_upvars.push(field);\n@@ -1296,7 +1296,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // captures of a closure are copied/moved directly\n         // when generating MIR.\n         match *operand {\n-            Operand::Move(ref place) | Operand::Copy(ref place) => {\n+            Operand::Move(place) | Operand::Copy(place) => {\n                 match place.as_local() {\n                     Some(local) if !self.body.local_decls[local].is_user_variable() => {\n                         if self.body.local_decls[local].ty.is_mutable_ptr() {\n@@ -1335,8 +1335,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         let stmt = &bbd.statements[loc.statement_index];\n                         debug!(\"temporary assigned in: stmt={:?}\", stmt);\n \n-                        if let StatementKind::Assign(box (_, Rvalue::Ref(_, _, ref source))) =\n-                            stmt.kind\n+                        if let StatementKind::Assign(box (_, Rvalue::Ref(_, _, source))) = stmt.kind\n                         {\n                             propagate_closure_used_mut_place(self, source);\n                         } else {"}]}