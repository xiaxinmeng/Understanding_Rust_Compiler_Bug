{"sha": "6cb1c0eb64c28742e9d228027d04fe3ebc190e46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYjFjMGViNjRjMjg3NDJlOWQyMjgwMjdkMDRmZTNlYmMxOTBlNDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T07:30:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-24T07:30:37Z"}, "message": "Rollup merge of #72517 - lcnr:refactor-winnowing, r=jonas-schievink\n\nsmall select cleanup", "tree": {"sha": "cde25375d9a3bfd9e6429df7f7716a94015938ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cde25375d9a3bfd9e6429df7f7716a94015938ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cb1c0eb64c28742e9d228027d04fe3ebc190e46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeyiKdCRBK7hj4Ov3rIwAAdHIIACda7S12TCveCVjIwov1cUoV\n5Fr/Kc6I2XKK5usLvsdXCW6cIDu1B1VtHLjtP6gvSaxbZjKkvyHokda2LhOqeAc0\nFrkiuFspTTWLBn2W0HXlblfts7NQtDTkJwbNxU4MGzsG7d+t8NgoUisYzrKlVBf0\n9GQ9oL1MTLFyjUdqIasxdjQu9a3NH/lq9MVfOnW6xuKtjiQKm19oWsoYr1vCTEWb\nsDiSvyhLIR1t/HV/BJT1n4nTb084kYWlrKUJBzkhPIpecidS/xC5QTjGY+Cm5j06\n686aBlt2Y71bt1kBP8ZBz/Us2Cxx4MFKiyKzVucMYBlOf9hFwtKXzk2RBeUTHXo=\n=ITGk\n-----END PGP SIGNATURE-----\n", "payload": "tree cde25375d9a3bfd9e6429df7f7716a94015938ac\nparent fb848a6b7daf63d5cd51b167565a400c3ec42d6a\nparent 82b4fc42fdbbb1132f5a98ded198828e4175da66\nauthor Ralf Jung <post@ralfj.de> 1590305437 +0200\ncommitter GitHub <noreply@github.com> 1590305437 +0200\n\nRollup merge of #72517 - lcnr:refactor-winnowing, r=jonas-schievink\n\nsmall select cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb1c0eb64c28742e9d228027d04fe3ebc190e46", "html_url": "https://github.com/rust-lang/rust/commit/6cb1c0eb64c28742e9d228027d04fe3ebc190e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cb1c0eb64c28742e9d228027d04fe3ebc190e46/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb848a6b7daf63d5cd51b167565a400c3ec42d6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb848a6b7daf63d5cd51b167565a400c3ec42d6a", "html_url": "https://github.com/rust-lang/rust/commit/fb848a6b7daf63d5cd51b167565a400c3ec42d6a"}, {"sha": "82b4fc42fdbbb1132f5a98ded198828e4175da66", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b4fc42fdbbb1132f5a98ded198828e4175da66", "html_url": "https://github.com/rust-lang/rust/commit/82b4fc42fdbbb1132f5a98ded198828e4175da66"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "9b3381066a17b6f4ca8357f7141968963f6602a3", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cb1c0eb64c28742e9d228027d04fe3ebc190e46/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb1c0eb64c28742e9d228027d04fe3ebc190e46/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=6cb1c0eb64c28742e9d228027d04fe3ebc190e46", "patch": "@@ -1058,20 +1058,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // Heuristics: show the diagnostics when there are no candidates in crate.\n                 if let Ok(candidate_set) = self.assemble_candidates(stack) {\n                     let mut no_candidates_apply = true;\n-                    {\n-                        let evaluated_candidates =\n-                            candidate_set.vec.iter().map(|c| self.evaluate_candidate(stack, &c));\n-\n-                        for ec in evaluated_candidates {\n-                            match ec {\n-                                Ok(c) => {\n-                                    if c.may_apply() {\n-                                        no_candidates_apply = false;\n-                                        break;\n-                                    }\n-                                }\n-                                Err(e) => return Err(e.into()),\n-                            }\n+\n+                    for c in candidate_set.vec.iter() {\n+                        if self.evaluate_candidate(stack, &c)?.may_apply() {\n+                            no_candidates_apply = false;\n+                            break;\n                         }\n                     }\n \n@@ -3182,11 +3173,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 assert_eq!(tys_a.len(), tys_b.len());\n \n                 // The last field of the tuple has to exist.\n-                let (&a_last, a_mid) = if let Some(x) = tys_a.split_last() {\n-                    x\n-                } else {\n-                    return Err(Unimplemented);\n-                };\n+                let (&a_last, a_mid) = tys_a.split_last().ok_or(Unimplemented)?;\n                 let &b_last = tys_b.last().unwrap();\n \n                 // Check that the source tuple with the target's"}]}