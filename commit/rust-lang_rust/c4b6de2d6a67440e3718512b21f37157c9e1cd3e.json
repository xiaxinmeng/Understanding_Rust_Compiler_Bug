{"sha": "c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YjZkZTJkNmE2NzQ0MGUzNzE4NTEyYjIxZjM3MTU3YzllMWNkM2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-13T22:33:58Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T01:48:35Z"}, "message": "note other end-point when typeck range pats", "tree": {"sha": "acc3a64b31cac654e397c2418e214e87651bdb80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acc3a64b31cac654e397c2418e214e87651bdb80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "html_url": "https://github.com/rust-lang/rust/commit/c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da3629b05f8f1b425a738bfe9fe9aedd47c5417a", "url": "https://api.github.com/repos/rust-lang/rust/commits/da3629b05f8f1b425a738bfe9fe9aedd47c5417a", "html_url": "https://github.com/rust-lang/rust/commit/da3629b05f8f1b425a738bfe9fe9aedd47c5417a"}], "stats": {"total": 119, "additions": 81, "deletions": 38}, "files": [{"sha": "c6378ac2d0b1b332ef7d1feb8bbaabc391c25d2a", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "patch": "@@ -353,21 +353,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_pat_range(\n         &self,\n         span: Span,\n-        begin: &'tcx hir::Expr<'tcx>,\n-        end: &'tcx hir::Expr<'tcx>,\n+        lhs: &'tcx hir::Expr<'tcx>,\n+        rhs: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n         discrim_span: Option<Span>,\n     ) -> Option<Ty<'tcx>> {\n-        let lhs_ty = self.check_expr(begin);\n-        let rhs_ty = self.check_expr(end);\n+        let lhs_ty = self.check_expr(lhs);\n+        let rhs_ty = self.check_expr(rhs);\n \n         // Check that both end-points are of numeric or char type.\n         let numeric_or_char = |ty: Ty<'_>| ty.is_numeric() || ty.is_char() || ty.references_error();\n         let lhs_fail = !numeric_or_char(lhs_ty);\n         let rhs_fail = !numeric_or_char(rhs_ty);\n \n         if lhs_fail || rhs_fail {\n-            self.emit_err_pat_range(span, begin.span, end.span, lhs_fail, rhs_fail, lhs_ty, rhs_ty);\n+            self.emit_err_pat_range(span, lhs.span, rhs.span, lhs_fail, rhs_fail, lhs_ty, rhs_ty);\n             return None;\n         }\n \n@@ -376,11 +376,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let common_type = self.resolve_vars_if_possible(&lhs_ty);\n \n         // Subtyping doesn't matter here, as the value is some kind of scalar.\n-        self.demand_eqtype_pat(span, expected, lhs_ty, discrim_span);\n-        self.demand_eqtype_pat(span, expected, rhs_ty, discrim_span);\n+        let demand_eqtype = |x_span, y_span, x_ty, y_ty| {\n+            self.demand_eqtype_pat_diag(x_span, expected, x_ty, discrim_span).map(|mut err| {\n+                self.endpoint_has_type(&mut err, y_span, y_ty);\n+                err.emit();\n+            });\n+        };\n+        demand_eqtype(lhs.span, rhs.span, lhs_ty, rhs_ty);\n+        demand_eqtype(rhs.span, lhs.span, rhs_ty, lhs_ty);\n+\n         Some(common_type)\n     }\n \n+    fn endpoint_has_type(&self, err: &mut DiagnosticBuilder<'_>, span: Span, ty: Ty<'_>) {\n+        if !ty.references_error() {\n+            err.span_label(span, &format!(\"this is of type `{}`\", ty));\n+        }\n+    }\n+\n     fn emit_err_pat_range(\n         &self,\n         span: Span,\n@@ -408,9 +421,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let msg = |ty| format!(\"this is of type `{}` but it should be `char` or numeric\", ty);\n         let mut one_side_err = |first_span, first_ty, second_span, second_ty: Ty<'_>| {\n             err.span_label(first_span, &msg(first_ty));\n-            if !second_ty.references_error() {\n-                err.span_label(second_span, &format!(\"this is of type `{}`\", second_ty));\n-            }\n+            self.endpoint_has_type(&mut err, second_span, second_ty);\n         };\n         if lhs_fail && rhs_fail {\n             err.span_label(begin_span, &msg(lhs_ty));"}, {"sha": "46805d6e13b7c6bd981b1ecc6f2f8093663a7925", "filename": "src/test/ui/error-codes/E0308-4.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr?ref=c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "patch": "@@ -1,10 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/E0308-4.rs:4:9\n+  --> $DIR/E0308-4.rs:4:15\n    |\n LL |     match x {\n    |           - this match expression has type `u8`\n LL |         0u8..=3i8 => (),\n-   |         ^^^^^^^^^ expected `u8`, found `i8`\n+   |         ---   ^^^ expected `u8`, found `i8`\n+   |         |\n+   |         this is of type `u8`\n \n error: aborting due to previous error\n "}, {"sha": "04538cd74b1954877e5246503768f881bc4408ce", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr?ref=c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [_, 99.., _] => {},\n-   |             ^^^^ expected struct `std::ops::Range`, found integer\n+   |             ^^ expected struct `std::ops::Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "c918d0a385c752f1b77eb727f4976ca704b33d55", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [_, 99..] => {},\n-   |             ^^^^ expected struct `std::ops::Range`, found integer\n+   |             ^^ expected struct `std::ops::Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "1557f592b2a9be20b658b57916231d840c0cc6a6", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.rs?ref=c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "patch": "@@ -6,6 +6,7 @@ fn main() {\n         //~^ ERROR `..X` range patterns are not supported\n         //~| ERROR mismatched types\n         //~| ERROR mismatched types\n+        //~| ERROR mismatched types\n         _ => {},\n     }\n }"}, {"sha": "e6ee3817b3558a3d78066ebc90b70cdb8260245f", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "patch": "@@ -5,12 +5,12 @@ LL |         [..9, 99..100, _] => {},\n    |          ^^^ help: try using the minimum value for the type: `MIN..9`\n \n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:10\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:12\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [..9, 99..100, _] => {},\n-   |          ^^^ expected struct `std::ops::Range`, found integer\n+   |            ^ expected struct `std::ops::Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -21,11 +21,26 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [..9, 99..100, _] => {},\n-   |               ^^^^^^^ expected struct `std::ops::Range`, found integer\n+   |               ^^  --- this is of type `{integer}`\n+   |               |\n+   |               expected struct `std::ops::Range`, found integer\n+   |\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:19\n+   |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n+LL |         [..9, 99..100, _] => {},\n+   |               --  ^^^ expected struct `std::ops::Range`, found integer\n+   |               |\n+   |               this is of type `{integer}`\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "64105dc73d3f57c43535640ee6dbafdc0c9faaaf", "filename": "src/test/ui/match/match-range-fail.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr?ref=c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "patch": "@@ -28,7 +28,9 @@ error[E0308]: mismatched types\n   --> $DIR/match-range-fail.rs:18:9\n    |\n LL |         'c' ..= 100 => { }\n-   |         ^^^^^^^^^^^ expected integer, found `char`\n+   |         ^^^     --- this is of type `{integer}`\n+   |         |\n+   |         expected integer, found `char`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5b0253cd2738a66cc1e24f4151b925c72c7be325", "filename": "src/test/ui/parser/pat-tuple-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr?ref=c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL |     match (0, 1) {\n    |           ------ this match expression has type `({integer}, {integer})`\n LL |         (PAT ..) => {}\n-   |          ^^^^^^ expected tuple, found `u8`\n+   |          ^^^ expected tuple, found `u8`\n    |\n    = note: expected tuple `({integer}, {integer})`\n                found type `u8`"}, {"sha": "50a44192707f0f88ceac33c6aa6e0629f3ec3c84", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6de2d6a67440e3718512b21f37157c9e1cd3e/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=c4b6de2d6a67440e3718512b21f37157c9e1cd3e", "patch": "@@ -417,13 +417,17 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:21:12\n    |\n LL |     if let .0..Y = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |            ^^  - this is of type `u8`\n+   |            |\n+   |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:23:12\n+  --> $DIR/recover-range-pats.rs:23:16\n    |\n LL |     if let X.. .0 = 0 {}\n-   |            ^^^^^^ expected integer, found floating-point number\n+   |            -   ^^ expected integer, found floating-point number\n+   |            |\n+   |            this is of type `u8`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:32:12\n@@ -445,13 +449,17 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:34:12\n    |\n LL |     if let .0..=Y = 0 {}\n-   |            ^^^^^^ expected integer, found floating-point number\n+   |            ^^   - this is of type `u8`\n+   |            |\n+   |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:36:12\n+  --> $DIR/recover-range-pats.rs:36:16\n    |\n LL |     if let X..=.0 = 0 {}\n-   |            ^^^^^^ expected integer, found floating-point number\n+   |            -   ^^ expected integer, found floating-point number\n+   |            |\n+   |            this is of type `u8`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:45:12\n@@ -473,13 +481,17 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:49:12\n    |\n LL |     if let .0...Y = 0 {}\n-   |            ^^^^^^ expected integer, found floating-point number\n+   |            ^^   - this is of type `u8`\n+   |            |\n+   |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:52:12\n+  --> $DIR/recover-range-pats.rs:52:17\n    |\n LL |     if let X... .0 = 0 {}\n-   |            ^^^^^^^ expected integer, found floating-point number\n+   |            -    ^^ expected integer, found floating-point number\n+   |            |\n+   |            this is of type `u8`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:60:12\n@@ -491,7 +503,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:62:12\n    |\n LL |     if let .0.. = 0 {}\n-   |            ^^^^ expected integer, found floating-point number\n+   |            ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:70:12\n@@ -503,7 +515,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:72:12\n    |\n LL |     if let .0..= = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |            ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:82:12\n@@ -515,7 +527,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0... = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |            ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:94:14\n@@ -524,10 +536,10 @@ LL |     if let ..true = 0 {}\n    |              ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:96:12\n+  --> $DIR/recover-range-pats.rs:96:15\n    |\n LL |     if let .. .0 = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |               ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:104:15\n@@ -536,10 +548,10 @@ LL |     if let ..=true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:106:12\n+  --> $DIR/recover-range-pats.rs:106:15\n    |\n LL |     if let ..=.0 = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |               ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:116:15\n@@ -548,10 +560,10 @@ LL |     if let ...true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:119:12\n+  --> $DIR/recover-range-pats.rs:119:15\n    |\n LL |     if let ....3 = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |               ^^ expected integer, found floating-point number\n \n error: aborting due to 85 previous errors\n "}]}