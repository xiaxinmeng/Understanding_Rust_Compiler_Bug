{"sha": "80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZWVlZmIwNWY0MGZhYTMyYzlkZGZiZWQ3YmM3OWFlMmYzOTI1ZjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-07T01:50:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:49:14Z"}, "message": "extract recover_not_expr", "tree": {"sha": "e3ebd7a921f403be452a9c8326cc847133c18134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ebd7a921f403be452a9c8326cc847133c18134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6", "html_url": "https://github.com/rust-lang/rust/commit/80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cc8a1b0cd634d495d4b7114d8bd9be3b09fbe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cc8a1b0cd634d495d4b7114d8bd9be3b09fbe5", "html_url": "https://github.com/rust-lang/rust/commit/00cc8a1b0cd634d495d4b7114d8bd9be3b09fbe5"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "cc5e708be48c5fb1530afd7129aec9e965becf80", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6", "patch": "@@ -501,39 +501,40 @@ impl<'a> Parser<'a> {\n                     token::Literal(..) | token::Pound => true,\n                     _ => t.is_whole_expr(),\n                 };\n-                let cannot_continue_expr = self.look_ahead(1, token_cannot_continue_expr);\n-                if cannot_continue_expr {\n-                    self.bump();\n-                    // Emit the error ...\n-                    self.struct_span_err(\n-                        self.token.span,\n-                        &format!(\"unexpected {} after identifier\", self.this_token_descr()),\n-                    )\n-                    .span_suggestion_short(\n-                        // Span the `not` plus trailing whitespace to avoid\n-                        // trailing whitespace after the `!` in our suggestion\n-                        self.sess.source_map().span_until_non_whitespace(lo.to(self.token.span)),\n-                        \"use `!` to perform logical negation\",\n-                        \"!\".to_owned(),\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n-                    // \u2014and recover! (just as if we were in the block\n-                    // for the `token::Not` arm)\n-                    let e = self.parse_prefix_expr(None);\n-                    let (span, e) = self.interpolated_or_expr_span(e)?;\n-                    (lo.to(span), self.mk_unary(UnOp::Not, e))\n-                } else {\n+                if !self.look_ahead(1, token_cannot_continue_expr) {\n                     return self.parse_dot_or_call_expr(Some(attrs));\n                 }\n+\n+                self.recover_not_expr(lo)?\n             }\n-            _ => {\n-                return self.parse_dot_or_call_expr(Some(attrs));\n-            }\n+            _ => return self.parse_dot_or_call_expr(Some(attrs)),\n         };\n         return Ok(self.mk_expr(lo.to(hi), ex, attrs));\n     }\n \n+    fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n+        self.bump();\n+        // Emit the error ...\n+        self.struct_span_err(\n+            self.token.span,\n+            &format!(\"unexpected {} after identifier\", self.this_token_descr()),\n+        )\n+        .span_suggestion_short(\n+            // Span the `not` plus trailing whitespace to avoid\n+            // trailing whitespace after the `!` in our suggestion\n+            self.sess.source_map().span_until_non_whitespace(lo.to(self.token.span)),\n+            \"use `!` to perform logical negation\",\n+            \"!\".to_owned(),\n+            Applicability::MachineApplicable,\n+        )\n+        .emit();\n+        // \u2014and recover! (just as if we were in the block\n+        // for the `token::Not` arm)\n+        let expr = self.parse_prefix_expr(None);\n+        let (span, e) = self.interpolated_or_expr_span(expr)?;\n+        Ok((lo.to(span), self.mk_unary(UnOp::Not, e)))\n+    }\n+\n     /// Returns the span of expr, if it was not interpolated or the span of the interpolated token.\n     fn interpolated_or_expr_span(\n         &self,"}]}