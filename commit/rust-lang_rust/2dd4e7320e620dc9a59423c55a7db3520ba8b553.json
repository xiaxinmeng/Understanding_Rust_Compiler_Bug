{"sha": "2dd4e7320e620dc9a59423c55a7db3520ba8b553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZDRlNzMyMGU2MjBkYzlhNTk0MjNjNTVhN2RiMzUyMGJhOGI1NTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-29T04:12:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-29T04:12:23Z"}, "message": "Auto merge of #65919 - Centril:rollup-qrgwnt6, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #65294 (Lint ignored `#[inline]` on function prototypes)\n - #65318 (Call out the types that are non local on E0117)\n - #65531 (Update backtrace to 0.3.40)\n - #65562 (Improve the \"try using a variant of the expected type\" hint.)\n - #65809 (Add new EFIAPI ABI)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3fe15cf8b6933e3d09330cf8f17516a5abe0803c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe15cf8b6933e3d09330cf8f17516a5abe0803c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd4e7320e620dc9a59423c55a7db3520ba8b553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd4e7320e620dc9a59423c55a7db3520ba8b553", "html_url": "https://github.com/rust-lang/rust/commit/2dd4e7320e620dc9a59423c55a7db3520ba8b553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd4e7320e620dc9a59423c55a7db3520ba8b553/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cac68218105f1ba8b6a2a0b21b791951ff02f75d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cac68218105f1ba8b6a2a0b21b791951ff02f75d", "html_url": "https://github.com/rust-lang/rust/commit/cac68218105f1ba8b6a2a0b21b791951ff02f75d"}, {"sha": "46063ed23fbcd50a7723ee6008e6d63605789e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/46063ed23fbcd50a7723ee6008e6d63605789e24", "html_url": "https://github.com/rust-lang/rust/commit/46063ed23fbcd50a7723ee6008e6d63605789e24"}], "stats": {"total": 1790, "additions": 1200, "deletions": 590}, "files": [{"sha": "2c161e4d27a9d12856ade58c422152172fb22bec", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -115,9 +115,9 @@ checksum = \"b671c8fb71b457dd4ae18c4ba1e59aa81793daacc361d82fcd410cef0d491875\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.37\"\n+version = \"0.3.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5180c5a20655b14a819b652fd2378fa5f1697b6c9ddad3e695c2f9cedf6df4e2\"\n+checksum = \"924c76597f0d9ca25d762c25a4d369d51267536465dc5064bdf0eb073ed477ea\"\n dependencies = [\n  \"backtrace-sys\",\n  \"cfg-if\",\n@@ -129,9 +129,9 @@ dependencies = [\n \n [[package]]\n name = \"backtrace-sys\"\n-version = \"0.1.30\"\n+version = \"0.1.32\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5b3a000b9c543553af61bc01cbfc403b04b5caa9e421033866f2e98061eb3e61\"\n+checksum = \"5d6575f128516de27e3ce99689419835fce9643a9b215a14d2b5b685be018491\"\n dependencies = [\n  \"cc\",\n  \"compiler_builtins\",\n@@ -150,9 +150,9 @@ dependencies = [\n \n [[package]]\n name = \"bitflags\"\n-version = \"1.1.0\"\n+version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3d155346769a6855b86399e9bc3814ab343cd3d62c7e985113d46a0ec3c281fd\"\n+checksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n \n [[package]]\n name = \"blake2-rfc\"\n@@ -391,9 +391,9 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.35\"\n+version = \"1.0.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5e5f3fee5eeb60324c2781f1e41286bdee933850fff9b3c672587fed5ec58c83\"\n+checksum = \"39f75544d7bbaf57560d2168f28fd649ff9c76153874db88bdbdfd839b1a7e7d\"\n \n [[package]]\n name = \"cfg-if\"\n@@ -3113,6 +3113,7 @@ dependencies = [\n  \"backtrace\",\n  \"bitflags\",\n  \"byteorder\",\n+ \"cc\",\n  \"chalk-engine\",\n  \"fmt_macros\",\n  \"graphviz\","}, {"sha": "de67f46eba643c9c06f03c6432d465a139ec7fc6", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -10,8 +10,12 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n+# Prevent cc from upgrading all the way to 1.0.46,\n+# which fails the build (see e.g. #65445.)\n+cc = \"=1.0.37\"\n+\n arena = { path = \"../libarena\" }\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n fmt_macros = { path = \"../libfmt_macros\" }\n graphviz = { path = \"../libgraphviz\" }\n jobserver = \"0.1\"\n@@ -30,7 +34,7 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-backtrace = \"0.3.3\"\n+backtrace = \"0.3.40\"\n parking_lot = \"0.9\"\n byteorder = { version = \"1.3\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }"}, {"sha": "3e35add9616bd676144310764dc1e8af0b4e9c1b", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2219,7 +2219,7 @@ rejected in your own crates.\n \"##,\n \n E0736: r##\"\n-#[track_caller] and #[naked] cannot be applied to the same function.\n+`#[track_caller]` and `#[naked]` cannot both be applied to the same function.\n \n Erroneous code example:\n \n@@ -2237,6 +2237,57 @@ See [RFC 2091] for details on this and other limitations.\n [RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n \"##,\n \n+E0738: r##\"\n+`#[track_caller]` cannot be used in traits yet. This is due to limitations in\n+the compiler which are likely to be temporary. See [RFC 2091] for details on\n+this and other restrictions.\n+\n+Erroneous example with a trait method implementation:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    fn bar(&self);\n+}\n+\n+impl Foo for u64 {\n+    #[track_caller]\n+    fn bar(&self) {}\n+}\n+```\n+\n+Erroneous example with a blanket trait method implementation:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    #[track_caller]\n+    fn bar(&self) {}\n+    fn baz(&self);\n+}\n+```\n+\n+Erroneous example with a trait method declaration:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    fn bar(&self) {}\n+\n+    #[track_caller]\n+    fn baz(&self);\n+}\n+```\n+\n+Note that while the compiler may be able to support the attribute in traits in\n+the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n+\n+[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n+\"##,\n+\n ;\n //  E0006, // merged with E0005\n //  E0101, // replaced with E0282"}, {"sha": "96562002aa070240c1cffeee6b91d7bf7e91fe5a", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 219, "deletions": 86, "changes": 305, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -4,16 +4,24 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use crate::hir;\n+use crate::hir::{self, HirId, HirVec, Attribute, Item, ItemKind, TraitItem, TraitItemKind};\n+use crate::hir::DUMMY_HIR_ID;\n use crate::hir::def_id::DefId;\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n \n use std::fmt::{self, Display};\n use syntax::{attr, symbol::sym};\n use syntax_pos::Span;\n \n+#[derive(Copy, Clone, PartialEq)]\n+pub(crate) enum MethodKind {\n+    Trait { body: bool },\n+    Inherent,\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n pub(crate) enum Target {\n     ExternCrate,\n@@ -35,6 +43,12 @@ pub(crate) enum Target {\n     Impl,\n     Expression,\n     Statement,\n+    AssocConst,\n+    Method(MethodKind),\n+    AssocTy,\n+    ForeignFn,\n+    ForeignStatic,\n+    ForeignTy,\n }\n \n impl Display for Target {\n@@ -59,29 +73,76 @@ impl Display for Target {\n             Target::Impl => \"item\",\n             Target::Expression => \"expression\",\n             Target::Statement => \"statement\",\n+            Target::AssocConst => \"associated const\",\n+            Target::Method(_) => \"method\",\n+            Target::AssocTy => \"associated type\",\n+            Target::ForeignFn => \"foreign function\",\n+            Target::ForeignStatic => \"foreign static item\",\n+            Target::ForeignTy => \"foreign type\",\n         })\n     }\n }\n \n impl Target {\n-    pub(crate) fn from_item(item: &hir::Item) -> Target {\n+    pub(crate) fn from_item(item: &Item) -> Target {\n         match item.kind {\n-            hir::ItemKind::ExternCrate(..) => Target::ExternCrate,\n-            hir::ItemKind::Use(..) => Target::Use,\n-            hir::ItemKind::Static(..) => Target::Static,\n-            hir::ItemKind::Const(..) => Target::Const,\n-            hir::ItemKind::Fn(..) => Target::Fn,\n-            hir::ItemKind::Mod(..) => Target::Mod,\n-            hir::ItemKind::ForeignMod(..) => Target::ForeignMod,\n-            hir::ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n-            hir::ItemKind::TyAlias(..) => Target::TyAlias,\n-            hir::ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n-            hir::ItemKind::Enum(..) => Target::Enum,\n-            hir::ItemKind::Struct(..) => Target::Struct,\n-            hir::ItemKind::Union(..) => Target::Union,\n-            hir::ItemKind::Trait(..) => Target::Trait,\n-            hir::ItemKind::TraitAlias(..) => Target::TraitAlias,\n-            hir::ItemKind::Impl(..) => Target::Impl,\n+            ItemKind::ExternCrate(..) => Target::ExternCrate,\n+            ItemKind::Use(..) => Target::Use,\n+            ItemKind::Static(..) => Target::Static,\n+            ItemKind::Const(..) => Target::Const,\n+            ItemKind::Fn(..) => Target::Fn,\n+            ItemKind::Mod(..) => Target::Mod,\n+            ItemKind::ForeignMod(..) => Target::ForeignMod,\n+            ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n+            ItemKind::TyAlias(..) => Target::TyAlias,\n+            ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n+            ItemKind::Enum(..) => Target::Enum,\n+            ItemKind::Struct(..) => Target::Struct,\n+            ItemKind::Union(..) => Target::Union,\n+            ItemKind::Trait(..) => Target::Trait,\n+            ItemKind::TraitAlias(..) => Target::TraitAlias,\n+            ItemKind::Impl(..) => Target::Impl,\n+        }\n+    }\n+\n+    fn from_trait_item(trait_item: &TraitItem) -> Target {\n+        match trait_item.kind {\n+            TraitItemKind::Const(..) => Target::AssocConst,\n+            TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+                Target::Method(MethodKind::Trait { body: false })\n+            }\n+            TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+                Target::Method(MethodKind::Trait { body: true })\n+            }\n+            TraitItemKind::Type(..) => Target::AssocTy,\n+        }\n+    }\n+\n+    fn from_foreign_item(foreign_item: &hir::ForeignItem) -> Target {\n+        match foreign_item.kind {\n+            hir::ForeignItemKind::Fn(..) => Target::ForeignFn,\n+            hir::ForeignItemKind::Static(..) => Target::ForeignStatic,\n+            hir::ForeignItemKind::Type => Target::ForeignTy,\n+        }\n+    }\n+\n+    fn from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem) -> Target {\n+        match impl_item.kind {\n+            hir::ImplItemKind::Const(..) => Target::AssocConst,\n+            hir::ImplItemKind::Method(..) => {\n+                let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id);\n+                let containing_item = tcx.hir().expect_item(parent_hir_id);\n+                let containing_impl_is_for_trait = match &containing_item.kind {\n+                    hir::ItemKind::Impl(_, _, _, _, tr, _, _) => tr.is_some(),\n+                    _ => bug!(\"parent of an ImplItem must be an Impl\"),\n+                };\n+                if containing_impl_is_for_trait {\n+                    Target::Method(MethodKind::Trait { body: true })\n+                } else {\n+                    Target::Method(MethodKind::Inherent)\n+                }\n+            }\n+            hir::ImplItemKind::TyAlias(..) | hir::ImplItemKind::OpaqueTy(..) => Target::AssocTy,\n         }\n     }\n }\n@@ -92,19 +153,26 @@ struct CheckAttrVisitor<'tcx> {\n \n impl CheckAttrVisitor<'tcx> {\n     /// Checks any attribute.\n-    fn check_attributes(&self, item: &hir::Item, target: Target) {\n+    fn check_attributes(\n+        &self,\n+        hir_id: HirId,\n+        attrs: &HirVec<Attribute>,\n+        span: &Span,\n+        target: Target,\n+        item: Option<&Item>,\n+    ) {\n         let mut is_valid = true;\n-        for attr in &item.attrs {\n+        for attr in attrs {\n             is_valid &= if attr.check_name(sym::inline) {\n-                self.check_inline(attr, &item.span, target)\n+                self.check_inline(hir_id, attr, span, target)\n             } else if attr.check_name(sym::non_exhaustive) {\n-                self.check_non_exhaustive(attr, item, target)\n+                self.check_non_exhaustive(attr, span, target)\n             } else if attr.check_name(sym::marker) {\n-                self.check_marker(attr, item, target)\n+                self.check_marker(attr, span, target)\n             } else if attr.check_name(sym::target_feature) {\n-                self.check_target_feature(attr, item, target)\n+                self.check_target_feature(attr, span, target)\n             } else if attr.check_name(sym::track_caller) {\n-                self.check_track_caller(attr, &item, target)\n+                self.check_track_caller(&attr.span, attrs, span, target)\n             } else {\n                 true\n             };\n@@ -115,59 +183,105 @@ impl CheckAttrVisitor<'tcx> {\n         }\n \n         if target == Target::Fn {\n-            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(item.hir_id));\n+            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n         }\n \n-        self.check_repr(item, target);\n-        self.check_used(item, target);\n+        self.check_repr(attrs, span, target, item);\n+        self.check_used(attrs, target);\n     }\n \n     /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n-    fn check_inline(&self, attr: &hir::Attribute, span: &Span, target: Target) -> bool {\n-        if target != Target::Fn && target != Target::Closure {\n-            struct_span_err!(self.tcx.sess,\n-                             attr.span,\n-                             E0518,\n-                             \"attribute should be applied to function or closure\")\n-                .span_label(*span, \"not a function or closure\")\n+    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Fn | Target::Closure | Target::Method(MethodKind::Trait { body: true })\n+            | Target::Method(MethodKind::Inherent) => true,\n+            Target::Method(MethodKind::Trait { body: false }) | Target::ForeignFn => {\n+                self.tcx.struct_span_lint_hir(\n+                    UNUSED_ATTRIBUTES,\n+                    hir_id,\n+                    attr.span,\n+                    \"`#[inline]` is ignored on function prototypes\",\n+                ).emit();\n+                true\n+            }\n+            // FIXME(#65833): We permit associated consts to have an `#[inline]` attribute with\n+            // just a lint, because we previously erroneously allowed it and some crates used it\n+            // accidentally, to to be compatible with crates depending on them, we can't throw an\n+            // error here.\n+            Target::AssocConst => {\n+                self.tcx.struct_span_lint_hir(\n+                    UNUSED_ATTRIBUTES,\n+                    hir_id,\n+                    attr.span,\n+                    \"`#[inline]` is ignored on constants\",\n+                ).warn(\"this was previously accepted by the compiler but is \\\n+                       being phased out; it will become a hard error in \\\n+                       a future release!\")\n+                .note(\"for more information, see issue #65833 \\\n+                       <https://github.com/rust-lang/rust/issues/65833>\")\n                 .emit();\n-            false\n-        } else {\n-            true\n+                true\n+            }\n+            _ => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    attr.span,\n+                    E0518,\n+                    \"attribute should be applied to function or closure\",\n+                ).span_label(*span, \"not a function or closure\")\n+                    .emit();\n+                false\n+            }\n         }\n     }\n \n     /// Checks if a `#[track_caller]` is applied to a non-naked function. Returns `true` if valid.\n-    fn check_track_caller(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) -> bool {\n-        if target != Target::Fn {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                attr.span,\n-                E0739,\n-                \"attribute should be applied to function\"\n-            )\n-            .span_label(item.span, \"not a function\")\n-            .emit();\n-            false\n-        } else if attr::contains_name(&item.attrs, sym::naked) {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                attr.span,\n-                E0736,\n-                \"cannot use `#[track_caller]` with `#[naked]`\",\n-            )\n-            .emit();\n-            false\n-        } else {\n-            true\n+    fn check_track_caller(\n+        &self,\n+        attr_span: &Span,\n+        attrs: &HirVec<Attribute>,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n+        match target {\n+            Target::Fn if attr::contains_name(attrs, sym::naked) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    *attr_span,\n+                    E0736,\n+                    \"cannot use `#[track_caller]` with `#[naked]`\",\n+                ).emit();\n+                false\n+            }\n+            Target::Fn | Target::Method(MethodKind::Inherent) => true,\n+            Target::Method(_) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    *attr_span,\n+                    E0738,\n+                    \"`#[track_caller]` may not be used on trait methods\",\n+                ).emit();\n+                false\n+            }\n+            _ => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    *attr_span,\n+                    E0739,\n+                    \"attribute should be applied to function\"\n+                )\n+                .span_label(*span, \"not a function\")\n+                .emit();\n+                false\n+            }\n         }\n     }\n \n     /// Checks if the `#[non_exhaustive]` attribute on an `item` is valid. Returns `true` if valid.\n     fn check_non_exhaustive(\n         &self,\n-        attr: &hir::Attribute,\n-        item: &hir::Item,\n+        attr: &Attribute,\n+        span: &Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -177,54 +291,56 @@ impl CheckAttrVisitor<'tcx> {\n                                  attr.span,\n                                  E0701,\n                                  \"attribute can only be applied to a struct or enum\")\n-                    .span_label(item.span, \"not a struct or enum\")\n+                    .span_label(*span, \"not a struct or enum\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if the `#[marker]` attribute on an `item` is valid. Returns `true` if valid.\n-    fn check_marker(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) -> bool {\n+    fn check_marker(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::Trait => true,\n             _ => {\n                 self.tcx.sess\n                     .struct_span_err(attr.span, \"attribute can only be applied to a trait\")\n-                    .span_label(item.span, \"not a trait\")\n+                    .span_label(*span, \"not a trait\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if the `#[target_feature]` attribute on `item` is valid. Returns `true` if valid.\n-    fn check_target_feature(\n-        &self,\n-        attr: &hir::Attribute,\n-        item: &hir::Item,\n-        target: Target,\n-    ) -> bool {\n+    fn check_target_feature(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n-            Target::Fn => true,\n+            Target::Fn | Target::Method(MethodKind::Trait { body: true })\n+            | Target::Method(MethodKind::Inherent) => true,\n             _ => {\n                 self.tcx.sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                    .span_label(item.span, \"not a function\")\n+                    .span_label(*span, \"not a function\")\n                     .emit();\n                 false\n             },\n         }\n     }\n \n     /// Checks if the `#[repr]` attributes on `item` are valid.\n-    fn check_repr(&self, item: &hir::Item, target: Target) {\n+    fn check_repr(\n+        &self,\n+        attrs: &HirVec<Attribute>,\n+        span: &Span,\n+        target: Target,\n+        item: Option<&Item>,\n+    ) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:\n         // ```\n         // #[repr(foo)]\n         // #[repr(bar, align(8))]\n         // ```\n-        let hints: Vec<_> = item.attrs\n+        let hints: Vec<_> = attrs\n             .iter()\n             .filter(|attr| attr.check_name(sym::repr))\n             .filter_map(|attr| attr.meta_item_list())\n@@ -282,7 +398,7 @@ impl CheckAttrVisitor<'tcx> {\n             };\n             self.emit_repr_error(\n                 hint.span(),\n-                item.span,\n+                *span,\n                 &format!(\"attribute should be applied to {}\", allowed_targets),\n                 &format!(\"not {} {}\", article, allowed_targets),\n             )\n@@ -301,7 +417,7 @@ impl CheckAttrVisitor<'tcx> {\n         // Warn on repr(u8, u16), repr(C, simd), and c-like-enum-repr(C, u8)\n         if (int_reprs > 1)\n            || (is_simd && is_c)\n-           || (int_reprs == 1 && is_c && is_c_like_enum(item)) {\n+           || (int_reprs == 1 && is_c && item.map_or(false, |item| is_c_like_enum(item))) {\n             let hint_spans: Vec<_> = hint_spans.collect();\n             span_warn!(self.tcx.sess, hint_spans, E0566,\n                        \"conflicting representation hints\");\n@@ -325,7 +441,7 @@ impl CheckAttrVisitor<'tcx> {\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n             for attr in l.attrs.iter() {\n                 if attr.check_name(sym::inline) {\n-                    self.check_inline(attr, &stmt.span, Target::Statement);\n+                    self.check_inline(DUMMY_HIR_ID, attr, &stmt.span, Target::Statement);\n                 }\n                 if attr.check_name(sym::repr) {\n                     self.emit_repr_error(\n@@ -346,7 +462,7 @@ impl CheckAttrVisitor<'tcx> {\n         };\n         for attr in expr.attrs.iter() {\n             if attr.check_name(sym::inline) {\n-                self.check_inline(attr, &expr.span, target);\n+                self.check_inline(DUMMY_HIR_ID, attr, &expr.span, target);\n             }\n             if attr.check_name(sym::repr) {\n                 self.emit_repr_error(\n@@ -359,8 +475,8 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_used(&self, item: &hir::Item, target: Target) {\n-        for attr in &item.attrs {\n+    fn check_used(&self, attrs: &HirVec<Attribute>, target: Target) {\n+        for attr in attrs {\n             if attr.check_name(sym::used) && target != Target::Static {\n                 self.tcx.sess\n                     .span_err(attr.span, \"attribute must be applied to a `static` variable\");\n@@ -374,12 +490,29 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx Item) {\n         let target = Target::from_item(item);\n-        self.check_attributes(item, target);\n+        self.check_attributes(item.hir_id, &item.attrs, &item.span, target, Some(item));\n         intravisit::walk_item(self, item)\n     }\n \n+    fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem) {\n+        let target = Target::from_trait_item(trait_item);\n+        self.check_attributes(trait_item.hir_id, &trait_item.attrs, &trait_item.span, target, None);\n+        intravisit::walk_trait_item(self, trait_item)\n+    }\n+\n+    fn visit_foreign_item(&mut self, f_item: &'tcx hir::ForeignItem) {\n+        let target = Target::from_foreign_item(f_item);\n+        self.check_attributes(f_item.hir_id, &f_item.attrs, &f_item.span, target, None);\n+        intravisit::walk_foreign_item(self, f_item)\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+        let target = Target::from_impl_item(self.tcx, impl_item);\n+        self.check_attributes(impl_item.hir_id, &impl_item.attrs, &impl_item.span, target, None);\n+        intravisit::walk_impl_item(self, impl_item)\n+    }\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt) {\n         self.check_stmt_attributes(stmt);\n@@ -392,12 +525,12 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     }\n }\n \n-fn is_c_like_enum(item: &hir::Item) -> bool {\n-    if let hir::ItemKind::Enum(ref def, _) = item.kind {\n+fn is_c_like_enum(item: &Item) -> bool {\n+    if let ItemKind::Enum(ref def, _) = item.kind {\n         for variant in &def.variants {\n             match variant.data {\n                 hir::VariantData::Unit(..) => { /* continue */ }\n-                _ => { return false; }\n+                _ => return false,\n             }\n         }\n         true"}, {"sha": "920635d838738f2e96fa63c6fef8ef44b38c77a0", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -203,7 +203,7 @@ pub trait Visitor<'v>: Sized {\n \n     /// Invoked to visit the body of a function, method or closure. Like\n     /// visit_nested_item, does nothing by default unless you override\n-    /// `nested_visit_map` to return other htan `None`, in which case it will walk\n+    /// `nested_visit_map` to return other than `None`, in which case it will walk\n     /// the body.\n     fn visit_nested_body(&mut self, id: BodyId) {\n         let opt_body = self.nested_visit_map().intra().map(|map| map.body(id));"}, {"sha": "0edc41e6b4881390b8134d6244c73fc01ebbeea9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2512,7 +2512,7 @@ pub enum ItemKind {\n     Fn(P<FnDecl>, FnHeader, Generics, BodyId),\n     /// A module.\n     Mod(Mod),\n-    /// An external module.\n+    /// An external module, e.g. `extern { .. }`.\n     ForeignMod(ForeignMod),\n     /// Module-level inline assembly (from `global_asm!`).\n     GlobalAsm(P<GlobalAsm>),\n@@ -2756,10 +2756,10 @@ bitflags! {\n         /// `#[used]`: indicates that LLVM can't eliminate this function (but the\n         /// linker can!).\n         const USED                      = 1 << 9;\n-        /// #[ffi_returns_twice], indicates that an extern function can return\n+        /// `#[ffi_returns_twice]`, indicates that an extern function can return\n         /// multiple times\n         const FFI_RETURNS_TWICE         = 1 << 10;\n-        /// #[track_caller]: allow access to the caller location\n+        /// `#[track_caller]`: allow access to the caller location\n         const TRACK_CALLER              = 1 << 11;\n     }\n }"}, {"sha": "64b355f6ec9d1b6693526181b691324037daa932", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1523,9 +1523,17 @@ impl<'a> State<'a> {\n                                         colons_before_params)\n             }\n             hir::QPath::TypeRelative(ref qself, ref item_segment) => {\n-                self.s.word(\"<\");\n-                self.print_type(qself);\n-                self.s.word(\">\");\n+                // If we've got a compound-qualified-path, let's push an additional pair of angle\n+                // brackets, so that we pretty-print `<<A::B>::C>` as `<A::B>::C`, instead of just\n+                // `A::B::C` (since the latter could be ambiguous to the user)\n+                if let hir::TyKind::Path(hir::QPath::Resolved(None, _)) = &qself.kind {\n+                    self.print_type(qself);\n+                } else {\n+                    self.s.word(\"<\");\n+                    self.print_type(qself);\n+                    self.s.word(\">\");\n+                }\n+\n                 self.s.word(\"::\");\n                 self.print_ident(item_segment.ident);\n                 self.print_generic_args(item_segment.generic_args(),"}, {"sha": "4fd4e25f641108cbaac4b06ec3b679b4f8877998", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -80,6 +80,7 @@ impl_stable_hash_for!(enum ::rustc_target::spec::abi::Abi {\n     Msp430Interrupt,\n     X86Interrupt,\n     AmdGpuKernel,\n+    EfiApi,\n     Rust,\n     C,\n     System,"}, {"sha": "5c871bb6b698899bf904e31a7a15aa130bea2b3a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -68,6 +68,12 @@ declare_lint! {\n     \"detect unused, unexported items\"\n }\n \n+declare_lint! {\n+    pub UNUSED_ATTRIBUTES,\n+    Warn,\n+    \"detects attributes that were not used by the compiler\"\n+}\n+\n declare_lint! {\n     pub UNREACHABLE_CODE,\n     Warn,"}, {"sha": "49a4d17d88d03d926ed87bead20a3fbd2d87d134", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 77, "deletions": 30, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -237,7 +237,7 @@ pub fn trait_ref_is_local_or_fundamental<'tcx>(\n }\n \n pub enum OrphanCheckErr<'tcx> {\n-    NoLocalInputType,\n+    NonLocalInputType(Vec<(Ty<'tcx>, bool /* Is this the first input type? */)>),\n     UncoveredTy(Ty<'tcx>),\n }\n \n@@ -355,7 +355,7 @@ pub fn orphan_check(\n /// Note that this function is never called for types that have both type\n /// parameters and inference variables.\n fn orphan_check_trait_ref<'tcx>(\n-    tcx: TyCtxt<'_>,\n+    tcx: TyCtxt<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n     in_crate: InCrate,\n ) -> Result<(), OrphanCheckErr<'tcx>> {\n@@ -378,40 +378,51 @@ fn orphan_check_trait_ref<'tcx>(\n         //      Let Ti be the first such type.\n         //     - No uncovered type parameters P1..=Pn may appear in T0..Ti (excluding Ti)\n         //\n-        fn uncover_fundamental_ty<'a>(\n-            tcx: TyCtxt<'_>,\n-            ty: Ty<'a>,\n+        fn uncover_fundamental_ty<'tcx>(\n+            tcx: TyCtxt<'tcx>,\n+            ty: Ty<'tcx>,\n             in_crate: InCrate,\n-        ) -> Vec<Ty<'a>> {\n-            if fundamental_ty(ty) && !ty_is_local(tcx, ty, in_crate) {\n+        ) -> Vec<Ty<'tcx>> {\n+            if fundamental_ty(ty) && ty_is_non_local(tcx, ty, in_crate).is_some() {\n                 ty.walk_shallow().flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate)).collect()\n             } else {\n                 vec![ty]\n             }\n         }\n \n-        for input_ty in\n-            trait_ref.input_types().flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n+        let mut non_local_spans = vec![];\n+        for (i, input_ty) in trait_ref\n+            .input_types()\n+            .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n+            .enumerate()\n         {\n             debug!(\"orphan_check_trait_ref: check ty `{:?}`\", input_ty);\n-            if ty_is_local(tcx, input_ty, in_crate) {\n+            let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n+            if non_local_tys.is_none() {\n                 debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n                 return Ok(());\n             } else if let ty::Param(_) = input_ty.kind {\n                 debug!(\"orphan_check_trait_ref: uncovered ty: `{:?}`\", input_ty);\n                 return Err(OrphanCheckErr::UncoveredTy(input_ty))\n             }\n+            if let Some(non_local_tys) = non_local_tys {\n+                for input_ty in non_local_tys {\n+                    non_local_spans.push((input_ty, i == 0));\n+                }\n+            }\n         }\n         // If we exit above loop, never found a local type.\n         debug!(\"orphan_check_trait_ref: no local type\");\n-        Err(OrphanCheckErr::NoLocalInputType)\n+        Err(OrphanCheckErr::NonLocalInputType(non_local_spans))\n     } else {\n+        let mut non_local_spans = vec![];\n         // First, create an ordered iterator over all the type\n         // parameters to the trait, with the self type appearing\n         // first.  Find the first input type that either references a\n         // type parameter OR some local type.\n-        for input_ty in trait_ref.input_types() {\n-            if ty_is_local(tcx, input_ty, in_crate) {\n+        for (i, input_ty) in trait_ref.input_types().enumerate() {\n+            let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n+            if non_local_tys.is_none() {\n                 debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n \n                 // First local input type. Check that there are no\n@@ -438,15 +449,21 @@ fn orphan_check_trait_ref<'tcx>(\n                 debug!(\"orphan_check_trait_ref: uncovered type `{:?}`\", param);\n                 return Err(OrphanCheckErr::UncoveredTy(param));\n             }\n+\n+            if let Some(non_local_tys) = non_local_tys {\n+                for input_ty in non_local_tys {\n+                    non_local_spans.push((input_ty, i == 0));\n+                }\n+            }\n         }\n         // If we exit above loop, never found a local type.\n         debug!(\"orphan_check_trait_ref: no local type\");\n-        Err(OrphanCheckErr::NoLocalInputType)\n+        Err(OrphanCheckErr::NonLocalInputType(non_local_spans))\n     }\n }\n \n-fn uncovered_tys<'tcx>(tcx: TyCtxt<'_>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n-    if ty_is_local_constructor(tcx, ty, in_crate) {\n+fn uncovered_tys<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n+    if ty_is_non_local_constructor(tcx, ty, in_crate).is_none() {\n         vec![]\n     } else if fundamental_ty(ty) {\n         ty.walk_shallow()\n@@ -464,9 +481,23 @@ fn is_possibly_remote_type(ty: Ty<'_>, _in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_local(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n-    ty_is_local_constructor(tcx, ty, in_crate) ||\n-        fundamental_ty(ty) && ty.walk_shallow().any(|t| ty_is_local(tcx, t, in_crate))\n+fn ty_is_non_local<'t>(tcx: TyCtxt<'t>, ty: Ty<'t>, in_crate: InCrate) -> Option<Vec<Ty<'t>>> {\n+    match ty_is_non_local_constructor(tcx, ty, in_crate) {\n+        Some(ty) => if !fundamental_ty(ty) {\n+            Some(vec![ty])\n+        } else {\n+            let tys: Vec<_> = ty.walk_shallow()\n+                .filter_map(|t| ty_is_non_local(tcx, t, in_crate))\n+                .flat_map(|i| i)\n+                .collect();\n+            if tys.is_empty() {\n+                None\n+            } else {\n+                Some(tys)\n+            }\n+        },\n+        None => None,\n+    }\n }\n \n fn fundamental_ty(ty: Ty<'_>) -> bool {\n@@ -486,8 +517,12 @@ fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_local_constructor(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n-    debug!(\"ty_is_local_constructor({:?})\", ty);\n+fn ty_is_non_local_constructor<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+    in_crate: InCrate,\n+) -> Option<Ty<'tcx>> {\n+    debug!(\"ty_is_non_local_constructor({:?})\", ty);\n \n     match ty.kind {\n         ty::Bool |\n@@ -506,37 +541,49 @@ fn ty_is_local_constructor(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bo\n         ty::Tuple(..) |\n         ty::Param(..) |\n         ty::Projection(..) => {\n-            false\n+            Some(ty)\n         }\n \n         ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) => match in_crate {\n-            InCrate::Local => false,\n+            InCrate::Local => Some(ty),\n             // The inference variable might be unified with a local\n             // type in that remote crate.\n-            InCrate::Remote => true,\n+            InCrate::Remote => None,\n         },\n \n-        ty::Adt(def, _) => def_id_is_local(def.did, in_crate),\n-        ty::Foreign(did) => def_id_is_local(did, in_crate),\n+        ty::Adt(def, _) => if def_id_is_local(def.did, in_crate) {\n+            None\n+        } else {\n+            Some(ty)\n+        },\n+        ty::Foreign(did) => if def_id_is_local(did, in_crate) {\n+            None\n+        } else {\n+            Some(ty)\n+        },\n         ty::Opaque(did, _) => {\n             // Check the underlying type that this opaque\n             // type resolves to.\n             // This recursion will eventually terminate,\n             // since we've already managed to successfully\n             // resolve all opaque types by this point\n             let real_ty = tcx.type_of(did);\n-            ty_is_local_constructor(tcx, real_ty, in_crate)\n+            ty_is_non_local_constructor(tcx, real_ty, in_crate)\n         }\n \n         ty::Dynamic(ref tt, ..) => {\n             if let Some(principal) = tt.principal() {\n-                def_id_is_local(principal.def_id(), in_crate)\n+                if def_id_is_local(principal.def_id(), in_crate) {\n+                    None\n+                } else {\n+                    Some(ty)\n+                }\n             } else {\n-                false\n+                Some(ty)\n             }\n         }\n \n-        ty::Error => true,\n+        ty::Error => None,\n \n         ty::UnnormalizedProjection(..) |\n         ty::Closure(..) |"}, {"sha": "e82232ac10f7bbc1f15f6eb9b1687629666b9606", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2596,6 +2596,7 @@ where\n \n             // It's the ABI's job to select this, not ours.\n             System => bug!(\"system abi should be selected elsewhere\"),\n+            EfiApi => bug!(\"eficall abi should be selected elsewhere\"),\n \n             Stdcall => Conv::X86Stdcall,\n             Fastcall => Conv::X86Fastcall,"}, {"sha": "4fc15f99e484e3d282f48d7285e0f3e7d92f6688", "filename": "src/librustc_apfloat/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_apfloat%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_apfloat%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2FCargo.toml?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -9,5 +9,5 @@ name = \"rustc_apfloat\"\n path = \"lib.rs\"\n \n [dependencies]\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "2eaae50591673ad63c0f482d52419610fdf9da20", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n test = false\n \n [dependencies]\n-bitflags = \"1.0.4\"\n+bitflags = \"1.2.1\"\n cc = \"1.0.1\"\n num_cpus = \"1.0\"\n memmap = \"0.6\""}, {"sha": "9a826de4b6eafb86ff8642c6ffbde9cf351da1d5", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::DefId;\n use rustc::lint;\n+use rustc::lint::builtin::UNUSED_ATTRIBUTES;\n use rustc::ty::{self, Ty};\n use rustc::ty::adjustment;\n use rustc_data_structures::fx::FxHashMap;\n@@ -277,12 +278,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathStatements {\n     }\n }\n \n-declare_lint! {\n-    pub UNUSED_ATTRIBUTES,\n-    Warn,\n-    \"detects attributes that were not used by the compiler\"\n-}\n-\n #[derive(Copy, Clone)]\n pub struct UnusedAttributes {\n     builtin_attributes: &'static FxHashMap<Symbol, &'static BuiltinAttribute>,"}, {"sha": "08ce7fd520e3040d0c2a7f6e088f1ebbd1be3b7e", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -11,7 +11,7 @@ test = false\n doctest = false\n \n [dependencies]\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n syntax_expand = { path = \"../libsyntax_expand\" }"}, {"sha": "c73d0adea38da79490443e2d073a25ee3115206e", "filename": "src/librustc_target/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FCargo.toml?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -9,7 +9,7 @@ name = \"rustc_target\"\n path = \"lib.rs\"\n \n [dependencies]\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }"}, {"sha": "3a24d30966f638be5c3e6ba824c29e923e716e3a", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -21,6 +21,7 @@ pub enum Abi {\n     Msp430Interrupt,\n     X86Interrupt,\n     AmdGpuKernel,\n+    EfiApi,\n \n     // Multiplatform / generic ABIs\n     Rust,\n@@ -58,6 +59,7 @@ const AbiDatas: &[AbiData] = &[\n     AbiData {abi: Abi::Msp430Interrupt, name: \"msp430-interrupt\", generic: false },\n     AbiData {abi: Abi::X86Interrupt, name: \"x86-interrupt\", generic: false },\n     AbiData {abi: Abi::AmdGpuKernel, name: \"amdgpu-kernel\", generic: false },\n+    AbiData {abi: Abi::EfiApi, name: \"efiapi\", generic: false },\n \n     // Cross-platform ABIs\n     AbiData {abi: Abi::Rust, name: \"Rust\", generic: true },"}, {"sha": "6033d52c4411239ea8e73efe302dec443d222dff", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -905,6 +905,13 @@ impl Target {\n                     abi\n                 }\n             },\n+            Abi::EfiApi => {\n+                if self.arch == \"x86_64\" {\n+                    Abi::Win64\n+                } else {\n+                    Abi::C\n+                }\n+            },\n             abi => abi\n         }\n     }"}, {"sha": "b4e07e4a0dfb4481085e26ce4c5b1be9f7bb2c1e", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -172,10 +172,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }).peekable();\n \n             if compatible_variants.peek().is_some() {\n-                let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n+                let expr_text = self.tcx.sess\n+                    .source_map()\n+                    .span_to_snippet(expr.span)\n+                    .unwrap_or_else(|_| {\n+                        print::to_string(print::NO_ANN, |s| s.print_expr(expr))\n+                    });\n                 let suggestions = compatible_variants\n                     .map(|v| format!(\"{}({})\", v, expr_text));\n-                let msg = \"try using a variant of the expected type\";\n+                let msg = \"try using a variant of the expected enum\";\n                 err.span_suggestions(expr.span, msg, suggestions, Applicability::MaybeIncorrect);\n             }\n         }"}, {"sha": "49b33ad466834ebd3c0daa209e7d5d5873dbdd5f", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -172,18 +172,6 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         _ => None\n     };\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n-\n-    // Prohibits applying `#[track_caller]` to trait decls\n-    for attr in &trait_item.attrs {\n-        if attr.check_name(sym::track_caller) {\n-            struct_span_err!(\n-                tcx.sess,\n-                attr.span,\n-                E0738,\n-                \"`#[track_caller]` is not supported in trait declarations.\"\n-            ).emit();\n-        }\n-    }\n }\n \n pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n@@ -195,29 +183,6 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         _ => None\n     };\n \n-    // Prohibits applying `#[track_caller]` to trait impls\n-    if method_sig.is_some() {\n-        let track_caller_attr = impl_item.attrs.iter()\n-            .find(|a| a.check_name(sym::track_caller));\n-        if let Some(tc_attr) = track_caller_attr {\n-            let parent_hir_id = tcx.hir().get_parent_item(hir_id);\n-            let containing_item = tcx.hir().expect_item(parent_hir_id);\n-            let containing_impl_is_for_trait = match &containing_item.kind {\n-                hir::ItemKind::Impl(_, _, _, _, tr, _, _) => tr.is_some(),\n-                _ => bug!(\"parent of an ImplItem must be an Impl\"),\n-            };\n-\n-            if containing_impl_is_for_trait {\n-                struct_span_err!(\n-                    tcx.sess,\n-                    tc_attr.span,\n-                    E0738,\n-                    \"`#[track_caller]` is not supported in traits yet.\"\n-                ).emit();\n-            }\n-        }\n-    }\n-\n     check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n }\n "}, {"sha": "f066ca762c09e5c49ae7f4935680281a2fd5e5ce", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 66, "deletions": 24, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -24,7 +24,7 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         // \"Trait\" impl\n-        if let hir::ItemKind::Impl(.., Some(_), _, _) = item.kind {\n+        if let hir::ItemKind::Impl(.., generics, Some(tr), impl_ty, _) = &item.kind {\n             debug!(\"coherence2::orphan check: trait impl {}\",\n                    self.tcx.hir().node_to_string(item.hir_id));\n             let trait_ref = self.tcx.impl_trait_ref(def_id).unwrap();\n@@ -33,32 +33,74 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n             let sp = cm.def_span(item.span);\n             match traits::orphan_check(self.tcx, def_id) {\n                 Ok(()) => {}\n-                Err(traits::OrphanCheckErr::NoLocalInputType) => {\n-                    struct_span_err!(self.tcx.sess,\n-                                     sp,\n-                                     E0117,\n-                                     \"only traits defined in the current crate can be \\\n-                                      implemented for arbitrary types\")\n-                        .span_label(sp, \"impl doesn't use types inside crate\")\n-                        .note(\"the impl does not reference only types defined in this crate\")\n-                        .note(\"define and implement a trait or new type instead\")\n-                        .emit();\n+                Err(traits::OrphanCheckErr::NonLocalInputType(tys)) => {\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        sp,\n+                        E0117,\n+                        \"only traits defined in the current crate can be implemented for \\\n+                         arbitrary types\"\n+                    );\n+                    err.span_label(sp, \"impl doesn't use only types from inside the current crate\");\n+                    for (ty, is_target_ty) in &tys {\n+                        let mut ty = *ty;\n+                        self.tcx.infer_ctxt().enter(|infcx| {\n+                            // Remove the lifetimes unnecessary for this error.\n+                            ty = infcx.freshen(ty);\n+                        });\n+                        ty = match ty.kind {\n+                            // Remove the type arguments from the output, as they are not relevant.\n+                            // You can think of this as the reverse of `resolve_vars_if_possible`.\n+                            // That way if we had `Vec<MyType>`, we will properly attribute the\n+                            // problem to `Vec<T>` and avoid confusing the user if they were to see\n+                            // `MyType` in the error.\n+                            ty::Adt(def, _) => self.tcx.mk_adt(def, ty::List::empty()),\n+                            _ => ty,\n+                        };\n+                        let this = \"this\".to_string();\n+                        let (ty, postfix) = match &ty.kind {\n+                            ty::Slice(_) => (this, \" because slices are always foreign\"),\n+                            ty::Array(..) => (this, \" because arrays are always foreign\"),\n+                            ty::Tuple(..) => (this, \" because tuples are always foreign\"),\n+                            _ => (format!(\"`{}`\", ty), \"\"),\n+                        };\n+                        let msg = format!(\"{} is not defined in the current crate{}\", ty, postfix);\n+                        if *is_target_ty {\n+                            // Point at `D<A>` in `impl<A, B> for C<B> in D<A>`\n+                            err.span_label(impl_ty.span, &msg);\n+                        } else {\n+                            // Point at `C<B>` in `impl<A, B> for C<B> in D<A>`\n+                            err.span_label(tr.path.span, &msg);\n+                        }\n+                    }\n+                    err.note(\"define and implement a trait or new type instead\");\n+                    err.emit();\n                     return;\n                 }\n                 Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n-                    struct_span_err!(self.tcx.sess,\n-                                     sp,\n-                                     E0210,\n-                                     \"type parameter `{}` must be used as the type parameter \\\n-                                      for some local type (e.g., `MyStruct<{}>`)\",\n-                                     param_ty,\n-                                     param_ty)\n-                        .span_label(sp,\n-                                    format!(\"type parameter `{}` must be used as the type \\\n-                                             parameter for some local type\", param_ty))\n-                        .note(\"only traits defined in the current crate can be implemented \\\n-                               for a type parameter\")\n-                        .emit();\n+                    let mut sp = sp;\n+                    for param in &generics.params {\n+                        if param.name.ident().to_string() == param_ty.to_string() {\n+                            sp = param.span;\n+                        }\n+                    }\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        sp,\n+                        E0210,\n+                        \"type parameter `{}` must be used as the type parameter for some local \\\n+                         type (e.g., `MyStruct<{}>`)\",\n+                        param_ty,\n+                        param_ty\n+                    );\n+                    err.span_label(sp, format!(\n+                        \"type parameter `{}` must be used as the type parameter for some local \\\n+                         type\",\n+                        param_ty,\n+                    ));\n+                    err.note(\"only traits defined in the current crate can be implemented for a \\\n+                              type parameter\");\n+                    err.emit();\n                     return;\n                 }\n             }"}, {"sha": "001d98aece2a088c8cd8065640ce840214c9146d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2641,7 +2641,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     tcx.sess,\n                     attr.span,\n                     E0737,\n-                    \"rust ABI is required to use `#[track_caller]`\"\n+                    \"Rust ABI is required to use `#[track_caller]`\"\n                 ).emit();\n             }\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;"}, {"sha": "f21fc2df8b91388ac65a68b6e2382558a79c67df", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -4958,7 +4958,7 @@ and the pin is required to keep it in the same place in memory.\n \"##,\n \n E0737: r##\"\n-#[track_caller] requires functions to have the \"Rust\" ABI for implicitly\n+`#[track_caller]` requires functions to have the `\"Rust\"` ABI for implicitly\n receiving caller location. See [RFC 2091] for details on this and other\n restrictions.\n \n@@ -4974,57 +4974,6 @@ extern \"C\" fn foo() {}\n [RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n \"##,\n \n-E0738: r##\"\n-#[track_caller] cannot be used in traits yet.  This is due to limitations in the\n-compiler which are likely to be temporary. See [RFC 2091] for details on this\n-and other restrictions.\n-\n-Erroneous example with a trait method implementation:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self);\n-}\n-\n-impl Foo for u64 {\n-    #[track_caller]\n-    fn bar(&self) {}\n-}\n-```\n-\n-Erroneous example with a blanket trait method implementation:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    #[track_caller]\n-    fn bar(&self) {}\n-    fn baz(&self);\n-}\n-```\n-\n-Erroneous example with a trait method declaration:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self) {}\n-\n-    #[track_caller]\n-    fn baz(&self);\n-}\n-```\n-\n-Note that while the compiler may be able to support the attribute in traits in\n-the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n-\n-[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n-\"##,\n-\n E0741: r##\"\n Only `structural_match` types (that is, types that derive `PartialEq` and `Eq`)\n may be used as the types of const generic parameters."}, {"sha": "3ce47e6a7b8cddd86c9fe85f8be3c47f9139c5d4", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n scoped-tls = \"1.0\""}, {"sha": "22638a1376c72cab90b979f054742e37074eb04a", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -533,6 +533,9 @@ declare_features! (\n     /// casts in safe Rust to `dyn Trait` for such a `Trait` is also forbidden.\n     (active, object_safe_for_dispatch, \"1.40.0\", Some(43561), None),\n \n+    /// Allows using the `efiapi` ABI.\n+    (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "97b99b9392f3f0ab3dfd47815dd9f76228f63e88", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -227,6 +227,10 @@ impl<'a> PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, abi_amdgpu_kernel, span,\n                                    \"amdgpu-kernel ABI is experimental and subject to change\");\n             },\n+            Abi::EfiApi => {\n+                gate_feature_post!(&self, abi_efiapi, span,\n+                                   \"efiapi ABI is experimental and subject to change\");\n+            },\n             // Stable\n             Abi::Cdecl |\n             Abi::Stdcall |"}, {"sha": "8ba161f55c1fff6b759185db0976df8a07c67490", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -110,6 +110,7 @@ symbols! {\n         aarch64_target_feature,\n         abi,\n         abi_amdgpu_kernel,\n+        abi_efiapi,\n         abi_msp430_interrupt,\n         abi_ptx,\n         abi_sysv64,"}, {"sha": "72adb95e96af9954f27552bde49ce60bb48fbc03", "filename": "src/test/codegen/abi-efiapi.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -0,0 +1,31 @@\n+// Checks if the correct annotation for the efiapi ABI is passed to llvm.\n+\n+// revisions:x86_64 i686 aarch64 arm riscv\n+\n+// min-llvm-version 9.0\n+\n+//[x86_64] compile-flags: --target x86_64-unknown-uefi\n+//[i686] compile-flags: --target i686-unknown-linux-musl\n+//[aarch64] compile-flags: --target aarch64-unknown-none\n+//[arm] compile-flags: --target armv7r-none-eabi\n+//[riscv] compile-flags: --target riscv64gc-unknown-none-elf\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_core, lang_items, abi_efiapi)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"freeze\"]\n+trait Freeze { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+//x86_64: define win64cc void @has_efiapi\n+//i686: define void @has_efiapi\n+//aarch64: define void @has_efiapi\n+//arm: define void @has_efiapi\n+//riscv: define void @has_efiapi\n+#[no_mangle]\n+pub extern \"efiapi\" fn has_efiapi() {}"}, {"sha": "b545146c9646ee42a4ad7d190260ef6050e2398e", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -30,7 +30,7 @@\n \n \n                   ((::alloc::fmt::format as\n-                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((<::core::fmt::Arguments>::new_v1\n+                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1\n                                                                                                            as\n                                                                                                            fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([(\"test\"\n                                                                                                                                                                                                                             as"}, {"sha": "fc2a0b5950e7dd8c42e79863062d7b907f3a7726", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "0541db2b8505f829a9573d01895f8cceab40e718", "filename": "src/test/ui/coherence/coherence-all-remote.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-all-remote.rs:9:1\n+  --> $DIR/coherence-all-remote.rs:9:6\n    |\n LL | impl<T> Remote1<T> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "0541db2b8505f829a9573d01895f8cceab40e718", "filename": "src/test/ui/coherence/coherence-all-remote.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-all-remote.rs:9:1\n+  --> $DIR/coherence-all-remote.rs:9:6\n    |\n LL | impl<T> Remote1<T> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "816ad949a2bce88eb677bb7043087188b72241ec", "filename": "src/test/ui/coherence/coherence-bigint-param.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-bigint-param.rs:11:1\n+  --> $DIR/coherence-bigint-param.rs:11:6\n    |\n LL | impl<T> Remote1<BigInt> for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "816ad949a2bce88eb677bb7043087188b72241ec", "filename": "src/test/ui/coherence/coherence-bigint-param.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-bigint-param.rs:11:1\n+  --> $DIR/coherence-bigint-param.rs:11:6\n    |\n LL | impl<T> Remote1<BigInt> for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "d3f8ba63f07eb911803117837238249a656a9f19", "filename": "src/test/ui/coherence/coherence-cow.a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.a.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:18:1\n+  --> $DIR/coherence-cow.rs:18:6\n    |\n LL | impl<T> Remote for Pair<T,Cover<T>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "d8db025cbcf2768dac7803fd112f2bb91527fee0", "filename": "src/test/ui/coherence/coherence-cow.b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.b.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:23:1\n+  --> $DIR/coherence-cow.rs:23:6\n    |\n LL | impl<T> Remote for Pair<Cover<T>,T> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "ff46d7ea280323dbfa924b6f672dee4918ce4147", "filename": "src/test/ui/coherence/coherence-cow.c.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.c.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-cow.rs:28:1\n+  --> $DIR/coherence-cow.rs:28:6\n    |\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "06e77b2797d25af5f4eda1fb6fd14d1640b1c0c6", "filename": "src/test/ui/coherence/coherence-cow.re_a.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-cow.rs:18:1\n    |\n LL | impl<T> Remote for Pair<T,Cover<T>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^----------------\n+   | |                  |\n+   | |                  `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "146232ac02b0fa8ffedf1fd678effaf854245eea", "filename": "src/test/ui/coherence/coherence-cow.re_b.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-cow.rs:23:1\n    |\n LL | impl<T> Remote for Pair<Cover<T>,T> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^----------------\n+   | |                  |\n+   | |                  `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "e0cf6aab7bbde12bc09df65afebdeaa1e08833d1", "filename": "src/test/ui/coherence/coherence-cow.re_c.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-cow.rs:28:1\n    |\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^----------------\n+   | |                    |\n+   | |                    `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "971abe29639ff614b76a5c923bbde31334bbbaee", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -8,10 +8,10 @@ LL | impl<A> Foo for A {\n            - impl trait_impl_conflict::Foo for isize;\n \n error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n-  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:6\n    |\n LL | impl<A> Foo for A {\n-   | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type\n+   |      ^ type parameter `A` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "971abe29639ff614b76a5c923bbde31334bbbaee", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -8,10 +8,10 @@ LL | impl<A> Foo for A {\n            - impl trait_impl_conflict::Foo for isize;\n \n error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g., `MyStruct<A>`)\n-  --> $DIR/coherence-cross-crate-conflict.rs:12:1\n+  --> $DIR/coherence-cross-crate-conflict.rs:12:6\n    |\n LL | impl<A> Foo for A {\n-   | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type\n+   |      ^ type parameter `A` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "a3da52fe484ac4fcc918f614336d469f820c5add", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.old.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-fundamental-trait-objects.rs:15:1\n    |\n LL | impl Misc for dyn Fundamental<Local> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^----------------------\n+   | |             |\n+   | |             `dyn coherence_fundamental_trait_lib::Fundamental<Local>` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "a3da52fe484ac4fcc918f614336d469f820c5add", "filename": "src/test/ui/coherence/coherence-fundamental-trait-objects.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fundamental-trait-objects.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-fundamental-trait-objects.rs:15:1\n    |\n LL | impl Misc for dyn Fundamental<Local> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^----------------------\n+   | |             |\n+   | |             `dyn coherence_fundamental_trait_lib::Fundamental<Local>` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "b8137b36948cdb36ed995c6ad07bf2e8c6f54a2e", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -14,9 +14,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:22:1\n    |\n LL | impl !Send for dyn Marker2 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^-----------\n+   | |              |\n+   | |              `dyn Marker2` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`"}, {"sha": "d68337bed0066df70f4c54cd1e4906b4e7cbfa4f", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -14,9 +14,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:22:1\n    |\n LL | unsafe impl Send for dyn Marker2 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^-----------\n+   | |                    |\n+   | |                    `dyn Marker2` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`"}, {"sha": "742845b190737c9bc1f5f4c00c25f2de6caa7705", "filename": "src/test/ui/coherence/coherence-impls-copy.old.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -49,36 +49,44 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:8:1\n    |\n LL | impl Copy for i32 {}\n-   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^---\n+   | |             |\n+   | |             `i32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:32:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^----------------\n+   | |             |\n+   | |             this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:40:1\n    |\n LL | impl Copy for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^--------\n+   | |             |\n+   | |             this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:45:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^------------------\n+   | |             |\n+   | |             this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 10 previous errors"}, {"sha": "742845b190737c9bc1f5f4c00c25f2de6caa7705", "filename": "src/test/ui/coherence/coherence-impls-copy.re.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -49,36 +49,44 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:8:1\n    |\n LL | impl Copy for i32 {}\n-   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^---\n+   | |             |\n+   | |             `i32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:32:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^----------------\n+   | |             |\n+   | |             this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:40:1\n    |\n LL | impl Copy for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^--------\n+   | |             |\n+   | |             this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-copy.rs:45:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^------------------\n+   | |             |\n+   | |             this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 10 previous errors"}, {"sha": "7584b01ca893018a1c957ac85c1d6392302fb444", "filename": "src/test/ui/coherence/coherence-impls-send.old.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-send.rs:20:1\n    |\n LL | unsafe impl Send for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^----------------\n+   | |                    |\n+   | |                    this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n@@ -17,18 +19,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-send.rs:28:1\n    |\n LL | unsafe impl Send for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^--------\n+   | |                    |\n+   | |                    this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-send.rs:32:1\n    |\n LL | unsafe impl Send for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^------------------\n+   | |                    |\n+   | |                    this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 4 previous errors"}, {"sha": "7584b01ca893018a1c957ac85c1d6392302fb444", "filename": "src/test/ui/coherence/coherence-impls-send.re.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-send.rs:20:1\n    |\n LL | unsafe impl Send for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^----------------\n+   | |                    |\n+   | |                    this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n@@ -17,18 +19,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-send.rs:28:1\n    |\n LL | unsafe impl Send for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^--------\n+   | |                    |\n+   | |                    this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-send.rs:32:1\n    |\n LL | unsafe impl Send for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^------------------\n+   | |                    |\n+   | |                    this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 4 previous errors"}, {"sha": "ef999bcf461bc3f13a3173410ef38e79ca87f01b", "filename": "src/test/ui/coherence/coherence-impls-sized.old.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -38,27 +38,33 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-sized.rs:27:1\n    |\n LL | impl Sized for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^----------------\n+   | |              |\n+   | |              this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-sized.rs:39:1\n    |\n LL | impl Sized for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^--------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-sized.rs:46:1\n    |\n LL | impl Sized for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^------------------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 9 previous errors"}, {"sha": "ef999bcf461bc3f13a3173410ef38e79ca87f01b", "filename": "src/test/ui/coherence/coherence-impls-sized.re.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -38,27 +38,33 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-sized.rs:27:1\n    |\n LL | impl Sized for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^----------------\n+   | |              |\n+   | |              this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-sized.rs:39:1\n    |\n LL | impl Sized for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^--------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impls-sized.rs:46:1\n    |\n LL | impl Sized for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^------------------\n+   | |              |\n+   | |              this is not defined in the current crate because slices are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 9 previous errors"}, {"sha": "731752045cd34820a7167bf5823f05025195a6ae", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-lone-type-parameter.rs:9:1\n+  --> $DIR/coherence-lone-type-parameter.rs:9:6\n    |\n LL | impl<T> Remote for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "731752045cd34820a7167bf5823f05025195a6ae", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-lone-type-parameter.rs:9:1\n+  --> $DIR/coherence-lone-type-parameter.rs:9:6\n    |\n LL | impl<T> Remote for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "a353acf0679dc543a90ec2f0888192122c37146e", "filename": "src/test/ui/coherence/coherence-orphan.old.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,18 +2,23 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-orphan.rs:13:1\n    |\n LL | impl TheTrait<usize> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^---------------^^^^^-----\n+   | |    |                   |\n+   | |    |                   `isize` is not defined in the current crate\n+   | |    `usize` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-orphan.rs:21:1\n    |\n LL | impl !Send for Vec<isize> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^----------\n+   | |              |\n+   | |              `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "a353acf0679dc543a90ec2f0888192122c37146e", "filename": "src/test/ui/coherence/coherence-orphan.re.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,18 +2,23 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-orphan.rs:13:1\n    |\n LL | impl TheTrait<usize> for isize { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^---------------^^^^^-----\n+   | |    |                   |\n+   | |    |                   `isize` is not defined in the current crate\n+   | |    `usize` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-orphan.rs:21:1\n    |\n LL | impl !Send for Vec<isize> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^----------\n+   | |              |\n+   | |              `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "7c62716f7058cff687180bf988de1b0568b6f0f6", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-overlapping-pairs.rs:11:1\n+  --> $DIR/coherence-overlapping-pairs.rs:11:6\n    |\n LL | impl<T> Remote for lib::Pair<T,Foo> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "2277b33fcebee0f34f54906d81550372c0bf63b7", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-overlapping-pairs.rs:11:1\n    |\n LL | impl<T> Remote for lib::Pair<T,Foo> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^----------------\n+   | |                  |\n+   | |                  `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "9f55df4c974b8da20861878ca1673fee37d3dae9", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:1\n+  --> $DIR/coherence-pair-covered-uncovered-1.rs:15:6\n    |\n LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "f6e755b666249ca516a3997d9158fba6dd2618ee", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.re.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,12 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-pair-covered-uncovered-1.rs:15:1\n    |\n LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^--------------------------^^^^^---\n+   | |          |                              |\n+   | |          |                              `i32` is not defined in the current crate\n+   | |          `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4084061eb4ac50fc71ae2670d5f32f9e550bd0f7", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-pair-covered-uncovered.rs:11:1\n+  --> $DIR/coherence-pair-covered-uncovered.rs:11:6\n    |\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "9fa860cb584a1b3376e719486ced664bb8005e09", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-pair-covered-uncovered.rs:11:1\n    |\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^----------------\n+   | |                    |\n+   | |                    `lib::Pair` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "fbcf8fb762a010ff243079e249d0b2ba6b4403da", "filename": "src/test/ui/coherence/coherence-vec-local-2.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/coherence-vec-local-2.rs:14:1\n+  --> $DIR/coherence-vec-local-2.rs:14:6\n    |\n LL | impl<T> Remote for Vec<Local<T>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "48a2848c55f1b94d117fa1bbe21db5914ff3cd1b", "filename": "src/test/ui/coherence/coherence-vec-local-2.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-vec-local-2.rs:14:1\n    |\n LL | impl<T> Remote for Vec<Local<T>> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^-------------\n+   | |                  |\n+   | |                  `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4b199dd91421794c559bc72f0a9249413c3fa6b7", "filename": "src/test/ui/coherence/coherence-vec-local.old.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-vec-local.rs:14:1\n    |\n LL | impl Remote for Vec<Local> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^----------\n+   | |               |\n+   | |               `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4b199dd91421794c559bc72f0a9249413c3fa6b7", "filename": "src/test/ui/coherence/coherence-vec-local.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-vec-local.rs:14:1\n    |\n LL | impl Remote for Vec<Local> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^----------\n+   | |               |\n+   | |               `std::vec::Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "0782f823128728cae1a82f057ae946f860475027", "filename": "src/test/ui/coherence/coherence_local_err_struct.old.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence_local_err_struct.rs:17:1\n    |\n LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^---------------------\n+   | |                    |\n+   | |                    `lib::MyStruct` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "0782f823128728cae1a82f057ae946f860475027", "filename": "src/test/ui/coherence/coherence_local_err_struct.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence_local_err_struct.rs:17:1\n    |\n LL | impl lib::MyCopy for lib::MyStruct<MyType> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^---------------------\n+   | |                    |\n+   | |                    `lib::MyStruct` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "f01623f76217e1fd263a9e7d9d0c537a90cdd23f", "filename": "src/test/ui/coherence/coherence_local_err_tuple.old.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.old.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence_local_err_tuple.rs:17:1\n    |\n LL | impl lib::MyCopy for (MyType,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^---------\n+   | |                    |\n+   | |                    this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "f01623f76217e1fd263a9e7d9d0c537a90cdd23f", "filename": "src/test/ui/coherence/coherence_local_err_tuple.re.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.re.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence_local_err_tuple.rs:17:1\n    |\n LL | impl lib::MyCopy for (MyType,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^---------\n+   | |                    |\n+   | |                    this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4d7757799e7cd2cb59b5effb3cadf1a43cdf7610", "filename": "src/test/ui/coherence/impl-foreign-for-foreign.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign-for-foreign.rs:12:1\n    |\n LL | impl Remote for i32 {\n-   | ^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^---\n+   | |               |\n+   | |               `i32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "4d15f0db65ffb0fe3e0840d4d804e2b715970d0d", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[foreign].stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,27 +2,36 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign-for-foreign[foreign].rs:12:1\n    |\n LL | impl Remote1<Rc<i32>> for i32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^----------------^^^^^---\n+   | |    |                    |\n+   | |    |                    `i32` is not defined in the current crate\n+   | |    `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign-for-foreign[foreign].rs:16:1\n    |\n LL | impl Remote1<Rc<Local>> for f64 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^------------------^^^^^---\n+   | |    |                      |\n+   | |    |                      `f64` is not defined in the current crate\n+   | |    `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign-for-foreign[foreign].rs:20:1\n    |\n LL | impl<T> Remote1<Rc<T>> for f32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^--------------^^^^^---\n+   | |       |                  |\n+   | |       |                  `f32` is not defined in the current crate\n+   | |       `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 3 previous errors"}, {"sha": "d1f4d9849ac313516b84f31ec3ee1fb8baec0dad", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[foreign].stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,18 +2,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign-for-fundamental[foreign].rs:12:1\n    |\n LL | impl Remote for Box<i32> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^--------\n+   | |               |\n+   | |               `i32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign-for-fundamental[foreign].rs:16:1\n    |\n LL | impl<T> Remote for Box<Rc<T>> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^----------\n+   | |                  |\n+   | |                  `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "07c7632a53ff4fbf32bb789e8d34aa93fa1cd369", "filename": "src/test/ui/coherence/impl-foreign[foreign]-for-foreign.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,9 +2,12 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign[foreign]-for-foreign.rs:12:1\n    |\n LL | impl Remote1<u32> for f64 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^------------^^^^^---\n+   | |    |                |\n+   | |    |                `f64` is not defined in the current crate\n+   | |    `u32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to previous error"}, {"sha": "8dcac05c0ccb60f23b0cf532da48c51e93b553f4", "filename": "src/test/ui/coherence/impl-foreign[fundemental[foreign]]-for-foreign.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,27 +2,36 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:13:1\n    |\n LL | impl Remote1<Box<String>> for i32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^--------------------^^^^^---\n+   | |    |                        |\n+   | |    |                        `i32` is not defined in the current crate\n+   | |    `std::string::String` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:17:1\n    |\n LL | impl Remote1<Box<Rc<i32>>> for f64 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^---------------------^^^^^---\n+   | |    |                         |\n+   | |    |                         `f64` is not defined in the current crate\n+   | |    `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:21:1\n    |\n LL | impl<T> Remote1<Box<Rc<T>>> for f32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^-------------------^^^^^---\n+   | |       |                       |\n+   | |       |                       `f32` is not defined in the current crate\n+   | |       `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 3 previous errors"}, {"sha": "7e9d3c6e72927a6b120db255e592479887e60057", "filename": "src/test/ui/coherence/impl[t]-foreign-for-foreign[t].stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,18 +2,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/impl[t]-foreign-for-foreign[t].rs:13:1\n    |\n LL | impl Remote for Rc<Local> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^---------\n+   | |               |\n+   | |               `std::rc::Rc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/impl[t]-foreign-for-foreign[t].rs:18:1\n    |\n LL | impl<T> Remote for Arc<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^------\n+   | |                  |\n+   | |                  `std::sync::Arc` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "a26b87a326211980f17bfad1c10cd6025f257521", "filename": "src/test/ui/coherence/impl[t]-foreign-for-fundamental[t].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign-for-fundamental[t].rs:12:1\n+  --> $DIR/impl[t]-foreign-for-fundamental[t].rs:12:6\n    |\n LL | impl<T> Remote for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "cbead462e67904d23502fe9adb0d69364aa433f7", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-fundamental[t].stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:12:1\n+  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:12:6\n    |\n LL | impl<T> Remote1<u32> for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:16:1\n+  --> $DIR/impl[t]-foreign[foreign]-for-fundamental[t].rs:16:10\n    |\n LL | impl<'a, T> Remote1<u32> for &'a T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "3d9afdf6cf6051f970ab65110a578db4b09e3810", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-t.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[foreign]-for-t.rs:12:1\n+  --> $DIR/impl[t]-foreign[foreign]-for-t.rs:12:6\n    |\n LL | impl<T> Remote1<u32> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "150b1962acb840af48f55dd58b26e83133ecb9d2", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-foreign.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:12:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:12:6\n    |\n LL | impl<T> Remote1<Box<T>> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:16:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-foreign.rs:16:10\n    |\n LL | impl<'a, T> Remote1<&'a T> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "0d86e74788cf89c3a5deb24a44ce1685bf1948f3", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-fundamental[t].stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:12:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:12:10\n    |\n LL | impl<'a, T> Remote1<Box<T>> for &'a T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:15:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-fundamental[t].rs:15:10\n    |\n LL | impl<'a, T> Remote1<&'a T> for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "04ac6a868fa1ab3009711c0ad49228333534a886", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-t.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:12:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:12:6\n    |\n LL | impl<T> Remote1<Box<T>> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:15:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]]-for-t.rs:15:10\n    |\n LL | impl<'a, T> Remote1<&'a T> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "f1fdcecf57df83315717761e7a4b8bb3522a1c6f", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]_local]-for-foreign.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:12:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:12:6\n    |\n LL | impl<T> Remote2<Box<T>, Local> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:16:1\n+  --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:16:10\n    |\n LL | impl<'a, T> Remote2<&'a T, Local> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "99ccbb89fc2fc086595eb7611958bd8a3ac52a42", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[t].stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:12:1\n+  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:12:6\n    |\n LL | impl<T> Remote1<Local> for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:16:1\n+  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:16:6\n    |\n LL | impl<T> Remote1<Local> for &T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "08cf414c139af3b40d5edf0bb699ae59c4ac74ca", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-t.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[local]-for-t.rs:12:1\n+  --> $DIR/impl[t]-foreign[local]-for-t.rs:12:6\n    |\n LL | impl<T> Remote1<Local> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "e9d1ea8a8157516c63f7865944e4f74c04be4a65", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-foreign.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[t]-for-foreign.rs:12:1\n+  --> $DIR/impl[t]-foreign[t]-for-foreign.rs:12:6\n    |\n LL | impl<T> Remote1<T> for u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "d8b0d25a5782bbbb20dfcb7a42f52f709fa17483", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-fundamental.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,16 +1,16 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:12:1\n+  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:12:6\n    |\n LL | impl<T> Remote1<T> for Box<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `B` must be used as the type parameter for some local type (e.g., `MyStruct<B>`)\n-  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:16:1\n+  --> $DIR/impl[t]-foreign[t]-for-fundamental.rs:16:13\n    |\n LL | impl<'a, A, B> Remote1<A> for &'a B {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `B` must be used as the type parameter for some local type\n+   |             ^ type parameter `B` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "7b651e66c3dcb2a760b2d19a09a0bd17937aa20a", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-t.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/impl[t]-foreign[t]-for-t.rs:12:1\n+  --> $DIR/impl[t]-foreign[t]-for-t.rs:12:6\n    |\n LL | impl<T> Remote1<T> for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "700f8128a939a8b17a2a7153c58d80f3add6779d", "filename": "src/test/ui/did_you_mean/issue-42764.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let n: usize = 42;\n     this_function_expects_a_double_option(n);\n     //~^ ERROR mismatched types\n-    //~| HELP try using a variant of the expected type\n+    //~| HELP try using a variant of the expected enum\n }\n \n "}, {"sha": "0b3e44446aec2035635194a189dddf25c601a62c", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -6,7 +6,7 @@ LL |     this_function_expects_a_double_option(n);\n    |\n    = note: expected type `DoubleOption<_>`\n               found type `usize`\n-help: try using a variant of the expected type\n+help: try using a variant of the expected enum\n    |\n LL |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a374b0d2636cddfb212e10f6066dcbcbaf771ef2", "filename": "src/test/ui/dropck/drop-on-non-struct.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -8,9 +8,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/drop-on-non-struct.rs:1:1\n    |\n LL | impl<'a> Drop for &'a mut isize {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^-------------\n+   | |                 |\n+   | |                 `isize` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "f0cfc8a2533248a6e50320df44388d07c7000056", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -8,9 +8,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/E0117.rs:1:1\n    |\n LL | impl Drop for u32 {}\n-   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^---\n+   | |             |\n+   | |             `u32` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 2 previous errors"}, {"sha": "0db89dfec84081d4b8f2e63abd966a35b6ed7c3a", "filename": "src/test/ui/error-codes/E0164.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct or tuple variant, found associated constant `<Foo>::B`\n+error[E0164]: expected tuple struct or tuple variant, found associated constant `Foo::B`\n   --> $DIR/E0164.rs:9:9\n    |\n LL |         Foo::B(i) => i,"}, {"sha": "e4ad4ffb45fee6b2d0c1ca5fcc3da067d390aca2", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -14,9 +14,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/E0206.rs:3:1\n    |\n LL | impl Copy for Foo { }\n-   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^---\n+   | |             |\n+   | |             this is not defined in the current crate because arrays are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 3 previous errors"}, {"sha": "f7516d20af472562748d69793a60ebe07f2d6206", "filename": "src/test/ui/error-codes/e0119/complex-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -9,10 +9,10 @@ LL | impl<R> External for (Q, R) {}\n              where <U as std::ops::FnOnce<(T,)>>::Output == V, <V as std::iter::Iterator>::Item == T, 'b : 'a, T : 'a, U: std::ops::FnOnce<(T,)>, U : 'static, V: std::iter::Iterator, V: std::clone::Clone, W: std::ops::Add, <W as std::ops::Add>::Output: std::marker::Copy;\n \n error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g., `MyStruct<R>`)\n-  --> $DIR/complex-impl.rs:9:1\n+  --> $DIR/complex-impl.rs:9:6\n    |\n LL | impl<R> External for (Q, R) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `R` must be used as the type parameter for some local type\n+   |      ^ type parameter `R` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "ec8e8144d42cfa6b5a756f25876ddb342531a94c", "filename": "src/test/ui/error-codes/e0119/issue-28981.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -9,10 +9,10 @@ LL | impl<Foo> Deref for Foo { }\n              where T: ?Sized;\n \n error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g., `MyStruct<Foo>`)\n-  --> $DIR/issue-28981.rs:5:1\n+  --> $DIR/issue-28981.rs:5:6\n    |\n LL | impl<Foo> Deref for Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ type parameter `Foo` must be used as the type parameter for some local type\n+   |      ^^^ type parameter `Foo` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "e89dc4d5a05a572207d8f683b5f74124277edaf8", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -7,6 +7,7 @@\n // gate-test-abi_ptx\n // gate-test-abi_x86_interrupt\n // gate-test-abi_amdgpu_kernel\n+// gate-test-abi_efiapi\n \n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n@@ -20,6 +21,7 @@ extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject t\n extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n extern \"amdgpu-kernel\" fn f9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+extern \"efiapi\" fn f10() {} //~ ERROR efiapi ABI is experimental and subject to change\n \n // Methods in trait definition\n trait Tr {\n@@ -34,6 +36,7 @@ trait Tr {\n     extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn m10(); //~ ERROR efiapi ABI is experimental and subject to change\n \n     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n@@ -42,6 +45,7 @@ trait Tr {\n     extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn dm9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn dm10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n struct S;\n@@ -59,6 +63,7 @@ impl Tr for S {\n     extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn m10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n // Methods in inherent impl\n@@ -74,6 +79,7 @@ impl S {\n     extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn im9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn im10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n // Function pointer types\n@@ -86,6 +92,7 @@ type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and sub\n type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n type A9 = extern \"amdgpu-kernel\" fn(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+type A10 = extern \"efiapi\" fn(); //~ ERROR efiapi ABI is experimental and subject to change\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n@@ -97,5 +104,6 @@ extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change\n extern \"amdgpu-kernel\" {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+extern \"efiapi\" {} //~ ERROR efiapi ABI is experimental and subject to change\n \n fn main() {}"}, {"sha": "0f2622f1065953aeef557df8e9a6971c2e38c7c1", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 133, "deletions": 70, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,13 +1,13 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:12:1\n+  --> $DIR/feature-gate-abi.rs:13:1\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:14:1\n+  --> $DIR/feature-gate-abi.rs:15:1\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,15 +16,15 @@ LL | extern \"platform-intrinsic\" fn f2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:16:1\n+  --> $DIR/feature-gate-abi.rs:17:1\n    |\n LL | extern \"vectorcall\" fn f3() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:17:1\n+  --> $DIR/feature-gate-abi.rs:18:1\n    |\n LL | extern \"rust-call\" fn f4() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL | extern \"rust-call\" fn f4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:18:1\n+  --> $DIR/feature-gate-abi.rs:19:1\n    |\n LL | extern \"msp430-interrupt\" fn f5() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL | extern \"msp430-interrupt\" fn f5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:19:1\n+  --> $DIR/feature-gate-abi.rs:20:1\n    |\n LL | extern \"ptx-kernel\" fn f6() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -51,7 +51,7 @@ LL | extern \"ptx-kernel\" fn f6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:20:1\n+  --> $DIR/feature-gate-abi.rs:21:1\n    |\n LL | extern \"x86-interrupt\" fn f7() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,32 +60,41 @@ LL | extern \"x86-interrupt\" fn f7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:21:1\n+  --> $DIR/feature-gate-abi.rs:22:1\n    |\n LL | extern \"thiscall\" fn f8() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:22:1\n+  --> $DIR/feature-gate-abi.rs:23:1\n    |\n LL | extern \"amdgpu-kernel\" fn f9() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:24:1\n+   |\n+LL | extern \"efiapi\" fn f10() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:26:5\n+  --> $DIR/feature-gate-abi.rs:28:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:28:5\n+  --> $DIR/feature-gate-abi.rs:30:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -94,15 +103,15 @@ LL |     extern \"platform-intrinsic\" fn m2();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:30:5\n+  --> $DIR/feature-gate-abi.rs:32:5\n    |\n LL |     extern \"vectorcall\" fn m3();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:31:5\n+  --> $DIR/feature-gate-abi.rs:33:5\n    |\n LL |     extern \"rust-call\" fn m4();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -111,7 +120,7 @@ LL |     extern \"rust-call\" fn m4();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:32:5\n+  --> $DIR/feature-gate-abi.rs:34:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +129,7 @@ LL |     extern \"msp430-interrupt\" fn m5();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:33:5\n+  --> $DIR/feature-gate-abi.rs:35:5\n    |\n LL |     extern \"ptx-kernel\" fn m6();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -129,7 +138,7 @@ LL |     extern \"ptx-kernel\" fn m6();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:34:5\n+  --> $DIR/feature-gate-abi.rs:36:5\n    |\n LL |     extern \"x86-interrupt\" fn m7();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,32 +147,41 @@ LL |     extern \"x86-interrupt\" fn m7();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:35:5\n+  --> $DIR/feature-gate-abi.rs:37:5\n    |\n LL |     extern \"thiscall\" fn m8();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:36:5\n+  --> $DIR/feature-gate-abi.rs:38:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:39:5\n+   |\n+LL |     extern \"efiapi\" fn m10();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:38:5\n+  --> $DIR/feature-gate-abi.rs:41:5\n    |\n LL |     extern \"vectorcall\" fn dm3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:39:5\n+  --> $DIR/feature-gate-abi.rs:42:5\n    |\n LL |     extern \"rust-call\" fn dm4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -172,7 +190,7 @@ LL |     extern \"rust-call\" fn dm4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:40:5\n+  --> $DIR/feature-gate-abi.rs:43:5\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -181,7 +199,7 @@ LL |     extern \"msp430-interrupt\" fn dm5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:41:5\n+  --> $DIR/feature-gate-abi.rs:44:5\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -190,7 +208,7 @@ LL |     extern \"ptx-kernel\" fn dm6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:42:5\n+  --> $DIR/feature-gate-abi.rs:45:5\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -199,32 +217,41 @@ LL |     extern \"x86-interrupt\" fn dm7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:43:5\n+  --> $DIR/feature-gate-abi.rs:46:5\n    |\n LL |     extern \"thiscall\" fn dm8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:44:5\n+  --> $DIR/feature-gate-abi.rs:47:5\n    |\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:48:5\n+   |\n+LL |     extern \"efiapi\" fn dm10() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:51:5\n+  --> $DIR/feature-gate-abi.rs:55:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:53:5\n+  --> $DIR/feature-gate-abi.rs:57:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -233,15 +260,15 @@ LL |     extern \"platform-intrinsic\" fn m2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:55:5\n+  --> $DIR/feature-gate-abi.rs:59:5\n    |\n LL |     extern \"vectorcall\" fn m3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:56:5\n+  --> $DIR/feature-gate-abi.rs:60:5\n    |\n LL |     extern \"rust-call\" fn m4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -250,7 +277,7 @@ LL |     extern \"rust-call\" fn m4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:57:5\n+  --> $DIR/feature-gate-abi.rs:61:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -259,7 +286,7 @@ LL |     extern \"msp430-interrupt\" fn m5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:58:5\n+  --> $DIR/feature-gate-abi.rs:62:5\n    |\n LL |     extern \"ptx-kernel\" fn m6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -268,7 +295,7 @@ LL |     extern \"ptx-kernel\" fn m6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:59:5\n+  --> $DIR/feature-gate-abi.rs:63:5\n    |\n LL |     extern \"x86-interrupt\" fn m7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -277,32 +304,41 @@ LL |     extern \"x86-interrupt\" fn m7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:60:5\n+  --> $DIR/feature-gate-abi.rs:64:5\n    |\n LL |     extern \"thiscall\" fn m8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:61:5\n+  --> $DIR/feature-gate-abi.rs:65:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n-error[E0658]: intrinsics are subject to change\n+error[E0658]: efiapi ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:66:5\n    |\n+LL |     extern \"efiapi\" fn m10() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error[E0658]: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:71:5\n+   |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:68:5\n+  --> $DIR/feature-gate-abi.rs:73:5\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -311,15 +347,15 @@ LL |     extern \"platform-intrinsic\" fn im2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:70:5\n+  --> $DIR/feature-gate-abi.rs:75:5\n    |\n LL |     extern \"vectorcall\" fn im3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:71:5\n+  --> $DIR/feature-gate-abi.rs:76:5\n    |\n LL |     extern \"rust-call\" fn im4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -328,7 +364,7 @@ LL |     extern \"rust-call\" fn im4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:72:5\n+  --> $DIR/feature-gate-abi.rs:77:5\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -337,7 +373,7 @@ LL |     extern \"msp430-interrupt\" fn im5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:73:5\n+  --> $DIR/feature-gate-abi.rs:78:5\n    |\n LL |     extern \"ptx-kernel\" fn im6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -346,7 +382,7 @@ LL |     extern \"ptx-kernel\" fn im6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:74:5\n+  --> $DIR/feature-gate-abi.rs:79:5\n    |\n LL |     extern \"x86-interrupt\" fn im7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -355,32 +391,41 @@ LL |     extern \"x86-interrupt\" fn im7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:75:5\n+  --> $DIR/feature-gate-abi.rs:80:5\n    |\n LL |     extern \"thiscall\" fn im8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:76:5\n+  --> $DIR/feature-gate-abi.rs:81:5\n    |\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:82:5\n+   |\n+LL |     extern \"efiapi\" fn im10() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:80:11\n+  --> $DIR/feature-gate-abi.rs:86:11\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:81:11\n+  --> $DIR/feature-gate-abi.rs:87:11\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -389,15 +434,15 @@ LL | type A2 = extern \"platform-intrinsic\" fn();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:82:11\n+  --> $DIR/feature-gate-abi.rs:88:11\n    |\n LL | type A3 = extern \"vectorcall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:83:11\n+  --> $DIR/feature-gate-abi.rs:89:11\n    |\n LL | type A4 = extern \"rust-call\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -406,7 +451,7 @@ LL | type A4 = extern \"rust-call\" fn();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:84:11\n+  --> $DIR/feature-gate-abi.rs:90:11\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -415,7 +460,7 @@ LL | type A5 = extern \"msp430-interrupt\" fn();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:85:11\n+  --> $DIR/feature-gate-abi.rs:91:11\n    |\n LL | type A6 = extern \"ptx-kernel\" fn ();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -424,7 +469,7 @@ LL | type A6 = extern \"ptx-kernel\" fn ();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:86:11\n+  --> $DIR/feature-gate-abi.rs:92:11\n    |\n LL | type A7 = extern \"x86-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -433,32 +478,41 @@ LL | type A7 = extern \"x86-interrupt\" fn();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:87:11\n+  --> $DIR/feature-gate-abi.rs:93:11\n    |\n LL | type A8 = extern \"thiscall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:88:11\n+  --> $DIR/feature-gate-abi.rs:94:11\n    |\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:95:12\n+   |\n+LL | type A10 = extern \"efiapi\" fn();\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:91:1\n+  --> $DIR/feature-gate-abi.rs:98:1\n    |\n LL | extern \"rust-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:92:1\n+  --> $DIR/feature-gate-abi.rs:99:1\n    |\n LL | extern \"platform-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -467,15 +521,15 @@ LL | extern \"platform-intrinsic\" {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:93:1\n+  --> $DIR/feature-gate-abi.rs:100:1\n    |\n LL | extern \"vectorcall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:94:1\n+  --> $DIR/feature-gate-abi.rs:101:1\n    |\n LL | extern \"rust-call\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n@@ -484,7 +538,7 @@ LL | extern \"rust-call\" {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:95:1\n+  --> $DIR/feature-gate-abi.rs:102:1\n    |\n LL | extern \"msp430-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -493,7 +547,7 @@ LL | extern \"msp430-interrupt\" {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:96:1\n+  --> $DIR/feature-gate-abi.rs:103:1\n    |\n LL | extern \"ptx-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n@@ -502,7 +556,7 @@ LL | extern \"ptx-kernel\" {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:97:1\n+  --> $DIR/feature-gate-abi.rs:104:1\n    |\n LL | extern \"x86-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -511,70 +565,79 @@ LL | extern \"x86-interrupt\" {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:98:1\n+  --> $DIR/feature-gate-abi.rs:105:1\n    |\n LL | extern \"thiscall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:99:1\n+  --> $DIR/feature-gate-abi.rs:106:1\n    |\n LL | extern \"amdgpu-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:107:1\n+   |\n+LL | extern \"efiapi\" {}\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:26:32\n+  --> $DIR/feature-gate-abi.rs:28:32\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |                                ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:28:36\n+  --> $DIR/feature-gate-abi.rs:30:36\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |                                    ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:12:33\n+  --> $DIR/feature-gate-abi.rs:13:33\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |                                 ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:14:37\n+  --> $DIR/feature-gate-abi.rs:15:37\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:51:37\n+  --> $DIR/feature-gate-abi.rs:55:37\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:53:41\n+  --> $DIR/feature-gate-abi.rs:57:41\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |                                         ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:66:38\n+  --> $DIR/feature-gate-abi.rs:71:38\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |                                      ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:68:42\n+  --> $DIR/feature-gate-abi.rs:73:42\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |                                          ^^\n \n-error: aborting due to 69 previous errors\n+error: aborting due to 76 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "504bfb56979609c0c0c6102ca84f58cf16077cb1", "filename": "src/test/ui/feature-gates/feature-gate-re-rebalance-coherence.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/feature-gate-re-rebalance-coherence.rs:10:1\n+  --> $DIR/feature-gate-re-rebalance-coherence.rs:10:10\n    |\n LL | impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "5d6632f2fc2ec96d78aa7f3f7abeef316e96250a", "filename": "src/test/ui/fn-in-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-in-pat.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct or tuple variant, found method `<A>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `A::new`\n   --> $DIR/fn-in-pat.rs:11:9\n    |\n LL |         A::new() => (),"}, {"sha": "e488b1f6b0cb617991f58b359eb3ee574d5dfb4a", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -5,7 +5,7 @@ LL |     x = 5;\n    |         ^\n    |         |\n    |         expected enum `std::option::Option`, found integer\n-   |         help: try using a variant of the expected type: `Some(5)`\n+   |         help: try using a variant of the expected enum: `Some(5)`\n    |\n    = note: expected type `std::option::Option<usize>`\n               found type `{integer}`"}, {"sha": "74cfeb6db8e3b2945ed8cde770c36014585fce35", "filename": "src/test/ui/issues/issue-28992-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -12,5 +12,5 @@ impl S {\n fn main() {\n     if let C1(..) = 0 {} //~ ERROR expected tuple struct or tuple variant, found constant `C1`\n     if let S::C2(..) = 0 {}\n-    //~^ ERROR expected tuple struct or tuple variant, found associated constant `<S>::C2`\n+    //~^ ERROR expected tuple struct or tuple variant, found associated constant `S::C2`\n }"}, {"sha": "71f337278f29a14fd4ab8ca4fcef346facb62dcb", "filename": "src/test/ui/issues/issue-28992-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -4,7 +4,7 @@ error[E0532]: expected tuple struct or tuple variant, found constant `C1`\n LL |     if let C1(..) = 0 {}\n    |            ^^ not a tuple struct or tuple variant\n \n-error[E0164]: expected tuple struct or tuple variant, found associated constant `<S>::C2`\n+error[E0164]: expected tuple struct or tuple variant, found associated constant `S::C2`\n   --> $DIR/issue-28992-empty.rs:14:12\n    |\n LL |     if let S::C2(..) = 0 {}"}, {"sha": "12d4da7159929b4cc0e4180aeb73b83c0c9ed62c", "filename": "src/test/ui/issues/issue-41974.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -16,10 +16,10 @@ LL | impl<T> Drop for T where T: A {\n    |                  ^ implementing Drop requires a struct\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/issue-41974.rs:7:1\n+  --> $DIR/issue-41974.rs:7:6\n    |\n LL | impl<T> Drop for T where T: A {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "07e90c567480f1de4e27c946260177b80a9f029e", "filename": "src/test/ui/issues/issue-46112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -5,7 +5,7 @@ LL | fn main() { test(Ok(())); }\n    |                     ^^\n    |                     |\n    |                     expected enum `std::option::Option`, found ()\n-   |                     help: try using a variant of the expected type: `Some(())`\n+   |                     help: try using a variant of the expected enum: `Some(())`\n    |\n    = note: expected type `std::option::Option<()>`\n               found type `()`"}, {"sha": "33b79dba73e0eb087d0ba3ee125b12d43c701344", "filename": "src/test/ui/issues/issue-52057.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -0,0 +1,8 @@\n+warning: `#[inline]` is ignored on function prototypes\n+  --> $DIR/issue-52057.rs:10:5\n+   |\n+LL |     #[inline(always)]\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unused_attributes)]` on by default\n+"}, {"sha": "bb0d15a23d60536f4451b53c54b60eaa13fc86be", "filename": "src/test/ui/issues/issue-55587.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct or tuple variant, found method `<Path>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `Path::new`\n   --> $DIR/issue-55587.rs:4:9\n    |\n LL |     let Path::new();"}, {"sha": "8bdefbb36ae5f21c955bd9edba77e6a02b63f119", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -0,0 +1,37 @@\n+#![feature(extern_types)]\n+#![feature(type_alias_impl_trait)]\n+\n+#![warn(unused_attributes)]\n+\n+trait Trait {\n+    #[inline] //~ WARN `#[inline]` is ignored on constants\n+    //~^ WARN this was previously accepted\n+    const X: u32;\n+\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    type T;\n+\n+    type U;\n+}\n+\n+impl Trait for () {\n+    #[inline] //~ WARN `#[inline]` is ignored on constants\n+    //~^ WARN this was previously accepted\n+    const X: u32 = 0;\n+\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    type T = Self;\n+\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    type U = impl Trait; //~ ERROR could not find defining uses\n+}\n+\n+extern {\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    static X: u32;\n+\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    type T;\n+}\n+\n+fn main() {}"}, {"sha": "6c94f88f139485efc3b77271e95b22ac8de4fd4d", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -0,0 +1,72 @@\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:30:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     static X: u32;\n+   |     -------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T;\n+   |     ------- not a function or closure\n+\n+warning: `#[inline]` is ignored on constants\n+  --> $DIR/inline-trait-and-foreign-items.rs:7:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/inline-trait-and-foreign-items.rs:4:9\n+   |\n+LL | #![warn(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #65833 <https://github.com/rust-lang/rust/issues/65833>\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:11:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T;\n+   |     ------- not a function or closure\n+\n+warning: `#[inline]` is ignored on constants\n+  --> $DIR/inline-trait-and-foreign-items.rs:18:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #65833 <https://github.com/rust-lang/rust/issues/65833>\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:22:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T = Self;\n+   |     -------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type U = impl Trait;\n+   |     -------------------- not a function or closure\n+\n+error: could not find defining uses\n+  --> $DIR/inline-trait-and-foreign-items.rs:26:5\n+   |\n+LL |     type U = impl Trait;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "21097197499ddb369a0c8579329e3e7a68e58264", "filename": "src/test/ui/lint/warn-unused-inline-on-fn-prototypes.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -0,0 +1,13 @@\n+#![deny(unused_attributes)]\n+\n+trait Trait {\n+    #[inline] //~ ERROR `#[inline]` is ignored on function prototypes\n+    fn foo();\n+}\n+\n+extern {\n+    #[inline] //~ ERROR `#[inline]` is ignored on function prototypes\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "006cc6c80a64e9722d411c92337135155164bdd0", "filename": "src/test/ui/lint/warn-unused-inline-on-fn-prototypes.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -0,0 +1,20 @@\n+error: `#[inline]` is ignored on function prototypes\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:9:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:1:9\n+   |\n+LL | #![deny(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: `#[inline]` is ignored on function prototypes\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:4:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2d7a0f1614197527c5c7cd5f7f65777349474cd4", "filename": "src/test/ui/match/match-fn-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,12 +1,12 @@\n-error[E0164]: expected tuple struct or tuple variant, found method `<Path>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `Path::new`\n   --> $DIR/match-fn-call.rs:6:9\n    |\n LL |         Path::new(\"foo\") => println!(\"foo\"),\n    |         ^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n    |\n    = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n \n-error[E0164]: expected tuple struct or tuple variant, found method `<Path>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `Path::new`\n   --> $DIR/match-fn-call.rs:8:9\n    |\n LL |         Path::new(\"bar\") => println!(\"bar\"),"}, {"sha": "f94be1734b7b148c69d7e19455041113f4a17c4e", "filename": "src/test/ui/methods/method-path-in-pattern.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -13,20 +13,20 @@ impl MyTrait for Foo {}\n fn main() {\n     match 0u32 {\n         Foo::bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n     }\n     match 0u32 {\n         <Foo>::bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n     }\n     match 0u32 {\n         <Foo>::trait_bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n     }\n     if let Foo::bar = 0u32 {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n     if let <Foo>::bar = 0u32 {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n     if let Foo::trait_bar = 0u32 {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n }"}, {"sha": "6b0c5946ff8d86c271c14878165fe73ac075b833", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,34 +1,34 @@\n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:15:9\n    |\n LL |         Foo::bar => {}\n    |         ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:19:9\n    |\n LL |         <Foo>::bar => {}\n    |         ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:23:9\n    |\n LL |         <Foo>::trait_bar => {}\n    |         ^^^^^^^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:26:12\n    |\n LL |     if let Foo::bar = 0u32 {}\n    |            ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:28:12\n    |\n LL |     if let <Foo>::bar = 0u32 {}\n    |            ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:30:12\n    |\n LL |     if let Foo::trait_bar = 0u32 {}"}, {"sha": "cb21b26bba75af4e15b805b6d7fffc89cfcd3a64", "filename": "src/test/ui/orphan-check-diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Forphan-check-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Forphan-check-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forphan-check-diagnostics.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,8 +1,8 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/orphan-check-diagnostics.rs:11:1\n+  --> $DIR/orphan-check-diagnostics.rs:11:6\n    |\n LL | impl<T> RemoteTrait for T where T: LocalTrait {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n    = note: only traits defined in the current crate can be implemented for a type parameter\n "}, {"sha": "b20226f87e8f8e1f761b823b2a73d7506b3e6793", "filename": "src/test/ui/parser/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "162c6387088e76f9a472c713045affe4d5b54b65", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,7 +1,6 @@\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n-#[track_caller]\n+#[track_caller] //~ ERROR Rust ABI is required to use `#[track_caller]`\n extern \"C\" fn f() {}\n-//~^^ ERROR rust ABI is required to use `#[track_caller]`\n \n fn main() {}"}, {"sha": "ad89b142f0ec8b0b0e19bf36c78c5c72ec9e53b2", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0737]: rust ABI is required to use `#[track_caller]`\n+error[E0737]: Rust ABI is required to use `#[track_caller]`\n   --> $DIR/error-with-invalid-abi.rs:3:1\n    |\n LL | #[track_caller]"}, {"sha": "4fd768d640a551532802cc0d74134a7fa4565d20", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,9 +1,8 @@\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n trait Trait {\n-    #[track_caller]\n+    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n     fn unwrap(&self);\n-    //~^^ ERROR: `#[track_caller]` is not supported in trait declarations.\n }\n \n impl Trait for u64 {"}, {"sha": "72ed6f89faa964bfdc232e81a8f56a2d8175f5ff", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0738]: `#[track_caller]` is not supported in trait declarations.\n+error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-decl.rs:4:5\n    |\n LL |     #[track_caller]"}, {"sha": "2139ba5de10c364f26ab55b39a8408fcc9d215f6", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,9 +1,8 @@\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n trait Trait {\n-    #[track_caller]\n+    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n     fn unwrap(&self) {}\n-    //~^^ ERROR: `#[track_caller]` is not supported in trait declarations.\n }\n \n fn main() {}"}, {"sha": "05689c9468becf6d6074161f0a4b875fb0960e9c", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0738]: `#[track_caller]` is not supported in trait declarations.\n+error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-default-impl.rs:4:5\n    |\n LL |     #[track_caller]"}, {"sha": "b565e11f55b2a22ff9fbca3b21ad0fb38252d54b", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,13 +1,21 @@\n+// check-fail\n+\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n trait Trait {\n     fn unwrap(&self);\n }\n \n impl Trait for u64 {\n-    #[track_caller]\n+    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n     fn unwrap(&self) {}\n-    //~^^ ERROR: `#[track_caller]` is not supported in traits yet.\n+}\n+\n+struct S;\n+\n+impl S {\n+    #[track_caller] // ok\n+    fn foo() {}\n }\n \n fn main() {}"}, {"sha": "707b367484c2cfb7f55daa79dcdcbb31d5927fec", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/error-with-trait-fn-impl.rs:1:12\n+  --> $DIR/error-with-trait-fn-impl.rs:3:12\n    |\n LL | #![feature(track_caller)]\n    |            ^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0738]: `#[track_caller]` is not supported in traits yet.\n-  --> $DIR/error-with-trait-fn-impl.rs:8:5\n+error[E0738]: `#[track_caller]` may not be used on trait methods\n+  --> $DIR/error-with-trait-fn-impl.rs:10:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "52e777285eb30caa25cddee7db2687a3a84920e3", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17hd72940ef9669d526E)\n+error: symbol-name(_ZN5basic4main17h81759b0695851718E)\n   --> $DIR/basic.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::hd72940ef9669d526)\n+error: demangling(basic::main::h81759b0695851718)\n   --> $DIR/basic.rs:7:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "b27df10e7503b6ae1bfc11e4c314bb3c466273cd", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5impl13foo3Foo3bar17he53b9bee7600ed8dE)\n+error: symbol-name(_ZN5impl13foo3Foo3bar17h92cf46db76791039E)\n   --> $DIR/impl1.rs:13:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::foo::Foo::bar::he53b9bee7600ed8d)\n+error: demangling(impl1::foo::Foo::bar::h92cf46db76791039)\n   --> $DIR/impl1.rs:13:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -22,13 +22,13 @@ error: def-path(foo::Foo::bar)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h86c41f0462d901d4E)\n+error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h90c4a800b1aa0df0E)\n   --> $DIR/impl1.rs:31:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::h86c41f0462d901d4)\n+error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::h90c4a800b1aa0df0)\n   --> $DIR/impl1.rs:31:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -46,13 +46,13 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h636bc933fc62ee2fE)\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h61b0fcb05ebeeb79E)\n   --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h636bc933fc62ee2f)\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h61b0fcb05ebeeb79)\n   --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "19d9740fb16bef46f6ec13c9d6c5c84f2d2efb8a", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h059a991a004536adE)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17hc86312d25b60f6eeE)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h059a991a004536ad)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::hc86312d25b60f6ee)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "15d15f2f40d98395e8f7e348c33a29651e8cf36f", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-Self-issue-58006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,4 +1,4 @@\n-error[E0533]: expected unit struct, unit variant or constant, found tuple variant `<Self>::A`\n+error[E0533]: expected unit struct, unit variant or constant, found tuple variant `Self::A`\n   --> $DIR/incorrect-variant-form-through-Self-issue-58006.rs:8:13\n    |\n LL |             Self::A => (),"}, {"sha": "5772450477c1b098a8f98e5f9e78f2e9dc141bce", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -8,14 +8,14 @@ type Alias = Enum;\n \n fn main() {\n     Alias::Braced;\n-    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced` [E0533]\n+    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `Alias::Braced` [E0533]\n     let Alias::Braced = panic!();\n-    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced` [E0533]\n+    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `Alias::Braced` [E0533]\n     let Alias::Braced(..) = panic!();\n-    //~^ ERROR expected tuple struct or tuple variant, found struct variant `<Alias>::Braced` [E0164]\n+    //~^ ERROR expected tuple struct or tuple variant, found struct variant `Alias::Braced` [E0164]\n \n     Alias::Unit();\n-    //~^ ERROR expected function, found enum variant `<Alias>::Unit`\n+    //~^ ERROR expected function, found enum variant `Alias::Unit`\n     let Alias::Unit() = panic!();\n-    //~^ ERROR expected tuple struct or tuple variant, found unit variant `<Alias>::Unit` [E0164]\n+    //~^ ERROR expected tuple struct or tuple variant, found unit variant `Alias::Unit` [E0164]\n }"}, {"sha": "b0de3ee42e339e923083dbe84c02e4949cbfe363", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -1,38 +1,38 @@\n-error[E0533]: expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced`\n+error[E0533]: expected unit struct, unit variant or constant, found struct variant `Alias::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:10:5\n    |\n LL |     Alias::Braced;\n    |     ^^^^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced`\n+error[E0533]: expected unit struct, unit variant or constant, found struct variant `Alias::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:12:9\n    |\n LL |     let Alias::Braced = panic!();\n    |         ^^^^^^^^^^^^^\n \n-error[E0164]: expected tuple struct or tuple variant, found struct variant `<Alias>::Braced`\n+error[E0164]: expected tuple struct or tuple variant, found struct variant `Alias::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:14:9\n    |\n LL |     let Alias::Braced(..) = panic!();\n    |         ^^^^^^^^^^^^^^^^^ not a tuple variant or struct\n \n-error[E0618]: expected function, found enum variant `<Alias>::Unit`\n+error[E0618]: expected function, found enum variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:17:5\n    |\n LL | enum Enum { Braced {}, Unit, Tuple() }\n-   |                        ---- `<Alias>::Unit` defined here\n+   |                        ---- `Alias::Unit` defined here\n ...\n LL |     Alias::Unit();\n    |     ^^^^^^^^^^^--\n    |     |\n    |     call expression requires function\n    |\n-help: `<Alias>::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `Alias::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n-LL |     <Alias>::Unit;\n-   |     ^^^^^^^^^^^^^\n+LL |     Alias::Unit;\n+   |     ^^^^^^^^^^^\n \n-error[E0164]: expected tuple struct or tuple variant, found unit variant `<Alias>::Unit`\n+error[E0164]: expected tuple struct or tuple variant, found unit variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:19:9\n    |\n LL |     let Alias::Unit() = panic!();"}, {"sha": "a54826787da46e2bc9b951e1d8ec5c87168f6778", "filename": "src/test/ui/typeck/typeck-default-trait-impl-cross-crate-coherence.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd4e7320e620dc9a59423c55a7db3520ba8b553/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr?ref=2dd4e7320e620dc9a59423c55a7db3520ba8b553", "patch": "@@ -2,18 +2,22 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:13:1\n    |\n LL | impl DefaultedTrait for (A,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^----\n+   | |                       |\n+   | |                       this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:16:1\n    |\n LL | impl !DefaultedTrait for (B,) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^----\n+   | |                        |\n+   | |                        this is not defined in the current crate because tuples are always foreign\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `lib::DefaultedTrait`, can only be implemented for a struct/enum type defined in the current crate\n@@ -26,9 +30,11 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:21:1\n    |\n LL | impl DefaultedTrait for lib::Something<C> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^-----------------\n+   | |                       |\n+   | |                       `lib::Something` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-   = note: the impl does not reference only types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error: aborting due to 4 previous errors"}]}