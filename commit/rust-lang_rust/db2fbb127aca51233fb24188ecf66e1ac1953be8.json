{"sha": "db2fbb127aca51233fb24188ecf66e1ac1953be8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMmZiYjEyN2FjYTUxMjMzZmIyNDE4OGVjZjY2ZTFhYzE5NTNiZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-17T13:57:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-17T13:57:01Z"}, "message": "Auto merge of #5181 - daxpedda:future-missing-errors-doc, r=flip1995\n\nExpand `missing_errors_doc` to also work on async functions\n\nThis adds the `missing_errors_doc` lint to async functions.\n\nchangelog: Make [`missing_errors_doc`] lint also trigger on `async` functions", "tree": {"sha": "9c4f8be25f6c1f8b381532caf63756e7defc77c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4f8be25f6c1f8b381532caf63756e7defc77c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db2fbb127aca51233fb24188ecf66e1ac1953be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db2fbb127aca51233fb24188ecf66e1ac1953be8", "html_url": "https://github.com/rust-lang/rust/commit/db2fbb127aca51233fb24188ecf66e1ac1953be8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db2fbb127aca51233fb24188ecf66e1ac1953be8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b91ae16eb1ab03b996de5ffc44db054244c1d2f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b91ae16eb1ab03b996de5ffc44db054244c1d2f6", "html_url": "https://github.com/rust-lang/rust/commit/b91ae16eb1ab03b996de5ffc44db054244c1d2f6"}, {"sha": "ea5ac40a24dfac8e2b9834234d014872104e8444", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5ac40a24dfac8e2b9834234d014872104e8444", "html_url": "https://github.com/rust-lang/rust/commit/ea5ac40a24dfac8e2b9834234d014872104e8444"}], "stats": {"total": 122, "additions": 105, "deletions": 17}, "files": [{"sha": "4a7d2a8b640e08ef172edefda68b1e290121a6d2", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/db2fbb127aca51233fb24188ecf66e1ac1953be8/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2fbb127aca51233fb24188ecf66e1ac1953be8/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=db2fbb127aca51233fb24188ecf66e1ac1953be8", "patch": "@@ -1,6 +1,8 @@\n-use crate::utils::{is_entrypoint_fn, match_type, paths, return_ty, span_lint};\n+use crate::utils::{get_trait_def_id, implements_trait, is_entrypoint_fn, match_type, paths, return_ty, span_lint};\n+use if_chain::if_chain;\n use itertools::Itertools;\n use rustc::lint::in_external_macro;\n+use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -152,11 +154,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         match item.kind {\n-            hir::ItemKind::Fn(ref sig, ..) => {\n+            hir::ItemKind::Fn(ref sig, _, body_id) => {\n                 if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id))\n                     || in_external_macro(cx.tcx.sess, item.span))\n                 {\n-                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n                 }\n             },\n             hir::ItemKind::Impl {\n@@ -179,7 +181,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Method(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None);\n             }\n         }\n     }\n@@ -189,8 +191,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         if self.in_trait_impl || in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n-        if let hir::ImplItemKind::Method(ref sig, ..) = item.kind {\n-            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+        if let hir::ImplItemKind::Method(ref sig, body_id) = item.kind {\n+            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n         }\n     }\n }\n@@ -201,6 +203,7 @@ fn lint_for_missing_headers<'a, 'tcx>(\n     span: impl Into<MultiSpan> + Copy,\n     sig: &hir::FnSig<'_>,\n     headers: DocHeaders,\n+    body_id: Option<hir::BodyId>,\n ) {\n     if !cx.access_levels.is_exported(hir_id) {\n         return; // Private functions do not require doc comments\n@@ -213,13 +216,36 @@ fn lint_for_missing_headers<'a, 'tcx>(\n             \"unsafe function's docs miss `# Safety` section\",\n         );\n     }\n-    if !headers.errors && match_type(cx, return_ty(cx, hir_id), &paths::RESULT) {\n-        span_lint(\n-            cx,\n-            MISSING_ERRORS_DOC,\n-            span,\n-            \"docs for function returning `Result` missing `# Errors` section\",\n-        );\n+    if !headers.errors {\n+        if match_type(cx, return_ty(cx, hir_id), &paths::RESULT) {\n+            span_lint(\n+                cx,\n+                MISSING_ERRORS_DOC,\n+                span,\n+                \"docs for function returning `Result` missing `# Errors` section\",\n+            );\n+        } else {\n+            if_chain! {\n+                if let Some(body_id) = body_id;\n+                if let Some(future) = get_trait_def_id(cx, &paths::FUTURE);\n+                let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n+                let mir = cx.tcx.optimized_mir(def_id);\n+                let ret_ty = mir.return_ty();\n+                if implements_trait(cx, ret_ty, future, &[]);\n+                if let ty::Opaque(_, subs) = ret_ty.kind;\n+                if let Some(gen) = subs.types().next();\n+                if let ty::Generator(_, subs, _) = gen.kind;\n+                if match_type(cx, subs.as_generator().return_ty(def_id, cx.tcx), &paths::RESULT);\n+                then {\n+                    span_lint(\n+                        cx,\n+                        MISSING_ERRORS_DOC,\n+                        span,\n+                        \"docs for function returning `Result` missing `# Errors` section\",\n+                    );\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "96337e42b544c8c7923f20a493c19e6dea9f8a10", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db2fbb127aca51233fb24188ecf66e1ac1953be8/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2fbb127aca51233fb24188ecf66e1ac1953be8/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=db2fbb127aca51233fb24188ecf66e1ac1953be8", "patch": "@@ -36,6 +36,7 @@ pub const FMT_ARGUMENTS_NEW_V1_FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\n pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n+pub const FUTURE: [&str; 3] = [\"std\", \"future\", \"Future\"];\n pub const HASH: [&str; 2] = [\"hash\", \"Hash\"];\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];"}, {"sha": "1401a658e0370f30f5afd9f20ae66c4a6de73a3d", "filename": "tests/ui/doc_errors.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/db2fbb127aca51233fb24188ecf66e1ac1953be8/tests%2Fui%2Fdoc_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2fbb127aca51233fb24188ecf66e1ac1953be8/tests%2Fui%2Fdoc_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.rs?ref=db2fbb127aca51233fb24188ecf66e1ac1953be8", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: --edition 2018\n #![warn(clippy::missing_errors_doc)]\n \n use std::io;\n@@ -6,22 +7,42 @@ pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n     unimplemented!();\n }\n \n+pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {\n+    unimplemented!();\n+}\n+\n /// This is not sufficiently documented.\n pub fn pub_fn_returning_io_result() -> io::Result<()> {\n     unimplemented!();\n }\n \n+/// This is not sufficiently documented.\n+pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {\n+    unimplemented!();\n+}\n+\n /// # Errors\n /// A description of the errors goes here.\n pub fn pub_fn_with_errors_header() -> Result<(), ()> {\n     unimplemented!();\n }\n \n+/// # Errors\n+/// A description of the errors goes here.\n+pub async fn async_pub_fn_with_errors_header() -> Result<(), ()> {\n+    unimplemented!();\n+}\n+\n /// This function doesn't require the documentation because it is private\n fn priv_fn_missing_errors_header() -> Result<(), ()> {\n     unimplemented!();\n }\n \n+/// This function doesn't require the documentation because it is private\n+async fn async_priv_fn_missing_errors_header() -> Result<(), ()> {\n+    unimplemented!();\n+}\n+\n pub struct Struct1;\n \n impl Struct1 {\n@@ -30,16 +51,32 @@ impl Struct1 {\n         unimplemented!();\n     }\n \n+    /// This is not sufficiently documented.\n+    pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n+\n     /// # Errors\n     /// A description of the errors goes here.\n     pub fn pub_method_with_errors_header() -> Result<(), ()> {\n         unimplemented!();\n     }\n \n+    /// # Errors\n+    /// A description of the errors goes here.\n+    pub async fn async_pub_method_with_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n+\n     /// This function doesn't require the documentation because it is private.\n     fn priv_method_missing_errors_header() -> Result<(), ()> {\n         unimplemented!();\n     }\n+\n+    /// This function doesn't require the documentation because it is private.\n+    async fn async_priv_method_missing_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n }\n \n pub trait Trait1 {"}, {"sha": "f44d6693d303b699a3c17c6821de9b7f2405a973", "filename": "tests/ui/doc_errors.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/db2fbb127aca51233fb24188ecf66e1ac1953be8/tests%2Fui%2Fdoc_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db2fbb127aca51233fb24188ecf66e1ac1953be8/tests%2Fui%2Fdoc_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.stderr?ref=db2fbb127aca51233fb24188ecf66e1ac1953be8", "patch": "@@ -1,5 +1,5 @@\n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:5:1\n+  --> $DIR/doc_errors.rs:6:1\n    |\n LL | / pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n@@ -11,24 +11,48 @@ LL | | }\n error: docs for function returning `Result` missing `# Errors` section\n   --> $DIR/doc_errors.rs:10:1\n    |\n+LL | / pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {\n+LL | |     unimplemented!();\n+LL | | }\n+   | |_^\n+\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:15:1\n+   |\n LL | / pub fn pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:29:5\n+  --> $DIR/doc_errors.rs:20:1\n+   |\n+LL | / pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {\n+LL | |     unimplemented!();\n+LL | | }\n+   | |_^\n+\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:50:5\n    |\n LL | /     pub fn pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:47:5\n+  --> $DIR/doc_errors.rs:55:5\n+   |\n+LL | /     pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {\n+LL | |         unimplemented!();\n+LL | |     }\n+   | |_____^\n+\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:84:5\n    |\n LL |     fn trait_method_missing_errors_header() -> Result<(), ()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 7 previous errors\n "}]}