{"sha": "2a02c4d9cbee120915535f6fc8379849e10e8373", "node_id": "C_kwDOAAsO6NoAKDJhMDJjNGQ5Y2JlZTEyMDkxNTUzNWY2ZmM4Mzc5ODQ5ZTEwZTgzNzM", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-03-13T19:57:06Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-03-13T19:57:06Z"}, "message": "Create SimdFloat trait", "tree": {"sha": "766429528335276bf38dcb9a94b7f785f877ea80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/766429528335276bf38dcb9a94b7f785f877ea80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a02c4d9cbee120915535f6fc8379849e10e8373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a02c4d9cbee120915535f6fc8379849e10e8373", "html_url": "https://github.com/rust-lang/rust/commit/2a02c4d9cbee120915535f6fc8379849e10e8373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a02c4d9cbee120915535f6fc8379849e10e8373/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80469c66d650735a0520ae471c5fe5ebaf8971b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/80469c66d650735a0520ae471c5fe5ebaf8971b5", "html_url": "https://github.com/rust-lang/rust/commit/80469c66d650735a0520ae471c5fe5ebaf8971b5"}], "stats": {"total": 109, "additions": 73, "deletions": 36}, "files": [{"sha": "f422d1611785e31e7cf92e1153156578818081d1", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 70, "deletions": 36, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/2a02c4d9cbee120915535f6fc8379849e10e8373/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a02c4d9cbee120915535f6fc8379849e10e8373/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=2a02c4d9cbee120915535f6fc8379849e10e8373", "patch": "@@ -134,42 +134,6 @@ macro_rules! impl_float_vector {\n                 let magnitude = self.to_bits() & !Self::splat(-0.).to_bits();\n                 Self::from_bits(sign_bit | magnitude)\n             }\n-\n-            /// Returns the minimum of each lane.\n-            ///\n-            /// If one of the values is `NAN`, then the other value is returned.\n-            #[inline]\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            pub fn simd_min(self, other: Self) -> Self {\n-                unsafe { intrinsics::simd_fmin(self, other) }\n-            }\n-\n-            /// Returns the maximum of each lane.\n-            ///\n-            /// If one of the values is `NAN`, then the other value is returned.\n-            #[inline]\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            pub fn simd_max(self, other: Self) -> Self {\n-                unsafe { intrinsics::simd_fmax(self, other) }\n-            }\n-\n-            /// Restrict each lane to a certain interval unless it is NaN.\n-            ///\n-            /// For each lane in `self`, returns the corresponding lane in `max` if the lane is\n-            /// greater than `max`, and the corresponding lane in `min` if the lane is less\n-            /// than `min`.  Otherwise returns the lane in `self`.\n-            #[inline]\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            pub fn simd_clamp(self, min: Self, max: Self) -> Self {\n-                assert!(\n-                    min.simd_le(max).all(),\n-                    \"each lane in `min` must be less than or equal to the corresponding lane in `max`\",\n-                );\n-                let mut x = self;\n-                x = x.simd_lt(min).select(min, x);\n-                x = x.simd_gt(max).select(max, x);\n-                x\n-            }\n         }\n     };\n }\n@@ -197,3 +161,73 @@ pub type f64x4 = Simd<f64, 4>;\n \n /// Vector of eight `f64` values\n pub type f64x8 = Simd<f64, 8>;\n+\n+mod sealed {\n+    pub trait Sealed {}\n+}\n+use sealed::Sealed;\n+\n+/// SIMD operations on vectors of floating point numbers.\n+pub trait SimdFloat: Sized + Sealed {\n+    /// Returns the minimum of each lane.\n+    ///\n+    /// If one of the values is `NAN`, then the other value is returned.\n+    #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+    fn simd_min(self, other: Self) -> Self;\n+\n+    /// Returns the maximum of each lane.\n+    ///\n+    /// If one of the values is `NAN`, then the other value is returned.\n+    #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+    fn simd_max(self, other: Self) -> Self;\n+\n+    /// Restrict each lane to a certain interval unless it is NaN.\n+    ///\n+    /// For each lane in `self`, returns the corresponding lane in `max` if the lane is\n+    /// greater than `max`, and the corresponding lane in `min` if the lane is less\n+    /// than `min`.  Otherwise returns the lane in `self`.\n+    #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+    fn simd_clamp(self, min: Self, max: Self) -> Self;\n+}\n+\n+macro_rules! impl_simd_float {\n+    { $($float:ty),* } => {\n+        $(\n+        impl <const LANES: usize> Sealed for Simd<$float, LANES>\n+        where\n+            LaneCount<LANES>: SupportedLaneCount,\n+        {\n+        }\n+\n+        impl <const LANES: usize> SimdFloat for Simd<$float, LANES>\n+        where\n+            LaneCount<LANES>: SupportedLaneCount,\n+        {\n+            #[inline]\n+            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+            fn simd_min(self, other: Self) -> Self {\n+                unsafe { intrinsics::simd_fmin(self, other) }\n+            }\n+\n+            #[inline]\n+            fn simd_max(self, other: Self) -> Self {\n+                unsafe { intrinsics::simd_fmax(self, other) }\n+            }\n+\n+            #[inline]\n+            fn simd_clamp(self, min: Self, max: Self) -> Self {\n+                assert!(\n+                    min.simd_le(max).all(),\n+                    \"each lane in `min` must be less than or equal to the corresponding lane in `max`\",\n+                );\n+                let mut x = self;\n+                x = x.simd_lt(min).select(min, x);\n+                x = x.simd_gt(max).select(max, x);\n+                x\n+            }\n+        }\n+        )*\n+    }\n+}\n+\n+impl_simd_float! { f32, f64 }"}, {"sha": "47fe49b098285586027f5edf10a195668fd2ad8e", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a02c4d9cbee120915535f6fc8379849e10e8373/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a02c4d9cbee120915535f6fc8379849e10e8373/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=2a02c4d9cbee120915535f6fc8379849e10e8373", "patch": "@@ -462,6 +462,7 @@ macro_rules! impl_float_tests {\n                 }\n \n                 fn simd_min<const LANES: usize>() {\n+                    use core_simd::simd::SimdFloat;\n                     // Regular conditions (both values aren't zero)\n                     test_helpers::test_binary_elementwise(\n                         &Vector::<LANES>::simd_min,\n@@ -485,6 +486,7 @@ macro_rules! impl_float_tests {\n                 }\n \n                 fn simd_max<const LANES: usize>() {\n+                    use core_simd::simd::SimdFloat;\n                     // Regular conditions (both values aren't zero)\n                     test_helpers::test_binary_elementwise(\n                         &Vector::<LANES>::simd_max,\n@@ -508,6 +510,7 @@ macro_rules! impl_float_tests {\n                 }\n \n                 fn simd_clamp<const LANES: usize>() {\n+                    use core_simd::simd::SimdFloat;\n                     test_helpers::test_3(&|value: [Scalar; LANES], mut min: [Scalar; LANES], mut max: [Scalar; LANES]| {\n                         for (min, max) in min.iter_mut().zip(max.iter_mut()) {\n                             if max < min {"}]}