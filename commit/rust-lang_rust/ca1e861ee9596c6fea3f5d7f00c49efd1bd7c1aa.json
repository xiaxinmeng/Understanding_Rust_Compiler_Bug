{"sha": "ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa", "node_id": "C_kwDOAAsO6NoAKGNhMWU4NjFlZTk1OTZjNmZlYTNmNWQ3ZjAwYzQ5ZWZkMWJkN2MxYWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-27T19:49:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-27T19:49:21Z"}, "message": "Auto merge of #2741 - RalfJung:filenames, r=RalfJung\n\ncargo-miri: use rustc to determine the output filename\n\nThis should fix https://github.com/rust-lang/miri/issues/2740 and fix https://github.com/rust-lang/miri/issues/1867: we no longer need to hard-code the file name logic in cargo-miri.", "tree": {"sha": "2d6dfa10d05d3ed279417e58a3a0fdb7a9bda164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6dfa10d05d3ed279417e58a3a0fdb7a9bda164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa", "html_url": "https://github.com/rust-lang/rust/commit/ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b48d450d2ca02bac2d475129400c569baff98a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b48d450d2ca02bac2d475129400c569baff98a", "html_url": "https://github.com/rust-lang/rust/commit/d8b48d450d2ca02bac2d475129400c569baff98a"}, {"sha": "d31029226bbeb519f734c706cafec50be48c9d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/d31029226bbeb519f734c706cafec50be48c9d31", "html_url": "https://github.com/rust-lang/rust/commit/d31029226bbeb519f734c706cafec50be48c9d31"}], "stats": {"total": 106, "additions": 66, "deletions": 40}, "files": [{"sha": "2a469d324e88adb19ca11aa34580e18b9e23db88", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 66, "deletions": 40, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=ca1e861ee9596c6fea3f5d7f00c49efd1bd7c1aa", "patch": "@@ -236,22 +236,44 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n         is_bin || is_test\n     }\n \n-    fn out_filename(prefix: &str, suffix: &str) -> PathBuf {\n-        if let Some(out_dir) = get_arg_flag_value(\"--out-dir\") {\n-            let mut path = PathBuf::from(out_dir);\n-            path.push(format!(\n-                \"{}{}{}{}\",\n-                prefix,\n-                get_arg_flag_value(\"--crate-name\").unwrap(),\n-                // This is technically a `-C` flag but the prefix seems unique enough...\n-                // (and cargo passes this before the filename so it should be unique)\n-                get_arg_flag_value(\"extra-filename\").unwrap_or_default(),\n-                suffix,\n-            ));\n-            path\n+    fn out_filenames() -> Vec<PathBuf> {\n+        if let Some(out_file) = get_arg_flag_value(\"-o\") {\n+            // `-o` has precedence over `--out-dir`.\n+            vec![PathBuf::from(out_file)]\n         } else {\n-            let out_file = get_arg_flag_value(\"-o\").unwrap();\n-            PathBuf::from(out_file)\n+            let out_dir = get_arg_flag_value(\"--out-dir\").unwrap_or_default();\n+            let path = PathBuf::from(out_dir);\n+            // Ask rustc for the filename (since that is target-dependent).\n+            let mut rustc = miri_for_host(); // sysroot doesn't matter for this so we just use the host\n+            rustc.arg(\"--print\").arg(\"file-names\");\n+            for flag in [\"--crate-name\", \"--crate-type\", \"--target\"] {\n+                for val in get_arg_flag_values(flag) {\n+                    rustc.arg(flag).arg(val);\n+                }\n+            }\n+            // This is technically passed as `-C extra-filename=...`, but the prefix seems unique\n+            // enough... (and cargo passes this before the filename so it should be unique)\n+            if let Some(extra) = get_arg_flag_value(\"extra-filename\") {\n+                rustc.arg(\"-C\").arg(format!(\"extra-filename={extra}\"));\n+            }\n+            rustc.arg(\"-\");\n+\n+            let output = rustc.output().expect(\"cannot run rustc to determine file name\");\n+            assert!(\n+                output.status.success(),\n+                \"rustc failed when determining file name:\\n{output:?}\"\n+            );\n+            let output =\n+                String::from_utf8(output.stdout).expect(\"rustc returned non-UTF-8 filename\");\n+            output\n+                .lines()\n+                .filter(|l| !l.is_empty())\n+                .map(|l| {\n+                    let mut p = path.clone();\n+                    p.push(l);\n+                    p\n+                })\n+                .collect()\n         }\n     }\n \n@@ -267,24 +289,28 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n     let info_query = get_arg_flag_value(\"--print\").is_some() || has_arg_flag(\"-vV\");\n \n     let store_json = |info: CrateRunInfo| {\n-        // Create a stub .d file to stop Cargo from \"rebuilding\" the crate:\n-        // https://github.com/rust-lang/miri/issues/1724#issuecomment-787115693\n-        // As we store a JSON file instead of building the crate here, an empty file is fine.\n-        let dep_info_name = out_filename(\"\", \".d\");\n-        if verbose > 0 {\n-            eprintln!(\"[cargo-miri rustc] writing stub dep-info to `{}`\", dep_info_name.display());\n+        if get_arg_flag_value(\"--emit\").unwrap_or_default().split(',').any(|e| e == \"dep-info\") {\n+            // Create a stub .d file to stop Cargo from \"rebuilding\" the crate:\n+            // https://github.com/rust-lang/miri/issues/1724#issuecomment-787115693\n+            // As we store a JSON file instead of building the crate here, an empty file is fine.\n+            let dep_info_name = format!(\n+                \"{}/{}{}.d\",\n+                get_arg_flag_value(\"--out-dir\").unwrap(),\n+                get_arg_flag_value(\"--crate-name\").unwrap(),\n+                get_arg_flag_value(\"extra-filename\").unwrap_or_default(),\n+            );\n+            if verbose > 0 {\n+                eprintln!(\"[cargo-miri rustc] writing stub dep-info to `{dep_info_name}`\");\n+            }\n+            File::create(dep_info_name).expect(\"failed to create fake .d file\");\n         }\n-        File::create(dep_info_name).expect(\"failed to create fake .d file\");\n \n-        let filename = out_filename(\"\", \"\");\n-        if verbose > 0 {\n-            eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());\n+        for filename in out_filenames() {\n+            if verbose > 0 {\n+                eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());\n+            }\n+            info.store(&filename);\n         }\n-        info.store(&filename);\n-        // For Windows and WASM, do the same thing again with `.exe`/`.wasm` appended to the filename.\n-        // (Need to do this here as cargo moves that \"binary\" to a different place before running it.)\n-        info.store(&out_filename(\"\", \".exe\"));\n-        info.store(&out_filename(\"\", \".wasm\"));\n     };\n \n     let runnable_crate = !info_query && is_runnable_crate();\n@@ -323,11 +349,14 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n \n             // Alter the `-o` parameter so that it does not overwrite the JSON file we stored above.\n             let mut args = env.args;\n+            let mut out_filename = None;\n             for i in 0..args.len() {\n                 if args[i] == \"-o\" {\n+                    out_filename = Some(args[i + 1].clone());\n                     args[i + 1].push_str(\".miri\");\n                 }\n             }\n+            let out_filename = out_filename.expect(\"rustdoc must pass `-o`\");\n \n             cmd.args(&args);\n             cmd.env(\"MIRI_BE_RUSTC\", \"target\");\n@@ -340,7 +369,7 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n                 eprintln!(\"[cargo-miri rustc inside rustdoc] going to run:\\n{cmd:?}\");\n             }\n \n-            exec_with_pipe(cmd, &env.stdin, format!(\"{}.stdin\", out_filename(\"\", \"\").display()));\n+            exec_with_pipe(cmd, &env.stdin, format!(\"{out_filename}.stdin\"));\n         }\n \n         return;\n@@ -422,15 +451,12 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n     // Create a stub .rlib file if \"link\" was requested by cargo.\n     // This is necessary to prevent cargo from doing rebuilds all the time.\n     if emit_link_hack {\n-        // Some platforms prepend \"lib\", some do not... let's just create both files.\n-        File::create(out_filename(\"lib\", \".rlib\")).expect(\"failed to create fake .rlib file\");\n-        File::create(out_filename(\"\", \".rlib\")).expect(\"failed to create fake .rlib file\");\n-        // Just in case this is a cdylib or staticlib, also create those fake files.\n-        File::create(out_filename(\"lib\", \".so\")).expect(\"failed to create fake .so file\");\n-        File::create(out_filename(\"lib\", \".a\")).expect(\"failed to create fake .a file\");\n-        File::create(out_filename(\"lib\", \".dylib\")).expect(\"failed to create fake .dylib file\");\n-        File::create(out_filename(\"\", \".dll\")).expect(\"failed to create fake .dll file\");\n-        File::create(out_filename(\"\", \".lib\")).expect(\"failed to create fake .lib file\");\n+        for filename in out_filenames() {\n+            if verbose > 0 {\n+                eprintln!(\"[cargo-miri rustc] creating fake lib file at `{}`\", filename.display());\n+            }\n+            File::create(filename).expect(\"failed to create fake lib file\");\n+        }\n     }\n \n     debug_cmd(\"[cargo-miri rustc]\", verbose, &cmd);"}]}