{"sha": "e9db3e781760a5fafd125259a21b63bcf734af07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZGIzZTc4MTc2MGE1ZmFmZDEyNTI1OWEyMWI2M2JjZjczNGFmMDc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-20T15:29:05Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-20T15:29:05Z"}, "message": "Avoid u/i*::{min.max}_value()\n\nThey will be deprecated in the future", "tree": {"sha": "c38af2efccf4688fbb2f4b370c2a7339e18f0c99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38af2efccf4688fbb2f4b370c2a7339e18f0c99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9db3e781760a5fafd125259a21b63bcf734af07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9db3e781760a5fafd125259a21b63bcf734af07", "html_url": "https://github.com/rust-lang/rust/commit/e9db3e781760a5fafd125259a21b63bcf734af07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9db3e781760a5fafd125259a21b63bcf734af07/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59479bd37583b93941aa3dda2576a833cd83917", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59479bd37583b93941aa3dda2576a833cd83917", "html_url": "https://github.com/rust-lang/rust/commit/a59479bd37583b93941aa3dda2576a833cd83917"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "f1bdb49b74ad6009e4b736bcc6eeacedeadd281d", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9db3e781760a5fafd125259a21b63bcf734af07/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db3e781760a5fafd125259a21b63bcf734af07/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=e9db3e781760a5fafd125259a21b63bcf734af07", "patch": "@@ -108,7 +108,7 @@ pub fn maybe_codegen<'tcx>(\n                     }\n                     (BinOp::Shr, true) => {\n                         let sign = fx.bcx.ins().icmp_imm(IntCC::SignedLessThan, lhs_msb, 0);\n-                        let all_ones = fx.bcx.ins().iconst(types::I64, u64::max_value() as i64);\n+                        let all_ones = fx.bcx.ins().iconst(types::I64, u64::MAX as i64);\n                         let all_sign_bits = fx.bcx.ins().select(sign, all_zeros, all_ones);\n \n                         let val = fx.bcx.ins().iconcat(lhs_msb, all_sign_bits);"}, {"sha": "f0cc8dd4db7f6f195f4203ac91bda98014ef53be", "filename": "src/common.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9db3e781760a5fafd125259a21b63bcf734af07/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db3e781760a5fafd125259a21b63bcf734af07/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=e9db3e781760a5fafd125259a21b63bcf734af07", "patch": "@@ -221,23 +221,23 @@ pub fn type_min_max_value(ty: Type, signed: bool) -> (i64, i64) {\n         (types::I8, false) | (types::I16, false) | (types::I32, false) | (types::I64, false) => {\n             0i64\n         }\n-        (types::I8, true) => i8::min_value() as i64,\n-        (types::I16, true) => i16::min_value() as i64,\n-        (types::I32, true) => i32::min_value() as i64,\n-        (types::I64, true) => i64::min_value(),\n+        (types::I8, true) => i8::MIN as i64,\n+        (types::I16, true) => i16::MIN as i64,\n+        (types::I32, true) => i32::MIN as i64,\n+        (types::I64, true) => i64::MIN,\n         (types::I128, _) => unimplemented!(),\n         _ => unreachable!(),\n     };\n \n     let max = match (ty, signed) {\n-        (types::I8, false) => u8::max_value() as i64,\n-        (types::I16, false) => u16::max_value() as i64,\n-        (types::I32, false) => u32::max_value() as i64,\n-        (types::I64, false) => u64::max_value() as i64,\n-        (types::I8, true) => i8::max_value() as i64,\n-        (types::I16, true) => i16::max_value() as i64,\n-        (types::I32, true) => i32::max_value() as i64,\n-        (types::I64, true) => i64::max_value(),\n+        (types::I8, false) => u8::MAX as i64,\n+        (types::I16, false) => u16::MAX as i64,\n+        (types::I32, false) => u32::MAX as i64,\n+        (types::I64, false) => u64::MAX as i64,\n+        (types::I8, true) => i8::MAX as i64,\n+        (types::I16, true) => i16::MAX as i64,\n+        (types::I32, true) => i32::MAX as i64,\n+        (types::I64, true) => i64::MAX,\n         (types::I128, _) => unimplemented!(),\n         _ => unreachable!(),\n     };"}, {"sha": "82d2d9fd8b36b4a7d8c5c06770d4611e425e3a8f", "filename": "src/discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9db3e781760a5fafd125259a21b63bcf734af07/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db3e781760a5fafd125259a21b63bcf734af07/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=e9db3e781760a5fafd125259a21b63bcf734af07", "patch": "@@ -119,7 +119,7 @@ pub fn codegen_get_discriminant<'tcx>(\n             let relative_discr = if niche_start == 0 {\n                 encoded_discr\n             } else {\n-                // FIXME handle niche_start > i64::max_value()\n+                // FIXME handle niche_start > i64::MAX\n                 fx.bcx\n                     .ins()\n                     .iadd_imm(encoded_discr, -i64::try_from(niche_start).unwrap())"}, {"sha": "24dd7b07d222ed29be2fdc1eac86b4507ba65192", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9db3e781760a5fafd125259a21b63bcf734af07/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db3e781760a5fafd125259a21b63bcf734af07/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=e9db3e781760a5fafd125259a21b63bcf734af07", "patch": "@@ -227,7 +227,7 @@ fn bool_to_zero_or_max_uint<'tcx>(\n     let max = fx\n         .bcx\n         .ins()\n-        .iconst(int_ty, (u64::max_value() >> (64 - int_ty.bits())) as i64);\n+        .iconst(int_ty, (u64::MAX >> (64 - int_ty.bits())) as i64);\n     let mut res = fx.bcx.ins().select(val, max, zero);\n \n     if ty.is_float() {"}]}