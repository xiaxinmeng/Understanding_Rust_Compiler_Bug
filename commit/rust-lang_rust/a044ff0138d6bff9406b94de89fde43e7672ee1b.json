{"sha": "a044ff0138d6bff9406b94de89fde43e7672ee1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNDRmZjAxMzhkNmJmZjk0MDZiOTRkZTg5ZmRlNDNlNzY3MmVlMWI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-07-30T15:07:13Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-16T14:22:51Z"}, "message": "Mark mutating functions with `mutable` modifier, and owning functions with `consuming`.", "tree": {"sha": "c90b7a41f15d86b6bf7b6bd4fd4c9c8496197ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c90b7a41f15d86b6bf7b6bd4fd4c9c8496197ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a044ff0138d6bff9406b94de89fde43e7672ee1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a044ff0138d6bff9406b94de89fde43e7672ee1b", "html_url": "https://github.com/rust-lang/rust/commit/a044ff0138d6bff9406b94de89fde43e7672ee1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a044ff0138d6bff9406b94de89fde43e7672ee1b/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7009d5ee2bff53b9beb555b1572c97ab3882cd98", "url": "https://api.github.com/repos/rust-lang/rust/commits/7009d5ee2bff53b9beb555b1572c97ab3882cd98", "html_url": "https://github.com/rust-lang/rust/commit/7009d5ee2bff53b9beb555b1572c97ab3882cd98"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "31d5276b0f596997187d5d3406f3abc9597511b9", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=a044ff0138d6bff9406b94de89fde43e7672ee1b", "patch": "@@ -670,6 +670,21 @@ impl Function {\n         db.function_data(self.id).has_self_param\n     }\n \n+    pub fn mutability_of_self_param(self, db: &dyn HirDatabase) -> Option<Mutability> {\n+        let func_data = db.function_data(self.id);\n+        if !func_data.has_self_param {\n+            return None;\n+        }\n+\n+        func_data.params.first().and_then(|param| {\n+            if let TypeRef::Reference(_, mutability) = param {\n+                Some(*mutability)\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+\n     pub fn params(self, db: &dyn HirDatabase) -> Vec<TypeRef> {\n         db.function_data(self.id).params.clone()\n     }"}, {"sha": "9f23315c3fddead27c1e7436b9b7f10ff1cac016", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=a044ff0138d6bff9406b94de89fde43e7672ee1b", "patch": "@@ -267,7 +267,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.assert_contains_node(node)\n     }\n \n-    pub fn is_unsafe_method_call(&self, method_call_expr: ast::MethodCallExpr) -> bool {\n+    pub fn is_unsafe_method_call(&self, method_call_expr: &ast::MethodCallExpr) -> bool {\n         self.imp.is_unsafe_method_call(method_call_expr)\n     }\n \n@@ -571,7 +571,7 @@ impl<'db> SemanticsImpl<'db> {\n         InFile::new(file_id, node)\n     }\n \n-    pub fn is_unsafe_method_call(&self, method_call_expr: ast::MethodCallExpr) -> bool {\n+    pub fn is_unsafe_method_call(&self, method_call_expr: &ast::MethodCallExpr) -> bool {\n         method_call_expr\n             .expr()\n             .and_then(|expr| {"}, {"sha": "15a78a6142b45ffc1f1d34077054441f0b754c15", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=a044ff0138d6bff9406b94de89fde43e7672ee1b", "patch": "@@ -4,7 +4,7 @@ mod injection;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Name, Semantics, VariantDef};\n+use hir::{Mutability, Name, Semantics, VariantDef};\n use ide_db::{\n     defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -729,13 +729,23 @@ fn highlight_name(\n                     let is_unsafe = name_ref\n                         .and_then(|name_ref| name_ref.syntax().parent())\n                         .and_then(ast::MethodCallExpr::cast)\n-                        .map(|method_call_expr| sema.is_unsafe_method_call(method_call_expr))\n+                        .map(|method_call_expr| sema.is_unsafe_method_call(&method_call_expr))\n                         .unwrap_or(false);\n                     if is_unsafe {\n                         h |= HighlightModifier::Unsafe;\n                     }\n                 }\n-                return h;\n+                return if func.has_self_param(db) {\n+                    match func.mutability_of_self_param(db) {\n+                        Some(mutability) => match mutability {\n+                            Mutability::Mut => h | HighlightModifier::Mutable,\n+                            Mutability::Shared => h,\n+                        },\n+                        None => h | HighlightModifier::Consuming,\n+                    }\n+                } else {\n+                    h\n+                };\n             }\n             hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Struct,\n             hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Enum,\n@@ -808,14 +818,26 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n     match parent.kind() {\n         METHOD_CALL_EXPR => {\n             let mut h = Highlight::new(HighlightTag::Function);\n-            let is_unsafe = ast::MethodCallExpr::cast(parent)\n-                .map(|method_call_expr| sema.is_unsafe_method_call(method_call_expr))\n-                .unwrap_or(false);\n-            if is_unsafe {\n-                h |= HighlightModifier::Unsafe;\n-            }\n+            ast::MethodCallExpr::cast(parent)\n+                .and_then(|method_call_expr| {\n+                    if sema.is_unsafe_method_call(&method_call_expr) {\n+                        h |= HighlightModifier::Unsafe;\n+                    }\n+\n+                    let func = sema.resolve_method_call(&method_call_expr)?;\n+                    if !func.has_self_param(sema.db) {\n+                        return Some(h);\n+                    }\n \n-            h\n+                    Some(match func.mutability_of_self_param(sema.db) {\n+                        Some(mutability) => match mutability {\n+                            Mutability::Mut => h | HighlightModifier::Mutable,\n+                            Mutability::Shared => h,\n+                        },\n+                        None => h | HighlightModifier::Consuming,\n+                    })\n+                })\n+                .unwrap_or_else(|| h)\n         }\n         FIELD_EXPR => {\n             let h = HighlightTag::Field;"}, {"sha": "6cb955d295f30173fd0da8bfe78a8f527ee3efe2", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=a044ff0138d6bff9406b94de89fde43e7672ee1b", "patch": "@@ -36,6 +36,10 @@ impl Foo {\n     fn qux(&mut self) {\n         self.x = 0;\n     }\n+\n+    fn quop(&self) -> i32 {\n+        self.x\n+    }\n }\n \n static mut STATIC_MUT: i32 = 0;\n@@ -87,6 +91,11 @@ fn main() {\n     let Foo { x: z, y } = Foo { x: z, y };\n \n     y;\n+\n+    let mut foo = Foo { x, y: x };\n+    foo.quop();\n+    foo.qux();\n+    foo.baz();\n }\n \n enum Option<T> {"}, {"sha": "2aad06a922274e6567c0be35775fb4f843e87be0", "filename": "crates/ide/test_data/highlighting.html", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fide%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/a044ff0138d6bff9406b94de89fde43e7672ee1b/crates%2Fide%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Ftest_data%2Fhighlighting.html?ref=a044ff0138d6bff9406b94de89fde43e7672ee1b", "patch": "@@ -55,13 +55,17 @@\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"punctuation\">.</span><span class=\"field\">x</span>\n     <span class=\"punctuation\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n         <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span>\n+\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">quop</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n+        <span class=\"self_keyword\">self</span><span class=\"punctuation\">.</span><span class=\"field\">x</span>\n+    <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">STATIC_MUT</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n@@ -113,6 +117,11 @@\n     <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">:</span> <span class=\"variable declaration\">z</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">:</span> <span class=\"variable\">z</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n \n     <span class=\"variable\">y</span><span class=\"punctuation\">;</span>\n+\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span><span class=\"punctuation\">:</span> <span class=\"variable mutable\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function mutable\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"punctuation\">.</span><span class=\"function consuming\">baz</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n@@ -122,7 +131,7 @@\n <span class=\"keyword\">use</span> <span class=\"enum\">Option</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"punctuation\">;</span>\n \n <span class=\"keyword\">impl</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">and</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">other</span><span class=\"punctuation\">:</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"punctuation\">(</span><span class=\"type_param\">T</span><span class=\"punctuation\">,</span> <span class=\"type_param\">U</span><span class=\"punctuation\">)</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration consuming\">and</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">other</span><span class=\"punctuation\">:</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"punctuation\">(</span><span class=\"type_param\">T</span><span class=\"punctuation\">,</span> <span class=\"type_param\">U</span><span class=\"punctuation\">)</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n         <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> <span class=\"punctuation\">{</span>\n             <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"macro\">unimplemented!</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n             <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"punctuation\">,</span>"}]}