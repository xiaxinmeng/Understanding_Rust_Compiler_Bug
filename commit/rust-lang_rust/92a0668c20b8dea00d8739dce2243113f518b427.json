{"sha": "92a0668c20b8dea00d8739dce2243113f518b427", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYTA2NjhjMjBiOGRlYTAwZDg3MzlkY2UyMjQzMTEzZjUxOGI0Mjc=", "commit": {"author": {"name": "Valerii Lashmanov", "email": "vflashm@gmail.com", "date": "2020-09-28T04:48:19Z"}, "committer": {"name": "Valerii Lashmanov", "email": "vflashm@gmail.com", "date": "2020-09-28T04:48:19Z"}, "message": "SsoHashMap minor refactoring, SSO_ARRAY_SIZE introduced", "tree": {"sha": "a255539e28c769c47c2a9d89497553d949b360db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a255539e28c769c47c2a9d89497553d949b360db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92a0668c20b8dea00d8739dce2243113f518b427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92a0668c20b8dea00d8739dce2243113f518b427", "html_url": "https://github.com/rust-lang/rust/commit/92a0668c20b8dea00d8739dce2243113f518b427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92a0668c20b8dea00d8739dce2243113f518b427/comments", "author": {"login": "VFLashM", "id": 3723853, "node_id": "MDQ6VXNlcjM3MjM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3723853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VFLashM", "html_url": "https://github.com/VFLashM", "followers_url": "https://api.github.com/users/VFLashM/followers", "following_url": "https://api.github.com/users/VFLashM/following{/other_user}", "gists_url": "https://api.github.com/users/VFLashM/gists{/gist_id}", "starred_url": "https://api.github.com/users/VFLashM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VFLashM/subscriptions", "organizations_url": "https://api.github.com/users/VFLashM/orgs", "repos_url": "https://api.github.com/users/VFLashM/repos", "events_url": "https://api.github.com/users/VFLashM/events{/privacy}", "received_events_url": "https://api.github.com/users/VFLashM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VFLashM", "id": 3723853, "node_id": "MDQ6VXNlcjM3MjM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3723853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VFLashM", "html_url": "https://github.com/VFLashM", "followers_url": "https://api.github.com/users/VFLashM/followers", "following_url": "https://api.github.com/users/VFLashM/following{/other_user}", "gists_url": "https://api.github.com/users/VFLashM/gists{/gist_id}", "starred_url": "https://api.github.com/users/VFLashM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VFLashM/subscriptions", "organizations_url": "https://api.github.com/users/VFLashM/orgs", "repos_url": "https://api.github.com/users/VFLashM/repos", "events_url": "https://api.github.com/users/VFLashM/events{/privacy}", "received_events_url": "https://api.github.com/users/VFLashM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41942fac7d0711c6b3d0faa69748e22c0eb41388", "url": "https://api.github.com/repos/rust-lang/rust/commits/41942fac7d0711c6b3d0faa69748e22c0eb41388", "html_url": "https://github.com/rust-lang/rust/commit/41942fac7d0711c6b3d0faa69748e22c0eb41388"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "f466796100c47d2e6634f04521d51a159081c186", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/92a0668c20b8dea00d8739dce2243113f518b427/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a0668c20b8dea00d8739dce2243113f518b427/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=92a0668c20b8dea00d8739dce2243113f518b427", "patch": "@@ -7,6 +7,25 @@ use std::hash::Hash;\n use std::iter::FromIterator;\n use std::ops::Index;\n \n+// For pointer-sized arguments arrays\n+// are faster than set/map for up to 64\n+// arguments.\n+//\n+// On the other hand such a big array\n+// hurts cache performance, makes passing\n+// sso structures around very expensive.\n+//\n+// Biggest performance benefit is gained\n+// for reasonably small arrays that stay\n+// small in vast majority of cases.\n+//\n+// '8' is choosen as a sane default, to be\n+// reevaluated later.\n+//\n+// Note: As of now ArrayVec design prevents\n+//       us from making it user-customizable.\n+const SSO_ARRAY_SIZE: usize = 8;\n+\n /// Small-storage-optimized implementation of a map.\n ///\n /// Stores elements in a small array up to a certain length\n@@ -26,7 +45,7 @@ use std::ops::Index;\n ///   Vacant/Occupied entries and related\n #[derive(Clone)]\n pub enum SsoHashMap<K, V> {\n-    Array(ArrayVec<[(K, V); 8]>),\n+    Array(ArrayVec<[(K, V); SSO_ARRAY_SIZE]>),\n     Map(FxHashMap<K, V>),\n }\n \n@@ -39,9 +58,8 @@ impl<K, V> SsoHashMap<K, V> {\n \n     /// Creates an empty `SsoHashMap` with the specified capacity.\n     pub fn with_capacity(cap: usize) -> Self {\n-        let array = ArrayVec::new();\n-        if array.capacity() >= cap {\n-            SsoHashMap::Array(array)\n+        if cap <= SSO_ARRAY_SIZE {\n+            Self::new()\n         } else {\n             SsoHashMap::Map(FxHashMap::with_capacity_and_hasher(cap, Default::default()))\n         }\n@@ -59,7 +77,7 @@ impl<K, V> SsoHashMap<K, V> {\n     /// Returns the number of elements the map can hold without reallocating.\n     pub fn capacity(&self) -> usize {\n         match self {\n-            SsoHashMap::Array(array) => array.capacity(),\n+            SsoHashMap::Array(_) => SSO_ARRAY_SIZE,\n             SsoHashMap::Map(map) => map.capacity(),\n         }\n     }\n@@ -149,7 +167,7 @@ impl<K: Eq + Hash, V> SsoHashMap<K, V> {\n     pub fn reserve(&mut self, additional: usize) {\n         match self {\n             SsoHashMap::Array(array) => {\n-                if array.capacity() < (array.len() + additional) {\n+                if SSO_ARRAY_SIZE < (array.len() + additional) {\n                     let mut map: FxHashMap<K, V> = array.drain(..).collect();\n                     map.reserve(additional);\n                     *self = SsoHashMap::Map(map);\n@@ -164,10 +182,8 @@ impl<K: Eq + Hash, V> SsoHashMap<K, V> {\n     /// and possibly leaving some space in accordance with the resize policy.\n     pub fn shrink_to_fit(&mut self) {\n         if let SsoHashMap::Map(map) = self {\n-            let mut array = ArrayVec::new();\n-            if map.len() <= array.capacity() {\n-                array.extend(map.drain());\n-                *self = SsoHashMap::Array(array);\n+            if map.len() <= SSO_ARRAY_SIZE {\n+                *self = SsoHashMap::Array(map.drain().collect());\n             } else {\n                 map.shrink_to_fit();\n             }\n@@ -361,7 +377,7 @@ impl<K: Eq + Hash, V> Extend<(K, V)> for SsoHashMap<K, V> {\n     fn extend_reserve(&mut self, additional: usize) {\n         match self {\n             SsoHashMap::Array(array) => {\n-                if array.capacity() < (array.len() + additional) {\n+                if SSO_ARRAY_SIZE < (array.len() + additional) {\n                     let mut map: FxHashMap<K, V> = array.drain(..).collect();\n                     map.extend_reserve(additional);\n                     *self = SsoHashMap::Map(map);\n@@ -517,8 +533,9 @@ impl<'a, K: Eq + Hash, V> Entry<'a, K, V> {\n                 let index = if let Some(index) = found_index {\n                     index\n                 } else {\n+                    let index = array.len();\n                     array.try_push((self.key, default())).unwrap();\n-                    array.len() - 1\n+                    index\n                 };\n                 &mut array[index].1\n             }"}]}