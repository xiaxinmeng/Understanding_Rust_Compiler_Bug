{"sha": "fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMDhmYjdiMWU3Y2M1ZWY0NWUxMDdmMDViM2NkMzBkNDgzMTNkMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-25T16:27:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-25T16:27:24Z"}, "message": "Auto merge of #74510 - LukasKalbertodt:fix-range-from-index-panic, r=hanna-kruppe\n\nFix panic message when `RangeFrom` index is out of bounds\n\nBefore, the `Range` method was called with `end = slice.len()`. Unfortunately, because `Range::index` first checks the order of the indices (start has to be smaller than end), an out of bounds index leads to `core::slice::slice_index_order_fail` being called. This prints the message 'slice index starts at 27 but ends at 10', which is worse than 'index 27 out of range for slice of length 10'. This is not only useful to normal users reading panic messages, but also for people inspecting assembly and being confused by `slice_index_order_fail` calls.\n\nYou can see the produced assembly [here](https://rust.godbolt.org/z/GzMGWf) and try on Playground [here](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=aada5996b2f3848075a6d02cf4055743). (By the way. this is only about which panic function is called; I'm pretty sure it does not improve anything about performance).", "tree": {"sha": "fadcb1a2aa10c1150749d9dfe12975b031158b95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fadcb1a2aa10c1150749d9dfe12975b031158b95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b", "html_url": "https://github.com/rust-lang/rust/commit/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "037d8e747de5056f0202f29aa2b0353bdbbf5cfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/037d8e747de5056f0202f29aa2b0353bdbbf5cfe", "html_url": "https://github.com/rust-lang/rust/commit/037d8e747de5056f0202f29aa2b0353bdbbf5cfe"}, {"sha": "0d64b016398f9c0116330089f038b11e2a3c4e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d64b016398f9c0116330089f038b11e2a3c4e1d", "html_url": "https://github.com/rust-lang/rust/commit/0d64b016398f9c0116330089f038b11e2a3c4e1d"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "9ed5a1f9622154603d84a00bf3cb11c1b3c1ff52", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b", "patch": "@@ -2974,8 +2974,15 @@ where\n #[inline(never)]\n #[cold]\n #[track_caller]\n-fn slice_index_len_fail(index: usize, len: usize) -> ! {\n-    panic!(\"index {} out of range for slice of length {}\", index, len);\n+fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n+    panic!(\"range start index {} out of range for slice of length {}\", index, len);\n+}\n+\n+#[inline(never)]\n+#[cold]\n+#[track_caller]\n+fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+    panic!(\"range end index {} out of range for slice of length {}\", index, len);\n }\n \n #[inline(never)]\n@@ -3160,7 +3167,7 @@ unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n         if self.start > self.end {\n             slice_index_order_fail(self.start, self.end);\n         } else if self.end > slice.len() {\n-            slice_index_len_fail(self.end, slice.len());\n+            slice_end_index_len_fail(self.end, slice.len());\n         }\n         unsafe { &*self.get_unchecked(slice) }\n     }\n@@ -3170,7 +3177,7 @@ unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n         if self.start > self.end {\n             slice_index_order_fail(self.start, self.end);\n         } else if self.end > slice.len() {\n-            slice_index_len_fail(self.end, slice.len());\n+            slice_end_index_len_fail(self.end, slice.len());\n         }\n         unsafe { &mut *self.get_unchecked_mut(slice) }\n     }\n@@ -3241,12 +3248,18 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n \n     #[inline]\n     fn index(self, slice: &[T]) -> &[T] {\n-        (self.start..slice.len()).index(slice)\n+        if self.start > slice.len() {\n+            slice_start_index_len_fail(self.start, slice.len());\n+        }\n+        unsafe { &*self.get_unchecked(slice) }\n     }\n \n     #[inline]\n     fn index_mut(self, slice: &mut [T]) -> &mut [T] {\n-        (self.start..slice.len()).index_mut(slice)\n+        if self.start > slice.len() {\n+            slice_start_index_len_fail(self.start, slice.len());\n+        }\n+        unsafe { &mut *self.get_unchecked_mut(slice) }\n     }\n }\n "}, {"sha": "8e240832c13b839cdfd7df9d12eac7da5249f966", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b", "patch": "@@ -1088,7 +1088,7 @@ mod slice_index {\n \n             good: data[6..] == [];\n             bad: data[7..];\n-            message: \"but ends at\"; // perhaps not ideal\n+            message: \"out of range\";\n         }\n \n         in mod rangeto_len {"}, {"sha": "a3aca3a2912a6c2cc31b0bc0829200dae96f817e", "filename": "src/test/codegen/issue-69101-bounds-check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b/src%2Ftest%2Fcodegen%2Fissue-69101-bounds-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b/src%2Ftest%2Fcodegen%2Fissue-69101-bounds-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-69101-bounds-check.rs?ref=fe08fb7b1e7cc5ef45e107f05b3cd30d48313d2b", "patch": "@@ -12,7 +12,7 @@\n // CHECK-LABEL: @already_sliced_no_bounds_check\n #[no_mangle]\n pub fn already_sliced_no_bounds_check(a: &[u8], b: &[u8], c: &mut [u8]) {\n-    // CHECK: slice_index_len_fail\n+    // CHECK: slice_end_index_len_fail\n     // CHECK-NOT: panic_bounds_check\n     let _ = (&a[..2048], &b[..2048], &mut c[..2048]);\n     for i in 0..1024 {\n@@ -23,7 +23,7 @@ pub fn already_sliced_no_bounds_check(a: &[u8], b: &[u8], c: &mut [u8]) {\n // CHECK-LABEL: @already_sliced_no_bounds_check_exact\n #[no_mangle]\n pub fn already_sliced_no_bounds_check_exact(a: &[u8], b: &[u8], c: &mut [u8]) {\n-    // CHECK: slice_index_len_fail\n+    // CHECK: slice_end_index_len_fail\n     // CHECK-NOT: panic_bounds_check\n     let _ = (&a[..1024], &b[..1024], &mut c[..1024]);\n     for i in 0..1024 {\n@@ -35,7 +35,7 @@ pub fn already_sliced_no_bounds_check_exact(a: &[u8], b: &[u8], c: &mut [u8]) {\n // CHECK-LABEL: @already_sliced_bounds_check\n #[no_mangle]\n pub fn already_sliced_bounds_check(a: &[u8], b: &[u8], c: &mut [u8]) {\n-    // CHECK: slice_index_len_fail\n+    // CHECK: slice_end_index_len_fail\n     // CHECK: panic_bounds_check\n     let _ = (&a[..1023], &b[..2048], &mut c[..2048]);\n     for i in 0..1024 {"}]}