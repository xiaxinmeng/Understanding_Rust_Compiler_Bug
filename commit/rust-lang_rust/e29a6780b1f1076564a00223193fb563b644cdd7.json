{"sha": "e29a6780b1f1076564a00223193fb563b644cdd7", "node_id": "C_kwDOAAsO6NoAKGUyOWE2NzgwYjFmMTA3NjU2NGEwMDIyMzE5M2ZiNTYzYjY0NGNkZDc", "commit": {"author": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-06-10T23:02:42Z"}, "committer": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-06-10T23:11:56Z"}, "message": "restrict the assist so that it only appears if the cursor is on the loop keyword", "tree": {"sha": "72aaa0717d575553b202b74b1693ddefc3ec720b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72aaa0717d575553b202b74b1693ddefc3ec720b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29a6780b1f1076564a00223193fb563b644cdd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29a6780b1f1076564a00223193fb563b644cdd7", "html_url": "https://github.com/rust-lang/rust/commit/e29a6780b1f1076564a00223193fb563b644cdd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29a6780b1f1076564a00223193fb563b644cdd7/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac4d280129518d921a85ee40a56358801864cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fac4d280129518d921a85ee40a56358801864cc7", "html_url": "https://github.com/rust-lang/rust/commit/fac4d280129518d921a85ee40a56358801864cc7"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "a14cc459899fdf8d356fe34dfc1365cf93b3b366", "filename": "crates/ide-assists/src/handlers/add_label_to_loop.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e29a6780b1f1076564a00223193fb563b644cdd7/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29a6780b1f1076564a00223193fb563b644cdd7/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs?ref=e29a6780b1f1076564a00223193fb563b644cdd7", "patch": "@@ -1,5 +1,8 @@\n use ide_db::syntax_helpers::node_ext::for_each_break_and_continue_expr;\n-use syntax::ast::{self, AstNode, HasLoopBody};\n+use syntax::{\n+    ast::{self, AstNode, HasLoopBody},\n+    T,\n+};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -25,26 +28,24 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let loop_expr = ctx.find_node_at_offset::<ast::LoopExpr>()?;\n+    let loop_kw = ctx.find_token_syntax_at_offset(T![loop])?;\n+    let loop_expr = loop_kw.parent().and_then(ast::LoopExpr::cast)?;\n     if loop_expr.label().is_some() {\n         return None;\n     }\n-    let loop_body = loop_expr.loop_body().and_then(|it| it.stmt_list());\n-    let mut related_exprs = vec![];\n-    related_exprs.push(ast::Expr::LoopExpr(loop_expr.clone()));\n-    for_each_break_and_continue_expr(loop_expr.label(), loop_body, &mut |expr| {\n-        if let ast::Expr::BreakExpr(_) | ast::Expr::ContinueExpr(_) = expr {\n-            related_exprs.push(expr)\n-        }\n-    });\n \n     acc.add(\n         AssistId(\"add_label_to_loop\", AssistKind::Generate),\n         \"Add Label\",\n         loop_expr.syntax().text_range(),\n         |builder| {\n-            for expr in related_exprs {\n-                match expr {\n+            builder.insert(loop_kw.text_range().start(), \"'l: \");\n+\n+            let loop_body = loop_expr.loop_body().and_then(|it| it.stmt_list());\n+            for_each_break_and_continue_expr(\n+                loop_expr.label(),\n+                loop_body,\n+                &mut |expr| match expr {\n                     ast::Expr::BreakExpr(break_expr) => {\n                         if let Some(break_token) = break_expr.break_token() {\n                             builder.insert(break_token.text_range().end(), \" 'l\")\n@@ -55,14 +56,9 @@ pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Optio\n                             builder.insert(continue_token.text_range().end(), \" 'l\")\n                         }\n                     }\n-                    ast::Expr::LoopExpr(loop_expr) => {\n-                        if let Some(loop_token) = loop_expr.loop_token() {\n-                            builder.insert(loop_token.text_range().start(), \"'l: \")\n-                        }\n-                    }\n                     _ => {}\n-                }\n-            }\n+                },\n+            );\n         },\n     )\n }"}]}