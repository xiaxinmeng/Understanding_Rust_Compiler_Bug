{"sha": "f34eae8802b327c23984bfef02312ce1c64a6581", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNGVhZTg4MDJiMzI3YzIzOTg0YmZlZjAyMzEyY2UxYzY0YTY1ODE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-11T01:34:21Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-11T19:07:19Z"}, "message": "Translate slice-strings and make fixed-strings carry their null.", "tree": {"sha": "2c65dc6fc6d32c00a1f18f8de2b6d2b94a6dad25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c65dc6fc6d32c00a1f18f8de2b6d2b94a6dad25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f34eae8802b327c23984bfef02312ce1c64a6581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f34eae8802b327c23984bfef02312ce1c64a6581", "html_url": "https://github.com/rust-lang/rust/commit/f34eae8802b327c23984bfef02312ce1c64a6581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f34eae8802b327c23984bfef02312ce1c64a6581/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c720ffdbc428336546448daf2f806428cc22db06", "url": "https://api.github.com/repos/rust-lang/rust/commits/c720ffdbc428336546448daf2f806428cc22db06", "html_url": "https://github.com/rust-lang/rust/commit/c720ffdbc428336546448daf2f806428cc22db06"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "6c3e81b4999159bc8f5582eadabd57713602da25", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f34eae8802b327c23984bfef02312ce1c64a6581", "patch": "@@ -1236,7 +1236,7 @@ fn copy_val_no_check(bcx: block, action: copy_action, dst: ValueRef,\n     let _icx = bcx.insn_ctxt(\"copy_val_no_check\");\n     let ccx = bcx.ccx();\n     let mut bcx = bcx;\n-    if ty::type_is_scalar(t) {\n+    if ty::type_is_scalar(t) || ty::type_is_slice(t) {\n         Store(bcx, src, dst);\n         ret bcx;\n     }\n@@ -1268,7 +1268,7 @@ fn move_val(cx: block, action: copy_action, dst: ValueRef,\n     let mut src_val = src.val;\n     let tcx = cx.tcx();\n     let mut cx = cx;\n-    if ty::type_is_scalar(t) {\n+    if ty::type_is_scalar(t) || ty::type_is_slice(t) {\n         if src.kind == owned { src_val = Load(cx, src_val); }\n         Store(cx, src_val, dst);\n         ret cx;\n@@ -2294,6 +2294,13 @@ fn trans_index(cx: block, ex: @ast::expr, base: @ast::expr,\n         let body = GEPi(bcx, v, [0, 0]);\n         (lim, body)\n       }\n+      ty::ty_estr(ty::vstore_slice(_)) |\n+      ty::ty_evec(_, ty::vstore_slice(_)) {\n+        let body = Load(bcx, GEPi(bcx, v, [0, 0]));\n+        let lim = Load(bcx, GEPi(bcx, v, [0, 1]));\n+        (lim, body)\n+      }\n+\n       ty::ty_estr(_) | ty::ty_evec(_, _) {\n         bcx.sess().unimpl(#fmt(\"unsupported evec/estr type trans_index\"));\n       }"}, {"sha": "1008d9ed8c6ab2addc97df954296255983095739", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=f34eae8802b327c23984bfef02312ce1c64a6581", "patch": "@@ -148,28 +148,30 @@ fn trans_vstore(bcx: block, e: @ast::expr,\n fn trans_estr(bcx: block, s: str, vstore: ast::vstore,\n               sp: span, dest: dest) -> block {\n     let _icx = bcx.insn_ctxt(\"tvec::trans_estr\");\n-    alt vstore {\n+    let ccx = bcx.ccx();\n+\n+    let c = alt vstore {\n       ast::vstore_fixed(_)\n       {\n-        let c = str::as_bytes(s) {|bytes|\n-            // NB: The byte vector we have here includes the trailing \\0,\n-            // but we are doing a fixed-size str, meaning we _exclude_\n-            // the trailing \\0. And we don't let LLVM null-terminate\n-            // either.\n-            unsafe {\n-                lib::llvm::llvm::LLVMConstString(\n-                    unsafe::reinterpret_cast(vec::unsafe::to_ptr(bytes)),\n-                    (bytes.len() - 1u) as libc::c_uint, lib::llvm::True)\n-            }\n-        };\n+        // \"hello\"/_  =>  [i8 x 6] in llvm\n+        #debug(\"trans_estr: fixed: %s\", s);\n+        C_postr(s)\n+      }\n \n-        #debug(\"trans_estr: src %s\",val_str(bcx.ccx().tn, c));\n-        ret base::store_in_dest(bcx, c, dest);\n+      ast::vstore_slice(_) {\n+        // \"hello\"  =>  (*i8,uint) in llvm\n+        #debug(\"trans_estr: slice '%s'\", s);\n+        let cs = PointerCast(bcx, C_cstr(ccx, s), T_ptr(T_i8()));\n+        C_struct([cs, C_uint(ccx, str::len(s))])\n       }\n+\n       _ {\n         bcx.ccx().sess.span_unimpl(sp, \"unhandled tvec::trans_estr\");\n       }\n-    }\n+    };\n+\n+    #debug(\"trans_estr: type: %s\", val_str(ccx.tn, c));\n+    base::store_in_dest(bcx, c, dest)\n }\n \n fn trans_str(bcx: block, s: str, dest: dest) -> block {"}, {"sha": "eef0f0b510183f72ba93b6b124d11dcd73e4616d", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=f34eae8802b327c23984bfef02312ce1c64a6581", "patch": "@@ -72,7 +72,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n       }\n \n       ty::ty_estr(ty::vstore_fixed(n)) {\n-        T_array(T_i8(), n)\n+        T_array(T_i8(), n + 1u /* +1 for trailing null */)\n       }\n \n       ty::ty_evec(mt, ty::vstore_fixed(n)) {"}, {"sha": "0852edcbea673649622f72f1130e15992fe2767b", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=f34eae8802b327c23984bfef02312ce1c64a6581", "patch": "@@ -118,7 +118,7 @@ export type_is_sequence;\n export type_is_signed;\n export type_is_structural;\n export type_is_copyable;\n-export type_is_tup_like;\n+export type_is_slice;\n export type_is_unique;\n export type_is_c_like_enum;\n export type_structurally_contains;\n@@ -858,13 +858,6 @@ fn sequence_element_type(cx: ctxt, ty: t) -> t {\n     }\n }\n \n-pure fn type_is_tup_like(ty: t) -> bool {\n-    alt get(ty).struct {\n-      ty_rec(_) | ty_tup(_) { true }\n-      _ { false }\n-    }\n-}\n-\n fn get_element_type(ty: t, i: uint) -> t {\n     alt get(ty).struct {\n       ty_rec(flds) { ret flds[i].mt.ty; }\n@@ -887,6 +880,13 @@ pure fn type_is_boxed(ty: t) -> bool {\n     }\n }\n \n+pure fn type_is_slice(ty: t) -> bool {\n+    alt get(ty).struct {\n+      ty_evec(_, vstore_slice(_)) | ty_estr(vstore_slice(_)) { true }\n+      _ { ret false; }\n+    }\n+}\n+\n pure fn type_is_unique_box(ty: t) -> bool {\n     alt get(ty).struct {\n       ty_uniq(_) { ret true; }"}, {"sha": "f91474cba8b3604a7a1cf663ed5e56971e5d31ec", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34eae8802b327c23984bfef02312ce1c64a6581/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=f34eae8802b327c23984bfef02312ce1c64a6581", "patch": "@@ -1,8 +1,7 @@\n-// xfail-test\n fn main() {\n-    let x : str/& = \"hello\";\n-    let mut y = \"there\";\n+    let x = \"hello\"/&;\n+    let mut y = \"there\"/&;\n     y = x;\n-    assert y[1] == 'h' as u8;\n-    assert y[4] == 'e' as u8;\n+    assert y[0] == 'h' as u8;\n+    assert y[4] == 'o' as u8;\n }\n\\ No newline at end of file"}]}