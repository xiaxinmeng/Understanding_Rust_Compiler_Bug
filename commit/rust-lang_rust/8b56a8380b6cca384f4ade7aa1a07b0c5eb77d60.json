{"sha": "8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTZhODM4MGI2Y2NhMzg0ZjRhZGU3YWExYTA3YjBjNWViNzdkNjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-25T20:21:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-27T04:30:17Z"}, "message": "librustc: Modify all code to use new lifetime binder syntax", "tree": {"sha": "506d6be2fd2d0699da58cfdf89553310731e0c30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/506d6be2fd2d0699da58cfdf89553310731e0c30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "html_url": "https://github.com/rust-lang/rust/commit/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15688eaf284b54d29e42b4ec415c23c94e567b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/15688eaf284b54d29e42b4ec415c23c94e567b23", "html_url": "https://github.com/rust-lang/rust/commit/15688eaf284b54d29e42b4ec415c23c94e567b23"}], "stats": {"total": 936, "additions": 427, "deletions": 509}, "files": [{"sha": "26ea276dd7c8c8c467bb2c7d9045fe7fdbff16b8", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -1116,7 +1116,7 @@ static bit2: uint = 1 << 1;\n static bits: [uint, ..2] = [bit1, bit2];\n static string: &'static str = \"bitstring\";\n \n-struct BitsNStrings {\n+struct BitsNStrings<'self> {\n     mybits: [uint, ..2],\n     mystring: &'self str\n }"}, {"sha": "039721fb12e63f2e254138d0cbab32db38cc54e8", "filename": "doc/tutorial-borrowed-ptr.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/doc%2Ftutorial-borrowed-ptr.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/doc%2Ftutorial-borrowed-ptr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-borrowed-ptr.md?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -485,7 +485,7 @@ For example, we could write a subroutine like this:\n \n ~~~\n struct Point {x: float, y: float}\n-fn get_x(p: &'r Point) -> &'r float { &p.x }\n+fn get_x<'r>(p: &'r Point) -> &'r float { &p.x }\n ~~~\n \n Here, the function `get_x()` returns a pointer into the structure it\n@@ -571,8 +571,8 @@ function:\n #     Rectangle(Point, Size)  // upper-left, dimensions\n # }\n # fn compute_area(shape: &Shape) -> float { 0f }\n-fn select<T>(shape: &'r Shape, threshold: float,\n-             a: &'r T, b: &'r T) -> &'r T {\n+fn select<'r, T>(shape: &'r Shape, threshold: float,\n+                 a: &'r T, b: &'r T) -> &'r T {\n     if compute_area(shape) > threshold {a} else {b}\n }\n ~~~\n@@ -591,12 +591,12 @@ example:\n #     Rectangle(Point, Size)  // upper-left, dimensions\n # }\n # fn compute_area(shape: &Shape) -> float { 0f }\n-# fn select<T>(shape: &Shape, threshold: float,\n-#              a: &'r T, b: &'r T) -> &'r T {\n+# fn select<'r, T>(shape: &Shape, threshold: float,\n+#                  a: &'r T, b: &'r T) -> &'r T {\n #     if compute_area(shape) > threshold {a} else {b}\n # }\n                                                      // -+ r\n-fn select_based_on_unit_circle<T>(                   //  |-+ B\n+fn select_based_on_unit_circle<'r, T>(               //  |-+ B\n     threshold: float, a: &'r T, b: &'r T) -> &'r T { //  | |\n                                                      //  | |\n     let shape = Circle(Point {x: 0., y: 0.}, 1.);    //  | |\n@@ -628,8 +628,8 @@ returned. Here is how the new `select()` might look:\n #     Rectangle(Point, Size)  // upper-left, dimensions\n # }\n # fn compute_area(shape: &Shape) -> float { 0f }\n-fn select<T>(shape: &'tmp Shape, threshold: float,\n-             a: &'r T, b: &'r T) -> &'r T {\n+fn select<'r, 'tmp, T>(shape: &'tmp Shape, threshold: float,\n+                       a: &'r T, b: &'r T) -> &'r T {\n     if compute_area(shape) > threshold {a} else {b}\n }\n ~~~\n@@ -647,8 +647,8 @@ concise to just omit the named lifetime for `shape` altogether:\n #     Rectangle(Point, Size)  // upper-left, dimensions\n # }\n # fn compute_area(shape: &Shape) -> float { 0f }\n-fn select<T>(shape: &Shape, threshold: float,\n-             a: &'r T, b: &'r T) -> &'r T {\n+fn select<'r, T>(shape: &Shape, threshold: float,\n+                 a: &'r T, b: &'r T) -> &'r T {\n     if compute_area(shape) > threshold {a} else {b}\n }\n ~~~"}, {"sha": "c96a6502eecf75eecb245a30691742d2467b0fc3", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -174,7 +174,7 @@ pub mod traits {\n     use kinds::Copy;\n     use ops::Add;\n \n-    impl<T:Copy> Add<&'self const [T],@[T]> for @[T] {\n+    impl<'self,T:Copy> Add<&'self const [T],@[T]> for @[T] {\n         #[inline(always)]\n         fn add(&self, rhs: & &'self const [T]) -> @[T] {\n             append(*self, (*rhs))"}, {"sha": "6d8674caf870b75fdf068c89820847ed4774839a", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -61,17 +61,19 @@ pub unsafe fn transmute<L, G>(thing: L) -> G {\n \n /// Coerce an immutable reference to be mutable.\n #[inline(always)]\n-pub unsafe fn transmute_mut<T>(ptr: &'a T) -> &'a mut T { transmute(ptr) }\n+pub unsafe fn transmute_mut<'a,T>(ptr: &'a T) -> &'a mut T { transmute(ptr) }\n \n /// Coerce a mutable reference to be immutable.\n #[inline(always)]\n-pub unsafe fn transmute_immut<T>(ptr: &'a mut T) -> &'a T {\n+pub unsafe fn transmute_immut<'a,T>(ptr: &'a mut T) -> &'a T {\n     transmute(ptr)\n }\n \n /// Coerce a borrowed pointer to have an arbitrary associated region.\n #[inline(always)]\n-pub unsafe fn transmute_region<T>(ptr: &'a T) -> &'b T { transmute(ptr) }\n+pub unsafe fn transmute_region<'a,'b,T>(ptr: &'a T) -> &'b T {\n+    transmute(ptr)\n+}\n \n /// Coerce an immutable reference to be mutable.\n #[inline(always)]\n@@ -87,19 +89,19 @@ pub unsafe fn transmute_immut_unsafe<T>(ptr: *const T) -> *T {\n \n /// Coerce a borrowed mutable pointer to have an arbitrary associated region.\n #[inline(always)]\n-pub unsafe fn transmute_mut_region<T>(ptr: &'a mut T) -> &'b mut T {\n+pub unsafe fn transmute_mut_region<'a,'b,T>(ptr: &'a mut T) -> &'b mut T {\n     transmute(ptr)\n }\n \n /// Transforms lifetime of the second pointer to match the first.\n #[inline(always)]\n-pub unsafe fn copy_lifetime<S,T>(_ptr: &'a S, ptr: &T) -> &'a T {\n+pub unsafe fn copy_lifetime<'a,S,T>(_ptr: &'a S, ptr: &T) -> &'a T {\n     transmute_region(ptr)\n }\n \n /// Transforms lifetime of the second pointer to match the first.\n #[inline(always)]\n-pub unsafe fn copy_lifetime_vec<S,T>(_ptr: &'a [S], ptr: &T) -> &'a T {\n+pub unsafe fn copy_lifetime_vec<'a,S,T>(_ptr: &'a [S], ptr: &T) -> &'a T {\n     transmute_region(ptr)\n }\n "}, {"sha": "8223ab650f2a36e3ea0a9e552a839a6f1d9dbf3f", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -22,8 +22,8 @@ use cast::transmute;\n  * NB: These must match the representation in the C++ runtime.\n  */\n \n-type DropGlue = &'self fn(**TypeDesc, *c_void);\n-type FreeGlue = &'self fn(**TypeDesc, *c_void);\n+type DropGlue<'self> = &'self fn(**TypeDesc, *c_void);\n+type FreeGlue<'self> = &'self fn(**TypeDesc, *c_void);\n \n type TaskID = uintptr_t;\n "}, {"sha": "41504f1a0e1094e136d56be884a7a078c0aa7a90", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -22,12 +22,12 @@ pub struct Handler<T, U> {\n     prev: Option<@Handler<T, U>>,\n }\n \n-pub struct Condition<T, U> {\n+pub struct Condition<'self, T, U> {\n     name: &'static str,\n     key: task::local_data::LocalDataKey<'self, Handler<T, U>>\n }\n \n-pub impl<T, U> Condition<'self, T, U> {\n+pub impl<'self, T, U> Condition<'self, T, U> {\n     fn trap(&self, h: &'self fn(T) -> U) -> Trap<'self, T, U> {\n         unsafe {\n             let p : *RustClosure = ::cast::transmute(&h);\n@@ -66,12 +66,12 @@ pub impl<T, U> Condition<'self, T, U> {\n     }\n }\n \n-struct Trap<T, U> {\n+struct Trap<'self, T, U> {\n     cond: &'self Condition<'self, T, U>,\n     handler: @Handler<T, U>\n }\n \n-pub impl<T, U> Trap<'self, T, U> {\n+pub impl<'self, T, U> Trap<'self, T, U> {\n     fn in<V>(&self, inner: &'self fn() -> V) -> V {\n         unsafe {\n             let _g = Guard { cond: self.cond };\n@@ -82,12 +82,12 @@ pub impl<T, U> Trap<'self, T, U> {\n     }\n }\n \n-struct Guard<T, U> {\n+struct Guard<'self, T, U> {\n     cond: &'self Condition<'self, T, U>\n }\n \n #[unsafe_destructor]\n-impl<T, U> Drop for Guard<'self, T, U> {\n+impl<'self, T, U> Drop for Guard<'self, T, U> {\n     fn finalize(&self) {\n         unsafe {\n             debug!(\"Guard: popping handler from TLS\");"}, {"sha": "85d288dda6cc49586efab84f38672c4849f1821b", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -124,7 +124,7 @@ unsafe fn is_safe_point(pc: *Word) -> Option<SafePoint> {\n     return None;\n }\n \n-type Visitor = &'self fn(root: **Word, tydesc: *Word) -> bool;\n+type Visitor<'self> = &'self fn(root: **Word, tydesc: *Word) -> bool;\n \n // Walks the list of roots for the given safe point, and calls visitor\n // on each root."}, {"sha": "7d9320b9b0f933ec0c4ca3eea3798deb421dbae7", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -278,9 +278,8 @@ pub mod linear {\n         }\n     }\n \n-    impl<K:Hash + IterBytes + Eq,V>\n-        BaseIter<(&'self K, &'self V)> for LinearMap<K, V>\n-    {\n+    impl<'self,K:Hash + IterBytes + Eq,V>\n+            BaseIter<(&'self K, &'self V)> for LinearMap<K, V> {\n         /// Visit all key-value pairs\n         fn each(&self, blk: &fn(&(&'self K, &'self V)) -> bool) {\n             for uint::range(0, self.buckets.len()) |i| {\n@@ -315,7 +314,7 @@ pub mod linear {\n         }\n     }\n \n-    impl<K:Hash + IterBytes + Eq,V> Map<K, V> for LinearMap<K, V> {\n+    impl<'self,K:Hash + IterBytes + Eq,V> Map<K, V> for LinearMap<K, V> {\n         /// Return true if the map contains a value for the specified key\n         fn contains_key(&self, k: &K) -> bool {\n             match self.bucket_for_key(k) {"}, {"sha": "9ad6693c8d02cf615ef768cf5a30e71c0ae78dce", "filename": "src/libcore/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -616,12 +616,12 @@ pub fn file_reader(path: &Path) -> Result<@Reader, ~str> {\n \n \n // Byte readers\n-pub struct BytesReader {\n+pub struct BytesReader<'self> {\n     bytes: &'self [u8],\n     mut pos: uint\n }\n \n-impl Reader for BytesReader<'self> {\n+impl<'self> Reader for BytesReader<'self> {\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         let count = uint::min(len, self.bytes.len() - self.pos);\n "}, {"sha": "7ed4c3c36ea6d421bd4cf3f344ee8a97fe061f84", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -20,7 +20,7 @@ use option::{None, Option, Some};\n use vec;\n \n /// A function used to initialize the elements of a sequence\n-pub type InitOp<T> = &'self fn(uint) -> T;\n+pub type InitOp<'self,T> = &'self fn(uint) -> T;\n \n pub trait BaseIter<A> {\n     fn each(&self, blk: &fn(v: &A) -> bool);"}, {"sha": "5e995d777c9b0f45d8aad4e4ac319fffdd7df3c4", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -439,7 +439,7 @@ pub fn try_recv<T:Owned,Tbuffer:Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n     let p = unsafe { &*p_ };\n \n     #[unsafe_destructor]\n-    struct DropState {\n+    struct DropState<'self> {\n         p: &'self PacketHeader,\n \n         drop {"}, {"sha": "69e7b401431bbc11a96499d9a6f29e2d9e380074", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -178,7 +178,7 @@ pub fn to_uint<T>(thing: &T) -> uint {\n \n /// Determine if two borrowed pointers point to the same thing.\n #[inline(always)]\n-pub fn ref_eq<T>(thing: &'a T, other: &'b T) -> bool {\n+pub fn ref_eq<'a,'b,T>(thing: &'a T, other: &'b T) -> bool {\n     to_uint(thing) == to_uint(other)\n }\n \n@@ -312,7 +312,7 @@ impl<T> Ord for *const T {\n \n // Equality for region pointers\n #[cfg(notest)]\n-impl<T:Eq> Eq for &'self const T {\n+impl<'self,T:Eq> Eq for &'self const T {\n     #[inline(always)]\n     fn eq(&self, other: & &'self const T) -> bool {\n         return *(*self) == *(*other);\n@@ -325,7 +325,7 @@ impl<T:Eq> Eq for &'self const T {\n \n // Comparison for region pointers\n #[cfg(notest)]\n-impl<T:Ord> Ord for &'self const T {\n+impl<'self,T:Ord> Ord for &'self const T {\n     #[inline(always)]\n     fn lt(&self, other: & &'self const T) -> bool {\n         *(*self) < *(*other)"}, {"sha": "0a2c803ff0714f942b2b23d1828bd3e0e0aedd74", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -53,7 +53,7 @@ pub fn get<T:Copy,U>(res: &Result<T, U>) -> T {\n  * If the result is an error\n  */\n #[inline(always)]\n-pub fn get_ref<T, U>(res: &'a Result<T, U>) -> &'a T {\n+pub fn get_ref<'a, T, U>(res: &'a Result<T, U>) -> &'a T {\n     match *res {\n         Ok(ref t) => t,\n         Err(ref the_err) => unsafe {"}, {"sha": "5965a767763cba789f037c4f58ca59291cc31c02", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -321,7 +321,7 @@ pub fn install_watcher_data<H, W: Watcher + NativeHandle<*H>>(watcher: &mut W) {\n     }\n }\n \n-pub fn get_watcher_data<H, W: Watcher + NativeHandle<*H>>(\n+pub fn get_watcher_data<'r, H, W: Watcher + NativeHandle<*H>>(\n     watcher: &'r mut W) -> &'r mut WatcherData {\n \n     unsafe {"}, {"sha": "e78c5dfffab8972ea0e227e7634c6a0c39649cd5", "filename": "src/libcore/str.rs", "status": "modified", "additions": 49, "deletions": 37, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -58,7 +58,7 @@ impl ToStr for ~str {\n     #[inline(always)]\n     fn to_str(&self) -> ~str { from_slice(*self) }\n }\n-impl ToStr for &'self str {\n+impl<'self> ToStr for &'self str {\n     #[inline(always)]\n     fn to_str(&self) -> ~str { from_slice(*self) }\n }\n@@ -293,7 +293,7 @@ pub fn shift_char(s: &mut ~str) -> char {\n  * If the string does not contain any characters\n  */\n #[inline]\n-pub fn slice_shift_char(s: &'a str) -> (char, &'a str) {\n+pub fn slice_shift_char<'a>(s: &'a str) -> (char, &'a str) {\n     let CharRange {ch, next} = char_range_at(s, 0u);\n     let next_s = unsafe { raw::slice_bytes(s, next, len(s)) };\n     return (ch, next_s);\n@@ -313,7 +313,7 @@ pub fn unshift_char(s: &mut ~str, ch: char) {\n  * * chars_to_trim - A vector of chars\n  *\n  */\n-pub fn trim_left_chars(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n+pub fn trim_left_chars<'a>(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n     if chars_to_trim.is_empty() { return s; }\n \n     match find(s, |c| !chars_to_trim.contains(&c)) {\n@@ -331,7 +331,7 @@ pub fn trim_left_chars(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n  * * chars_to_trim - A vector of chars\n  *\n  */\n-pub fn trim_right_chars(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n+pub fn trim_right_chars<'a>(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n     if chars_to_trim.is_empty() { return s; }\n \n     match rfind(s, |c| !chars_to_trim.contains(&c)) {\n@@ -352,20 +352,20 @@ pub fn trim_right_chars(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n  * * chars_to_trim - A vector of chars\n  *\n  */\n-pub fn trim_chars(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n+pub fn trim_chars<'a>(s: &'a str, chars_to_trim: &[char]) -> &'a str {\n     trim_left_chars(trim_right_chars(s, chars_to_trim), chars_to_trim)\n }\n \n /// Returns a string with leading whitespace removed\n-pub fn trim_left(s: &'a str) -> &'a str {\n+pub fn trim_left<'a>(s: &'a str) -> &'a str {\n     match find(s, |c| !char::is_whitespace(c)) {\n       None => \"\",\n       Some(first) => unsafe { raw::slice_bytes(s, first, len(s)) }\n     }\n }\n \n /// Returns a string with trailing whitespace removed\n-pub fn trim_right(s: &'a str) -> &'a str {\n+pub fn trim_right<'a>(s: &'a str) -> &'a str {\n     match rfind(s, |c| !char::is_whitespace(c)) {\n       None => \"\",\n       Some(last) => {\n@@ -376,7 +376,7 @@ pub fn trim_right(s: &'a str) -> &'a str {\n }\n \n /// Returns a string with leading and trailing whitespace removed\n-pub fn trim(s: &'a str) -> &'a str { trim_left(trim_right(s)) }\n+pub fn trim<'a>(s: &'a str) -> &'a str { trim_left(trim_right(s)) }\n \n /*\n Section: Transforming strings\n@@ -418,7 +418,7 @@ pub fn to_chars(s: &str) -> ~[char] {\n  * Returns a slice pointing at `n` characters starting from byte offset\n  * `begin`.\n  */\n-pub fn substr(s: &'a str, begin: uint, n: uint) -> &'a str {\n+pub fn substr<'a>(s: &'a str, begin: uint, n: uint) -> &'a str {\n     slice(s, begin, begin + count_bytes(s, begin, n))\n }\n \n@@ -428,7 +428,7 @@ pub fn substr(s: &'a str, begin: uint, n: uint) -> &'a str {\n  * Fails when `begin` and `end` do not point to valid characters or beyond\n  * the last character of the string\n  */\n-pub fn slice(s: &'a str, begin: uint, end: uint) -> &'a str {\n+pub fn slice<'a>(s: &'a str, begin: uint, end: uint) -> &'a str {\n     fail_unless!(is_char_boundary(s, begin));\n     fail_unless!(is_char_boundary(s, end));\n     unsafe { raw::slice_bytes(s, begin, end) }\n@@ -528,7 +528,7 @@ fn each_split_inner(s: &'a str, sepfn: &fn(cc: char) -> bool, count: uint,\n }\n \n // See Issue #1932 for why this is a naive search\n-fn iter_matches(s: &'a str, sep: &'b str, f: &fn(uint, uint) -> bool) {\n+fn iter_matches<'a,'b>(s: &'a str, sep: &'b str, f: &fn(uint, uint) -> bool) {\n     let sep_len = len(sep), l = len(s);\n     fail_unless!(sep_len > 0u);\n     let mut i = 0u, match_start = 0u, match_i = 0u;\n@@ -555,7 +555,9 @@ fn iter_matches(s: &'a str, sep: &'b str, f: &fn(uint, uint) -> bool) {\n     }\n }\n \n-fn iter_between_matches(s: &'a str, sep: &'b str, f: &fn(uint, uint) -> bool) {\n+fn iter_between_matches<'a,'b>(s: &'a str,\n+                               sep: &'b str,\n+                               f: &fn(uint, uint) -> bool) {\n     let mut last_end = 0u;\n     for iter_matches(s, sep) |from, to| {\n         if !f(last_end, from) { return; }\n@@ -575,13 +577,17 @@ fn iter_between_matches(s: &'a str, sep: &'b str, f: &fn(uint, uint) -> bool) {\n  * fail_unless!(v == [\"\", \"XXX\", \"YYY\", \"\"]);\n  * ~~~\n  */\n-pub fn each_split_str(s: &'a str, sep: &'b str, it: &fn(&'a str) -> bool) {\n+pub fn each_split_str<'a,'b>(s: &'a str,\n+                             sep: &'b str,\n+                             it: &fn(&'a str) -> bool) {\n     for iter_between_matches(s, sep) |from, to| {\n         if !it( unsafe { raw::slice_bytes(s, from, to) } ) { return; }\n     }\n }\n \n-pub fn each_split_str_nonempty(s: &'a str, sep: &'b str, it: &fn(&'a str) -> bool) {\n+pub fn each_split_str_nonempty<'a,'b>(s: &'a str,\n+                                      sep: &'b str,\n+                                      it: &fn(&'a str) -> bool) {\n     for iter_between_matches(s, sep) |from, to| {\n         if to > from {\n             if !it( unsafe { raw::slice_bytes(s, from, to) } ) { return; }\n@@ -823,7 +829,7 @@ fn cmp(a: &str, b: &str) -> Ordering {\n }\n \n #[cfg(notest)]\n-impl TotalOrd for &'self str {\n+impl<'self> TotalOrd for &'self str {\n     fn cmp(&self, other: & &'self str) -> Ordering { cmp(*self, *other) }\n }\n \n@@ -869,7 +875,7 @@ fn gt(a: &str, b: &str) -> bool {\n }\n \n #[cfg(notest)]\n-impl Eq for &'self str {\n+impl<'self> Eq for &'self str {\n     #[inline(always)]\n     fn eq(&self, other: & &'self str) -> bool {\n         eq_slice((*self), (*other))\n@@ -911,7 +917,7 @@ impl Ord for ~str {\n }\n \n #[cfg(notest)]\n-impl Ord for &'self str {\n+impl<'self> Ord for &'self str {\n     #[inline(always)]\n     fn lt(&self, other: & &'self str) -> bool { lt((*self), (*other)) }\n     #[inline(always)]\n@@ -935,7 +941,7 @@ impl Ord for @str {\n }\n \n #[cfg(notest)]\n-impl Equiv<~str> for &'self str {\n+impl<'self> Equiv<~str> for &'self str {\n     #[inline(always)]\n     fn equiv(&self, other: &~str) -> bool { eq_slice(*self, *other) }\n }\n@@ -1370,7 +1376,7 @@ pub fn rfind_between(s: &str, start: uint, end: uint, f: &fn(char) -> bool) -> O\n }\n \n // Utility used by various searching functions\n-fn match_at(haystack: &'a str, needle: &'b str, at: uint) -> bool {\n+fn match_at<'a,'b>(haystack: &'a str, needle: &'b str, at: uint) -> bool {\n     let mut i = at;\n     for each(needle) |c| { if haystack[i] != c { return false; } i += 1u; }\n     return true;\n@@ -1389,7 +1395,7 @@ fn match_at(haystack: &'a str, needle: &'b str, at: uint) -> bool {\n  * An `option` containing the byte index of the first matching substring\n  * or `none` if there is no match\n  */\n-pub fn find_str(haystack: &'a str, needle: &'b str) -> Option<uint> {\n+pub fn find_str<'a,'b>(haystack: &'a str, needle: &'b str) -> Option<uint> {\n     find_str_between(haystack, needle, 0u, len(haystack))\n }\n \n@@ -1412,7 +1418,10 @@ pub fn find_str(haystack: &'a str, needle: &'b str) -> Option<uint> {\n  *\n  * `start` must be less than or equal to `len(s)`\n  */\n-pub fn find_str_from(haystack: &'a str, needle: &'b str, start: uint) -> Option<uint> {\n+pub fn find_str_from<'a,'b>(haystack: &'a str,\n+                            needle: &'b str,\n+                            start: uint)\n+                         -> Option<uint> {\n     find_str_between(haystack, needle, start, len(haystack))\n }\n \n@@ -1436,8 +1445,11 @@ pub fn find_str_from(haystack: &'a str, needle: &'b str, start: uint) -> Option<\n  * `start` must be less than or equal to `end` and `end` must be less than\n  * or equal to `len(s)`.\n  */\n-pub fn find_str_between(haystack: &'a str, needle: &'b str, start: uint, end:uint)\n-        -> Option<uint> {\n+pub fn find_str_between<'a,'b>(haystack: &'a str,\n+                               needle: &'b str,\n+                               start: uint,\n+                               end:uint)\n+                            -> Option<uint> {\n     // See Issue #1932 for why this is a naive search\n     fail_unless!(end <= len(haystack));\n     let needle_len = len(needle);\n@@ -1461,7 +1473,7 @@ pub fn find_str_between(haystack: &'a str, needle: &'b str, start: uint, end:uin\n  * * haystack - The string to look in\n  * * needle - The string to look for\n  */\n-pub fn contains(haystack: &'a str, needle: &'b str) -> bool {\n+pub fn contains<'a,'b>(haystack: &'a str, needle: &'b str) -> bool {\n     find_str(haystack, needle).is_some()\n }\n \n@@ -1485,7 +1497,7 @@ pub fn contains_char(haystack: &str, needle: char) -> bool {\n  * * haystack - The string to look in\n  * * needle - The string to look for\n  */\n-pub fn starts_with(haystack: &'a str, needle: &'b str) -> bool {\n+pub fn starts_with<'a,'b>(haystack: &'a str, needle: &'b str) -> bool {\n     let haystack_len = len(haystack), needle_len = len(needle);\n     if needle_len == 0u { true }\n     else if needle_len > haystack_len { false }\n@@ -1500,7 +1512,7 @@ pub fn starts_with(haystack: &'a str, needle: &'b str) -> bool {\n  * * haystack - The string to look in\n  * * needle - The string to look for\n  */\n-pub fn ends_with(haystack: &'a str, needle: &'b str) -> bool {\n+pub fn ends_with<'a,'b>(haystack: &'a str, needle: &'b str) -> bool {\n     let haystack_len = len(haystack), needle_len = len(needle);\n     if needle_len == 0u { true }\n     else if needle_len > haystack_len { false }\n@@ -1681,7 +1693,7 @@ pub fn count_chars(s: &str, start: uint, end: uint) -> uint {\n }\n \n /// Counts the number of bytes taken by the `n` in `s` starting from `start`.\n-pub fn count_bytes(s: &'b str, start: uint, n: uint) -> uint {\n+pub fn count_bytes<'b>(s: &'b str, start: uint, n: uint) -> uint {\n     fail_unless!(is_char_boundary(s, start));\n     let mut end = start, cnt = n;\n     let l = len(s);\n@@ -1921,7 +1933,7 @@ pub fn as_bytes<T>(s: &const ~str, f: &fn(&~[u8]) -> T) -> T {\n  *\n  * The byte slice does not include the null terminator.\n  */\n-pub fn as_bytes_slice(s: &'a str) -> &'a [u8] {\n+pub fn as_bytes_slice<'a>(s: &'a str) -> &'a [u8] {\n     unsafe {\n         let (ptr, len): (*u8, uint) = ::cast::reinterpret_cast(&s);\n         let outgoing_tuple: (*u8, uint) = (ptr, len - 1);\n@@ -2229,7 +2241,7 @@ pub mod traits {\n     use ops::Add;\n     use str::append;\n \n-    impl Add<&'self str,~str> for ~str {\n+    impl<'self> Add<&'self str,~str> for ~str {\n         #[inline(always)]\n         fn add(&self, rhs: & &'self str) -> ~str {\n             append(copy *self, (*rhs))\n@@ -2243,7 +2255,7 @@ pub mod traits {}\n pub trait StrSlice<'self> {\n     fn all(&self, it: &fn(char) -> bool) -> bool;\n     fn any(&self, it: &fn(char) -> bool) -> bool;\n-    fn contains(&self, needle: &'a str) -> bool;\n+    fn contains<'a>(&self, needle: &'a str) -> bool;\n     fn contains_char(&self, needle: char) -> bool;\n     fn each(&self, it: &fn(u8) -> bool);\n     fn eachi(&self, it: &fn(uint, u8) -> bool);\n@@ -2262,8 +2274,8 @@ pub trait StrSlice<'self> {\n     fn slice(&self, begin: uint, end: uint) -> &'self str;\n     fn each_split(&self, sepfn: &fn(char) -> bool, it: &fn(&'self str) -> bool);\n     fn each_split_char(&self, sep: char, it: &fn(&'self str) -> bool);\n-    fn each_split_str(&self, sep: &'a str, it: &fn(&'self str) -> bool);\n-    fn starts_with(&self, needle: &'a str) -> bool;\n+    fn each_split_str<'a>(&self, sep: &'a str, it: &fn(&'self str) -> bool);\n+    fn starts_with<'a>(&self, needle: &'a str) -> bool;\n     fn substr(&self, begin: uint, n: uint) -> &'self str;\n     fn to_lower(&self) -> ~str;\n     fn to_upper(&self) -> ~str;\n@@ -2283,7 +2295,7 @@ pub trait StrSlice<'self> {\n }\n \n /// Extension methods for strings\n-impl StrSlice<'self> for &'self str {\n+impl<'self> StrSlice<'self> for &'self str {\n     /**\n      * Return true if a predicate matches all characters or if the string\n      * contains no characters\n@@ -2298,7 +2310,7 @@ impl StrSlice<'self> for &'self str {\n     fn any(&self, it: &fn(char) -> bool) -> bool { any(*self, it) }\n     /// Returns true if one string contains another\n     #[inline]\n-    fn contains(&self, needle: &'a str) -> bool {\n+    fn contains<'a>(&self, needle: &'a str) -> bool {\n         contains(*self, needle)\n     }\n     /// Returns true if a string contains a char\n@@ -2397,12 +2409,12 @@ impl StrSlice<'self> for &'self str {\n      * string\n      */\n     #[inline]\n-    fn each_split_str(&self, sep: &'a str, it: &fn(&'self str) -> bool)  {\n+    fn each_split_str<'a>(&self, sep: &'a str, it: &fn(&'self str) -> bool) {\n         each_split_str(*self, sep, it)\n     }\n     /// Returns true if one string starts with another\n     #[inline]\n-    fn starts_with(&self, needle: &'a str) -> bool {\n+    fn starts_with<'a>(&self, needle: &'a str) -> bool {\n         starts_with(*self, needle)\n     }\n     /**\n@@ -2710,7 +2722,7 @@ mod tests {\n \n     #[test]\n     fn test_split_str() {\n-        fn t(s: &str, sep: &'a str, u: &[~str]) {\n+        fn t<'a>(s: &str, sep: &'a str, u: &[~str]) {\n             let mut v = ~[];\n             for each_split_str(s, sep) |s| { v.push(s.to_owned()) }\n             fail_unless!(vec::all2(v, u, |a,b| a == b));"}, {"sha": "f8905e4faa79629be320a83b2892cfbc575de182", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -19,7 +19,7 @@ use libc::{c_void, c_char, size_t};\n use repr;\n use str;\n \n-pub type FreeGlue = &'self fn(*TypeDesc, *c_void);\n+pub type FreeGlue<'self> = &'self fn(*TypeDesc, *c_void);\n \n // Corresponds to runtime type_desc type\n pub struct TypeDesc {"}, {"sha": "e386f93a4290080802f6ea84eec8a31350a18f8e", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -44,7 +44,7 @@ use task::rt;\n  *\n  * These two cases aside, the interface is safe.\n  */\n-pub type LocalDataKey<T> = &'self fn(v: @T);\n+pub type LocalDataKey<'self,T> = &'self fn(v: @T);\n \n /**\n  * Remove a task-local data value from the table, returning the"}, {"sha": "cc075ed2a9291f6144b814c80e565c52f1565348", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -122,7 +122,7 @@ struct TaskGroupData {\n }\n type TaskGroupArc = unstable::Exclusive<Option<TaskGroupData>>;\n \n-type TaskGroupInner = &'self mut Option<TaskGroupData>;\n+type TaskGroupInner<'self> = &'self mut Option<TaskGroupData>;\n \n // A taskgroup is 'dead' when nothing can cause it to fail; only members can.\n fn taskgroup_is_dead(tg: &TaskGroupData) -> bool {"}, {"sha": "7b4b6994e50a57cb71d248cd4c3ad1533f488a46", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -19,7 +19,7 @@ use io::Writer;\n use option::{None, Option, Some};\n use str;\n \n-pub type Cb = &'self fn(buf: &const [u8]) -> bool;\n+pub type Cb<'self> = &'self fn(buf: &const [u8]) -> bool;\n \n /**\n  * A trait to implement in order to make a type hashable;\n@@ -197,7 +197,7 @@ impl IterBytes for int {\n     }\n }\n \n-impl<A:IterBytes> IterBytes for &'self [A] {\n+impl<'self,A:IterBytes> IterBytes for &'self [A] {\n     #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         for (*self).each |elt| {\n@@ -231,7 +231,7 @@ impl<A:IterBytes,B:IterBytes,C:IterBytes> IterBytes for (A,B,C) {\n }\n \n // Move this to vec, probably.\n-fn borrow<A>(a: &'x [A]) -> &'x [A] {\n+fn borrow<'x,A>(a: &'x [A]) -> &'x [A] {\n     a\n }\n \n@@ -352,7 +352,7 @@ pub fn iter_bytes_7<A: IterBytes,\n     g.iter_bytes(lsb0, |bytes| {flag = z(bytes); flag});\n }\n \n-impl IterBytes for &'self str {\n+impl<'self> IterBytes for &'self str {\n     #[inline(always)]\n     fn iter_bytes(&self, _lsb0: bool, f: Cb) {\n         do str::byte_slice(*self) |bytes| {\n@@ -389,7 +389,7 @@ impl<A:IterBytes> IterBytes for Option<A> {\n     }\n }\n \n-impl<A:IterBytes> IterBytes for &'self A {\n+impl<'self,A:IterBytes> IterBytes for &'self A {\n     #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (**self).iter_bytes(lsb0, f);"}, {"sha": "fa4074047b90a1402fb755268a8a7e5b12bd051e", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -69,7 +69,7 @@ impl<A:ToStr,B:ToStr,C:ToStr> ToStr for (A, B, C) {\n     }\n }\n \n-impl<A:ToStr> ToStr for &'self [A] {\n+impl<'self,A:ToStr> ToStr for &'self [A] {\n     #[inline(always)]\n     fn to_str(&self) -> ~str {\n         unsafe {"}, {"sha": "52298992bd17f894fd33955910cde61087a036eb", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -28,7 +28,7 @@ pub struct TrieMap<T> {\n     priv length: uint\n }\n \n-impl<T> BaseIter<(uint, &'self T)> for TrieMap<T> {\n+impl<'self,T> BaseIter<(uint, &'self T)> for TrieMap<T> {\n     /// Visit all key-value pairs in order\n     #[inline(always)]\n     fn each(&self, f: &fn(&(uint, &'self T)) -> bool) {\n@@ -38,7 +38,7 @@ impl<T> BaseIter<(uint, &'self T)> for TrieMap<T> {\n     fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n-impl<T> ReverseIter<(uint, &'self T)> for TrieMap<T> {\n+impl<'self,T> ReverseIter<(uint, &'self T)> for TrieMap<T> {\n     /// Visit all key-value pairs in reverse order\n     #[inline(always)]\n     fn each_reverse(&self, f: &fn(&(uint, &'self T)) -> bool) {\n@@ -282,7 +282,8 @@ fn chunk(n: uint, idx: uint) -> uint {\n     (n >> sh) & MASK\n }\n \n-fn find_mut<T>(child: &'r mut Child<T>, key: uint, idx: uint) -> Option<&'r mut T> {\n+fn find_mut<'r, T>(child: &'r mut Child<T>, key: uint, idx: uint)\n+                -> Option<&'r mut T> {\n     unsafe { // FIXME(#4903)---requires flow-sensitive borrow checker\n         (match *child {\n             External(_, ref value) => Some(cast::transmute_mut(value)),"}, {"sha": "6fbcee959cea5c99d3e8bfe25b98529e20acf7b3", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -71,7 +71,7 @@ pub trait ExtendedTupleOps<A,B> {\n     fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C];\n }\n \n-impl<A:Copy,B:Copy> ExtendedTupleOps<A,B> for (&'self [A], &'self [B]) {\n+impl<'self,A:Copy,B:Copy> ExtendedTupleOps<A,B> for (&'self [A], &'self [B]) {\n     #[inline(always)]\n     fn zip(&self) -> ~[(A, B)] {\n         match *self {"}, {"sha": "b5cf4766af0461e262188298702983fc28e276ec", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -170,7 +170,7 @@ pub unsafe fn get_shared_mutable_state<T:Owned>(\n     }\n }\n #[inline(always)]\n-pub unsafe fn get_shared_immutable_state<T:Owned>(\n+pub unsafe fn get_shared_immutable_state<'a,T:Owned>(\n         rc: &'a SharedMutableState<T>) -> &'a T {\n     unsafe {\n         let ptr: ~ArcData<T> = cast::reinterpret_cast(&(*rc).data);"}, {"sha": "93cc4a4342d8ed671a9cd685f6668b2cb700b33b", "filename": "src/libcore/unstable/finally.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Ffinally.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -31,7 +31,7 @@ pub trait Finally<T> {\n     fn finally(&self, dtor: &fn()) -> T;\n }\n \n-impl<T> Finally<T> for &'self fn() -> T {\n+impl<'self,T> Finally<T> for &'self fn() -> T {\n     fn finally(&self, dtor: &fn()) -> T {\n         let _d = Finallyalizer {\n             dtor: dtor"}, {"sha": "f160a350e0dd587b94dd41b1a23d50427783e071", "filename": "src/libcore/unstable/global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -42,7 +42,7 @@ use sys::Closure;\n #[cfg(test)] use task::spawn;\n #[cfg(test)] use uint;\n \n-pub type GlobalDataKey<T> = &'self fn(v: T);\n+pub type GlobalDataKey<'self,T> = &'self fn(v: T);\n \n pub unsafe fn global_data_clone_create<T:Owned + Clone>(\n     key: GlobalDataKey<T>, create: &fn() -> ~T) -> T {"}, {"sha": "702ae73852ee37b6117d0e2fc8ccab9efeb99944", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -225,46 +225,46 @@ pub fn build_sized_opt<A>(size: Option<uint>,\n // Accessors\n \n /// Returns the first element of a vector\n-pub fn head<T>(v: &'r [T]) -> &'r T {\n+pub fn head<'r,T>(v: &'r [T]) -> &'r T {\n     if v.len() == 0 { fail!(~\"head: empty vector\") }\n     &v[0]\n }\n \n /// Returns `Some(x)` where `x` is the first element of the slice `v`,\n /// or `None` if the vector is empty.\n-pub fn head_opt<T>(v: &'r [T]) -> Option<&'r T> {\n+pub fn head_opt<'r,T>(v: &'r [T]) -> Option<&'r T> {\n     if v.len() == 0 { None } else { Some(&v[0]) }\n }\n \n /// Returns a vector containing all but the first element of a slice\n-pub fn tail<T>(v: &'r [T]) -> &'r [T] { slice(v, 1, v.len()) }\n+pub fn tail<'r,T>(v: &'r [T]) -> &'r [T] { slice(v, 1, v.len()) }\n \n /// Returns a vector containing all but the first `n` elements of a slice\n-pub fn tailn<T>(v: &'r [T], n: uint) -> &'r [T] { slice(v, n, v.len()) }\n+pub fn tailn<'r,T>(v: &'r [T], n: uint) -> &'r [T] { slice(v, n, v.len()) }\n \n /// Returns a vector containing all but the last element of a slice\n-pub fn init<T>(v: &'r [T]) -> &'r [T] { slice(v, 0, v.len() - 1) }\n+pub fn init<'r,T>(v: &'r [T]) -> &'r [T] { slice(v, 0, v.len() - 1) }\n \n /// Returns a vector containing all but the last `n' elements of a slice\n-pub fn initn<T>(v: &'r [T], n: uint) -> &'r [T] {\n+pub fn initn<'r,T>(v: &'r [T], n: uint) -> &'r [T] {\n     slice(v, 0, v.len() - n)\n }\n \n /// Returns the last element of the slice `v`, failing if the slice is empty.\n-pub fn last<T>(v: &'r [T]) -> &'r T {\n+pub fn last<'r,T>(v: &'r [T]) -> &'r T {\n     if v.len() == 0 { fail!(~\"last: empty vector\") }\n     &v[v.len() - 1]\n }\n \n /// Returns `Some(x)` where `x` is the last element of the slice `v`, or\n /// `None` if the vector is empty.\n-pub fn last_opt<T>(v: &'r [T]) -> Option<&'r T> {\n+pub fn last_opt<'r,T>(v: &'r [T]) -> Option<&'r T> {\n     if v.len() == 0 { None } else { Some(&v[v.len() - 1]) }\n }\n \n /// Return a slice that points into another slice.\n #[inline(always)]\n-pub fn slice<T>(v: &'r [T], start: uint, end: uint) -> &'r [T] {\n+pub fn slice<'r,T>(v: &'r [T], start: uint, end: uint) -> &'r [T] {\n     fail_unless!(start <= end);\n     fail_unless!(end <= len(v));\n     do as_imm_buf(v) |p, _len| {\n@@ -278,7 +278,8 @@ pub fn slice<T>(v: &'r [T], start: uint, end: uint) -> &'r [T] {\n \n /// Return a slice that points into another slice.\n #[inline(always)]\n-pub fn mut_slice<T>(v: &'r mut [T], start: uint, end: uint) -> &'r mut [T] {\n+pub fn mut_slice<'r,T>(v: &'r mut [T], start: uint, end: uint)\n+                    -> &'r mut [T] {\n     fail_unless!(start <= end);\n     fail_unless!(end <= v.len());\n     do as_mut_buf(v) |p, _len| {\n@@ -292,8 +293,8 @@ pub fn mut_slice<T>(v: &'r mut [T], start: uint, end: uint) -> &'r mut [T] {\n \n /// Return a slice that points into another slice.\n #[inline(always)]\n-pub fn const_slice<T>(v: &'r const [T], start: uint, end: uint)\n-                   -> &'r const [T] {\n+pub fn const_slice<'r,T>(v: &'r const [T], start: uint, end: uint)\n+                      -> &'r const [T] {\n     fail_unless!(start <= end);\n     fail_unless!(end <= len(v));\n     do as_const_buf(v) |p, _len| {\n@@ -1343,7 +1344,7 @@ pub fn reversed<T:Copy>(v: &const [T]) -> ~[T] {\n  * ~~~\n  */\n #[inline(always)]\n-pub fn each<T>(v: &'r [T], f: &fn(&'r T) -> bool) {\n+pub fn each<'r,T>(v: &'r [T], f: &fn(&'r T) -> bool) {\n     //             ^^^^\n     // NB---this CANNOT be &const [T]!  The reason\n     // is that you are passing it to `f()` using\n@@ -1367,7 +1368,7 @@ pub fn each<T>(v: &'r [T], f: &fn(&'r T) -> bool) {\n /// a vector with mutable contents and you would like\n /// to mutate the contents as you iterate.\n #[inline(always)]\n-pub fn each_mut<T>(v: &'r mut [T], f: &fn(elem: &'r mut T) -> bool) {\n+pub fn each_mut<'r,T>(v: &'r mut [T], f: &fn(elem: &'r mut T) -> bool) {\n     let mut i = 0;\n     let n = v.len();\n     while i < n {\n@@ -1398,7 +1399,7 @@ pub fn each_const<T>(v: &const [T], f: &fn(elem: &const T) -> bool) {\n  * Return true to continue, false to break.\n  */\n #[inline(always)]\n-pub fn eachi<T>(v: &'r [T], f: &fn(uint, v: &'r T) -> bool) {\n+pub fn eachi<'r,T>(v: &'r [T], f: &fn(uint, v: &'r T) -> bool) {\n     let mut i = 0;\n     for each(v) |p| {\n         if !f(i, p) { return; }\n@@ -1412,7 +1413,7 @@ pub fn eachi<T>(v: &'r [T], f: &fn(uint, v: &'r T) -> bool) {\n  * Return true to continue, false to break.\n  */\n #[inline(always)]\n-pub fn each_reverse<T>(v: &'r [T], blk: &fn(v: &'r T) -> bool) {\n+pub fn each_reverse<'r,T>(v: &'r [T], blk: &fn(v: &'r T) -> bool) {\n     eachi_reverse(v, |_i, v| blk(v))\n }\n \n@@ -1422,7 +1423,7 @@ pub fn each_reverse<T>(v: &'r [T], blk: &fn(v: &'r T) -> bool) {\n  * Return true to continue, false to break.\n  */\n #[inline(always)]\n-pub fn eachi_reverse<T>(v: &'r [T], blk: &fn(i: uint, v: &'r T) -> bool) {\n+pub fn eachi_reverse<'r,T>(v: &'r [T], blk: &fn(i: uint, v: &'r T) -> bool) {\n     let mut i = v.len();\n     while i > 0 {\n         i -= 1;\n@@ -1560,7 +1561,7 @@ fn eq<T:Eq>(a: &[T], b: &[T]) -> bool {\n }\n \n #[cfg(notest)]\n-impl<T:Eq> Eq for &'self [T] {\n+impl<'self,T:Eq> Eq for &'self [T] {\n     #[inline(always)]\n     fn eq(&self, other: & &'self [T]) -> bool { eq((*self), (*other)) }\n     #[inline(always)]\n@@ -1585,7 +1586,7 @@ impl<T:Eq> Eq for @[T] {\n }\n \n #[cfg(notest)]\n-impl<T:Eq> Equiv<~[T]> for &'self [T] {\n+impl<'self,T:Eq> Equiv<~[T]> for &'self [T] {\n     #[inline(always)]\n     fn equiv(&self, other: &~[T]) -> bool { eq(*self, *other) }\n }\n@@ -1607,7 +1608,7 @@ fn cmp<T: TotalOrd>(a: &[T], b: &[T]) -> Ordering {\n }\n \n #[cfg(notest)]\n-impl<T: TotalOrd> TotalOrd for &'self [T] {\n+impl<'self,T:TotalOrd> TotalOrd for &'self [T] {\n     #[inline(always)]\n     fn cmp(&self, other: & &'self [T]) -> Ordering { cmp(*self, *other) }\n }\n@@ -1644,7 +1645,7 @@ fn ge<T:Ord>(a: &[T], b: &[T]) -> bool { !lt(a, b) }\n fn gt<T:Ord>(a: &[T], b: &[T]) -> bool { lt(b, a)  }\n \n #[cfg(notest)]\n-impl<T:Ord> Ord for &'self [T] {\n+impl<'self,T:Ord> Ord for &'self [T] {\n     #[inline(always)]\n     fn lt(&self, other: & &'self [T]) -> bool { lt((*self), (*other)) }\n     #[inline(always)]\n@@ -1685,15 +1686,15 @@ pub mod traits {\n     use ops::Add;\n     use vec::append;\n \n-    impl<T:Copy> Add<&'self const [T],~[T]> for ~[T] {\n+    impl<'self,T:Copy> Add<&'self const [T],~[T]> for ~[T] {\n         #[inline(always)]\n         fn add(&self, rhs: & &'self const [T]) -> ~[T] {\n             append(copy *self, (*rhs))\n         }\n     }\n }\n \n-impl<T> Container for &'self const [T] {\n+impl<'self,T> Container for &'self const [T] {\n     /// Returns true if a vector contains no elements\n     #[inline]\n     fn is_empty(&const self) -> bool { is_empty(*self) }\n@@ -1708,7 +1709,7 @@ pub trait CopyableVector<T> {\n }\n \n /// Extension methods for vectors\n-impl<T: Copy> CopyableVector<T> for &'self const [T] {\n+impl<'self,T:Copy> CopyableVector<T> for &'self const [T] {\n     /// Returns a copy of `v`.\n     #[inline]\n     fn to_owned(&self) -> ~[T] {\n@@ -1747,7 +1748,7 @@ pub trait ImmutableVector<T> {\n }\n \n /// Extension methods for vectors\n-impl<T> ImmutableVector<T> for &'self [T] {\n+impl<'self,T> ImmutableVector<T> for &'self [T] {\n     /// Return a slice that points into another slice.\n     #[inline]\n     fn slice(&self, start: uint, end: uint) -> &'self [T] {\n@@ -1862,7 +1863,7 @@ pub trait ImmutableEqVector<T:Eq> {\n     fn rposition_elem(&self, t: &T) -> Option<uint>;\n }\n \n-impl<T:Eq> ImmutableEqVector<T> for &'self [T] {\n+impl<'self,T:Eq> ImmutableEqVector<T> for &'self [T] {\n     /**\n      * Find the first index matching some predicate\n      *\n@@ -1907,7 +1908,7 @@ pub trait ImmutableCopyableVector<T> {\n }\n \n /// Extension methods for vectors\n-impl<T:Copy> ImmutableCopyableVector<T> for &'self [T] {\n+impl<'self,T:Copy> ImmutableCopyableVector<T> for &'self [T] {\n     /**\n      * Construct a new vector from the elements of a vector for which some\n      * predicate holds.\n@@ -2309,7 +2310,7 @@ pub mod bytes {\n // ___________________________________________________________________________\n // ITERATION TRAIT METHODS\n \n-impl<A> iter::BaseIter<A> for &'self [A] {\n+impl<'self,A> iter::BaseIter<A> for &'self [A] {\n     #[inline(always)]\n     fn each(&self, blk: &fn(v: &'self A) -> bool) { each(*self, blk) }\n     #[inline(always)]\n@@ -2332,7 +2333,7 @@ impl<A> iter::BaseIter<A> for @[A] {\n     fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n-impl<A> iter::MutableIter<A> for &'self mut [A] {\n+impl<'self,A> iter::MutableIter<A> for &'self mut [A] {\n     #[inline(always)]\n     fn each_mut(&mut self, blk: &fn(v: &'self mut A) -> bool) {\n         each_mut(*self, blk)\n@@ -2355,7 +2356,7 @@ impl<A> iter::MutableIter<A> for @mut [A] {\n     }\n }\n \n-impl<A> iter::ExtendedIter<A> for &'self [A] {\n+impl<'self,A> iter::ExtendedIter<A> for &'self [A] {\n     pub fn eachi(&self, blk: &fn(uint, v: &A) -> bool) {\n         iter::eachi(self, blk)\n     }\n@@ -2432,7 +2433,7 @@ impl<A> iter::ExtendedIter<A> for @[A] {\n     }\n }\n \n-impl<A:Eq> iter::EqIter<A> for &'self [A] {\n+impl<'self,A:Eq> iter::EqIter<A> for &'self [A] {\n     pub fn contains(&self, x: &A) -> bool { iter::contains(self, x) }\n     pub fn count(&self, x: &A) -> uint { iter::count(self, x) }\n }\n@@ -2449,7 +2450,7 @@ impl<A:Eq> iter::EqIter<A> for @[A] {\n     pub fn count(&self, x: &A) -> uint { iter::count(self, x) }\n }\n \n-impl<A:Copy> iter::CopyableIter<A> for &'self [A] {\n+impl<'self,A:Copy> iter::CopyableIter<A> for &'self [A] {\n     fn filter_to_vec(&self, pred: &fn(&A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n     }\n@@ -2481,7 +2482,7 @@ impl<A:Copy> iter::CopyableIter<A> for @[A] {\n     }\n }\n \n-impl<A:Copy + Ord> iter::CopyableOrderedIter<A> for &'self [A] {\n+impl<'self,A:Copy + Ord> iter::CopyableOrderedIter<A> for &'self [A] {\n     fn min(&self) -> A { iter::min(self) }\n     fn max(&self) -> A { iter::max(self) }\n }\n@@ -2498,7 +2499,7 @@ impl<A:Copy + Ord> iter::CopyableOrderedIter<A> for @[A] {\n     fn max(&self) -> A { iter::max(self) }\n }\n \n-impl<A:Copy> iter::CopyableNonstrictIter<A> for &'self [A] {\n+impl<'self,A:Copy> iter::CopyableNonstrictIter<A> for &'self [A] {\n     fn each_val(&const self, f: &fn(A) -> bool) {\n         let mut i = 0;\n         while i < self.len() {"}, {"sha": "d407cf216a88ec2f7d8452a67a7390e9353e43ca", "filename": "src/librust/rust.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -37,12 +37,12 @@ impl ValidUsage {\n     }\n }\n \n-enum Action {\n+enum Action<'self> {\n     Exec(&'self str),\n     Call(&'self fn(args: &[~str]) -> ValidUsage)\n }\n \n-enum UsageSource {\n+enum UsageSource<'self> {\n     UsgExec(&'self str),\n     UsgStr(&'self str)\n }"}, {"sha": "14b455651a571dcb2985c93ec6ca8b89dbc31098", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -66,7 +66,7 @@ fn lookup_hash(d: ebml::Doc, eq_fn: &fn(x:&[u8]) -> bool, hash: uint) ->\n     None\n }\n \n-pub type GetCrateDataCb = &'self fn(ast::crate_num) -> cmd;\n+pub type GetCrateDataCb<'self> = &'self fn(ast::crate_num) -> cmd;\n \n pub fn maybe_find_item(item_id: int, items: ebml::Doc) -> Option<ebml::Doc> {\n     fn eq_item(bytes: &[u8], item_id: int) -> bool {\n@@ -547,7 +547,7 @@ pub fn get_item_path(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n     item_path(intr, lookup_item(id, cdata.data))\n }\n \n-pub type decode_inlined_item = &'self fn(\n+pub type decode_inlined_item<'self> = &'self fn(\n     cdata: @cstore::crate_metadata,\n     tcx: ty::ctxt,\n     path: ast_map::path,"}, {"sha": "1e58ac5e94a84c5d2956dce68218bfaf7b7a282d", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -21,7 +21,7 @@ use core::result::Result;\n use core::result;\n use core::str;\n \n-pub type pick<T> = &'self fn(path: &Path) -> Option<T>;\n+pub type pick<'self, T> = &'self fn(path: &Path) -> Option<T>;\n \n pub fn pick_file(file: Path, path: &Path) -> Option<Path> {\n     if path.file_path() == file { option::Some(copy *path) }"}, {"sha": "8b88b39a84c23b5c40a4b4a82edcfd4ce0a4ce42", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -49,7 +49,8 @@ pub enum DefIdSource {\n     // Identifies a type parameter (`fn foo<X>() { ... }`).\n     TypeParameter\n }\n-type conv_did = &'self fn(source: DefIdSource, ast::def_id) -> ast::def_id;\n+type conv_did<'self> =\n+    &'self fn(source: DefIdSource, ast::def_id) -> ast::def_id;\n \n pub struct PState {\n     data: @~[u8],"}, {"sha": "3056edea233fb431ce1669919db46059f21698b9", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -63,7 +63,7 @@ pub impl BorrowckCtxt {\n     }\n }\n \n-struct PreserveCtxt {\n+struct PreserveCtxt<'self> {\n     bccx: &'self BorrowckCtxt,\n \n     // the region scope for which we must preserve the memory"}, {"sha": "f2534bad58853dc7cf11db42514ec19a81358e2f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -311,7 +311,7 @@ fn LanguageItemCollector<'r>(crate: @crate,\n     }\n }\n \n-struct LanguageItemCollector {\n+struct LanguageItemCollector<'self> {\n     items: &'self mut LanguageItems,\n \n     crate: @crate,"}, {"sha": "c6d9b5068dce4459daddf66662bc78538ea7dd9f", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -889,14 +889,14 @@ fn check_item_non_camel_case_types(cx: ty::ctxt, it: @ast::item) {\n             !ident.contains_char('_')\n     }\n \n-    fn ident_without_trailing_underscores(ident: &'r str) -> &'r str {\n+    fn ident_without_trailing_underscores<'r>(ident: &'r str) -> &'r str {\n         match str::rfind(ident, |c| c != '_') {\n             Some(idx) => str::slice(ident, 0, idx + 1),\n             None => ident, // all underscores\n         }\n     }\n \n-    fn ident_without_leading_underscores(ident: &'r str) -> &'r str {\n+    fn ident_without_leading_underscores<'r>(ident: &'r str) -> &'r str {\n         match str::find(ident, |c| c != '_') {\n             Some(idx) => str::slice(ident, idx, ident.len()),\n             None => ident // all underscores"}, {"sha": "f324640ef2cf4e7c58e023026836ac69611f6ab2", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -325,7 +325,7 @@ pub struct BindingInfo {\n \n pub type BindingsMap = LinearMap<ident, BindingInfo>;\n \n-pub struct ArmData {\n+pub struct ArmData<'self> {\n     bodycx: block,\n     arm: &'self ast::arm,\n     bindings_map: BindingsMap\n@@ -393,7 +393,7 @@ pub fn expand_nested_bindings<'r>(bcx: block,\n     }\n }\n \n-pub type enter_pat = &'self fn(@ast::pat) -> Option<~[@ast::pat]>;\n+pub type enter_pat<'self> = &'self fn(@ast::pat) -> Option<~[@ast::pat]>;\n \n pub fn assert_is_binding_or_wild(bcx: block, p: @ast::pat) {\n     if !pat_is_binding_or_wild(bcx.tcx().def_map, p) {\n@@ -610,13 +610,13 @@ pub fn enter_opt<'r>(bcx: block,\n     }\n }\n \n-pub fn enter_rec_or_struct(bcx: block,\n-                           dm: DefMap,\n-                           m: &[@Match<'r>],\n-                           col: uint,\n-                           fields: &[ast::ident],\n-                           val: ValueRef)\n-                        -> ~[@Match<'r>] {\n+pub fn enter_rec_or_struct<'r>(bcx: block,\n+                               dm: DefMap,\n+                               m: &[@Match<'r>],\n+                               col: uint,\n+                               fields: &[ast::ident],\n+                               val: ValueRef)\n+                            -> ~[@Match<'r>] {\n     debug!(\"enter_rec_or_struct(bcx=%s, m=%s, col=%u, val=%?)\",\n            bcx.to_str(),\n            matches_to_str(bcx, m),"}, {"sha": "8a22e90b8474b37605e26738111814ba1c40a4a1", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -560,7 +560,7 @@ pub fn trans_call_inner(\n }\n \n \n-pub enum CallArgs {\n+pub enum CallArgs<'self> {\n     ArgExprs(&'self [@ast::expr]),\n     ArgVals(&'self [ValueRef])\n }"}, {"sha": "30a7648e7eafb26f79b1c4e74a61d4cf5e6362bd", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -547,7 +547,7 @@ pub fn get_base_and_len(bcx: block,\n \n pub type val_and_ty_fn = @fn(block, ValueRef, ty::t) -> Result;\n \n-pub type iter_vec_block = &'self fn(block, ValueRef, ty::t) -> block;\n+pub type iter_vec_block<'self> = &'self fn(block, ValueRef, ty::t) -> block;\n \n pub fn iter_vec_raw(bcx: block, data_ptr: ValueRef, vec_ty: ty::t,\n                     fill: ValueRef, f: iter_vec_block) -> block {"}, {"sha": "aefd95ab78726a87b3372d156fd24a893103942a", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -152,7 +152,7 @@ pub fn lookup(\n     return mme;\n }\n \n-pub struct LookupContext {\n+pub struct LookupContext<'self> {\n     fcx: @mut FnCtxt,\n     expr: @ast::expr,\n     self_expr: @ast::expr,"}, {"sha": "7089ac4dd1283885e57dd153491e7cf2a0cd4120", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -566,10 +566,11 @@ pub impl CoherenceChecker {\n         }\n     }\n \n-    fn can_unify_universally_quantified(&self,\n-                                        a: &'a UniversalQuantificationResult,\n-                                        b: &'a UniversalQuantificationResult)\n-                                     -> bool {\n+    fn can_unify_universally_quantified<'a>\n+            (&self,\n+             a: &'a UniversalQuantificationResult,\n+             b: &'a UniversalQuantificationResult)\n+          -> bool {\n         let mut might_unify = true;\n         let _ = do self.inference_context.probe {\n             let result = self.inference_context.sub(true, dummy_sp())"}, {"sha": "27d3b3ddd86a16150a16554cbc74bc6b6ded9fff", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -56,7 +56,8 @@ pub trait LatticeValue {\n     fn glb(cf: &CombineFields, a: &Self, b: &Self) -> cres<Self>;\n }\n \n-pub type LatticeOp<T> = &'self fn(cf: &CombineFields, a: &T, b: &T) -> cres<T>;\n+pub type LatticeOp<'self, T> =\n+    &'self fn(cf: &CombineFields, a: &T, b: &T) -> cres<T>;\n \n impl LatticeValue for ty::t {\n     fn sub(cf: &CombineFields, a: &ty::t, b: &ty::t) -> ures {\n@@ -374,7 +375,7 @@ pub fn super_lattice_tys<L:LatticeDir + TyLatticeDir + Combine>(\n     }\n }\n \n-pub type LatticeDirOp<T> = &'self fn(a: &T, b: &T) -> cres<T>;\n+pub type LatticeDirOp<'self, T> = &'self fn(a: &T, b: &T) -> cres<T>;\n \n pub enum LatticeVarResult<V,T> {\n     VarResult(V),"}, {"sha": "f31568a50a365272d559409e8b86b5e727974523", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -35,8 +35,8 @@ pub struct Node<V, T> {\n }\n \n pub trait UnifyVid<T> {\n-    fn appropriate_vals_and_bindings(infcx: &'v mut InferCtxt)\n-                                  -> &'v mut ValsAndBindings<Self, T>;\n+    fn appropriate_vals_and_bindings<'v>(infcx: &'v mut InferCtxt)\n+                                      -> &'v mut ValsAndBindings<Self, T>;\n }\n \n pub impl InferCtxt {\n@@ -235,14 +235,14 @@ pub impl InferCtxt {\n // ______________________________________________________________________\n \n impl UnifyVid<Bounds<ty::t>> for ty::TyVid {\n-    fn appropriate_vals_and_bindings(infcx: &'v mut InferCtxt)\n+    fn appropriate_vals_and_bindings<'v>(infcx: &'v mut InferCtxt)\n         -> &'v mut ValsAndBindings<ty::TyVid, Bounds<ty::t>> {\n         return &mut infcx.ty_var_bindings;\n     }\n }\n \n impl UnifyVid<Option<IntVarValue>> for ty::IntVid {\n-    fn appropriate_vals_and_bindings(infcx: &'v mut InferCtxt)\n+    fn appropriate_vals_and_bindings<'v>(infcx: &'v mut InferCtxt)\n         -> &'v mut ValsAndBindings<ty::IntVid, Option<IntVarValue>> {\n         return &mut infcx.int_var_bindings;\n     }\n@@ -255,7 +255,7 @@ impl SimplyUnifiable for IntVarValue {\n }\n \n impl UnifyVid<Option<ast::float_ty>> for ty::FloatVid {\n-    fn appropriate_vals_and_bindings(infcx: &'v mut InferCtxt)\n+    fn appropriate_vals_and_bindings<'v>(infcx: &'v mut InferCtxt)\n         -> &'v mut ValsAndBindings<ty::FloatVid, Option<ast::float_ty>> {\n         return &mut infcx.float_var_bindings;\n     }"}, {"sha": "8f02b789121be221d276f907c576b1bcc0f5a4a7", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -36,7 +36,7 @@ pub struct Ctxt {\n     ast_map: ast_map::map\n }\n \n-type SrvOwner<T> = &'self fn(srv: Srv) -> T;\n+type SrvOwner<'self,T> = &'self fn(srv: Srv) -> T;\n pub type CtxtHandler<T> = ~fn(ctxt: Ctxt) -> T;\n type Parser = ~fn(Session, s: ~str) -> @ast::crate;\n "}, {"sha": "02c50cc7c985811e2d09b5b2dba8fac05d869f35", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -95,7 +95,7 @@ pub fn ARC<T:Const + Owned>(data: T) -> ARC<T> {\n  * Access the underlying data in an atomically reference counted\n  * wrapper.\n  */\n-pub fn get<T:Const + Owned>(rc: &'a ARC<T>) -> &'a T {\n+pub fn get<'a, T:Const + Owned>(rc: &'a ARC<T>) -> &'a T {\n     unsafe { get_shared_immutable_state(&rc.x) }\n }\n \n@@ -191,7 +191,7 @@ pub impl<T:Owned> MutexARC<T> {\n \n     /// As access(), but with a condvar, as sync::mutex.lock_cond().\n     #[inline(always)]\n-    unsafe fn access_cond<U>(\n+    unsafe fn access_cond<'x, 'c, U>(\n         &self,\n         blk: &fn(x: &'x mut T, c: &'c Condvar) -> U) -> U\n     {\n@@ -239,7 +239,7 @@ impl Drop for PoisonOnFail {\n     }\n }\n \n-fn PoisonOnFail(failed: &'r mut bool) -> PoisonOnFail {\n+fn PoisonOnFail<'r>(failed: &'r mut bool) -> PoisonOnFail {\n     PoisonOnFail {\n         failed: ptr::to_mut_unsafe_ptr(failed)\n     }\n@@ -313,7 +313,9 @@ pub impl<T:Const + Owned> RWARC<T> {\n     }\n     /// As write(), but with a condvar, as sync::rwlock.write_cond().\n     #[inline(always)]\n-    fn write_cond<U>(&self, blk: &fn(x: &'x mut T, c: &'c Condvar) -> U) -> U {\n+    fn write_cond<'x, 'c, U>(&self,\n+                             blk: &fn(x: &'x mut T, c: &'c Condvar) -> U)\n+                          -> U {\n         unsafe {\n             let state = get_shared_mutable_state(&self.x);\n             do (*borrow_rwlock(state)).write_cond |cond| {\n@@ -375,7 +377,7 @@ pub impl<T:Const + Owned> RWARC<T> {\n     }\n \n     /// To be called inside of the write_downgrade block.\n-    fn downgrade(&self, token: RWWriteMode<'a, T>) -> RWReadMode<'a, T> {\n+    fn downgrade<'a>(&self, token: RWWriteMode<'a, T>) -> RWReadMode<'a, T> {\n         // The rwlock should assert that the token belongs to us for us.\n         let state = unsafe { get_shared_immutable_state(&self.x) };\n         let RWWriteMode {\n@@ -420,7 +422,7 @@ pub struct RWReadMode<'self, T> {\n     token: sync::RWlockReadMode<'self>,\n }\n \n-pub impl<T:Const + Owned> RWWriteMode<'self, T> {\n+pub impl<'self, T:Const + Owned> RWWriteMode<'self, T> {\n     /// Access the pre-downgrade RWARC in write mode.\n     fn write<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n         match *self {\n@@ -436,7 +438,9 @@ pub impl<T:Const + Owned> RWWriteMode<'self, T> {\n         }\n     }\n     /// Access the pre-downgrade RWARC in write mode with a condvar.\n-    fn write_cond<U>(&self, blk: &fn(x: &'x mut T, c: &'c Condvar) -> U) -> U {\n+    fn write_cond<'x, 'c, U>(&self,\n+                             blk: &fn(x: &'x mut T, c: &'c Condvar) -> U)\n+                          -> U {\n         match *self {\n             RWWriteMode {\n                 data: ref data,\n@@ -458,7 +462,7 @@ pub impl<T:Const + Owned> RWWriteMode<'self, T> {\n     }\n }\n \n-pub impl<T:Const + Owned> RWReadMode<'self, T> {\n+pub impl<'self, T:Const + Owned> RWReadMode<'self, T> {\n     /// Access the post-downgrade rwlock in read mode.\n     fn read<U>(&self, blk: &fn(x: &T) -> U) -> U {\n         match *self {"}, {"sha": "2267d19292cbc0b50f4ac10406ce94844cad57eb", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -24,7 +24,7 @@ static CHARS: [char * 64] = [\n     '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n ];\n \n-impl ToBase64 for &'self [u8] {\n+impl<'self> ToBase64 for &'self [u8] {\n     fn to_base64(&self) -> ~str {\n         let mut s = ~\"\";\n         unsafe {\n@@ -73,7 +73,7 @@ impl ToBase64 for &'self [u8] {\n     }\n }\n \n-impl ToBase64 for &'self str {\n+impl<'self> ToBase64 for &'self str {\n     fn to_base64(&self) -> ~str {\n         str::to_bytes(*self).to_base64()\n     }"}, {"sha": "72b68f8fe3aff3c0069809895e1c86b27d698b85", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -132,7 +132,7 @@ fn grow<T>(nelts: uint, lo: uint, elts: &mut [Option<T>]) -> ~[Option<T>] {\n     rv\n }\n \n-fn get<T>(elts: &'r [Option<T>], i: uint) -> &'r T {\n+fn get<'r, T>(elts: &'r [Option<T>], i: uint) -> &'r T {\n     match elts[i] { Some(ref t) => t, _ => fail!() }\n }\n "}, {"sha": "1a3a28f7492794b72a589b7ed7e4b7c90c7abbb5", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -466,7 +466,7 @@ pub mod flatteners {\n         fn from_writer(w: @Writer) -> Self;\n     }\n \n-    impl FromReader for json::Decoder<'self> {\n+    impl<'self> FromReader for json::Decoder<'self> {\n         fn from_reader(r: @Reader) -> json::Decoder<'self> {\n             match json::from_reader(r) {\n                 Ok(json) => {"}, {"sha": "7c9b15bfded3871f1b3a7191cbce27a04b3595c5", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -741,7 +741,7 @@ pub fn from_str(s: &str) -> Result<Json, Error> {\n     }\n }\n \n-pub struct Decoder {\n+pub struct Decoder<'self> {\n     priv json: Json,\n     priv mut stack: ~[&'self Json],\n }\n@@ -750,7 +750,7 @@ pub fn Decoder(json: Json) -> Decoder {\n     Decoder { json: json, stack: ~[] }\n }\n \n-priv impl Decoder<'self> {\n+priv impl<'self> Decoder<'self> {\n     fn peek(&self) -> &'self Json {\n         if vec::uniq_len(&const self.stack) == 0 {\n             self.stack.push(&self.json);\n@@ -766,7 +766,7 @@ priv impl Decoder<'self> {\n     }\n }\n \n-impl serialize::Decoder for Decoder<'self> {\n+impl<'self> serialize::Decoder for Decoder<'self> {\n     fn read_nil(&self) -> () {\n         debug!(\"read_nil\");\n         match *self.pop() {"}, {"sha": "326b9e4dc07e9abd75ed5b717afb8b2899accf69", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -213,7 +213,7 @@ impl<D:Decoder> Decodable<D> for i64 {\n     }\n }\n \n-impl<S:Encoder> Encodable<S> for &'self str {\n+impl<'self, S:Encoder> Encodable<S> for &'self str {\n     fn encode(&self, s: &S) { s.emit_borrowed_str(*self) }\n }\n \n@@ -286,7 +286,7 @@ impl<D:Decoder> Decodable<D> for () {\n     }\n }\n \n-impl<S:Encoder,T:Encodable<S>> Encodable<S> for &'self T {\n+impl<'self, S:Encoder,T:Encodable<S>> Encodable<S> for &'self T {\n     fn encode(&self, s: &S) {\n         s.emit_borrowed(|| (**self).encode(s))\n     }\n@@ -316,7 +316,7 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for @T {\n     }\n }\n \n-impl<S:Encoder,T:Encodable<S>> Encodable<S> for &'self [T] {\n+impl<'self, S:Encoder,T:Encodable<S>> Encodable<S> for &'self [T] {\n     fn encode(&self, s: &S) {\n         do s.emit_borrowed_vec(self.len()) {\n             for self.eachi |i, e| {"}, {"sha": "16f7c0ba860be1e3b1097fcadad530de592d0b75", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -22,7 +22,7 @@ pub struct SmallIntMap<T> {\n     priv v: ~[Option<T>],\n }\n \n-impl<V> BaseIter<(uint, &'self V)> for SmallIntMap<V> {\n+impl<'self, V> BaseIter<(uint, &'self V)> for SmallIntMap<V> {\n     /// Visit all key-value pairs in order\n     fn each(&self, it: &fn(&(uint, &'self V)) -> bool) {\n         for uint::range(0, self.v.len()) |i| {\n@@ -36,7 +36,7 @@ impl<V> BaseIter<(uint, &'self V)> for SmallIntMap<V> {\n     fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n-impl<V> ReverseIter<(uint, &'self V)> for SmallIntMap<V> {\n+impl<'self, V> ReverseIter<(uint, &'self V)> for SmallIntMap<V> {\n     /// Visit all key-value pairs in reverse order\n     fn each_reverse(&self, it: &fn(&(uint, &'self V)) -> bool) {\n         for uint::range_rev(self.v.len(), 0) |i| {"}, {"sha": "1588d688148d55b42c5239acc6ab30f89357f28b", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -16,7 +16,7 @@ use core::util;\n use core::vec::{len, push};\n use core::vec;\n \n-type Le<T> = &'self fn(v1: &T, v2: &T) -> bool;\n+type Le<'self, T> = &'self fn(v1: &T, v2: &T) -> bool;\n \n /**\n  * Merge sort. Returns a new vector containing the sorted list.\n@@ -173,7 +173,7 @@ pub trait Sort {\n     fn qsort(self);\n }\n \n-impl<T:Copy + Ord + Eq> Sort for &'self mut [T] {\n+impl<'self, T:Copy + Ord + Eq> Sort for &'self mut [T] {\n     fn qsort(self) { quick_sort3(self); }\n }\n \n@@ -1188,7 +1188,7 @@ mod big_tests {\n         }\n     }\n \n-    struct LVal {\n+    struct LVal<'self> {\n         val: uint,\n         key: &'self fn(@uint),\n     }\n@@ -1209,16 +1209,16 @@ mod big_tests {\n     }\n \n     impl<'self> Ord for LVal<'self> {\n-        fn lt(&self, other: &'a LVal<'self>) -> bool {\n+        fn lt<'a>(&self, other: &'a LVal<'self>) -> bool {\n             (*self).val < other.val\n         }\n-        fn le(&self, other: &'a LVal<'self>) -> bool {\n+        fn le<'a>(&self, other: &'a LVal<'self>) -> bool {\n             (*self).val <= other.val\n         }\n-        fn gt(&self, other: &'a LVal<'self>) -> bool {\n+        fn gt<'a>(&self, other: &'a LVal<'self>) -> bool {\n             (*self).val > other.val\n         }\n-        fn ge(&self, other: &'a LVal<'self>) -> bool {\n+        fn ge<'a>(&self, other: &'a LVal<'self>) -> bool {\n             (*self).val >= other.val\n         }\n     }"}, {"sha": "04059a49511909e132acfc141c797026dee95e10", "filename": "src/libstd/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstats.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -30,7 +30,7 @@ pub trait Stats {\n     fn median_abs_dev_pct(self) -> f64;\n }\n \n-impl Stats for &'self [f64] {\n+impl<'self> Stats for &'self [f64] {\n     fn sum(self) -> f64 {\n         vec::foldl(0.0, self, |p,q| p + *q)\n     }"}, {"sha": "ea9455b1e981cc3a61df9d96412c5d8ec43eeb34", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -162,27 +162,27 @@ pub impl Sem<~[Waitqueue]> {\n \n // FIXME(#3588) should go inside of access()\n #[doc(hidden)]\n-type SemRelease = SemReleaseGeneric<'self, ()>;\n-type SemAndSignalRelease = SemReleaseGeneric<'self, ~[Waitqueue]>;\n-struct SemReleaseGeneric<Q> { sem: &'self Sem<Q> }\n+type SemRelease<'self> = SemReleaseGeneric<'self, ()>;\n+type SemAndSignalRelease<'self> = SemReleaseGeneric<'self, ~[Waitqueue]>;\n+struct SemReleaseGeneric<'self, Q> { sem: &'self Sem<Q> }\n \n #[unsafe_destructor]\n-impl<Q:Owned> Drop for SemReleaseGeneric<'self, Q> {\n+impl<'self, Q:Owned> Drop for SemReleaseGeneric<'self, Q> {\n     fn finalize(&self) {\n         unsafe {\n             self.sem.release();\n         }\n     }\n }\n \n-fn SemRelease(sem: &'r Sem<()>) -> SemRelease<'r> {\n+fn SemRelease<'r>(sem: &'r Sem<()>) -> SemRelease<'r> {\n     SemReleaseGeneric {\n         sem: sem\n     }\n }\n \n-fn SemAndSignalRelease(sem: &'r Sem<~[Waitqueue]>)\n-                    -> SemAndSignalRelease<'r> {\n+fn SemAndSignalRelease<'r>(sem: &'r Sem<~[Waitqueue]>)\n+                        -> SemAndSignalRelease<'r> {\n     SemReleaseGeneric {\n         sem: sem\n     }\n@@ -194,7 +194,7 @@ pub struct Condvar<'self> { priv sem: &'self Sem<~[Waitqueue]> }\n #[unsafe_destructor]\n impl<'self> Drop for Condvar<'self> { fn finalize(&self) {} }\n \n-pub impl Condvar<'self> {\n+pub impl<'self> Condvar<'self> {\n     /**\n      * Atomically drop the associated lock, and block until a signal is sent.\n      *\n@@ -260,7 +260,7 @@ pub impl Condvar<'self> {\n         // This is needed for a failing condition variable to reacquire the\n         // mutex during unwinding. As long as the wrapper (mutex, etc) is\n         // bounded in when it gets released, this shouldn't hang forever.\n-        struct SemAndSignalReacquire {\n+        struct SemAndSignalReacquire<'self> {\n             sem: &'self Sem<~[Waitqueue]>,\n         }\n \n@@ -276,8 +276,8 @@ pub impl Condvar<'self> {\n             }\n         }\n \n-        fn SemAndSignalReacquire(sem: &'r Sem<~[Waitqueue]>)\n-                              -> SemAndSignalReacquire<'r> {\n+        fn SemAndSignalReacquire<'r>(sem: &'r Sem<~[Waitqueue]>)\n+                                  -> SemAndSignalReacquire<'r> {\n             SemAndSignalReacquire {\n                 sem: sem\n             }\n@@ -615,7 +615,7 @@ pub impl RWlock {\n \n // FIXME(#3588) should go inside of read()\n #[doc(hidden)]\n-struct RWlockReleaseRead {\n+struct RWlockReleaseRead<'self> {\n     lock: &'self RWlock,\n }\n \n@@ -651,7 +651,7 @@ fn RWlockReleaseRead<'r>(lock: &'r RWlock) -> RWlockReleaseRead<'r> {\n // FIXME(#3588) should go inside of downgrade()\n #[doc(hidden)]\n #[unsafe_destructor]\n-struct RWlockReleaseDowngrade {\n+struct RWlockReleaseDowngrade<'self> {\n     lock: &'self RWlock,\n }\n \n@@ -699,7 +699,7 @@ pub struct RWlockWriteMode<'self> { priv lock: &'self RWlock }\n impl<'self> Drop for RWlockWriteMode<'self> { fn finalize(&self) {} }\n \n /// The \"read permission\" token used for rwlock.write_downgrade().\n-pub struct RWlockReadMode  { priv lock: &'self RWlock }\n+pub struct RWlockReadMode<'self> { priv lock: &'self RWlock }\n #[unsafe_destructor]\n impl<'self> Drop for RWlockReadMode<'self> { fn finalize(&self) {} }\n "}, {"sha": "9a184ca86823441f66a9b9199d47f3464d78a3ec", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -198,7 +198,7 @@ pub impl<K: TotalOrd, V> TreeMap<K, V> {\n }\n \n /// Lazy forward iterator over a map\n-pub struct TreeMapIterator<K, V> {\n+pub struct TreeMapIterator<'self, K, V> {\n     priv stack: ~[&'self ~TreeNode<K, V>],\n     priv node: &'self Option<~TreeNode<K, V>>\n }\n@@ -537,24 +537,25 @@ pub impl<K: TotalOrd, V> TreeNode<K, V> {\n     }\n }\n \n-fn each<K: TotalOrd, V>(node: &'r Option<~TreeNode<K, V>>,\n-                             f: &fn(&(&'r K, &'r V)) -> bool) {\n+fn each<'r, K: TotalOrd, V>(node: &'r Option<~TreeNode<K, V>>,\n+                            f: &fn(&(&'r K, &'r V)) -> bool) {\n     for node.each |x| {\n         each(&x.left, f);\n         if f(&(&x.key, &x.value)) { each(&x.right, f) }\n     }\n }\n \n-fn each_reverse<K: TotalOrd, V>(node: &'r Option<~TreeNode<K, V>>,\n-                                     f: &fn(&(&'r K, &'r V)) -> bool) {\n+fn each_reverse<'r, K: TotalOrd, V>(node: &'r Option<~TreeNode<K, V>>,\n+                                    f: &fn(&(&'r K, &'r V)) -> bool) {\n     for node.each |x| {\n         each_reverse(&x.right, f);\n         if f(&(&x.key, &x.value)) { each_reverse(&x.left, f) }\n     }\n }\n \n-fn mutate_values<K: TotalOrd, V>(node: &'r mut Option<~TreeNode<K, V>>,\n-                                 f: &fn(&'r K, &'r mut V) -> bool) -> bool {\n+fn mutate_values<'r, K: TotalOrd, V>(node: &'r mut Option<~TreeNode<K, V>>,\n+                                     f: &fn(&'r K, &'r mut V) -> bool)\n+                                  -> bool {\n     match *node {\n       Some(~TreeNode{key: ref key, value: ref mut value, left: ref mut left,\n                      right: ref mut right, _}) => {\n@@ -590,7 +591,9 @@ fn split<K: TotalOrd, V>(node: &mut ~TreeNode<K, V>) {\n     }\n }\n \n-fn find_mut<K: TotalOrd, V>(node: &'r mut Option<~TreeNode<K, V>>, key: &K) -> Option<&'r mut V> {\n+fn find_mut<'r, K: TotalOrd, V>(node: &'r mut Option<~TreeNode<K, V>>,\n+                                key: &K)\n+                             -> Option<&'r mut V> {\n     match *node {\n       Some(ref mut x) => {\n         match key.cmp(&x.key) {"}, {"sha": "6071cc643a36770867f0c96cb609bbe15afd841a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -892,6 +892,7 @@ impl to_bytes::IterBytes for Onceness {\n pub struct TyClosure {\n     sigil: Sigil,\n     region: Option<@Lifetime>,\n+    lifetimes: OptVec<Lifetime>,\n     purity: purity,\n     onceness: Onceness,\n     decl: fn_decl"}, {"sha": "e879bcdc4764f438412e61872f279a3c5b396b0a", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -34,16 +34,18 @@ pub mod clone;\n pub mod eq;\n pub mod iter_bytes;\n \n-type ExpandDerivingStructDefFn = &'self fn(@ext_ctxt,\n-                                          span,\n-                                          x: &struct_def,\n-                                          ident,\n-                                          y: &Generics) -> @item;\n-type ExpandDerivingEnumDefFn = &'self fn(@ext_ctxt,\n-                                        span,\n-                                        x: &enum_def,\n-                                        ident,\n-                                        y: &Generics) -> @item;\n+type ExpandDerivingStructDefFn<'self> = &'self fn(@ext_ctxt,\n+                                                  span,\n+                                                  x: &struct_def,\n+                                                  ident,\n+                                                  y: &Generics)\n+                                               -> @item;\n+type ExpandDerivingEnumDefFn<'self> = &'self fn(@ext_ctxt,\n+                                                span,\n+                                                x: &enum_def,\n+                                                ident,\n+                                                y: &Generics)\n+                                             -> @item;\n \n pub fn expand_meta_deriving(cx: @ext_ctxt,\n                             _span: span,"}, {"sha": "017e95ab4c11cf4ace2fb66671f0b4583d108eb7", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -609,7 +609,8 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n                 purity: f.purity,\n                 region: f.region,\n                 onceness: f.onceness,\n-                decl: fold_fn_decl(&f.decl, fld)\n+                decl: fold_fn_decl(&f.decl, fld),\n+                lifetimes: f.lifetimes,\n             })\n         }\n         ty_bare_fn(ref f) => {"}, {"sha": "cc0196d18deb49c64e818858ecd9d2e3691d1e6a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -362,10 +362,11 @@ pub impl Parser {\n \n         let purity = self.parse_purity();\n         self.expect_keyword(&~\"fn\");\n+        let (decl, _) = self.parse_ty_fn_decl();\n         return ty_bare_fn(@TyBareFn {\n             abi: RustAbi,\n             purity: purity,\n-            decl: self.parse_ty_fn_decl()\n+            decl: decl\n         });\n     }\n \n@@ -400,12 +401,15 @@ pub impl Parser {\n                           ObsoletePostFnTySigil);\n         }\n \n+        let (decl, lifetimes) = self.parse_ty_fn_decl();\n+\n         return ty_closure(@TyClosure {\n             sigil: sigil,\n             region: region,\n             purity: purity,\n             onceness: onceness,\n-            decl: self.parse_ty_fn_decl()\n+            decl: decl,\n+            lifetimes: lifetimes,\n         });\n \n         fn parse_onceness(self: &Parser) -> Onceness {\n@@ -424,7 +428,7 @@ pub impl Parser {\n         }\n     }\n \n-    fn parse_ty_fn_decl(&self) -> fn_decl {\n+    fn parse_ty_fn_decl(&self) -> (fn_decl, OptVec<ast::Lifetime>) {\n         /*\n \n         (fn) <'lt> (S) -> T\n@@ -435,18 +439,27 @@ pub impl Parser {\n            Lifetimes\n \n         */\n-        if self.eat(&token::LT) {\n-            let _lifetimes = self.parse_lifetimes();\n+        let lifetimes = if self.eat(&token::LT) {\n+            let lifetimes = self.parse_lifetimes();\n             self.expect_gt();\n-        }\n+            lifetimes\n+        } else {\n+            opt_vec::Empty\n+        };\n+\n         let inputs = self.parse_unspanned_seq(\n             &token::LPAREN,\n             &token::RPAREN,\n             seq_sep_trailing_disallowed(token::COMMA),\n             |p| p.parse_arg_general(false)\n         );\n         let (ret_style, ret_ty) = self.parse_ret_ty();\n-        ast::fn_decl { inputs: inputs, output: ret_ty, cf: ret_style }\n+        let decl = ast::fn_decl {\n+            inputs: inputs,\n+            output: ret_ty,\n+            cf: ret_style\n+        };\n+        (decl, lifetimes)\n     }\n \n     fn parse_trait_methods(&self) -> ~[trait_method] {"}, {"sha": "90b9b44cfbea38b275d3e119ced5fe53142ec7c8", "filename": "src/test/compile-fail/auto-ref-borrowck-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -18,7 +18,7 @@ trait Stuff {\n     fn printme(self);\n }\n \n-impl Stuff for &'self mut Foo {\n+impl<'self> Stuff for &'self mut Foo {\n     fn printme(self) {\n         io::println(fmt!(\"%d\", self.x));\n     }"}, {"sha": "d8164be6ea63cbdeb43492fedaadd289c4f12989", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -23,6 +23,6 @@ trait MyIter {\n     fn test_mut(&mut self);\n }\n \n-impl MyIter for &'self [int] {\n+impl<'self> MyIter for &'self [int] {\n     fn test_mut(&mut self) { }\n }"}, {"sha": "4a6a90ae5167f1ebecb9b64e0756a60cdd9fd061", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct defer {\n+struct defer<'self> {\n     x: &'self [&'self str],\n }\n \n #[unsafe_destructor]\n-impl Drop for defer<'self> {\n+impl<'self> Drop for defer<'self> {\n     fn finalize(&self) {\n         unsafe {\n             error!(\"%?\", self.x);\n         }\n     }\n }\n \n-fn defer(x: &'r [&'r str]) -> defer<'r> {\n+fn defer<'r>(x: &'r [&'r str]) -> defer<'r> {\n     defer {\n         x: x\n     }"}, {"sha": "e42382fc2aa484f3863709f32bb7f04c8403b5fc", "filename": "src/test/compile-fail/issue-1896-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct boxedFn { theFn: &'self fn() -> uint }\n+struct boxedFn<'self> { theFn: &'self fn() -> uint }\n \n fn createClosure (closedUint: uint) -> boxedFn {\n     let theFn: @fn() -> uint = || closedUint;"}, {"sha": "bcbf90b660eff7b674de88ba65658ab5d26f81e4", "filename": "src/test/compile-fail/issue-3154.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct thing<Q> {\n+struct thing<'self, Q> {\n     x: &'self Q\n }\n "}, {"sha": "67059e4623e8f836bdc8f72dd3c9ec4a335d1aaa", "filename": "src/test/compile-fail/issue-3311.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n #[legacy_mode]\n-struct Foo {\n+struct Foo<'self> {\n     s: &'self str,\n     u: ~()\n }\n \n-pub impl Foo<'self> {\n+pub impl<'self> Foo<'self> {\n     fn get_s(&self) -> &'self str {\n         self.s\n     }"}, {"sha": "d9ea384d820c41349f3a55fed3c17813d6af2790", "filename": "src/test/compile-fail/issue-3888.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fissue-3888.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fissue-3888.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3888.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -10,7 +10,7 @@\n \n // n.b. This should be a run-pass test, but for now I'm testing\n // that we don't see an \"unknown scope\" error.\n-fn vec_peek<T>(v: &'r [T]) -> Option< (&'r T, &'r [T]) > {\n+fn vec_peek<'r, T>(v: &'r [T]) -> Option< (&'r T, &'r [T]) > {\n     if v.len() == 0 {\n         None\n     } else {"}, {"sha": "857b53a2c226e5471dc8df18a5c0e226cbaccc33", "filename": "src/test/compile-fail/non-constant-expr-for-fixed-len-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     fn bar(n: int) {\n-        let _x: [int * n]; //~ ERROR expected constant expr for vector length: Non-constant path in constant expr\n+        let _x: [int, ..n]; //~ ERROR expected constant expr for vector length: Non-constant path in constant expr\n     }\n }"}, {"sha": "cccd135e9f8367e1855aecee55d2d5a61d82d7fb", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,18 +12,18 @@\n // nominal types (but not on other types) and that they are type\n // checked.\n \n-struct an_enum(&'self int);\n-struct a_class { x:&'self int }\n+struct an_enum<'self>(&'self int);\n+struct a_class<'self> { x:&'self int }\n \n-fn a_fn1(e: an_enum<'a>) -> an_enum<'b> {\n+fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n     return e; //~ ERROR mismatched types: expected `an_enum/&'b ` but found `an_enum/&'a `\n }\n \n-fn a_fn3(e: a_class<'a>) -> a_class<'b> {\n+fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n     return e; //~ ERROR mismatched types: expected `a_class/&'b ` but found `a_class/&'a `\n }\n \n-fn a_fn4(e: int<'a>) -> int<'b> {\n+fn a_fn4<'a,'b>(e: int<'a>) -> int<'b> {\n     //~^ ERROR region parameters are not allowed on this type\n     //~^^ ERROR region parameters are not allowed on this type\n     return e;"}, {"sha": "7a8038bbb887a98273c57acf9c9c445933b1d510", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -10,7 +10,7 @@\n \n #[legacy_modes];\n \n-enum ast {\n+enum ast<'self> {\n     num(uint),\n     add(&'self ast<'self>, &'self ast<'self>)\n }"}, {"sha": "08243bace90af53315b6986dd882e9e4d8c3de01", "filename": "src/test/compile-fail/regions-creating-enums3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum ast {\n+enum ast<'self> {\n     num(uint),\n     add(&'self ast<'self>, &'self ast<'self>)\n }\n \n-fn mk_add_bad1(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n+fn mk_add_bad1<'a,'b>(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n     add(x, y) //~ ERROR cannot infer an appropriate lifetime\n }\n "}, {"sha": "1cb378cf406f84c9c9f7a2aec2a81b0d49e57b15", "filename": "src/test/compile-fail/regions-creating-enums4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -13,7 +13,7 @@ enum ast<'self> {\n     add(&'self ast<'self>, &'self ast<'self>)\n }\n \n-fn mk_add_bad2(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast {\n+fn mk_add_bad2<'a>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast {\n     add(x, y)\n          //~^ ERROR cannot infer an appropriate lifetime\n }"}, {"sha": "fb9d963dc80a7b475514c2df2b9468769c54fb1d", "filename": "src/test/compile-fail/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,7 +12,7 @@ trait deref {\n     fn get(self) -> int;\n }\n \n-impl deref for &'self int {\n+impl<'self> deref for &'self int {\n     fn get(self) -> int {\n         *self\n     }"}, {"sha": "face9c742141d97e441f05c082f7d262ebcdcc58", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -11,47 +11,47 @@\n fn of<T>() -> @fn(T) { fail!(); }\n fn subtype<T>(x: @fn(T)) { fail!(); }\n \n-fn test_fn<T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n+fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n     // Here, x, y, and z are free.  Other letters\n     // are bound.  Note that the arrangement\n     // subtype::<T1>(of::<T2>()) will typecheck\n     // iff T1 <: T2.\n \n-    subtype::<&fn(&'a T)>(\n-        of::<&fn(&'a T)>());\n+    subtype::<&fn<'a>(&'a T)>(\n+        of::<&fn<'a>(&'a T)>());\n \n-    subtype::<&fn(&'a T)>(\n-        of::<&fn(&'b T)>());\n+    subtype::<&fn<'a>(&'a T)>(\n+        of::<&fn<'b>(&'b T)>());\n \n-    subtype::<&fn(&'b T)>(\n-        of::<&fn(&'x T)>());\n+    subtype::<&fn<'b>(&'b T)>(\n+        of::<&fn<'x>(&'x T)>());\n \n-    subtype::<&fn(&'x T)>(\n-        of::<&fn(&'b T)>());  //~ ERROR mismatched types\n+    subtype::<&fn<'x>(&'x T)>(\n+        of::<&fn<'b>(&'b T)>());  //~ ERROR mismatched types\n \n-    subtype::<&fn(&'a T, &'b T)>(\n-        of::<&fn(&'a T, &'a T)>());\n+    subtype::<&fn<'a,'b>(&'a T, &'b T)>(\n+        of::<&fn<'a>(&'a T, &'a T)>());\n \n-    subtype::<&fn(&'a T, &'a T)>(\n-        of::<&fn(&'a T, &'b T)>()); //~ ERROR mismatched types\n+    subtype::<&fn<'a>(&'a T, &'a T)>(\n+        of::<&fn<'a,'b>(&'a T, &'b T)>()); //~ ERROR mismatched types\n \n-    subtype::<&fn(&'a T, &'b T)>(\n-        of::<&fn(&'x T, &'y T)>());\n+    subtype::<&fn<'a,'b>(&'a T, &'b T)>(\n+        of::<&fn<'x,'y>(&'x T, &'y T)>());\n \n-    subtype::<&fn(&'x T, &'y T)>(\n-        of::<&fn(&'a T, &'b T)>()); //~ ERROR mismatched types\n+    subtype::<&fn<'x,'y>(&'x T, &'y T)>(\n+        of::<&fn<'a,'b>(&'a T, &'b T)>()); //~ ERROR mismatched types\n \n-    subtype::<&fn(&'x T) -> @fn(&'a T)>(\n-        of::<&fn(&'x T) -> @fn(&'a T)>());\n+    subtype::<&fn<'x,'a>(&'x T) -> @fn(&'a T)>(\n+        of::<&fn<'x,'a>(&'x T) -> @fn(&'a T)>());\n \n-    subtype::<&fn(&'a T) -> @fn(&'a T)>(\n-        of::<&fn(&'a T) -> @fn(&'b T)>()); //~ ERROR mismatched types\n+    subtype::<&fn<'a>(&'a T) -> @fn(&'a T)>(\n+        of::<&fn<'a,'b>(&'a T) -> @fn(&'b T)>()); //~ ERROR mismatched types\n \n-    subtype::<&fn(&'a T) -> @fn(&'a T)>(\n-        of::<&fn(&'x T) -> @fn(&'b T)>()); //~ ERROR mismatched types\n+    subtype::<&fn<'a>(&'a T) -> @fn(&'a T)>(\n+        of::<&fn<'x,'b>(&'x T) -> @fn(&'b T)>()); //~ ERROR mismatched types\n \n-    subtype::<&fn(&'a T) -> @fn(&'b T)>(\n-        of::<&fn(&'a T) -> @fn(&'a T)>());\n+    subtype::<&fn<'a,'b>(&'a T) -> @fn(&'b T)>(\n+        of::<&fn<'a>(&'a T) -> @fn(&'a T)>());\n }\n \n fn main() {}"}, {"sha": "4f6cbdfdd6556bbb6e08622405b97fe0bc124588", "filename": "src/test/compile-fail/regions-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -11,7 +11,7 @@\n // Before fn subtyping was properly implemented,\n // we reported errors in this case:\n \n-fn not_ok(a: &uint, b: &'b uint) {\n+fn not_ok<'b>(a: &uint, b: &'b uint) {\n     let mut g: @fn(x: &uint) = |x: &'b uint| {};\n     //~^ ERROR mismatched types\n     g(a);"}, {"sha": "1ae97d690ac242bb4a7310d756d038fccfc4e938", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -18,11 +18,11 @@ mod argparse {\n         value: uint\n     }\n \n-    pub fn flag(name: &'r str, desc: &'r str) -> Flag<'r> {\n+    pub fn flag<'r>(name: &'r str, desc: &'r str) -> Flag<'r> {\n         Flag { name: name, desc: desc, max_count: 1, value: 0 }\n     }\n \n-    pub impl Flag<'self> {\n+    pub impl<'self> Flag<'self> {\n         fn set_desc(self, s: &str) -> Flag<'self> {\n             Flag { //~ ERROR cannot infer an appropriate lifetime\n                 name: self.name,"}, {"sha": "0111be367c228d773afb1bc024f2fdae5177ad26", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -10,15 +10,15 @@\n \n enum yes0<'lt> {\n     // This will eventually be legal (and in fact the only way):\n-    X3(&'lt uint) //~ ERROR Illegal lifetime 'lt: only 'self is allowed allowed as part of a type declaration\n+    X3(&'lt uint) //~ ERROR Illegal lifetime 'lt: this lifetime must be declared\n }\n \n-enum yes1 {\n+enum yes1<'self> {\n     X4(&'self uint)\n }\n \n enum yes2 {\n-    X5(&'foo uint) //~ ERROR Illegal lifetime 'foo: only 'self is allowed allowed as part of a type declaration\n+    X5(&'foo uint) //~ ERROR Illegal lifetime 'foo: this lifetime must be declared\n }\n \n fn main() {}"}, {"sha": "977c9fc55196c009d418d1993f217e6b4601732d", "filename": "src/test/compile-fail/regions-in-structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -17,7 +17,7 @@ struct yes1<'self> {\n }\n \n struct yes2<'self> {\n-  x: &'foo uint, //~ ERROR Illegal lifetime 'foo: only 'self is allowed allowed as part of a type declaration\n+  x: &'foo uint, //~ ERROR Illegal lifetime 'foo: this lifetime must be declared\n }\n \n fn main() {}"}, {"sha": "65bc64815b61a04f4ec48ad778e9c540392fe832", "filename": "src/test/compile-fail/regions-in-type-items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct item_ty_yes0 {\n+struct item_ty_yes0<'self> {\n     x: &'self uint\n }\n \n-struct item_ty_yes1 {\n+struct item_ty_yes1<'self> {\n     x: &'self uint\n }\n \n struct item_ty_yes2 {\n-    x: &'a uint //~ ERROR only 'self is allowed\n+    x: &'a uint //~ ERROR this lifetime must be declared\n }\n \n fn main() {}"}, {"sha": "c8813b73e6b3adad0e243e2cd80cb3d50e6da6dc", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct parameterized1 {\n+struct parameterized1<'self> {\n     g: &'self fn()\n }\n "}, {"sha": "7e96ecd4142a7d30fc28f67d55437b605880fc4f", "filename": "src/test/compile-fail/regions-infer-borrow-scope-too-big.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -13,7 +13,7 @@ struct point {\n     y: int,\n }\n \n-fn x_coord(p: &'r point) -> &'r int {\n+fn x_coord<'r>(p: &'r point) -> &'r int {\n     return &p.x;\n }\n "}, {"sha": "d982d3c95a5789157f0862273bc4ba41eb967192", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn borrow<T>(x: &'r T) -> &'r T {x}\n+fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n \n fn foo(cond: &fn() -> bool, box: &fn() -> @int) {\n     let mut y: &int;"}, {"sha": "585b56d5a420b38b465ab565a40a699f9019a3e0", "filename": "src/test/compile-fail/regions-infer-call-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn select(x: &'r int, y: &'r int) -> &'r int { x }\n+fn select<'r>(x: &'r int, y: &'r int) -> &'r int { x }\n \n fn with<T>(f: &fn(x: &int) -> T) -> T {\n     f(&20)\n }\n \n-fn manip(x: &'a int) -> int {\n+fn manip<'a>(x: &'a int) -> int {\n     let z = do with |y| { select(x, y) };\n     //~^ ERROR cannot infer an appropriate lifetime\n     *z"}, {"sha": "83e39ebd9f4d022ae3a016f5e67934fba7bbfb9c", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-immutability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct contravariant {\n+struct contravariant<'self> {\n     f: &'self int\n }\n \n-fn to_same_lifetime(bi: contravariant<'r>) {\n+fn to_same_lifetime<'r>(bi: contravariant<'r>) {\n     let bj: contravariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: contravariant<'r>) {\n+fn to_shorter_lifetime<'r>(bi: contravariant<'r>) {\n     let bj: contravariant<'blk> = bi;\n }\n \n-fn to_longer_lifetime(bi: contravariant<'r>) -> contravariant<'static> {\n+fn to_longer_lifetime<'r>(bi: contravariant<'r>) -> contravariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "85cc6e6ce24877b83fe3570ff5b271962574a636", "filename": "src/test/compile-fail/regions-infer-covariance-due-to-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,7 +12,7 @@\n //\n // You can upcast to a *larger region* but not a smaller one.\n \n-struct covariant {\n+struct covariant<'self> {\n     f: @fn(x: &'self int) -> int\n }\n "}, {"sha": "a5eeb83989f8225bc8ea27204bcaa397e60fc567", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-1.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-1.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,19 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct invariant {\n+struct invariant<'self> {\n     f: @mut &'self int\n }\n \n-fn to_same_lifetime(bi: invariant<'r>) {\n+fn to_same_lifetime<'r>(bi: invariant<'r>) {\n     let bj: invariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: invariant<'r>) {\n-    let bj: invariant<'blk> = bi; //~ ERROR mismatched types\n-}\n-\n-fn to_longer_lifetime(bi: invariant<'r>) -> invariant<'static> {\n+fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "8adf353bb82f6077a98983ae8ddcbae8758d6380", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-2.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,15 +12,11 @@ struct invariant<'self> {\n     f: @mut [&'self int]\n }\n \n-fn to_same_lifetime(bi: invariant<'r>) {\n+fn to_same_lifetime<'r>(bi: invariant<'r>) {\n     let bj: invariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: invariant<'r>) {\n-    let bj: invariant<'blk> = bi; //~ ERROR mismatched types\n-}\n-\n-fn to_longer_lifetime(bi: invariant<'r>) -> invariant<'static> {\n+fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "92447c1ef8d4571f13c83d5a9be5420c83c21b21", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -16,11 +16,7 @@ fn to_same_lifetime<'r>(bi: invariant<'r>) {\n     let bj: invariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: invariant<'r>) {\n-    let bj: invariant<'blk> = bi; //~ ERROR mismatched types\n-}\n-\n-fn to_longer_lifetime(bi: invariant<'r>) -> invariant<'static> {\n+fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "61adba3aec13457c063c80f5abf4c3b29309a070", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,15 +12,11 @@ struct invariant<'self> {\n     f: @fn() -> @mut &'self int\n }\n \n-fn to_same_lifetime(bi: invariant<'r>) {\n+fn to_same_lifetime<'r>(bi: invariant<'r>) {\n     let bj: invariant<'r> = bi;\n }\n \n-fn to_shorter_lifetime(bi: invariant<'r>) {\n-    let bj: invariant<'blk> = bi; //~ ERROR mismatched types\n-}\n-\n-fn to_longer_lifetime(bi: invariant<'r>) -> invariant<'static> {\n+fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n     bi //~ ERROR mismatched types\n }\n "}, {"sha": "2e9a4eb141037ae88d2568a871b23bedb62b0453", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ignore<T>(_t: T) {}\n+fn ignore(_f: &fn<'z>(&'z int) -> &'z int) {}\n \n fn nested() {\n     let y = 3;\n-    ignore(|z: &'z int| -> &'z int {\n+    ignore(|z| {\n         if false { &y } else { z } //~ ERROR illegal borrow\n     });\n }"}, {"sha": "3089c362a5044caceaad52b893499316e0e78b1e", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -10,17 +10,17 @@\n \n fn ignore<T>(t: T) {}\n \n-fn nested(x: &'x int) {\n+fn nested<'x>(x: &'x int) {\n     let y = 3;\n     let mut ay = &y; //~ ERROR cannot infer an appropriate lifetime\n \n-    ignore(|z: &'z int| {\n+    ignore::<&fn<'z>(&'z int)>(|z| {\n         ay = x;\n         ay = &y;  //~ ERROR cannot infer an appropriate lifetime\n         ay = z;\n     });\n \n-    ignore(|z: &'z int| -> &'z int {\n+    ignore::<&fn<'z>(&'z int) -> &'z int>(|z| {\n         if false { return x; }  //~ ERROR mismatched types\n         if false { return ay; }\n         return z;"}, {"sha": "f916b0d95c2ee7f57131b4a94f7b8a79d4e20732", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,11 +12,11 @@\n // some point regions-ret-borrowed reported an error but this file did\n // not, due to special hardcoding around the anonymous region.\n \n-fn with<R>(f: &fn(x: &'a int) -> R) -> R {\n+fn with<'a, R>(f: &fn(x: &'a int) -> R) -> R {\n     f(&3)\n }\n \n-fn return_it() -> &'a int {\n+fn return_it<'a>() -> &'a int {\n     with(|o| o) //~ ERROR mismatched types\n         //~^ ERROR reference is not valid outside of its lifetime\n }"}, {"sha": "be7b28f6ef4b5c104a5ca6ae7f2089889edc68f4", "filename": "src/test/compile-fail/regions-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(_x : &'a int) -> &'a int {\n+fn f<'a>(_x : &'a int) -> &'a int {\n     return &3; //~ ERROR illegal borrow\n }\n "}, {"sha": "f0c81d16b03c7ed1aa8d549bad6f282efd890568", "filename": "src/test/compile-fail/regions-scoping.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/15688eaf284b54d29e42b4ec415c23c94e567b23/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15688eaf284b54d29e42b4ec415c23c94e567b23/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs?ref=15688eaf284b54d29e42b4ec415c23c94e567b23", "patch": "@@ -1,55 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn with<T>(t: T, f: &fn(T)) { f(t) }\n-\n-fn nested<'x>(x: &'x int) {  // (1)\n-    do with(\n-        |x: &'x int, // Refers to the region `x` at (1)\n-         y: &'y int, // A fresh region `y` (2)\n-         z: &fn<'z>(x: &'x int, // Refers to `x` at (1)\n-                    y: &'y int, // Refers to `y` at (2)\n-                    z: &'z int) -> &'z int| // A fresh region `z` (3)\n-                 -> &'x int {\n-            if false { return z(x, y, x); }\n-\n-            if false { return z(x, y, y); }\n-            //~^ ERROR cannot infer an appropriate lifetime\n-\n-            return z(y, x, x);\n-            //~^ ERROR cannot infer an appropriate lifetime\n-        }\n-    ) |foo| {\n-\n-        let a: &'x int = foo(x, x, |_x, _y, z| z );\n-        let b: &'x int = foo(x, a, |_x, _y, z| z );\n-        let c: &'x int = foo(a, a, |_x, _y, z| z );\n-\n-        let z = 3i;\n-        let d: &'x int = foo(x, x, |_x, _y, z| z );\n-        let e: &'x int = foo(x, &z, |_x, _y, z| z );\n-\n-        // This would result in an error, but it is not reported by typeck\n-        // anymore but rather borrowck. Therefore, it doesn't end up\n-        // getting printed out since compilation fails after typeck.\n-        //\n-        // let f: &'x int = foo(&z, &z, |_x, _y, z| z ); // ERROR mismatched types: expected `&'x int` but found\n-\n-        foo(x, &z, |x, _y, _z| x); //~ ERROR mismatched types: expected `&'z int` but found `&'x int`\n-\n-        // Note: originally I had foo(x, &z, ...) here, but in that\n-        // case the region inferencer deduced that this was valid if\n-        // &y==&static, and so inference would succeed but borrow\n-        // check would fail because the lifetime of &z is not &static.\n-        foo(x, x, |_x, y, _z| y); //~ ERROR cannot infer an appropriate lifetime\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "be034eda67dcf2b05d2e6932ab569cc019e80358", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,7 +12,7 @@ struct closure_box<'self> {\n     cl: &'self fn()\n }\n \n-fn box_it(x: &'r fn()) -> closure_box<'r> {\n+fn box_it<'r>(x: &'r fn()) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n "}, {"sha": "2f455e89dff909114481377977e7d10d6338224d", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -15,9 +15,9 @@ trait get_ctxt {\n     fn get_ctxt(&self) -> &ctxt;\n }\n \n-struct has_ctxt { c: &'self ctxt }\n+struct has_ctxt<'self> { c: &'self ctxt }\n \n-impl get_ctxt for has_ctxt<'self> {\n+impl<'self> get_ctxt for has_ctxt<'self> {\n \n     // Here an error occurs because we used `&self` but\n     // the definition used `&`:"}, {"sha": "c9e42aadfd4462b0c79c1a86478f0997c2e88929", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -16,7 +16,7 @@ trait iterable<A> {\n     fn iterate(&self, blk: &fn(x: &A) -> bool);\n }\n \n-impl<A> iterable<A> for &'self [A] {\n+impl<'self,A> iterable<A> for &'self [A] {\n     fn iterate(&self, f: &fn(x: &A) -> bool) {\n         for vec::each(*self) |e| {\n             if !f(e) { break; }"}, {"sha": "36c4ac2ad4939842c3701dfe2f4d06b86e7dbd37", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -16,12 +16,12 @@ trait MyIter {\n     fn test_const(&const self);\n }\n \n-impl MyIter for &'self [int] {\n+impl<'self> MyIter for &'self [int] {\n     fn test_imm(&self) { fail_unless!(self[0] == 1) }\n     fn test_const(&const self) { fail_unless!(self[0] == 1) }\n }\n \n-impl MyIter for &'self str {\n+impl<'self> MyIter for &'self str {\n     fn test_imm(&self) { fail_unless!(*self == \"test\") }\n     fn test_const(&const self) { fail_unless!(*self == \"test\") }\n }"}, {"sha": "fdb51124f0eb91edad1f0c39aa96de88012f7281", "filename": "src/test/run-pass/borrow-by-val-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,7 +12,7 @@ trait Foo {\n     fn foo(self);\n }\n \n-impl Foo for &'self [int] {\n+impl<'self> Foo for &'self [int] {\n     fn foo(self) {}\n }\n "}, {"sha": "77e4f512ebf4b2dd32a7f258c24cebe92c491abc", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn borrow<T>(x: &'r T) -> &'r T {x}\n+fn borrow<'r,T>(x: &'r T) -> &'r T {x}\n \n struct Rec { f: @int }\n "}, {"sha": "4bdecd5eeec0e39903347c578658dc781aa145fc", "filename": "src/test/run-pass/borrowed-ptr-pattern-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(s: &'r uint) -> bool {\n+fn foo<'r>(s: &'r uint) -> bool {\n     match s {\n         &3 => true,\n         _ => false"}, {"sha": "ebd5cf41db5505afb4f87eed83e8e30ee0383122", "filename": "src/test/run-pass/borrowed-ptr-pattern-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn select(x: &'r Option<int>, y: &'r Option<int>) -> &'r Option<int> {\n+fn select<'r>(x: &'r Option<int>, y: &'r Option<int>) -> &'r Option<int> {\n     match (x, y) {\n         (&None, &None) => x,\n         (&Some(_), _) => x,"}, {"sha": "bc6972bfb27533b2f977fd599b8fe71c5d328b83", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -49,7 +49,7 @@ pub impl<T> cat<T> {\n     }\n }\n \n-impl<T> BaseIter<(int, &'self T)> for cat<T> {\n+impl<'self,T> BaseIter<(int, &'self T)> for cat<T> {\n     fn each(&self, f: &fn(&(int, &'self T)) -> bool) {\n         let mut n = int::abs(self.meows);\n         while n > 0 {"}, {"sha": "c656dfd1530d58711fb0bed746abdb688206bc39", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -2,7 +2,7 @@ trait Reverser {\n     fn reverse(&self);\n }\n \n-impl Reverser for &'self mut [uint] {\n+impl<'self> Reverser for &'self mut [uint] {\n     fn reverse(&self) {\n         vec::reverse(*self);\n     }"}, {"sha": "f08fc3be0742a9a73ba3af6195a1ee5fbf5b3c57", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -12,7 +12,7 @@ fn foo() -> int {\n     return 0xca7f000d;\n }\n \n-struct Bar { f: &'self fn() -> int }\n+struct Bar<'self> { f: &'self fn() -> int }\n \n static b : Bar<'static> = Bar { f: foo };\n "}, {"sha": "a0d16a3ec3ab1c963083e380c20d6b25d34968e4", "filename": "src/test/run-pass/const-region-ptrs-noncopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n type Big = [u64, ..8];\n-struct Pair { a: int, b: &'self Big }\n+struct Pair<'self> { a: int, b: &'self Big }\n static x: &'static Big = &([13, 14, 10, 13, 11, 14, 14, 15]);\n static y: &'static Pair<'static> = &Pair {a: 15, b: x};\n "}, {"sha": "6c501ebf9389abf2ae3148a42b2d4d65287a8a96", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-struct Pair { a: int, b: &'self int }\n+struct Pair<'self> { a: int, b: &'self int }\n \n static x: &'static int = &10;\n "}, {"sha": "c41fa52bf15f4fd4a5329ce8d28d73e7ac6e4e6e", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -28,13 +28,13 @@ fn compute_area(shape: &shape) -> float {\n \n pub impl shape {\n     // self is in the implicit self region\n-    fn select<T>(&self, threshold: float,\n-                 a: &'r T, b: &'r T) -> &'r T {\n+    fn select<'r, T>(&self, threshold: float,\n+                     a: &'r T, b: &'r T) -> &'r T {\n         if compute_area(self) > threshold {a} else {b}\n     }\n }\n \n-fn select_based_on_unit_circle<T>(\n+fn select_based_on_unit_circle<'r, T>(\n     threshold: float, a: &'r T, b: &'r T) -> &'r T {\n \n     let shape = &circle(Point{x: 0.0, y: 0.0}, 1.0);"}, {"sha": "9dfe7e45c1194864c19a4102a057f5e8c8f7956f", "filename": "src/test/run-pass/infer-with-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -16,7 +16,7 @@\n fn eat_tup(_r: ~@(int, @fn(Pair) -> int)) {}\n fn eat_rec(_r: @~Rec) {}\n \n-struct Rec { a: int, b: &'self fn(Pair) -> int }\n+struct Rec<'self> { a: int, b: &'self fn(Pair) -> int }\n struct Pair { x: int, y: int }\n \n pub fn main() {"}, {"sha": "34eb591b73aa4252f5868ef4adb0ab4bb9653c36", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct font {\n+struct font<'self> {\n     fontbuf: &'self ~[u8],\n }\n \n@@ -18,7 +18,7 @@ pub impl<'self> font<'self> {\n     }\n }\n \n-fn font(fontbuf: &'r ~[u8]) -> font<'r> {\n+fn font<'r>(fontbuf: &'r ~[u8]) -> font<'r> {\n     font {\n         fontbuf: fontbuf\n     }"}, {"sha": "396175716b21067df6fc088b3f5e68b65bc45620", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // This test should behave exactly like issue-2735-3\n-struct defer {\n+struct defer<'self> {\n     b: &'self mut bool,\n }\n "}, {"sha": "7b5f19f1434dcdf06e2f2b00d127f12c7a2d925c", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // This test should behave exactly like issue-2735-2\n-struct defer {\n+struct defer<'self> {\n     b: &'self mut bool,\n }\n \n@@ -22,7 +22,7 @@ impl<'self> Drop for defer<'self> {\n     }\n }\n \n-fn defer(b: &'r mut bool) -> defer<'r> {\n+fn defer<'r>(b: &'r mut bool) -> defer<'r> {\n     defer {\n         b: b\n     }"}, {"sha": "63807de22dd428cb1756109ecb732ef75589ed5a", "filename": "src/test/run-pass/issue-2748-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct CMap {\n+struct CMap<'self> {\n     buf: &'self [u8],\n }\n "}, {"sha": "630448d27821474e0513485982425434447d613c", "filename": "src/test/run-pass/issue-2748-b.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2748-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-2748-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2748-b.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn thing(x: &'r [int]) -> &'r [int] { x }\n+fn thing<'r>(x: &'r [int]) -> &'r [int] { x }\n+\n pub fn main() {\n     let x = &[1,2,3];\n     let y = x;"}, {"sha": "191259e5a57e2076a0b13efad62ae75553826b25", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct list<T> {\n+struct list<'self, T> {\n     element: &'self T,\n     next: Option<@mut list<'self, T>>\n }"}, {"sha": "2992d9a4ac837d2ae2c6fb03a67f3e37774a3ccc", "filename": "src/test/run-pass/issue-3888-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-3888-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fissue-3888-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3888-2.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn vec_peek<T>(v: &'r [T]) -> &'r [T] {\n+fn vec_peek<'r, T>(v: &'r [T]) -> &'r [T] {\n // This doesn't work, and should.\n //    v.slice(1, 5)\n     vec::slice(v, 1, 5)"}, {"sha": "fc62ea67eab218e3d0dc803bc6d5913505c28efb", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -13,7 +13,7 @@ trait sum {\n }\n \n // Note: impl on a slice\n-impl sum for &'self [int] {\n+impl<'self> sum for &'self [int] {\n     fn sum(self) -> int {\n         let mut sum = 0;\n         for vec::each(self) |e| { sum += *e; }"}, {"sha": "e7edeca3b9a1986f0ab5426434272d1ac30368e6", "filename": "src/test/run-pass/region-dependent-addr-of.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -25,54 +25,54 @@ struct C {\n     f: int\n }\n \n-fn get_v1(a: &'v A) -> &'v int {\n+fn get_v1<'v>(a: &'v A) -> &'v int {\n     // Region inferencer must deduce that &v < L2 < L1\n     let foo = &a.value; // L1\n     &foo.v1             // L2\n }\n \n-fn get_v2(a: &'v A, i: uint) -> &'v int {\n+fn get_v2<'v>(a: &'v A, i: uint) -> &'v int {\n     let foo = &a.value;\n     &foo.v2[i]\n }\n \n-fn get_v3(a: &'v A, i: uint) -> &'v int {\n+fn get_v3<'v>(a: &'v A, i: uint) -> &'v int {\n     let foo = &a.value;\n     &foo.v3[i]\n }\n \n-fn get_v4(a: &'v A, i: uint) -> &'v int {\n+fn get_v4<'v>(a: &'v A, i: uint) -> &'v int {\n     let foo = &a.value;\n     &foo.v4.f\n }\n \n-fn get_v5(a: &'v A, i: uint) -> &'v int {\n+fn get_v5<'v>(a: &'v A, i: uint) -> &'v int {\n     let foo = &a.value;\n     &foo.v5.f\n }\n \n-fn get_v6_a(a: &'v A, i: uint) -> &'v int {\n+fn get_v6_a<'v>(a: &'v A, i: uint) -> &'v int {\n     match a.value.v6 {\n         Some(ref v) => &v.f,\n         None => fail!()\n     }\n }\n \n-fn get_v6_b(a: &'v A, i: uint) -> &'v int {\n+fn get_v6_b<'v>(a: &'v A, i: uint) -> &'v int {\n     match *a {\n         A { value: B { v6: Some(ref v), _ } } => &v.f,\n         _ => fail!()\n     }\n }\n \n-fn get_v6_c(a: &'v A, i: uint) -> &'v int {\n+fn get_v6_c<'v>(a: &'v A, i: uint) -> &'v int {\n     match a {\n         &A { value: B { v6: Some(ref v), _ } } => &v.f,\n         _ => fail!()\n     }\n }\n \n-fn get_v5_ref(a: &'v A, i: uint) -> &'v int {\n+fn get_v5_ref<'v>(a: &'v A, i: uint) -> &'v int {\n     match &a.value {\n         &B {v5: ~C {f: ref v}, _} => v\n     }"}, {"sha": "5fd3da67a1779f81567322a33ef13e8412b826ac", "filename": "src/test/run-pass/region-return-interior-of-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn get<T>(opt: &'r Option<T>) -> &'r T {\n+fn get<'r, T>(opt: &'r Option<T>) -> &'r T {\n     match *opt {\n       Some(ref v) => v,\n       None => fail!(~\"none\")"}, {"sha": "1fb9c126e74e2b056c3c76bf10a12714d69531c3", "filename": "src/test/run-pass/regions-addr-of-interior-of-unique-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-addr-of-interior-of-unique-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-addr-of-interior-of-unique-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-addr-of-interior-of-unique-box.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -17,7 +17,7 @@ struct Character {\n     pos: ~Point\n }\n \n-fn get_x(x: &'r Character) -> &'r int {\n+fn get_x<'r>(x: &'r Character) -> &'r int {\n     // interesting case because the scope of this\n     // borrow of the unique pointer is in fact\n     // larger than the fn itself"}, {"sha": "a9c65d012954ce4f90a24040839cc8a06c49e6d4", "filename": "src/test/run-pass/regions-addr-of-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-addr-of-ret.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(x : &'a int) -> &'a int {\n+fn f<'a>(x : &'a int) -> &'a int {\n     return &*x;\n }\n "}, {"sha": "54cfb5f5fcc75264f6cfabd74baaebb8ce4d883b", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct closure_box {\n+struct closure_box<'self> {\n     cl: &'self fn(),\n }\n "}, {"sha": "a9a6aa0c7091772eecc8c7e59b3a4af9a4f33484", "filename": "src/test/run-pass/regions-creating-enums2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-creating-enums2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-creating-enums2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-creating-enums2.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum ast {\n+enum ast<'self> {\n     num(uint),\n     add(&'self ast<'self>, &'self ast<'self>)\n }\n \n-fn mk_add_ok(x: &'r ast<'r>, y: &'r ast<'r>) -> ast<'r> {\n+fn mk_add_ok<'r>(x: &'r ast<'r>, y: &'r ast<'r>) -> ast<'r> {\n     add(x, y)\n }\n "}, {"sha": "1c8ed8a3dcd5b9f9d88399db0f1fdb193ea94c98", "filename": "src/test/run-pass/regions-creating-enums5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-creating-enums5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-creating-enums5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-creating-enums5.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum ast {\n+enum ast<'self> {\n     num(uint),\n     add(&'self ast<'self>, &'self ast<'self>)\n }\n \n-fn mk_add_ok(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast<'a> {\n+fn mk_add_ok<'a>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast<'a> {\n     add(x, y)\n }\n "}, {"sha": "86b997a6008a7595a12918deba75b530f56e0f33", "filename": "src/test/run-pass/regions-equiv-fns.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15688eaf284b54d29e42b4ec415c23c94e567b23/src%2Ftest%2Frun-pass%2Fregions-equiv-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15688eaf284b54d29e42b4ec415c23c94e567b23/src%2Ftest%2Frun-pass%2Fregions-equiv-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-equiv-fns.rs?ref=15688eaf284b54d29e42b4ec415c23c94e567b23", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Before fn subtyping was properly implemented,\n-// we reported errors in this case:\n-\n-fn ok(a: &uint) {\n-    // Here &r is an alias for &:\n-    let mut g: @fn(x: &uint) = |x: &'r uint| {};\n-    g(a);\n-}\n-\n-pub fn main() {\n-}\n-\n-"}, {"sha": "d9e5831024615699c60b894e50a4335a1b63ff09", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: &'r uint) -> &'r uint { x }\n+fn foo<'r>(x: &'r uint) -> &'r uint { x }\n fn bar(x: &uint) -> uint { *x }\n \n pub fn main() {"}, {"sha": "652a7a33396176d28509b41fd30b4646f02e303e", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -18,14 +18,14 @@ fn ok(f: @fn(x: &uint)) {\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: @fn(y: &'r uint) = |x: &'r uint| { };\n+    let mut g: @fn<'r>(y: &'r uint) = |x| { };\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n fn ok_inferred(f: @fn(x: &uint)) {\n-    let mut g: @fn(x: &'r uint) = |_| {};\n+    let mut g: @fn<'r>(x: &'r uint) = |_| {};\n     g = f;\n }\n "}, {"sha": "7c970253b98abc422ee1c7c95a9d6a878c6af89d", "filename": "src/test/run-pass/regions-infer-borrow-scope-view.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn view<T>(x: &'r [T]) -> &'r [T] {x}\n+fn view<'r, T>(x: &'r [T]) -> &'r [T] {x}\n \n pub fn main() {\n     let v = ~[1, 2, 3];"}, {"sha": "a184f47b65f5786bdece952d2d7479c5f4d1395e", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn borrow<T>(x: &'r T) -> &'r T {x}\n+fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n \n pub fn main() {\n     let x = @3;"}, {"sha": "a3cb1e32eb5e6eeb08a3f3f31ec97ab911f8dba5", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -10,7 +10,7 @@\n \n struct Point {x: int, y: int}\n \n-fn x_coord(p: &'r Point) -> &'r int {\n+fn x_coord<'r>(p: &'r Point) -> &'r int {\n     return &p.x;\n }\n "}, {"sha": "9933d55f7476e457f2bde4a3b4dc2ae447347f5a", "filename": "src/test/run-pass/regions-infer-call-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -14,7 +14,7 @@ fn with<T>(f: &fn(x: &int) -> T) -> T {\n     f(&20)\n }\n \n-fn has_one(x: &'a int) -> int {\n+fn has_one<'a>(x: &'a int) -> int {\n     do with |y| { takes_two(x, y) }\n }\n "}, {"sha": "e83f11de31d121c88d7549da75aa6861744d9eaa", "filename": "src/test/run-pass/regions-infer-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-call.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -10,7 +10,7 @@\n \n fn takes_two(x: &int, y: &int) -> int { *x + *y }\n \n-fn has_two(x: &'a int, y: &'b int) -> int {\n+fn has_two<'a,'b>(x: &'a int, y: &'b int) -> int {\n     takes_two(x, y)\n }\n "}, {"sha": "d45925229fa7ceaa50a66086ca16370e9fd48d62", "filename": "src/test/run-pass/regions-infer-contravariance-due-to-ret.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance-due-to-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance-due-to-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance-due-to-ret.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct boxed_int {\n+struct boxed_int<'self> {\n     f: &'self int,\n }\n \n-fn max(bi: &'r boxed_int, f: &'r int) -> int {\n+fn max<'r>(bi: &'r boxed_int, f: &'r int) -> int {\n     if *bi.f > *f {*bi.f} else {*f}\n }\n "}, {"sha": "ef2be398b64d1231aceaaa936f0bf5900c4c26b4", "filename": "src/test/run-pass/regions-infer-contravariance.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/15688eaf284b54d29e42b4ec415c23c94e567b23/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15688eaf284b54d29e42b4ec415c23c94e567b23/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-contravariance.rs?ref=15688eaf284b54d29e42b4ec415c23c94e567b23", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct boxed_int {\n-    f: &'self int,\n-}\n-\n-fn get(bi: &'r boxed_int<'r>) -> &'r int {\n-    bi.f\n-}\n-\n-fn with(bi: &'r boxed_int) {\n-    // Here, the upcast is allowed because the `boxed_int` type is\n-    // contravariant with respect to `&r`.  See also\n-    // compile-fail/regions-infer-invariance-due-to-mutability.rs\n-    let bi: &'blk boxed_int<'blk> = bi;\n-    fail_unless!(*get(bi) == 22);\n-}\n-\n-pub fn main() {\n-    let g = 22;\n-    let foo = boxed_int { f: &g };\n-    with(&foo);\n-}"}, {"sha": "c1f7a713ca679e79b530c6187cb497784dda148e", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -16,11 +16,11 @@ use core::sys;\n use core::cast;\n use std::arena::Arena;\n \n-struct Bcx {\n+struct Bcx<'self> {\n     fcx: &'self Fcx<'self>\n }\n \n-struct Fcx {\n+struct Fcx<'self> {\n     arena: &'self Arena,\n     ccx: &'self Ccx\n }\n@@ -29,7 +29,7 @@ struct Ccx {\n     x: int\n }\n \n-fn h(bcx : &'r Bcx<'r>) -> &'r Bcx<'r> {\n+fn h<'r>(bcx : &'r Bcx<'r>) -> &'r Bcx<'r> {\n     return bcx.fcx.arena.alloc(|| Bcx { fcx: bcx.fcx });\n }\n "}, {"sha": "a74bc82569bf042b07534b910ee459ab23662f13", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -10,11 +10,11 @@\n \n struct arena(());\n \n-struct Bcx {\n+struct Bcx<'self> {\n     fcx: &'self Fcx<'self>\n }\n \n-struct Fcx {\n+struct Fcx<'self> {\n     arena: &'self arena,\n     ccx: &'self Ccx\n }\n@@ -23,14 +23,14 @@ struct Ccx {\n     x: int\n }\n \n-fn alloc(_bcx : &'a arena) -> &'a Bcx<'a> {\n+fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n         return cast::reinterpret_cast(\n             &libc::malloc(sys::size_of::<Bcx<'blk>>() as libc::size_t));\n     }\n }\n \n-fn h(bcx : &'a Bcx<'a>) -> &'a Bcx<'a> {\n+fn h<'a>(bcx : &'a Bcx<'a>) -> &'a Bcx<'a> {\n     return alloc(bcx.fcx.arena);\n }\n "}, {"sha": "e842ed585be8093bfc7ba0ff89fc9d231feb1144", "filename": "src/test/run-pass/regions-nullary-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-nullary-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-nullary-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-nullary-variant.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum roption {\n+enum roption<'self> {\n     a, b(&'self uint)\n }\n \n-fn mk(cond: bool, ptr: &'r uint) -> roption<'r> {\n+fn mk<'r>(cond: bool, ptr: &'r uint) -> roption<'r> {\n     if cond {a} else {b(ptr)}\n }\n "}, {"sha": "cc5b89405aac9e8f7b51aa02bd31a04355173c15", "filename": "src/test/run-pass/regions-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-params.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-fn region_identity(x: &'r uint) -> &'r uint { x }\n+fn region_identity<'r>(x: &'r uint) -> &'r uint { x }\n \n fn apply<T>(t: T, f: &fn(T) -> T) -> T { f(t) }\n "}, {"sha": "78045e5e5d4109f80652ae35baf1a47cfb2f0d17", "filename": "src/test/run-pass/regions-self-in-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum int_wrapper {\n+enum int_wrapper<'self> {\n     int_wrapper_ctor(&'self int)\n }\n "}, {"sha": "5221bc28fb83830bf56336b60ed1817dda0877bf", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct closure_box {\n+struct closure_box<'self> {\n     cl: &'self fn(),\n }\n \n-fn box_it(+x: &'r fn()) -> closure_box<'r> {\n+fn box_it<'r>(+x: &'r fn()) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n "}, {"sha": "92ef18967b361f42ed1cdbca7cf58b4988ca52e3", "filename": "src/test/run-pass/regions-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -10,13 +10,13 @@\n \n struct Ctxt { v: uint }\n \n-trait get_ctxt {\n+trait get_ctxt<'self> {\n     fn get_ctxt(&self) -> &'self Ctxt;\n }\n \n-struct HasCtxt { c: &'self Ctxt }\n+struct HasCtxt<'self> { c: &'self Ctxt }\n \n-impl get_ctxt for HasCtxt<'self> {\n+impl<'self> get_ctxt for HasCtxt<'self> {\n     fn get_ctxt(&self) -> &'self Ctxt {\n         self.c\n     }"}, {"sha": "f877a766ead6fb5a1204f7e2d7db76a8fc998ec5", "filename": "src/test/run-pass/struct-field-assignability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fstruct-field-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60/src%2Ftest%2Frun-pass%2Fstruct-field-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-field-assignability.rs?ref=8b56a8380b6cca384f4ade7aa1a07b0c5eb77d60", "patch": "@@ -1,4 +1,4 @@\n-struct Foo {\n+struct Foo<'self> {\n     x: &'self int\n }\n "}]}