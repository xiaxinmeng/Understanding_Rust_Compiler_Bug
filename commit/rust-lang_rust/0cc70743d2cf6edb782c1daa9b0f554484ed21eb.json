{"sha": "0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYzcwNzQzZDJjZjZlZGI3ODJjMWRhYTliMGY1NTQ0ODRlZDIxZWI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-16T18:08:35Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-17T06:21:46Z"}, "message": "Made ast::blk not use spanned<T> anymore.", "tree": {"sha": "578d226937e919d49b30825b4a6b3dcaa44cee0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/578d226937e919d49b30825b4a6b3dcaa44cee0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "html_url": "https://github.com/rust-lang/rust/commit/0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd716ac8eb60dbaced9e3d2bafee89b713a7849", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd716ac8eb60dbaced9e3d2bafee89b713a7849", "html_url": "https://github.com/rust-lang/rust/commit/4bd716ac8eb60dbaced9e3d2bafee89b713a7849"}], "stats": {"total": 381, "additions": 190, "deletions": 191}, "files": [{"sha": "15ce8c4c7e2864badbed0d6c294e79f97783a118", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -422,7 +422,7 @@ pub fn pretty_print_input(sess: Session, cfg: ast::crate_cfg, input: &input,\n           pprust::node_block(s, ref blk) => {\n             pp::space(s.s);\n             pprust::synth_comment(\n-                s, ~\"block \" + int::to_str(blk.node.id));\n+                s, ~\"block \" + int::to_str(blk.id));\n           }\n           pprust::node_expr(s, expr) => {\n             pp::space(s.s);"}, {"sha": "9a468788f7a428c3638668a6c239b85fe819242a", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -33,7 +33,7 @@ pub fn strip_items(crate: &ast::crate, in_cfg: in_cfg_pred)\n \n     let precursor = @fold::AstFoldFns {\n           fold_mod: |a,b| fold_mod(ctxt, a, b),\n-          fold_block: fold::wrap(|a,b| fold_block(ctxt, a, b) ),\n+          fold_block: |a,b| fold_block(ctxt, a, b),\n           fold_foreign_mod: |a,b| fold_foreign_mod(ctxt, a, b),\n           fold_item_underscore: |a,b| {\n             // Bad copy.\n@@ -133,21 +133,22 @@ fn filter_stmt(cx: @Context, stmt: @ast::stmt) ->\n \n fn fold_block(\n     cx: @Context,\n-    b: &ast::blk_,\n+    b: &ast::blk,\n     fld: @fold::ast_fold\n-) -> ast::blk_ {\n+) -> ast::blk {\n     let resulting_stmts = do b.stmts.iter().filter_map |a| {\n         filter_stmt(cx, *a).chain(|stmt| fld.fold_stmt(stmt))\n     }.collect();\n     let filtered_view_items = do b.view_items.iter().filter_map |a| {\n         filter_view_item(cx, a).map(|&x| fld.fold_view_item(x))\n     }.collect();\n-    ast::blk_ {\n+    ast::blk {\n         view_items: filtered_view_items,\n         stmts: resulting_stmts,\n         expr: b.expr.map(|x| fld.fold_expr(*x)),\n         id: b.id,\n         rules: b.rules,\n+        span: b.span,\n     }\n }\n "}, {"sha": "7684f465a4c33b0e57e49c3bd1e915ba1c43161c", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -289,7 +289,7 @@ fn encode_ast(ebml_w: &mut writer::Encoder, item: ast::inlined_item) {\n // nested items, as otherwise it would get confused when translating\n // inlined items.\n fn simplify_ast(ii: &ast::inlined_item) -> ast::inlined_item {\n-    fn drop_nested_items(blk: &ast::blk_, fld: @fold::ast_fold) -> ast::blk_ {\n+    fn drop_nested_items(blk: &ast::blk, fld: @fold::ast_fold) -> ast::blk {\n         let stmts_sans_items = do blk.stmts.iter().filter_map |stmt| {\n             match stmt.node {\n               ast::stmt_expr(_, _) | ast::stmt_semi(_, _) |\n@@ -300,19 +300,20 @@ fn simplify_ast(ii: &ast::inlined_item) -> ast::inlined_item {\n               ast::stmt_mac(*) => fail!(\"unexpanded macro in astencode\")\n             }\n         }.collect();\n-        let blk_sans_items = ast::blk_ {\n+        let blk_sans_items = ast::blk {\n             view_items: ~[], // I don't know if we need the view_items here,\n                              // but it doesn't break tests!\n             stmts: stmts_sans_items,\n             expr: blk.expr,\n             id: blk.id,\n-            rules: blk.rules\n+            rules: blk.rules,\n+            span: blk.span,\n         };\n         fold::noop_fold_block(&blk_sans_items, fld)\n     }\n \n     let fld = fold::make_fold(@fold::AstFoldFns {\n-        fold_block: fold::wrap(drop_nested_items),\n+        fold_block: drop_nested_items,\n         .. *fold::default_ast_fold()\n     });\n "}, {"sha": "f10a2a258fe9b285e61d0f7a7cb4fb33edb9aca6", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -44,7 +44,7 @@ pub fn check_loans(bccx: @BorrowckCtxt,\n                    move_data: move_data::FlowedMoveData,\n                    all_loans: &[Loan],\n                    body: &ast::blk) {\n-    debug!(\"check_loans(body id=%?)\", body.node.id);\n+    debug!(\"check_loans(body id=%?)\", body.id);\n \n     let clcx = @mut CheckLoanCtxt {\n         bccx: bccx,\n@@ -751,5 +751,5 @@ fn check_loans_in_block<'a>(blk: &ast::blk,\n                                          visit::vt<@mut CheckLoanCtxt<'a>>))\n {\n     visit::visit_block(blk, (this, vt));\n-    this.check_for_conflicting_loans(blk.node.id);\n+    this.check_for_conflicting_loans(blk.id);\n }"}, {"sha": "ce18785ca3969424c0205772b81f7f63a45d40f2", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -80,8 +80,8 @@ pub fn gather_loans(bccx: @BorrowckCtxt,\n         bccx: bccx,\n         id_range: id_range::max(),\n         all_loans: @mut ~[],\n-        item_ub: body.node.id,\n-        repeating_ids: ~[body.node.id],\n+        item_ub: body.id,\n+        repeating_ids: ~[body.id],\n         move_data: @mut MoveData::new()\n     };\n     glcx.gather_fn_arg_patterns(decl, body);\n@@ -123,9 +123,9 @@ fn gather_loans_in_fn(fk: &visit::fn_kind,\n \n         // Visit closures as part of the containing item.\n         &visit::fk_anon(*) | &visit::fk_fn_block(*) => {\n-            this.push_repeating_id(body.node.id);\n+            this.push_repeating_id(body.id);\n             visit::visit_fn(fk, decl, body, sp, id, (this, v));\n-            this.pop_repeating_id(body.node.id);\n+            this.pop_repeating_id(body.id);\n             this.gather_fn_arg_patterns(decl, body);\n         }\n     }\n@@ -134,7 +134,7 @@ fn gather_loans_in_fn(fk: &visit::fn_kind,\n fn gather_loans_in_block(blk: &ast::blk,\n                          (this, vt): (@mut GatherLoanCtxt,\n                                       visit::vt<@mut GatherLoanCtxt>)) {\n-    this.id_range.add(blk.node.id);\n+    this.id_range.add(blk.id);\n     visit::visit_block(blk, (this, vt));\n }\n \n@@ -240,7 +240,7 @@ fn gather_loans_in_expr(ex: @ast::expr,\n         let cmt = this.bccx.cat_expr(ex_v);\n         for arms.iter().advance |arm| {\n             for arm.pats.iter().advance |pat| {\n-                this.gather_pat(cmt, *pat, Some((arm.body.node.id, ex.id)));\n+                this.gather_pat(cmt, *pat, Some((arm.body.id, ex.id)));\n             }\n         }\n         visit::visit_expr(ex, (this, vt));\n@@ -268,16 +268,16 @@ fn gather_loans_in_expr(ex: @ast::expr,\n           this.pop_repeating_id(cond.id);\n \n           // during body, can only root for the body\n-          this.push_repeating_id(body.node.id);\n+          this.push_repeating_id(body.id);\n           (vt.visit_block)(body, (this, vt));\n-          this.pop_repeating_id(body.node.id);\n+          this.pop_repeating_id(body.id);\n       }\n \n       // see explanation attached to the `root_ub` field:\n       ast::expr_loop(ref body, _) => {\n-          this.push_repeating_id(body.node.id);\n+          this.push_repeating_id(body.id);\n           visit::visit_expr(ex, (this, vt));\n-          this.pop_repeating_id(body.node.id);\n+          this.pop_repeating_id(body.id);\n       }\n \n       ast::expr_fn_block(*) => {\n@@ -623,7 +623,7 @@ impl GatherLoanCtxt {\n             let arg_cmt = mc_ctxt.cat_rvalue(\n                 arg.id,\n                 arg.pat.span,\n-                body.node.id, // Arguments live only as long as the fn body.\n+                body.id, // Arguments live only as long as the fn body.\n                 arg_ty);\n \n             self.gather_pat(arg_cmt, arg.pat, None);"}, {"sha": "19debc9c1235414f8c523a5fc0c31119b2ebf553", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -53,13 +53,13 @@ pub fn construct(tcx: ty::ctxt,\n impl CFGBuilder {\n     fn block(&mut self, blk: &ast::blk, pred: CFGIndex) -> CFGIndex {\n         let mut stmts_exit = pred;\n-        for blk.node.stmts.iter().advance |&stmt| {\n+        for blk.stmts.iter().advance |&stmt| {\n             stmts_exit = self.stmt(stmt, stmts_exit);\n         }\n \n-        let expr_exit = self.opt_expr(blk.node.expr, stmts_exit);\n+        let expr_exit = self.opt_expr(blk.expr, stmts_exit);\n \n-        self.add_node(blk.node.id, [expr_exit])\n+        self.add_node(blk.id, [expr_exit])\n     }\n \n     fn stmt(&mut self, stmt: @ast::stmt, pred: CFGIndex) -> CFGIndex {"}, {"sha": "8c464928b5825d275c15cec4c84d958365e44dd3", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -330,7 +330,7 @@ impl<O:DataFlowOperator+Copy+'static> DataFlowContext<O> {\n         let pre: @fn(pprust::ann_node) = |node| {\n             let (ps, id) = match node {\n                 pprust::node_expr(ps, expr) => (ps, expr.id),\n-                pprust::node_block(ps, blk) => (ps, blk.node.id),\n+                pprust::node_block(ps, blk) => (ps, blk.id),\n                 pprust::node_item(ps, _) => (ps, 0),\n                 pprust::node_pat(ps, pat) => (ps, pat.id)\n             };\n@@ -383,18 +383,18 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n                   blk: &ast::blk,\n                   in_out: &mut [uint],\n                   loop_scopes: &mut ~[LoopScope]) {\n-        debug!(\"DataFlowContext::walk_block(blk.node.id=%?, in_out=%s)\",\n-               blk.node.id, bits_to_str(reslice(in_out)));\n+        debug!(\"DataFlowContext::walk_block(blk.id=%?, in_out=%s)\",\n+               blk.id, bits_to_str(reslice(in_out)));\n \n-        self.merge_with_entry_set(blk.node.id, in_out);\n+        self.merge_with_entry_set(blk.id, in_out);\n \n-        for blk.node.stmts.iter().advance |&stmt| {\n+        for blk.stmts.iter().advance |&stmt| {\n             self.walk_stmt(stmt, in_out, loop_scopes);\n         }\n \n-        self.walk_opt_expr(blk.node.expr, in_out, loop_scopes);\n+        self.walk_opt_expr(blk.expr, in_out, loop_scopes);\n \n-        self.dfcx.apply_gen_kill(blk.node.id, in_out);\n+        self.dfcx.apply_gen_kill(blk.id, in_out);\n     }\n \n     fn walk_stmt(&mut self,"}, {"sha": "5970054620558e3f52ead5552547fadd9b80ee6d", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -99,9 +99,9 @@ pub fn check_crate(tcx: ty::ctxt,\n \n         visit_block: |block, (_, visitor)| {\n             let old_unsafe_context = context.unsafe_context;\n-            if block.node.rules == unsafe_blk &&\n+            if block.rules == unsafe_blk &&\n                     context.unsafe_context == SafeContext {\n-                context.unsafe_context = UnsafeBlock(block.node.id)\n+                context.unsafe_context = UnsafeBlock(block.id)\n             }\n \n             visit::visit_block(block, ((), visitor));"}, {"sha": "128755364b0ba1f6d6d3e3061ff0a4ab9388940e", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -916,8 +916,8 @@ fn lint_unused_unsafe() -> visit::vt<@mut Context> {\n     visit::mk_vt(@visit::Visitor {\n         visit_expr: |e, (cx, vt): (@mut Context, visit::vt<@mut Context>)| {\n             match e.node {\n-                ast::expr_block(ref blk) if blk.node.rules == ast::unsafe_blk => {\n-                    if !cx.tcx.used_unsafe.contains(&blk.node.id) {\n+                ast::expr_block(ref blk) if blk.rules == ast::unsafe_blk => {\n+                    if !cx.tcx.used_unsafe.contains(&blk.id) {\n                         cx.span_lint(unused_unsafe, blk.span,\n                                      \"unnecessary `unsafe` block\");\n                     }"}, {"sha": "a62a14ed481804e34635c6ce22120e9e477ce991", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -886,7 +886,7 @@ impl Liveness {\n                       self.tcx.sess.intr()));\n \n         let entry_ln: LiveNode =\n-            self.with_loop_nodes(body.node.id, self.s.exit_ln, self.s.exit_ln,\n+            self.with_loop_nodes(body.id, self.s.exit_ln, self.s.exit_ln,\n               || { self.propagate_through_fn_block(decl, body) });\n \n         // hack to skip the loop unless debug! is enabled:\n@@ -895,7 +895,7 @@ impl Liveness {\n                    for uint::range(0u, self.ir.num_live_nodes) |ln_idx| {\n                        debug!(\"%s\", self.ln_str(LiveNode(ln_idx)));\n                    }\n-                   body.node.id\n+                   body.id\n                },\n                entry_ln.to_str());\n \n@@ -907,7 +907,7 @@ impl Liveness {\n         // the fallthrough exit is only for those cases where we do not\n         // explicitly return:\n         self.init_from_succ(self.s.fallthrough_ln, self.s.exit_ln);\n-        if blk.node.expr.is_none() {\n+        if blk.expr.is_none() {\n             self.acc(self.s.fallthrough_ln, self.s.no_ret_var, ACC_READ)\n         }\n \n@@ -916,8 +916,8 @@ impl Liveness {\n \n     pub fn propagate_through_block(&self, blk: &blk, succ: LiveNode)\n                                    -> LiveNode {\n-        let succ = self.propagate_through_opt_expr(blk.node.expr, succ);\n-        do blk.node.stmts.rev_iter().fold(succ) |succ, stmt| {\n+        let succ = self.propagate_through_opt_expr(blk.expr, succ);\n+        do blk.stmts.rev_iter().fold(succ) |succ, stmt| {\n             self.propagate_through_stmt(*stmt, succ)\n         }\n     }\n@@ -1009,7 +1009,7 @@ impl Liveness {\n               The next-node for a break is the successor of the entire\n               loop. The next-node for a continue is the top of this loop.\n               */\n-              self.with_loop_nodes(blk.node.id, succ,\n+              self.with_loop_nodes(blk.id, succ,\n                   self.live_node(expr.id, expr.span), || {\n \n                  // the construction of a closure itself is not important,"}, {"sha": "d569f852612ec20ce00c3ff97cdbf010292ff57d", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -285,13 +285,13 @@ impl VisitContext {\n          * meaning either copied or moved depending on its type.\n          */\n \n-        debug!(\"consume_block(blk.id=%?)\", blk.node.id);\n+        debug!(\"consume_block(blk.id=%?)\", blk.id);\n \n-        for blk.node.stmts.iter().advance |stmt| {\n+        for blk.stmts.iter().advance |stmt| {\n             (visitor.visit_stmt)(*stmt, (*self, visitor));\n         }\n \n-        for blk.node.expr.iter().advance |tail_expr| {\n+        for blk.expr.iter().advance |tail_expr| {\n             self.consume_expr(*tail_expr, visitor);\n         }\n     }"}, {"sha": "0a13cf4ed185619ba0d06a00cdeea71900a641f3", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -384,7 +384,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n         visit_block: |block, (method_map, visitor)| {\n             // Gather up all the privileged items.\n             let mut n_added = 0;\n-            for block.node.stmts.iter().advance |stmt| {\n+            for block.stmts.iter().advance |stmt| {\n                 match stmt.node {\n                     stmt_decl(decl, _) => {\n                         match decl.node {"}, {"sha": "4ede700d7a65dd6067b8f4e09a36d8f241686c41", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -324,11 +324,11 @@ fn parent_to_expr(cx: Context, child_id: ast::node_id, sp: span) {\n \n fn resolve_block(blk: &ast::blk, (cx, visitor): (Context, visit::vt<Context>)) {\n     // Record the parent of this block.\n-    parent_to_expr(cx, blk.node.id, blk.span);\n+    parent_to_expr(cx, blk.id, blk.span);\n \n     // Descend.\n-    let new_cx = Context {var_parent: Some(blk.node.id),\n-                          parent: Some(blk.node.id),\n+    let new_cx = Context {var_parent: Some(blk.id),\n+                          parent: Some(blk.id),\n                           ..cx};\n     visit::visit_block(blk, (new_cx, visitor));\n }\n@@ -420,20 +420,20 @@ fn resolve_fn(fk: &visit::fn_kind,\n                               visit::vt<Context>)) {\n     debug!(\"region::resolve_fn(id=%?, \\\n                                span=%?, \\\n-                               body.node.id=%?, \\\n+                               body.id=%?, \\\n                                cx.parent=%?)\",\n            id,\n            cx.sess.codemap.span_to_str(sp),\n-           body.node.id,\n+           body.id,\n            cx.parent);\n \n     // The arguments and `self` are parented to the body of the fn.\n-    let decl_cx = Context {parent: Some(body.node.id),\n-                           var_parent: Some(body.node.id),\n+    let decl_cx = Context {parent: Some(body.id),\n+                           var_parent: Some(body.id),\n                            ..cx};\n     match *fk {\n         visit::fk_method(_, _, method) => {\n-            cx.region_maps.record_parent(method.self_id, body.node.id);\n+            cx.region_maps.record_parent(method.self_id, body.id);\n         }\n         _ => {}\n     }"}, {"sha": "fbb89ffe6908872d972f48a9fe2306ae7b59c205", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -1069,12 +1069,12 @@ impl Resolver {\n \n     pub fn block_needs_anonymous_module(@mut self, block: &blk) -> bool {\n         // If the block has view items, we need an anonymous module.\n-        if block.node.view_items.len() > 0 {\n+        if block.view_items.len() > 0 {\n             return true;\n         }\n \n         // Check each statement.\n-        for block.node.stmts.iter().advance |statement| {\n+        for block.stmts.iter().advance |statement| {\n             match statement.node {\n                 stmt_decl(declaration, _) => {\n                     match declaration.node {\n@@ -1566,7 +1566,7 @@ impl Resolver {\n                                           vt<ReducedGraphParent>)) {\n         let new_parent;\n         if self.block_needs_anonymous_module(block) {\n-            let block_id = block.node.id;\n+            let block_id = block.id;\n \n             debug!(\"(building reduced graph for block) creating a new \\\n                     anonymous module for block %d\",\n@@ -4096,7 +4096,7 @@ impl Resolver {\n \n         // Move down in the graph, if there's an anonymous module rooted here.\n         let orig_module = self.current_module;\n-        match self.current_module.anonymous_children.find(&block.node.id) {\n+        match self.current_module.anonymous_children.find(&block.id) {\n             None => { /* Nothing to do. */ }\n             Some(&anonymous_module) => {\n                 debug!(\"(resolving block) found anonymous module, moving \\\n@@ -4989,7 +4989,7 @@ impl Resolver {\n             }\n \n             expr_fn_block(ref fn_decl, ref block) => {\n-                self.resolve_function(FunctionRibKind(expr.id, block.node.id),\n+                self.resolve_function(FunctionRibKind(expr.id, block.id),\n                                       Some(fn_decl),\n                                       NoTypeParameters,\n                                       block,"}, {"sha": "bd0f0baedf9e89d30c25d06090cab863b804bc04", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -1430,7 +1430,7 @@ pub fn with_scope_datumblock(bcx: block, opt_node_info: Option<NodeInfo>,\n }\n \n pub fn block_locals(b: &ast::blk, it: &fn(@ast::local)) {\n-    for b.node.stmts.iter().advance |s| {\n+    for b.stmts.iter().advance |s| {\n         match s.node {\n           ast::stmt_decl(d, _) => {\n             match d.node {\n@@ -1858,7 +1858,7 @@ pub fn trans_closure(ccx: @mut CrateContext,\n     let bcx_top = top_scope_block(fcx, body.info());\n     let mut bcx = bcx_top;\n     let lltop = bcx.llbb;\n-    let block_ty = node_id_type(bcx, body.node.id);\n+    let block_ty = node_id_type(bcx, body.id);\n \n     let arg_tys = ty::ty_fn_args(node_id_type(bcx, id));\n     bcx = copy_args_to_allocas(fcx, bcx, decl.inputs, raw_llargs, arg_tys);\n@@ -1869,7 +1869,7 @@ pub fn trans_closure(ccx: @mut CrateContext,\n     // translation calls that don't have a return value (trans_crate,\n     // trans_mod, trans_item, et cetera) and those that do\n     // (trans_block, trans_expr, et cetera).\n-    if body.node.expr.is_none() || ty::type_is_bot(block_ty) ||\n+    if body.expr.is_none() || ty::type_is_bot(block_ty) ||\n         ty::type_is_nil(block_ty)\n     {\n         bcx = controlflow::trans_block(bcx, body, expr::Ignore);\n@@ -2132,7 +2132,7 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n                      item.id,\n                      item.attrs);\n         } else {\n-            for body.node.stmts.iter().advance |stmt| {\n+            for body.stmts.iter().advance |stmt| {\n                 match stmt.node {\n                   ast::stmt_decl(@codemap::spanned { node: ast::decl_item(i),\n                                                  _ }, _) => {"}, {"sha": "a5a607ba1a5e49316a90156c03d34da81c75b2a4", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -481,7 +481,7 @@ impl get_node_info for ast::expr {\n \n impl get_node_info for ast::blk {\n     fn info(&self) -> Option<NodeInfo> {\n-        Some(NodeInfo {id: self.node.id,\n+        Some(NodeInfo {id: self.id,\n                        callee_id: None,\n                        span: self.span})\n     }"}, {"sha": "c573b926f44ae41f4fd4eb27b299fd1561d0df34", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -35,11 +35,11 @@ use syntax::codemap::span;\n pub fn trans_block(bcx: block, b: &ast::blk, dest: expr::Dest) -> block {\n     let _icx = push_ctxt(\"trans_block\");\n     let mut bcx = bcx;\n-    for b.node.stmts.iter().advance |s| {\n+    for b.stmts.iter().advance |s| {\n         debuginfo::update_source_pos(bcx, b.span);\n         bcx = trans_stmt(bcx, *s);\n     }\n-    match b.node.expr {\n+    match b.expr {\n         Some(e) => {\n             debuginfo::update_source_pos(bcx, e.span);\n             bcx = expr::trans_into(bcx, e, dest);\n@@ -58,7 +58,7 @@ pub fn trans_if(bcx: block,\n             dest: expr::Dest)\n          -> block {\n     debug!(\"trans_if(bcx=%s, cond=%s, thn=%?, dest=%s)\",\n-           bcx.to_str(), bcx.expr_to_str(cond), thn.node.id,\n+           bcx.to_str(), bcx.expr_to_str(cond), thn.id,\n            dest.to_str(bcx.ccx()));\n     let _indenter = indenter();\n "}, {"sha": "bc11953c073e7acafc0e79138afb73c4c30b4118", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -414,7 +414,7 @@ pub fn handle_body(cx: &Context, body: &blk) {\n         },\n         visit_block: |b, (cx, v)| {\n             visit::visit_block(b, (cx, v));\n-            for b.node.expr.iter().advance |e| {\n+            for b.expr.iter().advance |e| {\n                 node_type_needs(cx, use_repr, e.id);\n             }\n         },"}, {"sha": "47cf19cc61a8a8a4017e1bee58a29d2c0587bdb0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -2840,7 +2840,7 @@ pub fn tys_in_fn_sig(sig: &FnSig) -> ~[t] {\n \n // Type accessors for AST nodes\n pub fn block_ty(cx: ctxt, b: &ast::blk) -> t {\n-    return node_id_to_type(cx, b.node.id);\n+    return node_id_to_type(cx, b.id);\n }\n \n "}, {"sha": "5f0a32bb02e64913ee8affa7027b8ec03edf1526", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -72,14 +72,14 @@ pub fn check_match(fcx: @mut FnCtxt,\n           None => ()\n         }\n         check_block(fcx, &arm.body);\n-        let bty = fcx.node_ty(arm.body.node.id);\n+        let bty = fcx.node_ty(arm.body.id);\n         saw_err = saw_err || ty::type_is_error(bty);\n         if guard_err {\n-            fcx.write_error(arm.body.node.id);\n+            fcx.write_error(arm.body.id);\n             saw_err = true;\n         }\n         else if guard_bot {\n-            fcx.write_bot(arm.body.node.id);\n+            fcx.write_bot(arm.body.id);\n         }\n \n         result_ty ="}, {"sha": "562efb767ececc75eaa44b07a59825b06c73227e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -200,8 +200,8 @@ impl PurityState {\n             ast::unsafe_fn if self.from_fn => *self,\n \n             purity => {\n-                let (purity, def) = match blk.node.rules {\n-                    ast::unsafe_blk => (ast::unsafe_fn, blk.node.id),\n+                let (purity, def) = match blk.rules {\n+                    ast::unsafe_blk => (ast::unsafe_fn, blk.id),\n                     ast::default_blk => (purity, self.def),\n                 };\n                 PurityState{ def: def,\n@@ -365,7 +365,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         let (isr, opt_self_ty, fn_sig) =\n             replace_bound_regions_in_fn_sig(\n                 tcx, inherited_isr, opt_self_ty, fn_sig,\n-                |br| ty::re_free(ty::FreeRegion {scope_id: body.node.id,\n+                |br| ty::re_free(ty::FreeRegion {scope_id: body.id,\n                                                  bound_region: br}));\n         let opt_self_info =\n             opt_self_info.map(\n@@ -399,7 +399,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n             ret_ty: ret_ty,\n             indirect_ret_ty: indirect_ret_ty,\n             ps: PurityState::function(purity, id),\n-            region_lb: body.node.id,\n+            region_lb: body.id,\n             in_scope_regions: isr,\n             fn_kind: fn_kind,\n             inh: inherited,\n@@ -412,7 +412,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n \n     // We unify the tail expr's type with the\n     // function result type, if there is a tail expr.\n-    match body.node.expr {\n+    match body.expr {\n       Some(tail_expr) => {\n         let tail_expr_ty = fcx.expr_ty(tail_expr);\n         // Special case: we print a special error if there appears\n@@ -515,7 +515,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n             // non-obvious: the `blk` variable maps to region lb, so\n             // we have to keep this up-to-date.  This\n             // is... unfortunate.  It'd be nice to not need this.\n-            do fcx.with_region_lb(b.node.id) {\n+            do fcx.with_region_lb(b.id) {\n                 visit::visit_block(b, (e, v));\n             }\n         };\n@@ -1456,7 +1456,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let branches_ty = match opt_else_expr {\n             Some(else_expr) => {\n                 check_block_with_expected(fcx, then_blk, expected);\n-                let then_ty = fcx.node_ty(then_blk.node.id);\n+                let then_ty = fcx.node_ty(then_blk.id);\n                 check_expr_with_opt_hint(fcx, else_expr, expected);\n                 let else_ty = fcx.expr_ty(else_expr);\n                 infer::common_supertype(fcx.infcx(),\n@@ -2533,7 +2533,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         check_expr_has_type(fcx, cond, ty::mk_bool());\n         check_block_no_value(fcx, body);\n         let cond_ty = fcx.expr_ty(cond);\n-        let body_ty = fcx.node_ty(body.node.id);\n+        let body_ty = fcx.node_ty(body.id);\n         if ty::type_is_error(cond_ty) || ty::type_is_error(body_ty) {\n             fcx.write_error(id);\n         }\n@@ -2598,7 +2598,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n       }\n       ast::expr_block(ref b) => {\n         check_block_with_expected(fcx, b, expected);\n-        fcx.write_ty(id, fcx.node_ty(b.node.id));\n+        fcx.write_ty(id, fcx.node_ty(b.id));\n       }\n       ast::expr_call(f, ref args, sugar) => {\n           check_call(fcx, expr.id, expr, f, *args, sugar);\n@@ -2959,12 +2959,12 @@ pub fn check_stmt(fcx: @mut FnCtxt, stmt: @ast::stmt)  {\n \n pub fn check_block_no_value(fcx: @mut FnCtxt, blk: &ast::blk)  {\n     check_block_with_expected(fcx, blk, Some(ty::mk_nil()));\n-    let blkty = fcx.node_ty(blk.node.id);\n+    let blkty = fcx.node_ty(blk.id);\n     if ty::type_is_error(blkty) {\n-        fcx.write_error(blk.node.id);\n+        fcx.write_error(blk.id);\n     }\n     else if ty::type_is_bot(blkty) {\n-        fcx.write_bot(blk.node.id);\n+        fcx.write_bot(blk.id);\n     }\n     else {\n         let nilty = ty::mk_nil();\n@@ -2982,12 +2982,12 @@ pub fn check_block_with_expected(fcx: @mut FnCtxt,\n     let purity_state = fcx.ps.recurse(blk);\n     let prev = replace(&mut fcx.ps, purity_state);\n \n-    do fcx.with_region_lb(blk.node.id) {\n+    do fcx.with_region_lb(blk.id) {\n         let mut warned = false;\n         let mut last_was_bot = false;\n         let mut any_bot = false;\n         let mut any_err = false;\n-        for blk.node.stmts.iter().advance |s| {\n+        for blk.stmts.iter().advance |s| {\n             check_stmt(fcx, *s);\n             let s_id = ast_util::stmt_id(*s);\n             let s_ty = fcx.node_ty(s_id);\n@@ -3009,28 +3009,28 @@ pub fn check_block_with_expected(fcx: @mut FnCtxt,\n             any_bot = any_bot || ty::type_is_bot(s_ty);\n             any_err = any_err || ty::type_is_error(s_ty);\n         }\n-        match blk.node.expr {\n+        match blk.expr {\n             None => if any_err {\n-                fcx.write_error(blk.node.id);\n+                fcx.write_error(blk.id);\n             }\n             else if any_bot {\n-                fcx.write_bot(blk.node.id);\n+                fcx.write_bot(blk.id);\n             }\n             else  {\n-                fcx.write_nil(blk.node.id);\n+                fcx.write_nil(blk.id);\n             },\n           Some(e) => {\n             if any_bot && !warned {\n                 fcx.ccx.tcx.sess.span_warn(e.span, \"unreachable expression\");\n             }\n             check_expr_with_opt_hint(fcx, e, expected);\n               let ety = fcx.expr_ty(e);\n-              fcx.write_ty(blk.node.id, ety);\n+              fcx.write_ty(blk.id, ety);\n               if any_err {\n-                  fcx.write_error(blk.node.id);\n+                  fcx.write_error(blk.id);\n               }\n               else if any_bot {\n-                  fcx.write_bot(blk.node.id);\n+                  fcx.write_bot(blk.id);\n               }\n           }\n         };"}, {"sha": "e46cc31a79a472e8b2d2db089a2f7afb181d55cb", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -155,7 +155,7 @@ pub fn regionck_expr(fcx: @mut FnCtxt, e: @ast::expr) {\n \n pub fn regionck_fn(fcx: @mut FnCtxt, blk: &ast::blk) {\n     let rcx = @mut Rcx { fcx: fcx, errors_reported: 0,\n-                         repeating_scope: blk.node.id };\n+                         repeating_scope: blk.id };\n     if fcx.err_count_since_creation() == 0 {\n         // regionck assumes typeck succeeded\n         let v = regionck_visitor();\n@@ -188,7 +188,7 @@ fn visit_item(_item: @ast::item, (_rcx, _v): (@mut Rcx, rvt)) {\n }\n \n fn visit_block(b: &ast::blk, (rcx, v): (@mut Rcx, rvt)) {\n-    rcx.fcx.tcx().region_maps.record_cleanup_scope(b.node.id);\n+    rcx.fcx.tcx().region_maps.record_cleanup_scope(b.id);\n     visit::visit_block(b, (rcx, v));\n }\n \n@@ -287,11 +287,11 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n             }\n         }\n         ast::expr_loop(ref body, _) => {\n-            tcx.region_maps.record_cleanup_scope(body.node.id);\n+            tcx.region_maps.record_cleanup_scope(body.id);\n         }\n         ast::expr_while(cond, ref body) => {\n             tcx.region_maps.record_cleanup_scope(cond.id);\n-            tcx.region_maps.record_cleanup_scope(body.node.id);\n+            tcx.region_maps.record_cleanup_scope(body.id);\n         }\n         _ => {}\n     }\n@@ -434,7 +434,7 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n         }\n \n         ast::expr_loop(ref body, _) => {\n-            let repeating_scope = rcx.set_repeating_scope(body.node.id);\n+            let repeating_scope = rcx.set_repeating_scope(body.id);\n             visit::visit_expr(expr, (rcx, v));\n             rcx.set_repeating_scope(repeating_scope);\n         }\n@@ -443,7 +443,7 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n             let repeating_scope = rcx.set_repeating_scope(cond.id);\n             (v.visit_expr)(cond, (rcx, v));\n \n-            rcx.set_repeating_scope(body.node.id);\n+            rcx.set_repeating_scope(body.id);\n             (v.visit_block)(body, (rcx, v));\n \n             rcx.set_repeating_scope(repeating_scope);\n@@ -486,7 +486,7 @@ fn check_expr_fn_block(rcx: @mut Rcx,\n                 _ => ()\n             }\n \n-            let repeating_scope = rcx.set_repeating_scope(body.node.id);\n+            let repeating_scope = rcx.set_repeating_scope(body.id);\n             visit::visit_expr(expr, (rcx, v));\n             rcx.set_repeating_scope(repeating_scope);\n         }"}, {"sha": "0ffadba7f2247ece98a7966566bbb66be3d5932e", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -276,7 +276,7 @@ fn visit_block(b: &ast::blk, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n         return;\n     }\n \n-    resolve_type_vars_for_node(wbcx, b.span, b.node.id);\n+    resolve_type_vars_for_node(wbcx, b.span, b.id);\n     visit::visit_block(b, (wbcx, v));\n }\n "}, {"sha": "68a6c675f88308fb7269542da8662629e4d76228", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -745,7 +745,7 @@ pub fn convert_methods(ccx: &CrateCtxt,\n         write_ty_to_tcx(tcx, m.id, fty);\n         tcx.methods.insert(mty.def_id, mty);\n         ConvertedMethod {mty: mty, id: m.id,\n-                         span: m.span, body_id: m.body.node.id}\n+                         span: m.span, body_id: m.body.id}\n     }).collect();\n \n     fn ty_of_method(ccx: &CrateCtxt,"}, {"sha": "f8cbd70c0b1b56d83c3c3a41a54ff774e9dbba01", "filename": "src/librusti/program.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrusti%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrusti%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fprogram.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -346,7 +346,7 @@ impl Program {\n         // helper functions to perform ast iteration\n         fn each_user_local(blk: &ast::blk, f: &fn(@ast::local)) {\n             do find_user_block(blk) |blk| {\n-                for blk.node.stmts.iter().advance |stmt| {\n+                for blk.stmts.iter().advance |stmt| {\n                     match stmt.node {\n                         ast::stmt_decl(d, _) => {\n                             match d.node {\n@@ -361,7 +361,7 @@ impl Program {\n         }\n \n         fn find_user_block(blk: &ast::blk, f: &fn(&ast::blk)) {\n-            for blk.node.stmts.iter().advance |stmt| {\n+            for blk.stmts.iter().advance |stmt| {\n                 match stmt.node {\n                     ast::stmt_semi(e, _) => {\n                         match e.node {"}, {"sha": "ab6ae0385fba29e7924125f3e43a53bc4453dd1c", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -149,7 +149,7 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n     do find_main(crate, sess) |blk| {\n         // Fish out all the view items, be sure to record 'extern mod' items\n         // differently beause they must appear before all 'use' statements\n-        for blk.node.view_items.iter().advance |vi| {\n+        for blk.view_items.iter().advance |vi| {\n             let s = do with_pp(intr) |pp, _| {\n                 pprust::print_view_item(pp, vi);\n             };\n@@ -163,7 +163,7 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n \n         // Iterate through all of the block's statements, inserting them into\n         // the correct portions of the program\n-        for blk.node.stmts.iter().advance |stmt| {\n+        for blk.stmts.iter().advance |stmt| {\n             let s = do with_pp(intr) |pp, _| { pprust::print_stmt(pp, *stmt); };\n             match stmt.node {\n                 ast::stmt_decl(d, _) => {\n@@ -203,7 +203,7 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n                 }\n             }\n         }\n-        result = do blk.node.expr.map_consume |e| {\n+        result = do blk.expr.map_consume |e| {\n             do with_pp(intr) |pp, _| { pprust::print_expr(pp, e); }\n         };\n     }"}, {"sha": "6cf38d5ae1df27768010dddbf2a7cfdc683ed7a7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -215,15 +215,16 @@ pub enum meta_item_ {\n     meta_name_value(@str, lit),\n }\n \n-pub type blk = spanned<blk_>;\n+//pub type blk = spanned<blk_>;\n \n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n-pub struct blk_ {\n+pub struct blk {\n     view_items: ~[view_item],\n     stmts: ~[@stmt],\n     expr: Option<@expr>,\n     id: node_id,\n     rules: blk_check_mode,\n+    span: span,\n }\n \n #[deriving(Eq, Encodable, Decodable,IterBytes)]"}, {"sha": "354471fc2a1e79b43571954091c64b37f50bb604", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -190,7 +190,7 @@ pub fn map_fn(\n }\n \n pub fn map_block(b: &blk, (cx,v): (@mut Ctx, visit::vt<@mut Ctx>)) {\n-    cx.map.insert(b.node.id, node_block(/* FIXME (#2543) */ copy *b));\n+    cx.map.insert(b.id, node_block(/* FIXME (#2543) */ copy *b));\n     visit::visit_block(b, (cx, v));\n }\n "}, {"sha": "00e667d7b88ce7794d5a6060ed2458996e94c997", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -11,7 +11,7 @@\n use ast::*;\n use ast;\n use ast_util;\n-use codemap::{span, spanned};\n+use codemap::{span, dummy_sp};\n use opt_vec;\n use parse::token;\n use visit;\n@@ -194,21 +194,23 @@ pub fn is_call_expr(e: @expr) -> bool {\n }\n \n pub fn block_from_expr(e: @expr) -> blk {\n-    let blk_ = default_block(~[], option::Some::<@expr>(e), e.id);\n-    return spanned {node: blk_, span: e.span};\n+    let mut blk = default_block(~[], option::Some::<@expr>(e), e.id);\n+    blk.span = e.span;\n+    return blk;\n }\n \n pub fn default_block(\n     stmts1: ~[@stmt],\n     expr1: Option<@expr>,\n     id1: node_id\n-) -> blk_ {\n-    ast::blk_ {\n+) -> blk {\n+    ast::blk {\n         view_items: ~[],\n         stmts: stmts1,\n         expr: expr1,\n         id: id1,\n         rules: default_blk,\n+        span: dummy_sp(),\n     }\n }\n \n@@ -437,7 +439,7 @@ pub fn id_visitor<T: Copy>(vfn: @fn(node_id, T)) -> visit::vt<T> {\n             visit::visit_local(l, (t, vt));\n         },\n         visit_block: |b, (t, vt)| {\n-            vfn(b.node.id, copy t);\n+            vfn(b.id, copy t);\n             visit::visit_block(b, (t, vt));\n         },\n         visit_stmt: |s, (t, vt)| {"}, {"sha": "83fce24bef8b7f4e55dfc9e1eb4fbf960511263c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -400,14 +400,14 @@ impl AstBuilder for @ExtCtxt {\n                view_items: ~[ast::view_item],\n                stmts: ~[@ast::stmt],\n                expr: Option<@ast::expr>) -> ast::blk {\n-        respan(span,\n-               ast::blk_ {\n-                   view_items: view_items,\n-                   stmts: stmts,\n-                   expr: expr,\n-                   id: self.next_id(),\n-                   rules: ast::default_blk,\n-               })\n+           ast::blk {\n+               view_items: view_items,\n+               stmts: stmts,\n+               expr: expr,\n+               id: self.next_id(),\n+               rules: ast::default_blk,\n+               span: span,\n+           }\n     }\n \n     fn expr(&self, span: span, node: ast::expr_) -> @ast::expr {"}, {"sha": "3f7579c769129c3b0cac670d4fdc15f5962656b5", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{blk_, crate, expr_, expr_mac, mac_invoc_tt};\n+use ast::{blk, crate, expr_, expr_mac, mac_invoc_tt};\n use ast::{item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n use ast::{illegal_ctxt};\n use ast;\n@@ -394,13 +394,12 @@ pub fn new_name_finder() -> @Visitor<@mut ~[ast::ident]> {\n \n pub fn expand_block(extsbox: @mut SyntaxEnv,\n                     _cx: @ExtCtxt,\n-                    blk: &blk_,\n-                    sp: span,\n+                    blk: &blk,\n                     fld: @ast_fold,\n-                    orig: @fn(&blk_, span, @ast_fold) -> (blk_, span))\n-                 -> (blk_, span) {\n+                    orig: @fn(&blk, @ast_fold) -> blk)\n+                 -> blk {\n     // see note below about treatment of exts table\n-    with_exts_frame!(extsbox,false,orig(blk,sp,fld))\n+    with_exts_frame!(extsbox,false,orig(blk,fld))\n }\n \n \n@@ -736,8 +735,8 @@ pub fn expand_crate(parse_sess: @mut parse::ParseSess,\n             expand_item(extsbox, cx, item, recur, afp.fold_item),\n         fold_stmt: |stmt,span,recur|\n             expand_stmt(extsbox, cx, stmt, span, recur, afp.fold_stmt),\n-        fold_block: |blk,span,recur|\n-            expand_block(extsbox, cx, blk, span, recur, afp.fold_block),\n+        fold_block: |blk,recur|\n+            expand_block(extsbox, cx, blk, recur, afp.fold_block),\n         new_span: |a| new_span(cx, a),\n         .. *afp};\n     let f = make_fold(f_pre);"}, {"sha": "059637ca7361331121ff97d565380ff752c5b6dd", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -51,7 +51,7 @@ pub struct AstFoldFns {\n     fold_struct_field: @fn(@struct_field, @ast_fold) -> @struct_field,\n     fold_item_underscore: @fn(&item_, @ast_fold) -> item_,\n     fold_method: @fn(@method, @ast_fold) -> @method,\n-    fold_block: @fn(&blk_, span, @ast_fold) -> (blk_, span),\n+    fold_block: @fn(&blk, @ast_fold) -> blk,\n     fold_stmt: @fn(&stmt_, span, @ast_fold) -> (Option<stmt_>, span),\n     fold_arm: @fn(&arm, @ast_fold) -> arm,\n     fold_pat: @fn(&pat_, span, @ast_fold) -> (pat_, span),\n@@ -372,7 +372,7 @@ fn noop_fold_method(m: @method, fld: @ast_fold) -> @method {\n }\n \n \n-pub fn noop_fold_block(b: &blk_, fld: @ast_fold) -> blk_ {\n+pub fn noop_fold_block(b: &blk, fld: @ast_fold) -> blk {\n     let view_items = b.view_items.map(|x| fld.fold_view_item(x));\n     let mut stmts = ~[];\n     for b.stmts.iter().advance |stmt| {\n@@ -381,12 +381,13 @@ pub fn noop_fold_block(b: &blk_, fld: @ast_fold) -> blk_ {\n             Some(stmt) => stmts.push(stmt)\n         }\n     }\n-    ast::blk_ {\n+    ast::blk {\n         view_items: view_items,\n         stmts: stmts,\n         expr: b.expr.map(|x| fld.fold_expr(*x)),\n         id: fld.new_id(b.id),\n         rules: b.rules,\n+        span: b.span,\n     }\n }\n \n@@ -794,7 +795,7 @@ pub fn default_ast_fold() -> ast_fold_fns {\n         fold_struct_field: noop_fold_struct_field,\n         fold_item_underscore: noop_fold_item_underscore,\n         fold_method: noop_fold_method,\n-        fold_block: wrap(noop_fold_block),\n+        fold_block: noop_fold_block,\n         fold_stmt: |x, s, fld| (noop_fold_stmt(x, fld), s),\n         fold_arm: noop_fold_arm,\n         fold_pat: wrap(noop_fold_pat),\n@@ -851,8 +852,7 @@ impl ast_fold for AstFoldFns {\n         (self.fold_method)(x, self as @ast_fold)\n     }\n     fn fold_block(@self, x: &blk) -> blk {\n-        let (n, s) = (self.fold_block)(&x.node, x.span, self as @ast_fold);\n-        spanned { node: n, span: (self.new_span)(s) }\n+        (self.fold_block)(x, self as @ast_fold)\n     }\n     fn fold_stmt(@self, x: &stmt) -> Option<@stmt> {\n         let (n_opt, s) = (self.fold_stmt)(&x.node, x.span, self as @ast_fold);"}, {"sha": "44497f72003376cfa12146a39b0429556a15eca9", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -13,7 +13,6 @@\n  */\n \n use ast;\n-use codemap;\n \n // does this expression require a semicolon to be treated\n // as a statement? The negation of this: 'can this expression\n@@ -40,8 +39,7 @@ pub fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n pub fn expr_is_simple_block(e: @ast::expr) -> bool {\n     match e.node {\n         ast::expr_block(\n-            codemap::spanned {\n-                node: ast::blk_ { rules: ast::default_blk, _ }, _ }\n+            ast::blk { rules: ast::default_blk, _ }\n         ) => true,\n       _ => false\n     }"}, {"sha": "40f1964bc9cd05c77bac07635ac346ca9b726420", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -557,27 +557,26 @@ mod test {\n                                         lifetimes: opt_vec::Empty,\n                                         ty_params: opt_vec::Empty,\n                                     },\n-                                    spanned{\n+                                    ast::blk {\n+                                        view_items: ~[],\n+                                        stmts: ~[@spanned{\n+                                            node: ast::stmt_semi(@ast::expr{\n+                                                id: 6,\n+                                                node: ast::expr_path(\n+                                                      ast::Path{\n+                                                        span:sp(17,18),\n+                                                        global:false,\n+                                                        idents:~[str_to_ident(\"b\")],\n+                                                        rp:None,\n+                                                        types: ~[]}),\n+                                                span: sp(17,18)},\n+                                                                 7), // fixme\n+                                            span: sp(17,18)}],\n+                                        expr: None,\n+                                        id: 8, // fixme\n+                                        rules: ast::default_blk, // no idea\n                                         span: sp(15,21),\n-                                        node: ast::blk_{\n-                                            view_items: ~[],\n-                                            stmts: ~[@spanned{\n-                                                node: ast::stmt_semi(@ast::expr{\n-                                                    id: 6,\n-                                                    node: ast::expr_path(\n-                                                          ast::Path{\n-                                                            span:sp(17,18),\n-                                                            global:false,\n-                                                            idents:~[str_to_ident(\"b\")],\n-                                                            rp:None,\n-                                                            types: ~[]}),\n-                                                    span: sp(17,18)},\n-                                                                     7), // fixme\n-                                                span: sp(17,18)}],\n-                                            expr: None,\n-                                            id: 8, // fixme\n-                                            rules: ast::default_blk // no idea\n-                                        }}),\n+                                    }),\n                             vis: ast::inherited,\n                             span: sp(0,21)}));\n     }"}, {"sha": "9e9071d6b8cb3d7c908bcf4861a479c9d7bb2281", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -2245,15 +2245,15 @@ impl Parser {\n         let lo = self.last_span.lo;\n         let decl = parse_decl();\n         let body = parse_body();\n-        let fakeblock = ast::blk_ {\n+        let fakeblock = ast::blk {\n             view_items: ~[],\n             stmts: ~[],\n             expr: Some(body),\n             id: self.get_id(),\n             rules: default_blk,\n+            span: body.span,\n         };\n-        let fakeblock = spanned(body.span.lo, body.span.hi,\n-                                fakeblock);\n+\n         return self.mk_expr(lo, body.span.hi,\n                             expr_fn_block(decl, fakeblock));\n     }\n@@ -2402,14 +2402,12 @@ impl Parser {\n                 self.eat(&token::COMMA);\n             }\n \n-            let blk = codemap::spanned {\n-                node: ast::blk_ {\n-                    view_items: ~[],\n-                    stmts: ~[],\n-                    expr: Some(expr),\n-                    id: self.get_id(),\n-                    rules: default_blk,\n-                },\n+            let blk = ast::blk {\n+                view_items: ~[],\n+                stmts: ~[],\n+                expr: Some(expr),\n+                id: self.get_id(),\n+                rules: default_blk,\n                 span: expr.span,\n             };\n \n@@ -3120,14 +3118,14 @@ impl Parser {\n \n         let hi = self.span.hi;\n         self.bump();\n-        let bloc = ast::blk_ {\n+        ast::blk {\n             view_items: view_items,\n             stmts: stmts,\n             expr: expr,\n             id: self.get_id(),\n             rules: s,\n-        };\n-        spanned(lo, hi, bloc)\n+            span: mk_sp(lo, hi),\n+        }\n     }\n \n     fn parse_optional_purity(&self) -> ast::purity {"}, {"sha": "67d5f4aa845ca0f620f761128576ddcd3890f7d7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -932,7 +932,7 @@ pub fn print_possibly_embedded_block_(s: @ps,\n                                       indented: uint,\n                                       attrs: &[ast::attribute],\n                                       close_box: bool) {\n-    match blk.node.rules {\n+    match blk.rules {\n       ast::unsafe_blk => word_space(s, \"unsafe\"),\n       ast::default_blk => ()\n     }\n@@ -946,11 +946,11 @@ pub fn print_possibly_embedded_block_(s: @ps,\n \n     print_inner_attributes(s, attrs);\n \n-    for blk.node.view_items.iter().advance |vi| { print_view_item(s, vi); }\n-    for blk.node.stmts.iter().advance |st| {\n+    for blk.view_items.iter().advance |vi| { print_view_item(s, vi); }\n+    for blk.stmts.iter().advance |st| {\n         print_stmt(s, *st);\n     }\n-    match blk.node.expr {\n+    match blk.expr {\n       Some(expr) => {\n         space_if_not_bol(s);\n         print_expr(s, expr);\n@@ -1255,12 +1255,12 @@ pub fn print_expr(s: @ps, expr: &ast::expr) {\n \n             // Extract the expression from the extra block the parser adds\n             // in the case of foo => expr\n-            if arm.body.node.view_items.is_empty() &&\n-                arm.body.node.stmts.is_empty() &&\n-                arm.body.node.rules == ast::default_blk &&\n-                arm.body.node.expr.is_some()\n+            if arm.body.view_items.is_empty() &&\n+                arm.body.stmts.is_empty() &&\n+                arm.body.rules == ast::default_blk &&\n+                arm.body.expr.is_some()\n             {\n-                match arm.body.node.expr {\n+                match arm.body.expr {\n                     Some(expr) => {\n                         match expr.node {\n                             ast::expr_block(ref blk) => {\n@@ -1297,16 +1297,16 @@ pub fn print_expr(s: @ps, expr: &ast::expr) {\n         print_fn_block_args(s, decl);\n         space(s.s);\n         // }\n-        assert!(body.node.stmts.is_empty());\n-        assert!(body.node.expr.is_some());\n+        assert!(body.stmts.is_empty());\n+        assert!(body.expr.is_some());\n         // we extract the block, so as not to create another set of boxes\n-        match body.node.expr.get().node {\n+        match body.expr.get().node {\n             ast::expr_block(ref blk) => {\n                 print_block_unclosed(s, blk);\n             }\n             _ => {\n                 // this is a bare expression\n-                print_expr(s, body.node.expr.get());\n+                print_expr(s, body.expr.get());\n                 end(s); // need to close a box\n             }\n         }"}, {"sha": "09daa2e648af7bd568d2c1ac6df81bbc74510e35", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc70743d2cf6edb782c1daa9b0f554484ed21eb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0cc70743d2cf6edb782c1daa9b0f554484ed21eb", "patch": "@@ -413,13 +413,13 @@ pub fn visit_struct_field<E: Copy>(sf: &struct_field, (e, v): (E, vt<E>)) {\n }\n \n pub fn visit_block<E: Copy>(b: &blk, (e, v): (E, vt<E>)) {\n-    for b.node.view_items.iter().advance |vi| {\n+    for b.view_items.iter().advance |vi| {\n         (v.visit_view_item)(vi, (copy e, v));\n     }\n-    for b.node.stmts.iter().advance |s| {\n+    for b.stmts.iter().advance |s| {\n         (v.visit_stmt)(*s, (copy e, v));\n     }\n-    visit_expr_opt(b.node.expr, (e, v));\n+    visit_expr_opt(b.expr, (e, v));\n }\n \n pub fn visit_stmt<E>(s: &stmt, (e, v): (E, vt<E>)) {"}]}