{"sha": "6495c27ee6b1aee816dd8eee36c9e60a87ba03c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OTVjMjdlZTZiMWFlZTgxNmRkOGVlZTM2YzllNjBhODdiYTAzYzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:23Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:27:36Z"}, "message": "rollup merge of #20069: jarod/bitflags\n\nAlthough using hex literals is not wrong, but I think use binary literals will be better.(especially in examples)", "tree": {"sha": "0ae9c36f28cebd9c264fdca1b21ab97c42198a6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae9c36f28cebd9c264fdca1b21ab97c42198a6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6495c27ee6b1aee816dd8eee36c9e60a87ba03c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6495c27ee6b1aee816dd8eee36c9e60a87ba03c7", "html_url": "https://github.com/rust-lang/rust/commit/6495c27ee6b1aee816dd8eee36c9e60a87ba03c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6495c27ee6b1aee816dd8eee36c9e60a87ba03c7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b187ae55aa0b950eac17342a2ceddbc8408c5583", "url": "https://api.github.com/repos/rust-lang/rust/commits/b187ae55aa0b950eac17342a2ceddbc8408c5583", "html_url": "https://github.com/rust-lang/rust/commit/b187ae55aa0b950eac17342a2ceddbc8408c5583"}, {"sha": "a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475", "html_url": "https://github.com/rust-lang/rust/commit/a7f1ce37bfc1dff62a6b22e88e687a9a1a2ff475"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "d4ff05ce212c5dea2311c31a8bc6705ea4d2bf2e", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6495c27ee6b1aee816dd8eee36c9e60a87ba03c7/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6495c27ee6b1aee816dd8eee36c9e60a87ba03c7/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=6495c27ee6b1aee816dd8eee36c9e60a87ba03c7", "patch": "@@ -24,9 +24,9 @@\n /// ```{.rust}\n /// bitflags! {\n ///     flags Flags: u32 {\n-///         const FLAG_A       = 0x00000001,\n-///         const FLAG_B       = 0x00000010,\n-///         const FLAG_C       = 0x00000100,\n+///         const FLAG_A       = 0b00000001,\n+///         const FLAG_B       = 0b00000010,\n+///         const FLAG_C       = 0b00000100,\n ///         const FLAG_ABC     = FLAG_A.bits\n ///                            | FLAG_B.bits\n ///                            | FLAG_C.bits,\n@@ -50,8 +50,8 @@\n ///\n /// bitflags! {\n ///     flags Flags: u32 {\n-///         const FLAG_A   = 0x00000001,\n-///         const FLAG_B   = 0x00000010,\n+///         const FLAG_A   = 0b00000001,\n+///         const FLAG_B   = 0b00000010,\n ///     }\n /// }\n ///\n@@ -325,10 +325,10 @@ mod tests {\n         #[doc = \"> \"]\n         #[doc = \"> - Richard Feynman\"]\n         flags Flags: u32 {\n-            const FlagA       = 0x00000001,\n+            const FlagA       = 0b00000001,\n             #[doc = \"<pcwalton> macros are way better at generating code than trans is\"]\n-            const FlagB       = 0x00000010,\n-            const FlagC       = 0x00000100,\n+            const FlagB       = 0b00000010,\n+            const FlagC       = 0b00000100,\n             #[doc = \"* cmr bed\"]\n             #[doc = \"* strcat table\"]\n             #[doc = \"<strcat> wait what?\"]\n@@ -346,33 +346,33 @@ mod tests {\n \n     #[test]\n     fn test_bits(){\n-        assert_eq!(Flags::empty().bits(), 0x00000000);\n-        assert_eq!(FlagA.bits(), 0x00000001);\n-        assert_eq!(FlagABC.bits(), 0x00000111);\n+        assert_eq!(Flags::empty().bits(), 0b00000000);\n+        assert_eq!(FlagA.bits(), 0b00000001);\n+        assert_eq!(FlagABC.bits(), 0b00000111);\n \n-        assert_eq!(AnotherSetOfFlags::empty().bits(), 0x00);\n+        assert_eq!(AnotherSetOfFlags::empty().bits(), 0b00);\n         assert_eq!(AnotherFlag.bits(), !0_i8);\n     }\n \n     #[test]\n     fn test_from_bits() {\n         assert!(Flags::from_bits(0) == Some(Flags::empty()));\n-        assert!(Flags::from_bits(0x1) == Some(FlagA));\n-        assert!(Flags::from_bits(0x10) == Some(FlagB));\n-        assert!(Flags::from_bits(0x11) == Some(FlagA | FlagB));\n-        assert!(Flags::from_bits(0x1000) == None);\n+        assert!(Flags::from_bits(0b1) == Some(FlagA));\n+        assert!(Flags::from_bits(0b10) == Some(FlagB));\n+        assert!(Flags::from_bits(0b11) == Some(FlagA | FlagB));\n+        assert!(Flags::from_bits(0b1000) == None);\n \n         assert!(AnotherSetOfFlags::from_bits(!0_i8) == Some(AnotherFlag));\n     }\n \n     #[test]\n     fn test_from_bits_truncate() {\n         assert!(Flags::from_bits_truncate(0) == Flags::empty());\n-        assert!(Flags::from_bits_truncate(0x1) == FlagA);\n-        assert!(Flags::from_bits_truncate(0x10) == FlagB);\n-        assert!(Flags::from_bits_truncate(0x11) == (FlagA | FlagB));\n-        assert!(Flags::from_bits_truncate(0x1000) == Flags::empty());\n-        assert!(Flags::from_bits_truncate(0x1001) == FlagA);\n+        assert!(Flags::from_bits_truncate(0b1) == FlagA);\n+        assert!(Flags::from_bits_truncate(0b10) == FlagB);\n+        assert!(Flags::from_bits_truncate(0b11) == (FlagA | FlagB));\n+        assert!(Flags::from_bits_truncate(0b1000) == Flags::empty());\n+        assert!(Flags::from_bits_truncate(0b1001) == FlagA);\n \n         assert!(AnotherSetOfFlags::from_bits_truncate(0_i8) == AnotherSetOfFlags::empty());\n     }"}]}