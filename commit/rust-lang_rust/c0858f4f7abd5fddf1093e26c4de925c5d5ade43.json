{"sha": "c0858f4f7abd5fddf1093e26c4de925c5d5ade43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODU4ZjRmN2FiZDVmZGRmMTA5M2UyNmM0ZGU5MjVjNWQ1YWRlNDM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-14T00:25:49Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-14T00:38:58Z"}, "message": "In typeck::collect::ensure_trait_methods, don't assume the trait was already checked\n\nInstead of using node_id_to_type to look up the trait type, pass it\nin as an argument. This handles the case where we check an impl of a trait T\nbefore T has been traversed.", "tree": {"sha": "de7f6bd9f77973f09f8d87dac179ee0f59506d07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7f6bd9f77973f09f8d87dac179ee0f59506d07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0858f4f7abd5fddf1093e26c4de925c5d5ade43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0858f4f7abd5fddf1093e26c4de925c5d5ade43", "html_url": "https://github.com/rust-lang/rust/commit/c0858f4f7abd5fddf1093e26c4de925c5d5ade43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0858f4f7abd5fddf1093e26c4de925c5d5ade43/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ee06b8ce70cf86e9df7e501f700cc3e520376d", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ee06b8ce70cf86e9df7e501f700cc3e520376d", "html_url": "https://github.com/rust-lang/rust/commit/55ee06b8ce70cf86e9df7e501f700cc3e520376d"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "12d996777cb863d86fc5f6f894df6ebbf348e5b4", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0858f4f7abd5fddf1093e26c4de925c5d5ade43/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0858f4f7abd5fddf1093e26c4de925c5d5ade43/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=c0858f4f7abd5fddf1093e26c4de925c5d5ade43", "patch": "@@ -156,15 +156,18 @@ fn get_enum_variant_types(ccx: @crate_ctxt,\n     }\n }\n \n-fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id) {\n+fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id, trait_ty: ty::t) {\n     fn store_methods<T>(ccx: @crate_ctxt, id: ast::node_id,\n                         stuff: ~[T], f: fn@(T) -> ty::method) {\n         ty::store_trait_methods(ccx.tcx, id, @vec::map(stuff, f));\n     }\n \n-    fn make_static_method_ty(ccx: @crate_ctxt, id: ast::node_id,\n+    fn make_static_method_ty(ccx: @crate_ctxt,\n                              am: ast::ty_method,\n                              rp: bool, m: ty::method,\n+                             // Take this as an argument b/c we may check\n+                             // the impl before the trait.\n+                             trait_ty: ty::t,\n                              trait_bounds: @~[ty::param_bounds]) {\n         // We need to create a typaram that replaces self. This param goes\n         // *in between* the typarams from the trait and those from the\n@@ -188,7 +191,6 @@ fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id) {\n         let substs = { self_r: none, self_ty: some(self_param),\n                        tps: non_shifted_trait_tps + shifted_method_tps };\n         let ty = ty::subst(ccx.tcx, &substs, ty::mk_fn(ccx.tcx, m.fty));\n-        let trait_ty = ty::node_id_to_type(ccx.tcx, id);\n         let bounds = @(*trait_bounds + ~[@~[ty::bound_trait(trait_ty)]]\n                        + *m.tps);\n         ccx.tcx.tcache.insert(local_def(am.id),\n@@ -205,8 +207,8 @@ fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id) {\n             let ty_m = trait_method_to_ty_method(m);\n             let method_ty = ty_of_ty_method(ccx, ty_m, rp);\n             if ty_m.self_ty.node == ast::sty_static {\n-                make_static_method_ty(ccx, id, ty_m, rp,\n-                                      method_ty, trait_bounds);\n+                make_static_method_ty(ccx, ty_m, rp,\n+                                      method_ty, trait_ty, trait_bounds);\n             }\n             method_ty\n         });\n@@ -319,7 +321,7 @@ fn check_methods_against_trait(ccx: @crate_ctxt,\n     let tcx = ccx.tcx;\n     let (did, tpt) = instantiate_trait_ref(ccx, a_trait_ty, rp);\n     if did.crate == ast::local_crate {\n-        ensure_trait_methods(ccx, did.node);\n+        ensure_trait_methods(ccx, did.node, tpt.ty);\n     }\n     for vec::each(*ty::trait_methods(tcx, did)) |trait_m| {\n         match vec::find(impl_ms, |impl_m| trait_m.ident == impl_m.mty.ident) {\n@@ -430,7 +432,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n         debug!{\"item_trait(it.id=%d, tpt.ty=%s)\",\n                it.id, ty_to_str(tcx, tpt.ty)};\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n-        ensure_trait_methods(ccx, it.id);\n+        ensure_trait_methods(ccx, it.id, tpt.ty);\n \n         let (_, provided_methods) = split_trait_methods(trait_methods);\n         let selfty = ty::mk_self(tcx);\n@@ -499,7 +501,7 @@ fn convert_struct(ccx: @crate_ctxt, rp: bool, struct_def: @ast::struct_def,\n                            rp: rp,\n                            ty: t_dtor});\n     };\n-    ensure_trait_methods(ccx, id);\n+    ensure_trait_methods(ccx, id, tpt.ty);\n \n     // Write the type of each of the members\n     let (fields, methods) = split_class_items(struct_def.members);"}, {"sha": "1366f08f38d24e52d43681ab6652917a89566962", "filename": "src/test/run-pass/trait-mix.rc", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0858f4f7abd5fddf1093e26c4de925c5d5ade43/src%2Ftest%2Frun-pass%2Ftrait-mix.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c0858f4f7abd5fddf1093e26c4de925c5d5ade43/src%2Ftest%2Frun-pass%2Ftrait-mix.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-mix.rc?ref=c0858f4f7abd5fddf1093e26c4de925c5d5ade43", "patch": "@@ -0,0 +1,5 @@\n+mod trait_mix {\n+    #[path = \"trait-mix.rs\"]\n+    mod trait_mix;\n+    mod u_trait_mix;\n+}"}, {"sha": "2f6eb93a2bbd3cea3670a17414bf3d0d3beae676", "filename": "src/test/run-pass/trait_mix/trait-mix.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c0858f4f7abd5fddf1093e26c4de925c5d5ade43/src%2Ftest%2Frun-pass%2Ftrait_mix%2Ftrait-mix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0858f4f7abd5fddf1093e26c4de925c5d5ade43/src%2Ftest%2Frun-pass%2Ftrait_mix%2Ftrait-mix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait_mix%2Ftrait-mix.rs?ref=c0858f4f7abd5fddf1093e26c4de925c5d5ade43", "patch": "@@ -0,0 +1,28 @@\n+import u_trait_mix;\n+\n+impl f32: u_trait_mix::num {\n+    pure fn add(&&other: f32)    -> f32 { return self + other; }\n+    pure fn sub(&&other: f32)    -> f32 { return self - other; }\n+    pure fn mul(&&other: f32)    -> f32 { return self * other; }\n+    pure fn div(&&other: f32)    -> f32 { return self / other; }\n+    pure fn modulo(&&other: f32) -> f32 { return self % other; }\n+    pure fn neg()                -> f32 { return -self;        }\n+\n+    pure fn to_int()         -> int { return self as int; }\n+    static pure fn from_int(n: int) -> f32 { return n as f32;    }\n+}\n+\n+/*\n+It seems that this will fail if I try using it from another crate.\n+\n+*/\n+\n+/*\n+\n+// ICEs if I put this in num -- ???\n+trait from_int {\n+\n+}\n+*/\n+\n+fn main() {}"}, {"sha": "260955e687a1bb2aeb545689eb002aea129c7386", "filename": "src/test/run-pass/trait_mix/u_trait_mix.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0858f4f7abd5fddf1093e26c4de925c5d5ade43/src%2Ftest%2Frun-pass%2Ftrait_mix%2Fu_trait_mix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0858f4f7abd5fddf1093e26c4de925c5d5ade43/src%2Ftest%2Frun-pass%2Ftrait_mix%2Fu_trait_mix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait_mix%2Fu_trait_mix.rs?ref=c0858f4f7abd5fddf1093e26c4de925c5d5ade43", "patch": "@@ -0,0 +1,13 @@\n+trait num {\n+    // FIXME: Trait composition. (#2616)\n+    pure fn add(&&other: self) -> self;\n+    pure fn sub(&&other: self) -> self;\n+    pure fn mul(&&other: self) -> self;\n+    pure fn div(&&other: self) -> self;\n+    pure fn modulo(&&other: self) -> self;\n+    pure fn neg() -> self;\n+\n+    pure fn to_int() -> int;\n+    static pure fn from_int(n: int) -> self;\n+}\n+"}]}