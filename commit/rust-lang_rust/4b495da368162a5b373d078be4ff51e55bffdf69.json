{"sha": "4b495da368162a5b373d078be4ff51e55bffdf69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNDk1ZGEzNjgxNjJhNWIzNzNkMDc4YmU0ZmY1MWU1NWJmZmRmNjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-21T12:26:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-21T13:08:03Z"}, "message": "Transition OnEnter to WorkspaceSnippetEdit\n\nThis also changes our handiling of snippet edits on the client side.\n`editor.insertSnippet` unfortunately forces indentation, which we\nreally don't want to have to deal with. So, let's just implement our\nmanual hacky way of dealing with a simple subset of snippets we\nactually use in rust-analyzer", "tree": {"sha": "c35bf74905b9f03343fc10d834926e3457bc181c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c35bf74905b9f03343fc10d834926e3457bc181c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b495da368162a5b373d078be4ff51e55bffdf69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b495da368162a5b373d078be4ff51e55bffdf69", "html_url": "https://github.com/rust-lang/rust/commit/4b495da368162a5b373d078be4ff51e55bffdf69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b495da368162a5b373d078be4ff51e55bffdf69/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4e6963a2313971fe7bbec97d03bc67266ef68a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e6963a2313971fe7bbec97d03bc67266ef68a9", "html_url": "https://github.com/rust-lang/rust/commit/a4e6963a2313971fe7bbec97d03bc67266ef68a9"}], "stats": {"total": 187, "additions": 97, "deletions": 90}, "files": [{"sha": "85be14ad33a2a152d352cace64bcf6b39702af3c", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4b495da368162a5b373d078be4ff51e55bffdf69/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b495da368162a5b373d078be4ff51e55bffdf69/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=4b495da368162a5b373d078be4ff51e55bffdf69", "patch": "@@ -38,17 +38,15 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n     }\n \n     let indent = node_indent(&file, comment.syntax())?;\n-    let inserted = format!(\"\\n{}{} \", indent, prefix);\n-    let cursor_position = position.offset + TextSize::of(&inserted);\n+    let inserted = format!(\"\\n{}{} $0\", indent, prefix);\n     let edit = TextEdit::insert(position.offset, inserted);\n \n-    Some(\n-        SourceChange::source_file_edit(\n-            \"On enter\",\n-            SourceFileEdit { edit, file_id: position.file_id },\n-        )\n-        .with_cursor(FilePosition { offset: cursor_position, file_id: position.file_id }),\n-    )\n+    let mut res = SourceChange::source_file_edit(\n+        \"On enter\",\n+        SourceFileEdit { edit, file_id: position.file_id },\n+    );\n+    res.is_snippet = true;\n+    Some(res)\n }\n \n fn followed_by_comment(comment: &ast::Comment) -> bool {\n@@ -84,7 +82,7 @@ fn node_indent(file: &SourceFile, token: &SyntaxToken) -> Option<SmolStr> {\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::{add_cursor, assert_eq_text, extract_offset};\n+    use test_utils::{assert_eq_text, extract_offset};\n \n     use crate::mock_analysis::single_file;\n \n@@ -98,7 +96,6 @@ mod tests {\n         assert_eq!(result.source_file_edits.len(), 1);\n         let mut actual = before.to_string();\n         result.source_file_edits[0].edit.apply(&mut actual);\n-        let actual = add_cursor(&actual, result.cursor_position.unwrap().offset);\n         Some(actual)\n     }\n \n@@ -121,7 +118,7 @@ fn foo() {\n \",\n             r\"\n /// Some docs\n-/// <|>\n+/// $0\n fn foo() {\n }\n \",\n@@ -137,7 +134,7 @@ impl S {\n             r\"\n impl S {\n     /// Some\n-    /// <|> docs.\n+    /// $0 docs.\n     fn foo() {}\n }\n \",\n@@ -151,7 +148,7 @@ fn foo() {\n \",\n             r\"\n ///\n-/// <|> Some docs\n+/// $0 Some docs\n fn foo() {\n }\n \",\n@@ -175,7 +172,7 @@ fn main() {\n             r\"\n fn main() {\n     // Fix\n-    // <|> me\n+    // $0 me\n     let x = 1 + 1;\n }\n \",\n@@ -195,7 +192,7 @@ fn main() {\n             r\"\n fn main() {\n     // Fix\n-    // <|>\n+    // $0\n     // me\n     let x = 1 + 1;\n }"}, {"sha": "3c7bd609d24fb3e452b05eee91574497861e1edb", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b495da368162a5b373d078be4ff51e55bffdf69/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b495da368162a5b373d078be4ff51e55bffdf69/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=4b495da368162a5b373d078be4ff51e55bffdf69", "patch": "@@ -102,7 +102,7 @@ pub enum OnEnter {}\n \n impl Request for OnEnter {\n     type Params = lsp_types::TextDocumentPositionParams;\n-    type Result = Option<SourceChange>;\n+    type Result = Option<SnippetWorkspaceEdit>;\n     const METHOD: &'static str = \"rust-analyzer/onEnter\";\n }\n "}, {"sha": "fcf08cd79897cb51f5e8f3e9c1c27dcc16e4c00b", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b495da368162a5b373d078be4ff51e55bffdf69/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b495da368162a5b373d078be4ff51e55bffdf69/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=4b495da368162a5b373d078be4ff51e55bffdf69", "patch": "@@ -159,12 +159,12 @@ pub fn handle_join_lines(\n pub fn handle_on_enter(\n     world: WorldSnapshot,\n     params: lsp_types::TextDocumentPositionParams,\n-) -> Result<Option<lsp_ext::SourceChange>> {\n+) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n     let _p = profile(\"handle_on_enter\");\n     let position = from_proto::file_position(&world, params)?;\n     match world.analysis().on_enter(position)? {\n         None => Ok(None),\n-        Some(source_change) => to_proto::source_change(&world, source_change).map(Some),\n+        Some(source_change) => to_proto::snippet_workspace_edit(&world, source_change).map(Some),\n     }\n }\n "}, {"sha": "4e94c37e1c16da1ada9a2d940a251e23d565aa2b", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 28, "deletions": 40, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4b495da368162a5b373d078be4ff51e55bffdf69/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b495da368162a5b373d078be4ff51e55bffdf69/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=4b495da368162a5b373d078be4ff51e55bffdf69", "patch": "@@ -474,27 +474,21 @@ fn main() {{}}\n             position: Position { line: 0, character: 5 },\n         },\n         json!({\n-          \"cursorPosition\": {\n-            \"position\": { \"character\": 4, \"line\": 1 },\n-            \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\" }\n-          },\n-          \"label\": \"On enter\",\n-          \"workspaceEdit\": {\n-            \"documentChanges\": [\n-              {\n-                \"edits\": [\n-                  {\n-                    \"newText\": \"\\n/// \",\n-                    \"range\": {\n-                      \"end\": { \"character\": 5, \"line\": 0 },\n-                      \"start\": { \"character\": 5, \"line\": 0 }\n-                    }\n+          \"documentChanges\": [\n+            {\n+              \"edits\": [\n+                {\n+                  \"insertTextFormat\": 2,\n+                  \"newText\": \"\\n/// $0\",\n+                  \"range\": {\n+                    \"end\": { \"character\": 5, \"line\": 0 },\n+                    \"start\": { \"character\": 5, \"line\": 0 }\n                   }\n-                ],\n-                \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\", \"version\": null }\n-              }\n-            ]\n-          }\n+                }\n+              ],\n+              \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\", \"version\": null }\n+            }\n+          ]\n         }),\n     );\n     let elapsed = start.elapsed();\n@@ -526,27 +520,21 @@ version = \\\"0.0.0\\\"\n             position: Position { line: 0, character: 8 },\n         },\n         json!({\n-          \"cursorPosition\": {\n-            \"position\": { \"line\": 1, \"character\": 4 },\n-            \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\" }\n-          },\n-          \"label\": \"On enter\",\n-          \"workspaceEdit\": {\n-            \"documentChanges\": [\n-              {\n-                \"edits\": [\n-                  {\n-                    \"newText\": \"\\r\\n/// \",\n-                    \"range\": {\n-                      \"end\": { \"line\": 0, \"character\": 8 },\n-                      \"start\": { \"line\": 0, \"character\": 8 }\n-                    }\n+          \"documentChanges\": [\n+            {\n+              \"edits\": [\n+                {\n+                  \"insertTextFormat\": 2,\n+                  \"newText\": \"\\r\\n/// $0\",\n+                  \"range\": {\n+                    \"end\": { \"line\": 0, \"character\": 8 },\n+                    \"start\": { \"line\": 0, \"character\": 8 }\n                   }\n-                ],\n-                \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\", \"version\": null }\n-              }\n-            ]\n-          }\n+                }\n+              ],\n+              \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\", \"version\": null }\n+            }\n+          ]\n         }),\n     );\n }"}, {"sha": "e5ed77e32230a4883c89b4b687b297cfde7ef8b5", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4b495da368162a5b373d078be4ff51e55bffdf69/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4b495da368162a5b373d078be4ff51e55bffdf69/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=4b495da368162a5b373d078be4ff51e55bffdf69", "patch": "@@ -53,36 +53,57 @@ export function selectAndApplySourceChange(ctx: Ctx): Cmd {\n     };\n }\n \n-export function applySnippetWorkspaceEdit(_ctx: Ctx): Cmd {\n+export function applySnippetWorkspaceEditCommand(_ctx: Ctx): Cmd {\n     return async (edit: vscode.WorkspaceEdit) => {\n-        assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);\n-        const [uri, edits] = edit.entries()[0];\n+        await applySnippetWorkspaceEdit(edit);\n+    };\n+}\n+\n+export async function applySnippetWorkspaceEdit(edit: vscode.WorkspaceEdit) {\n+    assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);\n+    const [uri, edits] = edit.entries()[0];\n \n-        const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n-        if (!editor) return;\n+    const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n+    if (!editor) return;\n \n-        let editWithSnippet: vscode.TextEdit | undefined = undefined;\n-        let lineDelta = 0;\n-        await editor.edit((builder) => {\n-            for (const indel of edits) {\n-                const isSnippet = indel.newText.indexOf('$0') !== -1 || indel.newText.indexOf('${') !== -1;\n-                if (isSnippet) {\n-                    editWithSnippet = indel;\n-                } else {\n-                    if (!editWithSnippet) {\n-                        lineDelta = (indel.newText.match(/\\n/g) || []).length - (indel.range.end.line - indel.range.start.line);\n-                    }\n-                    builder.replace(indel.range, indel.newText);\n-                }\n+    let selection: vscode.Selection | undefined = undefined;\n+    let lineDelta = 0;\n+    await editor.edit((builder) => {\n+        for (const indel of edits) {\n+            const parsed = parseSnippet(indel.newText);\n+            if (parsed) {\n+                const [newText, [placeholderStart, placeholderLength]] = parsed;\n+                const prefix = newText.substr(0, placeholderStart);\n+                const lastNewline = prefix.lastIndexOf('\\n');\n+\n+                const startLine = indel.range.start.line + lineDelta + countLines(prefix);\n+                const startColumn = lastNewline === -1 ?\n+                    indel.range.start.character + placeholderStart\n+                    : prefix.length - lastNewline - 1;\n+                const endColumn = startColumn + placeholderLength;\n+                selection = new vscode.Selection(\n+                    new vscode.Position(startLine, startColumn),\n+                    new vscode.Position(startLine, endColumn),\n+                );\n+                builder.replace(indel.range, newText);\n+            } else {\n+                lineDelta = countLines(indel.newText) - (indel.range.end.line - indel.range.start.line);\n+                builder.replace(indel.range, indel.newText);\n             }\n-        });\n-        if (editWithSnippet) {\n-            const snip = editWithSnippet as vscode.TextEdit;\n-            const range = snip.range.with(\n-                snip.range.start.with(snip.range.start.line + lineDelta),\n-                snip.range.end.with(snip.range.end.line + lineDelta),\n-            );\n-            await editor.insertSnippet(new vscode.SnippetString(snip.newText), range);\n         }\n-    };\n+    });\n+    if (selection) editor.selection = selection;\n+}\n+\n+function parseSnippet(snip: string): [string, [number, number]] | undefined {\n+    const m = snip.match(/\\$(0|\\{0:([^}]*)\\})/);\n+    if (!m) return undefined;\n+    const placeholder = m[2] ?? \"\";\n+    const range: [number, number] = [m.index!!, placeholder.length];\n+    const insert = snip.replace(m[0], placeholder);\n+    return [insert, range];\n+}\n+\n+function countLines(text: string): number {\n+    return (text.match(/\\n/g) || []).length;\n }"}, {"sha": "a7871c31eed0bde9d209833eb2e9ff82b06df673", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b495da368162a5b373d078be4ff51e55bffdf69/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4b495da368162a5b373d078be4ff51e55bffdf69/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=4b495da368162a5b373d078be4ff51e55bffdf69", "patch": "@@ -1,8 +1,8 @@\n import * as vscode from 'vscode';\n import * as ra from '../rust-analyzer-api';\n \n-import { applySourceChange } from '../source_change';\n import { Cmd, Ctx } from '../ctx';\n+import { applySnippetWorkspaceEdit } from '.';\n \n async function handleKeypress(ctx: Ctx) {\n     const editor = ctx.activeRustEditor;\n@@ -21,7 +21,8 @@ async function handleKeypress(ctx: Ctx) {\n     });\n     if (!change) return false;\n \n-    await applySourceChange(ctx, change);\n+    const workspaceEdit = client.protocol2CodeConverter.asWorkspaceEdit(change);\n+    await applySnippetWorkspaceEdit(workspaceEdit);\n     return true;\n }\n "}, {"sha": "8b0a9d8706e9d903fee897bbeb29f48b0bba60b1", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b495da368162a5b373d078be4ff51e55bffdf69/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4b495da368162a5b373d078be4ff51e55bffdf69/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=4b495da368162a5b373d078be4ff51e55bffdf69", "patch": "@@ -91,7 +91,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('debugSingle', commands.debugSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n-    ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEdit);\n+    ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEditCommand);\n     ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n \n     ctx.pushCleanup(activateTaskProvider(workspaceFolder));"}, {"sha": "3b83b10e38adbf04d98fa3fc0740fd96a763c3a4", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b495da368162a5b373d078be4ff51e55bffdf69/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4b495da368162a5b373d078be4ff51e55bffdf69/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=4b495da368162a5b373d078be4ff51e55bffdf69", "patch": "@@ -69,7 +69,7 @@ export interface JoinLinesParams {\n export const joinLines = request<JoinLinesParams, SourceChange>(\"joinLines\");\n \n \n-export const onEnter = request<lc.TextDocumentPositionParams, Option<SourceChange>>(\"onEnter\");\n+export const onEnter = request<lc.TextDocumentPositionParams, Option<lc.WorkspaceEdit>>(\"onEnter\");\n \n export interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;"}]}