{"sha": "9958af4229d4bee06ee65b921ac11b1fe498e831", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NThhZjQyMjlkNGJlZTA2ZWU2NWI5MjFhYzExYjFmZTQ5OGU4MzE=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-25T17:18:52Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-27T05:16:02Z"}, "message": "move `lints()` to `iter_count.rs`", "tree": {"sha": "2ceb7aac421af3e0033af42fbc301151e4b30905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ceb7aac421af3e0033af42fbc301151e4b30905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9958af4229d4bee06ee65b921ac11b1fe498e831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9958af4229d4bee06ee65b921ac11b1fe498e831", "html_url": "https://github.com/rust-lang/rust/commit/9958af4229d4bee06ee65b921ac11b1fe498e831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9958af4229d4bee06ee65b921ac11b1fe498e831/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "204b27937c488eb7c1b81c31d56779861ff488c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/204b27937c488eb7c1b81c31d56779861ff488c3", "html_url": "https://github.com/rust-lang/rust/commit/204b27937c488eb7c1b81c31d56779861ff488c3"}], "stats": {"total": 188, "additions": 100, "deletions": 88}, "files": [{"sha": "ca8723cec9498f1e39012bea912b802cbb71bbc8", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9958af4229d4bee06ee65b921ac11b1fe498e831/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9958af4229d4bee06ee65b921ac11b1fe498e831/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=9958af4229d4bee06ee65b921ac11b1fe498e831", "patch": "@@ -0,0 +1,51 @@\n+use crate::utils::{\n+    derefs_to_slice, is_type_diagnostic_item, match_trait_method, method_chain_args, paths, snippet_with_applicability,\n+    span_lint_and_sugg,\n+};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::ITER_COUNT;\n+\n+pub(crate) fn lints<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>], is_mut: bool) {\n+    let mut_str = if is_mut { \"_mut\" } else { \"\" };\n+    let iter_method = if method_chain_args(expr, &[format!(\"iter{}\", mut_str).as_str(), \"count\"]).is_some() {\n+        \"iter\"\n+    } else if method_chain_args(expr, &[\"into_iter\", \"count\"]).is_some() {\n+        \"into_iter\"\n+    } else {\n+        return;\n+    };\n+    if_chain! {\n+        let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.typeck_results().expr_ty(&iter_args[0])).is_some() {\n+            Some(\"slice\")\n+        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vec_type) {\n+            Some(\"Vec\")\n+        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym!(vecdeque_type)) {\n+            Some(\"VecDeque\")\n+        } else if match_trait_method(cx, expr, &paths::ITERATOR) {\n+            Some(\"std::iter::Iterator\")\n+        } else {\n+            None\n+        };\n+        if let Some(caller_type) = caller_type;\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                ITER_COUNT,\n+                expr.span,\n+                &format!(\"called `.{}{}().count()` on a `{}`\", iter_method, mut_str, caller_type),\n+                \"try\",\n+                format!(\n+                    \"{}.len()\",\n+                    snippet_with_applicability(cx, iter_args[0].span, \"..\", &mut applicability),\n+                ),\n+                applicability,\n+            );\n+        }\n+    }\n+}"}, {"sha": "d2a926d0944f2241091b212a786e2e3ba8430898", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 88, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9958af4229d4bee06ee65b921ac11b1fe498e831/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9958af4229d4bee06ee65b921ac11b1fe498e831/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9958af4229d4bee06ee65b921ac11b1fe498e831", "patch": "@@ -4,6 +4,7 @@ mod filter_map_identity;\n mod implicit_clone;\n mod inefficient_to_string;\n mod inspect_for_each;\n+mod iter_count;\n mod manual_saturating_arithmetic;\n mod option_map_unwrap_or;\n mod unnecessary_filter_map;\n@@ -32,12 +33,12 @@ use crate::consts::{constant, Constant};\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    contains_return, contains_ty, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n-    in_macro, is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path,\n-    match_qpath, match_trait_method, match_type, meets_msrv, method_calls, method_chain_args, path_to_local_id, paths,\n-    remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite,\n-    span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, strip_pat_refs, sugg, walk_ptrs_ty_depth,\n-    SpanlessEq,\n+    contains_return, contains_ty, derefs_to_slice, get_parent_expr, get_trait_def_id, has_iter_method, higher,\n+    implements_trait, in_macro, is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n+    match_def_path, match_qpath, match_trait_method, match_type, meets_msrv, method_calls, method_chain_args,\n+    path_to_local_id, paths, remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, strip_pat_refs,\n+    sugg, walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1691,8 +1692,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n-            [\"count\", \"into_iter\" | \"iter\"] => lint_iter_count(cx, expr, &arg_lists[1], false),\n-            [\"count\", \"iter_mut\"] => lint_iter_count(cx, expr, &arg_lists[1], true),\n+            [\"count\", \"into_iter\" | \"iter\"] => iter_count::lints(cx, expr, &arg_lists[1], false),\n+            [\"count\", \"iter_mut\"] => iter_count::lints(cx, expr, &arg_lists[1], true),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n             [\"nth\", \"bytes\"] => bytes_nth::lints(cx, expr, &arg_lists[1]),\n@@ -2661,46 +2662,6 @@ fn lint_iter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, iter_\n     }\n }\n \n-fn lint_iter_count<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>], is_mut: bool) {\n-    let mut_str = if is_mut { \"_mut\" } else { \"\" };\n-    let iter_method = if method_chain_args(expr, &[format!(\"iter{}\", mut_str).as_str(), \"count\"]).is_some() {\n-        \"iter\"\n-    } else if method_chain_args(expr, &[\"into_iter\", \"count\"]).is_some() {\n-        \"into_iter\"\n-    } else {\n-        return;\n-    };\n-    if_chain! {\n-        let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.typeck_results().expr_ty(&iter_args[0])).is_some() {\n-            Some(\"slice\")\n-        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vec_type) {\n-            Some(\"Vec\")\n-        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym!(vecdeque_type)) {\n-            Some(\"VecDeque\")\n-        } else if match_trait_method(cx, expr, &paths::ITERATOR) {\n-            Some(\"std::iter::Iterator\")\n-        } else {\n-            None\n-        };\n-        if let Some(caller_type) = caller_type;\n-        then {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                ITER_COUNT,\n-                expr.span,\n-                &format!(\"called `.{}{}().count()` on a `{}`\", iter_method, mut_str, caller_type),\n-                \"try\",\n-                format!(\n-                    \"{}.len()\",\n-                    snippet_with_applicability(cx, iter_args[0].span, \"..\", &mut applicability),\n-                ),\n-                applicability,\n-            );\n-        }\n-    }\n-}\n-\n fn lint_iter_nth<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &hir::Expr<'_>,\n@@ -2841,46 +2802,6 @@ fn lint_iter_skip_next(cx: &LateContext<'_>, expr: &hir::Expr<'_>, skip_args: &[\n     }\n }\n \n-fn derefs_to_slice<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'tcx>,\n-    ty: Ty<'tcx>,\n-) -> Option<&'tcx hir::Expr<'tcx>> {\n-    fn may_slice<'a>(cx: &LateContext<'a>, ty: Ty<'a>) -> bool {\n-        match ty.kind() {\n-            ty::Slice(_) => true,\n-            ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n-            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::vec_type),\n-            ty::Array(_, size) => size\n-                .try_eval_usize(cx.tcx, cx.param_env)\n-                .map_or(false, |size| size < 32),\n-            ty::Ref(_, inner, _) => may_slice(cx, inner),\n-            _ => false,\n-        }\n-    }\n-\n-    if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind {\n-        if path.ident.name == sym::iter && may_slice(cx, cx.typeck_results().expr_ty(&args[0])) {\n-            Some(&args[0])\n-        } else {\n-            None\n-        }\n-    } else {\n-        match ty.kind() {\n-            ty::Slice(_) => Some(expr),\n-            ty::Adt(def, _) if def.is_box() && may_slice(cx, ty.boxed_ty()) => Some(expr),\n-            ty::Ref(_, inner, _) => {\n-                if may_slice(cx, inner) {\n-                    Some(expr)\n-                } else {\n-                    None\n-                }\n-            },\n-            _ => None,\n-        }\n-    }\n-}\n-\n /// lint use of `unwrap()` for `Option`s and `Result`s\n fn lint_unwrap(cx: &LateContext<'_>, expr: &hir::Expr<'_>, unwrap_args: &[hir::Expr<'_>]) {\n     let obj_ty = cx.typeck_results().expr_ty(&unwrap_args[0]).peel_refs();"}, {"sha": "ec1b189bf77e876998ed42d2155abdb902abdd29", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9958af4229d4bee06ee65b921ac11b1fe498e831/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9958af4229d4bee06ee65b921ac11b1fe498e831/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=9958af4229d4bee06ee65b921ac11b1fe498e831", "patch": "@@ -1802,6 +1802,46 @@ pub fn is_some_ctor(cx: &LateContext<'_>, res: Res) -> bool {\n     false\n }\n \n+pub fn derefs_to_slice<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Option<&'tcx hir::Expr<'tcx>> {\n+    fn may_slice<'a>(cx: &LateContext<'a>, ty: Ty<'a>) -> bool {\n+        match ty.kind() {\n+            ty::Slice(_) => true,\n+            ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n+            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::vec_type),\n+            ty::Array(_, size) => size\n+                .try_eval_usize(cx.tcx, cx.param_env)\n+                .map_or(false, |size| size < 32),\n+            ty::Ref(_, inner, _) => may_slice(cx, inner),\n+            _ => false,\n+        }\n+    }\n+\n+    if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind {\n+        if path.ident.name == sym::iter && may_slice(cx, cx.typeck_results().expr_ty(&args[0])) {\n+            Some(&args[0])\n+        } else {\n+            None\n+        }\n+    } else {\n+        match ty.kind() {\n+            ty::Slice(_) => Some(expr),\n+            ty::Adt(def, _) if def.is_box() && may_slice(cx, ty.boxed_ty()) => Some(expr),\n+            ty::Ref(_, inner, _) => {\n+                if may_slice(cx, inner) {\n+                    Some(expr)\n+                } else {\n+                    None\n+                }\n+            },\n+            _ => None,\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{reindent_multiline, without_block_comments};"}]}