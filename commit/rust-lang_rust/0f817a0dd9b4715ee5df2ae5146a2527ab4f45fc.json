{"sha": "0f817a0dd9b4715ee5df2ae5146a2527ab4f45fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmODE3YTBkZDliNDcxNWVlNWRmMmFlNTE0NmEyNTI3YWI0ZjQ1ZmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-11-04T22:59:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-11-07T23:53:32Z"}, "message": "Add release notes for 1.13.0", "tree": {"sha": "2ce926e71d22d1c3be2b1eceae47b6ea7c81ae8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ce926e71d22d1c3be2b1eceae47b6ea7c81ae8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f817a0dd9b4715ee5df2ae5146a2527ab4f45fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f817a0dd9b4715ee5df2ae5146a2527ab4f45fc", "html_url": "https://github.com/rust-lang/rust/commit/0f817a0dd9b4715ee5df2ae5146a2527ab4f45fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f817a0dd9b4715ee5df2ae5146a2527ab4f45fc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec0d1ceb4288cd5e36187f1b523bd1a522537ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0d1ceb4288cd5e36187f1b523bd1a522537ad4", "html_url": "https://github.com/rust-lang/rust/commit/ec0d1ceb4288cd5e36187f1b523bd1a522537ad4"}], "stats": {"total": 257, "additions": 257, "deletions": 0}, "files": [{"sha": "e468a86e7acc32762b5853aabe42301fb882e702", "filename": "RELEASES.md", "status": "modified", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/0f817a0dd9b4715ee5df2ae5146a2527ab4f45fc/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f817a0dd9b4715ee5df2ae5146a2527ab4f45fc/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=0f817a0dd9b4715ee5df2ae5146a2527ab4f45fc", "patch": "@@ -1,3 +1,260 @@\n+Version 1.13.0 (2016-11-10)\n+===========================\n+\n+Language\n+--------\n+\n+* [Stabilize the `?` operator][36995]. `?` is a simple way to propagate\n+  errors, like the `try!` macro, described in [RFC 0243].\n+* [Stabilize macros in type position][36014]. Described in [RFC 873].\n+* [Stabilize attributes on statements][36995]. Described in [RFC 0016].\n+* [Fix `#[derive]` for empty tuple structs/variants][35728]\n+* [Fix lifetime rules for 'if' conditions][36029]\n+* [Avoid loading and parsing unconfigured non-inline modules][36482]\n+\n+Compiler\n+--------\n+\n+* [Add the `-C link-arg` argument][36574]\n+* [Remove the old AST-based backend from rustc_trans][35764]\n+* [Don't enable NEON by default on armv7 Linux][35814]\n+* [Fix debug line number info for macro expansions][35238]\n+* [Do not emit \"class method\" debuginfo for types that are not\n+  DICompositeType][36008]\n+* [Warn about multiple conflicting #[repr] hints][34623]\n+* [When sizing DST, don't double-count nested struct prefixes][36351]\n+* [Default RUST_MIN_STACK to 16MiB for now][36505]\n+* [Improve rlib metadata format][36551]. Reduces rlib size significantly.\n+* [Reject macros with empty repetitions to avoid infinite loop][36721]\n+* [Expand macros without recursing to avoid stack overflows][36214]\n+\n+Diagnostics\n+-----------\n+\n+* [Replace macro backtraces with labeled local uses][35702]\n+* [Improve error message for missplaced doc comments][33922]\n+* [Buffer unix and lock windows to prevent message interleaving][35975]\n+* [Update lifetime errors to specifically note temporaries][36171]\n+* [Special case a few colors for Windows][36178]\n+* [Suggest `use self` when such an import resolves][36289]\n+* [Be more specific when type parameter shadows primitive type][36338]\n+* Many minor improvements\n+\n+Compile-time Optimizations\n+--------------------------\n+\n+* [Compute and cache HIR hashes at beginning][35854]\n+* [Don't hash types in loan paths][36004]\n+* [Cache projections in trans][35761]\n+* [Optimize the parser's last token handling][36527]\n+* [Only instantiate #[inline] functions in codegen units referencing\n+  them][36524]. This leads to big improvements in cases where crates export\n+  define many inline functions without using them directly.\n+* [Lazily allocate TypedArena's first chunk][36592]\n+* [Don't allocate during default HashSet creation][36734]\n+\n+Stabilized APIs\n+---------------\n+\n+* [`checked_abs`]\n+* [`wrapping_abs`]\n+* [`overflowing_abs`]\n+* [`RefCell::try_borrow`]\n+* [`RefCell::try_borrow_mut`]\n+\n+Libraries\n+---------\n+\n+* [Add `assert_ne!` and `debug_assert_ne!`][35074]\n+* [Make `vec_deque::Drain`, `hash_map::Drain`, and `hash_set::Drain`\n+  covariant][35354]\n+* [Implement `AsRef<[T]>` for `std::slice::Iter`][35559]\n+* [Implement `Debug` for `std::vec::IntoIter`][35707]\n+* [`CString`: avoid excessive growth just to 0-terminate][35871]\n+* [Implement `CoerceUnsized` for `{Cell, RefCell, UnsafeCell}`][35627]\n+* [Use arc4rand on FreeBSD][35884]\n+* [memrchr: Correct aligned offset computation][35969]\n+* [Improve Demangling of Rust Symbols][36059]\n+* [Use monotonic time in condition variables][35048]\n+* [Implement `Debug` for `std::path::{Components,Iter}`][36101]\n+* [Implement conversion traits for `char`][35755]\n+* [Fix illegal instruction caused by overflow in channel cloning][36104]\n+* [Zero first byte of CString on drop][36264]\n+* [Inherit overflow checks for sum and product][36372]\n+* [Add missing Eq implementations][36423]\n+* [Implement `Debug` for `DirEntry`][36631]\n+* [When `getaddrinfo` returns `EAI_SYSTEM` retrieve actual error from\n+  `errno`][36754]\n+* [`SipHasher`] is deprecated. Use [`DefaultHasher`].\n+* [Implement more traits for `std::io::ErrorKind`][35911]\n+* [Optimize BinaryHeap bounds checking][36072]\n+* [Work around pointer aliasing issue in `Vec::extend_from_slice`,\n+  `extend_with_element`][36355]\n+* [Fix overflow checking in unsigned pow()][34942]\n+\n+Cargo\n+-----\n+\n+* This release includes security fixes to both curl and OpenSSL.\n+* [Fix transitive doctests when panic=abort][cargo/3021]\n+* [Add --all-features flag to cargo][cargo/3038]\n+* [Reject path-based dependencies in `cargo package`][cargo/3060]\n+* [Don't parse the home directory more than once][cargo/3078]\n+* [Don't try to generate Cargo.lock on empty workspaces][cargo/3092]\n+* [Update OpenSSL to 1.0.2j][cargo/3121]\n+* [Add license and license_file to cargo metadata output][cargo/3110]\n+* [Make crates-io registry URL optional in config; ignore all changes to\n+  source.crates-io][cargo/3089]\n+* [Don't download dependencies from other platforms][cargo/3123]\n+* [Build transitive dev-dependencies when needed][cargo/3125]\n+* [Add support for per-target rustflags in .cargo/config][cargo/3157]\n+* [Avoid updating registry when adding existing deps][cargo/3144]\n+* [Warn about path overrides that won't work][cargo/3136]\n+* [Use workspaces during `cargo install`][cargo/3146]\n+* [Leak mspdbsrv.exe processes on Windows][cargo/3162]\n+* [Add --message-format flag][cargo/3000]\n+* [Pass target environment for rustdoc][cargo/3205]\n+* [Use `CommandExt::exec` for `cargo run` on Unix][cargo/2818]\n+* [Update curl and curl-sys][cargo/3241]\n+* [Call rustdoc test with the correct cfg flags of a package][cargo/3242]\n+\n+Tooling\n+-------\n+\n+* [rustdoc: Add the `--sysroot` argument][36586]\n+* [rustdoc: Fix a couple of issues with the search results][35655]\n+* [rustdoc: remove the `!` from macro URLs and titles][35234]\n+* [gdb: Fix pretty-printing special-cased Rust types][35585]\n+* [rustdoc: Filter more incorrect methods inherited through Deref][36266]\n+\n+Misc\n+----\n+\n+* [Remove unmaintained style guide][35124]\n+* [Add s390x support][36369]\n+* [Initial work at Haiku OS support][36727]\n+* [Add mips-uclibc targets][35734]\n+* [Crate-ify compiler-rt into compiler-builtins][35021]\n+* [Add rustc version info (git hash + date) to dist tarball][36213]\n+* Many documentation improvements\n+\n+Compatibility Notes\n+-------------------\n+\n+* [`SipHasher`] is deprecated. Use [`DefaultHasher`].\n+* [Deny (by default) transmuting from fn item types to pointer-sized\n+  types][34923]. Continuing the long transition to zero-sized fn items,\n+  per [RFC 401].\n+* [Fix `#[derive]` for empty tuple structs/variants][35728].\n+  Part of [RFC 1506].\n+* [Issue deprecation warnings for safe accesses to extern statics][36173]\n+* [Fix lifetime rules for 'if' conditions][36029].\n+* [Inherit overflow checks for sum and product][36372].\n+* [Forbid user-defined macros named \"macro_rules\"][36730].\n+\n+[33922]: https://github.com/rust-lang/rust/pull/33922\n+[34623]: https://github.com/rust-lang/rust/pull/34623\n+[34923]: https://github.com/rust-lang/rust/pull/34923\n+[34942]: https://github.com/rust-lang/rust/pull/34942\n+[34982]: https://github.com/rust-lang/rust/pull/34982\n+[35021]: https://github.com/rust-lang/rust/pull/35021\n+[35048]: https://github.com/rust-lang/rust/pull/35048\n+[35074]: https://github.com/rust-lang/rust/pull/35074\n+[35124]: https://github.com/rust-lang/rust/pull/35124\n+[35234]: https://github.com/rust-lang/rust/pull/35234\n+[35238]: https://github.com/rust-lang/rust/pull/35238\n+[35354]: https://github.com/rust-lang/rust/pull/35354\n+[35559]: https://github.com/rust-lang/rust/pull/35559\n+[35585]: https://github.com/rust-lang/rust/pull/35585\n+[35627]: https://github.com/rust-lang/rust/pull/35627\n+[35655]: https://github.com/rust-lang/rust/pull/35655\n+[35702]: https://github.com/rust-lang/rust/pull/35702\n+[35707]: https://github.com/rust-lang/rust/pull/35707\n+[35728]: https://github.com/rust-lang/rust/pull/35728\n+[35734]: https://github.com/rust-lang/rust/pull/35734\n+[35755]: https://github.com/rust-lang/rust/pull/35755\n+[35761]: https://github.com/rust-lang/rust/pull/35761\n+[35764]: https://github.com/rust-lang/rust/pull/35764\n+[35814]: https://github.com/rust-lang/rust/pull/35814\n+[35854]: https://github.com/rust-lang/rust/pull/35854\n+[35871]: https://github.com/rust-lang/rust/pull/35871\n+[35884]: https://github.com/rust-lang/rust/pull/35884\n+[35911]: https://github.com/rust-lang/rust/pull/35911\n+[35969]: https://github.com/rust-lang/rust/pull/35969\n+[35975]: https://github.com/rust-lang/rust/pull/35975\n+[36004]: https://github.com/rust-lang/rust/pull/36004\n+[36008]: https://github.com/rust-lang/rust/pull/36008\n+[36014]: https://github.com/rust-lang/rust/pull/36014\n+[36029]: https://github.com/rust-lang/rust/pull/36029\n+[36059]: https://github.com/rust-lang/rust/pull/36059\n+[36072]: https://github.com/rust-lang/rust/pull/36072\n+[36101]: https://github.com/rust-lang/rust/pull/36101\n+[36104]: https://github.com/rust-lang/rust/pull/36104\n+[36171]: https://github.com/rust-lang/rust/pull/36171\n+[36173]: https://github.com/rust-lang/rust/pull/36173\n+[36178]: https://github.com/rust-lang/rust/pull/36178\n+[36213]: https://github.com/rust-lang/rust/pull/36213\n+[36214]: https://github.com/rust-lang/rust/pull/36214\n+[36264]: https://github.com/rust-lang/rust/pull/36264\n+[36266]: https://github.com/rust-lang/rust/pull/36266\n+[36289]: https://github.com/rust-lang/rust/pull/36289\n+[36338]: https://github.com/rust-lang/rust/pull/36338\n+[36351]: https://github.com/rust-lang/rust/pull/36351\n+[36355]: https://github.com/rust-lang/rust/pull/36355\n+[36369]: https://github.com/rust-lang/rust/pull/36369\n+[36372]: https://github.com/rust-lang/rust/pull/36372\n+[36423]: https://github.com/rust-lang/rust/pull/36423\n+[36482]: https://github.com/rust-lang/rust/pull/36482\n+[36505]: https://github.com/rust-lang/rust/pull/36505\n+[36524]: https://github.com/rust-lang/rust/pull/36524\n+[36527]: https://github.com/rust-lang/rust/pull/36527\n+[36551]: https://github.com/rust-lang/rust/pull/36551\n+[36574]: https://github.com/rust-lang/rust/pull/36574\n+[36586]: https://github.com/rust-lang/rust/pull/36586\n+[36592]: https://github.com/rust-lang/rust/pull/36592\n+[36631]: https://github.com/rust-lang/rust/pull/36631\n+[36639]: https://github.com/rust-lang/rust/pull/36639\n+[36721]: https://github.com/rust-lang/rust/pull/36721\n+[36727]: https://github.com/rust-lang/rust/pull/36727\n+[36730]: https://github.com/rust-lang/rust/pull/36730\n+[36734]: https://github.com/rust-lang/rust/pull/36734\n+[36754]: https://github.com/rust-lang/rust/pull/36754\n+[36995]: https://github.com/rust-lang/rust/pull/36995\n+[RFC 0016]: https://github.com/rust-lang/rfcs/blob/master/text/0016-more-attributes.md\n+[RFC 0243]: https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md\n+[RFC 1506]: https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md\n+[RFC 401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+[RFC 873]: https://github.com/rust-lang/rfcs/blob/master/text/0873-type-macros.md\n+[cargo/2818]: https://github.com/rust-lang/cargo/pull/2818\n+[cargo/3000]: https://github.com/rust-lang/cargo/pull/3000\n+[cargo/3021]: https://github.com/rust-lang/cargo/pull/3021\n+[cargo/3038]: https://github.com/rust-lang/cargo/pull/3038\n+[cargo/3060]: https://github.com/rust-lang/cargo/pull/3060\n+[cargo/3078]: https://github.com/rust-lang/cargo/pull/3078\n+[cargo/3089]: https://github.com/rust-lang/cargo/pull/3089\n+[cargo/3092]: https://github.com/rust-lang/cargo/pull/3092\n+[cargo/3110]: https://github.com/rust-lang/cargo/pull/3110\n+[cargo/3121]: https://github.com/rust-lang/cargo/pull/3121\n+[cargo/3123]: https://github.com/rust-lang/cargo/pull/3123\n+[cargo/3125]: https://github.com/rust-lang/cargo/pull/3125\n+[cargo/3136]: https://github.com/rust-lang/cargo/pull/3136\n+[cargo/3144]: https://github.com/rust-lang/cargo/pull/3144\n+[cargo/3146]: https://github.com/rust-lang/cargo/pull/3146\n+[cargo/3157]: https://github.com/rust-lang/cargo/pull/3157\n+[cargo/3162]: https://github.com/rust-lang/cargo/pull/3162\n+[cargo/3205]: https://github.com/rust-lang/cargo/pull/3205\n+[cargo/3241]: https://github.com/rust-lang/cargo/pull/3241\n+[cargo/3242]: https://github.com/rust-lang/cargo/pull/3242\n+[rustup]: https://www.rustup.rs\n+[`checked_abs`]: https://doc.rust-lang.org/std/primitive.i32.html#method.checked_abs\n+[`wrapping_abs`]: https://doc.rust-lang.org/std/primitive.i32.html#method.wrapping_abs\n+[`overflowing_abs`]: https://doc.rust-lang.org/std/primitive.i32.html#method.overflowing_abs\n+[`RefCell::try_borrow`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.try_borrow\n+[`RefCell::try_borrow_mut`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.try_borrow_mut\n+[`SipHasher`]: https://doc.rust-lang.org/std/hash/struct.SipHasher.html\n+[`DefaultHasher`]: https://doc.rust-lang.org/std/collections/hash_map/struct.DefaultHasher.html\n+\n+\n Version 1.12.1 (2016-10-20)\n ===========================\n "}]}