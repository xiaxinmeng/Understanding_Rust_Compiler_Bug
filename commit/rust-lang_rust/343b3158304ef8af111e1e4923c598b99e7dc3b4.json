{"sha": "343b3158304ef8af111e1e4923c598b99e7dc3b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0M2IzMTU4MzA0ZWY4YWYxMTFlMWU0OTIzYzU5OGI5OWU3ZGMzYjQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-27T04:44:49Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-27T04:44:49Z"}, "message": "Handle macros with tabs", "tree": {"sha": "963705945e11de27a98a877a902d0a3effce42f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963705945e11de27a98a877a902d0a3effce42f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343b3158304ef8af111e1e4923c598b99e7dc3b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343b3158304ef8af111e1e4923c598b99e7dc3b4", "html_url": "https://github.com/rust-lang/rust/commit/343b3158304ef8af111e1e4923c598b99e7dc3b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343b3158304ef8af111e1e4923c598b99e7dc3b4/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24efc3a934abcc9f497929a0c799d105cae934aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/24efc3a934abcc9f497929a0c799d105cae934aa", "html_url": "https://github.com/rust-lang/rust/commit/24efc3a934abcc9f497929a0c799d105cae934aa"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "97f603294212cafea962a86ded232440b042948e", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/343b3158304ef8af111e1e4923c598b99e7dc3b4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b3158304ef8af111e1e4923c598b99e7dc3b4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=343b3158304ef8af111e1e4923c598b99e7dc3b4", "patch": "@@ -231,6 +231,16 @@ impl Indent {\n         }\n     }\n \n+    pub fn from_width(config: &Config, width: usize) -> Indent {\n+        if config.hard_tabs() {\n+            let tab_num = width / config.tab_spaces();\n+            let alignment = width % config.tab_spaces();\n+            Indent::new(config.tab_spaces() * tab_num, alignment)\n+        } else {\n+            Indent::new(width, 0)\n+        }\n+    }\n+\n     pub fn empty() -> Indent {\n         Indent::new(0, 0)\n     }"}, {"sha": "12965b615600df08fa7c0763e7b810b44a7cad1b", "filename": "src/macros.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/343b3158304ef8af111e1e4923c598b99e7dc3b4/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b3158304ef8af111e1e4923c598b99e7dc3b4/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=343b3158304ef8af111e1e4923c598b99e7dc3b4", "patch": "@@ -19,8 +19,6 @@\n // List-like invocations with parentheses will be formatted as function calls,\n // and those with brackets will be formatted as array literals.\n \n-use std::iter::repeat;\n-\n use syntax::ast;\n use syntax::codemap::BytePos;\n use syntax::parse::new_parser_from_tts;\n@@ -118,14 +116,18 @@ pub fn rewrite_macro(\n                 Ok(expr) => {\n                     // Recovered errors.\n                     if context.parse_session.span_diagnostic.has_errors() {\n-                        return indent_macro_snippet(&context.snippet(mac.span), shape.indent);\n+                        return indent_macro_snippet(\n+                            context,\n+                            &context.snippet(mac.span),\n+                            shape.indent,\n+                        );\n                     }\n \n                     expr\n                 }\n                 Err(mut e) => {\n                     e.cancel();\n-                    return indent_macro_snippet(&context.snippet(mac.span), shape.indent);\n+                    return indent_macro_snippet(context, &context.snippet(mac.span), shape.indent);\n                 }\n             };\n \n@@ -244,7 +246,7 @@ pub fn rewrite_macro(\n         }\n         MacroStyle::Braces => {\n             // Skip macro invocations with braces, for now.\n-            indent_macro_snippet(&context.snippet(mac.span), shape.indent)\n+            indent_macro_snippet(context, &context.snippet(mac.span), shape.indent)\n         }\n     }\n }\n@@ -308,7 +310,11 @@ fn macro_style(mac: &ast::Mac, context: &RewriteContext) -> MacroStyle {\n //      ),\n /// }\n /// ```\n-fn indent_macro_snippet(macro_str: &str, indent: Indent) -> Option<String> {\n+fn indent_macro_snippet(\n+    context: &RewriteContext,\n+    macro_str: &str,\n+    indent: Indent,\n+) -> Option<String> {\n     let mut lines = macro_str.lines();\n     let first_line = try_opt!(lines.next().map(|s| s.trim_right()));\n     let mut trimmed_lines = Vec::with_capacity(16);\n@@ -319,7 +325,7 @@ fn indent_macro_snippet(macro_str: &str, indent: Indent) -> Option<String> {\n                 let prefix_space_width = if is_empty_line(line) {\n                     None\n                 } else {\n-                    get_prefix_space_width(line)\n+                    Some(get_prefix_space_width(context, line))\n                 };\n                 trimmed_lines.push((line.trim(), prefix_space_width));\n                 prefix_space_width\n@@ -337,7 +343,8 @@ fn indent_macro_snippet(macro_str: &str, indent: Indent) -> Option<String> {\n                             original_indent_width\n                                 .checked_sub(min_prefix_space_width)\n                                 .unwrap_or(0);\n-                        repeat_white_space(new_indent_width) + line.trim()\n+                        let new_indent = Indent::from_width(context.config, new_indent_width);\n+                        new_indent.to_string(context.config) + line.trim()\n                     }\n                     None => String::new(),\n                 })\n@@ -346,12 +353,17 @@ fn indent_macro_snippet(macro_str: &str, indent: Indent) -> Option<String> {\n     )\n }\n \n-fn get_prefix_space_width(s: &str) -> Option<usize> {\n-    s.chars().position(|c| c != ' ')\n-}\n-\n-fn repeat_white_space(ws_count: usize) -> String {\n-    repeat(\" \").take(ws_count).collect::<String>()\n+fn get_prefix_space_width(context: &RewriteContext, s: &str) -> usize {\n+    let mut width = 0;\n+    let mut iter = s.chars();\n+    while let Some(c) = iter.next() {\n+        match c {\n+            ' ' => width += 1,\n+            '\\t' => width += context.config.tab_spaces(),\n+            _ => return width,\n+        }\n+    }\n+    width\n }\n \n fn is_empty_line(s: &str) -> bool {"}, {"sha": "caccd75a700a2ada7d4d0eb778575c3bbd12e734", "filename": "tests/source/macros.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/343b3158304ef8af111e1e4923c598b99e7dc3b4/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b3158304ef8af111e1e4923c598b99e7dc3b4/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=343b3158304ef8af111e1e4923c598b99e7dc3b4", "patch": "@@ -149,6 +149,21 @@ fn issue_1917() {\n     }\n }\n \n+fn issue_1921() {\n+    // Macro with tabs.\n+    lazy_static! {\n+\tstatic ref ONE: u32 = 1;\n+\tstatic ref TWO: u32 = 2;\n+\tstatic ref THREE: u32 = 3;\n+\tstatic ref FOUR: u32 = {\n+\t\tlet mut acc = 1;\n+\t\tacc += 1;\n+\t\tacc += 2;\n+\t\tacc\n+\t}\n+}\n+}\n+\n // Put the following tests with macro invocations whose arguments cannot be parsed as expressioins\n // at the end of the file for now.\n "}, {"sha": "0b651cc5445e9d2be0e59e97505e4c062263755c", "filename": "tests/target/macros.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/343b3158304ef8af111e1e4923c598b99e7dc3b4/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b3158304ef8af111e1e4923c598b99e7dc3b4/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=343b3158304ef8af111e1e4923c598b99e7dc3b4", "patch": "@@ -193,6 +193,21 @@ fn issue_1917() {\n     }\n }\n \n+fn issue_1921() {\n+    // Macro with tabs.\n+    lazy_static! {\n+        static ref ONE: u32 = 1;\n+        static ref TWO: u32 = 2;\n+        static ref THREE: u32 = 3;\n+        static ref FOUR: u32 = {\n+            let mut acc = 1;\n+            acc += 1;\n+            acc += 2;\n+            acc\n+        }\n+    }\n+}\n+\n // Put the following tests with macro invocations whose arguments cannot be parsed as expressioins\n // at the end of the file for now.\n "}]}