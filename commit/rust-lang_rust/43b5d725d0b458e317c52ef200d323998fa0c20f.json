{"sha": "43b5d725d0b458e317c52ef200d323998fa0c20f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYjVkNzI1ZDBiNDU4ZTMxN2M1MmVmMjAwZDMyMzk5OGZhMGMyMGY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-01T15:46:04Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-01T22:35:15Z"}, "message": "Improve implicit self mutability suggestions.\n\nThis commit adds an `ImplicitSelfKind` to the HIR and the MIR that keeps\ntrack of whether a implicit self argument is immutable by-value, mutable\nby-value, immutable reference or mutable reference so that the addition\nof the `mut` keyword can be suggested for the immutable by-value case.", "tree": {"sha": "2173f9fa73cbc837395f77d52dd64251d6bff968", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2173f9fa73cbc837395f77d52dd64251d6bff968"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43b5d725d0b458e317c52ef200d323998fa0c20f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluyoSMACgkQAXYLT59T\n8VTjug/9G2lQUkSXCSoPtvE5eTOBJBMSTKxNNO2sYyuMdo+e+u7Zvq78MdDmXI+h\nqMyYJfOHCag3OiGWQJi2UzemPbxTFl3wR9WN8Tz8Agbkn7abjN+PieECO3MjC+IH\nc8j8XU+2S61BVikZItcd4rrNNXiNXcjzn3AaNJpkZaloAppb8GbW9aE8f2lzsiXc\nRbLhKR5gy/vmnn1saAsHdtgX6uyQcQzxujpNpiE+ws09oHfgqX+hN21Nql4avuRm\nw1AUxsoy6mqELjSdFUKcoUK+qmDIIZ9BhtjsoNa2OZJiW57Co1LT6qTCR8Un3wXB\nxHzFR4uPei7jPa/8suhIshaVbImYq+t8e6Ip3Ijdt9wUjHj5XHSq6lL6Lsr1yOzy\ngbiZwuO9CHL9SmWhqFafsjjTUGKm/R8kphvWo7AG/QqCipaAVSincxbxCVMQ6IG5\nCGIVeckEqlZK9lU7GJVE7YaBxvLZybUbymzPs1KgsgVkzSSv+J2xyxh08D+UWvqq\ngRj3lMuUkhBfMhBBKRjdso7SwrtvO2JcpwvjZTRU3hyqAyIEa8bGxBRTbX8rBy7L\nEIN13C9Yc8F82c+jODjpGYyehN0YI/NpjZMjCu0aezQNWzni2TnkS4I4u/+kFJVo\nEOQjh4855wm3PFBuIjeH4uAZiMHC9uSCtveJeJ2M6d2dDSNB9pE=\n=ov+z\n-----END PGP SIGNATURE-----", "payload": "tree 2173f9fa73cbc837395f77d52dd64251d6bff968\nparent f55129d0037c112a80276ee1de0c2245ddc6462c\nauthor David Wood <david@davidtw.co> 1538408764 +0200\ncommitter David Wood <david@davidtw.co> 1538433315 +0200\n\nImprove implicit self mutability suggestions.\n\nThis commit adds an `ImplicitSelfKind` to the HIR and the MIR that keeps\ntrack of whether a implicit self argument is immutable by-value, mutable\nby-value, immutable reference or mutable reference so that the addition\nof the `mut` keyword can be suggested for the immutable by-value case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43b5d725d0b458e317c52ef200d323998fa0c20f", "html_url": "https://github.com/rust-lang/rust/commit/43b5d725d0b458e317c52ef200d323998fa0c20f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43b5d725d0b458e317c52ef200d323998fa0c20f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55129d0037c112a80276ee1de0c2245ddc6462c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55129d0037c112a80276ee1de0c2245ddc6462c", "html_url": "https://github.com/rust-lang/rust/commit/f55129d0037c112a80276ee1de0c2245ddc6462c"}], "stats": {"total": 206, "additions": 180, "deletions": 26}, "files": [{"sha": "7f04f58dbb2a428ec61195dea16e18497cbf6a80", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -2011,11 +2011,31 @@ impl<'a> LoweringContext<'a> {\n             inputs,\n             output,\n             variadic: decl.variadic,\n-            has_implicit_self: decl.inputs.get(0).map_or(false, |arg| match arg.ty.node {\n-                TyKind::ImplicitSelf => true,\n-                TyKind::Rptr(_, ref mt) => mt.ty.node.is_implicit_self(),\n-                _ => false,\n-            }),\n+            implicit_self: decl.inputs.get(0).map_or(\n+                hir::ImplicitSelfKind::None,\n+                |arg| {\n+                    let is_mutable_pat = match arg.pat.node {\n+                        PatKind::Ident(BindingMode::ByValue(mt), _, _) |\n+                        PatKind::Ident(BindingMode::ByRef(mt), _, _) =>\n+                            mt == Mutability::Mutable,\n+                        _ => false,\n+                    };\n+\n+                    match arg.ty.node {\n+                        TyKind::ImplicitSelf if is_mutable_pat => hir::ImplicitSelfKind::Mut,\n+                        TyKind::ImplicitSelf => hir::ImplicitSelfKind::Imm,\n+                        // Given we are only considering `ImplicitSelf` types, we needn't consider\n+                        // the case where we have a mutable pattern to a reference as that would\n+                        // no longer be an `ImplicitSelf`.\n+                        TyKind::Rptr(_, ref mt) if mt.ty.node.is_implicit_self() &&\n+                            mt.mutbl == ast::Mutability::Mutable =>\n+                                hir::ImplicitSelfKind::MutRef,\n+                        TyKind::Rptr(_, ref mt) if mt.ty.node.is_implicit_self() =>\n+                            hir::ImplicitSelfKind::ImmRef,\n+                        _ => hir::ImplicitSelfKind::None,\n+                    }\n+                },\n+            ),\n         })\n     }\n "}, {"sha": "54568dd8f5ff301f2aab96daa38534c31a816f36", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -1769,9 +1769,34 @@ pub struct FnDecl {\n     pub inputs: HirVec<Ty>,\n     pub output: FunctionRetTy,\n     pub variadic: bool,\n-    /// True if this function has an `self`, `&self` or `&mut self` receiver\n-    /// (but not a `self: Xxx` one).\n-    pub has_implicit_self: bool,\n+    /// Does the function have an implicit self?\n+    pub implicit_self: ImplicitSelfKind,\n+}\n+\n+/// Represents what type of implicit self a function has, if any.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n+pub enum ImplicitSelfKind {\n+    /// Represents a `fn x(self);`.\n+    Imm,\n+    /// Represents a `fn x(mut self);`.\n+    Mut,\n+    /// Represents a `fn x(&self);`.\n+    ImmRef,\n+    /// Represents a `fn x(&mut self);`.\n+    MutRef,\n+    /// Represents when a function does not have a self argument or\n+    /// when a function has a `self: X` argument.\n+    None\n+}\n+\n+impl ImplicitSelfKind {\n+    /// Does this represent an implicit self?\n+    pub fn has_implicit_self(&self) -> bool {\n+        match *self {\n+            ImplicitSelfKind::None => false,\n+            _ => true,\n+        }\n+    }\n }\n \n /// Is the trait definition an auto trait?"}, {"sha": "2097e4faf07730d35a9baa8274d12e3d2a3955fe", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -349,14 +349,22 @@ impl_stable_hash_for!(struct hir::FnDecl {\n     inputs,\n     output,\n     variadic,\n-    has_implicit_self\n+    implicit_self\n });\n \n impl_stable_hash_for!(enum hir::FunctionRetTy {\n     DefaultReturn(span),\n     Return(t)\n });\n \n+impl_stable_hash_for!(enum hir::ImplicitSelfKind {\n+    Imm,\n+    Mut,\n+    ImmRef,\n+    MutRef,\n+    None\n+});\n+\n impl_stable_hash_for!(struct hir::TraitRef {\n     // Don't hash the ref_id. It is tracked via the thing it is used to access\n     ref_id -> _,"}, {"sha": "ca67b0f04de14c9b17d02676f359138eb3a5b92c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -583,11 +583,27 @@ pub enum BindingForm<'tcx> {\n     /// This is a binding for a non-`self` binding, or a `self` that has an explicit type.\n     Var(VarBindingForm<'tcx>),\n     /// Binding for a `self`/`&self`/`&mut self` binding where the type is implicit.\n-    ImplicitSelf,\n+    ImplicitSelf(ImplicitSelfKind),\n     /// Reference used in a guard expression to ensure immutability.\n     RefForGuard,\n }\n \n+/// Represents what type of implicit self a function has, if any.\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub enum ImplicitSelfKind {\n+    /// Represents a `fn x(self);`.\n+    Imm,\n+    /// Represents a `fn x(mut self);`.\n+    Mut,\n+    /// Represents a `fn x(&self);`.\n+    ImmRef,\n+    /// Represents a `fn x(&mut self);`.\n+    MutRef,\n+    /// Represents when a function does not have a self argument or\n+    /// when a function has a `self: X` argument.\n+    None\n+}\n+\n CloneTypeFoldableAndLiftImpls! { BindingForm<'tcx>, }\n \n impl_stable_hash_for!(struct self::VarBindingForm<'tcx> {\n@@ -597,6 +613,14 @@ impl_stable_hash_for!(struct self::VarBindingForm<'tcx> {\n     pat_span\n });\n \n+impl_stable_hash_for!(enum self::ImplicitSelfKind {\n+    Imm,\n+    Mut,\n+    ImmRef,\n+    MutRef,\n+    None\n+});\n+\n mod binding_form_impl {\n     use ich::StableHashingContext;\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n@@ -612,7 +636,7 @@ mod binding_form_impl {\n \n             match self {\n                 Var(binding) => binding.hash_stable(hcx, hasher),\n-                ImplicitSelf => (),\n+                ImplicitSelf(kind) => kind.hash_stable(hcx, hasher),\n                 RefForGuard => (),\n             }\n         }\n@@ -775,10 +799,9 @@ impl<'tcx> LocalDecl<'tcx> {\n                 pat_span: _,\n             }))) => true,\n \n-            // FIXME: might be able to thread the distinction between\n-            // `self`/`mut self`/`&self`/`&mut self` into the\n-            // `BindingForm::ImplicitSelf` variant, (and then return\n-            // true here for solely the first case).\n+            Some(ClearCrossCrate::Set(BindingForm::ImplicitSelf(ImplicitSelfKind::Imm)))\n+                => true,\n+\n             _ => false,\n         }\n     }\n@@ -795,7 +818,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 pat_span: _,\n             }))) => true,\n \n-            Some(ClearCrossCrate::Set(BindingForm::ImplicitSelf)) => true,\n+            Some(ClearCrossCrate::Set(BindingForm::ImplicitSelf(_))) => true,\n \n             _ => false,\n         }"}, {"sha": "321257aefdb5aff6d9a80e989cd89531e80de99e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -1221,7 +1221,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             if let Some(i) = arg_pos {\n                 // The argument's `Ty`\n                 (Some(&fn_like.decl().inputs[i]),\n-                 i == 0 && fn_like.decl().has_implicit_self)\n+                 i == 0 && fn_like.decl().implicit_self.has_implicit_self())\n             } else {\n                 (None, false)\n             }"}, {"sha": "1d33d9cc0c45277ffe5556fed12ae48dcdb504f5", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             {\n                 let local_decl = &self.mir.local_decls[*local];\n                 let suggestion = match local_decl.is_user_variable.as_ref().unwrap() {\n-                    ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf) => {\n+                    ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf(_)) => {\n                         Some(suggest_ampmut_self(self.infcx.tcx, local_decl))\n                     }\n "}, {"sha": "3dbd3bbb41573b8834aa03ec6567c8c93d39a7c2", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -125,8 +125,14 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                             let ty_hir_id = fn_decl.inputs[index].hir_id;\n                             let ty_span = tcx.hir.span(tcx.hir.hir_to_node_id(ty_hir_id));\n                             opt_ty_info = Some(ty_span);\n-                            self_arg = if index == 0 && fn_decl.has_implicit_self {\n-                                Some(ImplicitSelfBinding)\n+                            self_arg = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n+                                match fn_decl.implicit_self {\n+                                    hir::ImplicitSelfKind::Imm => Some(ImplicitSelfKind::Imm),\n+                                    hir::ImplicitSelfKind::Mut => Some(ImplicitSelfKind::Mut),\n+                                    hir::ImplicitSelfKind::ImmRef => Some(ImplicitSelfKind::ImmRef),\n+                                    hir::ImplicitSelfKind::MutRef => Some(ImplicitSelfKind::MutRef),\n+                                    _ => None,\n+                                }\n                             } else {\n                                 None\n                             };\n@@ -508,12 +514,10 @@ fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n ///////////////////////////////////////////////////////////////////////////\n /// the main entry point for building MIR for a function\n \n-struct ImplicitSelfBinding;\n-\n struct ArgInfo<'gcx>(Ty<'gcx>,\n                      Option<Span>,\n                      Option<&'gcx hir::Pat>,\n-                     Option<ImplicitSelfBinding>);\n+                     Option<ImplicitSelfKind>);\n \n fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                    fn_id: ast::NodeId,\n@@ -797,8 +801,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     PatternKind::Binding { mutability, var, mode: BindingMode::ByValue, .. } => {\n                         self.local_decls[local].mutability = mutability;\n                         self.local_decls[local].is_user_variable =\n-                            if let Some(ImplicitSelfBinding) = self_binding {\n-                                Some(ClearCrossCrate::Set(BindingForm::ImplicitSelf))\n+                            if let Some(kind) = self_binding {\n+                                Some(ClearCrossCrate::Set(BindingForm::ImplicitSelf(*kind)))\n                             } else {\n                                 let binding_mode = ty::BindingMode::BindByValue(mutability.into());\n                                 Some(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {"}, {"sha": "e7d25d07d12058b49007a47be8ab30d6ada81efa", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -270,7 +270,7 @@ trait TraitChangeModeSelfOwnToMut: Sized {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToMut: Sized {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]"}, {"sha": "3dd6c629fc7b8663c3d743552a262b27eceaa026", "filename": "src/test/ui/nll/issue-51191.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+struct Struct;\n+\n+impl Struct {\n+    fn bar(self: &mut Self) {\n+        (&mut self).bar(); //~ ERROR cannot borrow\n+    }\n+\n+    fn imm(self) {\n+        (&mut self).bar(); //~ ERROR cannot borrow\n+    }\n+\n+    fn mtbl(mut self) {\n+        (&mut self).bar();\n+    }\n+\n+    fn immref(&self) {\n+        (&mut self).bar(); //~ ERROR cannot borrow\n+    }\n+\n+    fn mtblref(&mut self) {\n+        (&mut self).bar();\n+    }\n+}\n+\n+fn main () {}"}, {"sha": "e56ddb1ed53046731ada0c7ba2ba90ec95844a2d", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43b5d725d0b458e317c52ef200d323998fa0c20f/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=43b5d725d0b458e317c52ef200d323998fa0c20f", "patch": "@@ -0,0 +1,37 @@\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-51191.rs:17:9\n+   |\n+LL |     fn bar(self: &mut Self) {\n+   |            ---- help: consider changing this to be mutable: `mut self`\n+LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-51191.rs:21:9\n+   |\n+LL |     fn imm(self) {\n+   |            ---- help: consider changing this to be mutable: `mut self`\n+LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-51191.rs:29:9\n+   |\n+LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/issue-51191.rs:29:9\n+   |\n+LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-51191.rs:33:9\n+   |\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}]}