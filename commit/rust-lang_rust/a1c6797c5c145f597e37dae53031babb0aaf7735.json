{"sha": "a1c6797c5c145f597e37dae53031babb0aaf7735", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYzY3OTdjNWMxNDVmNTk3ZTM3ZGFlNTMwMzFiYWJiMGFhZjc3MzU=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T10:30:50Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T16:42:12Z"}, "message": "Error when there is an unsupported flag", "tree": {"sha": "3d41983f81d46ee5c3b36c6a76678a619ed242d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d41983f81d46ee5c3b36c6a76678a619ed242d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c6797c5c145f597e37dae53031babb0aaf7735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c6797c5c145f597e37dae53031babb0aaf7735", "html_url": "https://github.com/rust-lang/rust/commit/a1c6797c5c145f597e37dae53031babb0aaf7735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c6797c5c145f597e37dae53031babb0aaf7735/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2776e465c2244f77ff69a128bf4131d7fb4fab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2776e465c2244f77ff69a128bf4131d7fb4fab", "html_url": "https://github.com/rust-lang/rust/commit/6a2776e465c2244f77ff69a128bf4131d7fb4fab"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "a6a1eb947b0bbe0ad8622c10d9f3d0df3aceeee6", "filename": "src/shims/fs.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a1c6797c5c145f597e37dae53031babb0aaf7735/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c6797c5c145f597e37dae53031babb0aaf7735/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=a1c6797c5c145f597e37dae53031babb0aaf7735", "patch": "@@ -44,7 +44,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let mut options = OpenOptions::new();\n \n-        // The first two bits of the flag correspond to the access mode of the file in linux.\n+        // The first two bits of the flag correspond to the access mode of the file in linux. This\n+        // is done this way because `O_RDONLY` is zero in several platforms.\n         let access_mode = flag & 0b11;\n \n         if access_mode == this.eval_libc_i32(\"O_RDONLY\")? {\n@@ -56,15 +57,35 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else {\n             throw_unsup_format!(\"Unsupported access mode {:#x}\", access_mode);\n         }\n+        // We need to check that there aren't unsupported options in `flag`. For this we try to\n+        // reproduce the content of `flag` in the `mirror` variable using only the supported\n+        // options.\n+        let mut mirror = access_mode;\n \n-        if flag & this.eval_libc_i32(\"O_APPEND\")? != 0 {\n+        let o_append = this.eval_libc_i32(\"O_APPEND\")?;\n+        if flag & o_append != 0 {\n             options.append(true);\n+            mirror |= o_append;\n         }\n-        if flag & this.eval_libc_i32(\"O_TRUNC\")? != 0 {\n+        let o_trunc = this.eval_libc_i32(\"O_TRUNC\")?;\n+        if flag & o_trunc != 0 {\n             options.truncate(true);\n+            mirror |= o_trunc;\n         }\n-        if flag & this.eval_libc_i32(\"O_CREAT\")? != 0 {\n+        let o_creat = this.eval_libc_i32(\"O_CREAT\")?;\n+        if flag & o_creat != 0 {\n             options.create(true);\n+            mirror |= o_creat;\n+        }\n+        let o_cloexec = this.eval_libc_i32(\"O_CLOEXEC\")?;\n+        if flag & o_cloexec != 0 {\n+            // This flag is a noop for now because `std` already sets it.\n+            mirror |= o_cloexec;\n+        }\n+        // If `flag` is not equal to `mirror`, there is an unsupported option enabled in `flag`,\n+        // then we throw an error.\n+        if flag != mirror {\n+            throw_unsup_format!(\"unsupported flags {:#x}\", flag);\n         }\n \n         let path_bytes = this"}]}