{"sha": "fd94255b9d4ab69b110bb5d2acef5c288fe4a0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOTQyNTViOWQ0YWI2OWIxMTBiYjVkMmFjZWY1YzI4OGZlNGEwZTE=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-03-17T13:19:57Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T15:06:37Z"}, "message": "Add comments explaining asserts", "tree": {"sha": "6a23cb2a7a4d3f049d7718db74ac016f32e8d7aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a23cb2a7a4d3f049d7718db74ac016f32e8d7aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd94255b9d4ab69b110bb5d2acef5c288fe4a0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd94255b9d4ab69b110bb5d2acef5c288fe4a0e1", "html_url": "https://github.com/rust-lang/rust/commit/fd94255b9d4ab69b110bb5d2acef5c288fe4a0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd94255b9d4ab69b110bb5d2acef5c288fe4a0e1/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d11315ebfb4c2d95a1ca6c52bec105237b10e933", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11315ebfb4c2d95a1ca6c52bec105237b10e933", "html_url": "https://github.com/rust-lang/rust/commit/d11315ebfb4c2d95a1ca6c52bec105237b10e933"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "61346bfd85baa448247ea8802f71fc03e22e9f9f", "filename": "src/shims/sync.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd94255b9d4ab69b110bb5d2acef5c288fe4a0e1/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd94255b9d4ab69b110bb5d2acef5c288fe4a0e1/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=fd94255b9d4ab69b110bb5d2acef5c288fe4a0e1", "patch": "@@ -13,6 +13,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutexattr_init(&mut self, attr_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following write at an offset to the attr pointer is within bounds\n         assert_ptr_target_min_size(this, attr_op, 4)?;\n \n         let attr = this.read_scalar(attr_op)?.not_undef()?;\n@@ -36,6 +37,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following write at an offset to the attr pointer is within bounds\n         assert_ptr_target_min_size(this, attr_op, 4)?;\n \n         let attr = this.read_scalar(attr_op)?.not_undef()?;\n@@ -62,6 +64,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutexattr_destroy(&mut self, attr_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following write at an offset to the attr pointer is within bounds\n         assert_ptr_target_min_size(this, attr_op, 4)?;\n \n         let attr = this.read_scalar(attr_op)?.not_undef()?;\n@@ -92,7 +95,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following writes at offsets to the mutex pointer are within bounds\n         assert_ptr_target_min_size(this, mutex_op, 16)?;\n+        // Ensure that the following read at an offset to the attr pointer is within bounds\n         assert_ptr_target_min_size(this, attr_op, 4)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n@@ -125,6 +130,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_lock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following reads and writes at offsets to the mutex pointer are within bounds\n         assert_ptr_target_min_size(this, mutex_op, 16)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n@@ -166,6 +172,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_trylock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following reads and writes at offsets to the mutex pointer are within bounds\n         assert_ptr_target_min_size(this, mutex_op, 16)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n@@ -201,6 +208,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_unlock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following reads and writes at offsets to the mutex pointer are within bounds\n         assert_ptr_target_min_size(this, mutex_op, 16)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n@@ -246,6 +254,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_destroy(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following read and writes at offsets to the mutex pointer are within bounds\n         assert_ptr_target_min_size(this, mutex_op, 16)?;\n \n         let mutex = this.read_scalar(mutex_op)?.not_undef()?;\n@@ -277,6 +286,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_rdlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following reads and write at offsets to the rwlock pointer are within bounds\n         assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n@@ -301,6 +311,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_tryrdlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following reads and write at offsets to the rwlock pointer are within bounds\n         assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n@@ -325,6 +336,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_wrlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following reads and write at offsets to the rwlock pointer are within bounds\n         assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n@@ -351,6 +363,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_trywrlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following reads and write at offsets to the rwlock pointer are within bounds\n         assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n@@ -375,6 +388,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_unlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following reads and writes at offsets to the rwlock pointer are within bounds\n         assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n@@ -402,6 +416,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_destroy(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        // Ensure that the following reads and writes at offsets to the rwlock pointer are within bounds\n         assert_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;"}]}