{"sha": "97072c6b9054bbab09fa731948d504a26a1f8377", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDcyYzZiOTA1NGJiYWIwOWZhNzMxOTQ4ZDUwNGEyNmExZjgzNzc=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-08-21T11:09:32Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-08-21T17:31:00Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>", "tree": {"sha": "09e3d74393f4720b20972fdca17c8d208aa4eb44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e3d74393f4720b20972fdca17c8d208aa4eb44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97072c6b9054bbab09fa731948d504a26a1f8377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97072c6b9054bbab09fa731948d504a26a1f8377", "html_url": "https://github.com/rust-lang/rust/commit/97072c6b9054bbab09fa731948d504a26a1f8377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97072c6b9054bbab09fa731948d504a26a1f8377/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ababd87942dd3f62d6abc5fa1833fce2d5b88eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ababd87942dd3f62d6abc5fa1833fce2d5b88eb", "html_url": "https://github.com/rust-lang/rust/commit/1ababd87942dd3f62d6abc5fa1833fce2d5b88eb"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "5390b57a1d98dddcd84ef1e2dfc0e7896c1ddd20", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=97072c6b9054bbab09fa731948d504a26a1f8377", "patch": "@@ -50,10 +50,8 @@ struct Node<T> {\n \n /// An iterator over the elements of a `LinkedList`.\n ///\n-/// This `struct` is created by the [`iter`] method on [`LinkedList`]. See its\n+/// This `struct` is created by [`LinkedList::iter()`]. See its\n /// documentation for more.\n-///\n-/// [`iter`]: LinkedList::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     head: Option<NonNull<Node<T>>>,\n@@ -79,10 +77,8 @@ impl<T> Clone for Iter<'_, T> {\n \n /// A mutable iterator over the elements of a `LinkedList`.\n ///\n-/// This `struct` is created by the [`iter_mut`] method on [`LinkedList`]. See its\n+/// This `struct` is created by [`LinkedList::iter_mut()`]. See its\n /// documentation for more.\n-///\n-/// [`iter_mut`]: LinkedList::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     // We do *not* exclusively own the entire list here, references to node's `element`"}, {"sha": "a886e17f5a9c3022a07467ccdded6bdec6e9c7b0", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=97072c6b9054bbab09fa731948d504a26a1f8377", "patch": "@@ -501,9 +501,6 @@\n //! it would internally pass around this structure until it has been determined\n //! where output should go to.\n //!\n-//! [`usize`]: core::usize\n-//! [`isize`]: core::isize\n-//! [`i8`]: core::i8\n //! [`fmt::Result`]: Result\n //! [`Result`]: core::result::Result\n //! [`std::fmt::Error`]: Error"}, {"sha": "f8b1c21e9771c3324823a27a20d1087d9d9d7663", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=97072c6b9054bbab09fa731948d504a26a1f8377", "patch": "@@ -393,7 +393,7 @@ impl<T> Rc<T> {\n \n     /// Returns the inner value, if the `Rc` has exactly one strong reference.\n     ///\n-    /// Otherwise, an [`Err`][Result] is returned with the same `Rc` that was\n+    /// Otherwise, an [`Err`] is returned with the same `Rc` that was\n     /// passed in.\n     ///\n     /// This will succeed even if there are outstanding weak references.\n@@ -1743,7 +1743,6 @@ impl<T> Weak<T> {\n     /// [`into_raw`]: Weak::into_raw\n     /// [`upgrade`]: Weak::upgrade\n     /// [`new`]: Weak::new\n-    /// [`forget`]: std::mem::forget\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         if ptr.is_null() {"}, {"sha": "d7d7b6bd157bc2efc3b9e44bdb8db49c54d1b584", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=97072c6b9054bbab09fa731948d504a26a1f8377", "patch": "@@ -492,7 +492,7 @@ impl String {\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n     /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: \ufffd\n     ///\n-    /// [byteslice]: core::slice\n+    /// [byteslice]: ../../std/primitive.slice.html\n     /// [U+FFFD]: core::char::REPLACEMENT_CHARACTER\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want"}, {"sha": "4444a7a313298f25e047183b3376d58f68198170", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97072c6b9054bbab09fa731948d504a26a1f8377/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=97072c6b9054bbab09fa731948d504a26a1f8377", "patch": "@@ -387,7 +387,7 @@ impl<T> Arc<T> {\n \n     /// Returns the inner value, if the `Arc` has exactly one strong reference.\n     ///\n-    /// Otherwise, an [`Err`][Result] is returned with the same `Arc` that was\n+    /// Otherwise, an [`Err`] is returned with the same `Arc` that was\n     /// passed in.\n     ///\n     /// This will succeed even if there are outstanding weak references.\n@@ -1168,7 +1168,7 @@ impl<T: ?Sized> Arc<T> {\n     /// Returns a mutable reference into the given `Arc`, if there are\n     /// no other `Arc` or [`Weak`] pointers to the same allocation.\n     ///\n-    /// Returns [`None`][Option] otherwise, because it is not safe to\n+    /// Returns [`None`] otherwise, because it is not safe to\n     /// mutate a shared value.\n     ///\n     /// See also [`make_mut`][make_mut], which will [`clone`][clone]"}]}