{"sha": "09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YmIzYzBjNGJiOGQxNzRiNzgzZDNiZmQzYzBjZGYwNmIyZmEwMTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-13T05:02:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-13T05:02:03Z"}, "message": "auto merge of #10878 : vadimcn/rust/manifest, r=alexcrichton\n\nIn order to avoid UAC installer detection silliness...\r\n\r\nCloses #10512", "tree": {"sha": "a1b20e11f2657a249d2f4eab31e5277a7b8938c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1b20e11f2657a249d2f4eab31e5277a7b8938c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013", "html_url": "https://github.com/rust-lang/rust/commit/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b12dca7f97a51c6cbb4f47ea6e095d841a97c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b12dca7f97a51c6cbb4f47ea6e095d841a97c1a", "html_url": "https://github.com/rust-lang/rust/commit/1b12dca7f97a51c6cbb4f47ea6e095d841a97c1a"}, {"sha": "d4d1310c5c5562592069d93683d558d6b8f87236", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d1310c5c5562592069d93683d558d6b8f87236", "html_url": "https://github.com/rust-lang/rust/commit/d4d1310c5c5562592069d93683d558d6b8f87236"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "b7e16cf2f38bf6a7c81c55bb3aff75ccaed405dc", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013", "patch": "@@ -11,6 +11,7 @@\n \n use back::archive::{Archive, METADATA_FILENAME};\n use back::rpath;\n+use back::manifest;\n use driver::driver::CrateTranslation;\n use driver::session::Session;\n use driver::session;\n@@ -800,6 +801,12 @@ fn link_binary_output(sess: Session,\n         }\n         session::OutputExecutable => {\n             link_natively(sess, false, obj_filename, &out_filename);\n+            // Windows linker will add an \".exe\" extension if there was none\n+            let out_filename = match out_filename.extension() {\n+                Some(_) => out_filename.clone(),\n+                None => out_filename.with_extension(win32::EXE_EXTENSION)\n+            };\n+            manifest::postprocess_executable(sess, &out_filename);\n         }\n         session::OutputDylib => {\n             link_natively(sess, true, obj_filename, &out_filename);"}, {"sha": "1b39935800bab53c5c139fab531fda080d2960d6", "filename": "src/librustc/back/manifest.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013/src%2Flibrustc%2Fback%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013/src%2Flibrustc%2Fback%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmanifest.rs?ref=09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013", "patch": "@@ -0,0 +1,108 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// To avoid problems with Windows UAC installer detection heuristics,\n+// Rust-produced executables need an application manifest.\n+// For details, see issue #10512.\n+\n+// No-op on other platforms.\n+\n+use driver::session::Session;\n+use std::path::Path;\n+\n+#[cfg(not(windows))]\n+pub fn postprocess_executable(_sess: Session, _filename: &Path) {}\n+\n+#[cfg(windows)]\n+pub fn postprocess_executable(sess: Session, filename: &Path) {\n+\n+    let default_manifest = concat!(\n+        \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\",\n+        \"<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>\",\n+        \"  <trustInfo xmlns='urn:schemas-microsoft-com:asm.v3'>\",\n+        \"    <security>\",\n+        \"      <requestedPrivileges>\",\n+        \"        <requestedExecutionLevel level='asInvoker' uiAccess='false' />\",\n+        \"      </requestedPrivileges>\",\n+        \"    </security>\",\n+        \"  </trustInfo>\",\n+        \"</assembly>\");\n+\n+    match windows::embed_manifest(filename, default_manifest) {\n+        Ok(_) => (),\n+        Err(msg) => sess.err(format!(\"Could not embed application manifest: {}\", msg))\n+    }\n+}\n+\n+#[cfg(windows)]\n+mod windows {\n+    use std::libc::types::os::arch::extra::{BOOL,WORD,DWORD,HANDLE,LPCWSTR,LPCVOID};\n+    use std::libc::consts::os::extra::FALSE;\n+    use std::cast::transmute;\n+    use std::os;\n+\n+    // FIXME #9053: should import as_utf16_p from std rather than re-defining here\n+    //use std::os::win32::as_utf16_p;\n+    fn as_utf16_p<T>(s: &str, f: |*u16| -> T) -> T {\n+        let mut t = s.to_utf16();\n+        // Null terminate before passing on.\n+        t.push(0u16);\n+        t.as_imm_buf(|buf, _len| f(buf))\n+    }\n+\n+    #[link_name = \"kernel32\"]\n+    extern \"system\" {\n+        pub fn BeginUpdateResourceW(pFileName: LPCWSTR,\n+                                    bDeleteExistingResources: BOOL) -> HANDLE;\n+        pub fn UpdateResourceW(hUpdate: HANDLE,\n+                               lpType: LPCWSTR,\n+                               lpName: LPCWSTR,\n+                               wLanguage: WORD,\n+                               lpData: LPCVOID,\n+                               cbData: DWORD) -> BOOL;\n+        pub fn EndUpdateResourceW(hUpdate: HANDLE,\n+                                  fDiscard: BOOL) -> BOOL;\n+    }\n+\n+    fn MAKEINTRESOURCEW(id: int) -> LPCWSTR {\n+        unsafe{ transmute(id) }\n+    }\n+\n+    pub fn embed_manifest(filename: &Path,\n+                          manifest: &str) -> Result<(),~str> {\n+        unsafe {\n+            let hUpdate = as_utf16_p(filename.as_str().unwrap(), |path| {\n+                BeginUpdateResourceW(path, FALSE)\n+            });\n+            if hUpdate.is_null() {\n+                return Err(format!(\"failure in BeginUpdateResourceW: {}\", os::last_os_error()));\n+            }\n+\n+            let ok = manifest.as_imm_buf(|p, len| {\n+                UpdateResourceW(hUpdate,\n+                                MAKEINTRESOURCEW(24), // RT_MANIFEST\n+                                MAKEINTRESOURCEW(1),  // CREATEPROCESS_MANIFEST_RESOURCE_ID\n+                                0,                    // LANG_NEUTRAL, SUBLANG_NEUTRAL\n+                                p as LPCVOID,\n+                                len as u32)\n+            });\n+            if ok == FALSE {\n+                return Err(format!(\"failure in UpdateResourceW: {}\", os::last_os_error()));\n+            }\n+\n+            let ok = EndUpdateResourceW(hUpdate, FALSE);\n+            if ok == FALSE {\n+                return Err(format!(\"failure in EndUpdateResourceW: {}\", os::last_os_error()));\n+            }\n+            Ok(())\n+        }\n+    }\n+}"}, {"sha": "7adb014de677e60bb2efa13875cadda4057b290a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013", "patch": "@@ -93,6 +93,7 @@ pub mod front {\n pub mod back {\n     pub mod archive;\n     pub mod link;\n+    pub mod manifest;\n     pub mod abi;\n     pub mod upcall;\n     pub mod arm;"}, {"sha": "12231907940db6751bf0cdeacc265bb45ed32208", "filename": "src/test/run-pass/setup.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013/src%2Ftest%2Frun-pass%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013/src%2Ftest%2Frun-pass%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsetup.rs?ref=09bb3c0c4bb8d174b783d3bfd3c0cdf06b2fa013", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// On Windows this test checks that Rust binaries have an embedded\n+// application manifest and don't trip UAC installer detection\n+// heuristics (\"setup\" is one of the \"installer\" keywords).\n+// For details, see issue #10512.\n+\n+// On other platforms this is a no-op.\n+\n+pub fn main() {\n+}"}]}