{"sha": "c960c3e05742f5b4a727b1a9c4d7da185d72ca8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NjBjM2UwNTc0MmY1YjRhNzI3YjFhOWM0ZDdkYTE4NWQ3MmNhOGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T03:02:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-11T03:02:30Z"}, "message": "Rollup merge of #68102 - lzutao:inline, r=alexcrichton\n\nInline some conversion methods around OsStr\n\nDiff on the assembly of this snippet before and after this PR: https://www.diffchecker.com/NeGMjaJ2\n```rust\nuse std::env;\nuse std::io;\nuse std::path::{Path, PathBuf};\n\npub fn cargo_home_with_cwd(cwd: &Path) -> io::Result<PathBuf> {\n    match env::var_os(\"CARGO_HOME\").filter(|h| !h.is_empty()) {\n        Some(home) => {\n            let home = PathBuf::from(home);\n            if home.is_absolute() {\n                Ok(home)\n            } else {\n                Ok(cwd.join(&home))\n            }\n        }\n        _ => env::home_dir()\n            .map(|p| p.join(\".cargo\"))\n            .ok_or_else(|| io::Error::new(io::ErrorKind::Other, \"could not find cargo home dir\")),\n    }\n}\n```", "tree": {"sha": "3c537ec496b7efd89e33ec3b0158d7a48354e336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c537ec496b7efd89e33ec3b0158d7a48354e336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGTrGCRBK7hj4Ov3rIwAAdHIIALKGzFx86wMFB133T9Y+ecTV\npvz8uaVkH1l2RYTRZaZq1jcO9yB5eOZ7T8tGKsr4EJMUq7xUKGZu+tvo+vbS7PJv\n0oeBe2mm3LZCFomGoAWDfyiLBWytpaMrIZb7VRQwouTBq+JwaUd45HkKK7nCXJU9\nkMXpqvI1WWDR/JDKPnMkGW75O6COMMUT11no9+sWzQuPnK3c+3pLXxK/VB/NdHA1\nAe/5m6orhx1U2JSVrCMj3MWL5VXyzE92Kq0LplAViJ0DeP5XvpQUD72h3w2PdCFG\na3nhqAvixgeUvTDlFHZOvC8pw8ycosqBqqAKx+VFyuiocZncnqbNOxRbToEquiA=\n=NDDd\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c537ec496b7efd89e33ec3b0158d7a48354e336\nparent cacda2d7a0d43c6038329e980b8ab339dd0ab9af\nparent 5f3f1a3606a5f13177a1634ba80d6386e5132518\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578711750 +0100\ncommitter GitHub <noreply@github.com> 1578711750 +0100\n\nRollup merge of #68102 - lzutao:inline, r=alexcrichton\n\nInline some conversion methods around OsStr\n\nDiff on the assembly of this snippet before and after this PR: https://www.diffchecker.com/NeGMjaJ2\n```rust\nuse std::env;\nuse std::io;\nuse std::path::{Path, PathBuf};\n\npub fn cargo_home_with_cwd(cwd: &Path) -> io::Result<PathBuf> {\n    match env::var_os(\"CARGO_HOME\").filter(|h| !h.is_empty()) {\n        Some(home) => {\n            let home = PathBuf::from(home);\n            if home.is_absolute() {\n                Ok(home)\n            } else {\n                Ok(cwd.join(&home))\n            }\n        }\n        _ => env::home_dir()\n            .map(|p| p.join(\".cargo\"))\n            .ok_or_else(|| io::Error::new(io::ErrorKind::Other, \"could not find cargo home dir\")),\n    }\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c", "html_url": "https://github.com/rust-lang/rust/commit/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "url": "https://api.github.com/repos/rust-lang/rust/commits/cacda2d7a0d43c6038329e980b8ab339dd0ab9af", "html_url": "https://github.com/rust-lang/rust/commit/cacda2d7a0d43c6038329e980b8ab339dd0ab9af"}, {"sha": "5f3f1a3606a5f13177a1634ba80d6386e5132518", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3f1a3606a5f13177a1634ba80d6386e5132518", "html_url": "https://github.com/rust-lang/rust/commit/5f3f1a3606a5f13177a1634ba80d6386e5132518"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "b480581e21ba90c093664699ae88974dd8dd9bef", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=c960c3e05742f5b4a727b1a9c4d7da185d72ca8c", "patch": "@@ -250,6 +250,7 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n+    #[inline]\n     fn from(err: String) -> Box<dyn Error + Send + Sync> {\n         struct StringError(String);\n \n@@ -317,6 +318,7 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n+    #[inline]\n     fn from(err: &str) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }"}, {"sha": "77da97219b14762d56684d724b2e5349ff876814", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=c960c3e05742f5b4a727b1a9c4d7da185d72ca8c", "patch": "@@ -615,6 +615,7 @@ impl OsStr {\n     /// assert!(!os_str.is_empty());\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[inline]\n     pub fn is_empty(&self) -> bool {\n         self.inner.inner.is_empty()\n     }\n@@ -965,6 +966,7 @@ impl AsRef<OsStr> for OsStr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<OsStr> for OsString {\n+    #[inline]\n     fn as_ref(&self) -> &OsStr {\n         self\n     }"}, {"sha": "a703cb748e06b4e111d7f649e9444809c7dec470", "filename": "src/libstd/path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=c960c3e05742f5b4a727b1a9c4d7da185d72ca8c", "patch": "@@ -1475,6 +1475,7 @@ impl From<OsString> for PathBuf {\n     /// Converts a `OsString` into a `PathBuf`\n     ///\n     /// This conversion does not allocate or copy memory.\n+    #[inline]\n     fn from(s: OsString) -> PathBuf {\n         PathBuf { inner: s }\n     }\n@@ -1535,7 +1536,7 @@ impl fmt::Debug for PathBuf {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Deref for PathBuf {\n     type Target = Path;\n-\n+    #[inline]\n     fn deref(&self) -> &Path {\n         Path::new(&self.inner)\n     }\n@@ -2655,6 +2656,7 @@ impl AsRef<Path> for OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<Path> for str {\n+    #[inline]\n     fn as_ref(&self) -> &Path {\n         Path::new(self)\n     }\n@@ -2669,6 +2671,7 @@ impl AsRef<Path> for String {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<Path> for PathBuf {\n+    #[inline]\n     fn as_ref(&self) -> &Path {\n         self\n     }"}, {"sha": "e965ea79aa03946a54b1a45672e763187e76c224", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c960c3e05742f5b4a727b1a9c4d7da185d72ca8c/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=c960c3e05742f5b4a727b1a9c4d7da185d72ca8c", "patch": "@@ -104,6 +104,7 @@ impl Buf {\n         self.inner.shrink_to(min_capacity)\n     }\n \n+    #[inline]\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}]}