{"sha": "e86c87a81e69de51cfed5719888840f25266a8d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NmM4N2E4MWU2OWRlNTFjZmVkNTcxOTg4ODg0MGYyNTI2NmE4ZDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-08-14T22:05:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-16T18:18:06Z"}, "message": "Generalize lifetime bounds on type parameters to support multiple\nlifetime bounds. This doesn't really cause any difficulties, because\nwe already had to accommodate the fact that multiple implicit bounds\ncould accumulate. Object types still require precisely one lifetime\nbound. This is a pre-step towards generalized where clauses (once you\nhave lifetime bounds in where clauses, it is harder to restrict them\nto exactly one).", "tree": {"sha": "6ba349feb7690835338db1d0fad03bc1284be5c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ba349feb7690835338db1d0fad03bc1284be5c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86c87a81e69de51cfed5719888840f25266a8d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86c87a81e69de51cfed5719888840f25266a8d8", "html_url": "https://github.com/rust-lang/rust/commit/e86c87a81e69de51cfed5719888840f25266a8d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86c87a81e69de51cfed5719888840f25266a8d8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "946654a721d6fd5eeb91e93293cdc2cba83c78b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/946654a721d6fd5eeb91e93293cdc2cba83c78b9", "html_url": "https://github.com/rust-lang/rust/commit/946654a721d6fd5eeb91e93293cdc2cba83c78b9"}], "stats": {"total": 99, "additions": 81, "deletions": 18}, "files": [{"sha": "0e888b39b8516f5d3fd3a4f1a443058c4b142aab", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -680,14 +680,14 @@ fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds {\n     let builtin_bounds = parse_builtin_bounds(st, |x,y| conv(x,y));\n \n     let mut param_bounds = ty::ParamBounds {\n-        opt_region_bound: None,\n+        region_bounds: Vec::new(),\n         builtin_bounds: builtin_bounds,\n         trait_bounds: Vec::new()\n     };\n     loop {\n         match next(st) {\n             'R' => {\n-                param_bounds.opt_region_bound = Some(parse_region(st, |x, y| conv (x, y)));\n+                param_bounds.region_bounds.push(parse_region(st, |x, y| conv (x, y)));\n             }\n             'I' => {\n                 param_bounds.trait_bounds.push(Rc::new(parse_trait_ref(st, |x,y| conv(x,y))));"}, {"sha": "3ef1d15cf5651eafa635a51b8659087f62f24d33", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -366,7 +366,7 @@ pub fn enc_existential_bounds(w: &mut SeekableMemWriter, cx: &ctxt, bs: &ty::Exi\n pub fn enc_bounds(w: &mut SeekableMemWriter, cx: &ctxt, bs: &ty::ParamBounds) {\n     enc_builtin_bounds(w, cx, &bs.builtin_bounds);\n \n-    for &r in bs.opt_region_bound.iter() {\n+    for &r in bs.region_bounds.iter() {\n         mywrite!(w, \"R\");\n         enc_region(w, cx, r);\n     }"}, {"sha": "628665457cc91a6225b3ff1c2b1ccbeb463b33da", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -1008,15 +1008,16 @@ pub enum type_err {\n /// as well as the existential type parameter in an object type.\n #[deriving(PartialEq, Eq, Hash, Clone, Show)]\n pub struct ParamBounds {\n-    pub opt_region_bound: Option<ty::Region>,\n+    pub region_bounds: Vec<ty::Region>,\n     pub builtin_bounds: BuiltinBounds,\n     pub trait_bounds: Vec<Rc<TraitRef>>\n }\n \n /// Bounds suitable for an existentially quantified type parameter\n /// such as those that appear in object types or closure types. The\n /// major difference between this case and `ParamBounds` is that\n-/// general purpose trait bounds are omitted.\n+/// general purpose trait bounds are omitted and there must be\n+/// *exactly one* region.\n #[deriving(PartialEq, Eq, Hash, Clone, Show)]\n pub struct ExistentialBounds {\n     pub region_bound: ty::Region,\n@@ -4864,7 +4865,7 @@ pub fn required_region_bounds(tcx: &ctxt,\n         trait_bounds,\n         |trait_ref| {\n             let bounds = ty::bounds_for_trait_ref(tcx, &*trait_ref);\n-            push_region_bounds(bounds.opt_region_bound.as_slice(),\n+            push_region_bounds(bounds.region_bounds.as_slice(),\n                                bounds.builtin_bounds,\n                                &mut all_bounds);\n             debug!(\"from {}: bounds={} all_bounds={}\","}, {"sha": "48fa6f823b0e5c8fe232f08328dc494a87ad7037", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -287,7 +287,7 @@ impl TypeFoldable for ty::ExistentialBounds {\n impl TypeFoldable for ty::ParamBounds {\n     fn fold_with<'tcx, F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ParamBounds {\n         ty::ParamBounds {\n-            opt_region_bound: self.opt_region_bound.fold_with(folder),\n+            region_bounds: self.region_bounds.fold_with(folder),\n             builtin_bounds: self.builtin_bounds.fold_with(folder),\n             trait_bounds: self.trait_bounds.fold_with(folder),\n         }"}, {"sha": "ec2c3d2d2efb2dfbb7109805c22ff9ad821ec411", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -2005,7 +2005,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let region_bounds =\n             ty::required_region_bounds(\n                 self.tcx(),\n-                param_bound.opt_region_bound.as_slice(),\n+                param_bound.region_bounds.as_slice(),\n                 param_bound.builtin_bounds,\n                 param_bound.trait_bounds.as_slice());\n         for &r in region_bounds.iter() {"}, {"sha": "6926d9dd0e7e72c3ce4c38037ed9bde55c552f11", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -1880,7 +1880,7 @@ fn param_must_outlive(rcx: &Rcx,\n     let param_bound = param_env.bounds.get(param_ty.space, param_ty.idx);\n     param_bounds =\n         ty::required_region_bounds(rcx.tcx(),\n-                                   param_bound.opt_region_bound.as_slice(),\n+                                   param_bound.region_bounds.as_slice(),\n                                    param_bound.builtin_bounds,\n                                    param_bound.trait_bounds.as_slice());\n "}, {"sha": "8bcbe4b7929852d2dfa85145679e559552c68e48", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -327,7 +327,7 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n \n                 // Inspect bounds on this type parameter for any\n                 // region bounds.\n-                for &r in type_param_def.bounds.opt_region_bound.iter() {\n+                for &r in type_param_def.bounds.region_bounds.iter() {\n                     self.stack.push((r, Some(ty)));\n                     self.accumulate_from_ty(type_param_ty);\n                     self.stack.pop().unwrap();"}, {"sha": "74db36ff9ac370bdf1502d8fa938cad0a10b77ff", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -1044,7 +1044,7 @@ fn ty_generics_for_trait(ccx: &CrateCtxt,\n         ident: special_idents::type_self,\n         def_id: local_def(param_id),\n         bounds: ty::ParamBounds {\n-            opt_region_bound: None,\n+            region_bounds: vec!(),\n             builtin_bounds: ty::empty_builtin_bounds(),\n             trait_bounds: vec!(self_trait_ref),\n         },\n@@ -1280,12 +1280,12 @@ fn conv_param_bounds(ccx: &CrateCtxt,\n         .map(|b| instantiate_trait_ref(ccx, b, param_ty.to_ty(ccx.tcx)))\n         .chain(unboxed_fn_ty_bounds)\n         .collect();\n-    let opt_region_bound =\n-        astconv::compute_opt_region_bound(\n-            ccx.tcx, span, builtin_bounds, region_bounds.as_slice(),\n-            trait_bounds.as_slice());\n+    let region_bounds: Vec<ty::Region> =\n+        region_bounds.move_iter()\n+        .map(|r| ast_region_to_region(ccx.tcx, r))\n+        .collect();\n     ty::ParamBounds {\n-        opt_region_bound: opt_region_bound,\n+        region_bounds: region_bounds,\n         builtin_bounds: builtin_bounds,\n         trait_bounds: trait_bounds,\n     }"}, {"sha": "6b3c92e0028bf6e1e3ac2fcdfe1abc1432a522ae", "filename": "src/test/compile-fail/region-bounds-on-objects-and-type-parameters.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Ftest%2Fcompile-fail%2Fregion-bounds-on-objects-and-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Ftest%2Fcompile-fail%2Fregion-bounds-on-objects-and-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-bounds-on-objects-and-type-parameters.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -35,10 +35,10 @@ fn test<\n     'a,\n     'b,\n     A:IsStatic,\n-    B:Is<'a>+Is2<'b>,    //~ ERROR ambiguous lifetime bound\n+    B:Is<'a>+Is2<'b>, // OK in a parameter, but not an object type.\n     C:'b+Is<'a>+Is2<'b>,\n     D:Is<'a>+Is2<'static>,\n-    E:'a+'b //~ ERROR only a single explicit lifetime bound is permitted\n+    E:'a+'b           // OK in a parameter, but not an object type.\n >() { }\n \n fn main() { }"}, {"sha": "cec785c6e9666f188d3eb8668dea2e047ad9b019", "filename": "src/test/compile-fail/regions-close-over-type-parameter-multiple.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-multiple.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various tests where we over type parameters with multiple lifetime\n+// bounds.\n+\n+trait SomeTrait { fn get(&self) -> int; }\n+\n+fn make_object_good1<'a,'b,A:SomeTrait+'a+'b>(v: A) -> Box<SomeTrait+'a> {\n+    // A outlives 'a AND 'b...\n+    box v as Box<SomeTrait+'a> // ...hence this type is safe.\n+}\n+\n+fn make_object_good2<'a,'b,A:SomeTrait+'a+'b>(v: A) -> Box<SomeTrait+'b> {\n+    // A outlives 'a AND 'b...\n+    box v as Box<SomeTrait+'b> // ...hence this type is safe.\n+}\n+\n+fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<SomeTrait+'c> {\n+    // A outlives 'a AND 'b...but not 'c.\n+    box v as Box<SomeTrait+'a> //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+}"}, {"sha": "5dba80ad38a16750875502c170b9af4a5876ae7f", "filename": "src/test/run-pass/regions-close-over-type-parameter-successfully.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c87a81e69de51cfed5719888840f25266a8d8/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs?ref=e86c87a81e69de51cfed5719888840f25266a8d8", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A test where we (successfully) close over a reference into\n+// an object.\n+\n+trait SomeTrait { fn get(&self) -> int; }\n+\n+impl<'a> SomeTrait for &'a int {\n+    fn get(&self) -> int {\n+        **self\n+    }\n+}\n+\n+fn make_object<'a,A:SomeTrait+'a>(v: A) -> Box<SomeTrait+'a> {\n+    box v as Box<SomeTrait+'a>\n+}\n+\n+fn main() {\n+    let i: int = 22;\n+    let obj = make_object(&i);\n+    assert_eq!(22, obj.get());\n+}"}]}