{"sha": "4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f", "node_id": "C_kwDOAAsO6NoAKDRjNDNhYTcwNTNhMzhlYTdlMGJiM2FjYTJmZmVjNGU3MzRmNzE2NGY", "commit": {"author": {"name": "Aaron Christiansen", "email": "aaronc20000@gmail.com", "date": "2022-06-25T22:15:44Z"}, "committer": {"name": "Aaron Christiansen", "email": "aaronc20000@gmail.com", "date": "2022-07-15T14:49:04Z"}, "message": "Fix suggestion for `async` in redundant_closure_call\n\nFix redundant_closure_call for single-expression async closures\n\nAdd Sugg::asyncify\n\nUse Sugg for redundant_closure_call implementation", "tree": {"sha": "3cfba8382ad10f00848de305d3040283b4e58836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cfba8382ad10f00848de305d3040283b4e58836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f", "html_url": "https://github.com/rust-lang/rust/commit/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/comments", "author": {"login": "AaronC81", "id": 3321773, "node_id": "MDQ6VXNlcjMzMjE3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3321773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AaronC81", "html_url": "https://github.com/AaronC81", "followers_url": "https://api.github.com/users/AaronC81/followers", "following_url": "https://api.github.com/users/AaronC81/following{/other_user}", "gists_url": "https://api.github.com/users/AaronC81/gists{/gist_id}", "starred_url": "https://api.github.com/users/AaronC81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AaronC81/subscriptions", "organizations_url": "https://api.github.com/users/AaronC81/orgs", "repos_url": "https://api.github.com/users/AaronC81/repos", "events_url": "https://api.github.com/users/AaronC81/events{/privacy}", "received_events_url": "https://api.github.com/users/AaronC81/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AaronC81", "id": 3321773, "node_id": "MDQ6VXNlcjMzMjE3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3321773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AaronC81", "html_url": "https://github.com/AaronC81", "followers_url": "https://api.github.com/users/AaronC81/followers", "following_url": "https://api.github.com/users/AaronC81/following{/other_user}", "gists_url": "https://api.github.com/users/AaronC81/gists{/gist_id}", "starred_url": "https://api.github.com/users/AaronC81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AaronC81/subscriptions", "organizations_url": "https://api.github.com/users/AaronC81/orgs", "repos_url": "https://api.github.com/users/AaronC81/repos", "events_url": "https://api.github.com/users/AaronC81/events{/privacy}", "received_events_url": "https://api.github.com/users/AaronC81/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa0706bf20bd6f647c0132e0779e99b7c11208df", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0706bf20bd6f647c0132e0779e99b7c11208df", "html_url": "https://github.com/rust-lang/rust/commit/aa0706bf20bd6f647c0132e0779e99b7c11208df"}], "stats": {"total": 117, "additions": 109, "deletions": 8}, "files": [{"sha": "74eea6de4bbeff43d30c92d83a8553c73d6cfab9", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_ast::visit as ast_visit;\n@@ -69,7 +69,7 @@ impl EarlyLintPass for RedundantClosureCall {\n         if_chain! {\n             if let ast::ExprKind::Call(ref paren, _) = expr.kind;\n             if let ast::ExprKind::Paren(ref closure) = paren.kind;\n-            if let ast::ExprKind::Closure(_, _, _, _, ref decl, ref block, _) = closure.kind;\n+            if let ast::ExprKind::Closure(_, _, ref r#async, _, ref decl, ref block, _) = closure.kind;\n             then {\n                 let mut visitor = ReturnVisitor::new();\n                 visitor.visit_expr(block);\n@@ -81,10 +81,19 @@ impl EarlyLintPass for RedundantClosureCall {\n                         \"try not to call a closure in the expression where it is declared\",\n                         |diag| {\n                             if decl.inputs.is_empty() {\n-                                let mut app = Applicability::MachineApplicable;\n-                                let hint =\n-                                    snippet_with_applicability(cx, block.span, \"..\", &mut app).into_owned();\n-                                diag.span_suggestion(expr.span, \"try doing something like\", hint, app);\n+                                let app = Applicability::MachineApplicable;\n+                                let mut hint = Sugg::ast(cx, block, \"..\");\n+\n+                                if r#async.is_async() {\n+                                    // `async x` is a syntax error, so it becomes `async { x }`\n+                                    if !matches!(block.kind, ast::ExprKind::Block(_, _)) {\n+                                        hint = hint.blockify();\n+                                    }\n+\n+                                    hint = hint.asyncify();\n+                                }\n+\n+                                diag.span_suggestion(expr.span, \"try doing something like\", hint.to_string(), app);\n                             }\n                         },\n                     );"}, {"sha": "081c98e2f3ce726ccf9019a46fc4631eefde9a29", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f", "patch": "@@ -315,6 +315,12 @@ impl<'a> Sugg<'a> {\n         Sugg::NonParen(Cow::Owned(format!(\"{{ {} }}\", self)))\n     }\n \n+    /// Convenience method to prefix the expression with the `async` keyword.\n+    /// Can be used after `blockify` to create an async block.\n+    pub fn asyncify(self) -> Sugg<'static> {\n+        Sugg::NonParen(Cow::Owned(format!(\"async {}\", self)))\n+    }\n+\n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n     /// suggestion.\n     pub fn range(self, end: &Self, limit: ast::RangeLimits) -> Sugg<'static> {"}, {"sha": "7cd687c95a003f14c770fed009c8c4062359156b", "filename": "tests/ui/redundant_closure_call_fixable.fixed", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.fixed?ref=4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f", "patch": "@@ -1,8 +1,28 @@\n // run-rustfix\n \n+#![feature(async_closure)]\n #![warn(clippy::redundant_closure_call)]\n #![allow(unused)]\n \n+async fn something() -> u32 {\n+    21\n+}\n+\n+async fn something_else() -> u32 {\n+    2\n+}\n+\n fn main() {\n     let a = 42;\n+    let b = async {\n+        let x = something().await;\n+        let y = something_else().await;\n+        x * y\n+    };\n+    let c = {\n+        let x = 21;\n+        let y = 2;\n+        x * y\n+    };\n+    let d = async { something().await };\n }"}, {"sha": "37e4d2238641576fbff1184315d1264d2741f205", "filename": "tests/ui/redundant_closure_call_fixable.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/tests%2Fui%2Fredundant_closure_call_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/tests%2Fui%2Fredundant_closure_call_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.rs?ref=4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f", "patch": "@@ -1,8 +1,28 @@\n // run-rustfix\n \n+#![feature(async_closure)]\n #![warn(clippy::redundant_closure_call)]\n #![allow(unused)]\n \n+async fn something() -> u32 {\n+    21\n+}\n+\n+async fn something_else() -> u32 {\n+    2\n+}\n+\n fn main() {\n     let a = (|| 42)();\n+    let b = (async || {\n+        let x = something().await;\n+        let y = something_else().await;\n+        x * y\n+    })();\n+    let c = (|| {\n+        let x = 21;\n+        let y = 2;\n+        x * y\n+    })();\n+    let d = (async || something().await)();\n }"}, {"sha": "56a8e57c0c362097b74fb1b000b1438a1c62b097", "filename": "tests/ui/redundant_closure_call_fixable.stderr", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.stderr?ref=4c43aa7053a38ea7e0bb3aca2ffec4e734f7164f", "patch": "@@ -1,10 +1,56 @@\n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:7:13\n+  --> $DIR/redundant_closure_call_fixable.rs:16:13\n    |\n LL |     let a = (|| 42)();\n    |             ^^^^^^^^^ help: try doing something like: `42`\n    |\n    = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: try not to call a closure in the expression where it is declared\n+  --> $DIR/redundant_closure_call_fixable.rs:17:13\n+   |\n+LL |       let b = (async || {\n+   |  _____________^\n+LL | |         let x = something().await;\n+LL | |         let y = something_else().await;\n+LL | |         x * y\n+LL | |     })();\n+   | |________^\n+   |\n+help: try doing something like\n+   |\n+LL ~     let b = async {\n+LL +         let x = something().await;\n+LL +         let y = something_else().await;\n+LL +         x * y\n+LL ~     };\n+   |\n+\n+error: try not to call a closure in the expression where it is declared\n+  --> $DIR/redundant_closure_call_fixable.rs:22:13\n+   |\n+LL |       let c = (|| {\n+   |  _____________^\n+LL | |         let x = 21;\n+LL | |         let y = 2;\n+LL | |         x * y\n+LL | |     })();\n+   | |________^\n+   |\n+help: try doing something like\n+   |\n+LL ~     let c = {\n+LL +         let x = 21;\n+LL +         let y = 2;\n+LL +         x * y\n+LL ~     };\n+   |\n+\n+error: try not to call a closure in the expression where it is declared\n+  --> $DIR/redundant_closure_call_fixable.rs:27:13\n+   |\n+LL |     let d = (async || something().await)();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try doing something like: `async { something().await }`\n+\n+error: aborting due to 4 previous errors\n "}]}