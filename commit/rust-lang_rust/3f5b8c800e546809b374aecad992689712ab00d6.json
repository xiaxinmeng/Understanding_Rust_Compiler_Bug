{"sha": "3f5b8c800e546809b374aecad992689712ab00d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNWI4YzgwMGU1NDY4MDliMzc0YWVjYWQ5OTI2ODk3MTJhYjAwZDY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T01:00:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T01:00:08Z"}, "message": "Rollup merge of #73460 - tmandry:variant-lineinfo, r=oli-obk\n\nEmit line info for generator variants\n\nDebuggers should be able to read a generator / async fn state machine and show the line it's suspended at. Eventually, this could grow into an \"async stack trace\" feature of sorts. While no debugger support this for Rust today, this PR adds the debuginfo necessary for that support to exist.\n\n[This gist](https://gist.github.com/tmandry/6d7004fa008684f76809208847459f9b) shows the resulting debuginfo for a simple example. Here's a snippet:\n\n```\n0x00000986:           DW_TAG_variant\n                        DW_AT_discr_value       (0x03)\n\n0x00000988:             DW_TAG_member\n                          DW_AT_name    (\"3\")\n                          DW_AT_type    (0x000009bc \"Suspend0\")\n                          DW_AT_decl_file       (\"/home/tmandry/code/playground/generator-simple.rs\")\n                          DW_AT_decl_line       (6)\n                          DW_AT_alignment       (8)\n                          DW_AT_data_member_location    (0x00)\n```\n\nThe file and line have been added here. The line currently points to the beginning of the statement containing the yield (or await), because that's what the MIR source info points to for the yield terminator. (We may want to point to the yield or await line specifically, but that can be done independently of this change.)\n\nDebuggers don't know how to use this kind of info yet. However, we're hoping to experiment with adding such support to Fuchsia's debugger. It would be exciting if someone were interested in adding similar to support to gdb/lldb.\n\nr? @oli-obk\ncc @eddyb @jonas-schievink\n\nPart of #73524.", "tree": {"sha": "0d0b6054ebaa66d33b34294e06bb96206f009cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d0b6054ebaa66d33b34294e06bb96206f009cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f5b8c800e546809b374aecad992689712ab00d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9UiZCRBK7hj4Ov3rIwAAdHIIACyE1q6dINmB2hwNJ8PVCGih\nImsedopGD6dH1XArflSlrlUwgSP8GFSj9dDNpJUjTGBBxnXR4TAJXTlRYrp8y1re\nViiX4E8imjUlOEyiCcUiLq7URFuMXZRHkhkXdiVzYxjD3fImonn7oVKWEK2WtJQv\n2uJ3pJ3cXQq8uPEtWSu3mgGewlrMH2ZE9HbARvl87sx/dtJHmbooj3odh2h87sUh\nMj52XL49pA+x8bIdi2Y6Ijp+ENlKhafTNCzWvzpmAHhygRW/l2mpNx8m5aB4khr/\nfB2u4HEeljZc1ixF+4KjsU1XJPY4U4X05R3wJRtS54VLIyLMnSREaPuD7WlOy5Q=\n=frLG\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d0b6054ebaa66d33b34294e06bb96206f009cf7\nparent c50d9816c7b8fee1a7fa2fb7c6c47fc9b9ddd83f\nparent 887fbd9d3411ea7def2cc7a508d74bea6b7f19bb\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593133208 -0700\ncommitter GitHub <noreply@github.com> 1593133208 -0700\n\nRollup merge of #73460 - tmandry:variant-lineinfo, r=oli-obk\n\nEmit line info for generator variants\n\nDebuggers should be able to read a generator / async fn state machine and show the line it's suspended at. Eventually, this could grow into an \"async stack trace\" feature of sorts. While no debugger support this for Rust today, this PR adds the debuginfo necessary for that support to exist.\n\n[This gist](https://gist.github.com/tmandry/6d7004fa008684f76809208847459f9b) shows the resulting debuginfo for a simple example. Here's a snippet:\n\n```\n0x00000986:           DW_TAG_variant\n                        DW_AT_discr_value       (0x03)\n\n0x00000988:             DW_TAG_member\n                          DW_AT_name    (\"3\")\n                          DW_AT_type    (0x000009bc \"Suspend0\")\n                          DW_AT_decl_file       (\"/home/tmandry/code/playground/generator-simple.rs\")\n                          DW_AT_decl_line       (6)\n                          DW_AT_alignment       (8)\n                          DW_AT_data_member_location    (0x00)\n```\n\nThe file and line have been added here. The line currently points to the beginning of the statement containing the yield (or await), because that's what the MIR source info points to for the yield terminator. (We may want to point to the yield or await line specifically, but that can be done independently of this change.)\n\nDebuggers don't know how to use this kind of info yet. However, we're hoping to experiment with adding such support to Fuchsia's debugger. It would be exciting if someone were interested in adding similar to support to gdb/lldb.\n\nr? @oli-obk\ncc @eddyb @jonas-schievink\n\nPart of #73524.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5b8c800e546809b374aecad992689712ab00d6", "html_url": "https://github.com/rust-lang/rust/commit/3f5b8c800e546809b374aecad992689712ab00d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f5b8c800e546809b374aecad992689712ab00d6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c50d9816c7b8fee1a7fa2fb7c6c47fc9b9ddd83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50d9816c7b8fee1a7fa2fb7c6c47fc9b9ddd83f", "html_url": "https://github.com/rust-lang/rust/commit/c50d9816c7b8fee1a7fa2fb7c6c47fc9b9ddd83f"}, {"sha": "887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "html_url": "https://github.com/rust-lang/rust/commit/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb"}], "stats": {"total": 512, "additions": 463, "deletions": 49}, "files": [{"sha": "33351c06d27ee0cb253ed9f57d7c6820c5802ef3", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 124, "deletions": 39, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -33,9 +33,9 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::truncate;\n use rustc_middle::mir::{self, Field, GeneratorLayout};\n use rustc_middle::ty::layout::{self, IntegerExt, PrimitiveExt, TyAndLayout};\n-use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n+use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::Instance;\n-use rustc_middle::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, GeneratorSubsts, ParamEnv, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::{Interner, Symbol};\n@@ -392,6 +392,7 @@ fn vec_slice_metadata(\n             align: pointer_align,\n             flags: DIFlags::FlagZero,\n             discriminant: None,\n+            source_info: None,\n         },\n         MemberDescription {\n             name: \"length\".to_owned(),\n@@ -401,6 +402,7 @@ fn vec_slice_metadata(\n             align: usize_align,\n             flags: DIFlags::FlagZero,\n             discriminant: None,\n+            source_info: None,\n         },\n     ];\n \n@@ -508,6 +510,7 @@ fn trait_pointer_metadata(\n             align: data_ptr_field.align.abi,\n             flags: DIFlags::FlagArtificial,\n             discriminant: None,\n+            source_info: None,\n         },\n         MemberDescription {\n             name: \"vtable\".to_owned(),\n@@ -517,6 +520,7 @@ fn trait_pointer_metadata(\n             align: vtable_field.align.abi,\n             flags: DIFlags::FlagArtificial,\n             discriminant: None,\n+            source_info: None,\n         },\n     ];\n \n@@ -859,7 +863,7 @@ fn foreign_type_metadata(\n     debug!(\"foreign_type_metadata: {:?}\", t);\n \n     let name = compute_debuginfo_type_name(cx.tcx, t, false);\n-    create_struct_stub(cx, t, &name, unique_type_id, NO_SCOPE_METADATA)\n+    create_struct_stub(cx, t, &name, unique_type_id, NO_SCOPE_METADATA, DIFlags::FlagZero)\n }\n \n fn pointer_type_metadata(\n@@ -1026,6 +1030,12 @@ impl MetadataCreationResult<'ll> {\n     }\n }\n \n+#[derive(Debug)]\n+struct SourceInfo<'ll> {\n+    file: &'ll DIFile,\n+    line: u32,\n+}\n+\n /// Description of a type member, which can either be a regular field (as in\n /// structs or tuples) or an enum variant.\n #[derive(Debug)]\n@@ -1037,6 +1047,7 @@ struct MemberDescription<'ll> {\n     align: Align,\n     flags: DIFlags,\n     discriminant: Option<u64>,\n+    source_info: Option<SourceInfo<'ll>>,\n }\n \n impl<'ll> MemberDescription<'ll> {\n@@ -1045,14 +1056,18 @@ impl<'ll> MemberDescription<'ll> {\n         cx: &CodegenCx<'ll, '_>,\n         composite_type_metadata: &'ll DIScope,\n     ) -> &'ll DIType {\n+        let (file, line) = self\n+            .source_info\n+            .map(|info| (info.file, info.line))\n+            .unwrap_or_else(|| (unknown_file_metadata(cx), UNKNOWN_LINE_NUMBER));\n         unsafe {\n             llvm::LLVMRustDIBuilderCreateVariantMemberType(\n                 DIB(cx),\n                 composite_type_metadata,\n                 self.name.as_ptr().cast(),\n                 self.name.len(),\n-                unknown_file_metadata(cx),\n-                UNKNOWN_LINE_NUMBER,\n+                file,\n+                line,\n                 self.size.bits(),\n                 self.align.bits() as u32,\n                 self.offset.bits(),\n@@ -1124,6 +1139,7 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n                     align: field.align.abi,\n                     flags: DIFlags::FlagZero,\n                     discriminant: None,\n+                    source_info: None,\n                 }\n             })\n             .collect()\n@@ -1145,8 +1161,14 @@ fn prepare_struct_metadata(\n \n     let containing_scope = get_namespace_for_item(cx, struct_def_id);\n \n-    let struct_metadata_stub =\n-        create_struct_stub(cx, struct_type, &struct_name, unique_type_id, Some(containing_scope));\n+    let struct_metadata_stub = create_struct_stub(\n+        cx,\n+        struct_type,\n+        &struct_name,\n+        unique_type_id,\n+        Some(containing_scope),\n+        DIFlags::FlagZero,\n+    );\n \n     create_and_register_recursive_type_forward_declaration(\n         cx,\n@@ -1185,6 +1207,7 @@ impl<'tcx> TupleMemberDescriptionFactory<'tcx> {\n                     align,\n                     flags: DIFlags::FlagZero,\n                     discriminant: None,\n+                    source_info: None,\n                 }\n             })\n             .collect()\n@@ -1201,8 +1224,14 @@ fn prepare_tuple_metadata(\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n     let tuple_name = compute_debuginfo_type_name(cx.tcx, tuple_type, false);\n \n-    let struct_stub =\n-        create_struct_stub(cx, tuple_type, &tuple_name[..], unique_type_id, containing_scope);\n+    let struct_stub = create_struct_stub(\n+        cx,\n+        tuple_type,\n+        &tuple_name[..],\n+        unique_type_id,\n+        containing_scope,\n+        DIFlags::FlagZero,\n+    );\n \n     create_and_register_recursive_type_forward_declaration(\n         cx,\n@@ -1244,6 +1273,7 @@ impl<'tcx> UnionMemberDescriptionFactory<'tcx> {\n                     align: field.align.abi,\n                     flags: DIFlags::FlagZero,\n                     discriminant: None,\n+                    source_info: None,\n                 }\n             })\n             .collect()\n@@ -1351,11 +1381,11 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n \n         let variant_info_for = |index: VariantIdx| match self.enum_type.kind {\n             ty::Adt(adt, _) => VariantInfo::Adt(&adt.variants[index]),\n-            ty::Generator(_, substs, _) => {\n+            ty::Generator(def_id, _, _) => {\n                 let (generator_layout, generator_saved_local_names) =\n                     generator_variant_info_data.as_ref().unwrap();\n                 VariantInfo::Generator {\n-                    substs,\n+                    def_id,\n                     generator_layout: *generator_layout,\n                     generator_saved_local_names,\n                     variant_index: index,\n@@ -1371,6 +1401,10 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n         } else {\n             type_metadata(cx, self.enum_type, self.span)\n         };\n+        let flags = match self.enum_type.kind {\n+            ty::Generator(..) => DIFlags::FlagArtificial,\n+            _ => DIFlags::FlagZero,\n+        };\n \n         match self.layout.variants {\n             Variants::Single { index } => {\n@@ -1404,8 +1438,9 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     offset: Size::ZERO,\n                     size: self.layout.size,\n                     align: self.layout.align.abi,\n-                    flags: DIFlags::FlagZero,\n+                    flags,\n                     discriminant: None,\n+                    source_info: variant_info.source_info(cx),\n                 }]\n             }\n             Variants::Multiple {\n@@ -1457,11 +1492,12 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             offset: Size::ZERO,\n                             size: self.layout.size,\n                             align: self.layout.align.abi,\n-                            flags: DIFlags::FlagZero,\n+                            flags,\n                             discriminant: Some(\n                                 self.layout.ty.discriminant_for_variant(cx.tcx, i).unwrap().val\n                                     as u64,\n                             ),\n+                            source_info: variant_info.source_info(cx),\n                         }\n                     })\n                     .collect()\n@@ -1527,7 +1563,8 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         self.layout.fields.offset(tag_field),\n                         self.layout.field(cx, tag_field).size,\n                     );\n-                    variant_info_for(*niche_variants.start()).map_struct_name(|variant_name| {\n+                    let variant_info = variant_info_for(*niche_variants.start());\n+                    variant_info.map_struct_name(|variant_name| {\n                         name.push_str(variant_name);\n                     });\n \n@@ -1538,8 +1575,9 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         offset: Size::ZERO,\n                         size: variant.size,\n                         align: variant.align.abi,\n-                        flags: DIFlags::FlagZero,\n+                        flags,\n                         discriminant: None,\n+                        source_info: variant_info.source_info(cx),\n                     }]\n                 } else {\n                     variants\n@@ -1587,8 +1625,9 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 offset: Size::ZERO,\n                                 size: self.layout.size,\n                                 align: self.layout.align.abi,\n-                                flags: DIFlags::FlagZero,\n+                                flags,\n                                 discriminant: niche_value,\n+                                source_info: variant_info.source_info(cx),\n                             }\n                         })\n                         .collect()\n@@ -1613,24 +1652,27 @@ impl VariantMemberDescriptionFactory<'ll, 'tcx> {\n             .iter()\n             .enumerate()\n             .map(|(i, &(ref name, ty))| {\n+                // Discriminant is always the first field of our variant\n+                // when using the enum fallback.\n+                let is_artificial_discr = use_enum_fallback(cx) && i == 0;\n                 let (size, align) = cx.size_and_align_of(ty);\n                 MemberDescription {\n                     name: name.to_string(),\n-                    type_metadata: if use_enum_fallback(cx) {\n-                        match self.tag_type_metadata {\n-                            // Discriminant is always the first field of our variant\n-                            // when using the enum fallback.\n-                            Some(metadata) if i == 0 => metadata,\n-                            _ => type_metadata(cx, ty, self.span),\n-                        }\n+                    type_metadata: if is_artificial_discr {\n+                        self.tag_type_metadata.unwrap_or_else(|| type_metadata(cx, ty, self.span))\n                     } else {\n                         type_metadata(cx, ty, self.span)\n                     },\n                     offset: self.offsets[i],\n                     size,\n                     align,\n-                    flags: DIFlags::FlagZero,\n+                    flags: if is_artificial_discr {\n+                        DIFlags::FlagArtificial\n+                    } else {\n+                        DIFlags::FlagZero\n+                    },\n                     discriminant: None,\n+                    source_info: None,\n                 }\n             })\n             .collect()\n@@ -1651,7 +1693,7 @@ enum EnumTagInfo<'ll> {\n enum VariantInfo<'a, 'tcx> {\n     Adt(&'tcx ty::VariantDef),\n     Generator {\n-        substs: SubstsRef<'tcx>,\n+        def_id: DefId,\n         generator_layout: &'tcx GeneratorLayout<'tcx>,\n         generator_saved_local_names: &'a IndexVec<mir::GeneratorSavedLocal, Option<Symbol>>,\n         variant_index: VariantIdx,\n@@ -1662,8 +1704,8 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n     fn map_struct_name<R>(&self, f: impl FnOnce(&str) -> R) -> R {\n         match self {\n             VariantInfo::Adt(variant) => f(&variant.ident.as_str()),\n-            VariantInfo::Generator { substs, variant_index, .. } => {\n-                f(&substs.as_generator().variant_name(*variant_index))\n+            VariantInfo::Generator { variant_index, .. } => {\n+                f(&GeneratorSubsts::variant_name(*variant_index))\n             }\n         }\n     }\n@@ -1699,6 +1741,32 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n         };\n         field_name.map(|name| name.to_string()).unwrap_or_else(|| format!(\"__{}\", i))\n     }\n+\n+    fn source_info(&self, cx: &CodegenCx<'ll, 'tcx>) -> Option<SourceInfo<'ll>> {\n+        match self {\n+            VariantInfo::Generator { def_id, variant_index, .. } => {\n+                let span =\n+                    cx.tcx.generator_layout(*def_id).variant_source_info[*variant_index].span;\n+                if !span.is_dummy() {\n+                    let loc = cx.lookup_debug_loc(span.lo());\n+                    return Some(SourceInfo {\n+                        file: file_metadata(cx, &loc.file, def_id.krate),\n+                        line: loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                    });\n+                }\n+            }\n+            _ => {}\n+        }\n+        None\n+    }\n+\n+    #[allow(dead_code)]\n+    fn is_artificial(&self) -> bool {\n+        match self {\n+            VariantInfo::Generator { .. } => true,\n+            VariantInfo::Adt(..) => false,\n+        }\n+    }\n }\n \n /// Returns a tuple of (1) `type_metadata_stub` of the variant, (2) a\n@@ -1718,7 +1786,15 @@ fn describe_enum_variant(\n             .type_map\n             .borrow_mut()\n             .get_unique_type_id_of_enum_variant(cx, layout.ty, &variant_name);\n-        create_struct_stub(cx, layout.ty, &variant_name, unique_type_id, Some(containing_scope))\n+        create_struct_stub(\n+            cx,\n+            layout.ty,\n+            &variant_name,\n+            unique_type_id,\n+            Some(containing_scope),\n+            // FIXME(tmandry): This doesn't seem to have any effect.\n+            if variant.is_artificial() { DIFlags::FlagArtificial } else { DIFlags::FlagZero },\n+        )\n     });\n \n     // Build an array of (field name, field type) pairs to be captured in the factory closure.\n@@ -1778,7 +1854,13 @@ fn prepare_enum_metadata(\n     span: Span,\n     outer_field_tys: Vec<Ty<'tcx>>,\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n-    let enum_name = compute_debuginfo_type_name(cx.tcx, enum_type, false);\n+    let tcx = cx.tcx;\n+    let enum_name = compute_debuginfo_type_name(tcx, enum_type, false);\n+    // FIXME(tmandry): This doesn't seem to have any effect.\n+    let enum_flags = match enum_type.kind {\n+        ty::Generator(..) => DIFlags::FlagArtificial,\n+        _ => DIFlags::FlagZero,\n+    };\n \n     let containing_scope = get_namespace_for_item(cx, enum_def_id);\n     // FIXME: This should emit actual file metadata for the enum, but we\n@@ -1792,7 +1874,7 @@ fn prepare_enum_metadata(\n     let discriminant_type_metadata = |discr: Primitive| {\n         let enumerators_metadata: Vec<_> = match enum_type.kind {\n             ty::Adt(def, _) => def\n-                .discriminants(cx.tcx)\n+                .discriminants(tcx)\n                 .zip(&def.variants)\n                 .map(|((_, discr), v)| {\n                     let name = v.ident.as_str();\n@@ -1815,15 +1897,16 @@ fn prepare_enum_metadata(\n                 .collect(),\n             ty::Generator(_, substs, _) => substs\n                 .as_generator()\n-                .variant_range(enum_def_id, cx.tcx)\n+                .variant_range(enum_def_id, tcx)\n                 .map(|variant_index| {\n-                    let name = substs.as_generator().variant_name(variant_index);\n+                    debug_assert_eq!(tcx.types.u32, substs.as_generator().discr_ty(tcx));\n+                    let name = GeneratorSubsts::variant_name(variant_index);\n                     unsafe {\n                         Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                             DIB(cx),\n                             name.as_ptr().cast(),\n                             name.len(),\n-                            // Generators use u32 as discriminant type.\n+                            // Generators use u32 as discriminant type, verified above.\n                             variant_index.as_u32().into(),\n                             true, // IsUnsigned\n                         ))\n@@ -1841,12 +1924,12 @@ fn prepare_enum_metadata(\n             None => {\n                 let (discriminant_size, discriminant_align) = (discr.size(cx), discr.align(cx));\n                 let discriminant_base_type_metadata =\n-                    type_metadata(cx, discr.to_ty(cx.tcx), rustc_span::DUMMY_SP);\n+                    type_metadata(cx, discr.to_ty(tcx), rustc_span::DUMMY_SP);\n \n                 let item_name;\n                 let discriminant_name = match enum_type.kind {\n                     ty::Adt(..) => {\n-                        item_name = cx.tcx.item_name(enum_def_id).as_str();\n+                        item_name = tcx.item_name(enum_def_id).as_str();\n                         &*item_name\n                     }\n                     ty::Generator(..) => enum_name.as_str(),\n@@ -1912,7 +1995,7 @@ fn prepare_enum_metadata(\n                     UNKNOWN_LINE_NUMBER,\n                     layout.size.bits(),\n                     layout.align.abi.bits() as u32,\n-                    DIFlags::FlagZero,\n+                    enum_flags,\n                     None,\n                     0, // RuntimeLang\n                     unique_type_id_str.as_ptr().cast(),\n@@ -2033,7 +2116,7 @@ fn prepare_enum_metadata(\n             UNKNOWN_LINE_NUMBER,\n             layout.size.bits(),\n             layout.align.abi.bits() as u32,\n-            DIFlags::FlagZero,\n+            enum_flags,\n             discriminator_metadata,\n             empty_array,\n             variant_part_unique_type_id_str.as_ptr().cast(),\n@@ -2059,7 +2142,7 @@ fn prepare_enum_metadata(\n                 UNKNOWN_LINE_NUMBER,\n                 layout.size.bits(),\n                 layout.align.abi.bits() as u32,\n-                DIFlags::FlagZero,\n+                enum_flags,\n                 None,\n                 type_array,\n                 0,\n@@ -2110,6 +2193,7 @@ fn composite_type_metadata(\n         composite_type_name,\n         composite_type_unique_id,\n         containing_scope,\n+        DIFlags::FlagZero,\n     );\n     // ... and immediately create and add the member descriptions.\n     set_members_of_composite_type(cx, composite_type, composite_type_metadata, member_descriptions);\n@@ -2211,6 +2295,7 @@ fn create_struct_stub(\n     struct_type_name: &str,\n     unique_type_id: UniqueTypeId,\n     containing_scope: Option<&'ll DIScope>,\n+    flags: DIFlags,\n ) -> &'ll DICompositeType {\n     let (struct_size, struct_align) = cx.size_and_align_of(struct_type);\n \n@@ -2232,7 +2317,7 @@ fn create_struct_stub(\n             UNKNOWN_LINE_NUMBER,\n             struct_size.bits(),\n             struct_align.bits() as u32,\n-            DIFlags::FlagZero,\n+            flags,\n             None,\n             empty_array,\n             0,"}, {"sha": "5a0da6be5980ed8d1192e63bf7eae7d189df5762", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -70,10 +70,10 @@ fn uncached_llvm_type<'a, 'tcx>(\n                     write!(&mut name, \"::{}\", def.variants[index].ident).unwrap();\n                 }\n             }\n-            if let (&ty::Generator(_, substs, _), &Variants::Single { index })\n+            if let (&ty::Generator(_, _, _), &Variants::Single { index })\n                  = (&layout.ty.kind, &layout.variants)\n             {\n-                write!(&mut name, \"::{}\", substs.as_generator().variant_name(index)).unwrap();\n+                write!(&mut name, \"::{}\", ty::GeneratorSubsts::variant_name(index)).unwrap();\n             }\n             Some(name)\n         }"}, {"sha": "cb8b30830c5dec905b7b672804bf1d6837a9b043", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -700,7 +700,7 @@ impl<T: Idx> GrowableBitSet<T> {\n ///\n /// All operations that involve a row and/or column index will panic if the\n /// index exceeds the relevant bound.\n-#[derive(Clone, Debug, Eq, PartialEq, RustcDecodable, RustcEncodable)]\n+#[derive(Clone, Eq, PartialEq, RustcDecodable, RustcEncodable)]\n pub struct BitMatrix<R: Idx, C: Idx> {\n     num_rows: usize,\n     num_columns: usize,\n@@ -876,6 +876,22 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n     }\n }\n \n+impl<R: Idx, C: Idx> fmt::Debug for BitMatrix<R, C> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        /// Forces its contents to print in regular mode instead of alternate mode.\n+        struct OneLinePrinter<T>(T);\n+        impl<T: fmt::Debug> fmt::Debug for OneLinePrinter<T> {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                write!(fmt, \"{:?}\", self.0)\n+            }\n+        }\n+\n+        write!(fmt, \"BitMatrix({}x{}) \", self.num_rows, self.num_columns)?;\n+        let items = self.rows().flat_map(|r| self.iter(r).map(move |c| (r, c)));\n+        fmt.debug_set().entries(items.map(OneLinePrinter)).finish()\n+    }\n+}\n+\n /// A fixed-column-size, variable-row-size 2D bit matrix with a moderately\n /// sparse representation.\n ///"}, {"sha": "9ad79230a4f6d73851be217cd7ac4f9d87f054ad", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -10,6 +10,8 @@ use rustc_index::vec::IndexVec;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::VariantIdx;\n use smallvec::SmallVec;\n+use std::cell::Cell;\n+use std::fmt::{self, Debug};\n \n use super::{Field, SourceInfo};\n \n@@ -58,7 +60,7 @@ rustc_index::newtype_index! {\n }\n \n /// The layout of generator state.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct GeneratorLayout<'tcx> {\n     /// The type of every local stored inside the generator.\n     pub field_tys: IndexVec<GeneratorSavedLocal, Ty<'tcx>>,\n@@ -67,12 +69,72 @@ pub struct GeneratorLayout<'tcx> {\n     /// be stored in multiple variants.\n     pub variant_fields: IndexVec<VariantIdx, IndexVec<Field, GeneratorSavedLocal>>,\n \n+    /// The source that led to each variant being created (usually, a yield or\n+    /// await).\n+    pub variant_source_info: IndexVec<VariantIdx, SourceInfo>,\n+\n     /// Which saved locals are storage-live at the same time. Locals that do not\n     /// have conflicts with each other are allowed to overlap in the computed\n     /// layout.\n     pub storage_conflicts: BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal>,\n }\n \n+impl Debug for GeneratorLayout<'_> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        /// Prints an iterator of (key, value) tuples as a map.\n+        struct MapPrinter<'a, K, V>(Cell<Option<Box<dyn Iterator<Item = (K, V)> + 'a>>>);\n+        impl<'a, K, V> MapPrinter<'a, K, V> {\n+            fn new(iter: impl Iterator<Item = (K, V)> + 'a) -> Self {\n+                Self(Cell::new(Some(Box::new(iter))))\n+            }\n+        }\n+        impl<'a, K: Debug, V: Debug> Debug for MapPrinter<'a, K, V> {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt.debug_map().entries(self.0.take().unwrap()).finish()\n+            }\n+        }\n+\n+        /// Prints the generator variant name.\n+        struct GenVariantPrinter(VariantIdx);\n+        impl From<VariantIdx> for GenVariantPrinter {\n+            fn from(idx: VariantIdx) -> Self {\n+                GenVariantPrinter(idx)\n+            }\n+        }\n+        impl Debug for GenVariantPrinter {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                let variant_name = ty::GeneratorSubsts::variant_name(self.0);\n+                if fmt.alternate() {\n+                    write!(fmt, \"{:9}({:?})\", variant_name, self.0)\n+                } else {\n+                    write!(fmt, \"{}\", variant_name)\n+                }\n+            }\n+        }\n+\n+        /// Forces its contents to print in regular mode instead of alternate mode.\n+        struct OneLinePrinter<T>(T);\n+        impl<T: Debug> Debug for OneLinePrinter<T> {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                write!(fmt, \"{:?}\", self.0)\n+            }\n+        }\n+\n+        fmt.debug_struct(\"GeneratorLayout\")\n+            .field(\"field_tys\", &MapPrinter::new(self.field_tys.iter_enumerated()))\n+            .field(\n+                \"variant_fields\",\n+                &MapPrinter::new(\n+                    self.variant_fields\n+                        .iter_enumerated()\n+                        .map(|(k, v)| (GenVariantPrinter(k), OneLinePrinter(v))),\n+                ),\n+            )\n+            .field(\"storage_conflicts\", &self.storage_conflicts)\n+            .finish()\n+    }\n+}\n+\n #[derive(Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct BorrowCheckResult<'tcx> {\n     /// All the opaque types that are restricted to concrete types"}, {"sha": "8f86d2ef522d33a82b4fed5511578e03799a289a", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -522,8 +522,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n \n     /// Calls `f` with a reference to the name of the enumerator for the given\n     /// variant `v`.\n-    #[inline]\n-    pub fn variant_name(self, v: VariantIdx) -> Cow<'static, str> {\n+    pub fn variant_name(v: VariantIdx) -> Cow<'static, str> {\n         match v.as_usize() {\n             Self::UNRESUMED => Cow::from(Self::UNRESUMED_NAME),\n             Self::RETURNED => Cow::from(Self::RETURNED_NAME),"}, {"sha": "523d3c9af3f68c0dfde4f15e4272545618479c9d", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -422,6 +422,9 @@ struct LivenessInfo {\n     /// The set of saved locals live at each suspension point.\n     live_locals_at_suspension_points: Vec<BitSet<GeneratorSavedLocal>>,\n \n+    /// Parallel vec to the above with SourceInfo for each yield terminator.\n+    source_info_at_suspension_points: Vec<SourceInfo>,\n+\n     /// For every saved local, the set of other saved locals that are\n     /// storage-live at the same time as this local. We cannot overlap locals in\n     /// the layout which have conflicting storage.\n@@ -473,6 +476,7 @@ fn locals_live_across_suspend_points(\n \n     let mut storage_liveness_map = IndexVec::from_elem(None, body.basic_blocks());\n     let mut live_locals_at_suspension_points = Vec::new();\n+    let mut source_info_at_suspension_points = Vec::new();\n     let mut live_locals_at_any_suspension_point = BitSet::new_empty(body.local_decls.len());\n \n     for (block, data) in body.basic_blocks().iter_enumerated() {\n@@ -518,6 +522,7 @@ fn locals_live_across_suspend_points(\n             live_locals_at_any_suspension_point.union(&live_locals);\n \n             live_locals_at_suspension_points.push(live_locals);\n+            source_info_at_suspension_points.push(data.terminator().source_info);\n         }\n     }\n \n@@ -541,6 +546,7 @@ fn locals_live_across_suspend_points(\n     LivenessInfo {\n         saved_locals,\n         live_locals_at_suspension_points,\n+        source_info_at_suspension_points,\n         storage_conflicts,\n         storage_liveness: storage_liveness_map,\n     }\n@@ -754,6 +760,7 @@ fn compute_layout<'tcx>(\n     let LivenessInfo {\n         saved_locals,\n         live_locals_at_suspension_points,\n+        source_info_at_suspension_points,\n         storage_conflicts,\n         storage_liveness,\n     } = liveness;\n@@ -768,7 +775,18 @@ fn compute_layout<'tcx>(\n     }\n \n     // Leave empty variants for the UNRESUMED, RETURNED, and POISONED states.\n+    // In debuginfo, these will correspond to the beginning (UNRESUMED) or end\n+    // (RETURNED, POISONED) of the function.\n     const RESERVED_VARIANTS: usize = 3;\n+    let body_span = body.source_scopes[OUTERMOST_SOURCE_SCOPE].span;\n+    let mut variant_source_info: IndexVec<VariantIdx, SourceInfo> = [\n+        SourceInfo::outermost(body_span.shrink_to_lo()),\n+        SourceInfo::outermost(body_span.shrink_to_hi()),\n+        SourceInfo::outermost(body_span.shrink_to_hi()),\n+    ]\n+    .iter()\n+    .copied()\n+    .collect();\n \n     // Build the generator variant field list.\n     // Create a map from local indices to generator struct indices.\n@@ -787,11 +805,13 @@ fn compute_layout<'tcx>(\n             remap.entry(locals[saved_local]).or_insert((tys[saved_local], variant_index, idx));\n         }\n         variant_fields.push(fields);\n+        variant_source_info.push(source_info_at_suspension_points[suspension_point_idx]);\n     }\n     debug!(\"generator variant_fields = {:?}\", variant_fields);\n     debug!(\"generator storage_conflicts = {:#?}\", storage_conflicts);\n \n-    let layout = GeneratorLayout { field_tys: tys, variant_fields, storage_conflicts };\n+    let layout =\n+        GeneratorLayout { field_tys: tys, variant_fields, variant_source_info, storage_conflicts };\n \n     (remap, layout, storage_liveness)\n }"}, {"sha": "db45481e4fd259acbd6114f6fb9768aba7727d7f", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -131,7 +131,7 @@ fn dump_matched_mir_node<'tcx, F>(\n         }\n         writeln!(file, \" {} {}\", disambiguator, pass_name)?;\n         if let Some(ref layout) = body.generator_layout {\n-            writeln!(file, \"// generator_layout = {:?}\", layout)?;\n+            writeln!(file, \"/* generator_layout = {:#?} */\", layout)?;\n         }\n         writeln!(file)?;\n         extra_data(PassWhere::BeforeCFG, &mut file)?;"}, {"sha": "4e145b81ecbf73c5ad8bbf33a66064ee328ed034", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -0,0 +1,48 @@\n+// Verify debuginfo for generators:\n+//  - Each variant points to the file and line of its yield point\n+//  - The generator types and variants are marked artificial\n+//  - Captured vars from the source are not marked artificial\n+//\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2 --edition=2018\n+// only-msvc\n+\n+async fn foo() {}\n+async fn async_fn_test() {\n+    foo().await;\n+    let s = String::from(\"foo\");\n+    foo().await;\n+}\n+\n+// FIXME: No way to reliably check the filename.\n+\n+// CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// For brevity, we only check the struct name and members of the last variant.\n+// CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 12,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[ASYNC_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+\n+fn main() {\n+    let _dummy = async_fn_test();\n+}"}, {"sha": "8fa4be1ae86d8dc81850ea3ee2853150ca12b0be", "filename": "src/test/codegen/async-fn-debug.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -0,0 +1,51 @@\n+// Verify debuginfo for async fn:\n+//  - Each variant points to the file and line of its yield point\n+//  - The generator types and variants are marked artificial\n+//  - Captured vars from the source are not marked artificial\n+//\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2 --edition=2018\n+// ignore-msvc\n+\n+async fn foo() {}\n+async fn async_fn_test() {\n+    foo().await;\n+    let s = String::from(\"foo\");\n+    foo().await;\n+}\n+\n+// FIXME: No way to reliably check the filename.\n+\n+// CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[ASYNC_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 12,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+// CHECK:      [[DISC]] = !DIDerivedType(tag: DW_TAG_member, name: \"__state\", scope: [[ASYNC_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+\n+fn main() {\n+    let _dummy = async_fn_test();\n+}"}, {"sha": "82a1568ea95849deb6cb1958c3d72e42f74223af", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -0,0 +1,52 @@\n+// Verify debuginfo for generators:\n+//  - Each variant points to the file and line of its yield point\n+//  - The generator types and variants are marked artificial\n+//  - Captured vars from the source are not marked artificial\n+//\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2\n+// only-msvc\n+\n+#![feature(generators, generator_trait)]\n+use std::ops::Generator;\n+\n+fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n+    || {\n+        yield 0;\n+        let s = String::from(\"foo\");\n+        yield 1;\n+    }\n+}\n+\n+// FIXME: No way to reliably check the filename.\n+\n+// CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// For brevity, we only check the struct name and members of the last variant.\n+// CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 18,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 18,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 17,\n+// CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+\n+fn main() {\n+    let _dummy = generator_test();\n+}"}, {"sha": "5c7c64148189a7ffa1f53f19463ed561d34524eb", "filename": "src/test/codegen/generator-debug.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -0,0 +1,55 @@\n+// Verify debuginfo for generators:\n+//  - Each variant points to the file and line of its yield point\n+//  - The generator types and variants are marked artificial\n+//  - Captured vars from the source are not marked artificial\n+//\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2 --edition=2018\n+// ignore-msvc\n+\n+#![feature(generators, generator_trait)]\n+use std::ops::Generator;\n+\n+fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n+    || {\n+        yield 0;\n+        let s = String::from(\"foo\");\n+        yield 1;\n+    }\n+}\n+\n+// FIXME: No way to reliably check the filename.\n+\n+// CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[GEN_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[GEN_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 18,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 18,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 17,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+// CHECK:      [[DISC]] = !DIDerivedType(tag: DW_TAG_member, name: \"__state\", scope: [[GEN_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+\n+fn main() {\n+    let _dummy = generator_test();\n+}"}, {"sha": "3c77995eea8931f5040eab4e5a14b575609c56d1", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -1,5 +1,18 @@\n // MIR for `main::{{closure}}#0` 0 generator_drop\n-// generator_layout = GeneratorLayout { field_tys: [std::string::String], variant_fields: [[], [], [], [_0]], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n+/* generator_layout = GeneratorLayout {\n+    field_tys: {\n+        _0: std::string::String,\n+    },\n+    variant_fields: {\n+        Unresumed(0): [],\n+        Returned (1): [],\n+        Panicked (2): [],\n+        Suspend0 (3): [_0],\n+    },\n+    storage_conflicts: BitMatrix(1x1) {\n+        (_0, _0),\n+    },\n+} */\n \n fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 13:6 {std::string::String, ()}]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6"}, {"sha": "bd6db11a7e73e2e84213c422507d88d8d7b23d10", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3f5b8c800e546809b374aecad992689712ab00d6/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=3f5b8c800e546809b374aecad992689712ab00d6", "patch": "@@ -1,5 +1,18 @@\n // MIR for `main::{{closure}}#0` 0 generator_resume\n-// generator_layout = GeneratorLayout { field_tys: [HasDrop], variant_fields: [[], [], [], [_0]], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n+/* generator_layout = GeneratorLayout {\n+    field_tys: {\n+        _0: HasDrop,\n+    },\n+    variant_fields: {\n+        Unresumed(0): [],\n+        Returned (1): [],\n+        Panicked (2): [],\n+        Suspend0 (3): [_0],\n+    },\n+    storage_conflicts: BitMatrix(1x1) {\n+        (_0, _0),\n+    },\n+} */\n \n fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]>, _2: u8) -> std::ops::GeneratorState<(), ()> {\n     debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19"}]}