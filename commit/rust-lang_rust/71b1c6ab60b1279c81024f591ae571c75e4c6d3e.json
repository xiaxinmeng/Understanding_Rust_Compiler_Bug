{"sha": "71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYjFjNmFiNjBiMTI3OWM4MTAyNGY1OTFhZTU3MWM3NWU0YzZkM2U=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-29T15:01:25Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-29T15:20:04Z"}, "message": "Warning cleanup", "tree": {"sha": "3ac4db6b1cb4843bfdfa43999fae5655015f6ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac4db6b1cb4843bfdfa43999fae5655015f6ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "html_url": "https://github.com/rust-lang/rust/commit/71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95d22a3c814ce050c55d94f5eb1651bea26a1a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95d22a3c814ce050c55d94f5eb1651bea26a1a4b", "html_url": "https://github.com/rust-lang/rust/commit/95d22a3c814ce050c55d94f5eb1651bea26a1a4b"}], "stats": {"total": 43, "additions": 11, "deletions": 32}, "files": [{"sha": "521187ca351748af7e955239a94b5acf5ad51b2e", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -862,7 +862,7 @@ impl BitvSet {\n \n #[cfg(test)]\n mod tests {\n-    use std::test::BenchHarness;\n+    use extra::test::BenchHarness;\n \n     use bitv::*;\n     use bitv;"}, {"sha": "6074b2b5f5476e0f1b4f8681a9e47ee4479075e9", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -255,7 +255,7 @@ mod tests {\n     use super::*;\n     use std::cmp::Eq;\n     use std::kinds::Copy;\n-    use core;\n+    use std::int;\n \n     #[test]\n     fn test_simple() {\n@@ -462,12 +462,12 @@ mod tests {\n     #[test]\n     fn test_iter() {\n         let mut d = Deque::new();\n-        for std::int::range(0,5) |i| {\n+        for int::range(0,5) |i| {\n             d.add_back(i);\n         }\n         assert_eq!(d.iter().collect::<~[&int]>(), ~[&0,&1,&2,&3,&4]);\n \n-        for std::int::range(6,9) |i| {\n+        for int::range(6,9) |i| {\n             d.add_front(i);\n         }\n         assert_eq!(d.iter().collect::<~[&int]>(), ~[&8,&7,&6,&0,&1,&2,&3,&4]);\n@@ -476,12 +476,12 @@ mod tests {\n     #[test]\n     fn test_rev_iter() {\n         let mut d = Deque::new();\n-        for std::int::range(0,5) |i| {\n+        for int::range(0,5) |i| {\n             d.add_back(i);\n         }\n         assert_eq!(d.rev_iter().collect::<~[&int]>(), ~[&4,&3,&2,&1,&0]);\n \n-        for std::int::range(6,9) |i| {\n+        for int::range(6,9) |i| {\n             d.add_front(i);\n         }\n         assert_eq!(d.rev_iter().collect::<~[&int]>(), ~[&4,&3,&2,&1,&0,&6,&7,&8]);"}, {"sha": "210921aa3d7624211b228ff3d03e3916e8c7b6cb", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -1362,7 +1362,7 @@ mod tests {\n     use std::io;\n     use std::result;\n \n-    use std::serialize::Decodable;\n+    use extra::serialize::Decodable;\n \n     #[deriving(Eq, Encodable, Decodable)]\n     enum Animal {"}, {"sha": "eeb22fa7ba9def878d785b9ec2c02b3594747e3e", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -538,7 +538,7 @@ impl<'self> EachItemContext<'self> {\n \n     fn each_item_of_module(&mut self, def_id: ast::def_id) -> bool {\n         // This item might not be in this crate. If it's not, look it up.\n-        let (cdata, items) = if def_id.crate == self.cdata.cnum {\n+        let (_cdata, items) = if def_id.crate == self.cdata.cnum {\n             let items = reader::get_doc(reader::Doc(self.cdata.data),\n                                         tag_items);\n             (self.cdata, items)"}, {"sha": "1a34d0c3d8c8506cb88a3c0eef332ed2ae59d165", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -151,7 +151,6 @@ fn encode_trait_ref(ebml_w: &mut writer::Encoder,\n                     ecx: &EncodeContext,\n                     trait_ref: &ty::TraitRef,\n                     tag: uint) {\n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n@@ -179,7 +178,6 @@ fn encode_ty_type_param_defs(ebml_w: &mut writer::Encoder,\n                              ecx: &EncodeContext,\n                              params: @~[ty::TypeParameterDef],\n                              tag: uint) {\n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n@@ -212,7 +210,6 @@ fn encode_variant_id(ebml_w: &mut writer::Encoder, vid: def_id) {\n pub fn write_type(ecx: &EncodeContext,\n                   ebml_w: &mut writer::Encoder,\n                   typ: ty::t) {\n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n@@ -225,7 +222,6 @@ pub fn write_type(ecx: &EncodeContext,\n pub fn write_vstore(ecx: &EncodeContext,\n                     ebml_w: &mut writer::Encoder,\n                     vstore: ty::vstore) {\n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n@@ -258,7 +254,6 @@ fn encode_method_fty(ecx: &EncodeContext,\n                      typ: &ty::BareFnTy) {\n     ebml_w.start_tag(tag_item_method_fty);\n \n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,"}, {"sha": "97bad93dc358a639abdbf24479cf50bcff2ce886", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -17,17 +17,14 @@\n \n use std::iterator::IteratorUtil;\n \n-use middle::resolve;\n use middle::ty;\n use middle::typeck;\n \n use std::hashmap::HashSet;\n use syntax::ast::*;\n-use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::def_id_of_def;\n use syntax::attr;\n-use syntax::codemap;\n use syntax::parse::token;\n use syntax::visit::Visitor;\n use syntax::visit;"}, {"sha": "06147894d44624b43e5656198d5369ab4fa6d667", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -1307,7 +1307,7 @@ impl Resolver {\n                 visit_item(item, (parent, visitor));\n             }\n \n-            item_impl(_, Some(_), ty, ref methods) => {\n+            item_impl(_, Some(_), _ty, ref _methods) => {\n                 visit_item(item, (parent, visitor));\n             }\n "}, {"sha": "ee89f229f2bb7d5cdb16ace73b34d711fb510e8b", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n /*!\n- * \n  * Handles translation of callees as well as other call-related\n  * things.  Callees are a superset of normal rust values and sometimes\n  * have different representations.  In particular, top-level fn items"}, {"sha": "3eac0f8b0983b0a1b52e0e049b27720ac0ef5dfb", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -909,8 +909,6 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n         let (bcx, base, len) =\n             base_datum.get_vec_base_and_len(bcx, index_expr.span,\n                                             index_expr.id, 0);\n-        let mut bcx = bcx;\n-        let mut base = base;\n         let mut len = len;\n \n         if ty::type_is_str(base_ty) {"}, {"sha": "8748d3dcd23be76cefbf11375c408814bf32e0ae", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -36,7 +36,7 @@ use middle::typeck::infer::combine::Combine;\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::{new_infer_ctxt, resolve_ivar};\n use middle::typeck::infer::{resolve_nested_tvar, resolve_type};\n-use syntax::ast::{crate, def_id, def_mod, def_struct, def_ty};\n+use syntax::ast::{crate, def_id, def_struct, def_ty};\n use syntax::ast::{item, item_enum, item_impl, item_mod, item_struct};\n use syntax::ast::{local_crate, method, trait_ref, ty_path};\n use syntax::ast;"}, {"sha": "adc263cbc4d8b248cd155539eb2eec6c681ed2d4", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -63,7 +63,7 @@ use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n-use middle::typeck::infer::unify::{InferCtxtMethods, UnifyInferCtxtMethods};\n+use middle::typeck::infer::unify::{InferCtxtMethods};\n use middle::typeck::infer::{InferCtxt, cres, ures};\n use util::common::indent;\n "}, {"sha": "80344a9894fb144a5a614faf57df0a47cbbfdb63", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -31,8 +31,6 @@ use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n \n-use std::vec;\n-\n /// Produces a string suitable for debugging output.\n pub trait Repr {\n     fn repr(&self, tcx: ctxt) -> ~str;"}, {"sha": "12e32731fcc3108c57ef2e7d536405aa86cce3a9", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b1c6ab60b1279c81024f591ae571c75e4c6d3e/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "patch": "@@ -8,17 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n-use codemap::{BytePos, spanned};\n-use parse::lexer::reader;\n-use parse::parser::Parser;\n-use parse::token::keywords;\n use parse::token;\n use parse::token::{get_ident_interner};\n \n-use opt_vec;\n-use opt_vec::OptVec;\n-\n // SeqSep : a sequence separator (token)\n // and whether a trailing separator is allowed.\n pub struct SeqSep {"}]}