{"sha": "f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Yzk0MDdhOGY2NzU2ZTRlZjliOWRkYzZmOGUxOGY2ZTNmYTUyYWU=", "commit": {"author": {"name": "Manas", "email": "manas18244@iiitd.ac.in", "date": "2021-07-08T12:39:41Z"}, "committer": {"name": "Manas", "email": "manas18244@iiitd.ac.in", "date": "2021-07-08T12:57:54Z"}, "message": "This patch shortens the spawned threads' names, as threads on Linux\nhave an upper limit of 16 characters for their names.", "tree": {"sha": "e3f46ee26845d245f2d5600905ca67367fa2407a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3f46ee26845d245f2d5600905ca67367fa2407a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae", "html_url": "https://github.com/rust-lang/rust/commit/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae/comments", "author": {"login": "weirdsmiley", "id": 41788201, "node_id": "MDQ6VXNlcjQxNzg4MjAx", "avatar_url": "https://avatars.githubusercontent.com/u/41788201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weirdsmiley", "html_url": "https://github.com/weirdsmiley", "followers_url": "https://api.github.com/users/weirdsmiley/followers", "following_url": "https://api.github.com/users/weirdsmiley/following{/other_user}", "gists_url": "https://api.github.com/users/weirdsmiley/gists{/gist_id}", "starred_url": "https://api.github.com/users/weirdsmiley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weirdsmiley/subscriptions", "organizations_url": "https://api.github.com/users/weirdsmiley/orgs", "repos_url": "https://api.github.com/users/weirdsmiley/repos", "events_url": "https://api.github.com/users/weirdsmiley/events{/privacy}", "received_events_url": "https://api.github.com/users/weirdsmiley/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weirdsmiley", "id": 41788201, "node_id": "MDQ6VXNlcjQxNzg4MjAx", "avatar_url": "https://avatars.githubusercontent.com/u/41788201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weirdsmiley", "html_url": "https://github.com/weirdsmiley", "followers_url": "https://api.github.com/users/weirdsmiley/followers", "following_url": "https://api.github.com/users/weirdsmiley/following{/other_user}", "gists_url": "https://api.github.com/users/weirdsmiley/gists{/gist_id}", "starred_url": "https://api.github.com/users/weirdsmiley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weirdsmiley/subscriptions", "organizations_url": "https://api.github.com/users/weirdsmiley/orgs", "repos_url": "https://api.github.com/users/weirdsmiley/repos", "events_url": "https://api.github.com/users/weirdsmiley/events{/privacy}", "received_events_url": "https://api.github.com/users/weirdsmiley/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e44c56b61656b2eed55a5b9180febd74b3333c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/e44c56b61656b2eed55a5b9180febd74b3333c72", "html_url": "https://github.com/rust-lang/rust/commit/e44c56b61656b2eed55a5b9180febd74b3333c72"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "3f98f14592ca7a8900ad44f2935784b06f530d7b", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae", "patch": "@@ -68,7 +68,7 @@ impl FlycheckHandle {\n         let actor = FlycheckActor::new(id, sender, config, workspace_root);\n         let (sender, receiver) = unbounded::<Restart>();\n         let thread = jod_thread::Builder::new()\n-            .name(\"FlycheckThread\".to_owned())\n+            .name(\"Flycheck\".to_owned())\n             .spawn(move || actor.run(receiver))\n             .expect(\"failed to spawn thread\");\n         FlycheckHandle { sender, thread }\n@@ -270,7 +270,7 @@ impl CargoHandle {\n         let (sender, receiver) = unbounded();\n         let actor = CargoActor::new(child_stdout, sender);\n         let thread = jod_thread::Builder::new()\n-            .name(\"CargoHandleThread\".to_owned())\n+            .name(\"CargoHandle\".to_owned())\n             .spawn(move || actor.run())\n             .expect(\"failed to spawn thread\");\n         CargoHandle { child, thread, receiver }"}, {"sha": "91d6a3811be22f59cb8ee90ad75527cb4037bad7", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae", "patch": "@@ -38,7 +38,7 @@ impl ProcMacroProcessSrv {\n \n         let (task_tx, task_rx) = bounded(0);\n         let handle = jod_thread::Builder::new()\n-            .name(\"ProcMacroClientThread\".to_owned())\n+            .name(\"ProcMacroClient\".to_owned())\n             .spawn(move || {\n                 client_loop(task_rx, process);\n             })"}, {"sha": "731d302196f31b117d7f76d45690f183457ed188", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs?ref=f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae", "patch": "@@ -182,7 +182,7 @@ impl ExecutionStrategy for CrossThread1 {\n         let (res_tx, res_rx) = channel();\n \n         let join_handle = thread::Builder::new()\n-            .name(\"DispatchThread\".to_owned())\n+            .name(\"Dispatch\".to_owned())\n             .spawn(move || {\n                 let mut dispatch = |b| {\n                     req_tx.send(b).unwrap();\n@@ -231,7 +231,7 @@ impl ExecutionStrategy for CrossThread2 {\n         let server_thread = thread::current();\n         let state2 = state.clone();\n         let join_handle = thread::Builder::new()\n-            .name(\"ServerThread\".to_owned())\n+            .name(\"ProcMacroServer\".to_owned())\n             .spawn(move || {\n                 let mut dispatch = |b| {\n                     *state2.lock().unwrap() = State::Req(b);"}, {"sha": "7815556f5a162c6f2d68ccf830464f3c981402fc", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=f5c9407a8f6756e4ef9b9ddc6f8e18f6e3fa52ae", "patch": "@@ -32,7 +32,7 @@ impl loader::Handle for NotifyHandle {\n         let actor = NotifyActor::new(sender);\n         let (sender, receiver) = unbounded::<Message>();\n         let thread = jod_thread::Builder::new()\n-            .name(\"LoaderThread\".to_owned())\n+            .name(\"VfsLoader\".to_owned())\n             .spawn(move || actor.run(receiver))\n             .expect(\"failed to spawn thread\");\n         NotifyHandle { sender, thread }"}]}