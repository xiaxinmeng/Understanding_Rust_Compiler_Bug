{"sha": "7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMTQwNzcyMWMyY2Q5ZTcwMGUyZjI3ZDEyY2ZhYTk4ZTBlMzA3MjA=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-19T18:12:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T18:12:22Z"}, "message": "Rollup merge of #75649 - jyn514:inherent-lang-impls, r=guillaumegomez\n\nFix intra-doc links for inherent impls that are both lang items and not the default impl\n\nI found in https://github.com/rust-lang/rust/pull/75464#issuecomment-675125984 that `str::to_uppercase()` doesn't resolve while `str::trim()` does. The only real difference is that `to_uppercase` is defined in `alloc`, while trim is defined in `core`. It turns out that rustdoc was ignoring `lang_items.str_alloc_impl()` - it saw them in `collect_trait_impls`, but not for intra-doc links.\n\nThis uses the same `impls` for all parts of rustdoc, so that there can be no more inconsistency. It does have the slight downside that the matches are no longer exhaustive but it will be very clear if a new lang item is missed because it will panic when you try to document it (and if you don't document it, does rustdoc really need to know about it?).\n\n~~This needs a test case (probably just `str::to_uppercase`).~~ Added.\n\nThis is best reviewed commit-by-commit.\n\nr? @GuillaumeGomez", "tree": {"sha": "c86c09ad6b636a372975e7beffb1cdd4bf2c2268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c86c09ad6b636a372975e7beffb1cdd4bf2c2268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPWuGCRBK7hj4Ov3rIwAAdHIIACSF9xcwzH+29JvKuBhpArZS\n0AtbriHJCJkZCfgvdtceunvw1P2ckvmbvRir5dSJxnaFEgoD/lJOXfC+OwEmiSVZ\n90zSTi1CxTcsChWWV3Emv0V3YACIENi6WWNV3l69B+suImCEN5lIVZEmgzQznPGz\nYC/tVX/e9ZQH4XIm5fjdXFmUEbw/2Dgjg9cyoWD23mPqFh8E9TzdWbDVRtCvqS3i\nMcs+tZJJUZ8TaPosAZv66BgY+cCp/yADRYct6QOn8cy33BOc986Cr91xRjCyoumT\nymt26kD6FQSC5HQGJD9Ew08MfeWJoHfG+3ROaKKEtzsM78K6p5jLRLH/tHXpkhU=\n=1S14\n-----END PGP SIGNATURE-----\n", "payload": "tree c86c09ad6b636a372975e7beffb1cdd4bf2c2268\nparent 4123237fa16776b9806c2f7da721e8adc50ce43d\nparent aff01f8de915d201b588a0dcff502f7adde7194d\nauthor Tyler Mandry <tmandry@gmail.com> 1597860742 -0700\ncommitter GitHub <noreply@github.com> 1597860742 -0700\n\nRollup merge of #75649 - jyn514:inherent-lang-impls, r=guillaumegomez\n\nFix intra-doc links for inherent impls that are both lang items and not the default impl\n\nI found in https://github.com/rust-lang/rust/pull/75464#issuecomment-675125984 that `str::to_uppercase()` doesn't resolve while `str::trim()` does. The only real difference is that `to_uppercase` is defined in `alloc`, while trim is defined in `core`. It turns out that rustdoc was ignoring `lang_items.str_alloc_impl()` - it saw them in `collect_trait_impls`, but not for intra-doc links.\n\nThis uses the same `impls` for all parts of rustdoc, so that there can be no more inconsistency. It does have the slight downside that the matches are no longer exhaustive but it will be very clear if a new lang item is missed because it will panic when you try to document it (and if you don't document it, does rustdoc really need to know about it?).\n\n~~This needs a test case (probably just `str::to_uppercase`).~~ Added.\n\nThis is best reviewed commit-by-commit.\n\nr? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "html_url": "https://github.com/rust-lang/rust/commit/7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4123237fa16776b9806c2f7da721e8adc50ce43d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4123237fa16776b9806c2f7da721e8adc50ce43d", "html_url": "https://github.com/rust-lang/rust/commit/4123237fa16776b9806c2f7da721e8adc50ce43d"}, {"sha": "aff01f8de915d201b588a0dcff502f7adde7194d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff01f8de915d201b588a0dcff502f7adde7194d", "html_url": "https://github.com/rust-lang/rust/commit/aff01f8de915d201b588a0dcff502f7adde7194d"}], "stats": {"total": 240, "additions": 143, "deletions": 97}, "files": [{"sha": "f8fa2971b49d8fced1cebb6e8c0042c6fdba29fa", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "patch": "@@ -4106,6 +4106,7 @@ dependencies = [\n  \"rustc-rayon\",\n  \"serde\",\n  \"serde_json\",\n+ \"smallvec 1.4.2\",\n  \"tempfile\",\n ]\n "}, {"sha": "1354ef5cbdeb4982aef4b7ca5fc222f3e29c5d13", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "patch": "@@ -14,5 +14,6 @@ minifier = \"0.0.33\"\n rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n+smallvec = \"1.0\"\n tempfile = \"3\"\n itertools = \"0.8\""}, {"sha": "3eac5bbda007898b9c5f31a3df2e2ba0037d2049", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "patch": "@@ -3,6 +3,7 @@ use std::default::Default;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n+use std::lazy::SyncOnceCell as OnceCell;\n use std::num::NonZeroU32;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -19,12 +20,14 @@ use rustc_hir::lang_items;\n use rustc_hir::Mutability;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::stability;\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, FileName};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n+use smallvec::{smallvec, SmallVec};\n \n use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n@@ -1264,6 +1267,86 @@ impl PrimitiveType {\n         }\n     }\n \n+    pub fn impls(&self, tcx: TyCtxt<'_>) -> &'static SmallVec<[DefId; 4]> {\n+        Self::all_impls(tcx).get(self).expect(\"missing impl for primitive type\")\n+    }\n+\n+    pub fn all_impls(tcx: TyCtxt<'_>) -> &'static FxHashMap<PrimitiveType, SmallVec<[DefId; 4]>> {\n+        static CELL: OnceCell<FxHashMap<PrimitiveType, SmallVec<[DefId; 4]>>> = OnceCell::new();\n+\n+        CELL.get_or_init(move || {\n+            use self::PrimitiveType::*;\n+\n+            /// A macro to create a FxHashMap.\n+            ///\n+            /// Example:\n+            ///\n+            /// ```\n+            /// let letters = map!{\"a\" => \"b\", \"c\" => \"d\"};\n+            /// ```\n+            ///\n+            /// Trailing commas are allowed.\n+            /// Commas between elements are required (even if the expression is a block).\n+            macro_rules! map {\n+                ($( $key: expr => $val: expr ),* $(,)*) => {{\n+                    let mut map = ::rustc_data_structures::fx::FxHashMap::default();\n+                    $( map.insert($key, $val); )*\n+                    map\n+                }}\n+            }\n+\n+            let single = |a: Option<DefId>| a.into_iter().collect();\n+            let both = |a: Option<DefId>, b: Option<DefId>| -> SmallVec<_> {\n+                a.into_iter().chain(b).collect()\n+            };\n+\n+            let lang_items = tcx.lang_items();\n+            map! {\n+                Isize => single(lang_items.isize_impl()),\n+                I8 => single(lang_items.i8_impl()),\n+                I16 => single(lang_items.i16_impl()),\n+                I32 => single(lang_items.i32_impl()),\n+                I64 => single(lang_items.i64_impl()),\n+                I128 => single(lang_items.i128_impl()),\n+                Usize => single(lang_items.usize_impl()),\n+                U8 => single(lang_items.u8_impl()),\n+                U16 => single(lang_items.u16_impl()),\n+                U32 => single(lang_items.u32_impl()),\n+                U64 => single(lang_items.u64_impl()),\n+                U128 => single(lang_items.u128_impl()),\n+                F32 => both(lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n+                F64 => both(lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n+                Char => single(lang_items.char_impl()),\n+                Bool => single(lang_items.bool_impl()),\n+                Str => both(lang_items.str_impl(), lang_items.str_alloc_impl()),\n+                Slice => {\n+                    lang_items\n+                        .slice_impl()\n+                        .into_iter()\n+                        .chain(lang_items.slice_u8_impl())\n+                        .chain(lang_items.slice_alloc_impl())\n+                        .chain(lang_items.slice_u8_alloc_impl())\n+                        .collect()\n+                },\n+                Array => single(lang_items.array_impl()),\n+                Tuple => smallvec![],\n+                Unit => smallvec![],\n+                RawPointer => {\n+                    lang_items\n+                        .const_ptr_impl()\n+                        .into_iter()\n+                        .chain(lang_items.mut_ptr_impl())\n+                        .chain(lang_items.const_slice_ptr_impl())\n+                        .chain(lang_items.mut_slice_ptr_impl())\n+                        .collect()\n+                },\n+                Reference => smallvec![],\n+                Fn => smallvec![],\n+                Never => smallvec![],\n+            }\n+        })\n+    }\n+\n     pub fn to_url_str(&self) -> &'static str {\n         self.as_str()\n     }"}, {"sha": "75fdcd5ec1c9c75d395f7e0e5d0381dc82acd6e6", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "patch": "@@ -351,7 +351,6 @@ pub fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n }\n \n pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n-    use self::PrimitiveType::*;\n     let tcx = cx.tcx;\n \n     for item in items {\n@@ -370,34 +369,7 @@ pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut V\n                 None => continue,\n             },\n         };\n-        let did = match primitive {\n-            Isize => tcx.lang_items().isize_impl(),\n-            I8 => tcx.lang_items().i8_impl(),\n-            I16 => tcx.lang_items().i16_impl(),\n-            I32 => tcx.lang_items().i32_impl(),\n-            I64 => tcx.lang_items().i64_impl(),\n-            I128 => tcx.lang_items().i128_impl(),\n-            Usize => tcx.lang_items().usize_impl(),\n-            U8 => tcx.lang_items().u8_impl(),\n-            U16 => tcx.lang_items().u16_impl(),\n-            U32 => tcx.lang_items().u32_impl(),\n-            U64 => tcx.lang_items().u64_impl(),\n-            U128 => tcx.lang_items().u128_impl(),\n-            F32 => tcx.lang_items().f32_impl(),\n-            F64 => tcx.lang_items().f64_impl(),\n-            Char => tcx.lang_items().char_impl(),\n-            Bool => tcx.lang_items().bool_impl(),\n-            Str => tcx.lang_items().str_impl(),\n-            Slice => tcx.lang_items().slice_impl(),\n-            Array => tcx.lang_items().array_impl(),\n-            Tuple => None,\n-            Unit => None,\n-            RawPointer => tcx.lang_items().const_ptr_impl(),\n-            Reference => None,\n-            Fn => None,\n-            Never => None,\n-        };\n-        if let Some(did) = did {\n+        for &did in primitive.impls(tcx) {\n             if !did.is_local() {\n                 inline::build_impl(cx, did, None, ret);\n             }"}, {"sha": "3dfa7b529e34cc42e084af05fe31f2e8294e5b87", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "patch": "@@ -12,6 +12,7 @@\n #![feature(ptr_offset_from)]\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]\n+#![feature(once_cell)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "97b9fcce05b362e72d2ddd06926a5151256cea00", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "patch": "@@ -16,6 +16,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::Ident;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n+use smallvec::SmallVec;\n \n use std::cell::Cell;\n use std::ops::Range;\n@@ -270,18 +271,26 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 .ok_or(ErrorKind::ResolutionFailure)?;\n \n             if let Some((path, prim)) = is_primitive(&path, TypeNS) {\n-                let did = primitive_impl(cx, &path).ok_or(ErrorKind::ResolutionFailure)?;\n-                return cx\n-                    .tcx\n-                    .associated_items(did)\n-                    .filter_by_name_unhygienic(item_name)\n-                    .next()\n-                    .and_then(|item| match item.kind {\n-                        ty::AssocKind::Fn => Some(\"method\"),\n-                        _ => None,\n-                    })\n-                    .map(|out| (prim, Some(format!(\"{}#{}.{}\", path, out, item_name))))\n-                    .ok_or(ErrorKind::ResolutionFailure);\n+                for &impl_ in primitive_impl(cx, &path).ok_or(ErrorKind::ResolutionFailure)? {\n+                    let link = cx\n+                        .tcx\n+                        .associated_items(impl_)\n+                        .find_by_name_and_namespace(\n+                            cx.tcx,\n+                            Ident::with_dummy_span(item_name),\n+                            ns,\n+                            impl_,\n+                        )\n+                        .and_then(|item| match item.kind {\n+                            ty::AssocKind::Fn => Some(\"method\"),\n+                            _ => None,\n+                        })\n+                        .map(|out| (prim, Some(format!(\"{}#{}.{}\", path, out, item_name))));\n+                    if let Some(link) = link {\n+                        return Ok(link);\n+                    }\n+                }\n+                return Err(ErrorKind::ResolutionFailure);\n             }\n \n             let (_, ty_res) = cx\n@@ -1238,26 +1247,6 @@ fn is_primitive(path_str: &str, ns: Namespace) -> Option<(&'static str, Res)> {\n     }\n }\n \n-fn primitive_impl(cx: &DocContext<'_>, path_str: &str) -> Option<DefId> {\n-    let tcx = cx.tcx;\n-    match path_str {\n-        \"u8\" => tcx.lang_items().u8_impl(),\n-        \"u16\" => tcx.lang_items().u16_impl(),\n-        \"u32\" => tcx.lang_items().u32_impl(),\n-        \"u64\" => tcx.lang_items().u64_impl(),\n-        \"u128\" => tcx.lang_items().u128_impl(),\n-        \"usize\" => tcx.lang_items().usize_impl(),\n-        \"i8\" => tcx.lang_items().i8_impl(),\n-        \"i16\" => tcx.lang_items().i16_impl(),\n-        \"i32\" => tcx.lang_items().i32_impl(),\n-        \"i64\" => tcx.lang_items().i64_impl(),\n-        \"i128\" => tcx.lang_items().i128_impl(),\n-        \"isize\" => tcx.lang_items().isize_impl(),\n-        \"f32\" => tcx.lang_items().f32_impl(),\n-        \"f64\" => tcx.lang_items().f64_impl(),\n-        \"str\" => tcx.lang_items().str_impl(),\n-        \"bool\" => tcx.lang_items().bool_impl(),\n-        \"char\" => tcx.lang_items().char_impl(),\n-        _ => None,\n-    }\n+fn primitive_impl(cx: &DocContext<'_>, path_str: &str) -> Option<&'static SmallVec<[DefId; 4]>> {\n+    Some(PrimitiveType::from_symbol(Symbol::intern(path_str))?.impls(cx.tcx))\n }"}, {"sha": "24baff46dcfa5404d33ceea58e156f042083a163", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "patch": "@@ -34,40 +34,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     }\n \n     // Also try to inline primitive impls from other crates.\n-    let lang_items = cx.tcx.lang_items();\n-    let primitive_impls = [\n-        lang_items.isize_impl(),\n-        lang_items.i8_impl(),\n-        lang_items.i16_impl(),\n-        lang_items.i32_impl(),\n-        lang_items.i64_impl(),\n-        lang_items.i128_impl(),\n-        lang_items.usize_impl(),\n-        lang_items.u8_impl(),\n-        lang_items.u16_impl(),\n-        lang_items.u32_impl(),\n-        lang_items.u64_impl(),\n-        lang_items.u128_impl(),\n-        lang_items.f32_impl(),\n-        lang_items.f64_impl(),\n-        lang_items.f32_runtime_impl(),\n-        lang_items.f64_runtime_impl(),\n-        lang_items.bool_impl(),\n-        lang_items.char_impl(),\n-        lang_items.str_impl(),\n-        lang_items.array_impl(),\n-        lang_items.slice_impl(),\n-        lang_items.slice_u8_impl(),\n-        lang_items.str_alloc_impl(),\n-        lang_items.slice_alloc_impl(),\n-        lang_items.slice_u8_alloc_impl(),\n-        lang_items.const_ptr_impl(),\n-        lang_items.mut_ptr_impl(),\n-        lang_items.const_slice_ptr_impl(),\n-        lang_items.mut_slice_ptr_impl(),\n-    ];\n-\n-    for def_id in primitive_impls.iter().filter_map(|&def_id| def_id) {\n+    for &def_id in PrimitiveType::all_impls(cx.tcx).values().flatten() {\n         if !def_id.is_local() {\n             inline::build_impl(cx, def_id, None, &mut new_items);\n "}, {"sha": "160b18a967b201167553f912eae22fc99593c3b7", "filename": "src/test/rustdoc/intra-link-primitive-non-default-impl.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Ftest%2Frustdoc%2Fintra-link-primitive-non-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1407721c2cd9e700e2f27d12cfaa98e0e30720/src%2Ftest%2Frustdoc%2Fintra-link-primitive-non-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-primitive-non-default-impl.rs?ref=7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "patch": "@@ -0,0 +1,32 @@\n+#![deny(broken_intra_doc_links)]\n+\n+// ignore-tidy-linelength\n+\n+// @has intra_link_primitive_non_default_impl/fn.str_methods.html\n+/// [`str::trim`]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim\"]' 'str::trim'\n+/// [`str::to_lowercase`]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_lowercase\"]' 'str::to_lowercase'\n+/// [`str::into_boxed_bytes`]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.into_boxed_bytes\"]' 'str::into_boxed_bytes'\n+/// [`str::replace`]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.replace\"]' 'str::replace'\n+pub fn str_methods() {}\n+\n+// @has intra_link_primitive_non_default_impl/fn.f32_methods.html\n+/// [f32::powi]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.powi\"]' 'f32::powi'\n+/// [f32::sqrt]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.sqrt\"]' 'f32::sqrt'\n+/// [f32::mul_add]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.mul_add\"]' 'f32::mul_add'\n+pub fn f32_methods() {}\n+\n+// @has intra_link_primitive_non_default_impl/fn.f64_methods.html\n+/// [`f64::powi`]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html#method.powi\"]' 'f64::powi'\n+/// [`f64::sqrt`]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html#method.sqrt\"]' 'f64::sqrt'\n+/// [`f64::mul_add`]\n+// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html#method.mul_add\"]' 'f64::mul_add'\n+pub fn f64_methods() {}"}]}