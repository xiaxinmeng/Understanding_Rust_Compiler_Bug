{"sha": "d983f18df7dd484ec43510111169180d7abe038d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ODNmMThkZjdkZDQ4NGVjNDM1MTAxMTExNjkxODBkN2FiZTAzOGQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-14T18:04:52Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-14T18:04:57Z"}, "message": "Add mark tests to qualify_path assist", "tree": {"sha": "67b603ec7e748699737624405656b457f2c4e307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b603ec7e748699737624405656b457f2c4e307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d983f18df7dd484ec43510111169180d7abe038d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d983f18df7dd484ec43510111169180d7abe038d", "html_url": "https://github.com/rust-lang/rust/commit/d983f18df7dd484ec43510111169180d7abe038d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d983f18df7dd484ec43510111169180d7abe038d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f41f074be3a600a40b398dd3f4e57a0d69db256", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f41f074be3a600a40b398dd3f4e57a0d69db256", "html_url": "https://github.com/rust-lang/rust/commit/9f41f074be3a600a40b398dd3f4e57a0d69db256"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "bbbf47beffc31e72fd7a0a562edc564352409231", "filename": "crates/assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d983f18df7dd484ec43510111169180d7abe038d/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d983f18df7dd484ec43510111169180d7abe038d/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=d983f18df7dd484ec43510111169180d7abe038d", "patch": "@@ -1,6 +1,7 @@\n use std::collections::BTreeSet;\n \n use syntax::{ast, AstNode, TextRange};\n+use test_utils::mark;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n@@ -89,6 +90,7 @@ fn qualify_path_qualifier_start(\n     segment: ast::PathSegment,\n     qualifier_start: &str,\n ) {\n+    mark::hit!(qualify_path_qualifier_start);\n     let group_label = GroupLabel(format!(\"Qualify {}\", qualifier_start));\n     for import in proposed_imports {\n         acc.add_group(\n@@ -111,6 +113,7 @@ fn qualify_path_unqualified_name(\n     range: TextRange,\n     name: &str,\n ) {\n+    mark::hit!(qualify_path_unqualified_name);\n     let group_label = GroupLabel(format!(\"Qualify {}\", name));\n     for import in proposed_imports {\n         acc.add_group(\n@@ -132,6 +135,7 @@ fn qualify_path_trait_assoc_item(\n     segment: ast::PathSegment,\n     trait_assoc_item_name: &str,\n ) {\n+    mark::hit!(qualify_path_trait_assoc_item);\n     let group_label = GroupLabel(format!(\"Qualify {}\", trait_assoc_item_name));\n     for import in proposed_imports {\n         acc.add_group(\n@@ -156,6 +160,7 @@ fn qualify_path_trait_method(\n     name_ref: ast::NameRef,\n     trait_method_name: &str,\n ) {\n+    mark::hit!(qualify_path_trait_method);\n     let group_label = GroupLabel(format!(\"Qualify {}\", trait_method_name));\n     for import in proposed_imports {\n         acc.add_group(\n@@ -178,6 +183,7 @@ mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n     #[test]\n     fn applicable_when_found_an_import_partial() {\n+        mark::check!(qualify_path_unqualified_name);\n         check_assist(\n             qualify_path,\n             r\"\n@@ -469,6 +475,7 @@ fn main() {\n \n     #[test]\n     fn associated_struct_const() {\n+        mark::check!(qualify_path_qualifier_start);\n         check_assist(\n             qualify_path,\n             r\"\n@@ -569,6 +576,7 @@ fn main() {\n \n     #[test]\n     fn associated_trait_const() {\n+        mark::check!(qualify_path_trait_assoc_item);\n         check_assist(\n             qualify_path,\n             r\"\n@@ -638,6 +646,7 @@ fn main() {\n \n     #[test]\n     fn trait_method() {\n+        mark::check!(qualify_path_trait_method);\n         check_assist(\n             qualify_path,\n             r\""}]}