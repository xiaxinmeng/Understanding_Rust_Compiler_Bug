{"sha": "34b98b306ad23ab895f701de1d009ff026a1d2b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0Yjk4YjMwNmFkMjNhYjg5NWY3MDFkZTFkMDA5ZmYwMjZhMWQyYjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-26T17:44:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-27T00:49:36Z"}, "message": "rollup merge of #19287: alexcrichton/issue-19272\n\nAt the same time remove the `pub use` of the variants in favor of accessing\nthrough the enum type itself. This is a breaking change as the `Found` and\n`NotFound` variants must now be imported through `BinarySearchResult` instead of\njust `std::slice`.\n\n[breaking-change]\nCloses #19271", "tree": {"sha": "444a666722fa16d289f0ef1fa9f5f13e2205baed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/444a666722fa16d289f0ef1fa9f5f13e2205baed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34b98b306ad23ab895f701de1d009ff026a1d2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34b98b306ad23ab895f701de1d009ff026a1d2b1", "html_url": "https://github.com/rust-lang/rust/commit/34b98b306ad23ab895f701de1d009ff026a1d2b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34b98b306ad23ab895f701de1d009ff026a1d2b1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60299d75e2ad7e4de6482bfc50f7b5f471c1f55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/60299d75e2ad7e4de6482bfc50f7b5f471c1f55c", "html_url": "https://github.com/rust-lang/rust/commit/60299d75e2ad7e4de6482bfc50f7b5f471c1f55c"}, {"sha": "36372b929e9d44c7421827b160505854ceeb9a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/36372b929e9d44c7421827b160505854ceeb9a83", "html_url": "https://github.com/rust-lang/rust/commit/36372b929e9d44c7421827b160505854ceeb9a83"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "6c13abdaf892f52fd2460fdcf57c94dd93b096d5", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34b98b306ad23ab895f701de1d009ff026a1d2b1/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b98b306ad23ab895f701de1d009ff026a1d2b1/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=34b98b306ad23ab895f701de1d009ff026a1d2b1", "patch": "@@ -106,7 +106,7 @@ pub use core::slice::{OrdSlicePrelude, SlicePrelude, Items, MutItems};\n pub use core::slice::{ImmutableIntSlice, MutableIntSlice};\n pub use core::slice::{MutSplits, MutChunks, Splits};\n pub use core::slice::{bytes, mut_ref_slice, ref_slice, CloneSlicePrelude};\n-pub use core::slice::{Found, NotFound, from_raw_buf, from_raw_mut_buf};\n+pub use core::slice::{from_raw_buf, from_raw_mut_buf, BinarySearchResult};\n \n // Functional utilities\n "}, {"sha": "35fbde5838c5c9ff5db48917efcfd2e6557661bc", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34b98b306ad23ab895f701de1d009ff026a1d2b1/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b98b306ad23ab895f701de1d009ff026a1d2b1/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=34b98b306ad23ab895f701de1d009ff026a1d2b1", "patch": "@@ -34,8 +34,6 @@\n // * The `raw` and `bytes` submodules.\n // * Boilerplate trait implementations.\n \n-pub use self::BinarySearchResult::*;\n-\n use mem::transmute;\n use clone::Clone;\n use cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering, Less, Equal, Greater, Equiv};\n@@ -219,7 +217,7 @@ pub trait SlicePrelude<T> for Sized? {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n-    /// use std::slice::{Found, NotFound};\n+    /// use std::slice::BinarySearchResult::{Found, NotFound};\n     /// let s = [0i, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n@@ -548,7 +546,7 @@ impl<T> SlicePrelude<T> for [T] {\n         while lim != 0 {\n             let ix = base + (lim >> 1);\n             match f(&self[ix]) {\n-                Equal => return Found(ix),\n+                Equal => return BinarySearchResult::Found(ix),\n                 Less => {\n                     base = ix + 1;\n                     lim -= 1;\n@@ -557,7 +555,7 @@ impl<T> SlicePrelude<T> for [T] {\n             }\n             lim >>= 1;\n         }\n-        return NotFound(base);\n+        return BinarySearchResult::NotFound(base);\n     }\n \n     #[inline]\n@@ -838,7 +836,7 @@ pub trait OrdSlicePrelude<T: Ord> for Sized? {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n-    /// use std::slice::{Found, NotFound};\n+    /// use std::slice::BinarySearchResult::{Found, NotFound};\n     /// let s = [0i, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n@@ -1613,17 +1611,17 @@ impl BinarySearchResult {\n     /// Similar to `Result::ok`.\n     pub fn found(&self) -> Option<uint> {\n         match *self {\n-            Found(i) => Some(i),\n-            NotFound(_) => None\n+            BinarySearchResult::Found(i) => Some(i),\n+            BinarySearchResult::NotFound(_) => None\n         }\n     }\n \n     /// Convert a `Found` to `None`, `NotFound` to `Some`.\n     /// Similar to `Result::err`.\n     pub fn not_found(&self) -> Option<uint> {\n         match *self {\n-            Found(_) => None,\n-            NotFound(i) => Some(i)\n+            BinarySearchResult::Found(_) => None,\n+            BinarySearchResult::NotFound(i) => Some(i)\n         }\n     }\n }"}, {"sha": "2bf3fa992cd669c847c27de3d838ae4e2c93d466", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34b98b306ad23ab895f701de1d009ff026a1d2b1/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b98b306ad23ab895f701de1d009ff026a1d2b1/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=34b98b306ad23ab895f701de1d009ff026a1d2b1", "patch": "@@ -18,7 +18,7 @@ use std::cmp;\n use std::fmt;\n use std::iter;\n use std::num;\n-use std::slice;\n+use std::slice::BinarySearchResult;\n \n /// Static data containing Unicode ranges for general categories and scripts.\n use unicode::regex::{UNICODE_CLASSES, PERLD, PERLS, PERLW};\n@@ -1027,8 +1027,8 @@ fn is_valid_cap(c: char) -> bool {\n \n fn find_class(classes: NamedClasses, name: &str) -> Option<Vec<(char, char)>> {\n     match classes.binary_search(|&(s, _)| s.cmp(name)) {\n-        slice::Found(i) => Some(classes[i].val1().to_vec()),\n-        slice::NotFound(_) => None,\n+        BinarySearchResult::Found(i) => Some(classes[i].val1().to_vec()),\n+        BinarySearchResult::NotFound(_) => None,\n     }\n }\n "}]}