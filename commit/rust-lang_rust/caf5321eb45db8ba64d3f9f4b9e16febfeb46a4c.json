{"sha": "caf5321eb45db8ba64d3f9f4b9e16febfeb46a4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZjUzMjFlYjQ1ZGI4YmE2NGQzZjlmNGI5ZTE2ZmViZmViNDZhNGM=", "commit": {"author": {"name": "Aaron Laursen", "email": "aaronlaursen@gmail.com", "date": "2013-08-30T22:45:20Z"}, "committer": {"name": "aaronlaursen", "email": "aaronlaursen@gmail.com", "date": "2013-09-06T18:00:34Z"}, "message": "fix for issue #7588, overflow now handled correctly", "tree": {"sha": "af81a2b9d507109f11e4cf5c52519914f9081ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af81a2b9d507109f11e4cf5c52519914f9081ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caf5321eb45db8ba64d3f9f4b9e16febfeb46a4c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caf5321eb45db8ba64d3f9f4b9e16febfeb46a4c", "html_url": "https://github.com/rust-lang/rust/commit/caf5321eb45db8ba64d3f9f4b9e16febfeb46a4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caf5321eb45db8ba64d3f9f4b9e16febfeb46a4c/comments", "author": {"login": "aaronlaursen", "id": 2373133, "node_id": "MDQ6VXNlcjIzNzMxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2373133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronlaursen", "html_url": "https://github.com/aaronlaursen", "followers_url": "https://api.github.com/users/aaronlaursen/followers", "following_url": "https://api.github.com/users/aaronlaursen/following{/other_user}", "gists_url": "https://api.github.com/users/aaronlaursen/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronlaursen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronlaursen/subscriptions", "organizations_url": "https://api.github.com/users/aaronlaursen/orgs", "repos_url": "https://api.github.com/users/aaronlaursen/repos", "events_url": "https://api.github.com/users/aaronlaursen/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronlaursen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aaronlaursen", "id": 2373133, "node_id": "MDQ6VXNlcjIzNzMxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2373133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronlaursen", "html_url": "https://github.com/aaronlaursen", "followers_url": "https://api.github.com/users/aaronlaursen/followers", "following_url": "https://api.github.com/users/aaronlaursen/following{/other_user}", "gists_url": "https://api.github.com/users/aaronlaursen/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronlaursen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronlaursen/subscriptions", "organizations_url": "https://api.github.com/users/aaronlaursen/orgs", "repos_url": "https://api.github.com/users/aaronlaursen/repos", "events_url": "https://api.github.com/users/aaronlaursen/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronlaursen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116c034791e094840bc7bccee48113426665bc9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/116c034791e094840bc7bccee48113426665bc9f", "html_url": "https://github.com/rust-lang/rust/commit/116c034791e094840bc7bccee48113426665bc9f"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "fe93f20e109ef4913badcfd3f16367e3e31ea754", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/caf5321eb45db8ba64d3f9f4b9e16febfeb46a4c/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf5321eb45db8ba64d3f9f4b9e16febfeb46a4c/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=caf5321eb45db8ba64d3f9f4b9e16febfeb46a4c", "patch": "@@ -552,8 +552,18 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Div<T,T>+\n                 // Detect overflow by comparing to last value, except\n                 // if we've not seen any non-zero digits.\n                 if last_accum != _0 {\n-                    if accum_positive && accum <= last_accum { return None; }\n-                    if !accum_positive && accum >= last_accum { return None; }\n+                    if accum_positive && accum <= last_accum { return NumStrConv::inf(); }\n+                    if !accum_positive && accum >= last_accum { return NumStrConv::neg_inf(); }\n+\n+                    // Detect overflow by reversing the shift-and-add proccess\n+                    if accum_positive &&\n+                        (last_accum != ((accum - cast(digit as int))/radix_gen.clone())) {\n+                        return NumStrConv::inf();\n+                    }\n+                    if !accum_positive &&\n+                        (last_accum != ((accum + cast(digit as int))/radix_gen.clone())) {\n+                        return NumStrConv::neg_inf();\n+                    }\n                 }\n                 last_accum = accum.clone();\n             }\n@@ -597,8 +607,8 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Div<T,T>+\n                     }\n \n                     // Detect overflow by comparing to last value\n-                    if accum_positive && accum < last_accum { return None; }\n-                    if !accum_positive && accum > last_accum { return None; }\n+                    if accum_positive && accum < last_accum { return NumStrConv::inf(); }\n+                    if !accum_positive && accum > last_accum { return NumStrConv::neg_inf(); }\n                     last_accum = accum.clone();\n                 }\n                 None => match c {\n@@ -702,6 +712,23 @@ mod test {\n                                              ExpNone, false, false);\n         assert_eq!(n, None);\n     }\n+\n+    #[test]\n+    fn from_str_issue7588() {\n+        let u : Option<u8> = from_str_common(\"1000\", 10, false, false, false,\n+                                            ExpNone, false, false);\n+        assert_eq!(u, None);\n+        let s : Option<i16> = from_str_common(\"80000\", 10, false, false, false,\n+                                             ExpNone, false, false);\n+        assert_eq!(s, None);\n+        let f : Option<f32> = from_str_common(\n+            \"10000000000000000000000000000000000000000\", 10, false, false, false,\n+            ExpNone, false, false);\n+        assert_eq!(f, NumStrConv::inf())\n+        let fe : Option<f32> = from_str_common(\"1e40\", 10, false, false, false,\n+                                            ExpDec, false, false);\n+        assert_eq!(fe, NumStrConv::inf())\n+    }\n }\n \n #[cfg(test)]"}]}