{"sha": "ef8921add611999a624018a30af4c243d7f48ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmODkyMWFkZDYxMTk5OWE2MjQwMThhMzBhZjRjMjQzZDdmNDhlZDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-16T22:37:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-12-19T16:46:03Z"}, "message": "add concept of `Step::noop()`", "tree": {"sha": "1f4facf55619acb2c050948f9c85848fbe4ddb2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f4facf55619acb2c050948f9c85848fbe4ddb2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef8921add611999a624018a30af4c243d7f48ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8921add611999a624018a30af4c243d7f48ed1", "html_url": "https://github.com/rust-lang/rust/commit/ef8921add611999a624018a30af4c243d7f48ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef8921add611999a624018a30af4c243d7f48ed1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70415bd716cdbfaa7d7e849cb1d3b09254a7dcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70415bd716cdbfaa7d7e849cb1d3b09254a7dcb", "html_url": "https://github.com/rust-lang/rust/commit/e70415bd716cdbfaa7d7e849cb1d3b09254a7dcb"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "95882cf8126cbf7af675dcd45d92550361c63102", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ef8921add611999a624018a30af4c243d7f48ed1/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8921add611999a624018a30af4c243d7f48ed1/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=ef8921add611999a624018a30af4c243d7f48ed1", "patch": "@@ -86,7 +86,7 @@ pub fn build_rules(build: &Build) -> Rules {\n     //\n     // To handle this we do a bit of dynamic dispatch to see what the dependency\n     // is. If we're building a LLVM for the build triple, then we don't actually\n-    // have any dependencies! To do that we return a dependency on the \"dummy\"\n+    // have any dependencies! To do that we return a dependency on the `Step::noop()`\n     // target which does nothing.\n     //\n     // If we're build a cross-compiled LLVM, however, we need to assemble the\n@@ -104,7 +104,7 @@ pub fn build_rules(build: &Build) -> Rules {\n          .host(true)\n          .dep(move |s| {\n              if s.target == build.config.build {\n-                 dummy(s, build)\n+                 Step::noop()\n              } else {\n                  s.target(&build.config.build)\n              }\n@@ -115,14 +115,11 @@ pub fn build_rules(build: &Build) -> Rules {\n     // going on here. You can check out the API docs below and also see a bunch\n     // more examples of rules directly below as well.\n \n-    // dummy rule to do nothing, useful when a dep maps to no deps\n-    rules.build(\"dummy\", \"path/to/nowhere\");\n-\n     // the compiler with no target libraries ready to go\n     rules.build(\"rustc\", \"src/rustc\")\n          .dep(move |s| {\n              if s.stage == 0 {\n-                 dummy(s, build)\n+                 Step::noop()\n              } else {\n                  s.name(\"librustc\")\n                   .host(&build.config.build)\n@@ -165,7 +162,7 @@ pub fn build_rules(build: &Build) -> Rules {\n              .dep(move |s| s.name(\"rustc\").host(&build.config.build).target(s.host))\n              .dep(move |s| {\n                  if s.host == build.config.build {\n-                    dummy(s, build)\n+                     Step::noop()\n                  } else {\n                     s.host(&build.config.build)\n                  }\n@@ -183,7 +180,7 @@ pub fn build_rules(build: &Build) -> Rules {\n              .dep(|s| s.name(\"libstd\"))\n              .dep(move |s| {\n                  if s.host == build.config.build {\n-                    dummy(s, build)\n+                    Step::noop()\n                  } else {\n                     s.host(&build.config.build)\n                  }\n@@ -203,7 +200,7 @@ pub fn build_rules(build: &Build) -> Rules {\n              .dep(move |s| s.name(\"llvm\").host(&build.config.build).stage(0))\n              .dep(move |s| {\n                  if s.host == build.config.build {\n-                    dummy(s, build)\n+                    Step::noop()\n                  } else {\n                     s.host(&build.config.build)\n                  }\n@@ -233,7 +230,7 @@ pub fn build_rules(build: &Build) -> Rules {\n                      if s.target.contains(\"android\") {\n                          s.name(\"android-copy-libs\")\n                      } else {\n-                         dummy(s, build)\n+                         Step::noop()\n                      }\n                  })\n                  .default(true)\n@@ -514,12 +511,6 @@ pub fn build_rules(build: &Build) -> Rules {\n \n     rules.verify();\n     return rules;\n-\n-    fn dummy<'a>(s: &Step<'a>, build: &'a Build) -> Step<'a> {\n-        s.name(\"dummy\").stage(0)\n-         .target(&build.config.build)\n-         .host(&build.config.build)\n-    }\n }\n \n #[derive(PartialEq, Eq, Hash, Clone, Debug)]\n@@ -543,6 +534,10 @@ struct Step<'a> {\n }\n \n impl<'a> Step<'a> {\n+    fn noop() -> Step<'a> {\n+        Step { name: \"\", stage: 0, host: \"\", target: \"\" }\n+    }\n+\n     /// Creates a new step which is the same as this, except has a new name.\n     fn name(&self, name: &'a str) -> Step<'a> {\n         Step { name: name, ..*self }\n@@ -738,6 +733,9 @@ impl<'a> Rules<'a> {\n                 if self.rules.contains_key(&dep.name) || dep.name.starts_with(\"default:\") {\n                     continue\n                 }\n+                if dep == Step::noop() {\n+                    continue\n+                }\n                 panic!(\"\\\n \n invalid rule dependency graph detected, was a rule added and maybe typo'd?\n@@ -864,6 +862,7 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         // of what we need to do.\n         let mut order = Vec::new();\n         let mut added = HashSet::new();\n+        added.insert(Step::noop());\n         for step in steps.iter().cloned() {\n             self.fill(step, &mut order, &mut added);\n         }"}]}