{"sha": "365d918b31421c13fcbdd19b387b592b404e1282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NWQ5MThiMzE0MjFjMTNmY2JkZDE5YjM4N2I1OTJiNDA0ZTEyODI=", "commit": {"author": {"name": "Sayan Nandan", "email": "17377258+sntdevco@users.noreply.github.com", "date": "2019-03-12T04:38:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-12T04:38:57Z"}, "message": "Replace assert with assert_eq for better debugging", "tree": {"sha": "c8145517d16ba9c2d9a6fe0a6641e65e051c6c0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8145517d16ba9c2d9a6fe0a6641e65e051c6c0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/365d918b31421c13fcbdd19b387b592b404e1282", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJchzfhCRBK7hj4Ov3rIwAAdHIIALMJEpGqVCmkHhCjx3GDJ/Ao\niU1/qQ2CGc+KNE9Dzz77WwVoAhCARvyu8pJc4Rhlcg9xq7GttN8mOMZEk8/vMA8u\n5KSL5NEZMTMyhNtZQ9/dz61IIQzfqRdsAmMIfKYM5UKMCyQcY6gHyQCnpUd2fCcE\nJCA8E0xrJcq8R10EcIzuuSjt8HP/4qID23W/a7RUVdEGoBX3I7Wa1eFBySk55hEd\nA8J2JGD8XhK1W5zPsxkIGvs98SgM/EI0WDrDrJ+OIX6XeEYS1FypL5FJBDg2J+BW\n4kiQ2v74i2uoXf9YUbaMZWCu40iB3GTUBvBjH6MqardxwhPXDuUIwYVfCdjIbtA=\n=aqbj\n-----END PGP SIGNATURE-----\n", "payload": "tree c8145517d16ba9c2d9a6fe0a6641e65e051c6c0d\nparent 7486b9c208f7e1c4aa1e36961927327bd793e952\nauthor Sayan Nandan <17377258+sntdevco@users.noreply.github.com> 1552365537 +0530\ncommitter GitHub <noreply@github.com> 1552365537 +0530\n\nReplace assert with assert_eq for better debugging"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/365d918b31421c13fcbdd19b387b592b404e1282", "html_url": "https://github.com/rust-lang/rust/commit/365d918b31421c13fcbdd19b387b592b404e1282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/365d918b31421c13fcbdd19b387b592b404e1282/comments", "author": {"login": "ohsayan", "id": 17377258, "node_id": "MDQ6VXNlcjE3Mzc3MjU4", "avatar_url": "https://avatars.githubusercontent.com/u/17377258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohsayan", "html_url": "https://github.com/ohsayan", "followers_url": "https://api.github.com/users/ohsayan/followers", "following_url": "https://api.github.com/users/ohsayan/following{/other_user}", "gists_url": "https://api.github.com/users/ohsayan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohsayan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohsayan/subscriptions", "organizations_url": "https://api.github.com/users/ohsayan/orgs", "repos_url": "https://api.github.com/users/ohsayan/repos", "events_url": "https://api.github.com/users/ohsayan/events{/privacy}", "received_events_url": "https://api.github.com/users/ohsayan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7486b9c208f7e1c4aa1e36961927327bd793e952", "url": "https://api.github.com/repos/rust-lang/rust/commits/7486b9c208f7e1c4aa1e36961927327bd793e952", "html_url": "https://github.com/rust-lang/rust/commit/7486b9c208f7e1c4aa1e36961927327bd793e952"}], "stats": {"total": 236, "additions": 118, "deletions": 118}, "files": [{"sha": "10fcf8b76ccb4bd7c8e47a8d842bcd03feecc678", "filename": "src/libcore/tests/fmt/num.rs", "status": "modified", "additions": 118, "deletions": 118, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/365d918b31421c13fcbdd19b387b592b404e1282/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365d918b31421c13fcbdd19b387b592b404e1282/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs?ref=365d918b31421c13fcbdd19b387b592b404e1282", "patch": "@@ -3,146 +3,146 @@ fn test_format_int() {\n     // Formatting integers should select the right implementation based off\n     // the type of the argument. Also, hex/octal/binary should be defined\n     // for integers, but they shouldn't emit the negative sign.\n-    assert!(format!(\"{}\", 1isize) == \"1\");\n-    assert!(format!(\"{}\", 1i8) == \"1\");\n-    assert!(format!(\"{}\", 1i16) == \"1\");\n-    assert!(format!(\"{}\", 1i32) == \"1\");\n-    assert!(format!(\"{}\", 1i64) == \"1\");\n-    assert!(format!(\"{}\", -1isize) == \"-1\");\n-    assert!(format!(\"{}\", -1i8) == \"-1\");\n-    assert!(format!(\"{}\", -1i16) == \"-1\");\n-    assert!(format!(\"{}\", -1i32) == \"-1\");\n-    assert!(format!(\"{}\", -1i64) == \"-1\");\n-    assert!(format!(\"{:?}\", 1isize) == \"1\");\n-    assert!(format!(\"{:?}\", 1i8) == \"1\");\n-    assert!(format!(\"{:?}\", 1i16) == \"1\");\n-    assert!(format!(\"{:?}\", 1i32) == \"1\");\n-    assert!(format!(\"{:?}\", 1i64) == \"1\");\n-    assert!(format!(\"{:b}\", 1isize) == \"1\");\n-    assert!(format!(\"{:b}\", 1i8) == \"1\");\n-    assert!(format!(\"{:b}\", 1i16) == \"1\");\n-    assert!(format!(\"{:b}\", 1i32) == \"1\");\n-    assert!(format!(\"{:b}\", 1i64) == \"1\");\n-    assert!(format!(\"{:x}\", 1isize) == \"1\");\n-    assert!(format!(\"{:x}\", 1i8) == \"1\");\n-    assert!(format!(\"{:x}\", 1i16) == \"1\");\n-    assert!(format!(\"{:x}\", 1i32) == \"1\");\n-    assert!(format!(\"{:x}\", 1i64) == \"1\");\n-    assert!(format!(\"{:X}\", 1isize) == \"1\");\n-    assert!(format!(\"{:X}\", 1i8) == \"1\");\n-    assert!(format!(\"{:X}\", 1i16) == \"1\");\n-    assert!(format!(\"{:X}\", 1i32) == \"1\");\n-    assert!(format!(\"{:X}\", 1i64) == \"1\");\n-    assert!(format!(\"{:o}\", 1isize) == \"1\");\n-    assert!(format!(\"{:o}\", 1i8) == \"1\");\n-    assert!(format!(\"{:o}\", 1i16) == \"1\");\n-    assert!(format!(\"{:o}\", 1i32) == \"1\");\n-    assert!(format!(\"{:o}\", 1i64) == \"1\");\n+    assert_eq!(format!(\"{}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{}\", -1isize), \"-1\");\n+    assert_eq!(format!(\"{}\", -1i8), \"-1\");\n+    assert_eq!(format!(\"{}\", -1i16), \"-1\");\n+    assert_eq!(format!(\"{}\", -1i32), \"-1\");\n+    assert_eq!(format!(\"{}\", -1i64), \"-1\");\n+    assert_eq!(format!(\"{:?}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1i64), \"1\");\n \n-    assert!(format!(\"{}\", 1usize) == \"1\");\n-    assert!(format!(\"{}\", 1u8) == \"1\");\n-    assert!(format!(\"{}\", 1u16) == \"1\");\n-    assert!(format!(\"{}\", 1u32) == \"1\");\n-    assert!(format!(\"{}\", 1u64) == \"1\");\n-    assert!(format!(\"{:?}\", 1usize) == \"1\");\n-    assert!(format!(\"{:?}\", 1u8) == \"1\");\n-    assert!(format!(\"{:?}\", 1u16) == \"1\");\n-    assert!(format!(\"{:?}\", 1u32) == \"1\");\n-    assert!(format!(\"{:?}\", 1u64) == \"1\");\n-    assert!(format!(\"{:b}\", 1usize) == \"1\");\n-    assert!(format!(\"{:b}\", 1u8) == \"1\");\n-    assert!(format!(\"{:b}\", 1u16) == \"1\");\n-    assert!(format!(\"{:b}\", 1u32) == \"1\");\n-    assert!(format!(\"{:b}\", 1u64) == \"1\");\n-    assert!(format!(\"{:x}\", 1usize) == \"1\");\n-    assert!(format!(\"{:x}\", 1u8) == \"1\");\n-    assert!(format!(\"{:x}\", 1u16) == \"1\");\n-    assert!(format!(\"{:x}\", 1u32) == \"1\");\n-    assert!(format!(\"{:x}\", 1u64) == \"1\");\n-    assert!(format!(\"{:X}\", 1usize) == \"1\");\n-    assert!(format!(\"{:X}\", 1u8) == \"1\");\n-    assert!(format!(\"{:X}\", 1u16) == \"1\");\n-    assert!(format!(\"{:X}\", 1u32) == \"1\");\n-    assert!(format!(\"{:X}\", 1u64) == \"1\");\n-    assert!(format!(\"{:o}\", 1usize) == \"1\");\n-    assert!(format!(\"{:o}\", 1u8) == \"1\");\n-    assert!(format!(\"{:o}\", 1u16) == \"1\");\n-    assert!(format!(\"{:o}\", 1u32) == \"1\");\n-    assert!(format!(\"{:o}\", 1u64) == \"1\");\n+    assert_eq!(format!(\"{}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1u64), \"1\");\n \n     // Test a larger number\n-    assert!(format!(\"{:b}\", 55) == \"110111\");\n-    assert!(format!(\"{:o}\", 55) == \"67\");\n-    assert!(format!(\"{}\", 55) == \"55\");\n-    assert!(format!(\"{:x}\", 55) == \"37\");\n-    assert!(format!(\"{:X}\", 55) == \"37\");\n+    assert_eq!(format!(\"{:b}\", 55), \"110111\");\n+    assert_eq!(format!(\"{:o}\", 55), \"67\");\n+    assert_eq!(format!(\"{}\", 55), \"55\");\n+    assert_eq!(format!(\"{:x}\", 55), \"37\");\n+    assert_eq!(format!(\"{:X}\", 55), \"37\");\n }\n \n #[test]\n fn test_format_int_zero() {\n-    assert!(format!(\"{}\", 0) == \"0\");\n-    assert!(format!(\"{:?}\", 0) == \"0\");\n-    assert!(format!(\"{:b}\", 0) == \"0\");\n-    assert!(format!(\"{:o}\", 0) == \"0\");\n-    assert!(format!(\"{:x}\", 0) == \"0\");\n-    assert!(format!(\"{:X}\", 0) == \"0\");\n+    assert_eq!(format!(\"{}\", 0), \"0\");\n+    assert_eq!(format!(\"{:?}\", 0), \"0\");\n+    assert_eq!(format!(\"{:b}\", 0), \"0\");\n+    assert_eq!(format!(\"{:o}\", 0), \"0\");\n+    assert_eq!(format!(\"{:x}\", 0), \"0\");\n+    assert_eq!(format!(\"{:X}\", 0), \"0\");\n \n-    assert!(format!(\"{}\", 0u32) == \"0\");\n-    assert!(format!(\"{:?}\", 0u32) == \"0\");\n-    assert!(format!(\"{:b}\", 0u32) == \"0\");\n-    assert!(format!(\"{:o}\", 0u32) == \"0\");\n-    assert!(format!(\"{:x}\", 0u32) == \"0\");\n-    assert!(format!(\"{:X}\", 0u32) == \"0\");\n+    assert_eq!(format!(\"{}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:?}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:b}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:o}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:x}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:X}\", 0u32), \"0\");\n }\n \n #[test]\n fn test_format_int_flags() {\n-    assert!(format!(\"{:3}\", 1) == \"  1\");\n-    assert!(format!(\"{:>3}\", 1) == \"  1\");\n-    assert!(format!(\"{:>+3}\", 1) == \" +1\");\n-    assert!(format!(\"{:<3}\", 1) == \"1  \");\n-    assert!(format!(\"{:#}\", 1) == \"1\");\n-    assert!(format!(\"{:#x}\", 10) == \"0xa\");\n-    assert!(format!(\"{:#X}\", 10) == \"0xA\");\n-    assert!(format!(\"{:#5x}\", 10) == \"  0xa\");\n-    assert!(format!(\"{:#o}\", 10) == \"0o12\");\n-    assert!(format!(\"{:08x}\", 10) == \"0000000a\");\n-    assert!(format!(\"{:8x}\", 10) == \"       a\");\n-    assert!(format!(\"{:<8x}\", 10) == \"a       \");\n-    assert!(format!(\"{:>8x}\", 10) == \"       a\");\n-    assert!(format!(\"{:#08x}\", 10) == \"0x00000a\");\n-    assert!(format!(\"{:08}\", -10) == \"-0000010\");\n-    assert!(format!(\"{:x}\", !0u8) == \"ff\");\n-    assert!(format!(\"{:X}\", !0u8) == \"FF\");\n-    assert!(format!(\"{:b}\", !0u8) == \"11111111\");\n-    assert!(format!(\"{:o}\", !0u8) == \"377\");\n-    assert!(format!(\"{:#x}\", !0u8) == \"0xff\");\n-    assert!(format!(\"{:#X}\", !0u8) == \"0xFF\");\n-    assert!(format!(\"{:#b}\", !0u8) == \"0b11111111\");\n-    assert!(format!(\"{:#o}\", !0u8) == \"0o377\");\n+    assert_eq!(format!(\"{:3}\", 1), \"  1\");\n+    assert_eq!(format!(\"{:>3}\", 1), \"  1\");\n+    assert_eq!(format!(\"{:>+3}\", 1), \" +1\");\n+    assert_eq!(format!(\"{:<3}\", 1), \"1  \");\n+    assert_eq!(format!(\"{:#}\", 1), \"1\");\n+    assert_eq!(format!(\"{:#x}\", 10), \"0xa\");\n+    assert_eq!(format!(\"{:#X}\", 10), \"0xA\");\n+    assert_eq!(format!(\"{:#5x}\", 10), \"  0xa\");\n+    assert_eq!(format!(\"{:#o}\", 10), \"0o12\");\n+    assert_eq!(format!(\"{:08x}\", 10), \"0000000a\");\n+    assert_eq!(format!(\"{:8x}\", 10), \"       a\");\n+    assert_eq!(format!(\"{:<8x}\", 10), \"a       \");\n+    assert_eq!(format!(\"{:>8x}\", 10), \"       a\");\n+    assert_eq!(format!(\"{:#08x}\", 10), \"0x00000a\");\n+    assert_eq!(format!(\"{:08}\", -10), \"-0000010\");\n+    assert_eq!(format!(\"{:x}\", !0u8), \"ff\");\n+    assert_eq!(format!(\"{:X}\", !0u8), \"FF\");\n+    assert_eq!(format!(\"{:b}\", !0u8), \"11111111\");\n+    assert_eq!(format!(\"{:o}\", !0u8), \"377\");\n+    assert_eq!(format!(\"{:#x}\", !0u8), \"0xff\");\n+    assert_eq!(format!(\"{:#X}\", !0u8), \"0xFF\");\n+    assert_eq!(format!(\"{:#b}\", !0u8), \"0b11111111\");\n+    assert_eq!(format!(\"{:#o}\", !0u8), \"0o377\");\n }\n \n #[test]\n fn test_format_int_sign_padding() {\n-    assert!(format!(\"{:+5}\", 1) == \"   +1\");\n-    assert!(format!(\"{:+5}\", -1) == \"   -1\");\n-    assert!(format!(\"{:05}\", 1) == \"00001\");\n-    assert!(format!(\"{:05}\", -1) == \"-0001\");\n-    assert!(format!(\"{:+05}\", 1) == \"+0001\");\n-    assert!(format!(\"{:+05}\", -1) == \"-0001\");\n+    assert_eq!(format!(\"{:+5}\", 1), \"   +1\");\n+    assert_eq!(format!(\"{:+5}\", -1), \"   -1\");\n+    assert_eq!(format!(\"{:05}\", 1), \"00001\");\n+    assert_eq!(format!(\"{:05}\", -1), \"-0001\");\n+    assert_eq!(format!(\"{:+05}\", 1), \"+0001\");\n+    assert_eq!(format!(\"{:+05}\", -1), \"-0001\");\n }\n \n #[test]\n fn test_format_int_twos_complement() {\n-    use core::{i8, i16, i32, i64};\n-    assert!(format!(\"{}\", i8::MIN) == \"-128\");\n-    assert!(format!(\"{}\", i16::MIN) == \"-32768\");\n-    assert!(format!(\"{}\", i32::MIN) == \"-2147483648\");\n-    assert!(format!(\"{}\", i64::MIN) == \"-9223372036854775808\");\n+    use core::{i16, i32, i64, i8};\n+    assert_eq!(format!(\"{}\", i8::MIN), \"-128\");\n+    assert_eq!(format!(\"{}\", i16::MIN), \"-32768\");\n+    assert_eq!(format!(\"{}\", i32::MIN), \"-2147483648\");\n+    assert_eq!(format!(\"{}\", i64::MIN), \"-9223372036854775808\");\n }\n \n #[test]\n fn test_format_debug_hex() {\n-    assert!(format!(\"{:02x?}\", b\"Foo\\0\") == \"[46, 6f, 6f, 00]\");\n-    assert!(format!(\"{:02X?}\", b\"Foo\\0\") == \"[46, 6F, 6F, 00]\");\n+    assert_eq!(format!(\"{:02x?}\", b\"Foo\\0\"), \"[46, 6f, 6f, 00]\");\n+    assert_eq!(format!(\"{:02X?}\", b\"Foo\\0\"), \"[46, 6F, 6F, 00]\");\n }"}]}