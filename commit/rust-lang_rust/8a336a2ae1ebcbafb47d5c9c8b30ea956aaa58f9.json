{"sha": "8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "node_id": "C_kwDOAAsO6NoAKDhhMzM2YTJhZTFlYmNiYWZiNDdkNWM5YzhiMzBlYTk1NmFhYTU4Zjk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-10T18:47:05Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-10T18:47:05Z"}, "message": "Move cached_context out of CodegenCx", "tree": {"sha": "96d369b60eaaf836b314d6382bb1bda80348fc5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d369b60eaaf836b314d6382bb1bda80348fc5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "html_url": "https://github.com/rust-lang/rust/commit/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a10da0f76898eca1ebd398748b98b205f4284297", "url": "https://api.github.com/repos/rust-lang/rust/commits/a10da0f76898eca1ebd398748b98b205f4284297", "html_url": "https://github.com/rust-lang/rust/commit/a10da0f76898eca1ebd398748b98b205f4284297"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "c68d33465bc2ac1f1ce55c9300ff60a2fa69566c", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "patch": "@@ -25,20 +25,23 @@ struct CodegenedFunction<'tcx> {\n \n pub(crate) fn codegen_and_compile_fn<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx>,\n+    cached_context: &mut Context,\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) {\n     let tcx = cx.tcx;\n     let _inst_guard =\n         crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));\n \n-    let codegened_func = codegen_fn(cx, module, instance);\n+    let cached_func = std::mem::replace(&mut cached_context.func, Function::new());\n+    let codegened_func = codegen_fn(cx, cached_func, module, instance);\n \n-    compile_fn(cx, module, codegened_func);\n+    compile_fn(cx, cached_context, module, codegened_func);\n }\n \n fn codegen_fn<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx>,\n+    cached_func: Function,\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) -> CodegenedFunction<'tcx> {\n@@ -61,11 +64,10 @@ fn codegen_fn<'tcx>(\n     let sig = get_function_sig(tcx, module.isa().triple(), instance);\n     let func_id = module.declare_function(symbol_name.name, Linkage::Local, &sig).unwrap();\n \n-    cx.cached_context.clear();\n-\n     // Make the FunctionBuilder\n     let mut func_ctx = FunctionBuilderContext::new();\n-    let mut func = std::mem::replace(&mut cx.cached_context.func, Function::new());\n+    let mut func = cached_func;\n+    func.clear();\n     func.name = ExternalName::user(0, func_id.as_u32());\n     func.signature = sig;\n     func.collect_debug_info();\n@@ -140,6 +142,7 @@ fn codegen_fn<'tcx>(\n \n fn compile_fn<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx>,\n+    cached_context: &mut Context,\n     module: &mut dyn Module,\n     codegened_func: CodegenedFunction<'tcx>,\n ) {\n@@ -148,7 +151,7 @@ fn compile_fn<'tcx>(\n     let mut clif_comments = codegened_func.clif_comments;\n \n     // Store function in context\n-    let context = &mut cx.cached_context;\n+    let context = cached_context;\n     context.clear();\n     context.func = codegened_func.func;\n "}, {"sha": "6aa2863794344ada631f40d57e86207451e620ec", "filename": "src/driver/aot.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "patch": "@@ -128,11 +128,17 @@ fn module_codegen(\n         cgu_name,\n     );\n     super::predefine_mono_items(tcx, &mut module, &mono_items);\n+    let mut cached_context = Context::new();\n     for (mono_item, _) in mono_items {\n         match mono_item {\n             MonoItem::Fn(inst) => {\n                 cx.tcx.sess.time(\"codegen fn\", || {\n-                    crate::base::codegen_and_compile_fn(&mut cx, &mut module, inst)\n+                    crate::base::codegen_and_compile_fn(\n+                        &mut cx,\n+                        &mut cached_context,\n+                        &mut module,\n+                        inst,\n+                    )\n                 });\n             }\n             MonoItem::Static(def_id) => crate::constant::codegen_static(tcx, &mut module, def_id),"}, {"sha": "1b046d7ec6e8b84abb885a62b00e972cf4d4dbec", "filename": "src/driver/jit.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "patch": "@@ -111,6 +111,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         &backend_config,\n         matches!(backend_config.codegen_mode, CodegenMode::JitLazy),\n     );\n+    let mut cached_context = Context::new();\n \n     let (_, cgus) = tcx.collect_and_partition_mono_items(());\n     let mono_items = cgus\n@@ -129,10 +130,17 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n                     CodegenMode::Aot => unreachable!(),\n                     CodegenMode::Jit => {\n                         cx.tcx.sess.time(\"codegen fn\", || {\n-                            crate::base::codegen_and_compile_fn(&mut cx, &mut jit_module, inst)\n+                            crate::base::codegen_and_compile_fn(\n+                                &mut cx,\n+                                &mut cached_context,\n+                                &mut jit_module,\n+                                inst,\n+                            )\n                         });\n                     }\n-                    CodegenMode::JitLazy => codegen_shim(&mut cx, &mut jit_module, inst),\n+                    CodegenMode::JitLazy => {\n+                        codegen_shim(&mut cx, &mut cached_context, &mut jit_module, inst)\n+                    }\n                 },\n                 MonoItem::Static(def_id) => {\n                     crate::constant::codegen_static(tcx, &mut jit_module, def_id);\n@@ -260,7 +268,12 @@ fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) ->\n                 Symbol::intern(\"dummy_cgu_name\"),\n             );\n             tcx.sess.time(\"codegen fn\", || {\n-                crate::base::codegen_and_compile_fn(&mut cx, jit_module, instance)\n+                crate::base::codegen_and_compile_fn(\n+                    &mut cx,\n+                    &mut Context::new(),\n+                    jit_module,\n+                    instance,\n+                )\n             });\n \n             assert!(cx.global_asm.is_empty());\n@@ -336,7 +349,12 @@ fn load_imported_symbols_for_jit(\n     imported_symbols\n }\n \n-fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx>, module: &mut JITModule, inst: Instance<'tcx>) {\n+fn codegen_shim<'tcx>(\n+    cx: &mut CodegenCx<'tcx>,\n+    cached_context: &mut Context,\n+    module: &mut JITModule,\n+    inst: Instance<'tcx>,\n+) {\n     let tcx = cx.tcx;\n \n     let pointer_type = module.target_config().pointer_type();\n@@ -359,8 +377,9 @@ fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx>, module: &mut JITModule, inst: In\n         )\n         .unwrap();\n \n-    cx.cached_context.clear();\n-    let trampoline = &mut cx.cached_context.func;\n+    let context = cached_context;\n+    context.clear();\n+    let trampoline = &mut context.func;\n     trampoline.signature = sig.clone();\n \n     let mut builder_ctx = FunctionBuilderContext::new();\n@@ -383,5 +402,5 @@ fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx>, module: &mut JITModule, inst: In\n     let ret_vals = trampoline_builder.func.dfg.inst_results(call_inst).to_vec();\n     trampoline_builder.ins().return_(&ret_vals);\n \n-    module.define_function(func_id, &mut cx.cached_context).unwrap();\n+    module.define_function(func_id, context).unwrap();\n }"}, {"sha": "a3f8cc4dfa35f17048d9f0f2fcbc47002d6d2961", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8a336a2ae1ebcbafb47d5c9c8b30ea956aaa58f9", "patch": "@@ -123,7 +123,6 @@ struct CodegenCx<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     global_asm: String,\n     inline_asm_index: Cell<usize>,\n-    cached_context: Context,\n     debug_context: Option<DebugContext<'tcx>>,\n     unwind_context: UnwindContext,\n     cgu_name: Symbol,\n@@ -150,7 +149,6 @@ impl<'tcx> CodegenCx<'tcx> {\n             tcx,\n             global_asm: String::new(),\n             inline_asm_index: Cell::new(0),\n-            cached_context: Context::new(),\n             debug_context,\n             unwind_context,\n             cgu_name,"}]}