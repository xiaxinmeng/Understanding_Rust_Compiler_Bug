{"sha": "66fbe4c22c9743aff642f06549ce5f503668f722", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZmJlNGMyMmM5NzQzYWZmNjQyZjA2NTQ5Y2U1ZjUwMzY2OGY3MjI=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-10-23T20:48:32Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-10-29T22:56:22Z"}, "message": "Update tests with the new diagnostic tweaks", "tree": {"sha": "85c7f8214109eedc7e328beaa772672c1d13dc49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85c7f8214109eedc7e328beaa772672c1d13dc49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66fbe4c22c9743aff642f06549ce5f503668f722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66fbe4c22c9743aff642f06549ce5f503668f722", "html_url": "https://github.com/rust-lang/rust/commit/66fbe4c22c9743aff642f06549ce5f503668f722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66fbe4c22c9743aff642f06549ce5f503668f722/comments", "author": null, "committer": null, "parents": [{"sha": "0c0365d33f2acd067156d366fd4b0c250efe7240", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0365d33f2acd067156d366fd4b0c250efe7240", "html_url": "https://github.com/rust-lang/rust/commit/0c0365d33f2acd067156d366fd4b0c250efe7240"}], "stats": {"total": 83, "additions": 43, "deletions": 40}, "files": [{"sha": "7edb4b8754a1fa90f848f8ed4f50703b6594bbaf", "filename": "src/test/compile-fail/array-not-vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let _x: int = [1i, 2, 3]; //~ ERROR expected int, found array\n+    let _x: int = [1i, 2, 3]; //~ ERROR expected int, found array of 3 elements\n \n     let x: &[int] = &[1, 2, 3];\n-    let _y: &int = x; //~ ERROR expected int, found unsized array\n+    let _y: &int = x; //~ ERROR expected int, found slice\n }"}, {"sha": "d1ae535d8309760adc58eae1e5928e97d0577e61", "filename": "src/test/compile-fail/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -16,10 +16,10 @@ struct Foo<'a,'b> {\n impl<'a,'b> Foo<'a,'b> {\n     // The number of errors is related to the way invariance works.\n     fn bar(self: Foo<'b,'a>) {}\n-    //~^ ERROR mismatched types: expected `Foo<'a,'b>`, found `Foo<'b,'a>`\n-    //~^^ ERROR mismatched types: expected `Foo<'a,'b>`, found `Foo<'b,'a>`\n-    //~^^^ ERROR mismatched types: expected `Foo<'b,'a>`, found `Foo<'a,'b>`\n-    //~^^^^ ERROR mismatched types: expected `Foo<'b,'a>`, found `Foo<'a,'b>`\n+    //~^ ERROR mismatched types: expected `Foo<'a, 'b>`, found `Foo<'b, 'a>`\n+    //~^^ ERROR mismatched types: expected `Foo<'a, 'b>`, found `Foo<'b, 'a>`\n+    //~^^^ ERROR mismatched types: expected `Foo<'b, 'a>`, found `Foo<'a, 'b>`\n+    //~^^^^ ERROR mismatched types: expected `Foo<'b, 'a>`, found `Foo<'a, 'b>`\n }\n \n fn main() {}"}, {"sha": "1c14644ec186dc50d104778c72d97dbbadaa250e", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -29,13 +29,13 @@ fn main() {\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, int> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>`, found `()`\n+    //~^ ERROR mismatched types: expected `HashMap<collections::string::String, int>`, found `()`\n     let _: HashMap<String, int, Hash<String>> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>`, found `()`\n+    //~^ ERROR mismatched types: expected `HashMap<collections::string::String, int>`, found `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, int, C> = ();\n-    //~^ ERROR mismatched types: expected `Foo<A,int>`, found `()`\n+    //~^ ERROR mismatched types: expected `Foo<A, int>`, found `()`\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();"}, {"sha": "0139a2ff7108d42652a26306e3fd10de26d9d1ec", "filename": "src/test/compile-fail/issue-13482.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -12,8 +12,8 @@ fn main() {\n   let x = [1,2];\n   let y = match x {\n     [] => None,\n-//~^ ERROR mismatched types: expected `[<generic integer #0>, ..2]`, found `[<generic #7>, ..0]`\n-//         (expected array, found array)\n+//~^ ERROR types: expected `[_#0i, ..2]`, found `[_#7, ..0]`\n+//         (expected array of 2 elements, found array of 0 elements)\n     [a,_] => Some(a)\n   };\n }"}, {"sha": "f62bccb22f3595a738ce1f062e57268083bb6260", "filename": "src/test/compile-fail/issue-16338.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -12,7 +12,7 @@ use std::raw::Slice;\n \n fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n-    //~^ ERROR mismatched types: expected `&str`, found `core::raw::Slice<<generic #3>>`\n+    //~^ ERROR mismatched types: expected `&str`, found `core::raw::Slice<_>`\n     //         (expected &-ptr, found struct core::raw::Slice)\n }\n "}, {"sha": "4890cc52c00052252cde3f392657bb4e3cc768ac", "filename": "src/test/compile-fail/issue-16401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -13,7 +13,7 @@ use std::raw::Slice;\n fn main() {\n     match () {\n         Slice { data: data, len: len } => (),\n-        //~^ ERROR mismatched types: expected `()`, found `core::raw::Slice<<generic #3>>`\n+        //~^ ERROR mismatched types: expected `()`, found `core::raw::Slice<_>`\n         //         (expected (), found struct core::raw::Slice)\n         _ => unreachable!()\n     }"}, {"sha": "a23f76bd15b26a5fcfd88e86fa9432024bd69c51", "filename": "src/test/compile-fail/issue-3680.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     match None {\n         Err(_) => ()\n-        //~^ ERROR mismatched types: expected `core::option::Option<<generic #1>>`\n-        //         , found `core::result::Result<<generic #2>,<generic #3>>`\n+        //~^ ERROR mismatched types: expected `core::option::Option<_#1>`\n+        //         , found `core::result::Result<_#2, _#3>`\n     }\n }"}, {"sha": "69bcfc019c09635830b6a92f50f85df4304a15ef", "filename": "src/test/compile-fail/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let a = if true {\n         0\n     } else if false {\n-//~^ ERROR if may be missing an else clause: expected `()`, found `<generic integer #1>`\n+//~^ ERROR if may be missing an else clause: expected `()`, found `_#1i`\n         1\n     };\n }"}, {"sha": "8311d6fd563c49393d0b5c927c254f85dbbfb01a", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -13,6 +13,6 @@\n const A: (int,int) = (4,2);\n fn main() {\n     match 42 { A => () }\n-    //~^ ERROR mismatched types: expected `<generic integer #0>`, found `(int,int)`\n+    //~^ ERROR mismatched types: expected `_#0i`, found `(int, int)`\n     //         (expected integral variable, found tuple)\n }"}, {"sha": "be7bd248614cee3f3729166f11339d2a15c272f8", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -13,32 +13,32 @@ enum A { B, C }\n fn main() {\n     match (true, false) {\n         B => (),\n-        //~^ ERROR mismatched types: expected `(bool,bool)`, found `A`\n-        //         (expected tuple, found enum A)\n+//~^ ERROR mismatched types: expected `(bool, bool)`, found `A` (expected tuple, found enum A)\n         _ => ()\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n-        //~^ ERROR mismatched types: expected `(bool,bool)`,\n-        //         found `(<generic #7>,<generic #8>,<generic #9>)`\n-        //         (expected a tuple with 2 elements, found one with 3 elements)\n+//~^ ERROR mismatched types: expected `(bool, bool)`, found `(_#9, _#10, _#11)`\n+    }\n+\n+    match (true, false) {\n+        (true, false, false) => ()\n+//~^ ERROR (expected a tuple with 2 elements, found one with 3 elements)\n     }\n \n     match (true, false) {\n         box (true, false) => ()\n-        //~^ ERROR mismatched types: expected `(bool,bool)`, found `Box<<generic #15>>`\n-        //         (expected tuple, found box)\n+//~^ ERROR mismatched types: expected `(bool, bool)`, found `Box<_>` (expected tuple, found box)\n     }\n \n     match (true, false) {\n         &(true, false) => ()\n-        //~^ ERROR mismatched types: expected `(bool,bool)`, found `&<generic #21>`\n-        //         (expected tuple, found &-ptr)\n+//~^ ERROR mismatched types: expected `(bool, bool)`, found `&_` (expected tuple, found &-ptr)\n     }\n \n \n-    let v = [('a', 'b')   //~ ERROR expected function, found `(char,char)`\n+    let v = [('a', 'b')   //~ ERROR expected function, found `(char, char)`\n              ('c', 'd'),\n              ('e', 'f')];\n "}, {"sha": "56867349065a598a5ac5a74841237d5d078afef1", "filename": "src/test/compile-fail/issue-5500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     &panic!()\n-    //~^ ERROR mismatched types: expected `()`, found `&<generic #2>` (expected (), found &-ptr)\n+    //~^ ERROR mismatched types: expected `()`, found `&_` (expected (), found &-ptr)\n }"}, {"sha": "116639f49459f6b4c716758f7b8e85b6fc8bf169", "filename": "src/test/compile-fail/issue-7092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -14,7 +14,7 @@ enum Whatever {\n fn foo(x: Whatever) {\n     match x {\n         Some(field) =>\n-//~^ ERROR: mismatched types: expected `Whatever`, found `core::option::Option<<generic #3>>`\n+//~^ ERROR: mismatched types: expected `Whatever`, found `core::option::Option<_>`\n             field.access(), //~ ERROR the type of this value must be known in this context\n     }\n }"}, {"sha": "f3915634cc1276f47609ab54b855debd5b932678", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -14,14 +14,14 @@ mod foo { pub fn bar() {} }\n \n fn main() {\n     match (true, false) {\n-        B => (), //~ ERROR expected `(bool,bool)`, found `A` (expected tuple, found enum A)\n+        B => (), //~ ERROR expected `(bool, bool)`, found `A` (expected tuple, found enum A)\n         _ => ()\n     }\n \n     match &Some(42i) {\n         Some(x) => (), //~ ERROR expected `&core::option::Option<int>`,\n-                       //        found `core::option::Option<<generic #4>>`\n+                       //        found `core::option::Option<_>`\n         None => ()     //~ ERROR expected `&core::option::Option<int>`,\n-                       //        found `core::option::Option<<generic #5>>`\n+                       //        found `core::option::Option<_>`\n     }\n }"}, {"sha": "6f032c5b1f0894aeb83a6006b027eec395f4378b", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let x: Box<HashMap<int, int>> = box HashMap::new();\n     let x: Box<Map<int, int>> = x;\n     let y: Box<Map<uint, int>> = box x;\n-    //~^ ERROR the trait `collections::Map<uint,int>` is not implemented\n+    //~^ ERROR the trait `collections::Map<uint, int>` is not implemented\n }"}, {"sha": "6bb049f3ca5e805bb21d45a2705c3029e0b1b7e0", "filename": "src/test/compile-fail/match-vec-mismatch-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     match () {\n         [()] => { }\n-//~^ ERROR mismatched types: expected `()`, found `&[<generic #1>]` (expected (), found &-ptr)\n+//~^ ERROR mismatched types: expected `()`, found `&[_]` (expected (), found &-ptr)\n     }\n }"}, {"sha": "6a1603fbfcbff6866d17c1f22fbf558d4f9a1c9b", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     let c = [0, ..true]; //~ ERROR expected positive integer for repeat count, found boolean\n     //~^ ERROR: expected `uint`, found `bool`\n     let d = [0, ..0.5]; //~ ERROR expected positive integer for repeat count, found float\n-    //~^ ERROR: expected `uint`, found `<generic float #0>`\n+    //~^ ERROR: expected `uint`, found `_#0f`\n     let e = [0, ..\"foo\"]; //~ ERROR expected positive integer for repeat count, found string\n     //~^ ERROR: expected `uint`, found `&'static str`\n     let f = [0, ..-4];"}, {"sha": "02ebbb134f0ee985ec65a6eba9bf2fa3d1ac981b", "filename": "src/test/compile-fail/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -13,7 +13,7 @@ struct Foo<T,U>(T);\n fn main() {\n     match Foo(1.1) {\n         1 => {}\n-        //~^ ERROR expected `Foo<<generic float #0>,<generic #2>>`, found `<generic integer #0>`\n+    //~^ ERROR expected `Foo<_#0f, _#2>`, found `_#0i`\n     }\n \n }"}, {"sha": "bd9f2c3632846172a31d7a3146b6dcd9c29bb4f9", "filename": "src/test/compile-fail/suppressed-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     let (x, y) = ();\n-//~^ ERROR types: expected `()`, found `(<generic #3>,<generic #4>)` (expected (), found tuple)\n+//~^ ERROR expected `()`, found `(_#3, _#4)` (expected (), found tuple)\n     return x;\n }"}, {"sha": "d0c2faed4b29d83e16da691941140c945849450d", "filename": "src/test/compile-fail/tuple-arity-mismatch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -15,4 +15,7 @@ fn first((value, _): (int, f64)) -> int { value }\n fn main() {\n     let y = first ((1,2.0,3));\n     //~^ ERROR expected a tuple with 2 elements, found one with 3 elements\n+\n+    let y = first ((1,));\n+    //~^ ERROR expected `(int, f64)`, found `(int,)`\n }"}, {"sha": "f9bf2746794ac7aca89afff162d595d3073bdb0f", "filename": "src/test/compile-fail/tuple-index-out-of-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -22,5 +22,5 @@ fn main() {\n     tuple.0;\n     tuple.1;\n     tuple.2;\n-    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(int,int)`\n+    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(int, int)`\n }"}, {"sha": "aa7b551afc56acc004da76c543c4efd0c11444e2", "filename": "src/test/compile-fail/typeck_type_placeholder_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fbe4c22c9743aff642f06549ce5f503668f722/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs?ref=66fbe4c22c9743aff642f06549ce5f503668f722", "patch": "@@ -19,11 +19,11 @@ pub fn main() {\n \n fn test1() {\n     let x: Foo<_> = Bar::<uint>;\n-    //~^ ERROR mismatched types: expected `Foo<<generic #0>>`, found `Bar<uint>`\n+    //~^ ERROR mismatched types: expected `Foo<_>`, found `Bar<uint>`\n     let y: Foo<uint> = x;\n }\n \n fn test2() {\n     let x: Foo<_> = Bar::<uint>;\n-    //~^ ERROR mismatched types: expected `Foo<<generic #0>>`, found `Bar<uint>`\n+    //~^ ERROR mismatched types: expected `Foo<_>`, found `Bar<uint>`\n }"}]}