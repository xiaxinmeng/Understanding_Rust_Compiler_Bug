{"sha": "72d2c2eab42fe8c7247e4a45b01a6e7411898443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZDJjMmVhYjQyZmU4YzcyNDdlNGE0NWIwMWE2ZTc0MTE4OTg0NDM=", "commit": {"author": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-09T15:47:11Z"}, "committer": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-14T23:40:55Z"}, "message": "Lint `push_str` with a single-character string literal\n\nFixes #5875", "tree": {"sha": "c506b2b098aa8beee3a995ee589ac490dd947ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c506b2b098aa8beee3a995ee589ac490dd947ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d2c2eab42fe8c7247e4a45b01a6e7411898443", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE2xeoiquC04hUiBqUoZMWSk0F7kQFAl83IQcACgkQoZMWSk0F\n7kRlRggAySt5SKOmY/nnwoCHZttnexiPxat8SyaiNRFiC6z4YPmAwchNemirCSpD\nnXDbWyzDjsDRI45/R8RYJjDbtgka1NDCFCEpOlKgHDQqX1FgMl8Dz0TUh1dmInYQ\nx3maLuIuVo7ZkKsFCwCI2R2CYejJ47xMkdimL6TrlTZVeTpSm6jQFcRUAhFM/WpE\nd8kbxJ4B0C/4AdolOYaAxHe1bClGjZIXdqoV2SVQYXDFMBNFjT9g3FdD4qy5HO2A\nQfENy93dsrq8uqJuMhU5RLpQQ0GESZanW08GC6ezN4lPV+tQZ0Hn53JIjz4/QNIc\nPt7slH2tBTJresV1ImHAGJZo1miPVw==\n=22Ib\n-----END PGP SIGNATURE-----", "payload": "tree c506b2b098aa8beee3a995ee589ac490dd947ecc\nparent 8ecc0fc08a9bc213beb39147ee3155a6056bd2b3\nauthor Christoph Walcher <christoph-wa@gmx.de> 1596988031 +0200\ncommitter Christoph Walcher <christoph-wa@gmx.de> 1597448455 +0200\n\nLint `push_str` with a single-character string literal\n\nFixes #5875\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d2c2eab42fe8c7247e4a45b01a6e7411898443", "html_url": "https://github.com/rust-lang/rust/commit/72d2c2eab42fe8c7247e4a45b01a6e7411898443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d2c2eab42fe8c7247e4a45b01a6e7411898443/comments", "author": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ecc0fc08a9bc213beb39147ee3155a6056bd2b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ecc0fc08a9bc213beb39147ee3155a6056bd2b3", "html_url": "https://github.com/rust-lang/rust/commit/8ecc0fc08a9bc213beb39147ee3155a6056bd2b3"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "3b9cbbf0dcd7ea4345eaea909c71ac2508920987", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d2c2eab42fe8c7247e4a45b01a6e7411898443/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/72d2c2eab42fe8c7247e4a45b01a6e7411898443/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=72d2c2eab42fe8c7247e4a45b01a6e7411898443", "patch": "@@ -1699,6 +1699,7 @@ Released 2018-09-13\n [`should_implement_trait`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n [`similar_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\n [`single_char_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\n+[`single_char_push_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_push_str\n [`single_component_path_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_component_path_imports\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n [`single_match_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else"}, {"sha": "4f261ba932ea6922c66dfffea306b260dd620cd5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72d2c2eab42fe8c7247e4a45b01a6e7411898443/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d2c2eab42fe8c7247e4a45b01a6e7411898443/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=72d2c2eab42fe8c7247e4a45b01a6e7411898443", "patch": "@@ -287,6 +287,7 @@ mod repeat_once;\n mod returns;\n mod serde_api;\n mod shadow;\n+mod single_char_push_str;\n mod single_component_path_imports;\n mod slow_vector_initialization;\n mod stable_sort_primitive;\n@@ -775,6 +776,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &shadow::SHADOW_REUSE,\n         &shadow::SHADOW_SAME,\n         &shadow::SHADOW_UNRELATED,\n+        &single_char_push_str::SINGLE_CHAR_PUSH_STR,\n         &single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n         &slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n         &stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n@@ -932,6 +934,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack});\n     store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n     store.register_late_pass(|| box strings::StringLitAsBytes);\n+    store.register_late_pass(|| box single_char_push_str::SingleCharPushStrPass);\n     store.register_late_pass(|| box derive::Derive);\n     store.register_late_pass(|| box types::CharLitAsU8);\n     store.register_late_pass(|| box vec::UselessVec);\n@@ -1416,6 +1419,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n+        LintId::of(&single_char_push_str::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(&stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n@@ -1556,6 +1560,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&regex::TRIVIAL_REGEX),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n+        LintId::of(&single_char_push_str::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(&strings::STRING_LIT_AS_BYTES),\n         LintId::of(&tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),"}, {"sha": "68bbef7261a934e647cf5eacefd8b9fbf935cd91", "filename": "clippy_lints/src/single_char_push_str.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/72d2c2eab42fe8c7247e4a45b01a6e7411898443/clippy_lints%2Fsrc%2Fsingle_char_push_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d2c2eab42fe8c7247e4a45b01a6e7411898443/clippy_lints%2Fsrc%2Fsingle_char_push_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_char_push_str.rs?ref=72d2c2eab42fe8c7247e4a45b01a6e7411898443", "patch": "@@ -0,0 +1,62 @@\n+use crate::utils::{match_def_path, paths, snippet_with_applicability, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Warns when using push_str with a single-character string literal,\n+    /// and push with a char would work fine.\n+    ///\n+    /// **Why is this bad?** This is in all probability not the intended outcome. At\n+    /// the least it hurts readability of the code.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```\n+    /// let mut string = String::new();\n+    /// string.push_str(\"R\");\n+    /// ```\n+    /// Could be written as\n+    /// ```\n+    /// let mut string = String::new();\n+    /// string.push('R');\n+    /// ```\n+    pub SINGLE_CHAR_PUSH_STR,\n+    style,\n+    \"`push_str()` used with a single-character string literal as parameter\"\n+}\n+\n+declare_lint_pass!(SingleCharPushStrPass => [SINGLE_CHAR_PUSH_STR]);\n+\n+impl<'tcx> LateLintPass<'tcx> for SingleCharPushStrPass {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(_, _, ref args, _) = expr.kind;\n+            if let [base_string, extension_string] = args;\n+            if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+            if match_def_path(cx, fn_def_id, &paths::PUSH_STR);\n+            if let ExprKind::Lit(ref lit) = extension_string.kind;\n+            if let LitKind::Str(symbol,_) = lit.node;\n+            let extension_string_val = symbol.as_str().to_string();\n+            if extension_string_val.len() == 1;\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let base_string_snippet = snippet_with_applicability(cx, base_string.span, \"_\", &mut applicability);\n+                let sugg = format!(\"{}.push({:?})\", base_string_snippet, extension_string_val.chars().next().unwrap());\n+                span_lint_and_sugg(\n+                    cx,\n+                    SINGLE_CHAR_PUSH_STR,\n+                    expr.span,\n+                    \"calling `push_str()` using a single-character string literal\",\n+                    \"consider using `push` with a character literal\",\n+                    sugg,\n+                    applicability\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "ffab0395120aa5ff237f10f10e49ab240edb4273", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d2c2eab42fe8c7247e4a45b01a6e7411898443/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d2c2eab42fe8c7247e4a45b01a6e7411898443/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=72d2c2eab42fe8c7247e4a45b01a6e7411898443", "patch": "@@ -84,6 +84,7 @@ pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n+pub const PUSH_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"push_str\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];\n pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RANGE_FROM: [&str; 3] = [\"core\", \"ops\", \"RangeFrom\"];"}, {"sha": "000ab8b8f36855fe04aa6e7e8160c56fbe86c5ce", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72d2c2eab42fe8c7247e4a45b01a6e7411898443/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d2c2eab42fe8c7247e4a45b01a6e7411898443/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=72d2c2eab42fe8c7247e4a45b01a6e7411898443", "patch": "@@ -2012,6 +2012,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"single_char_push_str\",\n+        group: \"style\",\n+        desc: \"`push_str()` used with a single-character string literal as parameter\",\n+        deprecation: None,\n+        module: \"single_char_push_str\",\n+    },\n     Lint {\n         name: \"single_component_path_imports\",\n         group: \"style\","}, {"sha": "49607c49218a2e184815015f7d77eda47d1099f4", "filename": "tests/ui/single_char_push_str.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72d2c2eab42fe8c7247e4a45b01a6e7411898443/tests%2Fui%2Fsingle_char_push_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72d2c2eab42fe8c7247e4a45b01a6e7411898443/tests%2Fui%2Fsingle_char_push_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.fixed?ref=72d2c2eab42fe8c7247e4a45b01a6e7411898443", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+#![warn(clippy::single_char_push_str)]\n+\n+fn main() {\n+    let mut string = String::new();\n+    string.push('R');\n+    string.push('\\'');\n+\n+    string.push('u');\n+}"}, {"sha": "bbeebd027b16fe9f7b047981fe523ac0d90e1ee7", "filename": "tests/ui/single_char_push_str.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72d2c2eab42fe8c7247e4a45b01a6e7411898443/tests%2Fui%2Fsingle_char_push_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d2c2eab42fe8c7247e4a45b01a6e7411898443/tests%2Fui%2Fsingle_char_push_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.rs?ref=72d2c2eab42fe8c7247e4a45b01a6e7411898443", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+#![warn(clippy::single_char_push_str)]\n+\n+fn main() {\n+    let mut string = String::new();\n+    string.push_str(\"R\");\n+    string.push_str(\"'\");\n+\n+    string.push('u');\n+}"}, {"sha": "453ec2d42f1f8c67edaaed332ee4341e5f3960df", "filename": "tests/ui/single_char_push_str.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72d2c2eab42fe8c7247e4a45b01a6e7411898443/tests%2Fui%2Fsingle_char_push_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d2c2eab42fe8c7247e4a45b01a6e7411898443/tests%2Fui%2Fsingle_char_push_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.stderr?ref=72d2c2eab42fe8c7247e4a45b01a6e7411898443", "patch": "@@ -0,0 +1,16 @@\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:6:5\n+   |\n+LL |     string.push_str(\"R\");\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('R')`\n+   |\n+   = note: `-D clippy::single-char-push-str` implied by `-D warnings`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:7:5\n+   |\n+LL |     string.push_str(\"'\");\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/'')`\n+\n+error: aborting due to 2 previous errors\n+"}]}