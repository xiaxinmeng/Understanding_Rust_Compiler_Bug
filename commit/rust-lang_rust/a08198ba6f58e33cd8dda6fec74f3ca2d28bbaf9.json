{"sha": "a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwODE5OGJhNmY1OGUzM2NkOGRkYTZmZWM3NGYzY2EyZDI4YmJhZjk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-04-23T23:57:22Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-04-23T23:57:22Z"}, "message": "Prevent unsized types being stored in variables\n\nCloses #13376.", "tree": {"sha": "26a471d8130827535fa02affc6cc68dded22078d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26a471d8130827535fa02affc6cc68dded22078d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9", "html_url": "https://github.com/rust-lang/rust/commit/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9103301726a4d91c622f8ae3d2d10ad225a0f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9103301726a4d91c622f8ae3d2d10ad225a0f65", "html_url": "https://github.com/rust-lang/rust/commit/d9103301726a4d91c622f8ae3d2d10ad225a0f65"}], "stats": {"total": 98, "additions": 85, "deletions": 13}, "files": [{"sha": "02f9309bca2459f5aba154caf6618f77172aa993", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9", "patch": "@@ -20,7 +20,7 @@ use syntax::ast::*;\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::owned_slice::OwnedSlice;\n-use syntax::print::pprust::expr_to_str;\n+use syntax::print::pprust::{expr_to_str,path_to_str};\n use syntax::{visit,ast_util};\n use syntax::visit::Visitor;\n \n@@ -63,9 +63,14 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_ty(&mut self, t: &Ty, _: ()) {\n         check_ty(self, t);\n     }\n+\n     fn visit_item(&mut self, i: &Item, _: ()) {\n         check_item(self, i);\n     }\n+\n+    fn visit_pat(&mut self, p: &Pat, _: ()) {\n+        check_pat(self, p);\n+    }\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n@@ -551,3 +556,38 @@ pub fn check_cast_for_escaping_regions(\n         }\n     }\n }\n+\n+// Ensure that `ty` has a statically known size (i.e., it has the `Sized` bound).\n+fn check_sized(tcx: &ty::ctxt, ty: ty::t, name: ~str, sp: Span) {\n+    if !ty::type_is_sized(tcx, ty) {\n+        tcx.sess.span_err(sp, format!(\"variable `{}` has dynamically sized type `{}`\",\n+                                      name, ty_to_str(tcx, ty)));\n+    }\n+}\n+\n+// Check that any variables in a pattern have types with statically known size.\n+fn check_pat(cx: &mut Context, pat: &Pat) {\n+    let var_name = match pat.node {\n+        PatWild => Some(\"_\".to_owned()),\n+        PatIdent(_, ref path, _) => Some(path_to_str(path)),\n+        _ => None\n+    };\n+\n+    match var_name {\n+        Some(name) => {\n+            let types = cx.tcx.node_types.borrow();\n+            let ty = types.find(&(pat.id as uint));\n+            match ty {\n+                Some(ty) => {\n+                    debug!(\"kind: checking sized-ness of variable {}: {}\",\n+                           name, ty_to_str(cx.tcx, *ty));\n+                    check_sized(cx.tcx, *ty, name, pat.span);\n+                }\n+                None => {} // extern fn args\n+            }\n+        }\n+        None => {}\n+    }\n+\n+    visit::walk_pat(cx, pat, ());\n+}"}, {"sha": "614b8e3a5ab67904e60ff1acaea0882b0bddca40", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9", "patch": "@@ -9,18 +9,7 @@\n // except according to those terms.\n #![feature(struct_variant)]\n \n-// Test `type` types not allowed in fields or local variables.\n-\n-/*trait T for type {}\n-\n-fn f5<type X>(x: &X) {\n-    let _: X; // ERROR local variable with dynamically sized type X\n-    let _: (int, (X, int)); // ERROR local variable with dynamically sized type (int,(X,int))\n-}\n-fn f6<type X: T>(x: &X) {\n-    let _: X; // ERROR local variable with dynamically sized type X\n-    let _: (int, (X, int)); // ERROR local variable with dynamically sized type (int,(X,int))\n-}*/\n+// Test `type` types not allowed in fields.\n \n struct S1<type X> {\n     f1: X, //~ ERROR type `f1` is dynamically sized. dynamically sized types may only appear as the"}, {"sha": "a763373e3644cde424db4afd491e9ddaf5c4f8bd", "filename": "src/test/compile-fail/unsized6.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=a08198ba6f58e33cd8dda6fec74f3ca2d28bbaf9", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test `type` local variables.\n+\n+trait T for type {}\n+\n+fn f1<type X>(x: &X) {\n+    let _: X; //~ERROR variable `_` has dynamically sized type `X`\n+    let _: (int, (X, int)); //~ERROR variable `_` has dynamically sized type `(int,(X,int))`\n+    let y: X; //~ERROR variable `y` has dynamically sized type `X`\n+    let y: (int, (X, int)); //~ERROR variable `y` has dynamically sized type `(int,(X,int))`\n+}\n+fn f2<type X: T>(x: &X) {\n+    let _: X; //~ERROR variable `_` has dynamically sized type `X`\n+    let _: (int, (X, int)); //~ERROR variable `_` has dynamically sized type `(int,(X,int))`\n+    let y: X; //~ERROR variable `y` has dynamically sized type `X`\n+    let y: (int, (X, int)); //~ERROR variable `y` has dynamically sized type `(int,(X,int))`\n+}\n+\n+fn f3<type X>(x1: ~X, x2: ~X, x3: ~X) {\n+    let y: X = *x1; //~ERROR variable `y` has dynamically sized type `X`\n+    let y = *x2; //~ERROR variable `y` has dynamically sized type `X`\n+    let (y, z) = (*x3, 4); //~ERROR variable `y` has dynamically sized type `X`\n+}\n+fn f4<type X: T>(x1: ~X, x2: ~X, x3: ~X) {\n+    let y: X = *x1;         //~ERROR variable `y` has dynamically sized type `X`\n+    let y = *x2;            //~ERROR variable `y` has dynamically sized type `X`\n+    let (y, z) = (*x3, 4); //~ERROR variable `y` has dynamically sized type `X`\n+}\n+\n+fn g1<type X>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`\n+fn g2<type X: T>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`\n+\n+pub fn main() {\n+}"}]}